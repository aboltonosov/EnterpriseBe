#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает значение параметра учетной политики.
//
// Параметры:
//  УчетнаяПолитика - Справочник - Ссылка на элемент справочника "Учетная политика"
//	ИмяПараметра - Строка - Имя параметра учетной политики, значение которого необходимо получить
//
// Возвращаемое значение:
// 	ЗначениеПараметра - Значение параметра по имени.
//
Функция ПараметрУчетнойПолитики(Знач УчетнаяПолитика, ИмяПараметра) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Справочник.УчетныеПолитикиОрганизаций КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &УчетнаяПолитика");
	
	Запрос.УстановитьПараметр("УчетнаяПолитика", УчетнаяПолитика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка[ИмяПараметра], Неопределено);
	
КонецФункции

// Функция возвращает значения параметров учетной политики, которые являются параметризируемыми значениями функциональных опций
//		(см. ресурсы регистра сведений "УчетнаяПолитикаОрганизаций")
//
// Параметры:
//  УчетнаяПолитика - Справочник - Ссылка на элемент справочника "Учетная политика"
//
// Возвращаемое значение:
// 	Выборка - ВыборкаИзРезультатаЗапроса  - Выборка параметров учетной политики.
//
Функция ПараметрыУчетнойПолитики(Знач УчетнаяПолитика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.ПрименяетсяЕНВД КАК ПлательщикЕНВД,
	|	Данные.ПрименяетсяПБУ18,
	|	Данные.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная) КАК ПрименяетсяУСН,
	|	ЛОЖЬ КАК ПрименяетсяУСНДоходыМинусРасходы
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &УчетнаяПолитика";
	
	//++ НЕ УТ
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛОЖЬ КАК ПрименяетсяУСНДоходыМинусРасходы",
		"Данные.ОбъектНалогообложенияУСН = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы) КАК ПрименяетсяУСНДоходыМинусРасходы");
	//-- НЕ УТ
	
	Запрос.УстановитьПараметр("УчетнаяПолитика", УчетнаяПолитика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка, Неопределено);
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("МетодОценкиСтоимостиТоваров");
	Результат.Добавить("СистемаНалогообложения");
	Результат.Добавить("ПрименяетсяЕНВД");
	Результат.Добавить("ПрименяетсяУчетНДСПоФактическомуИспользованию");
	Результат.Добавить("МетодНачисленияАмортизацииНУ");
	Результат.Добавить("ПрименяетсяПБУ18");
	Результат.Добавить("УчетГотовойПродукцииПоПлановойСтоимости");
	Результат.Добавить("ИспользоватьСчет40");
	Результат.Добавить("Учитывать5ПроцентныйПорог");
	Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамБУ");
	Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамНУ");
	Результат.Добавить("ПроводкиПоРаботникам");
	Результат.Добавить("ЗабалансовыйУчетТМЦВЭксплуатации");
	Результат.Добавить("ВзаимозачетЧерезСчет76");
	Результат.Добавить("ФормироватьРезервОтпусковБУ");
	Результат.Добавить("ФормироватьРезервОтпусковНУ");
	Результат.Добавить("МетодНачисленияРезерваОтпусков");
	Результат.Добавить("НормативОтчисленийВРезервОтпусков");
	Результат.Добавить("ПредельнаяВеличинаОтчисленийВРезервОтпусков");
	Результат.Добавить("ОбъектНалогообложенияУСН");
	Результат.Добавить("ДатаПереходаНаУСН");
	Результат.Добавить("УведомлениеНомерУСН");
	Результат.Добавить("УведомлениеДатаУСН");
	Результат.Добавить("СтавкаНалогаУСН");
	Результат.Добавить("БазаРаспределенияКосвенныхРасходовПоВидамДеятельности");
	Результат.Добавить("СхемаУчетаСтоимостиОСвНУ");
	Результат.Добавить("ВариантУчетаНДСПриИзмененииВидаДеятельности");
	Результат.Добавить("СтатьяРасходовНеНДС");
	Результат.Добавить("АналитикаРасходовНеНДС");
	Результат.Добавить("СтатьяРасходовЕНВД");
	Результат.Добавить("АналитикаРасходовЕНВД");
	Результат.Добавить("ПрименяетсяОсвобождениеОтУплатыНДС");
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен()
		ИЛИ Не ПолучитьФункциональнуюОпцию("ФормироватьОтчетностьПоНДС")
		ИЛИ Не ПолучитьФункциональнуюОпцию("РаспределятьНДС") Тогда
		Результат.Добавить("ПрименяетсяУчетНДСПоФактическомуИспользованию");
		Результат.Добавить("Учитывать5ПроцентныйПорог");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Результат.Добавить("МетодОценкиСтоимостиТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Результат.Добавить("ПрименяетсяПБУ18");
		Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамБУ");
		Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамНУ");
		Результат.Добавить("ФормироватьРезервОтпусковБУ");
		Результат.Добавить("МетодНачисленияРезерваОтпусков");
		Результат.Добавить("ФормироватьРезервОтпусковНУ");
		Результат.Добавить("НормативОтчисленийВРезервОтпусков");
		Результат.Добавить("ПредельнаяВеличинаОтчисленийВРезервОтпусков");
		Результат.Добавить("УчетГотовойПродукцииПоПлановойСтоимости");
		Результат.Добавить("ИспользоватьСчет40");
		Результат.Добавить("ПроводкиПоРаботникам");
		Результат.Добавить("ЗабалансовыйУчетТМЦВЭксплуатации");
		Результат.Добавить("ВзаимозачетЧерезСчет76");
		Результат.Добавить("ДатаПереходаНаУСН");
		Результат.Добавить("УведомлениеНомерУСН");
		Результат.Добавить("УведомлениеДатаУСН");
		Результат.Добавить("ОбъектНалогообложенияУСН");
		Результат.Добавить("СтавкаНалогаУСН");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования выпуска по плановой стоимости. 
//
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить признак учетной политики
// 	Период - Дата, Неопределено - Дата действия учетной политики, если Неопределено, то на текущую дату
//
// Возвращаемое значение:
// 	Результат - Булево - Значение признака
// 
Функция ИспользуетсяВыпускПоПлановойСтоимости(Организация, Период = Неопределено) Экспорт
	
	ПериодУчетнойПолитики = ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса());
	ПараметрыПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, ПериодУчетнойПолитики);
	
	Если ПараметрыПолитики <> Неопределено Тогда
		Возврат ПараметрыПолитики.УчетГотовойПродукцииПоПлановойСтоимости;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

// Обработчик обновления УП 2.2
// В учетной политике организаций заполняет базу распределения косвенных расходов по видам деятельности.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализации;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТ


// Обработчик обновления УТ 11.3.2
// В справочнике Учетные политики организаций заполняет новые реквизиты
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.ВариантУчетаНДСПриИзмененииВидаДеятельности = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ПустаяСсылка)
	//++ НЕ УТ
	|		ИЛИ УчетныеПолитикиОрганизаций.СхемаУчетаСтоимостиОСвНУ = ЗНАЧЕНИЕ(Перечисление.СхемыУчетаСтоимостиОСвНУ.ПустаяСсылка)
	|		ИЛИ УчетныеПолитикиОрганизаций.СхемаУчетаСтоимостиОСвНУ <> ЗНАЧЕНИЕ(Перечисление.СхемыУчетаСтоимостиОСвНУ.СФормированиемПР)
	|			И НЕ УчетныеПолитикиОрганизаций.ПрименяетсяПБУ18
	//-- НЕ УТ
	|";
	
	Ключи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Ключи);
	
КонецПроцедуры

// Обработчик обновления УТ 11.3.2
// В справочнике Учетные политики организаций заполняет новые реквизиты
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию2(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	ПолноеИмяСправочника = Метаданные.Справочники.УчетныеПолитикиОрганизаций.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь,
		ПолноеИмяСправочника,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка,
	|	СсылкиДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	//++ НЕ УТ
	ИспользоватьЛизинг = ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг");
	//-- НЕ УТ
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
						
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СпрОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если СпрОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если СпрОбъект.ВариантУчетаНДСПриИзмененииВидаДеятельности <> Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВСтоимость Тогда
				СпрОбъект.ВариантУчетаНДСПриИзмененииВидаДеятельности = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВСтоимость;
			КонецЕсли;
			
			//++ НЕ УТ
			Если НЕ СпрОбъект.ПрименяетсяПБУ18 И СпрОбъект.СхемаУчетаСтоимостиОСвНУ <> Перечисления.СхемыУчетаСтоимостиОСвНУ.СФормированиемПР Тогда
				СпрОбъект.СхемаУчетаСтоимостиОСвНУ = Перечисления.СхемыУчетаСтоимостиОСвНУ.СФормированиемПР;
			ИначеЕсли НЕ ЗначениеЗаполнено(СпрОбъект.СхемаУчетаСтоимостиОСвНУ) Тогда
				Если ИспользоватьЛизинг Тогда
					СпрОбъект.СхемаУчетаСтоимостиОСвНУ = Перечисления.СхемыУчетаСтоимостиОСвНУ.СФормированиемПР;
				Иначе
					СпрОбъект.СхемаУчетаСтоимостиОСвНУ = Перечисления.СхемыУчетаСтоимостиОСвНУ.СФормированиемВР; // рекомендуемая схема
				КонецЕсли;
			КонецЕсли; 
			//-- НЕ УТ
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);

			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать учетную политику организации: %Ключ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
