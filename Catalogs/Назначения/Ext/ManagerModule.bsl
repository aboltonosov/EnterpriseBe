#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет признаки назначений, исходя из их служебных реквизитов
// Параметры:
//  Назначения - Массив - массив назначений.
// Возвращаемое значение:
//  Соответствие - Ключ - назначение,
//                 Значение - Структура со свойствами:
//                            - ЭтоНазначениеДавальца - Булево - Признак, что назначение является давальческим.
//                            - ЭтоНазначениеНаправленияДеятельности - Булево - Признак, что назначение является назначением поступления товаров по направлению деятельности.
//
Функция СвойстваНазначений(Назначения) Экспорт
	
	УстановитьПРивилегированныйРежим(Истина);
	ЗначенияРеквизитовНазначений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Назначения, "НаправлениеДеятельности, Заказ, Партнер");
	
	Результат = Новый Соответствие;
	Для Каждого Элемент Из ЗначенияРеквизитовНазначений Цикл
		
		РеквизитыНазначения = Элемент.Значение;
		Если РеквизитыНазначения <> Неопределено Тогда
			
			Значение = Новый Структура();
			Значение.Вставить("ЭтоНазначениеДавальца", Ложь);
			Значение.Вставить("ЭтоНазначениеНаправленияДеятельности", Ложь);
			
			Если ЗначениеЗаполнено(РеквизитыНазначения.Партнер) Тогда
				Значение.ЭтоНазначениеДавальца = Истина;
			КонецЕсли;
			
			//++ НЕ УТКА
			Если ТипЗнч(РеквизитыНазначения.Заказ) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
				Значение.ЭтоНазначениеДавальца = Истина;
			КонецЕсли;
			//-- НЕ УТКА
			
			Если ЗначениеЗаполнено(РеквизитыНазначения.НаправлениеДеятельности) И Не ЗначениеЗаполнено(РеквизитыНазначения.Заказ) Тогда
				Значение.ЭтоНазначениеНаправленияДеятельности = Истина;
			КонецЕсли;
			
			Результат.Вставить(Элемент.Ключ, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Процедура создает назначение для направления деятельности или для заказа и генерирует ему наименование 
// или просто генерирует наименование если назначение было создано ранее
// 
// Параметры:
//   Заказ                  - ДокументСсылка              - ссылка на какой-либо заказ.
//   Назначение             - СправочникСсылка.Назначения - ссылка на назначение заказа.
//   Клиент - СправочникСсылка.Партнеры             - ссылка на партнера к которому относится назначение.
//          - СправочникСсылка.Склады               - ссылка на склад-получатель к которому относится назначение.
//          - СправочникСсылка.СтруктураПредприятия - ссылка на подразделение к которому относится назначение.
//   Номер                   - Строка                     - номер заказа.
//   Дата                    - Дата                       - дата заказа.
//   ПометкаУдаления         - Булево                     - признак пометки удаления заказа.
//   НаправлениеДеятельности - СправочникСсылка.НаправлениеДеятельности - ссылка на направление деятельности
//                                                                        к которому относится назначение.
//
Процедура СоздатьОбновитьНазначение(Заказ, Назначение, Клиент, Номер, Дата, ПометкаУдаления, НаправлениеДеятельности = Неопределено) Экспорт
	
	// Назначение - либо ссылка на назначение либо ссылка нового.
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНазначения = РеквизитыНазначения(Назначение);
	
	ПоЗаказам = Истина;
	НаправлениеДеятельностиДляЗаполнения = НаправлениеДеятельности;
	Если ЗначениеЗаполнено(Заказ) И ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		
		ВариантОбособления = Общегоназначения.ЗначениеРеквизитаОбъекта(НаправлениеДеятельности, "ВариантОбособления");
		ПоЗаказам = ВариантОбособления = Перечисления.ВариантыОбособленияПоНаправлениюДеятельности.ПоЗаказамНаправления;
		
		Если Не ЗначениеЗаполнено(ВариантОбособления) Тогда
			ПоЗаказам = Истина;
			НаправлениеДеятельностиДляЗаполнения = Справочники.НаправленияДеятельности.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоЗаказам Тогда
		
		ПредставлениеНазначения = ПредставлениеНазначения(Номер, Дата, НаправлениеДеятельностиДляЗаполнения, Заказ, Клиент);
			
		Если РеквизитыНазначения.НаправлениеДеятельности <> НаправлениеДеятельностиДляЗаполнения
			Или РеквизитыНазначения.Заказ <> Заказ
			Или РеквизитыНазначения.Наименование <> ПредставлениеНазначения
			Или РеквизитыНазначения.ПометкаУдаления <> ПометкаУдаления Тогда
			
			НазначениеОбъект = Назначение.ПолучитьОбъект();
			Если НазначениеОбъект = Неопределено Тогда
				
				НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
				НазначениеОбъект.УстановитьСсылкуНового(Назначение);
				
			КонецЕсли;
			
			НазначениеОбъект.НаправлениеДеятельности = НаправлениеДеятельностиДляЗаполнения;
			НазначениеОбъект.Заказ                   = Заказ;
			НазначениеОбъект.Наименование            = ПредставлениеНазначения;
			НазначениеОбъект.ПометкаУдаления         = ПометкаУдаления;
			НазначениеОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для формирования запроса доступных назначений
//
//	Возвращаемое значение:
//		СтруктураПараметров - Структура - текст запроса
//
Функция ПараметрыФормированияЗапросаДоступныхНазначений() Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("РежимВыбора");
	СтруктураПараметров.Вставить("ВидОперации");	
	СтруктураПараметров.Вставить("УчестьУжеПодобранные", Ложь);
	СтруктураПараметров.Вставить("ПоНесколькимТоварам", Ложь);
	СтруктураПараметров.Вставить("УпорядочитьПоДатеЗаказаНазначения", Ложь);
	СтруктураПараметров.Вставить("Источник");

	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает направления деятельности переданных назначений
// Параметры:
//  Назначения - Массив - массив назначений.
// Возвращаемое значение:
//  Соответствие - Ключ - назначение,
//                 Значение - направление деятельности.
//
Функция НаправленияДеятельностиНазначений(Назначения) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Назначения.Ссылка                  КАК Ссылка,
		|	Назначения.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Ссылка В (&Назначения)");
	Запрос.УстановитьПараметр("Назначения", Назначения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.НаправлениеДеятельности);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Шаблон настройки формы выбора назначений.
// Для отображения колонок, например "Потребность" или "В наличии" необходимо
// подключить соответствующее описание колонок с помощью метода ДобавитьОписаниеКолонок.
// 
// Возвращаемое значение:
//   - Структура - содержит ключи:
//   	* ОписанияКолонок  - Массив - структуры, определяемые методом МакетОписанияКолонок.
//   	* Заголовок        - Строка - переопределяемый заголовок формы выбора назначений.
//   	* ШаблонНазначения - Структура - отборы по поля элемента справочника Назначения.
//
// Пример функции встраивающей форму выбора назначений в документ:
// 
// 	Функция МакетФормыВыбораНазначений() Экспорт
// 		МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
// 		ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
// 		
// 		ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение");
// 		ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
// 		ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Товары.Номенклатура";
// 		ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Товары.Характеристика";
// 		ОписаниеКолонок.ПутиКДанным.Склад          = "Объект.Отправитель";
// 		
// 		Возврат МакетФормы;
// 	КонецФункции
// 
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Новый Структура();
	МакетФормы.Вставить("ОписанияКолонок", Новый Массив);
	МакетФормы.Вставить("Заголовок");
	
	МакетФормы.Вставить("ШаблоныНазначений", Новый Массив);
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает структуру, накладывающую условия на значения
// реквизитов элементов справочника Назначения.
//
// Параметры:
//  МакетФормы - Структура - определена в методе МакетФормыВыбораНазначений. Возвращаемое значение
//  						 текущей функции будет помещено в ключ "ШаблоныНазначений" макета формы.
// 
// Возвращаемое значение:
//   - Структура - 
//   	* ДвиженияПоСкладскимРегистрам - Булево - Искомое значение одноименного реквизита справочника
//   	* НаправлениеДеятельности      - СправочникСсылка.НаправленияДеятельности - Искомое значение одноименного реквизита справочника
//   	* Заказ                        - ДокументСсылка - Искомое значение одноименного реквизита справочника
//   	* Партнер                      - СправочникСсылка.Партнеры - Искомое значение одноименного реквизита справочника
//   	* Договор                      - СправочникСсылка.ДоговорыКонтрагентов - Искомое значение одноименного реквизита справочника
//   	* Собственное                  - Булево - Признак означающий что будут показаны только собственные товары
//   	* Давальческое2_1              - Булево - Признак означающий что будут показаны только давальческие товары, при производстве версии 2.1.
//   	* ДавальческаяПродукция2_2     - Булево - Признак означающий что будут показаны только давальческая продукция, при производстве версии 2.2.
//   	* ДавальческиеМатериалы2_2     - Булево - Признак означающий что будут показаны только давальческие материалы, при производстве версии 2.2.
//   	* УсловиеИспользования         - Строка - Выражение, определяющее использовать ли указанные отборы. Может быть указано как булево,
//   	                                          например "ИСТИНА", или "ЛОЖЬ", либо как выражение, например
//   	                                          "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
//   	                                          И Объект.Отправитель ССЫЛКА Справочник.Склады".
//   	* ПутьКПолюНазначение          - Строка - Поле формы Назначение, к которому относятся указанные условия. Если не указано, относится ко всем полям.
//
Функция ДобавитьШаблонНазначений(МакетФормы, ПутьКПолюНазначение = "") Экспорт
	
	ШаблонНазначения = Новый Структура();
	ШаблонНазначения.Вставить("ДвиженияПоСкладскимРегистрам");
	ШаблонНазначения.Вставить("НаправлениеДеятельности");
	ШаблонНазначения.Вставить("Заказ");
	ШаблонНазначения.Вставить("Партнер");
	ШаблонНазначения.Вставить("Договор");
	
	ШаблонНазначения.Вставить("Собственное");
	ШаблонНазначения.Вставить("Давальческое2_1");
	ШаблонНазначения.Вставить("ДавальческаяПродукция2_2");
	ШаблонНазначения.Вставить("ДавальческиеМатериалы2_2");
	
	ШаблонНазначения.Вставить("УсловиеИспользования", "ИСТИНА");
	ШаблонНазначения.Вставить("ПутьКПолюНазначение",  ПутьКПолюНазначение);
	
	МакетФормы.ШаблоныНазначений.Добавить(ШаблонНазначения);
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возвращает описание колонок, которые могут быть отображены в
// форме выбора назначений. Возвращаемая структура определена
// в методе МакетОписанияКолонок.
//
// Параметры:
//  МакетФормы			 - Структура - определена в методе МакетФормыВыбораНазначений. Возвращаемое значение
//										текущей функции будет помещено в ключ "ОписанияКолонок" макета формы.
//  ИсточникДанных		 - Строка - признак, определяющий по каким правилам заполнять макет описания колонок.
//  ДобавитьСторно		 - Булево - признак, определяющий включать ли в текст запроса сторнирование по регистратору.
//  ПутьКПолюНазначение	 - Строка - путь к полю Назначение, например "Объект.Товары.Назначение".
//  Префикс				 - Строка - если используется одновременно два одинаковых источника данных, необходимо заполнить
//									это поле, т.о. задав возвращаемому значению уникальный идентификатор
// 
// Возвращаемое значение:
//   - Структура - состав определен в методе МакетОписанияКолонок.
//
Функция ДобавитьОписаниеКолонок(МакетФормы, ИсточникДанных, ДобавитьСторно, ПутьКПолюНазначение, Префикс = "") Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ИсточникДанных = "ОбеспечениеЗаказов" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказов(МакетФормы, ДобавитьСторно, Префикс);
		
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовРаботами" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовРаботами(МакетФормы, ДобавитьСторно, Префикс);
		
	ИначеЕсли ИсточникДанных = "ОбеспечениеЗаказовВсеСклады" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеОбеспечениеЗаказовВсеСклады(МакетФормы, ДобавитьСторно, Префикс);
		
//++ НЕ УТКА
	ИначеЕсли ИсточникДанных = "МатериалыИРаботыВПроизводстве" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеМатериалыИРаботыВПроизводстве(МакетФормы, ДобавитьСторно, Префикс);
//-- НЕ УТКА
		
	ИначеЕсли ИсточникДанных = "ВсеНазначения" Тогда
		
		ВозвращаемоеЗначение = ДобавитьОписаниеВсеНазначения(МакетФормы);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Источник данных ""%1"" не предусмотрен.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИсточникДанных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ВозвращаемоеЗначение.ПутьКПолюНазначение = ПутьКПолюНазначение;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Источник")
		И Параметры.Свойство("ПутьКПолюНазначение") Тогда
		
		НазначенияВызовСервера.НазначенияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли Параметры.Свойство("НаправлениеДеятельности")
		И ЗначениеЗаполнено(Параметры.НаправлениеДеятельности) Тогда
		
		Параметры.Отбор.Вставить("НаправлениеДеятельности", Параметры.НаправлениеДеятельности);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("ОткрытьСвязанныйОбъект") 
			И Параметры.ОткрытьСвязанныйОбъект Тогда
			
			Назначение = Параметры.Ключ;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	Назначение.Заказ КАК Заказ,
			|	Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности
			|ИЗ
			|	Справочник.Назначения КАК Назначение
			|ГДЕ
			|	Назначение.Ссылка = &Назначение";
			Запрос.УстановитьПараметр("Назначение", Назначение);
			
			РеквизитыНазначения = Запрос.Выполнить().Выбрать();
			РеквизитыНазначения.Следующий();
			
			Если ЗначениеЗаполнено(РеквизитыНазначения.Заказ) Тогда
				
				СтандартнаяОбработка = Ложь;
				
				Параметры.Ключ = РеквизитыНазначения.Заказ;
				МетаданныеЗаказа = РеквизитыНазначения.Заказ.Метаданные();
				ВыбраннаяФорма = МетаданныеЗаказа.ОсновнаяФормаОбъекта;
				
			ИначеЕсли ЗначениеЗаполнено(РеквизитыНазначения.НаправлениеДеятельности) Тогда
				
				СтандартнаяОбработка = Ложь;
				
				Параметры.Ключ = РеквизитыНазначения.НаправлениеДеятельности;
				ВыбраннаяФорма = Метаданные.Справочники.НаправленияДеятельности.ОсновнаяФормаОбъекта;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция НазначениеЗаказа(Ссылка, НаправлениеДеятельности) Экспорт
	
	Назначение = Справочники.Назначения.ПустаяСсылка();
	НаправлениеДляПоиска = Справочники.НаправленияДеятельности.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаправлениеДеятельности, "Назначение,ВариантОбособления");
		Если Реквизиты <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Реквизиты.Назначение) Тогда
				Назначение = Реквизиты.Назначение;
			КонецЕсли;
			
			Если Реквизиты.ВариантОбособления = Перечисления.ВариантыОбособленияПоНаправлениюДеятельности.ПоЗаказамНаправления Тогда
				НаправлениеДляПоиска = НаправлениеДеятельности;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Назначение) И ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка КАК Назначение
			|ИЗ
			|	Справочник.Назначения КАК Таблица
			|ГДЕ
			|	Таблица.НаправлениеДеятельности = &НаправлениеДеятельности
			|	И Таблица.Заказ = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДляПоиска);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Назначение = Выборка.Назначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции

Функция РеквизитыНазначения(Назначение)
	
	Результат = Новый Структура("Наименование, ПометкаУдаления, НаправлениеДеятельности, Заказ, ВариантОбособления", "", Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Наименование            КАК Наименование,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.Заказ                   КАК Заказ,
		|	Т.ПометкаУдаления         КАК ПометкаУдаления,
		|	ТаблицаНаправления.ВариантОбособления КАК ВариантОбособления
		|ИЗ
		|	Справочник.Назначения КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК ТаблицаНаправления
		|		ПО ТаблицаНаправления.Ссылка = Т.НаправлениеДеятельности
		|ГДЕ
		|	Т.Ссылка = &Назначение
		|");
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(Результат, Выборка, "Наименование, ПометкаУдаления");
		
		Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
			Результат.Заказ = Выборка.Заказ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НаправлениеДеятельности) Тогда
			Результат.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			Результат.ВариантОбособления = Выборка.ВариантОбособления;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНазначения(Номер, Дата, НаправлениеДеятельности, Заказ, Клиент)
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Номер);
		ДанныеЗаказа = Новый Структура("Представление, Номер", Строка(Заказ), Номер);
		ПредставлениеЗаказа = ОбщегоНазначенияУТКлиентСервер.ПредставлениеОбъектаИзПредставленияСсылки(ДанныеЗаказа);
		
		Если ЗначениеЗаполнено(НаправлениеДеятельности) И ЗначениеЗаполнено(Клиент) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Клиент%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%)'");
		ИначеЕсли ЗначениеЗаполнено(НаправлениеДеятельности) И Не ЗначениеЗаполнено(Клиент) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%)'");
		ИначеЕсли Не ЗначениеЗаполнено(НаправлениеДеятельности) И ЗначениеЗаполнено(Клиент) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Клиент%, %Номер%, %Дата% (%ПредставлениеЗаказа%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru = '%Номер%, %Дата% (%ПредставлениеЗаказа%)'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Клиент%",                  Клиент);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПредставлениеЗаказа%",     ПредставлениеЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Номер%",                   НомерЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Дата%",                    Формат(Дата, "ДЛФ=D"));
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", НаправлениеДеятельности);
		
	Иначе
		
		ПредставлениеНазначения = Строка(НаправлениеДеятельности);
		
	КонецЕсли;
	
	Возврат ПредставлениеНазначения;
	
КонецФункции

Функция ПредставлениеНазначенияДокумента(КлючевыеПоля, РеквизитыДокумента) Экспорт
	
	ПредставлениеНазначения = Неопределено;
	
	Если ЗначениеЗаполнено(КлючевыеПоля.Заказ) И Не ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
		ДанныеЗаказа = Новый Структура("Представление, Номер", Строка(КлючевыеПоля.Заказ), РеквизитыДокумента.Номер);
		ПредставлениеЗаказа = ОбщегоНазначенияУТКлиентСервер.ПредставлениеОбъектаИзПредставленияСсылки(ДанныеЗаказа);
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru = '%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%)'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              РеквизитыДокумента.Партнер);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПредставлениеЗаказа%",     ПредставлениеЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Номер%",                   НомерЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Дата%",                    Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Заказ) И ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
		ДанныеЗаказа = Новый Структура("Представление, Номер", Строка(КлючевыеПоля.Заказ), РеквизитыДокумента.Номер);
		ПредставлениеЗаказа = ОбщегоНазначенияУТКлиентСервер.ПредставлениеОбъектаИзПредставленияСсылки(ДанныеЗаказа);
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %НаправлениеДеятельности%, %ПартнерДоговор%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru = '%Получатель%, %Номер%, %Дата% (%ПредставлениеЗаказа%, %ПартнерДоговор%)'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              РеквизитыДокумента.Партнер);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПредставлениеЗаказа%",     ПредставлениеЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Номер%",                   НомерЗаказа);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Дата%",                    Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%ПартнерДоговор%",          ?(ЗначениеЗаполнено(КлючевыеПоля.Договор), КлючевыеПоля.Договор, КлючевыеПоля.Партнер));
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Договор) Тогда
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Получатель% (%НаправлениеДеятельности%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru = '%Получатель%'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              КлючевыеПоля.Договор);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		
	ИначеЕсли ЗначениеЗаполнено(КлючевыеПоля.Партнер) Тогда
		
		Если ЗначениеЗаполнено(КлючевыеПоля.НаправлениеДеятельности) Тогда
			ПредставлениеНазначения = НСтр("ru = '%Получатель%, (%НаправлениеДеятельности%)'");
		Иначе
			ПредставлениеНазначения = НСтр("ru = '%Получатель%'");
		КонецЕсли;
		
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%Получатель%",              КлючевыеПоля.Партнер);
		ПредставлениеНазначения = СтрЗаменить(ПредставлениеНазначения, "%НаправлениеДеятельности%", КлючевыеПоля.НаправлениеДеятельности);
		
	Иначе
		
		ПредставлениеНазначения = Строка(КлючевыеПоля.НаправлениеДеятельности);
		
	КонецЕсли;
	
	Возврат ПредставлениеНазначения;
	
КонецФункции

// Возвращает текст запроса доступных назначений по остаткам в ячейке
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначенийПоОстаткамВЯчейке(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистраТоварыВЯчейках.Номенклатура КАК Номенклатура,
	|	ДанныеРегистраТоварыВЯчейках.Характеристика КАК Характеристика,
	|	Назначения.Ссылка КАК Назначение,
	|	СУММА(ДанныеРегистраТоварыВЯчейках.Потребность) КАК Потребность,
	|	СУММА(ДанныеРегистраТоварыВЯчейках.Потребность) - МАКСИМУМ(ЕСТЬNULL(ДанныеДокумента.Количество, 0)) КАК Остаток,
	|	СУММА(0) КАК Обеспечено,
	|	Назначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|		ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|		ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК Потребность
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Характеристика = &Характеристика
	|					И Номенклатура В (&Номенклатура)
	|					И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					И Ячейка = &Ячейка) КАК ТоварыВЯчейкахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВЯчейках.Номенклатура,
	|		ТоварыВЯчейках.Характеристика,
	|		ТоварыВЯчейках.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыВЯчейках.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыВЯчейках.КОтбору
	|			ИНАЧЕ ТоварыВЯчейках.ВНаличии
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках КАК ТоварыВЯчейках
	|	ГДЕ
	|		ТоварыВЯчейках.Номенклатура В (&Номенклатура)
	|		И ТоварыВЯчейках.Характеристика = &Характеристика
	|		И ТоварыВЯчейках.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ТоварыВЯчейках.Регистратор = &Регистратор) КАК ДанныеРегистраТоварыВЯчейках
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДокументаСгруппированные КАК ДанныеДокумента
	|		ПО ДанныеРегистраТоварыВЯчейках.Номенклатура = ДанныеДокумента.Номенклатура
	|			И ДанныеРегистраТоварыВЯчейках.Характеристика = ДанныеДокумента.Характеристика
	|			И ДанныеРегистраТоварыВЯчейках.Назначение = ДанныеДокумента.Назначение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ДанныеРегистраТоварыВЯчейках.Назначение = Назначения.Ссылка
	|ГДЕ
	|	ДанныеРегистраТоварыВЯчейках.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ДанныеРегистраТоварыВЯчейках.Назначение.ДвиженияПоСкладскимРегистрам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистраТоварыВЯчейках.Номенклатура,
	|	ДанныеРегистраТоварыВЯчейках.Характеристика,
	|	Назначения.Ссылка";
	
	Если ПараметрыФормированияЗапроса.УчестьУжеПодобранные Тогда
		// Запрос не для динамических списков
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыДокумента.Номенклатура,
		|	ТоварыДокумента.Характеристика,
		|	ТоварыДокумента.Назначение,
		|	ТоварыДокумента.Количество
		|ПОМЕСТИТЬ ТаблицаТоваровДокумента
		|ИЗ
		|	&ТоварыДокумента КАК ТоварыДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика КАК Характеристика,
		|	ТаблицаТоваровДокумента.Назначение КАК Назначение,
		|	СУММА(ТаблицаТоваровДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыДокументаСгруппированные
		|ИЗ
		|	ТаблицаТоваровДокумента КАК ТаблицаТоваровДокумента
		|ГДЕ
		|	ТаблицаТоваровДокумента.Номенклатура В (&Номенклатура) И ТаблицаТоваровДокумента.Характеристика = &Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваровДокумента.Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика,
		|	ТаблицаТоваровДокумента.Назначение
		|;" + ТекстЗапроса;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТоварыДокументаСгруппированные", "(" +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Номенклатура,
			|	ИСТИНА КАК Характеристика,
			|	ИСТИНА КАК Назначение,
			|	0 КАК Количество" + ")");
	КонецЕсли;

	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Назначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса необеспеченных назначений с количественными характеристиками 
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаНеобеспеченныхНазначенийОбеспечено(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Назначения.Ссылка КАК Назначение,
	|	Назначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|	СУММА(НазначениеОстатки.Потребность) КАК Потребность,
	|	СУММА(НазначениеОстатки.КЗаказу) КАК КЗаказу,
	|	СУММА(НазначениеОстатки.Обеспечено) КАК Обеспечено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияПоНазначениям.Назначение КАК Назначение,
	|		ДвиженияПоНазначениям.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.ПотребностьОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечениюПриход)) КАК Потребность,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.КЗаказуОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечению)) КАК КЗаказу,
	|		ЕСТЬNULL(МАКСИМУМ(ДвиженияПоНазначениям.НаличиеПодЗаказОстаток), СУММА(ДвиженияПоНазначениям.ДвиженияРаботКОбеспечениюРасход)) КАК Обеспечено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СправочникНазначения.Ссылка КАК Назначение,
	|			СправочникНазначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|			ОстаткиТоваров.ПотребностьОстаток КАК ПотребностьОстаток,
	|			ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ДвиженияРаботКОбеспечениюПриход,
	|			ОстаткиТоваров.КЗаказуОстаток КАК КЗаказуОстаток,
	|			ДвиженияРабот.КОбеспечению КАК ДвиженияРаботКОбеспечению,
	|			ОстаткиТоваров.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказОстаток,
	|			ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ДвиженияРаботКОбеспечениюРасход
	|		ИЗ
	|			Справочник.Назначения КАК СправочникНазначения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|						,
	|						НЕ &ЭтоРабота
	|							И (Номенклатура В (&Номенклатура))
	|							И Склад = &Склад
	|							И Характеристика = &Характеристика) КАК ОстаткиТоваров
	|				ПО СправочникНазначения.Ссылка = ОстаткиТоваров.Назначение
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ДвиженияРабот
	|				ПО (&ЭтоРабота)
	|					И (ДвиженияРабот.Номенклатура В (&Номенклатура))
	|					И (ДвиженияРабот.Подразделение = &Подразделение)
	|					И (ДвиженияРабот.Характеристика = &Характеристика)
	|					И СправочникНазначения.Ссылка = ДвиженияРабот.Назначение
	|		ГДЕ
	|			(СправочникНазначения.Ссылка = &Назначение
	|					ИЛИ ОстаткиТоваров.ПотребностьОстаток <> 0
	|					ИЛИ ОстаткиТоваров.КЗаказуОстаток <> 0
	|					ИЛИ &ЭтоРабота
	|						И ДвиженияРабот.КОбеспечению <> 0)) КАК ДвиженияПоНазначениям
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДвиженияПоНазначениям.Назначение,
	|		ДвиженияПоНазначениям.ДвиженияПоСкладскимРегистрам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СправочникНазначения.Ссылка,
	|		СправочникНазначения.ДвиженияПоСкладскимРегистрам,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.Потребность
	|				ИНАЧЕ ОбеспечениеЗаказов.Потребность
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ -ДвиженияРабот.КОбеспечению
	|			КОНЕЦ),
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.КЗаказу
	|				ИНАЧЕ ОбеспечениеЗаказов.КЗаказу
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ ДвиженияРабот.КОбеспечению
	|			КОНЕЦ),
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -ОбеспечениеЗаказов.НаличиеПодЗаказ
	|				ИНАЧЕ ОбеспечениеЗаказов.НаличиеПодЗаказ
	|			КОНЕЦ, ВЫБОР
	|				КОГДА ДвиженияРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДвиженияРабот.КОбеспечению
	|				ИНАЧЕ ДвиженияРабот.КОбеспечению
	|			КОНЕЦ)
	|	ИЗ
	|		Справочник.Назначения КАК СправочникНазначения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|			ПО (НЕ &ЭтоРабота)
	|				И (ОбеспечениеЗаказов.Номенклатура В (&Номенклатура))
	|				И (ОбеспечениеЗаказов.Характеристика = &Характеристика)
	|				И (ОбеспечениеЗаказов.Регистратор = &Регистратор)
	|				И СправочникНазначения.Ссылка = ОбеспечениеЗаказов.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ДвиженияРабот
	|			ПО (&ЭтоРабота)
	|				И (ДвиженияРабот.Номенклатура В (&Номенклатура))
	|				И (ДвиженияРабот.Характеристика = &Характеристика)
	|				И (ДвиженияРабот.Подразделение = &Подразделение)
	|				И (ОбеспечениеЗаказов.Регистратор = &Регистратор)
	|				И СправочникНазначения.Ссылка = ДвиженияРабот.Назначение
	|	ГДЕ
	|		(ДвиженияРабот.КОбеспечению <> 0
	|				ИЛИ ОбеспечениеЗаказов.Потребность <> 0
	|				ИЛИ ОбеспечениеЗаказов.КЗаказу <> 0
	|				ИЛИ ОбеспечениеЗаказов.НаличиеПодЗаказ <> 0)) КАК НазначениеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО НазначениеОстатки.Назначение = Назначения.Ссылка
	|
	//++ НЕ УТКА
	|ГДЕ
	|	НЕ Назначения.Заказ Ссылка Документ.ЗаказДавальца
	|	И Назначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) Или &ВключатьЗаказыДавальцев
	//-- НЕ УТКА
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Ссылка,
	|	Назначения.ДвиженияПоСкладскимРегистрам";
	
	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Назначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса остатков обособленного обеспечения на складе-отправителе и складе-получателе.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаНазначенийРасширенный() Экспорт

	ТекстЗапроса =
		// Остатки назначения товара по распоряжению.
		"ВЫБРАТЬ
		|	СпрНазначения.Ссылка КАК Назначение,
		|
		|	СУММА(Набор.НаличиеПодЗаказ)       КАК ВНаличииОтправитель,
		|	СУММА(Набор.Количество)            КАК Количество,
		|	СУММА(Набор.КЗаказу)               КАК Потребность
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		Таблица.КПоступлениюОстаток    КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.КПоступлениюОстаток    КАК Потребность,
		|		Таблица.КПоступлениюОстаток    КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Остатки(,
		|			ДокументПоступления = &Распоряжение
		|			И(&ПоВсейНоменклатуре ИЛИ(
		|				Номенклатура     = &Номенклатура
		|				И Характеристика = &Характеристика))
		|			И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребности.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.ПотребностьОстаток     КАК Потребность,
		|		Таблица.КЗаказуОстаток         КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			НЕ &ПоРаспоряжению
		|			И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|				ИЛИ &ПоВсейНоменклатуре И Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ &ПоВсейНоменклатуре И(
		|				Номенклатура                 = &Номенклатура
		|				И Характеристика             = &Характеристика
		|				И (&ПоВсемСкладам ИЛИ &Склад = Склад)))
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Толкающие направления деятельности.
		|	ВЫБРАТЬ
		|		Таблица.Назначение  КАК Назначение,
		|		0                   КАК Количество,
		|		0                   КАК НаличиеПодЗаказ,
		|		0                   КАК Потребность,
		|		0                   КАК КЗаказу
		|	ИЗ
		|		Справочник.НаправленияДеятельности КАК Таблица
		|	ГДЕ
		|		Таблица.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом)
		|		И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНаправленияДеятельности.Используется)
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно потребностей по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		ВЫБОР КОГДА &ПоРаспоряжению ТОГДА
		|					Таблица.НаличиеПодЗаказ
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ                      КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.Потребность
		|				ИНАЧЕ
		|					Таблица.Потребность
		|			КОНЕЦ                      КАК Потребность,
		|
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КЗаказу
		|				ИНАЧЕ
		|					Таблица.КЗаказу
		|			КОНЕЦ                      КАК КЗаказу
		|
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|	ГДЕ
		|		Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|			ИЛИ &ПоВсейНоменклатуре И Таблица.Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ &ПоВсейНоменклатуре И(
		|			Таблица.Номенклатура                 = &Номенклатура
		|			И Таблица.Характеристика            = &Характеристика
		|			И (&ПоВсемСкладам ИЛИ Таблица.Склад = &Склад)))
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребности в работах.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		Таблица.КОбеспечениюОстаток    КАК Потребность,
		|		Таблица.КОбеспечениюОстаток    КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|			НЕ &ПоРаспоряжению
		|			И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|				ИЛИ &ПоВсейНоменклатуре И Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|				ИЛИ НЕ &ПоВсейНоменклатуре И(
		|				Номенклатура                 = &Номенклатура
		|				И Характеристика             = &Характеристика))
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно потребностей в работах по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		0                              КАК Количество,
		|		0                              КАК НаличиеПодЗаказ,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КОбеспечению
		|				ИНАЧЕ
		|					Таблица.КОбеспечению
		|			КОНЕЦ                      КАК Потребность,
		|
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.КОбеспечению
		|				ИНАЧЕ
		|					Таблица.КОбеспечению
		|			КОНЕЦ                     КАК КЗаказу
		|
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами КАК Таблица
		|	ГДЕ
		|		Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И (&ПоВсейНоменклатуре И НЕ &ТолькоТолкающиеНаправления
		|			ИЛИ &ПоВсейНоменклатуре И Таблица.Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ &ПоВсейНоменклатуре И(
		|			Таблица.Номенклатура                 = &Номенклатура
		|			И Таблица.Характеристика            = &Характеристика))
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Наличие у отправителя.
		|	ВЫБРАТЬ
		|		Таблица.Назначение             КАК Назначение,
		|		0                              КАК Количество,
		|		Таблица.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказ,
		|		0                              КАК Потребность,
		|		0                              КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(, &ПоНаличиюУОтправителя
		|			И Номенклатура = &Номенклатура И Характеристика = &Характеристика И Склад = &СкладОтправитель
		|			И &ПодстановкаОтборПоРеквизитам) КАК Таблица
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно наличия по документу.
		|	ВЫБРАТЬ
		|
		|		Таблица.Назначение             КАК Назначение,
		|
		|		0                              КАК Количество,
		|		ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					-Таблица.НаличиеПодЗаказ
		|				ИНАЧЕ
		|					Таблица.НаличиеПодЗаказ
		|			КОНЕЦ                      КАК НаличиеПодЗаказ,
		|
		|		0                              КАК Потребность,
		|		0                              КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|	ГДЕ
		|		&ПоНаличиюУОтправителя
		|		И Таблица.Регистратор = &Регистратор
		|		И Таблица.Активность
		|
		|		И Таблица.Номенклатура   = &Номенклатура
		|		И Таблица.Характеристика = &Характеристика
		|		И Таблица.Склад          = &СкладОтправитель
		|		И &ПодстановкаОтборПоРеквизитамВТаблице
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		&НазначениеДавальца,
		|		0,
		|		0,
		|		0,
		|		1
		|	
		|	ГДЕ
		|		&НазначениеДавальца <> Неопределено
		|		И &ПоВсейНоменклатуре
		|
		//++ НЕ УТКА
		// Назначения давальца (нужны так как в РН Обеспечение заказов его может не быть, если в заказе давальца материал под него не поступал).
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Назначение.Ссылка,
		|		0,
		|		0,
		|		0,
		|		1
		|	ИЗ
		|		Справочник.Назначения КАК Назначение
		|	ГДЕ
		|		&ПоВсейНоменклатуре
		|		И Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		И Назначение.Заказ = НЕОПРЕДЕЛЕНО
		|		И НЕ &ПоРаспоряжению
		|		И &ПодстановкаОтборПоРеквизитам
		|	
		//-- НЕ УТКА
		|) КАК Набор
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО Набор.Назначение = СпрНазначения.Ссылка
		|		 И (НЕ &ТолькоСкладскиеНазначения ИЛИ СпрНазначения.ДвиженияПоСкладскимРегистрам)
		//++ НЕ УТКА
		|		И (НЕ Набор.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца ИЛИ &ВключатьЗаказыДавальцев)
		|		И (НЕ Набор.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
		|			ИЛИ НЕ &ТолькоДавальцы2_2
		|			ИЛИ &ТолькоДавальцы2_2 И Набор.Назначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		//-- НЕ УТКА
		|ГДЕ
		|	(&НазначениеДавальца <> Неопределено И &ПоВсейНоменклатуре) ИЛИ НЕ СпрНазначения.Ссылка ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	СпрНазначения.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0 И &ПоРаспоряжению
		|	ИЛИ СУММА(Набор.КЗаказу) > 0
		|	ИЛИ &ПоВсейНоменклатуре И (
		|		СУММА(Набор.Потребность) <> 0 И НЕ &ТолькоТолкающиеНаправления
		|		ИЛИ СпрНазначения.Заказ = НЕОПРЕДЕЛЕНО)
		|	ИЛИ &ПоНаличиюУОтправителя И СУММА(Набор.НаличиеПодЗаказ) > 0";
		
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает текст запроса всех назначений по данной номенклатуре и характеристике
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаВсехНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНазначения.Ссылка КАК Назначение,
	|	СправочникНазначения.ДвиженияПоСкладскимРегистрам КАК ДвиженияПоСкладскимРегистрам,
	|	СправочникНазначения.ВерсияДанных КАК ВерсияДанных,
	|	СправочникНазначения.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникНазначения.Предопределенный КАК Предопределенный,
	|	СправочникНазначения.Наименование КАК Наименование
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СправочникНазначения
	|		ПО (ОбеспечениеЗаказов.Назначение = СправочникНазначения.Ссылка)
	|			И (ОбеспечениеЗаказов.Номенклатура = &Номенклатура)
	|			И (ОбеспечениеЗаказов.Характеристика = &Характеристика)
	|			И (ОбеспечениеЗаказов.Склад = &Склад)
	|ГДЕ
	|	СправочникНазначения.Ссылка <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяССылка)";
	
	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНазначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает ссылку для инициализации назначения в заказе на отгрузку (например, в заказе клиента)
//
// Параметры:
//  НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - напрвление деятельности, указанное в заказе.
//
// Возвращаемое значение:
//  СправочникСсылка.Назначения - ссылка на назначение, для записи в заказ.
//
Функция ПолучитьСсылкуДляНовогоЗаказа(НаправлениеДеятельности) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаправлениеДеятельности, "Назначение");
	Если Реквизиты <> Неопределено И ЗначениеЗаполнено(Реквизиты.Назначение) Тогда
		Возврат Реквизиты.Назначение;
	Иначе
		Возврат Справочники.Назначения.ПолучитьСсылку();
	КонецЕсли;
	
КонецФункции

Функция ШаблонНового() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	Результат.Вставить("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
	Результат.Вставить("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Результат.Вставить("Заказ",                   Неопределено);
	Возврат Результат;
	
КонецФункции

Функция НайтиПоШаблону(Шаблон) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.НаправлениеДеятельности = &НаправлениеДеятельности
		|	И Таблица.Партнер               = &Партнер
		|	И Таблица.Договор               = &Договор
		|	И Таблица.Заказ                 = &Заказ";
	
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Шаблон.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Партнер",                 Шаблон.Партнер);
	Запрос.УстановитьПараметр("Договор",                 Шаблон.Договор);
	Запрос.УстановитьПараметр("Заказ",                   Шаблон.Заказ);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонИзСсылки(Ссылка)
	
	Результат = ШаблонНового();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Партнер                 КАК Партнер,
		|	Таблица.Договор                 КАК Договор,
		|	Таблица.Заказ                   КАК Заказ
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныИзСсылок(МассивСсылок) Экспорт
	
	Результат = ШаблонНового();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Партнер                 КАК Партнер,
		|	Таблица.Договор                 КАК Договор,
		|	Таблица.Заказ                   КАК Заказ
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = ШаблонНового();
		ЗаполнитьЗначенияСвойств(Шаблон, Выборка);
		Результат.Вставить(Выборка.Ссылка, Шаблон);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонЕстьЧастныйСлучайШаблона(ШаблонЧастный, ШаблонОбщий) Экспорт
	
	Для Каждого Свойство Из ШаблонОбщий Цикл
		
		Если ЗначениеЗаполнено(Свойство.Значение) И ШаблонЧастный[Свойство.Ключ] <> ШаблонОбщий[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ШаблоныРавны(Шаблон1, Шаблон2) Экспорт
	
	Для Каждого Свойство Из Шаблон1 Цикл
		
		Если Шаблон1[Свойство.Ключ] <> Шаблон2[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ПустойШаблон(Шаблон) Экспорт
	
	Возврат ШаблоныРавны(Шаблон, ШаблонНового());
	
КонецФункции

Процедура ПередЗаписьюДокумента(Назначение, ШаблонНазначения) Экспорт
	
	// Очистка некорректного назначения.
	Если ЗначениеЗаполнено(Назначение) Тогда
		
		РеквизитыНазначенияДокумента = ШаблонИзСсылки(Назначение);
		Свойства = "НаправлениеДеятельности,Партнер,Договор,Заказ";
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ШаблонНазначения, РеквизитыНазначенияДокумента, Свойства) Тогда
			Назначение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск подходящего назначения в ИБ.
	ЭтоШаблонНазначенияНовогоДокумента = ШаблонНазначения.Заказ <> Неопределено И ШаблонНазначения.Заказ.Пустая();
	Если Не ЗначениеЗаполнено(Назначение) И Не ЭтоШаблонНазначенияНовогоДокумента Тогда
		
		Назначение = НайтиПоШаблону(ШаблонНазначения);
		
	КонецЕсли;
	
	// Получение ссылки для создания нового назначения.
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		Назначение = Справочники.Назначения.ПолучитьСсылку();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДокумента(Назначение, КлючевыеПоля, ЭтотОбъект) Экспорт
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, ПометкаУдаления, Партнер");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЭтотОбъект);
	ПредставлениеНазначения = ПредставлениеНазначенияДокумента(КлючевыеПоля, РеквизитыДокумента);
	
	ОбновляемыеПоля = "Наименование, ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Назначение, ОбновляемыеПоля);
	
	Если СтруктураПолей.Наименование <> Неопределено Тогда
		
		ОбновитьПометкуУдаления = ЗначениеЗаполнено(КлючевыеПоля.Заказ) И СтруктураПолей.ПометкаУдаления <> РеквизитыДокумента.ПометкаУдаления;
		ОбновитьНаименование    = (ЗначениеЗаполнено(КлючевыеПоля.Заказ) Или ЗначениеЗаполнено(КлючевыеПоля.Партнер))
		                          И СтруктураПолей.Наименование <> ПредставлениеНазначения;
		
		Если ОбновитьПометкуУдаления Или ОбновитьНаименование Тогда
			
			НазначениеОбъект = Назначение.ПолучитьОбъект();
			
			Если ОбновитьПометкуУдаления Тогда
				НазначениеОбъект.ПометкаУдаления = РеквизитыДокумента.ПометкаУдаления;
			КонецЕсли;
			
			Если ОбновитьНаименование Тогда
				НазначениеОбъект.Наименование = ПредставлениеНазначения;
			КонецЕсли;
			НазначениеОбъект.Записать();
			
		КонецЕсли;
		
	Иначе // Это новое назначение
		
		НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
		НазначениеОбъект.УстановитьСсылкуНового(Назначение);
		
		НазначениеОбъект.НаправлениеДеятельности = КлючевыеПоля.НаправлениеДеятельности;
		НазначениеОбъект.Партнер                 = КлючевыеПоля.Партнер;
		НазначениеОбъект.Договор                 = КлючевыеПоля.Договор;
		НазначениеОбъект.Заказ                   = КлючевыеПоля.Заказ;
		НазначениеОбъект.Наименование            = ПредставлениеНазначения;
		Если ЗначениеЗаполнено(КлючевыеПоля.Заказ) Тогда
			НазначениеОбъект.ПометкаУдаления = РеквизитыДокумента.ПометкаУдаления;
		КонецЕсли;
		НазначениеОбъект.Записать();
		
	КонецЕсли;

КонецПроцедуры

#Область ВыборНазначений

Функция МакетОписанияКолонок()
	
	ОписаниеКолонок = Новый Структура();
	
	// Уникальное имя источника данных. По умолчанию равен названию источника данных.
	// Если один и тот же источник используется больше одного раза,
	// каждому из них следует указать индивидуальный префикс
	ОписаниеКолонок.Вставить("Префикс",              "");
	
	// Текст запроса источника данных
	ОписаниеКолонок.Вставить("ТекстЗапроса",         "");
	
	// Выражение, определяющее отображать ли колонки заданные текущим макетом.
	// Например "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)"
	ОписаниеКолонок.Вставить("УсловиеИспользования", "");
	
	// Признак который заполняется по определенным правилам, в методе добавления описания колонок.
	ОписаниеКолонок.Вставить("Отказ",                Ложь);
	
	// Например "Объект.Назначение", или "Объект.Товары.Назначение"
	ОписаниеКолонок.Вставить("ПутьКПолюНазначение",  "");
	
	// Пути к данным - параметры запроса, значения которых будут получены из контекста документа.
	// Ключ - имя параметра запроса, Значение - Источник значения, например "Объект.Склад".
	ОписаниеКолонок.Вставить("ПутиКДанным",          Новый Структура);
	
	// Колонки которые могут быть показаны в списке выбора.
	// Важно - порядок добавления колонок в список должен совпадать с порядком выбираемых полей в запросе.
	ОписаниеКолонок.Вставить("Колонки",              Новый СписокЗначений);
	
	// Массив имен колонок которые необходимо показать пользователю сразу при открытии формы.
	ОписаниеКолонок.Вставить("КолонкиПоУмолчанию",   Новый Массив);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеВсеНазначения(МакетФормы)
	
	Префикс = "ВсеНазначения";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления";
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказов(МакетФормы, ДобавитьСторно, Префикс = "")
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказов", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказов""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение             КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК ПрефиксВНаличии,
	|	ТаблицаОстатки.КЗаказуОстаток         КАК ПрефиксПотребность,
	|	ТаблицаОстатки.ПотребностьОстаток     КАК ПрефиксАрхивное
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		Номенклатура     = &ПрефиксНоменклатура
	|		{Характеристика  = &ПрефиксХарактеристика}
	|		И Склад          = &ПрефиксСклад) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Склад");
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Склад%";
	
	ПредставлениеПотребность     = СтрШаблон(НСтр("ru = 'Потребность на складе ""%1""'"),   ПараметрПредставления);
	ПредставлениеВНаличии        = СтрШаблон(НСтр("ru = 'В наличии на складе ""%1""'"),     ПараметрПредставления);
	ПредставлениеАрхивныеОстатки = СтрШаблон(НСтр("ru = 'Архивные остатки склада ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("ВНаличии",    ПредставлениеВНаличии,        Ложь);
	Колонки.Добавить("Потребность", ПредставлениеПотребность,     Ложь);
	Колонки.Добавить("Архивное",    ПредставлениеАрхивныеОстатки, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовВсеСклады(МакетФормы, ДобавитьСторно, Префикс = "")
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовВсеСклады", Префикс);
	
	Отказ = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов")
			Или Не(ПолучитьФункциональнуюОпцию("РазрешитьОбособлениеТоваровСверхПотребности")
					//++ НЕ УТКА
					Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
					//-- НЕ УТКА
					Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовВсеСклады""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение             КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК ПрефиксВНаличии,
	|	ТаблицаОстатки.КЗаказуОстаток         КАК ПрефиксПотребность,
	|	ТаблицаОстатки.ПотребностьОстаток     КАК ПрефиксАрхивное
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		Номенклатура     = &ПрефиксНоменклатура
	|		{Характеристика  = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("ВНаличии",    НСтр("ru = 'В наличии на всех складах'"), Ложь);
	Колонки.Добавить("Потребность", НСтр("ru = 'Потребность на всех складах'"), Ложь);
	Колонки.Добавить("Архивное",    НСтр("ru = 'Архивные остатки на всех складах'"), Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	ОписаниеКолонок.Отказ                 = Отказ;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ДобавитьОписаниеОбеспечениеЗаказовРаботами(МакетФормы, ДобавитьСторно, Префикс = "")
	
	Префикс = ?(ПустаяСтрока(Префикс), "ОбеспечениеЗаказовРаботами", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеОбеспечениеЗаказовРаботами""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение          КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.КОбеспечениюОстаток КАК ПрефиксПотребность
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
	|		Подразделение    = &ПрефиксПодразделение
	|		И Номенклатура   = &ПрефиксНоменклатура
	|		{Характеристика = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ДобавитьСторноЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Подразделение");
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	ПараметрПредставления = "%" + Префикс + "_Подразделение%";
	
	ПредставлениеПотребность = СтрШаблон(НСтр("ru = 'Потребность в подразделении ""%1""'"), ПараметрПредставления);
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Потребность", ПредставлениеПотребность, Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Потребность");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

//++ НЕ УТКА
Функция ДобавитьОписаниеМатериалыИРаботыВПроизводстве(МакетФормы, ДобавитьСторно, Префикс = "")
	
	Префикс = ?(ПустаяСтрока(Префикс), "МатериалыИРаботыВПроизводстве", Префикс);
	
	ТекстЗапроса = 
	"// Запрос метода ""ДобавитьОписаниеМатериалыИРаботыВПроизводстве""
	|// Префикс
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Назначение        КАК Назначение,
	|	//&ПоляВыбораПредшествующие
	|	ТаблицаОстатки.КоличествоОстаток КАК ПрефиксКоличество
	|	//&ПоляВыбораПоследующие
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(,
	|		Назначение       <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Организация    = &ПрефиксОрганизация
	|		{Подразделение  = &ПрефиксПодразделение}
	|		И Номенклатура   = &ПрефиксНоменклатура
	|		{Характеристика = &ПрефиксХарактеристика}) КАК ТаблицаОстатки";
	
	Если ДобавитьСторно Тогда
		ТекстЗапроса = ТекстЗапроса
		+ ТекстОбъединитьВсе()
		+ "ВЫБРАТЬ
		|	ТаблицаСторно.Назначение       КАК Назначение,
		|	//&ПоляВыбораПредшествующие
		|	ТаблицаСторно.КоличествоОборот КАК ПрефиксКоличество
		|	//&ПоляВыбораПоследующие
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Обороты(, , Регистратор,
		|		Назначение       <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И Организация    = &ПрефиксОрганизация
		|		{Подразделение   = &ПрефиксПодразделение}
		|		И Номенклатура   = &ПрефиксНоменклатура
		|		{Характеристика  = &ПрефиксХарактеристика}
		|		) КАК ТаблицаСторно
		|ГДЕ
		|	ТаблицаСторно.Регистратор = &Регистратор";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Префикс", Префикс + "_");
	
	ПутиКДанным = Новый Структура();
	
	ПутиКДанным.Вставить("Номенклатура");
	ПутиКДанным.Вставить("Характеристика");
	ПутиКДанным.Вставить("Подразделение");
	ПутиКДанным.Вставить("Организация");
	
	// Формирование списка колонок, которые могут быть выведены в список назначений
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Количество", НСтр("ru = 'Количество в производстве'"), Ложь);
	
	КолонкиПоУмолчанию = Новый Массив();
	КолонкиПоУмолчанию.Добавить("Количество");
	
	ОписаниеКолонок = МакетОписанияКолонок();
	
	ОписаниеКолонок.Префикс               = Префикс;
	ОписаниеКолонок.ТекстЗапроса          = ТекстЗапроса;
	ОписаниеКолонок.ПутиКДанным           = ПутиКДанным;
	ОписаниеКолонок.Колонки               = Колонки;
	ОписаниеКолонок.КолонкиПоУмолчанию    = КолонкиПоУмолчанию;
	
	МакетФормы.ОписанияКолонок.Добавить(ОписаниеКолонок);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

//-- НЕ УТКА

Функция ДобавитьСторноЗапроса(ТекстЗапроса)
	
	УсловиеПоРегистратору = 
	"
	|ГДЕ
	|	ТаблицаСторно.Регистратор = &Регистратор";
	
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапроса, "Остатки(,", "Обороты(, , Регистратор,");
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "ТаблицаОстатки", "ТаблицаСторно");
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "Остаток", "Оборот");
	
	ТекстЗапросаСторно = СтрЗаменить(ТекстЗапросаСторно, "КАК ТаблицаСторно", "КАК ТаблицаСторно" + УсловиеПоРегистратору);
	
	// Добавить знак "-" перед выборкой числовых полей
	ПозицияПоиска = СтрДлина(ТекстЗапросаСторно);
	КонецЧисловойСтроки = СтрНайти(ТекстЗапросаСторно, "КАК Префикс", НаправлениеПоиска.СКонца, ПозицияПоиска);
	
	Пока КонецЧисловойСтроки > 0 Цикл
		НачалоЧисловойСтроки = СтрНайти(ТекстЗапросаСторно, "ТаблицаСторно.", НаправлениеПоиска.СКонца, КонецЧисловойСтроки);
		
		ЛеваяЧасть = Лев(ТекстЗапросаСторно, НачалоЧисловойСтроки - 1);
		ПраваяЧасть = Прав(ТекстЗапросаСторно, СтрДлина(ТекстЗапросаСторно) - НачалоЧисловойСтроки + 1);
		
		ТекстЗапросаСторно = ЛеваяЧасть + "-" + ПраваяЧасть;
		
		ПозицияПоиска = НачалоЧисловойСтроки - 1;
		КонецЧисловойСтроки  = СтрНайти(ТекстЗапросаСторно, "КАК Префикс", НаправлениеПоиска.СКонца, ПозицияПоиска);
	КонецЦикла;
	
	Возврат ТекстЗапроса
		+ ТекстОбъединитьВсе()
		+ ТекстЗапросаСторно;

КонецФункции

Процедура ФормаДокументаПриСозданииНаСервере(ФормаДокумента) Экспорт
	
	ИмяОбъекта = "";
	ЭтоДокумент = ФормаДокумента.Объект.Свойство("Ссылка");
	Если ЭтоДокумент Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ФормаДокумента.Объект.Ссылка);
	Иначе
		ИмяОбъекта = СтрЗаменить(ФормаДокумента.ИмяФормы, "Обработка.", "");
		КонецИмениОбъекта = СтрНайти(ИмяОбъекта, ".");
		ИмяОбъекта = Лев(ИмяОбъекта, КонецИмениОбъекта - 1);
		
		МенеджерОбъекта = Обработки[ИмяОбъекта];
	КонецЕсли;
	
	МакетФормыВыбораНазначений = МенеджерОбъекта.МакетФормыВыбораНазначений();
	
	СвязиШаблона = Новый Структура();
	
	Для Каждого ШаблонНазначения Из МакетФормыВыбораНазначений.ШаблоныНазначений Цикл
		
		КлючПутиКПолюНазначение = СтрЗаменить(ШаблонНазначения.ПутьКПолюНазначение, ".", "");
		КлючПутиКПолюНазначение = ?(ПустаяСтрока(КлючПутиКПолюНазначение), "ПустойКлюч", КлючПутиКПолюНазначение);
		
		Если Не СвязиШаблона.Свойство("КлючПутиКПолюНазначение") Тогда
			СвязиШаблона.Вставить(КлючПутиКПолюНазначение, Новый Массив());
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				И СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0 Тогда
				
				ПутьКТабЧасти = Лев(ШаблонНазначения.ПутьКПолюНазначение, Макс(СтрНайти(ШаблонНазначения.ПутьКПолюНазначение, ".", , , 2) - 1, 0));
				ПутиКДанным = ПутиКДаннымУсловияИспользования("", ПолеОтбора.Значение, ПутьКТабЧасти);
				Для Каждого Путь Из ПутиКДанным Цикл
					Связь = Новый СвязьПараметраВыбора(Путь.Ключ, Путь.Значение, РежимИзмененияСвязанногоЗначения.НеИзменять);
					СвязиШаблона[КлючПутиКПолюНазначение].Добавить(Связь);
					Прервать;
				КонецЦикла;
			// В документе "Поступление сырья от давальца" есть только реквизит формы, но нет реквизита объекта "Направление деятельности".
			ИначеЕсли ПолеОтбора.Значение = "НаправлениеДеятельностиПоступленияОтДавальца" Тогда
				
				Связь = Новый СвязьПараметраВыбора("НаправлениеДеятельности", "НаправлениеДеятельности", РежимИзмененияСвязанногоЗначения.НеИзменять);
				СвязиШаблона[КлючПутиКПолюНазначение].Добавить(Связь);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	МассивПутейКПолюНазначение = Новый Массив();
	Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
		МассивПутейКПолюНазначение.Добавить(ОписаниеКолонок.ПутьКПолюНазначение);
	КонецЦикла;
	МассивПутейКПолюНазначение = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПутейКПолюНазначение);
	
	Для Каждого ПутьКПолюНазначение Из МассивПутейКПолюНазначение Цикл
		
		ЭлементФормы = ПолучитьЭлементФормыНазначение(ФормаДокумента, ПутьКПолюНазначение);
		
		МассивСвязей = Новый Массив();
		
		ПутьКТабЧасти = Лев(ПутьКПолюНазначение, Макс(СтрНайти(ПутьКПолюНазначение, ".", , , 2) - 1, 0));
		
		Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
			
			Если ОписаниеКолонок.ПутьКПолюНазначение <> ПутьКПолюНазначение Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
				
				УточненныйПутьКДанным = СформироватьПутьКДанным(ПутьКДанным.Значение, ПутьКТабЧасти);
				
				Имя = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
				
				СвязьПараметровВыбора = Новый СвязьПараметраВыбора(Имя, УточненныйПутьКДанным, РежимИзмененияСвязанногоЗначения.НеИзменять);
				
				МассивСвязей.Добавить(СвязьПараметровВыбора);
				
			КонецЦикла;
			Если ЗначениеЗаполнено(ОписаниеКолонок.УсловиеИспользования) Тогда
				
				ПутиКДаннымУсловияИспользования = ПутиКДаннымУсловияИспользования(
					ОписаниеКолонок.Префикс,
					ОписаниеКолонок.УсловиеИспользования,
					ПутьКТабЧасти);
				
				Для Каждого ПутьКДанным Из ПутиКДаннымУсловияИспользования Цикл
					
					Если МассивСвязей.Найти(ПутьКДанным.Ключ) = Неопределено Тогда
						
						СвязьПараметровВыбора = Новый СвязьПараметраВыбора(ПутьКДанным.Ключ, ПутьКДанным.Значение, РежимИзмененияСвязанногоЗначения.НеИзменять);
						МассивСвязей.Добавить(СвязьПараметровВыбора);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоДокумент Тогда
			СвязьПоИсточнику = Новый СвязьПараметраВыбора("Источник", "Объект.Ссылка", РежимИзмененияСвязанногоЗначения.НеИзменять);
			МассивСвязей.Добавить(СвязьПоИсточнику);
		КонецЕсли;
		
		КлючПутиКПолюНазначение = СтрЗаменить(ПутьКПолюНазначение, ".", "");
		Если СвязиШаблона.Свойство(КлючПутиКПолюНазначение) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, СвязиШаблона[КлючПутиКПолюНазначение]);
		КонецЕсли;
		Если СвязиШаблона.Свойство("ПустойКлюч") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязей, СвязиШаблона["ПустойКлюч"]);
		КонецЕсли;
		
		СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		
		ПараметрВыбора = Новый ПараметрВыбора("ПутьКПолюНазначение", ПутьКПолюНазначение);
		ПараметрыВыбора = Новый Массив();
		ПараметрыВыбора.Добавить(ПараметрВыбора);
		
		Если Не ЭтоДокумент Тогда
			ПараметрВыбора = Новый ПараметрВыбора("ИмяОбработки", ИмяОбъекта);
			ПараметрыВыбора.Добавить(ПараметрВыбора);
		КонецЕсли;
		
		ЭлементФормы.СвязиПараметровВыбора = СвязиПараметровВыбора;
		ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		ЭлементФормы.ФормаВыбора = "Справочник.Назначения.Форма.ФормаВыбораНазначений";
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭлементФормыНазначение(ФормаДокумента, Знач ПолеНазначение)
	
	ПолеНазначение = СтрЗаменить(ПолеНазначение, "Объект.", "");
	
	МассивИменДляПоиска = Новый Массив();
	
	МассивСлов = СтрРазделить(ПолеНазначение, ".");
	
	ПоследнееСлово     = МассивСлов[МассивСлов.Количество() - 1];
	ПредпоследнееСлово = ?(МассивСлов.Количество() > 1,
							МассивСлов[МассивСлов.Количество() - 2],
							"");
	ПоследниеСлова = ПредпоследнееСлово + ПоследнееСлово;
	ПолноеИмяБезТочек = СтрЗаменить(ПолеНазначение, ".", "");
	
	// Формирование массива поиска, в порядке приоритета
	МассивИменДляПоиска.Добавить(ПоследниеСлова);
	МассивИменДляПоиска.Добавить(ПоследнееСлово);
	МассивИменДляПоиска.Добавить(ПолноеИмяБезТочек);

	ЭлементФормы = Неопределено;
	
	Для Каждого ИмяЭлемента Из МассивИменДляПоиска Цикл
		ЭлементФормы = ФормаДокумента.Элементы.Найти(ИмяЭлемента);
		Если ЭлементФормы <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементФормы <> Неопределено Тогда
		Возврат ЭлементФормы;
	Иначе
		ТекстОшибки = НСтр("ru = 'Элемент формы по пути к полю ""%1"" не найден.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПолеНазначение);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

Функция ПутиКДаннымУсловияИспользования(Префикс, УсловиеИспользования, ПутьКТабЧасти) Экспорт
	
	ПутиКДанным = Новый Структура();
	
	ВыраженияОбъектов = ВыраженияПутейКДаннымУсловийИспользования(УсловиеИспользования);
	
	Для Каждого ВыражениеОбъекта Из ВыраженияОбъектов Цикл
		
		ВыражениеОбъекта = СокрЛП(ВыражениеОбъекта);
		
		ПутьКДанным = СформироватьПутьКДанным(ВыражениеОбъекта, ПутьКТабЧасти);
		
		НачалоПоследнегоСловаПути = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
		ПоследнееСловоПути = Сред(ПутьКДанным, НачалоПоследнегоСловаПути + 1);
		
		ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
		ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСловоПути;
		
		ПутиКДанным.Вставить(ИмяПараметра, ПутьКДанным);
		
	КонецЦикла;
	
	Возврат ПутиКДанным;
	
КонецФункции

// Преобразует входящий параметр, например:
//  Объект.Склад -> Объект.Склад
//  Объект.Товары.Номенклатура -> Элементы.Товары.ТекущиеДанные.Номенклатура
// Параметры:
//  ВыражениеОбъекта - Строка - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СформироватьПутьКДанным(ВыражениеОбъекта, ПутьКТабЧасти)
	
	ЭтоОбращениеКТабличнойЧасти = ?(ПутьКТабЧасти = "", 0, СтрНайти(ВыражениеОбъекта, ПутьКТабЧасти));
	ВыражениеОбъектаБезОбращенияКИБ = СтрРазбитьПоТочкеОбращенияКИБ(ВыражениеОбъекта, ЭтоОбращениеКТабличнойЧасти).ПутьКДанным;
	
	Если ЭтоОбращениеКТабличнойЧасти Тогда
		
		ПутьКДанным = СтрЗаменить(ВыражениеОбъектаБезОбращенияКИБ, "Объект", "Элементы");
		
		НачалоВторогоСлова = СтрНайти(ПутьКДанным, ".") + 1;
		СимволовВторогоСлова = СтрНайти(Сред(ПутьКДанным, НачалоВторогоСлова), ".") - 1;
		ВтороеСлово = Сред(ПутьКДанным, НачалоВторогоСлова, СимволовВторогоСлова);
		
		ПутьКДанным = СтрЗаменить(ПутьКДанным, ВтороеСлово, ВтороеСлово + ".ТекущиеДанные");
		
	Иначе
		
		ПутьКДанным = ВыражениеОбъектаБезОбращенияКИБ;
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ВыраженияПутейКДаннымУсловийИспользования(УсловиеИспользования)
	
	Массив = Новый Массив();
	
	ПодстрокиВыражений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина);
	
	Для Каждого Строка Из ПодстрокиВыражений Цикл
		
		Строка = "Объект." + Строка;
		
		КонецОбращенияКЭлементу = СтрНайти(Строка, " ");
		КонецОбращенияКЭлементу = ?(КонецОбращенияКЭлементу = 0, -1, КонецОбращенияКЭлементу);
		
		ВыражениеОбъекта = Сред(Строка, 1, КонецОбращенияКЭлементу);
		
		Массив.Добавить(ВыражениеОбъекта);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ТекстИПараметрыЗапросаУсловияИспользования(Префикс, УсловиеИспользования) Экспорт
	
	ПодстрокиВыражений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина);
	
	НаборУсловийЗапроса = Новый Массив();
	СписокПараметровЗапроса = Новый Массив();
	
	Для Каждого ПодстрокаВыражения Из ПодстрокиВыражений Цикл
		
		ПодстрокаВыражения = "Объект." + ПодстрокаВыражения;
		
		КонецОбращенияКЭлементу = СтрНайти(ПодстрокаВыражения, " ") - 1;
		КонецОбращенияКЭлементу = ?(КонецОбращенияКЭлементу = 0, -1, КонецОбращенияКЭлементу) ;
		
		ВыражениеОбъекта = Сред(ПодстрокаВыражения, 1, КонецОбращенияКЭлементу);
		
		НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
		ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
		
		ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
		ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
		ИмяПараметра = СокрЛП(ИмяПараметра);
		
		УсловиеЗапроса = СтрЗаменить(ПодстрокаВыражения, ВыражениеОбъекта, "&" + ИмяПараметра);
		
		НаборУсловийЗапроса.Добавить(УсловиеЗапроса);
		СписокПараметровЗапроса.Добавить(ИмяПараметра);
		
	КонецЦикла;
	
	УсловияЗапроса = СтрСоединить(НаборУсловийЗапроса, Символы.ПС);
	
	Если ПустаяСтрока(УсловияЗапроса) Тогда
		УсловияЗапроса = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ " + УсловияЗапроса + " КАК УсловиеВыполнено";
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураВозврата.Вставить("ПараметрыЗапроса", СписокПараметровЗапроса);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТекстОбъединитьВсе() Экспорт
	
	ТекстЗапроса = 
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьДанныеВыбора(Параметры) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.Источник);
	
	МакетФормыВыбораНазначений = МенеджерДокумента.МакетФормыВыбораНазначений();
	
	ПараметрыЗапроса = СформироватьПараметрыЗапросаПоМакетуФормыНазначений(МакетФормыВыбораНазначений, Параметры);
	
	ТекстЗапроса = СформироватьТекстЗапросаДанныеВыбора(МакетФормыВыбораНазначений, ПараметрыЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	// Установка значений параметров запроса.
	
	Для Каждого ОписаниеКолонок Из МакетФормыВыбораНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ПараметрыЗапроса.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
			ИмяПараметра = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
			Значение = ПараметрыЗапроса[ИмяПараметра];
			Запрос.УстановитьПараметр(ИмяПараметра, Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ШаблонНазначения Из МакетФормыВыбораНазначений.ШаблоныНазначений Цикл
		
		Если Не ПустаяСтрока(ШаблонНазначения.ПутьКПолюНазначение)
			И ШаблонНазначения.ПутьКПолюНазначение <> Параметры.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				// не будет работать для выражений из ТЧ и выражений из ИБ
				И СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0 Тогда
				
				ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.Значение);
				Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
					ЗначениеПараметра = ПараметрыЗапроса[ПараметрЗапроса];
					Запрос.УстановитьПараметр(ПараметрЗапроса, ЗначениеПараметра);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	
	ВыбранныеНазначения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Назначение");
	
	ДанныеВыбора.ЗагрузитьЗначения(ВыбранныеНазначения);
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура ДополнитьУсловияНазначений(УсловияНазначения, ПолеОтбора, ПараметрыЗапроса, ПутьКПолюНазначение = "ТаблицаВыборки.Назначение") Экспорт
	
	Если ЗначениеЗаполнено(ПолеОтбора.Значение)
		И ПолеОтбора.Ключ <> "УсловиеИспользования"
		И ПолеОтбора.Ключ <> "ПутьКПолюНазначение" Тогда
		
		Условие = "";
		
		Если ПолеОтбора.Ключ = "НаправлениеДеятельности"
			И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
				// В документе "Поступление сырья от давальца" есть только реквизит формы, но нет реквизита объекта "Направление деятельности".
				Или ПолеОтбора.Значение = "НаправлениеДеятельностиПоступленияОтДавальца") Тогда
			
			ДобавитьУсловие = Истина;
			Если ПараметрыЗапроса.Свойство("НаправлениеДеятельности") Тогда
				УчетЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.НаправлениеДеятельности, "УчетЗатрат");
				ДобавитьУсловие = ЗначениеЗаполнено(УчетЗатрат);
			Иначе
				ДобавитьУсловие = Ложь;
			КонецЕсли;
			
			Если ДобавитьУсловие Тогда
				Условие = "(&ТаблицаВыборкиНазначение." + ПолеОтбора.Ключ + " = " + "&" + ПолеОтбора.Ключ + ")";
			КонецЕсли;
			
		ИначеЕсли ПолеОтбора.Ключ = "Давальческое2_1" Тогда
			//++ НЕ УТКА
			ЛеваяЧастьУсловия = 
			"(&ТаблицаВыборкиНазначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И &ТаблицаВыборкиНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца)";
			ПраваяЧастьУсловия = ПолучитьПравуюЧастьУсловияОтбораПоНазначению(ПолеОтбора);
			Условие = ЛеваяЧастьУсловия + " = (" + ПраваяЧастьУсловия + ")";
			//-- НЕ УТКА
		ИначеЕсли ПолеОтбора.Ключ = "ДавальческаяПродукция2_2" Тогда
			//++ НЕ УТКА
			ЛеваяЧастьУсловия = 
			"(&ТаблицаВыборкиНазначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И &ТаблицаВыборкиНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца)";
			ПраваяЧастьУсловия = ПолучитьПравуюЧастьУсловияОтбораПоНазначению(ПолеОтбора);
			Условие = ЛеваяЧастьУсловия + " = (" + ПраваяЧастьУсловия + ")";
			//-- НЕ УТКА
		ИначеЕсли ПолеОтбора.Ключ = "ДавальческиеМатериалы2_2" Тогда
			//++ НЕ УТКА
			ЛеваяЧастьУсловия = 
			"(&ТаблицаВыборкиНазначение.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И НЕ &ТаблицаВыборкиНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца)";
			ПраваяЧастьУсловия = ПолучитьПравуюЧастьУсловияОтбораПоНазначению(ПолеОтбора);
			Условие = ЛеваяЧастьУсловия + " = (" + ПраваяЧастьУсловия + ")";
			//-- НЕ УТКА
		ИначеЕсли ПолеОтбора.Ключ = "Собственное" Тогда
			//++ НЕ УТКА
			ЛеваяЧастьУсловия = 
			"(&ТаблицаВыборкиНазначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И НЕ &ТаблицаВыборкиНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца)";
			ПраваяЧастьУсловия = ПолучитьПравуюЧастьУсловияОтбораПоНазначению(ПолеОтбора);
			Условие = ЛеваяЧастьУсловия + " = (" + ПраваяЧастьУсловия + ")";
			//-- НЕ УТКА
		ИначеЕсли СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0 Тогда
			Условие = "&ТаблицаВыборкиНазначение." + ПолеОтбора.Ключ + " = " + "&" + ПолеОтбора.Ключ;
		Иначе
			Условие = "&ТаблицаВыборкиНазначение." + ПолеОтбора.Ключ + " = (" + ПолеОтбора.Значение + ")";
		КонецЕсли;
		
		Условие = СтрЗаменить(Условие, "&ТаблицаВыборкиНазначение", ПутьКПолюНазначение);
		
		Если ЗначениеЗаполнено(Условие) Тогда
			УсловияНазначения.Добавить(Условие);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьУсловиеИспользования(Префикс, УсловиеИспользования, ПараметрыЗапроса, ПутьКПолюНазначение = "") Экспорт
	
	Если Не ПустаяСтрока(ПутьКПолюНазначение)
		И ПутьКПолюНазначение <> ПараметрыЗапроса.ПутьКПолюНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(УсловиеИспользования)
		Или СтрНайти(УсловиеИспользования, "Объект.") = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования(Префикс, УсловиеИспользования);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПараметрыУсловияИспользования.ТекстЗапроса;
	
	Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса, ПараметрыЗапроса[ПараметрЗапроса]);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.УсловиеВыполнено;
	
КонецФункции

Функция СформироватьПараметрыЗапросаПоМакетуФормыНазначений(МакетФормыНазначений, ИсточникПараметров) Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ПутьКПолюНазначение", ИсточникПараметров.ПутьКПолюНазначение);
	
	ИсточникПараметровПолучаемыхИзИБ = Новый Соответствие();
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ИсточникПараметров.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникПараметровПолучаемыхИзИБ(
			ОписаниеКолонок.Префикс,
			ОписаниеКолонок.УсловиеИспользования,
			ОписаниеКолонок.ПутьКПолюНазначение,
			ИсточникПараметровПолучаемыхИзИБ);
		
	КонецЦикла;
	
	ЗаполнитьЗначениеПараметраИзИБ(ИсточникПараметровПолучаемыхИзИБ, ИсточникПараметров);
	
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		Если ОписаниеКолонок.ПутьКПолюНазначение <> ИсточникПараметров.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
			ИмяПараметра = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
			Значение = ИсточникПараметров[ИмяПараметра];
			
			ПараметрыЗапроса.Вставить(ИмяПараметра, Значение);
		КонецЦикла;
		
		ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования(ОписаниеКолонок.Префикс, ОписаниеКолонок.УсловиеИспользования);
		Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
			Если Не ПараметрыЗапроса.Свойство(ПараметрЗапроса) Тогда
				
				ПараметрЗапросаПолученныйИзИБ = ИсточникПараметровПолучаемыхИзИБ.Получить(ПараметрЗапроса);
				Если ПараметрЗапросаПолученныйИзИБ <> Неопределено Тогда
					
					ЗначениеПараметра = ПараметрЗапросаПолученныйИзИБ.Значение;
					
				Иначе
					
					ЗначениеПараметра = ИсточникПараметров[ПараметрЗапроса];
					
				КонецЕсли;
				ПараметрыЗапроса.Вставить(ПараметрЗапроса, ЗначениеПараметра);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ШаблонНазначения Из МакетФормыНазначений.ШаблоныНазначений Цикл
		
		Если Не ПустаяСтрока(ШаблонНазначения.ПутьКПолюНазначение)
			И ШаблонНазначения.ПутьКПолюНазначение <> ИсточникПараметров.ПутьКПолюНазначение Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			Если ПолеОтбора.Ключ = "ПутьКПолюНазначение" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				И СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0 Тогда
				
				ПараметрыУсловияИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.Значение);
				Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
					ЗначениеПараметра = ИсточникПараметров[ПараметрЗапроса];
					ПараметрыЗапроса.Вставить(ПараметрЗапроса, ЗначениеПараметра);
				КонецЦикла;
			// В документе "Поступление сырья от давальца" есть только реквизит формы, но нет реквизита объекта "Направление деятельности".
			ИначеЕсли ПолеОтбора.Значение = "НаправлениеДеятельностиПоступленияОтДавальца" Тогда
				
				ПараметрыЗапроса.Вставить("НаправлениеДеятельности", ИсточникПараметров.НаправлениеДеятельности);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаДанныеВыбора(МакетФормыНазначений, ПараметрыЗапроса)
	
	ТекстОбъединитьВсе = Справочники.Назначения.ТекстОбъединитьВсе();
	
	УсловияНазначения = Новый Массив();
	Для Каждого ШаблонНазначения Из МакетФормыНазначений.ШаблоныНазначений Цикл
		
		ВключатьВИтоговыйЗапрос = ПроверитьУсловиеИспользования("",
			ШаблонНазначения.УсловиеИспользования,
			ПараметрыЗапроса,
			ШаблонНазначения.ПутьКПолюНазначение);
		
		Если Не ВключатьВИтоговыйЗапрос Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			ДополнитьУсловияНазначений(УсловияНазначения, ПолеОтбора, ПараметрыЗапроса, "Назначения");
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапросаГде = ?(УсловияНазначения.Количество() > 0,
		"И " + СтрСоединить(УсловияНазначения, Символы.ПС + "	И "),
		"");
		
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления
	|	И Назначения.Наименование ПОДОБНО &СтрокаПоиска
	|	//&Условия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Условия", ТекстЗапросаГде);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА
Функция ПолучитьПравуюЧастьУсловияОтбораПоНазначению(ПолеОтбора)
	
	// Получение имени параметра содержащего правую часть условия.
	// Подменяет в строках вида "Объект.УправлениеПроизводством2_2"
	// "Объект." на "&" + ПолеОтбора.Ключ
	
	Если СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0 Тогда
		ПараметрыИспользования = ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.Значение);
		
		ПраваяЧастьУсловия = СтрЗаменить(ПолеОтбора.Значение, "Объект.", "");
		ПодстрокаПоиска = ПараметрыИспользования.ПараметрыЗапроса[0];
		ПраваяЧастьУсловия = СтрЗаменить(ПраваяЧастьУсловия, ПодстрокаПоиска, "&" + ПодстрокаПоиска);
		
	Иначе
		ПраваяЧастьУсловия = ПолеОтбора.Значение;
	КонецЕсли;
	
	Возврат ПраваяЧастьУсловия;
	
КонецФункции
//-- НЕ УТКА

Процедура ЗаполнитьЗначениеПараметраИзИБ(ИсточникПараметровПолучаемыхИзИБ, ИсточникПараметров)
	
	Для Каждого Элемент Из ИсточникПараметровПолучаемыхИзИБ Цикл
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникПараметров[Элемент.Значение.ИмяПараметра],
			Элемент.Значение.ОбращениеКИБ);
		
		Элемент.Значение.Значение = ЗначениеРеквизита[Элемент.Значение.ОбращениеКИБ];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсточникПараметровПолучаемыхИзИБ(Префикс, УсловиеИспользования, ПутьКПолюНазначение, Результат)
	
	ПодстрокиВыражений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УсловиеИспользования, "Объект.", Истина);
	
	Для Каждого ПодстрокаВыражения Из ПодстрокиВыражений Цикл
		
		ПодстрокаВыражения = "Объект." + ПодстрокаВыражения;
		
		КонецОбращенияКЭлементу = СтрНайти(ПодстрокаВыражения, " ") - 1;
		КонецОбращенияКЭлементу = ?(КонецОбращенияКЭлементу = 0, -1, КонецОбращенияКЭлементу) ;
		
		ВыражениеОбъекта = Сред(ПодстрокаВыражения, 1, КонецОбращенияКЭлементу);
		
		ПутьКТабЧасти = Лев(ПутьКПолюНазначение, Макс(СтрНайти(ПутьКПолюНазначение, ".", , , 2) - 1, 0));
		ЭтоОбращениеКТабличнойЧасти = ?(ПутьКТабЧасти = "", 0, СтрНайти(ВыражениеОбъекта, ПутьКТабЧасти));
		РезультатРазбиения = СтрРазбитьПоТочкеОбращенияКИБ(ВыражениеОбъекта, ЭтоОбращениеКТабличнойЧасти);
		
		Если РезультатРазбиения.ОбращениеКИБ <> "" Тогда
			
			НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
			ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
			
			ЛеваяЧастьИмениПараметра = ?(ЗначениеЗаполнено(Префикс), Префикс + "_", "");
			ИмяПараметраСОбращениемКИБ = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
			ИмяПараметраСОбращениемКИБ = СокрЛП(ИмяПараметраСОбращениемКИБ);
			
			ВыражениеОбъекта = РезультатРазбиения.ПутьКДанным;
			
			НачалоПоследнегоСлова = СтрНайти(ВыражениеОбъекта, ".", НаправлениеПоиска.СКонца);
			ПоследнееСлово = Сред(ВыражениеОбъекта, НачалоПоследнегоСлова + 1);
			ИмяПараметра = ЛеваяЧастьИмениПараметра + ПоследнееСлово;
			ИмяПараметра = СокрЛП(ИмяПараметра);
			
			ПараметрыПолученияЗначения = Новый Структура("ИмяПараметра, ОбращениеКИБ, Значение", ИмяПараметра, РезультатРазбиения.ОбращениеКИБ);
			Результат.Вставить(ИмяПараметраСОбращениемКИБ, ПараметрыПолученияЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрРазбитьПоТочкеОбращенияКИБ(ПутьКДанным, ЭтоОбращениеКТабличнойЧасти)
	
	РезультатРазбиения = Новый Структура("ПутьКДанным, ОбращениеКИБ", "", "");
	
	// Путь к данным нужно обрезать, чтобы в него не попали обращения через точку от данных к ИБ.
	НомерТочкиОбращенияКИБ = ?(ЭтоОбращениеКТабличнойЧасти, 3, 2);
	НомерСимволаТочкиОбращенияКИБ = СтрНайти(ПутьКДанным, ".", , , НомерТочкиОбращенияКИБ);
	
	Если НомерСимволаТочкиОбращенияКИБ > 0 Тогда
		
		РезультатРазбиения.ПутьКДанным  = Лев(ПутьКДанным, НомерСимволаТочкиОбращенияКИБ - 1);
		РезультатРазбиения.ОбращениеКИБ = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - НомерСимволаТочкиОбращенияКИБ);
		
	Иначе
		
		РезультатРазбиения.ПутьКДанным = ПутьКДанным;
		
	КонецЕсли;
	
	Возврат РезультатРазбиения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//++ НЕ УТКА
#Область ПереработкаДавальческогоСырья

// Для массива назначений определяет, какие из них являются назначениями давальческой продукции.
//  Параметры:
//   Назначения - Массив - массив назначений.
// Возвращаемое значение:
//  Соответствие - соответствие, ключами которого являются назначения давальческой продукции.
Функция НазначенияПродукцииДавальца(Назначения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Назначения КАК СпрНазначения
	|ГДЕ
	|	СпрНазначения.Ссылка В (&Назначения)
	|	И СпрНазначения.Заказ ССЫЛКА Документ.ЗаказДавальца";
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти
//-- НЕ УТКА

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПустыеСсылки = Новый Массив();
	ПустыеСсылки.Добавить(Документы.ЗаказНаПеремещение.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаСборку.ПустаяСсылка());
	
	//++ НЕ УТ
	ПустыеСсылки.Добавить(Документы.ЗаказПереработчику.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказМатериаловВПроизводство.ПустаяСсылка());
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ПустыеСсылки.Добавить(Документы.ЗаказНаРемонт.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказДавальца.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЗаказНаПроизводство.ПустаяСсылка());
	ПустыеСсылки.Добавить(Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	//-- НЕ УТКА
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таб.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Назначения КАК Таб
	|	ГДЕ
	|		Таб.Заказ = НЕОПРЕДЕЛЕНО
	|		И Таб.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		И Таб.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		И Таб.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И НЕ Таб.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таб.Ссылка
	|	ИЗ
	|		Справочник.Назначения КАК Таб
	|	ГДЕ
	|		Таб.Заказ <> НЕОПРЕДЕЛЕНО
	|		И Таб.Заказ.Ссылка ЕСТЬ NULL
	|		И НЕ Таб.Заказ В (&ПустыеСсылки)
	|		И НЕ Таб.ПометкаУдаления) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылки);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.Назначения";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Не СправочникОбъект.ПометкаУдаления Тогда
				СправочникОбъект.ПометкаУдаления = Истина;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
