// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если Параметры.Свойство("ПоказыватьИсключенныеДолжности") Тогда
			ПоказыватьИсключенныеДолжности = Параметры.ПоказыватьИсключенныеДолжности;
		КонецЕсли;
		
		Если Параметры.Свойство("ПоказыватьНовыеДолжности") Тогда
			ПоказыватьНовыеДолжности = Параметры.ПоказыватьНовыеДолжности;
		Иначе
			ПоказыватьНовыеДолжности = Не Параметры.РежимВыбора;
		КонецЕсли;
		
		ИспользоватьУсловноеОформление = Истина;
		
	Иначе
		
		ИспользоватьУсловноеОформление = Ложь;
		
		ПоказыватьИсключенныеДолжности = Истина;
		ПоказыватьНовыеДолжности = Истина;
		
	КонецЕсли;
	
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		ЭлементУсловногоОформления.Использование = ИспользоватьУсловноеОформление;
	КонецЦикла;
	
	Если Параметры.РежимВыбора Тогда
		
		Элементы.Список.РежимВыбора = Истина;
		Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
			ПоказыватьИсключенныеДолжности = Параметры.ТекущаяСтрока.ИсключенаИзШтатногоРасписания;
			Если Не Параметры.ТекущаяСтрока.ВведенаВШтатноеРасписание Тогда
				ПоказыватьНовыеДолжности = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОписаниеДинамическогоСписка = Новый Структура;
		ОписаниеДинамическогоСписка.Вставить("ИмяРеквизитаСписка", 		"Список");
		ОписаниеДинамическогоСписка.Вставить("ИмяТаблицыДолжностей", 	"СправочникДолжности");
		ОписаниеДинамическогоСписка.Вставить("ИмяПоляДолжности", 		"Ссылка");
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПриСозданииФормыСпискаСправочникаДолжности(ЭтотОбъект, Параметры, ОписаниеДинамическогоСписка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.НастроитьОтображениеГрейдаВФормеСписка(ЭтотОбъект, "СправочникДолжности");
	КонецЕсли;
	
	ПравоДобавления = ПравоДоступа("Добавление", Метаданные.Справочники.Должности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаКомандаПодборИзКлассификатора",
		"Видимость",
		ПравоДобавления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаКомандаПодборИзКлассификатораДолжностей",
		"Видимость",
		ПравоДобавления);
	
	УстановитьОтборСписка(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельФормы);
	// Конец СтандартныеПодсистемы.Печать
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список",,,, "ВведенаВШтатноеРасписание, ИсключенаИзШтатногоРасписания");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоказыватьНовыеДолжностиПриИзменении(Элемент)
	УстановитьОтборСписка(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИсключенныеДолжностиПриИзменении(Элемент)
	УстановитьОтборСписка(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 21.06.2017 14:58:25 
// Ведение справочника должностей, №14916 
// {
&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = РезультатВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Текст = НСтр("ru = 'Есть возможность подобрать должность из классификатора.
	|Подобрать?'");
	Оповещение = Новый ОписаниеОповещения("ДолжностиПередНачаломДобавленияЗавершение", ЭтотОбъект);
	КнопкиВыбора = Новый СписокЗначений();
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Да, "Подобрать");
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Нет, "Создать");
	КнопкиВыбора.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	ПоказатьВопрос(Оповещение, Текст,КнопкиВыбора, , КодВозвратаДиалога.Да);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КурсыВалют"
		Или ИмяСобытия = "Запись_ЗагрузкаКурсовВалют" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура КомандаПодборИзКлассификатораПрофессий(Команда)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Code", "");
	
	Оповещение = Новый ОписаниеОповещения("ПослеДобавленияДолжностейИзКлассификатора", ЭтотОбъект);
	
	// 4D:ERP для Беларуси, Яна, 04.04.2017 6:11:39 
	// Исправление справочников по подсистемам "Кадры" и "Зарплата", №14769 
	// {
	КадровыйУчетКлиент.ОткрытьФормуПодбораИзКлассификатора(
		"Должности",
		"ОбщиеМакеты.КлассификаторОКПДТРПрофессии_Локализация",
		НСтр("ru='Общегосударственный классификатор Республики Беларусь ""Профессии рабочих и должности служащих""'"),
		ЭтаФорма,
		СоответствиеПолей,
		Оповещение);
	// }
	// 4D
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборИзКлассификатораДолжностей(Команда)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Code", "");
	
	Оповещение = Новый ОписаниеОповещения("ПослеДобавленияДолжностейИзКлассификатора", ЭтотОбъект);
	// 4D:ERP для Беларуси, Яна, 04.04.2017 6:11:39 
	// Исправление справочников по подсистемам "Кадры" и "Зарплата", №14769 
	// {
	КадровыйУчетКлиент.ОткрытьФормуПодбораИзКлассификатора(
		"Должности",
		"ОбщиеМакеты.КлассификаторОКПДТРДолжности_Локализация",
		НСтр("ru='Общегосударственный классификатор Республики Беларусь ""Профессии рабочих и должности служащих""'"),
		ЭтаФорма,
		СоответствиеПолей,
		Оповещение);
	// }
	// 4D
		
КонецПроцедуры

#Область ПроцедурыПодсистемыНастройкиПорядкаЭлементов

&НаКлиенте
Процедура ПослеДобавленияДолжностейИзКлассификатора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПоказыватьНовыеДолжности Тогда
		
		ПоказыватьНовыеДолжности = Истина;
		УстановитьОтборСписка(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементВверх(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(Список, Элементы.Список);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьЭлементВниз(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(Список, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Форма)
	
	Список = Форма.Список;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВведенаВШтатноеРасписание");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ИсключенаИзШтатногоРасписания");
		
	Если НЕ Форма.ПоказыватьНовыеДолжности Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВведенаВШтатноеРасписание", Истина);
	КонецЕсли;
	
	Если НЕ Форма.ПоказыватьИсключенныеДолжности Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ИсключенаИзШтатногоРасписания", Ложь);
	КонецЕсли;
	
	#Если Клиент Тогда
		ГосударственнаяСлужбаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	#Иначе
		ГосударственнаяСлужбаСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	#КонецЕсли
	
	Если ГосударственнаяСлужбаСуществует Тогда
		#Если Клиент Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиентСервер");
		#Иначе
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаКлиентСервер");
		#КонецЕсли
		Модуль.УстановитьЭлементыОтбораФормыСпискаСправочникаДолжности(Форма, Список);
	КонецЕсли;
	
КонецПроцедуры	

// 4D:ERP для Беларуси, Юлия, 19.06.2017 17:11:25 
// Ведение справочника должностей, №14916 
// {
&НаКлиенте
Процедура ПодборИзКД(Команда)
	ОткрытьФорму("Справочник.Должности.Форма.ПодборДолжностейИзКлассификатора",, ЭтотОбъект);
КонецПроцедуры
// }
// 4D

// 4D:ERP для Беларуси, Яна, 21.06.2017 14:58:25 
// Ведение справочника должностей, №14916 
// {
&НаКлиенте
Процедура ДолжностиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Справочник.Должности.Форма.ПодборДолжностейИзКлассификатора", , ЭтотОбъект);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОткрытьФорму("Справочник.Должности.ФормаОбъекта");
	КонецЕсли;

КонецПроцедуры
// }
// 4D
#КонецОбласти
