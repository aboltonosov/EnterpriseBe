// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 16.01.2018 16:06:05 
// Ведение справочника должностей, №14916 
// {
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("Code", "Код");
	СоответствиеПолей.Вставить("Name", "Наименование");
	СоответствиеПолей.Вставить("CodeEKTS", "КодЕТКС");
	СоответствиеПолей.Вставить("CodeOKZ", "КодОКЗ");
	
	Если Параметры.Свойство("СоответствиеПолей") Тогда
		
		Для каждого ЭлементСоответствия Из Параметры.СоответствиеПолей Цикл
			СоответствиеПолей.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		
	КонецЕсли; 
	
	СоответствиеПолейКлассификатораРеквизитам = Новый ФиксированноеСоответствие(СоответствиеПолей);
	
	ЗаполнитьТаблицуДолжностей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДолжностей

&НаКлиенте
Процедура ВыбратьВыполнить()
		ЗагрузитьТекущий();
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ЗагрузитьТекущий()
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокДолжностей.ВыделенныеСтроки Цикл
		ЗагрузитьСтрокуКлассификатораПоИдентификатору(ВыделеннаяСтрока);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСтрокуКлассификатораПоИдентификатору(ИдентификаторТекущейСтроки)
	НайденнаяСтрока = Классификатор.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если НайденнаяСтрока <> Неопределено Тогда
		ЗагрузитьСтрокуКлассификатора(НайденнаяСтрока);
	КонецЕсли; 
КонецПроцедуры

// Загружает строку классификатора, если передана строка, содержащая строки
// производит рекурсивную загрузку этих строк.
&НаСервере
Процедура ЗагрузитьСтрокуКлассификатора(ЗагружаемыйЭлемент)
	
	Если ЗагружаемыйЭлемент.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Для Каждого СтрокаКоллекции Из ЗагружаемыйЭлемент.ПолучитьЭлементы() Цикл
			ЗагрузитьСтрокуКлассификатора(СтрокаКоллекции);
		КонецЦикла;
		
	ИначеЕсли НЕ ЗагружаемыйЭлемент.Загружен Тогда
		
		НовыйОбъект = Справочники.Должности.СоздатьЭлемент();
		
		Для каждого ЭлементСписка Из ЗагружаемыйЭлемент.ЗначенияПолейСтрокиКлассификатора Цикл
			НовыйОбъект[ЭлементСписка.Представление] = ЭлементСписка.Значение;
		КонецЦикла;
		
		НовыйОбъект.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
		
		Попытка
			НовыйОбъект.Записать();
			ЗагружаемыйЭлемент.Загружен = Истина;
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось загрузить элемент %1 (код: %2)'"),
				ЗагружаемыйЭлемент.Наименование,
				ЗагружаемыйЭлемент.Код);
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, на предмет загрузки всего классификатора.
//
&НаКлиенте
Функция ЗагруженВесьКлассификатор()
	Возврат ЗагруженыСтроки(Классификатор.ПолучитьЭлементы());
КонецФункции

// Проверяет коллекцию строк на предмет загруженности.
//
&НаКлиенте
Функция ЗагруженыСтроки(КоллекцияСтрок)
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если СтрокаКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			РезультатПроверки = ЗагруженыСтроки(СтрокаКоллекции.ПолучитьЭлементы());
		Иначе
			РезультатПроверки = СтрокаКоллекции.Загружен;
		КонецЕсли;
		Если НЕ РезультатПроверки Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Возврат Истина;
КонецФункции

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуДолжностей()
	
	ОтображатьЭлементыУправлениеИерархией = Истина;
	
	МассивРанееЗагруженных  = Новый Массив;
	Запрос = Новый Запрос;
	
	ОписаниеПолейЗапроса = "";
	
	РеквизитКод = СоответствиеПолейКлассификатораРеквизитам.Получить("Code");
	ЕстьКод = НЕ ПустаяСтрока(РеквизитКод);
	Если ЕстьКод Тогда
		//ОписаниеПолейЗапроса = "Классификатор." + РеквизитКод + " КАК Код";
	КонецЕсли;
	
	РеквизитНаименование = СоответствиеПолейКлассификатораРеквизитам.Получить("Name");
	ЕстьНаименование = НЕ ПустаяСтрока(РеквизитНаименование);
	Если ЕстьНаименование Тогда
		ОписаниеПолейЗапроса = ?(ПустаяСтрока(ОписаниеПолейЗапроса), "", ОписаниеПолейЗапроса + "," + Символы.ПС) +
			"Классификатор." + РеквизитНаименование + " КАК Наименование";
	КонецЕсли;
	
	РеквизитКодЕТКС = СоответствиеПолейКлассификатораРеквизитам.Получить("CodeEKTS");
	ЕстьКодЕТКС = НЕ ПустаяСтрока(РеквизитКод);
	РеквизитКодОКЗ = СоответствиеПолейКлассификатораРеквизитам.Получить("CodeOKZ");
	ЕстьКодОКЗ = НЕ ПустаяСтрока(РеквизитКод);
	РеквизитКодЕКСД = СоответствиеПолейКлассификатораРеквизитам.Получить("CodeEKSD");
	ЕстьКодЕКСД = НЕ ПустаяСтрока(РеквизитКод);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ОписаниеПолейЗапроса
	|ИЗ
	|	Справочник.Должности КАК Классификатор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПолейЗапроса", ОписаниеПолейЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаИдентификатор = "";
		
		Если ЕстьКод Тогда
			//СтрокаИдентификатор = СокрЛП(Выборка.Код);
		КонецЕсли; 
		
		Если ЕстьНаименование Тогда
			СтрокаИдентификатор = СтрокаИдентификатор + СокрЛП(Выборка.Наименование);
		КонецЕсли; 
		
		Если ПустаяСтрока(СтрокаИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРанееЗагруженных.Добавить(СтрокаИдентификатор);
		
	КонецЦикла;
	
	КоллекцияВерхнегоУровня = Классификатор.ПолучитьЭлементы();
	
	МенеджерСправочника = Справочники.Должности;
	
	КлассификаторXML = Справочники.Должности.ПолучитьМакет("КлассификаторДолжностей").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ЕстьПолеКод = КлассификаторТаблица.Колонки.Найти("Code") <> Неопределено;
	ЕстьПолеУровень = КлассификаторТаблица.Колонки.Найти("Level") <> Неопределено;
	ЕстьПолеНаименование = КлассификаторТаблица.Колонки.Найти("Name") <> Неопределено;
	ЕстьПолеКодЕТКС = КлассификаторТаблица.Колонки.Найти("CodeEKTS") <> Неопределено;
	ЕстьПолеКодОКЗ = КлассификаторТаблица.Колонки.Найти("CodeOKZ") <> Неопределено;
	ЕстьПолеКодЕКСД = КлассификаторТаблица.Колонки.Найти("CodeEKSD") <> Неопределено;
	
	МассивРодителей = Новый Массив(50);
	ТекущийУровень = 0;
	
	Для Каждого СтрокаКлассификаторТаблица Из КлассификаторТаблица Цикл
		
		Если ЕстьПолеУровень Тогда
			
			ТекущийУровень = Число(СтрокаКлассификаторТаблица.Level);
			Если ТекущийУровень = 0 Тогда
				КоллекцияРодителя = Классификатор.ПолучитьЭлементы();
			Иначе 
				
				Родитель = МассивРодителей[ТекущийУровень - 1];
				Родитель.ИндексКартинки = 0;
				КоллекцияРодителя = Родитель.ПолучитьЭлементы();
				ОтображатьЭлементыУправлениеИерархией = Истина;
				
			КонецЕсли;
			
		Иначе
			КоллекцияРодителя = Классификатор.ПолучитьЭлементы();
		КонецЕсли; 
		
		СтрокаИдентификатор = "";
		НоваяЗаписьКлассификатора = КоллекцияРодителя.Добавить();
		
		Для каждого ЭлементСоответствия Из СоответствиеПолейКлассификатораРеквизитам Цикл
			
			Если НЕ ПустаяСтрока(ЭлементСоответствия.Значение) Тогда
				НоваяЗаписьКлассификатора.ЗначенияПолейСтрокиКлассификатора.Добавить(
					СтрокаКлассификаторТаблица[ЭлементСоответствия.Ключ],
					ЭлементСоответствия.Значение);
			КонецЕсли; 
				
		КонецЦикла;
		
		Если ЕстьПолеКод Тогда
			
			НоваяЗаписьКлассификатора.Код = СокрЛП(СтрокаКлассификаторТаблица.Code);
			Если ЕстьКод Тогда
				СтрокаИдентификатор = НоваяЗаписьКлассификатора.Код;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьПолеНаименование Тогда
			
			НоваяЗаписьКлассификатора.Наименование = СокрЛП(СтрокаКлассификаторТаблица.Name);
			СтрокаИдентификатор = СтрокаИдентификатор + НоваяЗаписьКлассификатора.Наименование;
			
		КонецЕсли;
		
		Если ЕстьПолеКодЕТКС Тогда
			
			НоваяЗаписьКлассификатора.КодЕТКС = СокрЛП(СтрокаКлассификаторТаблица.CodeEKTS);
			Если ЕстьКодЕТКС Тогда
				СтрокаИдентификатор = НоваяЗаписьКлассификатора.КодЕТКС;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьПолеКодОКЗ Тогда
			
			НоваяЗаписьКлассификатора.КодОКЗ = СокрЛП(СтрокаКлассификаторТаблица.CodeOKZ);
			Если ЕстьКодОКЗ Тогда
				СтрокаИдентификатор = НоваяЗаписьКлассификатора.КодОКЗ;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЕстьПолеКодЕКСД Тогда
			
			НоваяЗаписьКлассификатора.КодЕКСД = СокрЛП(СтрокаКлассификаторТаблица.CodeEKSD);
			Если ЕстьКодЕКСД Тогда
				СтрокаИдентификатор = НоваяЗаписьКлассификатора.КодЕТКС;
			КонецЕсли; 
			
		КонецЕсли;

		
		
		НоваяЗаписьКлассификатора.ИндексКартинки = 2;
		
		Если МассивРанееЗагруженных.Найти(СтрокаИдентификатор) <> Неопределено Тогда
			НоваяЗаписьКлассификатора.Загружен = Истина;
		КонецЕсли;
		
		МассивРодителей[ТекущийУровень] = НоваяЗаписьКлассификатора;
		
	КонецЦикла;
	
	Элементы.КлассификаторДерево.АктивизироватьПоУмолчанию = Истина;
	Элементы.КлассификаторДерево.Видимость = ОтображатьЭлементыУправлениеИерархией;
	Элементы.КлассификаторСписок.Видимость = ОтображатьЭлементыУправлениеИерархией;
	
КонецПроцедуры

#КонецОбласти
// }
// 4D