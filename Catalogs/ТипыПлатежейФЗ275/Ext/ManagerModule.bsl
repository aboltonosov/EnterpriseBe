#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет перечень доступных типов платежей
//
// Параметры
//    ПараметрыПлатежа - Структура - Параметры справочника или документа, для которого определяются типы платежа
//
// Возвращаемое значение - Массив - Типы платежа в массиве располагаются по приоритету
//
Функция ДоступныеТипыПлатежа275ФЗ(ПараметрыПлатежа) Экспорт
	
	ДоступныеТипыПлатежа275ФЗ = Новый Массив;
	
	Если Не ПараметрыПлатежа.ПлатежиПо275ФЗ Тогда
		Возврат ДоступныеТипыПлатежа275ФЗ;
	КонецЕсли;
	
	Если ПараметрыПлатежа.Свойство("ХозяйственнаяОперация")
		И (ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если ПараметрыПлатежа.Свойство("ИностранныйИсполнительВУтвержденномПеречнеГОЗ")
			И ПараметрыПлатежа.ИностранныйИсполнительВУтвержденномПеречнеГОЗ Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(РасчетыСИностраннымиИсполнителями);
		КонецЕсли;
	
		Если ПараметрыПлатежа.Свойство("ДоговорСУчастникомГОЗ")
			И ПараметрыПлатежа.ДоговорСУчастникомГОЗ Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(СписаниеНаОтдельныйСчет);
		ИначеЕсли ПараметрыПлатежа.Свойство("ОплатаРасходовПоТарифамСГосрегулированием")
			И ПараметрыПлатежа.ОплатаРасходовПоТарифамСГосрегулированием Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(ОплатаТоваровРаботУслугПоРегулируемымЦенам);
		Иначе
			ДоступныеТипыПлатежа275ФЗ.Добавить(ОплатаИныхРасходовНаСуммуНеБолееТрехМиллионовРублейВМесяц);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПлатежа.Свойство("ХозяйственнаяОперация") Тогда
		Если ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			
			ДоступныеТипыПлатежа275ФЗ.Добавить(УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов);
		
		ИначеЕсли ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(СписаниеСвязаннноеСРазмещениемНаДепозитеУполномоченногоБанка);
		
		ИначеЕсли ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(СписаниеСуммКредитовПеречисленныхУполномоченнымБанком);
		
		ИначеЕсли ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
			Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
			Или ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(ОплатаТруда);
			
		ИначеЕсли ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств);
			
		ИначеЕсли ПараметрыПлатежа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(ОплатаИныхРасходовНаСуммуНеБолееТрехМиллионовРублейВМесяц);
			ДоступныеТипыПлатежа275ФЗ.Добавить(СписаниеПоИсполнительнымДокументам);
			ДоступныеТипыПлатежа275ФЗ.Добавить(ОплатаТруда);
		
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПлатежа.Свойство("БанковскийСчет")
		И ЗначениеЗаполнено(ПараметрыПлатежа.БанковскийСчет) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Данные
		|ГДЕ
		|	Данные.БанковскийСчет = &БанковскийСчет
		|	И Данные.ВыполненыОбязательстваПоДоговоруГОЗ
		|");
		Запрос.УстановитьПараметр("БанковскийСчет", ПараметрыПлатежа.БанковскийСчет);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ДоступныеТипыПлатежа275ФЗ.Добавить(ПеречисленияПрибылиИсполнителю);
			ДоступныеТипыПлатежа275ФЗ.Добавить(ПеречислениеПрибылиГоловномуИсполнителю);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныеТипыПлатежа275ФЗ;
	
КонецФункции

// Накладывает отбор на тип платежа 275ФЗ для указанного элемента переданного объекта
//
// Параметры:
//    Элемент - ПолеФормы - Элемент формы с типом платежа 275ФЗ
//    ПараметрыДоговора - Структура - Данные объекта, в форме которого требуется установить отбор
//        Ссылка - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыКредитовИДепозитов, СправочникСсылка.ДоговорыМеждуОрганизациями
//                 ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, ДокументСсылка.СписаниеБезналичныхДенежныхСредств - ссылка на объект
//        ДоговорСУчастникомГОЗ - Булево - обязательно
//        ПлатежиПо275ФЗ - Булево - обязательно
//        ИностранныйИсполнительВУтвержденномПеречнеГОЗ - Булево - обязательно, кроме СправочникСсылка.ДоговорыКредитовИДепозитов, СправочникСсылка.ДоговорыМеждуОрганизациями
//        ПеречислениеВБюджет - Булево - обязательно для документов
//        ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - обязательно для документов
//        ТипСуммыКредитаДепозита - ПеречислениеСсылка.ТипыСуммГрафикаКредитовИДепозитов - обязательно для документов с хоз. операциями ОплатаПоКредитам и ПеречислениеНаДепозиты
//
Процедура ПараметрыВыбораТипаПлатежа275ФЗ(Элемент, ПараметрыПлатежа) Экспорт
	
	МассивПараметров = Новый Массив;
	ДоступныеТипыПлатежа275ФЗ = Новый ФиксированныйМассив(ДоступныеТипыПлатежа275ФЗ(ПараметрыПлатежа));
	
	ПараметрСсылка = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеТипыПлатежа275ФЗ);
	МассивПараметров.Добавить(ПараметрСсылка);
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Определяет входит ли переданное значение в параметры отбора элемента
//
// Параметры:
//    Элемент - ПолеФормы - Элемент формы с типом платежа 275ФЗ
//    ТекущийТипПлатежа275ФЗ - СправочникСсылка.ТипыПлатежейФЗ275 - значение реквизита, связанного с переданным элементом
//
// Возвращаемое значение:
//	Булево - текущий тип платежа в ходит в состав устанавливаемого отбора, либо не входит или не проверялся, т.к. не был передан
//
Функция ТипПлатежа275ФЗВходитВОтбор(Элемент, ТипПлатежа275ФЗ) Экспорт
	
	ТипПлатежаВходитВОтбор = Ложь;
	
	КодТекущегоПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипПлатежа275ФЗ, "Код");
	ПараметрыВыбора = Элемент.ПараметрыВыбора;
	ЭлементПараметровВыбора = Неопределено;
	Для Каждого ЭлементПараметровВыбора Из ПараметрыВыбора Цикл
		Если ЭлементПараметровВыбора.Имя = "Отбор.Код" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТипПлатежа275ФЗ) И ЭлементПараметровВыбора <> Неопределено Тогда
		ТипПлатежаВходитВОтбор = (ЭлементПараметровВыбора.Значение.Найти(КодТекущегоПлатежа) <> Неопределено);
	КонецЕсли;
	
	Возврат ТипПлатежаВходитВОтбор;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодтверждающиеВидыДокументов(Ссылка) Экспорт
	
	ПодтверждающиеДокументыТипПлатежа = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыПлатежейФЗ275ПодтверждающиеДокументы.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275.ПодтверждающиеДокументы КАК ТипыПлатежейФЗ275ПодтверждающиеДокументы
	|ГДЕ
	|	ТипыПлатежейФЗ275ПодтверждающиеДокументы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции

Процедура ЗаполнитьПредопределенныеЭлементы() Экспорт
	
	МакетПоставляемыеДанные = Справочники.ТипыПлатежейФЗ275.ПолучитьМакет("ПоставляемыеДанные").ПолучитьТекст();
	ТаблицаПоставляемыхДанных = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетПоставляемыеДанные).Данные;
	
	Для Каждого СтрокаПоставляемыхДанных Из ТаблицаПоставляемыхДанных Цикл 
		ЭлементОбъект = Справочники.ТипыПлатежейФЗ275[СтрокаПоставляемыхДанных.Имя].ПолучитьОбъект();
		
		ЭлементОбъект.ПодтверждающиеДокументы.Очистить();
		
		ЭлементОбъект.ОписаниеПунктаЗакона = СтрокаПоставляемыхДанных.ОписаниеПунктаЗакона;
		ЭлементОбъект.НомерПунктаЗакона = СтрокаПоставляемыхДанных.НомерПунктаЗакона;
		ЭлементОбъект.НеТребуютсяДокументыПодтвержденияИсполненияКонтракта = Булево(СтрокаПоставляемыхДанных.НеТребуетсяДокументПодтверждающийИсполнениеРабот);
		
		// Добавим в табличную часть обязательные виды документов
		ДобавитьВидДокумента(ЭлементОбъект, Справочники.ВидыПодтверждающихДокументов.Контракт, Булево(СтрокаПоставляемыхДанных.ТребуетсяКонтракт));
		ДобавитьВидДокумента(ЭлементОбъект, Справочники.ВидыПодтверждающихДокументов.КредитныйДоговор, Булево(СтрокаПоставляемыхДанных.ТребуетсяКредитныйДоговор));
		ДобавитьВидДокумента(ЭлементОбъект, Справочники.ВидыПодтверждающихДокументов.ДепозитныйДоговор, Булево(СтрокаПоставляемыхДанных.ТребуетсяДепозитныйДоговор));
		
		СортироватьПоКодуВидаДокумента(ЭлементОбъект);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВидДокумента(Объект, ВидДокумента, ТребуетсяДобавление)
	
	Если ТребуетсяДобавление Тогда
		Если Объект.ПодтверждающиеДокументы.Найти(ВидДокумента , "ВидДокумента") = Неопределено Тогда
			НовыйОбязательныйДокумент = Объект.ПодтверждающиеДокументы.Добавить();
			НовыйОбязательныйДокумент.ВидДокумента = ВидДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортироватьПоКодуВидаДокумента(Объект)
	
	ВременнаяТаблица = Объект.ПодтверждающиеДокументы.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Код");
	
	ВидыДокументов = ВременнаяТаблица.ВыгрузитьКолонку("ВидДокумента");
	КодыВидовДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДокументов, "Код");
	
	Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл 
		СтрокаТаблицы.Код = КодыВидовДокументов[СтрокаТаблицы.ВидДокумента];
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("Код");
	
	Объект.ПодтверждающиеДокументы.Загрузить(ВременнаяТаблица);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_2_1

// Обработчик обновления УП 2.2
// Обновляет настройки предопределенных элементов
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	ЗаполнитьПредопределенныеЭлементы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли