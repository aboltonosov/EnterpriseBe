#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Для хозяйственной операции возвращает схему компоновки данных
// с помощью которой можно получить движения по текущей хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - хозяйственная операция 
//                        для которой требуется получить схему получения данных
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - схема получения данных по текущей хозяйственной операции
//
Функция СхемаПолученияДанных(ХозяйственнаяОперация) Экспорт

	СхемаПолученияДанных = Неопределено;
	ИмяИсточникаДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХозяйственнаяОперация, "ИсточникДанных");
	МакетыИсточниковПолученияДанных = Метаданные.Справочники.НастройкиХозяйственныхОпераций.Макеты;
	МакетИсточникаПолученияДанных = МакетыИсточниковПолученияДанных.Найти(ИмяИсточникаДанных);
	Если МакетИсточникаПолученияДанных <> Неопределено Тогда
		ИмяСхемы = МакетИсточникаПолученияДанных.Имя; 
		СхемаПолученияДанных = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет(ИмяСхемы);
	КонецЕсли;
	
	Возврат СхемаПолученияДанных;

КонецФункции

// Определяет список хозяйственных операций отражаемых в текущем регистре накопления.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра накопления
//
// Возвращаемое значение:
//    СправочникСсылка.НастройкиХозяйственныхОпераций - массив хозяйственных операций отражаемых в переданном регистре накопления
//
Функция ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.Ссылка
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.ИсточникДанных = &ИмяРегистра";
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистра);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает список всех регистров накопления используемых для хранения аналитической информации
//
// Возвращаемое значение:
//    СписокЗначений - список регистров накопления
//
Функция ДоступныеИсточникиДанных() Экспорт
	
	Список = Новый СписокЗначений;
	Регистры = Метаданные.РегистрыНакопления;
	Список.Добавить(Регистры.ВыручкаИСебестоимостьПродаж.Имя, Регистры.ВыручкаИСебестоимостьПродаж.Синоним);
	Список.Добавить(Регистры.ДвиженияДенежныеСредстваДоходыРасходы.Имя, Регистры.ДвиженияДенежныеСредстваДоходыРасходы.Синоним);
	Список.Добавить(Регистры.ДвиженияДенежныеСредстваКонтрагент.Имя, Регистры.ДвиженияДенежныеСредстваКонтрагент.Синоним);
	Список.Добавить(Регистры.ДвиженияДенежныхСредств.Имя, Регистры.ДвиженияДенежныхСредств.Синоним);
	Список.Добавить(Регистры.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Имя, Регистры.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Синоним);
	Список.Добавить(Регистры.ДвиженияКонтрагентДоходыРасходы.Имя, Регистры.ДвиженияКонтрагентДоходыРасходы.Синоним);
	Список.Добавить(Регистры.ДвиженияКонтрагентКонтрагент.Имя, Регистры.ДвиженияКонтрагентКонтрагент.Синоним);
	Список.Добавить(Регистры.ДвиженияНоменклатураДоходыРасходы.Имя, Регистры.ДвиженияНоменклатураДоходыРасходы.Синоним);
	Список.Добавить(Регистры.ДвиженияНоменклатураНоменклатура.Имя, Регистры.ДвиженияНоменклатураНоменклатура.Синоним);
	Список.Добавить(Регистры.Закупки.Имя, Регистры.Закупки.Синоним);
	Список.Добавить(Регистры.НДСЗаписиКнигиПокупок.Имя, Регистры.НДСЗаписиКнигиПокупок.Синоним);
	Список.Добавить(Регистры.НДСЗаписиКнигиПродаж.Имя, Регистры.НДСЗаписиКнигиПродаж.Синоним);
	Список.Добавить(Регистры.РасчетыСКлиентамиПоДокументам.Имя, Регистры.РасчетыСКлиентамиПоДокументам.Синоним);
	Список.Добавить(Регистры.РасчетыСПоставщикамиПоДокументам.Имя, Регистры.РасчетыСПоставщикамиПоДокументам.Синоним);
	
	Возврат Список;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик первого запуска.
// Заполняет предопределенные элементы справочника "НастройкиХозяйственныхОпераций".
//
Процедура ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций(Параметры = Неопределено) Экспорт
	
	РеквизитыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("НастройкиПредопределенныхЭлементов").ПолучитьТекст();
	РеквизитыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(РеквизитыXML).Данные;
	
	СвязанныеДокументыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("СвязанныеДокументы").ПолучитьТекст();
	СвязанныеДокументыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СвязанныеДокументыXML).Данные;
	ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументыТаблица);
	
	ФункциональныеОпцииXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("ФункциональныеОпции").ПолучитьТекст();
	ФункциональныеОпцииТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ФункциональныеОпцииXML).Данные;
	
	Для каждого Реквизиты Из РеквизитыТаблица Цикл
		ID = Реквизиты.ID;
		Объект = Справочники.НастройкиХозяйственныхОпераций[ID].ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Реквизиты);
		
		// На случай если региональные настройки представления логическийх значений отличаются от типовых.
		Объект.ИспользоватьВБюджетировании = Реквизиты.ИспользоватьВБюджетировании = "Да";
		Объект.ИспользоватьВМеждународномУчете = Реквизиты.ИспользоватьВМеждународномУчете = "Да";
		Объект.ИспользоватьДляВыбора = Реквизиты.ИспользоватьДляВыбора = "Да";
		Объект.ИспользоватьВРеестреДокументов = Реквизиты.ИспользоватьВРеестреДокументов = "Да";
		
		Приход = Реквизиты.Приход;
		Если ЗначениеЗаполнено(Приход) Тогда
			Объект.Приход = Перечисления.ТипыДанныхУчета[Приход];
		КонецЕсли;
		
		Расход = Реквизиты.Расход;
		Если ЗначениеЗаполнено(Расход) Тогда
			Объект.Расход = Перечисления.ТипыДанныхУчета[Расход];
		КонецЕсли;
		
		Хозоперация = Реквизиты.ID;
		Если ЗначениеЗаполнено(Хозоперация) Тогда
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации[Хозоперация];
		КонецЕсли;
		
		Объект.Документы.Очистить();
		НайденныеСтроки = СвязанныеДокументыТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Свернуть("ПредставлениеДокумента,ИдентификаторОбъектаМетаданных");
		НайденныеСтроки.Сортировать("ПредставлениеДокумента");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторОбъектаМетаданных) Тогда
				ЗаполнитьЗначенияСвойств(Объект.Документы.Добавить(), НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ФункциональныеОпции.Очистить();
		НайденныеСтроки = ФункциональныеОпцииТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Сортировать("ИмяФункциональнойОпции");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(Объект.ФункциональныеОпции.Добавить(), НайденнаяСтрока);
		КонецЦикла;
		
		//++ НЕ УТ
		ПоказателиРегистра = ПоказателиРегистра(Объект.ИсточникДанных);
		Если ПоказателиРегистра <> Неопределено Тогда
			Объект.ПоказателиРегистра.Очистить();
			Для каждого Показатель Из ПоказателиРегистра Цикл
				НоваяСтрока = Объект.ПоказателиРегистра.Добавить();
				НоваяСтрока.Показатель = Показатель.Ключ;
				НоваяСтрока.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияВнеоборотныхАктивов Тогда
			Объект.ПоказателиРегистра.Очистить();
			Строка = Объект.ПоказателиРегистра.Добавить();
			Строка.Показатель = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			Строка.Использование = Истина;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНДФЛ Тогда
			Объект.ПоказателиРегистра.Очистить();
			Строка = Объект.ПоказателиРегистра.Добавить();
			Строка.Показатель = Перечисления.ПоказателиАналитическихРегистров.Сумма;
			Строка.Использование = Истина;
		КонецЕсли;
		
		Объект.ПоказателиРегистра.Сортировать("Показатель");
		//-- НЕ УТ
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументы)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.OwnerID,
	|	Т.ИмяДокумента КАК ИмяДокумента,
	|	Т.ПредставлениеДокумента
	|ПОМЕСТИТЬ втСвязанныеДокументы
	|ИЗ
	|	&СвязанныеДокументы КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязанныеДокументы.OwnerID,
	|	втСвязанныеДокументы.ИмяДокумента,
	|	втСвязанныеДокументы.ПредставлениеДокумента,
	|	ИдентификаторыМетаданных.Ссылка КАК ИдентификаторОбъектаМетаданных
	|ИЗ
	|	втСвязанныеДокументы КАК втСвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|		ПО ВЫРАЗИТЬ(втСвязанныеДокументы.ИмяДокумента КАК СТРОКА(255)) = ИдентификаторыМетаданных.Имя
	|			И ИдентификаторыМетаданных.Родитель.Наименование = ""Документы""
	|");
	
	Запрос.УстановитьПараметр("СвязанныеДокументы", СвязанныеДокументы);
	СвязанныеДокументы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

//++ НЕ УТ
Функция ПоказателиРегистра(ИмяИсточникаДанных) Экспорт

	Если ПустаяСтрока(ИмяИсточникаДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Показатели = МеждународныйУчетСерверПовтИсп.Показатели(ИмяИсточникаДанных);
	
	Возврат Показатели;

КонецФункции
//-- НЕ УТ
#КонецОбласти

#КонецОбласти

#КонецЕсли