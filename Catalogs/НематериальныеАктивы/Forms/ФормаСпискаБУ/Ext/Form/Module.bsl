
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСведения = Ложь;
	ЗаполнитьСвойстваЭлементовСведений();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.НематериальныеАктивы);
	Элементы.ИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, "ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СохраненноеЗначение = Настройки.Получить("ПоказатьСведения");
	ПоказатьСведения = ?(ЗначениеЗаполнено(СохраненноеЗначение), СохраненноеЗначение, Истина);
	ЗаполнитьСвойстваЭлементовСведений();
	
	ОтборСостояние = Настройки.Получить("ОтборСостояние");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Состояние",
		ОтборСостояние,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборСостояние));
	
	ОтборОрганизация = Настройки.Получить("ОтборОрганизация");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Состояние",
		ОтборСостояние,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборСостояние));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСведения", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Сведения(Команда)
	
	ПоказатьСведения = Не ПоказатьСведения;
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения'");
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения'");
	КонецЕсли;
	
КонецПроцедуры

#Область СтандатрныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСвойстваЭлементовСведений()
	
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения'");
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаБУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='БУ'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаНУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='НУ'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаПР1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ПР'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСуммСуммаВР1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ВР'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведения()
	
	Если ПоказатьСведения Тогда
		
		СведенияТаблицаСумм.Очистить();
		Если Элементы.Список.ВыделенныеСтроки.Количество() <> 0 Тогда
			Массив = ПолучитьСведения(Элементы.Список.ТекущаяСтрока);
			Для Каждого Эл Из Массив Цикл
				ЗаполнитьЗначенияСвойств(СведенияТаблицаСумм.Добавить(), Эл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведения(ВнеоборотныйАктив)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьПР", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьВР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияПР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияВР", 0);
	ЗначенияПоУмолчанию.Вставить("ЭтоНИОКР", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК ОбъектУчета,
	|	СчетаОтражения.СчетУчета КАК СчетУчета,
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФ,
	|	ПараметрыЦелевогоФинансирования.СчетАмортизации КАК СчетАмортизацииЦФ,
	|	ВЫБОР
	|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНИОКР
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК СчетаОтражения
	|		ПО НематериальныеАктивы.Ссылка = СчетаОтражения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК ПараметрыЦелевогоФинансирования
	|		ПО НематериальныеАктивы.Ссылка = ПараметрыЦелевогоФинансирования.НематериальныйАктив
	|ГДЕ
	|	НематериальныеАктивы.Ссылка = &ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчетаЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизацииЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Субконто1 В (&ВнеоборотныйАктив)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР, 0) КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР + СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0)) / (ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0))
	|	КОНЕЦ КАК ДоляПР,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(-Амортизация.СуммаПР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(-Амортизация.СуммаВР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаВР, 0) КАК АмортизацияВР,
	|	втАктивыИСчетаУчета.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ЕСТЬNULL(СведенияБУ.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ЕСТЬNULL(СведенияНУ.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК СведенияБУ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СведенияБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК СведенияНУ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СведенияНУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК СтоимостьЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СтоимостьЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчетаЦФ = СтоимостьЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК АмортизацияЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = АмортизацияЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизацииЦФ = АмортизацияЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьБУ
	|	КОНЕЦ КАК СтоимостьБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (1 - ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.СтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияБУ
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - ВременнаяТаблица.СтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияНУ
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияПР
	|	КОНЕЦ КАК АмортизацияПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ) - (ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияВР
	|	КОНЕЦ КАК АмортизацияВР
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	ЗаголовокВалюты = Строка(Константы.ВалютаРегламентированногоУчета.Получить());
	
	Поля = "Представление, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР";
	
	Массив = Новый Массив;
	
	Заголовок = НСтр("ru='Восстановительная стоимость (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru='Первоначальная стоимость (%1):'");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР;
	Массив.Добавить(Строка);
	
	Заголовок = НСтр("ru='Накопленная амортизация (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru='Погашенная стоимость (%1):'");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.АмортизацияВР;
	Массив.Добавить(Строка);
	
	Заголовок = НСтр("ru='Остаточная стоимость (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР-ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР-ЗначенияПоУмолчанию.АмортизацияВР;
	Массив.Добавить(Строка);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти