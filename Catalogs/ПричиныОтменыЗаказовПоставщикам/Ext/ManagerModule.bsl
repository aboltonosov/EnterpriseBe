
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УП 2.2.2,
// заполняет реквизит "Инициатор" предопределенного элемента справочника "ПричиныОтменыЗаказовПоставщикам".
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Причина = Справочники.ПричиныОтменыЗаказовПоставщикам.ОтклонениеПриПриемкеМерныхТоваров;
	
	Если НЕ ЗначениеЗаполнено(Причина.ИнициаторОтменыЗаказовПоставщикам) Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Причина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПричиныОтменыЗаказовПоставщикам";
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеСправочника,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СправочникОбъект = Неопределено Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект.ИнициаторОтменыЗаказовПоставщикам = Перечисления.ИнициаторОтменыЗаказовПоставщикам.Поставщик;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет предопределенный элемент справочника "Причины отмены заказов поставщикам"
//
Процедура ЗаполнитьПредопределенныеЭлементы() Экспорт
	
	СправочникОбъект = Справочники.ПричиныОтменыЗаказовПоставщикам.ОтклонениеПриПриемкеМерныхТоваров.ПолучитьОбъект();
	СправочникОбъект.ИнициаторОтменыЗаказовПоставщикам = Перечисления.ИнициаторОтменыЗаказовПоставщикам.Поставщик;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
