&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	УстановитьВидимостьОпераций();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаРежимаРасчетаДатыВозврата","Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару"),Истина);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СоглашенияСПоставщиками",ПараметрыЗаписи,Объект.Ссылка);
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборАгентскихУслуг" Тогда
		Модифицированность = Истина;
		ОбновитьУслугиПоОтборуНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусСоглашения = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Закрыто") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаВознагражденияПриИзмененииСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПроцентВознаграждения");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Или
		Не ЗначениеЗаполнено(Объект.СпособРасчетаВознаграждения) Тогда
		Объект.ПроцентВознаграждения  = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаВознагражденияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.ВалютаВзаиморасчетов,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета,
		Объект.ИспользуютсяДоговорыКонтрагентов);
	
	ЗаполнитьВариантыПорядкаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОплатыПриИзменении(Элемент)
	
	ЗаполнитьГруппуФинансовогоУчета(Объект.ПорядокОплаты, Объект.ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ЗаполнитьПорядокОплаты(Объект.ГруппаФинансовогоУчета, Объект.ПорядокОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент)
	
	Объект.ИспользуютсяДоговорыКонтрагентов = Булево(ИспользуютсяДоговорыКонтрагентов);
	
	ЗаполнитьПорядокРасчетов();
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьВидимостьВариантаОформленияПриходныхОрдеровНаТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФормаОплаты",               Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Календарь",                 Объект.Календарь);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",      Объект.ВозвращатьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыОплаты = Неопределено;

	ОткрытьФорму("Справочник.СоглашенияСПоставщиками.Форма.ФормаОплаты", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НадписьОплатаНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыОплаты = Результат;
    
    Если ПараметрыОплаты <> Неопределено Тогда
        
        Модифицированность = Истина;
        Объект.Согласован  = Ложь;
        Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
        Объект.Календарь   = ПараметрыОплаты.Календарь;
        Объект.ЭтапыГрафикаОплаты.Очистить();
        Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
            ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
        КонецЕсли;
        НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
        
        УстановитьДоступностьЭлементовПоСтатусуСервер();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвращатьМногооборотнуюТаруПриИзменении(Элемент)
	
	Если Не Объект.ВозвращатьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент)
	Объект.РассчитыватьДатуВозвратаТарыПоКалендарю = Булево(РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	Элементы.КалендарьВозвратаТары.Доступность = Объект.РассчитыватьДатуВозвратаТарыПоКалендарю И Объект.ВозвращатьМногооборотнуюТару;
	Элементы.КалендарьВозвратаТары.АвтоОтметкаНезаполненного = Объект.РассчитыватьДатуВозвратаТарыПоКалендарю;
	
	Если Объект.РассчитыватьДатуВозвратаТарыПоКалендарю Тогда
		ЗаполнитьПроизводственныйКалендарьНаСервере();
	Иначе
		Объект.КалендарьВозвратаТары = ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВсеУслугиНажатие(Элемент)
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор, Принципал, ЭтоПодбор",
							УникальныйИдентификатор, Объект.Партнер, Ложь);
	ОткрытьФорму("ОбщаяФорма.ПодборАгентскихУслуг", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВыбранныеУслуги(Элемент)
	АдресВХранилище = ПоместитьУслугиВХранилище(
			Объект.АгентскиеУслуги,
			УникальныйИдентификатор);

	ПараметрыФормы = Новый Структура("УникальныйИдентификатор, Принципал, ЭтоПодбор",
						АдресВХранилище, Объект.Партнер, Истина);
	ОткрытьФорму("ОбщаяФорма.ПодборАгентскихУслуг", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТипыУслугПриИзменении(Элемент)
	ОбновитьВидимостьАгентскихУслуг();
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеОрдераПриИзменении(Элемент)
	Модифицированность = Истина;
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТоваровПриИзменении(Элемент)
	Модифицированность = Истина;	
	ПриИзмененииНастроекПриемкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.ВалютаВзаиморасчетов,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета,
		Объект.ИспользуютсяДоговорыКонтрагентов);
		
	ЗаполнитьВариантыПорядкаОплаты();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмяТабличнойЧасти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура УстановитьИнтервалВыполнить(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьРеквизитыПоУмолчанию();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		Объект.ПроцентРучнойСкидки          = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.ПроцентРучнойСкидки.ЗначениеЗаполнения;
		Объект.ПроцентРучнойНаценки         = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.ПроцентРучнойНаценки.ЗначениеЗаполнения;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
			ИЛИ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли;
		
		Объект.ВозвращатьМногооборотнуюТару = Ложь;
		Объект.ТребуетсяЗалогЗаТару = Ложь;
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаОплаты Из Объект.ЭтапыГрафикаОплаты Цикл
			Если СтрокаОплаты.ВариантОплаты <> Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			Объект.ЭтапыГрафикаОплаты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		КоличествоЭтапов = Объект.ЭтапыГрафикаОплаты.Количество();
		Если КоличествоЭтапов = 1 Тогда
			Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа = 100;
		ИначеЕсли КоличествоЭтапов = 0
				И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках") Тогда
			СтрокаЭтапа = Объект.ЭтапыГрафикаОплаты.Добавить();
			СтрокаЭтапа.ВариантОплаты  = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
			СтрокаЭтапа.ПроцентПлатежа = 100;
		КонецЕсли;
		
		НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
		
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
		
		ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
			Объект.ВалютаВзаиморасчетов,
			Объект.НалогообложениеНДС,
			Объект.ПорядокОплаты,
			Объект.ГруппаФинансовогоУчета,
			Объект.ИспользуютсяДоговорыКонтрагентов);
			
		ЗаполнитьВариантыПорядкаОплаты();
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		
		Объект.ВозвращатьМногооборотнуюТару = Ложь;
		Объект.ТребуетсяЗалогЗаТару = Ложь;
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		ЗаполнитьГруппуФинансовогоУчета(Объект.ПорядокОплаты, Объект.ГруппаФинансовогоУчета);
		
	Иначе
		
		Объект.СпособРасчетаВознаграждения = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.СпособРасчетаВознаграждения.ЗначениеЗаполнения;
		Объект.ПроцентВознаграждения       = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение      = Метаданные.Справочники.СоглашенияСПоставщиками.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		
	КонецЕсли;
	
	ЗакупкиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДС, Объект.ХозяйственнаяОперация);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ЗаполнитьПорядокРасчетов();
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ОбновитьВидимостьАгентскихУслуг();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекПриемкиСервер();
	УстановитьДоступностьПриемки();
	Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантовПриемкиПоНастройкам(ОформлениеОрдера, ПриемкаТоваров);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) 
		И УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(Объект.Контрагент.СтранаРегистрации) Тогда
		
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
		ПриИзмененииХозяйственнойОперацииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	СтатусСоглашения = Объект.Статус;
	РассчитыватьДатуВозвратаТарыПоКалендарю = Число(Объект.РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьВидимостьВариантаОформленияПриходныхОрдеровНаТовары();
	НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
	ИспользуютсяДоговорыКонтрагентов = Число(Объект.ИспользуютсяДоговорыКонтрагентов);
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьКоличествоАгентскихУслуг();
	УстановитьВидимостьАгентскихУслуг();
	ЗакупкиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДС, Объект.ХозяйственнаяОперация);
	ЗакупкиСервер.ЗаполнитьНастройкиВариантовПриемки(Объект.ВариантПриемкиТоваров,ОформлениеОрдера, ПриемкаТоваров);
	ЗакупкиСервер.ЗаполнитьСписокВыбораВариантовПриемкиПоСоглашениям(Элементы.ОформлениеОрдера, Элементы.ПриемкаТоваров);
	УстановитьДоступностьПриемки();
	//++ НЕ УТ
	//КонтролируемыеСделки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияОКонтролируемыхСделках") Тогда
		Элементы.ГруппаКонтролируемыеСделки.Видимость = ПравоДоступа("Просмотр", Метаданные.Справочники.СпособыОпределенияЦенКонтролируемыхСделок);
		Элементы.ГруппаКонтролируемыеСделки.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.СпособыОпределенияЦенКонтролируемыхСделок);
		Если Элементы.ГруппаКонтролируемыеСделки.Доступность Тогда
			УстановитьРежимВыбораКодовКонтролируемыхСделок(Элементы.ГруппаКонтролируемыеСделки);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ЗаполнитьВариантыПорядкаОплаты();
	
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	Элементы.ГруппаВариантыПриемки.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.ГруппаВариантыПриемкиРеквизиты.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.ОформлениеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.ПриемкаТоваров.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	
	Элементы.ОформлениеОрдера.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.СоглашенияСПоставщиками);
	Элементы.ПриемкаТоваров.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.СоглашенияСПоставщиками);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Закрыто Или
		Объект.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентРучнойНаценки");
	МассивЭлементов.Добавить("РегистрироватьЦеныПоУсловиям");
	МассивЭлементов.Добавить("КонтролироватьЦеныЗакупки");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("ПорядокОплаты");
	МассивЭлементов.Добавить("Календарь");
	МассивЭлементов.Добавить("ОформлениеОрдера");
	МассивЭлементов.Добавить("ПриемкаТоваров");
	МассивЭлементов.Добавить("ИспользуютсяДоговорыКонтрагентов");
	МассивЭлементов.Добавить("ЭтапыГрафикаОплаты");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ВозвращатьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("НеРассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Справочники.СоглашенияСПоставщиками.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СпособРасчетаВознаграждения");
	МассивЭлементов.Добавить("ПроцентВознаграждение");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Истина);
		СпособРасчетаВознагражденияПриИзмененииСервер();
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоУсловиям", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаПереходаКУсловиямЦен", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиАгентскихУслуг", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДоступность", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставки", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВозвращатьСрокВозврата", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокВозвратаМногооборотнойТары", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТребуетсяЗалогЗаТару", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРежимаРасчетаДатыВозврата", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщикаАвтоматически", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставкиДекорация", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтролироватьЦеныЗакупки", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплата", "Видимость", Истина);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОказаниеАгентскихУслуг Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Истина);
		СпособРасчетаВознагражденияПриИзмененииСервер();
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРегистрироватьЦеныПоУсловиям", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДоступность", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиАгентскихУслуг", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставки", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВозвращатьСрокВозврата", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокВозвратаМногооборотнойТары", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТребуетсяЗалогЗаТару", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРежимаРасчетаДатыВозврата", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщикаАвтоматически", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставкиДекорация", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтролироватьЦеныЗакупки", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплата", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоУсловиям", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаПереходаКУсловиямЦен", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиАгентскихУслуг", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДоступность", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставки", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВозвращатьСрокВозврата", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокВозвратаМногооборотнойТары", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТребуетсяЗалогЗаТару", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРежимаРасчетаДатыВозврата", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщикаАвтоматически", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПоставкиДекорация", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтролироватьЦеныЗакупки", "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплата", "Видимость", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьПродажуАгентскихУслуг") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОказаниеАгентскихУслуг);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВариантаОформленияПриходныхОрдеровНаТовары()
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Неопределено));
	Иначе
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
		Если СкладГруппа Тогда
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Неопределено));
		Иначе
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		Для Каждого ЭтапГрафикаОплаты Из Объект.ЭтапыГрафикаОплаты Цикл
			
			Если ЭтапГрафикаОплаты.ВариантОплаты <> Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				
				ТекстОшибки = НСтр("ru='Вариант оплаты ""%ВариантОплаты%"" нельзя использовать'") + Символы.ПС;
				ТекстОшибки = ТекстОшибки + НСтр("ru='при установленной хозяйственной операции ""Прием на комиссию""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплаты%", ЭтапГрафикаОплаты.ВариантОплаты);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"НадписьОплата",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(Валюта, НалогообложениеНДС, ПорядокОплаты, ГруппаФинансовогоУчета, ИспользуютсяДоговорыКонтрагентов)
	
	Если НЕ ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, НалогообложениеНДС);
	КонецЕсли;
	
	ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета)
	
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплаты(ГруппаФинансовогоУчета, ПорядокОплаты)
	
	ПорядокОплаты = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьРеквизитыГруппыФинансовогоУчета(ГруппаФинансовогоУчета).ПорядокОплаты;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ВидимостьПорядкаРасчетов   = Ложь;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов по отчетам по комиссии'");
	ИначеЕсли НЕ ИспользоватьЗаказыПоставщикам Тогда
		ВидимостьПорядкаРасчетов   = Ложь;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов по накладным'");
	ИначеЕсли Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		ВидимостьПорядкаРасчетов   = Истина;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов:'");
	Иначе
		ВидимостьПорядкаРасчетов   = Истина;
		ДоступностьПорядкаРасчетов = Истина;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов:'");
	КонецЕсли;
	
	Элементы.ПорядокРасчетов.Видимость   = ВидимостьПорядкаРасчетов;
	Элементы.ПорядокРасчетов.Доступность = ДоступностьПорядкаРасчетов;
	
	Элементы.НеИспользуютсяДоговорыКонтрагентов.СписокВыбора.Очистить();
	Элементы.НеИспользуютсяДоговорыКонтрагентов.СписокВыбора.Добавить(0, ТекстИспользуютсяДоговорыКонтрагентов);
	
	Элементы.ПорядокОплаты.Доступность = НЕ Объект.ИспользуютсяДоговорыКонтрагентов;
	Элементы.ВалютаВзаиморасчетов.Доступность = НЕ Объект.ИспользуютсяДоговорыКонтрагентов
												И НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	Если Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПустаяСсылка();
		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	Если Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ИначеЕсли НЕ ИспользоватьЗаказыПоставщикам Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("НеРассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("КалендарьВозвратаТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВозвращатьМногооборотнуюТару);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВозвращатьМногооборотнуюТару",
		"Доступность",
		Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту")
		И Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС")
		И Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
		
	Форма.Элементы.КалендарьВозвратаТары.Доступность = Форма.Объект.РассчитыватьДатуВозвратаТарыПоКалендарю И Форма.Объект.ВозвращатьМногооборотнуюТару;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроизводственныйКалендарьНаСервере()
	
	КалендарныеГрафики.ЗаполнитьПроизводственныйКалендарьВФорме(ЭтаФорма, "Объект.КалендарьВозвратаТары");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьАгентскихУслуг()
	Если ТипыУслуг = "ДляВыбранныхУслуг" Тогда
		Объект.ИспользоватьУказанныеАгентскиеУслуги = Истина;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПустаяДекорация","Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПерейтиВыбранныеУслуги","Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПерейтиВсеУслуги","Видимость", Ложь);
	Иначе
		Объект.ИспользоватьУказанныеАгентскиеУслуги = Ложь;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПустаяДекорация","Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПерейтиВсеУслуги","Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПерейтиВыбранныеУслуги","Видимость", Ложь);
		Объект.АгентскиеУслуги.Очистить();
		РассчитатьКоличествоВыбранныхУслуг();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьУслугиПоОтборуНаСервере(АдресВоВременномХранилище)
	
	Объект.АгентскиеУслуги.Очистить();
	ТаблицаАгентскиеУслуги = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для Каждого ТекСтрока Из ТаблицаАгентскиеУслуги Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ТекСтрока.Характеристика);
		НайденныеСтроки = Объект.АгентскиеУслуги.НайтиСтроки(ПараметрыОтбора); 
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.АгентскиеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьКоличествоВыбранныхУслуг();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьУслугиВХранилище(Знач Услуги, УникальныйИдентификатор)

	АдресВХранилище = ПоместитьВоВременноеХранилище(
		Услуги.Выгрузить(,"Номенклатура, Характеристика"),
		УникальныйИдентификатор);
		
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоличествоАгентскихУслуг()
	
	РассчитатьКоличествоВыбранныхУслуг();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЛОЖЬ КАК Выбран
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И Номенклатура.Принципал = &Принципал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА Номенклатура.ВидНоменклатуры
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|	И ХарактеристикиНоменклатуры.Принципал = &Принципал";
	
	Запрос.УстановитьПараметр("Принципал", Объект.Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстЗаголовка = НСтр("ru = 'Перейти (%Количество% шт.)'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Количество%", Выборка.Количество());
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерейтиВсеУслуги", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоВыбранныхУслуг()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПерейтиВыбранныеУслуги",
				"Заголовок", НСтр("ru = 'Перейти ('") +Объект.АгентскиеУслуги.Количество()+ " " + НСтр("ru = 'шт.)'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьАгентскихУслуг()
	Если Объект.ИспользоватьУказанныеАгентскиеУслуги Тогда
		ТипыУслуг = "ДляВыбранныхУслуг";
	Иначе
		ТипыУслуг = "ДляВсехУслуг";
	КонецЕсли;
	ОбновитьВидимостьАгентскихУслуг();
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриемки()
	Если ОформлениеОрдера = "ПоСоглашению" Тогда
		Элементы.ПриемкаТоваров.Доступность = Ложь;
		ПриемкаТоваров = "НеРазделена";
	Иначе
		Элементы.ПриемкаТоваров.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

//++ НЕ УТ
&НаСервереБезКонтекста
Процедура УстановитьРежимВыбораКодовКонтролируемыхСделок(ГруппаКонтролируемыеСделки)
	
	УстановитьПривилегированныйРежим(Истина);
	СписокКодовНаименованийСделок = КонтролируемыеСделкиПовтИсп.ПолучитьСписокКодовНаименованийСделки();
	СписокКодовПоставки = КонтролируемыеСделкиПовтИсп.ПолучитьКодыУсловийПоставки();
	УстановитьПривилегированныйРежим(Ложь);
	
	ГруппаКонтролируемыеСделки.ПодчиненныеЭлементы.КодНаименованияСделки.СписокВыбора.Очистить();
	Для Каждого Код Из СписокКодовНаименованийСделок Цикл
		НовыйКод = ГруппаКонтролируемыеСделки.ПодчиненныеЭлементы.КодНаименованияСделки.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйКод, Код);
	КонецЦикла;
	
	ГруппаКонтролируемыеСделки.ПодчиненныеЭлементы.КодУсловийПоставки.СписокВыбора.Очистить();
	Для Каждого Код Из СписокКодовПоставки Цикл
		НовыйКод = ГруппаКонтролируемыеСделки.ПодчиненныеЭлементы.КодУсловийПоставки.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйКод, Код);
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ
#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокОплаты" Тогда
		ПорядокОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ИспользуютсяДоговорыКонтрагентов" Тогда
		ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращатьМногооборотнуюТару" Тогда
		ВозвращатьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РассчитыватьДатуВозвратаТарыПоКалендарю" Тогда
		РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеРассчитыватьДатуВозвратаТарыПоКалендарю" Тогда
		РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОформлениеОрдера" Тогда
		ОформлениеОрдераПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПриемкаТоваров" Тогда
		ПриемкаТоваровПриИзменении(Элемент)
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервалВыполнить(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

&НаСервере
Процедура ЗаполнитьВариантыПорядкаОплаты()
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов,Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
