#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Дата окончания действия должна быть не меньше даты начала.
	Если ЗначениеЗаполнено(НачалоДействия) 
		И ЗначениеЗаполнено(КонецДействия) 
		И НачалоДействия > КонецДействия Тогда
		
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты начала действия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "КонецДействия",, Отказ);
			
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КоличествоУпаковок");
	
	Если НЕ ИспользоватьВыходныеИзделия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КоличествоУпаковок");
	КонецЕсли;
	Если НЕ ИспользоватьМатериалы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Характеристика");
	КонецЕсли; 
	Если НЕ ИспользоватьТрудозатраты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ВидРабот");
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	КонецЕсли; 
	
	Если ИспользоватьМатериалы Тогда
		ПроверитьЗаполнениеМатериалов(Отказ);
		
		СписокСтрок = МатериалыИУслуги.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
		ПараметрыПроверки.СписокСтрок = СписокСтрок;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли; 
	
	Если ИспользоватьВыходныеИзделия Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли; 
	
	Если Статус = Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
		ПроверитьЗаполнениеДолиСтоимости(Отказ);
		Если ИспользоватьОперации Тогда
			Справочники.МаршрутныеКарты.ПоследовательностьОперацийПравильная(Ссылка, Отказ);
		КонецЕсли;
		Если ПредварительныйБуфер = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		КонецЕсли; 
		Если ЗавершающийБуфер = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
		КонецЕсли; 
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		МассивНепроверяемыхРеквизитов.Добавить("НачалоДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КонецДействия");
		МассивНепроверяемыхРеквизитов.Добавить("Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмерения");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	КонецЕсли;
	
	Если НЕ РассчитыватьКоэффициент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЧислитель");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентЗнаменатель");
	КонецЕсли;
	
	Если НЕ Справочники.МаршрутныеКарты.ЕстьАвтовыборМатериалов(МатериалыИУслуги) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДляВидаИзделий");
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = Метаданные().ТабличныеЧасти;
	Если ИспользоватьВыходныеИзделия Тогда
		ПроверитьВыборОпераций("ВыходныеИзделия",  ТабличныеЧастиОбъекта.ВыходныеИзделия.Синоним, Отказ);
		ПроверитьВыборОпераций("ВозвратныеОтходы", ТабличныеЧастиОбъекта.ВозвратныеОтходы.Синоним, Отказ);
	КонецЕсли; 
	Если ИспользоватьМатериалы Тогда
		ПроверитьВыборОпераций("МатериалыИУслуги", ТабличныеЧастиОбъекта.МатериалыИУслуги.Синоним, Отказ, "Операция");
	КонецЕсли; 
	Если ИспользоватьТрудозатраты Тогда
		ПроверитьВыборОпераций("Трудозатраты",ТабличныеЧастиОбъекта.Трудозатраты.Синоним, Отказ, "Операция");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ВидНоменклатуры");
			ДляВидаИзделий = СтруктураРеквизитов.ВидНоменклатуры;
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура = ДанныеЗаполнения;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Количество         = 1;
			
		КонецЕсли;
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Статус         = Перечисления.СтатусыМаршрутныхКарт.ВРазработке;
	Ответственный  = Пользователи.ТекущийПользователь();
	Подразделение  = Справочники.СтруктураПредприятия.ПустаяСсылка();
	НачалоДействия = '00010101';
	
	ОчиститьВыборОпераций();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ПометкаУдаления Тогда
			Статус = Перечисления.СтатусыМаршрутныхКарт.Закрыта;
			ОчиститьВыборОпераций();
			УбратьПризнакОсновнойМаршрутнойКарты();
		КонецЕсли; 
		
		ПередЗаписьюДействующейМаршрутнойКарты(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ПередЗаписьюДействующейМаршрутнойКарты(Отказ)

	Если Статус = Перечисления.СтатусыМаршрутныхКарт.Действует И НЕ ПометкаУдаления И НЕ Отказ Тогда
		
		ОбновитьПривязкуОпераций(Отказ);
		ПроверитьМаксимальнуюГлубинуВложенности(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение реквизита Операция в табличной части ВыходныеИзделия
//  - если реквизит ОперацияРедактирование не пустой то подставляет значение из него
//  - если реквизит ОперацияРедактирование пустой то подставляет последнюю операцию
//
Процедура ОбновитьПривязкуОпераций(Отказ)

	Если НЕ ИспользоватьВыходныеИзделия Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоВычислитьОперациюИзделий = 
			(ВыходныеИзделия.Найти(Справочники.ТехнологическиеОперации.ПустаяСсылка(), "ОперацияРедактирование") <> Неопределено)
			ИЛИ (ВозвратныеОтходы.Найти(Справочники.ТехнологическиеОперации.ПустаяСсылка(), "ОперацияРедактирование") <> Неопределено);
	
	КоличествоПоследнихОпераций = 0;
	
	Если НеобходимоВычислитьОперациюИзделий Тогда
		
		// Получим первую и последюю операции
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТехнологическиеОперации.Ссылка,
		               |	ТехнологическиеОперации.НомерОперации,
		               |	ТехнологическиеОперации.НомерСледующейОперации
		               |ИЗ
		               |	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		               |ГДЕ
		               |	ТехнологическиеОперации.НомерСледующейОперации = 0
		               |	И ТехнологическиеОперации.Владелец = &Владелец
		               |	И НЕ ТехнологическиеОперации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ПоследняяОперация = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если Выборка.НомерСледующейОперации = 0 Тогда
				ПоследняяОперация = Выборка.Ссылка;
				КоличествоПоследнихОпераций = КоличествоПоследнихОпераций + 1;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	// Обновим реквизит Операция
	Для каждого СтрокаТЧ Из ВыходныеИзделия Цикл
		Если СтрокаТЧ.ОперацияРедактирование.Пустая() Тогда
			Если КоличествоПоследнихОпераций > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Маршрутная карта завершается несколькими операциям. Необходимо уточнить операцию.'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаТЧ.НомерСтроки, "ОперацияРедактирование");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			Иначе	
				СтрокаТЧ.Операция = ПоследняяОперация;
			КонецЕсли; 
		Иначе
			СтрокаТЧ.Операция = СтрокаТЧ.ОперацияРедактирование;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаТЧ Из ВозвратныеОтходы Цикл
		Если СтрокаТЧ.ОперацияРедактирование.Пустая() Тогда
			Если КоличествоПоследнихОпераций > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Маршрутная карта завершается несколькими операциям. Необходимо уточнить операцию.'");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", СтрокаТЧ.НомерСтроки, "ОперацияРедактирование");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			Иначе	
				СтрокаТЧ.Операция = ПоследняяОперация;
			КонецЕсли; 
		Иначе
			СтрокаТЧ.Операция = СтрокаТЧ.ОперацияРедактирование;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьМаксимальнуюГлубинуВложенности(Отказ)
	
	Глубина = 0;
	МаксГлубина = Справочники.МаршрутныеКарты.МаксимальнаяГлубинаВложенности();
	
	ПутиВГрафе = Новый Соответствие;
	ПутиВГрафе.Вставить(Ссылка, Новый Массив);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныеМаршруты.Владелец         КАК Владелец,
		|	ВложенныеМаршруты.ВложенныйМаршрут КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК ВложенныеМаршруты
		|ГДЕ
		|	ВложенныеМаршруты.Владелец В (&МассивСсылок)
		|	И ВложенныеМаршруты.СодержитВложенныйМаршрут
		|	И Не ВложенныеМаршруты.ПометкаУдаления");
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	Пока Глубина <> МаксГлубина И МассивСсылок.ВГраница() <> -1 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		МассивСсылок.Очистить();
		ПутиВГрафеНовый = Новый Соответствие;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПутиВГрафе[Выборка.Владелец].Найти(Выборка.Владелец) = Неопределено Тогда
				ПутиВГрафе[Выборка.Владелец].Вставить(0,Выборка.Владелец);
			КонецЕсли;
			ПутиВГрафеНовый.Вставить(Выборка.Ссылка, ПутиВГрафе[Выборка.Владелец]); 
			
			МассивСсылок.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
		ПутиВГрафе = ПутиВГрафеНовый;
		ПутиВГрафеНовый = Неопределено;
		Глубина = Глубина + 1;
		
	КонецЦикла;
	
	Если Глубина <> МаксГлубина Тогда
		Возврат;
	КонецЕсли;
	
	ПутьВГрафе = Новый ТаблицаЗначений;
	ПутьВГрафе.Колонки.Добавить("Вершина", Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты"));
	ПутьВГрафе.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для каждого КлючИЗначение Из ПутиВГрафе Цикл
		Путь = КлючИЗначение.Значение;
		Для Индекс = 0 По Путь.ВГраница() Цикл
			НоваяСтрока = ПутьВГрафе.Добавить();
			НоваяСтрока.Вершина = Путь[Индекс];
			НоваяСтрока.Порядок = Индекс;
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	ТекстПутьВГрафе = "";
	Если ПутьВГрафе.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПутьВГрафе.Вершина,
			|	ПутьВГрафе.Порядок
			|ПОМЕСТИТЬ ВтПутьВГрафе
			|ИЗ
			|	&ПутьВГрафе КАК ПутьВГрафе
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(МаршрутныеКарты.Ссылка.Код, """") КАК Код
			|ИЗ
			|	ВтПутьВГрафе КАК ПутьВГрафе
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
			|		ПО ПутьВГрафе.Вершина = МаршрутныеКарты.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	-ПутьВГрафе.Порядок");
		Запрос.УстановитьПараметр("ПутьВГрафе", ПутьВГрафе);
		
		Маршрут = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		ТекстПутьВГрафе = "/" + СтрСоединить(Маршрут, "/") + "/";
		
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Превышена максимальная глубина вложенности маршрутных карт %1'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТекстПутьВГрафе);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
		ЭтотОбъект,
		,
		,
		Отказ);
	
КонецПроцедуры

Процедура ОчиститьВыборОпераций()

	Для каждого ЭлементКоллекции Из ВыходныеИзделия Цикл
		ЭлементКоллекции.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		ЭлементКоллекции.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	КонецЦикла;
	Для каждого ЭлементКоллекции Из ВозвратныеОтходы Цикл
		ЭлементКоллекции.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		ЭлементКоллекции.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	КонецЦикла;
	Для каждого ЭлементКоллекции Из МатериалыИУслуги Цикл
		ЭлементКоллекции.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	КонецЦикла;
	Для каждого ЭлементКоллекции Из Трудозатраты Цикл
		ЭлементКоллекции.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыборОпераций(ИмяТаблицы, ПредставлениеТаблицы, Отказ, ПолеОперация = Неопределено)

	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолеОперация = Неопределено Тогда
		ПолеОперация = "ОперацияРедактирование";
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не допускается выбор операций помеченных на удаление (список ""%1"", строка %2).'");
	Для каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		Если СтрокаТаблицы[ПолеОперация].Пустая() 
			ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы[ПолеОперация], "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																					ПредставлениеТаблицы, 
																					Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТаблицы.НомерСтроки, ПолеОперация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ); 						
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДолиСтоимости(Отказ)
	
	Если НЕ ИспользоватьВыходныеИзделия
		ИЛИ ВыходныеИзделия.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Доля стоимости"" в строке %1 списка ""Выходные изделия""'");
	Для каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
		Если СтрокаТаблицы.ДоляСтоимости = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																						Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																						
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаТаблицы.НомерСтроки, "ДоляСтоимости");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМатериалов(Отказ)

	Если НЕ ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияНоменклатура = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы""'");
	ШаблонСообщенияКоличество   = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Материалы и работы""'");
	
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		
		Если СтрокаМатериал.Номенклатура.Пустая()
			И СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщенияНоменклатура, 
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
		
		// Для действующией маршрутной карты
		Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		
			Если СтрокаМатериал.КоличествоУпаковок = 0
				И ПустаяСтрока(СтрокаМатериал.АлгоритмРасчетаКоличества) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщенияКоличество, 
										Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "КоличествоУпаковок");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ)

	Если ДляВидаИзделий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтоподбора(ДляВидаИзделий);
	
	// Проверим, что свойство в котором указывается материал есть в продукции
	ШаблонСообщения = НСтр("ru = 'В настройке автовыбора материала определено, что материал указывается в свойстве характеристики продукции ""%1"", но это свойство не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции 
			И ЗначениеЗаполнено(СтрокаМатериал.СвойствоСодержащееНоменклатуру) 
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Свойство") = Неопределено Тогда
			
			ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Заголовок");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									ЗаголовокСвойства,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
	ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ);
	
КонецПроцедуры
 
Процедура ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ)

	ШаблонСообщения = НСтр("ru = 'В настройке потребления указано свойство ""%1"", которое не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если НЕ СтрокаМатериал.ОтборСвойство.Пустая()
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.ОтборСвойство, "Свойство") = Неопределено Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									СтрокаМатериал.ОтборСвойство,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УбратьПризнакОсновнойМаршрутнойКарты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеМаршрутныеКарты.Номенклатура,
	|	ОсновныеМаршрутныеКарты.Характеристика,
	|	ОсновныеМаршрутныеКарты.Подразделение
	|ИЗ
	|	РегистрСведений.ОсновныеМаршрутныеКарты КАК ОсновныеМаршрутныеКарты
	|ГДЕ
	|	ОсновныеМаршрутныеКарты.МаршрутнаяКарта = &МаршрутнаяКарта";
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписьОсновная = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьМенеджерЗаписи();
		ЗаписьОсновная.Номенклатура   = Выборка.Номенклатура;
		ЗаписьОсновная.Характеристика = Выборка.Характеристика;
		ЗаписьОсновная.Подразделение  = Выборка.Подразделение;
		ЗаписьОсновная.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли