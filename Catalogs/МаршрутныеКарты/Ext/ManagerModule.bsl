#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает данные маршрутной карты с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Трудозатраты,Операции
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы, трудозатраты 
//
Функция ДанныеМаршрутнойКарты(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,ВозвратныеОтходы,Материалы,Трудозатраты,Операции,ВспомогательныеРабочиеЦентры");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", ИнициализироватьТаблицуОперации());
	КонецЕсли;
	
	СтруктураСвязей = ИнициализироватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыРекурсивно(
				МаршрутнаяКарта, 
				КоличествоРезультата, 
				Номенклатура, 
				Характеристика, 
				СтруктураСвязей,
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает данные маршрутной карты с отбором по заданной технологической операции.
//
// Параметры:
//  Операция - СправочникСсылка.ТехнологическиеОперации	- операция маршрутной карты, данные по которой необходимо получить.
//  КоличествоРезультата - Число - количество результата по маршрутной карте.
//  Номенклатура - СправочникСсылка.Номенклатура - изделие.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика изделия.
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы, трудозатраты 
//
Функция ДанныеОперацииМаршрутнойКарты(Операция, КоличествоРезультата, Номенклатура, Характеристика) Экспорт
	
	Запрос = Новый Запрос;
	ИндексыТаблиц = Новый Соответствие;
	
	ПодготовитьТекстЗапросаДляВыборкиДанныхОперации(Запрос, ИндексыТаблиц);
	
	МаршрутнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Владелец");
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта", МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("КоличествоРезультата", КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель", Неопределено);
	Запрос.УстановитьПараметр("КлючСвязиРодитель", Неопределено);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", Неопределено);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Для каждого КлючИЗначение Из ИндексыТаблиц Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		Таблица = РезультатЗапроса[КлючИЗначение.Значение].Выгрузить();
		
		Если ИмяТаблицы = "Операции" И Таблица.Количество() > 0 Тогда
			
			Для каждого Колонка Из Таблица.Колонки Цикл
				Результат.Вставить(Колонка.Имя, Таблица[0][Колонка.Имя]);
			КонецЦикла;
			
		Иначе
			
			Если ИмяТаблицы = "Материалы" Тогда
				
				ВыходныеИзделия = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить();
				ОбработатьНастройкиАвтовыбораМатериалов(
					Таблица, Номенклатура, Характеристика, МаршрутнаяКарта, КоличествоРезультата, ВыходныеИзделия);
				
			КонецЕсли;
			
			Результат.Вставить(ИмяТаблицы, Таблица);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные маршрутной карты для печати с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Операции
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы 
//
Функция ДанныеМаршрутнойКартыДляПечати(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,Материалы,Операции");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", ИнициализироватьТаблицуОперации());
	КонецЕсли; 
	
	СтруктураСвязей = ИнициализироватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(
				МаршрутнаяКарта, 
				КоличествоРезультата, 
				Номенклатура, 
				Характеристика, 
				СтруктураСвязей, 
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		
		ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.ВыходныеИзделия, СтруктураДанных.Операции);
		КонецЕсли; 
		Если СтруктураДанных.Свойство("Материалы") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.Материалы, СтруктураДанных.Операции);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

// Проверяет последовательность операций
//
// Параметры:
//  МаршрутнаяКарта		- СправочникСсылка.МаршрутныеКарты - маршрутная карта, операции которой требуется проверить
//  Отказ				- Булево - признак отмены текущего действия
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная
//
Функция ПоследовательностьОперацийПравильная(МаршрутнаяКарта, Отказ = Ложь) Экспорт
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("НесколькоПервыхОпераций",    НСтр("ru = 'Не может быть несколько первых операций.'"));
	СтруктураСообщений.Вставить("НесколькоПоследнихОпераций",    НСтр("ru = 'Не может быть несколько последних операций.'"));
	СтруктураСообщений.Вставить("НетПервойОперации",    НСтр("ru = 'Отсутствует первая операция.'"));
	СтруктураСообщений.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последняя операция.'"));
	СтруктураСообщений.Вставить("НетСледующейОперации", НСтр("ru = 'Операция ""%1"" ссылается на несуществующую операцию.'"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ТехнологическиеОперации");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерОперации");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующейОперации");
	
	ПоследовательностьПравильная = УправлениеДаннымиОбИзделиях.ПоследовательностьОперацийПравильная(МаршрутнаяКарта, СтруктураПараметров, СтруктураСообщений, Отказ);
	
	Возврат ПоследовательностьПравильная;
	
КонецФункции

// Заполняет маршрутную карту по другой маршрутной карте
//
// Параметры:
//  Приемник - СправочникОбъект.МаршрутныеКарты, ДанныеФормыСтруктура - маршрутная карта
//		в которую будут скопированы операции.
//  Источник - СправочникСсылка.МаршрутныеКарты - маршрутная карта операции которой нужно скопировать.
//	СсылкаПриемника - СправочникСсылка.МаршрутныеКарты - ссылка на заполняемую маршрутную карту.
//
// Возвращаемое значение:
//   Булево   - истина, если копирование выполнено успешно
//
Функция ЗаполнитьПоМаршрутнойКарте(Приемник, Источник, СсылкаПриемника) Экспорт

	ИсточникОбъект = Источник.ПолучитьОбъект();
	Если Приемник.ИспользоватьВыходныеИзделия Тогда
		Приемник.ВыходныеИзделия.Загрузить(ИсточникОбъект.ВыходныеИзделия.Выгрузить());
		Приемник.ВозвратныеОтходы.Загрузить(ИсточникОбъект.ВозвратныеОтходы.Выгрузить());
	КонецЕсли;
	Если Приемник.ИспользоватьМатериалы Тогда
		Приемник.МатериалыИУслуги.Загрузить(ИсточникОбъект.МатериалыИУслуги.Выгрузить());
	КонецЕсли; 
	Если Приемник.ИспользоватьТрудозатраты Тогда
		Приемник.Трудозатраты.Загрузить(ИсточникОбъект.Трудозатраты.Выгрузить());
	КонецЕсли; 
	
	Если Приемник.ИспользоватьОперации Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникТехнологическиеОперации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК СправочникТехнологическиеОперации
		|ГДЕ
		|	СправочникТехнологическиеОперации.Владелец = &Источник
		|	И НЕ СправочникТехнологическиеОперации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Источник", Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СсылкаНаОперацию = Справочники.ТехнологическиеОперации.СкопироватьТехнологическуюОперацию(Выборка.Ссылка, СсылкаПриемника);
			Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Заполним связь с операцией
			Если Приемник.ИспользоватьВыходныеИзделия Тогда
				НайденныеСтроки = Приемник.ВыходныеИзделия.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
				НайденныеСтроки = Приемник.ВозвратныеОтходы.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьМатериалы Тогда
				НайденныеСтроки = Приемник.МатериалыИУслуги.НайтиСтроки(Новый Структура("Операция", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.Операция = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьТрудозатраты Тогда
				НайденныеСтроки = Приемник.Трудозатраты.НайтиСтроки(Новый Структура("Операция", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.Операция = СсылкаНаОперацию;
				КонецЦикла;
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		Для каждого ДанныеСтроки Из Приемник.ВыходныеИзделия Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.ВозвратныеОтходы Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.МатериалыИУслуги Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.Трудозатраты Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	// Элементы управления шапки
	Результат.Добавить("Код");
	Результат.Добавить("ДляВидаИзделий");
	
	// Элементы табличных частей
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	
	// Команды
	Результат.Добавить("МатериалыИУслугиОткрытьПодборМатериалов");
	
	Возврат Результат;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Операция = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Рассчитывает коэффициент применения маршрутной карты в ресурсной спецификации.
//
// Параметры:
//  ДанныеОсновногоИзделияСпецификации - Структура - данные основного выходного изделия ресурсной спецификации.
//  МаршрутнаяКарта - СправочникСсылка.МаршрутныеКарты - маршрутная карта для расчета коэффициента.
// 
// Возвращаемое значение:
//  Число - рассчитанный коэффициент.
//
Функция КоэффициентМаршрутнойКартыДляСпецификации(ДанныеОсновногоИзделияСпецификации, МаршрутнаяКарта) Экспорт
	
	ДанныеМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		МаршрутнаяКарта, "КоэффициентЧислитель, КоэффициентЗнаменатель");
	
	Если ЗначениеЗаполнено(ДанныеМК.КоэффициентЗнаменатель) Тогда
		
		Результат = ДанныеМК.КоэффициентЧислитель/ДанныеМК.КоэффициентЗнаменатель
			* ДанныеОсновногоИзделияСпецификации.Количество;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьАвтовыборМатериалов(МатериалыИУслуги) Экспорт
	
	Результат = Ложь;
	
	Для каждого Строка Из МатериалыИУслуги Цикл
		
		Если (
				ЗначениеЗаполнено(Строка.СпособАвтовыбораНоменклатуры)
				И Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
			)
			ИЛИ
			(
				ЗначениеЗаполнено(Строка.СпособАвтовыбораХарактеристики)
				И Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
			) Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.МаршрутныеКартыОбработкаПолученияДанныхВыбора(
				ДанныеВыбора, 
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ВыборДействующихМаршрутныхКарт") Тогда
		ВыбраннаяФорма = "ВыборДействующихМаршрутныхКарт";
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы




#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ИнициализироватьТаблицуОперации()
	
	ТаблицаОперации = Новый ТаблицаЗначений;
	ТаблицаОперации.Колонки.Добавить("Операция",         	Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("ОперацияПредставление",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаОперации.Колонки.Добавить("ОперацияРодитель", 	Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("ВложенныйМаршрут", 	Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязи",        	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязиРодитель",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязиВложенныйМаршрут", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ТаблицаОперации.Колонки.Добавить("СодержитВложенныйМаршрут", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОперации.Колонки.Добавить("КоличествоНаПартию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ТаблицаОперации.Колонки.Добавить("Количество",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	
	ТаблицаОперации.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(25,0)));
	
	ТаблицаОперации.Колонки.Добавить("НомерОперации",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерОперации",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	ТаблицаОперации.Колонки.Добавить("РабочийЦентр",      Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаОперации.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	
	ТаблицаОперации.Колонки.Добавить("Норма",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ТаблицаОперации.Колонки.Добавить("ПараллельнаяЗагрузка",       Новый ОписаниеТипов("Булево"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяВыполнения",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяВыполненияЕдИзм",       Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяШтучное",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяШтучноеЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяПЗ",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяПЗЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВариантНаладки",	Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	ТаблицаОперации.Колонки.Добавить("Загрузка",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("Непрерывная",		Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОперации;
	
КонецФункции

Функция ИнициализироватьСтруктуруСвязей()
	
	СтруктураСвязей = Новый Структура;
	СтруктураСвязей.Вставить("ОперацияРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиВложенныйМаршрут", Неопределено);
	СтруктураСвязей.Вставить("Уровень", 0);
	
	Возврат СтруктураСвязей;
	
КонецФункции

Процедура ДобавитьДанныеМаршрутнойКартыРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	Индекс = 0;
	ТекстыЗапроса = Новый Массив;
	ИндексыТаблиц = Новый Соответствие;
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ТекстЗапроса = ТекстЗапросаВыходныеИзделияМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВыходныеИзделия");
		
	КонецЕсли; 

	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		
		ТекстЗапроса = ТекстЗапросаВозвратныеОтходыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВозвратныеОтходы");
		
	КонецЕсли;
	
	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ТекстЗапроса = ТекстЗапросаОперацииМаршрутнойКарты(Ложь);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Операции");
	
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ТекстЗапроса = ТекстЗапросаМатериалыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Материалы");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		
		ТекстЗапроса = ТекстЗапросаТрудозатратыМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Трудозатраты");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		
		ТекстЗапроса = ТекстЗапросаВспомогательныеРЦМаршрутнойКарты();
		ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВспомогательныеРабочиеЦентры");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить();
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ТаблицаВозвратныеОтходы = РезультатЗапроса[ИндексыТаблиц.Получить("ВозвратныеОтходы")].Выгрузить();
		ТаблицаВозвратныеОтходы.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить();
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ТаблицаТрудозатраты = РезультатЗапроса[ИндексыТаблиц.Получить("Трудозатраты")].Выгрузить();
		ТаблицаТрудозатраты.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ТаблицаВспомогательныеРабочиеЦентры = РезультатЗапроса[ИндексыТаблиц.Получить("ВспомогательныеРабочиеЦентры")].Выгрузить();
		ТаблицаВспомогательныеРабочиеЦентры.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать();
	ДлинаИдентификатора = Справочники.ТехнологическиеОперации.ДлинаИндентификатораОперации();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		Если СтруктураДанных.Свойство("Операции") Тогда
			
			СтрокаОперация = СтруктураДанных.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			#Область ИдентификаторОперации 
			ОтборРодитель = Новый Структура("КлючСвязи", ВыборкаОпераций.КлючСвязиРодитель);
			НайденныеСтроки = СтруктураДанных.Операции.НайтиСтроки(ОтборРодитель);
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
				СтрокаОперация.ИдентификаторОперации = НайденныеСтроки[0].ИдентификаторОперации * Pow(10, ДлинаИдентификатора);
			КонецЕсли;
			СтрокаОперация.ИдентификаторОперации = СтрокаОперация.ИдентификаторОперации + ВыборкаОпераций.Идентификатор;
			#КонецОбласти
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВозвратныеОтходы);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Трудозатраты") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаТрудозатраты);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВспомогательныеРабочиеЦентры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ОбработатьНастройкиАвтовыбораМатериалов(
			ТаблицаМатериалыИУслуги,
			Номенклатура,
			Характеристика,
			МаршрутнаяКарта,
			КоличествоРезультата,
			?(СтруктураДанных.Свойство("ВыходныеИзделия"), ТаблицаВыходныеИзделия, Неопределено));
		
	КонецЕсли;
					
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВозвратныеОтходы",  ТаблицаВозвратныеОтходы.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Трудозатраты", ТаблицаТрудозатраты.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВспомогательныеРабочиеЦентры", ТаблицаВспомогательныеРабочиеЦентры.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаВозвратныеОтходы = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	ТаблицаТрудозатраты     = Неопределено;
	ТаблицаВспомогательныеРабочиеЦентры = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Если СтруктураСвязей.Уровень < Справочники.МаршрутныеКарты.МаксимальнаяГлубинаВложенности()-1 Тогда
		
		Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
			
			СтруктураСвязейВложенная = Новый Структура;
			СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
			СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
			СтруктураСвязейВложенная.Вставить("Уровень", СтруктураСвязей.Уровень + 1);
			
			Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
				СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
			Иначе
				СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
			КонецЕсли;
			
			ДобавитьДанныеМаршрутнойКартыРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
													КоличествоРезультата, 
													Номенклатура, 
													Характеристика,
													СтруктураСвязейВложенная,
													СтруктураДанных);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	// Заполним строки по маршрутной карте
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ТекущийИндекс = 0;
	ИндексыТаблиц = Новый Соответствие;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ИндексыТаблиц.Вставить("ВыходныеИзделия", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура.Представление     КАК НоменклатураПредставление,
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура.Артикул           КАК НоменклатураАртикул,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА &Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                          КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика.Представление
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА ХарактеристикиНоменклатуры.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ                                                          КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВыходныеИзделия.Количество * &КоличествоРезультата         КАК Количество,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1                                КАК ЕдиницаИзмеренияНаименование,
		|	МаршрутныеКартыВыходныеИзделия.Операция                        КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
		|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости                   КАК ДоляСтоимости
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = МаршрутныеКартыВыходныеИзделия.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Ссылка = &Характеристика
		|ГДЕ
		|	МаршрутныеКартыВыходныеИзделия.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура.Представление     КАК НоменклатураПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура.Артикул           КАК НоменклатураАртикул,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика                 КАК Характеристика,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика.Представление   КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВозвратныеОтходы.Количество * &КоличествоРезультата         КАК Количество,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2                     КАК ЕдиницаИзмеренияНаименование,
		|	МаршрутныеКартыВозвратныеОтходы.Операция                       КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная)          КАК ТипСтоимости,
		|	0                                                              КАК ДоляСтоимости
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыВозвратныеОтходы.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия";
			
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли; 

	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ИндексыТаблиц.Вставить("Операции", ТекущийИндекс);
	
	Запрос.Текст = Запрос.Текст +
	?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) + ТекстЗапросаОперацииМаршрутнойКарты(Ложь);
	
	ТекущийИндекс = ТекущийИндекс + 1;
		
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ИндексыТаблиц.Вставить("Материалы", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыМатериалыИУслуги.Операция                                        КАК Операция,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура                                    КАК Номенклатура,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.Представление                      КАК НоменклатураПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.Артикул                            КАК НоменклатураАртикул,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика                                  КАК Характеристика,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика.Представление                    КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * &КоличествоРезультата      КАК КоличествоУпаковок,
		|	МаршрутныеКартыМатериалыИУслуги.Количество * &КоличествоРезультата              КАК Количество,
		|	МаршрутныеКартыМатериалыИУслуги.Упаковка                                        КАК Упаковка,
		|	МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции                               КАК СтатьяКалькуляции,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3                                      КАК ЕдиницаИзмеренияНаименование,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                            КАК ИспользуетсяАвтовыбор,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборСвойство,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства,
		|	МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
		|	МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала,
		|	МаршрутныеКартыМатериалыИУслуги.КлючСвязи
		|ИЗ
		|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваНоменклатуры.Свойство
		|			И (СвойстваНоменклатуры.Ссылка = &Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваХарактеристики.Свойство
		|			И (СвойстваХарактеристики.Ссылка = &Характеристика)
		|ГДЕ
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьМатериалы
		|	И (МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
		|			ИЛИ (СвойстваНоменклатуры.Свойство ЕСТЬ NULL 
		|				ИЛИ СвойстваНоменклатуры.Значение = МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства)
		|				И (СвойстваХарактеристики.Свойство ЕСТЬ NULL 
		|					ИЛИ СвойстваХарактеристики.Значение = МатериалыИУслуги.ОтборЗначениеСвойства))";
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВыходныеИзделия.Упаковка",
			"МаршрутныеКартыВыходныеИзделия.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВозвратныеОтходы.Упаковка",
			"МаршрутныеКартыВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыМатериалыИУслуги.Упаковка",
			"МаршрутныеКартыМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить();
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить();
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		Если СтруктураДанных.Свойство("Операции") Тогда
			СтрокаОперация = СтруктураДанных.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Номенклатура",   Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика", Характеристика);
		ДанныеПоНоменклатуре.Вставить("Спецификация",   МаршрутнаяКарта);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") И ТаблицаВыходныеИзделия.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", Номенклатура,Характеристика);
   			СписокСтрок = ТаблицаВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ДанныеПоНоменклатуре.Вставить("Количество", СписокСтрок[0].Количество);
			Иначе
				ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
			КонецЕсли;
		Иначе
			ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
						ТаблицаМатериалыИУслуги, 
						ДанныеПоНоменклатуре, 
						"МаршрутныеКарты", 
						Ложь, 
						Истина);
	КонецЕсли;
					
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
		
		СтруктураСвязейВложенная = Новый Структура;
		СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
		СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
		
		Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
		Иначе
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
		КонецЕсли;
		
		ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
															КоличествоРезультата, 
															Номенклатура, 
															Характеристика,
															СтруктураСвязейВложенная,
															СтруктураДанных);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьКлючСвязи(Операция, КлючСвязиОперации, Таблица)

	СтруктураПоиска = Новый Структура("Операция", Операция);
   	СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);							
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		ЭлементКоллекции.КлючСвязиОперации = КлючСвязиОперации;
	КонецЦикла; 
 	
КонецПроцедуры

Процедура ДобавитьТаблицуМаршрутнойКарты(ИмяТаблицы, Таблица, СтруктураДанных)

	ИсходнаяТаблица = Неопределено;
	СтруктураДанных.Свойство(ИмяТаблицы, ИсходнаяТаблица);
	Если ИсходнаяТаблица <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из Таблица Цикл
			НоваяСтрока = ИсходнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		КонецЦикла; 
	Иначе
		СтруктураДанных.Вставить(ИмяТаблицы, Таблица);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНомерОперацииВСвязаннойТаблице(ТаблицаСвязаннаяСОперациями, ТаблицаОперации)

	ТаблицаСвязаннаяСОперациями.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("Число"));
	
	Для каждого ДанныеСтроки Из ТаблицаСвязаннаяСОперациями Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Операция) Тогда
			ДанныеСтроки.НомерОперации = 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Операция", ДанныеСтроки.Операция);
  		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ДанныеСтроки.НомерОперации = СписокСтрок[0].НомерОперации;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОпераций(ТаблицаОперации)
	
	ТаблицаОперации.Колонки.Добавить("НомерПрисвоен",          Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейПрисвоен", Новый ОписаниеТипов("Булево"));
	
	ТекущийНомер = МаксимальныйНомерОперации(ТаблицаОперации) + 1;
	НазначенныеНомера = Новый Соответствие;
	
	ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера);
	ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера);
	УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации);
	
КонецПроцедуры

Процедура ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера)
	
	КлючСвязиРодитель = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	НомераОпераций = НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель);
	
	Для каждого НомерОперации Из НомераОпераций Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсходныйНомерОперации", НомерОперации);
		СтруктураОтбора.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из СписокСтрок Цикл
			
			Строка.НомерОперации = НомерОперации;
			Строка.НомерСледующейОперации = Строка.ИсходныйНомерСледующейОперации;
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
					ТаблицаОперации, НомерОперации, ТекущийНомер, Строка.КлючСвязи, НазначенныеНомера);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер, НазначенныеНомера)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = СледующаяСтрока.ИсходныйНомерОперации;
					СледующаяСтрока.НомерСледующейОперации = СледующаяСтрока.ИсходныйНомерСледующейОперации;
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
							ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи, НазначенныеНомера);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, НачальныйНомер, ТекущийНомер, КлючСвязиРодитель, НазначенныеНомера)
	
	#Область ПервыеОперации
	
	НомераОпераций = НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель);
	СтруктураОтбора = Новый Структура("КлючСвязиРодитель, ИсходныйНомерОперации", КлючСвязиРодитель);
	
	Для каждого ИсходныйНомерОперации Из НомераОпераций Цикл
		
		СтруктураОтбора.ИсходныйНомерОперации = ИсходныйНомерОперации;
		СтрокиМаршрута = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из СтрокиМаршрута Цикл
			
			Если Строка.ИсходныйНомерОперации = 1 Тогда
				
				Строка.НомерОперации = НачальныйНомер;
				
			Иначе
				
				Строка.НомерОперации = ТекущийНомер;
				ТекущийНомер = ТекущийНомер + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ИсходныйНомерСледующейОперации) Тогда
				
				ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(
					Строка, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель);
				
			КонецЕсли;
			
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
					ТаблицаОперации, НачальныйНомер, ТекущийНомер, Строка.КлючСвязи, НазначенныеНомера);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПоследующиеОперации
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = Строка.НомерСледующейОперации;
					
					Если ЗначениеЗаполнено(СледующаяСтрока.ИсходныйНомерСледующейОперации) Тогда
						
						ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(
							СледующаяСтрока, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель);
						
					КонецЕсли;
					
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(
							ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи, НазначенныеНомера);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьНомерСледующейОперацииВложенногоМаршрута(Строка, НазначенныеНомера, ТекущийНомер, КлючСвязиРодитель)
	
	ИсходныйНомерСледующейОперации = Строка.ИсходныйНомерСледующейОперации;
	
	НомераРодителя = НазначенныеНомера.Получить(КлючСвязиРодитель);
	
	Если НомераРодителя = Неопределено Тогда
		НомераРодителя = Новый Соответствие;
	КонецЕсли;
	
	НомерСледующейОперации = НомераРодителя.Получить(ИсходныйНомерСледующейОперации);
	
	Если НомерСледующейОперации = Неопределено Тогда
		
		НомерСледующейОперации = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
		НомераРодителя.Вставить(ИсходныйНомерСледующейОперации, НомерСледующейОперации);
		
	КонецЕсли;
	
	Строка.НомерСледующейОперации = НомерСледующейОперации;
	
	НазначенныеНомера.Вставить(КлючСвязиРодитель, НомераРодителя);
	
КонецПроцедуры

Функция МаксимальныйНомерОперации(ТаблицаОперации)
	
	Если ЗначениеЗаполнено(ТаблицаОперации) Тогда
		
		ТаблицаОперацийКопия = ТаблицаОперации.Скопировать(, "ИсходныйНомерОперации");
		ТаблицаОперацийКопия.Сортировать("ИсходныйНомерОперации Убыв");
		Возврат ТаблицаОперацийКопия[0].ИсходныйНомерОперации;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

Функция НомераНачальныхОпераций(ТаблицаОперации, КлючСвязиРодитель)
	
	Результат = Новый Массив;
	
	СтруктураПоиска = Новый Структура("КлючСвязиРодитель, ИсходныйНомерСледующейОперации", КлючСвязиРодитель);
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		СтруктураПоиска.ИсходныйНомерСледующейОперации = Строка.ИсходныйНомерОперации;
		
		НайденныеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Результат.Добавить(Строка.ИсходныйНомерОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьФлагНомерОперацииПрисвоен(СтрокаОперации)
	
	СтрокаОперации.НомерПрисвоен = Истина;
	Если СтрокаОперации.ИсходныйНомерСледующейОперации = 0 Тогда
		СтрокаОперации.НомерСледующейПрисвоен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации)
	
	СтруктураПоискаОпераций = Новый Структура("СодержитВложенныйМаршрут", Истина);
	СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоискаОпераций);
	
	Если ЗначениеЗаполнено(СписокСтрок) Тогда
		
		Для каждого СтрокаОперация Из СписокСтрок Цикл
			
			СтруктураПоиска = Новый Структура("КлючСвязиРодитель,НомерСледующейОперации", СтрокаОперация.КлючСвязи, 0);
			СписокПоследнихОпераций = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
			Для каждого ПоследняяОпераций Из СписокПоследнихОпераций Цикл
				ПоследняяОпераций.НомерСледующейОперации = СтрокаОперация.НомерСледующейОперации;
			КонецЦикла;
			
			ТаблицаОперации.Удалить(СтрокаОперация);
			
		КонецЦикла;
		
		ПеренумероватьОперацииКартыСВложеннымиМаршрутами(ТаблицаОперации);
		ТаблицаОперации.Сортировать("НомерОперации Возр");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренумероватьОперацииКартыСВложеннымиМаршрутами(ТаблицаОперации)
	
	ТаблицаОперации.Индексы.Добавить("ИсходныйНомерСледующейОперации");
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		Строка.ИсходныйНомерОперации = Строка.НомерОперации;
		Строка.ИсходныйНомерСледующейОперации = Строка.НомерСледующейОперации;
		
	КонецЦикла;
	
	НомерОперации = ТаблицаОперации.Количество();
	
	ПоследняяОперация = ТаблицаОперации.Найти(0, "НомерСледующейОперации");
	Если ПоследняяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяОперация.НомерОперации = НомерОперации;
	НомерОперации = НомерОперации - 1;
	
	ПеренумероватьПредшествующиеОперацииРекурсивно(ТаблицаОперации, ПоследняяОперация, НомерОперации);
	
	// Переменная НомерОперации может не обнулиться если маршрут содержит ветвление.
	Если НЕ НомерОперации = 0 Тогда
		
		Для каждого Операция Из ТаблицаОперации Цикл
			
			Операция.НомерОперации = Операция.НомерОперации - НомерОперации;
			
			Если НЕ Операция.НомерСледующейОперации = 0 Тогда
				Операция.НомерСледующейОперации = Операция.НомерСледующейОперации - НомерОперации;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренумероватьПредшествующиеОперацииРекурсивно(ТаблицаОперации, Операция, НомерОперации)
	
	СтруктураПоиска = Новый Структура("ИсходныйНомерСледующейОперации", Операция.ИсходныйНомерОперации);
	ПредшествующиеОперации = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
	
	НазначенныеНомера = Новый Соответствие;
	ОперацииДляОбработки = Новый Массив;
	
	Для каждого ПредшествующаяОперация Из ПредшествующиеОперации Цикл
		
		ПредшествующаяОперация.НомерСледующейОперации = Операция.НомерОперации;
		
		НовыйНомер = НазначенныеНомера.Получить(ПредшествующаяОперация.ИсходныйНомерОперации);
		Если НовыйНомер = Неопределено Тогда
			
			НовыйНомер = НомерОперации;
			НазначенныеНомера.Вставить(ПредшествующаяОперация.ИсходныйНомерОперации, НовыйНомер);
			ОперацииДляОбработки.Добавить(ПредшествующаяОперация);
			
			НомерОперации = НомерОперации - 1;
			
		КонецЕсли;
		
		ПредшествующаяОперация.НомерОперации = НовыйНомер;
		
	КонецЦикла;
	
	Для каждого ПредшествующаяОперация Из ОперацииДляОбработки Цикл
		
		ПеренумероватьПредшествующиеОперацииРекурсивно(ТаблицаОперации, ПредшествующаяОперация, НомерОперации);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаДляВыборкиДанныхОперации(Запрос, ИндексыТаблиц)
	
	ТекстыЗапроса = Новый Массив;
	Индекс = 0;
	
	ТекстЗапроса = ТекстЗапросаВыходныеИзделияМаршрутнойКарты();
	ДобавитьВТекстЗапросаОтборПоОперации(ТекстЗапроса);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВыходныеИзделия");
	
	ТекстЗапроса = ТекстЗапросаВозвратныеОтходыМаршрутнойКарты();
	ДобавитьВТекстЗапросаОтборПоОперации(ТекстЗапроса);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "ВозвратныеОтходы");
	
	ТекстЗапроса = ТекстЗапросаМатериалыМаршрутнойКарты();
	ДобавитьВТекстЗапросаОтборПоОперации(ТекстЗапроса);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Материалы");
		
	ТекстЗапроса = ТекстЗапросаТрудозатратыМаршрутнойКарты();
	ДобавитьВТекстЗапросаОтборПоОперации(ТекстЗапроса);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Трудозатраты");
	
	ТекстЗапроса = ТекстЗапросаОперацииМаршрутнойКарты(Истина);
	ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, "Операции");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
КонецПроцедуры

Процедура ОбработатьНастройкиАвтовыбораМатериалов(ТаблицаМатериалы, Номенклатура, Характеристика, МаршрутнаяКарта, Количество, ВыходныеИзделия)
	
	ДанныеПоНоменклатуре = Новый Структура;
	ДанныеПоНоменклатуре.Вставить("Номенклатура",   Номенклатура);
	ДанныеПоНоменклатуре.Вставить("Характеристика", Характеристика);
	ДанныеПоНоменклатуре.Вставить("Спецификация",   МаршрутнаяКарта);
	
	Если НЕ ВыходныеИзделия = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", Номенклатура,Характеристика);
		
   		СписокСтрок = ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ СписокСтрок.Количество() = 0 Тогда
			ДанныеПоНоменклатуре.Вставить("Количество", СписокСтрок[0].Количество);
		Иначе
			ДанныеПоНоменклатуре.Вставить("Количество",	Количество);
		КонецЕсли;
		
	Иначе
		
		ДанныеПоНоменклатуре.Вставить("Количество",	Количество);
		
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
		ТаблицаМатериалы, 
		ДанныеПоНоменклатуре, 
		"МаршрутныеКарты", 
		Ложь, 
		Истина);
	
КонецПроцедуры

Процедура ДобавитьТекстВПакетныйЗапрос(ТекстыЗапроса, ТекстЗапроса, Индекс, ИндексыТаблиц, ИмяТаблицы)
	
	ИндексыТаблиц.Вставить(ИмяТаблицы, Индекс);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Индекс = Индекс + 1;
	
КонецПроцедуры

Процедура ДобавитьВТекстЗапросаОтборПоОперации(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта",
		"ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
		|	И ТабличнаяЧасть.Операция = &Операция");
	
КонецПроцедуры

Функция ТекстЗапросаВыходныеИзделияМаршрутнойКарты()
	
	Результат = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Характеристика
	|		КОГДА ТабличнаяЧасть.Номенклатура = &Номенклатура
	|			ТОГДА &Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество * &КоличествоРезультата КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.Операция КАК Операция,
	|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВозвратныеОтходыМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество * &КоличествоРезультата КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ТабличнаяЧасть.Операция КАК Операция
	|ИЗ
	|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаМатериалыМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Операция КАК Операция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество * &КоличествоРезультата КАК Количество,
	|	ТабличнаяЧасть.Упаковка КАК Упаковка,
	|	ТабличнаяЧасть.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
	|				ИЛИ ТабличнаяЧасть.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяАвтовыбор,
	|	ТабличнаяЧасть.СпособАвтовыбораНоменклатуры,
	|	ТабличнаяЧасть.СпособАвтовыбораХарактеристики,
	|	ТабличнаяЧасть.СвойствоСодержащееНоменклатуру,
	|	ТабличнаяЧасть.ОтборСвойство,
	|	ТабличнаяЧасть.ОтборЗначениеСвойства,
	|	ТабличнаяЧасть.АлгоритмРасчетаКоличества,
	|	ТабличнаяЧасть.ПрименениеМатериала,
	|	ТабличнаяЧасть.КлючСвязи
	|ИЗ
	|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
	|		ПО ТабличнаяЧасть.ОтборСвойство = СвойстваНоменклатуры.Свойство
	|			И (СвойстваНоменклатуры.Ссылка = &Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
	|		ПО ТабличнаяЧасть.ОтборСвойство = СвойстваХарактеристики.Свойство
	|			И (СвойстваХарактеристики.Ссылка = &Характеристика)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И МаршрутныеКарты.ИспользоватьМатериалы
	|	И (ТабличнаяЧасть.ОтборСвойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|			ИЛИ (СвойстваНоменклатуры.Свойство ЕСТЬ NULL
	|				ИЛИ СвойстваНоменклатуры.Значение = ТабличнаяЧасть.ОтборЗначениеСвойства)
	|				И (СвойстваХарактеристики.Свойство ЕСТЬ NULL
	|					ИЛИ СвойстваХарактеристики.Значение = ТабличнаяЧасть.ОтборЗначениеСвойства))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТрудозатратыМаршрутнойКарты()
	
	Результат = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ВидРабот,
	|	ТабличнаяЧасть.Операция.Представление КАК СодержаниеРабот,
	|	ТабличнаяЧасть.Количество * &КоличествоРезультата КАК Количество,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.Операция
	|ИЗ
	|	Справочник.МаршрутныеКарты.Трудозатраты КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &МаршрутнаяКарта
	|	И МаршрутныеКарты.ИспользоватьТрудозатраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВспомогательныеРЦМаршрутнойКарты()
	
	Результат =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.РабочийЦентр,
	|	ТабличнаяЧасть.Ссылка КАК Операция
	|ИЗ
	|	Справочник.ТехнологическиеОперации.ВспомогательныеРабочиеЦентры КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка.Владелец = &МаршрутнаяКарта";
		
	Возврат Результат;

КонецФункции

Функция ТекстЗапросаОперацииМаршрутнойКарты(УстановитьОтборПоОперации)
	
	Результат = 
	"ВЫБРАТЬ
	|	&ОперацияРодитель КАК ОперацияРодитель,
	|	&КлючСвязиРодитель КАК КлючСвязиРодитель,
	|	&КлючСвязиВложенныйМаршрут КАК КлючСвязиВложенныйМаршрут,
	|	ТехнологическиеОперации.Владелец КАК МаршрутнаяКарта,
	|	ТехнологическиеОперации.Ссылка КАК Операция,
	|	ТехнологическиеОперации.Представление КАК ОперацияПредставление,
	|	ТехнологическиеОперации.Идентификатор КАК Идентификатор,
	|	ТехнологическиеОперации.ВложенныйМаршрут КАК ВложенныйМаршрут,
	|	ТехнологическиеОперации.НомерОперации КАК ИсходныйНомерОперации,
	|	ТехнологическиеОперации.НомерСледующейОперации КАК ИсходныйНомерСледующейОперации,
	|	ТехнологическиеОперации.Количество КАК Количество,
	|	ТехнологическиеОперации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТехнологическиеОперации.Количество * &КоличествоРезультата КАК КоличествоНаПартию,
	|	ТехнологическиеОперации.ВариантНаладки КАК ВариантНаладки,
	|	ТехнологическиеОперации.Загрузка КАК Загрузка,
	|	ТехнологическиеОперации.Непрерывная КАК Непрерывная,
	|	ТехнологическиеОперации.СодержитВложенныйМаршрут КАК СодержитВложенныйМаршрут,
	|	&ТекстРеквизитыИсполнителяОперации,
	|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &МаршрутнаяКарта
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И МаршрутныеКарты.ИспользоватьОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехнологическиеОперации.НомерОперации";
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("ТехнологическиеОперации"));
	
	Результат = СтрЗаменить(
		Результат,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("ТехнологическиеОперации"));
	
	Если УстановитьОтборПоОперации Тогда
		
		Результат = СтрЗаменить(
			Результат,
			"ТехнологическиеОперации.Владелец = &МаршрутнаяКарта",
			"ТехнологическиеОперации.Ссылка = &Операция");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальнаяГлубинаВложенности() Экспорт
	
	Возврат 5;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
