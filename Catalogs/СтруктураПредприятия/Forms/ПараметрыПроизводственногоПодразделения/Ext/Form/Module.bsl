
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.ГруппаПроизводствоБезЗаказовКА.Заголовок = НСтр("ru = 'Параметры'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Параметры.Ссылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры.ПараметрыПроизводства);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыПроизводства, "СкладМатериалов");
	
	//++ НЕ УТКА
		
	Если Константы.ИспользоватьИнтервалПланированияЧас.Получить()
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		Элементы.ИнтервалПланирования.СписокВыбора.Вставить(0, Перечисления.ТочностьГрафикаПроизводства.Час);
		
	КонецЕсли;
	
	ИнициализироватьПараметрыИнтервалаПланирования();
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
	//-- НЕ УТКА
	
	Если НЕ Объект.ГрафикРаботы.Пустая() Тогда
		ИспользованиеГрафикаРаботы = 1;
	Иначе
		ИспользованиеГрафикаРаботы = 0;
	КонецЕсли; 
	
	Если Объект.ИспользуетсяСписаниеЗатратНаВыпуск Тогда
		ИспользованиеСписанияЗатратНаВыпуск = 1;
	Иначе
		ИспользованиеСписанияЗатратНаВыпуск = 2;
	КонецЕсли;
	
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	УправлениеВидимостью();
	УправлениеДоступностью();
	
	КалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	Если НЕ КалендарьПредприятия.Пустая() Тогда
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьЗадан;
	Иначе
		Элементы.СтраницыКалендарьПредприятия.ТекущаяСтраница = Элементы.СтраницаКалендарьНеЗадан;
	КонецЕсли; 
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользованиеГрафикаРаботы = 1 И Объект.ГрафикРаботы.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""График работы"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ГрафикРаботы", "Объект", Отказ);
	КонецЕсли;
	
	//++ НЕ УТКА
		
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование 
		И Объект.СпособПооперационногоУправления.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Способ управления операциями"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособПооперационногоУправления", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День
		И НачалоМинуты(НачалоИнтервалаПланированияВремяДня) >= НачалоМинуты(ОкончаниеИнтервалаПланированияВремяДня) Тогда
		ТекстСообщения = НСтр("ru = 'Время начала интервала планирования больше времени окончания'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОкончаниеИнтервалаПланированияДень",, Отказ);
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя
		И Перечисления.ДниНедели.Индекс(НачалоИнтервалаПланированияДеньНедели) >= Перечисления.ДниНедели.Индекс(ОкончаниеИнтервалаПланированияДеньНедели) Тогда
		ТекстСообщения = НСтр("ru = 'Время начала интервала планирования больше времени окончания'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОкончаниеИнтервалаПланированияНеделяДень",, Отказ);
	КонецЕсли;
	
	Если Объект.ПроизводствоПоЗаказам 
		И Объект.СпособПолученияПолуфабрикатов.Пустая()
		И Элементы.СпособПолученияПолуфабрикатов.Видимость Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Способ получения полуфабрикатов"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособПолученияПолуфабрикатов", "Объект", Отказ);
	КонецЕсли;
	
	//-- НЕ УТКА
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьГрафикПредприятияПриИзменении(Элемент)

	Если ИспользованиеГрафикаРаботы = 0 И НЕ Объект.ГрафикРаботы.Пустая() Тогда
		Объект.ГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйГрафикПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалПланированияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если Объект.ИнтервалПланирования.Пустая() Тогда
		Объект.ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День");
	КонецЕсли;
	
	ИнтервалПланированияПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеМаршрутнымиЛистамиПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПооперационноеУправлениеПриИзменении(Элемент)
	
	Если НЕ Объект.ИспользоватьПооперационноеУправление Тогда
		
		Объект.ИспользоватьМатериалыВОперациях = Ложь;
		Объект.ИспользоватьВыходныеИзделияВОперациях = Ложь;
		
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтерваловПриИзменении(Элемент)
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтерваловПриИзменении(Элемент)
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводствоПоЗаказамПриИзменении(Элемент)
	
	Объект.ПроизводственноеПодразделение = Объект.ПроизводствоБезЗаказов Или Объект.ПроизводствоПоЗаказам;
	ОбъектПроизводствоПоЗаказамПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводствоБезЗаказовПриИзменении(Элемент)
	
	Объект.ПроизводственноеПодразделение = Объект.ПроизводствоБезЗаказов Или Объект.ПроизводствоПоЗаказам;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПроизводственноеПодразделениеПриИзменении(Элемент)
	
	Объект.ПроизводствоБезЗаказов = Объект.ПроизводственноеПодразделение;
	
	Если Не ЭтоКА Тогда
		Объект.ПроизводствоПоЗаказам = Объект.ПроизводственноеПодразделение;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗавершитьРедактирование(Команда)
	
	ЗавершитьРедактированиеИЗакрыть(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ИмяФормыРазблокировки = "Справочник.СтруктураПредприятия.Форма.РазблокированиеПараметровПроизводства";
	Оповещение = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, ИмяФормыРазблокировки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеВидимостью()
	
	//++ НЕ УТ
	
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	Если ЭтоКА Тогда
		
		Элементы.ГруппаПодразделениеДиспетчер.Видимость = Ложь;
		Элементы.ГруппаПроизводственное21.Видимость = Ложь;
		Элементы.ГруппаПроизводствоПоЗаказам.Видимость = Ложь;
		Элементы.ГруппаПроизводствоБезЗаказовУП21.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаПроизводствоБезЗаказовКА.Видимость = Ложь;
		
		НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
		Производство21 = НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21;
		Производство22 = НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22;
		
		Элементы.ГруппаПроизводственное.Видимость = Ложь;
		
		Если Не Производство21 Тогда
			Элементы.ГруппаПроизводствоБезЗаказовУП21.Видимость = Ложь;
		КонецЕсли;
		
		Если Производство21 И Производство22 Тогда
			Элементы.ГруппаВнутрицеховоеУправление.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаВнутрицеховоеУправление.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
		Элементы.ГруппаУправлениеМаршрутнымиЛистами.Видимость = Производство21;
		Элементы.ГруппаВнутрицеховоеУправление2_2.Видимость = Производство22;
		
		Элементы.СпособПолученияПолуфабрикатов.Видимость = Производство21;
		Элементы.СкладМатериалов.Видимость = Производство21;
		
	КонецЕсли;
	
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()
	
	ЗапретРедактированияРеквизитов = ИспользуетсяЗапретРедактированияРеквизитов();
	
	//++ НЕ УТКА
	
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		ПооперационноеПланирование = Истина;
	Иначе
		ПооперационноеПланирование = Ложь;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("СпособПооперационногоУправления", ЗапретРедактированияРеквизитов) Тогда
		
		ЭтотОбъект.Элементы.СпособПооперационногоУправления.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		ЭтотОбъект.Элементы.СпособПооперационногоУправления.АвтоОтметкаНезаполненного = ПооперационноеПланирование;
		
		Если ПооперационноеПланирование Тогда
			Если Объект.СпособПооперационногоУправления.Пустая() Тогда
				Объект.СпособПооперационногоУправления = ПредопределенноеЗначение("Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений");
			КонецЕсли;
		Иначе
			Объект.СпособПооперационногоУправления = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЭтотОбъект.Элементы.СпособПооперационногоУправления.АвтоОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ВремяНаРегистрациюВыполнения", ЗапретРедактированияРеквизитов) Тогда
		ЭтотОбъект.Элементы.ВремяНаРегистрациюВыполнения.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		ЭтотОбъект.Элементы.ВремяНаРегистрациюВыполненияЕдИзм.ТолькоПросмотр = НЕ ПооперационноеПланирование;
		Если НЕ ПооперационноеПланирование Тогда
			Объект.ВремяНаРегистрациюВыполнения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ИспользоватьМатериалыВОперациях", ЗапретРедактированияРеквизитов) Тогда
		ЭтотОбъект.Элементы.ИспользоватьМатериалыВОперациях.Доступность = Объект.ИспользоватьПооперационноеУправление;
	КонецЕсли;
	
	Если РеквизитДоступенДляРедактирования("ИспользоватьВыходныеИзделияВОперациях", ЗапретРедактированияРеквизитов) Тогда
		ЭтотОбъект.Элементы.ИспользоватьВыходныеИзделияВОперациях.Доступность = Объект.ИспользоватьПооперационноеУправление;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Если РеквизитДоступенДляРедактирования("ГрафикРаботы", ЗапретРедактированияРеквизитов) Тогда
		ЭтотОбъект.Элементы.ГрафикРаботы.Доступность = (ИспользованиеГрафикаРаботы = 1);
	КонецЕсли;
	
	Элементы.ГруппаПроизводствоПоЗаказам.Доступность    = Объект.ПроизводствоПоЗаказам;
	Элементы.ГруппаПроизводствоБезЗаказовУП21.Доступность = Не ЭтоКА И Объект.ПроизводствоБезЗаказов;
	Элементы.ГруппаПроизводствоБезЗаказовКА.Доступность = ЭтоКА И Объект.ПроизводствоБезЗаказов;
	
	Элементы.ГруппаКалендарьПроизводства.Доступность = ЭтоКА И Объект.ПроизводствоБезЗаказов Или Не ЭтоКА;
	Элементы.ГруппаСкладМатериалов.Доступность = ЭтоКА И Объект.ПроизводствоБезЗаказов Или Не ЭтоКА;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЧасовДнейМесяцевНедель()
	
	//++ НЕ УТКА
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'день, дня, дней, м,,,,,0'");
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'неделю, недели, недель, ж,,,,,0'");
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'месяц, месяца, месяцев, м,,,,,0'");
	Иначе
		ПараметрыПредметаИсчисления = НСтр("ru = 'интервал, интервала, интервалов, м,,,,,0'");
	КонецЕсли;
	
	ПериодПрописью = ПолучитьПериодПрописью(Объект.ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов, ПараметрыПредметаИсчисления);
	Элементы.ЧасовДнейНедельМесяцев.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 и напоминать о составлении за'"),
													ПериодПрописью);
													
	ПериодПрописью = ПолучитьПериодПрописью(Объект.ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов, ПараметрыПредметаИсчисления);
	Элементы.ЧасовДнейНедельМесяцев1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 и напоминать о составлении за'"),
													ПериодПрописью);
	//-- НЕ УТКА													
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеИЗакрыть(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли; 
		
	Если ИспользованиеГрафикаРаботы = 0 И НЕ Объект.ГрафикРаботы.Пустая() Тогда
		Объект.ГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка");
	КонецЕсли;
	
	Объект.ИспользуетсяСписаниеЗатратНаВыпуск = ИспользованиеСписанияЗатратНаВыпуск = 1 И Объект.ПроизводствоБезЗаказов;
	
	//++ НЕ УТКА
	
	СохранитьНастройкуИнтервалаПланирования();
	
	//-- НЕ УТКА
	
	ПараметрыПроизводства = Новый Структура("ГрафикРаботы,
											|ИнтервалПланирования,НачалоИнтервалаПланирования,ОкончаниеИнтервалаПланирования,
											|УправлениеМаршрутнымиЛистами,СпособПооперационногоУправления,
											|ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов,
											|ЗаполнениеДоступностиДляРасписанияРЦЕдиницаВремени,
											|ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней,
											|ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов,
											|ЗаполнениеДоступностиДляГрафикаПроизводстваЕдиницаВремени,
											|ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней,
											|ВремяНаРегистрациюВыполнения, ВремяНаРегистрациюВыполненияЕдИзм,
											|ПроизводственноеПодразделение, ПроизводствоПоЗаказам, ПроизводствоБезЗаказов,
											|ИспользуетсяСписаниеЗатратНаВыпуск, ПодразделениеДиспетчер,
											|ИспользоватьПооперационноеУправление,
											|ИспользоватьМатериалыВОперациях,
											|ИспользоватьВыходныеИзделияВОперациях,
											|СпособПолученияПолуфабрикатов");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПроизводства, Объект);
	
	ПараметрыПроизводства.Вставить("СкладМатериалов", СкладМатериалов);
	
	Модифицированность = Ложь;
	
	Закрыть(ПараметрыПроизводства);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		УправлениеДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектПроизводствоПоЗаказамПриИзмененииНаСервере()
	
	//++ НЕ УТКА
	Если Объект.ИнтервалПланирования.Пустая() Тогда
		Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День;
		ИнтервалПланированияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Объект.УправлениеМаршрутнымиЛистами.Пустая() Тогда
		Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ;
	КонецЕсли;
	
	Если Объект.ВремяНаРегистрациюВыполненияЕдИзм.Пустая() Тогда
		Объект.ВремяНаРегистрациюВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	КонецЕсли;
	
	//-- НЕ УТКА
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяЗапретРедактированияРеквизитов()
	
	Результат = Ложь;
	
	РеквизитыФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = "ПараметрыЗапретаРедактированияРеквизитов" Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитДоступенДляРедактирования(ИмяРеквизита, ЗапретРедактированияРеквизитов)
	
	Если НЕ ЗапретРедактированияРеквизитов Тогда
		Результат = Истина;
	Иначе
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = ЭтотОбъект.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Результат = Истина;
		Иначе
			Результат = НайденныеСтроки[0].РедактированиеРазрешено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ПолучитьПериодПрописью(Число, ПараметрыПредметаИсчисления)
	
	ПорцияПрописью = ЧислоПрописью(Число,"Л = ru_RU; НД=ложь; ДП = Истина", ПараметрыПредметаИсчисления);
	
	ПорцияПрописьюМ = СтрЗаменить(ПорцияПрописью, " ", Символы.ПС);
	
	Возврат СтрПолучитьСтроку(ПорцияПрописьюМ, СтрЧислоСтрок(ПорцияПрописьюМ));
	
КонецФункции

&НаСервере
Функция СохранитьНастройкуИнтервалаПланирования()
	
	ПустаяДата = '00010101';
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ДлинаИнтервала = 3600;
		
		Объект.НачалоИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День
		ИЛИ Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.ПустаяСсылка() Тогда
		
		ДлинаИнтервала = 86400;
		
		Объект.НачалоИнтервалаПланирования = ПустаяДата + Час(НачалоИнтервалаПланированияВремяДня) * 60 * 60 
															+ Минута(НачалоИнтервалаПланированияВремяДня) * 60;
															
		Объект.ОкончаниеИнтервалаПланирования = ПустаяДата + Час(ОкончаниеИнтервалаПланированияВремяДня) * 60 * 60 
																+ Минута(ОкончаниеИнтервалаПланированияВремяДня) * 60;
																
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ДлинаИнтервала = 604800;
		
		Объект.НачалоИнтервалаПланирования = ПустаяДата + Перечисления.ДниНедели.Индекс(НачалоИнтервалаПланированияДеньНедели) * 86400
															+ Час(НачалоИнтервалаПланированияВремяДня) * 60 * 60 
																+ Минута(НачалоИнтервалаПланированияВремяДня) * 60;
																
		Объект.ОкончаниеИнтервалаПланирования = ПустаяДата + Перечисления.ДниНедели.Индекс(ОкончаниеИнтервалаПланированияДеньНедели) * 86400
																+ Час(ОкончаниеИнтервалаПланированияВремяДня) * 60 * 60 
																	+ Минута(ОкончаниеИнтервалаПланированияВремяДня) * 60;
																	
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ДлинаИнтервала = 2678400;
		
		Объект.НачалоИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ПустаяДата, Объект.ИнтервалПланирования);
		
	КонецЕсли;
	
	Если Объект.НачалоИнтервалаПланирования = Объект.ОкончаниеИнтервалаПланирования Тогда
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования + ДлинаИнтервала - 60);
		
	ИначеЕсли Объект.НачалоИнтервалаПланирования > Объект.ОкончаниеИнтервалаПланирования Тогда
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования + ДлинаИнтервала);
		
	Иначе
		
		Объект.ОкончаниеИнтервалаПланирования = КонецМинуты(Объект.ОкончаниеИнтервалаПланирования);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИнициализироватьПараметрыИнтервалаПланирования(Сбросить = Ложь)
	
	Если Сбросить Тогда
		
		Объект.НачалоИнтервалаПланирования = '00010101';
		Объект.ОкончаниеИнтервалаПланирования = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования('00010101', Объект.ИнтервалПланирования);
		
	КонецЕсли;
	
	Если Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Истина;
		Элементы.ГруппаНастройкаИнтервалаПланирования.ТекущаяСтраница = Элементы.ГруппаИнтервалПланированияДень;
		
		НачалоИнтервалаПланированияВремяДня    = Объект.НачалоИнтервалаПланирования;
		ОкончаниеИнтервалаПланированияВремяДня = Объект.ОкончаниеИнтервалаПланирования;
		
	ИначеЕсли Объект.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Истина;
		Элементы.ГруппаНастройкаИнтервалаПланирования.ТекущаяСтраница = Элементы.ГруппаИнтервалПланированияНеделя;
		
		НачалоИнтервалаПланированияДеньНедели     = Перечисления.ДниНедели[ДеньНедели(Объект.НачалоИнтервалаПланирования) - 1];
		НачалоИнтервалаПланированияВремяДня       = Объект.НачалоИнтервалаПланирования;
		
		ОкончаниеИнтервалаПланированияДеньНедели  = Перечисления.ДниНедели[ДеньНедели(Объект.ОкончаниеИнтервалаПланирования) - 1];
		ОкончаниеИнтервалаПланированияВремяДня    = Объект.ОкончаниеИнтервалаПланирования;
		
	Иначе
		
		Элементы.ГруппаНастройкаИнтервалаПланирования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИнтервалПланированияПриИзмененииНаСервере()
	
	УстановитьТекстЧасовДнейМесяцевНедель();
	ИнициализироватьПараметрыИнтервалаПланирования(Истина);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
