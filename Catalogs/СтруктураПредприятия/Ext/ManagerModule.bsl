#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
//Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	//++ НЕ УТКА
	Результат.Добавить("ПодразделениеДиспетчер");
	
	Результат.Добавить("ИнтервалПланирования;
		|НачалоИнтервалаПланированияДень, ОкончаниеИнтервалаПланированияДень,
		|НачалоИнтервалаПланированияНеделяДень, НачалоИнтервалаПланированияНеделяВремя,
		|ОкончаниеИнтервалаПланированияНеделяДень, ОкончаниеИнтервалаПланированияНеделяВремя");
	Результат.Добавить("УправлениеМаршрутнымиЛистами");
	Результат.Добавить("СпособПооперационногоУправления");
	Результат.Добавить("СпособПолученияПолуфабрикатов");
	Результат.Добавить("ИспользоватьПооперационноеУправление");
	Результат.Добавить("ИспользоватьМатериалыВОперациях");
	Результат.Добавить("ИспользоватьВыходныеИзделияВОперациях");
	//-- НЕ УТКА
	
	Результат.Добавить("ПроизводственноеПодразделение");
	Результат.Добавить("ПроизводствоПоЗаказам");
	Результат.Добавить("ПроизводствоБезЗаказов");
	Результат.Добавить("ИспользуетсяСписаниеЗатратНаВыпуск;
		|ОтдельнымДокументом, ПоПравиламРаспределения");
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

// Возвращает даты по которые нужно заполнить доступность
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение для которого нужно получить данные
//
// Возвращаемое значение:
//   Структура   - Даты по которые нужно заполнить доступность
//
Функция ДоступностьТребуетсяЗаполнитьПо(Подразделение) Экспорт
	
	ДоступностьДляГрафикаНужноЗаполнитьПо = '000101010000';
	ГрафикРаботыРЦНужнозаполнитьПо = '000101010000';
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней,
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		Если Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней <> 0 Тогда
			ДоступностьДляГрафикаНужноЗаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней * 86400;
		КонецЕсли; 
		Если Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней <> 0 Тогда
			ГрафикРаботыРЦНужнозаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней * 86400;
		КонецЕсли; 
	КонецЕсли; 
	
	ТребуетсяЗаполнитьПо = Новый Структура;
	ТребуетсяЗаполнитьПо.Вставить("ДоступностьДляГрафикаНужноЗаполнитьПо", ДоступностьДляГрафикаНужноЗаполнитьПо);
	ТребуетсяЗаполнитьПо.Вставить("ГрафикРаботыРЦНужнозаполнитьПо", ГрафикРаботыРЦНужнозаполнитьПо);
	
	Возврат ТребуетсяЗаполнитьПо;

КонецФункции

// Заполняет служебные константы ИспользоватьМетодикуББВ, ИспользоватьМетодикуПооперационноеПланирование
// и ИспользоватьМетодикуРегистрацияОпераций.
//
Процедура ЗаполнитьИспользуемыеМетодикиУправления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИспользоватьМетодикуББВ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПОоперационноеПланирование)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИспользоватьМетодикуПооперационноеПланирование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИспользоватьМетодикуРегистрацияОпераций,
		|	МАКСИМУМ(СтруктураПредприятия.ИспользоватьПооперационноеУправление) КАК ИспользоватьПооперационноеУправление
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуББВ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуПооперационноеПланирование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьМетодикуРегистрацияОпераций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьПооперационноеУправление");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Константы.ИспользоватьМетодикуББВ.Получить() <> Выборка.ИспользоватьМетодикуББВ Тогда
			Константы.ИспользоватьМетодикуББВ.Установить(Выборка.ИспользоватьМетодикуББВ);
		КонецЕсли;
		
		Если Константы.ИспользоватьМетодикуПооперационноеПланирование.Получить() <> Выборка.ИспользоватьМетодикуПооперационноеПланирование Тогда
			Константы.ИспользоватьМетодикуПооперационноеПланирование.Установить(Выборка.ИспользоватьМетодикуПооперационноеПланирование);
		КонецЕсли;
		
		Если Константы.ИспользоватьМетодикуРегистрацияОпераций.Получить() <> Выборка.ИспользоватьМетодикуРегистрацияОпераций Тогда
			Константы.ИспользоватьМетодикуРегистрацияОпераций.Установить(Выборка.ИспользоватьМетодикуРегистрацияОпераций);
		КонецЕсли;
		
		Если Константы.ИспользоватьПооперационноеУправление.Получить() <> Выборка.ИспользоватьПооперационноеУправление Тогда
			Константы.ИспользоватьПооперационноеУправление.Установить(Выборка.ИспользоватьПооперационноеУправление);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать используемые методики управления производством'");
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Межцеховое управление.Ошибка заполнения методик управления производством'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			, 
			, 
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

//-- НЕ УТКА

// Получает подразделение-диспетчер, если оно одно в ИБ
//  Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//  возвращает единственное в информационной базе подразделение-диспетчер.
//  Если подразделений-диспетчеров в базе несколько,
//  возвращает подразделение-диспетчер из настроек пользователя.
//  Если подразделение-диспетчер не указано в настройках пользователя,
//  возвращает пустое подразделение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя
// 
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - подразделение-диспетчер по умолчанию
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Пользователь = Неопределено) Экспорт
	
//++ НЕ УТКА
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		
		Подразделение = Выборка.Подразделение;
		
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Пользователи.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка = &Пользователь
			|	И ЕСТЬNULL(Пользователи.Подразделение.ПодразделениеДиспетчер, ЛОЖЬ)
			|");
			
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
//-- НЕ УТКА
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
	Возврат Подразделение;

КонецФункции

// Возвращает количество подразделений-диспетчеров.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество подразделений-диспетчеров
//
Функция КоличествоПодразделенийДиспетчеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких подразделений-диспетчеров.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется несколько подразделений-диспетчеров
//
Функция ИспользуетсяНесколькоПодразделенийДиспетчеров() Экспорт
	
	Возврат КоличествоПодразделенийДиспетчеров() > 1;
	
КонецФункции

//++ НЕ УТ

// Проверяет использование параметров производства
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеПараметровПроизводства(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И НЕ ВыпускПродукции.ВыпускПоРаспоряжениям
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Отправитель = &Подразделение
	|	И ТаблицаПоиска.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	|	И НЕ ТаблицаПоиска.ПоРаспоряжениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыРабочихЦентров.Ссылка
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПооперационноеРасписание.ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроизводственнаяОперация2_2.Ссылка
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация2_2
	|ГДЕ
	|	ПроизводственнаяОперация2_2.Подразделение = &Подразделение
	|	И ПроизводственнаяОперация2_2.Проведен
	|	И НЕ ПроизводственнаяОперация2_2.Статус В (&СтатусыОперацияЗавершена)
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Подразделение", Параметры.Объект);
	
	//++ НЕ УТКА
	
	СтатусыОперацияЗавершена = Новый Массив;
	СтатусыОперацияЗавершена.Добавить(Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
	СтатусыОперацияЗавершена.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	Запрос.УстановитьПараметр("СтатусыОперацияЗавершена", СтатусыОперацияЗавершена);
	
	//-- НЕ УТКА
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = Новый Структура;
	
	ИспользуетсяДляПроизводстваБезЗаказов      = НЕ Результат[0].Пустой();
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваБезЗаказов",    ИспользуетсяДляПроизводстваБезЗаказов);
	
	//++ НЕ УТКА
	
	ИнтервалПланированияИспользуется           = НЕ Результат[1].Пустой();
	РезультатПроверки.Вставить("ИнтервалПланированияИспользуется",         ИнтервалПланированияИспользуется);
	
	УправлениеМаршрутнымиЛистамиИспользуется   = НЕ Результат[2].Пустой();
	РезультатПроверки.Вставить("УправлениеМаршрутнымиЛистамиИспользуется", УправлениеМаршрутнымиЛистамиИспользуется);
	
	ПооперационноеРасписаниеИспользуется       = НЕ Результат[3].Пустой();
	РезультатПроверки.Вставить("ПооперационноеРасписаниеИспользуется",     ПооперационноеРасписаниеИспользуется);
	
	ИспользуетсяКакДиспетчер                   = НЕ Результат[4].Пустой();
	РезультатПроверки.Вставить("ИспользуетсяКакДиспетчер",                 ИспользуетсяКакДиспетчер);
	
	ИспользуетсяДляПроизводстваПоЗаказам       = НЕ Результат[5].Пустой();
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваПоЗаказам",     ИспользуетсяДляПроизводстваПоЗаказам);
	
	ИспользуетсяПооперационноеУправлениеЭтапами = НЕ Результат[6].Пустой();
	РезультатПроверки.Вставить("ИспользуетсяПооперационноеУправлениеЭтапами",
		ИспользуетсяПооперационноеУправлениеЭтапами);
	
	//-- НЕ УТКА
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

// Возвращает элемент справочника СтруктураПредприятия, в котором числится физическое лицо.
//
// Параметры:
//  Организация 	- СправочникСсылка.Организации - организация, в которой работает сотрудник
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо, подразделение которого требуется получить
//  Период			- Дата - дата, на которую требуется получить данные
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия   - подразделение организационной структуры.
//
Функция МестоСотрудникаВСтруктуреПредприятия(Организация, ФизическоеЛицо, Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодДанных = ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса());
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		Истина,
		Организация,
		ПериодДанных);
	
	Если ОсновныеСотрудники.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеСотрудники[0].Сотрудник),
		"МестоВСтруктуреПредприятия",
		ПериодДанных);
		
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат КадровыеДанные[0].МестоВСтруктуреПредприятия;
	
КонецФункции

//-- НЕ УТ

//++ НЕ УТКА

// Определяет цеховую кладовую подразделения
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого определяется кладовая
//
// Возвращаемое значение:
//		СправочникСслыка.Склады - Цеховая кладовая подразделения
//
Функция ЦеховаяКладоваяПоУмолчанию(Подразделение) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.Подразделение = &Подразделение
		|	И Таблица.ЦеховаяКладовая";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.ЦеховаяКладовая";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции

// Определяет используется ли пооперационное управление этапами производства в подразделении
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение
//
// Возвращаемое значение:
//		Булево - Истина, если в подразделении используется пооперационное управление
//
Функция ИспользоватьПооперационноеУправление(Подразделение) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка = &Ссылка
		|	И СтруктураПредприятия.ИспользоватьПооперационноеУправление");
		
	Запрос.УстановитьПараметр("Ссылка", Подразделение);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПодразделениеДиспетчерИлиПроизводственноеПодразделение") Тогда
		ПроизводствоВызовСервера.СтруктураПредприятияОбработкаПолученияДанныхВыбора(
					ДанныеВыбора, 
					Параметры, 
					СтандартнаяОбработка);
	КонецЕсли; 
	//-- НЕ УТ
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
