
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Возвращает описание реквизитов объекта эксплуатации
//
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с описанием реквизитов элемонта справочника объектов эксплуатации
//
Функция СоставРеквизитов() Экспорт
	
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОбязателенДляЗаполнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТолькоПросмотрОбязательности", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("Имя", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("ОбязателенДляЗаполнения", "Ложь");
	ЗначенияПоУмолчанию.Вставить("ТолькоПросмотрОбязательности", "Ложь");
	
	// Описания реквизитов, со значениями параметров отличающихся от "по-умолчанию"
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаСведений", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Статус", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Класс", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Подкласс", Новый Структура("ОбязателенДляЗаполнения, ТолькоПросмотрОбязательности", Ложь, Истина));
	
	// Список реквизитов, которые должны быть исключены: служебные, не используемые, предназначенные для удаления, булевы признаки
	// 		или любые другие не предназначенные для интерактивной настройки пользователем
	СтопЛист = Новый Структура(
		"ГруппаОСМеждународныйУчет,
		|Комментарий,
		|ОбъектБытовогоНазначения,
		|Удалить_АдресМестонахождения,
		|Удалить_ГруппаОС,
		|Удалить_КодПоОКОФ,
		|Удалить_ШифрПоЕНАОФ,
		|Удалить_КадастровыйНомер,
		|Удалить_АмортизационнаяГруппа,
		|Удалить_Помещение,
		|Удалить_КадастровыйНомер,
		|Удалить_КодРегиона");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		СтопЛист.Удалить("ГруппаОСМеждународныйУчет");
	КонецЕсли;
	
	// Получение таблицы реквизитов из описания метаданных
	СтруктураСправочника = Метаданные.Справочники.ОбъектыЭксплуатации;
	Для Каждого Реквизит Из СтруктураСправочника.Реквизиты Цикл
		
		Если СтопЛист.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		
		СтрокаРеквизита.ОбязателенДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизитов[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает структуру по-умолчанию передаваемую в качестве параметра в процедуру проверки "ПроверитьЗаполнение"
//
// Возвращаемое значение:
// 		Структура - Структура параметров проверки заполнения
//
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПотокОшибок", Новый Структура);
	ОбъектыЭксплуатации.ИнициализироватьПотокОшибок(Параметры.ПотокОшибок);
	
	Параметры.Вставить("СообщатьОшибки", Истина);
	Параметры.Вставить("Форма", Неопределено);
	
	Параметры.Вставить("ИспользоватьУзлыОбъектовЭксплуатации", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	
	Параметры.Вставить("ПроверятьУзлы", Истина);
	Параметры.Вставить("ПараметрыПроверкиУзлов", Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения());
	Параметры.ПараметрыПроверкиУзлов.Вставить("СообщатьОшибки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Выполяет проверку заполения переданного объекта проверки по заданным параметрам
//
// Параметры:
// 		ОбъектПроверки - ДанныеФормыСтруктура, СправочникОбъект.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыЭксплуатации, Массив
// 			- Объект, ссылка или массив ссылок на объекты эскплуатации, которые необходимо проверить на корректность заполнения
// 		ПараметрыПроверки - Сткрутра - Структура с описанием параметров проверки заполения, состав полей описан в функции "ПараметрыПроверкиЗаполнения"
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок при проверки
//
Процедура ПроверитьЗаполнение(ОбъектПроверки, ПараметрыПроверки, Отказ=Ложь) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ОбъектыЭксплуатации.ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения);
	
	ТипОбъекта = ТипЗнч(ОбъектПроверки);
	
	МассивОбъектовЭксплуатации = Новый Массив;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОбъекта = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОбъектПроверки);
		СформироватьЗапросПроверкиЗаполнения(Запрос.Текст);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроверитьОбъектЭксплуатации(
				Выборка,
				ПараметрыПроверки,
				КэшированныеЗначения);
			
			МассивОбъектовЭксплуатации.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьОбъектЭксплуатации(
			ОбъектПроверки,
			ПараметрыПроверки,
			КэшированныеЗначения);
		
		МассивОбъектовЭксплуатации.Добавить(ОбъектПроверки.Ссылка);
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ОтказПроверкиУзлов", Ложь);
	
	Если ПараметрыПроверки.ИспользоватьУзлыОбъектовЭксплуатации
		И ПараметрыПроверки.ПроверятьУзлы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", МассивОбъектовЭксплуатации);
		СформироватьЗапросПроверкиЗаполненияУзлов(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(
					Выборка,
					ПараметрыПроверки.ПараметрыПроверкиУзлов,
					ПараметрыПроверки.ОтказПроверкиУзлов, // Отказ
					КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.СообщатьОшибки Тогда
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполяет разблокировку объекта эксплуатации для разрешения возможности интерактивного редактирования
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектЭксплуатации - Ссылка на элемент справочника
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок во время выполнения
//
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ=Ложь) Экспорт
	
	ДанныеЗаполнения = Новый Структура("Статус", Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
	
	ОбъектСправочника = ОбъектЭксплуатации.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаполнения);
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Ошибка при попытке записи объекта эксплуатации:'") + " " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

//-- НЕ УТКА

#Область СтандартныеПодсистемы

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
// 		Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ГруппаОС");
	Результат.Добавить("АмортизационнаяГруппа");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ГруппаОСМеждународныйУчет");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		
		//++ НЕ УТКА
		ВнеоборотныеАктивыВызовСервера.ЗаполнитьОтборыОСМФУ(Параметры);
		//-- НЕ УТКА
		
		Если Параметры.Отбор.Свойство("ГруппаОС") Тогда
			Параметры.Отбор.Вставить("БУГруппаОС", Параметры.Отбор.ГруппаОС);
		ИначеЕсли Параметры.Свойство("БУГруппаОС") Тогда
			Параметры.Отбор.Вставить("ГруппаОС", Параметры.Отбор.БУГруппаОС);
		КонецЕсли;
		Если Параметры.Отбор.Свойство("АмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("БУАмортизационнаяГруппа", Параметры.Отбор.АмортизационнаяГруппа);
		ИначеЕсли Параметры.Свойство("БУАмортизационнаяГруппа") Тогда
			Параметры.Отбор.Вставить("АмортизационнаяГруппа", Параметры.Отбор.БУАмортизационнаяГруппа);
		КонецЕсли;
		
		Если Параметры.Свойство("ДоговорЛизинга") И ЗначениеЗаполнено(Параметры.ДоговорЛизинга) Тогда
			Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.ДоговорЛизинга));
		КонецЕсли;
		
		Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
			И Параметры.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется") Тогда
			Параметры.Отбор.Удалить("НаправлениеДеятельности");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ГруппаОС") Тогда
		Параметры.Отбор.Вставить("БУГруппаОС", Параметры.Отбор.ГруппаОС);
		Параметры.Отбор.Удалить("ГруппаОС");
	ИначеЕсли Параметры.Свойство("БУГруппаОС") Тогда
		Параметры.Отбор.Вставить("ГруппаОС", Параметры.Отбор.БУГруппаОС);
	КонецЕсли;
	Если Параметры.Отбор.Свойство("АмортизационнаяГруппа") Тогда
		Параметры.Отбор.Вставить("БУАмортизационнаяГруппа", Параметры.Отбор.АмортизационнаяГруппа);
	ИначеЕсли Параметры.Свойство("БУАмортизационнаяГруппа") Тогда
		Параметры.Отбор.Вставить("АмортизационнаяГруппа", Параметры.Отбор.БУАмортизационнаяГруппа);
	КонецЕсли;
	
	Если Параметры.Свойство("ДоговорЛизинга") И ЗначениеЗаполнено(Параметры.ДоговорЛизинга) Тогда
		Параметры.Отбор.Вставить("НаправлениеДеятельности", ВнеоборотныеАктивыВызовСервера.НаправлениеДеятельности(Параметры.ДоговорЛизинга));
	КонецЕсли;
	Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
		И Параметры.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется") Тогда
		Параметры.Отбор.Удалить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("МФУГруппаОС") Тогда
		Параметры.Отбор.Вставить("ГруппаОСМеждународныйУчет", Параметры.Отбор.МФУГруппаОС);
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Параметры.Свойство("МФУНаправлениеПеревода") Тогда
		Параметры.Отбор.Вставить("МФУВидАктива", Неопределено);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Если Параметры.Свойство("Контекст")Тогда
		
		ИндексЗапятой = СтрНайти(Параметры.Контекст, ",");
		Контекст = Параметры.Контекст;
		Если ИндексЗапятой <> 0 Тогда
			Контекст = Сред(Контекст, 1, ИндексЗапятой-1);
		КонецЕсли;
		
		Если Контекст = "БУ"
			И (ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры, "ТекущийРегистратор, ДатаСведений")
				Или Параметры.Свойство("Отбор")
				И ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры.Отбор, "БУОрганизация, БУПодразделение, БУСостояние")) Тогда
			
			Параметры.Отбор.Вставить("Ссылка", ВнеоборотныеАктивыВызовСервера.ЭлементыОСПоОтборуБУ(Параметры));
		//++ НЕ УТКА
		ИначеЕсли Контекст = "МФУ"
			И (ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры, "ТекущийРегистратор, ДатаСведений")
				Или Параметры.Свойство("Отбор")
				И ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры.Отбор, "МФУСостояние, МФУОрганизация, МФУПодразделение")) Тогда
			
			Параметры.Отбор.Вставить("Ссылка", ВнеоборотныеАктивыВызовСервера.ЭлементыОСПоОтборуМФУ(Параметры));
		//-- НЕ УТКА
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область ПроверкаЗаполненияОбъектовЭксплуатации

Процедура СформироватьЗапросПроверкиЗаполнения(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.*
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&ОбъектыЭксплуатации)";
	
КонецПроцедуры

Процедура СформироватьЗапросПроверкиЗаполненияУзлов(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УзлыОбъектовЭксплуатации.*
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Владелец В(&ОбъектыЭксплуатации)
		|	И УзлыОбъектовЭксплуатации.Владелец <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ УзлыОбъектовЭксплуатации.ПометкаУдаления
		|	И УзлыОбъектовЭксплуатации.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ПустаяСсылка))";
	
КонецПроцедуры

Функция ПолучитьОбязательныеРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = КэшированныеЗначения.ОбязательныеРеквизиты.Получить(Класс);
	
	Если ОбязательныеРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Класс) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ
				|	РеквизитыДляКонтроляОбъектов.Имя,
				|	РеквизитыДляКонтроляОбъектов.Синоним
				|ИЗ
				|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
				|		ПО Реквизиты.ИмяРеквизита = РеквизитыДляКонтроляОбъектов.Имя
				|ГДЕ
				|	Реквизиты.Ссылка = &Класс
				|	И Реквизиты.ОбязателенДляЗаполнения";
		Иначе
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Реквизиты.Имя,
				|	Реквизиты.Синоним
				|ИЗ
				|	РеквизитыОбъектов КАК Реквизиты
				|ГДЕ
				|	Реквизиты.ОбязателенДляЗаполнения";
			
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеРеквизиты = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ОбязательныеРеквизиты.Вставить(Класс, ОбязательныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьОбязательныеДопРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеДопРеквизиты = КэшированныеЗначения.ОбязательныеДопРеквизиты.Получить(Класс);
	
	Если ОбязательныеДопРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.Ссылка = ВЫРАЗИТЬ(&Класс КАК Справочник.КлассыОбъектовЭксплуатации).НаборСвойств
			|	И (ДопРеквизиты.Свойство.ЗаполнятьОбязательно)
			|	И НЕ ДопРеквизиты.Свойство В
			|				(ВЫБРАТЬ
			|					ОбщиеДопРеквизитыОбъектов.Свойство
			|				ИЗ
			|					ОбщиеДопРеквизитыОбъектов КАК ОбщиеДопРеквизитыОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	ОбщиеДопРеквизитыОбъектов КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.ЗаполнятьОбязательно");
		
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеДопРеквизиты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
		
		КэшированныеЗначения.ОбязательныеДопРеквизиты.Вставить(Класс, ОбязательныеДопРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеДопРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыУчетаНаработок(Класс, КэшированныеЗначения)
	
	ПараметрыУчетаНаработок = КэшированныеЗначения.ПараметрыУчетаНаработок.Получить(Класс);
	
	Если ПараметрыУчетаНаработок = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Параметры.ПоказательНаработки КАК ПоказательНаработки,
			|	Параметры.РасчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
			|	Параметры.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
			|ИЗ
			|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК Параметры
			|ГДЕ
			|	Параметры.Ссылка = &Класс
			|	И (Параметры.РегистрироватьОтИсточника
			|			ИЛИ Параметры.РасчитыватьОстаточныйРесурс)");
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ПараметрыУчетаНаработок = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ПараметрыУчетаНаработок.Вставить(Класс, ПараметрыУчетаНаработок);
		
	КонецЕсли;
	
	Возврат ПараметрыУчетаНаработок;
	
КонецФункции

Процедура ПроверитьОбъектЭксплуатации(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = ПолучитьОбязательныеРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектПроверки[СокрЛП(Реквизит.Имя)]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено.'"),
				СокрЛП(Реквизит.Синоним));
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект."+Реквизит.Имя,
				ТекстОшибки,
				"Реквизиты",
				0,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ОбязательныеДопРеквизиты = ПолучитьОбязательныеДопРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаДопРеквизитов = ОбъектПроверки.ДополнительныеРеквизиты.Выгрузить();
		
		Для Каждого Свойство Из ОбязательныеДопРеквизиты Цикл
			
			Если ТаблицаДопРеквизитов.Найти(Свойство, "Свойство") = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле ""%1"" не заполнено.'"),
					Свойство);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ГруппаДополнительныеРеквизиты",
					ТекстОшибки,
					"ДопРеквизиты",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не (ПараметрыПроверки.Форма.Свойства_ИспользоватьСвойства И ПараметрыПроверки.Форма.Свойства_ИспользоватьДопРеквизиты) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ПараметрыПроверки.Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Если Строка.ЗаполнятьОбязательно Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Форма[Строка.ИмяРеквизитаЗначение]) Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.'"),
						Строка.Наименование);
					
					ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
						ПараметрыПроверки.ПотокОшибок,
						ОбъектПроверки.Ссылка,
						Строка.ИмяРеквизитаЗначение,
						ТекстОшибки,
						"ДопРеквизиты",
						0,
						ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	РабочиеЦентры = ОбъектПроверки.РабочиеЦентры.Выгрузить();
	Для ТекИндекс=0 По РабочиеЦентры.Количество()-1 Цикл
		
		Строка = РабочиеЦентры[ТекИндекс];
		
		Если Не ЗначениеЗаполнено(Строка["РабочийЦентр"]) Тогда
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект.РабочиеЦентры[%1].РабочийЦентр",
				НСтр("ru = 'Не заполнено поле ""Рабочий центр""'"),
				"РабочиеЦентры",
				ТекИндекс,
				НСтр("ru = 'Не заполнена колонка ""Рабочий центр"" в строке %1 списка ""Рабочие центры""'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ПараметрыУчетаНаработки = ПолучитьПараметрыУчетаНаработок(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаПараметров = ОбъектПроверки.ПараметрыУчетаНаработок.Выгрузить();
		
		Для Каждого НастройкаПоказателя Из ПараметрыУчетаНаработки Цикл
			
			Строка = ТаблицаПараметров.Найти(НастройкаПоказателя.ПоказательНаработки, "ПоказательНаработки");
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Для ТекИндекс=0 По ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()-1 Цикл
			
			Строка = ПараметрыПроверки.Форма.ПараметрыУчетаНаработок[ТекИндекс];
			
			Если Строка.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Назначенный ресурс показателя наработки ""%1"" не заполнен'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].НазначенныйРесурс",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			Если Строка.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Источник текущих значений показателя наработки ""%1"" не заполнен'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].Источник",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ОбъектыЭксплуатации)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		// 4D:ERP для Беларуси, Дмитрий, 30.12.2018 12:59:06 
		// Учет ОС
		// {
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОС6";
		КомандаПечати.Представление = НСтр("ru = 'Инвентарная карточка ОС'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСпискаБУ";
		// }
		// 4D
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Команда = Документы.ПринятиеКУчетуОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.ИзменениеСостоянияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.РегистрацияНаработок.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка, ФормаСпискаБУ";
	КонецЕсли;
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = Документы.УстановкаЗначенийНаработки.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = Документы.СписаниеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	//++ НЕ УТКА
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаОбъектаЭксплуатации(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаОСМеждународныйУчет(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСравнениеОС(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС6") Тогда
		
		// 4D:ERP для Беларуси, Дмитрий, 30.12.2018 12:59:06 
		// Учет ОС
		// {
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОС6",
			НСтр("ru = 'Инвентарная карточка ОС'"),
			ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		// }
		// 4D
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьОС6_2003(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ИмяПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_ОсновныеСредства_ОС6";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ОбъектыЭксплуатации.ПФ_MXL_ОС6");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2 = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3 = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3 = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4 = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4 = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1 = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6 = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1 = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	СтрокиРаздела7_1 = Макет.ПолучитьОбласть("СтрокиРаздела7_1");
	ШапкаРаздела7_2 = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2 = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ОС", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации"));
	ТаблицаОбъектов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НомерСтроки = 1;
	Для каждого ОС Из МассивОбъектов Цикл
		СтрокаТаблицы = ТаблицаОбъектов.Добавить();
		СтрокаТаблицы.ОС = ОС;
		СтрокаТаблицы.Номер = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВидСобытияПереоценки", Перечисления.ВидыСобытийОС.Переоценка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОС КАК ОС,
	|	ТаблицаОС.Номер КАК Порядок
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияПоОрганизации.ОсновноеСредство КАК ОС,
	|	СведенияПоОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ СведенияПоОрганизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство В (&МассивОбъектов)) КАК СведенияПоОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеСредства.Ссылка КАК Ссылка,
	|	ОсновныеСредства.Код КАК Код,
	|	ОсновныеСредства.Наименование КАК Наименование,
	|	ОсновныеСредства.ДатаВыпуска КАК ДатаВыпуска,
	|	ОсновныеСредства.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОсновныеСредства.Изготовитель КАК Изготовитель,
	|	ОсновныеСредства.НаименованиеПолное КАК НаименованиеПолное,
	|	ОсновныеСредства.НомерПаспорта КАК НомерПаспорта,
	|	ЕСТЬNULL(СведенияПоОрганизации.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ТаблицаОС.Порядок КАК Порядок,
	|	ОсновныеСредства.ДрагоценныеМатериалы.(
	|		ДрагоценныйМатериал КАК ДрагоценныйМатериал,
	|		Количество КАК Количество,
	|		ДрагоценныйМатериал.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК ДрагоценныеМатериалы
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ПО ТаблицаОС.ОС = ОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПоОрганизации КАК СведенияПоОрганизации
	|		ПО ТаблицаОС.ОС = СведенияПоОрганизации.ОС
	|ГДЕ
	|	ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переоценка.Дата КАК ДатаПереоценки,
	|	ПереоценкаТЧ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереоценкаТЧ.Стоимость КАК ВосстановительнаяСтоимостьПереоценки
	|ИЗ
	|	СведенияПоОрганизации КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО ТаблицаОС.ОС = СобытияОСОрганизаций.ОсновноеСредство
	|			И ТаблицаОС.Организация = СобытияОСОрганизаций.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС.ОС КАК ПереоценкаТЧ
	|		ПО (СобытияОСОрганизаций.Регистратор = ПереоценкаТЧ.Ссылка)
	|			И (СобытияОСОрганизаций.ОсновноеСредство = ПереоценкаТЧ.ОсновноеСредство)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС КАК Переоценка
	|		ПО (СобытияОСОрганизаций.Регистратор = Переоценка.Ссылка)
	|ГДЕ
	|	СобытияОСОрганизаций.Событие.ВидСобытияОС = &ВидСобытияПереоценки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаПереоценки";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Если Пакет[Пакет.ВГраница()-1].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Печатная форма № ОС-6 может быть сформирована только для элементов справочника.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьУчетДМ = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	
	ВыборкаОбъектов = Пакет[Пакет.ВГраница()-1].Выбрать();
	ВыборкаПереоценок = Пакет[Пакет.ВГраница()].Выбрать();
	ЕстьПереоценки = Не Пакет[Пакет.ВГраница()].Пустой();
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
		|ПОМЕСТИТЬ втСчетаУчета
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
		|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета,
		|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение.Наименование,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ГруппаОС КАК ГруппаОС,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.КодПоОКОФ.Код КАК КодПоОКОФ,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.АмортизационнаяГруппа.Порядок + 1 КАК АмортизационнаяГруппа,
		|	ЕСТЬNULL(ХозрасчетныйОстаткиСчетУчета.СуммаОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОстаткиСчетАмортизации.СуммаОстаток, 0) КАК ОстаточнаяСтоимость,
		|	-ЕСТЬNULL(ХозрасчетныйОстаткиСчетАмортизации.СуммаОстаток, 0) КАК СуммаНачисленнойАммортизации
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчета КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаСведений,
		|				Счет В
		|					(ВЫБРАТЬ
		|						втСчетаУчета.СчетУчета
		|					ИЗ
		|						втСчетаУчета КАК втСчетаУчета),
		|				&СубконтоОС,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							втСчетаУчета.ОсновноеСредство
		|						ИЗ
		|							втСчетаУчета КАК втСчетаУчета)) КАК ХозрасчетныйОстаткиСчетУчета
		|		ПО (СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ХозрасчетныйОстаткиСчетУчета.Субконто1)
		|			И (СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = ХозрасчетныйОстаткиСчетУчета.Счет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаСведений,
		|				Счет В
		|					(ВЫБРАТЬ
		|						втСчетаУчета.СчетНачисленияАмортизации
		|					ИЗ
		|						втСчетаУчета КАК втСчетаУчета),
		|				&СубконтоОС,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							втСчетаУчета.ОсновноеСредство
		|						ИЗ
		|							втСчетаУчета КАК втСчетаУчета)) КАК ХозрасчетныйОстаткиСчетАмортизации
		|		ПО (СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ХозрасчетныйОстаткиСчетАмортизации.Субконто1)
		|			И (СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = ХозрасчетныйОстаткиСчетАмортизации.Счет)
		|ГДЕ
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация";
		ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
		ТекущиеСведенияОС.Следующий();
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		СчетУчетаСтоимостиБУ = ТекущиеСведенияОС.СчетУчета;
		СрокИспользования   = ТекущиеСведенияОС.СрокПолезногоИспользования;
		
		Отбор  = Новый Структура( "ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Подразделение  = ТекущиеСведенияОС.МестонахождениеНаименование;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаОбъектов.Организация, ТекущаяДатаСеанса());
		
		Шапка.Параметры.Заполнить(ВыборкаОбъектов);
		Шапка.Параметры.Заполнить(ТекущиеСведенияОС);
		
		// 4D:ERP для Беларуси, Дмитрий, 30.12.2018 12:59:06 
		// Учет ОС
		// {
		Шапка.Параметры.Организация = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		Шапка.Параметры.Подразделение = Подразделение;
		Шапка.Параметры.НаименованиеОС = ?(НЕ ЗначениеЗаполнено(ВыборкаОбъектов.НаименованиеПолное), ВыборкаОбъектов.Наименование, ВыборкаОбъектов.НаименованиеПолное);
		// }
		// 4D
		
		Шапка.Параметры.НомерДок = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.ДатаДок = Формат(ДатаСведений,"ДЛФ=D");
		Шапка.Параметры.МестоНахождениеОС = Подразделение;
		Шапка.Параметры.ИзготовительОС = ВыборкаОбъектов.Изготовитель;
		Шапка.Параметры.НомерГруппы = ТекущиеСведенияОС.АмортизационнаяГруппа;
		Если ТекущиеСведенияОС.АмортизационнаяГруппа = 11 Тогда
			Шапка.Параметры.НомерГруппы = НСтр("ru='Отдельная'");
		КонецЕсли;
		Шапка.Параметры.НомерПаспорта = ВыборкаОбъектов.НомерПаспорта;
		Шапка.Параметры.ЗаводскойНомер = ВыборкаОбъектов.ЗаводскойНомер;
		Шапка.Параметры.ИнвентарныйНомер = ТекущиеСведенияОС.ИнвентарныйНомер;
		Шапка.Параметры.СубСчет = Строка(СчетУчетаСтоимостиБУ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.Состояние,
		|	СостоянияОСОрганизаций.ДатаСостояния,
		|	СобытияОСОрганизаций.НазваниеДокумента,
		|	СобытияОСОрганизаций.НомерДокумента,
		|	СобытияОСОрганизаций.Событие,
		|	СостоянияОСОрганизаций.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО СобытияОСОрганизаций.Период = СостоянияОСОрганизаций.ДатаСостояния И СобытияОСОрганизаций.Регистратор = СостоянияОСОрганизаций.Регистратор
		|
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация И
		|	СостоянияОСОрганизаций.Организация = &Организация И
		|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство И
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СобытияОСОрганизацийСрезПоследних.Период,
		|	СобытияОСОрганизацийСрезПоследних.НазваниеДокумента,
		|	СобытияОСОрганизацийСрезПоследних.НомерДокумента,
		|	СобытияОСОрганизацийСрезПоследних.Событие,
		|	СобытияОСОрганизацийСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство И Организация = &Организация И Событие.ВидСобытияОС В (&МодернизацияИКапРемонт)) КАК СобытияОСОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		
		ВидыСобытий = Новый СписокЗначений;
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
		
		Запрос.УстановитьПараметр("МодернизацияИКапРемонт", ВидыСобытий);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДатаПринятия = '00010101';
		ДокументПринятия = "";
		
		ДатаВвода = '00010101';
		ДокументВвода = "";
		ДокументВводаНомер = "";
		
		ДатаСписания = '00010101';
		ДокументСписания = "";
		РегистраторСписания = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние   = Перечисления.СостоянияОС.ПринятоКУчету Тогда
				ДатаПринятия = Выборка.ДатаСостояния;
				ДокументПринятия = Выборка.НазваниеДокумента;
				ДокументПринятияНомер = Выборка.НомерДокумента;
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета Тогда
				ДатаСписания        = Выборка.ДатаСостояния;
				ДокументСписания    = Выборка.НазваниеДокумента;
				РегистраторСписания = Выборка.Регистратор;
			Иначе
				ДатаПоследнейМодернизации     = Выборка.ДатаСостояния;
				ДокументПоследнейМодернизации = Выборка.НазваниеДокумента;
			КонецЕсли; 
		КонецЦикла;
		
		Шапка.Параметры.ДатаВвода    = ДатаПринятия;
		Шапка.Параметры.ДатаСписания = ДатаСписания;
		
		ТабДок.Вывести(Шапка);
		
		// Балансовая стоимость ОС на момент поступления и первоначально принятый срок полезного использования
		ШапкаРазделов1и2.Параметры.Заполнить(ВыборкаОбъектов);
		ШапкаРазделов1и2.Параметры.Заполнить(ТекущиеСведенияОС);
		ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость= ТекущиеСведенияОС.ПервоначальнаяСтоимость;
		ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = ОбъектыЭксплуатации.КоличествоМесяцевСтрокой(СрокИспользования);
		Если ЗначениеЗаполнено(ДатаПринятия) Тогда
			ШапкаРазделов1и2.Параметры.ДокументВвода = ДокументПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаДата = ДатаПринятия;
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументПринятияНомер, Истина, Ложь);
			ШапкаРазделов1и2.Параметры.ДатаКапремонта = ДатаПоследнейМодернизации;
			ШапкаРазделов1и2.Параметры.СрокЭксплуатации = ОбъектыЭксплуатации.КоличествоМесяцевСтрокой(
				УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
					ДатаПринятия, ?(ЗначениеЗаполнено(ДатаСписания), ДатаСписания, ТекущаяДатаСеанса())));
		КонецЕсли;
		
		ТабДок.Вывести(ШапкаРазделов1и2);
		
		// Переоценки
		ТабДок.Вывести(ШапкаРаздела3);
		Если ЕстьПереоценки Тогда
			ВосстановительнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
			ЗаполненныхПереоценок = 0;
			СтруктураПустойСтроки = Новый Структура(
				"ДатаПереоценки1, КоэффициентПереоценки1, ВосстановительнаяСтоимостьПереоценки1,
				|ДатаПереоценки2, КоэффициентПереоценки2, ВосстановительнаяСтоимостьПереоценки2,
				|ДатаПереоценки3, КоэффициентПереоценки3, ВосстановительнаяСтоимостьПереоценки3");
			
			Пока Истина Цикл
				
				Если ЗаполненныхПереоценок = 3 Тогда
					ТабДок.Вывести(СтрокиРаздела3);
					ЗаполненныхПереоценок = 0;
					СтрокиРаздела3.Параметры.Заполнить(СтруктураПустойСтроки);
				КонецЕсли;
				
				Если ВыборкаПереоценок.НайтиСледующий(Отбор) Тогда
					ЗаполненныхПереоценок = ЗаполненныхПереоценок + 1;
					СтрокиРаздела3.Параметры["ДатаПереоценки" + ЗаполненныхПереоценок] = ВыборкаПереоценок.ДатаПереоценки;
					СтрокиРаздела3.Параметры["ВосстановительнаяСтоимостьПереоценки" + ЗаполненныхПереоценок] = ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
					СтрокиРаздела3.Параметры["КоэффициентПереоценки" + ЗаполненныхПереоценок] = Формат(ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки / ВосстановительнаяСтоимость, "ЧЦ=15; ЧДЦ=3");
					
					ВосстановительнаяСтоимость = ВыборкаПереоценок.ВосстановительнаяСтоимостьПереоценки;
				Иначе
					Если ЗаполненныхПереоценок > 0 Тогда
						ТабДок.Вывести(СтрокиРаздела3);
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТабДок.Вывести(СтрокиРаздела3);
		КонецЕсли;
		
		// Сведения о приемке, внутренних перемещениях и выбытии	
		ТабДок.Вывести(ШапкаРаздела4);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",           ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СобытияОСОрганизаций.НазваниеДокумента,
		|	СобытияОСОрганизаций.НомерДокумента,
		|	СобытияОСОрганизаций.Период,
		|	СобытияОСОрганизаций.Период КАК ПериодОстатков,
		|	СобытияОСОрганизаций.Событие,
		|	СобытияОСОрганизаций.Событие.ВидСобытияОС КАК ВидСобытияОС,
		|	СобытияОСОрганизаций.Регистратор
		|ПОМЕСТИТЬ СобытияОС
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|ГДЕ
		|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОСОрганизаций.Период < &Период
		|	И СобытияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.Событие.ВидСобытияОС В (ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ВнутреннееПеремещение), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчет.Период,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ,
		|	МестонахождениеОСБухгалтерскийУчет.Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчет
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство = &ОсновноеСредство
		|	И МестонахождениеОСБухгалтерскийУчет.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.Период,
		|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО СобытияОС.Период >= МестонахождениеОСБухгалтерскийУчет.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов.Период,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ,
		|	МестонахождениеОСБухгалтерскийУчет.Местонахождение
		|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|ИЗ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов КАК МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО МестонахождениеОСБухгалтерскийУчетСрезПоследнихПериодов.ПоследнийПериод = МестонахождениеОСБухгалтерскийУчет.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОС.Период,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета,
		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|ГДЕ
		|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = &ОсновноеСредство
		|	И СчетаБухгалтерскогоУчетаОС.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков,
		|	МАКСИМУМ(СчетаБухгалтерскогоУчетаОС.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ПО СобытияОС.ПериодОстатков >= СчетаБухгалтерскогоУчетаОС.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов.ПериодОстатков,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета,
		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
		|ИЗ
		|	СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов КАК СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследнихПериодов.ПоследнийПериод = СчетаБухгалтерскогоУчетаОС.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Период,
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			,
		|			&Период,
		|			Регистратор,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
		|				ИЗ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
		|				ИЗ
		|					СчетаБухгалтерскогоУчетаОССрезПоследних),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ НЕ (Регистратор = Неопределено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияОС.ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	МАКСИМУМ(ХозрасчетныйОстаткиИОбороты.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СобытияОС.ПериодОстатков >= ХозрасчетныйОстаткиИОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияОС.ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПериодОстатков,
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОборотыСрезПоследних
		|ИЗ
		|	ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов КАК ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.ПоследнийПериод = ХозрасчетныйОстаткиИОбороты.Период
		|		 И ХозрасчетныйОстаткиИОборотыСрезПоследнихПериодов.Счет = ХозрасчетныйОстаткиИОбороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(СобытияОС.Регистратор) КАК НазваниеДокумента,
		|	СобытияОС.Регистратор.Номер КАК НомерДокумента,
		|	СобытияОС.Период,
		|	СобытияОС.Событие,
		|	СобытияОС.Регистратор,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	СтоимостьОС.СуммаОборотКт КАК СтоимостьОборот,
		|	АмортизацияОС.СуммаОборотДт КАК АмортизацияОборот,
		|	ВЫБОР КОГДА СобытияОС.ВидСобытияОС В (ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Списание), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Передача)) ТОГДА
		|		ЕСТЬNULL(СтоимостьОС.СуммаОборотКт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаОборотДт, 0) 
		|	ИНАЧЕ
		|		ЕСТЬNULL(СтоимостьОС.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаКонечныйОстатокКт, 0) 
		|	КОНЕЦ КАК ОстаточнаяСтоимость
		|ИЗ
		|	СобытияОС КАК СобытияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО СобытияОС.Период = МестонахождениеОСБухгалтерскийУчетСрезПоследних.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|		ПО СобытияОС.ПериодОстатков = СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК СтоимостьОС
		|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков = СтоимостьОС.ПериодОстатков)
		|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = СтоимостьОС.Счет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОборотыСрезПоследних КАК АмортизацияОС
		|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ПериодОстатков = АмортизацияОС.ПериодОстатков)
		|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет)";
		ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ТекущаяОперация = ВыборкаЗаписей.Событие;
			
			СтрокаРаздела4.Параметры.ДатаНомерДокумента = СтрШаблон(
				НСтр("ru='%1 № %2 от %3'"),
				Строка(ВыборкаЗаписей.НазваниеДокумента),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаписей.НомерДокумента),
				Формат(ВыборкаЗаписей.Период,"ДЛФ=D"));
			
			СтрокаРаздела4.Параметры.ВидОперации = ТекущаяОперация;
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = "";
			СтрокаРаздела4.Параметры.Подразделение = "";
			СтрокаРаздела4.Параметры.ФИОМОЛДвижения = ВыборкаЗаписей.МОЛ;
			СтрокаРаздела4.Параметры.Подразделение = ВыборкаЗаписей.Местонахождение;
				
			Если ВыборкаЗаписей.СтоимостьОборот = NULL И ВыборкаЗаписей.АмортизацияОборот = NULL Тогда // ввод начальных остатков
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
				
			Иначе
				
				СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ВыборкаЗаписей.ОстаточнаяСтоимость;
				
			КонецЕсли;
			
			ТабДок.Вывести(СтрокаРаздела4);
			
		КонецЦикла;
		
		ТабДок.Вывести(ПодвалСтраницы1);
		
		// модернизация ос и ремонт
		ТаблицаМодернизаций = Новый ТаблицаЗначений;
		ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
		ТаблицаМодернизаций.Колонки.Добавить("Название");
		ТаблицаМодернизаций.Колонки.Добавить("Дата");
		ТаблицаМодернизаций.Колонки.Добавить("Номер");
		ТаблицаМодернизаций.Колонки.Добавить("Сумма");
		
		ТаблицаРемонтов = Новый ТаблицаЗначений;
		ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
		ТаблицаРемонтов.Колонки.Добавить("Название");
		ТаблицаРемонтов.Колонки.Добавить("Дата");
		ТаблицаРемонтов.Колонки.Добавить("Номер");
		ТаблицаРемонтов.Колонки.Добавить("Сумма");
		
		ТабДок.Вывести(ШапкаРазделов5и6);
		
		СписокМодернизаций = Новый Массив;
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
		СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
		
		СписокРемонтов = Новый Массив;
		СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
		СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
		СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ВыборкаОбъектов.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаОбъектов.Ссылка);
		Запрос.УстановитьПараметр("УсловиеМодернизаций",СписокМодернизаций);
		Запрос.УстановитьПараметр("УсловиеРемонтов", СписокРемонтов);
		Запрос.УстановитьПараметр("ВидСобытияОС", Перечисления.ВидыСобытийОС.ПринятиеКУчету);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеМодернизаций) ТОГДА СобытияОСОрганизаций.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ КАК СуммаЗатратБУМодернизаций,
		|	ВЫБОР КОГДА СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеРемонтов) ТОГДА СобытияОСОрганизаций.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ КАК СуммаЗатратБУРемонтов,
		|	СобытияОСОрганизаций.Регистратор КАК Регистратор,
		|	СобытияОСОрганизаций.Период КАК Период,
		|	СобытияОСОрганизаций.Событие КАК Операция,
		|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
		|	ВЫРАЗИТЬ(СобытияОСОрганизаций.НазваниеДокумента КАК СТРОКА(200)) КАК НазваниеДокумента
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация И
		|	СобытияОСОрганизаций.Событие.ВидСобытияОС <> &ВидСобытияОС И
		|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		
		Результат = Запрос.Выполнить();
		
		СпособВыборки = ОбходРезультатаЗапроса.Прямой;
		ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
		Пока ВыборкаРегистраторов.Следующий() Цикл
			
			СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратБУМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратБУМодернизаций);
			СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратБУРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратБУРемонтов);
			
			Если СуммаМодернизаций <> 0 Тогда
				СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
				СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
				СтрокаТаблицыМодернизаций.Название = ВыборкаРегистраторов.НазваниеДокумента;
				СтрокаТаблицыМодернизаций.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаРегистраторов.НомерДокумента);
				СтрокаТаблицыМодернизаций.Дата = ВыборкаРегистраторов.Период;
				СтрокаТаблицыМодернизаций.Сумма = СуммаМодернизаций;
			КонецЕсли;
			
			Если СуммаРемонтов <> 0 Тогда
				СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
				СтрокаТаблицыРемонтов.ВидОперации = ВыборкаРегистраторов.Операция;
				СтрокаТаблицыРемонтов.Название = ВыборкаРегистраторов.НазваниеДокумента;
				СтрокаТаблицыРемонтов.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаРегистраторов.НомерДокумента);
				СтрокаТаблицыРемонтов.Дата = ВыборкаРегистраторов.Период;
				СтрокаТаблицыРемонтов.Сумма = СуммаРемонтов;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество(),1); 
		Для СчетСтрок = 1 По КоличествоСтрок Цикл
			Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
				СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок - 1);
				СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
				СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
				СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
				СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
				СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
			Иначе
				СтрокаРазделов5и6.Параметры.Модернизация          = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
				СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
				СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
			КонецЕсли;
			
			СтрокаРазделов5и6.Параметры.Ремонт          = "";
			СтрокаРазделов5и6.Параметры.ДокРемонта      = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = "";
			ТабДок.Вывести(СтрокаРазделов5и6);
		КонецЦикла;
		
		ТабДок.Вывести(ШапкаРаздела7_1);
		ТаблицаДМ = ВыборкаОбъектов.ДрагоценныеМатериалы.Выгрузить();
		Если ИспользоватьУчетДМ И ТаблицаДМ.Количество() <> 0 Тогда
			Для Каждого Строка Из ТаблицаДМ Цикл
				СтрокиРаздела7_1.Параметры.Заполнить(Строка);
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		Иначе
			Для к=0 По 6 Цикл // Вывод пустых строк для заполнения вручную
				ТабДок.Вывести(СтрокиРаздела7_1);
			КонецЦикла;
		КонецЕсли;
		ТабДок.Вывести(ШапкаРаздела7_2);
		ТабДок.Вывести(ПодвалСтраницы2);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаОбъектов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних КАК ПервоначальныеСведенияОС
	|		ПО ОбъектыЭксплуатации.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	(ОбъектыЭксплуатации.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|				И ОбъектыЭксплуатации.ГруппаОС <> ПервоначальныеСведенияОС.ГруппаОС
	|			ИЛИ ОбъектыЭксплуатации.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|				И ОбъектыЭксплуатации.АмортизационнаяГруппа <> ПервоначальныеСведенияОС.АмортизационнаяГруппа)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ОбъектыЭксплуатации";
	МетаданныеОбъекта = Метаданные.Справочники.ОбъектыЭксплуатации;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	#Область ТекстЗапроса
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОбъектыЭксплуатации.ГруппаОС <> ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|			ТОГДА ОбъектыЭксплуатации.ГруппаОС
	|		ИНАЧЕ ПервоначальныеСведенияОС.ГруппаОС
	|	КОНЕЦ КАК ГруппаОС,
	|	ВЫБОР
	|		КОГДА ОбъектыЭксплуатации.АмортизационнаяГруппа <> ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|			ТОГДА ОбъектыЭксплуатации.АмортизационнаяГруппа
	|		ИНАЧЕ ПервоначальныеСведенияОС.АмортизационнаяГруппа
	|	КОНЕЦ КАК АмортизационнаяГруппа
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиОбъектыЭксплуатации КАК ВТДляОбработкиОбъектыЭксплуатации
	|		ПО ОбъектыЭксплуатации.Ссылка = ВТДляОбработкиОбъектыЭксплуатации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				,
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						Т.Ссылка
	|					ИЗ
	|						ВТДляОбработкиОбъектыЭксплуатации КАК Т)) КАК ПервоначальныеСведенияОС
	|		ПО ОбъектыЭксплуатации.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	(ОбъектыЭксплуатации.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПустаяСсылка)
	|				И ОбъектыЭксплуатации.ГруппаОС <> ПервоначальныеСведенияОС.ГруппаОС
	|			ИЛИ ОбъектыЭксплуатации.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|				И ОбъектыЭксплуатации.АмортизационнаяГруппа <> ПервоначальныеСведенияОС.АмортизационнаяГруппа)";
	#КонецОбласти
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц);
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработкиОбъектыЭксплуатации", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект эксплуатации: %1 по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
		
		ОбработаноОбъектов = ОбработаноОбъектов + 1;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОбработаноОбъектов = ОбработаноОбъектов - 1;
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить группу ОС и амортизационную группу по данным регл. учета в документе ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			ОтменитьТранзакцию();
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выполнено заполние группы ОС и амортизационной группы по данным регл. учета для некоторых объектов эксплуатации (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли