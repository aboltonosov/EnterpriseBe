&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ИнициализацияАвтоподбораНоменклатуры(ЭтаФорма);
	
	УстановитьОтборВСпискеЭтапов();
	
	НастроитьВидимостьДоступностьПриСоздании();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	Элементы.ЭтапыСписок.ИзменятьСоставСтрок = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	
	УстановитьОтборВСпискеЭтапов();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	Элементы.ГруппаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РесурсныеСпецификации");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СтатусЗаписанногоОбъекта = ТекущийОбъект.Статус;
	Элементы.ЭтапыСписок.ИзменятьСоставСтрок = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиСтатейКалькуляции" Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение.СтатьиКалькуляции);
		
		ЗаполнитьПредставлениеСтатейКалькуляцииВзносов(ЭтаФорма);
		
	//++ НЕ УТКА
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораМатериала" Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтоподборНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.СоответствиеСвойств) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаПотребленияМатериала" Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьПотреблениеНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные) Тогда
			Модифицированность = Истина;
		КонецЕсли;
	//-- НЕ УТКА
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ТекущиеДанные.ИсточникПолученияПолуфабриката = ВыбранноеЗначение;
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И (ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭтапаВыпуска") Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ОбработкаВыбораЭтапаВыпуска(ТекущиеДанные, ВыбранноеЗначение);
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЭтапыПроизводства" Тогда
		
		ОбработатьИзменениеЭтапаПроизводства(Источник);
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроизводственногоПроцессаПриИзменении(Элемент)
	
	Объект.МногоэтапныйПроизводственныйПроцесс = Булево(ВидПроизводственногоПроцесса);
	
	ПриИзмененииВидаПроизводственногоПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграниченСрокПролеживанияВыходныхИзделийПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью(ЭтаФорма, "НастройкаМаксимальныйСрокПролеживания");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатьиКалькуляцииВзносовНажатие(Элемент)
	
	СтатьиКалькуляции = Новый Структура("СтатьяКалькуляцииБелгосстрах, СтатьяКалькуляцииФСЗН");
	ЗаполнитьЗначенияСвойств(СтатьиКалькуляции, Объект);

	ПараметрыФормы = Новый Структура("СтатьиКалькуляции", СтатьиКалькуляции);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта"));
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаНастройкиСтатейКалькуляции", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭтапаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПроизводственныйПроцесс.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ПроизводственныйПроцесс.Ссылка);
		ОткрытьФормуОдноэтапногоПроцесса(ПараметрыФормы);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СоздатьЭтапОдноэтапногоПроцесса();
		
	Иначе
		
		ПоказатьВопросПередДобавлениемЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВыходныеИзделия", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия,ВозвратныеОтходы", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	ВыходныеИзделияТребуетсяУказыватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(Объект.ВыходныеИзделия, 
																Объект.МногоэтапныйПроизводственныйПроцесс, 
																Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(Объект.ВыходныеИзделия, 
															Объект.МногоэтапныйПроизводственныйПроцесс, 
															Объект.Ссылка);
															
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия,ВозвратныеОтходы", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	ВозвратныеОтходыТребуетсяУказыватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.МатериалыИУслуги.ТекущиеДанные;
		
		КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
		
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(
					СтрокаТабличнойЧасти, 
					КлючСвязиИсточника,
					Объект.СоответствиеСвойств);
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчанию(СтрокаТабличнойЧасти);
		
		ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделияхКлиент.ПередУдалениемМатериалов(
				Элементы.МатериалыИУслуги, 
				Объект.МатериалыИУслуги,
				Объект.СоответствиеСвойств);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущиеДанные, Объект);
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеМатериалов(ТекущиеДанные, Объект);
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе И ЗначениеЗаполнено(ТекущиеДанные.ИсточникПолученияПолуфабриката) Тогда
		
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		ТекущиеДанные.СтатьяКалькуляции     = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные);
		
	КонецЕсли;
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеМатериалов(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ТекущиеДанные.ПроизводитсяВПроцессе = ПолуфабрикатПроизводимыйВПроцессе(ТекущиеДанные);
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию(ТекущиеДанные.СпособПолученияМатериала);
	
	ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияМатериалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
//++ НЕ УТКА
	ЗаполнитьСписокВыбораСпособаПолученияМатериала(Элемент.СписокВыбора);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПроизводитсяВПроцессеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ТекущиеДанные.СпособПолученияМатериала = ПолучитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные.ПроизводитсяВПроцессе);
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию();
	
	ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияПолуфабрикатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию(ТекущиеДанные.СпособПолученияМатериала);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияПолуфабрикатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
//++ НЕ УТКА
	ЗаполнитьСписокВыбораСпособаПолученияМатериала(Элемент.СписокВыбора);
//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиИсточникПолученияПолуфабрикатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ПолуфабрикатПроизводитсяПоСпецификации(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ПараметрыФормы.Вставить("НачалоПроизводства", Объект.НачалоДействия);
		ПараметрыФормы.Вставить("ПолучитьСписокДействующихСпецификаций", Истина);
		
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭтапаВыпуска", 
			ПолучитьПараметрыВыбораЭтапаВыпуска(), ЭтаФорма);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭтапРедактированиеПриИзменении(Элемент)
	
	ОбработатьИзменениеЭтапаВСтрокеМатериалыИУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзменении(Элемент)
	
	МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыСписок

&НаКлиенте
Процедура ЭтапыСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		
		Отказ = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Отказ = Истина;
		
		ПоказатьВопросПередДобавлениемЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПередУдалением(Элемент, Отказ)
	
	Если СтатусЗаписанногоОбъекта = СтатусДействующейСпецификации Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыСписокПослеУдаления(Элемент)
	
	Оповестить("Запись_ЭтапыПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИУслуги;
	ДанныеТаблицы = Объект.МатериалыИУслуги;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРазрешениеНаЗамену(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ПроверитьЗаполнениеИзделия(НСтр("ru = 'Необходимо указать изделие.'"))
		или Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Материалы = Новый Массив;
	
	Для каждого ЭлКоллекции из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МатериалыИУслуги.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") или
			ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		СтруктураМатериала = Новый Структура;
		
		СтруктураМатериала.Вставить("ПрименениеМатериала", Строка(ДанныеСтроки.НомерСтроки) + ": " + ДанныеСтроки.ПрименениеМатериала);
		СтруктураМатериала.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		СтруктураМатериала.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		СтруктураМатериала.Вставить("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
		СтруктураМатериала.Вставить("Количество", ДанныеСтроки.Количество);
		СтруктураМатериала.Вставить("Упаковка", ДанныеСтроки.Упаковка);
		СтруктураМатериала.Вставить("КлючСвязиСпецификация", ДанныеСтроки.КлючСвязи);
		
		Материалы.Добавить(СтруктураМатериала);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Выберите строки, для которых не используется автовыбор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Спецификация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Материалы", Материалы);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура КомандаНастроитьПодборНоменклатуры(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;

	Если НЕ ПроверитьЗаполнениеИзделия(НСтр("ru = 'Для настройки автовыбора материала необходимо указать изделие.'")) Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = Объект.ВыходныеИзделия[0].Номенклатура;
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтоподборНоменклатуры(
							ТекущиеДанные, 
							Объект.СоответствиеСвойств, 
							Номенклатура,
							НСтр("ru = 'Указывается в спецификации'"),
							ЭтаФорма,
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПотребление(Команда)
	
	//++ НЕ УТКА
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка таблицы ""Материалы и работы"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеИзделия(НСтр("ru = 'Для настройки потребления необходимо указать изделие.'")) Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = Объект.ВыходныеИзделия[0].Номенклатура;
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьПотреблениеНоменклатуры(
							ТекущиеДанные, 
							Номенклатура, 
							ЭтаФорма,
							НЕ ДоступностьРеквизитов);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСпецификацииИзделия(Команда)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание,РежимСпецификацииИзделия,АктивизироватьСпецификацию", 
							ТекущиеДанные.Номенклатура, Истина, Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ПрименениеНоменклатурыВПроизводстве", ПараметрыФормы,, ТекущиеДанные.Номенклатура);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутнымКартамЭтапов(Команда)
	
	//++ НЕ УТКА
	
	ТекстВопроса = НСтр("ru = 'Заполнить спецификацию по маршрутным картам этапов?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикУстановитьСтатусВРазработке", ЭтотОбъект);
		ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.РазблокированиеРеквизитов", 
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Закрыта"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнениеПринудительно() Тогда
		ТекстПредупреждения = НСтр("ru = 'Спецификацию можно сделать действующей.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Спецификация не может быть действующей.
										|Необходимо заполнить указанные реквизиты.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, НСтр("ru = 'Проверка спецификации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.МатериалыИУслуги.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.МатериалыИУслуги.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.МатериалыИУслуги.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеМеханизмы

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.МатериалыИУслуги.ВыделенныеСтроки, Объект.МатериалыИУслуги);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(ТекущаяСтрока);
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(ТекущаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыИУслугиВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИУслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы, 
			МассивЭлементов, 
			"Доступность", 
			НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки") И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыИУслугиВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИУслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", ДоступностьРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеНастройкиПроизводственногоПроцесса

&НаСервере
Процедура ПриИзмененииВидаПроизводственногоПроцесса()
	
	ПрочитатьДанныеПриОдноэтапномПроизводстве();
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(
		Объект.ВыходныеИзделия,
		Объект.МногоэтапныйПроизводственныйПроцесс, 
		Объект.Ссылка);
	
	ЗаполнитьИсточникПолученияПолуфабрикатаПриИзмененииВидаПроизводственногоПроцесса();
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	УправлениеВидимостьюДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеПриОдноэтапномПроизводстве()

	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Возврат
	КонецЕсли;
	
	ПроизводственныйПроцесс = Новый Структура;
	ПроизводственныйПроцесс.Вставить("Ссылка");
	ПроизводственныйПроцесс.Вставить("Наименование");
	ПроизводственныйПроцесс.Вставить("Подразделение");
	ПроизводственныйПроцесс.Вставить("ПроизводствоНаСтороне");
	ПроизводственныйПроцесс.Вставить("МаршрутнаяКарта");
	ПроизводственныйПроцесс.Вставить("КоэффициентМаршрутнойКарты");
	
	ЭтапПроизводства = Справочники.РесурсныеСпецификации.ПолучитьЭтапОдногоЭтапногоПроцесса(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		
		ДанныеЭтапа = Общегоназначения.ЗначенияРеквизитовОбъекта(ЭтапПроизводства, ПроизводственныйПроцесс);
		ЗаполнитьЗначенияСвойств(ПроизводственныйПроцесс, ДанныеЭтапа);
		
	КонецЕсли;
	
	ЗаполнитьПредставлениеЭтапа();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеЭтапа()
	
	Если ЗначениеЗаполнено(ПроизводственныйПроцесс.Ссылка) Тогда
		
		ПредставлениеЭтапа = ПроизводственныйПроцесс.Наименование;
		
		Если ПроизводственныйПроцесс.ПроизводствоНаСтороне Тогда
			
			ПредставлениеЭтапа = ПредставлениеЭтапа + ", " + НСтр("ru = 'производство на стороне'");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроизводственныйПроцесс.Подразделение) Тогда
			
			ПредставлениеЭтапа = ПредставлениеЭтапа
				+ " ("
				+ ПроизводственныйПроцесс.Подразделение
				+ ")";
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеЭтапа = НСтр("ru = 'Создать этап производства'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСпискеЭтапов()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтапыСписок, 
		"Владелец", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСпособаПолученияМатериала

&НаКлиенте
Процедура ЗаполнитьСпособПолученияМатериалаПоУмолчанию(ТекущиеДанные)
	
	ТекущиеДанные.СпособПолученияМатериала       = ПолучитьСпособПолученияМатериалаПоУмолчанию();
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию();
	
	ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(ТекущиеДанные)
	
	ТекущиеДанные.СпособПолученияМатериала       = ПолучитьСпособПолученияМатериалаПоУмолчанию();
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию();
	
	ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииПоУмолчанию(ТекущиеДанные)
	
	Если УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ТекущиеДанные) Тогда
		ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе");
	Иначе
		ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолуфабрикатПроизводимыйВПроцессе(ТекущиеДанные)
	
	Возврат УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(ТекущиеДанные); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолуфабрикатПроизводитсяНаЭтапе(ТекущиеДанные)
	
	Возврат УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводитсяНаЭтапе(ТекущиеДанные); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолуфабрикатПроизводитсяПоСпецификации(ТекущиеДанные)
	
	Возврат УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводитсяПоСпецификации(ТекущиеДанные); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПолученияМатериалаПоУмолчанию(ПроизводитсяВПроцессе = Ложь)
	
//++ НЕ УТКА
	Если ПроизводитсяВПроцессе Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации");
	Иначе
//-- НЕ УТКА
		Возврат ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать");
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИсточникПолученияПолуфабрикатаПоУмолчанию(СпособПолученияМатериала = Неопределено)
	
//++ НЕ УТКА
	Если СпособПолученияМатериала = Неопределено 
		ИЛИ СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации") Тогда
//-- НЕ УТКА
		
		Возврат ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
		
//++ НЕ УТКА
	Иначе
		
		Возврат ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		
	КонецЕсли;
//-- НЕ УТКА
	
КонецФункции

//++ НЕ УТКА

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСпособаПолученияМатериала(СписокВыбора)
	
	СписокВыбора.Очистить();
	
	ДоступенСпособПроизводитсяНаЭтапе =  Элементы.МатериалыИУслуги.ТекущиеДанные <> Неопределено 
										И
										 Элементы.МатериалыИУслуги.ТекущиеДанные.ЭтоПервыйЭтап = Ложь;
	
	Если ИспользуетсяПроизводство22 Тогда
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.Обеспечивать"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации"));
		
		Если ДоступенСпособПроизводитсяНаЭтапе Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе"));
		КонецЕсли;
		
	Иначе
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации"), НСтр("ru = 'по спецификации'"));
		
		Если ДоступенСпособПроизводитсяНаЭтапе Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе"), НСтр("ru = 'на этапе'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//-- НЕ УТКА

&НаСервере
Функция ДоступноПроизводствоВПроцессеДляПереработки()
	
	Возврат ИспользуетсяПроизводство22;
	
КонецФункции

&НаСервере
Функция НеобходимоОтменитьПроизводствоВПроцессеВСтроке(ТекущаяСтрока)
	
	Возврат НЕ ИспользуетсяПроизводство22 И ТекущаяСтрока.ПроизводствоНаСтороне И ТекущаяСтрока.ПроизводитсяВПроцессе;
	
КонецФункции

&НаСервере
Процедура ОтменитьПроизводствоВПроцессеВСтроке(ТекущаяСтрока)
	
	ТекущаяСтрока.ПроизводитсяВПроцессе = Ложь;
	ТекущаяСтрока.СтатьяКалькуляции     = Справочники.СтатьиКалькуляции.ПустаяСсылка();
	
	ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	СтатусДействующейСпецификации = Перечисления.СтатусыСпецификаций.Действует;
	СтатусСпецификацииВРазработке = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	ВидПроизводственногоПроцесса = Число(Объект.МногоэтапныйПроизводственныйПроцесс);
	
	ПрочитатьДанныеПриОдноэтапномПроизводстве();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	Элементы.ГруппаОписание.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Описание);
	
	УправлениеВидимостьюДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Стандартное оформление номенклатуры
	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
																			 
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
	#КонецОбласти

	// Жирный шрифт для первой строки изделий
	#Область ЖирнымПерваяСтрока
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	#КонецОбласти

	// Текст <последний этап> или <первый этап>
	#Область ТекстПоследнийЭтапИлиПервыйЭтап
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<последний этап>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыЭтапРедактирование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ЭтапРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<первый этап>'"));
	#КонецОбласти

	// Текст <любая характеристика>
	#Область ТекстЛюбаяХарактеристика
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>'"));
	#КонецОбласти
	
	// Запрет редактирования флага "Регистрировать серии"
	#Область СерииИспользуются
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Прочее оформление
	#Область Прочее

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоВерсииПодсистемыПроизводство()
	
	// Оформление таблицы "Выходные изделия"
	#Область ВыходныеИзделия
	
	// В новой концепции управления производством выпуск продукции 
	// по рассчитываемой стоимости возможен только на последнем этапе
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтапРедактирование.Имя);
	
	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыВВыходныхИзделияхЗаполнены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Оформление таблицы "Материалы и работы"
	#Область МатериалыИУслуги
	
	#Область НоваяКонцепцияУправленияПроизводства
	
	// поле "Источник получения полуфабриката" недоступно, если выбран способ получения материала
	//  "Обеспечивать" или "Обеспечивать обособлено"
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать);
	СписокОтбора.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно);
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// поле "Источник получения полуфабриката" может быть не заполнено 
	//  для полуфабрикатов производимых в процессе, при использовании спецификаций "по умолчанию" 
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать);
	СписокОтбора.Добавить(Перечисления.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно);
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора11 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора11.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора11.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство21");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора11.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// поле "Источник получения полуфабриката" содержит текст <основная спецификация>, если выбран способ получения материала
	//  "Производится по спецификации" и незаполнена спецификация
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство21");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<основная спецификация>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти
	
	#Область СтараяКонцепцияУправленияПроизводства
	
	// для одноэтапной спецификации и для первых этапов способ получения полуфабриката 
	//  "производится в процессе на этапе" недоступен
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МногоэтапныйПроизводственныйПроцесс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЭтоПервыйЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// определяем текст способа получения полуфабриката "на этапе" или "по спецификации"
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", " " + НСтр("ru = 'на этапе'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", " " + НСтр("ru = 'по спецификации'"));
	
	// если материал не производится в процессе поля "Способ получения полуфабриката" 
	//	и "Источник получения полуфабриката" недоступны

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	// отметка незаполненного для поля "Источник получения полуфабриката"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводство22");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// если производство на стороне, то производство в процессе недоступно
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПроизводитсяВПроцессе.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия, СтруктураДействий);
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы, СтруктураДействий);
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, СтруктураДействий);
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтоподбораНоменклатуры(Объект.МатериалыИУслуги);
	//-- НЕ УТКА
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(
					Объект.ВыходныеИзделия, 
					Объект.МногоэтапныйПроизводственныйПроцесс, 
					Объект.Ссылка);
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	ЗаполнитьПредставлениеСтатейКалькуляцииВзносов(ЭтаФорма);
	
	РассчитатьЭтапыВВыходныхИзделияхЗаполнены();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьПриСоздании()
	
	//++ НЕ УТКА
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.РазрешениеНаЗаменуМатериалов) Тогда
		Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПрименениеНоменклатурыВПроизводстве) Тогда
		Элементы.ВыходныеИзделияОткрытьСпецификацииИзделия.Видимость = Ложь;
	КонецЕсли; 
	//-- НЕ УТКА
	
	ЭтоУП = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
		
	Элементы.ГруппаПараметрыПроизводственногоПроцесса.Видимость = ЭтоУП;
	
	Элементы.ВыходныеИзделияТребуетсяУказыватьСерии.Видимость  = ЭтоУП;
	Элементы.ВозвратныеОтходыТребуетсяУказыватьСерии.Видимость = ЭтоУП И НЕ ИспользуетсяПроизводство21;
	Элементы.МатериалыИУслугиТребуетсяУказыватьСерии.Видимость = ЭтоУП;
	
	Элементы.МатериалыИУслугиГруппаСпособПолучения.Видимость = ЭтоУП;
	
	Элементы.МатериалыИУслугиНастроитьПодборНоменклатуры.Видимость = ЭтоУП;
	Элементы.МатериалыИУслугиНастроитьПотребление.Видимость = ЭтоУП;
	Элементы.МатериалыИУслугиВвестиРазрешениеНаЗамену.Видимость = ЭтоУП;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюДоступностью(Форма, Действие = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВсеДействия = ПустаяСтрока(Действие);
	
	Если ВсеДействия Тогда
	
		// Панель "Материалы и работы"
		
		Если Форма.ИспользуетсяПроизводство22 Тогда
			Элементы.МатериалыИУслугиГруппаСпособПолучения.Заголовок = НСтр("ru = 'Способ получения материала'");
		Иначе
			Элементы.МатериалыИУслугиГруппаСпособПолучения.Заголовок = НСтр("ru = 'Производится в процессе'");
		КонецЕсли;
		
		Элементы.МатериалыИУслугиСпособПолученияМатериала.Видимость = Форма.ИспользуетсяПроизводство22;
		
		Элементы.МатериалыИУслугиГруппаПроизводитсяВПроцессе.Видимость  = НЕ Форма.ИспользуетсяПроизводство22;
		Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Видимость = НЕ Форма.ИспользуетсяПроизводство22;
		
		// Панель "Производственный процесс"
		
		Элементы.ОптимальнаяПартияЗапуска.Видимость                    = Форма.ИспользуетсяПроизводство22;
		Элементы.ОграниченСрокПролеживанияВыходныхИзделий.Видимость    = Форма.ИспользуетсяПроизводство22;
		Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = Форма.ИспользуетсяПроизводство22;
		
		Элементы.ГруппаОптимальноеКоличествоПередачиМеждуЭтапамиМногоэтапный.Видимость = НЕ Форма.ИспользуетсяПроизводство22;
		
		Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
			
			Элементы.ВыходныеИзделияЭтапРедактирование.Видимость  = Истина;
			Элементы.ВозвратныеОтходыЭтапРедактирование.Видимость = Истина;
			Элементы.МатериалыИУслугиЭтапРедактирование.Видимость = Истина;
			Элементы.ТрудозатратыЭтапРедактирование.Видимость     = Истина;
			
		Иначе
			
			Элементы.ВыходныеИзделияЭтапРедактирование.Видимость  = Ложь;
			Элементы.ВозвратныеОтходыЭтапРедактирование.Видимость = Ложь;
			Элементы.МатериалыИУслугиЭтапРедактирование.Видимость = Ложь;
			Элементы.ТрудозатратыЭтапРедактирование.Видимость     = Ложь;
			
		КонецЕсли;
		
		Если Форма.ВидПроизводственногоПроцесса = 0 Тогда
			Элементы.ГруппаОписаниеПроизводственногоПроцессаСтраницы.ТекущаяСтраница = Элементы.СтраницаОдноэтапныйПроизводственныйПроцесс;
		Иначе
			Элементы.ГруппаОписаниеПроизводственногоПроцессаСтраницы.ТекущаяСтраница = Элементы.СтраницаМногоэтапныйПроизводственныйПроцесс;
		КонецЕсли;
		
		Элементы.ФормаЗаполнитьПоМаршрутнымКартамЭтапов.Видимость = Ложь;
//++ НЕ УТКА		
		Элементы.ФормаЗаполнитьПоМаршрутнымКартамЭтапов.Видимость = Истина;
//-- НЕ УТКА
		
	КонецЕсли;
	
//++ НЕ УТКА

	Если ВсеДействия ИЛИ Действие = "НастройкаМаксимальныйСрокПролеживания" Тогда
		
		Элементы.МаксимальныйСрокПролеживанияВыходныхИзделий.Видимость = Объект.ОграниченСрокПролеживанияВыходныхИзделий;
		
	КонецЕсли;
	
//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(
			ТабличнаяЧасть,
			МногоэтапныйПроизводственныйПроцесс,
			Ссылка)

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается = 0;
	КонецЦикла;
	
	Если МногоэтапныйПроизводственныйПроцесс Тогда
		СписокЭтапов = Новый Массив;
		КоличествоИзделийНевыбранныхЭтапов = 0;
		Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если СписокЭтапов.Найти(СтрокаТаблицы.ЭтапРедактирование) = Неопределено Тогда
				СписокЭтапов.Добавить(СтрокаТаблицы.ЭтапРедактирование);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭтапРедактирование) Тогда
				
				КоличествоИзделийНевыбранныхЭтапов = КоличествоИзделийНевыбранныхЭтапов + 1;
			КонецЕсли; 
		КонецЦикла;
		
		КоличествоИзделийПоследнегоЭтапа = 0;
		ПоследниеЭтапы = ПолучитьПоследниеЭтапы(Ссылка);
		Для каждого Этап Из ПоследниеЭтапы Цикл
			СписокСтрок = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЭтапРедактирование", Этап));
			КоличествоИзделийПоследнегоЭтапа = КоличествоИзделийПоследнегоЭтапа + СписокСтрок.Количество();
		КонецЦикла; 
		
		Для каждого Этап Из СписокЭтапов Цикл
			СписокСтрок = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЭтапРедактирование", Этап));
			Для каждого СтрокаТаблицы Из СписокСтрок Цикл
				СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается = СписокСтрок.Количество();
				
				// Добавим количество последних этапов
				Если НЕ ЗначениеЗаполнено(Этап) Тогда
					СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается = 
							СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается + КоличествоИзделийПоследнегоЭтапа;
							
				ИначеЕсли ПоследниеЭтапы.Найти(Этап) <> Неопределено Тогда
					СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается = 
							СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается + КоличествоИзделийНевыбранныхЭтапов;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.КоличествоИзделийСТипомСтоимостиРассчитывается = ТабличнаяЧасть.Количество();
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследниеЭтапы(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Владелец
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|	И ЭтапыПроизводства.НомерСледующегоЭтапа = 0";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбработатьИзменениеЭтапаПроизводства(Источник)
	
	ОбработатьИзменениеЭтапаВТаблицеМатериалыИУслуги(Источник);
	
	ПрочитатьДанныеПриОдноэтапномПроизводстве();
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается(Объект.ВыходныеИзделия,
		Объект.МногоэтапныйПроизводственныйПроцесс,
		Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСлужебныеРеквизитыЭтапа(Спецификация, Этап)
	
	Результат = Новый Структура;
	Результат.Вставить("ПроизводствоНаСтороне");
	Результат.Вставить("ЭтоПервыйЭтап");
	
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(Этап);
	
	ЗаполнитьЗначенияСвойств(Результат, ПолучитьСлужебныеРеквизитыЭтапов(Спецификация, МассивЭтапов)[0]);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСлужебныеРеквизитыЭтапов(Владелец, МассивЭтапов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Если МассивЭтапов = Неопределено Тогда
		
		ПолучитьПервыеЭтапы = Истина;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЭтапыПроизводства.Ссылка                КАК Этап,
			|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
			|	(ЭтапыПроизводства.НомерЭтапа = 1)      КАК ЭтоПервыйЭтап
			|ИЗ
			|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|ГДЕ
			|	ЭтапыПроизводства.Владелец = &Владелец";
		
	Иначе
		
		ПолучитьПервыеЭтапы = МассивЭтапов.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка()) <> Неопределено;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЭтапыПроизводства.Ссылка                КАК Этап,
			|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
			|	(ЭтапыПроизводства.НомерЭтапа = 1)      КАК ЭтоПервыйЭтап
			|ИЗ
			|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|ГДЕ
			|	ЭтапыПроизводства.Владелец = &Владелец
			|	И ЭтапыПроизводства.Ссылка В (&МассивЭтапов)";
			
		Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
		
	КонецЕсли;
	
	Если ПолучитьПервыеЭтапы Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТПервыйЭтап.Этап                            КАК Этап,
			|	МАКСИМУМ(ТПервыйЭтап.ПроизводствоНаСтороне) КАК ПроизводствоНаСтороне,
			|	ИСТИНА                                      КАК ЭтоПервыйЭтап
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
			|		МИНИМУМ(ЭтапыПроизводства.ПроизводствоНаСтороне)    КАК ПроизводствоНаСтороне
			|	ИЗ
			|		Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|	ГДЕ
			|		ЭтапыПроизводства.Владелец = &Владелец
			|		И ЭтапыПроизводства.НомерЭтапа = 1
			|		И НЕ ЭтапыПроизводства.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка),
			|		ЛОЖЬ) КАК ТПервыйЭтап
			|
			|СГРУППИРОВАТЬ ПО
			|	ТПервыйЭтап.Этап";
			
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеМатериалыИУслуги(СтрокаТабличнойЧасти)
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, 
			ПолучитьСлужебныеРеквизитыЭтапа(Объект.Ссылка, СтрокаТабличнойЧасти.ЭтапРедактирование));
		
	Иначе
		
		СтрокаТабличнойЧасти.ЭтоПервыйЭтап         = Истина;
		СтрокаТабличнойЧасти.ПроизводствоНаСтороне = ПроизводственныйПроцесс.ПроизводствоНаСтороне;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги()
	
	ПараметрыОтбора = Новый Структура("Этап");
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
	
		РеквизитыЭтапов = ПолучитьСлужебныеРеквизитыЭтапов(Объект.Ссылка);
		
		Для Каждого Строка Из Объект.МатериалыИУслуги Цикл
			
			ПараметрыОтбора.Этап = Строка.ЭтапРедактирование;
			
			ЗаполнитьЗначенияСвойств(Строка, РеквизитыЭтапов.НайтиСтроки(ПараметрыОтбора)[0]);
			
		КонецЦикла;
		
	Иначе
		
		РеквизитыЭтапа = Новый Структура;
		РеквизитыЭтапа.Вставить("ЭтоПервыйЭтап", Истина);
		РеквизитыЭтапа.Вставить("ПроизводствоНаСтороне", ПроизводственныйПроцесс.ПроизводствоНаСтороне);
			
		Для Каждого Строка Из Объект.МатериалыИУслуги Цикл
			ЗаполнитьЗначенияСвойств(Строка, РеквизитыЭтапа);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЭтапыВВыходныхИзделияхЗаполнены()
	
	ЭтапыВВыходныхИзделияхЗаполнены = Ложь;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если ЗначениеЗаполнено(Строка.ЭтапРедактирование) Тогда
			
			ЭтапыВВыходныхИзделияхЗаполнены = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭтапаВТаблицеМатериалыИУслуги(Источник)
	
	МассивЭтапов = Новый Массив;
	
	МассивЭтапов.Добавить(Источник);
	МассивЭтапов.Добавить(Справочники.ЭтапыПроизводства.ПустаяСсылка());
	
	ПараметрыОтбора = Новый Структура("ЭтапРедактирование");
	
	Этапы = ПолучитьСлужебныеРеквизитыЭтапов(Объект.Ссылка, МассивЭтапов);
	
	Для Каждого РеквизитыЭтапа Из Этапы Цикл
		
		ПараметрыОтбора.ЭтапРедактирование = РеквизитыЭтапа.Этап;
		
		Для Каждого Строка Из Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
			
			ЗаполнитьЗначенияСвойств(Строка, РеквизитыЭтапа);
			
			Если НеобходимоОтменитьПроизводствоВПроцессеВСтроке(Строка) Тогда
				
				ОтменитьПроизводствоВПроцессеВСтроке(Строка);
				
			КонецЕсли;
			
			Если Строка.ЭтоПервыйЭтап И ПолуфабрикатПроизводитсяНаЭтапе(Строка) Тогда
				
				ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭтапаВСтрокеМатериалыИУслуги()
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПолучитьСлужебныеРеквизитыЭтапа(Объект.Ссылка, ТекущиеДанные.ЭтапРедактирование));
	
	Если НеобходимоОтменитьПроизводствоВПроцессеВСтроке(ТекущиеДанные) Тогда
		
		ОтменитьПроизводствоВПроцессеВСтроке(ТекущиеДанные);
		
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоПервыйЭтап И ПолуфабрикатПроизводитсяНаЭтапе(ТекущиеДанные) Тогда
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (Объект.Статус = Перечисления.СтатусыСпецификаций.Закрыта);
	
	МассивЭлементов = Справочники.РесурсныеСпецификации.ПолучитьБлокируемыеРеквизитыОбъекта();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("НачалоДействия");
	МассивЭлементов.Добавить("КонецДействия");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоЭтапам");
	МассивЭлементов.Добавить("ПечатьМаршрутнойКартыПоМаршрутнымКартам");
	МассивЭлементов.Добавить("Ответственный");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", СпецификацияЗакрыта);
	
	// Элементы доступные только в действующей спецификации
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("МатериалыИУслугиВвестиРазрешениеНаЗамену");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ДоступностьРеквизитов);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПринудительно()

	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Статус = Перечисления.СтатусыСпецификаций.Действует;
	
	Возврат СправочникОбъект.ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);
	Элементы.УстановитьСтатусаЗакрыта.Доступность    = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Закрыта);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыСпецификаций.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыСпецификаций.Действует);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)

	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя изменить статус помеченной на удаление спецификации.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	СтатусДоИзменения = Объект.Статус;
	
	УстановитьНовыйСтатусИЗаписатьНаСервере(Статус);
	
	Если НЕ СтатусДоИзменения = Объект.Статус Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйСтатусИЗаписатьНаСервере(Знач Статус)
	
	ТекущийСтатус = Объект.Статус;
	Объект.Статус = Статус;
	
	СтатусИзменен = Ложь;
	
	Попытка
		
		СтатусИзменен = Записать();
		
	Исключение
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Не удалось изменить статус спецификации'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если НЕ СтатусИзменен Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьЭтап(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = СтатусДействующейСпецификации Тогда
		Объект.Статус = СтатусСпецификацииВРазработке;
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
			
			Элементы.ЭтапыСписок.ДобавитьСтроку();
			
		Иначе
			
			СоздатьЭтапОдноэтапногоПроцесса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановитьСтатусВРазработке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.ВРазработке"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИУслуги.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(ТекущаяСтрока);
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(ТекущаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЭтапаВыпуска(ТекущиеДанные, ВыбранноеЗначение)
	
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ВыбранноеЗначение.Этап;
	
	Если ВыбранноеЗначение.Свойство("ДобавитьПромежуточныйВыпускПриВыборе")
		И ВыбранноеЗначение.ДобавитьПромежуточныйВыпускПриВыборе Тогда
			
		ТекстВопроса = НСтр("ru = 'Добавить побочный выпуск?'");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ПараметрыОповещения.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		
		ПараметрыОповещения.Вставить("Артикул", ТекущиеДанные.Артикул);
		ПараметрыОповещения.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуются);
		
		ПараметрыОповещения.Вставить("Упаковка", ТекущиеДанные.Упаковка);
		ПараметрыОповещения.Вставить("ЭтапРедактирование", ВыбранноеЗначение.Этап);
		ПараметрыОповещения.Вставить("СтатьяКалькуляции", ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЭтапаВыпускаЗавершение", ЭтаФорма, ПараметрыОповещения);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЭтапаВыпускаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПромежуточныйВыпуск = Объект.ВозвратныеОтходы.Добавить();
	
	ЗаполнитьЗначенияСвойств(ПромежуточныйВыпуск, ДополнительныеПараметры);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ПромежуточныйВыпуск.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ПромежуточныйВыпуск.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакСерииИспользуются", Новый Структура("Номенклатура", "СерииИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ПромежуточныйВыпуск, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия,ВозвратныеОтходы", 
		ПромежуточныйВыпуск.Номенклатура, 
		ПромежуточныйВыпуск.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыВыбораЭтапаВыпуска()
	
	АдресХранилища = Неопределено;
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЭтапРедактирование) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		
		Если ТекущиеДанные.ХарактеристикиИспользуются Тогда
			
			ПараметрыОтбора.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(Таблица.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК Этап,
			|	Таблица.Количество КАК Количество
			|ПОМЕСТИТЬ ВТТаблицаПолуфабрикатов
			|ИЗ
			|	&ТаблицаПолуфабрикатов КАК Таблица
			|ГДЕ
			|	Таблица.ЭтапРедактирование <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыПроизводства.Ссылка КАК Этап,
			|	ЭтапыПроизводства.Наименование КАК НаименованиеЭтапа,
			|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
			|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
			|	ЭтапыПроизводства.Подразделение КАК Подразделение,
			|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
			|	ВЫБОР
			|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление
			|		ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление
			|	КОНЕЦ КАК УпаковкаПредставление,
			|	ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) / ВЫБОР
			|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Количество,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) >= &Количество
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК КоличествоДостаточно,
			|	ВЫБОР
			|		КОГДА ТаблицаПолуфабрикатов.Количество ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ДобавитьПромежуточныйВыпускПриВыборе
			|ИЗ
			|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПолуфабрикатов КАК ТаблицаПолуфабрикатов
			|		ПО ЭтапыПроизводства.Ссылка = ТаблицаПолуфабрикатов.Этап
			|ГДЕ
			|	ЭтапыПроизводства.Ссылка В (&Предшественники)
			|	И НЕ ЭтапыПроизводства.ПометкаУдаления
			|	
			|	И (
			|		&ДоступноПроизводствоВПроцессеДляПереработки 
			|		ИЛИ НЕ &ДоступноПроизводствоВПроцессеДляПереработки И НЕ ЭтапыПроизводства.ПроизводствоНаСтороне
			|	)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерЭтапа");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
																					"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		// Предшественники
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.ЭтапРедактирование);
		Предшественники = Справочники.ЭтапыПроизводства.Предшественники(МассивСсылок)[ТекущиеДанные.ЭтапРедактирование];
	
		Запрос.УстановитьПараметр("Предшественники", Предшественники);
		
		// ТаблицаПолуфабрикатов
		ТаблицаПолуфабрикатов = Объект.ВозвратныеОтходы.Выгрузить(
			ПараметрыОтбора,
			"ЭтапРедактирование, Количество");
		ТаблицаПолуфабрикатов.Свернуть("ЭтапРедактирование", "Количество");
		
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", ТаблицаПолуфабрикатов);
	
		// Полуфабрикат
		Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("Упаковка",     ТекущиеДанные.Упаковка);
		Запрос.УстановитьПараметр("Количество",   ТекущиеДанные.Количество);
		
		Запрос.УстановитьПараметр("ДоступноПроизводствоВПроцессеДляПереработки", ДоступноПроизводствоВПроцессеДляПереработки());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			АдресХранилища = ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить(), УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыбораЭтапа = Новый Структура;
	ПараметрыВыбораЭтапа.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыВыбораЭтапа.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыВыбораЭтапа.Вставить("АдресХранилища", АдресХранилища);
	
	Возврат ПараметрыВыбораЭтапа;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсточникПолученияПолуфабрикатаПриИзмененииВидаПроизводственногоПроцесса()
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПроизводитсяВПроцессе", Истина);
	ПараметрыОтбора.Вставить("СпособПолученияМатериала", 
		Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
	
	Для Каждого Строка Из Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
		
		ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПередДобавлениемЭтапа()
	
	Если Объект.Статус = СтатусДействующейСпецификации Тогда
		
		ТекстВопроса = НСтр("ru = 'Ввод этапов возможен только после записи спецификации со статусом ""В разработке"".
			|Изменить статус и записать спецификацию?'");
		
	Иначе
									
		ТекстВопроса = НСтр("ru = 'Ввод этапов возможен только после записи спецификации.
			|Записать спецификацию?'");
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьЭтап", ЭтаФорма);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭтапОдноэтапногоПроцесса()
	
	ЗначенияЗаполнения = Новый Структура("Владелец", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФормуОдноэтапногоПроцесса(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОдноэтапногоПроцесса(ПараметрыФормы)
	
	ПараметрыФормы.Вставить("ОдноэтапныйПроизводственныйПроцесс");
	
	ОткрытьФорму("Справочник.ЭтапыПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Функция ПроверитьЗаполнениеИзделия(ТекстСообщения)

	Если Объект.ВыходныеИзделия.Количество() = 0  Тогда
		Поле = "Объект.ВыходныеИзделия";
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВыходныеИзделия[0].Номенклатура) Тогда
		Поле = "Объект.ВыходныеИзделия[0].Номенклатура";
	Иначе
		Возврат Истина
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоМаршрутнымКартамЭтаповЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоМаршрутнымКартамЭтапов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМаршрутнымКартамЭтапов()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		
		ТекстЗапросаСписокЭтапов =
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Этап,
		|	ЭтапыПроизводства.МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводства.КоэффициентМаршрутнойКарты = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЭтапыПроизводства.КоэффициентМаршрутнойКарты
		|	КОНЕЦ КАК КоэффициентМаршрутнойКарты,
		|	ЭтапыПроизводства.НомерЭтапа,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводства.НомерЭтапа = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПервыйЭтап,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводства.НомерСледующегоЭтапа = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПоследнийЭтап
		|ПОМЕСТИТЬ СписокЭтапов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
					   
		Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
		
	Иначе	
		
		ТекстЗапросаСписокЭтапов = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Этап,
		|	&МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	&КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
		|	1 КАК НомерЭтапа,
		|	ИСТИНА КАК ЭтоПервыйЭтап,
		|	ИСТИНА КАК ЭтоПоследнийЭтап
		|ПОМЕСТИТЬ СписокЭтапов";
					   
		Запрос.УстановитьПараметр("МаршрутнаяКарта", ПроизводственныйПроцесс.МаршрутнаяКарта);
		
		Коэффициент = ПроизводственныйПроцесс.КоэффициентМаршрутнойКарты;
		Коэффициент = ?(Коэффициент = 0, 1, Коэффициент);
		Запрос.УстановитьПараметр("КоэффициентМаршрутнойКарты", Коэффициент);
		
	КонецЕсли;
	
	СтруктураДанных = Неопределено;
	ПолучитьДанныеМаршрутнойКарты(Запрос, ТекстЗапросаСписокЭтапов, СтруктураДанных);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Если Объект.МногоэтапныйПроизводственныйПроцесс Тогда
		
		// Нужно удалить строки где для этапа указана МК, а остальные оставить
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Этап,
		|	ЭтапыПроизводства.МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	ЭтапыПроизводства.МаршрутнаяКарта.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
		|	ЭтапыПроизводства.МаршрутнаяКарта.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
		|	ЭтапыПроизводства.МаршрутнаяКарта.ИспользоватьТрудозатраты КАК ИспользоватьТрудозатраты,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводства.НомерЭтапа = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПервыйЭтап,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводства.НомерСледующегоЭтапа = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПоследнийЭтап
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И ЭтапыПроизводства.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
		ТаблицаЭтапы = Запрос.Выполнить().Выгрузить();
		
		УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.ВыходныеИзделия, ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
		УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.ВозвратныеОтходы, ТаблицаЭтапы, "ЭтоПоследнийЭтап", "ИспользоватьВыходныеИзделия");
		УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.МатериалыИУслуги, ТаблицаЭтапы, "ЭтоПервыйЭтап", "ИспользоватьМатериалы");
		УдалитьСтрокиГдеДляЭтаповУказаныМК(Объект.Трудозатраты, ТаблицаЭтапы, "ЭтоПервыйЭтап", "ИспользоватьТрудозатраты");
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого ДанныеСтроки Из Объект.СоответствиеСвойств Цикл
			СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязиМатериал);
   			СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(ДанныеСтроки);
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого ДанныеСтроки Из СтрокиКУдалению Цикл
			Объект.СоответствиеСвойств.Удалить(ДанныеСтроки);
		КонецЦикла; 
		
	ИначеЕсли НЕ ПроизводственныйПроцесс.МаршрутнаяКарта.Пустая() Тогда
		
		СоставМаршрутнойКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
											ПроизводственныйПроцесс.МаршрутнаяКарта, 
											"ИспользоватьВыходныеИзделия,ИспользоватьМатериалы,ИспользоватьТрудозатраты");
														
		Если СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия Тогда
			Объект.ВыходныеИзделия.Очистить();
			Объект.ВозвратныеОтходы.Очистить();
		КонецЕсли; 
		Если СоставМаршрутнойКарты.ИспользоватьМатериалы Тогда
			Объект.МатериалыИУслуги.Очистить();
			Объект.СоответствиеСвойств.Очистить();
		КонецЕсли; 
		Если СоставМаршрутнойКарты.ИспользоватьТрудозатраты Тогда
			Объект.Трудозатраты.Очистить();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если СтруктураДанных.ВыходныеИзделия <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВыходныеИзделия.Добавить(), ЭлементКоллекции);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.ВозвратныеОтходы <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВозвратныеОтходы.Добавить(), ЭлементКоллекции);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.МатериалыИУслуги <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.МатериалыИУслуги Цикл
			НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			ЗаполнитьСпособПолученияМатериалаПоУмолчаниюНаСервере(НоваяСтрока);
		КонецЦикла; 
		Для Каждого ЭлементКоллекции Из СтруктураДанных.СоответствиеСвойств Цикл
			ЗаполнитьЗначенияСвойств(Объект.СоответствиеСвойств.Добавить(), ЭлементКоллекции);
		КонецЦикла; 
	КонецЕсли;
	
	Если СтруктураДанных.Трудозатраты <> Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураДанных.Трудозатраты Цикл
			ЗаполнитьЗначенияСвойств(Объект.Трудозатраты.Добавить(), ЭлементКоллекции);
		КонецЦикла; 
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиГдеДляЭтаповУказаныМК(Таблица, ТаблицаЭтапы, ПолеАвтовыбораЭтапа, ИмяРеквизитаСостава)

	СтрокиКУдалению = Новый Массив;
	Для каждого ДанныеСтроки Из Таблица Цикл
		
		Если НЕ ДанныеСтроки.ЭтапРедактирование.Пустая() Тогда
			СтрокаЭтап = ТаблицаЭтапы.Найти(ДанныеСтроки.ЭтапРедактирование, "Этап");
		Иначе
			СтрокаЭтап = ТаблицаЭтапы.Найти(Истина, ПолеАвтовыбораЭтапа);
		КонецЕсли;
		
		Если СтрокаЭтап <> Неопределено 
			И НЕ СтрокаЭтап.МаршрутнаяКарта.Пустая() 
			И СтрокаЭтап[ИмяРеквизитаСостава] Тогда
			
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
		
	КонецЦикла; 

	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		Таблица.Удалить(ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеМаршрутнойКарты(Запрос, ТекстЗапросаСписокЭтапов, СтруктураДанных, ВключитьВложенныеМК = Истина)

	Если СтруктураДанных = Неопределено Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ВыходныеИзделия",     Неопределено);
		СтруктураДанных.Вставить("ВозвратныеОтходы",    Неопределено);
		СтруктураДанных.Вставить("МатериалыИУслуги",    Неопределено);
		СтруктураДанных.Вставить("СоответствиеСвойств", Неопределено);
		СтруктураДанных.Вставить("Трудозатраты",        Неопределено);
	КонецЕсли;
	
	ИндексРезультатаЗапроса = 0;
	ТекстЗапроса = "";
	
	Если ТекстЗапросаСписокЭтапов <> Неопределено Тогда
		ИндексРезультатаЗапроса = 1;
		
		ТекстЗапроса = ТекстЗапросаСписокЭтапов 
				+ "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	СписокЭтапов.Этап,
	|	СписокЭтапов.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокЭтапов.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	СписокЭтапов.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты
	|ПОМЕСТИТЬ СписокМаршрутныхКарт
	|ИЗ
	|	СписокЭтапов КАК СписокЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ВыходныеИзделия
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта,
	|	МаршрутныеКартыВыходныеИзделия.Номенклатура,
	|	МаршрутныеКартыВыходныеИзделия.Характеристика,
	|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВыходныеИзделия.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|	МаршрутныеКартыВыходныеИзделия.Упаковка,
	|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
	|		ПО (МаршрутныеКартыВыходныеИзделия.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ВозвратныеОтходы
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СписокМаршрутныхКарт.МаршрутнаяКарта,
	|	МаршрутныеКартыВозвратныеОтходы.Номенклатура,
	|	МаршрутныеКартыВозвратныеОтходы.Характеристика,
	|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|	МаршрутныеКартыВозвратныеОтходы.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|	МаршрутныеКартыВозвратныеОтходы.Упаковка,
	|	МаршрутныеКартыВозвратныеОтходы.СтатьяКалькуляции,
	|	МаршрутныеКартыВозвратныеОтходы.ОписаниеИзделия
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
	|		ПО (МаршрутныеКартыВозвратныеОтходы.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьВыходныеИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. МатериалыИУслуги
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап,
	|		СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|		МаршрутныеКартыМатериалыИУслуги.Номенклатура,
	|		МаршрутныеКартыМатериалыИУслуги.Характеристика,
	|		МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоличествоУпаковок,
	|		МаршрутныеКартыМатериалыИУслуги.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|		МаршрутныеКартыМатериалыИУслуги.Упаковка,
	|		МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции,
	|		МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
	|		МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
	|		МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
	|		МаршрутныеКартыМатериалыИУслуги.ОтборСвойство,
	|		МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства,
	|		МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
	|	ВЫБОР
	|		КОГДА МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала = """"
	|			ТОГДА МаршрутныеКартыМатериалыИУслуги.Операция
	|		ИНАЧЕ МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала
	|	КОНЕЦ КАК ПрименениеМатериала,
	|		МаршрутныеКартыМатериалыИУслуги.КлючСвязи
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
	|		ПО (МаршрутныеКартыМатериалыИУслуги.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. Трудозатраты
	|ВЫБРАТЬ
	|		СписокМаршрутныхКарт.Этап,
	|		СписокМаршрутныхКарт.Этап КАК ЭтапРедактирование,
	|		МаршрутныеКартыТрудозатраты.ВидРабот,
	|		МаршрутныеКартыТрудозатраты.Количество * СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК Количество,
	|		МаршрутныеКартыТрудозатраты.СтатьяКалькуляции
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.Трудозатраты КАК МаршрутныеКартыТрудозатраты
	|		ПО (МаршрутныеКартыТрудозатраты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5. СоответствиеСвойств
	|ВЫБРАТЬ
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоМатериала,
	|		МаршрутныеКартыСоответствиеСвойств.СвойствоПродукции,
	|		МаршрутныеКартыСоответствиеСвойств.КлючСвязиМатериал
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.СоответствиеСвойств КАК МаршрутныеКартыСоответствиеСвойств
	|		ПО (МаршрутныеКартыСоответствиеСвойств.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|ГДЕ
	|	МаршрутныеКарты.ИспользоватьМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6.
	|УНИЧТОЖИТЬ СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7. Тех. операции
	|ВЫБРАТЬ
	|	СписокМаршрутныхКарт.Этап,
	|	СписокМаршрутныхКарт.ЭтоПервыйЭтап КАК ЭтоПервыйЭтап,
	|	СписокМаршрутныхКарт.ЭтоПоследнийЭтап КАК ЭтоПоследнийЭтап,
	|	СпрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта,
	|	СписокМаршрутныхКарт.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|	СпрОперации.Наименование КАК НаименованиеОперации
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК СпрОперации
	|		ПО (СпрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
	|			И СпрОперации.СодержитВложенныйМаршрут
	|ГДЕ 
	|	НЕ СпрОперации.Ссылка.ПометкаУдаления
	|	И МаршрутныеКарты.ИспользоватьОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[0] - СписокМаршрутныхКарт
	// Результат[1] - ВыходныеИзделия
	// Результат[2] - ВозвратныеОтходы
	// Результат[3] - МатериалыИУслуги
	// Результат[4] - Трудозатраты
	// Результат[5] - СоответствиеСвойств
	// Результат[7] - СписокЭтапов по данным вложенных МК, который будет использоваться на следующей итерации выполнения процедуры
	
	Если Результат[1 + ИндексРезультатаЗапроса].Пустой() И Результат[3 + ИндексРезультатаЗапроса].Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьДанныеВТаблицуСтруктурыДанных(Результат[1 + ИндексРезультатаЗапроса].Выгрузить(), СтруктураДанных.ВыходныеИзделия);
	ДобавитьДанныеВТаблицуСтруктурыДанных(Результат[2 + ИндексРезультатаЗапроса].Выгрузить(), СтруктураДанных.ВозвратныеОтходы);
	ДобавитьДанныеВТаблицуСтруктурыДанных(Результат[4 + ИндексРезультатаЗапроса].Выгрузить(), СтруктураДанных.Трудозатраты);
	ДобавитьДанныеВТаблицуСтруктурыДанных(Результат[3 + ИндексРезультатаЗапроса].Выгрузить(), СтруктураДанных.МатериалыИУслуги);
	ДобавитьДанныеВТаблицуСтруктурыДанных(Результат[5 + ИндексРезультатаЗапроса].Выгрузить(), СтруктураДанных.СоответствиеСвойств);
	
	Если ВключитьВложенныеМК Тогда
		ПолучитьДанныеМаршрутнойКарты(Запрос, Неопределено, СтруктураДанных);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьДанныеВТаблицуСтруктурыДанных(ТаблицаИсточник, ТаблицаСтруктурыДанных)

	Если ТаблицаСтруктурыДанных = Неопределено Тогда
		ТаблицаСтруктурыДанных = ТаблицаИсточник.СкопироватьКолонки();
	КонецЕсли; 
	Для каждого Выборка Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаСтруктурыДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (ИмяПоля = "ВыходныеИзделияНоменклатура"
			ИЛИ ИмяПоля = "ВыходныеИзделияАртикул"
			ИЛИ ИмяПоля = "ВозвратныеОтходыНоменклатура"
			ИЛИ ИмяПоля = "ВозвратныеОтходыАртикул"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатура"
			ИЛИ ИмяПоля = "МатериалыИУслугиАртикул")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли (ИмяПоля = "ВыходныеИзделияЭтапРедактирование" 
			ИЛИ ИмяПоля = "МатериалыИУслугиЭтапРедактирование"
			ИЛИ ИмяПоля = "ТрудозатратыЭтапРедактирование")
		И ЗначениеЗаполнено(ТекущиеДанные.ЭтапРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ЭтапРедактирование);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиИсточникПолученияПолуфабриката")
		И ЗначениеЗаполнено(ТекущиеДанные.ИсточникПолученияПолуфабриката)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ИсточникПолученияПолуфабриката);
		
	ИначеЕсли ИмяПоля = "ТрудозатратыСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)
		И Не ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиТребуетсяУказыватьСерииПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"МатериалыИУслуги", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыходныеИзделияТребуетсяУказыватьСерииПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущаяСтрока;
	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия,ВозвратныеОтходы", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВозвратныеОтходыТребуетсяУказыватьСерииПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущаяСтрока;
	ТекущиеДанные = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбновитьФлагТребуетсяУказыватьСерии(
		"ВыходныеИзделия,ВозвратныеОтходы", 
		ТекущиеДанные.Номенклатура, 
		ТекущиеДанные.ТребуетсяУказыватьСерии,
		ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФлагТребуетсяУказыватьСерии(СписокТЧ, Номенклатура, НовоеЗначение, Форма)
	
	МассивТЧ = СтрРазделить(СписокТЧ, ",");
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		Для каждого ДанныеСтроки Из Форма.Объект[ИмяТЧ] Цикл
			Если ДанныеСтроки.Номенклатура = Номенклатура Тогда
				ДанныеСтроки.ТребуетсяУказыватьСерии = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСтатейКалькуляцииВзносов(Форма)
	// 4D:ERP для Беларуси, АлексейЧ, 08.12.2017 0:29:06 
	// Локализовать настройку "Статьи калькуляции для взносов в фонды", №15952
	// {
	Если Не ЗначениеЗаполнено(Форма.Объект.СтатьяКалькуляцииБелгосстрах) Тогда
		Заголовок = НСтр("ru = 'Отражать страховые взносы по статье калькуляции оплаты труда.'");
	ИначеЕсли Форма.Объект.СтатьяКалькуляцииБелгосстрах = Форма.Объект.СтатьяКалькуляцииФСЗН Тогда
		Заголовок = НСтр("ru = 'Отражать страховые взносы единой статьей калькуляции для всех фондов.'");
	Иначе
		Заголовок = НСтр("ru = 'Отражать страховые взносы отдельными статьями для каждого фонда.'");
	КонецЕсли;
	// }
	// 4D
	
	Форма.Элементы.ПредставлениеСтатейКалькуляцииВзносов.Заголовок = Заголовок;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);

КонецПроцедуры

// Конец МенюОтчеты

#КонецОбласти

#КонецОбласти
