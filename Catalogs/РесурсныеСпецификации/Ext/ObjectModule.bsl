#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Номенклатура") Тогда
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура       = ДанныеЗаполнения;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Количество         = 1;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура       = ДанныеЗаполнения.Номенклатура;
			НоваяСтрока.Характеристика     = ДанныеЗаполнения.Характеристика;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Количество         = 1;
			
		КонецЕсли;
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Дата окончания действия должна быть не меньше даты начала.
	Если ЗначениеЗаполнено(НачалоДействия) 
		И ЗначениеЗаполнено(КонецДействия) 
		И НачалоДействия > КонецДействия Тогда
		
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты начала действия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "КонецДействия",, Отказ);
		
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		Справочники.РесурсныеСпецификации.ПроверитьЗацикливаниеСпецификаций(ЭтотОбъект, МатериалыИУслуги, ВыходныеИзделия, Отказ);
	КонецЕсли; 
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.СтатьяКалькуляции");
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СпособПолученияМатериала");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СтатьяКалькуляции");
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.СтатьяКалькуляции");
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Характеристика");
	КонецЕсли;
	
	ПроверитьЗаполнениеМатериалов(Отказ);
	ПроверитьЗаполнениеВозвратныхОтходов(Отказ);
	ПроверитьЗаполнениеТрудозатрат(Отказ);
	
	ПроверитьДействующуюСпецификацию(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьВыборЭтапов("ВыходныеИзделия",  НСтр("ru = 'Продукция'"),                       "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("ВозвратныеОтходы", НСтр("ru = 'Побочный и промежуточный выпуск'"), "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("МатериалыИУслуги", НСтр("ru = 'Материалы и работы'"),              "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("Трудозатраты",     НСтр("ru = 'Трудозатраты'"),                    "ЭтапРедактирование", Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ПометкаУдаления Тогда
			Статус = Перечисления.СтатусыСпецификаций.Закрыта;
			ОчиститьВыборЭтапов(ВыходныеИзделия);
			ОчиститьВыборЭтапов(ВозвратныеОтходы);
			ОчиститьВыборЭтапов(МатериалыИУслуги);
			ОчиститьВыборЭтапов(Трудозатраты);
		КонецЕсли;
		
		Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
			УправлениеДаннымиОбИзделияхВызовСервера.УбратьПризнакОсновнойСпецификации(Ссылка);
		КонецЕсли; 
		
		ОткорректироватьЭтапыОдноэтапногоПроцесса(Отказ);
		
		ПроверитьЭтапыДействующейСпецификации(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьПривязкуЭтапов();
		
		ЗарегистрироватьРасчетДлительностиПоСпецификации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
//++ НЕ УТКА
	Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		ОбновитьТребуетсяСправочноеУказаниеСерий();
	КонецЕсли;
//-- НЕ УТКА

	ОбновитьСвязанныеДанные(Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		Возврат
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	НачалоДействия = '00010101';
	КонецДействия  = '00010101';
	
	// Очистим связь с этапами
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ВозвратныеОтходы");
	СписокТЧ.Добавить("МатериалыИУслуги");
	СписокТЧ.Добавить("Трудозатраты");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из ЭтотОбъект[ИмяТЧ] Цикл
			ДанныеСтроки.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
			ДанныеСтроки.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Процедура ПроверитьДействующуюСпецификацию(МассивНепроверяемыхРеквизитов, Отказ)

	Если НЕ ЭтоДействующаяСпецификация() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеВыходныхИзделий(Отказ);
	
	ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ);
	
	СписокСтрок = МатериалыИУслуги.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыПроверки.СписокСтрок = СписокСтрок;
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	СтруктураПроверок = Новый Структура("
		|СтатусСпецификации,
		|СоответствиеСпецификации,
		|ЗаполнениеСпецификации,
		|КратностьПроизводимогоКоличества,
		|ЗаполнениеВнутреннихПолуфабрикатов");
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(ЭтотОбъект);
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("СтруктураПроверок", СтруктураПроверок);
	ПараметрыПроверки.Вставить("ПараметрыПроверкиВнутреннихПолуфабрикатов", ПараметрыПроверкиВнутреннихПолуфабрикатов);

	УправлениеДаннымиОбИзделиях.ПроверитьСпецификацииПолуфабрикатов(МатериалыИУслуги, ПараметрыПроверки, Отказ, ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверитьЭтапыДействующейСпецификации(Отказ)
	
	Если НЕ ЭтоДействующаяСпецификация() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыЭтапов(Отказ);
	
	ПроверитьПорядокЭтапов(Отказ);
	
	ПроверитьЭтапыПроизводстваНаСтороне(Отказ);
	
	ПроверитьМаршрутныеКарты(Отказ);
	
КонецПроцедуры

Функция ЭтоДействующаяСпецификация()
	
	Возврат Статус = Перечисления.СтатусыСпецификаций.Действует И НЕ ПометкаУдаления;
	
КонецФункции

Процедура ПроверитьРеквизитыЭтапов(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭтапОбъект.ПроверитьЗаполнениеРеквизитов(Истина,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПорядокЭтапов(Отказ)

	// Порядок производственного процесса
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("НесколькоПервыхОпераций", НСтр("ru = 'Не может быть несколько первых этапов.'"));
	СтруктураСообщений.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних этапов.'"));
	СтруктураСообщений.Вставить("НетПервойОперации",    НСтр("ru = 'Отсутствует первый этап.'"));
	СтруктураСообщений.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последний этап.'"));
	СтруктураСообщений.Вставить("НетСледующейОперации", НСтр("ru = 'Этап ""%1"" ссылается на несуществующий этап.'"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ЭтапыПроизводства");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерЭтапа");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующегоЭтапа");
	
	УправлениеДаннымиОбИзделиях.ПоследовательностьОперацийПравильная(
			Ссылка, 
			СтруктураПараметров, 
			СтруктураСообщений, 
			Отказ);
	
	// Порядок полуфабрикатов производимых на этапах
	
	Отбор = Новый Структура("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
	МассивСтрок = МатериалыИУслуги.НайтиСтроки(Отбор);
	Если МассивСтрок.ВГраница() <> -1 Тогда
	
		МассивСсылок = Новый Массив;
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			МассивСсылок.Добавить(СтрокаТаблицы.ЭтапРедактирование);
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Обнаружена неправильная последовательность этапов (список ""Материалы и работы"", строка %1).'");
		
		Предшественники = Справочники.ЭтапыПроизводства.Предшественники(МассивСсылок);
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			Если Предшественники[СтрокаТаблицы.ЭтапРедактирование].Найти(СтрокаТаблицы.ИсточникПолученияПолуфабриката) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаТаблицы.НомерСтроки, "ИсточникПолученияПолуфабриката"),, Отказ); 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыборЭтапов(ИмяТаблицы, ПредставлениеТаблицы, РеквизитЭтап, Отказ)

	ШаблонСообщения = НСтр("ru = 'Не допускается выбор этапов помеченных на удаление (список ""%1"", строка %2).'");
	Для каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		Если СтрокаТаблицы[РеквизитЭтап].Пустая() ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы[РеквизитЭтап], "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеТаблицы, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТаблицы.НомерСтроки, РеквизитЭтап),, Отказ); 						
	КонецЦикла; 
	
КонецПроцедуры

Функция ПроверитьЭтапыПроизводстваНаСтороне(Отказ) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	Если Не НастройкиПодсистемыПроизводство.ИспользуетсяПроизводствоНаСтороне Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаМатериалыИУслуги = ПолучитьТаблицуМатериалыИУслуги();
	ТаблицаВыходныеИзделия  = ПолучитьТаблицуВыходныеИзделия();
	ТаблицаВозвратныеОтходы = ПолучитьТаблицуВозвратныеОтходы();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МатериалыИУслуги.НомерСтроки                                                   КАК НомерСтроки,
		|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура)            КАК Номенклатура,
		|	ВЫРАЗИТЬ(МатериалыИУслуги.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК ЭтапРедактирование,
		|	МатериалыИУслуги.ПроизводитсяВПроцессе                                         КАК ПроизводитсяВПроцессе,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                                          КАК ПроизводитсяНаЭтапе,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ                                                                          КАК ПроизводитсяПоСпецификации
		|ПОМЕСТИТЬ ВТТаблица
		|ИЗ
		|	&МатериалыИУслуги КАК МатериалыИУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка                КАК Этап,
		|	ЭтапыПроизводства.Наименование          КАК НаименованиеЭтапа,
		|	ЭтапыПроизводства.НомерЭтапа            КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа  КАК НомерСледующегоЭтапа,
		|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
		|ПОМЕСТИТЬ ВТРеквизитыЭтапов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МатериалыИУслуги.НомерСтроки                КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура               КАК Номенклатура,
		|	ЕСТЬNULL(Этапы.ПроизводствоНаСтороне, ЛОЖЬ) КАК ПроизводствоНаСтороне,
		|	МатериалыИУслуги.ПроизводитсяВПроцессе      КАК ПроизводитсяВПроцессе,
		|	МатериалыИУслуги.ПроизводитсяНаЭтапе        КАК ПроизводитсяНаЭтапе,
		|	МатериалыИУслуги.ПроизводитсяПоСпецификации КАК ПроизводитсяПоСпецификации
		|ПОМЕСТИТЬ ВТМатериалыИУслуги
		|ИЗ
		|	ВТТаблица КАК МатериалыИУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(
		|				ВЫБРАТЬ
		|					ЭтапыПроизводства.Этап                  КАК Этап,
		|					ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
		|				ИЗ
		|					ВТРеквизитыЭтапов КАК ЭтапыПроизводства
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|
		|				ВЫБРАТЬ
		|					ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
		|					МАКСИМУМ(ЭтапыПроизводства.ПроизводствоНаСтороне)   КАК ПроизводствоНаСтороне
		|				ИЗ
		|					Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|				ГДЕ
		|					ЭтапыПроизводства.Владелец = &Спецификация
		|					И ЭтапыПроизводства.НомерЭтапа = 1
		|					И НЕ ЭтапыПроизводства.ПометкаУдаления
		|
		|			) КАК Этапы
		|			ПО МатериалыИУслуги.ЭтапРедактирование = Этапы.Этап
		|;
		|
		|ВЫБРАТЬ
		|	Т.Этап                 КАК Этап,
		|	Т.НаименованиеЭтапа    КАК НаименованиеЭтапа,
		|	Т.НомерЭтапа           КАК НомерЭтапа,
		|	Т.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
		|ИЗ
		|	ВТРеквизитыЭтапов КАК Т
		|ГДЕ 
		|	Т.ПроизводствоНаСтороне
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТМатериалыИУслуги КАК Т
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|					И Т.ПроизводствоНаСтороне
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТМатериалыИУслуги КАК Т
		|ГДЕ
		|	&ИспользуетсяПроизводство21
		|	И ВЫБОР
		|			КОГДА Т.ПроизводитсяВПроцессе
		|					И Т.ПроизводствоНаСтороне
		|					И (НЕ &ИспользуетсяПроизводство22
		|						ИЛИ Т.ПроизводитсяПоСпецификации
		|							И &ИспользуетсяПроизводство22)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	Запрос.УстановитьПараметр("МатериалыИУслуги", ТаблицаМатериалыИУслуги);
	
	Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22);
	Запрос.УстановитьПараметр("ИспользуетсяПроизводство21", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21);
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	// Для этапов выполняемых на стороне должны быть описаны материалы и выходные изделия, 
	Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
		ШаблонТекстаПовторПродукции = НСтр("ru = 'Номенклатура ""%1"" не может присутствовать одновременно в продукции и в материалах (услугах).'");
		ШаблонТекстаПовторПобочногоВыпуска = НСтр("ru = 'Номенклатура ""%1"" не может присутствовать одновременно в побочном выпуске и в материалах (услугах).'");
		
		Если МногоэтапныйПроизводственныйПроцесс Тогда
			
			Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
				
				ТекстСообщения = НСтр("ru = 'В многоэтапной спецификции не допускается использовать этапы, выполняемые переработчиком'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект,,, 
					ЕстьОшибкиЗаполнения);
				
			КонецЕсли;
			
			//++ НЕ УТКА
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ЭтапРедактирование");
			
			ПараметрыОтбораПоПустомуЭтапу = Новый Структура;
			ПараметрыОтбораПоПустомуЭтапу.Вставить("ЭтапРедактирование", Справочники.ЭтапыПроизводства.ПустаяСсылка());
			
			ШаблонТекстаНетСтрокВыходныеИзделия  = НСтр("ru = 'Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Продукция""'");
			ШаблонТекстаНетСтрокВозвратныеОтходы = НСтр("ru = 'Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Побочный и промежуточный выпуск""'");
			ШаблонТекстаНетСтрокМатериалыИУслуги = НСтр("ru = 'Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Материалы и услуги""'");
			
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПараметрыОтбора.ЭтапРедактирование = Выборка.Этап;
				
				МассивСтрокВыходныеИзделия = ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокВыходныеИзделия,
						ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				МассивСтрокВозвратныеОтходы = ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокВозвратныеОтходы,
						ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				// В этапе на стороне должно быть хотя бы одно выходное изделие
				// * в старой концепции - по рассчитываемой стоимости
				// * в новой концепции: 
				// ** в последнем этапе - по рассчитываемой стоимости
				// ** в остальных этапах - по фиксируемой стоимости
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22 Тогда
					
					// проверяем все этапы за исключением последнего, последний проверит платформа
					Если Выборка.НомерСледующегоЭтапа <> 0 И МассивСтрокВозвратныеОтходы.ВГраница() = -1 Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаНетСтрокВозвратныеОтходы, 
							Выборка.НаименованиеЭтапа);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							ЭтотОбъект, 
							"ВозвратныеОтходы",, 
							ЕстьОшибкиЗаполнения); 
						
					КонецЕсли;
					
				Иначе
					
					Если МассивСтрокВыходныеИзделия.ВГраница() = -1 Тогда
					
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаНетСтрокВыходныеИзделия, 
							Выборка.НаименованиеЭтапа);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							ЭтотОбъект, 
							"ВыходныеИзделия",, 
							ЕстьОшибкиЗаполнения); 
						
					КонецЕсли;
					
				КонецЕсли;
				
				МассивСтрокМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерЭтапа = 1 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокМатериалыИУслуги,
						ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				// Для этапа, выполняемого переработчиком, должен быть описан хотя бы один материал
				Если МассивСтрокМатериалыИУслуги.ВГраница() = -1 Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаНетСтрокМатериалыИУслуги, 
						Выборка.НаименованиеЭтапа);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"МатериалыИУслуги",, 
						ЕстьОшибкиЗаполнения);
						
				КонецЕсли;
				
				// В старой концепции передача одной и той же номенклатуры между этапами запрещена
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 Тогда
					
					МассивПроверок = Новый Массив;
					
					ПараметрыПроверки = Новый Структура;
					ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
					ПараметрыПроверки.Вставить("Коллекция",         МассивСтрокВыходныеИзделия);
					ПараметрыПроверки.Вставить("ШаблонТекста",      ШаблонТекстаПовторПродукции);
					
					МассивПроверок.Добавить(ПараметрыПроверки);
					
					ПараметрыПроверки = Новый Структура;
					ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "ВозвратныеОтходы");
					ПараметрыПроверки.Вставить("Коллекция",         МассивСтрокВозвратныеОтходы);
					ПараметрыПроверки.Вставить("ШаблонТекста",      ШаблонТекстаПовторПобочногоВыпуска);
					
					МассивПроверок.Добавить(ПараметрыПроверки);
					
					Для Каждого ПараметрыПроверки Из МассивПроверок Цикл
						
						Для Каждого Строка Из ПараметрыПроверки.Коллекция Цикл
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("ЭтапРедактирование", Выборка.Этап);
							СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
							
							Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
								СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
							КонецЕсли; 
							
							ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
							
							Если НЕ ЕстьДублиМатериалыИУслуги И Выборка.НомерЭтапа = 1 Тогда
								
								СтруктураПоиска.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
								
								ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
								
							КонецЕсли;
							
							Если ЕстьДублиМатериалыИУслуги Тогда
							
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ПараметрыПроверки.ШаблонТекста, 
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
										Строка.Номенклатура, 
										Строка.Характеристика));
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									ТекстСообщения, 
									ЭтотОбъект, 
									ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
										ПараметрыПроверки.ИмяТабличнойЧасти, 
										Строка.НомерСтроки, 
										"Номенклатура"),,
									ЕстьОшибкиЗаполнения);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			//-- НЕ УТКА
			
		Иначе
			
			// В старой концепции передача одной и той же номенклатуры между этапами запрещена
			Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 Тогда
					
				МассивПроверок = Новый Массив;
				
				ПараметрыПроверки = Новый Структура;
				ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
				ПараметрыПроверки.Вставить("Коллекция",         ВыходныеИзделия);
				ПараметрыПроверки.Вставить("ШаблонТекста",      ШаблонТекстаПовторПродукции);
				
				МассивПроверок.Добавить(ПараметрыПроверки);
				
				ПараметрыПроверки = Новый Структура;
				ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "ВозвратныеОтходы");
				ПараметрыПроверки.Вставить("Коллекция",         ВозвратныеОтходы);
				ПараметрыПроверки.Вставить("ШаблонТекста",      ШаблонТекстаПовторПобочногоВыпуска);
				
				МассивПроверок.Добавить(ПараметрыПроверки);
				
				Для Каждого ПараметрыПроверки Из МассивПроверок Цикл
					
					Для Каждого Строка Из ПараметрыПроверки.Коллекция Цикл
					
						СтруктураПоиска = Новый Структура("Номенклатура", Строка.Номенклатура);
						Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
							СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
						КонецЕсли; 
						
						Если МатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1 Тогда
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ПараметрыПроверки.ШаблонТекста, 
								НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
									Строка.Номенклатура, 
									Строка.Характеристика));
								
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения, 
								ЭтотОбъект, 
								ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
									ПараметрыПроверки.ИмяТабличнойЧасти, 
									Строка.НомерСтроки, 
									"Номенклатура"),,
								ЕстьОшибкиЗаполнения);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Для этапа, выполняемого переработчиком, должен быть описан хотя бы один материал
			Если ТаблицаМатериалыИУслуги.Количество() = 0 Тогда
				
				ШаблонТекста = НСтр("ru = 'Не введено ни одной строки в список ""Материалы и услуги""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ШаблонТекста, 
					ЭтотОбъект, 
					"МатериалыИУслуги",, 
					ЕстьОшибкиЗаполнения); 
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком (см. строку %1).'");
		
		Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				Поле,, 
				ЕстьОшибкиЗаполнения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// В старой концепции в списке ""Материалы и работы"" не допускается указание 
	//   полуфабрикатов производимых в процессе для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'В списке ""Материалы и работы"" не допускается указание полуфабрикатов производимых в процессе для этапов, выполняемых переработчиком (см. строку %1).'");
		
		Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				Поле,, 
				ЕстьОшибкиЗаполнения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибкиЗаполнения;
	
КонецФункции

Процедура ПроверитьЗаполнениеВыходныхИзделий(Отказ)
	
	КоличествоИзделий = ВыходныеИзделия.Количество();
	
	// Должно быть указано изделие
	Если КоличествоИзделий = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Продукция""'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			ЭтотОбъект, 
			"ВыходныеИзделия",
			,
			Отказ);
		
	ИначеЕсли КоличествоИзделий > 1 Тогда
		
		ШаблонПовторИзделия = НСтр("ru = 'Выходное изделие ""%1"" уже описано в спецификации (см. список ""Продукция"", строка %2). Дублирование выходных изделий в рамках одной спецификации не допускается.'");
		ШаблонДоляСтоимости = НСтр("ru = 'Не заполнена колонка ""Доля стоимости"" в строке %1 списка ""Продукция""'");

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		
		ТаблицаИзделий = Новый ТаблицаЗначений;
		ТаблицаИзделий.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаИзделий.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаИзделий.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
			
			СтруктураПоиска.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтруктураПоиска.Характеристика = СтрокаТаблицы.Характеристика;
			
			// Дублирование выходных изделий в рамках одной спецификации не допускается
			НайденныеИзделия = ТаблицаИзделий.НайтиСтроки(СтруктураПоиска);
			Если НайденныеИзделия.ВГраница() <> -1 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПовторИзделия,
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Формат(НайденныеИзделия[0].НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ВыходныеИзделия",
					СтрокаТаблицы.НомерСтроки,
					"Номенклатура");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					Поле,,
					Отказ);
				
				Продолжить;
				
			КонецЕсли;
			
			// Если указано более двух изделий, то должна быть задана доля стоимости
			Если СтрокаТаблицы.ДоляСтоимости = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонДоляСтоимости, 
					Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ВыходныеИзделия", 
					СтрокаТаблицы.НомерСтроки, 
					"ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					Поле,, 
					Отказ);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаИзделий.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
//++ НЕ УТКА
	Если УправлениеПроизводством.ИспользуетсяПроизводство22() И НЕ ЭтоНовый() Тогда
		
		Если ЭтотОбъект.МногоэтапныйПроизводственныйПроцесс И КоличествоИзделий > 0 Тогда
		
			ШаблонСообщения = НСтр("ru = 'Выпуск продукции по рассчитываемой стоимости возможен только на последнем этапе (см. список ""Продукция"", строка %1)'");
			ВыпускающийЭтап = ВыпускающийЭтап();
			
			Если ЗначениеЗаполнено(ВыпускающийЭтап) Тогда
				
				Для Каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
					
					Если СтрокаТаблицы.ЭтапРедактирование.Пустая()
						ИЛИ СтрокаТаблицы.ЭтапРедактирование = ВыпускающийЭтап Тогда
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ВыходныеИзделия", СтрокаТаблицы.НомерСтроки, "ЭтапРедактирование");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						Поле,
						, 
						Отказ);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМатериалов(Отказ)

	//СпособПолученияМатериала, ПроизводитсяВПроцессе, ИсточникПолученияПолуфабриката
	ШаблонНоменклатура             = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы""'");
	ШаблонКоличество               = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Материалы и работы""'");
	ШаблонСтатьяКалькуляции        = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Материалы и работы""'");
	ШаблонСпособПолученияМатериала = НСтр("ru = 'Не заполнена колонка ""Способ получения материала"" в строке %1 списка ""Материалы и работы""'");
	ШаблонПроизводитсяВПроцессе    = НСтр("ru = 'Не заполнена служебная колонка ""Производится в процессе"" в строке %1 списка ""Материалы и работы""'");
	
	Для Каждого Строка Из МатериалыИУслуги Цикл
		
		Если Строка.Номенклатура.Пустая()
			И Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонНоменклатура, 
				Формат(Строка.НомерСтроки, "ЧГ="));
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
		
		// Проверка способа получения материала
		Если ЗначениеЗаполнено(Строка.СпособПолученияМатериала) Тогда

			// Проверка служебных реквизитов
			Если УправлениеДаннымиОбИзделияхКлиентСервер.ПолуфабрикатПроизводимыйВПроцессе(Строка) И НЕ Строка.ПроизводитсяВПроцессе Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПроизводитсяВПроцессе, 
					Формат(Строка.НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "ПроизводитсяВПроцессе");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСпособПолученияМатериала, 
				Формат(Строка.НомерСтроки, "ЧГ="));
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "СпособПолученияМатериала");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
		
		// Для действующией спецификации
		Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
			
			Если Строка.КоличествоУпаковок = 0
				И ПустаяСтрока(Строка.АлгоритмРасчетаКоличества) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонКоличество, 
					Формат(Строка.НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "КоличествоУпаковок");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
					
			КонецЕсли;
			
			Если Не Строка.ПроизводитсяВПроцессе
				И Не ЗначениеЗаполнено(Строка.СтатьяКалькуляции) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСтатьяКалькуляции, 
					Формат(Строка.НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "СтатьяКалькуляции");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВозвратныхОтходов(Отказ)
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияСтатьяКалькуляции = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Побочный и промежуточный выход""'");
	
	НайденныеСтроки = ВозвратныеОтходы.НайтиСтроки(Новый Структура("СтатьяКалькуляции", Справочники.СтатьиКалькуляции.ПустаяСсылка()));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияСтатьяКалькуляции, 
			Формат(Строка.НомерСтроки, "ЧГ="));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "СтатьяКалькуляции");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТрудозатрат(Отказ)
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияСтатьяКалькуляции = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Трудозатраты""'");
	
	НайденныеСтроки = Трудозатраты.НайтиСтроки(Новый Структура("СтатьяКалькуляции", Справочники.СтатьиКалькуляции.ПустаяСсылка()));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияСтатьяКалькуляции, 
			Формат(Строка.НомерСтроки, "ЧГ="));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "СтатьяКалькуляции");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьМаршрутныеКарты(Отказ)

//++ НЕ УТКА
	
	Если МногоэтапныйПроизводственныйПроцесс Тогда
		ШаблонСообщения = НСтр("ru = 'В этапе ""%1"" необходимо указать действующую маршрутную карту.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'В этапе производства необходимо указать действующую маршрутную карту.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка                            КАК Ссылка,
	|	ЭтапыПроизводства.Наименование                      КАК Наименование,
	|	ЭтапыПроизводства.МаршрутнаяКарта                   КАК МаршрутнаяКарта,
	|	ЭтапыПроизводства.МаршрутнаяКарта.Статус            КАК МаршрутнаяКартаСтатус,
	|	ЭтапыПроизводства.МаршрутнаяКарта.НачалоДействия    КАК МаршрутнаяКартаНачалоДействия,
	|	ЭтапыПроизводства.МаршрутнаяКарта.КонецДействия     КАК МаршрутнаяКартаКонецДействия
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО (ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка)
	|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
	|			И (ЭтапыПроизводства.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка))
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.НомерЭтапа";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МаршрутнаяКартаСтатус <> Перечисления.СтатусыМаршрутныхКарт.Действует
			
			// Начало действия маршрутной карты должно быть 
			// не позже чем конец действия спецификации
			ИЛИ Выборка.МаршрутнаяКартаНачалоДействия <> '000101010000'
				И КонецДействия <> '000101010000'
				И Выборка.МаршрутнаяКартаНачалоДействия > КонецДействия
				
			// Конец действия маршрутной карты должен быть 
			// не раньше чем начало действия спецификации
			ИЛИ Выборка.МаршрутнаяКартаКонецДействия <> '000101010000'
				И НачалоДействия <> '000101010000'
				И Выборка.МаршрутнаяКартаКонецДействия <= НачалоДействия Тогда 
				
			КлючДанных = Выборка.Ссылка;
			
			Если МногоэтапныйПроизводственныйПроцесс Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СокрЛП(Выборка.Наименование));
			Иначе
				ТекстСообщения = ШаблонСообщения;
			КонецЕсли; 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "МаршрутнаяКарта",, Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
//-- НЕ УТКА
	
	Возврат; // обработчик пустой
	
КонецПроцедуры

Процедура ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ)

//++ НЕ УТКА
	
	Если ВыходныеИзделия.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ВыходныеИзделия[0].Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ВыходныеИзделия[0].Номенклатура;
	
	ВидИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтоподбора(ВидИзделий);
	
	// Проверим, что свойство в котором указывается материал есть в продукции
	ШаблонСообщения = НСтр("ru = 'В настройке автовыбора материала определено, что материал указывается в свойстве характеристики продукции ""%1"", но это свойство не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции 
			И ЗначениеЗаполнено(СтрокаМатериал.СвойствоСодержащееНоменклатуру) 
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Свойство") = Неопределено Тогда
			
			ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Заголовок");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									ЗаголовокСвойства,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
	ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ);
	
//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ)

	ШаблонСообщения = НСтр("ru = 'В настройке потребления указано свойство ""%1"", которое не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если НЕ СтрокаМатериал.ОтборСвойство.Пустая()
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.ОтборСвойство, "Свойство") = Неопределено Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									СтрокаМатериал.ОтборСвойство,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//-- НЕ УТКА

Функция ПолучитьТаблицуМатериалыИУслуги()
	
	Результат = МатериалыИУслуги.Выгрузить(, 
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование, 
		|ПроизводитсяВПроцессе,
		|ИсточникПолученияПолуфабриката");
	
	Результат.Индексы.Добавить("ЭтапРедактирование");
	Результат.Индексы.Добавить("ЭтапРедактирование, Номенклатура");
	Результат.Индексы.Добавить("ЭтапРедактирование, Номенклатура, Характеристика");	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуВыходныеИзделия()
	
	Результат = ВыходныеИзделия.Выгрузить(, 
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование");
	
	Результат.Индексы.Добавить("ЭтапРедактирование");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуВозвратныеОтходы()
	
	Результат = ВозвратныеОтходы.Выгрузить(, 
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование");
	
	Результат.Индексы.Добавить("ЭтапРедактирование");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Если у спецификации производственный процесс одноэтапный, то лишние этапы должны быть помечены на удаление.
// Единственный этап должен иметь корректную нумерацию.
//
Процедура ОткорректироватьЭтапыОдноэтапногоПроцесса(Отказ)
	
	Если ЭтоНовый() ИЛИ МногоэтапныйПроизводственныйПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Этапы.Ссылка,
		|	Этапы.НомерЭтапа,
		|	Этапы.НомерСледующегоЭтапа
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК Этапы
		|ГДЕ
		|	НЕ Этапы.ПометкаУдаления
		|	И Этапы.Владелец = &Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Этапы.Ссылка";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДействующийЭтап = Справочники.РесурсныеСпецификации.ПолучитьЭтапОдногоЭтапногоПроцесса(Ссылка);
	
	Пока Выборка.Следующий() Цикл
		
		ЭтоДействующийЭтап = (Выборка.Ссылка = ДействующийЭтап);
		
		Попытка
			
			Если ЭтоДействующийЭтап Тогда
				
				Если НЕ Выборка.НомерЭтапа = 1
					ИЛИ НЕ Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ЭтапОбъект.Заблокировать();
					
					ЭтапОбъект.НомерЭтапа = 1;
					ЭтапОбъект.НомерСледующегоЭтапа = 0;
					
					ЭтапОбъект.Записать();
					
				КонецЕсли;
				
			Иначе
					
				ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЭтапОбъект.Заблокировать();
				
				ЭтапОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗапись");
					
				ЭтапОбъект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
		Исключение
			
			Отказ = Истина;
			
			ИмяСобытия = НСтр("ru = 'Ресурсная спецификация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
			ТекстСообщения = НСтр("ru = 'Не удалось откорректировать этапы ресурсной спецификации по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		Если НЕ ЭтоДействующийЭтап Тогда
			
			ОчиститьСсылкуНаВыбранныйЭтап(ВыходныеИзделия,  Выборка.Ссылка);
			ОчиститьСсылкуНаВыбранныйЭтап(ВозвратныеОтходы, Выборка.Ссылка);
			ОчиститьСсылкуНаВыбранныйЭтап(МатериалыИУслуги, Выборка.Ссылка);
			ОчиститьСсылкуНаВыбранныйЭтап(Трудозатраты,     Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетДлительностиПоСпецификации() Экспорт
	
	// При изменении статуса спецификации запускаем полный пересчет длительности:
	// - рассчитываем всю очередь заданий, 
	// - рассчитываем количество дней до окончания.
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует ИЛИ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "Статус");
	
	Если СтатусДоИзменения <> Перечисления.СтатусыСпецификаций.ВРазработке Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыЗапуска();
	Если ДополнительныеСвойства.Свойство("ЗапретитьРасчетДлительностиПроизводства") Тогда
		ПараметрыЗапуска.АвтоЗапуск = Ложь;
	КонецЕсли;
	ПараметрыЗапуска.ТолькоНовые = Ложь;
	
	ДополнительныеСвойства.Вставить("РассчитатьДлительностьПроизводства", ПараметрыЗапуска);
	
КонецПроцедуры

Процедура ОбновитьСвязанныеДанные(Отказ)
	
	Если ДополнительныеСвойства.Свойство("РассчитатьДлительностьПроизводства") Тогда
		
		ПараметрыЗапуска = ДополнительныеСвойства.РассчитатьДлительностьПроизводства;
		УправлениеДаннымиОбИзделиях.РассчитатьДлительностьПроизводства(Ссылка, ПараметрыЗапуска, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВыборЭтапов(ТабличнаяЧасть)

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаТаблицы.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		СтрокаТаблицы.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОчиститьСсылкуНаВыбранныйЭтап(ТабличнаяЧасть, ЭтапСсылка)

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если СтрокаТаблицы.Этап = ЭтапСсылка Тогда
			СтрокаТаблицы.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЕсли; 
		Если СтрокаТаблицы.ЭтапРедактирование = ЭтапСсылка Тогда
			СтрокаТаблицы.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обновляет значение реквизита Этап в табличных частях
//  - если реквизит ЭтапРедактирование не пустой то подставляет значение из него
//  - если реквизит ЭтапРедактирование пустой то
//		1. для изделий подставляет последний этап
//		2. для материалов подставляет первый этап
//
Процедура ОбновитьПривязкуЭтапов()
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапПустаяСсылка = Справочники.ЭтапыПроизводства.ПустаяСсылка();
	
	ЗаполнитьЭтапИзделий = (ВыходныеИзделия.Найти(ЭтапПустаяСсылка, "ЭтапРедактирование") <> Неопределено);
	ЗаполнитьЭтапОтходов = (ВозвратныеОтходы.Найти(ЭтапПустаяСсылка, "ЭтапРедактирование") <> Неопределено);
	ЗаполнитьЭтапМатериалов = (МатериалыИУслуги.Найти(ЭтапПустаяСсылка, "ЭтапРедактирование") <> Неопределено);
	ЗаполнитьЭтапТрудозатрат = (Трудозатраты.Найти(ЭтапПустаяСсылка, "ЭтапРедактирование") <> Неопределено);
	
	ПервыйЭтап    = Неопределено;
	ПоследнийЭтап = Неопределено;
	Если ЗаполнитьЭтапИзделий ИЛИ ЗаполнитьЭтапОтходов ИЛИ ЗаполнитьЭтапМатериалов ИЛИ ЗаполнитьЭтапТрудозатрат Тогда
		
		ПолучитьПервыйИПоследнийЭтап(ПервыйЭтап, ПоследнийЭтап);
		
	КонецЕсли; 
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ВозвратныеОтходы");
	СписокТЧ.Добавить("МатериалыИУслуги");
	СписокТЧ.Добавить("Трудозатраты");
	
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		
		Для каждого СтрокаТЧ Из ЭтотОбъект[ИмяТЧ] Цикл
			
			Если СтрокаТЧ.ЭтапРедактирование.Пустая() Тогда
				Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
					СтрокаТЧ.Этап = ПоследнийЭтап;
				Иначе
					СтрокаТЧ.Этап = ПервыйЭтап;
				КонецЕсли;
			Иначе
				СтрокаТЧ.Этап = СтрокаТЧ.ЭтапРедактирование;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПолучитьПервыйИПоследнийЭтап(ПервыйЭтап, ПоследнийЭтап)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка,
		|	ЭтапыПроизводства.НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	(ЭтапыПроизводства.НомерЭтапа = 1
		|			ИЛИ ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
		|	И ЭтапыПроизводства.Владелец = &Владелец
		|	И (НЕ ЭтапыПроизводства.ПометкаУдаления)");
		
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерЭтапа = 1 Тогда
			ПервыйЭтап = Выборка.Ссылка;
		КонецЕсли; 
		
		Если Выборка.НомерСледующегоЭтапа = 0 Тогда
			ПоследнийЭтап = Выборка.Ссылка;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ОбновитьТребуетсяСправочноеУказаниеСерий()

	НаборЗаписей = РегистрыСведений.ТребуетсяСправочноеУказаниеСерий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Спецификация.Установить(Ссылка);
	
	СтруктураПоиска = Новый Структура("ТребуетсяУказыватьСерии", Истина);
	
	// ВыходныеИзделия
	ТаблицаНоменклатура = ВыходныеИзделия.Выгрузить(СтруктураПоиска, "Номенклатура");
 	СписокНоменклатуры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаНоменклатура = ВозвратныеОтходы.Выгрузить(СтруктураПоиска, "Номенклатура");
 	СписокОтходов = ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры, СписокОтходов, Истина);
	
	Для каждого НоменклатураСтроки Из СписокНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
			Продолжить;
		КонецЕсли;
		СтроНоваяЗапись = НаборЗаписей.Добавить();
		СтроНоваяЗапись.Спецификация = Ссылка;
		СтроНоваяЗапись.Номенклатура = НоменклатураСтроки;
		СтроНоваяЗапись.ВидСтрокиСпецификации = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
	КонецЦикла; 
	
	// МатериалыИУслуги
	ТаблицаНоменклатура = МатериалыИУслуги.Выгрузить(СтруктураПоиска, "Номенклатура");
 	СписокНоменклатуры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	Для каждого НоменклатураСтроки Из СписокНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
			Продолжить;
		КонецЕсли;
		СтроНоваяЗапись = НаборЗаписей.Добавить();
		СтроНоваяЗапись.Спецификация = Ссылка;
		СтроНоваяЗапись.Номенклатура = НоменклатураСтроки;
		СтроНоваяЗапись.ВидСтрокиСпецификации = Перечисления.ВидыСтрокДереваСпецификаций.Материал;
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ВыпускающийЭтап()
	
	Если ЭтоНовый() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Владелец
	|	И ЭтапыПроизводства.ПометкаУдаления = ЛОЖЬ
	|	И ЭтапыПроизводства.НомерСледующегоЭтапа = 0");
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли
