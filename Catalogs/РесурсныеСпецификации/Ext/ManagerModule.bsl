#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает структуру данных основного изделия по спецификации
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации	 - спецификация, данные которой требуется получить
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - Номенклатура выходного изделия, если не указано, то основная
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика выходного изделия, если не указано, 
//																	то основная или любая из характеристик номенклатуры
//
// Возвращаемое значение:
//   Структура   - содержит данные изделия
//
Функция ДанныеОсновногоИзделияСпецификации(Спецификация, Номенклатура = Неопределено, Характеристика = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости
	|ПОМЕСТИТЬ ИтогоДоляСтоимости
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	СУММА(ВыходныеИзделия.Количество) КАК Количество,
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости,
	|	0 КАК ДнейДоОкончания
	|ПОМЕСТИТЬ ВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Спецификация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.Характеристика,
	|	ВыходныеИзделия.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВыходныеИзделия.Характеристика
	|		ИНАЧЕ &Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВыходныеИзделия.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПроизводства,
	|	ВЫБОР
	|		КОГДА ИтогоДоляСтоимости.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости / ИтогоДоляСтоимости.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	&Спецификация КАК Спецификация,
	|	ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВыходныеИзделия.ДнейДоОкончания
	|ИЗ
	|	ВыходныеИзделия КАК ВыходныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ОсновноеВыходноеИзделие
	|		ПО ВыходныеИзделия.Номенклатура = ОсновноеВыходноеИзделие.Номенклатура
	|			И ВыходныеИзделия.Характеристика = ОсновноеВыходноеИзделие.Характеристика
	|			И (ОсновноеВыходноеИзделие.НомерСтроки = 1)
	|			И (ОсновноеВыходноеИзделие.Ссылка = &Спецификация),
	|	ИтогоДоляСтоимости КАК ИтогоДоляСтоимости
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						И НЕ ОсновноеВыходноеИзделие.Номенклатура ЕСТЬ NULL 
	|					ИЛИ ВыходныеИзделия.Номенклатура = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						И НЕ ОсновноеВыходноеИзделие.Номенклатура ЕСТЬ NULL 
	|					ИЛИ ВыходныеИзделия.Характеристика = &Характеристика
	|					ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ");
	
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Если Номенклатура = Неопределено Тогда
		Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	
	ДанныеПоНоменклатуре = СтруктураДанныхОсновногоИзделияСпецификации();
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка);
		
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре и спецификаций полуфабрикатов, производимых в процессе.
//
// Параметры:
//  ДанныеПоНоменклатуре		- Структура - содержит данные о номенклатуре.
//  ИсключитьПолуфабрикаты		- Булево - Истина, если не требуется добавлять полуфабрикаты в материалы и выходные изделия.
//  ПолучитьПредставления		- Булево - Истина, если нужно получить представления ссылочных полей.
//	ПереченьДанных				- Массив - Содержит перечень данных спецификации, которые требуеется получить.
//								- Неопределено - если нужно получить весь набор данных.
//	КэшированныеСпецификации	- ТаблицаЗначений - таблица с закэшированными данными ресурсных спецификаций.
//  ИспользоватьПроизводство2_2	- Булево - Истина, если нужно использовать параметры производства версии 2.2.
//
// Возвращаемое значение:
//   Структура   - содержит данные спецификации
//
Функция ДанныеСпецификацииСПолуфабрикатами(
											ДанныеПоНоменклатуре,
											ИсключитьПолуфабрикаты,
											ПолучитьПредставления = Ложь,
											ПереченьДанных = Неопределено,
											КэшированныеСпецификации = Неопределено,
											ИспользоватьПроизводство2_2 = Ложь) Экспорт
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДанныеПоНоменклатуре);
	
	// данные конечной спецификации
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(
		МассивДанных, 
		ПолучитьПредставления, 
		Ложь, 
		ИспользоватьПроизводство2_2, 
		ПереченьДанных, 
		КэшированныеСпецификации);
	
	ДанныеОсновнойСпецификации = ДанныеСпецификаций[0];
	
	Если ДанныеОсновнойСпецификации = Неопределено Тогда
		
		Если ДанныеПоНоменклатуре.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: %Спецификация%.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Спецификация%", ДанныеПоНоменклатуре.Спецификация);
		Иначе
			ТекстИсключения = НСтр("ru = 'Ошибка при чтении данных ресурсной спецификации: не передана спецификация.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	МатериалыПроизводимыеВПроцессе = Новый Массив;
	
	Для Каждого Строка Из ДанныеОсновнойСпецификации.МатериалыИУслуги Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
			
			ДанныеМатериала = Новый Структура;
			ДанныеМатериала.Вставить("Номенклатура",          Строка.Номенклатура);
			ДанныеМатериала.Вставить("Характеристика",        Строка.Характеристика);
			ДанныеМатериала.Вставить("Подразделение",         Строка.ПодразделениеЭтапа);
			ДанныеМатериала.Вставить("Спецификация",          Строка.ИсточникПолученияПолуфабриката);
			ДанныеМатериала.Вставить("Количество",            Строка.Количество);
			ДанныеМатериала.Вставить("Упаковка",              Строка.Упаковка);
			ДанныеМатериала.Вставить("ДнейДоОкончания",       Строка.ДнейДоОкончания);
			
			МатериалыПроизводимыеВПроцессе.Добавить(ДанныеМатериала);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока МатериалыПроизводимыеВПроцессе.Количество() > 0 Цикл
		
		МатериалыПроизводимыеВПроцессе = ДобавитьДанныеПолуфабрикатов(
			ДанныеОсновнойСпецификации, 
			МатериалыПроизводимыеВПроцессе,
			ПолучитьПредставления,
			КэшированныеСпецификации,
			ПереченьДанных,
			ИспользоватьПроизводство2_2);
		
	КонецЦикла;
	
	Если ИсключитьПолуфабрикаты Тогда
		
		СтруктураОтбора = Новый Структура("ПроизводитсяВПроцессе", Истина);
		НайденныеСтроки = ДанныеОсновнойСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе
				И ДанныеОсновнойСпецификации.Свойство("ВозвратныеОтходы") Тогда
				
				СтруктураОтбораОтходов = Новый Структура("Номенклатура, Характеристика, Этап");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораОтходов, Строка);
				СтруктураОтбораОтходов.Этап = Строка.ИсточникПолученияПолуфабриката;
				
				НайденныеСтрокиОтходов = ДанныеОсновнойСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбораОтходов);
				
				Для Каждого СтрокаОтхода Из НайденныеСтрокиОтходов Цикл
					ДанныеОсновнойСпецификации.ВозвратныеОтходы.Удалить(СтрокаОтхода);
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеОсновнойСпецификации.МатериалыИУслуги.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеОсновнойСпецификации;
	
КонецФункции

// Возвращает данные спецификации с учетом данных о номенклатуре
//
// Параметры:
//  ДанныеПоНоменклатуре		- Структура - содержит данные о номенклатуре.
//  ПолучитьПредставления		- Булево - Истина, если нужно получить представления ссылочных полей.
//	ПолучитьСведенияАвтовыбора	- Булево - Истина, если нужно получить сведения автовыбора.
//  ИспользоватьПроизводство2_2	- Булево - Истина, если нужно использовать параметры производства версии 2.2.
//	ПереченьДанных				- Массив - Содержит перечень данных спецификации, которые требуеется получить.
//	МенеджерВременныхТаблиц		- МенеджерВременныхТаблиц - Используется для передачи временной таблицы "ВтСпособыПолученияМатериалов",
//                                                          для переопределения способа получения материалов по спецификации.
//
// Возвращаемое значение:
//   Структура   - содержит данные спецификации
//
Функция ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, ПолучитьПредставления, ПолучитьСведенияАвтовыбора, ИспользоватьПроизводство2_2, ПереченьДанных = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	СтруктураДанных = ДанныеСпецификации(
							ДанныеПоНоменклатуре,
							ПолучитьПредставления,
							ПолучитьСведенияАвтовыбора,
							ИспользоватьПроизводство2_2,
							ПереченьДанных,
							МенеджерВременныхТаблиц);
	
	Если СтруктураДанных.Свойство("Этапы") Тогда
		РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Ложь,   СтруктураДанных.Этапы);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.ВыходныеИзделия);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.ВозвратныеОтходы);
	КонецЕсли;
	Если СтруктураДанных.Свойство("МатериалыИУслуги") Тогда
		РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.МатериалыИУслуги);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Ложь,   СтруктураДанных.Трудозатраты);
	КонецЕсли;
	
	//++ НЕ УТКА
	// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы.
	Если СтруктураДанных.Свойство("МатериалыИУслуги") Тогда
		
		УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
			СтруктураДанных.МатериалыИУслуги, 
			ДанныеПоНоменклатуре, 
			"РесурсныеСпецификации", 
			ПолучитьПредставления, 
			ПолучитьСведенияАвтовыбора);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает данные спецификации по переданному списку номенклатуры.
//
// Параметры:
//  МассивДанных				- Массив - содержит структуру данных о номенклатуре.
//  ПолучитьПредставления		- Булево - Истина, если нужно получить представления ссылочных полей.
//	ПолучитьСведенияАвтовыбора	- Булево - Истина, если нужно получить сведения автовыбора.
//  ИспользоватьПроизводство2_2	- Булево - Истина, если нужно использовать параметры производства версии 2.2.
//	ПереченьДанных				- Массив - Содержит перечень данных спецификации, которые требуеется получить.
//								- Неопределено - если нужно получить весь набор данных.
//	КэшированныеСпецификации	- ТаблицаЗначений - таблица с закэшированными данными ресурсных спецификаций.
//  МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц - содержит временные таблицы используемые
//		для получения способа обеспечения:
//      * ВтСпособыПолученияМатериалов - Временная таблица с полями Номенклатура, Характеристика, Назначение,
//			Распоряжение, Склад, ВариантОбеспечения.
//
// Возвращаемое значение:
//   Массив   - содержит данные для каждой переданной номенклатуры (соответствие данных выполняется по индексу).
//
Функция ДанныеСпецификацииПоСпискуНоменклатуры(
		МассивДанных,
		ПолучитьПредставления,
		ПолучитьСведенияАвтовыбора,
		ИспользоватьПроизводство2_2,
		ПереченьДанных           = Неопределено,
		КэшированныеСпецификации = Неопределено,
		МенеджерВременныхТаблиц  = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если КэшированныеСпецификации = Неопределено Тогда
		
		КэшированныеСпецификации = Новый ТаблицаЗначений;
		КэшированныеСпецификации.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		КэшированныеСпецификации.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КэшированныеСпецификации.Колонки.Добавить("Спецификация",   Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
		КэшированныеСпецификации.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		КэшированныеСпецификации.Колонки.Добавить("ДоступныРаботы", Новый ОписаниеТипов("Булево"));
		КэшированныеСпецификации.Колонки.Добавить("СтруктураДанных");
		КэшированныеСпецификации.Индексы.Добавить("Номенклатура, Характеристика, Спецификация, Подразделение");
		
	КонецЕсли; 
	
	Для каждого ДанныеПоНоменклатуре Из МассивДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеПоНоменклатуре.Спецификация) Тогда
			Результат.Добавить(Неопределено);
			Продолжить;
		КонецЕсли;
		
		Подразделение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
								ДанныеПоНоменклатуре, 
								"Подразделение", 
								Справочники.СтруктураПредприятия.ПустаяСсылка());
								
		ДоступныРаботы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
								ДанныеПоНоменклатуре, 
								"ДоступныРаботы", 
								Истина);
								
		СтруктураДанных = Неопределено;
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
		Отбор.Вставить("Характеристика", ДанныеПоНоменклатуре.Характеристика);
		Отбор.Вставить("Спецификация",   ДанныеПоНоменклатуре.Спецификация);
		Отбор.Вставить("Подразделение",  Подразделение);
		Отбор.Вставить("ДоступныРаботы", ДоступныРаботы);
		
		НайденныеСтроки = КэшированныеСпецификации.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтруктураДанных = КопияДанныхСпецификации(НайденныеСтроки[0].СтруктураДанных);
		КонецЕсли; 
		
		Если СтруктураДанных = Неопределено Тогда
			
			СтруктураДанных = ДанныеСпецификации(
				ДанныеПоНоменклатуре,
				ПолучитьПредставления,
				ПолучитьСведенияАвтовыбора,
				ИспользоватьПроизводство2_2,
				ПереченьДанных,
				МенеджерВременныхТаблиц,
				ДоступныРаботы);
			
			НоваяСтрока = КэшированныеСпецификации.Добавить();
			НоваяСтрока.Номенклатура    = ДанныеПоНоменклатуре.Номенклатура;
			НоваяСтрока.Характеристика  = ДанныеПоНоменклатуре.Характеристика;
			НоваяСтрока.Спецификация    = ДанныеПоНоменклатуре.Спецификация;
			НоваяСтрока.Подразделение   = Подразделение;
			НоваяСтрока.ДоступныРаботы  = ДоступныРаботы;
			НоваяСтрока.СтруктураДанных = КопияДанныхСпецификации(СтруктураДанных);
			
		КонецЕсли; 
		
		Если СтруктураДанных.Свойство("Этапы") Тогда
			РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Ложь,   СтруктураДанных.Этапы);
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.ВыходныеИзделия);
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
			РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.ВозвратныеОтходы);
		КонецЕсли;
		Если СтруктураДанных.Свойство("МатериалыИУслуги") Тогда
			РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Истина, СтруктураДанных.МатериалыИУслуги);
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.МатериалыИУслуги);
		КонецЕсли;
		Если СтруктураДанных.Свойство("Трудозатраты") Тогда
			РассчитатьКоличество(ДанныеПоНоменклатуре.Количество, Ложь,   СтруктураДанных.Трудозатраты);
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.Трудозатраты);
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВидыРабочихЦентров") Тогда
			РассчитатьЗанятость(ДанныеПоНоменклатуре.Количество, СтруктураДанных.ВидыРабочихЦентров);
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.ВидыРабочихЦентров);
		КонецЕсли;
		
		//++ НЕ УТКА
		// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы.
		Если СтруктураДанных.Свойство("МатериалыИУслуги") Тогда
			
			СтрокиАвтоВыбора = УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
																	СтруктураДанных.МатериалыИУслуги, 
																	ДанныеПоНоменклатуре, 
																	"РесурсныеСпецификации", 
																	ПолучитьПредставления, 
																	ПолучитьСведенияАвтовыбора);
			
			ЗаполнитьНастройкиПолученияМатериаловВКоллекции(
				СтрокиАвтоВыбора,
				ДанныеПоНоменклатуре,
				МенеджерВременныхТаблиц,
				ИспользоватьПроизводство2_2);
			
		КонецЕсли;
		//-- НЕ УТКА
		
		Результат.Добавить(СтруктураДанных);
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на этап спецификации у которой производственный процесс одноэтапный
//
// Параметры:
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - спецификация, этапы которой требуется проверить
//
// Возвращаемое значение:
//   СправочникСсылка.ЭтапыПроизводства - этап одноэтапной спецификации
//
Функция ПолучитьЭтапОдногоЭтапногоПроцесса(Спецификация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Этапы.Ссылка
	               |ИЗ
	               |	Справочник.ЭтапыПроизводства КАК Этапы
	               |ГДЕ
	               |	НЕ Этапы.ПометкаУдаления
	               |	И Этапы.Владелец = &Спецификация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Этапы.Ссылка";
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	// Элементы шапки
	Результат.Добавить("Код");
	Результат.Добавить("ВидПроизводственногоПроцесса");
	Результат.Добавить("СпособПроизводства");
	
	// Элементы табличных частей
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	
	// Команды
	Результат.Добавить("ФормаЗаполнитьПоМаршрутнымКартамЭтапов");
	Результат.Добавить("МатериалыИУслугиРазбитьСтроку");
	Результат.Добавить("МатериалыИУслугиОткрытьПодборМатериалов");
	
	Возврат Результат;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК СписаниеЗатратНаВыпуск
	|ГДЕ
	|	СписаниеЗатратНаВыпуск.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.ПроизводитсяВПроцессе
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|	И ТаблицаПоиска.ИсточникПолученияПолуфабриката = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АналогиВПроизводстве КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Спецификация = &Объект
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

// Проверяет спецификацию на наличие зацикленности материалов и выходных изделий
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации, СправочникОбъект.РесурсныеСпецификации - Ссылка/объект на текущую спецификацию по которой происходит проверка
//  Материалы		 - ТабличнаяЧасть	- Табличная часть спецификации, содержащая материалы
//  ВыходныеИзделия	 - ТабличнаяЧасть	- Табличная часть спецификации, содержащая выходные изделия
//  Отказ			 - Булево			- Флаг наличия ошибок проверки
//
Процедура ПроверитьЗацикливаниеСпецификаций(Спецификация, Материалы, ВыходныеИзделия, Отказ = Ложь) Экспорт 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	НайденныеПолуфабрикаты = Материалы.НайтиСтроки(Новый Структура("ПроизводитсяВПроцессе", Истина));
	Если НайденныеПолуфабрикаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Спецификация) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		СпецификацияСсылка = Спецификация.Ссылка;
	Иначе
		СпецификацияСсылка = Спецификация;
	КонецЕсли; 
	
	ТаблицаМатериалы = Материалы.Выгрузить(Новый Структура("ПроизводитсяВПроцессе", Истина), "НомерСтроки, Номенклатура, Характеристика, ИсточникПолученияПолуфабриката");
	
	ТаблицаМатериалы.Колонки.Добавить("Спецификация",              Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаМатериалы.Колонки.Добавить("СпецификацияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	Для Индекс = -ТаблицаМатериалы.Количество() + 1 По 0 Цикл
		
		Строка = ТаблицаМатериалы[-Индекс];
		
		Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката)
			И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Строка.Спецификация              = СпецификацияСсылка;
			Строка.СпецификацияПолуфабриката = Строка.ИсточникПолученияПолуфабриката;
		Иначе
			ТаблицаМатериалы.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ВсеВыходныеИзделия = ВыходныеИзделия.Выгрузить(, "Номенклатура, Характеристика");
	ВсеВыходныеИзделия.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ВсеВыходныеИзделия.ЗаполнитьЗначения(СпецификацияСсылка, "Спецификация");
	
	// Контроллируем зацикленность по "веткам" дерева спецификаций - для этого нужна иерархия строк
	КС = Новый КвалификаторыСтроки(40);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ВсеВыходныеИзделия.Колонки.Добавить("УИ", ОписаниеТиповС);
	УИ = Строка(Новый УникальныйИдентификатор());
	ВсеВыходныеИзделия.ЗаполнитьЗначения(УИ, "УИ");
	ВсеВыходныеИзделия.Колонки.Добавить("Родитель", ОписаниеТиповС);
	ВсеВыходныеИзделия.ЗаполнитьЗначения("", "Родитель");
	ВсеВыходныеИзделия.Индексы.Добавить("УИ");
	ВсеВыходныеИзделия.Индексы.Добавить("УИ, Номенклатура, Характеристика, Спецификация");
	
	ТаблицаМатериалы.Колонки.Добавить("Родитель", ОписаниеТиповС);
	ТаблицаМатериалы.ЗаполнитьЗначения(УИ, "Родитель");
	ТаблицаМатериалы.Колонки.Добавить("УИ", ОписаниеТиповС);
	
	// Текущие материалы сразу добавляем в "дерево" спецификаций т.к. проверки внутри уже отработаны
	Для каждого Материал Из ТаблицаМатериалы Цикл
		Материал.УИ = Строка(Новый УникальныйИдентификатор());
		НоваяСтрока = ВсеВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Материал);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.УИ,
	|	Материалы.НомерСтроки,
	|	Материалы.Спецификация,
	|	Материалы.Номенклатура,
	|	Материалы.Характеристика,
	|	Материалы.СпецификацияПолуфабриката
	|ПОМЕСТИТЬ МатериалыИсходные
	|ИЗ
	|	&Материалы КАК Материалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИсходные.УИ КАК Родитель,
	|	МатериалыИсходные.НомерСтроки КАК НомерСтроки,
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка КАК Спецификация,
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика,
	|	ВЫРАЗИТЬ(РесурсныеСпецификацииМатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.РесурсныеСпецификации) КАК СпецификацияПолуфабриката,
	|	РесурсныеСпецификации.Код
	|ИЗ
	|	МатериалыИсходные КАК МатериалыИсходные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|				ПО РесурсныеСпецификацииМатериалыИУслуги.Ссылка = РесурсныеСпецификации.Ссылка
	|			ПО РесурсныеСпецификацииВыходныеИзделия.Ссылка = РесурсныеСпецификацииМатериалыИУслуги.Ссылка
	|		ПО МатериалыИсходные.Спецификация <> РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И МатериалыИсходные.СпецификацияПолуфабриката = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И МатериалыИсходные.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|			И (МатериалыИсходные.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	РесурсныеСпецификацииМатериалыИУслуги.ПроизводитсяВПроцессе
	|	И РесурсныеСпецификацииМатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации";
	
	ШаблонТекстаОшибки = НСтр("ru = 'Выбранный материал с указанной спецификацией приводит к зацикливанию материалов и выходных изделий в спецификации ""%Спецификация%"" Код: %Код%'");
	
	Пока НЕ Отказ И ТаблицаМатериалы.Количество() > 0 Цикл
	
		Запрос.УстановитьПараметр("Материалы", ТаблицаМатериалы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаМатериалы = РезультатЗапроса.Выгрузить();
		ТаблицаМатериалы.Колонки.Добавить("УИ", ОписаниеТиповС);
		
		// Проверяем что материалы не содержатся в Выходных изделиях
		Для каждого Материал Из ТаблицаМатериалы Цикл
			
			Материал.УИ = Строка(Новый УникальныйИдентификатор());
			
			Родитель = Материал.Родитель;
			Отбор = Новый Структура("Номенклатура, Характеристика, Спецификация");
			ЗаполнитьЗначенияСвойств(Отбор, Материал);
			
			Пока Истина Цикл
				
				Отбор.Вставить("УИ", Родитель);
				
				НайденныеСтроки = ВсеВыходныеИзделия.НайтиСтроки(Отбор);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ТекстОшибки = ШаблонТекстаОшибки;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Спецификация%", Строка(Материал.Спецификация));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Код%", Материал.Код);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
						Спецификация,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Материал.НомерСтроки, "ИсточникПолученияПолуфабриката"),
						,
						Отказ);
					
				КонецЦикла; 
				
				Если НЕ ЗначениеЗаполнено(Родитель) Тогда
					Прервать;
				КонецЕсли; 
				
				// Проверяем следующий уровень цепочки спецификаций по данной "ветке"
				НайденныеСтроки = ВсеВыходныеИзделия.НайтиСтроки(Новый Структура("УИ", Родитель));
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Родитель = НайденныеСтроки[0].Родитель;
				Иначе
					Прервать; // Прерывает т.к. возможно не корректные данные.
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		// Копируем проверенные материалы в выходные изделия для последующей проверки
		Для каждого Материал Из ТаблицаМатериалы Цикл
			НоваяСтрока = ВсеВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Материал);
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает спецификации, в которые входит полуфабрикат производимый по указанной спецификации
//
// Параметры:
//  Спецификация	 - СправочникСсылка.РесурсныеСпецификации	 - спецификация полуфабриката производимого в процессе
//  Напрямую		 - Булево									 - признак, включать полуфабрикаты зависимые напрямую
//  ЧерезАвтоВыбор	 - Булево									 - признак, включать полуфабрикаты с автовыбором спецификаций
// 
// Возвращаемое значение:
//   - Массив, зависимые спецификации
//
Функция ЗависимыеСпецификации(Спецификация, Напрямую = Истина, ЧерезАвтоВыбор = Истина) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	Если Напрямую Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Полуфабрикаты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Полуфабрикаты
			|ГДЕ
			|	Полуфабрикаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
			|	И Полуфабрикаты.ИсточникПолученияПолуфабриката = &Спецификация
			|	И Полуфабрикаты.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ЧерезАвтоВыбор Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Полуфабрикаты.Ссылка
			|ИЗ
			|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Полуфабрикаты
			|		ПО ОсновныеСпецификации.Номенклатура = Полуфабрикаты.Номенклатура
			|			И (ОсновныеСпецификации.Характеристика = Полуфабрикаты.Характеристика
			|				ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|			И (ОсновныеСпецификации.Подразделение = Полуфабрикаты.Этап.Подразделение
			|				ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
			|			И (Полуфабрикаты.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации))
			|			И (Полуфабрикаты.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
			|ГДЕ
			|	ОсновныеСпецификации.Спецификация = &Спецификация
			|	И НЕ ИСТИНА В
			|				(ВЫБРАТЬ
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.ОсновныеСпецификации КАК Т
			|				ГДЕ
			|					Т.Номенклатура = Полуфабрикаты.Номенклатура
			|				
			|					И (
			|						ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|						И Т.Характеристика = Полуфабрикаты.Характеристика
			|						И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|					
			|						ИЛИ
			|					
			|						ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|						И Т.Подразделение = Полуфабрикаты.Этап.Подразделение
			|						И Т.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|						И Полуфабрикаты.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|					
			|					)
			|					
			|					И Т.Спецификация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует) 
			|					И Т.Спецификация <> &Спецификация)
			|	И Полуфабрикаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, "
				|
				|ОБЪЕДИНИТЬ
				|
				|");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Функция - конструктор структуры для выборки данных ресурсной спецификации.
// 
// Возвращаемое значение:
//  Структура - структура с параметрами выборки данных спецификации.
//
Функция ПараметрыДляПолученияДанныхСпецификации() Экспорт

	ДанныеПоНоменклатуре = Новый Структура;
	ДанныеПоНоменклатуре.Вставить("Распоряжение");
	
	ДанныеПоНоменклатуре.Вставить("Номенклатура");
	ДанныеПоНоменклатуре.Вставить("Характеристика");
	ДанныеПоНоменклатуре.Вставить("Подразделение");
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер");
	ДанныеПоНоменклатуре.Вставить("Спецификация");
	
	ДанныеПоНоменклатуре.Вставить("Этап");
	
	ДанныеПоНоменклатуре.Вставить("Количество");
	ДанныеПоНоменклатуре.Вставить("ДнейДоОкончания");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Выполняет разузлование продукции и полуфабрикатов и для каждого элемента в структуре изделий
// получает заданный набор данных ресурсной спецификации. В процессе обработки так же выполняется
// укрупнение партий выпуска продукции и полуфабрикатов.
//
// Параметры:
//  ВходящиеПотребности - ТаблицаЗначений - таблица с продукцией (полуфабрикатами), структуру производства
//		которых необходимо получить.
//  ПолучитьПредставления - Булево - Истина, если нужно получить представления ссылочных полей.
//	ПолучитьСведенияАвтовыбора - Булево - Истина, если нужно получить сведения автовыбора.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы используемые для получения
//		способа обеспечения:
//       * ВтСпособыПолученияМатериалов - ВременнаяТаблицаЗапроса - таблица с полями Номенклатура, Характеристика,
//			Назначение, Распоряжение, Склад, ВариантОбеспечения.
//	ПереченьДанных - Массив - Содержит перечень данных спецификации, которые требуеется получить.
//		Неопределено - если нужно получить весь набор данных.
// 
// Возвращаемое значение:
//  Структура - структура с элементами:
//		* ДанныеСпецификаций - Массив, Неопределено - элементами массива являются структуры, содержащие данные ресурсных спецификаций.
//		* ЕстьОшибка - Булево - Истина если при разузловании возникла ошибка (ДанныеСпецификаций в этом случае имеют значение Неопределено).
//		* ОшибкаТекст - Строка - описание возникшей ошибки.
//		* ОшибкаСсылка - СправочникСсылка, ДокументСсылка - ссылка на объект, с которым связана ошибка.
//
Функция ПолучитьДанныеСпецификацийИСгруппироватьПотребности(
															ВходящиеПотребности,
															ПолучитьПредставления,
															ПолучитьСведенияАвтовыбора,
															МенеджерВременныхТаблиц = Неопределено,
															ПереченьДанных = Неопределено,
															ИспользоватьПроизводство2_2 = Истина,
															РассчитыватьДляПлановПроизводства = Истина) Экспорт
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ПолучитьПредставления", ПолучитьПредставления);
	ПараметрыВыборки.Вставить("ПолучитьСведенияАвтовыбора", ПолучитьСведенияАвтовыбора);
	ПараметрыВыборки.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ПараметрыВыборки.Вставить("ПереченьДанных", ПереченьДанных);
	ПараметрыВыборки.Вставить("ИспользоватьПроизводство2_2", ИспользоватьПроизводство2_2);
	ПараметрыВыборки.Вставить("РассчитыватьДляПлановПроизводства", РассчитыватьДляПлановПроизводства);
	
	КэшированныеСпецификации = ИнициализироватьКэшСпецификаций();
	
	ОписаниеОшибки = ИнициализироватьОписаниеОшибки();
	
	Потребности = РазузловатьПотребностиИЗаполнитьСрокиОбеспечения(
		ВходящиеПотребности,
		ПараметрыВыборки,
		КэшированныеСпецификации,
		ОписаниеОшибки);
	
	Если НЕ ОписаниеОшибки.ЕстьОшибка Тогда
		
		Выпуски = РассчитатьВыпускПоПотребностям(
			Потребности,
			ПараметрыВыборки,
			КэшированныеСпецификации);
		
		ДанныеСпецификаций = ДанныеСпецификацийПоСгруппированнымПотребностям(
			Выпуски,
			Потребности,
			ПараметрыВыборки,
			КэшированныеСпецификации);
	    
	Иначе
		
		ДанныеСпецификаций = Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеСпецификаций", ДанныеСпецификаций);
	
	Для каждого Элемент Из ОписаниеОшибки Цикл
		Результат.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(
				ДанныеВыбора, 
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ПолучитьСписокДействующихСпецификаций") Тогда
		ВыбраннаяФорма = "ВыборДействующихСпецификаций";
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхСпецификации

Процедура ДобавитьПредставленияВЗапрос(ТекстЗапроса)
            
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЭтапыПроизводства_Представления", 	
									"ЕСТЬNULL(ЭтапыПроизводства.Подразделение.Представление, """") КАК ПодразделениеПредставление,
									|	ЕСТЬNULL(ЭтапыПроизводства.МаршрутнаяКарта.Представление, """") КАК МаршрутнаяКартаПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВидыРабочихЦентров_Представления", 	
									"ЕСТЬNULL(ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.Представление, """") КАК ВидРабочегоЦентраПредставление,");
									
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВыходныеИзделия_Представления",
									"ЕСТЬNULL(ВыходныеИзделия.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВыходныеИзделия.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВыходныеИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВыходныеИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ВозвратныеОтходы_Представления",
									"ЕСТЬNULL(ВозвратныеОтходы.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА ВозвратныеОтходы.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(ВозвратныеОтходы.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(ВозвратныеОтходы.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(ВозвратныеОтходы.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//МатериалыИУслуги_Представления",
									"ЕСТЬNULL(МатериалыИУслуги.Этап.Представление, """") КАК ЭтапПредставление,
									|	ВЫБОР
									|		КОГДА МатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
									|			ТОГДА ЕСТЬNULL(МатериалыИУслуги.Упаковка.Представление, """")
									|		ИНАЧЕ ЕСТЬNULL(МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.Представление, """")
									|	КОНЕЦ КАК ЕдИзм,
									|	ЕСТЬNULL(МатериалыИУслуги.Номенклатура.Представление, """") КАК НоменклатураПредставление,
									|	ЕСТЬNULL(МатериалыИУслуги.Характеристика.Представление, """") КАК ХарактеристикаПредставление,");

КонецПроцедуры

Функция ДанныеСпецификации(
						ДанныеПоНоменклатуре,
						ПолучитьПредставления,
						ПолучитьСведенияАвтовыбора,
						ИспользоватьПроизводство2_2,
						ПереченьДанных,
						МенеджерВременныхТаблиц = Неопределено,
						ДоступныРаботы = Истина,
						РассчитыватьДляПлановПроизводства = Ложь)
	
	#Область ИнициализацияПараметров
	
	Если ПереченьДанных = Неопределено Тогда
		ЗаполнитьПереченьДанныхСпецификации(ПереченьДанных);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИндексРезультата = 0;
	ТекстЗапроса = "";
	
	#КонецОбласти

	#Область ВтСпособыПолученияМатериалов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтСпособыПолученияМатериалов") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + ПроизводствоСервер.ТекстЗапросаВТСпособыПолученияМатериаловПустая();
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВтФорматыСкладов
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтФорматыСкладов") = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь);
		ИндексРезультата = ИндексРезультата + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
#Область РеквизитыСпецификации
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Представление КАК СпецификацияПредставление,
		|	РесурсныеСпецификации.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
		|	РесурсныеСпецификации.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами,
		|	РесурсныеСпецификации.ОптимальнаяПартияЗапуска КАК ОптимальнаяПартияЗапуска,
		|	РесурсныеСпецификации.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания,
		|	РесурсныеСпецификации.МаксимальныйСрокПролеживанияВыходныхИзделий КАК МаксимальныйСрокПролеживанияВДнях
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка = &Спецификация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
#КонецОбласти

#Область Этапы
	Если Не ПереченьДанных.Найти("Этапы") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ЭтапыПроизводства_Представления
		|	ЭтапыПроизводства.Ссылка                                  КАК Этап,
		|	ЭтапыПроизводства.Владелец                                КАК Спецификация,
		|	ЭтапыПроизводства.Представление                           КАК ЭтапПредставление,
		|	ЭтапыПроизводства.НомерЭтапа                              КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа                    КАК НомерСледующегоЭтапа,
		|	ЭтапыПроизводства.Подразделение                           КАК Подразделение,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)           КАК КоличествоИзделие,
		|	1                                                         КАК Количество,
		|	ЭтапыПроизводства.ПланироватьРаботуВидовРабочихЦентров    КАК ПланироватьРаботуВидовРабочихЦентров,
		|	ЭтапыПроизводства.Непрерывный                             КАК Непрерывный,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий  КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
		|	ЭтапыПроизводства.ДлительностьЭтапа                       КАК ДлительностьЭтапа,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа       КАК ЕдиницаИзмеренияДлительностиЭтапа,
		|	ЭтапыПроизводства.ПредварительныйБуфер                    КАК ПредварительныйБуфер,
		|	ЭтапыПроизводства.ЗавершающийБуфер                        КАК ЗавершающийБуфер,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияПредварительногоБуфера  КАК ЕдиницаИзмеренияПредварительногоБуфера,
		|	ЭтапыПроизводства.ЕдиницаИзмеренияЗавершающегоБуфера      КАК ЕдиницаИзмеренияЗавершающегоБуфера,
		|	ЭтапыПроизводства.МаршрутнаяКарта                         КАК МаршрутнаяКарта,
		|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты              КАК КоэффициентМаршрутнойКарты,
		|	ЭтапыПроизводства.Описание                                КАК Описание,
		|	ЭтапыПроизводства.ПроизводствоНаСтороне                   КАК ПроизводствоНаСтороне,
		|	ЭтапыПроизводства.Партнер                                 КАК Партнер,
		|	ЭтапыПроизводства.ГрафикРаботыПартнера                    КАК ГрафикРаботыПартнера,
		|	ЭтапыПроизводства.УслугаПереработчика                     КАК УслугаПереработчика,
		|	ЭтапыПроизводства.ХарактеристикаУслугиПереработчика       КАК ХарактеристикаУслугиПереработчика,
		|	ЭтапыПроизводства.СтатьяКалькуляции                       КАК СтатьяКалькуляции,
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания,0) КАК ДнейДоОкончания,
		|	ВЫБОР ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА 86400
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА 86400
		|		ИНАЧЕ 1
		|	КОНЕЦ * ЭтапыПроизводства.ДлительностьЭтапа 			  КАК ДлительностьЭтапаВСекундах,
		|	ВЫБОР ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 86400
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 1440
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 24
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа
		|		ИНАЧЕ 1
		|	КОНЕЦ													  КАК ДлительностьЭтапаВДнях,
		|	0                                                         КАК КлючСвязи,
		|	ДАТАВРЕМЯ(1,1,1)	                                      КАК ЖелаемаяДатаОбеспечения
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = ЭтапыПроизводства.Владелец
		|			И (ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура)
		|			И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|				ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
		|
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И &УсловиеЭтапыПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
#КонецОбласти
	
#Область ВыходныеИзделия
	Если Не ПереченьДанных.Найти("ВыходныеИзделия") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ВыходныеИзделия_Представления
		|	ВыходныеИзделия.НомерСтроки                       КАК НомерСтроки,
		|	ВыходныеИзделия.Номенклатура                      КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВыходныеИзделия.Характеристика
		|		КОГДА ВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА &Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                             КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|	ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ВыходныеИзделия.Упаковка                          КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)   КАК КоличествоИзделие,
		|	ВыходныеИзделия.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	ВыходныеИзделия.Количество                        КАК Количество,
		|	ВыходныеИзделия.Этап                              КАК Этап,
		|	ВыходныеИзделия.Этап.Подразделение                КАК ПодразделениеЭтапа,
		|	ВыходныеИзделия.ДоляСтоимости                     КАК ДоляСтоимости,
		|	&ТекстПоляСкладМатериалов_ВыходныеИзделия 		  КАК СкладМатериалов,
		|	&ТекстПолеПолучатель2_2_ВыходныеИзделия 		  КАК Получатель2_2,
		|	ВыходныеИзделия.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|	ПО ИсходноеВыходноеИзделие.Ссылка = ВыходныеИзделия.Ссылка
		|		И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|		И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|			ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|	// Сюда подставляется запрос для получения склада
		|	%ТекстЗапросаНастройкиПередачиМатериалов_ВыходныеИзделия%
		|
		|	%ТекстСоединенияПолучатель2_2_ВыходныеИзделия%
		|
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Спецификация
		|	И &УсловиеВыходныеИзделияЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВыходныеИзделия.Упаковка",
			"ВыходныеИзделия.Номенклатура"));
		
		ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
											"ИсходноеВыходноеИзделие", "Этап.Подразделение", Ложь);	
											
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстЗапросаНастройкиПередачиМатериалов_ВыходныеИзделия%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляСкладМатериалов_ВыходныеИзделия",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстЗапросаПолучатель = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
											"ВыходныеИзделия", "Этап.Подразделение", Истина);	
											
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияПолучатель2_2_ВыходныеИзделия%",
							ТекстЗапросаПолучатель.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеПолучатель2_2_ВыходныеИзделия",
							ТекстЗапросаПолучатель.ТекстПолеСклад);
		
	КонецЕсли;
#КонецОбласти

#Область ВозвратныеОтходы
	Если Не ПереченьДанных.Найти("ВозвратныеОтходы") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ВозвратныеОтходы_Представления
		|	ВозвратныеОтходы.НомерСтроки                       КАК НомерСтроки,
		|	ВозвратныеОтходы.Номенклатура                      КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВозвратныеОтходы.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                              КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ЛюбаяХарактеристика,
		|	ВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ВозвратныеОтходы.Упаковка                          КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)      КАК КоэффициентУпаковки,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)    КАК КоличествоИзделие,
		|	ВозвратныеОтходы.КоличествоУпаковок                КАК КоличествоУпаковок,
		|	ВозвратныеОтходы.Количество                        КАК Количество,
		|	ВозвратныеОтходы.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|	ВозвратныеОтходы.ОписаниеИзделия                   КАК ОписаниеИзделия,
		|	ВозвратныеОтходы.Этап                              КАК Этап,
		|	ВозвратныеОтходы.Этап.Подразделение                КАК ПодразделениеЭтапа,
		|	&ТекстПоляСкладМатериалов_ВозвратныеОтходы		   КАК СкладМатериалов,
		|	&ТекстПолеПолучатель2_2_ВозвратныеОтходы 		   КАК Получатель2_2,
		|	ВозвратныеОтходы.Номенклатура.ТипНоменклатуры      КАК ТипНоменклатуры
		|
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ВозвратныеОтходы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|	ПО ИсходноеВыходноеИзделие.Ссылка = ВозвратныеОтходы.Ссылка
		|		И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|		И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|			ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|	// Сюда подставляется запрос для получения склада
		|	%ТекстЗапросаНастройкиПередачиМатериалов_ВозвратныеОтходы%
		|
		|	%ТекстСоединенияПолучатель2_2_ВозвратныеОтходы%
		|
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Спецификация
		|	И &УсловиеВозвратныеОтходыЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВозвратныеОтходы.Упаковка",
			"ВозвратныеОтходы.Номенклатура"));
		
		ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
											"ИсходноеВыходноеИзделие", "Этап.Подразделение", Ложь);	
											
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстЗапросаНастройкиПередачиМатериалов_ВозвратныеОтходы%",
							ТекстЗапросаДляПолученияСклада.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПоляСкладМатериалов_ВозвратныеОтходы",
							ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
		ТекстЗапросаПолучатель = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
											"ВозвратныеОтходы", "Этап.Подразделение", Истина);	
											
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"%ТекстСоединенияПолучатель2_2_ВозвратныеОтходы%",
							ТекстЗапросаПолучатель.ТекстСоединения);
							
		ТекстЗапроса = СтрЗаменить(
							ТекстЗапроса, 
							"&ТекстПолеПолучатель2_2_ВозвратныеОтходы",
							ТекстЗапросаПолучатель.ТекстПолеСклад);
		
	КонецЕсли;
#КонецОбласти

#Область МатериалыИУслуги
	Если Не ПереченьДанных.Найти("МатериалыИУслуги") = Неопределено Тогда
	
		// При модификации необходимо внести изменения в метод
		// ПланированиеПроизводства.СпособПолученияМатериалаПоУмолчанию
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//МатериалыИУслуги_Представления
		|	МатериалыИУслуги.НомерСтроки                      КАК НомерСтроки,
		|	МатериалыИУслуги.Номенклатура                     КАК Номенклатура,
		|	МатериалыИУслуги.Характеристика                   КАК Характеристика,
		|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры     КАК ТипНоменклатуры,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура.ИспользованиеХарактеристик В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                             КАК ЛюбаяХарактеристика,
		|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
		|	МатериалыИУслуги.Упаковка                         КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)   КАК КоличествоИзделие,
		|	МатериалыИУслуги.КоличествоУпаковок               КАК КоличествоУпаковок,
		|	МатериалыИУслуги.Количество                       КАК Количество,
		|	МатериалыИУслуги.Этап                             КАК Этап,
		|	&ТекстПолеСклад 								  КАК Склад,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)         КАК ЭтоЦеховаяКладовая,
		|	&ТекстПолеВариантОбеспечения 					  КАК ВариантОбеспечения,
		|	&ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения   КАК ЗапрещеноИзменятьПараметрыОбеспечения,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЛОЖЬ
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе ТОГДА
		|			ВЫБОР 
		|				КОГДА МатериалыИУслуги.Этап.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
		|					ТОГДА ЛОЖЬ
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ЛОЖЬ
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Этап.Подразделение
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|				ИЛИ МатериалыИУслуги.Этап.ПроизводствоНаСтороне
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ЗаказатьНаСклад,
		|	ВЫБОР 
		|		КОГДА (&ПодразделениеДиспетчер = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) 
		|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = &ПодразделениеДиспетчер
		|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК Запланировать,
		|	МатериалыИУслуги.СтатьяКалькуляции                 КАК СтатьяКалькуляции,
		|	ВЫБОР 
		|		КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|				ИЛИ МатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИспользуетсяАвтовыбор,
		|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры      КАК СпособАвтовыбораНоменклатуры,
		|	МатериалыИУслуги.СпособАвтовыбораХарактеристики    КАК СпособАвтовыбораХарактеристики,
		|	МатериалыИУслуги.СвойствоСодержащееНоменклатуру    КАК СвойствоСодержащееНоменклатуру,
		
		|	МатериалыИУслуги.ОтборСвойство                          КАК ОтборСвойство,
		|	МатериалыИУслуги.ОтборЗначениеСвойства                  КАК ОтборЗначениеСвойства,
		|	ЕСТЬNULL(СвойстваНоменклатуры.Значение, НЕОПРЕДЕЛЕНО)   КАК ЗначениеСвойстваНоменклатуры,
		|	ЕСТЬNULL(СвойстваХарактеристики.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеСвойстваХарактеристики,
		
		|	МатериалыИУслуги.АлгоритмРасчетаКоличества                КАК АлгоритмРасчетаКоличества,
		|	МатериалыИУслуги.ПрименениеМатериала                      КАК ПрименениеМатериала,
		|	МатериалыИУслуги.КлючСвязи                                КАК КлючСвязи,
		|	МатериалыИУслуги.ПроизводитсяВПроцессе                    КАК ПроизводитсяВПроцессе,
		|	МатериалыИУслуги.ПроизводитсяВПроцессе                    КАК Производится,
		|	МатериалыИУслуги.СпособПолученияМатериала                 КАК СпособПолученияМатериала,
		|	МатериалыИУслуги.ИсточникПолученияПолуфабриката           КАК ИсточникПолученияПолуфабриката,
		|	МатериалыИУслуги.ИсточникПолученияПолуфабриката           КАК Спецификация,
		|	ВЫБОР
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации)
		|		КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
		|				И МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка)
		|
		|	КОНЕЦ                                                     КАК СпособПолученияПолуфабриката,
		|	МатериалыИУслуги.Этап.ПроизводствоНаСтороне               КАК ПроизводствоНаСтороне,
		
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания,0) КАК ДнейДоОкончания,
		
		|	МатериалыИУслуги.Этап.Подразделение                       КАК ПодразделениеЭтапа,
		|	МатериалыИУслуги.Этап.Подразделение                       КАК Подразделение,
		|	&ДатаПотребности                                          КАК ДатаПотребности
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = МатериалыИУслуги.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|			И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|				ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ПроизводимоеВПроцессеИзделие
		|		ПО ПроизводимоеВПроцессеИзделие.Ссылка = МатериалыИУслуги.ИсточникПолученияПолуфабриката
		|			И МатериалыИУслуги.ПроизводитсяВПроцессе
		|			И ПроизводимоеВПроцессеИзделие.Номенклатура = МатериалыИУслуги.Номенклатура
		|			И (ПроизводимоеВПроцессеИзделие.Характеристика = МатериалыИУслуги.Характеристика
		|				ИЛИ ПроизводимоеВПроцессеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
		|		ПО МатериалыИУслуги.ОтборСвойство = СвойстваНоменклатуры.Свойство
		|			И СвойстваНоменклатуры.Ссылка = &Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
		|		ПО МатериалыИУслуги.ОтборСвойство = СвойстваХарактеристики.Свойство
		|			И СвойстваХарактеристики.Ссылка = &Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = МатериалыИУслуги.Этап
		|
		|		// Сюда подставляется запрос для получения склада, варианта обеспечения
		|		%ТекстЗапросаПараметрыОбеспечения%
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО &ТекстПолеСклад = СпрСклады.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	МатериалыИУслуги.Ссылка = &Спецификация
		|	И &ДоступныРаботы
		|	И &УсловиеМатериалыИУслугиЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если НЕ ДоступныРаботы Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"&ДоступныРаботы",
				"МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (
				|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
				|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДоступныРаботы", "");
		КонецЕсли; 
		
		ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"МатериалыИУслуги.Упаковка",
			"МатериалыИУслуги.Номенклатура");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			ТекстЗапросаКоэффициентУпаковки);
			
		ТекстЗапросаПараметрыОбеспечения = ПроизводствоСервер.ТекстЗапросаПараметрыОбеспечения(
			"СпособПолученияМатериала",
			"Этап.Подразделение",
			ИспользоватьПроизводство2_2,
			РассчитыватьДляПлановПроизводства);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеСклад",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеСклад);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеВариантОбеспечения",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеВариантОбеспечения);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения);
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстПолеОснование",
			ТекстЗапросаПараметрыОбеспечения.ТекстПолеОснование);
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"%ТекстЗапросаПараметрыОбеспечения%",
			ТекстЗапросаПараметрыОбеспечения.ТекстСоединения);
			
		ПоляСоединения = "МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика,СпрСклады.Ссылка";
		ИмяПараметра = "ПодстановкаОсновногоСпособаОбеспечения";
		ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
			ТекстЗапроса, ИмяПараметра, ПоляСоединения);
		
	КонецЕсли;
#КонецОбласти
	
#Область Трудозатраты
	Если Не ПереченьДанных.Найти("Трудозатраты") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Трудозатраты.НомерСтроки                                  КАК НомерСтроки,
		|	Трудозатраты.ВидРабот                                     КАК ВидРабот,
		|	Трудозатраты.ВидРабот.ЕдиницаИзмерения                    КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)           КАК КоличествоИзделие,
		|	Трудозатраты.Количество                                   КАК Количество,
		|	Трудозатраты.СтатьяКалькуляции                            КАК СтатьяКалькуляции,
		|	Трудозатраты.НазначениеРабот                              КАК НазначениеРабот,
		|	Трудозатраты.Этап                                         КАК Этап,
		
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания,0) КАК ДнейДоОкончания,
		
		|	Трудозатраты.Этап.ДлительностьЭтапа                       КАК ДлительностьЭтапа,
		|	ВЫБОР Трудозатраты.Этап.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Трудозатраты.Этап.ДлительностьЭтапа / 86400
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Трудозатраты.Этап.ДлительностьЭтапа / 1440
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Трудозатраты.Этап.ДлительностьЭтапа / 24
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Трудозатраты.Этап.ДлительностьЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА Трудозатраты.Этап.ДлительностьЭтапа
		|		ИНАЧЕ 1
		|	КОНЕЦ                                                     КАК ДлительностьЭтапаВДнях,
		|	Трудозатраты.Этап.Подразделение                           КАК ПодразделениеЭтапа,
		|	Трудозатраты.Этап.Подразделение                           КАК Подразделение
		|ИЗ
		|	Справочник.РесурсныеСпецификации.Трудозатраты КАК Трудозатраты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = Трудозатраты.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|			И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|				ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = Трудозатраты.Этап
		|
		|ГДЕ
		|	Трудозатраты.Ссылка = &Спецификация
		|	И &УсловиеТрудозатратыЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
#КонецОбласти

//++ НЕ УТКА
#Область ВидыРабочихЦентров
	Если Не ПереченьДанных.Найти("ВидыРабочихЦентров") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	//ВидыРабочихЦентров_Представления
		|	ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра                                     КАК ВидРабочегоЦентра,
		|	ВЫБОР
		|		КОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И НЕ ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВремяРаботы
		|		КОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВариантНаладки.ВремяРаботы
		|		ИНАЧЕ ТаблицаВидыРабочихЦентров.ВремяРаботы                                           
		|	КОНЕЦ                                                                           КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И НЕ ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ЕдиницаИзмерения
		|		КОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВариантНаладки.ЕдиницаИзмерения
		|		ИНАЧЕ ТаблицаВидыРабочихЦентров.ЕдиницаИзмерения                                           
		|	КОНЕЦ                                                                           КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаВидыРабочихЦентров.Занятость                                           
		|	КОНЕЦ                                                                           КАК Занятость,
		|	ТаблицаВидыРабочихЦентров.ВариантНаладки                                        КАК ВариантНаладки,
		|	ТаблицаВидыРабочихЦентров.Загрузка                                              КАК Загрузка,
		|	ЕСТЬNULL(ИсходноеВыходноеИзделие.Количество, 1)                                 КАК КоличествоИзделие,
		|	ЭтапыПроизводства.Ссылка                                                        КАК Этап,
		|	ЭтапыПроизводства.ДлительностьЭтапа                                             КАК ДлительностьЭтапа,
		|	ВЫБОР ЭтапыПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 86400
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 1440
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа / 24
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА ЭтапыПроизводства.ДлительностьЭтапа
		|		ИНАЧЕ 1
		|	КОНЕЦ                                                                           КАК ДлительностьЭтапаВДнях,
		
		|	ЕСТЬNULL(НормативнаяДлительностьЭтапов.ДнейДоОкончания,0)                       КАК ДнейДоОкончания,

		|	ЭтапыПроизводства.Подразделение                                                 КАК ПодразделениеЭтапа,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий         КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТаблицаВидыРабочихЦентров
		|		ПО ТаблицаВидыРабочихЦентров.Ссылка = ЭтапыПроизводства.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = ЭтапыПроизводства.Владелец
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|			И (ИсходноеВыходноеИзделие.Характеристика = &Характеристика
		|				ИЛИ ИсходноеВыходноеИзделие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК НормативнаяДлительностьЭтапов
		|		ПО НормативнаяДлительностьЭтапов.Этап = ЭтапыПроизводства.Ссылка
		|
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И (НЕ ЭтапыПроизводства.ПометкаУдаления)
		|	И &УсловиеВидыРабочихЦентровЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаВидыРабочихЦентров.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
#КонецОбласти
	
#Область АльтернативныеВидыРабочихЦентров
	Если Не ПереченьДанных.Найти("АльтернативныеВидыРабочихЦентров") = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И НЕ ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ВремяРаботы
		|		КОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВариантНаладки.ВремяРаботы
		|		ИНАЧЕ ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВремяРаботы                                           
		|	КОНЕЦ                                                                           КАК ВремяРаботы,
		|	ВЫБОР
		|		КОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И НЕ ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ЕдиницаИзмерения
		|		КОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
		|			И ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
		|			ТОГДА ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВариантНаладки.ЕдиницаИзмерения
		|		ИНАЧЕ ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения                                           
		|	КОНЕЦ                                                                           КАК ЕдиницаИзмерения,
		|	ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.ВариантНаладки КАК ВариантНаладки,
		|	ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.Загрузка КАК Загрузка,
		|	ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра КАК ОсновнойВидРабочегоЦентра,
		|	ЭтапыПроизводства.Ссылка КАК Этап,
		|	ЭтапыПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий         КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ТаблицаВидыРабочихЦентров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.АльтернативныеВидыРабочихЦентров КАК ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров
		|			ПО ТаблицаВидыРабочихЦентров.Ссылка = ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.Ссылка
		|				И ТаблицаВидыРабочихЦентров.КлючСвязи = ЭтапыПроизводстваАльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров
		|		ПО ЭтапыПроизводства.Ссылка = ТаблицаВидыРабочихЦентров.Ссылка
		|ГДЕ
		|	ЭтапыПроизводства.Владелец = &Спецификация
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И &УсловиеВидыРабочихЦентровЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаВидыРабочихЦентров.НомерСтроки";
	КонецЕсли;
	#КонецОбласти
//-- НЕ УТКА
	
	Если ПолучитьПредставления Тогда
		
		ДобавитьПредставленияВЗапрос(ТекстЗапроса);
		
	КонецЕсли;
	
	// Если передан этап то данные нужно получить по этому этапу
	Если ДанныеПоНоменклатуре.Свойство("Этап")
		И ЗначениеЗаполнено(ДанныеПоНоменклатуре.Этап) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЭтапыПроизводства",      "ЭтапыПроизводства.Ссылка = &Этап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыходныеИзделияЭтап",    "ВыходныеИзделия.Этап = &Этап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВозвратныеОтходыЭтап",   "ВозвратныеОтходы.Этап = &Этап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМатериалыИУслугиЭтап",   "МатериалыИУслуги.Этап = &Этап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТрудозатратыЭтап",       "Трудозатраты.Этап = &Этап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидыРабочихЦентровЭтап", "ЭтапыПроизводства.Ссылка = &Этап");
		
		ОтборЭтап = ДанныеПоНоменклатуре.Этап;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЭтапыПроизводства", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеВыходныеИзделияЭтап", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеВозвратныеОтходыЭтап", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеМатериалыИУслугиЭтап", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеТрудозатратыЭтап", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеВидыРабочихЦентровЭтап", "");
		
		ОтборЭтап = Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	#Область УстановкаПараметровЗапроса
	
	Запрос.УстановитьПараметр("Номенклатура",     ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("Спецификация",     ДанныеПоНоменклатуре.Спецификация);
	Запрос.УстановитьПараметр("Этап",             ОтборЭтап);
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	
	Если ДанныеПоНоменклатуре.Свойство("ПодразделениеДиспетчер") Тогда
		Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
	Иначе
		Запрос.УстановитьПараметр("ПодразделениеДиспетчер", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("ДатаПотребности") Тогда
		Запрос.УстановитьПараметр("ДатаПотребности", ДанныеПоНоменклатуре.ДатаПотребности);
	Иначе
		Запрос.УстановитьПараметр("ДатаПотребности", Неопределено);
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("Распоряжение") Тогда
		Запрос.УстановитьПараметр("Распоряжение", ДанныеПоНоменклатуре.Распоряжение);
	Иначе
		Запрос.УстановитьПараметр("Распоряжение", Неопределено);
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Свойство("Назначение") Тогда
		Запрос.УстановитьПараметр("Назначение", ДанныеПоНоменклатуре.Назначение);
	Иначе
		Запрос.УстановитьПараметр("Назначение", Неопределено);
	КонецЕсли;
	
	#КонецОбласти
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеШапки = МассивРезультатов[ИндексРезультата].Выбрать();
	ДанныеШапки.Следующий();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Спецификация", ДанныеПоНоменклатуре.Спецификация);
	СтруктураДанных.Вставить("СпецификацияПредставление", ДанныеШапки.СпецификацияПредставление);
	СтруктураДанных.Вставить("МногоэтапныйПроизводственныйПроцесс",
		ДанныеШапки.МногоэтапныйПроизводственныйПроцесс);
	СтруктураДанных.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами",
		ДанныеШапки.ОптимальноеКоличествоПередачиМеждуЭтапами);
	СтруктураДанных.Вставить("ОптимальнаяПартияЗапуска", ДанныеШапки.ОптимальнаяПартияЗапуска);
	СтруктураДанных.Вставить("ОграниченСрокПролеживания", ДанныеШапки.ОграниченСрокПролеживания);
	СтруктураДанных.Вставить("МаксимальныйСрокПролеживанияВДнях", ДанныеШапки.МаксимальныйСрокПролеживанияВДнях);
	
	Для каждого ИмяНабораДанных Из ПереченьДанных Цикл
		
		ИндексРезультата = ИндексРезультата + 1;
		СтруктураДанных.Вставить(ИмяНабораДанных, МассивРезультатов[ИндексРезультата].Выгрузить());
		
		// Нужно удалить материалы не соответствующие отбору по свойствам продукции
		Если ИмяНабораДанных = "МатериалыИУслуги" Тогда
			
			УдалитьМатериалыНеСоответствующиеОтборуПоСвойствам(
				СтруктураДанных.МатериалыИУслуги);
			ЗаполнитьСпецификациюУПроизводимыхМатериалов(
				СтруктураДанных.МатериалыИУслуги,
				ДанныеПоНоменклатуре.Спецификация);
			
		КонецЕсли;
		
		Если ИмяНабораДанных = "Этапы"
			ИЛИ ИмяНабораДанных = "Трудозатраты"
			ИЛИ ИмяНабораДанных = "ВидыРабочихЦентров" Тогда
			
			ОкруглитьДлительностьЭтапаВДнях(СтруктураДанных[ИмяНабораДанных]);
			
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Возврат СтруктураДанных;

КонецФункции

Процедура УдалитьМатериалыНеСоответствующиеОтборуПоСвойствам(МатериалыИУслуги)
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ОтборСвойство)
			И (
			// Свойства не заданы, т.е. имеют пустое значение
			ДанныеСтроки.ЗначениеСвойстваНоменклатуры = Неопределено
			И ДанныеСтроки.ЗначениеСвойстваХарактеристики = Неопределено
			И ЗначениеЗаполнено(ДанныеСтроки.ОтборЗначениеСвойства)
			
			// Свойство относится к продукции
			ИЛИ
			ДанныеСтроки.ЗначениеСвойстваНоменклатуры <> Неопределено
			И ДанныеСтроки.ЗначениеСвойстваНоменклатуры <> ДанныеСтроки.ОтборЗначениеСвойства
			
			// Свойство относится к характеристике
			ИЛИ
			ДанныеСтроки.ЗначениеСвойстваХарактеристики <> Неопределено
			И ДанныеСтроки.ЗначениеСвойстваХарактеристики <> ДанныеСтроки.ОтборЗначениеСвойства) Тогда
			
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		МатериалыИУслуги.Удалить(ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпецификациюУПроизводимыхМатериалов(МатериалыИУслуги, Владелец)
	
	Для каждого Строка Из МатериалыИУслуги Цикл
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации
			И НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
			
			ОсновнаяСпецификация = УправлениеДаннымиОбИзделияхВызовСервера.ПолучитьОсновнуюСпецификацию(
				Строка.Подразделение,
				Строка.Номенклатура,
				Строка.Характеристика,
				ТекущаяДатаСеанса());
			
			Если ЗначениеЗаполнено(ОсновнаяСпецификация) Тогда
				
				Строка.Спецификация                   = ОсновнаяСпецификация;
				Строка.ИсточникПолученияПолуфабриката = ОсновнаяСпецификация;
				
			Иначе
				
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не назначена основная спецификация для материала ""%1"" (спецификация ""%2"")'"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "Представление"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Представление"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличество(Количество, ЕстьУпаковки, ИсходнаяТаблица)

	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		Если СтрокаТаблицы.КоличествоИзделие = 0 Тогда
			
			СтрокаТаблицы.Количество = 0;
			
			Если ЕстьУпаковки Тогда
				СтрокаТаблицы.КоличествоУпаковок = 0;
			КонецЕсли; 
			
		Иначе
			
			КоличествоЦелое = Цел(Количество / СтрокаТаблицы.КоличествоИзделие);
			
			Если КоличествоЦелое * СтрокаТаблицы.КоличествоИзделие < Количество Тогда
				Коэффициент = КоличествоЦелое + 1;
			Иначе
				Коэффициент = КоличествоЦелое;
			КонецЕсли;

			Если ЕстьУпаковки Тогда
				СтрокаТаблицы.КоличествоУпаковок = Коэффициент * СтрокаТаблицы.КоличествоУпаковок;
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок * СтрокаТаблицы.КоэффициентУпаковки;
			Иначе
				СтрокаТаблицы.Количество = Коэффициент * СтрокаТаблицы.Количество;	
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗанятость(Количество, ИсходнаяТаблица)

	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		Если СтрокаТаблицы.КоличествоИзделие = 0 Тогда
			
			СтрокаТаблицы.Занятость = 0;
			
		Иначе
			
			КоличествоЦелое = Цел(Количество / СтрокаТаблицы.КоличествоИзделие);
			
			Если КоличествоЦелое * СтрокаТаблицы.КоличествоИзделие < Количество Тогда
				Коэффициент = КоличествоЦелое + 1;
			Иначе
				Коэффициент = КоличествоЦелое;
			КонецЕсли;
			
			СтрокаТаблицы.Занятость = Коэффициент * СтрокаТаблицы.Занятость;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, ИсходнаяТаблица)

	Если Не ДанныеПоНоменклатуре.Свойство("ДнейДоОкончания") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		СтрокаТаблицы.ДнейДоОкончания = СтрокаТаблицы.ДнейДоОкончания + ДанныеПоНоменклатуре.ДнейДоОкончания;
	КонецЦикла;

КонецПроцедуры
 
Функция КопияДанныхСпецификации(СтруктураДанных)

	КопияСтруктураДанных = Новый Структура;
	КопияСтруктураДанных.Вставить("Спецификация",                 			   СтруктураДанных.Спецификация);
	КопияСтруктураДанных.Вставить("СпецификацияПредставление",                 СтруктураДанных.СпецификацияПредставление);
	КопияСтруктураДанных.Вставить("МногоэтапныйПроизводственныйПроцесс",       СтруктураДанных.МногоэтапныйПроизводственныйПроцесс);
	КопияСтруктураДанных.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", СтруктураДанных.ОптимальноеКоличествоПередачиМеждуЭтапами);
	КопияСтруктураДанных.Вставить("ОптимальнаяПартияЗапуска", 				   СтруктураДанных.ОптимальнаяПартияЗапуска);
	КопияСтруктураДанных.Вставить("ОграниченСрокПролеживания", 				   СтруктураДанных.ОграниченСрокПролеживания);
	КопияСтруктураДанных.Вставить("МаксимальныйСрокПролеживанияВДнях", 		   СтруктураДанных.МаксимальныйСрокПролеживанияВДнях);
	
	ТаблицыДанных = Новый Массив;
	ТаблицыДанных.Добавить("Этапы");
	ТаблицыДанных.Добавить("ВыходныеИзделия");
	ТаблицыДанных.Добавить("ВозвратныеОтходы");
	ТаблицыДанных.Добавить("МатериалыИУслуги");
	ТаблицыДанных.Добавить("Трудозатраты");
	ТаблицыДанных.Добавить("ВидыРабочихЦентров");
	ТаблицыДанных.Добавить("АльтернативныеВидыРабочихЦентров");
	
	ВременнаяТаблица = Неопределено;
	Для Каждого ИмяТаблицы из ТаблицыДанных Цикл
		Если СтруктураДанных.Свойство(ИмяТаблицы, ВременнаяТаблица) Тогда
			КопияСтруктураДанных.Вставить(ИмяТаблицы, ВременнаяТаблица.Скопировать());
		КонецЕсли;
	КонецЦикла;
	
	Возврат КопияСтруктураДанных
	
КонецФункции

Функция ДобавитьДанныеПолуфабрикатов(СводнаяТаблицаСпецификаций, МассивДанных, ПолучитьПредставления, КэшированныеСпецификации, ПереченьДанных, ИспользоватьПроизводство2_2)
	
	МатериалыПроизводимыеВПроцессе = Новый Массив;
	
	ДанныеСпецификаций = ДанныеСпецификацииПоСпискуНоменклатуры(
		МассивДанных, 
		ПолучитьПредставления,
		Ложь,
		ИспользоватьПроизводство2_2, 
		ПереченьДанных, 
		КэшированныеСпецификации);
	
	Для ИндексТекущихДанных = 0 По МассивДанных.ВГраница() Цикл
		
		ТекущиеДанные = ДанныеСпецификаций.Получить(ИндексТекущихДанных);
		Если ТекущиеДанные = Неопределено Тогда
			
			ТекущаяНоменклатура = МассивДанных[ИндексТекущихДанных].Номенклатура;
			
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные спецификации по номенклатуре: %Ссылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ТекущаяНоменклатура);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущаяНоменклатура.Метаданные(), 
				ТекущаяНоменклатура,
				ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("АльтернативныеВидыРабочихЦентров") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.АльтернативныеВидыРабочихЦентров, СводнаяТаблицаСпецификаций.АльтернативныеВидыРабочихЦентров);
		КонецЕсли;
		Если ТекущиеДанные.Свойство("ВидыРабочихЦентров") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВидыРабочихЦентров, СводнаяТаблицаСпецификаций.ВидыРабочихЦентров);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ВыходныеИзделия") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВыходныеИзделия, СводнаяТаблицаСпецификаций.ВыходныеИзделия);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ВозвратныеОтходы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ВозвратныеОтходы, СводнаяТаблицаСпецификаций.ВозвратныеОтходы);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("МатериалыИУслуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.МатериалыИУслуги, СводнаяТаблицаСпецификаций.МатериалыИУслуги);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("Трудозатраты") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.Трудозатраты, СводнаяТаблицаСпецификаций.Трудозатраты);
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("Этапы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.Этапы, СводнаяТаблицаСпецификаций.Этапы);
		КонецЕсли;
		
		Для Каждого Строка Из ТекущиеДанные.МатериалыИУслуги Цикл
			
			Если Строка.ПроизводитсяВПроцессе Тогда
				
				ДанныеМатериала = Новый Структура;
				ДанныеМатериала.Вставить("Номенклатура",          Строка.Номенклатура);
				ДанныеМатериала.Вставить("Характеристика",        Строка.Характеристика);
				ДанныеМатериала.Вставить("Подразделение",         Строка.ПодразделениеЭтапа);
				ДанныеМатериала.Вставить("Спецификация",          Строка.ИсточникПолученияПолуфабриката);
				ДанныеМатериала.Вставить("Количество",            Строка.Количество);
				ДанныеМатериала.Вставить("Упаковка",              Строка.Упаковка);
				ДанныеМатериала.Вставить("ДнейДоОкончания",       Строка.ДнейДоОкончания);
				
				МатериалыПроизводимыеВПроцессе.Добавить(ДанныеМатериала);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МатериалыПроизводимыеВПроцессе;
	
КонецФункции

Функция ОкруглитьДлительностьЭтапаВДнях(Таблица)
	
	Для каждого Строка Из Таблица Цикл
		
		ПолныхДней = Цел(Строка.ДлительностьЭтапаВДнях);
		Если НЕ Строка.ДлительностьЭтапаВДнях = ПолныхДней Тогда
			Строка.ДлительностьЭтапаВДнях = ПолныхДней + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьПереченьДанныхСпецификации(ПереченьДанных)
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("Этапы");
	ПереченьДанных.Добавить("ВыходныеИзделия");
	ПереченьДанных.Добавить("ВозвратныеОтходы");
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");
	//++ НЕ УТКА
	ПереченьДанных.Добавить("ВидыРабочихЦентров");
	ПереченьДанных.Добавить("АльтернативныеВидыРабочихЦентров");
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ВыборкаИГруппировкаДанныхПоТаблицеПотребностей

Функция РазузловатьПотребностиИЗаполнитьСрокиОбеспечения(ВходящиеПотребности, ПараметрыВыборки, КэшированныеСпецификации, ОписаниеОшибки)
	
	Потребности = ВходящиеПотребности.Скопировать();
	Потребности.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("КлючСвязиНазначение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ЭтапНазначение", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Потребности.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Потребности.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Потребности.Колонки.Добавить("ОптимальнаяПартияЗапуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ОграниченСрокПролеживания", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("МаксимальныйСрокПролеживания", Новый ОписаниеТипов("Число"));
	Потребности.Колонки.Добавить("СрокПролеживания", Новый ОписаниеТипов("Дата"));
	Потребности.Колонки.Добавить("Этапы", Новый ОписаниеТипов("ТаблицаЗначений"));
	Потребности.Колонки.Добавить("КлючСвязиВыпуск", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("Группировать", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("НекратныйВыпуск", Новый ОписаниеТипов("Булево"));
	Потребности.Колонки.Добавить("КоличествоНаПартию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Потребности.Колонки.Добавить("ДнейДоОкончания", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Если Потребности.Колонки.Найти("ПодразделениеДиспетчер") = Неопределено Тогда
		Потребности.Колонки.Добавить("ПодразделениеДиспетчер",
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Если Потребности.Колонки.Найти("Обособленно") = Неопределено Тогда
		Потребности.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	Потребности.Колонки.Добавить("ПодразделениеПолучатель", Новый ОписаниеТипов(ТипыПолучатель));
	
	Потребности.Индексы.Добавить("КлючСвязи");
	Потребности.Индексы.Добавить("КлючСвязиНазначение");
	Потребности.Индексы.Добавить("КлючСвязиВыпуск");
	
	КлючСвязи = 1;
	МаксИндекс = ВходящиеПотребности.Количество()-1;
	Для Индекс = 0 По МаксИндекс Цикл
		
		ТекущаяСтрока = Потребности[Индекс];
		
		РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
			Потребности, ТекущаяСтрока, КлючСвязи, ПараметрыВыборки, КэшированныеСпецификации);
		
	КонецЦикла;
	
	Спецификации = Потребности.ВыгрузитьКолонку("Спецификация");
	ПроверитьКорректностьСпецификаций(Спецификации, ОписаниеОшибки);
	
	Если ОписаниеОшибки.ЕстьОшибка Тогда
		Потребности = Неопределено;
	//++ НЕ УТКА
	Иначе
		ЗаполнитьСрокиОбеспеченияПотребностей(
			Потребности,
			ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ВходящиеПотребности, "Распоряжение"));
	//-- НЕ УТКА
	КонецЕсли;
	
	Возврат Потребности;
	
КонецФункции

Процедура РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
															Потребности,
															Потребность,
															КлючСвязи,
															ПараметрыВыборки,
															КэшированныеСпецификации,
															Спецификации = Неопределено)
	
	Потребность.КлючСвязи = КлючСвязи;
	КлючСвязи = КлючСвязи + 1;
	
	Если ПараметрыВыборки.ПереченьДанных = Неопределено Тогда
		ЗаполнитьПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных);
	Иначе
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "Этапы");
		ДобавитьЭлементВПереченьДанныхСпецификации(ПараметрыВыборки.ПереченьДанных, "МатериалыИУслуги");
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ПараметрыДляПолученияДанныхСпецификации();
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Потребность);
	
	СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
		ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
	
	ЗаполнитьЗначенияСвойств(Потребность, СтруктураДанных, "ОптимальнаяПартияЗапуска, ОграниченСрокПролеживания, Этапы");
	Потребность.МаксимальныйСрокПролеживания = СтруктураДанных.МаксимальныйСрокПролеживанияВДнях * 86400;
	
	Если ЗначениеЗаполнено(Потребность.КоличествоНаПартию) Тогда
		
		Если СтруктураДанных.ВыходныеИзделия.Количество() > 0 Тогда
			КоличествоВыпускНаПартию = СтруктураДанных.ВыходныеИзделия[0].КоличествоИзделие;
			КоличествоВыпускНаПартию = ?(КоличествоВыпускНаПартию <> 0, КоличествоВыпускНаПартию, 1);
		Иначе
			КоличествоВыпускНаПартию = 1;
		КонецЕсли;
		
		Потребность.НекратныйВыпуск = (Потребность.КоличествоНаПартию % КоличествоВыпускНаПартию) > 0;
		
	КонецЕсли;
	
	КоличествоНаПартию = Новый Соответствие;
	Для Индекс = 0 По СтруктураДанных.МатериалыИУслуги.Количество()-1 Цикл
		КоличествоНаПартию.Вставить(Индекс, СтруктураДанных.МатериалыИУслуги[Индекс].Количество);
	КонецЦикла;
	
	Если Спецификации = Неопределено Тогда
		Спецификации = Новый Массив();
	КонецЕсли;
	
	ПроизвестиПоСпецификации = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
	Для каждого Материал Из СтруктураДанных.МатериалыИУслуги Цикл
		
		Если НЕ РасчетКоличестваПоАлгоритму(Материал) Тогда
			
			Если Материал.КоличествоИзделие = 0 Тогда
				
				Материал.Количество = 0;
				Материал.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоЦелое = Цел(Потребность.Количество / Материал.КоличествоИзделие);
				
				Если КоличествоЦелое * Материал.КоличествоИзделие < Потребность.Количество Тогда
					Коэффициент = КоличествоЦелое + 1;
				Иначе
					Коэффициент = КоличествоЦелое;
				КонецЕсли;
				
				Материал.КоличествоУпаковок = Коэффициент * Материал.КоличествоУпаковок;
				Материал.Количество = Материал.КоличествоУпаковок * Материал.КоэффициентУпаковки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяУточнитьМатериал = НЕ ЗначениеЗаполнено(Материал.Номенклатура)
			ИЛИ НЕ ЗначениеЗаполнено(Материал.Характеристика) И Материал.ХарактеристикиИспользуются
			ИЛИ НЕ ЗначениеЗаполнено(Материал.Количество);
		
		Если Материал.СпособПолученияМатериала = ПроизвестиПоСпецификации
			И НЕ ТребуетсяУточнитьМатериал Тогда
			
			НоваяСтрока = Потребности.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Материал);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность,
				"Распоряжение,
				|ПодразделениеДиспетчер,
				|ДатаЗапуска,
				|ДатаВыпуска,
				|РазмещениеВыпуска,
				|Обособленно,
				|Назначение");
				
			НоваяСтрока.КлючСвязиНазначение = Потребность.КлючСвязи;
			НоваяСтрока.ЭтапНазначение      = Материал.Этап;
			НоваяСтрока.КоличествоНаПартию  = КоличествоНаПартию.Получить(
				СтруктураДанных.МатериалыИУслуги.Индекс(Материал));
			НоваяСтрока.ДнейДоОкончания		= Потребность.ДнейДоОкончания + Материал.ДнейДоОкончания;
			
			Если Спецификации.Найти(НоваяСтрока.Спецификация) = Неопределено Тогда
				
				Спецификации.Вставить(0,НоваяСтрока.Спецификация);
				
				РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
							Потребности,
							НоваяСтрока,
							КлючСвязи,
							ПараметрыВыборки,
							КэшированныеСпецификации,
							Спецификации);
							
				Спецификации.Удалить(0);
				
			Иначе
				
				ТекстШаблон     = НСтр("ru = 'В процессе разузлования изделий обнаружено зацикливание на спецификации ""%1"".'");
				ТекстИсключения = СтрШаблон(ТекстШаблон, Потребность.Спецификация);
				
				ВызватьИсключение ТекстИсключения
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьКэшСпецификаций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Распоряжение");
	Результат.Колонки.Добавить("Спецификация",   Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("ПодразделениеДиспетчер", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("СтруктураДанных");
	
	Результат.Индексы.Добавить(РазрезыКэшаСпецификаций());
	
	Возврат Результат;
	
КонецФункции

Функция РазрезыКэшаСпецификаций()
	
	Возврат "Распоряжение, Спецификация, Номенклатура, Характеристика, ПодразделениеДиспетчер";
	
КонецФункции

Функция НайтиИЗакэшироватьДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации)
	
	РазрезыКэша = РазрезыКэшаСпецификаций();
	СтруктураПоиска = Новый Структура(РазрезыКэша);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоНоменклатуре);
	
	НайденныеСтроки = КэшированныеСпецификации.НайтиСтроки(СтруктураПоиска);
	
	Результат = Неопределено;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = КопияДанныхСпецификации(НайденныеСтроки[0].СтруктураДанных);
		
	КонецЕсли; 
	
	Если Результат = Неопределено Тогда
		
		Результат = ДанныеСпецификации(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки.ПолучитьПредставления,
			ПараметрыВыборки.ПолучитьСведенияАвтовыбора,
			ПараметрыВыборки.ИспользоватьПроизводство2_2,
			ПараметрыВыборки.ПереченьДанных,
			ПараметрыВыборки.МенеджерВременныхТаблиц,
			,
			ПараметрыВыборки.РассчитыватьДляПлановПроизводства);
		
		//++ НЕ УТКА
		Если ПараметрыВыборки.ПолучитьСведенияАвтовыбора И Результат.Свойство("МатериалыИУслуги") Тогда
			
			СтрокиАвтоВыбора = УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
																	Результат.МатериалыИУслуги,
																	ДанныеПоНоменклатуре,
																	"РесурсныеСпецификации",
																	ПараметрыВыборки.ПолучитьПредставления,
																	ПараметрыВыборки.ПолучитьСведенияАвтовыбора);
			
			ЗаполнитьНастройкиПолученияМатериаловВКоллекции(
				СтрокиАвтоВыбора,
				ДанныеПоНоменклатуре,
				ПараметрыВыборки.МенеджерВременныхТаблиц,
				ПараметрыВыборки.ИспользоватьПроизводство2_2);
			
		КонецЕсли;
		//-- НЕ УТКА
		
		НоваяСтрока = КэшированныеСпецификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоНоменклатуре, РазрезыКэша);
		НоваяСтрока.СтруктураДанных = КопияДанныхСпецификации(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЭлементВПереченьДанныхСпецификации(ПереченьДанных, Элемент)
	
	Если ПереченьДанных = Неопределено Тогда
		ПереченьДанных = Новый Массив;
	КонецЕсли;
	
	Если ПереченьДанных.Найти(Элемент) = Неопределено Тогда
		ПереченьДанных.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьВыпускПоПотребностям(Потребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("ЕдиницПартийИзделий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Если Потребности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнитьТаблицуПотребностиДляГруппировки(Потребности);

	Индекс = 0;
	
	КлючСвязиВыпуск = 1;
	КлючСвязиМакс   = МаксимальныйКлючСвязи(Потребности) + 1;
	
	ПараметрыГруппировки = ПараметрыГруппировкиПотребностей(Потребности);
	
	Пока Индекс < Потребности.Количество() Цикл
		
		Потребность = Потребности[Индекс];
		Индекс = Индекс + 1;
		
		Если Потребность.Обработана Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПотребностей = ПодобратьПотребностиДляГруппировки(
			Потребности, Потребность, Индекс, ПараметрыГруппировки);
		
		Если МассивПотребностей.Количество() = 1 Тогда
			ЕдиницПартийИзделий = РассчитатьКоличествоЕдиницПартийИзделий(
				МассивПотребностей, ПараметрыВыборки, КэшированныеСпецификации);
		Иначе
			ЕдиницПартийИзделий = 0;
			СгруппироватьПотребности(
				Потребности,
				МассивПотребностей,
				ПараметрыВыборки,
				КэшированныеСпецификации,
				КлючСвязиМакс,
				ЕдиницПартийИзделий);
		КонецЕсли;
		
		Пока ЕдиницПартийИзделий > 0 Цикл
		
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Спецификация = Потребность.Спецификация;
			НоваяСтрока.КлючСвязи = КлючСвязиВыпуск;
			НоваяСтрока.ЕдиницПартийИзделий = ?(
				ЗначениеЗаполнено(Потребность.ОптимальнаяПартияЗапуска),
				Мин(Потребность.ОптимальнаяПартияЗапуска, ЕдиницПартийИзделий),
				ЕдиницПартийИзделий);
			
			ЕдиницПартийИзделий = ЕдиницПартийИзделий - НоваяСтрока.ЕдиницПартийИзделий;
			
		КонецЦикла;
		
		Для каждого Строка Из МассивПотребностей Цикл
			Строка.Обработана = Истина;
			Строка.КлючСвязиВыпуск = КлючСвязиВыпуск;
		КонецЦикла;
		
		КлючСвязиВыпуск = КлючСвязиВыпуск + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальныйКлючСвязи(Потребности)
	
	Если Потребности.Количество() > 0 Тогда
		
		Таблица = Потребности.Скопировать(, "КлючСвязи");
		Таблица.Сортировать("КлючСвязи Убыв");
		
		Результат = Таблица[0].КлючСвязи;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыГруппировкиПотребностей(Потребности)
	
	Параметры = Новый Структура;
	
	#Область СпецификацииСНечеткойХарактеристикой
	
	Результат = Новый Массив;
	
	Спецификации = Новый Массив;
	Для каждого Строка Из Потребности Цикл
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			Спецификации.Добавить(Строка.Спецификация);
		КонецЕсли;
	КонецЦикла;
	
	Если Спецификации.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
		|ГДЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка В(&Спецификации)
		|	И РесурсныеСпецификацииВыходныеИзделия.Характеристика = &ПустаяХарактеристика");
		Запрос.УстановитьПараметр("Спецификации", Спецификации);
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Параметры.Вставить("СпецификацииСНечеткойХарактеристикой", Результат);
	
	#КонецОбласти
	
	Возврат Параметры;
	
КонецФункции

Процедура ДополнитьТаблицуПотребностиДляГруппировки(Потребности)
	
	Потребности.Сортировать("Окончание Убыв, КлючСвязи");
	
	Потребности.Колонки.Добавить("ИндексСтроки");
	
	Для Индекс = 0 По Потребности.Количество()-1 Цикл
		
		Строка = Потребности[Индекс];
		Строка.ИндексСтроки = Индекс;
		
		Строка.Группировать = Истина;
		Строка.Обработана   = Ложь;
		
	КонецЦикла;
	
	Потребности.Индексы.Добавить("Распоряжение,Спецификация");
	
КонецПроцедуры

Функция ПодобратьПотребностиДляГруппировки(Потребности, Потребность, Индекс, Параметры)
	
	Результат = Новый Массив;
	Результат.Добавить(Потребность);
	
	Если Потребность.Группировать Тогда
		
		ПараметрыОтбора = Новый Структура("Распоряжение, Спецификация, Группировать",
			Потребность.Распоряжение, Потребность.Спецификация, Истина);
			
		НайденныеСтроки = Потребности.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого ПотребностьПредш Из НайденныеСтроки Цикл
			
			Если Потребности.Индекс(ПотребностьПредш) < Индекс Тогда
				Продолжить;
			КонецЕсли;
			
			// ОграничениеПоНазначению
			Если (Потребность.Обособленно ИЛИ ПотребностьПредш.Обособленно)
				И Потребность.Назначение <> ПотребностьПредш.Назначение Тогда
				Продолжить;
			КонецЕсли;
			
			// ОграничениеПоХарактеристике
			Если ЗначениеЗаполнено(Потребность.Характеристика)
				И НЕ Потребность.Характеристика = ПотребностьПредш.Характеристика Тогда
				
				НечеткаяХарактеристика = НЕ Параметры.СпецификацииСНечеткойХарактеристикой.Найти(Потребность.Спецификация) = Неопределено;
				Если НечеткаяХарактеристика Тогда
					Продолжить;
				КонецЕсли
				
			КонецЕсли;
			
			ВнутриСрокаПролеживания = (ПотребностьПредш.СрокПролеживания >= Потребность.Окончание);
			
			Если НЕ Потребность.ОграниченСрокПролеживания
				ИЛИ ВнутриСрокаПролеживания Тогда
				
				Результат.Добавить(ПотребностьПредш);
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СгруппироватьПотребности(
									Потребности,
									МассивПотребностей,
									ПараметрыВыборки,
									КэшированныеСпецификации,
									КлючСвязи,
									ЕдиницПартийИзделий)
	
	УдалитьПолуфабрикатыСпискаПотребностей(Потребности, МассивПотребностей);
	
	ВременнаяПотребность = ДобавитьВременнуюПотребностьДляРазузлования(
		Потребности, МассивПотребностей, ПараметрыВыборки, КэшированныеСпецификации, ЕдиницПартийИзделий);
		
	РазузловатьПотребностьПоПолуфабрикатамРекурсивно(
		Потребности, ВременнаяПотребность, КлючСвязи, ПараметрыВыборки, КэшированныеСпецификации);
	
	Полуфабрикаты = ПолуфабрикатыПотребности(Потребности, ВременнаяПотребность);
	Для каждого Полуфабрикат Из Полуфабрикаты Цикл
		Полуфабрикат.Группировать = Ложь;
	КонецЦикла;
	
	ДнейДоОкончания = ДнейДоОкончанияПоГруппеПотребностей(МассивПотребностей);
	
	Для каждого Потребность Из МассивПотребностей Цикл
		Потребность.КлючСвязи = ВременнаяПотребность.КлючСвязи;
		Потребность.ДнейДоОкончания = ДнейДоОкончания;
	КонецЦикла;
	
	Потребности.Удалить(ВременнаяПотребность);
	
КонецПроцедуры

Процедура УдалитьПолуфабрикатыСпискаПотребностей(Потребности, МассивПотребностей)
	
	Для каждого Потребность Из МассивПотребностей Цикл
		
		Полуфабрикаты = ПолуфабрикатыПотребности(Потребности, Потребность);
		
		Для каждого Полуфабрикат Из Полуфабрикаты Цикл
			
			Потребности.Удалить(Полуфабрикат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолуфабрикатыПотребности(Потребности, Потребность)
	
	Результат = Новый Массив;
	
	ОчередьОбработки = Новый Массив;
	ОчередьОбработки.Добавить(Потребность);
	
	СтруктураПоиска = Новый Структура("КлючСвязиНазначение");
	
	Пока ОчередьОбработки.Количество() > 0 Цикл
		
		СтруктураПоиска.КлючСвязиНазначение = ОчередьОбработки[0].КлючСвязи;
		НайденныеСтроки = Потребности.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Результат.Добавить(Строка);
			ОчередьОбработки.Добавить(Строка);
			
		КонецЦикла;
		
		ОчередьОбработки.Удалить(0);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВременнуюПотребностьДляРазузлования(
													Потребности,
													МассивПотребностей,
													ПараметрыВыборки,
													КэшированныеСпецификации,
													ЕдиницПартийИзделий)
	
	ТекущиеПотребности = СвернутьМассивПотребностей(Потребности, МассивПотребностей);
	
	ЕдиницПартийИзделий = РассчитатьКоличествоЕдиницПартийИзделий(
		ТекущиеПотребности, ПараметрыВыборки, КэшированныеСпецификации);
	
	ДанныеЗаполнения = МассивПотребностей[0];
	
	Результат = Потребности.Добавить();
	ЗаполнитьЗначенияСвойств(Результат, ДанныеЗаполнения);
	
	// При объединении потребностей разных назначений,
	//  назначение в объединенную потребность не переносится
	Если СодержитПотребностиРазныхНазначений(МассивПотребностей) Тогда
		// соблюдаем типизацию полей, пустые значения устанавливаем вручную
		Результат.Обособленно = Ложь;
		Результат.Назначение = Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ПараметрыДляПолученияДанныхСпецификации();
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеЗаполнения);
	
	СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
		ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
	
	Для каждого Изделие Из СтруктураДанных.ВыходныеИзделия Цикл
			
		Если Изделие.Номенклатура = ДанныеЗаполнения.Номенклатура
			И Изделие.Характеристика = ДанныеЗаполнения.Характеристика Тогда
			
			Результат.Количество = Изделие.Количество * ЕдиницПартийИзделий;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СодержитПотребностиРазныхНазначений(МассивПотребностей)
	
	Граница = МассивПотребностей.ВГраница();
	Если Граница > 0 Тогда
		Назначение = МассивПотребностей[0].Назначение;
		Для Индекс = 1 По Граница Цикл
			Если Назначение <> МассивПотребностей[Индекс].Назначение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция СвернутьМассивПотребностей(Потребности, МассивПотребностей)
	
	Результат = Потребности.Скопировать(МассивПотребностей,
		"Распоряжение, Спецификация, Номенклатура, Характеристика, Количество");
	
	Результат.Свернуть("Распоряжение, Спецификация, Номенклатура, Характеристика", "Количество");
	
	Для каждого Строка Из Результат Цикл
		
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			
			СвернутьПотребностиПоХарактеристике(Результат);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СвернутьПотребностиПоХарактеристике(ТекущиеПотребности)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТекущиеПотребности.Распоряжение,
	|	ТекущиеПотребности.Спецификация,
	|	ТекущиеПотребности.Номенклатура,
	|	ТекущиеПотребности.Характеристика,
	|	ТекущиеПотребности.Количество
	|ПОМЕСТИТЬ ВТТекущиеПотребности
	|ИЗ
	|	&ТекущиеПотребности КАК ТекущиеПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущиеПотребности.Распоряжение,
	|	ВТТекущиеПотребности.Спецификация,
	|	ВТТекущиеПотребности.Номенклатура,
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТТекущиеПотребности.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ВТТекущиеПотребности.Количество) КАК Количество
	|ИЗ
	|	ВТТекущиеПотребности КАК ВТТекущиеПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТТекущиеПотребности.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И ВТТекущиеПотребности.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|			И ВТТекущиеПотребности.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТекущиеПотребности.Распоряжение,
	|	ВТТекущиеПотребности.Спецификация,
	|	ВТТекущиеПотребности.Номенклатура,
	|	ВЫБОР
	|		КОГДА РесурсныеСпецификацииВыходныеИзделия.Характеристика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТТекущиеПотребности.Характеристика
	|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("ТекущиеПотребности", ТекущиеПотребности);
	
	ТекущиеПотребности = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция РассчитатьКоличествоЕдиницПартийИзделий(ТекущиеПотребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = 1;
	
	СтруктураПоиска = Новый Структура("Спецификация, Номенклатура, Характеристика");
	
	Для каждого Потребность Из ТекущиеПотребности Цикл
		
		ДанныеПоНоменклатуре = ПараметрыДляПолученияДанныхСпецификации();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Потребность);
	
		СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
			ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
		
		Для каждого Изделие Из СтруктураДанных.ВыходныеИзделия Цикл
			
			Если Изделие.Номенклатура = Потребность.Номенклатура
				И Изделие.Характеристика = Потребность.Характеристика Тогда
				
				Коэффициент = Потребность.Количество / Изделие.Количество;
				Если НЕ Цел(Коэффициент) = Коэффициент Тогда
					Коэффициент = Цел(Коэффициент) + 1;
				КонецЕсли;
			
				Результат = Макс(Результат, Коэффициент);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСпецификацийПоСгруппированнымПотребностям(Выпуски, Потребности, ПараметрыВыборки, КэшированныеСпецификации)
	
	Результат = Новый Массив;
	
	СтруктураПоискаПотребности = Новый Структура("КлючСвязиВыпуск");
	
	ЗаполнятьВыходныеИзделия = НЕ(ПараметрыВыборки.ПереченьДанных.Найти("ВыходныеИзделия") = Неопределено);
	ЗаполнятьВозвратныеОтходы = НЕ(ПараметрыВыборки.ПереченьДанных.Найти("ВозвратныеОтходы") = Неопределено);
	
	Для каждого Выпуск Из Выпуски Цикл
		
		РаспоряжениеВыпуска = Неопределено;
		НазначениеВыпуска = Неопределено;
		
		СтруктураПоискаПотребности.КлючСвязиВыпуск = Выпуск.КлючСвязи;
		НайденныеСтроки = Потребности.НайтиСтроки(СтруктураПоискаПотребности);
		
		ПотребностиВыпуска = Новый Массив;
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПотребностиВыпуска.Добавить(НайденнаяСтрока);
		КонецЦикла;
		ПотребностиРазныхНазначений = СодержитПотребностиРазныхНазначений(ПотребностиВыпуска);
		
		#Область ЗаполнениеДанныхПоНоменклатуре
		
		ДанныеПоНоменклатуре = ПараметрыДляПолученияДанныхСпецификации();
		
		Для каждого СтрокаПотребность Из ПотребностиВыпуска Цикл
			
			РаспоряжениеВыпуска = СтрокаПотребность.Распоряжение;
			Если Не ПотребностиРазныхНазначений Тогда
				НазначениеВыпуска = СтрокаПотребность.Назначение;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, СтрокаПотребность);
			Прервать;
			
		КонецЦикла;
		
		#КонецОбласти
		
		СтруктураДанных = НайтиИЗакэшироватьДанныеСпецификации(
			ДанныеПоНоменклатуре, ПараметрыВыборки, КэшированныеСпецификации);
		
		#Область НастройкаПолейРезультата
		
		СтруктураДанных.Вставить("Распоряжение", РаспоряжениеВыпуска);
		СтруктураДанных.Вставить("Назначение", НазначениеВыпуска);
		
		СтруктураДанных.Вставить("КлючСвязи");
		СтруктураДанных.Вставить("ЕдиницПартийИзделий", Выпуск.ЕдиницПартийИзделий);
		
		СтруктураДанных.Вставить("ДатаЗапуска", '00010101');
		СтруктураДанных.Вставить("ДатаВыпуска", '00010101');
		СтруктураДанных.Вставить("РазмещениеВыпуска");
		СтруктураДанных.Вставить("НекратныйВыпуск");
		
		ТипыПолучатель = Новый Массив;
		ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
		
		ОТЭтап = Новый ОписаниеТипов("Неопределено");
		//++ НЕ УТКА
		ОТЭтап = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
		//-- НЕ УТКА
	
		Если ЗаполнятьВыходныеИзделия Тогда
			
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"Назначение",
				Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"ЭтапПотребитель",
				ОТЭтап);
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"КлючСвязиНазначение",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"ЭтапНазначение",
				Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"Получатель",
				Новый ОписаниеТипов(ТипыПолучатель));
			СтруктураДанных.ВыходныеИзделия.Колонки.Добавить(
				"ОбособленаПодПотребность",
				Новый ОписаниеТипов("Булево"));
			
		КонецЕсли;
		
		Если ЗаполнятьВозвратныеОтходы Тогда
			
			СтруктураДанных.ВозвратныеОтходы.Колонки.Добавить(
				"Назначение",
				Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			СтруктураДанных.ВозвратныеОтходы.Колонки.Добавить(
				"ЭтапПотребитель",
				ОТЭтап);
			СтруктураДанных.ВозвратныеОтходы.Колонки.Добавить(
				"Получатель",
				Новый ОписаниеТипов(ТипыПолучатель));
			СтруктураДанных.ВозвратныеОтходы.Колонки.Добавить(
				"ОбособленаПодПотребность",
				Новый ОписаниеТипов("Булево"));
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область РасчетКоличества
		
		Если СтруктураДанных.Свойство("Этапы") Тогда
			РассчитатьКоличествоПоПартиямИзделий(Выпуск.ЕдиницПартийИзделий, Ложь, СтруктураДанных, "Этапы");
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			РассчитатьКоличествоПоПартиямИзделий(Выпуск.ЕдиницПартийИзделий, Истина, СтруктураДанных, "ВыходныеИзделия");
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
			РассчитатьКоличествоПоПартиямИзделий(Выпуск.ЕдиницПартийИзделий, Истина, СтруктураДанных, "ВозвратныеОтходы");
		КонецЕсли;
		Если СтруктураДанных.Свойство("МатериалыИУслуги") Тогда
			РассчитатьКоличествоПоПартиямИзделий(Выпуск.ЕдиницПартийИзделий, Истина, СтруктураДанных, "МатериалыИУслуги");
			РассчитатьКоличествоПоАлгоритму(СтруктураДанных);
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.МатериалыИУслуги);
		КонецЕсли;
		Если СтруктураДанных.Свойство("Трудозатраты") Тогда
			РассчитатьКоличествоПоПартиямИзделий(Выпуск.ЕдиницПартийИзделий, Ложь, СтруктураДанных, "Трудозатраты");
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.Трудозатраты);
		КонецЕсли;
		Если СтруктураДанных.Свойство("ВидыРабочихЦентров") Тогда
			РассчитатьДнейДоОкончания(ДанныеПоНоменклатуре, СтруктураДанных.ВидыРабочихЦентров);
		КонецЕсли;
		
		#КонецОбласти
		
		ЗаполнитьОбщиеСвойства = Истина;
		КоэффициентыСтоимости = Неопределено;
		
		Если ЗаполнятьВыходныеИзделия ИЛИ ЗаполнятьВозвратныеОтходы Тогда
			
			Для каждого СтрокаПотребность Из ПотребностиВыпуска Цикл
				
				Если ЗаполнитьОбщиеСвойства Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаПотребность,
						"КлючСвязи, ДатаЗапуска, ДатаВыпуска, РазмещениеВыпуска, НекратныйВыпуск");
					ЗаполнитьОбщиеСвойства = Ложь;
					
				КонецЕсли;
				
				#Область ОбособлениеВыпускаПодПотребности
				
				Если ЗаполнятьВыходныеИзделия Тогда
					
					Для каждого СтрокаИзделие Из СтруктураДанных.ВыходныеИзделия Цикл
						
						Если СтрокаИзделие.Номенклатура <> СтрокаПотребность.Номенклатура
							ИЛИ (СтрокаИзделие.Характеристика <> СтрокаПотребность.Характеристика
								И ЗначениеЗаполнено(СтрокаИзделие.Характеристика)
								И НЕ СтрокаИзделие.ЛюбаяХарактеристика)
							ИЛИ СтрокаИзделие.ОбособленаПодПотребность Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаПотребность.Количество >= СтрокаИзделие.Количество Тогда
							
							КоличествоЗачет = СтрокаИзделие.Количество;
							
							ЗаполнитьЗначенияСвойств(СтрокаИзделие, СтрокаПотребность,
								"Назначение, ЭтапПотребитель, КлючСвязиНазначение, ЭтапНазначение, Характеристика, Получатель");
							
							СтрокаИзделие.ОбособленаПодПотребность = Истина;
							
						Иначе
							
							Если КоэффициентыСтоимости = Неопределено Тогда
								
								ПроизводствоСервер.РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(
									СтруктураДанных.ВыходныеИзделия, КоэффициентыСтоимости);
								
							КонецЕсли;
								
							КоличествоЗачет = СтрокаПотребность.Количество;
							
							НоваяСтрока = СтруктураДанных.ВыходныеИзделия.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребность,
								"Назначение, ЭтапПотребитель, КлючСвязиНазначение, ЭтапНазначение, Характеристика, Получатель");
							НоваяСтрока.Количество = КоличествоЗачет;
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоэффициентУпаковки;
							НоваяСтрока.ОбособленаПодПотребность = Истина;
							
							СтрокаИзделие.Количество = СтрокаИзделие.Количество - КоличествоЗачет;
							СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.Количество/СтрокаИзделие.КоэффициентУпаковки;
							
							ПроизводствоСервер.ПересчитатьДолиСтоимостиПриРазбиенииСтроки(
								СтруктураДанных.ВыходныеИзделия, СтрокаИзделие, НоваяСтрока, КоэффициентыСтоимости);
							
						КонецЕсли;
						
						СтрокаПотребность.Количество = СтрокаПотребность.Количество - КоличествоЗачет;
						Если СтрокаПотребность.Количество = 0 Тогда
							Прервать;
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
				#КонецОбласти
				
				#Область ОбособлениеВозвратныхОтходовПодПотребности
				
				Если ЗаполнятьВозвратныеОтходы
					И (ЗначениеЗаполнено(СтрокаПотребность.Назначение)
					ИЛИ ЗначениеЗаполнено(СтрокаПотребность.Получатель)) Тогда
					
					Для каждого СтрокаИзделие Из СтруктураДанных.ВозвратныеОтходы Цикл
						
						Если СтрокаИзделие.Номенклатура <> СтрокаПотребность.Номенклатура
							ИЛИ (СтрокаИзделие.Характеристика <> СтрокаПотребность.Характеристика
								И ЗначениеЗаполнено(СтрокаИзделие.Характеристика)
								И НЕ СтрокаИзделие.ЛюбаяХарактеристика)
							ИЛИ СтрокаИзделие.ОбособленаПодПотребность Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаПотребность.Количество >= СтрокаИзделие.Количество Тогда
							
							КоличествоЗачет = СтрокаИзделие.Количество;
							ЗаполнитьЗначенияСвойств(СтрокаИзделие, СтрокаПотребность, 
								"Назначение, ЭтапПотребитель, Получатель");
							
							СтрокаИзделие.ОбособленаПодПотребность = Истина;
							
						Иначе
							
							КоличествоЗачет = СтрокаПотребность.Количество;
							
							НоваяСтрока = СтруктураДанных.ВозвратныеОтходы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребность, 
								"Назначение, ЭтапПотребитель, Получатель");
							НоваяСтрока.Количество = КоличествоЗачет;
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоэффициентУпаковки;
							НоваяСтрока.ОбособленаПодПотребность = Истина;
							
							СтрокаИзделие.Количество = СтрокаИзделие.Количество - КоличествоЗачет;
							СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.Количество/СтрокаИзделие.КоэффициентУпаковки;
							
						КонецЕсли;
						
						СтрокаПотребность.Количество = СтрокаПотребность.Количество - КоличествоЗачет;
						Если СтрокаПотребность.Количество = 0 Тогда
							Прервать;
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
				#КонецОбласти
				
			КонецЦикла;
			
			#Область ЗаполнениеПолучателя
			
			Если ЗаполнятьВыходныеИзделия Тогда
				
				Для каждого СтрокаИзделие Из СтруктураДанных.ВыходныеИзделия Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаИзделие.Получатель) Тогда
						СтрокаИзделие.Получатель = СтрокаИзделие.Получатель2_2;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЗаполнятьВозвратныеОтходы Тогда
				
				Для каждого СтрокаИзделие Из СтруктураДанных.ВозвратныеОтходы Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаИзделие.Получатель) Тогда
						СтрокаИзделие.Получатель = СтрокаИзделие.Получатель2_2;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЕсли;
		
		Результат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьКоличествоПоПартиямИзделий(ЕдиницПартийИзделий, ЕстьУпаковки, СтруктураДанных, ИмяТаблицы)
	
	Для каждого СтрокаТаблицы Из СтруктураДанных[ИмяТаблицы] Цикл
		
		Если ИмяТаблицы = "МатериалыИУслуги" И РасчетКоличестваПоАлгоритму(СтрокаТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьУпаковки Тогда
			
			СтрокаТаблицы.КоличествоУпаковок = ЕдиницПартийИзделий * СтрокаТаблицы.КоличествоУпаковок;
			СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок * СтрокаТаблицы.КоэффициентУпаковки;
			
		Иначе
			
			СтрокаТаблицы.Количество = ЕдиницПартийИзделий * СтрокаТаблицы.Количество;	
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоличествоПоАлгоритму(СтруктураДанных)
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия")
		И СтруктураДанных.ВыходныеИзделия.Количество() > 0 Тогда
		
		Продукция = СтруктураДанных.ВыходныеИзделия[0];
		
		Для каждого Строка Из СтруктураДанных.МатериалыИУслуги Цикл
			
			Если РасчетКоличестваПоАлгоритму(Строка) Тогда
				
				УправлениеДаннымиОбИзделиях.РассчитатьКоличествоПоФормуле(Продукция, Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасчетКоличестваПоАлгоритму(СтрокаМатериал)
	
	Возврат НЕ ПустаяСтрока(СтрокаМатериал.АлгоритмРасчетаКоличества);
	
КонецФункции

Функция ИнициализироватьОписаниеОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ОшибкаТекст", Неопределено);
	Результат.Вставить("ОшибкаСсылка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьКорректностьСпецификаций(Спецификации, ОписаниеОшибки)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Владелец КАК Спецификация,
	|	ЭтапыПроизводства.Владелец.Представление КАК СпецификацияПредставление,
	|	""НесколькоВыпускающихЭтапов"" КАК КодОшибки
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец В(&Спецификации)
	|	И ЭтапыПроизводства.ПометкаУдаления = ЛОЖЬ
	|	И ЭтапыПроизводства.НомерСледующегоЭтапа = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводства.Владелец,
	|	ЭтапыПроизводства.Владелец.Представление
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЭтапыПроизводства.Ссылка) > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РесурсныеСпецификации.Ссылка,
	|	РесурсныеСпецификации.Представление,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ЭтапыПроизводства.Ссылка) = 0
	|			ТОГДА ""ОтсутствуетПервыйЭтап""
	|		ИНАЧЕ ""НесколькоПервыхЭтапов""
	|	КОНЕЦ
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО РесурсныеСпецификации.Ссылка = ЭтапыПроизводства.Владелец
	|			И (ЭтапыПроизводства.ПометкаУдаления = ЛОЖЬ)
	|			И (ЭтапыПроизводства.НомерЭтапа = 1)
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка В(&Спецификации)
	|
	|СГРУППИРОВАТЬ ПО
	|	РесурсныеСпецификации.Ссылка,
	|	РесурсныеСпецификации.Представление
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЭтапыПроизводства.Ссылка) <> 1");
	
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОписаниеОшибки.ЕстьОшибка = Истина;
		ОписаниеОшибки.ОшибкаСсылка = Выборка.Спецификация;
		
		Если Выборка.КодОшибки = "НесколькоВыпускающихЭтапов" Тогда
			
			ОписаниеОшибки.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'Спецификация ""%1"" содержит несколько выпускающих этапов'"),
				Выборка.СпецификацияПредставление);
			
		ИначеЕсли Выборка.КодОшибки = "ОтсутствуетПервыйЭтап" Тогда
				
			ОписаниеОшибки.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'В спецификации ""%1"" отсутствует первый этап'"),
				Выборка.СпецификацияПредставление);
				
		ИначеЕсли Выборка.КодОшибки = "НесколькоПервыхЭтапов" Тогда
				
			ОписаниеОшибки.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'Спецификация ""%1"" содержит несколько первых этапов'"),
				Выборка.СпецификацияПредставление);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДнейДоОкончанияПоГруппеПотребностей(МассивПотребностей)
	
	Результат = 0;
	
	Для каждого Потребность Из МассивПотребностей Цикл
		
		Результат = Макс(Результат, Потребность.ДнейДоОкончания);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

#Область НормативныйГрафик

Процедура ЗаполнитьСрокиОбеспеченияПотребностей(Потребности, Распоряжения)
	
	НормативныйГрафик = НормативныйГрафикПоТаблицеПотребностей(Потребности, Распоряжения);
	
	ПоляПоискаПервыйЭтап = "НомерЭтапа, КлючСвязиПотребность";
	НормативныйГрафик.Индексы.Добавить(ПоляПоискаПервыйЭтап);
	СтруктураПоискаПервыйЭтап = Новый Структура(ПоляПоискаПервыйЭтап, 1);
	
	ПоляПоискаПоследнийЭтап = "НомерСледующегоЭтапа, КлючСвязиПотребность";
	НормативныйГрафик.Индексы.Добавить(ПоляПоискаПоследнийЭтап);
	СтруктураПоискаПоследнийЭтап = Новый Структура(ПоляПоискаПоследнийЭтап, 0);
	
	Для каждого Потребность Из Потребности Цикл
		
		СтруктураПоискаПервыйЭтап.КлючСвязиПотребность = Потребность.КлючСвязи;
		НайденныеСтроки = НормативныйГрафик.НайтиСтроки(СтруктураПоискаПервыйЭтап);
		ПервыйЭтап = НайденныеСтроки[0];
		
		СтруктураПоискаПоследнийЭтап.КлючСвязиПотребность = Потребность.КлючСвязи;
		НайденныеСтроки = НормативныйГрафик.НайтиСтроки(СтруктураПоискаПоследнийЭтап);
		ПоследнийЭтап = НайденныеСтроки[0];
		
		Границы = ГраницыОтсчетаДатПоНормативномуГрафику(Потребность);
		Если Потребность.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу Тогда
			
			Начало = Границы.КНачалу + ПервыйЭтап.ДлительностьДоЗапуска;
			Окончание = Границы.КНачалу + ПоследнийЭтап.ДлительностьДоЗапуска + ПоследнийЭтап.Ресурсоемкость;
			
		Иначе
			
			Начало = Границы.КОкончанию - ПервыйЭтап.ДлительностьДоВыпуска - ПервыйЭтап.Ресурсоемкость;
			Окончание = Границы.КОкончанию - ПоследнийЭтап.ДлительностьДоВыпуска;
			
		КонецЕсли;
		
		Потребность.Начало = Начало;
		Потребность.Окончание = Окончание;
		
		Если Потребность.ОграниченСрокПролеживания Тогда
			
			Потребность.СрокПролеживания = Окончание + Потребность.МаксимальныйСрокПролеживания;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НормативныйГрафикПоТаблицеПотребностей(Потребности, Распоряжения)
	
	ЭтапыИЗависимости = ТаблицыДляРасчетаНормативногоГрафикаПроизводства(Распоряжения);
	Этапы       = ЭтапыИЗависимости.Этапы;
	Зависимости = ЭтапыИЗависимости.Зависимости;
		
	ЗаполнитьЭтапыПоТаблицеПотребностей(Потребности, Этапы);
	
	ДобавитьИндексыВТаблицуЭтаповДляРасчетаНормативногоГрафика(Этапы);
	
	ЗаполнитьЗависимостиПоТаблицеПотребностей(Потребности, Этапы, Зависимости);
	
	РегистрыСведений.НормативныйГрафикЭтаповПроизводства.РассчитатьДлительностьДоЗапускаВыпуска(
		Этапы, Зависимости);
	
	Возврат Этапы;
	
КонецФункции

Функция ТаблицыДляРасчетаНормативногоГрафикаПроизводства(Распоряжения) Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("ДокументСсылка.ЭтапПроизводства2_2"));
	Типы.Добавить(Тип("Число"));
	ОписаниеТиповЭтап = Новый ОписаниеТипов(Типы, Новый КвалификаторыЧисла);
	
	Этапы = Новый ТаблицаЗначений;
	Этапы.Колонки.Добавить("ЭтапПроизводства", ОписаниеТиповЭтап);
	Этапы.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Этапы.Колонки.Добавить("Ресурсоемкость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Этапы.Колонки.Добавить("ПервыйЭтап", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ПоследнийЭтап", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ДлительностьДоВыпуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 4)));
	Этапы.Колонки.Добавить("ДлительностьДоЗапуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 4)));
	Этапы.Колонки.Добавить("ВыпускПодЭтапПроизводства", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ЭтапНазначение", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Этапы.Колонки.Добавить("КлючСвязиПотребность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Этапы.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Этапы.Колонки.Добавить("НомерСледующегоЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Зависимости = Новый ТаблицаЗначений;
	Зависимости.Колонки.Добавить("Этап", ОписаниеТиповЭтап);
	Зависимости.Колонки.Добавить("СледующийЭтап", ОписаниеТиповЭтап);
	
	ПрочитатьЭтапыПроизводстваИЗависимостиРаспоряжений(Распоряжения, Этапы, Зависимости);
	
	Результат = Новый Структура("Этапы, Зависимости", Этапы, Зависимости);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьЭтапыПроизводстваИЗависимостиРаспоряжений(Распоряжения, Этапы, Зависимости)
	
	Для каждого Распоряжение Из Распоряжения Цикл
		
		ДанныеРаспоряжения = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.ЭтапыПроизводстваСЗависимостями(
			Распоряжение);
		
		Для каждого Строка Из ДанныеРаспоряжения.Этапы Цикл
			ЗаполнитьЗначенияСвойств(Этапы.Добавить(), Строка);
		КонецЦикла;
		
		Для каждого Строка Из ДанныеРаспоряжения.Зависимости Цикл
			ЗаполнитьЗначенияСвойств(Зависимости.Добавить(), Строка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуЭтаповДляРасчетаНормативногоГрафика(Этапы) Экспорт
	
	Этапы.Индексы.Добавить("ЭтапПроизводства");
	Этапы.Индексы.Добавить("НомерЭтапа");
	Этапы.Индексы.Добавить("ВыпускПодЭтапПроизводства");
	
КонецПроцедуры

Процедура ЗаполнитьЭтапыПоТаблицеПотребностей(Потребности, Этапы)
	
	Отбор = Новый Структура("КлючСвязиНазначение");
	
	КлючСвязи = 1;
	
	Для каждого Потребность Из Потребности Цикл
		
		Для каждого Этап Из Потребность.Этапы Цикл
			
			Этап.КлючСвязи = КлючСвязи;
			
			НоваяСтрока = Этапы.Добавить();
			
			НоваяСтрока.ЭтапПроизводства = КлючСвязи;
			НоваяСтрока.Распоряжение     = Потребность.Распоряжение;
			
			НоваяСтрока.КлючСвязиПотребность = Потребность.КлючСвязи;
			
			НоваяСтрока.Ресурсоемкость = Этап.ДлительностьЭтапаВСекундах;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Этап, "НомерЭтапа, НомерСледующегоЭтапа");
			
			Если Этап.НомерЭтапа = 1 Тогда
				
				Отбор.КлючСвязиНазначение = Потребность.КлючСвязи;
				
				НайденныеСтроки = Потребности.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока.ПервыйЭтап = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Этап.НомерСледующегоЭтапа = 0 Тогда
				
				Если ЗначениеЗаполнено(Потребность.ЭтапПотребитель) Тогда
					
					НоваяСтрока.ВыпускПодЭтапПроизводства = Истина;
					НоваяСтрока.ЭтапНазначение = Потребность.ЭтапПотребитель;
					
				КонецЕсли;
				
				Если Потребность.КлючСвязиНазначение = 0
					И НЕ НоваяСтрока.ВыпускПодЭтапПроизводства Тогда
					
					НоваяСтрока.ПоследнийЭтап = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			КлючСвязи = КлючСвязи + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимостиПоТаблицеПотребностей(Потребности, Этапы, Зависимости)
	
	Для каждого Потребность Из Потребности Цикл
		
		ВыпускающийЭтап = Неопределено;
		
		ЗаполнитьВнутренниеЗависимостиЭтапов(
			Потребность.Этапы,
			Зависимости,
			ВыпускающийЭтап);
		
		ЗаполнитьВнешниеЗависимостиПоТаблицеПотребностей(
			Потребности,
			Потребность,
			Зависимости,
			ВыпускающийЭтап);
		
		ЗаполнитьЗависимостиСоздаваемыхИСуществующихЭтапов(
			Этапы,
			Зависимости);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнутренниеЗависимостиЭтапов(Этапы, Зависимости, ВыпускающийЭтап) Экспорт
	
	СтруктураПоиска = Новый Структура("НомерЭтапа");
	
	Для каждого Этап Из Этапы Цикл
		
		Если ЗначениеЗаполнено(Этап.НомерСледующегоЭтапа) Тогда
			
			СтруктураПоиска.НомерЭтапа = Этап.НомерСледующегоЭтапа;
			НайденныеСтроки = Этапы.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				НоваяСтрока = Зависимости.Добавить();
				НоваяСтрока.Этап = Этап.КлючСвязи;
				НоваяСтрока.СледующийЭтап = Строка.КлючСвязи;
				
			КонецЦикла;
			
		Иначе
			
			ВыпускающийЭтап = Этап;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнешниеЗависимостиПоТаблицеПотребностей(Потребности, Потребность, Зависимости, ВыпускающийЭтап)
	
	Если ЗначениеЗаполнено(Потребность.КлючСвязиНазначение) И НЕ ВыпускающийЭтап = Неопределено Тогда
		
		ПотребностьНазначение = Потребности.Найти(Потребность.КлючСвязиНазначение, "КлючСвязи");
		Если НЕ ПотребностьНазначение = Неопределено Тогда
			
			ЭтапНазначение = ПотребностьНазначение.Этапы.Найти(Потребность.ЭтапНазначение, "Этап");
			Если НЕ ЭтапНазначение = Неопределено Тогда
				
				НоваяСтрока = Зависимости.Добавить();
				НоваяСтрока.Этап = ВыпускающийЭтап.КлючСвязи;
				НоваяСтрока.СледующийЭтап = ЭтапНазначение.КлючСвязи;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимостиСоздаваемыхИСуществующихЭтапов(Этапы, Зависимости)
	
	СтруктураПоиска = Новый Структура("ВыпускПодЭтапПроизводства", Истина);
	НайденныеСтроки = Этапы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Зависимости.Добавить();
		НоваяСтрока.Этап = Строка.ЭтапПроизводства;
		НоваяСтрока.СледующийЭтап = Строка.ЭтапНазначение;
		
		СтрокаЭтап = Этапы.Найти(Строка.ЭтапНазначение, "ЭтапПроизводства");
		Если НЕ СтрокаЭтап = Неопределено Тогда
			СтрокаЭтап.ПервыйЭтап = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГраницыОтсчетаДатПоНормативномуГрафику(ЗначенияЗаполнения) Экспорт
	
	Результат = Новый Структура;
	
	КНачалу = ?(ЗначенияЗаполнения.ДатаЗапуска >= ТекущаяДатаСеанса(),
		ЗначенияЗаполнения.ДатаЗапуска,
		ТекущаяДатаСеанса());
	Результат.Вставить("КНачалу", КНачалу);
	
	Результат.Вставить("КОкончанию", ЗначенияЗаполнения.ДатаВыпуска);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область НастройкиАвтовыбораИПотребленияМатериалов

Процедура ЗаполнитьНастройкиПолученияМатериаловВКоллекции(СтрокиАвтоВыбора, ДанныеПоНоменклатуре, МенеджерВременныхТаблиц = Неопределено, ИспользоватьПроизводство2_2 = Ложь)
	
	Если СтрокиАвтоВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить(
		"НомерСтроки", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаМатериалов.Колонки.Добавить(
		"Номенклатура", 
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить(
		"Характеристика", 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить(
		"Подразделение", 
		Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаМатериалов.Колонки.Добавить(
		"ПроизводитсяВПроцессе", 
		Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалов.Колонки.Добавить(
		"ПроизводствоНаСтороне", 
		Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалов.Колонки.Добавить(
		"СпособПолученияМатериала", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПолученияМатериаловВСпецификации"));
	ТаблицаМатериалов.Колонки.Добавить(
		"ИсточникПолученияПолуфабриката", 
		Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства,СправочникСсылка.РесурсныеСпецификации"));
	
	Для НомерСтроки = 0 По СтрокиАвтоВыбора.Количество()-1 Цикл
		ДанныеСтроки = СтрокиАвтоВыбора[НомерСтроки];
		Если ЗначениеЗаполнено(ДанныеСтроки.Подразделение)
			И ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда 
			НоваяСтрока = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			НоваяСтрока.НомерСтроки = НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаМатериалов.Количество() > 0 Тогда
		
		ДанныеЗаказа = Новый Структура;
		
		Если ДанныеПоНоменклатуре.Свойство("ПодразделениеДиспетчер") Тогда
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
		Иначе
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", Справочники.СтруктураПредприятия.ПустаяСсылка());
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("ДатаПотребности") Тогда
			ДанныеЗаказа.Вставить("ДатаПотребности", ДанныеПоНоменклатуре.ДатаПотребности);
		Иначе
			ДанныеЗаказа.Вставить("ДатаПотребности", '00010101');
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("Распоряжение") Тогда
			ДанныеЗаказа.Вставить("Распоряжение", ДанныеПоНоменклатуре.Распоряжение);
		Иначе
			ДанныеЗаказа.Вставить("Распоряжение", Неопределено);
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("Назначение") Тогда
			ДанныеЗаказа.Вставить("Назначение", ДанныеПоНоменклатуре.Назначение);
		Иначе
			ДанныеЗаказа.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		КонецЕсли;
		
		СпособыПолученияМатериалов = ПланированиеПроизводства.СпособыПолученияМатериаловПоУмолчанию(
																		ДанныеЗаказа, 
																		ТаблицаМатериалов, 
																		МенеджерВременныхТаблиц,
																		ИспользоватьПроизводство2_2);
		
		Для НомерСтроки = 0 По СтрокиАвтоВыбора.Количество()-1 Цикл
			ТекущаяСтрока = СтрокиАвтоВыбора[НомерСтроки];
			СпособПолученияМатериала = СпособыПолученияМатериалов.Найти(НомерСтроки, "НомерСтроки");
			Если СпособПолученияМатериала <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СпособПолученияМатериала);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт



КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	//++ НЕ УТКА
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСравнениеСПлановойКалькуляцией(КомандыОтчетов);
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтоимостьМатериаловИРабот(КомандыОтчетов);
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Получение данных спецификации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СтруктураДанныхОсновногоИзделияСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Спецификация");
	Результат.Вставить("Количество", 0);
	Результат.Вставить("Подразделение");
	Результат.Вставить("НачалоПроизводства");
	Результат.Вставить("ДнейДоОкончания", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	РезультатСпецификации = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, "Справочник.РесурсныеСпецификации", МенеджерВременныхТаблиц, ПараметрыВыборкиДанных);
	
	РезультатЭтапыПроизводства = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, "Справочник.ЭтапыПроизводства", МенеджерВременныхТаблиц, ПараметрыВыборкиДанных);
		
	ОбработкаЗавершена = НЕ РезультатСпецификации.ЕстьДанныеДляОбработки
		И НЕ РезультатЭтапыПроизводства.ЕстьДанныеДляОбработки;
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	Если ОбработкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатСпецификации.ЕстьЗаписиВоВременнойТаблице
		И НЕ РезультатЭтапыПроизводства.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыДляОбработки.Ссылка.Владелец КАК Спецификация,
		|	ЭтапыДляОбработки.Ссылка          КАК Этап
		|ИЗ
		|	" + РезультатЭтапыПроизводства.ИмяВременнойТаблицы + " КАК ЭтапыДляОбработки
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	" + РезультатСпецификации.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ИЗ
		|	" + РезультатЭтапыПроизводства.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ОбъектыДляОбработки.Ссылка = ЭтапыПроизводства.Ссылка";
	
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыСпецификаций.Действует);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЭтапыДляОбработки = РезультатЗапроса[0].Выгрузить();
	ЭтапыДляОбработки.Индексы.Добавить("Спецификация");
	
	УдалитьОтмененныеЭтапыИзОчередиДляОбработки(ЭтапыДляОбработки);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РесурсныеСпецификации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭтапыПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Владелец", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Выборка.Ссылка);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОтборСтрок = Новый Структура("СпособПолученияМатериала",Перечисления.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка());
			
			Для Каждого Строка Из ДанныеОбъекта.МатериалыИУслуги.НайтиСтроки(ОтборСтрок) Цикл
				Если Строка.ПроизводитсяВПроцессе Тогда
					Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
						Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
					Иначе
						Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
					КонецЕсли;
				Иначе
					Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеОбъекта.Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
				
				Справочники.ЭтапыПроизводства.РассчитатьДлительностьПроизводстваДляПереходаНаНовуюВерсию(Выборка.Ссылка);
				
			КонецЕсли;
			
			ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Ссылка%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), 
				Выборка.Ссылка,
				ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить("Справочник.РесурсныеСпецификации");
	МассивОбъектов.Добавить("Справочник.ЭтапыПроизводства");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, МассивОбъектов);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыИУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
		|ГДЕ
		|	МатериалыИУслуги.СпособПолученияМатериала = &ПустойСпособПолученияМатериала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец.Статус = &СтатусДействует
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления
		|	И НЕ ЭтапыПроизводства.ПодходитНовойКонцепции");
	
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыСпецификаций.Действует);
	Запрос.УстановитьПараметр("ПустойСпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПустаяСсылка());
	
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

Процедура ОтметитьВыполнениеОбработкиЭтапов(ЭтапыДляОбработки, Спецификация)
	
	Отбор = Новый Структура("Спецификация",Спецификация);
	КоллекцияСтрок = ЭтапыДляОбработки.НайтиСтроки(Отбор);
	Для каждого Строка Из КоллекцияСтрок Цикл
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Строка.Этап);
		ЭтапыДляОбработки.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОтмененныеЭтапыИзОчередиДляОбработки(ЭтапыДляОбработки)
	
	Для каждого Строка Из ЭтапыДляОбработки Цикл
		
		Если ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Строка.Этап);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка.Этап);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Строка.Этап.Метаданные(), Строка.Этап, ТекстСообщения);
			
		КонецПопытки;
		ЭтапыДляОбработки.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
