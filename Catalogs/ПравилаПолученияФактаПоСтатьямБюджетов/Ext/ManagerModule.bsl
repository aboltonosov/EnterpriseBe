#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устарела. Следует использовать новую (см. ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила)
// Возвращает схему для получения факта по статьям бюджетов
// 
// Параметры:
//	Правило - РегистрСведенийМенеджерЗаписи.ПравилаПолученияФактаПоСтатьямБюджетов, Выборка,
// 				СтрокаТаблицыЗначений, Структура - Правило получения факта по статьям бюджетов.
//	РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - Режим получения данных бюджетирования.
// 
// Возвращаемое значение:
// 	 СхемаКомпоновкиДанных - схема получения фактических данных, соответствующая источнику.
//
Функция СхемаПолученияДанных(Правило, РежимПолученияДанных = Неопределено) Экспорт
	
	СхемаПолученияДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборДанных = ФинансоваяОтчетностьСервер.НовыйНабор(СхемаПолученияДанных);
	НаборДанных.Запрос =
		"ВЫБРАТЬ
		|*";
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		Если ЗначениеЗаполнено(Правило.ИсточникДанных) Тогда
			МакетыИсточниковПолученияДанных = Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты;
			ИмяИсточникаДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило.ИсточникДанных, "ИсточникДанных");
			МакетИсточникаПолученияДанных = МакетыИсточниковПолученияДанных.Найти(ИмяИсточникаДанных);
			Если МакетИсточникаПолученияДанных = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для операции %1 не определена схема получения данных.'"), Правило.ИсточникДанных);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			ИмяСхемы = МакетИсточникаПолученияДанных.Имя; 
			СхемаПолученияДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет(ИмяСхемы);
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИмяСхемы = "РегламентированныйУчет";
		СхемаПолученияДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет(ИмяСхемы);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИмяСхемы = "МеждународныйУчет";
		СхемаПолученияДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет(ИмяСхемы);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СхемаПолученияДанныхПравила = Правило.СхемаИсточникаДанных.Получить();
		Если СхемаПолученияДанныхПравила <> Неопределено Тогда
			СхемаПолученияДанных = СхемаПолученияДанныхПравила;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен раздел источника получения данных. Получение схемы невозможно.'");
	КонецЕсли; 
	
	Если РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
		Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
				Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СхемаПолученияДанных;
	
КонецФункции

//++ НЕ УТКА

// Запускает фоновое задание для регистрации документов к отражению факта
// 
// Параметры:
// 	 Ссылка - СправочникСсылка.ПрафилаПолученияФактаПоСтатьямБюджета - Правило получения факта. 
//	НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Окончание периода.
//   РеквизитыСравнения - Структура - ДействуетС, ДействуетПо ПравилПолученияФакта до записи
//
Процедура ЗапуститьРегистрациюДокументовДляОтраженияФоном(Ссылка,НачалоПериода,КонецПериода,РеквизитыСравнения=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(РеквизитыСравнения) И РеквизитыСравнения.Свойство("ДействуетС") Тогда
		Если РеквизитыСравнения.ДействуетС <> НачалоПериода Тогда
			НачалоПериода = Мин(НачалоПериода, РеквизитыСравнения.ДействуетС);
		КонецЕсли;
		
		Если РеквизитыСравнения.ДействуетПо <> КонецПериода Тогда
			КонецПериода = Макс(КонецПериода, РеквизитыСравнения.ДействуетПо);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПравила = Ссылка.ПолучитьОбъект(); 
	ВидыДокументов = ФактическиеДанныеБюджетированияСервер.ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила).ВыгрузитьКолонку("ИмяВидаДокумента");
	
	Ключ = "РегистрацияДокументовДляОтраженияФакта" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется регистрация документов для отражения факта'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ВидыДокументов);
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ЗарегистрироватьДокументыДляОтражения");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура регистрирует документы к отражению факта.
// 
// Параметры:
//	ВидыДокументов - Массив - Массив имен видов документов из метаданных.
//	Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта.
//	НачалоПериода - Дата - Необязательный. Начало периода.
//  КонецПериода - Дата - Необязательный. Окончание периода.
//
Процедура ЗарегистрироватьДокументыДляОтражения(ВидыДокументов, Ссылка, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	СброситьКэшБюджетов(Ссылка);
	
	Если ВидыДокументов.Количество() = 1 И ВидыДокументов[0] = "" Тогда
		ВидыДокументов = Новый Массив;
		Для Каждого Документ из Метаданные.Документы Цикл
			ВидыДокументов.Добавить(Документ.Имя);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ВидДокумента из ВидыДокументов Цикл
		Первый = ПустаяСтрока(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ Ссылка КАК Документ, Дата КАК ПериодЗаписи, 
		|	""" + ВидДокумента + """ КАК ИмяВидаДокумента
		|	" + ?(Первый, "ПОМЕСТИТЬ ТаблицаДокументов", "") + "
		| ИЗ Документ." + ВидДокумента + "
		|";
		Если Метаданные.Документы[ВидДокумента].Проведение = 
				Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ТекстЗапроса = ТекстЗапроса + "ГДЕ Проведен
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ГДЕ НЕ ПометкаУдаления
			|";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			ТекстЗапроса = ТекстЗапроса + " И Дата >= &НачалоПериода";
		КонецЕсли;
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстЗапроса = ТекстЗапроса + " И Дата <= &КонецПериода";
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТекстЗапроса = ТекстЗапроса + ";
	| ВЫБРАТЬ * ИЗ ТаблицаДокументов";
	
	Ключ = "ОтражениеДокументовВБюджетировании";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		| ГДЕ НЕ Документ В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ ИЗ РегистрСведений.ЗаданияКОтражениюВБюджетировании)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	
	НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	НомерЗадания = НомерЗадания + 1;
	Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(НомерЗадания + 1);
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Регистрация документов для отражения факта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
			
	Для Каждого Стр Из ТаблицаДокументов Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
		НаборЗаписей.Отбор.Документ.Установить(Стр.Документ);
		
		НачатьТранзакцию();

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
		ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	НомерЗадания);
		ЭлементБлокировки.УстановитьЗначение("Документ",		Стр.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ЗаписьОтражения = НаборЗаписей.Добавить();
		ЗаписьОтражения.НомерЗадания = НомерЗадания;
		ЗаполнитьЗначенияСвойств(ЗаписьОтражения,Стр);
		НаборЗаписей.Записать(Истина);
		
		Попытка
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru= 'Регистрация документов для отражения факта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	//++ НЕ УТ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуРезультатРаботыПравилПолученияФактическихДанныхПоСтатьеБюджетов(КомандыОтчетов);
	//-- НЕ УТ
	
	Возврат; // Не используется в УТ.

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК Правила
	|ГДЕ
	|	Правила.ХешНастроек = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК Правила
	|ГДЕ
	|	Правила.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные)
	|	И Правила.ХешСхемыКомпоновкиДанных = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	НЕ ПравилаПолученияФактаПоСтатьямБюджетов.РасширеныйРежимНастройкиЗаполненияАналитики
	|	И (ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 1
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики1 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику1
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 2
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики2 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику2
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 3
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики3 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику3
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 4
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики4 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику4
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 5
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики5 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику5
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик = 6
	|					ТОГДА (ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ВыражениеЗаполненияАналитики6 КАК СТРОКА(1))) = """"
	|							И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ЗаполнятьУказаннымЗначениемАналитику6
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов.ЭтоГруппа";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПравилаПолученияФактаПоСтатьямБюджетов";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);	
			
	Пока Выборка.Следующий() Цикл
		Попытка			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Сделаем слепок настроек и схемы для будущего сравнения их между собой без анализа каждого элемента
			БюджетированиеСервер.ЗаполнитьРеквизитыХешейНастроекИСхемы(СпрОбъект);
			
			// Заполним настройки заполнения аналитик
			Если Не СпрОбъект.РасширеныйРежимНастройкиЗаполненияАналитики 
				И НЕ СпрОбъект.СтатьяБюджетов.ЭтоГруппа Тогда
				БюджетированиеСервер.ЗаполнитьРеквизитыОбъектаНастроекЗаполненияАналитики(СпрОбъект);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Правило% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Правило%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Справочники.ВидыБюджетов, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область СлужебныеПроцедурыИФункции
	
// Очищает вспомогательный кэш видов бюджетов
// 
// Параметры
//   Ссылка - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов
//
Процедура СброситьКэшБюджетов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
		|ПОМЕСТИТЬ ЭлементыФинансовойОтчетности
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
		|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Справочник.Владелец КАК Ссылка
		|ИЗ
		|	ЭлементыФинансовойОтчетности КАК ЭлементыФинансовойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ПО ЭлементыФинансовойОтчетности.Ссылка = Справочник.Ссылка";
		
	РеквизитыСравнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "СтатьяБюджетов");

	Запрос.УстановитьПараметр("Значение", РеквизитыСравнения.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидБюджета.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
//-- НЕ УТКА

#КонецЕсли
