#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возращает новый номер этапа.
//
// Параметры:
//   Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//
// Возвращаемое значение:
//   Число        - Новый номер этапа
//
Функция НовыйНомерЭтапа(Спецификация) Экспорт

	Если Спецификация.Пустая() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа УБЫВ");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.НомерЭтапа + 1;

КонецФункции

// Возвращает список предшественников
// Этапы должны принадлежать одной спецификации
//
// Параметры:
//  Ссылка - СправочникСсылка.ЭтапыПроизводства - этап
// 
// Возвращаемое значение:
//   - Соответствие - соответствие предшественников
//
Функция Предшественники(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка               КАК Этап,
		|	ЭтапыПроизводства.НомерЭтапа           КАК НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			Т.Владелец
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Ссылка В (&МассивСсылок)
		|	)
		|	И НЕ ЭтапыПроизводства.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("НомерСледующегоЭтапа");
	
	Предшественники = Новый Соответствие;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Предшественники.Вставить(Ссылка, Новый Массив);
		
		Отбор = Новый Структура("Этап", Ссылка); 
		
		ЭтапыРасчета = ТаблицаЭтапов.НайтиСтроки(Отбор);
		
		Пока ЭтапыРасчета.Количество() > 0 Цикл
			
			ТекущаяСтрока = ЭтапыРасчета[0];
			
			Отбор = Новый Структура("НомерСледующегоЭтапа", ТекущаяСтрока.НомерЭтапа);
			
			Для каждого НайденнаяСтрока Из ТаблицаЭтапов.НайтиСтроки(Отбор) Цикл
				
				Предшественники[Ссылка].Добавить(НайденнаяСтрока.Этап);
				
				ЭтапыРасчета.Добавить(НайденнаяСтрока);
				
			КонецЦикла;
			
			ЭтапыРасчета.Удалить(0);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Предшественники;
	
КонецФункции

// Возращает основную единицу измерения времени этапа.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа
//
Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.Минута;

КонецФункции

// Возращает основную единицу измерения времени буфера.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени буфера
//
Функция ОсновнаяЕдиницаВремениБуфера() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;

КонецФункции

// Возращает основную единицу измерения времени длительности этапа УББВ.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа УББВ
//
Функция ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ() Экспорт
	
	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;
	
КонецФункции

// Возвращает имена блокруемых реквизитов
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НомерЭтапа");
	МассивЭлементов.Добавить("НомерСледующегоЭтапа");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("Подразделение1");
	МассивЭлементов.Добавить("СпособПроизводства");
	МассивЭлементов.Добавить("МаршрутнаяКарта");
	МассивЭлементов.Добавить("КоэффициентМаршрутнойКарты");
	МассивЭлементов.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	МассивЭлементов.Добавить("ПланироватьРаботуВидовРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентров");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ГрафикРаботыПартнера");
	МассивЭлементов.Добавить("ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте");
	МассивЭлементов.Добавить("ДобавитьАльтернативный");
	
	Возврат МассивЭлементов;
	
КонецФункции

//++ НЕ УТКА

// Заполняет список видов рабочих центров на основании выбранной маршрутной карте
//
// Параметры:
//  ДанныеЭтапа	- ДанныеФормы - объект содержащий данные этапа
//
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(ДанныеЭтапа) Экспорт

	ДанныеЭтапа.ВидыРабочихЦентров.Очистить();
	ДанныеЭтапа.АльтернативныеВидыРабочихЦентров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	ТекстЗапросаСписокЭтапов = "ВЫБРАТЬ
	               |	&МаршрутнаяКарта КАК МаршрутнаяКарта
	               |ПОМЕСТИТЬ СписокЭтапов";
					   
	Запрос.УстановитьПараметр("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Подразделение",   ДанныеЭтапа.Подразделение);
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(
				Запрос, 
				ТекстЗапросаСписокЭтапов, 
				ДанныеЭтапа.ВидыРабочихЦентров);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	// Заполним значения буферов
	БуферыМаршрутнойКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЭтапа.МаршрутнаяКарта, 
		"ПредварительныйБуфер,ЗавершающийБуфер,ЕдиницаИзмеренияПредварительногоБуфера,ЕдиницаИзмеренияЗавершающегоБуфера");
	ЗаполнитьЗначенияСвойств(ДанныеЭтапа, БуферыМаршрутнойКарты);		
	
	Если ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли; 
	Если ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура РассчитатьДлительностьПроизводстваДляПереходаНаНовуюВерсию(Спецификация) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.Владелец = &Спецификация
		|	И НЕ Таблица.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
//++ НЕ УТКА
		Если Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Объект.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ();
			
		КонецЕсли;
//-- НЕ УТКА
		
		ЗаполнитьКоэффициентМаршрутнойКарты(Объект, Ложь);
		
		Попытка
			
			Объект.ПодходитНовойКонцепции = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДнейДоОкончания", Истина);
		
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
		Исключение
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	//++ НЕ УТКА
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.МаршрутнаяКарта <> &ПустаяМаршрутнаяКарта
	|	И ЭтапыПроизводства.КоэффициентМаршрутнойКарты = 0");
	
	Запрос.УстановитьПараметр("ПустаяМаршрутнаяКарта", Справочники.МаршрутныеКарты.ПустаяСсылка());
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные);
	
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ЭтапыПроизводства";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектИзменен = Ложь;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ Объект = Неопределено Тогда
				ЗаполнитьКоэффициентМаршрутнойКарты(Объект, ОбъектИзменен);
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция НедоступныеЭлементыЗакрытойСпецификации() Экспорт

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПредварительныйБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
	МассивЭлементов.Добавить("ЗавершающийБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	МассивЭлементов.Добавить("ДлительностьЭтапа");
	МассивЭлементов.Добавить("ДлительностьЭтапа1");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	МассивЭлементов.Добавить("ОптимальноеКоличествоПередачиМеждуЭтапами");
	МассивЭлементов.Добавить("Непрерывный");
	МассивЭлементов.Добавить("РазбиватьМаршрутныеЛисты");
	МассивЭлементов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");

	Возврат МассивЭлементов;
	
КонецФункции

Процедура ЗаполнитьКоэффициентМаршрутнойКарты(Объект, ОбъектИзменен)
	
	Если Объект.КоэффициентМаршрутнойКарты = 0 Тогда
		
		Объект.КоэффициентМаршрутнойКарты = 1;
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, ТекстЗапросаСписокЭтапов, СписокВидовРабочихЦентров)

	ИндексРезультатаЗапроса = 0;
	ТекстЗапроса = "";
	
	Если ТекстЗапросаСписокЭтапов <> Неопределено Тогда
		ИндексРезультатаЗапроса = 1;
		
		ТекстЗапроса = ТекстЗапросаСписокЭтапов 
				+ "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|"
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса
			+ "ВЫБРАТЬ
			  |	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта
			  |ПОМЕСТИТЬ СписокМаршрутныхКарт
			  |ИЗ
			  |	СписокЭтапов КАК СписокЭтапов
			  |
			  |ИНДЕКСИРОВАТЬ ПО
			  |	МаршрутнаяКарта
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  // 1. Виды рабочих центров по которым нужно планировать работу
			  |ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |	ВЫБОР	
			  |		КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |			ТОГДА спрОперации.РабочийЦентр
			  |		ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
			  |	КОНЕЦ КАК ВидРабочегоЦентра
			  |ИЗ
			  |	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			  |		ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			  |			И (НЕ спрОперации.СодержитВложенныйМаршрут)
			  |			И (ВЫБОР 
			  |					КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |						ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПланироватьРаботу
			  |					КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
			  |						ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПланироватьРаботу
			  |					ИНАЧЕ ЛОЖЬ
			  |				КОНЕЦ)
			  | ГДЕ Не спрОперации.Ссылка.ПометкаУдаления
			  |		И ВЫБОР	
			  |			КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |				ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).Подразделение
			  |			ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.Подразделение
			  |		КОНЕЦ = &Подразделение
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |УНИЧТОЖИТЬ СписокЭтапов
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	спрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта
			  |ПОМЕСТИТЬ СписокЭтапов
			  |ИЗ
			  |	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			  |		ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			  |			И спрОперации.СодержитВложенныйМаршрут
			  | ГДЕ Не спрОперации.Ссылка.ПометкаУдаления
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[1] - Виды рабочих центров по которым нужно планировать работ
	
	Если Результат[1 + ИндексРезультатаЗапроса].Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним выходные изделия
	Выборка = Результат[1 + ИндексРезультатаЗапроса].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.ВидРабочегоЦентра);
  		СписокСтрок = СписокВидовРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			НоваяСтрока = СписокВидовРабочихЦентров.Добавить();
			НоваяСтрока.ВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиВидовРабочихЦентров(НоваяСтрока, Ложь);
		КонецЕсли; 
	КонецЦикла;
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, Неопределено, СписокВидовРабочихЦентров);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли
