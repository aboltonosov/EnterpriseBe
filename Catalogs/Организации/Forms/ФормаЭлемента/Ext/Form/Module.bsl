
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ВидОрганизации") Тогда
		ВидОрганизации = Параметры.ЗначенияЗаполнения.ВидОрганизации;
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И НЕ Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ЮридическоеЛицо";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе ВызватьИсключение НСтр("ru = 'Невозможно определить вид организации. Обратитесь к администратору.'");
	КонецЕсли;
	
	ЗаполнитьРеквизитГоловнаяОрганизация();
	ОткрытаФормаВыбораДаты = Ложь;

	УправлениеФормойНаСервере();
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	АдресныйКлассификаторПуст = АдресныйКлассификатор.КоличествоЗагруженныхРегионов() = 0;
		
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
		
	АдресЛоготипа 			= ?(Объект.ФайлЛоготип.Пустая(), 			"", НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор));
	АдресФаксимильнойПечати = ?(Объект.ФайлФаксимильнаяПечать.Пустая(), "", НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор));
	
	БазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	Элементы.ГруппаПраваяСторонаЮрЛицаКоды.Видимость = Не БазоваяВерсия;
	Элементы.ПраваяСторонаИндивидуальногоПредпринимателяЗаголовкиЗначения.Видимость = Не БазоваяВерсия;
	
	Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Организации) Тогда
		Элементы.ФормаСкопировать.Видимость = Не БазоваяВерсия;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
	КодОрганаПФР                          = Объект.КодОрганаПФР;
	НаименованиеТерриториальногоОрганаПФР = Объект.НаименованиеТерриториальногоОрганаПФР;
	РегистрационныйНомерПФР               = Объект.РегистрационныйНомерПФР;
	ИПРегистрационныйНомерПФР             = Объект.ИПРегистрационныйНомерПФР;
	
	ЗаполнитьОписанияПараметров();
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	//++ НЕ УТ
	УправлениеДокументооборотом(ЭтаФорма);
	
	Элементы.ЗаявлениеНаПодключениеОткрытьМастер.Заголовок =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(ЭтаФорма, Объект.Ссылка, Отказ, СтандартнаяОбработка);
	//-- НЕ УТ
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", , , Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаНастройкиДокументооборота" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор)
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборДаты" Тогда
		ОбработкаВыбораДатыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	//++ НЕ УТ
	УправлениеДокументооборотом(ЭтаФорма);
	ЗаполнитьОписаниеКодовДО();
	Модифицированность = Истина;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	//++ НЕ УТ
	ПравоИзмененияСтавкиНалогаНаИмущество = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество);
	//-- НЕ УТ

	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) И Не Объект.ОбособленноеПодразделение Тогда
		
		Отказ = Истина;
		Элементы.ГруппаУчетнаяПолитика.Видимость = Истина;
		Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Учетная политика"" не заполнено.'"), ,
			"УчетнаяПолитикаОрганизаций.УчетнаяПолитика");
		
		КонецЕсли;
		
	Если НЕ УправлениеПредприятием 
		//++ НЕ УТ
		ИЛИ НЕ ПравоИзмененияСтавкиНалогаНаИмущество  
		ИЛИ НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
		//-- НЕ УТ
		Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения"));
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием 
		//++ НЕ УТ
		ИЛИ НЕ ПравоИзмененияСтавкиНалогаНаИмущество  
		ИЛИ НЕ СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки
		//-- НЕ УТ
		Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка"));
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием 
		//++ НЕ УТ
		ИЛИ НЕ ПравоИзмененияСтавкиНалогаНаИмущество  
		ИЛИ НЕ СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах
		//-- НЕ УТ 
		Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтавкаНалогаНаИмуществоПроцентУменьшения"));
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ПараметрыЗаписи.Свойство("РежимИзмененияУчетнойПолитикиУточнен") Тогда
		ЗапроситьРежимИзмененияУчетнойПолитики(УчетнаяПолитикаОрганизаций.Период, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ТекущийОбъект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Если ДанныеРегистрацийПФРИзменены Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ЭтаФорма, "КодОрганаПФР, НаименованиеТерриториальногоОрганаПФР, РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормойНаСервере();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = СсылкаНаФайл;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор);
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = СсылкаНаФайл;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_УчетныеПолитикиОрганизаций" И ЗначениеЗаполнено(Источник) Тогда
		
		ДействияПослеЗаписиУчетнойПолитики(Источник);
	
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И ГоловнаяОрганизация = Источник
		И Параметр.ИмяРегистра = "УчетнаяПолитикаОрганизаций" Тогда
		
		Если УчетнаяПолитикаОрганизацийНаборЗаписейПрочитан Тогда
			
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
				ЭтаФорма,
				ГоловнаяОрганизация,
				ИмяСобытия,
				Параметр,
				Источник);
			
			ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершеноРедактированиеРегистраций" Тогда
		
		Если Параметр.ОткатитьИзменения Тогда
			ВосстановитьДанныеРегистрацийВНалоговыхОрганах();
			ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
		Иначе
			Модифицированность = Истина;
			ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
			РегистрацияВНалоговомОргане = Параметр.ОсновнаяРегистрация;
		КонецЕсли;
		
		ЗаполнитьОписаниеРегистрацииВНалоговомОргане();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Объект.Ссылка, ЭтаФорма);
	//-- НЕ УТ
	
	ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
	ДанныеРегистрацийПФРИзменены = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗавершениеРаботы И (ДанныеРегистрацийВНалоговыхОрганахИзменены ИЛИ ДанныеРегистрацийПФРИзменены) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ВосстановитьДанныеРегистрацийВНалоговыхОрганах();
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы И ДанныеРегистрацийПФРИзменены Тогда
		ВосстановитьДанныеРегистрацийВПФР();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() И НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения	= Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ВидОбменаСКонтролирующимиОрганами", Объект.ВидОбменаСКонтролирующимиОрганами);
	ЗначенияЗаполнения.Вставить("УчетнаяЗаписьОбмена", Объект.УчетнаяЗаписьОбмена);
	ЗначенияЗаполнения.Вставить("КодНалоговогоОрганаПолучателя", Объект.КодНалоговогоОрганаПолучателя);
	ЗначенияЗаполнения.Вставить("КодОрганаФСГС", Объект.КодОрганаФСГС);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаНастройкиДокументооборота", 
					Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), 
					ЭтаФорма);
	//-- НЕ УТ
	Возврат;
					
КонецПроцедуры

&НаКлиенте
Процедура ОбменФССНажатие(Элемент, СтандартнаяОбработка)
		
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;

	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Документооборот с ФСС'"), Новый ОписаниеОповещения("ОбменФССНажатиеОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОбменФССНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбменФССНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменФССНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПроверитьОбменФСС();
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОбменРАРНажатие(Элемент, СтандартнаяОбработка)
		
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;

	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Документооборот с Росалкогольрегулированием'"), Новый ОписаниеОповещения("ОбменРАРНажатиеОбъектЗаписан", ЭтотОбъект));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменРАРНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
			
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСРАР.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбменРАРНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбменРАРНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПроверитьОбменРАР();
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		Объект.ИНН = "";
		УправлениеФормойПереходНаСервер();
	Иначе
		ИзменитьИНН(Объект.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИП %1 %2 %3'"),
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Объект.НаименованиеПолное	= "";
	НаименованиеСокращенноеПриИзменении(Элементы.НаименованиеСокращенное);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	ИзменитьИНН(Объект.ГоловнаяОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	ИзменитьВидОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИННОбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИННИПОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКПП(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КППОбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКПП(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОИндивидуальногоПредпринимателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПриИзменении(Элемент)
	УчетнаяПолитикаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма,
								   "УчетнаяПолитикаОрганизаций.Период",
								   "УчетнаяПолитикаОрганизацийПериодСтрокой",
								   Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВводМесяцаНачалоВыбора(
		ЭтаФорма,
		ЭтаФорма,
		"УчетнаяПолитикаОрганизаций.Период",
		"УчетнаяПолитикаОрганизацийПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВводМесяцаРегулирование(ЭтаФорма,
								"УчетнаяПолитикаОрганизаций.Период",
								"УчетнаяПолитикаОрганизацийПериодСтрокой",
								Направление,
								Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",		"РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта",	"СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам");
	ПараметрыФормы.Вставить("НазваниеМакета",	"ЛьготыПоНалогуНаИмущество");
	ПараметрыФормы.Вставить("ТекущийПериод",	СтавкаНалогаНаИмуществоПрименяетсяС);

	КодЛьготы = Неопределено;


	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, Новый ОписаниеОповещения("СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормы", ПараметрыФормы)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
    
    
    КодЛьготы = Результат;
    
    Если КодЛьготы <> Неопределено Тогда
        
        СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения = КодЛьготы;
        
        ТекущаяИзменяемаяГруппа = "СтавкаНалогаНаИмущество";
        
        ПараметрыФормы = Новый Структура;
        ТекстСообщения = НСтр("ru = 'Дата, с которой должны вступить в силу изменения по установленной ставке и льготам по налогу на имущество.'");
        ПараметрыФормы.Вставить("ПоясняющийТекст", ТекстСообщения);
        ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите дату'"));
        
        Если НЕ ОткрытаФормаВыбораДаты Тогда
            ОткрытаФормаВыбораДаты = Истина;
            ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        КонецЕсли;
        
    КонецЕсли;
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоНалоговаяСтавкаПриИзменении(Элемент)
	
	//++ НЕ УТ
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	ТекущаяИзменяемаяГруппа = "СтавкаНалогаНаИмущество";
	
	ПараметрыФормы = Новый Структура;
	ТекстСообщения = НСтр("ru = 'Дата, с которой должны вступить в силу изменения по установленной ставке и льготам по налогу на имущество.'");
	ПараметрыФормы.Вставить("ПоясняющийТекст", ТекстСообщения);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите дату'"));
	
	Если НЕ ОткрытаФормаВыбораДаты Тогда
		ОткрытаФормаВыбораДаты = Истина;
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатие(Элемент)
	
	//++ НЕ УТ	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Организация", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбор);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаСпискаОбъектовСОсобымПорядкомНалогообложения", 
					ПараметрыФормы,,,,, Новый ОписаниеОповещения("ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьДанныеПоОсновнымСредствам();
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложенияПриИзменении(Элемент)
	
	//++ НЕ УТ
	Если НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения Тогда
		СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	КонецЕсли;
	СтавкаНалогаНаИмуществоНалоговаяСтавкаПриИзменении(Элемент);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоСнижениеНалоговойСтавкиПриИзменении(Элемент)
	
	//++ НЕ УТ
	Если НЕ СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки Тогда
		СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка = 0;
	КонецЕсли;
	СтавкаНалогаНаИмуществоНалоговаяСтавкаПриИзменении(Элемент);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентахПриИзменении(Элемент)
	
	//++ НЕ УТ
	Если НЕ СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах Тогда
		СтавкаНалогаНаИмуществоПроцентУменьшения = 0;
	КонецЕсли;
	СтавкаНалогаНаИмуществоНалоговаяСтавкаПриИзменении(Элемент);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2ПриИзменении(Элемент)
	
	//++ НЕ УТ
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	ТекущаяИзменяемаяГруппа = "СтавкаНалогаНаИмущество";
	
	ПараметрыФормы = Новый Структура;
	ТекстСообщения = НСтр("ru = 'Дата, с которой должны вступить в силу изменения по установленной ставке и льготам по налогу на имущество.'");
	ПараметрыФормы.Вставить("ПоясняющийТекст", ТекстСообщения);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите дату'"));
	
	Если НЕ ОткрытаФормаВыбораДаты Тогда
		ОткрытаФормаВыбораДаты = Истина;
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = УчетнаяПолитикаОрганизаций.УчетнаяПолитика Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПараметрыОрганизацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
		И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#Область Классификаторы

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДИндивидуальногоПредпринимателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДИндивидуальногоПредпринимателяПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДОбособленногоПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДОбособленногоПодразделенияПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ИндивидуальногоПредпринимателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ИндивидуальногоПредпринимателяПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ОбособленногоПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ОбособленногоПодразделенияПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПрименениеЕНВД

&НаКлиенте
Процедура ПрименениеЕНВДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для продолжения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрименениеЕНВДВыборЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуСпискаПрименениеЕНВД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДРозничнаяТорговляОблагаетсяЕНВДПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ТекущаяИзменяемаяГруппа = "ПрименениеЕНВД";
	
	ПараметрыФормы = Новый Структура;
	ТекстСообщения = НСтр("ru = 'Дата, с которой должны вступить в силу изменения по применению ЕНВД на складе ""%Склад%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", ТекущиеДанные.Склад);
	ПараметрыФормы.Вставить("ПоясняющийТекст", ТекстСообщения);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите дату'"));
	
	Если НЕ ОткрытаФормаВыбораДаты Тогда
		ОткрытаФормаВыбораДаты = Истина;
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьОбъект(Команда)
	ПараметрыЗаписи = Новый Структура("НеЗакрыватьФорму", Истина);
	ЭтотОбъект.Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФР(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Пенсионный фонд'"), Новый ОписаниеОповещения("ОткрытьПараметрыПФРОбъектЗаписан", ЭтотОбъект));
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФРОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(ПФРСохраненныеЗначения) Тогда
		РегистрацииПФРВХранилище();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("КодОрганаПФР", КодОрганаПФР);
	СтруктураПараметров.Вставить("НаименованиеТерриториальногоОрганаПФР", НаименованиеТерриториальногоОрганаПФР);
	СтруктураПараметров.Вставить("РегистрационныйНомерПФР", РегистрационныйНомерПФР);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерПФР", ИПРегистрационныйНомерПФР);
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровПФР", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыПФРЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Модифицированность = Истина;
		ДанныеРегистрацийПФРИзменены = Истина;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
		ЗаполнитьОписаниеПФР();
	КонецЕсли;

	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФСС(Команда)
		
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Фонд социального страхования'"), Новый ОписаниеОповещения("ОткрытьПараметрыФССОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФССОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("НаименованиеТерриториальногоОрганаФСС", Объект.НаименованиеТерриториальногоОрганаФСС);	
	СтруктураПараметров.Вставить("РегистрационныйНомерФСС", Объект.РегистрационныйНомерФСС);
	СтруктураПараметров.Вставить("КодПодчиненностиФСС", Объект.КодПодчиненностиФСС);
	СтруктураПараметров.Вставить("ИПКодПодчиненностиФСС", Объект.ИПКодПодчиненностиФСС);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерФСС", Объект.ИПРегистрационныйНомерФСС);
	
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		СтруктураПараметров.Вставить("ДополнительныйКодФСС", Объект.ДополнительныйКодФСС);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровФСС", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыФССЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда		
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеФСС();
        Модифицированность = Истина;
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТФОМС(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Фонд обязательного медицинского состояния'"), Новый ОписаниеОповещения("ОткрытьПараметрыТФОМСОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТФОМСОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("РегистрационныйНомерТФОМС", Объект.РегистрационныйНомерТФОМС);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерТФОМС", Объект.ИПРегистрационныйНомерТФОМС);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровТФОМС", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыТФОМСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТФОМСЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеТФОМС();
        Модифицированность = Истина;		
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторов(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Классификаторы'"), Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторовОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("КодОКОНХ", Объект.КодОКОНХ);
	СтруктураПараметров.Вставить("КодОКОПФ", Объект.КодОКОПФ);
	СтруктураПараметров.Вставить("НаименованиеОКОПФ", Объект.НаименованиеОКОПФ);
	СтруктураПараметров.Вставить("КодОКФС", Объект.КодОКФС);
	СтруктураПараметров.Вставить("НаименованиеОКФС", Объект.НаименованиеОКФС);
	СтруктураПараметров.Вставить("КодОКВЭД", Объект.КодОКВЭД);	
	СтруктураПараметров.Вставить("НаименованиеОКВЭД", Объект.НаименованиеОКВЭД);
	СтруктураПараметров.Вставить("КодОКВЭД2", Объект.КодОКВЭД2);	
	СтруктураПараметров.Вставить("НаименованиеОКВЭД2", Объект.НаименованиеОКВЭД2);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыКлассификаторов", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеКлассификаторов(ЭтотОбъект);
        Модифицированность = Истина;	
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Территориальные условия и график работы'"), Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан" ,ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка",            Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидОрганизации",               ВидОрганизации);
	СтруктураПараметров.Вставить("ПрименятьРайонныйКоэффициент", Объект.ПрименятьРайонныйКоэффициент);
	СтруктураПараметров.Вставить("ПрименятьСевернуюНадбавку",    Объект.ПрименятьСевернуюНадбавку);
	СтруктураПараметров.Вставить("РайонныйКоэффициент",          Объект.РайонныйКоэффициент);
	СтруктураПараметров.Вставить("РайонныйКоэффициентРФ",        Объект.РайонныйКоэффициентРФ);
	СтруктураПараметров.Вставить("ГрафикРаботыСотрудников",      Объект.ГрафикРаботыСотрудников);
	СтруктураПараметров.Вставить("Военкомат",                    Объект.Военкомат);
	СтруктураПараметров.Вставить("ПроцентСевернойНадбавки",      Объект.ПроцентСевернойНадбавки);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыФормированияЗарплаты", 
												СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
        Модифицированность = Истина;	
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыМестаРегистрации(Команда)
	
	//++ НЕ УТ
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Иностранная организация'"), Новый ОписаниеОповещения("ОткрытьПараметрыИностраннойОрганизацииОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыИностраннойОрганизацииОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("ИностраннаяОрганизация", Объект.ИностраннаяОрганизация);
	СтруктураПараметров.Вставить("ЗарегистрированВОЭЗ", Объект.ЗарегистрированВОЭЗ);
	СтруктураПараметров.Вставить("НаименованиеИнострОрганизации", Объект.НаименованиеИнострОрганизации);
	СтруктураПараметров.Вставить("СтранаРегистрации", Объект.СтранаРегистрации);
	СтруктураПараметров.Вставить("КодВСтранеРегистрации", Объект.КодВСтранеРегистрации);
	СтруктураПараметров.Вставить("СтранаПостоянногоМестонахождения", Объект.СтранаПостоянногоМестонахождения);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыИностраннойОрганизации", 
												СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыИностраннойОрганизацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры											

&НаКлиенте
Процедура ОткрытьПараметрыИностраннойОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеИностраннойОрганизации();
        Модифицированность = Истина;	
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Параметры кадрового учета и расчета зарплаты'"), Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",  НСтр("ru = 'Параметры кадрового учета и расчет зарплаты'"));
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияУчетнаяПолитика",
									ПараметрыОткрытия,
									ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда)
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Бухучет и выплата зарплаты'"), Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчет(Команда)
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Воинский учет'"), Новый ОписаниеОповещения("ОткрытьВоинскийУчетОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчетОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияВоинскийУчет",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьВоинскийУчетЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеВоинскогоУчета();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрациюВНалоговыхОрганах(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Налоговые органы'"), Новый ОписаниеОповещения("ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(РегистрацииСохраненныеЗначения) Тогда
		РегистрацииВНалоговыхОрганахВХранилище();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	СтруктураПараметров.Вставить("ОсновнаяРегистрация", РегистрацияВНалоговомОргане);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаНастройкиРегистраций", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	//++ НЕ УТ
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
				Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Объект.Ссылка, ЭтаФорма);
	
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда)
	
	//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение();
	//-- НЕ УТ
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
    
    УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлЛоготип);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеЛоготипа(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимилеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеФаксимилеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()
    
    Перем ИдентификаторФайла;
    
    УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлФаксимильнаяПечать);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеФаксимиле(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры // ФаксимилеИзПрисоединенныхФайлов()

&НаКлиенте
Процедура ПомощникРаботыФаксимильнойПечати(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Как создать факсимильную подпись и печать?'"));
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "НапечататьПомощникРаботыФаксимильнойПечати", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплату(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к преварительному просмотру счета на оплату доступен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПредварительныйПросмотрСчетаНаОплатуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
		
	КонецЕсли;
	
	ПредварительныйПросмотрСчетаНаОплатуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЭлементЗаписан = Записать();
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
    ПредварительныйПросмотрСчетаНаОплатуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуФрагмент()
    
    Перем ПараметрКоманды, СтруктураДополнительныхПараметров;
    
    ПараметрКоманды = Новый Массив;
    ПараметрКоманды.Добавить(Объект.Ссылка);
    
    СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru='Предварительный просмотр печатной формы ""Счет на оплату"".'"));
    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьСчетовНаОплату", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюУчетнуюПолитику(Команда)
	 ИзменятьУчетнуюПолитикуПриЗаписиНовой = Истина;
	ОткрытьФорму("Справочник.УчетныеПолитикиОрганизаций.ФормаОбъекта",
		,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсториюИзмененийУчетнойПолитики(Команда)
	
	ТолькоПросмотрИстории = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("УчетнаяПолитикаОрганизаций",
		ГоловнаяОрганизация,
		ЭтаФорма,
		ТолькоПросмотрИстории);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсториюИзмененияСтавкиНалогаНаИмущество(Команда)
	
	//++ НЕ УТ
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Организация", Объект.Ссылка));
	ОткрытьФорму("Справочник.Организации.Форма.ФормаСпискаСтавокНалоговНаИмущество", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядокУплатыНалоговНаМестах(Команда)
	
	//++ НЕ УТ
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Организация", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговНаМестах.ФормаСписка", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

// Конец ИнтеграцияГИСМ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыФормыРазблокировки = Новый Структура;
		ПараметрыФормыРазблокировки.Вставить("ОбособленноеПодразделение", Объект.ОбособленноеПодразделение);

		ОткрытьФорму("Справочник.Организации.Форма.РазблокированиеРеквизитов", ПараметрыФормыРазблокировки,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	
	Возврат ФизическиеЛицаУТ.ФамилияИмяОтчество(ИндивидуальныйПредприниматель);
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ?(ЗначениеЗаполнено(ФИОИндивидуальногоПредпринимателя),ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.Наименование));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаВидОрганизации",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Стройснаб ООО'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ООО ""Стройснаб""'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Общество с ограниченной ответственностью Стройснаб'");
		
	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Филиал ТД (Тамбов)'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ТД Филиал (Тамбов)'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Торговый дом ""Комплексный"" - обособленное подразделение'");
		
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Балабанова Наталья Игнатьевна'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ИП Балабанова Наталья Игнатьевна'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Индивидуальный предприниматель Балабанова Наталья Игнатьевна'");
		
	КонецЕсли;
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение" И
																					ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")));
	
	ВидимостьГруппаИндивидуальныйПредприниматель = 
		УправлениеПредприятием И ВидОрганизации = "ИндивидуальныйПредприниматель";
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаИндивидуальныйПредприниматель",
				"Видимость", 
				ВидимостьГруппаИндивидуальныйПредприниматель);
		
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыОбособленногоПодразделения);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																		"ТолькоПросмотр", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыИндивидуальногоПредпринимателя);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыЮрЛица);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаСвидетельствоИП, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи, ДекорацияРегНомерИП, ДекорацияДействуетСИП",
																	"Видимость", (ВидОрганизации = "ИндивидуальныйПредприниматель"));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН",
																		"Маска", "9999999999");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОГРН",
																		"Маска", "9999999999999");
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ПоказатьИсториюИзмененийРегистрацииВНалоговомОргане, ГруппаРегистрационныеДанные, ГруппаТерриториальныеУсловияГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ",
				"Видимость", 
				Ложь);
	КонецЕсли;
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И НЕ ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);	
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ПравоДоступа("Изменение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	//++ НЕ УТ
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ДоступностьКнопкиРегистрацииВНалоговомОргане
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане); 
	//-- НЕ УТ
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГиперссылкаРегистрацияВНалоговыхОрганах",
																	"Доступность", ДоступностьКнопкиРегистрацииВНалоговомОргане);
	ДоступностьИзмененияУчетнойПолитикиИНалогов = 
								ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
	//++ НЕ УТ
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество)
	//-- НЕ УТ
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Доступность", ДоступностьИзмененияУчетнойПолитикиИНалогов, Истина);
																	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Заголовок", НСтр("ru='Учетная политика'"));
	КонецЕсли;
	
	СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьНаборЗаписейИстории(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
		УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
	
	НастроитьТаблицуПримененияЕНВД();
	
	//++ НЕ УТ
	ОбновитьДанныеПоСтавкеНалогаНаИмущество();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
					"ГруппаОсновныеСредства",
					"Видимость",
					ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам),
					Истина);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
					"ГруппаОсновныеСредства",
					"Доступность",
					ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам),
					Истина);
	ОбновитьДанныеПоОсновнымСредствам();
	//-- НЕ УТ
	
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаВоинскийУчетОтступ",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаЗарплатаИКадры",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьКадровыйУчетИРасчетЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты);
																	
	ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьБухучетИВыплатуЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты);
	
	ДоступностьКнопкиОткрытьВоинскийУчет = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВоинскийУчет);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьВоинскийУчет",
																	"Доступность", ДоступностьКнопкиОткрытьВоинскийУчет);
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ЕстьДоступКЭлектроннномуДокументообороту = КонтекстЭДОСервер <> Неопределено;

	ЕстьДоступКРегиструНастройкиОбменаФСС	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС);
	ЕстьДоступКРегиструНастройкиОбменаФСРАР	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСРАР);
	ЕстьДоступКРегиструНастройкиОбменаРПН	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаРПН);
	ЕстьДоступКРегиструНастройкиОбменаФТС	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФТС);
	
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.Доступность = 
		НЕ ТолькоПросмотр 
		И ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
		
	Элементы.ОбменФСС.Доступность = 
		НЕ ТолькоПросмотр 
		И ЕстьДоступКРегиструНастройкиОбменаФСС
		И ЕстьДоступКЭлектроннномуДокументообороту;
		
	Элементы.ОбменРАР.Доступность = 
		НЕ ТолькоПросмотр 
		И ЕстьДоступКРегиструНастройкиОбменаФСРАР
		И ЕстьДоступКЭлектроннномуДокументообороту;
		
	Элементы.ОбменРПН.Доступность =
		НЕ ТолькоПросмотр
		И ЕстьДоступКРегиструНастройкиОбменаРПН
		И ЕстьДоступКЭлектроннномуДокументообороту;
	
	Элементы.ОбменФТС.Доступность =
		НЕ ТолькоПросмотр
		И ЕстьДоступКРегиструНастройкиОбменаФТС
		И ЕстьДоступКЭлектроннномуДокументообороту;
	
	Элементы.ЗаявлениеНаПодключениеОткрытьМастер.Доступность = ЕстьДоступКЭлектроннномуДокументообороту;
	Элементы.ЗаявлениеНаПодключениеОткрытьСписок.Доступность = ЕстьДоступКЭлектроннномуДокументообороту;
	//-- НЕ УТ
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаПроверки",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
	
КонецПроцедуры

//++ НЕ УТ
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДокументооборотом(Форма)
	
	Если Форма.Объект.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление = НСтр("ru='Обмен в универсальном формате'");
	ИначеЕсли Форма.Объект.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление = НСтр("ru='Обмен посредством ПК ""Спринтер""'");
	Иначе
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление = НСтр("ru='Не используется'");
	КонецЕсли;
	
	Форма.Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.ПропускатьПриВводе = ЗначениеЗаполнено(Форма.Объект.ВидОбменаСКонтролирующимиОрганами);
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ИзменитьВидОрганизацииНаСервере()
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ГоловнаяОрганизация = Объект.Ссылка;
			Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
			Объект.СвидетельствоДатаВыдачи = Неопределено;
			Объект.СвидетельствоСерияНомер = "";
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда 
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ГоловнаяОрганизация = Объект.Ссылка;
			Объект.ИНН = "";
			Объект.КПП = "";
			Объект.ДатаРегистрации = Неопределено;
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
			 Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			 Объект.ОбособленноеПодразделение = Истина;
			 Объект.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			 Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
			 Объект.СвидетельствоДатаВыдачи = Неопределено;
			 Объект.СвидетельствоСерияНомер = "";
		Иначе ВызватьИсключение Нстр("ru = 'Произошла ошибка при изменении типа организации. Обратитесь к администратору.'");
		КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыВыбораКартинки = Новый Структура;
	ПараметрыВыбораКартинки.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыбораКартинки.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбораКартинки.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыВыбораКартинки, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтаФорма.Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла, ИмяРеквизитаОбъекта;
    
    Если РаботаСЛоготипом Тогда
        
        ИмяРеквизитаОбъекта = "ФайлЛоготип";
        
    ИначеЕсли РаботаСФаксимиле Тогда
        
        ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
        
        ПросмотретьПрисоединенныйФайл();
        
    ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ИдентификаторФайла = Новый УникальныйИдентификатор;
        
        ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
        
    КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПриОкончанииВводаИНН(ТекстРедактирования) 
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаКодПоОКПО(ТекстРедактирования)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо,
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоОКПО",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаКПП(ТекстРедактирования)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ТекстРедактирования, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КПП",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ОткрытьФормуСпискаПрименениеЕНВД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПрименениеЕНВД()
	
	ТекущаяСтрока = Элементы.ПрименениеЕНВД.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Склад = ТекущаяСтрока.Склад;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Организация, Склад", Объект.Ссылка, Склад));
	
	ОткрытьФорму("РегистрСведений.ПримененияЕНВД.ФормаСписка",
		СтруктураПараметров, 
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение описания (саммари) параметров организации

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	//++ НЕ УТ
	ЗаполнитьОписаниеПФР();
	ЗаполнитьОписаниеФСС();
	ЗаполнитьОписаниеТФОМС();
	ЗаполнитьОписаниеКлассификаторов(ЭтотОбъект);
	ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
	ЗаполнитьОписаниеИностраннойОрганизации();
	ЗаполнитьОписаниеКодовДО();
	ПроверитьОбменФСС();
	ПроверитьОбменРАР();
	ПроверитьОбменРПН();
	ПроверитьОбменФТС();
	ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();
	ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();
	ЗаполнитьОписаниеВоинскогоУчета();
	//-- НЕ УТ
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане();
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ЗаполнитьОписаниеПФР()
	
	СтрокаОписанияРеквизитовПФР = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерПФР%. Код органа: %КодОрганаПФР%. Наименование терр. органа: %НаименованиеТерриториальногоОрганаПФР%.%ИПРегистрационныйНомерПФР%'");
		
	СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР, 
												"%КодОрганаПФР%",
												?(ЗначениеЗаполнено(КодОрганаПФР), 
																						КодОрганаПФР, НСтр("ru = 'не указано'")));
	СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР,
												"%НаименованиеТерриториальногоОрганаПФР%", 
												?(ЗначениеЗаполнено(НаименованиеТерриториальногоОрганаПФР), 
																						НаименованиеТерриториальногоОрганаПФР, НСтр("ru = 'не указано'")));
	СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР, 
												"%РегистрационныйНомерПФР%",  
												?(ЗначениеЗаполнено(РегистрационныйНомерПФР), 
																						РегистрационныйНомерПФР, НСтр("ru = 'не указано'")));
																						
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР, 
												"%ИПРегистрационныйНомерПФР%",
												Символы.ПС + НСтр("ru = 'Регистрационный номер ИП: %ИПРегистрационныйНомерПФР%.'"));
		СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР, 
												"%ИПРегистрационныйНомерПФР%",
												?(ЗначениеЗаполнено(ИПРегистрационныйНомерПФР), 
																						ИПРегистрационныйНомерПФР, НСтр("ru = 'не указано'")));
	Иначе	
		СтрокаОписанияРеквизитовПФР = СтрЗаменить(СтрокаОписанияРеквизитовПФР, 
												"%ИПРегистрационныйНомерПФР%", "");
	
	КонецЕсли;
	Элементы.ДекорацияОписаниеРеквизитовПФР.Заголовок = СтрокаОписанияРеквизитовПФР;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеФСС()
	
	СтрокаОписанияРеквизитовФСС = НСтр("ru = 'Код подчиненности: %КодПодчиненностиФСС%. Регистрационный номер: %РегистрационныйНомерФСС%. Наименование территориального органа: %НаименованиеТерриториальногоОрганаФСС%. Дополнительный код: %ДополнительныйКодФСС%.%ДанныеИП%'");
													
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС,
												"%НаименованиеТерриториальногоОрганаФСС%",  
												?(ЗначениеЗаполнено(Объект.НаименованиеТерриториальногоОрганаФСС), 
																						Объект.НаименованиеТерриториальногоОрганаФСС, НСтр("ru = 'не указано'")));
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%РегистрационныйНомерФСС%",  
												?(ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС), 
																						Объект.РегистрационныйНомерФСС, НСтр("ru = 'не указано'")));
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%КодПодчиненностиФСС%",  
												?(ЗначениеЗаполнено(Объект.КодПодчиненностиФСС), 
																						Объект.КодПодчиненностиФСС, НСтр("ru = 'не указано'")));
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
													"%ДополнительныйКодФСС%",  
													?(ЗначениеЗаполнено(Объект.ДополнительныйКодФСС), 
																							Объект.ДополнительныйКодФСС, НСтр("ru = 'не указано'")));											
	Иначе	
		СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
													НСтр("ru = 'Дополнительный код: %ДополнительныйКодФСС%.'"), "");
	КонецЕсли;
												
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%ДанныеИП%",   
												Символы.ПС + НСтр("ru = 'Код подчиненности ИП: %ИПКодПодчиненностиФСС%. Регистрационный номер ИП: %ИПРегистрационныйНомерФСС%.'"));
												
	    СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%ИПКодПодчиненностиФСС%",   
												?(ЗначениеЗаполнено(Объект.ИПКодПодчиненностиФСС), 
																						Объект.ИПКодПодчиненностиФСС, НСтр("ru = 'не указано'")));
		СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%ИПРегистрационныйНомерФСС%",   
												?(ЗначениеЗаполнено(Объект.ИПРегистрационныйНомерФСС), 
																						Объект.ИПРегистрационныйНомерФСС, НСтр("ru = 'не указано'")));
	Иначе
		
		СтрокаОписанияРеквизитовФСС = СтрЗаменить(СтрокаОписанияРеквизитовФСС, 
												"%ДанныеИП%", "");
		
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеРеквизитовФСС.Заголовок = СтрокаОписанияРеквизитовФСС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеТФОМС()
	
	СтрокаОписанияРеквизитовТФОМС = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерТФОМС%.%ИПРегистрационныйНомерТФОМС%'");
		
	СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%РегистрационныйНомерТФОМС%",   
												?(ЗначениеЗаполнено(Объект.РегистрационныйНомерТФОМС), 
																						Объект.РегистрационныйНомерТФОМС, НСтр("ru = 'не указано'")));
	
																						
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%ИПРегистрационныйНомерТФОМС%",   
												Символы.ПС + НСтр("ru = 'Регистрационный номер ИП: %ИПРегистрационныйНомерТФОМС%.'"));
												
	    СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%ИПРегистрационныйНомерТФОМС%",   
												?(ЗначениеЗаполнено(Объект.ИПРегистрационныйНомерТФОМС), 
																						Объект.ИПРегистрационныйНомерТФОМС, НСтр("ru = 'не указано'")));
	Иначе
		 СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
													"%ИПРегистрационныйНомерТФОМС%", "");																					
	КонецЕсли;	
		
	Элементы.ДекорацияОписаниеРеквизитовТФОМС.Заголовок = СтрокаОписанияРеквизитовТФОМС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеКлассификаторов(Форма)
	
	Объект = Форма.Объект;
	
	СтрокаОписанияКлассификаторов = НСтр("ru = 'ОКОПФ: %КодОКОПФ%. Организационно-правовая форма: %НаименованиеОКОПФ%. ОКФС: %КодОКФС%. Форма собственности: %НаименованиеОКФС%. ОКВЭД: %КодОКВЭД% (вид деятельности: %НаименованиеОКВЭД%). ОКВЭД2: %КодОКВЭД2% (вид деятельности: %НаименованиеОКВЭД2%). ОКОНХ: %КодОКОНХ%.'");
										   													
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКОНХ%",    
												?(ЗначениеЗаполнено(Объект.КодОКОНХ), Объект.КодОКОНХ, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов,
												"%КодОКОПФ%",    
												?(ЗначениеЗаполнено(Объект.КодОКОПФ), Объект.КодОКОПФ, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКОПФ%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКОПФ), Объект.НаименованиеОКОПФ, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов,
												"%КодОКФС%",    
												?(ЗначениеЗаполнено(Объект.КодОКФС), Объект.КодОКФС, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКФС%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКФС), Объект.НаименованиеОКФС, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКВЭД%",    
												?(ЗначениеЗаполнено(Объект.КодОКВЭД), Объект.КодОКВЭД, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКВЭД%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКВЭД), Объект.НаименованиеОКВЭД, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКВЭД2%",    
												?(ЗначениеЗаполнено(Объект.КодОКВЭД2), Объект.КодОКВЭД2, НСтр("ru = 'не указано'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКВЭД2%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКВЭД2), Объект.НаименованиеОКВЭД2, НСтр("ru = 'не указано'")));
																						
	Форма.Элементы.ДекорацияОписаниеКлассификаторов.Заголовок = СтрокаОписанияКлассификаторов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПараметровРасчетаЗарплаты()
	
	ПравоЧтенияТеррУсловийПФР = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР);
	
	Если ПравоЧтенияТеррУсловийПФР Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР, ЗНАЧЕНИЕ(СПравочник.ТерриториальныеУсловияПФР.ПустаяСсылка)) КАК ТерриториальныеУсловияПФР
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних КАК ТерриториальныеУсловияПФРСрезПоследних
		|		ПО Организации.Ссылка = ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	Организации.Ссылка = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Результат = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
		
	СтрокаОписания = НСтр("ru = '%ПрименятьРайонныйКоэффициент%. %РайонныйКоэффициент%%РайонныйКоэффициентРФ%%ПрименятьСевернуюНадбавку%. Территориальные условия ПФР: %ТерриториальныеУсловияПФР%. График работы сотрудников: %ГрафикРаботыСотрудников%.'");
	
	ТерриториальныеУсловияПФР = Неопределено;
	
	Если ПравоЧтенияТеррУсловийПФР Тогда
		Пока Результат.Следующий() Цикл
			ТерриториальныеУсловияПФР = Результат.ТерриториальныеУсловияПФР;				
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТерриториальныеУсловияПФР) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", ТерриториальныеУсловияПФР);	
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", НСтр("ru = 'не указано'"));
		КонецЕсли;
	Иначе
		    СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", НСтр("ru = 'недостаточно прав на чтение информации'"));
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПрименятьРайонныйКоэффициент%",    
												?(Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент применяется'"),
															НСтр("ru = 'Районный коэффициент не применяется'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициент%",    
												?(Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент: %РайонныйКоэффициент%.'"), 
															""));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициент%", Объект.РайонныйКоэффициент);
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициентРФ%",
												?(Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент (федеральный): %РайонныйКоэффициентРФ%.'") + " ", 
															""));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициентРФ%", Объект.РайонныйКоэффициентРФ);
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПрименятьСевернуюНадбавку%",    
												?(Объект.ПрименятьСевернуюНадбавку, 
															НСтр("ru = 'Северная надбавка применяется'"),
															НСтр("ru = 'Северная надбавка не применяется'")));
    СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныйОрганПФР%", НСтр("ru = 'не указано'"));
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ГрафикиРаботыСотрудников) Тогда 
		Если ЗначениеЗаполнено(Объект.ГрафикРаботыСотрудников) Тогда 
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", Объект.ГрафикРаботыСотрудников);		
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru = 'не указано'"));
		КонецЕсли;	
	Иначе
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru = 'недостаточно прав на чтение информации'"));	
	КонецЕсли;
	
	Элементы.ОписаниеПараметровРасчетаЗарплаты.Заголовок = СтрокаОписания;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеИностраннойОрганизации()
	
	Если НЕ Объект.ИностраннаяОрганизация Тогда
		СтрокаОписанияИностраннойОрганизации = НСтр("ru = 'Не является иностранной организацией.'");
	Иначе
		СтрокаОписанияИностраннойОрганизации = НСтр("ru = 'Является иностранной организацией. Полное наименование: %НаименованиеИнострОрганизации%. Страна регистрации: %СтранаРегистрации%. Код в стране регистрации: %КодВСтранеРегистрации%. Страна постоянного местанахождения: %СтранаПостоянногоМестонахождения%.'");
		
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%НаименованиеИнострОрганизации%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеИнострОрганизации), Объект.НаименованиеИнострОрганизации, НСтр("ru = 'не указано'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%СтранаРегистрации%",    
												?(ЗначениеЗаполнено(Объект.СтранаРегистрации), Объект.СтранаРегистрации, НСтр("ru = 'не указано'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации,
												"%КодВСтранеРегистрации%",    
												?(ЗначениеЗаполнено(Объект.КодВСтранеРегистрации), Объект.КодВСтранеРегистрации, НСтр("ru = 'не указано'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%СтранаПостоянногоМестонахождения%",    
												?(ЗначениеЗаполнено(Объект.СтранаПостоянногоМестонахождения), Объект.СтранаПостоянногоМестонахождения, НСтр("ru = 'не указано'")));
	КонецЕсли;
	
	РегистрацияВОЭЗ = ?(Объект.ЗарегистрированВОЭЗ, НСтр("ru = 'Зарегистрирована'"), НСтр("ru = 'Не зарегистрирована'"));
	СтрокаОписанияИностраннойОрганизации = СтрокаОписанияИностраннойОрганизации
		+ " " + РегистрацияВОЭЗ + " " + НСтр("ru = 'в особой экономической зоне.'");
	
	Элементы.ДекорацияОписаниеМестаРегистрации.Заголовок = СтрокаОписанияИностраннойОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеКодовДО()
	
	ОписаниеКодовДО = НСтр( "ru = 'Код налогового органа-получателя отчетности: %КодНалоговогоОрганаПолучателя%. Код органа Федеральной службы гос. статистики: %КодОрганаФСГС%.'");
	
	Если ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		КодНалоговогоОрганаПолучателя = Объект.КодНалоговогоОрганаПолучателя;
	Иначе 
		КодНалоговогоОрганаПолучателя = НСтр( "ru = 'не указано'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) И Не (Объект.КодОрганаФСГС = " - ") Тогда
		КодОрганаФСГС = Объект.КодОрганаФСГС;
	Иначе 
		КодОрганаФСГС = НСтр( "ru = 'не указано'");
	КонецЕсли;
	
	ОписаниеКодовДО = СтрЗаменить(ОписаниеКодовДО, "%КодНалоговогоОрганаПолучателя%", КодНалоговогоОрганаПолучателя);
	ОписаниеКодовДО = СтрЗаменить(ОписаниеКодовДО, "%КодОрганаФСГС%", КодОрганаФСГС);
	Элементы.ОписаниеКодовДО.Заголовок = ОписаниеКодовДО;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбменФСС()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФСС.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|		ПО (НастройкиОбменаФСС.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		ОбменФСС = НСтр("ru = 'Не используется'");
		Пока РезультатЗапроса.Следующий() Цикл
			ОбменФСС = НСтр("ru = 'Используется'");
		КонецЦикла;
		
	Иначе
		
		ОбменФСС = НСтр("ru = 'Недостаточно прав на чтение информации.'");
		Элементы.ОбменФСС.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбменРАР()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСРАР) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФСРАР.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
		|		ПО (НастройкиОбменаФСРАР.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФСРАР.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		ОбменРАР = НСтр("ru = 'Не используется'");
		Пока РезультатЗапроса.Следующий() Цикл
			ОбменРАР = НСтр("ru = 'Используется'");
		КонецЦикла;
		
	Иначе
		
		ОбменРАР = НСтр("ru = 'Недостаточно прав на чтение информации.'");
		Элементы.ОбменРАР.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты()
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПравоЧтенияУчетСтраховыхВзносов 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
		
	ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев 
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	ПравоЧтенияУчетПособийСоциальногоСтрахования  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов);
	ПравоЧтенияУчетнаяПолитикаПоНДФЛ 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизация.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОГДА Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ТаблицаГоловнаяОрганизация
	|ИЗ
	|	ТаблицаОрганизация КАК ТаблицаОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ТаблицаОрганизация.Ссылка = Организации.Ссылка
	|;";
	
	НомерТекущейТаблицыЗапроса = 1;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов, ЛОЖЬ) КАК ИспользуетсяТрудФармацевтов,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЭкипажейМорскихСудов, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров, ЛОЖЬ) КАК ИспользуетсяТрудШахтеров,
		| 	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией, ЛОЖЬ) КАК ИспользуютсяРаботыСДосрочнойПенсией
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
		|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних.Ставка
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних КАК СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних
		|		ПО Организации.Ссылка = СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
		
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетПособийСоциальногоСтрахования = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
		|		ПО ТаблицаГоловнаяОрганизация.Организация = ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ГоловнаяОрганизация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыПрименяемыеТарифыСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиЗарплатаКадрыРасширенная.УдалитьИзменятьПраваНаОтпускаПоСотрудникам, ЛОЖЬ) КАК ИзменятьПраваНаОтпускаПоСотрудникам
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|		ПО ТаблицаГоловнаяОрганизация.Организация = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетнаяПолитикаПоНДФЛ = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// локальное исправление 00-00114195
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Вид тарифа: %ВидТарифа%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = '%ИспользуетсяТрудФармацевтов% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуетсяТрудЧленовЭкипажейМорскихСудов% %ИспользуетсяТрудШахтеров% %ИспользуютсяРаботыСДосрочнойПенсией% %ПродолжениеСтроки%'"));
				
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Ставка взносов в ФСС НС и ПЗ: %Ставка%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;			
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Учет пособий в ФСС: %ДатаПередачиФССВыплатыПособий%.
					|%ПродолжениеСтроки%'"));				
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = '%ОсобенностиИсчисленияНДФЛ%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;	
		
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Контролировать права сотрудника на отпуск в кадровых документах: %КонтрольОтпускаСотрудникаВКадровыхДокументах%.'"));

	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов Тогда
			
		Результат = МассивРезультатовЗапроса[НомерТаблицыПрименяемыеТарифыСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ВидТарифа) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", Результат.ВидТарифа);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", НСтр("ru = 'не указано'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", НСтр("ru = 'недостаточно прав на чтение информации'"));	
		
	КонецЕсли;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		Если Результат.ИспользуетсяТрудФармацевтов Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", 
			НСтр("ru = 'Используется труд фармацевтов.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%",
			НСтр("ru = 'Используется труд летных экипажей.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудЧленовЭкипажейМорскихСудов Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%",
			НСтр("ru = 'Используется труд экипажей морских судов.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудШахтеров Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", 
			НСтр("ru = 'Используется труд шахтеров.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		КонецЕсли;
		
		Если Результат.ИспользуютсяРаботыСДосрочнойПенсией Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%",
			НСтр("ru = 'Используются работы с досрочной пенсией.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%", "");
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", 
													НСтр("ru = 'Недостаточно прав на чтение информации об учете страховых взносов.'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%", "");
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Ставка) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%",
			Результат.Ставка);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%",
			НСтр("ru = 'не указано'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%", НСтр("ru = 'недостаточно прав на чтение информации'"));		
		
	КонецЕсли;
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетнаяПолитикаПоНДФЛ].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ОсобенностиИсчисленияНДФЛ) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%",
			Результат.ОсобенностиИсчисленияНДФЛ);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%",
			НСтр("ru = 'Стандартные вычеты не применяются'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%", НСтр("ru = 'Недостаточно прав на чтение информации о стандартных вычетах'"));		
			
	КонецЕсли;
		
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
				
		Если Результат.ИзменятьПраваНаОтпускаПоСотрудникам Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%КонтрольОтпускаСотрудникаВКадровыхДокументах%",
			НСтр("ru = 'да'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%КонтрольОтпускаСотрудникаВКадровыхДокументах%",
			НСтр("ru = 'нет'"));
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%КонтрольОтпускаСотрудникаВКадровыхДокументах%",
			НСтр("ru = 'недостаточно прав на чтение информации'"));
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетПособийСоциальногоСтрахования].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаПередачиФССВыплатыПособий) Тогда
			
			ДатаПередачиФССВыплатыПособий = Результат.ДатаПередачиФССВыплатыПособий;
			
			Если ДатаПередачиФССВыплатыПособий = Дата(2011,7,1) Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'с 01.07.2011'"));
			ИначеЕсли ДатаПередачиФССВыплатыПособий = Дата(2012,7,1) Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'с 01.07.2012'"));
			ИначеЕсли ДатаПередачиФССВыплатыПособий = Дата(2014,1,1) Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'с 01.01.2014'"));
			ИначеЕсли ДатаПередачиФССВыплатыПособий = Дата(2015,1,1) Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'с 01.01.2015'"));
			ИначеЕсли ДатаПередачиФССВыплатыПособий = Дата(2015,7,1) Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'с 01.07.2015'"));
			КонецЕсли;
			
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
			НСтр("ru = 'выполняется страхователем (организацией)'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%", НСтр("ru = 'недостаточно прав на чтение информации'"));
		
	КонецЕсли;
	
	Пока Найти(СтрокаОписания, "  ") > 0 Цикл
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "  ", " ");
	КонецЦикла;
	
	Элементы.ОписаниеКадровыйУчетИРасчетЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеБухучетаИВыплатыЗарплат()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияБухучетЗарплатыОрганизаций 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций);
	ПравоЧтенияМестаВыплатыЗарплатыОрганизаций = 
											  ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	МестаВыплатыЗарплатыОрганизаций.Вид,
		|	МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|		ПО Организации.Ссылка = МестаВыплатыЗарплатыОрганизаций.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыМестаВыплатыЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыОрганизацийСрезПоследних.ОтношениеКЕНВД,
		|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних КАК БухучетЗарплатыОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = БухучетЗарплатыОрганизацийСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыАвансаНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыЗарплатыНеПозжеЧем
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru = 'Статья финансирования: %СтатьяФинансирования%. Способ отражения зарплаты в бухучете: %СпособОтраженияЗарплатыВБухучете%. Отношение к ЕНВД: %ОтношениеКЕНВД%.
				|%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru = '%МестоВыплатыЗарплаты%
				|%ПродолжениеСтроки%'"));	
	КонецЕсли;
		
	СтрокаОписания = СтрЗаменить(
		СтрокаОписания,
		"%ПродолжениеСтроки%",
		НСтр("ru = 'Крайний срок выплаты аванса: %ДатаВыплатыАвансаНеПозжеЧем%.
			|Крайний срок выплаты зарплаты: %ДатаВыплатыЗарплатыНеПозжеЧем%.'"));
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.СтатьяФинансирования) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				Результат.СтатьяФинансирования);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				НСтр("ru = 'не указано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.СпособОтраженияЗарплатыВБухучете) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			Результат.СпособОтраженияЗарплатыВБухучете);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			НСтр("ru = 'не указано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ОтношениеКЕНВД) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%",
			Результат.ОтношениеКЕНВД);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%",
			НСтр("ru = 'не указано.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%", НСтр("ru = 'недостаточно прав на чтение информации'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%", НСтр("ru = 'недостаточно прав на чтение информации'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%", НСтр("ru = 'недостаточно прав на чтение информации'"));
		
	КонецЕсли;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыМестаВыплатыЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Вид) Тогда
			Если Результат.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Зарплата выдается через кассу: %МестоВыплаты%.'"));
			Иначе
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Зарплата выдается посредством зачисления на карточку: %МестоВыплаты%.'"));
			КонецЕсли;
			МестоВыплаты = ?(ЗначениеЗаполнено(Результат.МестоВыплаты), Результат.МестоВыплаты, НСтр("ru = 'не указано'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплаты%", МестоВыплаты);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%",
			НСтр("ru = 'Место/способ выплаты зарплаты не указан.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Недостаточно прав на чтение информации о местах выплаты зарплаты.'"));		
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыАвансаНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = '%ДатаВыплатыАвансаНеПозжеЧем% число месяца'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			Результат.ДатаВыплатыАвансаНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = 'не указано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыЗарплатыНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = '%ДатаВыплатыЗарплатыНеПозжеЧем% число месяца'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			Результат.ДатаВыплатыЗарплатыНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = 'не указано'"));
		КонецЕсли;
				
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = 'недостаточно прав на чтение информации'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = 'недостаточно прав на чтение информации'"));
	КонецЕсли;
		
	Элементы.ОписаниеБухучетИВыплатаЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеВоинскогоУчета()
	
	Элементы.ОписаниеВоинскийУчет.Заголовок = НСтр("ru = 'Воинский учет'");
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ЗаполнитьОписаниеРегистрацииВНалоговомОргане(ЗаполнятьДанныеРегистрацииНО = Ложь)
	
	ПравоЧтения = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	//++ НЕ УТ
	ПравоЧтения = ПравоЧтения И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане);
	ПравоЧтения = ПравоЧтения И ПравоДоступа("Чтение", Метаданные.Справочники.ПодразделенияОрганизаций);
	//-- НЕ УТ
	
	КоличествоНалоговыхОрганов = 0;
	
	Если ПравоЧтения Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистрация.РегистрацияВНалоговомОргане) КАК КоличествоНалоговыхОрганов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане КАК ОбособленныеПодразделения
		|	ГДЕ
		|		ОбособленныеПодразделения.Организация = &Организация
		|		И ОбособленныеПодразделения.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		//++ НЕ УТ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсторияРегистрации.РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
		|			,
		|			РегистрацияВНалоговомОргане.Владелец = &Организация И СтруктурнаяЕдиница <> &Организация
		|			И СтруктурнаяЕдиница.ОбособленноеПодразделение
		|			И РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|		) КАК ИсторияРегистрации
		//-- НЕ УТ
		|	) КАК Регистрация");
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоНалоговыхОрганов = Выборка.КоличествоНалоговыхОрганов;
		Иначе
			КоличествоНалоговыхОрганов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация состоит на учете в налоговом органе:'")
			+ " %РегистрацияВНалоговомОргане%.";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%РегистрацияВНалоговомОргане%",
			РегистрацияВНалоговомОргане);
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			РеквизитыНО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код, НаименованиеИФНС");
			Объект.КодНалоговогоОргана 			= РеквизитыНО.Код;
			Объект.НаименованиеНалоговогоОргана = РеквизитыНО.НаименованиеИФНС;
		КонецЕсли;
		
	Иначе
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация не состоит на учете в налоговом органе.'");
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			Объект.КодНалоговогоОргана 			= "";
			Объект.НаименованиеНалоговогоОргана = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоНалоговыхОрганов > 0 Тогда
		ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах
			+ " " + НСтр("ru = 'Обособленные подразделения состоят на учете в'") + " %КоличествоНалоговыхОрганов% ";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%КоличествоНалоговыхОрганов%",
			Формат(КоличествоНалоговыхОрганов,"ЧГ=0"));
		Если КоличествоНалоговыхОрганов <> 11 И Прав(Строка(КоличествоНалоговыхОрганов), 1) = "1" Тогда
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговом органе.'");
		Иначе
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговых органах.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.РасширеннаяПодсказка.Заголовок = ОписаниеРегистрацииВНалоговыхОрганах;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьИНН(СсылкаНаОбъект)
	Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИНН");
	УправлениеФормойНаСервере();
КонецФункции

&НаСервере
Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.Ссылка = &УправленческаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	УправленческаяОрганизация 
		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъекта(ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Переход к ""%ИмяФормы%"" возможен только после записи данных.
			|Данные будут записаны.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЗаписанностьОбъектаОбработкаОтвета", ЭтотОбъект, ОповещениеПослеЗаписи), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъектаОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		
		ЭлементЗаписан = Записать();
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
	    Оповещение = ДополнительныеПараметры;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПереходНаСервер()
	УправлениеФормойНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗаписиУчетнойПолитики(Знач УчетнаяПолитика)
	
	Если ИзменятьУчетнуюПолитикуПриЗаписиНовой Тогда
		УчетнаяПолитикаОрганизаций.УчетнаяПолитика = УчетнаяПолитика;
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ИзменятьУчетнуюПолитикуПриЗаписиНовой = Ложь;
		Модифицированность = Истина;
		СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();

	КонецЕсли;
	
	НастроитьТаблицуПримененияЕНВД();
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТаблицуПримененияЕНВД()

	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
		ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Элементы.ГруппаОтступПрименениеЕНВД.Доступность = Ложь;
			ОбновитьТаблицуПримененияЕНВД();
		Иначе
			ОбновитьТаблицуПримененияЕНВД();
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПримененияЕНВД()
	
	ПрименениеЕНВД.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ) КАК РозничнаяТорговляОблагаетсяЕНВД,
	|	ЕСТЬNULL(ПримененияЕНВД.Период, &ТекущаяДата) КАК Период,
	|	""История"" КАК История,
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД КАК ПримененияЕНВД
	|		ПО Склады.Ссылка = ПримененияЕНВД.Склад
	|			И (ПримененияЕНВД.Организация = &ГоловнаяОрганизация)
	|			И (ЕСТЬNULL(ПримененияЕНВД.Период, &ТекущаяДата) <= &ТекущаяДата)
	|ГДЕ
	|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Склад
	|ИТОГИ ПО
	|	Склад";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПараметрыСравнения = Новый Массив;
	ПараметрыСравнения.Добавить("РозничнаяТорговляОблагаетсяЕНВД");
	Для Каждого СтрокаРезультатаПоСкладу Из РезультатЗапроса.Строки Цикл
		СтрокаТаблицы = ПрименениеЕНВД.Добавить();
		ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(СтрокаРезультатаПоСкладу.Строки, СтрокаТаблицы, ПараметрыСравнения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитГоловнаяОрганизация()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				И Организации.ОбособленноеПодразделение
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	ДанныеГоловнаяОрганизация = Запрос.Выполнить().Выбрать();
	Пока ДанныеГоловнаяОрганизация.Следующий() Цикл
		ГоловнаяОрганизация = ДанныеГоловнаяОрганизация.ГоловнаяОрганизация;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДатыНаСервере(ВыбраннаяДата)
	
	//++ НЕ УТ
	Если ТекущаяИзменяемаяГруппа = "ПрименениеЕНВД" Тогда
		
		ТекущаяСтрокаТаблицы = ПрименениеЕНВД.НайтиПоИдентификатору(Элементы.ПрименениеЕНВД.ТекущаяСтрока);
		ПараметрыСравнения = Новый Массив;
		ПараметрыСравнения.Добавить("РозничнаяТорговляОблагаетсяЕНВД");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ) КАК РозничнаяТорговляОблагаетсяЕНВД,
		|	ПримененияЕНВД.Период КАК Период,
		|	""История"" КАК История,
		|	ПримененияЕНВД.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД КАК ПримененияЕНВД
		|ГДЕ
		|	ПримененияЕНВД.Организация = &ГоловнаяОрганизация
		|	И ПримененияЕНВД.Склад = &Склад
		|	И ПримененияЕНВД.Период <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ,
		|	Склад");
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("Склад", ТекущаяСтрокаТаблицы.Склад);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
						
			Если ЗначениеЗаполнено(РезультатЗапроса) 
				И (НачалоМесяца(ВыбраннаяДата) < НачалоМесяца(ТекущаяДатаСеанса())) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(
						РезультатЗапроса, 
						ТекущаяСтрокаТаблицы, 
						ПараметрыСравнения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не рекомендуется вводить изменения на прошлые месяца. 
					|Для текущей строки установлены начальные значения.'"));
			Иначе
				ТекущаяСтрокаТаблицы.Период = НачалоМесяца(ВыбраннаяДата);
				Модифицированность = Истина;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(
						РезультатЗапроса, 
						ТекущаяСтрокаТаблицы, 
						ПараметрыСравнения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Дата не выбрана.
					|Для текущей строки установлены начальные значения.'"));
		КонецЕсли;	
				
	ИначеЕсли ТекущаяИзменяемаяГруппа = "СтавкаНалогаНаИмущество" Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Ставки.ОсвобождениеОтНалогообложения, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения,
		|	ЕСТЬNULL(Ставки.КодНалоговойЛьготыОсвобождениеОтНалогообложения, """") КАК СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения,
		|	ЕСТЬNULL(Ставки.СнижениеНалоговойСтавки, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки,
		|	ЕСТЬNULL(Ставки.СниженнаяНалоговаяСтавка, 0) КАК СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка,
		|	ЕСТЬNULL(Ставки.УменьшениеСуммыНалогаВПроцентах, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах,
		|	ЕСТЬNULL(Ставки.ПроцентУменьшения, 0) КАК СтавкаНалогаНаИмуществоПроцентУменьшения,
		|	ЕСТЬNULL(Ставки.НалоговаяСтавка, 0) КАК СтавкаНалогаНаИмуществоНалоговаяСтавка,
		|	ЕСТЬNULL(Ставки.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, 0) КАК СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2,
		|	ЕСТЬNULL(Ставки.Период, &ПериодСтавкаНалогаНаИмущество) КАК СтавкаНалогаНаИмуществоПрименяетсяС
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество КАК Ставки
		|		ПО Организации.Ссылка = Ставки.Организация
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И ЕСТЬNULL(Ставки.Период, &ПериодСтавкаНалогаНаИмущество) <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ставки.Период УБЫВ");
		
		ДатаРегистрации = ?(ВидОрганизации = "ИндивидуальныйПредприниматель",
							Объект.СвидетельствоДатаВыдачи,
							Объект.ДатаРегистрации);
		ПериодСтавкаНалогаНаИмущество = ?(ЗначениеЗаполнено(ДатаРегистрации), НачалоДня(ДатаРегистрации), НачалоДня(ТекущаяДатаСеанса())); 
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПериодСтавкаНалогаНаИмущество", ПериодСтавкаНалогаНаИмущество);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		
		ПараметрыСравнения = Новый Массив;
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоПроцентУменьшения");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоНалоговаяСтавка");
		ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2");
						
		Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
			
			СтавкаНалогаНаИмуществоПрименяетсяС = НачалоМесяца(ВыбраннаяДата);
			УстановитьСвойстваУчетнойПолитикиИНалогов();
			Модифицированность = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(
				ТаблицаЗначений, 
				ЭтаФорма, 
				ПараметрыСравнения);
			УстановитьСвойстваУчетнойПолитикиИНалогов();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дата не выбрана.
				|Для настроек ставки налога на имущество установлены начальные значения.'"));
		Иначе
			СтавкаНалогаНаИмуществоПрименяетсяС = НачалоМесяца(ТекущаяДатаСеанса());
			УстановитьСвойстваУчетнойПолитикиИНалогов();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дата не выбрана.
				|Для настроек ставки налога на имущество установлена дата начала текущего месяца.'"));
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ	
	ОткрытаФормаВыбораДаты = Ложь;

КонецПроцедуры

// Процедура из таблицы значений выбирает наиболее раннюю актуальную информацию.
// Например, имеем:
// 	1.01.2013 - Общая система налогообложения
//  1.02.2013 - Упрощенная система налогообложения
//  1.03.2013 - Общая система налогообложения  <--
//  1.04.2013 - Общая система налогообложения
//  1.05.2013 - Общая система налогообложения
// В данном случае будет выбрана третья строка, поскольку информация в ней актуальна по сравнению с последней записью,
// и между выбранной и последней строками информация одинакова.
//
// Параметры
//	ТаблицаЗначений - ТаблицаЗначений - таблица значений с данными, из которых будет производитьс выбор
//	ПриемникДанных - Произвольный - содержит в себе объект-приемник выбранных данных (например, форма, строка таблицы значений и т.д.)
//	ПараметрСравнения - Строка - параметр, по которому будет идти сравнение на актуальность
&НаСервере
Процедура ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(ТаблицаЗначений, ПриемникДанных, ПараметрыСравнения)
	
	СтрокаНайдена = Ложь;

	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Для Каждого ПараметрСравнения Из ПараметрыСравнения Цикл
			Если ПредыдущаяСтрока <> Неопределено 
				И СтрокаТаблицы[ПараметрСравнения] <> ПредыдущаяСтрока[ПараметрСравнения] Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаТаблицы;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредыдущаяСтрока) Тогда
		ЗаполнитьЗначенияСвойств(ПриемникДанных, ПредыдущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяПолитикаПриИзмененииСервер()
	
	УчетнаяПолитикаОрганизаций.ПлательщикЕНВД =
		Справочники.УчетныеПолитикиОрганизаций.ПараметрУчетнойПолитики(
			УчетнаяПолитикаОрганизаций.УчетнаяПолитика,
			"ПрименяетсяЕНВД");
	
	НастроитьТаблицуПримененияЕНВД();
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваУчетнойПолитикиИНалогов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаИмущественныеНалогиОтступ.Видимость = Ложь;
	КонецЕсли;
	
	ПрименяетсяЕНВД = Справочники.УчетныеПолитикиОрганизаций.ПараметрУчетнойПолитики(
																	УчетнаяПолитикаОрганизаций.УчетнаяПолитика,
																	"ПрименяетсяЕНВД");
	ВидимостьЕНВД = ?(ПрименяетсяЕНВД = Неопределено, Ложь, ПрименяетсяЕНВД);
	Элементы.ГруппаПеременнойДоступности.Доступность = (ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ДекорацияПредупреждениеЕНВД.Видимость = (ВидОрганизации = "ОбособленноеПодразделение") И ВидимостьЕНВД;
	Элементы.ДекорацияПредупреждениеУчетнаяПолитика.Видимость =  (ВидОрганизации = "ОбособленноеПодразделение");
	Элементы.ГруппаОтступПрименениеЕНВД.Видимость = ВидимостьЕНВД;
	Элементы.ГруппаУчетнаяПолитика.Видимость = СуществуютУчетныеПолитики;
	Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость = Не СуществуютУчетныеПолитики;
	
//++ НЕ УТ

	УстановитьПараметрыВыбораУчетнойПолитики(ВидОрганизации);

	Элементы.СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения.Доступность = 
			СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения;
	Элементы.СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения.АвтоОтметкаНезаполненного =
			СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения;
	Элементы.СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения.ОтметкаНезаполненного = 
			СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И ПустаяСтрока(СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения);

	Элементы.СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки.Доступность = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения;

	Элементы.СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка.Доступность = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки;
	Элементы.СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка.АвтоОтметкаНезаполненного = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки;
	Элементы.СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка.ОтметкаНезаполненного = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки 
			И (СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка = 0);
	Элементы.ДекорацияПроцент2.Доступность = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки;

	Элементы.СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах.Доступность = НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения;

	Элементы.СтавкаНалогаНаИмуществоПроцентУменьшения.Доступность =
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах;
	Элементы.СтавкаНалогаНаИмуществоПроцентУменьшения.АвтоОтметкаНезаполненного =
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах;
	Элементы.СтавкаНалогаНаИмуществоПроцентУменьшения.ОтметкаНезаполненного = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах 
			И (СтавкаНалогаНаИмуществоПроцентУменьшения = 0);
	Элементы.ДекорацияПроцент3.Доступность = 
			НЕ СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения 
			И СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах;
//-- НЕ УТ

КонецПроцедуры

&НаСервере
Функция СуществуютУчетныеПолитикиОрганизаций()

	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.УчетныеПолитикиОрганизаций КАК Т");

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма,
																				"УчетнаяПолитикаОрганизаций",
																				Форма.ГоловнаяОрганизация);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "УчетнаяПолитикаОрганизаций.Период");
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,
																				"УчетнаяПолитикаОрганизацийПериодСтрокой",
																				ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект)
	
	Если НЕ НастройкиУчетнойПолитикиИНалоговВведены Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
		И ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) Тогда
		
		ПараметрыУчетнойПолитики = Справочники.УчетныеПолитикиОрганизаций.ПараметрыУчетнойПолитики(УчетнаяПолитикаОрганизаций.УчетнаяПолитика);
		ЗаполнитьЗначенияСвойств(УчетнаяПолитикаОрганизаций, ПараметрыУчетнойПолитики);
		ПлательщикНалогаНаПрибыль = Не ПараметрыУчетнойПолитики.ПрименяетсяУСН И ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		УчетнаяПолитикаОрганизаций.ПлательщикНалогаНаПрибыль = ПлательщикНалогаНаПрибыль;
		
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Организация) Тогда
			УчетнаяПолитикаОрганизаций.Организация = ТекущийОбъект.Ссылка;
			ГоловнаяОрганизация = ТекущийОбъект.Ссылка;
		КонецЕсли;
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма,
																					"УчетнаяПолитикаОрганизаций",
																					ТекущийОбъект.Ссылка);
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма,
																					"УчетнаяПолитикаОрганизаций",
																					ТекущийОбъект.Ссылка);
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = Дата(0001,1,1);
		КонецЕсли;
		ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
		
	КонецЕсли;
	
	Если ВидОрганизации <> "ОбособленноеПодразделение" Тогда
		
//++ НЕ УТ
				
		// Запись настроек расчета резервов отпусков.
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков) Тогда
			
			Набор = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
			Набор.Прочитать();
			
			ЗначенияУчетнойПолитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, 
				"ФормироватьРезервОтпусковБУ, ФормироватьРезервОтпусковНУ, МетодНачисленияРезерваОтпусков, НормативОтчисленийВРезервОтпусков, ПредельнаяВеличинаОтчисленийВРезервОтпусков");
			
			МассивУдаляемыхЗаписей = Новый Массив;
			ЗаписьДобавлена = Ложь;
			// сохраняем, обновляем предыдущие записи
			Для Каждого Строка Из Набор Цикл
				Если Строка.Период = НачалоГода(УчетнаяПолитикаОрганизаций.Период) Тогда
					ЗаписьДобавлена = Истина;
					ЗаполнитьЗначенияСвойств(Строка, ЗначенияУчетнойПолитики);
				ИначеЕсли Строка.Период > НачалоГода(УчетнаяПолитикаОрганизаций.Период) Тогда
					МассивУдаляемыхЗаписей.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из МассивУдаляемыхЗаписей Цикл
				Набор.Удалить(Строка);
			КонецЦикла;
			
			Если Не ЗаписьДобавлена Тогда
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Организация             = ТекущийОбъект.Ссылка;
				СтрокаНабора.Период                  = НачалоГода(УчетнаяПолитикаОрганизаций.Период);
				ЗаполнитьЗначенияСвойств(СтрокаНабора, ЗначенияУчетнойПолитики);
			КонецЕсли;
			Набор.Записать(Истина);
			
		КонецЕсли;
	
		// Запись константы использования ЕНВД
		Если ПравоДоступа("Изменение", Метаданные.Константы.ИспользуетсяЕНВД) Тогда
			ОтражениеЗарплатыВБухучетеРасширенный.УстановитьИспользованиеЕНВД();
		КонецЕсли;
		
		//-- НЕ УТ
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			
			Для Каждого СтрокаТаблицы Из ПрименениеЕНВД Цикл
				
				Набор = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
				Набор.Отбор.Склад.Установить(СтрокаТаблицы.Склад);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
					Период = НачалоМесяца(ТекущаяДатаСеанса());
				Иначе
					Период = НачалоМесяца(СтрокаТаблицы.Период);
				КонецЕсли;
				Набор.Отбор.Период.Установить(Период);
				
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Организация = ТекущийОбъект.Ссылка;
				СтрокаНабора.Склад = СтрокаТаблицы.Склад;
				СтрокаНабора.Период = Период;
				СтрокаНабора.РозничнаяТорговляОблагаетсяЕНВД = СтрокаТаблицы.РозничнаяТорговляОблагаетсяЕНВД;
				
				Набор.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
	
	//++ НЕ УТ
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество)
	 И (ЕстьЗаписиРегистрСтавкиНалогаНаИмущество(ТекущийОбъект.Ссылка)
	 	И СтавкаНалогаНаИмуществоНалоговаяСтавка = 0 
			ИЛИ СтавкаНалогаНаИмуществоНалоговаяСтавка <> 0) Тогда
		
		Если Не ЗначениеЗаполнено(СтавкаНалогаНаИмуществоПрименяетсяС) Тогда
			СтавкаНалогаНаИмуществоПрименяетсяС = УчетнаяПолитикаОрганизаций.Период;
		КонецЕсли;
		
		Набор = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
		Набор.Отбор.Период.Установить(НачалоДня(СтавкаНалогаНаИмуществоПрименяетсяС));
		
		СтрокаНабора = Набор.Добавить();
		СтрокаНабора.Организация									 = ТекущийОбъект.Ссылка;
		СтрокаНабора.Период	 	 									 = НачалоДня(СтавкаНалогаНаИмуществоПрименяетсяС);
		СтрокаНабора.НалоговаяСтавка 								 = СтавкаНалогаНаИмуществоНалоговаяСтавка;
		СтрокаНабора.ОсвобождениеОтНалогообложения 					 = СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения;
		СтрокаНабора.КодНалоговойЛьготыОсвобождениеОтНалогообложения = СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтрокаНабора.СнижениеНалоговойСтавки 						 = СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки;
		СтрокаНабора.СниженнаяНалоговаяСтавка		 				 = СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка;
		СтрокаНабора.УменьшениеСуммыНалогаВПроцентах 				 = СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах;
		СтрокаНабора.ПроцентУменьшения 								 = СтавкаНалогаНаИмуществоПроцентУменьшения;
		СтрокаНабора.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 		 = СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
		
		Набор.Записать(Истина);
		
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ
&НаСервереБезКонтекста
Функция ЕстьЗаписиРегистрСтавкиНалогаНаИмущество(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтавкиНалогаНаИмущество.Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество КАК СтавкиНалогаНаИмущество
	|ГДЕ
	|	СтавкиНалогаНаИмущество.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
//-- НЕ УТ

&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеМесяца(Знач ДатаНачалаМесяца)
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь)
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(	Форма,
											РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											ИзменитьМодифицированность = Истина,
											ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(	РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											Направление,
											Модифицированность = Ложь)
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизита,
																				Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	Представление = ПолучитьПредставлениеМесяца(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
	
	Если ИзменитьМодифицированность Тогда 
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаСеанса()
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли
	
КонецФункции

//++ НЕ УТ
&НаСервере
Процедура РегистрацииПФРВХранилище()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсторияРегистрацийВОрганеПФР.Период,
	|	ИсторияРегистрацийВОрганеПФР.Организация,
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	|ГДЕ
	|	ИсторияРегистрацийВОрганеПФР.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	ПФРСохраненныеЗначения = ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура РегистрацииВНалоговыхОрганахВХранилище()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Подразделение,
	|	РегистрацииВНалоговомОргане.Организация,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Организация = &Организация
	|;
	//++ НЕ УТ
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.Период,
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница.Владелец = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.Период,
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	//-- НЕ УТ
	|";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Регистрации = Новый Структура();
	
	Регистрации.Вставить("РегистрацииВНалоговомОргане",                     Результат[0].Выгрузить());
	
	//++ НЕ УТ
	Регистрации.Вставить("ИсторияРегистрацийВНалоговомОрганеПодразделения", Результат[1].Выгрузить());
	Регистрации.Вставить("ИсторияРегистрацийВНалоговомОрганеОрганизации",   Результат[2].Выгрузить());
	Регистрации.Вставить("ПодразделенияОрганизацийИсходная",                Результат[3].Выгрузить());
	//-- НЕ УТ
	
	РегистрацииСохраненныеЗначения = ПоместитьВоВременноеХранилище(Регистрации, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРегистрацийВПФР()
	
	//++ НЕ УТ
	Регистрации = ПолучитьИзВременногоХранилища(ПФРСохраненныеЗначения);
	
	НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из Регистрации Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, "КодОрганаПФР, НаименованиеТерриториальногоОрганаПФР, РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР");
	//-- НЕ УТ
	
	Возврат; // в УТ11 не используется
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРегистрацийВНалоговыхОрганах()
	
	Регистрации = ПолучитьИзВременногоХранилища(РегистрацииСохраненныеЗначения);
	
	НаборЗаписей = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из Регистрации.РегистрацииВНалоговомОргане Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	//++ НЕ УТ
	// восстановление регистрации подразделений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТИсходная
	|ИЗ
	|	&ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТКонечная
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходная.Подразделение,
	|	ВТИсходная.ОбособленноеПодразделение,
	|	ВТИсходная.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТИсходная КАК ВТИсходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКонечная КАК ВТКонечная
	|		ПО ВТИсходная.Подразделение = ВТКонечная.Подразделение
	|ГДЕ
	|	(ВТИсходная.ОбособленноеПодразделение <> ВТКонечная.ОбособленноеПодразделение
	|			ИЛИ ВТИсходная.РегистрацияВНалоговомОргане <> ВТКонечная.РегистрацияВНалоговомОргане)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПодразделенияОрганизаций", Регистрации.ПодразделенияОрганизацийИсходная);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПодразделениеОбъект = Выборка.Подразделение.ПолучитьОбъект();
		ПодразделениеОбъект.ОбособленноеПодразделение = Выборка.ОбособленноеПодразделение;
		ПодразделениеОбъект.РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
		
		ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
		ПодразделениеОбъект.Записать();
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
	
	Если Регистрации.ИсторияРегистрацийВНалоговомОрганеПодразделения.Количество() = 0 Тогда
		
		ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(Объект.Ссылка);
		
		Если ПодчиненныеСтруктурныеЕдиницы.Получить(Объект.Ссылка) <> Неопределено Тогда
			
			МассивПодчиненныхСтруктурныхЕдиниц = ПодчиненныеСтруктурныеЕдиницы.Получить(Объект.Ссылка);
			
			Для Каждого Строка Из МассивПодчиненныхСтруктурныхЕдиниц Цикл
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Строка);
				НаборЗаписей.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Строка Из Регистрации.ИсторияРегистрацийВНалоговомОрганеПодразделения Цикл
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Строка.СтруктурнаяЕдиница);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из Регистрации.ИсторияРегистрацийВНалоговомОрганеОрганизации Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	//-- НЕ УТ
	Объект.РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОргане(Объект.Ссылка);
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитики(ДатаИзменения, Отказ, ДополнительныеПараметры = Неопределено)
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопкиДа = НСтр("ru = 'Изменилась учетная политика'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru =  'При редактировании изменилась учетная политика для организации.
					|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
					|Если учетная политика организации изменилась с %1, нажмите ""Изменилась учетная политика""'"), 
		Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"));
	
	ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "УчетнаяПолитикаОрганизаций", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистра(Форма, ИмяРегистра, ТекстЗапроса, ТекстКнопкиДа, Отказ, ОповещениеЗавершения = Неопределено)
	// Требуется запрашивать пользователя об изменении только если еще не принято решение, что запись - новая
	Если Форма[ИмяРегистра + "НоваяЗапись"] = Истина Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Требуется запрашивать пользователя об изменении только если задана дата записи
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Требуется запрашивать пользователя об изменении только если была считана прежняя запись
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период);
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из Форма[ИмяРегистра + "Прежняя"] Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = Форма[ИмяРегистра][Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Требуется запрашивать пользователя об изменении - изменили и текущие данные, и дату записи
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Нет,  	НСтр("ru = 'Исправлена ошибка'"));
		Кнопки.Добавить(КодВозвратаДиалога.Да, 		ТекстКнопкиДа);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",                Форма);
		ДополнительныеПараметры.Вставить("Отказ",                Отказ);
		ДополнительныеПараметры.Вставить("ИмяРегистра",          ИмяРегистра);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		Отказ = Истина; // Не записываем элемент, так как в зависимости от дальнейшего ответа на вопрос будет производиться запись объекта...
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапроситьРежимИзмененияРегистраОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры), 
			ТекстЗапроса, 
			Кнопки, ,
			КодВозвратаДиалога.Отмена);
		
		Возврат;
					
	Иначе
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистраОбработкаОтвета(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Форма                = ДополнительныеПараметры.Форма;
	Отказ                = ДополнительныеПараметры.Отказ;
	ИмяРегистра          = ДополнительныеПараметры.ИмяРегистра;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;	
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Форма[ИмяРегистра + "НоваяЗапись"] = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Отказ Тогда
		НастройкиУчетнойПолитикиИНалоговВведены = Истина;
		ПараметрыЗаписи = Новый Структура("РежимИзмененияУчетнойПолитикиУточнен", Истина);
		Отказ = Не Записать(ПараметрыЗаписи);
		Если Не Отказ И ДополнительныеПараметры <> Неопределено И Не ДополнительныеПараметры.Свойство("НеЗакрыватьФорму") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ОбновитьДанныеПоСтавкеНалогаНаИмущество()

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Ставки.ОсвобождениеОтНалогообложения, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения,
	|	ЕСТЬNULL(Ставки.КодНалоговойЛьготыОсвобождениеОтНалогообложения, """") КАК СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ЕСТЬNULL(Ставки.СнижениеНалоговойСтавки, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки,
	|	ЕСТЬNULL(Ставки.СниженнаяНалоговаяСтавка, 0) КАК СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка,
	|	ЕСТЬNULL(Ставки.УменьшениеСуммыНалогаВПроцентах, ЛОЖЬ) КАК СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах,
	|	ЕСТЬNULL(Ставки.ПроцентУменьшения, 0) КАК СтавкаНалогаНаИмуществоПроцентУменьшения,
	|	ЕСТЬNULL(Ставки.НалоговаяСтавка, 0) КАК СтавкаНалогаНаИмуществоНалоговаяСтавка,
	|	ЕСТЬNULL(Ставки.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, 0) КАК СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2,
	|	ЕСТЬNULL(Ставки.Период, &ПериодСтавкаНалогаНаИмущество) КАК СтавкаНалогаНаИмуществоПрименяетсяС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество КАК Ставки
	|		ПО Организации.Ссылка = Ставки.Организация
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|	И ЕСТЬNULL(Ставки.Период, &ПериодСтавкаНалогаНаИмущество) <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставки.Период УБЫВ");
	
	ДатаРегистрации = ?(ВидОрганизации = "ИндивидуальныйПредприниматель",
		Объект.СвидетельствоДатаВыдачи, Объект.ДатаРегистрации);
	ПериодСтавкаНалогаНаИмущество = ?(ЗначениеЗаполнено(Объект.ДатаРегистрации),
									  НачалоДня(Объект.ДатаРегистрации),
									  НачалоДня(ТекущаяДатаСеанса())); 
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодСтавкаНалогаНаИмущество", ПериодСтавкаНалогаНаИмущество);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	ПараметрыСравнения = Новый Массив;
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложения");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоСнижениеНалоговойСтавки");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоСниженнаяНалоговаяСтавка");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентах");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоПроцентУменьшения");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоНалоговаяСтавка");
	ПараметрыСравнения.Добавить("СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2");

	ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(ТаблицаЗначений, ЭтаФорма, ПараметрыСравнения);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОсновнымСредствам()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Организации.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК Ставки
	|		ПО Организации.Ссылка = Ставки.Организация
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	ДатаРегистрации = ?(ВидОрганизации = "ИндивидуальныйПредприниматель",
						Объект.СвидетельствоДатаВыдачи,
						Объект.ДатаРегистрации);
	ПериодСтавкаНалогаНаИмущество = ?(ЗначениеЗаполнено(Объект.ДатаРегистрации),
									  НачалоДня(Объект.ДатаРегистрации),
									  НачалоДня(ТекущаяДатаСеанса())); 
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодСтавкаНалогаНаИмущество", ПериодСтавкаНалогаНаИмущество);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтавкаНалогаНаИмуществоОсновныеСредства = НСтр("ru = '%Количество% с особым порядком налогообложения'");
		СтрокаСКоличеством = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Результат.Количество, 
				"объект,объекта,объектов");
		СтавкаНалогаНаИмуществоОсновныеСредства = СтрЗаменить(СтавкаНалогаНаИмуществоОсновныеСредства, "%Количество%", СтрокаСКоличеством);
		Элементы.ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства.Заголовок = СтавкаНалогаНаИмуществоОсновныеСредства;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораУчетнойПолитики(ВидОрганизации)
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Элементы.УчетнаяПолитика.РежимВыбораИзСписка = Истина;
		Элементы.УчетнаяПолитика.СписокВыбора.ЗагрузитьЗначения(УчетныеПолитикиДляИП());
	Иначе
		Элементы.УчетнаяПолитика.РежимВыбораИзСписка = Ложь;
		Элементы.УчетнаяПолитика.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчетныеПолитикиДляИП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

//-- НЕ УТ

#Область РаботаСКлассификаторами

&НаКлиенте
Процедура ВыбратьКодИзКлассификатора(ИмяКлассификатора, Комментарий = "", Знач ИмяРеквизитаКод = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   Дата(2000, 1, 1)); // дата - любая заполненная, для целей получения кодов классификаторов не играет роли.
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ПараметрыФормы.Вставить("ТекущийКод",      Объект[ИмяРеквизитаКод]);
	ПараметрыФормы.Вставить("Комментарий",     Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ИмяРеквизитаКод] = РезультатВыбора.Код;
	Объект[ДопПараметры.ИмяРеквизитаНаименование] = РезультатВыбора.Наименование;
	//++ НЕ УТ
	ЗаполнитьОписаниеКлассификаторов(ЭтотОбъект);
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКодаКлассификатора(ИмяКлассификатора, Знач Код)

	СоответствиеКодаНаименованию = Справочники.Организации.СоотвествиеКодовКНаименованиюИзМакета(ИмяКлассификатора);
	
	Возврат СоответствиеКодаНаименованию.Получить(Код);

КонецФункции

&НаКлиенте
Процедура КодКлассификатораПриИзменении(ИмяКлассификатора, Знач ИмяРеквизитаКод = "")
	
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ИмяРеквизитаНаименование = "Наименование" + Сред(ИмяРеквизитаКод, 4);
	
	// Исправление возможной опечатки в разделителе
	Объект[ИмяРеквизитаКод] = СтрЗаменить(Объект[ИмяРеквизитаКод], ",", ".");
	
	Объект[ИмяРеквизитаНаименование] = НаименованиеКодаКлассификатора(ИмяКлассификатора, Объект[ИмяРеквизитаКод]);
	//++ НЕ УТ
	ЗаполнитьОписаниеКлассификаторов(ЭтотОбъект);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбменРПННажатие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Документооборот с РПН'"), Новый ОписаниеОповещения("ОбменРПННажатиеОбъектЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменРПННажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаРПН.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбменРПННажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменРПННажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьОбменРПН();
	
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменФТСНажатие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru = 'Документооборот с ФТС'"), Новый ОписаниеОповещения("ОбменФТСНажатиеОбъектЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменФТСНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФТС.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбменФТСНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбменРПН()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаРПН) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменаРПН.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаРПН КАК НастройкиОбменаРПН
		|		ПО (НастройкиОбменаРПН.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаРПН.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		ОбменРПН = НСтр("ru = 'Не используется'");
		Пока РезультатЗапроса.Следующий() Цикл
			ОбменРПН = НСтр("ru = 'Используется'");
		КонецЦикла;
		
	Иначе
		
		ОбменРПН = НСтр("ru = 'Недостаточно прав на чтение информации.'");
		Элементы.ОбменРПН.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбменФТС()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФТС) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФТС.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФТС КАК НастройкиОбменаФТС
		|		ПО (НастройкиОбменаФТС.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФТС.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		ОбменФТС = НСтр("ru = 'Не используется'");
		Пока РезультатЗапроса.Следующий() Цикл
			ОбменФТС = НСтр("ru = 'Используется'");
		КонецЦикла;
		
	Иначе
		
		ОбменФТС = НСтр("ru = 'Недостаточно прав на чтение информации.'");
		Элементы.ОбменФТС.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменФТСНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьОбменФТС();
	
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
