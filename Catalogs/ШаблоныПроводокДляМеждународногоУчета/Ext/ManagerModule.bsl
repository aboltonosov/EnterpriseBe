#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует компоновщик настроек компоновки данных,
// по данным источника получения данных хозяйственной операции.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - хозяйственная операция,
//							определяющая источник получения данных.
//
Процедура ИнициализироватьКомпоновщик(Форма, ХозяйственнаяОперация) Экспорт

	Форма.АдресСхемыКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанных(Форма, ХозяйственнаяОперация);
	Если ЗначениеЗаполнено(Форма.АдресСхемыКомпоновкиДанных) Тогда
		Форма.Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.АдресСхемыКомпоновкиДанных));
	КонецЕсли;

КонецПроцедуры

// Загружает настройки в компоновщик настроек.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	Настройки - НастройкиКомпоновкиДанных - загружаемые настройки.
//
Процедура ЗагрузитьНастройки(Форма, Настройки) Экспорт

	Если Настройки <> Неопределено Тогда
		Форма.Компоновщик.ЗагрузитьНастройки(Настройки);
	КонецЕсли;

КонецПроцедуры

// Записывает информацию о дополнительном отборе, установленном в объекте.
// Вызывается в событиях "ПередЗаписьюНаСервере" в формах справочника.
//
// Параметры:
//	Форма - Форма - форма объекта.
//	Объект - СправочникОбъект.ШаблоныПроводокДляМеждународногоУчета - записываемый объект.  
//
Процедура ЗаписатьДополнительныйОтбор(Форма, Объект) Экспорт

	Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(Форма.Компоновщик.ПолучитьНастройки());
	Объект.ПредставлениеОтбора = Строка(Форма.Компоновщик.Настройки.Отбор);

КонецПроцедуры

// Формирует индекс картинки для объекта справочника.
//
// Параметры:
//	ШаблонПроводки - СправочникОбъект.ШаблоныПроводокДляМеждународногоУчета - шаблон проводки.
//
// Возвращаемое значение:
//	Число - индекс картинки.
//
Функция ИндексКартинки(ШаблонПроводки) Экспорт

	Если ШаблонПроводки.ЭтоГруппаШаблонов Тогда
		Если ШаблонПроводки.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все Тогда
			Результат = 0;
		Иначе
			Результат = 1;
		КонецЕсли;
	Иначе
		Результат = 2;
	КонецЕсли;
	
	Если ШаблонПроводки.ПометкаУдаления Тогда
		Результат = Результат + 3
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоГруппаШаблонов = Ложь;
		ШаблонПроводки = Неопределено;
		Если Параметры.Свойство("Ключ", ШаблонПроводки) И ЗначениеЗаполнено(ШаблонПроводки)
			ИЛИ Параметры.Свойство("ЗначениеКопирования", ШаблонПроводки) И ЗначениеЗаполнено(ШаблонПроводки) Тогда
			ЭтоГруппаШаблонов = МеждународнаяОтчетностьВызовСервера.ЭтоГруппаШаблонов(ШаблонПроводки);
		ИначеЕсли Параметры.Свойство("ДополнительныеПараметры") Тогда
			Если Параметры.ДополнительныеПараметры.Свойство("ЭтоГруппаШаблонов") Тогда
				ЭтоГруппаШаблонов = Параметры.ДополнительныеПараметры.ЭтоГруппаШаблонов;
			КонецЕсли;
		КонецЕсли;
		
		ВыбраннаяФорма = "Справочник.ШаблоныПроводокДляМеждународногоУчета.Форма." + ?(ЭтоГруппаШаблонов, "ФормаГруппы", "ФормаЭлемента");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСхемуКомпоновкиДанных(Форма, ХозяйственнаяОперация)

	АдресСКД = Неопределено;
	СхемаКомпоновкиДанных = Справочники.НастройкиХозяйственныхОпераций.СхемаПолученияДанных(ХозяйственнаяОперация);
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресСКД;

КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Операция.ИсточникДанных = ""ДвиженияДоходыРасходыПрочиеАктивыПассивы""
	|	И (ШаблоныПроводок.ТипИсточникаУточненияСчетаДт В (&ГруппыУчетаДоходовРасходов)
	|		ИЛИ ШаблоныПроводок.ТипИсточникаУточненияСчетаКт В (&ГруппыУчетаДоходовРасходов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|ГДЕ
	|	ШаблоныПроводок.Операция.ИсточникДанных = ""ДвиженияДенежныхСредств""
	|	И (ШаблоныПроводок.ИсточникСуммыВВалютеДт = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.УдалитьСуммаВКорВалюте)
	|		ИЛИ ШаблоныПроводок.ИсточникСуммыВВалютеКт = ЗНАЧЕНИЕ(Перечисление.ПоказателиАналитическихРегистров.УдалитьСуммаВКорВалюте))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|ГДЕ
	|	НЕ ШаблоныПроводок.ЭтоГруппаШаблонов
	|	И НЕ ШаблоныПроводок.Операция.ИсточникДанных В (
	|		""НДСЗаписиКнигиПокупок"",
	|		""НДСЗаписиКнигиПродаж"",
	|		"""")
	|");
	
	ГруппыУчетаДоходовРасходов = Новый Массив;
	ГруппыУчетаДоходовРасходов.Добавить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов);
	ГруппыУчетаДоходовРасходов.Добавить(Перечисления.ТипыИсточниковУточненияСчета.УдалитьГруппаФинансовогоУчетаДоходовРасходовДебета);
	ГруппыУчетаДоходовРасходов.Добавить(Перечисления.ТипыИсточниковУточненияСчета.УдалитьГруппаФинансовогоУчетаДоходовРасходовКредита);
	Запрос.УстановитьПараметр("ГруппыУчетаДоходовРасходов", ГруппыУчетаДоходовРасходов);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТипыДанныхУчета = Перечисления.ТипыДанныхУчета;
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	ПустойИсточник = ИсточникиНаправлений.ПустаяСсылка();
	
	НаправлениеДвижения = Новый Соответствие;
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.Номенклатура, ИсточникиНаправлений.НаправлениеДеятельностиНоменклатуры);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.Контрагенты, ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ДенежныеСредства, ИсточникиНаправлений.НаправлениеДеятельностиДС);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ДоходыРасходы, ИсточникиНаправлений.НаправлениеДеятельностиСтатьи);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ПрочиеАктивыПассивы, ИсточникиНаправлений.НаправлениеДеятельностиСтатьи);
	НаправлениеДвижения.Вставить(ТипыДанныхУчета.ПустаяСсылка(), ПустойИсточник);
	
	СимметричныеРегистры = Новый Структура;
	СимметричныеРегистры.Вставить("ДвиженияДенежныхСредств");
	СимметричныеРегистры.Вставить("ДвиженияДоходыРасходыПрочиеАктивыПассивы");
	СимметричныеРегистры.Вставить("ДвиженияКонтрагентКонтрагент");
	СимметричныеРегистры.Вставить("ДвиженияНоменклатураНоменклатура");
	
	НаправлениеДеятельности = ИсточникиНаправлений.НаправлениеДеятельности;
	КорНаправлениеДеятельности = ИсточникиНаправлений.КорНаправлениеДеятельности;
	
	ГФУДоходовРасходов = Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов;
	ГФУДоходовРасходовДебета = Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовДебета;
	ГФУДоходовРасходовКредита = Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовКредита;
	
	УдалитьГФУДоходовРасходовДебета = Перечисления.ТипыИсточниковУточненияСчета.УдалитьГруппаФинансовогоУчетаДоходовРасходовДебета;
	УдалитьГФУДоходовРасходовКредита = Перечисления.ТипыИсточниковУточненияСчета.УдалитьГруппаФинансовогоУчетаДоходовРасходовКредита;
	
	СуммаВКорВалюте = Перечисления.ПоказателиАналитическихРегистров.СуммаВКорВалюте;
	УдалитьСуммаВКорВалюте = Перечисления.ПоказателиАналитическихРегистров.УдалитьСуммаВКорВалюте;
	
	ПолноеИмяОбъекта = "Справочник.ШаблоныПроводокДляМеждународногоУчета";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			ВидыДвижений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Операция, "ИсточникДанных,Приход,Расход");
			ИсточникДанных = ВидыДвижений.ИсточникДанных;
			
			#Область ТипИсточникаУточненияСчета
			Если ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы"
				И (Объект.ТипИсточникаУточненияСчетаДт = ГФУДоходовРасходов
					ИЛИ Объект.ТипИсточникаУточненияСчетаДт = УдалитьГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаДт = УдалитьГФУДоходовРасходовКредита) Тогда
				Объект.ТипИсточникаУточненияСчетаДт = ГФУДоходовРасходовДебета;
			КонецЕсли;
			
			Если ИсточникДанных <> "ДвиженияДоходыРасходыПрочиеАктивыПассивы"
				И (Объект.ТипИсточникаУточненияСчетаДт = УдалитьГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаДт = УдалитьГФУДоходовРасходовКредита
					ИЛИ Объект.ТипИсточникаУточненияСчетаДт = ГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаДт = ГФУДоходовРасходовКредита) Тогда
				Объект.ТипИсточникаУточненияСчетаДт = ГФУДоходовРасходов;
			КонецЕсли;
			
			Если ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы"
				И (Объект.ТипИсточникаУточненияСчетаКт = ГФУДоходовРасходов
					ИЛИ Объект.ТипИсточникаУточненияСчетаКт = УдалитьГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаКт = УдалитьГФУДоходовРасходовКредита) Тогда
				Объект.ТипИсточникаУточненияСчетаКт = ГФУДоходовРасходовКредита;
			КонецЕсли;
			
			Если ИсточникДанных <> "ДвиженияДоходыРасходыПрочиеАктивыПассивы" И 
				(Объект.ТипИсточникаУточненияСчетаКт = УдалитьГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаКт = УдалитьГФУДоходовРасходовКредита
					ИЛИ Объект.ТипИсточникаУточненияСчетаКт = ГФУДоходовРасходовДебета
					ИЛИ Объект.ТипИсточникаУточненияСчетаКт = ГФУДоходовРасходовКредита) Тогда
				Объект.ТипИсточникаУточненияСчетаКт = ГФУДоходовРасходов;
			КонецЕсли;
			#КонецОбласти

			#Область ИсточникСуммыВВалюте
			Если Объект.ИсточникСуммыВВалютеДт = УдалитьСуммаВКорВалюте Тогда
				Объект.ИсточникСуммыВВалютеДт = СуммаВКорВалюте;
			КонецЕсли;
			
			Если Объект.ИсточникСуммыВВалютеКт = УдалитьСуммаВКорВалюте Тогда
				Объект.ИсточникСуммыВВалютеКт = СуммаВКорВалюте;
			КонецЕсли;
			#КонецОбласти

			#Область ИсточникНаправления
			ВидыДвижений.Удалить("ИсточникДанных");
			Для Каждого ВидДвижения Из ВидыДвижений Цикл
				ДтКт = ?(ВидДвижения.Ключ = "Приход", "Дт", "Кт");
				ИсточникНаправления = НаправлениеДвижения[ВидДвижения.Значение];
				Если СимметричныеРегистры.Свойство(ИсточникДанных) Тогда
					ИсточникНаправления = ?(ВидДвижения.Ключ = "Приход", КорНаправлениеДеятельности, НаправлениеДеятельности);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Объект["ИсточникНаправления"+ДтКт])Тогда
					Объект["ИсточникНаправления"+ДтКт] = ИсточникНаправления;
				КонецЕсли;
			КонецЦикла;
			#КонецОбласти
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли