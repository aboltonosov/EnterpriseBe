#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Текст запроса оборотов товаров по варианту обеспечения "Резервировать к дате"
// в разрезе дат, номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистра перед получением оборотов.
//  Разделы - Массив - массив в который будет добавлена информация о временных таблицах, создаваемых при выполнении запроса.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы оборотов товаров по варианту обеспечения "Резервировать к дате"
//           в разрезе дат, номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОборотов(ИспользоватьКорректировку, Разделы = Неопределено) Экспорт

	Шаблоны = Новый Массив();
	ШаблонПоступление =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|
		|	ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаСобытия
		|		КОНЕЦ                         КАК Период,
		|
		|	Таблица.КоличествоИзЗаказов       КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК Отбор
		|		ПО Таблица.Номенклатура   = Отбор.Номенклатура
		|		 И Таблица.Характеристика = Отбор.Характеристика
		|		 И Таблица.Склад          = Отбор.Склад
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.КоличествоИзЗаказов <> 0";

	ШаблонОтгрузка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Склад              КАК Склад,
		|
		|	ВЫБОР КОГДА Таблица.ДатаОтгрузки <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаОтгрузки
		|		КОНЕЦ                           КАК Период,
		|
		|	-Таблица.КоличествоИзЗаказовОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура   КАК Номенклатура,
		|				Отбор.Характеристика КАК Характеристика,
		|				Отбор.Склад          КАК Склад
		|			ИЗ
		|				ВтТовары КАК Отбор)) КАК Таблица";

	ШаблонКорректировка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Склад                 КАК Склад,
		|
		|	ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаСобытия
		|		КОНЕЦ                          КАК Период,
		|
		|	Таблица.КоличествоИзЗаказов        КАК Количество
		|ИЗ
		|	ВтГрафикПоступленияТоваровКорректировка КАК Таблица
		|ГДЕ
		|	Таблица.КоличествоИзЗаказов <> 0";

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Номенклатура             КАК Номенклатура,
		|	Набор.Характеристика           КАК Характеристика,
		|	Набор.Склад                    КАК Склад,
		|
		|	Набор.Период                   КАК Период,
		|	СУММА(Набор.Количество)        КАК Количество
		|
		|ПОМЕСТИТЬ ВтОборотыГрафика
		|ИЗ
		|	ОбъединениеШаблонов КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад,
		|	Набор.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	Период
		|;
		|
		|///////////////////////////////////////////////////
		|";

	Шаблоны.Добавить(ШаблонПоступление);
	Шаблоны.Добавить(ШаблонОтгрузка);

	Если ИспользоватьКорректировку Тогда
		Шаблоны.Добавить(ШаблонКорректировка);
	КонецЕсли;

	ОбъединениеШаблонов = ОбъединитьТекстыЗапроса(Шаблоны);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъединениеШаблонов", ОбъединениеШаблонов);

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОборотыГрафика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса оборотов товаров по варианту обеспечения "Обособленно"
// в разрезе назначений, дат, номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистра перед получением оборотов.
//  Разделы                   - Массив - массив в который будет добавлена информация о временных таблицах, создаваемых при выполнении запроса.
//  УчитыватьГрафикОтгрузки   - Булево - необходимость при вычислении остатков учитывать, запланированные отгрузки со склада.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы оборотов товаров по варианту обеспечения "Обособленно"
//           в разрезе назначений, дат, номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОборотовОбособленных(ИспользоватьКорректировку, Разделы, УчитыватьГрафикОтгрузки)

	Шаблоны = Новый Массив();
	ШаблонПоступление =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	Таблица.Назначение          КАК Назначение,
		|
		|	ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаСобытия
		|		КОНЕЦ                         КАК Период,
		|
		|	Таблица.КоличествоПодЗаказ        КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОбособленные КАК Отбор
		|		ПО Таблица.Номенклатура   = Отбор.Номенклатура
		|		 И Таблица.Характеристика = Отбор.Характеристика
		|		 И Таблица.Склад          = Отбор.Склад
		|		 И Таблица.Назначение     = Отбор.Назначение
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.КоличествоПодЗаказ <> 0";

	ШаблонОтгрузка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	Таблица.Назначение          КАК Назначение,
		|
		|	ВЫБОР КОГДА Таблица.ДатаОтгрузки <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаОтгрузки
		|		КОНЕЦ                         КАК Период,
		|
		|	-Таблица.КоличествоПодЗаказ       КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОбособленные КАК Отбор
		|		ПО Таблица.Номенклатура   = Отбор.Номенклатура
		|		 И Таблица.Характеристика = Отбор.Характеристика
		|		 И Таблица.Склад          = Отбор.Склад
		|		 И Таблица.Назначение     = Отбор.Назначение
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.КоличествоПодЗаказ <> 0";

	ШаблонКорректировка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Склад                 КАК Склад,
		|	Таблица.Назначение            КАК Назначение,
		|
		|	ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				Таблица.ДатаСобытия
		|		КОНЕЦ                          КАК Период,
		|
		|	Таблица.КоличествоПодЗаказ         КАК Количество
		|ИЗ
		|	ВтГрафикПоступленияТоваровКорректировка КАК Таблица
		|ГДЕ
		|	Таблица.КоличествоПодЗаказ <> 0";

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Номенклатура             КАК Номенклатура,
		|	Набор.Характеристика           КАК Характеристика,
		|	Набор.Склад                    КАК Склад,
		|	Набор.Назначение               КАК Назначение,
		|
		|	Набор.Период                   КАК Период,
		|	СУММА(Набор.Количество)        КАК Количество
		|
		|ПОМЕСТИТЬ ВтОборотыГрафикаОбособленные
		|ИЗ
		|	ОбъединениеШаблонов КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Назначение,
		|	Набор.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период
		|;
		|
		|///////////////////////////////////////////////////
		|";

	Шаблоны.Добавить(ШаблонПоступление);

	Если ИспользоватьКорректировку Тогда
		Шаблоны.Добавить(ШаблонКорректировка);
	КонецЕсли;

	Если УчитыватьГрафикОтгрузки Тогда
		Шаблоны.Добавить(ШаблонОтгрузка);
	КонецЕсли;

	ОбъединениеШаблонов = ОбъединитьТекстыЗапроса(Шаблоны);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъединениеШаблонов", ОбъединениеШаблонов);

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОборотыГрафикаОбособленные");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса остатков товаров по варианту обеспечения "Резервировать к дате".
// в разрезе номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистра перед получением остатков.
//  Разделы - Массив - массив в который будет добавлена информация о временных таблицах создаваемых при выполнении запроса.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы остатков товаров по варианту обеспечения "Резервировать к дате"
//           в разрезе номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы = Неопределено) Экспорт

	Шаблоны = Новый Массив();
	ШаблонПоступление =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|
		|	Таблица.КоличествоИзЗаказовОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура    КАК Номенклатура,
		|				Отбор.Характеристика  КАК Характеристика,
		|				Отбор.Склад           КАК Склад
		|			ИЗ
		|				ВтТовары КАК Отбор)) КАК Таблица";

	ШаблонОтгрузка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|
		|	-Таблица.КоличествоИзЗаказовОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура    КАК Номенклатура,
		|				Отбор.Характеристика  КАК Характеристика,
		|				Отбор.Склад           КАК Склад
		|			ИЗ
		|				ВтТовары КАК Отбор)) КАК Таблица";

	ШаблонКорректировка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|
		|	Таблица.КоличествоИзЗаказов КАК Количество
		|ИЗ
		|	ВтГрафикПоступленияТоваровКорректировка КАК Таблица
		|ГДЕ
		|	Таблица.КоличествоИзЗаказов <> 0";

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаборДанных.Номенклатура      КАК Номенклатура,
		|	НаборДанных.Характеристика    КАК Характеристика,
		|	НаборДанных.Склад             КАК Склад,
		|	СУММА(НаборДанных.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиГрафика
		|ИЗ
		|	ОбъединениеШаблонов КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Номенклатура, НаборДанных.Характеристика, НаборДанных.Склад
		|ИМЕЮЩИЕ
		|	СУММА(НаборДанных.Количество) <> 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|///////////////////////////////////////////////////
		|";

	Шаблоны.Добавить(ШаблонПоступление);
	Шаблоны.Добавить(ШаблонОтгрузка);

	Если ИспользоватьКорректировку Тогда
		Шаблоны.Добавить(ШаблонКорректировка);
	КонецЕсли;

	ОбъединениеШаблонов = ОбъединитьТекстыЗапроса(Шаблоны);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъединениеШаблонов", ОбъединениеШаблонов);


	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиГрафика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса остатков товаров по варианту обеспечения "Обособленно".
// в разрезе назначений, номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистра перед получением остатков.
//  Разделы                   - Массив - массив в который будет добавлена информация о временных таблицах создаваемых при выполнении запроса.
//  УчитыватьГрафикОтгрузки   - Булево - необходимость при вычислении остатков учитывать, запланированные отгрузки со склада.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы остатков товаров по варианту обеспечения "Обособленно"
//           в разрезе назначений, номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОстатковОбособленных(ИспользоватьКорректировку, Разделы, УчитыватьГрафикОтгрузки)

	Шаблоны = Новый Массив();
	ШаблонПоступление =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|
		|	Таблица.КоличествоПодЗаказОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура    КАК Номенклатура,
		|				Отбор.Характеристика  КАК Характеристика,
		|				Отбор.Склад           КАК Склад,
		|				Отбор.Назначение      КАК Назначение
		|			ИЗ
		|				ВтТоварыОбособленные КАК Отбор)) КАК Таблица";

	ШаблонОтгрузка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|
		|	-Таблица.КоличествоПодЗаказОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Отбор.Номенклатура    КАК Номенклатура,
		|				Отбор.Характеристика  КАК Характеристика,
		|				Отбор.Склад           КАК Склад,
		|				Отбор.Назначение      КАК Назначение
		|			ИЗ
		|				ВтТоварыОбособленные КАК Отбор)) КАК Таблица";

	ШаблонКорректировка =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|
		|	Таблица.КоличествоПодЗаказ КАК Количество
		|ИЗ
		|	ВтГрафикПоступленияТоваровКорректировка КАК Таблица
		|ГДЕ
		|	Таблица.КоличествоПодЗаказ <> 0";

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаборДанных.Номенклатура      КАК Номенклатура,
		|	НаборДанных.Характеристика    КАК Характеристика,
		|	НаборДанных.Склад             КАК Склад,
		|	НаборДанных.Назначение        КАК Назначение,
		|	СУММА(НаборДанных.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиГрафикаОбособленные
		|ИЗ
		|	ОбъединениеШаблонов КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Номенклатура, НаборДанных.Характеристика, НаборДанных.Склад, НаборДанных.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(НаборДанных.Количество) <> 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|///////////////////////////////////////////////////
		|";

	Шаблоны.Добавить(ШаблонПоступление);

	Если ИспользоватьКорректировку Тогда
		Шаблоны.Добавить(ШаблонКорректировка);
	КонецЕсли;

	Если УчитыватьГрафикОтгрузки Тогда
		Шаблоны.Добавить(ШаблонОтгрузка);
	КонецЕсли;

	ОбъединениеШаблонов = ОбъединитьТекстыЗапроса(Шаблоны);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъединениеШаблонов", ОбъединениеШаблонов);

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиГрафикаОбособленные");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса оборотов товаров по датам и итогового остатка с учетом свободного остатка товара на складе
// в разрезе номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистров перед получением остатков.
//  Разделы - Массив - массив в который будет добавлена информация о временных таблицах создаваемых при выполнении запроса.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы оборотов товаров по датам и итогового остатка товара.
//           в разрезе номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОстатковИОборотов(ИспользоватьКорректировку, Разделы = Неопределено) Экспорт

	ТекстЗапроса =
		РегистрыНакопления.СвободныеОстатки.ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы)
		+ ТекстЗапросаОборотов(ИспользоватьКорректировку, Разделы)
		+ ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы)
		+ "ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|
		|	ЕСТЬNULL(ОборотыГрафика.Период, ДАТАВРЕМЯ(1,1,1)) КАК Период,
		|	ЕСТЬNULL(ОборотыГрафика.Количество, 0)            КАК Оборот,
		|
		|	ЕСТЬNULL(ОстаткиГрафика.Количество, 0) + ЕСТЬNULL(ОстаткиСклада.Количество,0) КАК Остаток
		|ИЗ
		|	ВтТовары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиСклада КАК ОстаткиСклада
		|		ПО Таблица.Номенклатура   = ОстаткиСклада.Номенклатура
		|		 И Таблица.Характеристика = ОстаткиСклада.Характеристика
		|		 И Таблица.Склад          = ОстаткиСклада.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиГрафика КАК ОстаткиГрафика
		|		ПО Таблица.Номенклатура   = ОстаткиГрафика.Номенклатура
		|		 И Таблица.Характеристика = ОстаткиГрафика.Характеристика
		|		 И Таблица.Склад          = ОстаткиГрафика.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафика КАК ОборотыГрафика
		|		ПО Таблица.Номенклатура   = ОборотыГрафика.Номенклатура
		|		 И Таблица.Характеристика = ОборотыГрафика.Характеристика
		|		 И Таблица.Склад          = ОборотыГрафика.Склад
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	Период УБЫВ
		|;
		|
		|/////////////////////////////////////////////////////
		|";

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиИОборотыГрафика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса оборотов обособленных товаров по датам и итогового остатка с учетом обособленного остатка товара на складе
// в разрезе назначений, номенклатуры, характеристики и склада.
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистров перед получением остатков.
//  Разделы - Массив - массив в который будет добавлена информация о временных таблицах создаваемых при выполнении запроса.
//
// Возвращаемое значение:
//  Строка - Текст запроса временной таблицы оборотов обособленных товаров по датам и итогового обособленного остатка товара.
//           в разрезе назначений, номенклатуры, характеристики и склада.
//
Функция ТекстЗапросаОстатковИОборотовОбособленных(ИспользоватьКорректировку, Разделы, УчитыватьГрафикОтгрузки) Экспорт

	ТекстЗапроса =
		РегистрыНакопления.ОбеспечениеЗаказов.ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы)
		+ ТекстЗапросаОборотовОбособленных(ИспользоватьКорректировку, Разделы, УчитыватьГрафикОтгрузки)
		+ ТекстЗапросаОстатковОбособленных(ИспользоватьКорректировку, Разделы, УчитыватьГрафикОтгрузки)
		+ "ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|
		|	ЕСТЬNULL(ОборотыГрафика.Период, ДАТАВРЕМЯ(1,1,1)) КАК Период,
		|	ЕСТЬNULL(ОборотыГрафика.Количество, 0)            КАК Оборот,
		|
		|	ЕСТЬNULL(ОстаткиГрафика.Количество, 0) + ЕСТЬNULL(ОстаткиСклада.Количество, 0) КАК Остаток
		|ИЗ
		|	ВтТоварыОбособленные КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказов КАК ОстаткиСклада
		|		ПО Таблица.Номенклатура   = ОстаткиСклада.Номенклатура
		|		 И Таблица.Характеристика = ОстаткиСклада.Характеристика
		|		 И Таблица.Склад          = ОстаткиСклада.Склад
		|		 И Таблица.Назначение     = ОстаткиСклада.Назначение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиГрафикаОбособленные КАК ОстаткиГрафика
		|		ПО Таблица.Номенклатура   = ОстаткиГрафика.Номенклатура
		|		 И Таблица.Характеристика = ОстаткиГрафика.Характеристика
		|		 И Таблица.Склад          = ОстаткиГрафика.Склад
		|		 И Таблица.Назначение     = ОстаткиГрафика.Назначение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафикаОбособленные КАК ОборотыГрафика
		|		ПО Таблица.Номенклатура   = ОборотыГрафика.Номенклатура
		|		 И Таблица.Характеристика = ОборотыГрафика.Характеристика
		|		 И Таблица.Склад          = ОборотыГрафика.Склад
		|		 И Таблица.Назначение     = ОборотыГрафика.Назначение
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период УБЫВ
		|;
		|
		|/////////////////////////////////////////////////////
		|";

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиИОборотыГрафикаОбособленные");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Предназначена для получения таблицы доступных остатков по данным об остатках и оборотах номенклатуры из выборки.
//
// Параметры:
//  Выборка - ВыборкаДанных      - Выборка оборотов номенклатуры в порядке убывания периода,
//                                 каждая запись содержит также конченый остаток номенклатуры.
//  ТолькоПоложительные - Булево - Если истина, то в результат попадут только положительные остатки
//                                 (для заполнения обеспечения в заказах).
//  Обособление - Строка         - Если "Товар", то выборка содержит данные обособленных товаров, если "Работа",
//                                 то выборка содержит данные работ.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица доступных остатков с колонками:
//     * Номенклатура    - СправочникСсылка.Номенклатура               - номенклатура из выборки данных.
//     * Характеристика  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика из выборки данных.
//     * Склад           - СправочникСсылка.Склады                     - склад из выборки данных, только при использовании
//                                                                       со значением параметра Обособление равным Неопределено
//                                                                       или "Товар".
//     * Назначение      - СправочникСсылка.Назначения                 - назначение из выборки данных, только при использовании
//                                                                       со значением параметра Обособление равным "Товар".
//     * Подразделение   - СправочникСсылка.СтруктураПредприятия       - подразделение из выборки данных, только при использовании
//                                                                       со значением параметра Обособление равным "Работа".
//     * ДатаДоступности - Дата                                        - дата, для которой рассчитано доступное количество товаров/работ.
//     * Количество      - Число                                       - рассчитаное доступное количество товаров/работ.
//
Функция ТаблицаДоступныеОстатки(Выборка, ТолькоПоложительные = Ложь, Обособление = Неопределено) Экспорт

	ДоступныеОстатки = Новый ТаблицаЗначений();
	ДоступныеОстатки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДоступныеОстатки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДоступныеОстатки.Колонки.Добавить("ДатаДоступности", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ДоступныеОстатки.Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));

	Если Обособление = Неопределено Тогда

		ДоступныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСклад();

	ИначеЕсли Обособление = "Товар" Тогда

		ДоступныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ДоступныеОстатки.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСкладНазначение();

	ИначеЕсли Обособление = "Работа" Тогда

		ДоступныеОстатки.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ДоступныеОстатки.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаПодразделениеНазначение();

	КонецЕсли;

	ЕстьЗаписи = Выборка.Следующий();
	Пока ЕстьЗаписи Цикл

		ЗаполнитьЗначенияСвойств(КлючСтроки, Выборка);

		НарастающийИтог          = Выборка.Остаток;
		МинимальноеЗначение      = НарастающийИтог;

		ИзмениласьЗапись         = Ложь;

		// Цикл по сочетанию номенклатура\характеристика\склад.
		Пока Не ИзмениласьЗапись Цикл

			НарастающийИтог = НарастающийИтог - Выборка.Оборот;

			Если МинимальноеЗначение > НарастающийИтог И (Не ТолькоПоложительные Или МинимальноеЗначение > 0) Тогда

				СтрокаТаблицы = ДоступныеОстатки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);

				СтрокаТаблицы.ДатаДоступности = Выборка.Период; //доступно на дату.
				СтрокаТаблицы.Количество = МинимальноеЗначение;
				МинимальноеЗначение = НарастающийИтог;

			КонецЕсли;

			// Переход к следующей записи.
			ЕстьЗаписи = Выборка.Следующий();

			ИзмениласьЗапись = Не ЕстьЗаписи Или ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, Выборка);

		КонецЦикла;

		Если Не ТолькоПоложительные Или МинимальноеЗначение > 0 Тогда

			СтрокаТаблицы = ДоступныеОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КлючСтроки);

			СтрокаТаблицы.ДатаДоступности = '00010101'; //доступно сейчас.
			СтрокаТаблицы.Количество = МинимальноеЗначение;

		КонецЕсли;

	КонецЦикла;

	Возврат ДоступныеОстатки;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъединитьТекстыЗапроса(Тексты)

	Результат = "";
	ВГраница = Тексты.Количество() - 1;
	Для Индекс = 0 По ВГраница Цикл
		Результат = Результат + Тексты[Индекс];
		Если Индекс < ВГраница Тогда
			Результат = Результат + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
	КонецЦикла;
	
	Возврат "(" + Результат + ")";

КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ГрафикПоступленияТоваров";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	// Вычисление признаков по Заказу поставщику, для расчета какой документ
	// станет регистратором по РН ГрафикПоступленияТоваров в случае проведения Заказа поставщика.
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПриемкаНеРазделенаПоНакладным,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоглашениеИспользуетсяВПриемке,
	|	ЗаказПоставщикуТовары.Ссылка.Соглашение КАК Соглашение,
	|	МАКСИМУМ(ЗаказПоставщикуТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|			И ЗаказПоставщикуТовары.ДатаПоступления >= ЗаказПоставщикуТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении) КАК ИспользуетсяОрдерныйСклад
	|ПОМЕСТИТЬ ВТЗаказыПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Проведен
	|	И НЕ ЗаказПоставщикуТовары.Отменено
	|	И ЗаказПоставщикуТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.УдалитьКПоступлению),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаказПоставщикуТовары.Ссылка.Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Подмена регистратора. Движения могут быть как новыми, так и уже существовать.
	// Регистратор при проведении Заказа поставщику - Соглашение с поставщиком.
	|ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.Ссылка) КАК Регистратор
	|ПОМЕСТИТЬ ВТЗаказыПоставщикуССоглашениями
	|ИЗ
	|	ВТЗаказыПоставщику КАК ВТЗаказыПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СоглашениеСПоставщиком КАК Таблица
	|		ПО (Таблица.Соглашение = ВТЗаказыПоставщику.Соглашение)
	|ГДЕ
	|	ВТЗаказыПоставщику.СоглашениеИспользуетсяВПриемке
	|	И ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад
	|	И НЕ Таблица.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказыПоставщику.Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Движения могут быть как новыми, так и уже существовать.
	// Регистратор при проведении Заказа поставщику - Заказ поставщику.
	|ВЫБРАТЬ
	|	ВТЗаказыПоставщику.Ссылка
	|ИЗ
	|	ВТЗаказыПоставщику КАК ВТЗаказыПоставщику
	|ГДЕ
	|	(НЕ ВТЗаказыПоставщику.СоглашениеИспользуетсяВПриемке
	|			ИЛИ (ВТЗаказыПоставщику.ПриемкаНеРазделенаПоНакладным И ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад)
	|			ИЛИ НЕ ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗаказыПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Распоряжения из Корректировок поступления.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениеТоваров.Распоряжение КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвижениеТоваров КАК ДвижениеТоваров
	|ГДЕ
	|	ДвижениеТоваров.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|	И ДвижениеТоваров.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Заказы поставщику (в т.ч. те, по которым еще нет записей в РН ГрафикПоступленияТоваров).
	// Регистратор может быть подменен на Документ.СоглашениеСПоставщиком.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщику.Регистратор
	|ИЗ
	|	ВТЗаказыПоставщикуССоглашениями КАК ЗаказыПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Все записи регистра, кроме Заказа поставщику
//++ НЕ УТКА
	// и производственных документов.
//-- НЕ УТКА
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикПоступления.Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступления
	|ГДЕ
	|	НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЗаказПоставщику
//++ НЕ УТКА
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2
//-- НЕ УТКА
	|	И (ГрафикПоступления.КоличествоИзЗаказовСНеподтвержденными = 0
	|			И ГрафикПоступления.КоличествоПодЗаказСНеподтвержденными = 0)
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ДвиженияРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|			ПО Операция.Ссылка = Строки.Ссылка
	|				И Операция.Дата <> Строки.НачалоОтгрузки
	|				И (Строки.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ПО ДвиженияРегистра.Регистратор = Операция.Ссылка
	|			И ДвиженияРегистра.Период = НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ)
	|			И (Операция.УправлениеПроизводством2_2)
	|			И ДвиженияРегистра.Период <> Строки.НачалоОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ДвиженияРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|			ПО Операция.Ссылка = Строки.Ссылка
	|				И Операция.Дата <> Строки.ОкончаниеПоступления
	|				И (Строки.ОкончаниеПоступления <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ПО ДвиженияРегистра.Регистратор = Операция.Ссылка
	|			И ДвиженияРегистра.Период = НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ)
	|			И (Операция.УправлениеПроизводством2_2)
	|			И ДвиженияРегистра.Период <> Строки.ОкончаниеПоступления
	|
	//-- НЕ УТ
	|
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	//++ НЕ УТ
	ПолноеИмяРегистра = "РегистрНакопления.ГрафикПоступленияТоваров";
	
	#Область ТекстЗапросаРегистраторовДляПерепроведения
	ТекстЗапросаРегистраторовДляПерепроведения =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Распоряжение КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Регистратор                                             КАК Регистратор,
	|		ВложенныйЗапрос.Период                                                  КАК Период,
	|		ВложенныйЗапрос.Распоряжение                                            КАК Распоряжение,
	|		ВложенныйЗапрос.Склад                                                   КАК Склад,
	|		ВложенныйЗапрос.Номенклатура                                            КАК Номенклатура,
	|		ВложенныйЗапрос.Характеристика                                          КАК Характеристика,
	|		ВложенныйЗапрос.Назначение                                              КАК Назначение,
	|		СУММА(ВложенныйЗапрос.ПланируемоеПоступление)                           КАК ПланируемоеПоступление,
	|		СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеПодЗаказ)                   КАК ПланируемоеПоступлениеПодЗаказ,
	|		СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеСНеподтвержденными)         КАК ПланируемоеПоступлениеСНеподтвержденными,
	|		СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|	ИЗ
	|		(
	|		%АдаптированныйТекстЗапроса%
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаРегистра.Регистратор                                       КАК Регистратор,
	|			ТаблицаРегистра.Период                                            КАК Период,
	|			ТаблицаРегистра.Распоряжение                                      КАК Распоряжение,
	|			ТаблицаРегистра.Склад                                             КАК Склад,
	|			ТаблицаРегистра.Номенклатура                                      КАК Номенклатура,
	|			ТаблицаРегистра.Характеристика                                    КАК Характеристика,
	|			ТаблицаРегистра.Назначение                                        КАК Назначение,
	|			-ТаблицаРегистра.ПланируемоеПоступление                           КАК ПланируемоеПоступление,
	|			-ТаблицаРегистра.ПланируемоеПоступлениеПодЗаказ                   КАК ПланируемоеПоступлениеПодЗаказ,
	|			-ТаблицаРегистра.ПланируемоеПоступлениеСНеподтвержденными         КАК ПланируемоеПоступлениеСНеподтвержденными,
	|			-ТаблицаРегистра.ПланируемоеПоступлениеПодЗаказСНеподтвержденными КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными, ТаблицаРегистра.ДатаРаспоряжения КАК ДатаРаспоряжения
	|		ИЗ
	|			РегистрНакопления.ДвижениеТоваров КАК ТаблицаРегистра
	|		ГДЕ
	|			ТаблицаРегистра.Регистратор ССЫЛКА %ТипДокумента%
	|			
	|		) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Регистратор,
	|		ВложенныйЗапрос.Период,
	|		ВложенныйЗапрос.Распоряжение,
	|		ВложенныйЗапрос.Склад,
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.Характеристика,
	|		ВложенныйЗапрос.Назначение
	|	
	|	ИМЕЮЩИЕ
	|		(ЛОЖЬ
	|			ИЛИ СУММА(ВложенныйЗапрос.ПланируемоеПоступление) <> 0
	|			ИЛИ СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеПодЗаказ) <> 0
	|			ИЛИ СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеСНеподтвержденными) <> 0
	|			ИЛИ СУММА(ВложенныйЗапрос.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) <> 0)) КАК НеправильныеДвижения";
	#КонецОбласти
	
	СписокДокументов = Новый Массив;
	//++ НЕ УТКА
	СписокДокументов.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	СписокДокументов.Добавить("Документ.ЭтапПроизводства2_2");
	СписокДокументов.Добавить("Документ.ЗаказНаПроизводство2_2");
	//-- НЕ УТКА
	СписокДокументов.Добавить("Документ.ЗаказПереработчику");
	
	Запрос = Новый Запрос;
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл 
		
		Запрос.Текст = ТекстЗапросаРегистраторовДляПерепроведения;
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("ДвижениеТоваров");
		
		ТекстЗапросаФормированияДвижений = ТекстЗапросаМеханизмаПроведения.ТекстЗапроса;
		ЗначенияПараметров = ТекстЗапросаМеханизмаПроведения.ЗначенияПараметров;
		
		Если ИмяДокумента <> "ЗаказНаПроизводство2_2" Тогда
			// Требуется удалить поле "ДатаРаспоряжения" из выборки
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ", ТаблицаРегистра.ДатаРаспоряжения КАК ДатаРаспоряжения", "");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%АдаптированныйТекстЗапроса%", ТекстЗапросаФормированияДвижений);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ПолноеИмяДокумента);
		
		Для Каждого КлючЗначение Из ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
		
	КонецЦикла;
	//-- НЕ УТ
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ГрафикПоступленияТоваров";
	ИмяРегистра = "ГрафикПоступленияТоваров";
	
	РегистрДвижениеТоваровОбновляется = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "РегистрНакопления.ДвижениеТоваров");
	Если РегистрДвижениеТоваровОбновляется Тогда
		// Обработка РН ГрафикПоступленияТоваров возможна только если завершена обработка РН ДвижениеТоваров.
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	// 0. Получение элементов справочника СоглашенияСПоставщиками.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашениеСПоставщиком.Соглашение КАК Соглашение
	|ПОМЕСТИТЬ ВТСоглашения
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СоглашениеСПоставщиком КАК СоглашениеСПоставщиком
	|		ПО СсылкиДляОбработки.Регистратор = СоглашениеСПоставщиком.Ссылка
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.Соглашение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. Выбор всех возможных документов в которых может быть выбран элемент справочника соглашений.
	|ВЫБРАТЬ
	|	ВТСоглашения.Соглашение КАК Соглашение
	|ПОМЕСТИТЬ ВТНезаблокированныеСоглашения
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоглашения КАК ВТСоглашения
	|		ПО ТаблицаДокумента.Соглашение = ВТСоглашения.Соглашение
	|ГДЕ
	|	НЕ ВТСоглашения.Соглашение ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСоглашения.Соглашение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоглашения КАК ВТСоглашения
	|		ПО ТаблицаДокумента.Соглашение = ВТСоглашения.Соглашение
	|ГДЕ
	|	НЕ ВТСоглашения.Соглашение ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСоглашения.Соглашение
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоглашения КАК ВТСоглашения
	|		ПО ТаблицаДокумента.Соглашение = ВТСоглашения.Соглашение
	|ГДЕ
	|	НЕ ВТСоглашения.Соглашение ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСоглашения.Соглашение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоглашения КАК ВТСоглашения
	|		ПО ТаблицаДокумента.Распоряжение = ВТСоглашения.Соглашение
	|ГДЕ
	|	НЕ ВТСоглашения.Соглашение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. Получение финальной таблицы документов, готовых к обработке.
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТСсылки
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоглашения КАК ВТСоглашения
	|		ПО (ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.СоглашениеСПоставщиком).Соглашение = ВТСоглашения.Соглашение)
	|ГДЕ
	|	СсылкиДляОбработки.Регистратор ССЫЛКА Документ.СоглашениеСПоставщиком
	|	И НЕ ВТСоглашения.Соглашение ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|ГДЕ
	|	НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.СоглашениеСПоставщиком
	|;
	|
	// 3. Документы для обработки перерасчетом итогов регистра.
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТСсылки КАК СсылкиДляОбработки
	|ГДЕ
	|	СсылкиДляОбработки.Регистратор ССЫЛКА Документ.СоглашениеСПоставщиком
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказПоставщику
//++ НЕ УТ
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказПереработчику
//-- НЕ УТ
//++ НЕ УТКА
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|	ИЛИ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2
//-- НЕ УТКА
	|;
	|
	// 4. Документы для обработки простым копированием значений ресурсов.
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТСсылки КАК СсылкиДляОбработки
	|ГДЕ
	|	НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.СоглашениеСПоставщиком
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказПоставщику
//++ НЕ УТ
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказПереработчику
//-- НЕ УТ
//++ НЕ УТКА
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|	И НЕ СсылкиДляОбработки.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2
//-- НЕ УТКА
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокументыДляРасчетаИтогаРегистра     = РезультатЗапроса[3].Выбрать();
	ДокументыДляПереносаЗначенийРесурсов = РезультатЗапроса[4].Выбрать();
	
	Пока ДокументыДляРасчетаИтогаРегистра.Следующий() Цикл
		
		// Блокировка читаемых и записываемых наборов.
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикПоступленияТоваров.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументыДляРасчетаИтогаРегистра.Регистратор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвижениеТоваров");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДокументыДляРасчетаИтогаРегистра.Регистратор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось установить блокировку на регистры ""График поступления товаров"" и ""Движение товаров"": %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ДокументыДляРасчетаИтогаРегистра.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ДокументыДляРасчетаИтогаРегистра.Регистратор.Метаданные(),
				ДокументыДляРасчетаИтогаРегистра.Регистратор,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		// Перерасчет движений
		НаборЗаписей = РегистрыНакопления.ДвижениеТоваров.РассчитатьИтогиРегистраОстаткиТоваровПоГрафикуДляОбновленияИБ(ДокументыДляРасчетаИтогаРегистра.Регистратор);
		
		// Запись.
		Если ЕстьИзмененияВНаборе(ДокументыДляРасчетаИтогаРегистра, НаборЗаписей) Тогда
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ДокументыДляРасчетаИтогаРегистра.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					ДокументыДляРасчетаИтогаРегистра.Регистратор.Метаданные(),
					ДокументыДляРасчетаИтогаРегистра.Регистратор,
					ТекстСообщения);
				
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ДокументыДляПереносаЗначенийРесурсов.Следующий() Цикл
		
		// Блокировка читаемых и записываемых наборов.
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикПоступленияТоваров.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументыДляПереносаЗначенийРесурсов.Регистратор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось установить блокировку на регистры ""График поступления товаров"" и ""Движение товаров"": %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ДокументыДляПереносаЗначенийРесурсов.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ДокументыДляПереносаЗначенийРесурсов.Регистратор.Метаданные(),
				ДокументыДляПереносаЗначенийРесурсов.Регистратор,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументыДляПереносаЗначенийРесурсов.Регистратор);
		НаборЗаписей.Прочитать();
		
		// Перерасчет движений.
		ЕстьИзмененияВНаборе = Ложь;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.КоличествоИзЗаказовСНеподтвержденными <> Запись.КоличествоИзЗаказов
				Или Запись.КоличествоПодЗаказСНеподтвержденными <> Запись.КоличествоПодЗаказ Тогда
				Запись.КоличествоИзЗаказовСНеподтвержденными = Запись.КоличествоИзЗаказов;
				Запись.КоличествоПодЗаказСНеподтвержденными  = Запись.КоличествоПодЗаказ;
				ЕстьИзмененияВНаборе = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Запись.
		Если ЕстьИзмененияВНаборе Тогда
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ДокументыДляПереносаЗначенийРесурсов.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					ДокументыДляПереносаЗначенийРесурсов.Регистратор.Метаданные(),
					ДокументыДляПереносаЗначенийРесурсов.Регистратор,
					ТекстСообщения);
				
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Если ОбработкаЗавершена Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоглашениеСПоставщиком.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.СоглашениеСПоставщиком КАК СоглашениеСПоставщиком";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			// Перерасчет движений
			НаборЗаписей = РегистрыНакопления.ДвижениеТоваров.РассчитатьИтогиРегистраОстаткиТоваровПоГрафикуДляОбновленияИБ(Выборка.Регистратор);
			
			// Запись.
			Если ЕстьИзмененияВНаборе(Выборка, НаборЗаписей) Тогда
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						Выборка.Регистратор.Метаданные(),
						Выборка.Регистратор,
						ТекстСообщения);
					
					ВызватьИсключение;
				КонецПопытки;
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция ЕстьИзмененияВНаборе(Выборка, НаборЗаписей)
	
	Таблица = НаборЗаписей.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.ДатаСобытия    КАК ДатаСобытия,
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.КоличествоИзЗаказов                   КАК КоличествоИзЗаказов,
		|	Таблица.КоличествоПодЗаказ                    КАК КоличествоПодЗаказ,
		|	Таблица.КоличествоИзЗаказовСНеподтвержденными КАК КоличествоИзЗаказовСНеподтвержденными,
		|	Таблица.КоличествоПодЗаказСНеподтвержденными  КАК КоличествоПодЗаказСНеподтвержденными
		|ПОМЕСТИТЬ ВтТаблицаИзменений
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|///////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Номенклатура   КАК Номенклатура,
		|		ТаблицаИзменений.Характеристика КАК Характеристика,
		|		ТаблицаИзменений.Склад          КАК Склад,
		|		ТаблицаИзменений.ДатаСобытия    КАК ДатаСобытия,
		|		ТаблицаИзменений.Назначение     КАК Назначение,
		|		ТаблицаИзменений.КоличествоИзЗаказов                   КАК КоличествоИзЗаказов,
		|		ТаблицаИзменений.КоличествоПодЗаказ                    КАК КоличествоПодЗаказ,
		|		ТаблицаИзменений.КоличествоИзЗаказовСНеподтвержденными КАК КоличествоИзЗаказовСНеподтвержденными,
		|		ТаблицаИзменений.КоличествоПодЗаказСНеподтвержденными  КАК КоличествоПодЗаказСНеподтвержденными
		|	ИЗ
		|		ВтТаблицаИзменений КАК ТаблицаИзменений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГрафикПоступленияТоваров.Номенклатура   КАК Номенклатура,
		|		ГрафикПоступленияТоваров.Характеристика КАК Характеристика,
		|		ГрафикПоступленияТоваров.Склад          КАК Склад,
		|		ГрафикПоступленияТоваров.ДатаСобытия    КАК ДатаСобытия,
		|		ГрафикПоступленияТоваров.Назначение     КАК Назначение,
		|		-ГрафикПоступленияТоваров.КоличествоИзЗаказов                   КАК КоличествоИзЗаказов,
		|		-ГрафикПоступленияТоваров.КоличествоПодЗаказ                    КАК КоличествоПодЗаказ,
		|		-ГрафикПоступленияТоваров.КоличествоИзЗаказовСНеподтвержденными КАК КоличествоИзЗаказовСНеподтвержденными,
		|		-ГрафикПоступленияТоваров.КоличествоПодЗаказСНеподтвержденными  КАК КоличествоПодЗаказСНеподтвержденными
		|	ИЗ
		|		РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступленияТоваров
		|	ГДЕ
		|		ГрафикПоступленияТоваров.Регистратор = &Регистратор) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.ДатаСобытия, Набор.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Набор.КоличествоИзЗаказов) <> 0 
		|	ИЛИ СУММА(Набор.КоличествоПодЗаказ) <> 0
		|	ИЛИ СУММА(Набор.КоличествоИзЗаказовСНеподтвержденными) <> 0
		|	ИЛИ СУММА(Набор.КоличествоПодЗаказСНеподтвержденными) <> 0";
		
	Запрос.УстановитьПараметр("Таблица",     НаборЗаписей.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
