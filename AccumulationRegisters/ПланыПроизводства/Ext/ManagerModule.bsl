#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Процедура выполняет фоновое проведение плана производства.
//
// Параметры:
//	Параметры - Структура - набор параметров для фонового проведения:
//		*КоличествоОшибок - Число - текущее количество ошибок.
//		*МаксимальноеКоличествоОшибок - Число - максимальноеколичество ошибок после которого проведение прервется.
//		*ДокументСсылка - Ссылка на документ
Процедура ВыполнитьПроведение(Параметры) Экспорт
	
	Если КоличествоОшибокПревысилоЛимит(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПланПроизводства = Параметры.ДокументСсылка;
	
	ПровестиДокумент(ПланПроизводства, Параметры);
	
	РассчитатьПотребности(ПланПроизводства, Параметры);
	
	ДопланироватьПолуфабрикаты(ПланПроизводства, Параметры);
	
	ВыполнитьЗамещениеПланов(ПланПроизводства, Параметры);
	
	Если ЕстьЗаданияВОчереди(ПланПроизводства) Тогда
		ВыполнитьПроведение(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет полный пересчет потребностей планов производства.
//
// Параметры:
//  Параметры - Структура - содержит следующие данные:
//		* Ссылки - Массив - ссылки на планы производства для обработки.
//  АдресХранилища - Строка - адрес хранилища, в которое может быть помещен результат работы процедуры.
//
Процедура ПересчитатьПотребностиПланов(Параметры, АдресХранилища) Экспорт
	
	Ссылки = Параметры.Ссылки;
	Сценарии = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "Сценарий");
	
	Для Каждого Ссылка Из Ссылки Цикл
		
		Сценарий = Сценарии.Получить(Ссылка);
		Документы.ПланПроизводства.ЗаписатьОчередьФоновогоПроведения(Ссылка, Сценарий, Истина);
		
		Параметры = Новый Структура("ДокументСсылка", Ссылка);
		ВыполнитьПроведение(Параметры);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФоновоеПроведение

#Область РасчетПотребностей

Процедура РассчитатьПотребности(ПланПроизводства, Параметры)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеПередРассчетомПлана(ПланПроизводства);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЕстьЗаписиВОчереди = ОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
		
		Если ЕстьЗаписиВОчереди Тогда
			
			ОбработатьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
		
			ОчиститьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Движения = ИнициализироватьТаблицыДвижений();
	
	Действия = ОпределитьДействияДляОбработки(МенеджерВременныхТаблиц);
	
	Если Действия.ПересчитатьПродукцию Тогда
		
		ПересчитатьПродукцию(МенеджерВременныхТаблиц, Движения);
		
	КонецЕсли;
	
	Если Действия.РазузловатьПродукцию Тогда
		
		РазузловатьПродукцию(ПланПроизводства, МенеджерВременныхТаблиц, Движения);
		
	КонецЕсли;
	
	ЗаписатьДвижения(Движения, ПланПроизводства, МенеджерВременныхТаблиц, Истина);
	
КонецПроцедуры

Функция ОпределитьДействияДляОбработки(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчета.ДатаВыпуска КАК ДатаВыпуска,
	|	ОчередьРасчета.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчета.Подразделение КАК Подразделение,
	|	ОчередьРасчета.Спецификация КАК Спецификация,
	|	ОчередьРасчета.Назначение КАК Назначение,
	|	ОчередьРасчета.Сценарий КАК Сценарий,
	|	ПланыПроизводства.Период КАК Период,
	|	ПланыПроизводства.Регистратор КАК Регистратор,
	|	ПланыПроизводства.Номенклатура КАК Номенклатура,
	|	ПланыПроизводства.Характеристика КАК Характеристика,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.Количество КАК Количество,
	|	ПланыПроизводства.ПовторноеРазузлование КАК ПовторноеРазузлование
	|ПОМЕСТИТЬ ВТПродукция
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ПО ОчередьРасчета.ДатаВыпуска = ПланыПроизводства.Период
	|			И ОчередьРасчета.ПланПроизводства = ПланыПроизводства.ПланПроизводства
	|			И ОчередьРасчета.Подразделение = ПланыПроизводства.Подразделение
	|			И ОчередьРасчета.Спецификация = ПланыПроизводства.Спецификация
	|			И ОчередьРасчета.Назначение = ПланыПроизводства.Назначение
	|			И ОчередьРасчета.Сценарий = ПланыПроизводства.Сценарий
	|ГДЕ
	|	ПланыПроизводства.Количество <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВыпуска,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПродукция.ДатаВыпуска КАК ДатаВыпуска,
	|	ВТПродукция.ПланПроизводства КАК ПланПроизводства,
	|	ВТПродукция.Подразделение КАК Подразделение,
	|	ВТПродукция.Спецификация КАК Спецификация,
	|	ВТПродукция.Назначение КАК Назначение,
	|	ВТПродукция.Сценарий КАК Сценарий,
	|	МИНИМУМ(ВТПродукция.ПовторноеРазузлование) КАК ПовторноеРазузлование
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПродукция.ДатаВыпуска,
	|	ВТПродукция.ПланПроизводства,
	|	ВТПродукция.Подразделение,
	|	ВТПродукция.Спецификация,
	|	ВТПродукция.Назначение,
	|	ВТПродукция.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВыпуска,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПродукция.ДатаВыпуска,
	|	ВТПродукция.ПланПроизводства,
	|	ВТПродукция.Подразделение,
	|	ВТПродукция.Спецификация,
	|	ВТПродукция.Назначение,
	|	ВТПродукция.Сценарий,
	|	ВТПродукция.Период,
	|	ВТПродукция.Регистратор,
	|	ВТПродукция.Номенклатура,
	|	ВТПродукция.Характеристика,
	|	ВТПродукция.ДатаВыпускаПолуфабриката,
	|	ВТПродукция.Количество,
	|	ВТИтоги.ПовторноеРазузлование
	|ПОМЕСТИТЬ ПродукцияПересчитать
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоги КАК ВТИтоги
	|		ПО ВТПродукция.ДатаВыпуска = ВТИтоги.ДатаВыпуска
	|			И ВТПродукция.ПланПроизводства = ВТИтоги.ПланПроизводства
	|			И ВТПродукция.Подразделение = ВТИтоги.Подразделение
	|			И ВТПродукция.Спецификация = ВТИтоги.Спецификация
	|			И ВТПродукция.Назначение = ВТИтоги.Назначение
	|			И ВТПродукция.Сценарий = ВТИтоги.Сценарий
	|ГДЕ
	|	ВТИтоги.ПовторноеРазузлование = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПродукция.ДатаВыпуска,
	|	ВТПродукция.ПланПроизводства,
	|	ВТПродукция.Подразделение,
	|	ВТПродукция.Спецификация,
	|	ВТПродукция.Назначение,
	|	ВТПродукция.Сценарий,
	|	ВТПродукция.Период,
	|	ВТПродукция.Регистратор,
	|	ВТПродукция.Номенклатура,
	|	ВТПродукция.Характеристика,
	|	ВТПродукция.ДатаВыпускаПолуфабриката,
	|	ВТПродукция.Количество,
	|	ВТИтоги.ПовторноеРазузлование
	|ПОМЕСТИТЬ ПродукцияРазузловать
	|ИЗ
	|	ВТПродукция КАК ВТПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоги КАК ВТИтоги
	|		ПО ВТПродукция.ДатаВыпуска = ВТИтоги.ДатаВыпуска
	|			И ВТПродукция.ПланПроизводства = ВТИтоги.ПланПроизводства
	|			И ВТПродукция.Подразделение = ВТИтоги.Подразделение
	|			И ВТПродукция.Спецификация = ВТИтоги.Спецификация
	|			И ВТПродукция.Назначение = ВТИтоги.Назначение
	|			И ВТПродукция.Сценарий = ВТИтоги.Сценарий
	|ГДЕ
	|	ВТИтоги.ПовторноеРазузлование = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИтоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродукцияПересчитать.ДатаВыпуска
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродукцияРазузловать.ДатаВыпуска
	|ИЗ
	|	ПродукцияРазузловать КАК ПродукцияРазузловать";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Действия = Новый Структура;
	
	Действия.Вставить("ПересчитатьПродукцию", НЕ МассивРезультатов[6].Пустой());
	Действия.Вставить("РазузловатьПродукцию", НЕ МассивРезультатов[7].Пустой());
	
	Возврат Действия;
	
КонецФункции

Функция ИнициализироватьТаблицыДвижений()
	
	Регистры = Новый Массив;
	Регистры.Добавить("ПланыПроизводства");
	Регистры.Добавить("ПланыПотребленияМатериалов");
	Регистры.Добавить("ПланыЗанятостиТрудовыхРесурсов");
	//++ НЕ УТКА
	Регистры.Добавить("ПланыЗанятостиВидовРабочихЦентров");
	//-- НЕ УТКА
	
	Результат = Новый Структура;
	
	Для каждого Регистр Из Регистры Цикл
		
		Набор = РегистрыНакопления[Регистр].СоздатьНаборЗаписей();
		
		Таблица = Набор.ВыгрузитьКолонки();
		
		Если Регистр = "ПланыПотребленияМатериалов" Тогда
			
			Таблица.Колонки.Добавить("Запланировать", Новый ОписаниеТипов("Булево"));
			
		КонецЕсли;
		
		Если Регистр = "ПланыПотребленияМатериалов"
			ИЛИ Регистр = "ПланыЗанятостиТрудовыхРесурсов"
			//++ НЕ УТКА
			ИЛИ Регистр = "ПланыЗанятостиВидовРабочихЦентров"
			//-- НЕ УТКА
			Тогда
			
			Таблица.Колонки.Добавить("ДнейДоОкончания", Новый ОписаниеТипов("Число"));
			
		КонецЕсли;
		
		Результат.Вставить(Регистр, Таблица);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проведение

Процедура ПровестиДокумент(ПланПроизводства, Параметры)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеПередПроведением(ПланПроизводства);
		
		Очередь = ОчередьПроведения(ПланПроизводства);
		
		Если Очередь.ЕстьЗаписиВОчереди Тогда
			
			ДокументОбъект = ПланПроизводства.ПолучитьОбъект();
			
			Если Очередь.ПересчитатьВсеПотребности Тогда
				
				ОчиститьДвижения(ДокументОбъект);
				
			КонецЕсли;
			
			СформироватьДвижения(ДокументОбъект);
			
			РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь.Записи, ПланПроизводства);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеПередПроведением(ПланПроизводства)
	
	Блокировка = Новый БлокировкаДанных();
	
	ДобавитьБлокировкуОчередьРасчета(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуДокументПланПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуРегистрПланыПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуПланыПотребленияМатериалов(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуПланыЗанятостиТрудовыхРесурсов(Блокировка, ПланПроизводства);
	
	//++ НЕ УТКА
	ДобавитьБлокировкуПланыЗанятостиВидовРабочихЦентров(Блокировка, ПланПроизводства);
	//-- НЕ УТКА
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ОчередьПроведения(ПланПроизводства)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
		|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
		|	ОчередьРасчетаПлановПроизводства.Проведение КАК Проведение,
		|	ОчередьРасчетаПлановПроизводства.Разделитель КАК Разделитель
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
		|	И ОчередьРасчетаПлановПроизводства.Проведение = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.ПересчитатьВсеПотребности) КАК ПересчитатьВсеПотребности
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
		|	И ОчередьРасчетаПлановПроизводства.Проведение = ИСТИНА");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("ЕстьЗаписиВОчереди, Записи, ПересчитатьВсеПотребности");
	
	Если НЕ МассивРезультатов[0].Пустой() Тогда
		
		Результат.ЕстьЗаписиВОчереди = Истина;
		Результат.Записи = МассивРезультатов[0].Выгрузить();
		
		Выборка = МассивРезультатов[1].Выбрать();
		Выборка.Следующий();
		
		Результат.ПересчитатьВсеПотребности = Выборка.ПересчитатьВсеПотребности;
		
	Иначе
		
		Результат.ЕстьЗаписиВОчереди = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НадоОбновитьСтатусПотребностей(ПланПроизводства, Статус)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыПотребленияМатериаловОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыПотребленияМатериаловОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыЗанятостиТрудовыхРесурсовОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыЗанятостиТрудовыхРесурсовОбороты
		//++ НЕ УТКА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланыЗанятостиВидовРабочихЦентровОбороты.ПланПроизводства
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров.Обороты(
		|			,
		|			,
		|			,
		|			ПланПроизводства = &ПланПроизводства
		|				И Статус <> &Статус) КАК ПланыЗанятостиВидовРабочихЦентровОбороты
		//-- НЕ УТКА
		|");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбновитьСтатусВДвиженияхПоПотребностям(ПланПроизводства, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаПотребностиСАктуальнымСтатусом());
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДвижений = Новый Соответствие;
	ДанныеДвижений.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[0].Выгрузить());
	ДанныеДвижений.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[1].Выгрузить());
	//++ НЕ УТКА
	ДанныеДвижений.Вставить("ПланыЗанятостиВидовРабочихЦентров", МассивРезультатов[2].Выгрузить());
	//-- НЕ УТКА
	
	Для каждого КлючИЗначение Из ДанныеДвижений Цикл
		
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			
			ДвиженияПоРегистру = Движения[КлючИЗначение.Ключ];
			ДвиженияПоРегистру.Записывать = Истина;
			ДвиженияПоРегистру.Загрузить(КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПотребностиСАктуальнымСтатусом()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыПотребленияМатериалов.ПланПроизводства.Статус КАК Статус,
	|	ПланыПотребленияМатериалов.*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|ГДЕ
	|	ПланыПотребленияМатериалов.Регистратор = &ПланПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства.Статус КАК Статус,
	|	ПланыЗанятостиТрудовыхРесурсов.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
	|ГДЕ
	|	ПланыЗанятостиТрудовыхРесурсов.Регистратор = &ПланПроизводства
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиВидовРабочихЦентров.ПланПроизводства.Статус КАК Статус,
	|	ПланыЗанятостиВидовРабочихЦентров.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК ПланыЗанятостиВидовРабочихЦентров
	|ГДЕ
	|	ПланыЗанятостиВидовРабочихЦентров.Регистратор = &ПланПроизводства
	//-- НЕ УТКА
	|";
	
КонецФункции

#КонецОбласти

#Область Пересчет

Процедура ПересчитатьПродукцию(МенеджерВременныхТаблиц, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаПересчетПродукции());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураРезультатов = Новый Структура;
	СтруктураРезультатов.Вставить("ПланыПроизводства", МассивРезультатов[4].Выбрать());
	СтруктураРезультатов.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[5].Выбрать());
	СтруктураРезультатов.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[6].Выбрать());
	//++ НЕ УТКА
	СтруктураРезультатов.Вставить("ПланыЗанятостиВидовРабочихЦентров", МассивРезультатов[7].Выбрать());
	//-- НЕ УТКА
	
	Для каждого КлючИЗначение Из СтруктураРезультатов Цикл
		
		Пока КлючИЗначение.Значение.Следующий() Цикл
			
			НоваяСтрока = Движения[КлючИЗначение.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
			НоваяСтрока.Активность = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПересчетПродукции()
	
	Возврат
	"ВЫБРАТЬ
	|	ПродукцияПересчитать.ДатаВыпуска,
	|	ПродукцияПересчитать.ПланПроизводства,
	|	ПродукцияПересчитать.Подразделение,
	|	ПродукцияПересчитать.Спецификация КАК Спецификация,
	|	ПродукцияПересчитать.Назначение,
	|	ПродукцияПересчитать.Сценарий,
	|	ПродукцияПересчитать.Номенклатура КАК Номенклатура,
	|	ПродукцияПересчитать.Характеристика КАК Характеристика,
	|	СУММА(ПродукцияПересчитать.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТИтогиПересчитать
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродукцияПересчитать.ДатаВыпуска,
	|	ПродукцияПересчитать.ПланПроизводства,
	|	ПродукцияПересчитать.Подразделение,
	|	ПродукцияПересчитать.Спецификация,
	|	ПродукцияПересчитать.Назначение,
	|	ПродукцияПересчитать.Сценарий,
	|	ПродукцияПересчитать.Номенклатура,
	|	ПродукцияПересчитать.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИтогиПересчитать.Спецификация,
	|	ВТИтогиПересчитать.Номенклатура,
	|	ВТИтогиПересчитать.Характеристика
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	ВТИтогиПересчитать КАК ВТИтогиПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЧеткаяХарактеристика > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоЧеткаяХарактеристика
	|		ИНАЧЕ ВложенныйЗапрос.КоличествоНеЧеткаяХарактеристика
	|	КОНЕЦ КАК КоличествоНаЕдиницуПартию
	|ПОМЕСТИТЬ ВТКоличествоНаЕдиницуПартию
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТНоменклатура.Спецификация КАК Спецификация,
	|		ВТНоменклатура.Номенклатура КАК Номенклатура,
	|		ВТНоменклатура.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ВТНоменклатура.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|					ТОГДА РесурсныеСпецификацииВыходныеИзделия.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоЧеткаяХарактеристика,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ВТНоменклатура.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|					ТОГДА 0
	|				ИНАЧЕ РесурсныеСпецификацииВыходныеИзделия.Количество
	|			КОНЕЦ) КАК КоличествоНеЧеткаяХарактеристика
	|	ИЗ
	|		ВТНоменклатура КАК ВТНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|			ПО ВТНоменклатура.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|				И ВТНоменклатура.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|				И (ВТНоменклатура.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|					ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТНоменклатура.Спецификация,
	|		ВТНоменклатура.Номенклатура,
	|		ВТНоменклатура.Характеристика) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтогиПересчитать.ДатаВыпуска КАК ДатаВыпуска,
	|	ВТИтогиПересчитать.ПланПроизводства КАК ПланПроизводства,
	|	ВТИтогиПересчитать.Подразделение КАК Подразделение,
	|	ВТИтогиПересчитать.Спецификация КАК Спецификация,
	|	ВТИтогиПересчитать.Назначение КАК Назначение,
	|	ВТИтогиПересчитать.Сценарий КАК Сценарий,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию = (ВЫРАЗИТЬ(ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию КАК ЧИСЛО(15, 0)))
	|				ТОГДА ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию
	|			ИНАЧЕ (ВЫРАЗИТЬ(ВТИтогиПересчитать.Количество / ВТПартии.КоличествоНаЕдиницуПартию - 0.5 КАК ЧИСЛО(15, 0))) + 1
	|		КОНЕЦ) КАК ЕдиницПартийИзделий
	|ПОМЕСТИТЬ ВТКоличествоПартий
	|ИЗ
	|	ВТИтогиПересчитать КАК ВТИтогиПересчитать
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоНаЕдиницуПартию КАК ВТПартии
	|		ПО ВТИтогиПересчитать.Спецификация = ВТПартии.Спецификация
	|			И ВТИтогиПересчитать.Номенклатура = ВТПартии.Номенклатура
	|			И ВТИтогиПересчитать.Характеристика = ВТПартии.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтогиПересчитать.ДатаВыпуска,
	|	ВТИтогиПересчитать.ПланПроизводства,
	|	ВТИтогиПересчитать.Подразделение,
	|	ВТИтогиПересчитать.Спецификация,
	|	ВТИтогиПересчитать.Назначение,
	|	ВТИтогиПересчитать.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВыпуска,
	|	ПланПроизводства,
	|	Подразделение,
	|	Спецификация,
	|	Назначение,
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродукцияПересчитать.*
	|ИЗ
	|	ПродукцияПересчитать КАК ПродукцияПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПотребленияМатериалов.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Количество,
	|	ПланыПотребленияМатериалов.*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыПотребленияМатериалов.ДатаВыпуска = ВТКоличествоПартий.ДатаВыпуска
	|			И ПланыПотребленияМатериалов.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыПотребленияМатериалов.ПодразделениеДиспетчер = ВТКоличествоПартий.Подразделение
	|			И ПланыПотребленияМатериалов.Спецификация = ВТКоличествоПартий.Спецификация
	|			И ПланыПотребленияМатериалов.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|			И ПланыПотребленияМатериалов.Сценарий = ВТКоличествоПартий.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиТрудовыхРесурсов.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Количество,
	|	ПланыЗанятостиТрудовыхРесурсов.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК ПланыЗанятостиТрудовыхРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыЗанятостиТрудовыхРесурсов.ДатаВыпуска = ВТКоличествоПартий.ДатаВыпуска
	|			И ПланыЗанятостиТрудовыхРесурсов.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыЗанятостиТрудовыхРесурсов.ПодразделениеДиспетчер = ВТКоличествоПартий.Подразделение
	|			И ПланыЗанятостиТрудовыхРесурсов.Спецификация = ВТКоличествоПартий.Спецификация
	|			И ПланыЗанятостиТрудовыхРесурсов.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|			И ПланыЗанятостиТрудовыхРесурсов.Сценарий = ВТКоличествоПартий.Сценарий
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыЗанятостиВидовРабочихЦентров.КоличествоНаЕдиницуПродукции * ВТКоличествоПартий.ЕдиницПартийИзделий КАК Занятость,
	|	ПланыЗанятостиВидовРабочихЦентров.*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК ПланыЗанятостиВидовРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПартий КАК ВТКоличествоПартий
	|		ПО ПланыЗанятостиВидовРабочихЦентров.ДатаВыпуска = ВТКоличествоПартий.ДатаВыпуска
	|			И ПланыЗанятостиВидовРабочихЦентров.ПланПроизводства = ВТКоличествоПартий.ПланПроизводства
	|			И ПланыЗанятостиВидовРабочихЦентров.ПодразделениеДиспетчер = ВТКоличествоПартий.Подразделение
	|			И ПланыЗанятостиВидовРабочихЦентров.Спецификация = ВТКоличествоПартий.Спецификация
	|			И ПланыЗанятостиВидовРабочихЦентров.НазначениеПродукции = ВТКоличествоПартий.Назначение
	|			И ПланыЗанятостиВидовРабочихЦентров.Сценарий = ВТКоличествоПартий.Сценарий
	//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|УНИЧТОЖИТЬ ВТИтогиПересчитать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоличествоНаЕдиницуПартию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоличествоПартий";
	
КонецФункции

#КонецОбласти

#Область Разузлование

Процедура РазузловатьПродукцию(ПланПроизводства, МенеджерВременныхТаблиц, Движения)
	
	Запрос = Новый Запрос(ТекстЗапросаОчередьРазузлованияПродукции());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Продукция = Запрос.Выполнить().Выгрузить();
	
	Измерения = Новый Структура("Назначение, Спецификация, Период, БольшеНуля");
	ЗаполнитьЗначенияСвойств(Измерения, Продукция[0]);
	
	ДанныеСпецификации = Неопределено;
	ПараметрыСпецификации = Неопределено;
	Строки = Новый Массив;
	
	Для каждого Строка Из Продукция Цикл
		
		ИзменилисьПараметрыСпецификации = Строка.Назначение <> Измерения.Назначение
			ИЛИ Строка.Спецификация <> Измерения.Спецификация;
			
		ИзменилисьПрочиеПараметры = Строка.Период <> Измерения.Период
			ИЛИ Строка.БольшеНуля <> Измерения.БольшеНуля;
			
		Если ИзменилисьПараметрыСпецификации ИЛИ ИзменилисьПрочиеПараметры Тогда
				
			РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Строки, Движения, Измерения.БольшеНуля);
			
			Если ИзменилисьПараметрыСпецификации Тогда
				
				ДанныеСпецификации = Неопределено;
				ПараметрыСпецификации = Неопределено;
				
			КонецЕсли;
			
			Строки.Очистить();
			ЗаполнитьЗначенияСвойств(Измерения, Строка);
			
		КонецЕсли;
		
		Строки.Добавить(Строка);
		
	КонецЦикла;
	
	РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Строки, Движения, Измерения.БольшеНуля);
	
	ЗаполнитьПериодВПланахПотребленияИЗанятости(Движения);
	
	ЗаполнитьСвойстваДопланируемыхПолуфабрикатов(ПланПроизводства, Движения.ПланыПотребленияМатериалов);
	
КонецПроцедуры

Процедура РазузловатьИДобавитьДвижения(ДанныеСпецификации, ПараметрыСпецификации, Изделия, Движения, БольшеНуля)
	
	РазузловатьПересчитатьСпецификацию(Изделия, ДанныеСпецификации, ПараметрыСпецификации);
	
	ДобавитьДвиженияВПланыПроизводства(Изделия, Движения, ПараметрыСпецификации);
	
	ЗначенияЗаполнения = ЗначенияЗаполненияРегистровПотребностей(Изделия, ПараметрыСпецификации);
	Знак = ?(БольшеНуля, 1, -1);
	
	Для каждого Данные Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		ЗначенияЗаполнения.НазначениеПродукции = Данные.Назначение;
		
		ДобавитьДвиженияВПланыПотребленияМатериалов(ЗначенияЗаполнения, Движения, Данные.МатериалыИУслуги, Знак);
		
		ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(ЗначенияЗаполнения, Движения, Данные.Трудозатраты, Знак);
		
		//++ НЕ УТКА
		ДобавитьДвиженияВПланыЗанятостиВидовРабочихЦентров(
			ЗначенияЗаполнения, Движения, Данные.ВидыРабочихЦентров, Данные.ЕдиницПартийИзделий, Знак);
		//-- НЕ УТКА
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОчередьРазузлованияПродукции()
	
	Возврат
	"ВЫБРАТЬ
	|	Продукция.*,
	|	ВЫРАЗИТЬ(Продукция.ПланПроизводства КАК Документ.ПланПроизводства).УправлениеПроизводством2_2 КАК УправлениеПроизводством2_2,
	|	ВЫБОР
	|		КОГДА Продукция.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БольшеНуля
	|ИЗ
	|	ПродукцияРазузловать КАК Продукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Назначение, Спецификация, Период, БольшеНуля";
	
КонецФункции

Процедура РазузловатьПересчитатьСпецификацию(Изделия, ДанныеСпецификации, ПараметрыСпецификации)
	
	Спецификация = Изделия[0].Спецификация;
	ДатаВыпуска = Изделия[0].ДатаВыпуска;
	
	Если ДанныеСпецификации = Неопределено
		ИЛИ (ПараметрыСпецификации <> Неопределено И ПараметрыСпецификации.НечеткиеХарактеристики)Тогда
		
		РазузловатьСпецификациюИзделий(Спецификация, Изделия, ДанныеСпецификации, ПараметрыСпецификации);
				
	Иначе
		
		ЕдиницПартийИзделий = ЕдиницПартийИзделийВКоллекции(Изделия, ПараметрыСпецификации);
		ИзменилосьКоличествоПартий = НЕ ЕдиницПартийИзделий = ПараметрыСпецификации.ЕдиницПартийИзделий;
		
		Если ИзменилосьКоличествоПартий Тогда
		
			Если ПараметрыСпецификации.ПовторноеРазузлование Тогда
				
				РазузловатьСпецификациюИзделий(Спецификация, Изделия, ДанныеСпецификации, ПараметрыСпецификации);
				
			Иначе
				
				ПересчитатьДанныеСпецификацииПоКоличествуПартий(ЕдиницПартийИзделий, ДанныеСпецификации, ПараметрыСпецификации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазузловатьСпецификациюИзделий(Спецификация, Изделия, ДанныеСпецификации, ПараметрыСпецификации)
	
	Потребности = ПотребностиДляПолученияДанныхСпецификаций(Изделия);
	
	УправлениеПроизводством2_2 = Изделия[0].УправлениеПроизводством2_2;
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ПолучитьДанныеСпецификацийИСгруппироватьПотребности(
		Потребности,
		Ложь,
		Истина,
		Новый МенеджерВременныхТаблиц,
		,
		УправлениеПроизводством2_2,
		Истина);
	
	Если НЕ ДанныеСпецификации.ЕстьОшибка Тогда
		
		ЗаполнитьПараметрыСпецификации(Спецификация, ДанныеСпецификации, ПараметрыСпецификации);
		
	Иначе
		
		ВызватьИсключение ДанныеСпецификации.ОшибкаТекст;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПотребностиДляПолученияДанныхСпецификаций(Изделия)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ПланПроизводства"));
	Результат.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ОТПолучатель = Новый ОписаниеТипов(ТипыПолучатель);
	Результат.Колонки.Добавить("Получатель", ОТПолучатель);
	
	Результат.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Результат.Колонки.Добавить("ПодразделениеДиспетчер", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДатаЗапуска", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаВыпуска", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмещениеВыпуска",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства"));
		
	ОТЭтап = Новый ОписаниеТипов("Неопределено");
	//++ НЕ УТКА
	ОТЭтап = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	Результат.Колонки.Добавить("ЭтапПотребитель", ОТЭтап);
	
	Результат.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	
	Для каждого Изделие Из Изделия Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
		
		НоваяСтрока.ПодразделениеДиспетчер = Изделие.Подразделение;
		НоваяСтрока.ДатаЗапуска = Изделие.ДатаВыпуска;
		НоваяСтрока.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
		НоваяСтрока.Обособленно = Истина;
		
		НоваяСтрока.Количество = ?(Изделие.Количество > 0, Изделие.Количество, -Изделие.Количество);
		
	КонецЦикла;
	
	Возврат Результат;
	
Конецфункции

Процедура ЗаполнитьПараметрыСпецификации(Спецификация, ДанныеСпецификации, ПараметрыСпецификации)
	
	ДанныеКорневыхСпецификаций = ДанныеКорневыхСпецификаций(Спецификация, ДанныеСпецификации);
	
	ЕдиницПартийИзделий = 0;
	НечеткиеХарактеристики = Ложь;
	
	Для каждого Данные Из ДанныеКорневыхСпецификаций Цикл
		
		ЕдиницПартийИзделий = ЕдиницПартийИзделий + Данные.ЕдиницПартийИзделий;
		
		Если НечеткиеХарактеристики = Ложь Тогда
			
			Для каждого Материал Из Данные.МатериалыИУслуги Цикл
			
				НечеткиеХарактеристики = Материал.ХарактеристикиИспользуются И Материал.ЛюбаяХарактеристика;
				Если НечеткиеХарактеристики Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПовторноеРазузлование = ПовторноеРазузлованиеСпецификации(ДанныеСпецификации, НечеткиеХарактеристики);
	
	Изделия = ИзделияСпецификаций(ДанныеКорневыхСпецификаций, ЕдиницПартийИзделий);
	
	ПараметрыСпецификации = Новый Структура;
	ПараметрыСпецификации.Вставить("ПовторноеРазузлование", ПовторноеРазузлование);
	ПараметрыСпецификации.Вставить("НечеткиеХарактеристики", НечеткиеХарактеристики);
	ПараметрыСпецификации.Вставить("ЕдиницПартийИзделий", ЕдиницПартийИзделий);
	ПараметрыСпецификации.Вставить("Изделия", Изделия);
	
	Если ДанныеКорневыхСпецификаций[0].ВыходныеИзделия.Количество() > 0 Тогда
		НоменклатураПродукции = ДанныеКорневыхСпецификаций[0].ВыходныеИзделия[0].Номенклатура;
		ХарактеристикаПродукции = ДанныеКорневыхСпецификаций[0].ВыходныеИзделия[0].Характеристика;
	Иначе
		НоменклатураПродукции = Неопределено;
		ХарактеристикаПродукции = Неопределено;
	КонецЕсли;
	
	ПараметрыСпецификации.Вставить("НоменклатураПродукции", НоменклатураПродукции);
	ПараметрыСпецификации.Вставить("ХарактеристикаПродукции", ХарактеристикаПродукции);
	
КонецПроцедуры

Функция ДанныеКорневыхСпецификаций(Спецификация, ДанныеСпецификации)
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		Если Элемент.Спецификация = Спецификация Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПовторноеРазузлованиеСпецификации(ДанныеСпецификации, НечеткиеХарактеристики)
	
	Если НечеткиеХарактеристики Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПовторноеРазузлование = Ложь;
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		СодержитРасчетноеКоличество = Ложь;
		Для каждого Материал Из Элемент.МатериалыИУслуги Цикл
			
			СодержитРасчетноеКоличество = ЗначениеЗаполнено(Материал.АлгоритмРасчетаКоличества);
			
			Если СодержитРасчетноеКоличество Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НекратныеНормативыВРЦ = Ложь;
		Для каждого Этап Из Элемент.Этапы Цикл
			
			НекратныеНормативыВРЦ = Этап.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий <> 1;
			
			Если НекратныеНормативыВРЦ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПовторноеРазузлование = Элемент.НекратныйВыпуск ИЛИ СодержитРасчетноеКоличество ИЛИ НекратныеНормативыВРЦ;
		
		Если ПовторноеРазузлование Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторноеРазузлование;
	
КонецФункции

Функция ИзделияСпецификаций(ДанныеСпецификаций, ЕдиницПартийИзделий)
	
	Результат = Неопределено;
	
	Для каждого Данные Из ДанныеСпецификаций Цикл
		
		Если Результат = Неопределено Тогда
			
			Результат = Данные.ВыходныеИзделия.Скопировать(, "Номенклатура, Характеристика, Количество");
				
		Иначе
			
			Для каждого Строка ИЗ Данные.ВыходныеИзделия Цикл
				
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка, "Номенклатура, Характеристика, Количество");
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика", "Количество");
	
	Результат.Колонки.Добавить("КоличествоНаЕдиницуИзделий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для каждого Строка Из Результат Цикл
		
		Строка.КоличествоНаЕдиницуИзделий = Строка.Количество/ЕдиницПартийИзделий;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницПартийИзделийВКоллекции(Изделия, ПараметрыСпецификации)
	
	Если Изделия.Количество() = 1 Тогда
		
		Результат = ЕдиницПартийПоПараметрамСпецификации(Изделия[0], ПараметрыСпецификации);
		
	Иначе
		
		ТаблицаИтоги = Новый ТаблицаЗначений;
		ТаблицаИтоги.Колонки.Добавить("Номенклатура");
		ТаблицаИтоги.Колонки.Добавить("Характеристика");
		ТаблицаИтоги.Колонки.Добавить("Количество");
		
		Для каждого Изделие Из Изделия Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаИтоги.Добавить(), Изделие);
		КонецЦикла;
		
		ТаблицаИтоги.Свернуть("Номенклатура, Характеристика", "Количество");
		
		Результат = 1;
		
		Для каждого Строка Из ТаблицаИтоги Цикл
			
			ЕдиницПартий = ЕдиницПартийПоПараметрамСпецификации(Строка, ПараметрыСпецификации);
			Результат = Макс(Результат, ЕдиницПартий);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницПартийПоПараметрамСпецификации(Потребность, ПараметрыСпецификации)
	
	СтрокаИзделия = ИзделиеПоПараметрамСпецификации(Потребность, ПараметрыСпецификации);
	
	Если СтрокаИзделия <> Неопределено Тогда
		
		Количество = МодульЧисла(Потребность.Количество);
		
		Результат = ?(
			Количество%СтрокаИзделия.КоличествоНаЕдиницуИзделий = 0,
			Количество/СтрокаИзделия.КоличествоНаЕдиницуИзделий,
			Цел(Количество/СтрокаИзделия.КоличествоНаЕдиницуИзделий) + 1);
		
	Иначе
		
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзделиеПоПараметрамСпецификации(Потребность, ПараметрыСпецификации)
	
	Результат = Неопределено;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
		Потребность.Номенклатура, Потребность.Характеристика);
	
	НайденныеСтроки = ПараметрыСпецификации.Изделия.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = НайденныеСтроки[0];
		
	ИначеЕсли ЗначениеЗаполнено(Потребность.Характеристика) Тогда
		
		СтруктураПоиска.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		НайденныеСтроки = ПараметрыСпецификации.Изделия.НайтиСтроки(СтруктураПоиска);
	
		Если НайденныеСтроки.Количество() > 0 Тогда
		    
			Результат = НайденныеСтроки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьДанныеСпецификацииПоКоличествуПартий(ЕдиницПартийИзделий, ДанныеСпецификации, ПараметрыСпецификации)
	
	ПартийБыло = ПараметрыСпецификации.ЕдиницПартийИзделий;
	
	Для каждого Элемент Из ДанныеСпецификации.ДанныеСпецификаций Цикл
		
		Для каждого Строка Из Элемент.МатериалыИУслуги Цикл
			Строка.Количество = Строка.Количество/ПартийБыло * ЕдиницПартийИзделий;
		КонецЦикла;
		
		Для каждого Строка Из Элемент.Трудозатраты Цикл
			Строка.Количество = Строка.Количество/ПартийБыло * ЕдиницПартийИзделий;
		КонецЦикла;
		
		Элемент.ЕдиницПартийИзделий = Элемент.ЕдиницПартийИзделий/ПартийБыло * ЕдиницПартийИзделий;
		
		// Таблицу с ВРЦ не надо пересчитывать, так как ее данные рассчитаны без учета
		// количества ед/партий изделий.
		
	КонецЦикла;
	
	ПараметрыСпецификации.ЕдиницПартийИзделий = ЕдиницПартийИзделий;
	
КонецПроцедуры

Процедура ДобавитьДвиженияВПланыПроизводства(Изделия, Движения, ПараметрыСпецификации)
	
	Для каждого Изделие Из Изделия Цикл
		
		НоваяСтрока = Движения.ПланыПроизводства.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСпецификации, "ПовторноеРазузлование");
		
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияЗаполненияРегистровПотребностей(Изделия, ПараметрыСпецификации)
	
	Результат = Новый Структура;
	
	ДанныеЗаполнения = Изделия[0];
	
	Результат.Вставить("ДатаВыпуска", ДанныеЗаполнения.ДатаВыпуска);
	Результат.Вставить("ПланПроизводства", ДанныеЗаполнения.ПланПроизводства);
	Результат.Вставить("Регистратор", ДанныеЗаполнения.Регистратор);
	Результат.Вставить("ПодразделениеДиспетчер", ДанныеЗаполнения.Подразделение);
	Результат.Вставить("Спецификация", ДанныеЗаполнения.Спецификация);
	Результат.Вставить("Сценарий", ДанныеЗаполнения.Сценарий);
	
	Результат.Вставить("ЕдиницПартийИзделий", ПараметрыСпецификации.ЕдиницПартийИзделий);
	Результат.Вставить("НоменклатураПродукции", ПараметрыСпецификации.НоменклатураПродукции);
	Результат.Вставить("ХарактеристикаПродукции", ПараметрыСпецификации.ХарактеристикаПродукции);
	
	Результат.Вставить("НазначениеПродукции");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДвиженияВПланыПотребленияМатериалов(ЗначенияЗаполнения, Движения, ТаблицаИсточник, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		Если ЗначениеЗаполнено(Строка.СпособПолученияПолуфабриката) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыПотребленияМатериалов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.Подразделение;
		НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.Количество/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
			НоваяСтрока.Назначение = ЗначенияЗаполнения.НазначениеПродукции;
		Иначе
			НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока.Количество = НоваяСтрока.Количество * Знак;
		
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(ЗначенияЗаполнения, Движения, ТаблицаИсточник, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		НоваяСтрока = Движения.ПланыЗанятостиТрудовыхРесурсов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.Подразделение;
		НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.Количество/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		
		НоваяСтрока.Количество = НоваяСтрока.Количество * Знак;
		
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ДобавитьДвиженияВПланыЗанятостиВидовРабочихЦентров(ЗначенияЗаполнения, Движения, ТаблицаИсточник, ПартийРазузлование, Знак)
	
	Для каждого Строка Из ТаблицаИсточник Цикл
		
		НоваяСтрока = Движения.ПланыЗанятостиВидовРабочихЦентров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		ОдновременноПроизводимое = ?(НоваяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий = 0,
			1, НоваяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
		Коэффициент = Цел(ПартийРазузлование / ОдновременноПроизводимое)
			+ ?(ПартийРазузлование % ОдновременноПроизводимое > 0, 1, 0);
		
		НоваяСтрока.Занятость = Строка.Занятость * Коэффициент;
		
		НоваяСтрока.КоличествоНаЕдиницуПродукции = НоваяСтрока.Занятость/ЗначенияЗаполнения.ЕдиницПартийИзделий;
		
		НоваяСтрока.Занятость = НоваяСтрока.Занятость * Знак;
		
		НоваяСтрока.Активность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ЗаполнитьСвойстваДопланируемыхПолуфабрикатов(ПланПроизводства, ПланыПотребленияМатериалов)
	
	РеквизитыПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПланПроизводства,
		"ВидПлана.ЗаполнятьСпецификациюПоПериодам, НачалоПериода");
	
	Запрос = Новый Запрос(ТекстЗапросаСвойстваПроизводимыхПолуфабрикатов());
	
	ПоляСвязей = "Сценарий, Номенклатура, Характеристика, ПодразделениеДиспетчер, Период";
	
	УсловиеПроизводимыеПФ = Новый Структура("Запланировать", Истина);
	ПроизводимыеПФ = ПланыПотребленияМатериалов.НайтиСтроки(УсловиеПроизводимыеПФ);
	ТаблицаНоменклатура = ПланыПотребленияМатериалов.Скопировать(ПроизводимыеПФ, ПоляСвязей);
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатура", ТаблицаНоменклатура);
	Запрос.УстановитьПараметр("ЗаполнятьСпецификациюПоПериодам", РеквизитыПлана.ВидПланаЗаполнятьСпецификациюПоПериодам);
	Запрос.УстановитьПараметр("НачалоПериода", РеквизитыПлана.НачалоПериода);
	
	СвойстваПроизводимыхПФ = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура(ПоляСвязей);
	
	Для каждого Строка Из ПроизводимыеПФ Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтроки = СвойстваПроизводимыхПФ.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(Строка, НайденныеСтроки[0], "ДатаВыпускаПолуфабриката, СпецификацияПолуфабриката");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаСвойстваПроизводимыхПолуфабрикатов()
	
	Возврат 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.Сценарий,
	|	ТаблицаНоменклатура.Номенклатура,
	|	ТаблицаНоменклатура.Характеристика,
	|	ТаблицаНоменклатура.ПодразделениеДиспетчер,
	|	ТаблицаНоменклатура.Период
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Сценарий,
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.Характеристика,
	|	ВТНоменклатура.ПодразделениеДиспетчер КАК Подразделение,
	|	ВТНоменклатура.Период,
	|	ВЫБОР
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, ДЕНЬ)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, НЕДЕЛЯ)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, ДЕКАДА)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, МЕСЯЦ)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, КВАРТАЛ)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, ПОЛУГОДИЕ)
	|		КОГДА СценарииТоварногоПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТНоменклатура.Период, ГОД)
	|	КОНЕЦ КАК ДатаВыпускаПолуфабриката
	|ПОМЕСТИТЬ ВТНоменклатураДаты
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииТоварногоПланирования
	|		ПО ВТНоменклатура.Сценарий = СценарииТоварногоПланирования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатураДаты.Сценарий,
	|	ВТНоменклатураДаты.Номенклатура,
	|	ВТНоменклатураДаты.Характеристика,
	|	ВТНоменклатураДаты.Подразделение,
	|	ВТНоменклатураДаты.Период,
	|	ВТНоменклатураДаты.ДатаВыпускаПолуфабриката,
	|	ВЫБОР
	|		КОГДА &ЗаполнятьСпецификациюПоПериодам
	|			ТОГДА ВТНоменклатураДаты.ДатаВыпускаПолуфабриката
	|		КОГДА ВТНоменклатураДаты.ДатаВыпускаПолуфабриката < &НачалоПериода
	|			ТОГДА ВТНоменклатураДаты.ДатаВыпускаПолуфабриката
	|		ИНАЧЕ &НачалоПериода
	|	КОНЕЦ КАК НачалоПроизводства
	|ПОМЕСТИТЬ ВТПотребностиПоПериодам
	|ИЗ
	|	ВТНоменклатураДаты КАК ВТНоменклатураДаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Подразделение,
	|	НачалоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ УправлениеДаннымиОбИзделиях.ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию("ВТПотребностиПоПериодам", Истина)
	+ "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПотребностиПоПериодам.Сценарий,
	|	ВТПотребностиПоПериодам.Номенклатура,
	|	ВТПотребностиПоПериодам.Характеристика,
	|	ВТПотребностиПоПериодам.Подразделение КАК ПодразделениеДиспетчер,
	|	ВТПотребностиПоПериодам.Период,
	|	ВТПотребностиПоПериодам.ДатаВыпускаПолуфабриката,
	|	Спецификации.Спецификация КАК СпецификацияПолуфабриката
	|ИЗ
	|	ВТПотребностиПоПериодам КАК ВТПотребностиПоПериодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпецификацииНоменклатурыПоУмолчанию КАК Спецификации
	|		ПО ВТПотребностиПоПериодам.Номенклатура = Спецификации.Номенклатура
	|			И ВТПотребностиПоПериодам.Характеристика = Спецификации.Характеристика
	|			И ВТПотребностиПоПериодам.Подразделение = Спецификации.Подразделение
	|			И ВТПотребностиПоПериодам.НачалоПроизводства = Спецификации.НачалоПроизводства
	|ГДЕ 
	|	Спецификации.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)";
	
КонецФункции

Процедура ЗаполнитьПериодВПланахПотребленияИЗанятости(Движения)
	
	Периоды = ПериодыПлановПотребленияИЗанятости(Движения);
	
	СтруктураПоиска = Новый Структура("ДатаВыпуска, ДнейДоОкончания");
	
	Для каждого КлючИЗначение Из Движения Цикл
		
		Если КлючИЗначение.Ключ = "ПланыПроизводства" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Строка Из КлючИЗначение.Значение Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка, "ДатаВыпуска, ДнейДоОкончания");
			
			НайденныеСтроки = Периоды.НайтиСтроки(СтруктураПоиска);
			
			Строка.Период = НайденныеСтроки[0].Период;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодыПлановПотребленияИЗанятости(Движения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Календарь КАК Календарь,
		|	СрокиВыпуска.ДатаВыпуска КАК ДатаОтсчета,
		|	СрокиВыпуска.ДнейДоОкончания КАК ЧислоДней
		|ПОМЕСТИТЬ ВтПараметрыПоиска
		|ИЗ
		|	&СрокиВыпуска КАК СрокиВыпуска
		|;
		|"
		+ ОбеспечениеСервер.ТекстЗапросаДатГрафика(, Ложь)
		+ "
		|ВЫБРАТЬ
		|	Т.ДатаОтсчета КАК ДатаВыпуска,
		|	Т.ЧислоДней КАК ДнейДоОкончания,
		|	ЕСТЬNULL(ДатыГрафика.Дата, ДОБАВИТЬКДАТЕ(Т.ДатаОтсчета, ДЕНЬ, -Т.ЧислоДней)) КАК Период
		|ИЗ
		|	ВтПараметрыПоиска КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ДатыГрафика
		|		ПО Т.ДатаОтсчета = ДатыГрафика.ДатаОтсчета
		|			И Т.ЧислоДней = ДатыГрафика.ЧислоДней");
	
	Запрос.УстановитьПараметр("СрокиВыпуска", СрокиВыпускаПлановПотребленияИЗанятости(Движения));
	Запрос.УстановитьПараметр("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ДатаВыпуска, ДнейДоОкончания");
	
	Возврат Результат;
	
КонецФункции

Функция СрокиВыпускаПлановПотребленияИЗанятости(Движения)
	
	Колонки = "ДатаВыпуска, ДнейДоОкончания";
	
	Результат = Движения.ПланыПотребленияМатериалов.Скопировать(, Колонки);
	
	Для каждого Строка Из Движения.ПланыЗанятостиТрудовыхРесурсов Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка, Колонки);
	КонецЦикла;
	
	//++ НЕ УТКА
	Для каждого Строка Из Движения.ПланыЗанятостиВидовРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка, Колонки);
	КонецЦикла;
	//-- НЕ УТКА
	
	Результат.Свернуть(Колонки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗамещениеПланов

Процедура ВыполнитьЗамещениеПланов(ПланПроизводства, Параметры)
	
	Очередь = ОчередьЗамещения(ПланПроизводства, Параметры);
	
	Если Очередь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Очередь Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных();
			ДобавитьБлокировкуРегистрПланыПроизводства(Блокировка, Строка.ПланПроизводстваПересчет);
			ДобавитьБлокировкуДокументПланПроизводства(Блокировка, Строка.ПланПроизводстваПересчет);
	    	Блокировка.Заблокировать();
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ПланПроизводстваПересчет, "Проведен") Тогда
				
				Сверка = СверитьДвиженияВПланахПроизводства(Строка.ПланПроизводстваПересчет);
				
				Если Сверка.ЕстьОтклонения Тогда
					
					УстановитьПривилегированныйРежим(Истина);
					
					Набор = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Строка.ПланПроизводстваПересчет);
					Набор.Загрузить(Сверка.АктуальныеДвижения);
					Набор.Записать();
					
					ОбновитьДвиженияОборотыБюджетов(Строка.ПланПроизводстваПересчет);
					
					ПараметрыПроведения = Новый Структура("ДокументСсылка", Строка.ПланПроизводстваПересчет);
					ВыполнитьПроведение(ПараметрыПроведения);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОчиститьОчередьЗамещения(Строка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
			
			ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОчередьЗамещения(ПланПроизводства, Параметры)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ДобавитьБлокировкуОчередьРасчета(Блокировка, ПланПроизводства);
	    Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводстваПересчет КАК ПланПроизводстваПересчет,
			|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель) КАК Разделитель
			|ИЗ
			|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
			|ГДЕ
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
			|	И ОчередьРасчетаПлановПроизводства.ПланПроизводстваПересчет <> ЗНАЧЕНИЕ(Документ.ПланПроизводства.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводства,
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводстваПересчет");
			
		Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат = Неопределено;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СверитьДвиженияВПланахПроизводства(ПланПроизводства)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АктуальныеДвижения.Период,
	|	АктуальныеДвижения.Сценарий,
	|	АктуальныеДвижения.Статус,
	|	АктуальныеДвижения.Номенклатура,
	|	АктуальныеДвижения.Характеристика,
	|	АктуальныеДвижения.Подразделение,
	|	АктуальныеДвижения.ПланПроизводства,
	|	АктуальныеДвижения.Спецификация,
	|	АктуальныеДвижения.Назначение,
	|	АктуальныеДвижения.ДатаВыпускаПолуфабриката,
	|	АктуальныеДвижения.Количество
	|ПОМЕСТИТЬ ВТАктуальныеДвижения
	|ИЗ
	|	&АктуальныеДвижения КАК АктуальныеДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.ПланПроизводства
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланыПроизводства.Период КАК Период,
	|		ПланыПроизводства.Сценарий КАК Сценарий,
	|		ПланыПроизводства.Статус КАК Статус,
	|		ПланыПроизводства.Номенклатура КАК Номенклатура,
	|		ПланыПроизводства.Характеристика КАК Характеристика,
	|		ПланыПроизводства.Подразделение КАК Подразделение,
	|		ПланыПроизводства.ПланПроизводства КАК ПланПроизводства,
	|		ПланыПроизводства.Спецификация КАК Спецификация,
	|		ПланыПроизводства.Назначение КАК Назначение,
	|		ПланыПроизводства.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|		-ПланыПроизводства.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|	ГДЕ
	|		ПланыПроизводства.Регистратор = &ПланПроизводства
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТАктуальныеДвижения.Период,
	|		ВТАктуальныеДвижения.Сценарий,
	|		ВТАктуальныеДвижения.Статус,
	|		ВТАктуальныеДвижения.Номенклатура,
	|		ВТАктуальныеДвижения.Характеристика,
	|		ВТАктуальныеДвижения.Подразделение,
	|		ВТАктуальныеДвижения.ПланПроизводства,
	|		ВТАктуальныеДвижения.Спецификация,
	|		ВТАктуальныеДвижения.Назначение,
	|		ВТАктуальныеДвижения.ДатаВыпускаПолуфабриката,
	|		ВТАктуальныеДвижения.Количество
	|	ИЗ
	|		ВТАктуальныеДвижения КАК ВТАктуальныеДвижения) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Сценарий,
	|	ВложенныйЗапрос.Статус,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.ПланПроизводства,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.ДатаВыпускаПолуфабриката
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) <> 0");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	АктуальныеДвижения = ДвиженияПланаПроизводстваПоРегистру(ПланПроизводства, "ПланыПроизводства");
	Запрос.УстановитьПараметр("АктуальныеДвижения", АктуальныеДвижения);
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОтклонения", НЕ Запрос.Выполнить().Пустой());
	Результат.Вставить("АктуальныеДвижения", АктуальныеДвижения);
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьОчередьЗамещения(ПараметрыОчереди)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРасчетаПланаПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПланаПроизводства.ПланПроизводстваПересчет КАК ПланПроизводстваПересчет,
	|	ОчередьРасчетаПланаПроизводства.Разделитель КАК Разделитель
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
	|ГДЕ
	|	ОчередьРасчетаПланаПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ОчередьРасчетаПланаПроизводства.ПланПроизводстваПересчет = &ПланПроизводстваПересчет
	|	И ОчередьРасчетаПланаПроизводства.Разделитель <= &Разделитель");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПараметрыОчереди.ПланПроизводства);
	Запрос.УстановитьПараметр("ПланПроизводстваПересчет", ПараметрыОчереди.ПланПроизводстваПересчет);
	Запрос.УстановитьПараметр("Разделитель", ПараметрыОчереди.Разделитель);
	
	Очередь = Запрос.Выполнить().Выгрузить();
	
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь, ПараметрыОчереди.ПланПроизводства);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДвижений

Процедура ЗаписатьДвижения(Движения, ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно)
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланПроизводства, "Статус");
	
	АктуальныеДвижения = АктуальныеДвиженияОчереди(ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно);
	
	ДокументОбъект = ПланПроизводства.ПолучитьОбъект();
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ПланПроизводства, ДополнительныеСвойства);
				
	Для каждого КлючИЗначение Из Движения Цикл
			
		ИмяРегистра = КлючИЗначение.Ключ;
		
		ДвиженияПоРегистру = ДокументОбъект.Движения[ИмяРегистра];
		
		ДвиженияПоРегистру.Загрузить(АктуальныеДвижения[ИмяРегистра]);
		
		Для каждого Строка Из КлючИЗначение.Значение Цикл
			
			Запись = ДвиженияПоРегистру.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Статус = Статус;
			
		КонецЦикла;
		
		ДвиженияПоРегистру.Записывать = Истина;
		
	КонецЦикла;
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Функция АктуальныеДвиженияОчереди(ПланПроизводства, МенеджерВременныхТаблиц, ИсключитьСторно)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.Период = ОчередьРасчета.ДатаВыпуска
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.Подразделение = ОчередьРасчета.Подразделение
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.Назначение = ОчередьРасчета.Назначение
	|			И Регистр.Сценарий = ОчередьРасчета.Сценарий
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаВыпуска = ОчередьРасчета.ДатаВыпуска
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.ПодразделениеДиспетчер = ОчередьРасчета.Подразделение
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|			И Регистр.Сценарий = ОчередьРасчета.Сценарий
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаВыпуска = ОчередьРасчета.ДатаВыпуска
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.ПодразделениеДиспетчер = ОчередьРасчета.Подразделение
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|			И Регистр.Сценарий = ОчередьРасчета.Сценарий
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр.ПланПроизводства.Статус КАК Статус,
	|	*
	|ИЗ
	|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК Регистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчета КАК ОчередьРасчета
	|		ПО Регистр.ДатаВыпуска = ОчередьРасчета.ДатаВыпуска
	|			И Регистр.ПланПроизводства = ОчередьРасчета.ПланПроизводства
	|			И Регистр.ПодразделениеДиспетчер = ОчередьРасчета.Подразделение
	|			И Регистр.Спецификация = ОчередьРасчета.Спецификация
	|			И Регистр.НазначениеПродукции = ОчередьРасчета.Назначение
	|			И Регистр.Сценарий = ОчередьРасчета.Сценарий
	|ГДЕ
	|	Регистр.Регистратор = &ПланПроизводства
	|	И ОчередьРасчета.Сценарий ЕСТЬ NULL
	|	И &УсловиеИсключитьСторно
	//-- НЕ УТКА
	|";
	
	Если ИсключитьСторно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИсключитьСторно", "Регистр.ПланПроизводства = &ПланПроизводства");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИсключитьСторно", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПланыПроизводства", МассивРезультатов[0].Выгрузить());
		
	Результат.Вставить("ПланыПотребленияМатериалов", МассивРезультатов[1].Выгрузить());
	
	Результат.Вставить("ПланыЗанятостиТрудовыхРесурсов", МассивРезультатов[2].Выгрузить());
	
	//++ НЕ УТКА
	Результат.Вставить("ПланыЗанятостиВидовРабочихЦентров", МассивРезультатов[3].Выгрузить());
	//-- НЕ УТКА
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДопланированиеПолуфабрикатов

Процедура ДопланироватьПолуфабрикаты(ПланПроизводства, Параметры)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеПередДопланированиемПолуфабрикатов(ПланПроизводства);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЕстьЗаписиВОчереди = ОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц);
		
		Если ЕстьЗаписиВОчереди Тогда
			
			Таблицы = ПолучитьТаблицыДляДопланирования(МенеджерВременныхТаблиц);
			
			Если Таблицы.Допланировать.Количество() > 0 Тогда
				
				Для каждого Строка Из Таблицы.Допланировать Цикл
					
					ДопланироватьПолуфабрикат(Строка, Таблицы);
					
				КонецЦикла;
				
				ЗаписатьДопланированныеПолуфабрикаты(ПланПроизводства, Таблицы.Результаты);
				
			КонецЕсли;
			
			ОчиститьОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.КоличествоОшибок = Параметры.КоличествоОшибок + 1;
		
		ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДопланироватьПолуфабрикат(Полуфабрикат, Таблицы)
	
	Если Полуфабрикат.КоличествоЗапланировано = 0 Тогда
		
		ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоТребуется);
		
	Иначе
		
		Если ЧислаОдногоЗнака(Полуфабрикат.КоличествоТребуется, Полуфабрикат.КоличествоЗапланировано) Тогда
			
			Если Полуфабрикат.КоличествоТребуется > Полуфабрикат.КоличествоЗапланировано Тогда
				
				Количество = МодульЧисла(Полуфабрикат.КоличествоТребуется) - МодульЧисла(Полуфабрикат.КоличествоЗапланировано);
				ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Количество);
				
			Иначе
				
				Количество = МодульЧисла(Полуфабрикат.КоличествоЗапланировано) - МодульЧисла(Полуфабрикат.КоличествоТребуется);
				УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Количество);
				
			КонецЕсли;
			
		Иначе
			
			УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоЗапланировано);
			ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, Полуфабрикат.КоличествоТребуется);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчетаПлановПроизводства.ДатаВыпуска КАК ДатаВыпуска,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация КАК Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Назначение КАК Назначение,
	|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаПлановПроизводства.Характеристика КАК Характеристика,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ ОчередьРасчетаПолуфабрикатов
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
	|ГДЕ
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаПлановПроизводства.ДатаВыпуска,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Назначение,
	|	ОчередьРасчетаПлановПроизводства.Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Номенклатура,
	|	ОчередьРасчетаПлановПроизводства.Характеристика,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов";
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьЗаписиВОчереди = НЕ МассивРезультатов[1].Пустой();
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Процедура ОчиститьОчередьПолуфабрикатов(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчетаПолуфабрикатов.ДатаВыпуска КАК ДатаВыпуска,
	|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПолуфабрикатов.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПолуфабрикатов.Спецификация КАК Спецификация,
	|	ОчередьРасчетаПолуфабрикатов.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПолуфабрикатов.Назначение КАК Назначение,
	|	ОчередьРасчетаПолуфабрикатов.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаПолуфабрикатов.Характеристика КАК Характеристика,
	|	ОчередьРасчетаПолуфабрикатов.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПланаПроизводства.Разделитель КАК Разделитель
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаВыпуска = ОчередьРасчетаПланаПроизводства.ДатаВыпуска
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ОчередьРасчетаПланаПроизводства.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ОчередьРасчетаПланаПроизводства.Подразделение
	|			И ОчередьРасчетаПолуфабрикатов.Спецификация = ОчередьРасчетаПланаПроизводства.Спецификация
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ОчередьРасчетаПланаПроизводства.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ОчередьРасчетаПланаПроизводства.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ОчередьРасчетаПланаПроизводства.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ОчередьРасчетаПланаПроизводства.Характеристика
	|			И ОчередьРасчетаПолуфабрикатов.ВыпускПолуфабрикатов = ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов
	|			И ОчередьРасчетаПолуфабрикатов.Разделитель >= ОчередьРасчетаПланаПроизводства.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОчередьРасчетаПолуфабрикатов");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Очередь = МассивРезультатов[0].Выгрузить();
	
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь, ПланПроизводства);
	
КонецПроцедуры

Функция ПолучитьТаблицыДляДопланирования(МенеджерВременныхТаблиц)
	
	Результат = Новый Структура;
	
	// Таблица Допланировать содержит ПФ, которые необходимо добавить в план или исключить из плана.
	Результат.Вставить("Допланировать", ПолуфбрикатыДляДопланирования(МенеджерВременныхТаблиц));
	
	Если Результат.Допланировать.Количество() > 0 Тогда
		
		ТаблицыСпецификаций = СпецификацииДляДопланирования(МенеджерВременныхТаблиц);
		
		// Таблица Спецификации содержит данные существующих планов в разрезе спецификаций.
		Результат.Вставить("Спецификации", ТаблицыСпецификаций.Спецификации);
		
		// Таблица НоменклатураСпецификаций детализирует таблицу Спецификации до Номенклатур/Характеристик.
		Результат.Вставить("НоменклатураСпецификаций", ТаблицыСпецификаций.НоменклатураСпецификаций);
		
		// Таблица ПланПолуфабрикатов используется для уменьшения плана выпуска ПФ и содержит
		// привязку потребностей к выпуску (т.е. полный набор измерений регистра ПланыПроизводства).
		Результат.Вставить("ПланПолуфабрикатов", ПланПолуфабрикатов(МенеджерВременныхТаблиц));
		
		// Таблица Результаты содержит результаты допланирования - изменения регистра ПланыПроизводства.
		Результат.Вставить("Результаты", ТаблицаДопланированияПолуфабрикатов());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолуфбрикатыДляДопланирования(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчетаПолуфабрикатов.ДатаВыпуска КАК ДатаВыпускаПолуфабриката,
	|	ОчередьРасчетаПолуфабрикатов.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПолуфабрикатов.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПолуфабрикатов.Спецификация КАК Спецификация,
	|	ОчередьРасчетаПолуфабрикатов.Назначение,
	|	ОчередьРасчетаПолуфабрикатов.Сценарий,
	|	ОчередьРасчетаПолуфабрикатов.Номенклатура,
	|	ОчередьРасчетаПолуфабрикатов.Характеристика,
	|	ЕСТЬNULL(ПланыПотребленияМатериаловОбороты.КоличествоОборот, 0) КАК КоличествоТребуется,
	|	ЕСТЬNULL(ПланыПроизводстваОбороты.КоличествоОборот, 0) КАК КоличествоЗапланировано
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов.Обороты(, , , ) КАК ПланыПотребленияМатериаловОбороты
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаВыпуска = ПланыПотребленияМатериаловОбороты.ДатаВыпускаПолуфабриката
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПотребленияМатериаловОбороты.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПотребленияМатериаловОбороты.ПодразделениеДиспетчер
	|			И ОчередьРасчетаПолуфабрикатов.Спецификация = ПланыПотребленияМатериаловОбороты.СпецификацияПолуфабриката
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПотребленияМатериаловОбороты.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПотребленияМатериаловОбороты.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПотребленияМатериаловОбороты.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПотребленияМатериаловОбороты.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства.Обороты(, , , ) КАК ПланыПроизводстваОбороты
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаВыпуска = ПланыПроизводстваОбороты.ДатаВыпускаПолуфабриката
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПроизводстваОбороты.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПроизводстваОбороты.Подразделение
	|			И ОчередьРасчетаПолуфабрикатов.Спецификация = ПланыПроизводстваОбороты.Спецификация
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПроизводстваОбороты.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПроизводстваОбороты.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПроизводстваОбороты.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПроизводстваОбороты.Характеристика
	|ГДЕ
	|	ЕСТЬNULL(ПланыПотребленияМатериаловОбороты.КоличествоОборот, 0) <> ЕСТЬNULL(ПланыПроизводстваОбороты.КоличествоОборот, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыпускаПолуфабриката";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СпецификацииДляДопланирования(МенеджерВременныхТаблиц)
	
	Спецификации = ИнициализироватьСпецификацииДляДопланирования();
	НоменклатураСпецификаций = ИнициализироватьНоменклатураСпецификацийДляДопланирования();
	
	Запрос = Новый Запрос(ТекстЗапросаСпецификацииДляДопланирования());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Разрезы = "ДатаВыпуска, Назначение, Спецификация";
	
	ЗапланированнаяНоменклатура = МассивРезультатов[3].Выгрузить();
	ЗапланированнаяНоменклатура.Индексы.Добавить(Разрезы);
	
	СтруктураПоиска = Новый Структура(Разрезы);
	
	ВыборкаДатаВыпуска = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДатаВыпуска.Следующий() Цикл
		
		ВыборкаНазначение = ВыборкаДатаВыпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНазначение.Следующий() Цикл
					
			ВыборкаСпецификация = ВыборкаНазначение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСпецификация.Следующий() Цикл
				
				НоваяСтрока = Спецификации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСпецификация);
				
				ИндексыНоменклатуры = Новый Массив;
				ЗаполнитьОбщиеСвойства = Истина;
				
				Выборка = ВыборкаСпецификация.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НоваяСтрокаНоменклатура = НоменклатураСпецификаций.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, Выборка);
					
					Если ЗаполнитьОбщиеСвойства Тогда
						ЗаполнитьОбщиеСвойства = Ложь;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "ПланПроизводства, Подразделение, Сценарий");
					КонецЕсли;
					
					ИндексыНоменклатуры.Добавить(НоменклатураСпецификаций.Индекс(НоваяСтрокаНоменклатура));
					
				КонецЦикла;
				
				НоваяСтрока.ИндексыНоменклатуры = ИндексыНоменклатуры;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСпецификация);
				НайденныеСтроки = ЗапланированнаяНоменклатура.НайтиСтроки(СтруктураПоиска);
				
				Для каждого Строка Из НайденныеСтроки Цикл
					
					СтрокаНоменклатуры = ПолучитьНоменклатуруСпецификации(
						Строка, НоменклатураСпецификаций, ИндексыНоменклатуры);
					
					Если НЕ СтрокаНоменклатуры = Неопределено Тогда
						
						СтрокаНоменклатуры.КоличествоЗапланировано = СтрокаНоменклатуры.КоличествоЗапланировано
							+ Строка.КоличествоЗапланировано;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПроизводствоСервер.ДобавитьВТаблицуПорядковыйНомерСтрок(Спецификации);
	
	Спецификации.Индексы.Добавить(ИзмеренияТаблицыСпецификацииДопланирование());
	
	Результат = Новый Структура;
	Результат.Вставить("Спецификации", Спецификации);
	Результат.Вставить("НоменклатураСпецификаций", НоменклатураСпецификаций);
	
	Возврат Результат;
	
КонецФункции

Функция ИзмеренияТаблицыСпецификацииДопланирование()
	
	Возврат "ПланПроизводства, Подразделение, Спецификация, Назначение, Сценарий";
	
КонецФункции

Функция ИнициализироватьСпецификацииДляДопланирования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ДатаВыпуска");
	Результат.Колонки.Добавить("ПланПроизводства");
	Результат.Колонки.Добавить("Подразделение");
	Результат.Колонки.Добавить("Спецификация");
	Результат.Колонки.Добавить("Назначение");
	Результат.Колонки.Добавить("Сценарий");
	Результат.Колонки.Добавить("ИндексыНоменклатуры");
	Результат.Колонки.Добавить("ОграниченСрокПролеживания");
	Результат.Колонки.Добавить("ГраницаСрокаПролеживания");
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьНоменклатураСпецификацийДляДопланирования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("КоличествоЗапланировано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("КоличествоОптимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСпецификацииДляДопланирования()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыПроизводства.Период КАК ДатаВыпуска,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Подразделение,
	|	ПланыПроизводства.Спецификация,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Сценарий,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика,
	|	СУММА(ПланыПроизводства.Количество) КАК КоличествоЗапланировано
	|ПОМЕСТИТЬ ВТПланы
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ПО ПланыПроизводства.ПланПроизводства = ОчередьРасчетаПолуфабрикатов.ПланПроизводства
	|			И ПланыПроизводства.Подразделение = ОчередьРасчетаПолуфабрикатов.Подразделение
	|			И ПланыПроизводства.Спецификация = ОчередьРасчетаПолуфабрикатов.Спецификация
	|			И ПланыПроизводства.Назначение = ОчередьРасчетаПолуфабрикатов.Назначение
	|			И ПланыПроизводства.Сценарий = ОчередьРасчетаПолуфабрикатов.Сценарий
	|ГДЕ
	|	ПланыПроизводства.Период >= &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПроизводства.Период,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Подразделение,
	|	ПланыПроизводства.Спецификация,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Сценарий,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПланы.ДатаВыпуска,
	|	ВТПланы.ПланПроизводства,
	|	ВТПланы.Подразделение,
	|	ВТПланы.Спецификация,
	|	ВТПланы.Назначение,
	|	ВТПланы.Сценарий
	|ПОМЕСТИТЬ ВТРазрезыПланов
	|ИЗ
	|	ВТПланы КАК ВТПланы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРазрезыПланов.ДатаВыпуска КАК ДатаВыпуска,
	|	ВТРазрезыПланов.ПланПроизводства КАК ПланПроизводства,
	|	ВТРазрезыПланов.Подразделение КАК Подразделение,
	|	ВТРазрезыПланов.Спецификация КАК Спецификация,
	|	ВТРазрезыПланов.Назначение КАК Назначение,
	|	ВТРазрезыПланов.Сценарий КАК Сценарий,
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество * РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальнаяПартияЗапуска КАК КоличествоОптимальнаяПартия,
	|	ДОБАВИТЬКДАТЕ(ВТРазрезыПланов.ДатаВыпуска, ДЕНЬ, РесурсныеСпецификацииВыходныеИзделия.Ссылка.МаксимальныйСрокПролеживанияВыходныхИзделий) КАК ГраницаСрокаПролеживания,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания
	|ИЗ
	|	ВТРазрезыПланов КАК ВТРазрезыПланов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТРазрезыПланов.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыпуска
	|ИТОГИ
	|	МАКСИМУМ(ГраницаСрокаПролеживания),
	|	МАКСИМУМ(ОграниченСрокПролеживания)
	|ПО
	|	ДатаВыпуска,
	|	Назначение,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПланы.ДатаВыпуска,
	|	ВТПланы.ПланПроизводства,
	|	ВТПланы.Подразделение,
	|	ВТПланы.Спецификация,
	|	ВТПланы.Назначение,
	|	ВТПланы.Сценарий,
	|	ВТПланы.Номенклатура,
	|	ВТПланы.Характеристика,
	|	ВТПланы.КоличествоЗапланировано
	|ИЗ
	|	ВТПланы КАК ВТПланы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПланы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазрезыПланов";
	
КонецФункции

Функция ТаблицаДопланированияПолуфабрикатов()
	
	Набор = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
	
	Возврат Набор.Выгрузить();
	
КонецФункции

Функция ПланПолуфабрикатов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(ТекстЗапросаВыпускПолуфабрикатовДляДопланирвания());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПроизводствоСервер.ДобавитьВТаблицуПорядковыйНомерСтрок(Результат);
	
	Результат.Индексы.Добавить(ИзмеренияТаблицыПланПолуфабрикатовДопланирование());
	
	Возврат Результат;
	
КонецФункции

Функция ИзмеренияТаблицыПланПолуфабрикатовДопланирование()
	
	Возврат "ДатаВыпускаПолуфабриката, ПланПроизводства, Подразделение, Спецификация, Назначение, Сценарий, Номенклатура, Характеристика";
	
КонецФункции

Функция ТекстЗапросаВыпускПолуфабрикатовДляДопланирвания()
	
	Возврат
	"ВЫБРАТЬ
	|	ПланыПроизводства.Период КАК ДатаВыпуска,
	|	ПланыПроизводства.Сценарий,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика,
	|	ПланыПроизводства.Подразделение,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Спецификация,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Количество
	|ИЗ
	|	ОчередьРасчетаПолуфабрикатов КАК ОчередьРасчетаПолуфабрикатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ПО ОчередьРасчетаПолуфабрикатов.ДатаВыпуска = ПланыПроизводства.ДатаВыпускаПолуфабриката
	|			И ОчередьРасчетаПолуфабрикатов.ПланПроизводства = ПланыПроизводства.ПланПроизводства
	|			И ОчередьРасчетаПолуфабрикатов.Подразделение = ПланыПроизводства.Подразделение
	|			И ОчередьРасчетаПолуфабрикатов.Спецификация = ПланыПроизводства.Спецификация
	|			И ОчередьРасчетаПолуфабрикатов.Назначение = ПланыПроизводства.Назначение
	|			И ОчередьРасчетаПолуфабрикатов.Сценарий = ПланыПроизводства.Сценарий
	|			И ОчередьРасчетаПолуфабрикатов.Номенклатура = ПланыПроизводства.Номенклатура
	|			И ОчередьРасчетаПолуфабрикатов.Характеристика = ПланыПроизводства.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
КонецФункции

Функция ПолучитьНоменклатуруСпецификации(ЗначенияПоиска, НоменклатураСпецификаций, Индексы)
	
	Результат = Неопределено;
	
	// Поиск по соответствию Номенклатура-Характеристика
	Для каждого Индекс Из Индексы Цикл
		
		Строка = НоменклатураСпецификаций[Индекс];
		
		Если Строка.Номенклатура = ЗначенияПоиска.Номенклатура
			И Строка.Характеристика = ЗначенияПоиска.Характеристика Тогда
			
			Результат = Строка;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Поиск по соответствию Номенклатура-Пустая характеристика
	Если Результат = Неопределено
		И ЗначениеЗаполнено(ЗначенияПоиска.Характеристика) Тогда
		
		Для каждого Индекс Из Индексы Цикл
		
			Строка = НоменклатураСпецификаций[Индекс];
			
			Если Строка.Номенклатура = ЗначенияПоиска.Номенклатура
				И Строка.Характеристика.Пустая() Тогда
			
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВыпускПолуфабриката(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	ДобавитьПолуфабрикатВСуществующиеВыпуски(Полуфабрикат, Таблицы, КоличествоОстаток);
	
	Если КоличествоОстаток <> 0 Тогда
		
		ДобавитьПолуфабрикатВНовыйВыпуск(Полуфабрикат, Таблицы, КоличествоОстаток);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолуфабрикатВСуществующиеВыпуски(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	СтруктураПоиска = Новый Структура(ИзмеренияТаблицыСпецификацииДопланирование());
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Полуфабрикат);
	
	НайденныеСтроки = ПроизводствоСервер.НайтиСтрокиССохранениемПорядка(
		Таблицы.Спецификации, СтруктураПоиска, Истина);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		ИначеЕсли (
					// Не соблюдено ограничение на срок пролеживания.
					Строка.ОграниченСрокПролеживания
					И Строка.ГраницаСрокаПролеживания < Полуфабрикат.ДатаВыпускаПолуфабриката
					)
			ИЛИ Строка.ДатаВыпуска > Полуфабрикат.ДатаВыпускаПолуфабриката Тогда
			
			Продолжить; 
			
		КонецЕсли;
		
		Номенклатура = ПолучитьНоменклатуруСпецификации(
			Полуфабрикат, Таблицы.НоменклатураСпецификаций, Строка.ИндексыНоменклатуры);
		
		Если НЕ Номенклатура = Неопределено Тогда
			
			Если Номенклатура.КоличествоЗапланировано <> 0 
				И НЕ ЧислаОдногоЗнака(КоличествоОстаток, Номенклатура.КоличествоЗапланировано) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗнакЧисла = ЗнакЧисла(КоличествоОстаток);
			
			Если ЗначениеЗаполнено(Номенклатура.КоличествоОптимальнаяПартия) Тогда
				
				// Ограничение на оптимальную партию.
				ДоступныйОстаток = ЗнакЧисла
					* (
						Номенклатура.КоличествоОптимальнаяПартия
						- МИН(МодульЧисла(Номенклатура.КоличествоЗапланировано),Номенклатура.КоличествоОптимальнаяПартия)
						);
				
			Иначе
				
				ДоступныйОстаток = КоличествоОстаток;
				
			КонецЕсли;
			
			Если ДоступныйОстаток <> 0 Тогда
				
				КоличествоЗачет = ?(ЗнакЧисла = 1,
					МИН(КоличествоОстаток, ДоступныйОстаток),
					МАКС(КоличествоОстаток, ДоступныйОстаток));
				
				ДобавитьРезультатДопланирования(Таблицы, Строка, Полуфабрикат, Строка.ДатаВыпуска, КоличествоЗачет);
				
				Номенклатура.КоличествоЗапланировано = Номенклатура.КоличествоЗапланировано + КоличествоЗачет;
				
				КоличествоОстаток = КоличествоОстаток - КоличествоЗачет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолуфабрикатВНовыйВыпуск(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	ДатаВыпуска = Полуфабрикат.ДатаВыпускаПолуфабриката;
	
	ДобавитьРезультатДопланирования(
		Таблицы, Полуфабрикат, Полуфабрикат, ДатаВыпуска, КоличествоОстаток);
	
	// Добавление новых данных в таблицы Спецификации и НоменклатураСпецификаций
	
	Запрос = Новый Запрос(ТекстЗапросаИзделияСпецификации());
	
	Запрос.УстановитьПараметр("Спецификация", Полуфабрикат.Спецификация);
	Запрос.УстановитьПараметр("ДатаВыпуска", ДатаВыпуска);
	
	ВыборкаСпецификация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСпецификация.Следующий();
	
	НоваяСтрока = Таблицы.Спецификации.Добавить();
	
	ПроизводствоСервер.ЗаполнитьПорядковыйНомерВНовойСтроке(Таблицы.Спецификации, НоваяСтрока);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Полуфабрикат);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСпецификация, "ОграниченСрокПролеживания, ГраницаСрокаПролеживания");
	
	НоваяСтрока.ДатаВыпуска = ДатаВыпуска;
	
	Выборка = ВыборкаСпецификация.Выбрать();
	ИндексыНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаНоменклатура = Таблицы.НоменклатураСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, Выборка);
		
		ИндексыНоменклатуры.Добавить(Таблицы.НоменклатураСпецификаций.Индекс(НоваяСтрокаНоменклатура));
		
	КонецЦикла;
	
	НоваяСтрока.ИндексыНоменклатуры = ИндексыНоменклатуры;
	
	СтрокаНоменклатуры = ПолучитьНоменклатуруСпецификации(
		Полуфабрикат, Таблицы.НоменклатураСпецификаций, ИндексыНоменклатуры);
							
	Если НЕ СтрокаНоменклатуры = Неопределено Тогда
							
		СтрокаНоменклатуры.КоличествоЗапланировано = КоличествоОстаток;
									
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаИзделияСпецификации()
	
	Возврат
	"ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка,
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживания,
	|	ДОБАВИТЬКДАТЕ(&ДатаВыпуска, ДЕНЬ, РесурсныеСпецификацииВыходныеИзделия.Ссылка.МаксимальныйСрокПролеживанияВыходныхИзделий) КАК ГраницаСрокаПролеживания,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество * РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальнаяПартияЗапуска КАК КоличествоОптимальнаяПартия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Спецификация
	|ИТОГИ
	|	МАКСИМУМ(ОграниченСрокПролеживания),
	|	МАКСИМУМ(ГраницаСрокаПролеживания)
	|ПО
	|	Ссылка";
	
КонецФункции

Процедура УдалитьВыпускПолуфабриката(Полуфабрикат, Таблицы, КоличествоОстаток)
	
	СтруктураПоиска = Новый Структура(ИзмеренияТаблицыПланПолуфабрикатовДопланирование());
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Полуфабрикат);
	
	НайденныеСтроки = ПроизводствоСервер.НайтиСтрокиССохранениемПорядка(
		Таблицы.ПланПолуфабрикатов, СтруктураПоиска, Истина);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоЗачет = ?(ЗнакЧисла(КоличествоОстаток) = 1,
			МИН(КоличествоОстаток, Строка.Количество),
			МАКС(КоличествоОстаток, Строка.Количество));
		
		Строка.Количество = Строка.Количество - КоличествоЗачет;
		КоличествоОстаток = КоличествоОстаток - КоличествоЗачет;
		
		ДобавитьРезультатДопланирования(Таблицы, Строка, Полуфабрикат, Строка.ДатаВыпуска, -КоличествоЗачет);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРезультатДопланирования(Таблицы, ЗначенияЗаполнения, Полуфабрикат, ДатаВыпуска, Количество)
	
	НоваяСтрока = Таблицы.Результаты.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
	
	ЗаполнитьЗначенияСвойств(
		НоваяСтрока,
		Полуфабрикат,
		"ДатаВыпускаПолуфабриката, Номенклатура, Характеристика");
	
	НоваяСтрока.Период = ДатаВыпуска;
	НоваяСтрока.Количество = Количество;
	
КонецПроцедуры

Процедура ЗаписатьДопланированныеПолуфабрикаты(ПланПроизводства, Полуфабрикаты)
	
	СвернутьТаблицуПолуфабрикатов(Полуфабрикаты);
	
	Запрос = Новый Запрос(ТекстЗапросаЗаписьДопланированныхПолуфабрикатов());
	
	Запрос.УстановитьПараметр("Полуфабрикаты", Полуфабрикаты);
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ПланПроизводства);
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
	ОбновитьДвиженияОборотыБюджетов(ПланПроизводства);
	
КонецПроцедуры

Процедура СвернутьТаблицуПолуфабрикатов(Полуфабрикаты)
	
	Колонки = "";
	
	Для каждого Колонка Из Полуфабрикаты.Колонки Цикл
		
		Если Колонка.Имя = "Количество" Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки = Колонки + ?(ЗначениеЗаполнено(Колонки), ",", "") + Колонка.Имя;
		
	КонецЦикла;
	
	Полуфабрикаты.Свернуть(Колонки, "Количество");
	
КонецПроцедуры

Функция ТекстЗапросаЗаписьДопланированныхПолуфабрикатов()
	
	Возврат 
	"ВЫБРАТЬ
	|	Полуфабрикаты.Период,
	|	Полуфабрикаты.Сценарий,
	|	Полуфабрикаты.Назначение,
	|	Полуфабрикаты.Номенклатура,
	|	Полуфабрикаты.Характеристика,
	|	Полуфабрикаты.Подразделение,
	|	ВЫРАЗИТЬ(Полуфабрикаты.ПланПроизводства КАК Документ.ПланПроизводства) КАК ПланПроизводства,
	|	Полуфабрикаты.Спецификация,
	|	Полуфабрикаты.ДатаВыпускаПолуфабриката,
	|	Полуфабрикаты.Количество
	|ПОМЕСТИТЬ ВТПолуфабрикаты
	|ИЗ
	|	&Полуфабрикаты КАК Полуфабрикаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПроизводства.Период,
	|	ПланыПроизводства.Регистратор,
	|	ПланыПроизводства.Сценарий,
	|	ПланыПроизводства.Статус,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика,
	|	ПланыПроизводства.Подразделение,
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.Спецификация,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.Количество,
	|	ПланыПроизводства.Количество,
	|	ПланыПроизводства.ПовторноеРазузлование
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|ГДЕ
	|	ПланыПроизводства.Регистратор = &ПланПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижения.Период,
	|	ВТДвижения.Регистратор,
	|	ВТДвижения.Сценарий,
	|	ВТДвижения.Статус,
	|	ВТДвижения.Назначение,
	|	ВТДвижения.Номенклатура,
	|	ВТДвижения.Характеристика,
	|	ВТДвижения.Подразделение,
	|	ВТДвижения.ПланПроизводства,
	|	ВТДвижения.Спецификация,
	|	ВТДвижения.ДатаВыпускаПолуфабриката,
	|	ВТДвижения.Количество + ЕСТЬNULL(ВТПолуфабрикаты.Количество, 0) КАК Количество,
	|	ВТДвижения.ПовторноеРазузлование
	|ИЗ
	|	ВТДвижения КАК ВТДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолуфабрикаты КАК ВТПолуфабрикаты
	|		ПО ВТДвижения.Период = ВТПолуфабрикаты.Период
	|			И ВТДвижения.Сценарий = ВТПолуфабрикаты.Сценарий
	|			И ВТДвижения.Назначение = ВТПолуфабрикаты.Назначение
	|			И ВТДвижения.Номенклатура = ВТПолуфабрикаты.Номенклатура
	|			И ВТДвижения.Характеристика = ВТПолуфабрикаты.Характеристика
	|			И ВТДвижения.Подразделение = ВТПолуфабрикаты.Подразделение
	|			И ВТДвижения.ПланПроизводства = ВТПолуфабрикаты.ПланПроизводства
	|			И ВТДвижения.Спецификация = ВТПолуфабрикаты.Спецификация
	|			И ВТДвижения.ДатаВыпускаПолуфабриката = ВТПолуфабрикаты.ДатаВыпускаПолуфабриката
	|ГДЕ
	|	ВТДвижения.Количество + ЕСТЬNULL(ВТПолуфабрикаты.Количество, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПолуфабрикаты.Период,
	|	ВТПолуфабрикаты.ПланПроизводства,
	|	ВТПолуфабрикаты.Сценарий,
	|	ВТПолуфабрикаты.ПланПроизводства.Статус,
	|	ВТПолуфабрикаты.Назначение,
	|	ВТПолуфабрикаты.Номенклатура,
	|	ВТПолуфабрикаты.Характеристика,
	|	ВТПолуфабрикаты.Подразделение,
	|	ВТПолуфабрикаты.ПланПроизводства,
	|	ВТПолуфабрикаты.Спецификация,
	|	ВТПолуфабрикаты.ДатаВыпускаПолуфабриката,
	|	ВТПолуфабрикаты.Количество,
	|	ИСТИНА
	|ИЗ
	|	ВТПолуфабрикаты КАК ВТПолуфабрикаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК ВТДвижения
	|		ПО ВТПолуфабрикаты.Период = ВТДвижения.Период
	|			И ВТПолуфабрикаты.Сценарий = ВТДвижения.Сценарий
	|			И ВТПолуфабрикаты.Назначение = ВТДвижения.Назначение
	|			И ВТПолуфабрикаты.Номенклатура = ВТДвижения.Номенклатура
	|			И ВТПолуфабрикаты.Характеристика = ВТДвижения.Характеристика
	|			И ВТПолуфабрикаты.Подразделение = ВТДвижения.Подразделение
	|			И ВТПолуфабрикаты.ПланПроизводства = ВТДвижения.ПланПроизводства
	|			И ВТПолуфабрикаты.Спецификация = ВТДвижения.Спецификация
	|			И ВТПолуфабрикаты.ДатаВыпускаПолуфабриката = ВТДвижения.ДатаВыпускаПолуфабриката
	|ГДЕ
	|	ВТДвижения.Период ЕСТЬ NULL";
	
КонецФункции

#КонецОбласти

#Область РаботаСДвижениями

Процедура ОчиститьДвижения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьДвижения(ДокументОбъект)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовый",    Ложь);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства);
	
	Документы.ПланПроизводства.ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	Планирование.ОтразитьПланПроизводства(ДополнительныеСвойства, ДокументОбъект.Движения, Ложь);
	
	РегистрыНакопления.ОборотыБюджетов.ОтразитьДвижения(ДополнительныеСвойства, ДокументОбъект.Движения, Ложь);
	
	Если НадоОбновитьСтатусПотребностей(ДокументСсылка, ДокументОбъект.Статус) Тогда
		
		ОбновитьСтатусВДвиженияхПоПотребностям(ДокументСсылка, ДокументОбъект.Движения);
		
	КонецЕсли;
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ДокументОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
			
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаблокироватьДанныеПередРассчетомПлана(ПланПроизводства)
	
	Блокировка = Новый БлокировкаДанных();
	
	ДобавитьБлокировкуОчередьРасчета(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуДокументПланПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуРегистрПланыПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуПланыПотребленияМатериалов(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуПланыЗанятостиТрудовыхРесурсов(Блокировка, ПланПроизводства);
		
	//++ НЕ УТКА
	ДобавитьБлокировкуПланыЗанятостиВидовРабочихЦентров(Блокировка, ПланПроизводства);
	//-- НЕ УТКА
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеПередДопланированиемПолуфабрикатов(ПланПроизводства)
	
	Блокировка = Новый БлокировкаДанных();
	
	ДобавитьБлокировкуОчередьРасчета(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуДокументПланПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуРегистрПланыПроизводства(Блокировка, ПланПроизводства);
	
	ДобавитьБлокировкуПланыПотребленияМатериалов(Блокировка, ПланПроизводства);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ДобавитьБлокировкуОчередьРасчета(Блокировка, ПланПроизводства)

	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаПланаПроизводства");
	ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

Процедура ДобавитьБлокировкуРегистрПланыПроизводства(Блокировка, ПланПроизводства)
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПроизводства");
	ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

Процедура ДобавитьБлокировкуПланыПотребленияМатериалов(Блокировка, ПланПроизводства)
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПотребленияМатериалов.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

Процедура ДобавитьБлокировкуПланыЗанятостиТрудовыхРесурсов(Блокировка, ПланПроизводства)

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ДобавитьБлокировкуПланыЗанятостиВидовРабочихЦентров(Блокировка, ПланПроизводства)

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ДобавитьБлокировкуДокументПланПроизводства(Блокировка, ПланПроизводства)
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПланПроизводства");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПланПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
КонецПроцедуры

Функция КоличествоОшибокПревысилоЛимит(Параметры)
	
	Результат = Ложь;
	
	Если Параметры.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		Если Параметры.Свойство("МаксимальноеКоличествоОшибок") Тогда
			МаксимальноеКоличествоОшибок = Параметры.МаксимальноеКоличествоОшибок;
		КонецЕсли;
		
		Если Параметры.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			Результат = Истина;
			
			ТекстСообщения = НСтр("ru = 'Проведение документа: %Ссылка% остановлено. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Параметры.ДокументСсылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", Параметры.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОшибкаРасчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Параметры.ДокументСсылка.Метаданные(),
				Параметры.ДокументСсылка,
				ТекстСообщения);
			
			РегистрыСведений.ОчередьРасчетаПланаПроизводства.ЗаписатьЕстьОшибкиРасчета(Параметры.ДокументСсылка);
			
		КонецЕсли;
		
	Иначе
		
		Параметры.Вставить("КоличествоОшибок", 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьРасчетаПлановПроизводства.ДатаВыпуска КАК ДатаВыпуска,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение КАК Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация КАК Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Сценарий КАК Сценарий,
	|	ОчередьРасчетаПлановПроизводства.Назначение КАК Назначение,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель) КАК Разделитель
	|ПОМЕСТИТЬ ОчередьРасчета
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
	|ГДЕ
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов = ЛОЖЬ
	|	И ОчередьРасчетаПлановПроизводства.Проведение = ЛОЖЬ
	|	И ОчередьРасчетаПлановПроизводства.ПланПроизводстваПересчет = ЗНАЧЕНИЕ(Документ.ПланПроизводства.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаПлановПроизводства.ДатаВыпуска,
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства,
	|	ОчередьРасчетаПлановПроизводства.Подразделение,
	|	ОчередьРасчетаПлановПроизводства.Спецификация,
	|	ОчередьРасчетаПлановПроизводства.Назначение,
	|	ОчередьРасчетаПлановПроизводства.ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПлановПроизводства.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРасчета.ПланПроизводства
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета";
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьЗаписиВОчереди = НЕ МассивРезультатов[1].Пустой();
	
	Возврат ЕстьЗаписиВОчереди;
	
КонецФункции

Процедура ОчиститьОчередьРасчета(ПланПроизводства, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчета.ДатаВыпуска КАК ДатаВыпуска,
	|	ОчередьРасчета.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчета.Подразделение КАК Подразделение,
	|	ОчередьРасчета.Спецификация КАК Спецификация,
	|	ОчередьРасчета.Сценарий КАК Сценарий,
	|	ОчередьРасчета.Назначение КАК Назначение,
	|	ОчередьРасчета.ВыпускПолуфабрикатов КАК ВыпускПолуфабрикатов,
	|	ОчередьРасчетаПланаПроизводства.Разделитель КАК Разделитель
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
	|		ПО ОчередьРасчета.ДатаВыпуска = ОчередьРасчетаПланаПроизводства.ДатаВыпуска
	|			И ОчередьРасчета.ПланПроизводства = ОчередьРасчетаПланаПроизводства.ПланПроизводства
	|			И ОчередьРасчета.Подразделение = ОчередьРасчетаПланаПроизводства.Подразделение
	|			И ОчередьРасчета.Спецификация = ОчередьРасчетаПланаПроизводства.Спецификация
	|			И ОчередьРасчета.Сценарий = ОчередьРасчетаПланаПроизводства.Сценарий
	|			И ОчередьРасчета.Назначение = ОчередьРасчетаПланаПроизводства.Назначение
	|			И ОчередьРасчета.ВыпускПолуфабрикатов = ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов
	|			И ОчередьРасчета.Разделитель >= ОчередьРасчетаПланаПроизводства.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОчередьРасчета");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Очередь = МассивРезультатов[0].Выгрузить();
	
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОчиститьОчередь(Очередь, ПланПроизводства);
	
КонецПроцедуры

Функция ЕстьЗаданияВОчереди(ПланПроизводства)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьРасчетаПлановПроизводства.Разделитель
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
		|ГДЕ
		|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &ПланПроизводства");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗаписатьВЖурналОшибкуРассчета(ПланПроизводства, Параметры, Причина)
	
	ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа: %Ссылка% количество попыток: %КоличествоОшибок% по причине: %Причина%'");
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ПланПроизводства);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", Параметры.КоличествоОшибок);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", Причина);
		
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииОшибкаРасчета(),
		УровеньЖурналаРегистрации.Ошибка,
		ПланПроизводства.Метаданные(),
		ПланПроизводства,
		ТекстСообщения);
	
КонецПроцедуры

Функция МодульЧисла(Число)
	
	Возврат ?(Число >= 0, Число, -Число);
	
КонецФункции

Функция ЧислаОдногоЗнака(Число1, Число2)
	
	Возврат (Число1 > 0 И Число2 > 0)
		ИЛИ (Число1 < 0 И Число2 < 0);
	
КонецФункции

Функция ЗнакЧисла(Число)
	
	Возврат ?(Число >= 0, 1, -1);
	
КонецФункции

Функция ДвиженияПланаПроизводстваПоРегистру(ПланПроизводства, Регистр)
	
	ДополнительныеСвойства = Новый Структура;
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ПланПроизводства, ДополнительныеСвойства);
	
	Документы.ПланПроизводства.ИнициализироватьДанныеДокумента(ПланПроизводства, ДополнительныеСвойства, Регистр);
	
	Возврат ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + Регистр];
	
КонецФункции

Процедура ОбновитьДвиженияОборотыБюджетов(ПланПроизводства)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения = ДвиженияПланаПроизводстваПоРегистру(ПланПроизводства, "ОборотыБюджетов");
	
	Если Движения.Количество() > 0
		ИЛИ ЕстьДвиженияПланаВРегистреНакопления(ПланПроизводства, "ОборотыБюджетов") Тогда
		
		Набор = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		
		Набор.Отбор.Регистратор.Установить(ПланПроизводства);
		
		Набор.Загрузить(Движения);
		
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДвиженияПланаВРегистреНакопления(ПланПроизводства, ИмяРегистра)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.Период
		|ИЗ
		|	РегистрНакопления.#ИмяРегистра КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &ПланПроизводства";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СобытиеЖурналаРегистрацииОшибкаРасчета() Экспорт
	
	Возврат НСтр("ru = 'Фоновое проведение.План производства'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыПроизводства";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Планы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Планы
	|ГДЕ
	|	Планы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.ПустаяСсылка)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПланПроизводства");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
	                                                                                  "РегистрНакопления.ПланыПроизводства",
	                                                                                  Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
