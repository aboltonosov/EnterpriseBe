#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Позволяет получить данные, для сторнирования движений документа, указанного в параметре "Ссылка".
//
// Возращаемое значение:
//  Строка - Текст запроса получения данных для сторнирования движений документа.
//
Функция ТекстЗапросаСторноЗаписейЗаказа() Экспорт

	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Склад            КАК Склад,
		|	Таблица.Назначение       КАК Назначение,
		|
		|	- Таблица.Потребность    КАК Потребность,
		|	- Таблица.КЗаказу        КАК КЗаказу
		|
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.Регистратор В(&Ссылка)
		|	И (Таблица.Потребность <> 0 ИЛИ Таблица.КЗаказу <> 0)
		|	И &Отбор
		|;
		|
		|//////////////////////////////////////////////////
		|";

	Возврат Текст;

КонецФункции

// Предназначена для получения текста запроса остатков регистра в разрезе его измерений.
// с предустановленным фильтром по товаром временной таблицы "ВтТоварыОбособленные"
//
// Параметры:
//  ИспользоватьКорректировку - Булево - признак необходимости скорректировать движения регистра перед получением остатков
//  Разделы - Массив - массив в который будет добавлена информация о временных таблицах, создаваемых при выполнении запроса
//
// Возвращаемое значение:
//   Строка - текст запроса формирования временной таблицы остатков "ВтОбеспечениеЗаказов"
//
Функция ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы = Неопределено) Экспорт

	Если Не ИспользоватьКорректировку Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Номенклатура           КАК Номенклатура,
			|	Т.Характеристика         КАК Характеристика,
			|	Т.Склад                  КАК Склад,
			|	Т.Назначение             КАК Назначение,
			|
			|	Т.НаличиеПодЗаказОстаток КАК Количество,
			|	Т.КЗаказуОстаток         КАК КоличествоКЗаказу
			|
			|ПОМЕСТИТЬ ВтОбеспечениеЗаказов
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|		(Номенклатура, Характеристика, Склад, Назначение) В(
			|			ВЫБРАТЬ
			|				Ключи.Номенклатура   КАК Номенклатура,
			|				Ключи.Характеристика КАК Характеристика,
			|				Ключи.Склад          КАК Склад,
			|				Ключи.Назначение     КАК Назначение
			|			ИЗ
			|				ВтТоварыОбособленные КАК Ключи
			|		)) КАК Т
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение
			|;
			|
			|/////////////////////////////////////////////////////////////
			|";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	НаборДанных.Номенклатура           КАК Номенклатура,
			|	НаборДанных.Характеристика         КАК Характеристика,
			|	НаборДанных.Склад                  КАК Склад,
			|	НаборДанных.Назначение             КАК Назначение,
			|
			|	СУММА(НаборДанных.Количество)         КАК Количество,
			|	СУММА(НаборДанных.КоличествоКЗаказу)  КАК КоличествоКЗаказу
			|
			|ПОМЕСТИТЬ ВтОбеспечениеЗаказов
			|ИЗ (
			|	ВЫБРАТЬ
			|		Т.Номенклатура           КАК Номенклатура,
			|		Т.Характеристика         КАК Характеристика,
			|		Т.Склад                  КАК Склад,
			|		Т.Назначение             КАК Назначение,
			|
			|		Т.НаличиеПодЗаказОстаток КАК Количество,
			|		Т.КЗаказуОстаток         КАК КоличествоКЗаказу
			|
			|	ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|		(Номенклатура, Характеристика, Склад, Назначение) В(
			|			ВЫБРАТЬ
			|				Ключи.Номенклатура   КАК Номенклатура,
			|				Ключи.Характеристика КАК Характеристика,
			|				Ключи.Склад          КАК Склад,
			|				Ключи.Назначение     КАК Назначение
			|			ИЗ
			|				ВтТоварыОбособленные КАК Ключи
			|		)) КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура            КАК Номенклатура,
			|		Т.Характеристика          КАК Характеристика,
			|		Т.Склад                   КАК Склад,
			|		Т.Назначение              КАК Назначение,
			|
			|		- Т.КОтгрузке             КАК Количество,
			|		- Т.КОтгрузке             КАК КоличествоКЗаказу
			|
			|	ИЗ
			|		ВтТоварыКОтгрузкеКорректировка КАК Т
			|	ГДЕ
			|		Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|	) КАК НаборДанных
			|
			|СГРУППИРОВАТЬ ПО
			|	НаборДанных.Номенклатура, НаборДанных.Характеристика, НаборДанных.Склад, НаборДанных.Назначение
			|ИМЕЮЩИЕ
			|	СУММА(НаборДанных.Количество) <> 0
			|		ИЛИ СУММА(НаборДанных.КоличествоКЗаказу) <> 0
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение
			|;
			|
			|/////////////////////////////////////////////////////////////
			|";
	КонецЕсли;

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиСкладаОбособленные");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗаказыИзНазначений(МассивЗаказов, Объект) Экспорт
	
	Для Каждого Набор Из Объект.Движения Цикл
		
		Если Не Набор.ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСвойств = Набор.ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных;
		
		Если СтруктураСвойств.Свойство("СтруктураДляРасчетаСостояний") Тогда
			
			Для Каждого Элемент Из СтруктураСвойств.СтруктураДляРасчетаСостояний.МассивЗаказов Цикл
				
				Если (ТипЗнч(Элемент) = Тип("ДокументСсылка.ЗаказКлиента")
					
					//++ НЕ УТКА
					Или ТипЗнч(Элемент) = Тип("ДокументСсылка.ЗаказДавальца")
					//-- НЕ УТКА
					Или ТипЗнч(Элемент) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"))
					И МассивЗаказов.Найти(Элемент) = Неопределено Тогда
						
						МассивЗаказов.Добавить(Элемент);
						
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказов";
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	СписокДокументов = Новый Массив;
	//++ НЕ УТКА
	СписокДокументов.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	СписокДокументов.Добавить("Документ.ЗаказМатериаловВПроизводство");
	СписокДокументов.Добавить("Документ.ВозвратСырьяДавальцу");
	СписокДокументов.Добавить("Документ.ЭтапПроизводства2_2");
	СписокДокументов.Добавить("Документ.РаспределениеПроизводственныхЗатрат");
	//-- НЕ УТКА
	СписокДокументов.Добавить("Документ.КорректировкаПоступления");
	
	Для каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
								ТекстЗапросаМеханизмаПроведения,
								ПолноеИмяРегистра,
								ПолноеИмяДокумента);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	КонецЦикла;
	
	//++ НЕ УТКА
	// Аналог адаптированного текста запроса документов "Заказ на производство 2.2" по РН "Обеспечение заказов".
	ТекстЗапросаЭтапа = Документы.ЭтапПроизводства2_2.ТекстЗапросаТаблицаДвижениеТоваровПоЗаказуНаПроизводство();
	ТекстЗапросаЗаказа = Документы.ЗаказНаПроизводство2_2.ТекстЗапросаТаблицаДвижениеТоваровДляОбновленияИБ();
	ТекстЗапросаРегистра =
		"ВЫБРАТЬ
		|	ОбеспечениеЗаказов.Регистратор           КАК Распоряжение,
		|	ОбеспечениеЗаказов.Назначение            КАК Назначение,
		|	ОбеспечениеЗаказов.Номенклатура          КАК Номенклатура,
		|	ОбеспечениеЗаказов.Характеристика        КАК Характеристика,
		|	ОбеспечениеЗаказов.Склад                 КАК Склад,
		|	
		|	ОбеспечениеЗаказов.КЗаказу               КАК ПланируемоеПоступлениеПодЗаказ,
		|	ОбеспечениеЗаказов.КЗаказу               КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
		|ГДЕ
		|	ОбеспечениеЗаказов.Активность
		|	И ОбеспечениеЗаказов.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2";
	
	ТекстЗапросаНабораДанных = ТекстЗапросаРегистра
	                           + "
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |"
	                           + ТекстЗапросаЭтапа
	                           + "
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |"
	                           + ТекстЗапросаЗаказа;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Распоряжение КАК Ссылка
		|ИЗ(
		|	ВЫБРАТЬ
		|		Набор.Распоряжение          КАК Распоряжение,
		|		Набор.Назначение            КАК Назначение,
		|		Набор.Номенклатура          КАК Номенклатура,
		|		Набор.Характеристика        КАК Характеристика,
		|		Набор.Склад                 КАК Склад,
		|		
		|		СУММА(Набор.ПланируемоеПоступлениеПодЗаказ) КАК Отклонение
		|	ИЗ
		|		(&НаборДанных) КАК Набор
		|	СГРУППИРОВАТЬ ПО
		|		Набор.Распоряжение, Набор.Назначение, Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|	ИМЕЮЩИЕ
		|		СУММА(Набор.ПланируемоеПоступлениеПодЗаказ) <> 0
		|		ИЛИ СУММА(Набор.ПланируемоеПоступлениеПодЗаказСНеподтвержденными) <> 0) КАК Набор";
		
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&НаборДанных", ТекстЗапросаНабораДанных);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказов";
	
	Регистраторы = Новый Массив;
	//++ НЕ УТКА
	Регистраторы.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	Регистраторы.Добавить("Документ.ЗаказМатериаловВПроизводство");
	Регистраторы.Добавить("Документ.ВозвратСырьяДавальцу");
	Регистраторы.Добавить("Документ.РаспределениеПроизводственныхЗатрат");
	//-- НЕ УТКА
	Регистраторы.Добавить("Документ.КорректировкаПоступления");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
	                                                                                  ПолноеИмяРегистра,
	                                                                                  Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
	
//++ НЕ УТКА
	Если Параметры.ОбработкаЗавершена Тогда
		
		Возврат;
		
	КонецЕсли;

	// Штатное "ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди" не подходит, так как нужно блокировать РС ГрафикЭтаповПроизводства.
	ОбработкаЗавершена = Документы.ЭтапПроизводства2_2.ПерезаписатьДвиженияИзОчередиСОтветственнымЧтениемГрафикаЭтаповПроизводства(
		Параметры.Очередь, ПолноеИмяРегистра);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
	Если Параметры.ОбработкаЗавершена Тогда
		
		Возврат;
		
	КонецЕсли;
	
#Область ЗаказНаПроизводство2_2
	
	// Обработку начинаем только после полной обработки РН "Движение товаров".
	РегистрДвижениеТоваровОбработан = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
	                                                                                         "РегистрНакопления.ДвижениеТоваров");
	
	Если РегистрДвижениеТоваровОбработан Тогда
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь,
		                                                                               "Документ.ЗаказНаПроизводство2_2",
		                                                                               ПолноеИмяРегистра);
	
		Пока Выборка.Следующий() Цикл
			
			// Блокировка читаемых и записываемых наборов.
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОбеспечениеЗаказов.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвижениеТоваров");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			// Регистратор пропусткается если не удается заблокировать данные.
			Попытка
				Блокировка.Заблокировать();
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось установить блокировку на регистры ""График поступления товаров"" и ""Движение товаров"": %Регистратор% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
				
				Продолжить;
				
			КонецПопытки;
			
			// Перерасчет движений
			НаборЗаписейГрафикПоступления = РегистрыНакопления.ДвижениеТоваров.РассчитатьИтогиРегистраОстаткиТоваровПоГрафикуДляОбновленияИБ(Выборка.Регистратор);
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ДвижениеТоваров.ДатаРаспоряжения) КАК Период
				|
				|ИЗ
				|	РегистрНакопления.ДвижениеТоваров КАК ДвижениеТоваров
				|ГДЕ
				|	ДвижениеТоваров.Активность
				|	И ДвижениеТоваров.Регистратор = &Регистратор";
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			ВыборкаДляПолученияПериода = Запрос.Выполнить().Выбрать();
			Период = НачалоДня(ТекущаяДатаСеанса());
			Если ВыборкаДляПолученияПериода.Следующий() И ЗначениеЗаполнено(ВыборкаДляПолученияПериода.Период) Тогда
				Период = ВыборкаДляПолученияПериода.Период;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ОбеспечениеЗаказов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(НаборЗаписейГрафикПоступления.Отбор.Регистратор.Значение);
			Для Каждого Запись Из НаборЗаписейГрафикПоступления Цикл
				
				Если Не Запись.Назначение.Пустая() Тогда
					
					НоваяЗапись = НаборЗаписей.ДобавитьПриход();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
					НоваяЗапись.КЗаказу = -Запись.КоличествоПодЗаказСНеподтвержденными;
					НоваяЗапись.Период = Период;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Запись набора, если необходимо.
			Если ЕстьИзмененияВНаборе(Выборка, НаборЗаписей) Тогда
				
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						Выборка.Регистратор.Метаданные(),
						Выборка.Регистратор,
						ТекстСообщения);
					
					ВызватьИсключение;
				КонецПопытки;
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
//-- НЕ УТКА
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//++ НЕ УТКА
Функция ЕстьИзмененияВНаборе(Выборка, НаборЗаписей)
	
	Таблица = НаборЗаписей.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Период         КАК Период,
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.ВидДвижения    КАК ВидДвижения,
		|	Таблица.КЗаказу        КАК КЗаказу
		|ПОМЕСТИТЬ ВтТаблицаИзменений
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|///////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Номенклатура   КАК Номенклатура,
		|		ТаблицаИзменений.Характеристика КАК Характеристика,
		|		ТаблицаИзменений.Склад          КАК Склад,
		|		ТаблицаИзменений.Период         КАК Период,
		|		ТаблицаИзменений.Назначение     КАК Назначение,
		|		ТаблицаИзменений.КЗаказу        КАК КЗаказу
		|	ИЗ
		|		ВтТаблицаИзменений КАК ТаблицаИзменений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОбеспечениеЗаказов.Номенклатура   КАК Номенклатура,
		|		ОбеспечениеЗаказов.Характеристика КАК Характеристика,
		|		ОбеспечениеЗаказов.Склад          КАК Склад,
		|		ОбеспечениеЗаказов.Период         КАК Период,
		|		ОбеспечениеЗаказов.Назначение     КАК Назначение,
		|		-ОбеспечениеЗаказов.КЗаказу       КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
		|	ГДЕ
		|		ОбеспечениеЗаказов.Регистратор = &Регистратор
		|		И ОбеспечениеЗаказов.Активность) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Период, Набор.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Набор.КЗаказу) <> 0";
		
	Запрос.УстановитьПараметр("Таблица",     НаборЗаписей.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли
