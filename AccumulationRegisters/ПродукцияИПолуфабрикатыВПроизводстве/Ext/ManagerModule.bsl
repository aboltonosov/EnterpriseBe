#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция проверяет, запланированы ли заказы
//
// Параметры:
//  Заказы - Массив - заказы на производство
// 
// Возвращаемое значение:
//   - Соответствие - состояние заказов.
//
Функция ЗаказыЗапланированы(Заказы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Распоряжение                            КАК Заказ,
		|	Таблица.ТребуетсяОборот > 0 
		|		И ( Таблица.ЗапланированоОборот > 0
		|		ИЛИ Таблица.ПереданоКПроизводствуОборот > 0
		|		ИЛИ Таблица.ОжидаетПроизводстваОборот > 0
		|		ИЛИ Таблица.ПроизводитсяОборот > 0
		|		ИЛИ Таблица.ПроизведеноОборот > 0)          КАК Запланирован
		|ИЗ
		|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты(
		|		, , , Распоряжение В (&Заказы)) КАК Таблица");
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Заказ,Выборка.Запланирован);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет, требуется ли сформировать этапы для заказа (-ов)
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство
// 
// Возвращаемое значение:
//   - Истина - требуется сформировать этапы
//
Функция ТребуетсяСформироватьЭтапы(Заказы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Заказы);
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = СтрЗаменить(
		ТекстЗапросаВТТребуетсяСформироватьЭтапы(),
		"ПОМЕСТИТЬ ВТТребуетсяСформироватьЭтапы",
		"");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует текст запроса для выборки незавершенных заказов на производство
//
//	Возвращаемое значение:
//		Строка
//
Функция ТекстЗапросаВТНезавершенныеЗаказы() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТНезавершенныеЗаказы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОборотыВПроизводстве.Распоряжение   КАК Ссылка,
		|		ОборотыВПроизводстве.Номенклатура   КАК Номенклатура,
		|		ОборотыВПроизводстве.Характеристика КАК Характеристика,
		|		ОборотыВПроизводстве.Спецификация   КАК Спецификация,
		|		ОборотыВПроизводстве.Получатель     КАК Получатель,
		|		ОборотыВПроизводстве.Назначение     КАК Назначение
		|	ИЗ
		|		РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты(
		|				,
		|				,
		|				,
		|				Распоряжение В (&МассивСсылок) И Этап = &ПустаяСсылкаЭтап) КАК ОборотыВПроизводстве
		|
		|	ГДЕ
		|		ОборотыВПроизводстве.ТребуетсяОборот > ОборотыВПроизводстве.ПроизведеноОборот) КАК Таблица";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустаяСсылкаЭтап", "ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса выбирающего заказы по которым требуется сформировать этапы
//
//	Возвращаемое значение:
//		Строка
//
Функция ТекстЗапросаВТТребуетсяСформироватьЭтапы() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТребуетсяСформироватьЭтапы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОборотыВПроизводстве.Распоряжение   КАК Ссылка,
		|		ОборотыВПроизводстве.Номенклатура   КАК Номенклатура,
		|		ОборотыВПроизводстве.Характеристика КАК Характеристика,
		|		ОборотыВПроизводстве.Спецификация   КАК Спецификация,
		|		ОборотыВПроизводстве.Получатель     КАК Получатель,
		|		ОборотыВПроизводстве.Назначение     КАК Назначение,
		|		ОборотыВПроизводстве.Этап           КАК Этап
		|	ИЗ
		|		РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты(
		|				,
		|				,
		|				,
		|				Распоряжение В (&МассивСсылок)) КАК ОборотыВПроизводстве
		|	ГДЕ
		|		(ОборотыВПроизводстве.ТребуетсяОборот 
		|			- ОборотыВПроизводстве.ЗапланированоОборот 
		|			- ОборотыВПроизводстве.ПереданоКПроизводствуОборот 
		|			- ОборотыВПроизводстве.ОжидаетПроизводстваОборот 
		|			- ОборотыВПроизводстве.ПроизводитсяОборот 
		|			- ОборотыВПроизводстве.ПроизведеноОборот)
		|		- (ОборотыВПроизводстве.ТребуетсяОборот 
		|			* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|		) > 0) КАК Таблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временную таблицу ВТОстаткиПродукцииИПолуфабрикатовКПроизводству с колонками.
//  Подробнее см. комментарий к функции ОстаткиПродукцииИПолуфабрикатовКПроизводству.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Распоряжения			 - Массив					 - заказы на производство
//  Этапы					 - Массив					 - этапы
//
Процедура СоздатьВТОстаткиПродукцииИПолуфабрикатовКПроизводству(МенеджерВременныхТаблиц, Распоряжения = Неопределено, Этапы = Неопределено) Экспорт
	
	// Сформируем текст отбора по таблице
	
	ТекстОтбораОстатков = "";
	
	ЕстьОтборПоРаспоряжениям = ЗначениеЗаполнено(Распоряжения);
	МножественныйОтборПоРаспоряжениям = ЕстьОтборПоРаспоряжениям И Распоряжения.Количество() > 1;
	
	Если ЕстьОтборПоРаспоряжениям Тогда
		
		Если МножественныйОтборПоРаспоряжениям Тогда
			ТекстУсловия = "Распоряжение В (&Распоряжения)";
		Иначе
			ТекстУсловия = "Распоряжение = &Распоряжение";
		КонецЕсли;
		
		ТекстОтбораОстатков = ?(ПустаяСтрока(ТекстОтбораОстатков), "", " И ") + ТекстУсловия;
	КонецЕсли;
	
	ЕстьОтборПоЭтапам = ЗначениеЗаполнено(Этапы);
	МножественныйОтборПоЭтапам = ЕстьОтборПоЭтапам И Этапы.Количество() > 1;
	
	Если ЕстьОтборПоЭтапам Тогда
		
		Если МножественныйОтборПоЭтапам Тогда
			ТекстУсловия = "Этап В (&Этапы)";
		Иначе
			ТекстУсловия = "Этап = &Этап";
		КонецЕсли;
		
		ТекстОтбораОстатков  = ?(ПустаяСтрока(ТекстОтбораОстатков), "", " И ") + ТекстУсловия;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Обороты.Распоряжение                 КАК Распоряжение,
		|	Обороты.Номенклатура                 КАК Номенклатура,
		|	Обороты.Характеристика               КАК Характеристика,
		|	Обороты.Спецификация                 КАК Спецификация,
		|	Обороты.Получатель                   КАК Получатель,
		|	Обороты.Назначение                   КАК Назначение,
		|	Обороты.Этап                         КАК ЭтапПотребитель,
		|
		|	ВЫБОР
		|		КОГДА Обороты.Этап <> &ПустаяСсылкаЭтап
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ                  КАК ЭтоПродукция,
		|	ВЫБОР
		|		КОГДА Обороты.Этап <> &ПустаяСсылкаЭтап 
		|				И Обороты.Спецификация <> &ПустаяСсылкаСпецификация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                  КАК ПроизводитсяВПроцессе,
		|	ВЫБОР
		|		КОГДА Обороты.Этап <> &ПустаяСсылкаЭтап 
		|				И Обороты.Спецификация = &ПустаяСсылкаСпецификация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                  КАК ПроизводитсяНаЭтапе,
		|
		|	Обороты.ТребуетсяОборот
		|	 - Обороты.ЗапланированоОборот
		|	 - Обороты.ПереданоКПроизводствуОборот
		|	 - Обороты.ОжидаетПроизводстваОборот
		|	 - Обороты.ПроизводитсяОборот
		|	 - Обороты.ПроизведеноОборот         КАК Количество
		|
		|ПОМЕСТИТЬ ВТОстаткиПродукцииИПолуфабрикатовКПроизводству
		|ИЗ
		|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты( 
		|			,
		|			,
		|			,
		|			&ТекстОтбораОстатков) КАК Обороты
		|ГДЕ
		|	(Обороты.ТребуетсяОборот
		|		 - Обороты.ЗапланированоОборот
		|		 - Обороты.ПереданоКПроизводствуОборот
		|		 - Обороты.ОжидаетПроизводстваОборот
		|		 - Обороты.ПроизводитсяОборот
		|		 - Обороты.ПроизведеноОборот) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Спецификация,
		|	Получатель,
		|	Назначение,
		|	ЭтапПотребитель
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТекстОтбораОстатков",ТекстОтбораОстатков);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ЕстьОтборПоРаспоряжениям Тогда
		
		Если МножественныйОтборПоРаспоряжениям Тогда
			Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
		Иначе
			Запрос.УстановитьПараметр("Распоряжение", Распоряжения[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОтборПоЭтапам Тогда
		
		Если МножественныйОтборПоЭтапам Тогда
			Запрос.УстановитьПараметр("Этапы", Этапы);
		Иначе
			Запрос.УстановитьПараметр("Этап", Этапы[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСсылкаСпецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаЭтап", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Рассчитывает остатки продукции и полуфабрикатов к производству
//
// Параметры:
//  Распоряжения - Массив	 - заказы на производство.
//  Этапы		 - Массив	 - этапы производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица потребности
//
Функция ОстаткиПродукцииИПолуфабрикатовКПроизводству(Распоряжения = Неопределено, Этапы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу остатков.
	СоздатьВТОстаткиПродукцииИПолуфабрикатовКПроизводству(МенеджерВременныхТаблиц, Распоряжения, Этапы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение    КАК Распоряжение,
	|	Таблица.Номенклатура    КАК Номенклатура,
	|	Таблица.Характеристика  КАК Характеристика,
	|	Таблица.Спецификация    КАК Спецификация,
	|	Таблица.Получатель      КАК Получатель,
	|	Таблица.Назначение      КАК Назначение,
	|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
	|	Таблица.Количество      КАК Количество
	|ИЗ
	|	ВТОстаткиПродукцииИПолуфабрикатовКПроизводству КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу полуфабрикатов производимых в процессе по переданному отбору
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  ИмяВТОтборПоПотребности	      - Строка				- имя временной таблицы отбора по потребности
//  ИмяВременнойТаблицыРезультата - Строка				- имя временной таблицы, в которую нужно поместить результат, если не указано, то результат будет выгружен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица полуфабрикатов производимых в процессе
//
Функция ПолуфабрикатыВПроизводстве(МенеджерВременныхТаблиц, ИмяВТОтборПоПотребности = "", ИмяВременнойТаблицыРезультата = "") Экспорт
	
	ВыгрузитьРезультат = ИмяВременнойТаблицыРезультата = "";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОборотыПолуфабрикатов.Этап           КАК Заказ,
	|	ОборотыПолуфабрикатов.Номенклатура   КАК Номенклатура,
	|	ОборотыПолуфабрикатов.Характеристика КАК Характеристика,
	|	ОборотыПолуфабрикатов.Назначение     КАК Назначение,
	|	
	|	ВЫБОР КОГДА ОборотыПолуфабрикатов.Получатель ССЫЛКА Справочник.Склады ТОГДА
	|				ОборотыПолуфабрикатов.Получатель
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		КОНЕЦ                            КАК Склад,
	|	
	|	ВЫБОР КОГДА ОборотыПолуфабрикатов.Получатель ССЫЛКА Справочник.СтруктураПредприятия ТОГДА
	|				ОборотыПолуфабрикатов.Получатель
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		КОНЕЦ                            КАК Подразделение,
	|	
	|	ВЫБОР КОГДА ОборотыПолуфабрикатов.Получатель ССЫЛКА Справочник.Склады ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ                             КАК ЭтоТовар,
	|	
	|	ОборотыПолуфабрикатов.ТребуетсяОборот КАК Количество
	|	
	|ПОМЕСТИТЬ ВтПолуфабрикатыВПроизводствеПереопределяемый
	|ИЗ
	|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты(,,,
	|
	|			(Номенклатура,Характеристика,Получатель,Назначение) В(
	|				ВЫБРАТЬ
	|					Фильтр.Номенклатура   КАК Номенклатура,
	|					Фильтр.Характеристика КАК Характеристика,
	|					Фильтр.Склад          КАК Склад,
	|					Фильтр.Назначение     КАК Назначение
	|				ИЗ
	|					ВТОтборПоПотребности КАК Фильтр)
	|
	|			И Этап <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|
	|		) КАК ОборотыПолуфабрикатов
	|ГДЕ
	|	ОборотыПолуфабрикатов.ТребуетсяОборот > 0 И ОборотыПолуфабрикатов.Этап.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|";
	Если ЗначениеЗаполнено(ИмяВТОтборПоПотребности) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборПоПотребности", ИмяВТОтборПоПотребности);
	КонецЕсли;
	
	Если ВыгрузитьРезультат Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтПолуфабрикатыВПроизводствеПереопределяемый", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтПолуфабрикатыВПроизводствеПереопределяемый", ИмяВременнойТаблицыРезультата);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	
	Результат = Неопределено;
	Если ВыгрузитьРезультат Тогда
		Результат = РезультатВыполненияЗапроса.Выгрузить();
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Формирует текст запроса контроля закрытия заказа на производство
//
//	Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаКонтрольЗакрытияЗаказа() Экспорт
	
	Возврат 
		"ВЫБРАТЬ
		|	ПродукцияИПолуфабрикаты.Распоряжение   КАК Распоряжение,
		|	ПродукцияИПолуфабрикаты.Номенклатура   КАК Номенклатура,
		|	ПродукцияИПолуфабрикаты.Характеристика КАК Характеристика,
		|	ПродукцияИПолуфабрикаты.Спецификация   КАК Спецификация,
		|	ПродукцияИПолуфабрикаты.Получатель     КАК Получатель,
		|	ПродукцияИПолуфабрикаты.Назначение     КАК Назначение,
		|	ПродукцияИПолуфабрикаты.Этап           КАК Этап,
		|
		|	СУММА(ПродукцияИПолуфабрикаты.Требуется * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|
		|ПОМЕСТИТЬ ВТДопустимыеОтклоненияОстатковПоЗаказам
		|ИЗ
		|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве КАК ПродукцияИПолуфабрикаты
		|ГДЕ
		|	&НеЗакрыватьБезПолнойОтработки
		|	И ПродукцияИПолуфабрикаты.Распоряжение В (&МассивДокументов)
		|	И ПродукцияИПолуфабрикаты.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродукцияИПолуфабрикаты.Распоряжение,
		|	ПродукцияИПолуфабрикаты.Номенклатура,
		|	ПродукцияИПолуфабрикаты.Характеристика,
		|	ПродукцияИПолуфабрикаты.Спецификация,
		|	ПродукцияИПолуфабрикаты.Получатель,
		|	ПродукцияИПолуфабрикаты.Назначение,
		|	ПродукцияИПолуфабрикаты.Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиПоЗаказам.Распоряжение КАК Заказ
		|ПОМЕСТИТЬ ВтОстаткиПоЗаказам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПродукцияИПолуфабрикаты.Распоряжение   КАК Распоряжение,
		|		ПродукцияИПолуфабрикаты.Номенклатура   КАК Номенклатура,
		|		ПродукцияИПолуфабрикаты.Характеристика КАК Характеристика,
		|		ПродукцияИПолуфабрикаты.Спецификация   КАК Спецификация,
		|		ПродукцияИПолуфабрикаты.Получатель     КАК Получатель,
		|		ПродукцияИПолуфабрикаты.Назначение     КАК Назначение,
		|		ПродукцияИПолуфабрикаты.Этап           КАК Этап
		|	ИЗ
		|		РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве.Обороты(, , , Распоряжение В (&МассивДокументов)) КАК ПродукцияИПолуфабрикаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДопустимыеОтклоненияОстатковПоЗаказам КАК ДопустимыеОтклонения
		|			ПО ПродукцияИПолуфабрикаты.Распоряжение = ДопустимыеОтклонения.Распоряжение
		|				И ПродукцияИПолуфабрикаты.Номенклатура = ДопустимыеОтклонения.Номенклатура
		|				И ПродукцияИПолуфабрикаты.Характеристика = ДопустимыеОтклонения.Характеристика
		|				И ПродукцияИПолуфабрикаты.Спецификация = ДопустимыеОтклонения.Спецификация
		|				И ПродукцияИПолуфабрикаты.Получатель = ДопустимыеОтклонения.Получатель
		|				И ПродукцияИПолуфабрикаты.Назначение = ДопустимыеОтклонения.Назначение
		|				И ПродукцияИПолуфабрикаты.Этап = ДопустимыеОтклонения.Этап
		|	ГДЕ
		|		&НеЗакрыватьБезПолнойОтработки
		|		И (ПродукцияИПолуфабрикаты.ЗапланированоОборот - ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) > 0
		|				ИЛИ ПродукцияИПолуфабрикаты.ПереданоКПроизводствуОборот - ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) > 0
		|				ИЛИ ПродукцияИПолуфабрикаты.ОжидаетПроизводстваОборот - ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) > 0
		|				ИЛИ ПродукцияИПолуфабрикаты.ПроизводитсяОборот - ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) > 0
		|				ИЛИ ПродукцияИПолуфабрикаты.ТребуетсяОборот - ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) > ПродукцияИПолуфабрикаты.ПроизведеноОборот)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПродукцияИПолуфабрикаты.Распоряжение,
		|		ПродукцияИПолуфабрикаты.Номенклатура,
		|		ПродукцияИПолуфабрикаты.Характеристика,
		|		ПродукцияИПолуфабрикаты.Спецификация,
		|		ПродукцияИПолуфабрикаты.Получатель,
		|		ПродукцияИПолуфабрикаты.Назначение,
		|		ПродукцияИПолуфабрикаты.Этап) КАК ОстаткиПоЗаказам";
	
КонецФункции

// Возвращает текст запроса остатков продукции или полуфабрикатов на складе-получателе.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений() Экспорт
	
	ТекстЗапроса =
		// Остатки назначения по распоряжению.
		"ВЫБРАТЬ
		|	Остатки.Этап КАК ЭтапПотребитель,
		|	Остатки.Назначение КАК Назначение,
		|
		|	ВЫБОР КОГДА
		|			Остатки.Этап <> &ПустаяСсылкаЭтап
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПроизводитсяВПроцессе,
		|
		|	СпрНазначения.Ссылка КАК НазначениеРедактирование,
		|
		|	СУММА(Остатки.Потребность) КАК Потребность
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|		
		|			Таблица.Этап КАК Этап,
		|			Таблица.Назначение КАК Назначение,
		|		
		|			ВЫБОР КОГДА
		|					Таблица.Этап <> &ПустаяСсылкаЭтап
		|				ТОГДА 
		|					Таблица.Этап.Назначение
		|				ИНАЧЕ 
		|					Таблица.Назначение
		|			КОНЕЦ КАК НазначениеРедактирование,
		|		
		|			СУММА(Таблица.Требуется)
		|				 - СУММА(Таблица.Запланировано)
		|				 - СУММА(Таблица.ПереданоКПроизводству)
		|				 - СУММА(Таблица.ОжидаетПроизводства)
		|				 - СУММА(Таблица.Производится)
		|				 - СУММА(Таблица.Произведено) КАК Потребность
		|		
		|		ИЗ
		|			РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве КАК Таблица
		|		ГДЕ
		|			Распоряжение = &Распоряжение
		|			
		|			И Номенклатура = &Номенклатура
		|			И Характеристика = &Характеристика
		|			
		|			И (Получатель = &Получатель ИЛИ &ПоВсемПолучателям)
		|			
		|			// только обособленные потребности
		|			И (
		|				Этап <> &ПустаяСсылкаЭтап
		|					И (
		|						Спецификация <> &ПустаяСсылкаСпецификация
		|							И Спецификация = &Спецификация
		|						ИЛИ Спецификация = &ПустаяСсылкаСпецификация
		|							И Этап.ВыпускающийЭтап = &ВыпускающийЭтап
		|						)
		|					И НЕ Этап В (&Предшественники)
		|				ИЛИ Этап = &ПустаяСсылкаЭтап 
		|					И Назначение <> &ПустаяСсылкаНазначение
		|				)
		|			
		|			И (&Обособленно И Назначение В (&НазначенияПродукции) ИЛИ НЕ &Обособленно)
		|			
		|			И Регистратор <> &Регистратор
		|			
		|		СГРУППИРОВАТЬ ПО
		|			
		|			Таблица.Этап,
		|			Таблица.Назначение
		|		
		|		ИМЕЮЩИЕ
		|			СУММА(Таблица.Требуется) > СУММА(Таблица.Запланировано)
		|											 + СУММА(Таблица.ПереданоКПроизводству)
		|											 + СУММА(Таблица.ОжидаетПроизводства)
		|											 + СУММА(Таблица.Производится)
		|											 + СУММА(Таблица.Произведено) И НЕ &ПоПрочимНазначениям
		|			ИЛИ
		|
		|			СУММА(Таблица.Требуется) <= СУММА(Таблица.Запланировано)
		|											 + СУММА(Таблица.ПереданоКПроизводству)
		|											 + СУММА(Таблица.ОжидаетПроизводства)
		|											 + СУММА(Таблица.Производится)
		|											 + СУММА(Таблица.Произведено) И &ПоПрочимНазначениям
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			&ПустаяСсылкаЭтап,
		|			ПрочиеНазначения.Ссылка,
		|			ПрочиеНазначения.Ссылка,
		|			0
		|		ИЗ 
		|			Справочник.Назначения КАК ПрочиеНазначения
		|		ГДЕ
		|			ПрочиеНазначения.Ссылка В (&ПрочиеНазначения)
		|			И &ПоПрочимНазначениям
		|		
		|	) КАК Остатки
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО Остатки.НазначениеРедактирование = СпрНазначения.Ссылка
		|
		|	СГРУППИРОВАТЬ ПО
		|		
		|		Остатки.Этап,
		|		Остатки.Назначение,
		|		СпрНазначения.Ссылка
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция проверяет, содержит ли переданная таблица продукцию заказа
//
// Параметры:
//  Заказ	 - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство
//  Таблица	 - ТаблицаЗначений - таблица для проверки
// 
// Возвращаемое значение:
//   - Истина - содержит продукцию заказа
//
Функция ТаблицаСодержитПродукцию(Заказ, Таблица) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Распоряжение   КАК Распоряжение,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Спецификация   КАК Спецификация,
		|	Таблица.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВТПродукция
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве КАК Таблица
		|ГДЕ
		|	Таблица.Регистратор = &Заказ 
		|		И (Распоряжение, Номенклатура, Характеристика, Спецификация, Назначение) В
		|				(ВЫБРАТЬ
		|					Т.Распоряжение,
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Спецификация,
		|					Т.Назначение
		|				ИЗ
		|					ВТПродукция КАК Т)");

	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("Таблица",Таблица);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Процедура формирования движений по регистру 
//
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродукцияИПолуфабрикатыВПроизводстве;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ПродукцияИПолуфабрикатыВПроизводстве.Записывать = Истина;
	Движения.ПродукцияИПолуфабрикатыВПроизводстве.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве";
	ИмяРегистра = "ПродукцияИПолуфабрикатыВПроизводстве";
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.ЭтапПроизводства2_2");
	
	Для каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
								ТекстЗапросаМеханизмаПроведения,
								ПолноеИмяРегистра,
								ПолноеИмяДокумента);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|		ПО Таблица.Назначение = ЭтапыПроизводства.Назначение
	|ГДЕ
	|	Таблица.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|	И Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Таблица.Этап = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|	И Таблица.Активность";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ЭтапПроизводства2_2");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
	                                                                                  "РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве",
	                                                                                  Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
