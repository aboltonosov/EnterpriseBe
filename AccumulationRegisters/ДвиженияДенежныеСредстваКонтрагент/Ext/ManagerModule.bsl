#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс
//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета()
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств,
		Новый Структура(СвойстваИсточника, "ГФУДенежныхСредств"));
		
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов,
		Новый Структура(СвойстваИсточника, "ГФУРасчетов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений()
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДенежныхСредств, "ДенежныеСредстваПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ОбъектРасчетовСКонтрагентом, "ОбъектРасчетовПодразделение");
	
    Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений()
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиДС, "НаправлениеДеятельностиДС");
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента, "НаправлениеДеятельностиКонтрагента");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто()
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("ДенежныеСредства");
	МассивСубконто.Добавить("ТипДенежныхСредств");
	МассивСубконто.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивСубконто.Добавить("Партнер");
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("Договор");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте()
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеПлатежа, Новый Структура(СвойстваПоказателей, "ВалютаПлатежа"));
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеВзаиморасчетов, Новый Структура(СвойстваПоказателей, "ВалютаВзаиморасчетов"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет документы отражаемые в международном учете.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМФУ()
//
// Возвращаемое значение:
//  Массив - массив регистраторов регистра отражаемых в международном учете.
//
Функция ДокументыКОтражениюВМеждународномУчете() Экспорт

	ДокументыКОтражению = Новый Массив;
	ДокументыКОтражению.Добавить("АвансовыйОтчет");
	ДокументыКОтражению.Добавить("ВозвратПодарочныхСертификатов");
	ДокументыКОтражению.Добавить("ВыбытиеДенежныхДокументов");
	ДокументыКОтражению.Добавить("ОперацияПоПлатежнойКарте");
	ДокументыКОтражению.Добавить("ОтчетОРозничныхПродажах");
	ДокументыКОтражению.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	ДокументыКОтражению.Добавить("ПоступлениеДенежныхДокументов");
	ДокументыКОтражению.Добавить("ПоступлениеТоваровУслуг");
	ДокументыКОтражению.Добавить("ПриходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("РасходныйКассовыйОрдер");
	ДокументыКОтражению.Добавить("РеализацияПодарочныхСертификатов");
	ДокументыКОтражению.Добавить("СписаниеБезналичныхДенежныхСредств");
	ДокументыКОтражению.Добавить("ОперацияПоЯндексКассе");
	
	Возврат ДокументыКОтражению;

КонецФункции
//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели()
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплаты", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыВВалютеПлатежа", "ВалютаПлатежа"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеПлатежа", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДокументыКЗаполнениюНДС = ДенежныеСредстваСервер.ДокументыКЗаполнениюНДС();
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	
	|ГДЕ
	|	ДанныеРегистра.Регистратор В (&ДокументыКЗаполнениюНДС)
	|	
	|		
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеДокумента.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах.Товары КАК ДанныеДокумента
	|		ГДЕ
	|			ДанныеДокумента.СтавкаНДС В (&СтавкиНДС)
	|		) КАК ПлатежныеДокументы
	|	ПО
	|		ДанныеРегистра.Регистратор = ПлатежныеДокументы.Ссылка
	|		
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.СтавкаНДС В (&СтавкиНДС) ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ) = 0
	|";
	
	СтавкиНДС = Новый Массив;
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	// 4D:ERP для Беларуси, Дмитрий, 12.09.2017 23:15:08 
	// Ставки НДС 20% и 25%
	// {
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС25);
	СтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС25_125);
	// }
	// 4D
		
	Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
	Запрос.УстановитьПараметр("ДокументыКЗаполнениюНДС", ДокументыКЗаполнениюНДС);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоДвижения", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ОперацияПоПлатежнойКарте),
	|		ТИП(Документ.ОтчетОРозничныхПродажах),
	|		ТИП(Документ.РеализацияПодарочныхСертификатов),
	|		ТИП(Документ.ВозвратПодарочныхСертификатов),
	|		ТИП(Документ.ОперацияПоЯндексКассе))
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) <> ТИП(Справочник.Контрагенты)
	|	И ДанныеРегистра.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера))
	|	ИЛИ
	|	(ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (
	|		ТИП(Документ.ОперацияПоПлатежнойКарте),
	|		ТИП(Документ.ОперацияПоЯндексКассе),
	|		ТИП(Документ.ОтчетОРозничныхПродажах),
	|		ТИП(Документ.РеализацияПодарочныхСертификатов),
	|		ТИП(Документ.ВозвратПодарочныхСертификатов))
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент";
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
	
	ИменаРегистраторов = Новый Массив;
	ИменаРегистраторов.Добавить("Документ.ПоступлениеТоваровУслуг");
	ИменаРегистраторов.Добавить("Документ.ОперацияПоПлатежнойКарте");
	ИменаРегистраторов.Добавить("Документ.ОтчетОРозничныхПродажах");
	ИменаРегистраторов.Добавить("Документ.РеализацияПодарочныхСертификатов");
	ИменаРегистраторов.Добавить("Документ.ВозвратПодарочныхСертификатов");
	ИменаРегистраторов.Добавить("Документ.ОперацияПоЯндексКассе");
	
	Для каждого ИмяРегистратора Из ИменаРегистраторов Цикл
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
			Параметры.Очередь, ИмяРегистратора, ПолноеИмяРегистра);
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				Блокировка.Заблокировать();
				
				ТипРегистратора = ТипЗнч(Выборка.Регистратор);
				
				Если ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					
					Набор = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
					
				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
					Или ТипРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					
					МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяРегистратора);
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(ИмяРегистратора);
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					Блокировка.Заблокировать();
					
					НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					
					ДопСвойства = Новый Структура;
					ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.Регистратор, ДопСвойства);
					МенеджерДокумента.ИнициализироватьДанныеДокумента(Выборка.Регистратор, ДопСвойства, "ДвиженияДенежныеСредстваКонтрагент");
					
					НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаДвиженияДенежныеСредстваКонтрагент"]);
					
					Для каждого ЗаписьНабора из НаборЗаписей Цикл
						Если ЗаписьНабора.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера
							И ТипЗнч(ЗаписьНабора.ДенежныеСредства) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
							ЗаписьНабора.ДенежныеСредства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНабора.ДенежныеСредства, "Эквайер");
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ЗаписьНабора.СтатьяДвиженияДенежныхСредств) Тогда
							ЗаписьНабора.СтатьяДвиженияДенежныхСредств = СПравочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						КонецЕсли;
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов")
					Или ТипРегистратора = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
					Или ТипРегистратора = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
					
					Набор = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей();
					Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Набор.Прочитать();
					
					Для каждого ЗаписьНабора из Набор Цикл
						Если ЗаписьНабора.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера
							И ТипЗнч(ЗаписьНабора.ДенежныеСредства) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
							ЗаписьНабора.ДенежныеСредства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНабора.ДенежныеСредства, "Эквайер");
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ЗаписьНабора.СтатьяДвиженияДенежныхСредств) Тогда
							ЗаписьНабора.СтатьяДвиженияДенежныхСредств = СПравочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						КонецЕсли;
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
			
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось записать движения регистра ""Движения ДС - Контрагент"" при обработке документа: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(), Выборка.Регистратор, ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПриходныйКассовыйОрдер");
	Регистраторы.Добавить("Документ.РасходныйКассовыйОрдер");
	Регистраторы.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	Регистраторы.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	
	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		ПолноеИмяРегистра,
		Параметры.Очередь);
		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли