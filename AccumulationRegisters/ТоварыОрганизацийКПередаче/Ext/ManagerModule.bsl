#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Структура допустимых отборов товаров к передаче {Склад, Организация, ОрганизацияПолучатель, НачалоПериода, КонецПериода}.
//
// Параметры:
//	Отборы - Структура - значения отборов товаров к передаче.
//
// Возвращаемое значение:
//	Структура - допустимые отборы товаров к передаче.
//
Функция ОтборыТоваровКПередаче(Отборы = Неопределено) Экспорт
	ДоступныеПоляОтбора = Новый Структура();
	ДоступныеПоляОтбора.Вставить("Склад", Неопределено);
	ДоступныеПоляОтбора.Вставить("Организация", Неопределено);
	ДоступныеПоляОтбора.Вставить("ОрганизацияПолучатель", Неопределено);
	ДоступныеПоляОтбора.Вставить("НалогообложениеНДС", Неопределено);
	ДоступныеПоляОтбора.Вставить("ТипЗапасов", Неопределено);
	ДоступныеПоляОтбора.Вставить("НачалоПериода", '00010101');
	ДоступныеПоляОтбора.Вставить("КонецПериода", '39991231235959');
	
	Если Неопределено <> Отборы Тогда
		ЗаполнитьЗначенияСвойств(ДоступныеПоляОтбора, Отборы);
	КонецЕсли;
	Возврат ДоступныеПоляОтбора;
КонецФункции

// Перечень (таблица) позиций и количеств к оформлению передач в разрезе измерений регистра товаров к передаче.
//
// Параметры:
//	Отборы - Структура - значения отборов товаров к передаче.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные для оформления передач товаров.
//
Функция ТоварыКПередаче(Отборы = Неопределено) Экспорт
	ВсеОтборы = ОтборыТоваровКПередаче(Отборы);
	
	НачалоТоваровКПередаче = НачалоТоваровКПередаче(ВсеОтборы.Организация, ВсеОтборы.Склад);
	
	Запрос = Новый Запрос(ТекстОстаткиКПередачеИПотреблению());
	Запрос.УстановитьПараметр("НачалоПериода",
		НачалоМесяца(?(ЗначениеЗаполнено(ВсеОтборы.НачалоПериода), ВсеОтборы.НачалоПериода, НачалоТоваровКПередаче)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ВсеОтборы.КонецПериода));
	Запрос.УстановитьПараметр("Склад", ВсеОтборы.Склад);
	Запрос.УстановитьПараметр("Организация", ВсеОтборы.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ВсеОтборы.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НалогообложениеНДС", ВсеОтборы.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ТипЗапасов", ВсеОтборы.ТипЗапасов);
	Результат = Запрос.Выполнить();
	
	ТоварыКПередаче = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Результат.Колонки Цикл
		Имя = Колонка.Имя;
		Если Имя = "ПериодПрихода" Или Имя = "Передано" Тогда
			Продолжить;
		КонецЕсли;
		ТоварыКПередаче.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Передано = 0.;
	Потребление = Неопределено;
	Измерение = Новый Структура(
		"НомерГТД, ВидЗапасовПолучателя, Отправитель, Склад, АналитикаУчетаНоменклатуры, Месяц, Потребления");
	Измерение.Потребления = ТоварыКПередаче.СкопироватьКолонки();

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзмерениеИзменилось =
			Измерение.АналитикаУчетаНоменклатуры <> Выборка.АналитикаУчетаНоменклатуры
			Или Измерение.Склад <> Выборка.Склад
			Или Измерение.Отправитель <> Выборка.Отправитель
			Или Измерение.ВидЗапасовПолучателя <> Выборка.ВидЗапасовПолучателя
			Или Измерение.НомерГТД <> Выборка.НомерГТД
			Или Измерение.Месяц <> НачалоМесяца(Выборка.Период);
		Если ИзмерениеИзменилось Тогда
			ДополнитьТоварыКПередаче(ТоварыКПередаче, Измерение.Потребления, Передано, ВсеОтборы);
			
			Передано = 0.;
			Потребление = Неопределено;
			ЗаполнитьЗначенияСвойств(Измерение, Выборка);
			Измерение.Месяц = НачалоМесяца(Выборка.Период);
			Измерение.Потребления.Очистить();
		КонецЕсли;
		
		Если Выборка.Потреблено > Передано Тогда
			Если Потребление = Неопределено Или Выборка.ДатаОформления > Потребление.ДатаОформления Тогда
				Потребление = Измерение.Потребления.Добавить();
				ЗаполнитьЗначенияСвойств(Потребление, Выборка);
				Потребление.Потреблено = 0.;
			КонецЕсли;
			Потребление.Потреблено = Потребление.Потреблено + Выборка.Потреблено - Передано;
			Потребление.Период = Макс(Потребление.Период, Выборка.Период);
			Передано = 0.;
		Иначе
			Передано = Передано + Выборка.Передано - Выборка.Потреблено;
		КонецЕсли;
		
	КонецЦикла;
	ДополнитьТоварыКПередаче(ТоварыКПередаче, Измерение.Потребления, Передано, ВсеОтборы);
	
	Возврат ТоварыКПередаче;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НачалоТоваровКПередаче(Организация, Склад)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТТ.Период КАК Период,
		|	ТТ.ОрганизацияВладелец,
		|	ТТ.АналитикаУчетаНоменклатуры,
		|	ТТ.ВидЗапасовПродавца,
		|	ТТ.НомерГТД,
		|	ТТ.КоличествоПриход,
		|	ТТ.КоличествоРасход
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче.Обороты( , , МЕСЯЦ,
		|		&Организация В (НЕОПРЕДЕЛЕНО, ОрганизацияВладелец)
		|	) КАК ТТ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.КлючАналитики = ТТ.АналитикаУчетаНоменклатуры
		|ГДЕ
		|	ТТ.КоличествоПриход > ТТ.КоличествоРасход
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитика.Склад КАК Справочник.Склады))
		|УПОРЯДОЧИТЬ ПО
		|	ТТ.Период
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Период, '00010101');
КонецФункции

// Текст запроса остатков к передаче и потреблению на каждый день.
// Поля результата запроса:
//		{Период, ДатаОформления, Отправитель, Получатель, Склад, АналитикаУчетаНоменклатуры,
//		ВидЗапасов, НомерГТД, ВидЗапасовПолучателя, НалогообложениеНДС, ТипЗапасов,
//		Передано, Потреблено}
// Упорядоченность:
//		{Получатель, ВидЗапасовПолучателя, Отправитель, АналитикаУчетаНоменклатуры, НомерГТД, Период}
Функция ТекстОстаткиКПередачеИПотреблению()
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Расходы.Период, ДЕНЬ) КАК ПериодРасхода,
		|	Расходы.АналитикаУчетаНоменклатуры,
		|	Расходы.ОрганизацияВладелец,
		|	Расходы.ВидЗапасовПродавца,
		|	Расходы.НомерГТД,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ)) КАК ПериодПрихода
		|ПОМЕСТИТЬ
		|	Даты
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче КАК Расходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовПродавцов
		|		ПО ВидыЗапасовПродавцов.Ссылка = Расходы.ВидЗапасовПродавца
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
		|		ПО Аналитики.КлючАналитики = Расходы.АналитикаУчетаНоменклатуры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК Приходы
		|		ПО Приходы.АналитикаУчетаНоменклатуры = Расходы.АналитикаУчетаНоменклатуры
		|		И Приходы.Период <= КОНЕЦПЕРИОДА(Расходы.Период, ДЕНЬ)
		|		И Приходы.Организация = Расходы.ОрганизацияВладелец
		|		И Приходы.ВидЗапасов = ВидыЗапасовПродавцов.ВидЗапасовВладельца
		|		И Приходы.НомерГТД = Расходы.НомерГТД
		|ГДЕ
		|	Расходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Приходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИЛИ Приходы.Количество < 0.)
		|	И &Организация В (НЕОПРЕДЕЛЕНО, Расходы.ОрганизацияВладелец)
		|	И &ОрганизацияПолучатель В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.Организация)
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.Склады))
		|	И &НалогообложениеНДС В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.НалогообложениеНДС)
		|	И &ТипЗапасов В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.ТипЗапасов)
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Расходы.Период, ДЕНЬ),
		|	Расходы.АналитикаУчетаНоменклатуры,
		|	Расходы.ОрганизацияВладелец,
		|	Расходы.ВидЗапасовПродавца,
		|	Расходы.НомерГТД
		|;
		|
		|ВЫБРАТЬ
		|	ДД.Период,
		|	(ВЫБОР
		|		КОГДА ЕСТЬNULL(Даты.ПериодПрихода, &НачалоПериода) <= НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ) ТОГДА НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ)
		|		КОГДА Даты.ПериодПрихода = ДД.Период ТОГДА ДД.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Даты.ПериодПрихода, ДЕНЬ, 1) КОНЕЦ) КАК ДатаОформления,
		|	ДД.ОрганизацияВладелец КАК Отправитель,
		|	ВидыЗапасовПродавцов.Организация КАК Получатель,
		|	Аналитики.Склад,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ВидыЗапасовПродавцов.ВидЗапасовВладельца КАК ВидЗапасов,
		|	ДД.НомерГТД,
		|	ДД.ВидЗапасовПродавца КАК ВидЗапасовПолучателя,
		|	ВидыЗапасовПродавцов.НалогообложениеНДС,
		|	ВидыЗапасовПродавцов.ТипЗапасов,
		|	(ВЫБОР
		|		КОГДА ДД.КоличествоРасход > ДД.КоличествоПриход ТОГДА ДД.КоличествоРасход - ДД.КоличествоПриход
		|		ИНАЧЕ 0. КОНЕЦ) КАК Передано,
		|	(ВЫБОР
		|		КОГДА ДД.КоличествоПриход > ДД.КоличествоРасход ТОГДА ДД.КоличествоПриход - ДД.КоличествоРасход
		|		ИНАЧЕ 0. КОНЕЦ) КАК Потреблено
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКПередаче.Обороты(
		|		&НачалоПериода, &КонецПериода, ДЕНЬ, &Организация В (НЕОПРЕДЕЛЕНО, ОрганизацияВладелец)
		|	) КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовПродавцов
		|		ПО ВидыЗапасовПродавцов.Ссылка = ДД.ВидЗапасовПродавца
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
		|		ПО Аналитики.КлючАналитики = ДД.АналитикаУчетаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Даты КАК Даты
		|		ПО Даты.ПериодРасхода = ДД.Период
		|		И Даты.АналитикаУчетаНоменклатуры = ДД.АналитикаУчетаНоменклатуры
		|		И Даты.ОрганизацияВладелец = ДД.ОрганизацияВладелец
		|		И Даты.ВидЗапасовПродавца = ДД.ВидЗапасовПродавца
		|		И Даты.НомерГТД = ДД.НомерГТД
		|ГДЕ
		|	ДД.КоличествоРасход <> ДД.КоличествоПриход
		|	И &ОрганизацияПолучатель В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.Организация)
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.Склады))
		|	И &НалогообложениеНДС В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.НалогообложениеНДС)
		|	И &ТипЗапасов В (НЕОПРЕДЕЛЕНО, ВидыЗапасовПродавцов.ТипЗапасов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗапасовПродавцов.Организация,
		|	ДД.ВидЗапасовПродавца,
		|	ДД.ОрганизацияВладелец,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ДД.НомерГТД,
		|	ДД.Период
		|";
КонецФункции

Процедура ДополнитьТоварыКПередаче(ТоварыКПередаче, Потребления, Передано, ВсеОтборы)
	Для Каждого Потребление Из Потребления Цикл
		Если Передано > 0. Тогда
			Потреблено = Мин(Потребление.Потреблено, Передано);
			Потребление.Потреблено = Потребление.Потреблено - Потреблено;
			Передано = Передано - Потреблено;
		КонецЕсли;
		Если Потребление.Потреблено > 0.
			И Потребление.ДатаОформления >= ВсеОтборы.НачалоПериода
			И Потребление.ДатаОформления <= ВсеОтборы.КонецПериода
		Тогда
			ТоварКПередаче = ТоварыКПередаче.Добавить();
			ЗаполнитьЗначенияСвойств(ТоварКПередаче, Потребление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизацийКПередаче";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеРегистра.Ссылка
	|	ИЗ
	|		ВтДанныеРегистра КАК ВтДанныеРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
	|		ПО ВтДанныеРегистра.Ссылка = СборкаТоваров.Ссылка
	|			И (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) <> СборкаТоваров.ХозяйственнаяОперация)
	|	ГДЕ
	|		НЕ СборкаТоваров.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Назначение <> ДанныеРегистра.ВидЗапасовПродавца.УдалитьНазначение
	|		И ДанныеРегистра.ВидЗапасовПродавца.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ДанныеРегистра.ВидЗапасовПродавца <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	//++ НЕ УТКА
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеПродукцииИМатериалов
	|			ПО ДвижениеПродукцииИМатериалов.Ссылка = Движения.Регистратор
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство))
	//-- НЕ УТКА
	|
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Движения.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|			ПО ПередачаМатериаловВПроизводство.Ссылка = Движения.Регистратор
	|	ГДЕ
	|		Движения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	//-- НЕ УТ
	|	) КАК Движения
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизацийКПередаче";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче;
	
	//++ НЕ УТ
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПередачаМатериаловВПроизводство");
	//-- НЕ УТ
	//++ НЕ УТКА
	Регистраторы.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	//-- НЕ УТКА
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);
		
	//++ НЕ УТ
	ДополнительныеПараметрыПроверкиБлокировки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроверкиБлокировки.ИмяВременнойТаблицы = "ВтЗаблокированныеСсылки";
	ЗаблокированныеСсылки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		Регистраторы,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыПроверкиБлокировки);
	//-- НЕ УТ
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВыборки = 
	"ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	//++ НЕ УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокированныеСсылки
	|		ПО СсылкиДляОбработки.Регистратор = ВтЗаблокированныеСсылки.Ссылка
	|ГДЕ
	|	ВтЗаблокированныеСсылки.Ссылка ЕСТЬ NULL
	//-- НЕ УТ
	|";
	
	ТекстЗапросаОбработчика = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.ВидДвижения                   КАК ВидДвижения,
	|	Движения.ОрганизацияВладелец           КАК ОрганизацияВладелец,
	|	ВЫБОР КОГДА Движения.ВидЗапасовПродавца <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасовПродавца.УдалитьНазначение
	|		И Движения.ВидЗапасовПродавца.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  КАК АналитикаУчетаНоменклатуры,
	|	Движения.ВидЗапасовПродавца            КАК ВидЗапасовПродавца,
	|	Движения.НомерГТД                      КАК НомерГТД,
	|	Движения.Количество                    КАК Количество,
	|	Движения.Возвращено                    КАК Возвращено,
	|	Движения.НалогообложениеНДС            КАК НалогообложениеНДС,
	|	ВЫБОР КОГДА НЕ Сборка.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		Сборка.ХозяйственнаяОперация
//++ НЕ УТКА
	|	КОГДА НЕ ДвижениеПродукцииИМатериалов.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		ДвижениеПродукцииИМатериалов.ХозяйственнаяОперация
//-- НЕ УТКА
//++ НЕ УТ
	|	КОГДА НЕ ПередачаМатериаловВПроизводство.ХозяйственнаяОперация ЕСТЬ NULL ТОГДА
	|		ПередачаМатериаловВПроизводство.ХозяйственнаяОперация
//-- НЕ УТ
	|	ИНАЧЕ
	|		Движения.ХозяйственнаяОперация
	|	КОНЕЦ                                  КАК ХозяйственнаяОперация,
	|	Движения.Номенклатура                  КАК Номенклатура,
	|	Движения.Характеристика                КАК Характеристика,
	|	Движения.КорВидЗапасов                 КАК КорВидЗапасов,
	|	Движения.ДокументРеализации            КАК ДокументРеализации,
	|
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL
	|		И Движения.АналитикаУчетаНоменклатуры.Назначение <> Движения.ВидЗапасовПродавца.УдалитьНазначение
	|		И Движения.ВидЗапасовПродавца.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Движения.ВидЗапасовПродавца <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.Склад = Аналитика.Склад
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И Движения.ВидЗапасовПродавца.УдалитьНазначение = Аналитика.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Сборка
	|	ПО Движения.Регистратор = Сборка.Ссылка
	|
//++ НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеПродукцииИМатериалов
	|	ПО Движения.Регистратор = ДвижениеПродукцииИМатериалов.Ссылка
//-- НЕ УТКА
	|
//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство КАК ПередачаМатериаловВПроизводство
	|	ПО Движения.Регистратор = ПередачаМатериаловВПроизводство.Ссылка
//-- НЕ УТ
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы,
	|	НомерСтроки
	|";
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапросаВыборки);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
		
		Регистратор = СтрокаТаблицы.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапросаОбработчика);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ТоварыОрганизацийКПередаче.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru = 'есть необновленные ключи. Необходимо перепровести документ вручную.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Регистратор);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли