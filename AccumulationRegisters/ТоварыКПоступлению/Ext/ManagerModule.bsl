#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вычисляет принятое количество, согласно данных регистра накопления "Товары к поступлению", которое
//  необходимо распределить между строками заказа.
//
// Параметры:
//  Отбор			 - ТаблицаЗначений	 - таблица товаров по которым необходимо получить принятое количество.
//  Корректировка	 - ТаблицаЗначений	 - таблица товаров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица принятых товаров, по которым необходимо оформить заказы.
//
Функция ТаблицаОформлено(Отбор, Корректировка) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыКПоступлению;
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОтбора.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОтбора.Колонки.Добавить("Ссылка",         МетаданныеРегистра.Измерения.ДокументПоступления.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Отбор, ТаблицаОтбора);

	Запрос = Новый Запрос();

	//Запрос оформленного количества по заказу.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Ссылка КАК ДокументПоступления
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	&Отбор КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Склад КАК Склад,
		|	Таблица.КПоступлению КАК Количество
		|ПОМЕСТИТЬ ВТКорректировка
		|ИЗ
		|	&Корректировка КАК Таблица
		|ГДЕ
		|	Таблица.КПоступлению <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Назначение КАК Назначение,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Номенклатура КАК Номенклатура,
		|		Таблица.Характеристика КАК Характеристика,
		|		Таблица.Назначение КАК Назначение,
		|		Таблица.Склад КАК Склад,
		|		ВЫБОР
		|			КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА Таблица.КПоступлению - Таблица.Принимается
		|			ИНАЧЕ Таблица.Принимается
		|		КОНЕЦ КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Фильтр
		|			ПО Таблица.Номенклатура = Фильтр.Номенклатура
		|				И Таблица.Характеристика = Фильтр.Характеристика
		|				И Таблица.Склад = Фильтр.Склад
		|				И Таблица.Назначение = Фильтр.Назначение
		|				И Таблица.ДокументПоступления = Фильтр.ДокументПоступления
		|	ГДЕ
		|		Таблица.Активность
		|		И (Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Таблица.КПоступлению <> 0
		|				ИЛИ Таблица.Принимается <> 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура,
		|		Таблица.Характеристика,
		|		Таблица.Назначение,
		|		Таблица.Склад,
		|		-Таблица.Количество
		|	ИЗ
		|		ВТКорректировка КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Фильтр
		|			ПО Таблица.Номенклатура = Фильтр.Номенклатура
		|				И Таблица.Характеристика = Фильтр.Характеристика
		|				И Таблица.Склад = Фильтр.Склад
		|				И Таблица.Назначение = Фильтр.Назначение) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Назначение,
		|	Набор.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0";

	Запрос.УстановитьПараметр("Корректировка", Корректировка);
	Запрос.УстановитьПараметр("Отбор",         ТаблицаОтбора);

	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");

	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКПоступлению";
	ИмяРегистра = "ТоварыКПоступлению";
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	СписокДокументов.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	СписокДокументов.Добавить("Документ.ВозвратТоваровОтКлиента");	
	СписокДокументов.Добавить("Документ.ЗаказНаПеремещение");
	СписокДокументов.Добавить("Документ.ЗаказНаСборку");	
	СписокДокументов.Добавить("Документ.ЗаказПоставщику");
	СписокДокументов.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");	
	СписокДокументов.Добавить("Документ.ПеремещениеТоваров");		
	СписокДокументов.Добавить("Документ.ПоступлениеТоваровУслуг");
	СписокДокументов.Добавить("Документ.ПриходныйОрдерНаТовары");
	СписокДокументов.Добавить("Документ.ПрочееОприходованиеТоваров");
	СписокДокументов.Добавить("Документ.СборкаТоваров");
	//++ НЕ УТ
	СписокДокументов.Добавить("Документ.ВозвратМатериаловИзПроизводства");
	СписокДокументов.Добавить("Документ.ВозвратСырьяОтПереработчика");
	СписокДокументов.Добавить("Документ.ВыпускПродукции");
	СписокДокументов.Добавить("Документ.ЗаказПереработчику");
	СписокДокументов.Добавить("Документ.ПоступлениеОтПереработчика");
	//-- НЕ УТ	
	//++ НЕ УТКА
	СписокДокументов.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	СписокДокументов.Добавить("Документ.ЗаказДавальца");
	СписокДокументов.Добавить("Документ.МаршрутныйЛистПроизводства");
	СписокДокументов.Добавить("Документ.ПоступлениеСырьяОтДавальца");
	СписокДокументов.Добавить("Документ.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	
	Для каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстЗапросаМеханизмаПроведения = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
		Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
								ТекстЗапросаМеханизмаПроведения,
								ПолноеИмяРегистра,
								ПолноеИмяДокумента);
								
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	КонецЦикла; 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Параметры.Очередь,
																								Неопределено,
																								ПолноеИмяРегистра,
																								МенеджерВТ,
																								ДополнительныеПараметрыВыборкиДанных);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПоступлению.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВТ КАК ИмяВТ
	|		ПО ТоварыКПоступлению.Регистратор = ИмяВТ.Регистратор
	|ГДЕ
	|	ТоварыКПоступлению.Отправитель = НЕОПРЕДЕЛЕНО
	|	И ИмяВТ.Регистратор ЕСТЬ NULL
	|	И НЕ ТоварыКПоступлению.Регистратор ССЫЛКА Документ.КорректировкаРегистров";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = ТекстЗапроса;
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмя = "РегистрНакопления.ТоварыКПоступлению";
	
	КорректировкиРегистров = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь,
																					"Документ.КорректировкаРегистров",
																					ПолноеИмя);

	Пока КорректировкиРегистров.Следующий() Цикл
		
		ПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
		ПараметрыОтметки.ЭтоДвижения = Истина;
		ПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмя;		
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(КорректировкиРегистров.Регистратор, ПараметрыОтметки);
		
	КонецЦикла;																					
																						
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	Регистраторы.Добавить("Документ.ВозвратТоваровОтКлиента");	
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");	
	Регистраторы.Добавить("Документ.ЗаказПоставщику");
	Регистраторы.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");	
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");		
	Регистраторы.Добавить("Документ.ПоступлениеТоваровУслуг");
	Регистраторы.Добавить("Документ.ПриходныйОрдерНаТовары");
	Регистраторы.Добавить("Документ.ПрочееОприходованиеТоваров");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	//++ НЕ УТ
	Регистраторы.Добавить("Документ.ВозвратМатериаловИзПроизводства");
	Регистраторы.Добавить("Документ.ВозвратСырьяОтПереработчика");
	Регистраторы.Добавить("Документ.ВыпускПродукции");
	Регистраторы.Добавить("Документ.ЗаказПереработчику");
	Регистраторы.Добавить("Документ.ПоступлениеОтПереработчика");
	//-- НЕ УТ	
	//++ НЕ УТКА
	Регистраторы.Добавить("Документ.ДвижениеПродукцииИМатериалов");
	Регистраторы.Добавить("Документ.ЗаказДавальца");
	Регистраторы.Добавить("Документ.МаршрутныйЛистПроизводства");
	Регистраторы.Добавить("Документ.ПоступлениеСырьяОтДавальца");
	Регистраторы.Добавить("Документ.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
		ПолноеИмя,
		Параметры.Очередь);
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
