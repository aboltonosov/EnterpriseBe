
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	НастроитьСписокПриСоздании();
	
	УправлениеВидимостью();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьАвтоматическоеОбновлениеПараметровСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	УстановитьОтборПоПериоду(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСостояниеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ОтборСостояние);
	
	ОткрытьФорму("Обработка.ВыполнениеЭтаповПроизводства.Форма.ОтборСостояния",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбеспечениеПриИзменении(Элемент)
	
	УстановитьОтборПоОбеспечению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭтапыПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыПроизводства.ТекущиеДанные;
	
	Если Поле.Имя = "КодСостоянияОпераций" Тогда
		
		Если Не ТекущиеДанные.СостояниеОпераций.Пустая()
			И Не ТребуетсяЗаполнениеПоОперациям(ТекущиеДанные.Ссылка) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(ТекущиеДанные.Ссылка, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьНачалоВыполнения(Команда)
	
	УстановитьСтатусВыделеннымЭтапам("Начат");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполненным(Команда)
	
	УстановитьСтатусВыделеннымЭтапам("Завершен");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыработкуСотрудников(Команда)
	
	ВыделенныеСтроки = Элементы.ЭтапыПроизводства.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		МассивСсылок = ЭтапыДляОформленияВыработки(ВыделенныеСтроки);
		
		Если МассивСсылок.Количество() > 0 Тогда
			
			ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство");
			
			ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(
				МассивСсылок,
				ВидНаряда);
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'Не требуется оформлять выработку сотрудников для выбранных этапов.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбраныЭтапы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыПроизводства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждениеНеВыбраныЭтапы();
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЭтапыПроизводства.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждениеНедоступенМножественныйВыбор();
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяОтразитьВыполнениеОпераций(ТекущиеДанные.Ссылка) Тогда
		ПоказатьПредупреждениеКомандаНеМожетБытьВыполнена();
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаСписка

&НаСервере
Процедура НастроитьСписокПриСоздании()
	
	НастроитьТекстЗапросаСписка();
	
	УстановитьПараметрыСписка();
	
	УстановитьОтборыСпискаПриСоздании();
	
	НастроитьПорядокСписка();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТекстЗапросаСписка()
	
	ТекстЗапроса = ЭтапыПроизводства.ТекстЗапроса;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Этапы"));
	
	ЭтапыПроизводства.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписка()
	
	ЭтапыПроизводства.Параметры.УстановитьЗначениеПараметра(
		"СтатусНачат",
		Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	
	ЭтапыПроизводства.Параметры.УстановитьЗначениеПараметра(
		"СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрСпискаТекущаяДата(Форма)
	
	#Если Клиент Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ЗначениеПараметра = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	Форма.ЭтапыПроизводства.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеОбновлениеПараметровСписка()
	
	Если Элементы.ЭтапыПроизводства.АвтоОбновление Тогда
		ИнтервалОбновления = Элементы.ЭтапыПроизводства.ПериодАвтоОбновления;
	Иначе
		ИнтервалОбновления = 3600;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьПараметрыСписка", ИнтервалОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыСписка()
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСпискаПриСоздании()
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		УстановитьОтборПоПодразделению(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПериод) Тогда
		УстановитьОтборПоПериоду(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		УстановитьОтборПоСостоянию(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОбеспечение) Тогда
		УстановитьОтборПоОбеспечению(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПорядокСписка()
	
	ЭтапыПроизводства.Порядок.Элементы.Очистить();
	
	Если УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Начало");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НачалоСледующегоЭтапа");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
	Иначе
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетПодразделения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ОчередьРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ЭтапыПроизводства.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ДлительностьДоВыпуска");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы(),
		КлючНастроекФормы());
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФормыКлиент()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОтборПодразделение", ОтборПодразделение);
	Настройки.Вставить("ОтборСостояние", ОтборСостояние);
	Настройки.Вставить("ОтборОбеспечение", ОтборОбеспечение);
	Настройки.Вставить("ОтборПериод", ОтборПериод);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		КлючНастроекФормы(),
		Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Обработка.ВыполнениеЭтаповПроизводства.Форма";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекФормы()
	
	Возврат "Основные";
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область ДатыГрафика
	
	Элемент = ЭтапыПроизводства.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Начало.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоСледующегоЭтапа.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Формат",
		УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
	#КонецОбласти
	
	#Область НеЗавершеныПредшественники
	
	Элемент = ЭтапыПроизводства.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих);
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	#Область ЭтапПросрочен
	
	Элемент = ЭтапыПроизводства.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЦветТекстаПроблема);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ЭтапыПроизводства,
		"Подразделение", 
		Форма.ОтборПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборПодразделение));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ЭтапыПроизводства,
		"Начало", 
		Форма.ОтборПериод.ДатаНачала, 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		, 
		ЗначениеЗаполнено(Форма.ОтборПериод.ДатаНачала));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ЭтапыПроизводства,
		"Окончание",
		Форма.ОтборПериод.ДатаОкончания,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		,
		ЗначениеЗаполнено(Форма.ОтборПериод.ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ОтборСостояние = РезультатЗакрытия;
		УстановитьОтборПоСостоянию(ЭтотОбъект);
		СохранитьНастройкиФормыКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостоянию(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ЭтапыПроизводства,
		"Состояние", 
		Форма.ОтборСостояние, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		, 
		ЗначениеЗаполнено(Форма.ОтборСостояние));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОбеспечению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ЭтапыПроизводства,
		"МатериалыНеОбеспечены", 
		Форма.ОтборОбеспечение = "МатериалыНеОбеспечены",
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборОбеспечение));
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	ГрафикИспользуется = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	Элементы.ОтборПериод.Видимость = ГрафикИспользуется;
	Элементы.Начало.Видимость = ГрафикИспользуется;
	Элементы.Окончание.Видимость = ГрафикИспользуется;
	Элементы.НачалоСледующегоЭтапа.Видимость = ГрафикИспользуется;
	Элементы.ТребуетсяРасчет.Видимость = ГрафикИспользуется;
	
	ИспользуютсяОперации = ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление");
	
	Элементы.СостояниеОпераций.Видимость = ИспользуютсяОперации;
	Элементы.КодСостоянияОпераций.Видимость = ИспользуютсяОперации;
	Элементы.ФормаВыполнениеОпераций.Видимость = ИспользуютсяОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыделеннымЭтапам(НовыйСтатус)
	
	ВыделенныеСтроки = Элементы.ЭтапыПроизводства.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		МассивСсылок = ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки);
		
		Если МассивСсылок.Количество() > 0 Тогда
			
			КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
				МассивСсылок,
				НовыйСтатус);
			
			ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
				Элементы.ЭтапыПроизводства,
				КоличествоОбработанных,
				МассивСсылок.Количество(),
				НовыйСтатус);
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбраныЭтапы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки)
	
	Результат = Новый Массив;
	ЗначениеНовогоСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2." + НовыйСтатус);
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ЭтапыПроизводства.ДанныеСтроки(Строка);
		
		Если НЕ ДанныеСтроки.Статус = ЗначениеНовогоСтатуса Тогда
			
			Результат.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеНеВыбраныЭтапы()
	
	ПоказатьПредупреждение(,НСтр("ru = 'Для выполнения действия необходимо выбрать этапы.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеНедоступенМножественныйВыбор()
	
	ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для нескольких этапов!'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеКомандаНеМожетБытьВыполнена()
	
	ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
	
КонецПроцедуры

&НаКлиенте
Функция ЭтапыДляОформленияВыработки(ВыделенныеСтроки)
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ЭтапыПроизводства.ДанныеСтроки(Строка);
		
		Если ДанныеСтроки.ОформитьВыработку Тогда
			
			Результат.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяЗаполнениеПоОперациям(Этап)
	
	Возврат РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.ТребуетсяЗаполнениеПоОперациям(Этап);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяОтразитьВыполнениеОпераций(Этап)
	
	Возврат Документы.ЭтапПроизводства2_2.ТребуетсяОтразитьВыполнениеОпераций(Этап);
	
КонецФункции

#КонецОбласти

#КонецОбласти
