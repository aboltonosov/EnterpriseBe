
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ОтображатьЗаказыКОформлению = Истина;
	ИспользоватьУправлениеПроизводством2_1 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	ИнициализироватьКомпоновщикНастроек();
	ВосстановитьНастройки();
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	ДанныеСценария = ЗначенияРеквизитовСценария(Объект.Сценарий);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСценария);
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, ОБъект.НачалоПериодаЗаказа, Объект.ОкончаниеПериодаЗаказа);
	
	УстановитьВидимостьЭлементовФормы();
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма);
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	НастройкиВидимостиИспользоватьУправлениеПроизводством2_2();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И (ВыбранноеЗначение.Свойство("РазбиватьЗаказыПоНазначениям")
		Или ВыбранноеЗначение.Свойство("РазбиватьЗаказыПоСкладам")) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		
		УстановитьВидимостьЭлементовФормы();
		Если ОтображатьЗаказыКОформлению Тогда
			ОбновитьКорзинуЗаказов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство"  И Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		СписокДокументовДляОбновления.Добавить(Параметр);
		ОбновитьДанныеКогдаФормаСтанетАктивной();
		
	ИначеЕсли ИмяСобытия = "УстановленОтбор_ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеПериода) И Объект.ОкончаниеПериода < Объект.НачалоПериода Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Окончание периода должно быть больше начала периода.'"),
			,
			"Объект.ОкончаниеПериода",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеПериодаЗаказа)
		И Объект.ОкончаниеПериодаЗаказа < Объект.НачалоПериодаЗаказа Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Окончание периода должно быть больше начала периода.'"),
			,
			"Объект.ОкончаниеПериодаЗаказа",
			, 
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ДанныеСценария = ЗначенияРеквизитовСценария(Объект.Сценарий);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСценария);
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, ОБъект.НачалоПериодаЗаказа, Объект.ОкончаниеПериодаЗаказа);
	
	Если Не ПланированиеПоНазначениям Тогда
		Назначение = Неопределено
	КонецЕсли;
	
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаЗаказаПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, ОБъект.НачалоПериодаЗаказа, Объект.ОкончаниеПериодаЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаЗаказаПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, ОБъект.НачалоПериодаЗаказа, Объект.ОкончаниеПериодаЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделенияПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ДатаВыпуска));
	КлючСтроки.Вставить("ОтборПодразделения",	ОтборПодразделения);
	КлючСтроки.Вставить("Подразделение", 	Объект.Подразделение);
	КлючСтроки.Вставить("Сценарий", 		Объект.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("Назначение", 		ТекСтрока.Назначение);
	КлючСтроки.Вставить("НачалоПериодаВыпуска", ТекСтрока.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("КонецДняДатаВыпуска", КонецДня(ТекСтрока.ДатаВыпуска));
	КлючСтроки.Вставить("ДатаВыпуска", ТекСтрока.ДатаВыпуска);
	
	Если ТекСтрока.РедактироватьПодразделение Тогда
		КлючСтроки.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Иначе
		КлючСтроки.Вставить("Подразделение", ТекСтрока.ПодразделениеДиспетчер);
	КонецЕсли;
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовОтметитьКЗаказуПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);

	КлючСтроки = Новый Структура;
	КлючСтроки.Вставить("Номенклатура",					СтрокаТаблицы.Номенклатура);
	КлючСтроки.Вставить("Характеристика",				СтрокаТаблицы.Характеристика);
	КлючСтроки.Вставить("Спецификация",					СтрокаТаблицы.Спецификация);
	КлючСтроки.Вставить("НачалоПериодаВыпуска", 		СтрокаТаблицы.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ДатаВыпуска",					СтрокаТаблицы.ДатаВыпуска);
	КлючСтроки.Вставить("РедактироватьПодразделение",	Ложь);
	
	СсылкаНеВСписке = Новый Массив;
	Строки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
	Для Каждого Строка Из Строки Цикл
		СсылкаНеВСписке.Добавить(Строка.ПодразделениеДиспетчер);
	КонецЦикла;
	
	Отбор = Новый Структура("ПодразделениеДиспетчер", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодразделениеДиспетчерЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки", Элементы.ФормированиеЗаказов.ВыделенныеСтроки));
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", 
		Новый Структура("Ключ, Отбор, СсылкаНеВСписке", СтрокаТаблицы.ПодразделениеДиспетчер, Отбор, СсылкаНеВСписке),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеДиспетчерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);

	КлючСтроки = Новый Структура;
	КлючСтроки.Вставить("Номенклатура",					СтрокаТаблицы.Номенклатура);
	КлючСтроки.Вставить("Характеристика",				СтрокаТаблицы.Характеристика);
	КлючСтроки.Вставить("Спецификация",					СтрокаТаблицы.Спецификация);
	КлючСтроки.Вставить("НачалоПериодаВыпуска", 		СтрокаТаблицы.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ДатаВыпуска",					СтрокаТаблицы.ДатаВыпуска);
	КлючСтроки.Вставить("РедактироватьПодразделение",	Ложь);
	
	СсылкаНеВСписке = Новый Массив;
	Строки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
	Для Каждого Строка Из Строки Цикл
		Если ВыбранноеЗначение = Строка.ПодразделениеДиспетчер Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(, НСтр("ru = 'По выбранному подразделению есть планы.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСкладПриИзменении(Элемент)
	
	Если РазбиватьЗаказыПоСкладам И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовДатаВыпускаПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзинаЗаказов

&НаКлиенте
Процедура КорзинаЗаказовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	Если Строка <> Неопределено И (Поле.Имя = "КорзинаЗаказовПодразделениеДиспетчер"
		Или Поле.Имя = "КорзинаЗаказовСклад") Тогда
		СтрокаКорзины = КорзинаЗаказов.НайтиПоИдентификатору(Строка);
		
		Если Поле.Имя = "КорзинаЗаказовПодразделениеДиспетчер" Тогда
			ИменаПолей = "ПодразделениеДиспетчер";
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Назначить для выделенного товара подразделение диспетчер: %1?'"), СтрокаКорзины.ПодразделениеДиспетчер);
		ИначеЕсли Поле.Имя = "КорзинаЗаказовСклад" Тогда
			ИменаПолей = "Склад";
			ТекстВопроса =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Назначить для выделенного товара склад: %1?'"),СтрокаКорзины.Склад);
		Иначе
			ИменаПолей= "";
			ТекстВопроса = "";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ИменаПолей) Тогда 
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Назначить'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не назначать'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("ИменаПолей", ИменаПолей);
			ДополнительныеПараметры.Вставить("СтрокаКорзины", СтрокаКорзины);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("КорзинаЗаказовПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ИменаПолей = ДополнительныеПараметры.ИменаПолей;
		СтрокаКорзины = ДополнительныеПараметры.СтрокаКорзины;
		
		Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
			Если Не СтрокаТЧ.РедактироватьПодразделение И ИменаПолей = "Подразделение" Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКорзины, ИменаПолей);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() =0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Попытка	
		ОтметитьКЗаказу = ПараметрыПеретаскивания.Значение[0].ОтметитьКЗаказу;
	Исключение
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "ОкончаниеПериода"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодЗаказа(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодЗаказаЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериодаЗаказа", "ОкончаниеПериодаЗаказа"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.Заполнить");
	
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение,
			НСтр("ru='В таблице имеются строки. При обновлении данных из планов строки будут очищены. Продолжить?'"), 
			Кнопки, 0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка");
	Иначе
		ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область КомандыТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ОтображатьЗаказыКОформлению(Команда)
	
	ОтображатьЗаказыКОформлениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСозданияЗаказа(Команда)
	
	ПараметрыСозданияЗаказа = Новый Структура();
	ПараметрыСозданияЗаказа.Вставить("РазбиватьЗаказыПоНазначениям", РазбиватьЗаказыПоНазначениям);
	ПараметрыСозданияЗаказа.Вставить("РазбиватьЗаказыПоСкладам", РазбиватьЗаказыПоСкладам);
	ПараметрыСозданияЗаказа.Вставить("ВидимостьНазначения", ПланированиеПоНазначениям И ИспользоватьОбособленноеОбеспечениеЗаказов);
	
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.ПараметрыСозданияЗаказа", ПараметрыСозданияЗаказа, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеДиспетчер(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ПодразделениеДиспетчер", Истина);
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		Если Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока).РедактироватьПодразделение Тогда
			ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в которых разрешено редактирование подразделения-диспетчера.'"));
		Возврат;
	КонецЕсли;
	
	СсылкаНеВСписке = ПолучитьПодразделенияСПланамиПоВыделеннымСтрокам(ВыделенныеСтроки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодразделениеДиспетчерЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", 
		Новый Структура("Ключ, Отбор, СсылкаНеВСписке", СтрокаТаблицы.ПодразделениеДиспетчер, Отбор, СсылкаНеВСписке),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	Склад = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", 
		ЭтотОбъект, 
		Новый Структура("СтрокаТаблицы", СтрокаТаблицы));
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", 
		Новый Структура("Ключ", СтрокаТаблицы.Склад),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ФормированиеЗаказов;
	ДанныеТаблицы = Объект.ФормированиеЗаказов;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		Действия = Новый Структура;
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуВыпуска(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьДатуВыпускаЗавершение", ЭтотОбъект);
	
	ПоказатьВводДаты(Оповещение, 
		Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаВыпуска,
		НСтр("ru = 'Введите дату выпуска'"),
		ЧастиДаты.Дата);
		
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределить(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыФормы.Вставить("НачалоПериодаВыпуска", Элементы.ФормированиеЗаказов.ТекущиеДанные.НачалоПериодаВыпуска);
	ПараметрыФормы.Вставить("ДатаВыпуска", Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаВыпуска);
	ПараметрыФормы.Вставить("ТипПланирования", "ПланированиеПроизводства");
	
	Оповещение = Новый ОписаниеОповещения("ПеренестиИлиРаспределитьЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормированиеЗаказовПоПланамРаспределениеИПеренос",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПошаговогоМастера

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьНастройки();
		ЗаполнитьНаКлиенте();
		
		Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
			Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
		ОбновитьКорзинуЗаказов();
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Нет заказов к оформлению. Отметьте флажком количество в колонке 
				|""К заказу"" для номенклатуры которую необходимо заказать.'");
			
			ПоказатьПредупреждение(,ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		СоздатьЗаказыНаСервере();
		
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
			Список = Список2_2;
		Иначе
			Список = Список2_1;
		КонецЕсли;
	
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru='Сформированные заказы'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		ОчиститьСообщения();
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить заказы'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос
				(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru = 'Список созданных заказов не пуст. Созданные заказы будут удалены. Удалить заказы и продолжить?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		КорзинаЗаказов.Очистить();
		Объект.ФормированиеЗаказов.Очистить();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаказыНаСервере(СформированныеЗаказы.ВыгрузитьЗначения());
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	КорзинаЗаказов.Очистить();
	ОчиститьСообщения();
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОтображенияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовПодразделениеДиспетчер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.РедактироватьПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы(Страница)
	
	Если Страница = Элементы.СтраницаШаг1 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 1 из 3. Отбор планов'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 2 из 3. Определение состава и объема заказа'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 3 из 3. Уточнение сформированных заказов'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ФормаОтображатьЗаказыКОформлению.Пометка = ОтображатьЗаказыКОформлению;
	Элементы.ГруппаЗаказыКОформлению.Видимость        = ОтображатьЗаказыКОформлению;
	
	Элементы.КорзинаЗаказовСклад.Видимость            = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	Элементы.ФормированиеЗаказовСклад.Видимость       = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	Элементы.ФормаЗаполнитьСклад.Видимость            = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	
	ВидимостьНазначения = ПланированиеПоНазначениям И ИспользоватьОбособленноеОбеспечениеЗаказов;
	Элементы.КорзинаЗаказовНазначение.Видимость                      = РазбиватьЗаказыПоНазначениям И ВидимостьНазначения;
	
	Элементы.ФормированиеЗаказовПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;
	Элементы.ФормированиеЗаказовКонтекстноеМенюПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ДалееШаг2.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг3;
		Элементы.ЗавершитьФормированиеЗаказовШаг3.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(Форма)
	
	ВидимостьКолонокПодразделения = Не (Форма.ОтборПодразделения И ЗначениеЗаполнено(Форма.Объект.Подразделение));
	Форма.Элементы.ФормированиеЗаказовПодразделениеДиспетчер.Видимость = ВидимостьКолонокПодразделения;
	Форма.Элементы.ФормированиеЗаказовЗаполнитьПодразделениеДиспетчерВВыделенныхСтроках.Видимость = ВидимостьКолонокПодразделения;
	Форма.Элементы.Подразделение.Доступность = Форма.ОтборПодразделения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииСценария(Форма)
	
	ВидимостьНазначения = Форма.ПланированиеПоНазначениям И Форма.ИспользоватьОбособленноеОбеспечениеЗаказов;
	Форма.Элементы.ГруппаДополнительныеОтборы.Видимость = ВидимостьНазначения;
	Форма.Элементы.ФормированиеЗаказовНазначение.Видимость = ВидимостьНазначения;
	Форма.Элементы.КорзинаЗаказовНазначение.Видимость = ВидимостьНазначения И Форма.РазбиватьЗаказыПоНазначениям;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиВидимостиИспользоватьУправлениеПроизводством2_2()
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		Элементы.Список2_1.Видимость = Ложь;
	Иначе
		Элементы.Список2_2.Видимость = Ложь;
		Элементы.КорзинаЗаказовНачатьНеРанее.Видимость = Ложь;
		Элементы.КорзинаЗаказовДатаПотребности.Видимость = Ложь;
		СформированныеЗаказы.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновки2_2");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновки");
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	Настройки.Вставить("Сценарий",                  Объект.Сценарий);
	Настройки.Вставить("НачалоПериода",             Объект.НачалоПериода);
	Настройки.Вставить("ОкончаниеПериода",          Объект.ОкончаниеПериода);
	Настройки.Вставить("НачалоПериодаЗаказа",       Объект.НачалоПериодаЗаказа);
	Настройки.Вставить("ОкончаниеПериодаЗаказа",    Объект.ОкончаниеПериодаЗаказа);
	Настройки.Вставить("ОтборПодразделения",        ОтборПодразделения);
	Настройки.Вставить("Подразделение",             Объект.Подразделение);
	Настройки.Вставить("Организация",               Объект.Организация);
	Настройки.Вставить("РазбиватьЗаказыПоСкладам",  РазбиватьЗаказыПоСкладам);
	Настройки.Вставить("РазбиватьЗаказыПоНазначениям",  РазбиватьЗаказыПоНазначениям);
	Настройки.Вставить("Назначение",                Объект.Назначение);
	
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	КлючОбъекта = "Обработка.ФормированиеЗаказовНаПроизводствоПоПлану";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "Настройки", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции 

#КонецОбласти

#Область ПроцедурыОбработчикиКомандЗавершение

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт 
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодЗаказаЗавершение(Период, ДополнительныеПараметры) Экспорт 
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, ОБъект.НачалоПериодаЗаказа, Объект.ОкончаниеПериодаЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаКлиенте()
	
	Объект.ФормированиеЗаказов.Очистить();
	КорзинаЗаказов.Очистить();
	ОбновитьНаСервере();
	Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Нет утвержденного плана для сценария %1, соответствующего установленным отборам. Необходимо изменить отборы.'"),
			Объект.Сценарий);
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеДиспетчерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ПодразделениеДиспетчер = Результат;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеДиспетчер) Тогда
		Возврат;
	КонецЕсли; 
	
	ПодразделениеДиспетчерИзменен = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.ПодразделениеДиспетчер <> ПодразделениеДиспетчер Тогда
			ПодразделениеДиспетчерИзменен = Истина;
			СтрокаТаблицы.ПодразделениеДиспетчер = ПодразделениеДиспетчер;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодразделениеДиспетчерИзменен И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	Склад = Результат;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли; 
	
	СкладИзменен = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			СкладИзменен = Истина;
			СтрокаТаблицы.Склад = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкладИзменен И РазбиватьЗаказыПоСкладам Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределитьЗавершение(ПараметрыРаспределения, ДополнительныеПараметры) Экспорт 
	
	Если ПараметрыРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,
		Элементы.ФормированиеЗаказов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,Знач ВыделенныеСтроки) 
	
	Планирование.ПеренестиИлиРаспределитьНаСервере(ПараметрыРаспределения,
		ВыделенныеСтроки,
		Объект.ФормированиеЗаказов);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуВыпускаЗавершение(Дата, ДополнительныеПараметры) Экспорт 
	
	Если Дата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		СтрокаТЧ.ДатаВыпуска = Дата;
	КонецЦикла;
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПолученияПлановИЗаказов

&НаСервере
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПроизводстваОбороты.КоличествоОборот КАК Количество,
	|	ПланыПроизводстваОбороты.Регистратор КАК Документ,
	|	ПланыПроизводстваОбороты.ПланПроизводства.МоментВремени КАК МоментВремени,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Дата КАК ДатаДокумента,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И (НЕ &ОтборПодразделения
	|				ИЛИ Подразделение = &Подразделение)
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Спецификация = &Спецификация) КАК ПланыПроизводстваОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокПланПроизводства
	|		ПО ПланыПроизводстваОбороты.Регистратор = ДокПланПроизводства.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Документ,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК ДатаДокумента,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК НомерДокумента,
	|	СУММА(ЗаказНаПроизводствоПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА НЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение В (&ПодразделенияПоКоторымЕстьПланы)
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.ДатаПотребности МЕЖДУ &НачалоПериодаВыпуска И &КонецДняДатаВыпуска
	|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводствоПродукция.Номенклатура = &Номенклатура
	|	И ЗаказНаПроизводствоПродукция.Характеристика = &Характеристика
	|	И ВЫБОР
	|			КОГДА &ПланированиеПоНазначениям И &Назначение<>ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ЗаказНаПроизводствоПродукция.Назначение = &Назначение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.Количество <> 0
	|	И ВЫБОР
	|			КОГДА &Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Спецификация = &Спецификация
	|		КОНЕЦ
	|	И &ИспользоватьУправлениеПроизводством2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводствоПродукция.Ссылка,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ 
	|	ЗаказНаПроизводство2_2Продукция.Ссылка КАК Документ,
	|	ЗаказНаПроизводство2_2.Дата КАК ДатаДокумента,
	|	ЗаказНаПроизводство2_2.Номер КАК НомерДокумента,
	|	СУММА(ЗаказНаПроизводство2_2Продукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|		ПО ЗаказНаПроизводство2_2Продукция.Ссылка = ЗаказНаПроизводство2_2.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И НЕ ЗаказНаПроизводство2_2.Подразделение В (&ПодразделенияПоКоторымЕстьПланы)
	|	И ЗаказНаПроизводство2_2.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)
	|	И ЗаказНаПроизводство2_2Продукция.Номенклатура = &Номенклатура
	|	И ЗаказНаПроизводство2_2Продукция.Характеристика = &Характеристика
	|	И ВЫБОР
	|			КОГДА &ПланированиеПоНазначениям
	|				ТОГДА ЗаказНаПроизводство2_2Продукция.Назначение = &Назначение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЗаказНаПроизводство2_2Продукция.Количество <> 0
	|	И ВЫБОР
	|			КОГДА &Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2Продукция.Спецификация = &Спецификация
	|		КОНЕЦ
	|	И ЗаказНаПроизводство2_2.ДатаПотребности МЕЖДУ &НачалоПериодаВыпуска И &КонецДняДатаВыпуска
	|	И &ИспользоватьУправлениеПроизводством2_2
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводство2_2Продукция.Ссылка,
	|	ЗаказНаПроизводство2_2.Дата,
	|	ЗаказНаПроизводство2_2.Номер";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	ПодразделенияПоКоторымЕстьПланы = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КлючСтроки.Подразделение) Тогда

		КлючСтроки.Удалить("Подразделение");
		КлючСтроки.Удалить("КонецДняДатаВыпуска");
		КлючСтроки.Вставить("РедактироватьПодразделение", Ложь);
		
		НайденныеСтроки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
		Для Каждого Строка Из НайденныеСтроки Цикл
			ПодразделенияПоКоторымЕстьПланы.Добавить(Строка.ПодразделениеДиспетчер);
		КонецЦикла;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодразделенияПоКоторымЕстьПланы", ПодразделенияПоКоторымЕстьПланы);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ИспользоватьУправлениеПроизводством2_2);
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		Иначе
			ОткрытьФорму("Документ.ЗаказнаПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область СозданиеУдалениеЗаказов

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	ТаблицаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, "
		| ПодразделениеДиспетчер,
		| Номенклатура,
		| Характеристика,
		| Назначение,
		| НаправлениеДеятельности,
		| Давалец,
		| Договор,
		| Спецификация,
		| Склад,
		| ДатаЗаказа,
		| ДатаВыпуска,
		| Упаковка,
		| КоличествоУпаковок,
		| Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Количество
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.КоличествоУпаковок > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Количество
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Количество,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаказа";
	
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	
	СписокОшибок = Новый СписокЗначений;
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Колонки = "ПодразделениеДиспетчер";
	
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		Колонки = Колонки + ",ДатаЗаказа,ДатаВыпуска,Давалец,Договор";
	КонецЕсли;
	
	Если РазбиватьЗаказыПоСкладам Тогда
		Колонки = Колонки + ",Склад";
	КонецЕсли;
	
	Если РазбиватьЗаказыПоНазначениям Тогда
		Колонки = Колонки + ",Назначение";
	КонецЕсли;
	
	ТаблицаДокументов = ТаблицаЗаказов.Скопировать(, Колонки);
	ТаблицаДокументов.Свернуть(Колонки,);
	ТекущаяДата = ТекущаяДатаСеанса();
	Для каждого СтрокаДокумента Из ТаблицаДокументов Цикл; 
		
		ДанныеЗаполнения = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокумента);
		Товары = ТаблицаЗаказов.Скопировать(ДанныеЗаполнения);
		
		Если Не ИспользоватьУправлениеПроизводством2_2 Тогда
			// Изменим имена колонок на нужные названия табличной части "Продукция"
			Товары.Колонки.ДатаЗаказа.Имя = "НачатьНеРанее";
			Товары.Колонки.ДатаВыпуска.Имя = "ДатаПотребности";
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Товары", Товары);
		ДанныеЗаполнения.Вставить("Подразделение", СтрокаДокумента.ПодразделениеДиспетчер);
		ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
		
		Если РазбиватьЗаказыПоНазначениям Тогда
			ДанныеЗаполнения.Вставить("НаправлениеДеятельности", Товары[0].НаправлениеДеятельности);
		Иначе
			НаправленияДеятельности = Товары.Скопировать(,"НаправлениеДеятельности");
			НаправленияДеятельности.Свернуть("НаправлениеДеятельности");
			Если НаправленияДеятельности.Количество() = 1 Тогда
				ДанныеЗаполнения.Вставить("НаправлениеДеятельности", НаправленияДеятельности[0].НаправлениеДеятельности);
			КонецЕсли
		КонецЕсли;
		
		Если ИспользоватьУправлениеПроизводством2_2
			И ЗначениеЗаполнено(СтрокаДокумента.Давалец) Тогда
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
			ДанныеЗаполнения.Вставить("Партнер", СтрокаДокумента.Давалец);
			ДанныеЗаполнения.Вставить("Договор", СтрокаДокумента.Договор);
		КонецЕсли;
		
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
			ДанныеЗаполнения.Вставить("НачатьНеРанее", СтрокаДокумента.ДатаЗаказа);
			ДанныеЗаполнения.Вставить("ДатаПотребности", СтрокаДокумента.ДатаВыпуска);
			ДанныеЗаполнения.Вставить("Источник", "ФормированиеЗаказовНаПроизводствоПоПлану");
		КонецЕсли;
		
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
			ДокументОбъект = Документы.ЗаказНаПроизводство2_2.СоздатьДокумент();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
		Иначе
			ДокументОбъект = Документы.ЗаказНаПроизводство.СоздатьДокумент();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
		КонецЕсли;
		ДокументОбъект.Дата = ТекущаяДата;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		ЗаписатьЗаказНаСервере(ДокументОбъект, СписокОшибок);
		
	КонецЦикла; 
	
	Для каждого ЭлементСписка Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементСписка.Представление, ЭлементСписка.Значение);
		ЭлементСписка.Значение = Неопределено;
	КонецЦикла;
	СписокОшибок = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказНаСервере(ДокументОбъект, СписокОшибок)

	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Формирование заказов на производство по плану"".'");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	КэшированныеЗначения = Неопределено;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументОбъект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	ТекстОшибкиЗаписи = НСтр("ru='%1 невозможно записать документ по причине:
								|%2'");
	ТекстОшибкиЗаполнения = НСтр("ru='%1 невозможно провести по причине некорректного заполнения.'");
	
	Попытка
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			СписокОшибок.Добавить(ДокументОбъект,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)));
		КонецЕсли;
		
		СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование заказов на производство по плану'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТекстОшибки = ОписаниеОшибки();
		СписокОшибок.Добавить(ДокументОбъект,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки));
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = НСтр("ru='Имеются ссылки на объект %1  %2. Документ не удален'");
	
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
				//++ НЕ УТКА
				Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании")
				Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.СостоянияЗаказовНаПроизводство")
				//-- НЕ УТКА
				Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Ссылка[1]) = Тип("СправочникСсылка.Назначения") Тогда
				
				МассивНазачений = Новый Массив;
				МассивНазачений.Добавить(Ссылка[1]);
				ТабСсылокНазначения = НайтиПоСсылкам(МассивНазачений);
				ЕстьСсылкиНаНазначения = Ложь;
				
				Для Каждого СсылкаНазначения из ТабСсылокНазначения Цикл
					
					Если СсылкаНазначения[0] <> СсылкаНазначения[1]
						И СсылкаНазначения[0] <> Ссылка[0]
						И ТипЗнч(СсылкаНазначения[1]) <> Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
						//++ НЕ УТКА
						И ТипЗнч(СсылкаНазначения[1]) <> Тип("РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании")
						И ТипЗнч(СсылкаНазначения[1]) <> Тип("РегистрСведенийКлючЗаписи.СостоянияЗаказовНаПроизводство")
						//-- НЕ УТКА
						Тогда
						
						ЕстьСсылкиНаНазначения = Истина;
						
						Прервать;
					КонецЕсли
					
				КонецЦикла;
				
				Если Не ЕстьСсылкиНаНазначения Тогда
					СсылкиНаУдаление.Добавить(Ссылка[1]);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
				
				СсылкиНаУдаление.Удалить(Индекс);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовСценария(Сценарий)
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "Периодичность, ПланированиеПоНазначениям");
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("Периодичность", Неопределено);
		Результат.Вставить("ПланированиеПоНазначениям", Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиДатыКПериодичностиСценария(Форма, ДатаНачала, ДатаОкончания)
	
	НоваяДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(
		ДатаНачала, Форма.Периодичность);
	
	ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачала), НоваяДатаНачала, ДатаНачала);
	
	НоваяДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(
		ДатаОкончания, Форма.Периодичность);
		
	ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), НоваяДатаОкончания, ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	Запрос.УстановитьПараметр("НачалоПериода",		Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",	?(ЗначениеЗаполнено(Объект.ОкончаниеПериода),КонецДня(Объект.ОкончаниеПериода),Объект.ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоПериодаЗаказа", Объект.НачалоПериодаЗаказа);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗаказа",	?(ЗначениеЗаполнено(Объект.ОкончаниеПериодаЗаказа),КонецДня(Объект.ОкончаниеПериодаЗаказа),Объект.ОкончаниеПериодаЗаказа));
	Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
	Запрос.УстановитьПараметр("Подразделение",		Объект.Подразделение);
	Запрос.УстановитьПараметр("ОтборПодразделения", ОтборПодразделения);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.УстановитьПараметр("ОтборПоНазначению", ЗначениеЗаполнено(Объект.Назначение));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Таблица = Результат.Выгрузить();
		ТаблицаФормированиеЗаказов.Загрузить(Таблица);
		Если ОтборПодразделения Тогда
			ТаблицаФормированиеЗаказовСОтбором = Таблица.Скопировать(Новый Структура("ПодразделениеДиспетчер", Объект.Подразделение));
		Иначе
			ТаблицаФормированиеЗаказовСОтбором = Таблица;
		КонецЕсли;
		
		Объект.ФормированиеЗаказов.Загрузить(ТаблицаФормированиеЗаказовСОтбором);
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = СтрокаЗаказа.НачалоПериодаВыпуска;
			СтрокаЗаказа.Период.ДатаОкончания = СтрокаЗаказа.ДатаВыпуска;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		Если ПроверитьЕстьДокументыДляОбновления() Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект), 
				НСтр("ru='Заказы на производство были изменены. Хотите обновить данные? При обновлении строки будут очищены.'"), 
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru='Формирование заказов на производство по плану'"));
		КонецЕсли;
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьДокументыДляОбновления()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	ТаблицаФормированиеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаФормированиеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаФормированиеЗаказов.Спецификация КАК Спецификация,
	|	ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска,
	|	ТаблицаФормированиеЗаказов.ДатаВыпуска КАК ДатаВыпуска,
	|	ТаблицаФормированиеЗаказов.РедактироватьПодразделение КАК РедактироватьПодразделение
	|ПОМЕСТИТЬ ТаблицаФормированиеЗаказов
	|ИЗ
	|	&ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ПО ЗаказНаПроизводствоПродукция.Номенклатура = ТаблицаФормированиеЗаказов.Номенклатура
	|			И ЗаказНаПроизводствоПродукция.Характеристика = ТаблицаФормированиеЗаказов.Характеристика
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА ТаблицаФормированиеЗаказов.РедактироватьПодразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.ДатаПотребности МЕЖДУ ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска И ТаблицаФормированиеЗаказов.ДатаВыпуска
	|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводствоПродукция.Ссылка В(&СписокДокументовДляОбновления)
	|	И &ИспользоватьУправлениеПроизводством2_1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2Продукция.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ПО ЗаказНаПроизводство2_2Продукция.Номенклатура = ТаблицаФормированиеЗаказов.Номенклатура
	|			И ЗаказНаПроизводство2_2Продукция.Характеристика = ТаблицаФормированиеЗаказов.Характеристика
	|ГДЕ
	|	ЗаказНаПроизводство2_2Продукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА ТаблицаФормированиеЗаказов.РедактироватьПодразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2Продукция.Ссылка.Подразделение = ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|		КОНЕЦ
	|	И ЗаказНаПроизводство2_2Продукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)
	|	И ЗаказНаПроизводство2_2Продукция.Ссылка.ДатаПотребности МЕЖДУ ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска И ТаблицаФормированиеЗаказов.ДатаВыпуска
	|	И ЗаказНаПроизводство2_2Продукция.Ссылка В(&СписокДокументовДляОбновления)
	|	И &ИспользоватьУправлениеПроизводством2_2";
	
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ИспользоватьУправлениеПроизводством2_2);
	Запрос.УстановитьПараметр("СписокДокументовДляОбновления", СписокДокументовДляОбновления);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ТаблицаФормированиеЗаказов", ТаблицаФормированиеЗаказов.Выгрузить());
	
	ЗаказыНеВходятВПланы = Запрос.Выполнить().Пустой();
	СписокДокументовДляОбновления.Очистить();
	
	Возврат Не ЗаказыНеВходятВПланы;
	
КонецФункции

&НаСервере
Процедура ОтображатьЗаказыКОформлениюНаСервере()
	
	ОтображатьЗаказыКОформлению = Не ОтображатьЗаказыКОформлению;
	УстановитьВидимостьЭлементовФормы();
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКорзинуЗаказов()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	Колонки = "ПодразделениеДиспетчер";
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		Колонки = Колонки + ", ДатаЗаказа, ДатаВыпуска";
	КонецЕсли;
	Если РазбиватьЗаказыПоСкладам Тогда
		Колонки = Колонки + ",Склад";
	КонецЕсли;	
	Если РазбиватьЗаказыПоНазначениям Тогда
		Колонки = Колонки + ",Назначение";
	КонецЕсли;
	
	ТаблицаКорзинаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, Колонки + ", КоличествоУпаковок");
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок>0 Тогда
			Строка.КоличествоУпаковок = 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКорзинаЗаказов.Свернуть(Колонки, "КоличествоУпаковок");
	КорзинаЗаказов.Очистить();
	
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КорзинаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВсегоСтрок = Строка.КоличествоУпаковок;
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
			НоваяСтрока.НачатьНеРанее = Строка.ДатаЗаказа;
			НоваяСтрока.ДатаПотребности = Строка.ДатаВыпуска;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделенияСПланамиПоВыделеннымСтрокам(ИдентификаторыСтрок)
	
	Таблица = ТаблицаФормированиеЗаказов.Выгрузить();
	ТаблицаВыделенныеСтроки = Таблица.СкопироватьКолонки();
	
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		НоваяСтрока = ТаблицаВыделенныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыделенныеСтроки.Номенклатура КАК Номенклатура,
	|	ТаблицаВыделенныеСтроки.Характеристика КАК Характеристика,
	|	ТаблицаВыделенныеСтроки.Спецификация КАК Спецификация,
	|	ТаблицаВыделенныеСтроки.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска,
	|	ТаблицаВыделенныеСтроки.ДатаВыпуска КАК ДатаВыпуска
	|ПОМЕСТИТЬ ТаблицаВыделенныеСтроки
	|ИЗ
	|	&ТаблицаВыделенныеСтроки КАК ТаблицаВыделенныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	ТаблицаФормированиеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаФормированиеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаФормированиеЗаказов.Спецификация КАК Спецификация,
	|	ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска,
	|	ТаблицаФормированиеЗаказов.ДатаВыпуска КАК ДатаВыпуска,
	|	ТаблицаФормированиеЗаказов.РедактироватьПодразделение КАК РедактироватьПодразделение
	|ПОМЕСТИТЬ ТаблицаФормированиеЗаказов
	|ИЗ
	|	&ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|ИЗ
	|	ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыделенныеСтроки КАК ТаблицаВыделенныеСтроки
	|		ПО ТаблицаФормированиеЗаказов.Номенклатура = ТаблицаВыделенныеСтроки.Номенклатура
	|			И ТаблицаФормированиеЗаказов.Характеристика = ТаблицаВыделенныеСтроки.Характеристика
	|			И ТаблицаФормированиеЗаказов.Спецификация = ТаблицаВыделенныеСтроки.Спецификация
	|			И ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска = ТаблицаВыделенныеСтроки.НачалоПериодаВыпуска
	|			И (ТаблицаФормированиеЗаказов.РедактироватьПодразделение = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ТаблицаФормированиеЗаказов",Таблица);
	Запрос.УстановитьПараметр("ТаблицаВыделенныеСтроки",ТаблицаВыделенныеСтроки);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПодразделениеДиспетчер");
	
КонецФункции

#КонецОбласти

#КонецОбласти
