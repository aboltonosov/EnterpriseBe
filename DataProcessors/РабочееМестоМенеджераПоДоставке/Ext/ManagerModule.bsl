#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТоварыПоЗаданиюНаПеревозку(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КоллекцияКомандПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	Документы.ЗаданиеНаПеревозку.ДобавитьКомандыПечати(КоллекцияКомандПечати);
	Для Каждого КомандаПечати Из КоллекцияКомандПечати Цикл
		Если ПустаяСтрока(КомандаПечати.МенеджерПечати) Тогда
			КомандаПечати.МенеджерПечати = "Документ.ЗаданиеНаПеревозку";
		КонецЕсли;
	КонецЦикла;
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.ЗаданиеНаПеревозку");
	КоллекцияКомандПечати.ЗаполнитьЗначения("КоманднаяПанельЗаданияНаПеревозкуВРаботе", "МестоРазмещения");
	ДополнитьУникальнымиКомандами(КоллекцияКомандПечати, КомандыПечати);
	
	// Этикетки доставки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокДоставки";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ЭтикеткаДоставки";
	КомандаПечати.Представление = НСтр("ru = 'Этикетки доставки'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.МестоРазмещения = "КоманднаяПанельДокументыДляПеревозчиков";
	ТипыОбъектовПечати = Новый Массив;
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	//++ НЕ УТКА
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.ПередачаДавальцу"));
	//-- НЕ УТКА
	//++ НЕ УТ
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.ПередачаСырьяПереработчику"));
	//-- НЕ УТ
	КомандаПечати.ТипыОбъектовПечати = ТипыОбъектовПечати;
	
	// Комплект документов на принтер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументов";
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.МестоРазмещения = "КоманднаяПанельДокументыДляПеревозчиков";

	// Комплект документов с настройкой...
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.МестоРазмещения = "КоманднаяПанельДокументыДляПеревозчиков";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		
		// 1-Т (Товарно-транспортные накладные)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН";
		КомандаПечати.Представление = НСтр("ru = 'Товарно-транспортная накладная (1-Т)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.МестоРазмещения = "КоманднаяПанельДокументыДляПеревозчиков";
		
		// Транспортные накладные
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
		КомандаПечати.Представление = НСтр("ru = 'Транспортные накладные'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.МестоРазмещения = "КоманднаяПанельДокументыДляПеревозчиков";
		
	КонецЕсли;
	
	КоллекцияКомандПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.РеализацияТоваровУслуг");
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.ПеремещениеТоваров");
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.ВозвратТоваровПоставщику");
	//++ НЕ УТКА
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.ПередачаДавальцу");
	//-- НЕ УТКА
	//++ НЕ УТ
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КоллекцияКомандПечати, "Документ.ПередачаСырьяПереработчику");
	//-- НЕ УТ
	КоллекцияКомандПечати.ЗаполнитьЗначения("КоманднаяПанельДокументыДляПеревозчиков", "МестоРазмещения");
	ДополнитьУникальнымиКомандами(КоллекцияКомандПечати, КомандыПечати);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыРеестр") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыРеестр",
			НСтр("ru = 'Сертификаты (реестр)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуРеестрСертификатовНоменклатуры(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_РеестрСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументов",
			НСтр("ru = 'Сертификаты (по каждой позиции документа)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументов(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументовБезДублей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументовБезДублей",
			НСтр("ru = 'Сертификаты (по одному на сертификат)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументовБезДублей(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьУникальнымиКомандами(КоллекцияКомандПечати, КомандыПечати)
	УникальныеКоманды = Новый Соответствие;
	Для Каждого КомандаПечати Из КоллекцияКомандПечати Цикл
		КлючУникальности = СокрЛП(ВРег(КомандаПечати.МенеджерПечати)) + СокрЛП(ВРег(КомандаПечати.Идентификатор)) + СокрЛП(ВРег(КомандаПечати.Обработчик));
		Если УникальныеКоманды[КлючУникальности] = Неопределено Тогда 
			НоваяКоманда = КомандыПечати.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, КомандаПечати);
			УникальныеКоманды.Вставить(КлючУникальности, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли