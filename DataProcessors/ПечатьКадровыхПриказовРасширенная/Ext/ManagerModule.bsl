#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПодходящиеОбъекты = Новый Массив;
	
	
	// 4D:ERP для Беларуси, Юлия, 01.08.2017 16:06:24 
	//Перенести макеты печатных форм из 2.1.3.266 в 2.2.3.138, № 15621
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6а") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т6а", НСтр("ru = 'Приказ о предоставлении отпуска работникам'"),
			ТабличныйДокументПриказаТ6а(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т6а"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т6а");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т60_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т60_Локализация", НСтр("ru = 'Записка - расчет о предоставлении отпуска работнику'"),
			ТабличныйДокументЗапискиРасчетаОПредоставленииОтпуска(МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т60_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т61_Локализация") Тогда
		Если ВыбратьПодходящиеОбъектыПечати(МассивОбъектов, ПодходящиеОбъекты, Тип("ДокументСсылка.Увольнение")) Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т61_Локализация", НСтр("ru = 'Записка - расчет при увольнении'"),
			ТабличныйДокументЗапискиРасчетаПриУвольнении(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т61_Локализация"), ПодходящиеОбъекты, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т61_Локализация");
		КонецЕсли;
	КонецЕсли;	
	// }
	// 4D
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор")
		ИЛИ УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе") Тогда
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор") Тогда
			ИмяМакета = "ПФ_MXL_ТрудовойДоговор";
			Представление = НСтр("ru='Трудовой договор'");
		Иначе
			ИмяМакета = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
			Представление = НСтр("ru='Трудовой договор при дистанционной работе'");
		КонецЕсли;
		
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета, Представление,
			ТабличныйДокументТрудовойДоговор(
				ИмяМакета,
				МассивОбъектов,
				ОбъектыПечати),
			,
			"Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ОтчетТрудовойДоговорФормирование", ВремяНачалаЗамера);
	КонецЕсли;
	
	// 4D:ERP для Беларуси, Яна, 19.06.2017 17:02:18 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора , №14928 
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор_Локализация") 
		ИЛИ УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорСрочный_Локализация") Тогда
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор_Локализация") Тогда
			ИмяМакета = "ПФ_MXL_ТрудовойДоговор_Локализация";
			Представление = НСтр("ru='Трудовой договор на неопределенный срок'");
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета, Представление,
			ТабличныйДокументТрудовойДоговор(
			УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета),
			МассивОбъектов,
			ОбъектыПечати),
			,
			"Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета);
			
		ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорСрочный_Локализация") Тогда
			ИмяМакета = "ПФ_MXL_ТрудовойДоговорСрочный_Локализация";
			Представление = НСтр("ru='Трудовой контракт'");
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета, Представление,
			ТабличныйДокументСрочныйТрудовойДоговор(
			УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета),
			МассивОбъектов,
			ОбъектыПечати),
			,
			"Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета);
			
		КонецЕсли;			
	КонецЕсли;		
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 26.06.2017 15:41:56 
	// Формирование справок по сотруднику из рабочего места "Работа с кадрами" , №14914 
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОДоходахПроизвольнаяФорма_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаОДоходахПроизвольнаяФорма_Локализация", 
			НСтр("ru = 'Справка о доходах (произвольная форма)'"),
			ТабличныйДокументСправкаОДоходахПроизвольнаяФорма(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаОДоходахПроизвольнаяФорма_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаОДоходахПроизвольнаяФорма_Локализация");
	КонецЕсли; 	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаСМестаРаботы_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаСМестаРаботы_Локализация", 
			НСтр("ru = 'Справка с места работы'"),
			ТабличныйДокументСправкаСМестаРаботы(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаСМестаРаботы_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаСМестаРаботы_Локализация");
	КонецЕсли;	
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 26.06.2017 15:41:56 
	// Печатные формы анализ , №15283 
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т9_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т9_Локализация",
			НСтр("ru = 'Приказ о направлении в командировку '"),
			ТабличныйДокументПриказОНаправленииСотрудникаВКомандировку(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т9_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т9_Локализация");
	КонецЕсли;
	// }
	// 4D

	// 4D:ERP для Беларуси, Яна, 19.06.2017 17:02:18 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора , №14928 
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т9а_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т9а_Локализация",
			НСтр("ru = 'Приказ о направлении работников в командировку'"),
			ТабличныйДокументПриказОНаправленииСотрудниковВКомандировку(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т9а_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т9а_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т10_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т10_Локализация",
			НСтр("ru = 'Командировочное удостоверение'"),
			ТабличныйДокументКомандировочноеУдостоверение(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т10_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т10_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т10а_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т10а_Локализация",
			НСтр("ru = 'Служебное задание'"),
			ТабличныйДокументСлужебноеЗадание(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т10а_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т10а_Локализация");
	КонецЕсли;	
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т11_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т11_Локализация",
			НСтр("ru = 'Приказ о поощрении сотрудника (Т-11)'"),
			ТабличныйДокументПриказОПоощренииСотрудника(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т11_Локализация"), МассивОбъектов, ПараметрыПечати, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т11_Локализация");
	КонецЕсли; 	
	// }
	// 4D
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т11а") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т11а",
			НСтр("ru = 'Приказ о поощрении сотрудников (Т-11а)'"),
			ТабличныйДокументПриказОПоощренииСотрудников(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т11а"), МассивОбъектов, ПараметрыПечати, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т11а");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИзмененияГрафикаРаботыСписком") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ИзмененияГрафикаРаботыСписком",
			НСтр("ru = 'Приказ об изменении графика работы'"),
			ТабличныйДокументИзменениеГрафикаРаботыСписком(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИзмененияГрафикаРаботыСписком"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИзмененияГрафикаРаботыСписком");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИндексацияЗаработка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ИндексацияЗаработка",
			НСтр("ru = 'Приказ об индексации заработка'"),
			ТабличныйДокументИндексацияЗаработка(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИндексацияЗаработка"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИндексацияЗаработка");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг",
			НСтр("ru = 'Акт приема-передачи выполненных работ (услуг)'"),
			ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг"), МассивОбъектов, ОбъектыПечати, Истина), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг",
			НСтр("ru = 'Акт приема-передачи выполненных работ (услуг) (поэтапное закрытие)'"),
			ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыплатеМатериальнойПомощи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОВыплатеМатериальнойПомощи",
			НСтр("ru = 'Приказ о выплате материальной помощи'"),
			ТабличныйДокументПриказОВыплатеМатериальнойПомощи(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыплатеМатериальнойПомощи"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыплатеМатериальнойПомощи");
	КонецЕсли;
	
	// 4D:ERP для Беларуси, Юлия, 01.08.2017 16:13:14 
	// Перенести макеты печатных форм из 2.1.3.266 в 2.2.3.138, № 15621
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя_Локализация",
		НСтр("ru = 'Приказ о работе на условиях неполного рабочего времени'"),
		ТабличныйДокументПриказОВыходеНаНеполноеРабочееВремя(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя_Локализация"), МассивОбъектов, ОбъектыПечати, "ПриказОВыходеНаНеполноеРабочееВремя"), ,
		"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыходеНаПолноеРабочееВремя") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ПриказОВыходеНаПолноеРабочееВремя",
		НСтр("ru = 'Приказ о работе на условиях полного рабочего времени'"),
		ТабличныйДокументПриказОВыходеНаНеполноеРабочееВремя(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаПолноеРабочееВремя"), МассивОбъектов, ОбъектыПечати, "ПриказОВыходеНаПолноеРабочееВремя"), ,
		"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаПолноеРабочееВремя");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком_Локализация",
			НСтр("ru = 'Приказ о прекращении отпуска в связи с уходом в отпуск по беременности и родам'"),
			ТабличныйДокументПриказОПрекращенииОтпускаПоУходуЗаРебенком(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком_Локализация",
			НСтр("ru = 'Приказ о выходе на работу до окончания отпуска по уходу за ребенком'"),
			ТабличныйДокументПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком_Локализация"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком_Локализация");
	КонецЕсли;
	// }
	// 4D

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодтверждениеБронированияПозиции") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПодтверждениеБронированияПозиции", НСтр("ru = 'Подтверждение брони'"),
			ТабличныйДокументПодтверждениеБрони(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПодтверждениеБронированияПозиции"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПодтверждениеБронированияПозиции");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1а") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т1а", НСтр("ru = 'Приказ о приеме (Т-1а)'"),
			ТабличныйДокументПриказаТ1а(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т1а"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т1а");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5а") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т5а", НСтр("ru = 'Приказ о переводе (Т-5а)'"),
			ТабличныйДокументПриказаТ5а(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т5а"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т5а");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8а") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т8а", НСтр("ru = 'Приказ об увольнении (Т-8а)'"),
			ТабличныйДокументПриказаТ8а(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т8а"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т8а");
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФУНКЦИИ ПЕЧАТИ КАДРОВЫХ ДАННЫХ

// 4D:ERP для Беларуси, Юлия, 17.08.2017 9:45:00 
// Привести типовые формы документов приказа о приеме на работу и трудового договора, № 14928
// {
Функция ТабличныйДокументТрудовойДоговор(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговор";
	МассивДанныхЗаполнения = ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов);
	ВывестиДанныеТрудовогоДоговораВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции
// }
// 4D

// 4D:ERP для Беларуси, Яна, 19.06.2017 17:02:18 
// Привести типовые формы документов приказа о приеме на работу и трудового договора , №14928 
// { 
Функция ТабличныйДокументСрочныйТрудовойДоговор(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговор";
	МассивДанныхЗаполнения = ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов);
	ВывестиДанныеСрочногоТрудовогоДоговораВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
		
	Возврат ДокументРезультат;
	
КонецФункции
// }
// 4D

Процедура ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 08.06.2017 10:58:25 
// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
// {
Процедура ВывестиДанныеТрудовогоДоговораВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);   				
						
			// 4D:ERP для Беларуси, Юлия, 15.06.2017 16:20:25 
			// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
			// {
			// п.1
			// Должность руководителя в Р.П.
			Структура = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ПараметрыМакета.Ссылка.ДолжностьРуководителя.Наименование, 4, ПараметрыМакета.Ссылка.ДолжностьРуководителя.Наименование);
			Макет.Параметры.РуководительДолжностьРП = Нрег(Структура);
			//ФИО руководителя в Р.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.РуководительФИОПолные, Ложь, , Ложь);
			Макет.Параметры.РуководительФИОПолныеРП = Структура.РодительныйПадеж;

			// п.2
			// ФИО работника в В.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.ФИОПолные, Ложь, ПараметрыМакета.Сотрудник.ФизическоеЛицо.Пол, Ложь);
			Макет.Параметры.ФИОРаботникаРП = Структура.ВинительныйПадеж;	
			// Должность работника в Р.П.
			Структура1 = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Должность.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
			Макет.Параметры.ДолжностьРП = Нрег(Структура1.РодительныйПадеж);
			// Подразделение в В.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Подразделение.Наименование, Ложь, ПараметрыМакета.Сотрудник.ФизическоеЛицо.Пол, Ложь);
			Макет.Параметры.ПодразделениеВП = Структура.ВинительныйПадеж;
			
			// п.4
			Если ПараметрыМакета.СрочныйДоговор = Ложь Тогда 
				Макет.Параметры.ПризнакСрочности1 = "на неопределенный срок";
			Иначе
				Если ЗначениеЗаполнено(ПараметрыМакета.ОснованиеСрочногоДоговора) Тогда 
					Если СтрДлина(ПараметрыМакета.ОснованиеСрочногоДоговора) < 70 Тогда 
						Макет.Параметры.ПризнакСрочности1 = Нрег(ПараметрыМакета.ОснованиеСрочногоДоговора);
					Иначе
						Макет.Параметры.ПризнакСрочности1 = Нрег(Лев(ПараметрыМакета.ОснованиеСрочногоДоговора, 70));
						Макет.Параметры.ПризнакСрочности2 = Нрег(Прав(ПараметрыМакета.ОснованиеСрочногоДоговора, СтрДлина(ПараметрыМакета.Ссылка.ОснованиеСрочногоДоговора)-70));
					КонецЕсли;					
				Иначе
					Макет.Параметры.ПризнакСрочности1 = "на определенный срок";
				КонецЕсли;				
			КонецЕсли;
						
			// п.5
			Если  ПараметрыМакета.ДлительностьИспытательногоСрока = 0 Тогда 
				Макет.Параметры.ТестИспытания = "без испытания";
				Макет.Параметры.Месяц = "месяцев";
			Иначе
				Макет.Параметры.ТестИспытания = "с предварительным испытанием";	
			КонецЕсли;
			
			// п.6
			Если  ПараметрыМакета.СрочныйДоговор = Истина Тогда 
				Макет.Параметры.ДатаС = Формат(ПараметрыМакета.ТрудовойДоговорДата, "ДЛФ=ДД");
				Если ЗначениеЗаполнено(ПараметрыМакета.ДатаЗавершенияТрудовогоДоговора) Тогда  
					Макет.Параметры.ДатаПо = Формат(ПараметрыМакета.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=ДД");
					Если ЗначениеЗаполнено(ПараметрыМакета.СрокЗаключенияДоговора) Тогда
						Макет.Параметры.КоличествоЛет = ПараметрыМакета.СрокЗаключенияДоговора;
					Иначе 
						Макет.Параметры.КоличествоЛет = "____лет " ;
					КонецЕсли;
					
				Иначе 
					Макет.Параметры.ДатаПо = "«__» _____________ 20__ г.";
					Если ЗначениеЗаполнено(ПараметрыМакета.СрокЗаключенияДоговора) Тогда
						Макет.Параметры.КоличествоЛет = ПараметрыМакета.СрокЗаключенияДоговора;
					Иначе 
						Макет.Параметры.КоличествоЛет = "____лет " ;
					КонецЕсли;
				КонецЕсли;				
			Иначе
				Макет.Параметры.ДатаС = Формат(ПараметрыМакета.ТрудовойДоговорДата, "ДЛФ=ДД");
				Макет.Параметры.ДатаПо = "«__» _____________ 20__ г.";
				Макет.Параметры.КоличествоЛет = "____лет " ;
			КонецЕсли;
			// } 
			// 4D 
			
			// 4D:ERP для Беларуси, Юлия, 05.09.2017 9:30:38 
			// Дата в печатных формах "Трудовой договор" и "Трудовой контракт", № 15898
			// {
			Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПараметрыМакета.ПриказОПриемеДата), " ");
			Макет.Параметры.ПриказОприемеДень = ПодчеркнутьТекстВМакете(Результат[0]);
			Макет.Параметры.ПриказОприемеМесяц = ПодчеркнутьТекстВМакете(Результат[1]);
			Макет.Параметры.ПриказОприемеГод = ПодчеркнутьТекстВМакете(Лев(Результат[2], 4));
			// }
			// 4D
			
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 05.09.2017 9:30:20 
// Дата в печатных формах "Трудовой договор" и "Трудовой контракт", № 15898
// { 
Функция ПодчеркнутьТекстВМакете(Строка)
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Результат = Результат + Символ(863);
		Результат = Результат + Сред(Строка, Индекс, 1);
	КонецЦикла;
	Возврат Результат;
КонецФункции
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 19.06.2017 12:26:25 
// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
// {
Процедура ВывестиДанныеСрочногоТрудовогоДоговораВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			//НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			
			// Должность руководителя в Р.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Ссылка.ДолжностьРуководителя.Наименование, Ложь, , Ложь);
			Макет.Параметры.РуководительДолжностьРП = Нрег(Структура.РодительныйПадеж);
			// ФИО руководителя в Р.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.РуководительФИОПолные, Ложь, , Ложь);
			Макет.Параметры.РуководительФИОПолныеРП = Структура.РодительныйПадеж;
			
			// ФИО работника в В.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.ФИОПолные, Ложь, ПараметрыМакета.Сотрудник.ФизическоеЛицо.Пол, Ложь);
			Макет.Параметры.ФИОРаботникаРП = Структура.ВинительныйПадеж;	
			// Должность работника в Р.П.
			Структура1 = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Должность.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
			Макет.Параметры.ДолжностьРП = Нрег(Структура1.РодительныйПадеж);
			// Подразделение в В.П.
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Подразделение.Наименование, Ложь, ПараметрыМакета.Сотрудник.ФизическоеЛицо.Пол, Ложь);
			Макет.Параметры.ПодразделениеВП = Структура.ВинительныйПадеж;
			
			Если  ПараметрыМакета.СрочныйДоговор = Истина Тогда 
				Макет.Параметры.ДатаС = Формат(ПараметрыМакета.ТрудовойДоговорДата, "ДЛФ=ДД");
				Если ЗначениеЗаполнено(ПараметрыМакета.ДатаЗавершенияТрудовогоДоговора) Тогда  
					Макет.Параметры.ДатаПо = Формат(ПараметрыМакета.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=ДД");
					Если ЗначениеЗаполнено(ПараметрыМакета.СрокЗаключенияДоговора) Тогда
						Макет.Параметры.КоличествоЛет = ПараметрыМакета.СрокЗаключенияДоговора;
					Иначе 
						Макет.Параметры.КоличествоЛет = "____лет " ;
					КонецЕсли;
					
				Иначе 
					Макет.Параметры.ДатаПо = "«__» _____________ 20__ г.";
					Если ЗначениеЗаполнено(ПараметрыМакета.СрокЗаключенияДоговора) Тогда
						Макет.Параметры.КоличествоЛет = ПараметрыМакета.СрокЗаключенияДоговора;
					Иначе 
						Макет.Параметры.КоличествоЛет = "____лет " ;
					КонецЕсли;
				КонецЕсли;				
			Иначе
				Макет.Параметры.ДатаС = Формат(ПараметрыМакета.ТрудовойДоговорДата, "ДЛФ=ДД");
				Макет.Параметры.ДатаПо = "«__» _____________ 20__ г.";
				Макет.Параметры.КоличествоЛет = "____лет " ;
			КонецЕсли;
			
			// 4D:ERP для Беларуси, Юлия, 05.09.2017 9:30:38 
			// Дата в печатных формах "Трудовой договор" и "Трудовой контракт", № 15898
			// {
			Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПараметрыМакета.ПриказОПриемеДата), " ");
			Макет.Параметры.ПриказОприемеДень = ПодчеркнутьТекстВМакете(Результат[0]);
			Макет.Параметры.ПриказОприемеМесяц = ПодчеркнутьТекстВМакете(Результат[1]);
			Макет.Параметры.ПриказОприемеГод = ПодчеркнутьТекстВМакете(Лев(Результат[2], 4));
			// }
			// 4D
			
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, , ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 17.08.2017 9:45:00 
// Привести типовые формы документов приказа о приеме на работу и трудового договора, № 14928
// {
Функция ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов)
	
	МассивПараметров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботу.Номер КАК ПриказОПриемеНомер,
			|	ПриемНаРаботу.Дата КАК ПриказОПриемеДата,
			|	ПриемНаРаботу.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
			|	ПриемНаРаботу.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
			|	ПриемНаРаботу.Сотрудник,
			|	ПриемНаРаботу.Должность,
			|	ПриемНаРаботу.Подразделение,
			|	ПриемНаРаботу.ВидЗанятости,
			|	ПриемНаРаботу.ТрудовойДоговорНомер,
			|	ПриемНаРаботу.ТрудовойДоговорДата,
			|	ПриемНаРаботу.Руководитель,
			|	ПриемНаРаботу.ДолжностьРуководителя,
			|	ПриемНаРаботу.ДатаПриема,
			|	ПриемНаРаботу.СрочныйДоговор,
			|	ПриемНаРаботу.Ссылка,
			|	ПриемНаРаботу.Организация,
			|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
			|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка,
			|	ПриемНаРаботу.РазрешениеНаРаботу,
			|	ПриемНаРаботу.РазрешениеНаПроживание,
			|	ПриемНаРаботу.УсловияОказанияМедпомощи,
			|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
			|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
			|	ПриемНаРаботу.ИныеУсловияДоговора,			
			|	
			// 4D:ERP для Беларуси, Юлия, 08.09.2017 16:00:55 
			// Изменить список печатных форм, доступных в док-те "Прием на работу списком", № 15984
			// {
			|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
			|	ПриемНаРаботу.ДлительностьИспытательногоСрока,
			|	ПриемНаРаботу.СрокЗаключенияДоговора
			// }
			// 4D
			|	
			|ПОМЕСТИТЬ ВТДанныеПриказаОПриеме
			|ИЗ
			|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
			|ГДЕ
			|	ПриемНаРаботу.Ссылка В(&МассивОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеПолное,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеСокращенное,
			|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
			|	ПриемНаРаботуСпискомСотрудники.Должность,
			|	ПриемНаРаботуСпискомСотрудники.Подразделение,
			|	ПриемНаРаботуСпискомСотрудники.ВидЗанятости,
			|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорНомер,
			|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорДата,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя,
			|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
			|	ПриемНаРаботуСпискомСотрудники.СрочныйДоговор,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация,
			|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора,
			|	ПриемНаРаботуСпискомСотрудники.СовокупнаяТарифнаяСтавка,
			|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаРаботу,
			|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаПроживание,
			|	ПриемНаРаботуСпискомСотрудники.УсловияОказанияМедпомощи,
			|	ПриемНаРаботуСпискомСотрудники.Ссылка.ОснованиеПредставителяНанимателя,
			|	ПриемНаРаботуСпискомСотрудники.ОборудованиеРабочегоМеста,
			|	ПриемНаРаботуСпискомСотрудники.ИныеУсловияДоговора,
			|	NULL,
			|	NULL,
			|	NULL
			|ИЗ
			|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
			|ГДЕ
			|	ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДанныеПриказаОПриеме.Сотрудник,
			|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеПриказаОПриеме.Руководитель КАК ФизическоеЛицо,
			|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
			|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
			|ИЗ
			|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,АдресПоПропискеПредставление,ДокументПредставление,Пол";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	// Получение ФИО руководителей.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛицаПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,Пол";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Организация,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата КАК Период
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
	
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		
		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период,
		|	СведенияОбОрганизациях.Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПриказаОПриеме.Ссылка,
		|	ДанныеПриказаОПриеме.ПриказОПриемеНомер,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата,
		|	ДанныеПриказаОПриеме.Подразделение,
		|	ДанныеПриказаОПриеме.Должность,
		|	ДанныеПриказаОПриеме.Сотрудник,
		|	ДанныеПриказаОПриеме.ВидЗанятости,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорНомер,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорДата,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорДата КАК ТрудовойДоговорДатаПодвал, 
		|	ДанныеПриказаОПриеме.ДолжностьРуководителя КАК РуководительДолжность,
		|	ДанныеПриказаОПриеме.ДатаПриема,
		|	ДанныеПриказаОПриеме.СрочныйДоговор,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК ДатаНачалаТрудовогоДоговора,
		|	ДанныеПриказаОПриеме.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	ДанныеПриказаОПриеме.СовокупнаяТарифнаяСтавка КАК Оклад,
		|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса,
		|	ЕСТЬNULL(КадровыеДанныеФизическихЛиц.ФИОПолные,"""") КАК РуководительФИОПолные,
		|	КадровыеДанныеФизическихЛиц.ФамилияИО КАК РуководительФамилияИО,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.ФамилияИО КАК ФамилияИО,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.АдресПоПропискеПредставление КАК АдресПоПропискеПредставление,
		|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|		ПО ДанныеПриказаОПриеме.Организация = ДанныеОрганизаций.Организация
		|			И ДанныеПриказаОПриеме.ПриказОПриемеДата = ДанныеОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ДанныеПриказаОПриеме.Руководитель = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеФизическихЛиц.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПриказаОПриеме.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеСотрудников.Период";

	
		
	Результат =  Запрос.Выполнить(); 	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыТрудовогоДоговора = ПараметрыТрудовогоДоговора();
		ЗаполнитьЗначенияСвойств(ПараметрыТрудовогоДоговора, Выборка);
		
		ПараметрыТрудовогоДоговора.ТрудовойДоговорДата = Формат(Выборка.ТрудовойДоговорДата, "ДЛФ=DD; ДП='""___"" ____________ 20___ г.'");
		
		ПараметрыТрудовогоДоговора.ПриказОПриемеДата = Формат(Выборка.ПриказОПриемеДата, "ДЛФ=DD");
		
		// 4D:ERP для Беларуси, Юлия, 16.06.2017 12:50:35 
		// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
		// {
		ПараметрыТрудовогоДоговора.ДатаПриема = """" + Лев(Выборка.ДатаПриема,2) + Символ(863)  + """ " + Сред(Формат(Выборка.ДатаПриема, "ДЛФ=DD"),3)+Символ(863);
		// }
		// 4D
		
		Если Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru='основным местом работы'");
		Иначе
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru='местом работы по совместительству'");
		КонецЕсли;
		
		МассивПараметров.Добавить(ПараметрыТрудовогоДоговора);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции
// }
// 4D

Функция ПараметрыТрудовогоДоговора()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("ПриказОПриемеНомер", "");
	Параметры.Вставить("ПриказОПриемеДата", '00010101');
	Параметры.Вставить("ОрганизацияНаименованиеПолное", "");
	Параметры.Вставить("ИННКПП", "");
	Параметры.Вставить("ОрганизацияТелефон", "");
	Параметры.Вставить("ОрганизацияАдресЮридический", "");
	Параметры.Вставить("ОрганизацияАдресФактический", "");
	Параметры.Вставить("ОрганизацияГородФактическогоАдреса", "");
	Параметры.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	Параметры.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Параметры.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	Параметры.Вставить("ВидЗанятостиПоДоговору", "");
	Параметры.Вставить("ТрудовойДоговорНомер", "");
	Параметры.Вставить("ТрудовойДоговорДата", '00010101');
	Параметры.Вставить("СрокДействияПредставление", "");
	Параметры.Вставить("РуководительФамилияИО", "");
	Параметры.Вставить("РуководительФИОПолные", "");
	Параметры.Вставить("РуководительПол");
	Параметры.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
	Параметры.Вставить("ДатаПриема", '00010101');
	Параметры.Вставить("ФИОПолные", "");
	Параметры.Вставить("ФамилияИО", "");
	Параметры.Вставить("Пол");
	Параметры.Вставить("КлассУсловийТруда");
	Параметры.Вставить("УсловияТруда", "");
	Параметры.Вставить("КлассУсловий", "");
	Параметры.Вставить("АдресПоПропискеПредставление", "");
	Параметры.Вставить("ДокументПредставление", "");
	
	// 4D:ERP для Беларуси, Юлия, 16.06.2017 12:50:35 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
	// {
	Параметры.Вставить("Страна", Справочники.СтраныМира.Беларусь);
	// }
	// 4D
	
	Параметры.Вставить("РазрешениеНаРаботу", "");
	Параметры.Вставить("РазрешениеНаПроживание", "");
	Параметры.Вставить("УсловияОказанияМедпомощи", "");
	Параметры.Вставить("КоличествоДнейОтпускаОбщее", "");
	Параметры.Вставить("ОснованиеРуководителя", "");
	Параметры.Вставить("ОборудованиеРабочегоМеста", "");
	Параметры.Вставить("ИныеУсловияДоговора", "");
	Параметры.Вставить("РуководительДолжностьВПадеже", "");
	Параметры.Вставить("УсловияОплатыТруда");
	
	// 4D:ERP для Беларуси, Юлия, 16.06.2017 12:50:35 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
	// {
	Параметры.Вставить("ПризнакСрочности1", "");
	Параметры.Вставить("ПризнакСрочности2", "");
	Параметры.Вставить("Месяц", "");
	Параметры.Вставить("Год","");
	Параметры.Вставить("ТекстГод","");
	Параметры.Вставить("ВидЗанятости", "");
	Параметры.Вставить("КоличествоЛет", "");
	Параметры.Вставить("Дата", '00010101');
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 05.09.2017 9:30:38 
	// Дата в печатных формах "Трудовой договор" и "Трудовой контракт", № 15898
	// {
	Параметры.Вставить("ПриказОприемеДень", "");
	Параметры.Вставить("ПриказОприемеМесяц", "");
	Параметры.Вставить("ПриказОприемеГод", "");
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 08.09.2017 16:00:55 
	// Изменить список печатных форм, доступных в док-те "Прием на работу списком", № 15984
	// {
	Параметры.Вставить("СрочныйДоговор", "");
	Параметры.Вставить("ОснованиеСрочногоДоговора", "");
	Параметры.Вставить("ДлительностьИспытательногоСрока", "");
	Параметры.Вставить("ДатаЗавершенияТрудовогоДоговора", "");
	Параметры.Вставить("СрокЗаключенияДоговора", "");
	Возврат Параметры;
	// }
	// 4D
	
КонецФункции

Процедура ВывестиДанныеСправкиВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати, ЭтоСправкаОДоходах = Ложь) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПерваяСправка = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Если Не ПерваяСправка Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПерваяСправка = Ложь;
			КонецЕсли;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ПараметрыМакета.ФИОПолные), 3, РезультатСклонения, ПараметрыМакета.Пол) Тогда
				Макет.Параметры.ФИОПолные = РезультатСклонения;
			КонецЕсли;
			
			// 4D:ERP для Беларуси, Юлия, 26.06.2017 17:26:25 
			// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
			// {
			Макет.Параметры.ДатаСправки = Формат(ПараметрыМакета.ДатаСправки, "ДЛФ=DD; ДП='___ _________ _____'");
			
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Должность, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
			Макет.Параметры.ДолжностьРП = Нрег(Структура.РодительныйПадеж);
			
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.ФИОРуководителя, Ложь, , Ложь);
			Макет.Параметры.ФИОРуководителя1 = ВыделитьФамилиюРуководителя(ПараметрыМакета.ФИОРуководителя);
			// }
			// 4D
			
			Если ЭтоСправкаОДоходах Тогда
				ВывестиВМакетДанныеОСреднемесячномДоходе(Макет, ПараметрыМакета);
			КонецЕсли; 
			
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Юлия, 20.10.2017 10:15:52 
// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
// {
// Справка о заработке
Процедура ВывестиДанныеСправкиОДоходахВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати, ЭтоСправкаОДоходах = Ложь) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПерваяСправка = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Если Не ПерваяСправка Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПерваяСправка = Ложь;
			КонецЕсли;
			
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Должность, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
			Макет.Параметры.ДолжностьРП = Нрег(Структура.РодительныйПадеж);  			
			
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.Организация.НаименованиеПолное, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
			Макет.Параметры.НазваниеОрганизации = Структура.ПредложныйПадеж;
			
			Макет.Параметры.ФИОРуководителя = ВыделитьФамилиюРуководителя(ПараметрыМакета.ФИОРуководителя);
			
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ПараметрыМакета.ФИОПолные, Ложь, Перечисления.ПолФизическогоЛица.Женский , Ложь);
			Макет.Параметры.ФИОПолные1 = ВыделитьФамилию(Структура.РодительныйПадеж);
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			Макет.Параметры.ДатаСправки = Формат(ПараметрыМакета.ДатаСправки, "ДЛФ=DD; ДП='___ _________ _____'");
			
			//ВывестиВМакетДанныеОСреднемесячномДоходе(Макет, ПараметрыМакета);

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачислениеЗарплатыНачисления.Сотрудник,
			|	НачислениеЗарплатыНачисления.ДатаНачала,
			|	НачислениеЗарплатыНачисления.Результат
			|ИЗ
			|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления";
			Выборка = Запрос.Выполнить().Выбрать();
			Всего = 0;
			Пока Выборка.Следующий() Цикл
				Макет.Параметры.ГодНачисления = Формат(Выборка.ДатаНачала, "ДФ=гггг");
				МесяцНачисления = Формат(Выборка.ДатаНачала, "ДФ = М");
				Если Выборка.Сотрудник.Наименование = ПараметрыМакета.ФИОПолные Тогда
					Если МесяцНачисления = "1" Тогда
						Макет.Параметры.РезультатНачисления1 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "2" Тогда
						Макет.Параметры.РезультатНачисления2 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "3" Тогда
						Макет.Параметры.РезультатНачисления3 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "4" Тогда
						Макет.Параметры.РезультатНачисления4 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "5" Тогда
						Макет.Параметры.РезультатНачисления5 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "6" Тогда
						Макет.Параметры.РезультатНачисления6 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "7" Тогда
						Макет.Параметры.РезультатНачисления7 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "8" Тогда
						Макет.Параметры.РезультатНачисления8 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "9" Тогда
						Макет.Параметры.РезультатНачисления9 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "10" Тогда
						Макет.Параметры.РезультатНачисления10 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "11" Тогда
						Макет.Параметры.РезультатНачисления11 = Выборка.Результат;
					КонецЕсли;
					Если МесяцНачисления = "12" Тогда
						Макет.Параметры.РезультатНачисления12 = Выборка.Результат;
					КонецЕсли;
					Всего = Всего + Выборка.Результат;
				КонецЕсли;
			КонецЦикла;
			
			Макет.Параметры.ВсегоПрописью = НРег(ЧислоПрописью(Всего,"Л = ru_RU;ДП=Истина","рубль,рубля,рублей, м,копейка,копейки,копеек, ж,2" ));
			
			Макет.Параметры.Всего = Цел(Всего);
			Макет.Параметры.Текст2 = " руб. ";
			Макет.Параметры.Текст3 = (Всего-Цел(Всего))*100;
			Макет.Параметры.Текст4 = " коп. (";
			Макет.Параметры.Текст5 = ")";
			
			
			Макет.Параметры.ФИОРуководителя = РасшифровкаПодписи(ПараметрыМакета.ФИОРуководителя);
			Макет.Параметры.ФИОГлавногоБухгалтера = РасшифровкаПодписи(ПараметрыМакета.ФИОГлавногоБухгалтера);
			
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделитьФамилиюРуководителя(РуководительФИОПолные) Экспорт
	
	ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(РуководительФИОПолные), " ");
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьФамилиюРуководителя =Лев(ФИО[1],1) + ". " + Лев(ФИО[2],1) + ". " +  ФИО[0];
		
	Иначе
		ВыделитьФамилиюРуководителя = РуководительФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьФамилиюРуководителя;
	
КонецФункции

Функция ВыделитьФамилию(ФИОПолные) Экспорт
	
	ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьФамилию = ФИО[0] + " " + Лев(ФИО[1],1) + ". " + Лев(ФИО[2],1) + "." ;
		
	Иначе
		ВыделитьФамилию = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьФамилию;
	
КонецФункции

Функция РасшифровкаПодписи(ФИОПолные) Экспорт

	ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьСлово =  Лев(ФИО[1],1) + ". " + Лев(ФИО[2],1) + ". " + ФИО[0];
			
	Иначе
		ВыделитьСлово = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьСлово;
	
КонецФункции
// }
// 4D


Процедура ВывестиВМакетДанныеОСреднемесячномДоходе(Макет, ПараметрыМакета)
	
	// 4D:ERP для Беларуси, Юлия, 28.07.2017 15:40:52 
	// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
	// {
	Макет.Параметры.СреднемесячныйДоходПрописью = НРег(ЧислоПрописью(ПараметрыМакета.СреднемесячныйДоход,"Л = ru_RU;ДП=Истина","рубль,рубля,рублей, м,копейка,копейки,копеек, ж,2" ));
	// }
	// 4D
	
КонецПроцедуры

Функция ТабличныйДокументСправкаОДоходахПроизвольнаяФорма(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОДоходахПроизвольнаяФорма";
	МассивДанныхЗаполнения = ДанныеДляПечатиСправкиОДоходах(МассивОбъектов);
	
	// 4D:ERP для Беларуси, Юлия, 27.06.2017 10:15:52 
	// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
	// {
	ВывестиДанныеСправкиОДоходахВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати); 	
	// }
	// 4D

	
	Возврат ДокументРезультат;
	
КонецФункции 

Процедура СоздатьВТОбщиеДанныеСправок(МенеджерВременныхТаблиц, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	
	// 4D:ERP для Беларуси, Юлия, 28.07.2017 10:15:52 
	// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
	// {
	КадровыеДанные = "ФизическоеЛицо,ФИОПолные,Пол,ДокументПредставление,ДатаПриема,СрочныйДоговор, ДатаУвольнения,Должность,ГоловнаяОрганизация";
	// }
	// 4D
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Период КАК Период,
		|	КадровыеДанные.ГоловнаяОрганизация КАК Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";
		
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияРасчетныйСчет", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияБанк", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияКорСчет", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияБИК", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияТелефон", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияФакс", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ФИОРуководителя", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФИОГлавногоБухгалтера", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
	
		Сведения.Добавить("", "БанкСчетНомер");
		Сведения.Добавить("", "БанкСчетНаимБанка");
		Сведения.Добавить("", "БанкСчетКоррСчетБанка");
		Сведения.Добавить("", "БанкСчетБИКБанка");
		
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "ФаксОрганизации");
		
		Сведения.Добавить("", "ФИОРук");
		Сведения.Добавить("", "ФИОБух");
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, ?(ЗначениеЗаполнено(Выборка.Период),Выборка.Период, ТекущаяДатаСеанса()), Сведения);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		
		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияРасчетныйСчет = ОргСведения.БанкСчетНомер;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияБанк = ОргСведения.БанкСчетНаимБанка;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияКорСчет = ОргСведения.БанкСчетКоррСчетБанка;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияБИК = ОргСведения.БанкСчетБИКБанка;
		
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияТелефон = ОргСведения.ТелОрганизации;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияФакс = ОргСведения.ФаксОрганизации;
		
		НоваяСтрокаСведенияОбОрганизациях.ФИОРуководителя = ОргСведения.ФИОРук;
		НоваяСтрокаСведенияОбОрганизациях.ФИОГлавногоБухгалтера = ОргСведения.ФИОБух;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период,
		|	СведенияОбОрганизациях.Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.ИНН КАК ОрганизацияИНН,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	СведенияОбОрганизациях.ОрганизацияРасчетныйСчет КАК ОрганизацияРасчетныйСчет,
		|	СведенияОбОрганизациях.ОрганизацияБанк КАК ОрганизацияБанк,
		|	СведенияОбОрганизациях.ОрганизацияКорСчет КАК ОрганизацияКорСчет,
		|	СведенияОбОрганизациях.ОрганизацияБИК КАК ОрганизацияБИК,
		|	СведенияОбОрганизациях.ОрганизацияТелефон КАК ОрганизацияТелефон,
		|	СведенияОбОрганизациях.ОрганизацияФакс КАК ОрганизацияФакс,
		|	СведенияОбОрганизациях.ФИОРуководителя КАК ФИОРуководителя,
		|	СведенияОбОрганизациях.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОрганизаций.Период,
		|	ДанныеОрганизаций.Период КАК ДатаСправки,
		|	ДанныеОрганизаций.Организация,
		|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное,
		|	ДанныеОрганизаций.ОрганизацияИНН,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса,
		|	ДанныеОрганизаций.ОрганизацияРасчетныйСчет,
		|	ДанныеОрганизаций.ОрганизацияБанк,
		|	ДанныеОрганизаций.ОрганизацияКорСчет,
		|	ДанныеОрганизаций.ОрганизацияБИК,
		|	ДанныеОрганизаций.ОрганизацияТелефон,
		|	ДанныеОрганизаций.ОрганизацияФакс,
		|	ДанныеОрганизаций.ФИОРуководителя,
		|	ДанныеОрганизаций.ФИОГлавногоБухгалтера,
		|	КадровыеДанныеСотрудников.ГоловнаяОрганизация,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Ссылка,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		// 4D:ERP для Беларуси, Юлия, 28.07.2017 10:15:52 
		// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
		// {
		|	КадровыеДанныеСотрудников.СрочныйДоговор,		
		// } 
		// 4D 
		|	КадровыеДанныеСотрудников.Должность,
		|	КадровыеДанныеСотрудников.ФИОПолные,
		|	КадровыеДанныеСотрудников.Пол
		|ПОМЕСТИТЬ ВТОбщиеДанныеСправок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|		ПО (ДанныеОрганизаций.Период = КадровыеДанныеСотрудников.Период)
		|			И (ДанныеОрганизаций.Организация = КадровыеДанныеСотрудников.ГоловнаяОрганизация)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеДляПечатиСправкиОДоходах(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОбщиеДанныеСправок(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК Месяц,
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок
		|		ПО ВзаиморасчетыССотрудниками.ФизическоеЛицо = ОбщиеДанныеСправок.ФизическоеЛицо
		|			И (ВзаиморасчетыССотрудниками.Период >= ВЫБОР
		|				КОГДА ОбщиеДанныеСправок.ДатаПриема > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|					ТОГДА ОбщиеДанныеСправок.ДатаПриема
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|			КОНЕЦ)
		|			И (ВзаиморасчетыССотрудниками.Период <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -1), МЕСЯЦ))
		|			И ВзаиморасчетыССотрудниками.Организация.ГоловнаяОрганизация <= ОбщиеДанныеСправок.ГоловнаяОрганизация
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудниками.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник КАК Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачисленияСотрудников.Месяц) КАК КоличествоПериодов
		|ПОМЕСТИТЬ ВТКоличествоПериодовПолученияДоходов
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник,
		|	СУММА(НачисленияСотрудников.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТОбщийДоходСотрудников
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщийДоходСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА КоличествоПериодовПолученияДоходов.КоличествоПериодов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ОбщийДоходСотрудников.СуммаВзаиморасчетов / КоличествоПериодовПолученияДоходов.КоличествоПериодов
		|	КОНЕЦ КАК СреднемесячныйДоход
		|ПОМЕСТИТЬ ВТСреднемесячныйДоходСотрудников
		|ИЗ
		|	ВТОбщийДоходСотрудников КАК ОбщийДоходСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПериодовПолученияДоходов КАК КоличествоПериодовПолученияДоходов
		|		ПО ОбщийДоходСотрудников.Сотрудник = КоличествоПериодовПолученияДоходов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщиеДанныеСправок.ДатаСправки,
		|	ОбщиеДанныеСправок.Организация,
		|	ОбщиеДанныеСправок.ОрганизацияНаименованиеПолное,
		|	ОбщиеДанныеСправок.ОрганизацияИНН,
		|	ОбщиеДанныеСправок.ОрганизацияАдресЮридический,
		|	ОбщиеДанныеСправок.ОрганизацияАдресФактический,
		|	ОбщиеДанныеСправок.ОрганизацияГородФактическогоАдреса,
		|	ОбщиеДанныеСправок.ОрганизацияРасчетныйСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБанк,
		|	ОбщиеДанныеСправок.ОрганизацияКорСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБИК,
		|	ОбщиеДанныеСправок.ОрганизацияТелефон,
		|	ОбщиеДанныеСправок.ОрганизацияФакс,
		|	ОбщиеДанныеСправок.ФИОРуководителя,
		|	ОбщиеДанныеСправок.ФИОГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.Ссылка,
		|	ОбщиеДанныеСправок.ДатаПриема,
		|	ОбщиеДанныеСправок.Должность,
		|	ОбщиеДанныеСправок.ФИОПолные,
		|	ОбщиеДанныеСправок.Пол,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаПриема > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|			ТОГДА ОбщиеДанныеСправок.ДатаПриема
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|	КОНЕЦ КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -1), МЕСЯЦ) КАК ОкончаниеПериода,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА ""Его""
		|		ИНАЧЕ ""Ее""
		|	КОНЕЦ КАК ЕгоЕе,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА """"
		|		ИНАЧЕ ""а""
		|	КОНЕЦ КАК ЖенскийПол,
		|	ЕСТЬNULL(СреднемесячныйДоходСотрудников.СреднемесячныйДоход, 0) КАК СреднемесячныйДоход
		|ИЗ
		|	ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныйДоходСотрудников КАК СреднемесячныйДоходСотрудников
		|		ПО ОбщиеДанныеСправок.Ссылка = СреднемесячныйДоходСотрудников.Сотрудник";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТабличныйДокументСправкаСМестаРаботы(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаСМестаРаботы";
	МассивДанныхЗаполнения = ДанныеДляПечатиСправкиСМестаРаботы(МассивОбъектов);
	
	ВывестиДанныеСправкиВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиСправкиСМестаРаботы(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОбщиеДанныеСправок(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбщиеДанныеСправок.ДатаСправки,
		|	ОбщиеДанныеСправок.Организация,
		|	ОбщиеДанныеСправок.ОрганизацияНаименованиеПолное,
		|	ОбщиеДанныеСправок.ОрганизацияИНН,
		|	ОбщиеДанныеСправок.ОрганизацияАдресЮридический,
		|	ОбщиеДанныеСправок.ОрганизацияАдресФактический,
		|	ОбщиеДанныеСправок.ОрганизацияГородФактическогоАдреса,
		|	ОбщиеДанныеСправок.ОрганизацияРасчетныйСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБанк,
		|	ОбщиеДанныеСправок.ОрганизацияКорСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБИК,
		|	ОбщиеДанныеСправок.ОрганизацияТелефон,
		|	ОбщиеДанныеСправок.ОрганизацияФакс,
		|	ОбщиеДанныеСправок.ФИОРуководителя,
		|	ОбщиеДанныеСправок.ФИОГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.Ссылка,
		|	ОбщиеДанныеСправок.ДатаПриема,
		// 4D:ERP для Беларуси, Юлия, 28.07.2017 10:15:52 
		// Формирование справок по сотруднику из рабочего места "Работа с кадрами", №14914 
		// {
		|	ОбщиеДанныеСправок.СрочныйДоговор,
		// }
		// 4D
		|	ОбщиеДанныеСправок.Должность,
		|	ОбщиеДанныеСправок.ФИОПолные,
		|	ОбщиеДанныеСправок.Пол
		|ИЗ
		|	ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок";
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//////////////////////////////////////////////////////////////////////
// Расчет при увольнении

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму записки-расчета(Т61).
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументЗапискиРасчетаПриУвольнении(Макет, МассивОбъектов, ОбъектыПечати)
	
	МассивДанныхЗаполнения = ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов);
	
	ДокументРезультат = СформироватьЗапискиРасчетаТ61(Макет, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция СформироватьЗапискиРасчетаТ61(Макет, МассивДанныхЗаполнения, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ЗапискаРасчетПриУвольнении";

	ПервыйПриказ = Истина;
	Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
		
		ОбластьЛицеваяСторона 					= Макет.ПолучитьОбласть("ЛицеваяСторона");
		ОбластьРасчетСреднего 					= Макет.ПолучитьОбласть("РасчетСреднего");
		ОбластьРасчетСреднегоИтого 				= Макет.ПолучитьОбласть("РасчетСреднегоИтого");
		ОбластьДополнительнаяСтрокаЗаработка 	= Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
		ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	
		Если Не ПервыйПриказ Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйПриказ = Ложь;
		КонецЕсли;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьЛицеваяСторона.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьЛицеваяСторона);
		ОбластьРасчетСреднего.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьРасчетСреднего);
		
		Для каждого ДополнительнаяСтрокаЗаработка Из ПараметрыМакета.МассивДополнительныхСтрокЗаработка Цикл
			ОбластьДополнительнаяСтрокаЗаработка.Параметры.Заполнить(ДополнительнаяСтрокаЗаработка);
			ДокументРезультат.Вывести(ОбластьДополнительнаяСтрокаЗаработка);
		КонецЦикла;	

		ОбластьРасчетСреднегоИтого.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьРасчетСреднегоИтого);
		ОбластьПодвал.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов)
	
	Результат 	= КадровыйУчетРасширенный.СформироватьЗапросДляТ61(МассивОбъектов);
	Выборка 	= Результат.Выбрать();
	
	МассивПараметров = Новый Массив;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ДанныеРасчетаСреднегоЗаработкаДокументов = Документы.Увольнение.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеРасчетаСреднегоЗаработкаДокументов, Документы.УвольнениеСписком.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов));
	
	Пока Выборка.Следующий() Цикл
		
		Параметры = СтруктураПараметровЗапискиРасчетаТ61();		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
			
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Параметры.Работник), 5, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.КВыплате) Тогда
			
			Параметры.КВыплатеПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Параметры.КВыплате, ВалютаУчета);
			Параметры.КВыплатеРублиКопейки =
				"(" + Формат(Цел(Параметры.КВыплате),"ЧДЦ=0; ЧН=-") 
				+ Символы.НПП + НСтр("ru = 'руб'") + Символы.НПП 
				+ Формат((Параметры.КВыплате - Цел(Параметры.КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-")
				+ Символы.НПП + НСтр("ru = 'коп'") + ")";
			
		Иначе
			
			Параметры.КВыплатеПрописью = "";
			Параметры.КВыплатеРублиКопейки = "";
			
		КонецЕсли;
		
		Параметры.ДатаУвольнения  		= Формат(Параметры.ДатаУвольнения, "ДЛФ=DD");
		Параметры.ТрудовойДоговорДата 	= Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=D");		
		Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
		Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
		
		Если НЕ ПустаяСтрока(Выборка.ТекстОснования) Тогда
				
			Параметры.СтатьяТКРФ = Выборка.ТекстОснования
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru=', %1 Трудового кодекса Российской Федерации'"),
					Выборка.СтатьяТКРФ);
					
		КонецЕсли;
		
		Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
			Если Выборка.Ссылка = Элемент.РеквизитыДокумента.Ссылка
				И Выборка.Сотрудник = Элемент.РеквизитыДокумента.Сотрудник Тогда
				ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
				ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбщаяТаблицаДанныхОСреднем = Новый ТаблицаЗначений;
		ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
		ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		
		Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
			НоваяСтрока = ОбщаяТаблицаДанныхОСреднем.Добавить();
			НоваяСтрока.Месяц = Элемент["Месяц"];
			НоваяСтрока.Сумма = Элемент["Учтено"];
		КонецЦикла;
		
		ОбщаяТаблицаДанныхОСреднем.Свернуть("Месяц", "Сумма");
		ОбщаяТаблицаДанныхОСреднем.Сортировать("Месяц");
		
		МесяцСреднегоЗаработка = 1;
		Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
			
			Если МесяцСреднегоЗаработка > 12 Тогда
			   Прервать;
 			КонецЕсли;
			
			СтрокаГод 	= "Год" 	+ МесяцСреднегоЗаработка;
			СтрокаМесяц = "Месяц" 	+ МесяцСреднегоЗаработка;
			СтрокаСумма = "Сумма" 	+ МесяцСреднегоЗаработка;
			Параметры.Вставить(СтрокаГод, Формат(ПериодСреднего.Месяц, "ДФ=yyyy"));
			Параметры.Вставить(СтрокаМесяц, Формат(ПериодСреднего.Месяц, "ДФ=MMMM"));
			Параметры.Вставить(СтрокаСумма, ПериодСреднего.Сумма);
			МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
		КонецЦикла;
		
		МассивДополнительныхСтрокЗаработка = Новый Массив; 
		
		МесяцСреднегоЗаработка = 0;
		Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
			МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
			
			Если МесяцСреднегоЗаработка < 13 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДополнительныхСтрокЗаработка.Добавить(Новый Структура("Год,Месяц,Сумма", Формат(ПериодСреднего.Месяц, "ДФ=yyyy"),Формат(ПериодСреднего.Месяц, "ДФ=MMMM"), ПериодСреднего.Сумма));
			
		КонецЦикла;    
		
		Параметры.Вставить("МассивДополнительныхСтрокЗаработка", МассивДополнительныхСтрокЗаработка);
		
		ВсегоВремени 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
		ВсегоЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
		
		Если ПараметрыРасчетаСреднего.ИспользоватьСреднеЧасовойЗаработок Тогда
			Параметры.Вставить("ВсегоЧасовРасчетногоПериода", ВсегоВремени);
		Иначе
			Параметры.Вставить("ВсегоДнейРасчетногоПериода", ВсегоВремени);
		КонецЕсли;
		
		Параметры.Вставить("ВсегоУчтено", 				ВсегоЗаработок);		
		Параметры.Вставить("ЗаработокЗаЕдиницуВремени", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ВсегоЗаработок, ВсегоВремени));
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции 

Функция СтруктураПараметровЗапискиРасчетаТ61()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("РаботникКадровойСлужбыРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРаботникаКадровойСлужбы");
	Параметры.Вставить("БухгалтерРасшифровкаПодписи");
	
	Параметры.Вставить("ДатаУвольнения");
	Параметры.Вставить("СтатьяТКРФ");
	Параметры.Вставить("ТекстОснования");
	Параметры.Вставить("ВсегоДнейРасчетногоПериода"); 
	Параметры.Вставить("ВсегоЧасовРасчетногоПериода"); 
	Параметры.Вставить("ЗаработокЗаЕдиницуВремени"); 
	Параметры.Вставить("ВсегоУчтено");
	
	Параметры.Вставить("ДнейУдержания");
	Параметры.Вставить("ДнейКомпенсации");
	Параметры.Вставить("РабочийГодС");
	Параметры.Вставить("РабочийГодПо");
	
	Параметры.Вставить("НачисленоКомпенсации");
	Параметры.Вставить("НачисленоВыходноеПособиеСохраняемыйЗаработок");
	Параметры.Вставить("ВсеДругиеНачисления");
	Параметры.Вставить("ВсегоВыплат");
	Параметры.Вставить("СуммаНДФЛ");
	Параметры.Вставить("ПрочиеУдержания");
	Параметры.Вставить("ВсегоУдержано");
	Параметры.Вставить("ДолгЗаОрганизацией");
	Параметры.Вставить("ДолгЗаРаботником");
	Параметры.Вставить("КВыплате");
	Параметры.Вставить("КВыплатеПрописью");
	Параметры.Вставить("КВыплатеРублиКопейки");
	
	Сч  = 1;
	Для Сч = 1 По 12 Цикл
		СтрокаГод = "Год" + Сч;
		СтрокаМесяц = "Месяц" + Сч;
		СтрокаСумма = "Сумма" + Сч;
		Параметры.Вставить(СтрокаГод);
		Параметры.Вставить(СтрокаМесяц);
		Параметры.Вставить(СтрокаСумма);
	КонецЦикла;	
	
	Параметры.Вставить("МассивДополнительныхСтрокЗаработка", Новый Массив);

	Возврат Параметры;
КонецФункции 

//////////////////////////////////////////////////////////////////////
// Печать приказа 

Функция ТабличныйДокументПриказаТ6а(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	ДанныеЗаполнения = ДанныеДляПечатиКадровогоПриказаТ6а(МассивОбъектов);
	
	СсылкаНаОбъект = Неопределено;
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакетаКлючИЗначение Из ДанныеЗаполнения Цикл
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если ДанныеЗаполнения.Количество() = 1 Тогда
				СсылкаНаОбъект = ПараметрыМакетаКлючИЗначение.Ключ;
			КонецЕсли; 
			
			ПараметрыМакета = ПараметрыМакетаКлючИЗначение.Значение;
			
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			МакетШапки = Макет.ПолучитьОбласть("Шапка");
			МакетШапки.Параметры.Заполнить(ПараметрыМакета);
			МакетШапки.Параметры.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ПараметрыМакета.Номер);
			ДокументРезультат.Вывести(МакетШапки);
			
			МакетПодвала = Макет.ПолучитьОбласть("Подвал");
			МакетПодвала.Параметры.Заполнить(ПараметрыМакета);
			
			Для каждого СтрокаОтпуска Из ПараметрыМакета.ДанныеОтпусков Цикл
				
				МакетСтроки = Макет.ПолучитьОбласть("Строка");
				МакетСтроки.Параметры.Заполнить(СтрокаОтпуска);
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(СтрокаОтпуска.ФИОПолные), 3, РезультатСклонения, СтрокаОтпуска.Пол) Тогда
					МакетСтроки.Параметры.ФИОПолные	= РезультатСклонения
				КонецЕсли;
				
				МакетСтроки.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОтпуска.ТабельныйНомер, Истина, Истина);
				
				ОписаниеОтпуска = Строка(СтрокаОтпуска.ПолноеНаименованиеОтпуска) + " (" + СтрокаОтпуска.КоличествоДней + ")";
				
				Если СтрокаОтпуска.ОсновнойОтпуск Тогда
					МакетСтроки.Параметры.ОсновнойОтпуск = ОписаниеОтпуска;
					МакетСтроки.Параметры.ДополнительныйОтпуск = "";
				Иначе
					МакетСтроки.Параметры.ОсновнойОтпуск = "";
					МакетСтроки.Параметры.ДополнительныйОтпуск = ОписаниеОтпуска;
				КонецЕсли;
		
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(МакетСтроки.Параметры.Подразделение) Тогда
					МакетСтроки.Параметры.Подразделение = МакетСтроки.Параметры.Подразделение.ПолноеНаименование();
				КонецЕсли;
				
				МассивМакетов = Новый Массив;
				МассивМакетов.Добавить(МакетСтроки);
				МассивМакетов.Добавить(МакетПодвала);
				
				Если НЕ ДокументРезультат.ПроверитьВывод(МассивМакетов) Тогда
					
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					МакетШапкиТаблицы = Макет.ПолучитьОбласть("ПовторятьПриПечати");
					ДокументРезультат.Вывести(МакетШапкиТаблицы);
					
				КонецЕсли; 
				
				ДокументРезультат.Вывести(МакетСтроки);
				
			КонецЦикла;
			
			ДокументРезультат.Вывести(МакетПодвала);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакетаКлючИЗначение.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ6а(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудниковСотрудники.Сотрудник,
	|	ОтпускаСотрудниковСотрудники.ВидОтпуска,
	|	ОтпускаСотрудниковСотрудники.ДатаНачала,
	|	ОтпускаСотрудниковСотрудники.ДатаОкончания,
	|	ОтпускаСотрудниковСотрудники.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускаСотрудниковСотрудники.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускаСотрудниковСотрудники.Основание,
	|	ОтпускаСотрудниковСотрудники.КоличествоДней,
	|	ОтпускаСотрудниковСотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеОтпусков
	|ИЗ
	|	Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников.Сотрудники КАК ОтпускаСотрудниковСотрудники
	|		ПО ОтпускаСотрудников.Ссылка = ОтпускаСотрудниковСотрудники.Ссылка
	|ГДЕ
	|	ОтпускаСотрудников.Ссылка В(&МассивОбъектов)
	|	И ОтпускаСотрудниковСотрудники.КоличествоДней > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудниковСотрудники.Сотрудник,
	|	ОтпускаСотрудников.ВидОтпуска,
	|	ОтпускаСотрудниковСотрудники.ДатаНачала,
	|	ОтпускаСотрудниковСотрудники.ДатаОкончания,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ОтпускаСотрудниковСотрудники.Основание,
	|	РАЗНОСТЬДАТ(ОтпускаСотрудниковСотрудники.ДатаНачала, ОтпускаСотрудниковСотрудники.ДатаОкончания, ДЕНЬ) + 1,
	|	ОтпускаСотрудниковСотрудники.НомерСтроки
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплатыСписком КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплатыСписком.Сотрудники КАК ОтпускаСотрудниковСотрудники
	|		ПО ОтпускаСотрудников.Ссылка = ОтпускаСотрудниковСотрудники.Ссылка
	|ГДЕ
	|	ОтпускаСотрудников.Ссылка В(&МассивОбъектов)
	|	И РАЗНОСТЬДАТ(ОтпускаСотрудниковСотрудники.ДатаНачала, ОтпускаСотрудниковСотрудники.ДатаОкончания, ДЕНЬ) + 1 > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудников.Дата,
	|	ОтпускаСотрудников.Номер,
	|	ОтпускаСотрудников.Организация,
	|	ОтпускаСотрудников.Руководитель,
	|	ОтпускаСотрудников.ДолжностьРуководителя,
	|	МИНИМУМ(ДанныеОтпусков.ДатаНачала) КАК Период
	|ПОМЕСТИТЬ ВТДанныеШапкиДокументов
	|ИЗ
	|	Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОтпусков КАК ДанныеОтпусков
	|		ПО ДанныеОтпусков.Ссылка = ОтпускаСотрудников.Ссылка
	|ГДЕ
	|	ОтпускаСотрудников.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудников.Дата,
	|	ОтпускаСотрудников.Номер,
	|	ОтпускаСотрудников.Организация,
	|	ОтпускаСотрудников.Руководитель,
	|	ОтпускаСотрудников.ДолжностьРуководителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудников.Дата,
	|	ОтпускаСотрудников.Номер,
	|	ОтпускаСотрудников.Организация,
	|	ОтпускаСотрудников.Руководитель,
	|	ОтпускаСотрудников.ДолжностьРуководителя,
	|	МИНИМУМ(ДанныеОтпусков.ДатаНачала)
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплатыСписком КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОтпусков КАК ДанныеОтпусков 
	|		ПО ДанныеОтпусков.Ссылка = ОтпускаСотрудников.Ссылка
	|ГДЕ
	|	ОтпускаСотрудников.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Ссылка,
	|	ОтпускаСотрудников.Дата,
	|	ОтпускаСотрудников.Номер,
	|	ОтпускаСотрудников.Организация,
	|	ОтпускаСотрудников.Руководитель,
	|	ОтпускаСотрудников.ДолжностьРуководителя";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеОтпусков", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФИОПолные,ТабельныйНомер,Подразделение,Должность,Пол");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель", "ВТДанныеШапкиДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеШапкиДокументов.Ссылка,
		|	ДанныеШапкиДокументов.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДанныеШапкиДокументов.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
		|	ДанныеШапкиДокументов.Дата,
		|	ДанныеШапкиДокументов.Номер,
		|	ДанныеШапкиДокументов.ДолжностьРуководителя,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК ФИОРуководителя
		|ИЗ
		|	ВТДанныеШапкиДокументов КАК ДанныеШапкиДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеШапкиДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|			И ДанныеШапкиДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОтпусков.Ссылка КАК Ссылка,
		|	ДанныеОтпусков.НомерСтроки,
		|	ДанныеОтпусков.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Пол,
		|	КадровыеДанныеСотрудников.Подразделение,
		|	КадровыеДанныеСотрудников.Должность,
		|	ДанныеОтпусков.ВидОтпуска,
		|	ВЫБОР
		|		КОГДА ДанныеОтпусков.ВидОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновнойОтпуск,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ КАК ПолноеНаименованиеОтпуска,
		|	ДанныеОтпусков.ДатаНачала,
		|	ДанныеОтпусков.ДатаОкончания,
		|	ДанныеОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеОтпусков.Основание,
		|	ДанныеОтпусков.КоличествоДней
		|ИЗ
		|	ВТДанныеОтпусков КАК ДанныеОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеОтпусков.ДатаНачала = КадровыеДанныеСотрудников.Период
		|			И ДанныеОтпусков.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ДанныеОтпусков.ВидОтпуска = ВидыОтпусков.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ДанныеОтпусков.НомерСтроки,
		|	Сотрудник";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаОтпусков = РезультатЗапроса[1].Выгрузить();
	
	ДанныеПечатныхФорм = Новый Соответствие;
	
	ВыборкаПоРегистраторам = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура("Номер,Дата,ОрганизацияНаименованиеПолное,ОрганизацияКодПоОКПО,ДолжностьРуководителя,ФИОРуководителя");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаПоРегистраторам);
		
		ДанныеОтпусков = ТаблицаОтпусков.Скопировать(Новый Структура("Ссылка", ВыборкаПоРегистраторам.Ссылка));
		ДанныеДокумента.Вставить("ДанныеОтпусков", ДанныеОтпусков);
		
		ДанныеПечатныхФорм.Вставить(ВыборкаПоРегистраторам.Ссылка, ДанныеДокумента);
		
	КонецЦикла; 
	
	Возврат ДанныеПечатныхФорм;
	
КонецФункции 

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму записки-расчета(Т60).
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументЗапискиРасчетаОПредоставленииОтпуска(МассивОбъектов, ОбъектыПечати)
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ЗапискаРасчетОПредоставленииОтпуска";
	ДокументРезультат.АвтоМасштаб = Истина;
	
	Возврат СформироватьЗапискиРасчетаТ60(ДокументРезультат, ОбъектыПечати, МассивОбъектов);
КонецФункции 

Функция СформироватьЗапискиРасчетаТ60(ДокументРезультат, ОбъектыПечати, МассивОбъектов)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т60");
	
	СтруктураРезультатов = КадровыйУчетРасширенный.СформироватьЗапросДляТ60(МассивОбъектов);
	
	КадровыеОтпуска = СтруктураРезультатов.КадровыеОтпуска;
	Если КадровыеОтпуска.Пустой() Тогда
		ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, Новый Массив, ОбъектыПечати);
		Возврат ДокументРезультат
	КонецЕсли;
	
	ОбластьШапка 							= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаДопОтпуска 				= Макет.ПолучитьОбласть("СтрокаДопОтпуска");
	ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	ОбластьРасчетСреднего 					= Макет.ПолучитьОбласть("РасчетСреднего");
	ОбластьРасчетСреднегоИтого 				= Макет.ПолучитьОбласть("РасчетСреднегоИтого");
	ОбластьДополнительнаяСтрокаЗаработка 	= Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
	ОбластьПодвалРасчета 					= Макет.ПолучитьОбласть("ПодвалРасчета");

	ВыборкаПоСсылке = КадровыеОтпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ПервыйПриказ = Истина;

	Начисления 	= СтруктураРезультатов.Начисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Удержания 	= СтруктураРезультатов.Удержания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НДФЛ 		= СтруктураРезультатов.НДФЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(МассивОбъектов[0]);
	ДанныеРасчетаСреднегоЗаработкаДокументов = Менеджер.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);

	Пока ВыборкаПоСсылке.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровЗапискиРасчетаТ60();
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДатаНачалаВсего = '00010101';
			ДатаОкончанияВсего = '00010101';
			ШапкаЗаполнена = Ложь;
			ПродолжительностьВсего = 0;
			ОрганизацияДокумента = Неопределено;
			
			//////////////////////////////////////////////////////////////////////
			// Первая страница
			// Основной отпуск

			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Параметры.Работник), 3, РезультатСклонения, Параметры.Пол) Тогда
					Параметры.Работник	= РезультатСклонения
				КонецЕсли;
				
				Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
				Сотрудник = ВыборкаПоВидуОтпуска.Сотрудник;
				ШапкаЗаполнена = Истина;
				
				ПредставлениеДатыНачалаОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=DD");
				Параметры.ДатаНачалаЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыНачалаОсновногоОтпуска,2)), "      ");
				Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, СтрДлина(ПредставлениеДатыНачалаОсновногоОтпуска)-2)), "                     г.");
				
				ПредставлениеДатыОкончанияОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				Параметры.ДатаОкончанияЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыОкончанияОсновногоОтпуска,2)), "      ");
				Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДатыОкончанияОсновногоОтпуска, СтрДлина(ПредставлениеДатыОкончанияОсновногоОтпуска)-2)), "                     г.");
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					Параметры.Продолжительность = ВыборкаПоВидуОтпуска.Продолжительность;
					ПродолжительностьВсего  = ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала) Тогда
					ДатаНачалаВсего = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;	
				
				Если  ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания) Тогда
					ДатаОкончанияВсего = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоВидуОтпуска.Сбросить();
			
			//////////////////////////////////////////////////////////////////////
			// Дополнительный отпуск
			
			ДатаНачалаДоп = '00010101';
			ДатаОкончанияДоп = '00010101';
			СтрокаВидДопОтпуска = "";
			ПродолжительностьДоп = 0;
			
			МассивДопОтпусков = Новый Массив;
			
			Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
				
				СтруктураДопОтпуска = Новый Структура;
				
				Если НЕ ШапкаЗаполнена  Тогда
					КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
					Параметры.Продолжительность  = 0;
					Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
					Сотрудник = ВыборкаПоВидуОтпуска.Сотрудник;
					ШапкаЗаполнена = Истина;
				КонецЕсли;
				
				СтруктураДопОтпуска.Вставить("ВидДопОтпуска", 						Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска));
				СтруктураДопОтпуска.Вставить("ДнейКОплатеДополнительногоОтпуска", 	ВыборкаПоВидуОтпуска.Продолжительность);
				СтруктураДопОтпуска.Вставить("ДатаДопС", 							Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=D"));
				СтруктураДопОтпуска.Вставить("ДатаДопПо", 							Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=D"));
				СтруктураДопОтпуска.Вставить("ОснованиеДопОтпуска", 				ВыборкаПоВидуОтпуска.Основание);
				
				ПродолжительностьДоп = ПродолжительностьДоп + ВыборкаПоВидуОтпуска.Продолжительность;
				
				Если НЕ ЗначениеЗаполнено(ДатаНачалаДоп) ИЛИ ДатаНачалаДоп > ВыборкаПоВидуОтпуска.ДатаНачала Тогда
					ДатаНачалаДоп = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаОкончанияДоп) ИЛИ ДатаОкончанияДоп < ВыборкаПоВидуОтпуска.ДатаОкончания Тогда
					ДатаОкончанияДоп = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
				
				МассивДопОтпусков.Добавить(СтруктураДопОтпуска);
				
			КонецЦикла;
			
			ПредставлениеДатыНачалаДопОтпуска  = Формат(ДатаНачалаДоп, "ДЛФ=DD");
			Параметры.ДатаСДопЧисло = ?(ЗначениеЗаполнено(ДатаНачалаДоп), СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)), "      ");
			Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаДоп),  СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияДопОтпуска  = Формат(ДатаОкончанияДоп, "ДЛФ=DD");
			Параметры.ДатаПоДопЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияДоп), СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)), "      ");
			Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияДоп),  СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)), "                     г.");
			
			Если ЗначениеЗаполнено(ПродолжительностьДоп) Тогда
				Параметры.ПродолжительностьДоп = ПродолжительностьДоп;
				ПродолжительностьВсего = ПродолжительностьВсего + ПродолжительностьДоп;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПродолжительностьВсего) Тогда
				Параметры.ПродолжительностьВсего = ПродолжительностьВсего;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВидДопОтпуска) Тогда
				СтрокаВидДопОтпуска = Прав(СтрокаВидДопОтпуска,СтрДлина(СтрокаВидДопОтпуска) - 2);
				Параметры.ВидДопОтпуска = СтрокаВидДопОтпуска;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаНачалаВсего) ИЛИ (ЗначениеЗаполнено(ДатаНачалаДоп) И ДатаНачалаВсего > ДатаНачалаДоп) Тогда
			    ДатаНачалаВсего = ДатаНачалаДоп;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияВсего) ИЛИ (ЗначениеЗаполнено(ДатаОкончанияДоп) И ДатаОкончанияВсего < ДатаОкончанияДоп) Тогда
			    ДатаОкончанияВсего = ДатаОкончанияДоп;
			КонецЕсли;
			
			ПредставлениеДатыНачалаВсего  = Формат(ДатаНачалаВсего, "ДЛФ=DD");
			Параметры.ДатаНачалаВсегоЧисло = ?(ЗначениеЗаполнено(ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыНачалаВсего,2)), "      ");
			Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаВсего),  СокрЛП(Прав(ПредставлениеДатыНачалаВсего, СтрДлина(ПредставлениеДатыНачалаВсего)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияВсего  = Формат(ДатаОкончанияВсего, "ДЛФ=DD");
			Параметры.ДатаОкончанияВсегоЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыОкончанияВсего,2)), "      ");
			Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияВсего),  СокрЛП(Прав(ПредставлениеДатыОкончанияВсего, СтрДлина(ПредставлениеДатыОкончанияВсего)-2)), "                     г.");
			
			//////////////////////////////////////////////////////////////////////
			// Подвал первой страницы

			Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=D");
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;

			ОбластьШапка.Параметры.Заполнить(Параметры);
			
			ДокументРезультат.Вывести(ОбластьШапка);
			
			Для каждого ДопОтпуск Из МассивДопОтпусков Цикл
				ОбластьСтрокаДопОтпуска.Параметры.Заполнить(ДопОтпуск);
				ДокументРезультат.Вывести(ОбластьСтрокаДопОтпуска);
			КонецЦикла;
			
			ОбластьСтрокаДопОтпуска.Параметры.Заполнить(Новый Структура("ВидДопОтпуска,ДнейКОплатеДополнительногоОтпуска,ДатаДопС,ДатаДопПо,ОснованиеДопОтпуска"));	

			счДопОтпусков = 5 - МассивДопОтпусков.Количество();
			Пока счДопОтпусков > 0 Цикл
				ДокументРезультат.Вывести(ОбластьСтрокаДопОтпуска);
				счДопОтпусков = счДопОтпусков - 1;
			КонецЦикла;
			
			ОбластьПодвал.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьПодвал);
			
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
			//////////////////////////////////////////////////////////////////////
			// Вторая страница
			// Расчет среднего заработка

			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
				Если Выборка.Ссылка = Элемент.РеквизитыДокумента.Ссылка Тогда
					ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
					ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ОбщаяТаблицаДанныхОСреднем = Новый ТаблицаЗначений;
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
			
			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
				НоваяСтрока = ОбщаяТаблицаДанныхОСреднем.Добавить();
				НоваяСтрока.Месяц = Элемент["Месяц"];
				НоваяСтрока.Сумма = Элемент["Учтено"];
			КонецЦикла;
			
			ОбщаяТаблицаДанныхОСреднем.Свернуть("Месяц", "Сумма");
			ОбщаяТаблицаДанныхОСреднем.Сортировать("Месяц");
			
			МесяцСреднегоЗаработка = 1;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				
				Если МесяцСреднегоЗаработка > 12 Тогда
				   Прервать;
	 			КонецЕсли;
				
				СтрокаГод = "Год" + МесяцСреднегоЗаработка;
				СтрокаМесяц = "Месяц" + МесяцСреднегоЗаработка;
				СтрокаСумма = "Сумма" + МесяцСреднегоЗаработка;
				Параметры.Вставить(СтрокаГод, Формат(ПериодСреднего.Месяц, "ДФ=yyyy"));
				Параметры.Вставить(СтрокаМесяц, Формат(ПериодСреднего.Месяц, "ДФ=MMMM"));
				Параметры.Вставить(СтрокаСумма, ПериодСреднего.Сумма);
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
			КонецЦикла;
			
			МассивДополнительныхСтрокЗаработка = Новый Массив; 
			
			МесяцСреднегоЗаработка = 0;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;

				Если МесяцСреднегоЗаработка < 13 Тогда
				   Продолжить;
	 			КонецЕсли;
				
				МассивДополнительныхСтрокЗаработка.Добавить(Новый Структура("Год,Месяц,Сумма", Формат(ПериодСреднего.Месяц, "ДФ=yyyy"), Формат(ПериодСреднего.Месяц, "ДФ=MMMM"), ПериодСреднего.Сумма));
				
			КонецЦикла;
			
			ВсегоВремени 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
			ВсегоЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
			
			Если ПараметрыРасчетаСреднего.ИспользоватьСреднеЧасовойЗаработок Тогда
				Параметры.Вставить("ВсегоЧасовРасчетногоПериода", ВсегоВремени);
			Иначе
				Параметры.Вставить("ВсегоДнейРасчетногоПериода", ВсегоВремени);
			КонецЕсли;
			
			Параметры.Вставить("ВсегоУчтено", 				ВсегоЗаработок);		
			Параметры.Вставить("ЗаработокЗаЕдиницуВремени", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ВсегоЗаработок, ВсегоВремени));
			
			ОбластьРасчетСреднего.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьРасчетСреднего);
			
			Для каждого ДополнительнаяСтрокаЗаработка Из МассивДополнительныхСтрокЗаработка Цикл
				ОбластьДополнительнаяСтрокаЗаработка.Параметры.Заполнить(ДополнительнаяСтрокаЗаработка);
				ДокументРезультат.Вывести(ОбластьДополнительнаяСтрокаЗаработка);
			КонецЦикла;	
			
			ОбластьРасчетСреднегоИтого.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьРасчетСреднегоИтого);
			
			//////////////////////////////////////////////////////////////////////
			// Начисления
			
			Начисления.Сбросить();
			
			СтрТекущийМесяц = "";
			СтрБудущиеМесяцы = "";
			ДнейКОплатеЗаТекущийМесяц = 0;
			НачисленоОтпускныхЗаТекущийМесяц = 0;
			ДругиеНачисленияЗаТекущийМесяц = 0;
			ДнейКОплатеЗаБудущиеМесяцы = 0;
			НачисленоОтпускныхЗаБудущиеМесяцы = 0;
			ДругиеНачисленияЗаБудущиеМесяцы = 0;
			ВсегоНачислено = 0;
			
			БудущиеМесяцы = Новый СписокЗначений; 
			
			Если Начисления.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда
				
				СтрТекущийМесяц = Формат(НачалоМесяца(Начисления.ПериодРегистрации), "ДФ=MMMM");
				ВсегоНачислено = Начисления.Результат;
				ВыборкаНачислений = Начисления.Выбрать();
				Пока ВыборкаНачислений.Следующий() Цикл
					Если НачалоМесяца(ВыборкаНачислений.ПериодРегистрации) >= НачалоМесяца(ВыборкаНачислений.ДатаНачала) Тогда
						Если ВыборкаНачислений.ОплатаОтпуска Тогда
							ДнейКОплатеЗаТекущийМесяц = ДнейКОплатеЗаТекущийМесяц + ВыборкаНачислений.ОплаченоДней;
							НачисленоОтпускныхЗаТекущийМесяц = НачисленоОтпускныхЗаТекущийМесяц + ВыборкаНачислений.Результат;
						Иначе
							ДругиеНачисленияЗаТекущийМесяц = ДругиеНачисленияЗаТекущийМесяц + ВыборкаНачислений.Результат;
						КонецЕсли;
					Иначе 
						БудущиеМесяцы.Добавить(НачалоМесяца(ВыборкаНачислений.ДатаНачала));
						Если ВыборкаНачислений.ОплатаОтпуска Тогда
							ДнейКОплатеЗаБудущиеМесяцы = ДнейКОплатеЗаБудущиеМесяцы + ВыборкаНачислений.ОплаченоДней;
							НачисленоОтпускныхЗаБудущиеМесяцы = НачисленоОтпускныхЗаБудущиеМесяцы + ВыборкаНачислений.Результат;
						Иначе
							ДругиеНачисленияЗаБудущиеМесяцы = ДругиеНачисленияЗаБудущиеМесяцы + ВыборкаНачислений.Результат;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				
				БудущиеМесяцы.СортироватьПоЗначению();
				Для каждого БудущийМесяц Из БудущиеМесяцы Цикл
					СтрБудущиеМесяцы = СтрБудущиеМесяцы + Формат(БудущийМесяц.Значение, "ДФ=MMMM") + ", ";
				КонецЦикла;
				
				СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрБудущиеМесяцы, 2);
				
				Параметры.Вставить("СтрТекущийМесяц", СтрТекущийМесяц);
				Параметры.Вставить("СтрБудущиеМесяцы", СтрБудущиеМесяцы);
				Параметры.Вставить("ДнейКОплатеЗаТекущийМесяц", ДнейКОплатеЗаТекущийМесяц);
				Параметры.Вставить("НачисленоОтпускныхЗаТекущийМесяц", НачисленоОтпускныхЗаТекущийМесяц);
				Параметры.Вставить("ДругиеНачисленияЗаТекущийМесяц", ДругиеНачисленияЗаТекущийМесяц);
				Параметры.Вставить("ДнейКОплатеЗаБудущиеМесяцы", ДнейКОплатеЗаБудущиеМесяцы);
				Параметры.Вставить("НачисленоОтпускныхЗаБудущиеМесяцы", НачисленоОтпускныхЗаБудущиеМесяцы);
				Параметры.Вставить("ДругиеНачисленияЗаБудущиеМесяцы", ДругиеНачисленияЗаБудущиеМесяцы);
				Параметры.Вставить("ВсегоНачислено", ВсегоНачислено);
				
			КонецЕсли; 
			
			ВсегоУдержано = 0;
			
			//////////////////////////////////////////////////////////////////////
			// НДФЛ
			
			НДФЛ.Сбросить();
			СуммаНДФЛ = 0;
			Если НДФЛ.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда 
				СуммаНДФЛ = НДФЛ.Налог;
				Параметры.Вставить("СуммаНДФЛ", СуммаНДФЛ);
			КонецЕсли;
			
			ВсегоУдержано = ВсегоУдержано + СуммаНДФЛ;
			
			//////////////////////////////////////////////////////////////////////
			// Удержания
			Удержания.Сбросить(); 
			СуммаПрочихУдержаний = 0;
			
			Если Удержания.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда
				ВыборкаУдержаний = Удержания.Выбрать();
				НомерУдержания = 1;
				Пока ВыборкаУдержаний.Следующий() Цикл
					ВсегоУдержано = ВсегоУдержано + ВыборкаУдержаний.Результат;
					Если НомерУдержания < 6 Тогда
						Параметры.Вставить("Удержание" + НомерУдержания, ВыборкаУдержаний.Удержание);	
						Параметры.Вставить("СуммаУдержания" + НомерУдержания, ВыборкаУдержаний.Результат);	
					Иначе
						СуммаПрочихУдержаний = СуммаПрочихУдержаний + ВыборкаУдержаний.Результат;
					КонецЕсли;
					НомерУдержания = НомерУдержания + 1;
				КонецЦикла;
				
				Если СуммаПрочихУдержаний > 0 Тогда
					Параметры.Вставить("Удержание5", НСтр("ru = 'Прочие удержания'"));	
					Параметры.Вставить("СуммаУдержания5", Параметры["СуммаУдержания5"] + СуммаПрочихУдержаний);	
				КонецЕсли;
			КонецЕсли;
			
			Параметры.Вставить("ВсегоУдержано", ВсегоУдержано);
			
			КВыплате = ?(ВсегоНачислено - ВсегоУдержано > 0, ВсегоНачислено - ВсегоУдержано, 0);
			Параметры.Вставить("КВыплате", КВыплате);
			
			Параметры.Вставить("КВыплатеПрописью", 	РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета));
			Параметры.Вставить("КВыплатеРубли",		Формат(Цел(КВыплате),"ЧДЦ=0; ЧН=-"));
			Параметры.Вставить("КВыплатеКопейки", 	Формат((КВыплате - Цел(КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-"));
			
			//////////////////////////////////////////////////////////////////////
			// Подвал второй страницы
			
			ОбластьПодвалРасчета.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьПодвалРасчета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат
	
КонецФункции

Функция СтруктураПараметровЗапискиРасчетаТ60()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");				
	Параметры.Вставить("КодПоОКПО");
    Параметры.Вставить("Работник");						
	Параметры.Вставить("НомерДок");	
	Параметры.Вставить("ДатаДок");	
	Параметры.Вставить("ТабельныйНомер");
	Параметры.Вставить("Подразделение");							
	Параметры.Вставить("Должность");
	Параметры.Вставить("БухгалтерРасшифровкаПодписи");
	Параметры.Вставить("РаботникКадровойСлужбыРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРаботникаКадровойСлужбы");
	Параметры.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");	
	Параметры.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("ДатаНачалаЧисло");
	Параметры.Вставить("ДатаНачалаМесяцГод"); 
	Параметры.Вставить("ДатаОкончанияЧисло"); 
	Параметры.Вставить("ДатаОкончанияМесяцГод");  
	Параметры.Вставить("ПродолжительностьДоп");
	Параметры.Вставить("ДатаСДопЧисло");
	Параметры.Вставить("ДатаСДопМесяцГод");
	Параметры.Вставить("ДатаПоДопЧисло");
	Параметры.Вставить("ДатаПоДопМесяцГод");
    Параметры.Вставить("ВидДопОтпуска");						
	Параметры.Вставить("ПродолжительностьВсего");
	Параметры.Вставить("ДатаНачалаВсегоЧисло");
	Параметры.Вставить("ДатаНачалаВсегоМесяцГод");
	Параметры.Вставить("ДатаОкончанияВсегоЧисло");
	Параметры.Вставить("ДатаОкончанияВсегоМесяцГод");
	
	// Средний заработок
	Параметры.Вставить("ВсегоДнейРасчетногоПериода"); 
	Параметры.Вставить("ВсегоЧасовРасчетногоПериода"); 
	Параметры.Вставить("ЗаработокЗаЕдиницуВремени"); 
	Параметры.Вставить("ВсегоУчтено");

	Сч  = 1;
	Для Сч = 1 По 12 Цикл
		СтрокаГод = "Год" + Сч;
		СтрокаМесяц = "Месяц" + Сч;
		СтрокаСумма = "Сумма" + Сч;
		Параметры.Вставить(СтрокаГод);
		Параметры.Вставить(СтрокаМесяц);
		Параметры.Вставить(СтрокаСумма);
	КонецЦикла;	
	
	Параметры.Вставить("СтрТекущийМесяц");
	Параметры.Вставить("СтрБудущиеМесяцы");
	Параметры.Вставить("ДнейКОплатеЗаТекущийМесяц");
	Параметры.Вставить("НачисленоОтпускныхЗаТекущийМесяц");
	Параметры.Вставить("ДругиеНачисленияЗаТекущийМесяц");
	Параметры.Вставить("ДнейКОплатеЗаБудущиеМесяцы");
	Параметры.Вставить("НачисленоОтпускныхЗаБудущиеМесяцы");
	Параметры.Вставить("ДругиеНачисленияЗаБудущиеМесяцы");
	Параметры.Вставить("ВсегоНачислено");
	Параметры.Вставить("СуммаНДФЛ");
	
	НомерУдержания = 1;
	Пока НомерУдержания < 6 Цикл
		Параметры.Вставить("Удержание" + НомерУдержания);
		Параметры.Вставить("СуммаУдержания" + НомерУдержания);
		НомерУдержания = НомерУдержания + 1;
	КонецЦикла;
	
	Параметры.Вставить("ВсегоУдержано");
	
	Параметры.Вставить("КВыплате");
	Параметры.Вставить("КВыплатеПрописью");
	Параметры.Вставить("КВыплатеРубли");
	Параметры.Вставить("КВыплатеКопейки");

	Возврат Параметры;
	
КонецФункции 


#Область Командировка

Функция ДанныеДляПечатиКомандировки(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Командировка.Ссылка КАК Ссылка,
	|	Командировка.Сотрудник КАК Сотрудник,
	|	Командировка.Организация КАК Организация,
	|	Командировка.Дата КАК Дата,
	|	Командировка.Дата КАК ДатаДокумента,
	|	Командировка.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Командировка.ДатаНачала КАК ДатаНачала,
	|	Командировка.ДатаНачала КАК Период,
	|	Командировка.ДатаОкончания КАК ДатаОкончания,
	|	Командировка.МестоНазначения КАК МестоНазначения,
	|	Командировка.ОрганизацияНазначения КАК ОрганизацияНазначения,
	|	Командировка.Основание КАК Основание,
	|	Командировка.Цель КАК Цель,
	|	Командировка.ДнейВПути КАК ДнейВПути,
	|	Командировка.Руководитель КАК Руководитель,
	|	Командировка.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	Командировка.КомандировкаЗаСчетСредств
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Командировка.Организация = Организации.Ссылка
	|ГДЕ
	|	Командировка.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФИОПолные,Подразделение,Должность,ТабельныйНомер,ДокументПредставление,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Командировка.Ссылка КАК Ссылка,
	|	Командировка.ДатаДокумента КАК ДатаДокумента,
	|	Командировка.НомерДокумента КАК НомерДокумента,
	|	Командировка.Сотрудник КАК Сотрудник,
	|	Командировка.Организация КАК Организация,
	|	Командировка.НазваниеОрганизации КАК НазваниеОрганизации,
	|	Командировка.КодПоОКПО КАК КодПоОКПО,
	|	Командировка.ДатаНачала КАК ДатаНачала,
	|	Командировка.ДатаОкончания КАК ДатаОкончания,
	|	Командировка.МестоНазначения КАК МестоНазначения,
	|	РАЗНОСТЬДАТ(Командировка.ДатаНачала, Командировка.ДатаОкончания, ДЕНЬ) + 1 КАК Продолжительность,
	|	РАЗНОСТЬДАТ(Командировка.ДатаНачала, Командировка.ДатаОкончания, ДЕНЬ) + 1 - Командировка.ДнейВПути КАК ПродолжительностьЧистая,
	|	Командировка.ОрганизацияНазначения КАК ОрганизацияНазначения,
	|	Командировка.Основание КАК Основание,
	|	Командировка.КомандировкаЗаСчетСредств КАК КомандировкаЗаСчетСредств,
	|	Командировка.Цель КАК Цель,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	Командировка.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК Командировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО Командировка.Ссылка = ФИООтветственныхЛиц.Ссылка
	|			И Командировка.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Командировка.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Командировка.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Командировка.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ о направлении в командировку (Т-9).
//
Функция ТабличныйДокументПриказОНаправленииСотрудникаВКомандировку(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Командировка_Т9";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиКомандировки(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Приказ");
		
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПриказ.Параметры.Сотрудник = ДанныеДляПечати.ФИОПолные;
		
		// 4D:ERP для Беларуси, Юлия, 06.07.2017 10:20:56 
		// Редактировать печатную форму "Приказ о командировании"в документе "Командировка" , № 17744
		// {
		ОбластьМакетаПриказ.Параметры.НаименованиеОрганизации = ДанныеДляПечати.Организация.НаименованиеСокращенное;
		ОбластьМакетаПриказ.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДФ=dd.MM.yyyy");
		ОбластьМакетаПриказ.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеДляПечати.НомерДокумента); 
		
		
		КонтактнаяИнформация = ДанныеДляПечати.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Если КИнформация <> Неопределено Тогда 	
			ОбластьМакетаПриказ.Параметры.ГородЮрАдресОрганизации = КИнформация.Город;
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.Работник = ВыделитьФамилию(ДанныеДляПечати.ФИОПолные);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОПолные), 4, РезультатСклонения, ДанныеДляПечати.Пол) Тогда
			ОбластьМакетаПриказ.Параметры.Сотрудник	= ВыделитьСлово(РезультатСклонения);
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.Должность = Нрег(СклонениеДолжностейИПодразделений(Строка(ДанныеДляПечати.Должность)));
		ОбластьМакетаПриказ.Параметры.Подразделение = СклонениеДолжностейИПодразделений(Строка(ДанныеДляПечати.Подразделение));;
		
		Если ЗначениеЗаполнено(ДанныеДляПечати.МестоНазначения) Тогда
			Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ДанныеДляПечати.МестоНазначения, Ложь, , Ложь);
			МестоНазначения = Структура.ВинительныйПадеж;
			
			ОбластьМакетаПриказ.Параметры.МестоНазначения = " в " + МестоНазначения;		
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.Продолжительность = " на " + ДанныеДляПечати.Продолжительность + " " + СклонениеКаледнадрныеДни(ДанныеДляПечати.Продолжительность);
		ОбластьМакетаПриказ.Параметры.Период = " с " + Формат(ДанныеДляПечати.ДатаНачала, "ДЛФ=Д") + " по " + Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=Д");
		
		Если ЗначениеЗаполнено(ДанныеДляПечати.Цель) Тогда
			
			Разделитель = " ";
			МассивСлов = СтрРазделить(ДанныеДляПечати.Цель, Разделитель);
			МассивСлов[0] = Нрег(МассивСлов[0]);
			Цель = СтрСоединить(МассивСлов, Разделитель);
			ОбластьМакетаПриказ.Параметры.Цель = " " + Цель;
			
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ДанныеДляПечати.ФИОПолные);
		ОбластьМакетаПриказ.Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ДанныеДляПечати.Ссылка.Руководитель);
		// }
		// 4D
		
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// 4D:ERP для Беларуси, Юлия, 07.02.2018 11:34:59 
// Редактировать печатную форму "Приказ о командировании"в документе "Командировка" , № 17744
// {
Функция СклонениеКаледнадрныеДни(КоличествоДней)

	ПоследнЦифраКоличествоДней = Прав(КоличествоДней, 1);
	Если ПоследнЦифраКоличествоДней = "1" Тогда
		
		КалендарныеДни = "календарный день";
		
	ИначеЕсли ПоследнЦифраКоличествоДней = "2" 
		ИЛИ ПоследнЦифраКоличествоДней = "3" 
		ИЛИ ПоследнЦифраКоличествоДней = "4" Тогда
		
		КалендарныеДни = "календарных дня";
	Иначе
		КалендарныеДни = "календарных дней";
	КонецЕсли; 
	
	Если КоличествоДней = 11 ИЛИ КоличествоДней = 12 Тогда
		КалендарныеДни = "календарных дней";
	КонецЕсли;
	
	Возврат КалендарныеДни;
	
КонецФункции

Функция ПолучитьАдресОрганизации(КонтактнаяИнформация, ВидКонтактнойИнформации) 
	
	ПараметрыОтбора = Новый Структура;
 	ПараметрыОтбора.Вставить("Вид", ВидКонтактнойИнформации);
	
	НайденнаяСтрока = КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда  
		Возврат НайденнаяСтрока[0];
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВыделитьСлово(ФИОПолные) Экспорт
	
	Если ТипЗнч(ФИОПолные) = Тип("Структура") Тогда
		
		ФИО = Новый Массив;
		ФИО.Добавить(ФИОПолные.Фамилия);
		ФИО.Добавить(ФИОПолные.Имя);
		ФИО.Добавить(ФИОПолные.Отчество);
		
	Иначе
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	КонецЕсли;
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьСлово = Врег(ФИО[0]) + " " + ФИО[1] + " " + ФИО[2];
			
	Иначе
		ВыделитьСлово = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьСлово;
	
КонецФункции
// }
// 4D

// Командировочное удостоверение (Т-10).
//
Функция ТабличныйДокументКомандировочноеУдостоверение(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Командировка_Т10";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиКомандировки(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Приказ");
		
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПриказ.Параметры.Сотрудник = ДанныеДляПечати.ФИОПолные;
		ОбластьМакетаПриказ.Параметры.Продолжительность = ДанныеДляПечати.ПродолжительностьЧистая;
		ОбластьМакетаПриказ.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеДляПечати.НомерДокумента);
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакетаПриказ.Параметры.Подразделение) Тогда
			ОбластьМакетаПриказ.Параметры.Подразделение = ОбластьМакетаПриказ.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Служебное задание (Т-10а)
//
Функция ТабличныйДокументСлужебноеЗадание(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Командировка_Т10а";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиКомандировки(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Приказ");
		
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПриказ.Параметры.Сотрудник = ДанныеДляПечати.ФИОПолные;
		ОбластьМакетаПриказ.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеДляПечати.НомерДокумента);
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакетаПриказ.Параметры.Подразделение) Тогда
			ОбластьМакетаПриказ.Параметры.Подразделение = ОбластьМакетаПриказ.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Т9а
////////////////////
Функция ДанныеДляПечатиКомандировкиСотрудников(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомандировкаСотрудников.Сотрудник КАК Сотрудник,
	|	КомандировкаСотрудников.Ссылка.Организация КАК Организация,
	|	КомандировкаСотрудников.Ссылка.Дата КАК Дата,
	|	КомандировкаСотрудников.Ссылка.Дата КАК ДатаДокумента,
	|	КомандировкаСотрудников.Ссылка.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	КомандировкаСотрудников.ДатаНачала КАК ДатаНачала,
	|	КомандировкаСотрудников.ДатаНачала КАК Период,
	|	КомандировкаСотрудников.ДатаОкончания КАК ДатаОкончания,
	|	КомандировкаСотрудников.МестоНазначения КАК МестоНазначения,
	|	КомандировкаСотрудников.ОрганизацияНазначения КАК ОрганизацияНазначения,
	|	КомандировкаСотрудников.Ссылка.Основание КАК Основание,
	|	КомандировкаСотрудников.Цель КАК Цель,
	|	КомандировкаСотрудников.ДнейВПути КАК ДнейВПути,
	|	КомандировкаСотрудников.КомандировкаЗаСчетСредств КАК КомандировкаЗаСчетСредств,
	|	КомандировкаСотрудников.Ссылка,
	|	КомандировкаСотрудников.Ссылка.Руководитель КАК Руководитель,
	|	КомандировкаСотрудников.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.КомандировкиСотрудников.Сотрудники КАК КомандировкаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО КомандировкаСотрудников.Ссылка.Организация = Организации.Ссылка
	|ГДЕ
	|	КомандировкаСотрудников.Ссылка В(&МассивДокументов)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФИОПолные,Подразделение,Должность,ТабельныйНомер,ДокументПредставление,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Командировка.Ссылка КАК Ссылка,
	|	Командировка.ДатаДокумента КАК ДатаДокумента,
	|	Командировка.НомерДокумента КАК НомерДокумента,
	|	Командировка.Сотрудник КАК Сотрудник,
	|	Командировка.Организация КАК Организация,
	|	Командировка.НазваниеОрганизации КАК НазваниеОрганизации,
	|	Командировка.КодПоОКПО КАК КодПоОКПО,
	|	Командировка.ДатаНачала КАК ДатаНачала,
	|	Командировка.ДатаОкончания КАК ДатаОкончания,
	|	Командировка.МестоНазначения КАК МестоНазначения,
	|	РАЗНОСТЬДАТ(Командировка.ДатаНачала, Командировка.ДатаОкончания, ДЕНЬ) + 1 КАК Продолжительность,
	|	РАЗНОСТЬДАТ(Командировка.ДатаНачала, Командировка.ДатаОкончания, ДЕНЬ) + 1 - Командировка.ДнейВПути КАК ПродолжительностьЧистая,
	|	Командировка.ОрганизацияНазначения КАК ОрганизацияНазначения,
	|	Командировка.Основание КАК ОснованиеКомандировки,
	|	Командировка.КомандировкаЗаСчетСредств КАК КомандировкаЗаСчетСредств,
	|	Командировка.Цель КАК Цель,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	Командировка.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК Командировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО Командировка.Дата = ФИООтветственныхЛиц.Дата
	|			И Командировка.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Командировка.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Командировка.ДатаНачала = КадровыеДанныеСотрудников.Период
	|ИТОГИ
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(НазваниеОрганизации),
	|	МАКСИМУМ(КодПоОКПО),
	|	МАКСИМУМ(ОснованиеКомандировки),
	|	МАКСИМУМ(ДолжностьРуководителя),
	|	МАКСИМУМ(РуководительРасшифровкаПодписи)
	|ПО
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ о направлении в командировку (Т-9а).
//
Функция ТабличныйДокументПриказОНаправленииСотрудниковВКомандировку(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Командировка_Т9а";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	
	// получаем данные для печати
	ДанныеПоДокументам = ДанныеДляПечатиКомандировкиСотрудников(МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// 4D:ERP для Беларуси, Юлия, 09.02.2018 17:46:45 
	// Редактировать документ "Командировка группы" и печатную форму, № 17749
	// {
	Пока ДанныеПоДокументам.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПоДокументам);
		ОбластьМакетаШапка.Параметры.НаименованиеОрганизации = ДанныеПоДокументам.Ссылка.Организация.НаименованиеСокращенное;
		
		КонтактнаяИнформация = ДанныеПоДокументам.Ссылка.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Если КИнформация <> Неопределено Тогда 	
			ОбластьМакетаШапка.Параметры.ГородЮрАдресОрганизации = КИнформация.Город;
		КонецЕсли;

		ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеПоДокументам.ДатаДокумента, "ДЛФ=D");
		ОбластьМакетаШапка.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПоДокументам.НомерДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		ДанныеПоСотрудникам = ДанныеПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СчСотрудников = 0;
		
		ПостфиксНомераДокумента = 1;
		
		Пока ДанныеПоСотрудникам.Следующий() Цикл
			
			Если СчСотрудников = 3 Тогда
				
				ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
				ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПоДокументам);
				ДокументРезультат.Вывести(ОбластьМакетаПодвал);
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Запомним номер строки, с которой начали выводить текущий документ.
				НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
				СчСотрудников = 0;
				ПостфиксНомераДокумента = ПостфиксНомераДокумента + 1;
				
				ОбластьМакетаШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПоДокументам);
				ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеПоДокументам.ДатаДокумента, "ДЛФ=D");
				ОбластьМакетаШапка.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПоДокументам.НомерДокумента)+ "/" + ПостфиксНомераДокумента;
				ДокументРезультат.Вывести(ОбластьМакетаШапка);
				
				ОбластьМакетаЗаголовки 	= Макет.ПолучитьОбласть("Строка|Заголовки");
				ДокументРезультат.Вывести(ОбластьМакетаЗаголовки);
				
			КонецЕсли;
			
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПоСотрудникам);
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеПоСотрудникам.ФИОПолные), 4, РезультатСклонения, ДанныеПоСотрудникам.Пол) Тогда
				ОбластьМакетаСтрока.Параметры.Сотрудник = ВыделитьСлово(РезультатСклонения);
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Должность = Нрег(СклонениеДолжностейИПодразделений(Строка(ДанныеПоСотрудникам.Должность)));
			ОбластьМакетаСтрока.Параметры.Подразделение = СклонениеДолжностейИПодразделений(Строка(ДанныеПоСотрудникам.Подразделение));;
			
			Если ЗначениеЗаполнено(ДанныеПоСотрудникам.МестоНазначения) Тогда
				
				Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(ДанныеПоСотрудникам.МестоНазначения, Ложь, , Ложь);
				МестоНазначения = Структура.ВинительныйПадеж;
				ОбластьМакетаСтрока.Параметры.МестоНазначения = " в " + МестоНазначения;
				
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Продолжительность = " на " + ДанныеПоСотрудникам.Продолжительность + " " + СклонениеКаледнадрныеДни(ДанныеПоСотрудникам.Продолжительность);
			ОбластьМакетаСтрока.Параметры.Период = " с " + Формат(ДанныеПоСотрудникам.ДатаНачала, "ДЛФ=Д") + " по " + Формат(ДанныеПоСотрудникам.ДатаОкончания, "ДЛФ=Д");
			
			Если ЗначениеЗаполнено(ДанныеПоСотрудникам.Цель) Тогда
				
				Разделитель = " ";
				МассивСлов = СтрРазделить(ДанныеПоСотрудникам.Цель, Разделитель);
				МассивСлов[0] = Нрег(МассивСлов[0]);
				Цель = СтрСоединить(МассивСлов, Разделитель);
				ОбластьМакетаСтрока.Параметры.Цель = " " + Цель;
				
			КонецЕсли;
			
			ДокументРезультат.Присоединить(ОбластьМакетаСтрока);
			СчСотрудников = СчСотрудников + 1;
			
		КонецЦикла;
		
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПоДокументам);
		ОбластьМакетаПодвал.Параметры.Основание = ДанныеПоДокументам.Ссылка.Основание;
		ОбластьМакетаПодвал.Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ДанныеПоДокументам.Ссылка.Руководитель);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		ДанныеПоСотрудникам.Сбросить();
		ДанныеПоСотрудникам = ДанныеПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ДанныеПоСотрудникам.Следующий() Цикл
			
			ОбластьМакетаПодписиРаботников = Макет.ПолучитьОбласть("ПодписиРаботников");
			ОбластьМакетаПодписиРаботников.Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ДанныеПоДокументам.ФИОПолные);
			ДокументРезультат.Вывести(ОбластьМакетаПодписиРаботников);
			
		КонецЦикла;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	// }
	// 4D
	
КонецФункции

// 4D:ERP для Беларуси, Юлия, 09.02.2018 17:07:28 
// Редактировать документ "Командировка группы" и печатную форму, № 17749
// {
Функция СклонениеДолжностейИПодразделений(ДолжностьПодразделение)
	
	Разделитель = " ";
	МассивСлов = СтрРазделить(ДолжностьПодразделение, Разделитель);
	ПолнаяДолжность = "";
	Для каждого Слово Из МассивСлов Цикл
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Слово, Ложь, , Ложь);
		ЧастьДолжность = Структура.РодительныйПадеж;
		ПолнаяДолжность = ПолнаяДолжность + " " + ЧастьДолжность;
	КонецЦикла;
	
	Возврат ПолнаяДолжность;
	
КонецФункции
// }
// 4D

#КонецОбласти


#Область Премия

Функция ДанныеДляПечатиОПоощренииСотрудника(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыПечати.Свойство("СоответствиеСтрокДокументов") Тогда
		
		СтрокиДокументов = Новый ТаблицаЗначений;
		СтрокиДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Премия"));
		СтрокиДокументов.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число"));
		
		Для каждого ОбъектПечати Из МассивОбъектов Цикл
			СтрокиДокумента = ПараметрыПечати.СоответствиеСтрокДокументов.Получить(ОбъектПечати);
			Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
				НоваяСтрока = СтрокиДокументов.Добавить();
				НоваяСтрока.Ссылка = ОбъектПечати;
				НоваяСтрока.НомерСтрокиДокумента = СтрокаДокумента;
			КонецЦикла;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СтрокиДокументов", СтрокиДокументов);
		Запрос.УстановитьПараметр("БезОтбораПоСтрокам", Ложь);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиДокументов.Ссылка КАК Ссылка,
		|	СтрокиДокументов.НомерСтрокиДокумента КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСтрокиДокументов
		|ИЗ
		|	&СтрокиДокументов КАК СтрокиДокументов";
		
	Иначе
		Запрос.УстановитьПараметр("БезОтбораПоСтрокам", Истина);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Неопределено КАК Ссылка,
		|	Неопределено КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСтрокиДокументов";
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("РасчетСтрокойПриз", НСтр("ru = 'Ценный приз'"));
	Запрос.УстановитьПараметр("РасчетСтрокойПодарок", НСтр("ru = 'Ценный подарок'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Премия.Ссылка КАК Ссылка,
	|	Премия.Организация КАК Организация,
	|	Премия.ПериодРегистрации КАК ПериодРегистрации,
	|	Премия.Дата КАК Дата,
	|	Премия.Дата КАК ДатаДокумента,
	|	Премия.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Премия.ВидПремии.Наименование КАК РасчетСтрокой,
	|	Премия.Руководитель КАК Руководитель,
	|	Премия.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	Премия.МотивПоощрения
	|ПОМЕСТИТЬ ВТДанныеШапкиДокумента
	|ИЗ
	|	Документ.Премия КАК Премия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Премия.Организация = Организации.Ссылка
	|ГДЕ
	|	Премия.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПризПодарок.Ссылка,
	|	ПризПодарок.Организация,
	|	ПризПодарок.ПериодРегистрации,
	|	ПризПодарок.Дата,
	|	ПризПодарок.Дата,
	|	ПризПодарок.Номер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ,
	|	Организации.КодПоОКПО,
	|	ВЫБОР
	|		КОГДА ПризПодарок.ВидПризаПодарка = ЗНАЧЕНИЕ(Перечисление.ВидыПризовПодарков.Приз)
	|			ТОГДА &РасчетСтрокойПриз
	|		ИНАЧЕ &РасчетСтрокойПодарок
	|	КОНЕЦ,
	|	ПризПодарок.Руководитель,
	|	ПризПодарок.ДолжностьРуководителя,
	|	ПризПодарок.МотивПоощрения
	|ИЗ
	|	Документ.ПризПодарок КАК ПризПодарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПризПодарок.Организация = Организации.Ссылка
	|ГДЕ
	|	ПризПодарок.Ссылка В(&МассивДокументов)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеШапкиДокумента");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапкиДокумента.Ссылка КАК Ссылка,
	|	ДанныеШапкиДокумента.ПериодРегистрации КАК ПериодРегистрации,
	|	КОНЕЦПЕРИОДА(ДанныеШапкиДокумента.ПериодРегистрации, МЕСЯЦ) КАК Период,
	|	ДанныеШапкиДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеШапкиДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеШапкиДокумента.Организация КАК Организация,
	|	ДанныеШапкиДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеШапкиДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеШапкиДокумента.РасчетСтрокой КАК РасчетСтрокой,
	|	ДанныеШапкиДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеШапкиДокумента.МотивПоощрения,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ЕСТЬNULL(ПремияНачисления.НомерСтроки, ПризПодарокНачисления.НомерСтроки) КАК НомерСтроки,
	|	ЕСТЬNULL(ПремияНачисления.Сотрудник, ПризПодарокНачисления.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ПремияНачисления.Результат, ПризПодарокНачисления.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	ВТДанныеШапкиДокумента КАК ДанныеШапкиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокументов КАК СтрокиДокументов
	|		ПО (НЕ &БезОтбораПоСтрокам)
	|			И ДанныеШапкиДокумента.Ссылка = СтрокиДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Премия.Начисления КАК ПремияНачисления
	|		ПО ДанныеШапкиДокумента.Ссылка = ПремияНачисления.Ссылка
	|			И (ВЫБОР
	|				КОГДА НЕ &БезОтбораПоСтрокам
	|					ТОГДА ПремияНачисления.НомерСтроки = СтрокиДокументов.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПризПодарок.Начисления КАК ПризПодарокНачисления
	|		ПО ДанныеШапкиДокумента.Ссылка = ПризПодарокНачисления.Ссылка
	|			И (ВЫБОР
	|				КОГДА НЕ &БезОтбораПоСтрокам
	|					ТОГДА ПризПодарокНачисления.НомерСтроки = СтрокиДокументов.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО ДанныеШапкиДокумента.Дата = ФИООтветственныхЛиц.Дата
	|			И ДанныеШапкиДокумента.Ссылка = ФИООтветственныхЛиц.Ссылка
	|			И ДанныеШапкиДокумента.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,Подразделение,Должность,ТабельныйНомер,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокумента.РасчетСтрокой КАК РасчетСтрокой,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.МотивПоощрения,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФИОПолные,
	|	ДанныеДокумента.Результат КАК Результат,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ДанныеДокумента.Результат <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ о поощрении сотрудника (Т-11).
//
Функция ТабличныйДокументПриказОПоощренииСотрудника(Макет, МассивОбъектов, ПараметрыПечати, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Приказ");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Премия_Т11";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиОПоощренииСотрудника(МассивОбъектов, ПараметрыПечати).Выбрать();
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ПервыйДокумент = Истина;
		Пока ДанныеДляПечати.Следующий() Цикл
			
			Если ПервыйДокумент Тогда
				ПервыйДокумент = Ложь;
			Иначе
				// Все документы нужно выводить на разных страницах.
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеДляПечати);
			ОбластьМакетаПриказ.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеДляПечати.НомерДокумента);
			ОбластьМакетаПриказ.Параметры.Сотрудник = ДанныеДляПечати.ФИОПолные;
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОПолные), 4, РезультатСклонения, ДанныеДляПечати.Пол) Тогда
				ОбластьМакетаПриказ.Параметры.Сотрудник	= РезультатСклонения
			КонецЕсли;
			
			ОбластьМакетаПриказ.Параметры.ПредставлениеВеличины = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеДляПечати.Результат, ВалютаУчета);
			ОбластьМакетаПриказ.Параметры.СуммаРублей = Цел(ДанныеДляПечати.Результат);
			ОбластьМакетаПриказ.Параметры.СуммаКопеек = (ДанныеДляПечати.Результат - Цел(ДанныеДляПечати.Результат)) * 100;
		
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакетаПриказ.Параметры.Подразделение) Тогда
				ОбластьМакетаПриказ.Параметры.Подразделение = ОбластьМакетаПриказ.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
		
			ДокументРезультат.Вывести(ОбластьМакетаПриказ);
			
			// В табличном документе необходимо задать имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Приказ о поощрении сотрудников (Т-11а).
//
Функция ТабличныйДокументПриказОПоощренииСотрудников(Макет, МассивОбъектов, ПараметрыПечати, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Премия_Т11а";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаШапкаПовторятьПриПечати = Макет.ПолучитьОбласть("ШапкаПовторятьПриПечати");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиОПоощренииСотрудника(МассивОбъектов, ПараметрыПечати).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаШапка.Параметры.НомерДокумента = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеДляПечати.НомерДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Пока ДанныеДляПечати.Следующий() Цикл
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечати);
			ОбластьМакетаСтрока.Параметры.Сотрудник = ДанныеДляПечати.ФИОПолные;
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОПолные), 4, РезультатСклонения, ДанныеДляПечати.Пол) Тогда
				ОбластьМакетаСтрока.Параметры.Сотрудник	= РезультатСклонения
			КонецЕсли;
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакетаСтрока.Параметры.Подразделение) Тогда
				ОбластьМакетаСтрока.Параметры.Подразделение = ОбластьМакетаСтрока.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
		
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаПодвал);
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьМакетаШапкаПовторятьПриПечати);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область ИзменениеГрафикаРаботыСписком

Функция ДанныеДляПечатиИзмененияГрафикаРаботыСписком(МассивОбъектов)
	
	ДанныеДляПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеГрафикаРаботыСписком.Ссылка КАК Ссылка,
	|	ИзменениеГрафикаРаботыСписком.Организация КАК Организация,
	|	ИзменениеГрафикаРаботыСписком.ГрафикРаботы КАК ГрафикРаботы,
	|	ИзменениеГрафикаРаботыСписком.ДатаИзменения КАК ДатаИзменения,
	|	ИзменениеГрафикаРаботыСписком.ДатаОкончания КАК ДатаОкончания,
	|	ИзменениеГрафикаРаботыСписком.Дата КАК Дата,
	|	ИзменениеГрафикаРаботыСписком.Дата КАК ДатаДокумента,
	|	ИзменениеГрафикаРаботыСписком.Номер КАК НомерДокумента,
	|	ИзменениеГрафикаРаботыСписком.Руководитель КАК Руководитель,
	|	ИзменениеГрафикаРаботыСписком.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ИзменениеГрафикаРаботыСписком.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеСокращенное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ КАК НазваниеОрганизацииСокращенное,
	|	Организации.КодПоОКПО КАК КодПоОКПО
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком КАК ИзменениеГрафикаРаботыСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИзменениеГрафикаРаботыСписком.Организация = Организации.Ссылка
	|ГДЕ
	|	ИзменениеГрафикаРаботыСписком.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ГлавныйБухгалтер");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.НазваниеОрганизацииСокращенное КАК НазваниеОрганизацииСокращенное,
	|	ДанныеДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокумента.ГрафикРаботы КАК ГрафикРаботы,
	|	ДанныеДокумента.ДатаИзменения КАК ДатаИзменения,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ИзменениеГрафикаРаботыСотрудники.Сотрудник КАК Сотрудник,
	|	ИзменениеГрафикаРаботыСотрудники.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеГрафикаРаботыСписком.Сотрудники КАК ИзменениеГрафикаРаботыСотрудники
	|		ПО ДанныеДокумента.Ссылка = ИзменениеГрафикаРаботыСотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокумента.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокумента.Дата = ФИОГлавногоБухгалтера.Дата
	|			И ДанныеДокумента.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ИзменениеГрафикаРаботыСотрудники.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ об изменении графика работы списком.
//
Функция ТабличныйДокументИзменениеГрафикаРаботыСписком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеГрафикаРаботыСписком";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиИзмененияГрафикаРаботыСписком(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДокумента, Истина, Истина);
		ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=D");
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Пока ДанныеДляПечати.Следующий() Цикл
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечати);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПодвал.Параметры.ДатаИзменения = Формат(ДанныеДляПечати.ДатаИзменения, "ДЛФ=DD");
		Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОкончания) Тогда
			ОбластьМакетаПодвал.Параметры.ТекстДатыОкончания = " по " + Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=DD");
		Иначе
			ОбластьМакетаПодвал.Параметры.ТекстДатыОкончания = "";
		КонецЕсли;
		
		Если ПустаяСтрока(ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "______________________________________________________";
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтераРасшифровка = НСтр("ru = '(фамилия, инициалы главного бухгалтера)'");
		Иначе
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОГлавногоБухгалтера),
				4, ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера, Перечисления.ПолФизическогоЛица.Женский);
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область ИндексацияЗаработка

Функция ДанныеДляПечатиИндексацииЗаработка(МассивОбъектов)
	
	ДанныеДляПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндексацияЗаработка.Ссылка КАК Ссылка,
	|	ИндексацияЗаработка.Организация КАК Организация,
	|	ИндексацияЗаработка.МесяцИндексации КАК МесяцИндексации,
	|	ИндексацияЗаработка.Дата КАК Дата,
	|	ИндексацияЗаработка.Дата КАК ДатаДокумента,
	|	ИндексацияЗаработка.Номер КАК НомерДокумента,
	|	ИндексацияЗаработка.Руководитель КАК Руководитель,
	|	ИндексацияЗаработка.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ИндексацияЗаработка.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеСокращенное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ КАК НазваниеОрганизацииСокращенное,
	|	Организации.КодПоОКПО КАК КодПоОКПО
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ИндексацияЗаработка КАК ИндексацияЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИндексацияЗаработка.Организация = Организации.Ссылка
	|ГДЕ
	|	ИндексацияЗаработка.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ГлавныйБухгалтер");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.НазваниеОрганизацииСокращенное КАК НазваниеОрганизацииСокращенное,
	|	ДанныеДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокумента.МесяцИндексации КАК МесяцИндексации,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ИндексацияЗаработкаСотрудники.Сотрудник КАК Сотрудник,
	|	ИндексацияЗаработкаСотрудники.КоэффициентИндексации КАК КоэффициентИндексации
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИндексацияЗаработка.Сотрудники КАК ИндексацияЗаработкаСотрудники
	|		ПО ДанныеДокумента.Ссылка = ИндексацияЗаработкаСотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокумента.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокумента.Дата = ФИОГлавногоБухгалтера.Дата
	|			И ДанныеДокумента.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ИндексацияЗаработкаСотрудники.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ об индексации заработка.
//
Функция ТабличныйДокументИндексацияЗаработка(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИндексацияЗаработка";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиИндексацииЗаработка(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДокумента, Истина, Истина);
		ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=D");
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Пока ДанныеДляПечати.Следующий() Цикл
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечати);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПодвал.Параметры.МесяцИндексации = Формат(ДанныеДляПечати.МесяцИндексации, "ДЛФ=DD");
		
		Если ПустаяСтрока(ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "______________________________________________________";
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтераРасшифровка = НСтр("ru = '(фамилия, инициалы главного бухгалтера)'");
		Иначе
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОГлавногоБухгалтера),
				4, ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера, Перечисления.ПолФизическогоЛица.Женский);
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область ДоговорГПХ

Функция ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов)
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.АктПриемкиВыполненныхРаботОказанныхУслуг") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Ссылка КАК Ссылка,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Организация КАК Организация,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Дата КАК Дата,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Дата КАК ДатаДокумента,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Номер КАК НомерДокумента,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Сотрудник КАК Сотрудник,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Руководитель КАК Руководитель,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.МесяцНачисления КАК Период,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.Номер КАК НомерДоговора,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.Дата КАК ДатаДоговора,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.ДатаОкончания КАК ДатаОкончания,
		|	ЛОЖЬ КАК ОплатаПоАктамВыполненныхРабот,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Результат КАК СуммаЗаРаботу
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.АктПриемкиВыполненныхРаботОказанныхУслуг КАК АктПриемкиВыполненныхРаботОказанныхУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО АктПриемкиВыполненныхРаботОказанныхУслуг.Организация = Организации.Ссылка
		|ГДЕ
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Ссылка В(&МассивОбъектов)";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорРаботыУслуги.Ссылка КАК Ссылка,
		|	ДоговорРаботыУслуги.Организация КАК Организация,
		|	ДоговорРаботыУслуги.Дата КАК Дата,
		|	ДоговорРаботыУслуги.Дата КАК ДатаДокумента,
		|	ДоговорРаботыУслуги.Номер КАК НомерДокумента,
		|	ДоговорРаботыУслуги.Сотрудник КАК Сотрудник,
		|	ДоговорРаботыУслуги.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорРаботыУслуги.ДатаНачала КАК Период,
		|	ДоговорРаботыУслуги.Номер КАК НомерДоговора,
		|	ДоговорРаботыУслуги.Дата КАК ДатаДоговора,
		|	ДоговорРаботыУслуги.Руководитель КАК Руководитель,
		|	ДоговорРаботыУслуги.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаПоАктамВыполненныхРабот,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ДоговорРаботыУслуги.Сумма КАК СуммаЗаРаботу
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	#ТаблицаДоговоров КАК ДоговорРаботыУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДоговорРаботыУслуги.Организация = Организации.Ссылка
		|ГДЕ
		|	ДоговорРаботыУслуги.Ссылка В(&МассивОбъектов)";
	КонецЕсли;
	
	МетаданныеДокумента = МассивОбъектов[0].Метаданные();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДоговоров", "Документ." + МетаданныеДокумента.Имя);
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ФизическоеЛицо");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДокументПредставление,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
	|	ДанныеДокумента.Период КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокумента.ОплатаПоАктамВыполненныхРабот КАК ОплатаПоАктамВыполненныхРабот,
	|	ДанныеДокумента.СуммаЗаРаботу КАК СуммаЗаРаботу,
	|	ДанныеДокумента.НомерДоговора КАК НомерДоговора,
	|	ДанныеДокумента.ДатаДоговора КАК ДатаДоговора,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
	|		ПО ДанныеДокумента.Дата = ФИОСотрудника.Дата
	|			И ДанныеДокумента.Ссылка = ФИОСотрудника.Ссылка
	|			И ДанныеДокумента.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Акт приема-передачи выполненных работ (услуг).
//
Функция ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(Макет, МассивОбъектов, ОбъектыПечати, УказыватьДатуОкончания = Ложь)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемаПередачиВыполненныхРаботУслуг";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Акт");
	
	// получаем данные для печати
	ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов);
	Если ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = Неопределено Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	ДанныеДляПечати = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		// получаем данные для печати
		Если ДанныеДляПечати.ОплатаПоАктамВыполненныхРабот Тогда
			ТекстОшибки = НСтр("ru = 'Печать акта возможна при оплате по договору однократно в конце срока.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДанныеДляПечати.Ссылка,
				"СпособОплаты");
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДокумента, Истина, Истина);
		ОбластьМакета.Параметры.НомерДоговора = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДоговора, Ложь, Ложь);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаДоговора = Формат(ДанныеДляПечати.ДатаДоговора, "ДЛФ=DD");
		ОбластьМакета.Параметры.СуммаЗаРаботу = Формат(ДанныеДляПечати.СуммаЗаРаботу, "ЧЦ=15; ЧДЦ=2");
		Если УказыватьДатуОкончания Тогда
			ОбластьМакета.Параметры.ДатаОкончания = Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=DD");
		КонецЕсли;
		ОбластьМакета.Параметры.ОкончаниеСловаИменуемый = ?(ДанныеДляПечати.Пол = Перечисления.ПолФизическогоЛица.Женский, "ая", "ый");
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область  МатериальнаяПомощь

Функция ДанныеДляПечатиПриказаОВыплатеМатериальнойПомощи(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МатериальнаяПомощьНачисления.Ссылка КАК Ссылка,
	|	МатериальнаяПомощьНачисления.Ссылка.Организация КАК Организация,
	|	МатериальнаяПомощьНачисления.Ссылка.Дата КАК Дата,
	|	МатериальнаяПомощьНачисления.Ссылка.Дата КАК ДатаДокумента,
	|	МатериальнаяПомощьНачисления.Ссылка.Номер КАК НомерДокумента,
	|	МатериальнаяПомощьНачисления.Сотрудник КАК Сотрудник,
	|	МатериальнаяПомощьНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МатериальнаяПомощьНачисления.Результат КАК Начислено,
	|	МатериальнаяПомощьНачисления.Ссылка.ОснованиеВыплаты КАК ОснованиеВыплаты,
	|	МатериальнаяПомощьНачисления.Ссылка.ПериодРегистрации КАК Период,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	МатериальнаяПомощьНачисления.Ссылка.Руководитель КАК Руководитель,
	|	МатериальнаяПомощьНачисления.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.МатериальнаяПомощь.Начисления КАК МатериальнаяПомощьНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО МатериальнаяПомощьНачисления.Ссылка.Организация = Организации.Ссылка
	|ГДЕ
	|	МатериальнаяПомощьНачисления.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("ФизическоеЛицо");
	ИменаПолей.Добавить("Руководитель");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение,Должность,ФизическоеЛицо,Пол,ФИОПолные");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТДанныеНаКонецМесяца
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|ГДЕ
	|	КадровыеДанныеСотрудников.Подразделение ЕСТЬ NULL ";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеНаКонецМесяца");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковНаКонецМесяца";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение,Должность");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начислено КАК Сумма,
	|	ДанныеДокумента.ОснованиеВыплаты КАК ОснованиеВыплаты,
	|	ФИОСотрудника.ФИОПолные КАК СотрудникФИОПолные,
	|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.Подразделение, КадровыеДанныеСотрудниковНаКонецМесяца.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность, КадровыеДанныеСотрудниковНаКонецМесяца.Должность) КАК Должность,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
	|		ПО ДанныеДокумента.Дата = ФИОСотрудника.Дата
	|			И ДанныеДокумента.Ссылка = ФИОСотрудника.Ссылка
	|			И ДанныеДокумента.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковНаКонецМесяца КАК КадровыеДанныеСотрудниковНаКонецМесяца
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудниковНаКонецМесяца.Сотрудник
	|			И (ДанныеДокумента.Период = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудниковНаКонецМесяца.Период, МЕСЯЦ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ о выплате материальной помощи.
//
Функция ТабличныйДокументПриказОВыплатеМатериальнойПомощи(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОВыплатеМатериальнойПомощи";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Приказ");
	
	ДанныеПечати = ДанныеДляПечатиПриказаОВыплатеМатериальнойПомощи(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Пока ДанныеПечати.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		
			Если ПервыйДокумент Тогда
				ПервыйДокумент = Ложь;
			Иначе
				// Все документы нужно выводить на разных страницах.
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Истина, Истина);
			ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеПечати.ДатаДокумента, "ДЛФ=D");
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеПечати.СотрудникФИОПолные), 3, ОбластьМакета.Параметры.СотрудникФИО, ДанныеПечати.Пол);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.Сумма, ВалютаУчета);;
			
			ДокументРезультат.Вывести(ОбластьМакета);
			
			// В табличном документе необходимо задать имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


Функция ТабличныйДокументПодтверждениеБрони(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеБронирования";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ИспользоватьТарифныеСетки = ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		
	ИспользоватьКвалификационнуюНадбавку = ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку");
	
	ЗаголовкиПКГИКатегорий = Новый Структура("ТарифнаяСеткаЗаголовок,РазрядКатегорияЗаголовок,ТарифнаяСеткаНадбавкиЗаголовок,РазрядКатегорияНадбавкиЗаголовок");
	ЗаголовкиПКГИКатегорий.ТарифнаяСеткаЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаТариф");
	ЗаголовкиПКГИКатегорий.РазрядКатегорияЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияТариф");	
	ЗаголовкиПКГИКатегорий.ТарифнаяСеткаНадбавкиЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаНадбавка");
	ЗаголовкиПКГИКатегорий.РазрядКатегорияНадбавкиЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияНадбавка");		
	
	ДанныеПечатиОбъектов = ДанныеПечатиПодтвержденияБронирования(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТарифнаяСетка = Макет.ПолучитьОбласть("ТарифнаяСетка");
	ОбластьКвалификационнаяНадбавка = Макет.ПолучитьОбласть("КвалификационнаяНадбавка");
	ОбластьШапкаПродолжение = Макет.ПолучитьОбласть("ШапкаПродолжение");
	ОбластьСтрокаНачислений = Макет.ПолучитьОбласть("СтрокаНачислений");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

	Пока ДанныеПечатиОбъектов.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока ДанныеПечатиОбъектов.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
			НачалоОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			// Документы нужно выводить на разных страницах.
			Если Не ПервыйДокумент Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйДокумент = Ложь;
			КонецЕсли;
			
			ОбластьШапка.Параметры.Заполнить(ДанныеПечатиОбъектов);
			ОбластьШапка.Параметры.Дата = Формат(ОбластьШапка.Параметры.Дата, "ДЛФ=DD");
			ОбластьШапка.Параметры.КоличествоСтавок = КадровыйУчетРасширенныйКлиентСервер.ПредставлениеКоличестваСтавок(ОбластьШапка.Параметры.КоличествоСтавок);
			ДокументРезультат.Вывести(ОбластьШапка);
			
			Если ИспользоватьТарифныеСетки Тогда
				ОбластьТарифнаяСетка.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьТарифнаяСетка.Параметры.Заполнить(ЗаголовкиПКГИКатегорий);
				ДокументРезультат.Вывести(ОбластьТарифнаяСетка);
			КонецЕсли; 
			
			Если ИспользоватьКвалификационнуюНадбавку Тогда
				ОбластьКвалификационнаяНадбавка.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьКвалификационнаяНадбавка.Параметры.Заполнить(ЗаголовкиПКГИКатегорий);
				ДокументРезультат.Вывести(ОбластьКвалификационнаяНадбавка);
			КонецЕсли; 
			
			ОбластьШапкаПродолжение.Параметры.Заполнить(ДанныеПечатиОбъектов);
			ДокументРезультат.Вывести(ОбластьШапкаПродолжение);
			
			НПП = 1;
			Итого = 0;
			Пока ДанныеПечатиОбъектов.Следующий() Цикл
				
				ОбластьСтрокаНачислений.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьСтрокаНачислений.Параметры.НПП = НПП;
				ДокументРезультат.Вывести(ОбластьСтрокаНачислений);
				
				НПП = НПП + 1;
				Итого = Итого + ОбластьСтрокаНачислений.Параметры.Размер;
				
			КонецЦикла;
			
			ОбластьПодвал.Параметры.Заполнить(ДанныеПечатиОбъектов);
			
			ОбластьПодвал.Параметры.Итого = Итого;
			
			Если ЗначениеЗаполнено(ДанныеПечатиОбъектов.Ответственный) Тогда
				ОбластьПодвал.Параметры.ПользовательРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ДанныеПечатиОбъектов.Ответственный);
			Иначе
				ОбластьПодвал.Параметры.ПользовательРасшифровкаПодписи = "______________";
			КонецЕсли; 
			ДокументРезультат.Вывести(ОбластьПодвал);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоОбласти, ОбъектыПечати, ДанныеПечатиОбъектов.Ссылка);
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеПечатиПодтвержденияБронирования(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументБронирования.Ссылка КАК Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронирования.Ссылка.Сотрудник КАК Сотрудник,
		|	ДокументБронирования.Ссылка.Сотрудник.ФизическоеЛицо.ФИО КАК СотрудникФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронирования.Ссылка.Подразделение,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронирования.Ссылка.КоличествоСтавок,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка КАК ТарифнаяСетка,
		|	ДокументБронирования.Ссылка.РазрядКатегория,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
		|	ДокументБронирования.Ссылка.СтатьяФинансирования,
		|	ДокументБронирования.Ссылка.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания КАК НачислениеРеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный
		|ИЗ
		|	Документ.ПриемНаРаботу.Начисления КАК ДокументБронирования
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронирования.Ссылка.Сотрудник,
		|	ДокументБронирования.Ссылка.Сотрудник.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронирования.Ссылка.Подразделение,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронирования.Ссылка.КоличествоСтавок,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронирования.Ссылка.РазрядКатегория,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронирования.Ссылка.СтатьяФинансирования,
		|	ДокументБронирования.Ссылка.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный
		|ИЗ
		|	Документ.КадровыйПеревод.Начисления КАК ДокументБронирования
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|	И ДокументБронирования.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронированияСотрудники.Сотрудник,
		|	ДокументБронированияСотрудники.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронированияСотрудники.Подразделение,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронированияСотрудники.КоличествоСтавок,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронированияСотрудники.РазрядКатегория,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронированияСотрудники.СтатьяФинансирования,
		|	ДокументБронированияСотрудники.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Начисления КАК ДокументБронирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ДокументБронированияСотрудники
		|		ПО ДокументБронирования.Ссылка = ДокументБронированияСотрудники.Ссылка
		|			И ДокументБронирования.ИдентификаторСтрокиСотрудника = ДокументБронированияСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронированияСотрудники.Сотрудник,
		|	ДокументБронированияСотрудники.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронированияСотрудники.Подразделение,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронированияСотрудники.КоличествоСтавок,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронированияСотрудники.РазрядКатегория,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронированияСотрудники.СтатьяФинансирования,
		|	ДокументБронированияСотрудники.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный
		|ИЗ
		|	Документ.КадровыйПереводСписком.Начисления КАК ДокументБронирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК ДокументБронированияСотрудники
		|		ПО ДокументБронирования.Ссылка = ДокументБронированияСотрудники.Ссылка
		|			И ДокументБронирования.ИдентификаторСтрокиСотрудника = ДокументБронированияСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|	И ДокументБронирования.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник,
		|	НачислениеРеквизитДопУпорядочивания";
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//////////////////////////////////////////////////////////////////////
// Изменение условий оплаты отпуска по уходу за ребенком.

Функция ДанныеПечатиПриказОВыходеНаНеполноеРабочееВремя(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Номер,
		|	НАЧАЛОПЕРИОДА(ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Дата, ДЕНЬ) КАК Дата,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Организация,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Руководитель,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.Номер,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Организация,
		|	ДанныеДокументов.НазваниеОрганизации,
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
		
		ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);
		ДанныеПечати.Вставить("ФИОСотрудникаРодительный", "");
		ДанныеПечати.Вставить("ФИОСотрудникаДательный", "");
		ДанныеПечати.Вставить("ТабельныйНомер", "");
		ДанныеПечати.Вставить("ФИОСотрудника", "");
		ДанныеПечати.Вставить("Подразделение", "");
		ДанныеПечати.Вставить("Должность", "");
		
		ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
		ДанныеПечати.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПечати.Номер);
		
		// Данные совмещающего физического лица.
		Пол = Неопределено;
		ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДляПечати.Сотрудник),
			"Пол", ДокументДляПечати.Дата);
		Если ДанныеФизическогоЛица.Количество() > 0 Тогда
			Пол = ДанныеФизическогоЛица[0].Пол;
		КонецЕсли;
		
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДляПечати.Сотрудник), ДокументДляПечати.Организация);
		
		Если Сотрудники.Количество() > 0 Тогда
			
			ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, Сотрудники, "ФИОПолные,ФамилияИО,Фамилия,Имя,Отчество,Подразделение,Должность,ТабельныйНомер", ДокументДляПечати.Дата);
			
			Если ДанныеСотрудников.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ДанныеПечати, ДанныеСотрудников[0]);
				
				ДанныеПечати.ФИОСотрудника = ДанныеСотрудников[0].ФамилияИО;
				ДанныеПечати.ФИОСотрудникаРодительный = ДанныеСотрудников[0].ФИОПолные;
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 2, СтруктураФИО.Фамилия, Пол);
				ДанныеПечати.ФИОСотрудникаРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, Пол);
				ДанныеПечати.ФИОСотрудникаДательный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(ДокументДляПечати.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

// Приказ о работе на условиях неполного рабочего времени.
//
Функция ТабличныйДокументПриказОВыходеНаНеполноеРабочееВремя(Макет, МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком_ПриказОВыходеНаНеполноеРабочееВремя";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОВыходеНаНеполноеРабочееВремя(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		// 4D:ERP для Беларуси, Юлия, 13.02.2018 11:13:23 
		// Доработать документ "изменение условий оплаты отпуска по уходу за ребенком" и печатную форму, доступную в документе, № 17762
		// {
		Макет.Параметры.Заполнить(ДанныеПечати.Значение);
		Макет.Параметры.НаименованиеОрганизации = ДанныеПечати.Значение.Организация.НаименованиеСокращенное;
		Макет.Параметры.ДатаДок = ДанныеПечати.Значение.Дата;
		Макет.Параметры.НомерДок = ДанныеПечати.Значение.Ссылка.Номер;
		
		КонтактнаяИнформация =ДанныеПечати.Значение.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Если КИнформация <> Неопределено Тогда 	
			Макет.Параметры.ГородЮрАдресОрганизации = КИнформация.Город;
		КонецЕсли;
		
		Макет.Параметры.Сотрудник = ДанныеПечати.Значение.ФИОСотрудникаРодительный;
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеПечати.Значение.Сотрудник), 3, РезультатСклонения, ДанныеПечати.Значение.Сотрудник.ФизическоеЛицо.Пол) Тогда
			Макет.Параметры.Работник = ВыделитьСлово(РезультатСклонения);
		КонецЕсли;
		
		Макет.Параметры.Должность = СклонениеДолжностейИПодразделений(Строка(ДанныеПечати.Значение.Должность));
		Макет.Параметры.Подразделение = СклонениеДолжностейИПодразделений(Строка(ДанныеПечати.Значение.Подразделение));
		Макет.Параметры.ДатаНачала = Формат(ДанныеПечати.Значение.Ссылка.ДатаИзменения, "ДЛФ=D");
		Макет.Параметры.Основание = ДанныеПечати.Значение.Ссылка.Основание;
		Макет.Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ДанныеПечати.Значение.Руководитель);
		Макет.Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ДанныеПечати.Значение.Сотрудник);
		
		Если ИмяМакета = "ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком" Тогда
			Макет.Параметры.Сотрудник1 = ДанныеПечати.Значение.ФИОСотрудникаДательный;
		КонецЕсли;
		
		// }
		// 4D
		
		ДокументРезультат.Вывести(Макет);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////
// Возврат из отпуска по уходу.

Функция ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Номер,
		|	НАЧАЛОПЕРИОДА(ВозвратИзОтпускаПоУходуЗаРебенком.Дата, ДЕНЬ) КАК Дата,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата, ДЕНЬ, -1) КАК ДатаВозврата,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Руководитель,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДолжностьРуководителя,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ГлавныйБухгалтер,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.РуководительКадровойСлужбы,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДолжностьРуководителяКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сотрудник");
	ИменаРеквизитов.Добавить("Руководитель");
	ИменаРеквизитов.Добавить("ГлавныйБухгалтер");
	ИменаРеквизитов.Добавить("РуководительКадровойСлужбы");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаРеквизитов, "ВТДанныеДокументов");

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.Номер,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Организация,
		|	ДанныеДокументов.НазваниеОрганизации,
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.ДатаВозврата,
		|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
		|	ФИОСотрудника.ФИОПолные КАК ФИОСотрудника,
		|	ДанныеДокументов.Руководитель,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ДанныеДокументов.ГлавныйБухгалтер,
		|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
		|	ДанныеДокументов.РуководительКадровойСлужбы,
		|	ФИОРуководителяКадровойСлужбы.ФИОПолные КАК ФИОРуководителяКадровойСлужбы,
		|	ДанныеДокументов.ДолжностьРуководителяКадровойСлужбы
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
		|		ПО ДанныеДокументов.Дата = ФИОСотрудника.Дата
		|			И ДанныеДокументов.Ссылка = ФИОСотрудника.Ссылка
		|			И ДанныеДокументов.Сотрудник = ФИОСотрудника.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителяКадровойСлужбы
		|		ПО ДанныеДокументов.Дата = ФИОРуководителяКадровойСлужбы.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителяКадровойСлужбы.Ссылка
		|			И ДанныеДокументов.РуководительКадровойСлужбы = ФИОРуководителяКадровойСлужбы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
		|		ПО ДанныеДокументов.Дата = ФИОГлавногоБухгалтера.Дата
		|			И ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
		|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо";
	
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
		
		ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);
		ДанныеПечати.Вставить("ФИОСотрудникаРодительный", "");
		ДанныеПечати.Вставить("ФИОБухгалтераРодительный", "");
		ДанныеПечати.Вставить("ФИОРуководителяКадровойСлужбыДательный", "");
		ДанныеПечати.Вставить("Ознакомлен", "ознакомлен");

		ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
		ДанныеПечати.ДатаВозврата = Формат(ДанныеПечати.ДатаВозврата, "ДЛФ=D");
		ДанныеПечати.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПечати.Номер);
		
		Если ЗначениеЗаполнено(ДанныеПечати.РуководительКадровойСлужбы) Тогда

			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.РуководительКадровойСлужбы), 
				"Фамилия,Имя,Отчество,Пол", ДанныеПечати.Дата);
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, ДанныеФизическогоЛица[0].Пол);
				
				ДанныеПечати.ФИОРуководителяКадровойСлужбыДательный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ДанныеПечати.ГлавныйБухгалтер) Тогда
			
			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.ГлавныйБухгалтер), 
				"Фамилия,Имя,Отчество,Пол", ДокументДляПечати.Дата);
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 2, СтруктураФИО.Фамилия, ДанныеФизическогоЛица[0].Пол);
					
				ДанныеПечати.ФИОБухгалтераРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
			
		КонецЕсли;
			
		// Данные физического лица
		ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.Сотрудник), 
			"Фамилия,Имя,Отчество,Пол", ДокументДляПечати.Дата);
			
		Если ДанныеФизическогоЛица.Количество() > 0 Тогда
			
			СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество");
			
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
			ФизическиеЛицаЗарплатаКадры.Просклонять(
				СтруктураФИО.Фамилия, 2, СтруктураФИО.Фамилия);
				
			ДанныеПечати.ФИОСотрудникаРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
			
			Если ДанныеФизическогоЛица[0].Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ДанныеПечати.Ознакомлен = НСтр("ru = 'ознакомлен'");
			Иначе
				ДанныеПечати.Ознакомлен = НСтр("ru = 'ознакомлена'");
			КонецЕсли;
			
		КонецЕсли;

		// Приведение значений к требуемому формату.
		Если Не ЗначениеЗаполнено(ДанныеПечати.ФИОБухгалтераРодительный) Тогда
			ДанныеПечати.ФИОБухгалтераРодительный =  "___________________________";
		КонецЕсли;
		
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(ДокументДляПечати.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

// Приказ о прекращении отпуска по уходу за ребенком.
//
Функция ТабличныйДокументПриказОПрекращенииОтпускаПоУходуЗаРебенком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратИзОтпускаПоУходуЗаРебенком_ПриказОПрекращенииОтпускаПоУходуЗаРебенком";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		Макет.Параметры.Заполнить(ДанныеПечати.Значение);
		
		ДокументРезультат.Вывести(Макет);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Приказ о выходе на работу до окончания отпуска по уходу за ребенком.
//
Функция ТабличныйДокументПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратИзОтпускаПоУходуЗаРебенком_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		Макет.Параметры.Заполнить(ДанныеПечати.Значение);
		
		ДокументРезультат.Вывести(Макет);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции


#Область ПриказОПриемеНаРаботу_Т_1а

Функция ТабличныйДокументПриказаТ1а(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_Т1а";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата КАК Дата,
		|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
		|	ПриемНаРаботуСпискомСотрудники.НомерСтроки,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема КАК Период,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер КАК НомерДок,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата КАК ДатаДок,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель КАК Руководитель,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботуСпискомСотрудники.УсловияПриема КАК УсловияПриема,
		|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСпискомСотрудники.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
		|	
		// 4D:ERP для Беларуси, Юлия, 09.10.2017 10:08:33 
		// Изменить список печатных форм, доступных в док-те "Прием на работу списком", № 15984
		// {		
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорДата
		// }
		// 4D
		|	
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|ГДЕ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Проведен
		|	И ПриемНаРаботуСпискомСотрудники.Ссылка.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов"));
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&КадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.Период = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.НомерСтроки";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанныеСотрудников", "КадровыеДанныеСотрудников.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(Выборка);
		
		ОбластьШапка.Параметры.НомерДок = КадровыйУчетРасширенный.НомерКадровогоПриказа(
			ОбластьШапка.Параметры.НомерДок);
		
		ДокументРезультат.Вывести(ОбластьШапка);
	
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Выборка.РазрядКатегория) Тогда
				ОбластьСтрока.Параметры.РазрядКатегория = ", " + Выборка.РазрядКатегория;
			КонецЕсли; 
			
			ОбластьСтрока.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(
				ОбластьСтрока.Параметры.ТабельныйНомер, Истина, Истина);
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьСтрока.Параметры.Подразделение) Тогда
				ОбластьСтрока.Параметры.Подразделение = ОбластьСтрока.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
				
			МассивМакетов = Новый Массив;
			МассивМакетов.Добавить(ОбластьШапкаТаблицы);
			МассивМакетов.Добавить(ОбластьПодвал);
			МассивМакетов.Добавить(ОбластьСтрока);
			
			Если НЕ ДокументРезультат.ПроверитьВывод(МассивМакетов) Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
				
			КонецЕсли; 
			
			ДокументРезультат.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка)
		
	КонецЦикла; 
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область ПриказОПриемеНаРаботу_Т_5а

Функция ТабличныйДокументПриказаТ5а(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_Т5а";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Ссылка.Дата КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания КАК ДатаОкончания,
		|	КадровыйПеревод.Ссылка.Номер КАК НомерДок,
		|	КадровыйПеревод.Ссылка.Дата КАК ДатаДок,
		|	КадровыйПеревод.Ссылка.Руководитель,
		|	КадровыйПеревод.Ссылка.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода,
		|	КадровыйПеревод.НомерСтроки,
		|	0 КАК Надбавка
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка.Проведен
		|	И КадровыйПеревод.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументовКадровыхПеремещений", "ДатаНачала"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ДанныеДокументов.ДатаНачала, ДЕНЬ, -1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДанныеДокументов.Сотрудник,
		|	ВТДанныеДокументов.ДатаНачала
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ВТДанныеДокументов";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументовКадровыхПеремещений");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""постоянно""
		|		ИНАЧЕ ""временно""
		|	КОНЕЦ КАК ВидПеревода,
		|	КадровыеДанныеСотрудниковПредыдущие.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудниковПредыдущие.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	КадровыеДанныеСотрудниковПредыдущие.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудниковПредыдущие.Должность КАК Должность,
		|	КадровыеДанныеСотрудниковПредыдущие.ТабельныйНомер КАК ТабельныйНомер,
		|	ЕСТЬNULL(КадровыеДанныеСотрудниковНовые.ФИОПолные, """") КАК Работник,
		|	КадровыеДанныеСотрудниковНовые.Подразделение КАК НовоеПодразделение,
		|	КадровыеДанныеСотрудниковНовые.Должность КАК НоваяДолжность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&ТекстКадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковПредыдущие
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковПредыдущие.Сотрудник
		|			И ДанныеДокументов.ДатаНачала > КадровыеДанныеСотрудниковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковНовые
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковНовые.Сотрудник
		|			И ДанныеДокументов.ДатаНачала = КадровыеДанныеСотрудниковНовые.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.ДатаНачала = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.НомерСтроки";
		
	ТекстКадровыеДанныеСотрудников = "";
	Для каждого ИмяКадровыхДанных Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов()) Цикл
		
		Если ВРег(ИмяКадровыхДанных) = ВРег("Организация")
			ИЛИ ВРег(ИмяКадровыхДанных) = ВРег("Подразделение")
			ИЛИ ВРег(ИмяКадровыхДанных) = ВРег("Должность")
			ИЛИ ВРег(ИмяКадровыхДанных) = ВРег("ФИОПолные") Тогда
			
			Продолжить;
			
		ИначеЕсли ВРег(ИмяКадровыхДанных) = ВРег("ТрудовойДоговорНомер")
				ИЛИ ВРег(ИмяКадровыхДанных) = ВРег("ТрудовойДоговорДата") Тогда
				
			ТекстКадровыеДанныеСотрудников = 
				?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
				+ "КадровыеДанныеСотрудниковПредыдущие." + ИмяКадровыхДанных + " КАК " + ИмяКадровыхДанных + ",";
			
		Иначе
			
			Если ВРег(ИмяКадровыхДанных) = ВРег("РазрядКатегория") Тогда
				
				ТекстКадровыеДанныеСотрудников = 
					?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
					+ "КадровыеДанныеСотрудниковПредыдущие." + ИмяКадровыхДанных + " КАК " + ИмяКадровыхДанных + ",";
				
			КонецЕсли;
			
			ТекстКадровыеДанныеСотрудников = 
				?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
				+ "КадровыеДанныеСотрудниковНовые." + ИмяКадровыхДанных + " КАК Новый" + ИмяКадровыхДанных + ",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстКадровыеДанныеСотрудников,", ТекстКадровыеДанныеСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(Выборка);
		
		ОбластьШапка.Параметры.НомерДок = КадровыйУчетРасширенный.НомерКадровогоПриказа(
			ОбластьШапка.Параметры.НомерДок);
		
		ДокументРезультат.Вывести(ОбластьШапка);
	
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Выборка.РазрядКатегория) Тогда
				ОбластьСтрока.Параметры.РазрядКатегория = ", " + Выборка.РазрядКатегория;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Выборка.НовыйРазрядКатегория) Тогда
				ОбластьСтрока.Параметры.НовыйРазрядКатегория = ", " + Выборка.НовыйРазрядКатегория;
			КонецЕсли; 
			
			ОбластьСтрока.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(
				ОбластьСтрока.Параметры.ТабельныйНомер, Истина, Истина);
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений Тогда
				Если ЗначениеЗаполнено(ОбластьСтрока.Параметры.Подразделение) Тогда
					ОбластьСтрока.Параметры.Подразделение = ОбластьСтрока.Параметры.Подразделение.ПолноеНаименование();
				КонецЕсли; 
				Если ЗначениеЗаполнено(ОбластьСтрока.Параметры.НовоеПодразделение) Тогда
					ОбластьСтрока.Параметры.НовоеПодразделение = ОбластьСтрока.Параметры.НовоеПодразделение.ПолноеНаименование();
				КонецЕсли; 
			КонецЕсли;
				
			МассивМакетов = Новый Массив;
			МассивМакетов.Добавить(ОбластьШапкаТаблицы);
			МассивМакетов.Добавить(ОбластьПодвал);
			МассивМакетов.Добавить(ОбластьСтрока);
			
			Если НЕ ДокументРезультат.ПроверитьВывод(МассивМакетов) Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
				
			КонецЕсли; 
			
			ДокументРезультат.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка)
		
	КонецЦикла; 
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область ПриказОПриемеНаРаботу_Т_8а

Функция ТабличныйДокументПриказаТ8а(Макет, МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_Т8а";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.НомерСтроки,
		|	Увольнение.Ссылка.Дата КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Ссылка.Номер КАК НомерДок,
		|	Увольнение.Ссылка.Дата КАК ДатаДок,
		|	Увольнение.СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Ссылка.Руководитель КАК Руководитель,
		|	Увольнение.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	Увольнение.Ссылка.Бухгалтер КАК Бухгалтер,
		|	Увольнение.Ссылка.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Увольнение.Ссылка.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	Увольнение.Ссылка.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)";
		
		Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов"));
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&КадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.Период = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.НомерСтроки";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанныеСотрудников", "КадровыеДанныеСотрудников.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(Выборка);
		
		ОбластьШапка.Параметры.НомерДок = КадровыйУчетРасширенный.НомерКадровогоПриказа(
			ОбластьШапка.Параметры.НомерДок);
		
		ДокументРезультат.Вывести(ОбластьШапка);
	
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Выборка.РазрядКатегория) Тогда
				ОбластьСтрока.Параметры.РазрядКатегория = ", " + Выборка.РазрядКатегория;
			КонецЕсли; 
			
			ОбластьСтрока.Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(
				ОбластьСтрока.Параметры.ТабельныйНомер, Истина, Истина);
			
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьСтрока.Параметры.Подразделение) Тогда
				ОбластьСтрока.Параметры.Подразделение = ОбластьСтрока.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
				
			МассивМакетов = Новый Массив;
			МассивМакетов.Добавить(ОбластьШапкаТаблицы);
			МассивМакетов.Добавить(ОбластьПодвал);
			МассивМакетов.Добавить(ОбластьСтрока);
			
			Если НЕ ДокументРезультат.ПроверитьВывод(МассивМакетов) Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
				
			КонецЕсли; 
			
			ДокументРезультат.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка)
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


Функция ВыбратьПодходящиеОбъектыПечати(МассивОбъектов, ПодходящиеОбъекты, НужныйТип)
	ЕстьПодходящиеОбъекты  = Ложь;
	ПодходящиеОбъекты.Очистить();
	Для каждого ПроверяемыйОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ПроверяемыйОбъект) = НужныйТип Тогда
			ПодходящиеОбъекты.Добавить(ПроверяемыйОбъект);
			ЕстьПодходящиеОбъекты = Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат ЕстьПодходящиеОбъекты
КонецФункции

#КонецОбласти

#КонецЕсли