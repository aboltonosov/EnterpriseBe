
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыУТ.ПроверитьВозможностьОткрытияФормы(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Свойство("КлючНазначенияФормы") И Не ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	Иначе
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
	КонецЕсли;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ВосстановитьНастройки(Параметры);
	
	ТЗХозОперацииИТипыДокументов = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(ОписаниеОперацийИТиповДокументов(),
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям") Тогда
		СтрокиКУдалению = ТЗХозОперацииИТипыДокументов.НайтиСтроки(Новый Структура("ПолноеИмяДокумента",Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя()));
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТЗХозОперацииИТипыДокументов.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
	ЗаполнитьСпискокВыбораМенеджера();
	
	ОтборЗаявлений = 0; // Показывать все заявления о ввозе
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокДокументыЗакупки);
	
	Если Не ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.ГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "СписокДокументыЗакупки";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец подсистема "ОбменСКонтрагентами".
	
	Если ИмяСобытия = "Запись_АктОРасхожденияхПослеПриемки" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаявлениеОВвозеТоваров" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_КорректировкаПоступления" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеТоваровУслуг" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеУслугПрочихАктивов" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ТаможеннаяДекларацияИмпорт" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияЕГАИС" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств" Тогда
		
		Элементы.СписокДокументыЗакупки.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументыЗакупки,
		"Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаявленийПриИзменении(Элемент)
	
	// Показывать неподтвержденные заявления
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДокументыЗакупки,
			"ДатаПодтвержденияОплаты",
			Дата(1, 1, 1),
			ВидСравненияКомпоновкиДанных.Равно,
			,
			(ОтборЗаявлений = 1));
			
	// Показывать неоплаченные заявления
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДокументыЗакупки,
			"ЕстьОплата",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			(ОтборЗаявлений = 2));
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки,ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	//Доверенность выданная
	ПараметрыФормы.Вставить("ДоступностьРаспоряженийТовары", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Доверенности на получение товаров'"));
	
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлено

&НаКлиенте
Процедура СписокДокументыЗакупкиПриАктивизацииСтроки(Элемент)
	
	УправлениеПечатьюКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДокументыЗакупки, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДокументыЗакупки, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УправлениеПечатьюКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

#Область КнопкаСоздать

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",Организация);
	СтруктураОтбора.Вставить("Склад",Склад);
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",Организация);
	СтруктураОтбора.Вставить("Склад",Склад);
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, СтруктураОтбора);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗарегистрироватьПодтверждениеОплаты(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДокументыЗакупки);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = НайтиПлатежныйДокументПоЗаявлению(Элементы.СписокДокументыЗакупки.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("Подтверждение");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Элементы.СписокДокументыЗакупки.ТекущиеДанные.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриУстановкеПодтвержденияОплаты", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаПодтвержденияПеречисленияНалога", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявкиНаРасходованиеДС(Команда)
	
	СформироватьДокументыНаОсновании("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписанияБезналичныхДС(Команда)
	
	СформироватьДокументыНаОсновании("Документ.СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявлениеОВвозе(Команда)
	
	// ++ НЕ УТ
	Список = Элементы.СписокДокументыЗакупки;
	
	Если Список.ТекущаяСтрока = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ВыгружаемыеДанные = ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор,Список.ТекущиеДанные.Ссылка);
	
	Если НЕ ВыгружаемыеДанные = Неопределено Тогда
		
		СохранитьВыгружаемыеДанные(ВыгружаемыеДанные);
		
	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтатформуВФТС(Команда)
	
	// ++ НЕ УТ
	Список = Элементы.СписокДокументыЗакупки;
	
	Если Список.ТекущиеДанные = Неопределено ИЛИ ТипЗнч(Список.ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОтчетностьВФТС = ОпределитьСсылкуНаСуществующийОтчетВФТС(Список.ТекущиеДанные.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(ОтчетностьВФТС) Тогда
		Попытка
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(Список.ТекущиеДанные.Дата));
			ПараметрыФормы.Вставить("мСохраненныйДок",          Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецМесяца(Список.ТекущиеДанные.Дата));
			ПараметрыФормы.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
			Если Список.ТекущиеДанные.Свойство("Организация") Тогда
				ПараметрыФормы.Вставить("Организация",          Список.ТекущиеДанные.Организация);
			Иначе
				ПараметрыФормы.Вставить("Организация",          Организация);
			КонецЕсли;
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          "ФормаОтчетаПоЗаявлениюОВвозеТоваров");
			ПараметрыФормы.Вставить("ЗаявлениеОВвозеТоваров",   Список.ТекущиеДанные.Ссылка);
			ПараметрыФормы.Вставить("НужноОповещатьОСоздании");
			
			ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаОтчетаПоЗаявлениюОВвозеТоваров", ПараметрыФормы).Открыть();
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось открыть форму отчета ""Статистическая форма учета перемещения товаров"".'"));
			
		КонецПопытки;
	Иначе
		ПоказатьЗначение(,ОтчетностьВФТС);
	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	// ++ НЕ УТ
	Список = Элементы.СписокДокументыЗакупки;
	
	Если Список.ТекущаяСтрока = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернетеПоСсылке(Список.ТекущиеДанные.Ссылка);
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	// ++ НЕ УТ
	Если Элементы.СписокДокументыЗакупки.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.СписокДокументыЗакупки.ТекущиеДанные;
		Форма = ПолучитьФорму("Документ.ЗаявлениеОВвозеТоваров.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, "ФНС", , Истина, ТекущиеДанные.Ссылка, ТекущиеДанные.Организация);

	КонецЕсли;
	// -- НЕ УТ
	
	Возврат; // Не требуется в УТ
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСтатус(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьСтатус(Команда.Имя, СоответствиеКомандСтатусам, Элементы.СписокДокументыЗакупки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДокументыЗакупки.Дата", "СписокДокументыЗакупкиДата");
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());	
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "СписокДокументыЗакупки");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьДоступность(ТекущийКлюч)
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовРабочегоМеста(ЭтаФорма, ИменаЭлементовСУправляемойВидимостью(), ТекущийКлюч);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость 										= Ложь;
		Элементы.СписокДокументыЗакупкиОрганизация.Видимость 				= Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Элементы.СписокДокументыЗакупкиСклад.Видимость 				= Ложь;
		Элементы.Склад.Видимость 									= Ложь;
	КонецЕсли;
	
	Элементы.СписокДокументыЗакупкиКонтрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	// Перезаполнение списка статусов
	ОбщегоНазначенияУТ.УстановитьСписокСтатусов(ЭтаФорма, Элементы.УстановитьСтатус);
	
	ОбъектыМетаданных = ОбщегоНазначенияУТ.ОбъектыМетаданныхИзХозяйственныхОперацийИДокументов(ХозяйственныеОперацииИДокументы);
	ОбщегоНазначенияУТ.УстановитьОтборыПечать(ЭтаФорма, Элементы.ПодменюПечать, ОбъектыМетаданных);
	ОбщегоНазначенияУТ.УстановитьОтборыВводНаОсновании(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании, ОбъектыМетаданных);
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(ТЗХозОперацииИТипыДокументов, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическихСписков(ТекущийКлюч = Неопределено)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыЗакупки,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыЗакупки,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыЗакупки,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыЗакупки,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Менеджер));
		
	УстановитьОтборПоОрганизации();
	
	УстановитьОтборПоПериоду();
	
	Если ТекущийКлюч = "ЗаявленияОВвозеТоваров"
		И ОтборЗаявлений > 0 Тогда
		
		// Показывать неподтвержденные заявления
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДокументыЗакупки,
				"ДатаПодтвержденияОплаты",
				Дата(1, 1, 1),
				ВидСравненияКомпоновкиДанных.Равно,
				,
				(ОтборЗаявлений = 1));
				
		// Показывать неоплаченные заявления
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДокументыЗакупки,
				"ЕстьОплата",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				(ОтборЗаявлений = 2))
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыЗакупки,
		"Организация",
		СписокОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(Организация));
		
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыЗакупки";
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		СтруктураБыстрогоОтбора = Параметры.СтруктураБыстрогоОтбора;
		СтруктураБыстрогоОтбора.Свойство("Организация",Организация);
		СтруктураБыстрогоОтбора.Свойство("Склад",Склад);
		СтруктураБыстрогоОтбора.Свойство("Менеджер",Менеджер);
		СтруктураБыстрогоОтбора.Свойство("Период",Период);
	Иначе
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовЗакупки.Форма.ФормаСписка", КлючНазначенияИспользования);
		
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			
			Склад                          = Настройки.Склад;
			Менеджер                       = Настройки.Менеджер;
			Период                         = Настройки.Период;
			Организация                    = Настройки.Организация;
		
			ОтборТипыДокументов        = Настройки.ОтборТипыДокументов;
			ОтборХозяйственныеОперации = Настройки.ОтборХозяйственныеОперации;
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИменаСохраняемыхРеквизитов =
		"Склад,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов,
		|Менеджер,
		|Период,
		|Организация";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовЗакупки.Форма.ФормаСписка", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере 
Функция ОписаниеОперацийИТиповДокументов()
	
	ТЗХозОперацииИТипыДокументов = ХозяйственныеОперацииИДокументы.Выгрузить();
	ТЗХозОперацииИТипыДокументов.Очистить();
	
	// ПоступлениеТоваровУслуг
	
	СтрокаПоступлениеТоваровУслуг = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка = СтрокаПоступлениеТоваровУслуг;
	Строка.КлючНазначенияИспользования 	= "Накладные";
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	Строка.ПолноеИмяДокумента			= "Документ.ПоступлениеТоваровУслуг";
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (накладные)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ПоступлениеТоваровУслуг";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеТоваровУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеТоваровУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеТоваровУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеТоваровУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеТоваровУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
	
	// АктОРасхожденияхПослеПриемки
	
	СтрокаАктОРасхожденияхПослеПриемки = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка = СтрокаАктОРасхожденияхПослеПриемки;
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки");
	Строка.ПолноеИмяДокумента			= "Документ.АктОРасхожденияхПослеПриемки";
	Строка.ИспользуютсяСтатусы          = Истина;
	Строка.КлючНазначенияИспользования 	= "АктОРасхожденияхПослеПриемки";
	Если УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеАктовОРасхожденияхПослеПриемкиПоПоступлению") Тогда
		Строка.ИменаЭлементовРабочегоМеста = "ОформляемыеДокументы";
	КонецЕсли;
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (расхождения)'");
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаАктОРасхожденияхПослеПриемки);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаАктОРасхожденияхПослеПриемки);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаАктОРасхожденияхПослеПриемки);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаАктОРасхожденияхПослеПриемки);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаАктОРасхожденияхПослеПриемки);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров");
	Строка.ПолноеИмяДокумента			= "Документ.ЗаявлениеОВвозеТоваров";
	Строка.КлючНазначенияИспользования 	= "ЗаявленияОВвозеТоваров";
	ИменаЭлементовРабочегоМеста = Новый Массив;
	ИменаЭлементовРабочегоМеста.Добавить("ОтборЗаявлений");
	ИменаЭлементовРабочегоМеста.Добавить("СписокЗаявленияВыгрузитьЗаявлениеОВвозе");
	ИменаЭлементовРабочегоМеста.Добавить("СоздатьСтатформуВФТС");
	ИменаЭлементовРабочегоМеста.Добавить("ПроверитьВИнтернете");
	ИменаЭлементовРабочегоМеста.Добавить("ОтправитьВКонтролирующийОрган");
	ИменаЭлементовРабочегоМеста.Добавить("СписокДокументыЗакупкиЕстьЗаявкаНаОплату");
	ИменаЭлементовРабочегоМеста.Добавить("СписокДокументыЗакупкиЕстьОплата");
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств)
		Или ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств)
		Или ПравоДоступа("Изменение", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		ИменаЭлементовРабочегоМеста.Добавить("ГруппаОплата");
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ИменаЭлементовРабочегоМеста.Добавить("СформироватьЗаявкиНаРасходованиеДС");
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		ИменаЭлементовРабочегоМеста.Добавить("СформироватьСписанияБезналичныхДС");
	КонецЕсли;
	Если ПравоДоступа("Изменение", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		ИменаЭлементовРабочегоМеста.Добавить("ЗарегистрироватьПодтверждениеОплаты");
	КонецЕсли;
	Строка.ИменаЭлементовРабочегоМеста = СтрСоединить(ИменаЭлементовРабочегоМеста,",");
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (заявления о ввозе)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ЗаявлениеОВвозеТоваров";
	
	// КорректировкиПоступлений
	
	СтрокаКорректировкаПоступления = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка = СтрокаКорректировкаПоступления;
	Строка.КлючНазначенияИспользования 	= "КорректировкиПоступлений";
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.КорректировкаПоступления");
	Строка.ПолноеИмяДокумента			= "Документ.КорректировкаПоступления";
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (корректировки)'");
	
	// СчетФактураПолученный
	
	СтрокаСчетФактураПолученный = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка = СтрокаСчетФактураПолученный;
	Строка.КлючНазначенияИспользования 	= "СчетаФактурыПолученные";
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.СчетФактураПолученный");
	Строка.ПолноеИмяДокумента			= "Документ.СчетФактураПолученный";
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (счета-фактуры)'");
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.НачислениеПоЛизинговомуДоговору;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтчетКомитенту;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаСчетФактураПолученный);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
	
	// ТаможеннаяДекларацияИмпорт
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования 	= "ТаможенныеДекларацииИмпорт";
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт");
	Строка.ПолноеИмяДокумента			= "Документ.ТаможеннаяДекларацияИмпорт";
	Строка.ИспользуютсяСтатусы          = Истина;
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (ГТД)'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ТаможеннаяДекларацияИмпорт";
	
	// ПоступлениеУслугПрочихАктивов
	
	СтрокаПоступлениеУслуг = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка = СтрокаПоступлениеУслуг;
	Строка.КлючНазначенияИспользования 	= "ПоступленияУслугПрочихАктивов";
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов");
	Строка.ПолноеИмяДокумента			= "Документ.ПоступлениеУслугПрочихАктивов";
	Строка.ЗаголовокРабочегоМеста = НСтр("ru = 'Документы закупки (накладные)'");
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка,СтрокаПоступлениеУслуг);
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	Возврат ТЗХозОперацииИТипыДокументов;
	
КонецФункции

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	УстановитьОтборыДинамическихСписков();
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

Функция ТекстЗапросаСписокДокументыЗакупки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеестрДокументов.Ссылка,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.Статус,
	|	РеестрДокументов.Проведен,
	|	РеестрДокументов.ПометкаУдаления,
	|	РеестрДокументов.ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер,
	|	РеестрДокументов.Контрагент,
	|	РеестрДокументов.Организация,
	|	РеестрДокументов.Подразделение,
	|	РеестрДокументов.МестоХранения КАК Склад,
	|	РеестрДокументов.Валюта,
	|	РеестрДокументов.Сумма КАК СуммаДокумента,
	|	РеестрДокументов.Ответственный КАК Менеджер,
	|	РеестрДокументов.Комментарий,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	РеестрДокументов.Дополнительно,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентов.Документ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|	РеестрДокументов.ДополнительнаяЗапись,
	|	РеестрДокументов.ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипЗначения,
	|	ДатаВремя(1,1,1) КАК ДатаПодтвержденияОплаты,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	&ИндикаторПроверки КАК ИндикаторПроверки,
	|	Ложь КАК ЕстьЗаявкаНаОплату,
	|	Ложь КАК ЕстьОплата
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = РеестрДокументов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
	|		ПО РеестрДокументов.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентов.Документ
	|			И (&ИспользованиеПроверкиВозможно)}
	|{ГДЕ
	|	РеестрДокументов.Ссылка.* КАК Ссылка,
	|	РеестрДокументов.МестоХранения.* КАК Склад,
	|	РеестрДокументов.Организация.* КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.Статус КАК Статус,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.Подразделение.* КАК Подразделение,
	|	РеестрДокументов.Ответственный.* КАК Менеджер,
	|	РеестрДокументов.Дополнительно КАК Дополнительно,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	((РеестрДокументов.ДатаДокументаИБ >= &НачалоПериода
	|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РеестрДокументов.ДатаДокументаИБ <= &КонецПериода
	|				ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)))}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаявленияНаВвозТоваров()
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств)
		Или Не ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		
		Возврат ТекстЗапросаСписокДокументыЗакупки();
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеестрДокументов.Ссылка,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.Статус,
	|	РеестрДокументов.Проведен,
	|	РеестрДокументов.ПометкаУдаления,
	|	РеестрДокументов.ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер,
	|	РеестрДокументов.Контрагент,
	|	РеестрДокументов.Организация,
	|	РеестрДокументов.Подразделение,
	|	РеестрДокументов.МестоХранения КАК Склад,
	|	РеестрДокументов.Валюта,
	|	РеестрДокументов.Сумма КАК СуммаДокумента,
	|	РеестрДокументов.Ответственный КАК Менеджер,
	|	РеестрДокументов.Комментарий,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	РеестрДокументов.Дополнительно,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентов.Документ ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|	РеестрДокументов.ДополнительнаяЗапись,
	|	РеестрДокументов.ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипЗначения,
	|	ЗаявлениеОВвозеТоваров.ДатаПодтвержденияОплаты КАК ДатаПодтвержденияОплаты,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	&ИндикаторПроверки КАК ИндикаторПроверки,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЗаявкаНаРасходованиеДС.Ссылка) ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьЗаявкаНаОплату,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка)) ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОплата
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = РеестрДокументов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
	|		ПО РеестрДокументов.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентов.Документ
	|			И (&ИспользованиеПроверкиВозможно)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДС
	|			ПО ЗаявкаНаРасходованиеДС.Ссылка = СписаниеБезналичныхДС.ДокументОснование
	|				И (СписаниеБезналичныхДС.Проведен)
	|		ПО РеестрДокументов.Ссылка = ЗаявкаНаРасходованиеДС.ДокументОснование
	|			И (ЗаявкаНаРасходованиеДС.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДСБезЗаявок
	|		ПО РеестрДокументов.Ссылка = СписаниеБезналичныхДСБезЗаявок.ДокументОснование
	|			И (СписаниеБезналичныхДСБезЗаявок.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|		ПО (ЗаявлениеОВвозеТоваров.Ссылка = РеестрДокументов.Ссылка)
	|{ГДЕ
	|	РеестрДокументов.Ссылка.* КАК Ссылка,
	|	РеестрДокументов.МестоХранения.* КАК Склад,
	|	РеестрДокументов.Организация.* КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.Статус КАК Статус,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.Подразделение.* КАК Подразделение,
	|	РеестрДокументов.Ответственный.* КАК Менеджер,
	|	РеестрДокументов.Дополнительно КАК Дополнительно,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	((РеестрДокументов.ДатаДокументаИБ >= &НачалоПериода
	|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РеестрДокументов.ДатаДокументаИБ <= &КонецПериода
	|				ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)))}
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрДокументов.ХозяйственнаяОперация,
	|	РеестрДокументов.Подразделение,
	|	РеестрДокументов.ДатаДокументаИБ,
	|	РеестрДокументов.ДополнительнаяЗапись,
	|	РеестрДокументов.ТипСсылки,
	|	РеестрДокументов.Ответственный,
	|	РеестрДокументов.МестоХранения,
	|	РеестрДокументов.Статус,
	|	РеестрДокументов.Контрагент,
	|	РеестрДокументов.НомерПервичногоДокумента,
	|	ДокументыСОшибкамиПроверкиКонтрагентов.Документ,
	|	ЗаявлениеОВвозеТоваров.ДатаПодтвержденияОплаты,
	|	РеестрДокументов.НомерДокументаИБ,
	|	РеестрДокументов.Проведен,
	|	РеестрДокументов.Организация,
	|	РеестрДокументов.Валюта,
	|	РеестрДокументов.Партнер,
	|	РеестрДокументов.Дополнительно,
	|	РеестрДокументов.ПометкаУдаления,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	РеестрДокументов.Комментарий,
	|	РеестрДокументов.Ссылка,
	|	РеестрДокументов.ДатаПервичногоДокумента,
	|	РеестрДокументов.Сумма,
	|	&СтатусПроверки,
	|	&ИндикаторПроверки";
	
	Возврат ТекстЗапроса;
				
КонецФункции

&НаКлиенте
Процедура СформироватьДокументыНаОсновании(ИмяДокумента);

	Список = Элементы.СписокДокументыЗакупки;
	Если Список.ТекущаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Список.ВыделенныеСтроки.Количество() = 1
		И ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрано ни одного документа для ввода на основании!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДокументОснование = Список.ТекущиеДанные.Ссылка;
	Для Каждого Заявление Из МассивСсылок Цикл
		ТекущийДокументОснование = ДокументОснование;
		Если ИмяДокумента = "Документ.СписаниеБезналичныхДенежныхСредств" Тогда
			МассивЗаявлений = ПолучитьСписокПлатежныхДокументов(ТекущийДокументОснование, "ЗаявкаНаРасходованиеДенежныхСредств");
			Если МассивЗаявлений.Количество() > 0 Тогда
				ТекущийДокументОснование = МассивЗаявлений[0];
			КонецЕсли;
		КонецЕсли;
			
		ОткрытьФорму(ИмяДокумента + ".ФормаОбъекта", Новый Структура("Основание", ТекущийДокументОснование), , Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПлатежныхДокументов(Заявление, ДокументКОтбору)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДС.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДС
	|		ПО ЗаявлениеОВвозеТоваров.Ссылка = ЗаявкаНаРасходованиеДС.ДокументОснование
	|			И (ЗаявкаНаРасходованиеДС.Проведен)
	|ГДЕ
	|	&ОтбиратьЗаявки
	|	И НЕ ЗаявкаНаРасходованиеДС.Ссылка ЕСТЬ NULL
	|	И ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка)
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДС
	|			ПО ЗаявкаНаРасходованиеДС.Ссылка = СписаниеБезналичныхДС.ДокументОснование
	|				И (СписаниеБезналичныхДС.Проведен)
	|		ПО ЗаявлениеОВвозеТоваров.Ссылка = ЗаявкаНаРасходованиеДС.ДокументОснование
	|			И (ЗаявкаНаРасходованиеДС.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДСБезЗаявок
	|		ПО ЗаявлениеОВвозеТоваров.Ссылка = СписаниеБезналичныхДСБезЗаявок.ДокументОснование
	|			И (СписаниеБезналичныхДСБезЗаявок.Проведен)
	|ГДЕ
	|	&ОтбиратьОплаты
	|	И НЕ ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка) ЕСТЬ NULL
	|	И ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Заявление);
	Запрос.УстановитьПараметр("ОтбиратьЗаявки", ?(ДокументКОтбору = "ЗаявкаНаРасходованиеДенежныхСредств", Истина, Ложь));
	Запрос.УстановитьПараметр("ОтбиратьОплаты", ?(ДокументКОтбору = "СписаниеБезналичныхДенежныхСредств", Истина, Ложь));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПлатежныйДокументПоЗаявлению(Заявление)
	
	ПараметрыПоиска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявление,
			"Ссылка, 
			|ОплатаПодтверждена,
			|НомерДокументаПеречисленияНалога, 
			|ДатаДокументаПеречисленияНалога,
			|ДатаПодтвержденияОплаты,
			|НомерОтметкиОРегистрации");
	
	Возврат Документы.ЗаявлениеОВвозеТоваров.НайтиПлатежныйДокументПоЗаявлению(ПараметрыПоиска);
	
КонецФункции

// ++ НЕ УТ
&НаКлиенте
Процедура СохранитьВыгружаемыеДанные(ВыгружаемыеДанные)
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		Попытка
			
			ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось записать файл %1!
									| Возможно, недостаточно места на диске или диск защищен от записи.'"),
								ФайлВыгрузки.ИмяФайлаВыгрузки));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗаявлениеОВвозеТоваровНаСервере(УникальныйИдентификатор,Источник)
	
	Возврат Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор,Источник);
	
КонецФункции

&НаСервере
Функция ОпределитьСсылкуНаСуществующийОтчетВФТС(ЗНАЧ ЗаявлениеОВвозе)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОтчетности", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка,
	               |	РегламентированныйОтчет.ДанныеОтчета
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ВидОтчетности = &ВидОтчетности
	               |	И РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС""";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого Стр Из Результат Цикл
		ДанныеОтчета = Стр.ДанныеОтчета.Получить();
		
		Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") ИЛИ НЕ ДанныеОтчета.Свойство("ЗаявлениеОВвозеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОтчета.ЗаявлениеОВвозеТоваров.Ссылка = ЗаявлениеОВвозе Тогда
			Возврат Стр.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
// -- НЕ УТ

&НаКлиенте
Процедура ПриУстановкеПодтвержденияОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗаписатьПодтверждениеОплаты(ДополнительныеПараметры, Результат);
		
		ТекстОповещения = НСтр("ru = 'Подтверждение оплаты налога'");
		ТекстПояснения = НСтр("ru = 'Для документа %1 подтверждена оплата налога.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, СтрШаблон(ТекстПояснения, ДополнительныеПараметры.Ссылка));
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось установить отметку о подтверждении оплаты налога.'") + " " + ИнформацияОбОшибке().Описание);
			
	КонецПопытки;
	
	Элементы.СписокДокументыЗакупки.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодтверждениеОплаты(ДополнительныеПараметры, Результат)
	
	ДокументОбъект = ДополнительныеПараметры.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ОплатаПодтверждена = ЗначениеЗаполнено(Результат.ДатаПодтверждения);
	ДокументОбъект.ДатаПодтвержденияОплаты          = Результат.ДатаПодтверждения;
	ДокументОбъект.ДатаДокументаПеречисленияНалога  = Результат.ДатаДокумента;
	ДокументОбъект.НомерДокументаПеречисленияНалога = Результат.НомерДокумента;
	
	РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ДокументОбъект.Записать(РежимЗаписи);

КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяКнопкиСкопировать 								= "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню 				= "СписокКонтекстноеМенюСкопировать";
	СтруктураПараметров.ИмяКнопкиИзменить 									= "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню 					= "СписокКонтекстноеМенюИзменить";
	СтруктураПараметров.ИмяКнопкиПровести 									= "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню 					= "СписокКонтекстноеМенюПровести";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения 							= "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню 			= "СписокКонтекстноеМенюОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления 					= "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню 	= "СписокКонтекстноеМенюУстановитьПометкуУдаления";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
		КлючНазначенияФормыПоУмолчанию(), НСтр("ru = 'Документы закупки (все)'"));
	
	Заголовок   = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
	ТекущийКлюч = ДанныеРабочегоМеста.КлючНазначенияИспользования;
	
	Если ТекущийКлюч = "ЗаявленияОВвозеТоваров" Тогда
		СписокДокументыЗакупки.ТекстЗапроса = ТекстЗапросаЗаявленияНаВвозТоваров();
	Иначе
		СписокДокументыЗакупки.ТекстЗапроса = ТекстЗапросаСписокДокументыЗакупки();
	КонецЕсли;
	
	// ПроверкаДокументовВРеглУчете
	//++ НЕ УТ
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(СписокДокументыЗакупки.ТекстЗапроса, "РеестрДокументов");
	//-- НЕ УТ
	СписокДокументыЗакупки.ТекстЗапроса = СтрЗаменить(СписокДокументыЗакупки.ТекстЗапроса, "&СтатусПроверки КАК СтатусПроверки,", "");
	СписокДокументыЗакупки.ТекстЗапроса = СтрЗаменить(СписокДокументыЗакупки.ТекстЗапроса, "&СтатусПроверки,", "");
	СписокДокументыЗакупки.ТекстЗапроса = СтрЗаменить(СписокДокументыЗакупки.ТекстЗапроса, "&ИндикаторПроверки КАК ИндикаторПроверки,", "");
	// Конец ПроверкаДокументовВРеглУчете
		
	УстановитьОтборыДинамическихСписков(ТекущийКлюч);
	УстановитьВидимостьДоступность(ТекущийКлюч);
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(Элементы.ИнформационнаяНадписьОтбор.Заголовок,
		ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыЗакупкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискокВыбораМенеджера()
	
	Элементы.Менеджер.СписокВыбора.Очистить();
	ИменаДокументов = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ХозяйственныеОперацииИДокументы.Выгрузить(),"ПолноеИмяДокумента");
	МассивРолей = Новый Массив;
	Для Каждого Стр Из ИменаДокументов Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРолей, ПраваПользователяПовтИсп.ИменаРолейСПравомДобавления(Стр.ПолноеИмяДокумента));
		
	КонецЦикла;
	
	ОтчетыКлиентСервер.ДополнитьСписок(Элементы.Менеджер.СписокВыбора, ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(МассивРолей));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	СписокДокументыЗакупки.Параметры.УстановитьЗначениеПараметра("НачалоПериода",
		Период.ДатаНачала);
	СписокДокументыЗакупки.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		Период.ДатаОкончания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаЭлементовСУправляемойВидимостью()
	
	Возврат "СформироватьЗаявкиНаРасходованиеДС,СформироватьСписанияБезналичныхДС,ЗарегистрироватьПодтверждениеОплаты,
		|ОтборЗаявлений,СписокЗаявленияВыгрузитьЗаявлениеОВвозе,СоздатьСтатформуВФТС,ПроверитьВИнтернете,
		|ОтправитьВКонтролирующийОрган,ГруппаОплата,СписокДокументыЗакупкиЕстьЗаявкаНаОплату,
		|СписокДокументыЗакупкиДатаПодтвержденияОплаты,СписокДокументыЗакупкиЕстьОплата"
		+ ?(УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеАктовОРасхожденияхПослеПриемкиПоПоступлению"),",ОформляемыеДокументы","");
	
КонецФункции

#КонецОбласти

#Область ГиперссылкаКОформлению

&НаСервере
Функция ОбновитьГиперссылкуКОформлению()
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Склад", Склад);
	ПараметрыФормирования.Вставить("Организация", Организация);
	
	КОформлению = ОбщегоНазначенияУТ.СформироватьГиперссылкуКОформлению(ХозяйственныеОперацииИДокументы.Выгрузить(), ПараметрыФормирования);
	Элементы.КОформлению.Видимость = ЗначениеЗаполнено(КОформлению);
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ТТНВходящаяЕГАИС");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ДоверенностьВыданная");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаказПоставщику");
	
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);

КонецФункции

#КонецОбласти

#КонецОбласти


