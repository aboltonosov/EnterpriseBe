
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие; // Признак выполнения обработки закрытия формы.

&НаКлиенте
Перем ПараметрыОбработчиков; // Структура параметров обработчиков ожидания.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьРегистрациюОрганизаций();
	
	Параметры.Свойство("ИдентификаторКатегории",         ТекущаяКатегория);
	Параметры.Свойство("СтрокаПоиска",                   СтрокаПоиска);
	Параметры.Свойство("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	Параметры.Свойство("ОтборАртикул",                   ОтборАртикул);
	Параметры.Свойство("ОтборНаименование",              ОтборНаименование);
	Параметры.Свойство("Поставщик",                      Поставщик);
	Параметры.Свойство("ПоставщикНаименование",          ПоставщикНаименование);
	Параметры.Свойство("ПоставщикИдентификатор",         ПоставщикИдентификатор);
	Параметры.Свойство("ПоставщикИНН",                   ПоставщикИНН);
	Параметры.Свойство("ПоставщикКПП",                   ПоставщикКПП);
	
	Если Параметры.Свойство("ИНН") Тогда
		ПоставщикИдентификатор = Параметры.ИНН
			+ ?(Параметры.Свойство("КПП") И Параметры.КПП <> "0" И Не ПустаяСтрока(Параметры.КПП),
				"/" + Параметры.КПП, "");
	КонецЕсли;
	Если ПустаяСтрока(ПоставщикНаименование) И ЗначениеЗаполнено(Поставщик) Тогда
		ПоставщикНаименование = Строка(Поставщик);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборШтрихКоды") И ЗначениеЗаполнено(Параметры.ОтборШтрихКоды) Тогда
		ОтборШтрихКоды.ЗагрузитьЗначения(Параметры.ОтборШтрихКоды);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		СтрокаПоиска = ОтборНаименование;
	ИначеЕсли ЗначениеЗаполнено(ОтборАртикул) Тогда
		СтрокаПоиска = ОтборАртикул;
	ИначеЕсли ЗначениеЗаполнено(ОтборШтрихКоды) Тогда
		СтрокаПоиска = ОтборШтрихКоды;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УникальныйИдентификаторКорзины) Тогда
		УникальныйИдентификаторКорзины = УникальныйИдентификатор;
	Иначе
		АдресТоваровВХранилище = "";
		Если Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище) Тогда
			КорзинаОбъект = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
			Корзина.Загрузить(КорзинаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Валюта = ТорговыеПредложенияПереопределяемый.ВалютаРегламентированногоУчета();
	Элементы.КомандаВалюта.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	ЗаполнитьНавигациюКатегорий(ТекущаяКатегория);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНадписьКорзинаТоваров();

	Если ПустаяСтрока(РежимСортировки) Тогда
		РежимСортировки = "СортировкаЦенаВозрастание";
	КонецЕсли;
	УстановитьРежимСортировки(РежимСортировки);
	УстановитСнятьФлагКомандыЗапрашиватьКоличество();
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) ИЛИ ЗначениеЗаполнено(СтрокаПоиска)
		ИЛИ ЗначениеЗаполнено(Поставщик) ИЛИ ЗначениеЗаполнено(ПоставщикИдентификатор) Тогда
		ЗагрузитьТорговыеПредложения();
	КонецЕсли;
	
	// Проверка открытия из другой формы.
	РазрешитьИзменениеПоставщика = ЭтотОбъект.ВладелецФормы = Неопределено;
	Элементы.ПоставщикНаименование.Видимость = РазрешитьИзменениеПоставщика;
	Элементы.ОтборПоПоставщику.Видимость = РазрешитьИзменениеПоставщика;
	
	ОтборыУстановлены = ЦенаОт <> 0 ИЛИ ЦенаДо <> 0
		ИЛИ РазрешитьИзменениеПоставщика И (ЗначениеЗаполнено(Поставщик)
			ИЛИ ЗначениеЗаполнено(ПоставщикНаименование));
	ОбновитьПризнакУстановкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВКорзине"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины
		И Источник <> ЭтотОбъект Тогда
		
		Количество = ?(Параметр.Свойство("Количество"), Параметр.Количество, Неопределено);
		
		ДобавитьВКорзинуПоИдентификатору(Параметр.ПредложениеИдентификатор, Количество);
		СтрокаКорзины = Корзина.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", Параметр.ПредложениеИдентификатор));
		
		Если СтрокаКорзины.Количество() Тогда
			
			СтрокаСписка = Неопределено;
			Если Элементы.Список.ТекущиеДанные <> Неопределено
				И Элементы.Список.ТекущиеДанные.ПредложениеИдентификатор = Параметр.ПредложениеИдентификатор Тогда
				СтрокаСписка = Элементы.Список.ТекущиеДанные;
			Иначе
				СтрокаСписка = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", Параметр.ПредложениеИдентификатор));
				Если СтрокаСписка.Количество() Тогда
					СтрокаСписка = СтрокаСписка[0];
				Иначе
					СтрокаСписка = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСписка <> Неопределено Тогда
				СтрокаСписка.ГиперссылкаДобавить = ?(СтрокаКорзины[0].Количество = 0,
					НСтр("ru = 'Добавить'"), СтрокаКорзины[0].Количество);
			КонецЕсли;
				
		ИначеЕсли Элементы.Список.ТекущиеДанные.ПредложениеИдентификатор = Параметр.ПредложениеИдентификатор Тогда
			
			// Если нет такой строки в корзине, гиперссылка очищается.
			Элементы.Список.ТекущиеДанные.ГиперссылкаДобавить = НСтр("ru = 'Добавить'");
			
		КонецЕсли;
		
		ОбновитьНадписьКорзинаТоваров();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзКорзины"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины Тогда
		
		Для Каждого ПредложениеИдентификатор Из Параметр.ИдентификаторыПредложений Цикл
			
			СтрокаКорзины = Корзина.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПредложениеИдентификатор));
			Если СтрокаКорзины.Количество() Тогда
				Корзина.Удалить(Корзина.Индекс(СтрокаКорзины[0]));
			КонецЕсли;
			
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПредложениеИдентификатор));
			Если СтрокаСписка.Количество() Тогда 
				СтрокаСписка[0].ГиперссылкаДобавить = НСтр("ru = 'Добавить'");
			КонецЕсли;
			
		КонецЦикла;
		ОбновитьНадписьКорзинаТоваров();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_Обновить" Тогда
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") И ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
			ПараметрыИзменены = Истина;
			ТекущаяКатегория = Параметр.ИдентификаторКатегории;
		КонецЕсли;
			
		Если Параметр.Свойство("ОтборНаименование") Тогда
			ПараметрыИзменены = Истина;
			ОтборНаименование = Параметр.ОтборНаименование;
		КонецЕсли;
		Если Параметр.Свойство("ОтборАртикул") Тогда
			ПараметрыИзменены = Истина;
			ОтборАртикул = Параметр.ОтборАртикул;
		КонецЕсли;
		Если Параметр.Свойство("ОтборШтрихКоды") Тогда
			ПараметрыИзменены = Истина;
			ОтборШтрихКоды.ЗагрузитьЗначения(Параметр.ОтборШтрихКоды);
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", ТекущаяКатегория, Истина);
			ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_СформированыЗаказы" И Параметр.Свойство("УникальныйИдентификаторКорзины")
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины Тогда
		
		// Очистка корзины.
		Для Каждого ПозицияКорзины Из Корзина Цикл
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПозицияКорзины.ПредложениеИдентификатор));
			Если СтрокаСписка.Количество() Тогда
				СтрокаСписка[0].ГиперссылкаДобавить = НСтр("ru = 'Добавить'");
			КонецЕсли;
		КонецЦикла;
		Корзина.Очистить();
		ОбновитьНадписьКорзинаТоваров();
		
	ИначеЕсли ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ПроверитьРегистрациюОрганизаций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Корзина.Количество() И Не ВыполняетсяЗакрытие Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
						НСтр("ru = 'Корзина содержит подобранные товары. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		Настройки.Удалить("Поставщик");
		Настройки.Удалить("ПоставщикИНН");
		Настройки.Удалить("ПоставщикКПП");
		Настройки.Удалить("ПоставщикИдентификатор");
		Настройки.Удалить("ПоставщикНаименование");
		Настройки.Удалить("ЦенаОт");
		Настройки.Удалить("ЦенаДо");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) >= 3 Тогда
		
		Элемент.СписокВыбора.Очистить();
		ДанныеВыбора = КатегорииПоНаименованию(Текст);
		Если ДанныеВыбора <> Неопределено Тогда
			Для Каждого ЭлементСписка Из ДанныеВыбора Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦикла;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтборНаименование = "";
	ОтборАртикул = "";
	ОтборШтрихКоды.Очистить();
	
	// Если не из выбора, значит введено вручную.
	ЭлементВыбора = Элемент.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	
	Если ЭлементВыбора = Неопределено Тогда
		ЗаполнитьТорговыеПредложения();
	Иначе
		// Изменение текущей категории.
		ТекущаяКатегория = СтрокаПоиска;
		СтрокаПоиска = "";
		ОтборыПоКатегорииАктуальны = Ложь;
		ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", ТекущаяКатегория, Истина);
		ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("АдресКэшаКатегорийРубрик", АдресКэшаКатегорийРубрик);
	ТекущаяКатегория = Результат.Идентификатор;
	
	СтрокаПоиска = "";
	ОтборыПоКатегорииАктуальны = Ложь;
	ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", ТекущаяКатегория, Истина);
	ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ключ = НавигационнаяСсылкаФорматированнойСтроки;
	ИндексРазделителя = СтрНайти(Ключ, ":");
	
	НовыйИдентификатор = Сред(Ключ, 3, ИндексРазделителя - 3); 
	
	Если ТекущаяКатегория = НовыйИдентификатор Тогда
		Возврат;
	Иначе
		ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", НовыйИдентификатор, Ложь);
		ЗапроситьЗаполнениеНавигацииКатегорий();
	КонецЕсли;
	
	ОтборыПоКатегорииАктуальны = Ложь;
	ТекущаяКатегория = НовыйИдентификатор;
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТребуетсяОбновлениеКэшаКатегории = Ложь;
	Если ПустаяСтрока(АдресКэшаКатегорийРубрик) Тогда
		АдресКэшаКатегорийРубрик = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ТребуетсяОбновлениеКэшаКатегории = Истина;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КатегорияПослеВыбора", ЭтотОбъект);
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("ЭтоГруппа", Истина));
	ПараметрыФормыВыбора.Вставить("АдресКэшаКатегорийРубрик", АдресКэшаКатегорийРубрик);
	ПараметрыФормыВыбора.Вставить("ТребуетсяОбновлениеКэшаКатегории", ТребуетсяОбновлениеКэшаКатегории);
	ПараметрыФормыВыбора.Вставить("Идентификатор", ТекущаяКатегория);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ДеревоКатегорий", ПараметрыФормыВыбора,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКореньКатегорийНажатие(Элемент)
	
	ТекущаяКатегория = Неопределено;
	ОтборыПоКатегорииАктуальны = Ложь;
	ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", Неопределено, Ложь);
	ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодкатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ключ = НавигационнаяСсылкаФорматированнойСтроки;
	ИндексРазделителя = СтрНайти(Ключ, ":");
	
	НовыйИдентификатор = Сред(Ключ, 3, ИндексРазделителя - 3); 
	
	Если ТекущаяКатегория = НовыйИдентификатор Тогда
		Возврат;
	Иначе
		ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", НовыйИдентификатор, Ложь);
		ОтборыПоКатегорииАктуальны = Ложь;
		ТекущаяКатегория = НовыйИдентификатор;
		ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		Валюта = Значение;
		Элементы.КомандаВалюта.Заголовок = НСтр("ru = 'Валюта:'") + " " + Валюта;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьПодобраноТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОформитьЗаказыПокупателя(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеГиперссылки(Элемент)
	
	Если Не СтрНайти(Элемент.Имя, "ЭлементОтбора_") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппыОтбора = СтрЗаменить(Элемент.Имя, "ЭлементОтбора_", "ГруппаОтбора_");
	ГруппаОтбора = Элементы[ИмяГруппыОтбора];
	Если ГруппаОтбора.Видимость Тогда
		ГруппаОтбора.Видимость = Ложь;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, "↓", "→");
	ИначеЕсли ГруппаОтбора.ПодчиненныеЭлементы.Количество() Тогда
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, "→", "↓");
	Иначе
		Идентификатор = СтрЗаменить(Элемент.Имя, "ЭлементОтбора_", "");
		СформироватьЭлементыХарактеристики(Идентификатор);
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, "→", "↓");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеОтбора(Элемент)
	
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНаименованиеПриИзменении(Элемент)
	
	Поставщик = Неопределено;
	ПоставщикИдентификатор = Неопределено;
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", Поставщик);
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборКонтрагентаПродолжение", ЭтотОбъект);
	ИмяФормыВыбора = ИмяФормыВыбораКонтрагентов();
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект,,,, ОбработкаОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТребуетсяРегистрацияОрганизации Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросРегистрацииОрганизацииПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Для просмотра информации необходимо зарегистрироваться в сервисе 1С:Бизнес-сеть. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоСтроке.ОткрытьКарточку");
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	ПараметрыОповещения.Вставить("ПредложениеИдентификатор", ТекущиеДанные.ПредложениеИдентификатор);
	ПараметрыОповещения.Вставить("ПоставщикИдентификатор", ТекущиеДанные.ПоставщикИдентификатор);
	
	Если Поле.Имя = "СписокГиперссылкаДобавить" Тогда
		
		СтрокаКорзины = Корзина.НайтиСтроки(новый Структура("ПредложениеИдентификатор", ТекущиеДанные.ПредложениеИдентификатор));
		Если СтрокаКорзины.Количество() Тогда
			КоличествоВКорзине = СтрокаКорзины[0].Количество;
		Иначе
			КоличествоВКорзине = 0;
		КонецЕсли;
			
		Если ЗапрашиватьКоличество Тогда
			ПараметрыОповещения.Вставить("КоличествоВКорзине", КоличествоВКорзине);
			ВводКоличестваЗавершение = Новый ОписаниеОповещения("ВводКоличестваЗавершение",
				ЭтотОбъект,
				Новый Структура("ПараметрыОповещения", ПараметрыОповещения));
			ПоказатьВводЧисла(ВводКоличестваЗавершение, КоличествоВКорзине, НСтр("ru = 'Укажите количество'"), 15, 3);
		Иначе
			КоличествоВКорзине = КоличествоВКорзине + 1; // Добавление товара в корзину 1шт.
			ПараметрыОповещения.Вставить("Количество", КоличествоВКорзине);
			Оповестить("ТорговыеПредложения_ИзменитьКоличествоВКорзине", ПараметрыОповещения);
		КонецЕсли;
		
	Иначе
		
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ТорговоеПредложение", ПараметрыОповещения, ЭтотОбъект,
			ТекущиеДанные.ПредложениеИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьПодбор(Команда)
	
	Если Корзина.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Корзина пуста'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьКорзинуПродолжение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Корзина будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказыПокупателя(Команда)
	
	Если Корзина.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В корзине отсутствуют товары.'"));
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОтправкаПредложенийПродолжение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	ПараметрыОткрытия.Вставить("АдресТоваровВХранилище", АдресХранилищаТоваров());
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов", ПараметрыОткрытия,,,,, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимСортировки(Команда)
	
	УстановитьРежимСортировки(Команда.Имя);	
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ВходящиеДокументы", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтборы(Команда)
	
	Элементы.КомандаПоказыватьОтборы.Пометка = Не Элементы.КомандаПоказыватьОтборы.Пометка;
	Элементы.ГруппаПанельОтборов.Видимость = Элементы.КомандаПоказыватьОтборы.Пометка;
	
	Если Элементы.КомандаПоказыватьОтборы.Пометка Тогда
		Если ЗначениеЗаполнено(ТекущаяКатегория) И ОтборыПоКатегорииАктуальны = Ложь Тогда
			СформироватьОтборыПоКатегории(ТекущаяКатегория);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
		НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	УстановитСнятьФлагКомандыЗапрашиватьКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщику(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоставщикНаименование = ТекущиеДанные.ПоставщикНаименование;
	ПоставщикИдентификатор = ТекущиеДанные.ПоставщикИдентификатор;
	
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтбор(Команда)
	
	ОчиститьОтборИОбновитьСписок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВводКоличестваЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Число <> 0 Тогда
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("Количество", Число);
		Оповестить("ТорговыеПредложения_ИзменитьКоличествоВКорзине", ДополнительныеПараметры.ПараметрыОповещения);
	Иначе
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("ИдентификаторыПредложений", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ПараметрыОповещения.ПредложениеИдентификатор));
		Оповестить("ТорговыеПредложения_УдалитьИзКорзины", ДополнительныеПараметры.ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзинуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьКорзину();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакУстановкиОтборов()
	
	Элементы.КомандаПоказыватьОтборы.Заголовок = НСтр("ru = 'Отборы'") + ?(ОтборыУстановлены, " *", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьКорзинаТоваров()
	
	КоличествоТоваров     = Корзина.Количество();
	ЭтотОбъект.СуммаВсего = Корзина.Итог("СуммаСНДС");
	
	Если Корзина.Количество()=0 Тогда
		НадписьПодобраноТоваров = НСтр("ru = 'Отсутствуют товары в корзине'");
	Иначе
		НадписьПодобраноТоваров = НСтр("ru = 'В корзине %1 поз. на сумму %2 %3'");
		НадписьПодобраноТоваров = СтрШаблон(НадписьПодобраноТоваров, КоличествоТоваров, ЭтотОбъект.СуммаВсего, Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПредложенийПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОчиститьКорзину();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЗаполнениеНавигацииКатегорий()
	
	Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	ПодключитьОбработчикОжидания("ОбработчикЗаполнитьНавигациюКатегорий", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТорговыеПредложения()
	
	ОчиститьСообщения();
	Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	ПодключитьОбработчикОжидания("ОбработчикЗагрузитьТорговыеПредложения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения()
	
	Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	ПодключитьОбработчикОжидания("ОбработчикЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьНавигациюКатегорий()
	
	ЗаполнитьНавигациюКатегорий(
		ПараметрыОбработчиков.ТекущаяКатегория,
		ПараметрыОбработчиков.ОчиститьСтруктуру);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗагрузитьТорговыеПредложения()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоСтроке.НайтиПредложения");
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Элементы.ДекорацияОграничения.Видимость = Ложь;
	
	// Получение торговых предложений в сервисе.
	ЗагрузитьТорговыеПредложения();
	
	// Позиционирование на текущей строке.
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокиПоиска = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ТекущиеДанные.ПредложениеИдентификатор));
		Если СтрокиПоиска.Количество() Тогда
			Элементы.Список.ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоСтроке.ЗаполнитьНавигацию");
		
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
	ЗагрузитьТорговыеПредложения();
	ЗаполнитьНавигациюКатегорий(
		ПараметрыОбработчиков.ТекущаяКатегория,
		ПараметрыОбработчиков.ОчиститьСтруктуру);
	
	// Позиционирование на текущей строке.
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокиПоиска = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ТекущиеДанные.ПредложениеИдентификатор));
		Если СтрокиПоиска.Количество() Тогда
			Элементы.Список.ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавигациюКатегорий(Идентификатор, ОчиститьСтруктуру = Ложь)
	
	// Заполнение структуры категорий.
	СтруктураКатегорийДанные = РеквизитФормыВЗначение("СтруктураКатегорий");
	
	Если ОчиститьСтруктуру Тогда
		СтруктураКатегорийДанные.Строки.Очистить();
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		СтрокаДобавления = СтруктураКатегорийДанные;
	Иначе
		НайденныеСтроки = СтруктураКатегорийДанные.Строки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = СтруктураКатегорийДанные;
			СтрокаДобавления = НоваяСтрока;
		Иначе
			СтрокаДобавления = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	ЭтоКорневаяКатегория = ТипЗнч(СтрокаДобавления) = Тип("ДеревоЗначений") И Не ЗначениеЗаполнено(Идентификатор);
	КореньСОднойГруппой = СтрокаДобавления.Строки.Количество() = 1 И ЭтоКорневаяКатегория;
	ОтличиеПодчиненных = СтрокаДобавления.Строки.Количество() = 0
		ИЛИ Не ТипЗнч(СтрокаДобавления) = Тип("ДеревоЗначений") И СтрокаДобавления.Строки.Количество() <> СтрокаДобавления.КоличествоПодчиненных;
	
	Если КореньСОднойГруппой ИЛИ ОтличиеПодчиненных Тогда
		
		Результат = Неопределено;
		Отказ = Ложь;
		ПараметрыКоманды = Новый Структура;
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			
			// Инициализация первого уровня.
			ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьСписокКатегорийПервогоУровня", Неопределено, Результат, Отказ);
			Элементы.ГруппаДекорацийПодкатегорий.Видимость = Истина;
			
			Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаДобавления.Строки.Очистить();
			
			Для Каждого Категория Из Результат.Данные Цикл
				НоваяСтрока = СтрокаДобавления.Строки.Добавить();
				НоваяСтрока.Идентификатор = Формат(Категория.id, "ЧГ=");
				НоваяСтрока.Представление = Категория.title;
				НоваяСтрока.КоличествоПодчиненных = Категория.childrenCount;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Идентификатор) 
			И (СтруктураКатегорийДанные.Строки.Количество() = 0 ИЛИ ЭтоКорневаяКатегория) Тогда
			
			// Открытие из другой формы с передачей идентификатора.
			ПараметрыКоманды.Вставить("ИдентификаторыКатегории", "[" + Идентификатор  +"]");
			ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьЦепочкуКатегорийДоКорневой", ПараметрыКоманды, Результат, Отказ);
			
			Если Отказ ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			МассивКатегорий = Результат.Данные[0];
			Для Индекс = -МассивКатегорий.Количество()+1 По 0 Цикл
				СтрокаДобавления = СтрокаДобавления.Строки.Добавить();
				Категория = МассивКатегорий[-Индекс];
				СтрокаДобавления.Идентификатор = Формат(Категория.id, "ЧГ=");
				СтрокаДобавления.Представление = Категория.title;
				СтрокаДобавления.КоличествоПодчиненных = Категория.childrenCount;
			КонецЦикла;
			
		Иначе
			
			// Переход к нижестоящей группе товаров и получение подчиненных групп.
			ПараметрыКоманды.Вставить("ИдентификаторКатегории", Идентификатор);
			ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьСписокДочернихКатегорий", ПараметрыКоманды, Результат, Отказ);
			
			Если Не Отказ И Результат.КодСостояния = 200 И Результат.Данные.Количество() Тогда
				СтрокаДобавления.Строки.Очистить();
				Для Каждого Категория Из Результат.Данные Цикл
					НоваяСтрока = СтрокаДобавления.Строки.Добавить();
					НоваяСтрока.Идентификатор = Формат(Категория.id, "ЧГ=");
					НоваяСтрока.Представление = Категория.title;
					НоваяСтрока.КоличествоПодчиненных = Категория.childrenCount;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(СтруктураКатегорийДанные, "СтруктураКатегорий");
	
	// Формирование навигации категорий.
	Если ЭтоКорневаяКатегория Тогда
		Элементы.СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Все товары'"),,,, "id:Все товары");
		Заголовок = НСтр("ru = 'Торговые предложения 1С:Бизнес-сеть'");
		СформироватьОтборыПоКатегории(Неопределено);
	Иначе
		
		РодительСтроки = СтрокаДобавления;
		МассивСтроки = Новый Массив;
		
		Пока РодительСтроки <> Неопределено Цикл
			Если МассивСтроки.Количество() Тогда
				МассивСтроки.Вставить(0, " • ");
			КонецЕсли;
			МассивСтроки.Вставить(0,
				Новый ФорматированнаяСтрока(РодительСтроки.Представление,,,, "id"
					+ Формат(РодительСтроки.Идентификатор, "ЧГ=") 
					+ ":" + РодительСтроки.Представление));
			РодительСтроки = РодительСтроки.Родитель;
		КонецЦикла; 
		
		// Заголовок формы.
		Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения - %1'"), СтрокаДобавления.Представление);
		
		// Ссылки навигационной панели.
		Элементы.СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(МассивСтроки);
	КонецЕсли;
	
	// Формирование навигации подкатегорий.
	МассивСтроки = Новый Массив;
	Для Каждого Категория Из СтрокаДобавления.Строки Цикл
		Если МассивСтроки.Количество() Тогда
			МассивСтроки.Вставить(0, "     ");
		КонецЕсли;
		МассивСтроки.Вставить(0, Новый ФорматированнаяСтрока(Категория.Представление,,,,
			"id" + Формат(Категория.Идентификатор, "ЧГ=") + ":" + Категория.Представление));
	КонецЦикла;
	
	Элементы.ДекорацияПодкатегорий.Видимость = МассивСтроки.Количество();
	Элементы.ДекорацияПодкатегорий.Заголовок = Новый ФорматированнаяСтрока(МассивСтроки);
	
	Если Элементы.КомандаПоказыватьОтборы.Пометка И Не ОтборыПоКатегорииАктуальны Тогда
		СформироватьОтборыПоКатегории(ТекущаяКатегория);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПоиска()
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("Валюта", Валюта);
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыПоиска.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		ПараметрыПоиска.Вставить("НазваниеТовара", ОтборНаименование);
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПараметрыПоиска.Вставить("НазваниеТовара", СтрокаПоиска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАртикул) Тогда
		ПараметрыПоиска.Вставить("Артикул", ОтборАртикул);
	ИначеЕсли ПараметрыПоиска.Свойство("НазваниеТовара") Тогда
		ПараметрыПоиска.Вставить("Артикул", ПараметрыПоиска.НазваниеТовара);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборШтрихКоды) Тогда
		ПараметрыПоиска.Вставить("ШтрихКоды", ОтборШтрихКоды.ВыгрузитьЗначения());
	ИначеЕсли ПараметрыПоиска.Свойство("НазваниеТовара") Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		Если ТипЧисло.ПривестиЗначение(ПараметрыПоиска.НазваниеТовара) <> 0 Тогда
			МассивПоискаШтрихКодов = Новый Массив;
			МассивПоискаШтрихКодов.Добавить(ПараметрыПоиска.НазваниеТовара);
			ПараметрыПоиска.Вставить("ШтрихКоды", МассивПоискаШтрихКодов);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("РежимСортировки", РежимСортировки);
	
	// Отборы.
	ПараметрыПоиска.Вставить("Поставщик", Поставщик);
	ПараметрыПоиска.Вставить("ПоставщикНаименование",  ПоставщикНаименование);
	ПараметрыПоиска.Вставить("ПоставщикИдентификатор", ПоставщикИдентификатор);
	ПараметрыПоиска.Вставить("ЦенаОт", ЦенаОт * 100); // цена в сервисе учитывается в копейках.
	ПараметрыПоиска.Вставить("ЦенаДо", ЦенаДо * 100);
	
	Если Элементы.КомандаПоказыватьОтборы.Пометка И ОтборыПоКатегорииАктуальны Тогда
		
		МассивАтрибутов = Новый Массив;
		Для каждого ИмяРеквизита Из СписокДобавленныхРеквизитов Цикл
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита.Значение];
			ИдентификаторРеквизита = СтрРазделить(ИмяРеквизита.Значение, "_")[1];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				Если ЗначениеРеквизита <> Ложь Тогда
					МассивАтрибутов.Добавить(
						Новый Структура("ИдентификаторАтрибута, Значение",
							ИдентификаторРеквизита, ЗначениеРеквизита));
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для Каждого ЭлементСписка Из ЗначениеРеквизита Цикл
					Если ЭлементСписка.Пометка Тогда
						МассивАтрибутов.Добавить(
							Новый Структура("ИдентификаторАтрибута, ИдентификаторЗначения",
								ИдентификаторРеквизита, ЭлементСписка.Значение));
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				МассивАтрибутов.Добавить(
					Новый Структура("ИдентификаторАтрибута, Значение",
						ИдентификаторРеквизита, ЗначениеРеквизита));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивАтрибутов.Количество() Тогда
			ПараметрыПоиска.Вставить("Атрибуты", МассивАтрибутов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТорговыеПредложения()
	
	ПараметрыПроцедуры = ПараметрыПоиска();
	
	ОтборыУстановлены = (ПараметрыПроцедуры.Свойство("Атрибуты") И ПараметрыПроцедуры.Атрибуты.Количество())
		ИЛИ (РазрешитьИзменениеПоставщика И (ЗначениеЗаполнено(Поставщик) ИЛИ ЗначениеЗаполнено(ПоставщикНаименование)))
		ИЛИ ЦенаОт <> 0 ИЛИ ЦенаДо <> 0;
		
	ОбновитьПризнакУстановкиОтборов();
	Элементы.СписокНаименованиеКонтрагента.Видимость =
		Не ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(ПоставщикИдентификатор);
		
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по строке.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложения.НайтиТорговыеПредложенияПоОтбору";
	Задание.ПараметрыПроцедуры = ПараметрыПроцедуры;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперация = ЗагрузитьТорговыеПредложенияВФоне(Задание, УникальныйИдентификатор);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыПроцедуры.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ЗагрузитьТорговыеПредложенияВФонеЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьТорговыеПредложенияВФоне(Знач Задание , Знач ИдентификаторФормы)
	
	ДозаполнитьПараметрыПроцедуры(Задание.ПараметрыПроцедуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, 
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДозаполнитьПараметрыПроцедуры(ПараметрыПоиска)
	
	ПараметрыПоиска.Вставить("КодВалюты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.Валюта, "Код"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТорговыеПредложенияВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если Результат = Неопределено Тогда // Отменено пользователем.
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Фоновое задание отменено пользователем'");
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) 
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И ИдентификаторЗадания = ДополнительныеПараметры.ИдентификаторЗадания Тогда
			
			ЗагрузитьРезультатПоиска(Результат.АдресРезультата);
			
		КонецЕсли;
		ИдентификаторЗадания = Неопределено;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Отказ = Истина;
		ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Отказ Тогда
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
					ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияОграничения.Видимость = Список.Количество() >= 1000;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьРезультатПоиска(АдресРезультата)
	
	Список.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		РезультатПоиска = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда 
			Список.Загрузить(РезультатПоиска);
		КонецЕсли;
	КонецЕсли;
	
	// Поиск товаров из корзины.
	Для Каждого СтрокаКорзины Из Корзина Цикл
		СтрокиСписка = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", СтрокаКорзины.ПредложениеИдентификатор));
		Если СтрокиСписка.Количество() Тогда
			СтрокиСписка[0].ГиперссылкаДобавить = ?(СтрокаКорзины.Количество = 0,
				НСтр("ru = 'Добавить'"), СтрокаКорзины.Количество);
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.КомандаПоказыватьОтборы.Пометка И Не ОтборыПоКатегорииАктуальны Тогда
		СформироватьОтборыПоКатегории(ТекущаяКатегория);
	КонецЕсли;
	
	Элементы.НайтиПредложения.Картинка = БиблиотекаКартинок.Найти;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресХранилищаТоваров()
	
	КорзинаОбъект = РеквизитФормыВЗначение("Корзина");
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(КорзинаОбъект, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьКорзину()
	
	Для Каждого ПозицияКорзины Из Корзина Цикл
		СтрокаСписка = Список.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПозицияКорзины.ПредложениеИдентификатор));
		Если СтрокаСписка.Количество() Тогда
			СтрокаСписка[0].ГиперссылкаДобавить = НСтр("ru = 'Добавить'");
		КонецЕсли;
	КонецЦикла;
	Корзина.Очистить();
	ОбновитьНадписьКорзинаТоваров();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтборыПоКатегории(ИдентификаторКатегории)
	
	// Удаление данных.
	МассивУдаления = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов0.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов1.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ЭлементУдаления Из МассивУдаления Цикл
		Элементы.Удалить(ЭлементУдаления);
	КонецЦикла;
	ИзменитьРеквизиты(, СписокДобавленныхРеквизитов.ВыгрузитьЗначения());
	СписокДобавленныхРеквизитов.Очистить();
	
	Если Не ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение характеристик в сервисе.
	Результат = Неопределено; Отказ = Ложь;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьСписокХарактеристикКатегории", ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ Или Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоВКолонке = Результат.Данные.Количество();
	Если КоличествоВКолонке > 20 Тогда
		КоличествоВКолонке = Окр(Результат.Данные.Количество() / 2, 0, РежимОкругления.Окр15как10) + 1;
	КонецЕсли;
	
	// Формирование элементов формы.
	СчетчикХарактеристики = 0;
	Для Каждого Характеристика Из Результат.Данные Цикл
		
		Если СтрНайти(Характеристика.sourceId, "-") ИЛИ СтрНайти(Характеристика.sourceId, "shipping")
			ИЛИ Характеристика.title = "Минимальная цена" ИЛИ Характеристика.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерГруппы = Цел(СчетчикХарактеристики / КоличествоВКолонке);
		ГруппаОтборов = Элементы["ГруппаОтборов" + НомерГруппы];
		СчетчикХарактеристики = СчетчикХарактеристики + 1;
		
		ИдентификаторХарактеристики = Формат(Характеристика.id,"ЧРГ=; ЧГ=");
		
		Если Характеристика.type = "ENUMERATION" Тогда
			
			НовыйЭлемент = Элементы.Добавить("ЭлементОтбора_" + ИдентификаторХарактеристики, Тип("ДекорацияФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Характеристика.title + " →";
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГиперссылки");
			
			// Добавление пустой группы.
			НоваяГруппа = Элементы.Добавить("ГруппаОтбора_" + ИдентификаторХарактеристики, Тип("ГруппаФормы"), ГруппаОтборов);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			НоваяГруппа.ОтображатьЗаголовок = Ложь;
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			НоваяГруппа.Видимость = Ложь;
			НоваяГруппа.ОтображатьОтступСлева = Ложь;
			
		ИначеЕсли Характеристика.type = "BOOLEAN" Тогда 
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторХарактеристики, Новый ОписаниеТипов("Булево"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя);
			
			НовыйЭлемент = Элементы.Добавить("ЭлементОтбора_" + ИдентификаторХарактеристики, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Характеристика.title;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		ИначеЕсли Характеристика.type = "NUMBER" Тогда 
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторХарактеристики, Новый ОписаниеТипов("Число"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя);
			
			НовыйЭлемент = Элементы.Добавить("ЭлементОтбора_" + ИдентификаторХарактеристики, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Характеристика.title + ?(ПустаяСтрока(Характеристика.unitCode),"", ", " + Характеристика.unitCode);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 0;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборыПоКатегорииАктуальны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимСортировки(НовыйРежим)

	// Установка пометки.
	Для Каждого Элемент Из Элементы.ПодменюСортировка.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = НовыйРежим);
	КонецЦикла;
	
	РежимСортировки = НовыйРежим;
	
	Если СтрНайти(НовыйРежим, "Возрастание") Тогда
		СимволРежима = " ↑";
	Иначе
		СимволРежима = " ↓";
	КонецЕсли;
	
	Элементы.СписокНаименование.Заголовок = НСтр("ru = 'Наименование'");
	Элементы.СписокЦена.Заголовок = НСтр("ru = 'Цена'");
	
	Если СтрНайти(НовыйРежим, "Наименование") Тогда
		Элементы.СписокНаименование.Заголовок = Элементы.СписокНаименование.Заголовок + СимволРежима;
	Иначе
		Элементы.СписокЦена.Заголовок = Элементы.СписокЦена.Заголовок + СимволРежима;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыХарактеристики(Идентификатор)
	
	Результат = Неопределено; Отказ = Ложь;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
	ПараметрыКоманды.Вставить("ИдентификаторХарактеристики", Идентификатор);
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьЗначенияХарактеристики", ПараметрыКоманды, Результат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ЗначенияХарактеристик = Результат.Данные;
	
	МассивРеквизитов = Новый Массив;
	Реквизит = Новый РеквизитФормы("Отбор_" + Идентификатор, Новый ОписаниеТипов("СписокЗначений"));
	МассивРеквизитов.Добавить(Реквизит);
	ИзменитьРеквизиты(МассивРеквизитов);
	СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя);
	
	Если ТипЗнч(ЗначенияХарактеристик) = Тип("Массив") Тогда
		Если ЗначенияХарактеристик.Количество() > 1 Тогда
			Для каждого Значение Из ЗначенияХарактеристик Цикл
				ЭтотОбъект[Реквизит.Имя].Добавить(Значение.id, Значение.value);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сортировка элементов.
	ЭтотОбъект[Реквизит.Имя].СортироватьПоПредставлению();
	
	ГруппаОтборов = Элементы["ГруппаОтбора_" + Идентификатор];
	
	НовыйЭлемент = Элементы.Добавить("Отбор_" + Идентификатор, Тип("ТаблицаФормы"), ГруппаОтборов);
	НовыйЭлемент.Отображение = ОтображениеТаблицы.Список;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	Если ЗначенияХарактеристик.Количество() <= 5 Тогда
		НовыйЭлемент.Высота = ЗначенияХарактеристик.Количество() + 1;
	Иначе
		НовыйЭлемент.Высота = 6;
		НовыйЭлемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	НовыйЭлемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
	НовыйЭлемент.КоманднаяПанель.Видимость = Ложь;
	НовыйЭлемент.ЧередованиеЦветовСтрок = Истина;
	НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
	НовыйЭлемент.ИзменятьПорядокСтрок = Ложь;
	НовыйЭлемент.ИзменятьСоставСтрок = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
	
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Пометка", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКолонки.ШиринаЭлемента = 1;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Пометка";
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Значение", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.АвтоМаксимальнаяВысота = Истина;
	ЭлементКолонки.АвтоВысотаЯчейки = Истина;
	ЭлементКолонки.ТолькоПросмотр = Истина;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Значение";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КатегорииПоНаименованию(Текст)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СтрокаПоиска", Текст);
	ПараметрыКоманды.Вставить("ТолькоЭлементы", Истина);
	
	Результат = Неопределено;
	Отказ = Ложь;
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПоискКатегорий", ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ ИЛИ Результат = Неопределено ИЛИ Результат.КодСостояния <> 200 ИЛИ Результат.Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый СписокЗначений;
	СписокКатегорий = "";
	Для Каждого Значение Из Результат.Данные Цикл
		СписокКатегорий = СписокКатегорий + ?(ПустаяСтрока(СписокКатегорий),"", ", ") + Формат(Значение.id, "ЧГ=");
	КонецЦикла;
	РезультатЦепочкиКатегорий = Неопределено;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИдентификаторыКатегории", "[" + СписокКатегорий + "]");
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьЦепочкуКатегорийДоКорневой", ПараметрыКоманды, РезультатЦепочкиКатегорий, Отказ);
	
	Если Отказ ИЛИ РезультатЦепочкиКатегорий = Неопределено ИЛИ РезультатЦепочкиКатегорий.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 0;
	Для каждого Значение Из Результат.Данные Цикл
		
		Идентификатор = Формат(Значение.id, "ЧГ=");
		Наименование = Значение.title;
		
		Длина = СтрДлина(Текст);
		Позиция = СтрНайти(НРег(Наименование), НРег(Текст));
		ЛеваяЧасть = Лев(Наименование, Позиция-1);
		СредняяЧасть = Сред(Наименование, Позиция, Длина);
		ПраваяЧасть = Сред(Наименование, Позиция + Длина);
		
		ПредставлениеЭлемента = Новый Массив;
		ПредставлениеЭлемента.Добавить(ЛеваяЧасть);
		ПредставлениеЭлемента.Добавить(Новый ФорматированнаяСтрока(СредняяЧасть, Новый Шрифт(,, Истина), WebЦвета.Зеленый));
		ПредставлениеЭлемента.Добавить(ПраваяЧасть);
		
		ТекстРодитель = "";
		МассивРодителей = РезультатЦепочкиКатегорий.Данные[Индекс];
		Для Каждого Родитель Из МассивРодителей Цикл
			Если Значение.id = Родитель.id Тогда
				Продолжить;
			КонецЕсли;
			ТекстРодитель = ТекстРодитель + " - " + Родитель.title;
		КонецЦикла;
		
		ПредставлениеРодителя = Новый Массив;
		Если ПустаяСтрока(ТекстРодитель) Тогда
			ПредставлениеРодителя.Добавить("");
		Иначе
			ПредставлениеРодителя.Добавить(" ");
			ПредставлениеРодителя.Добавить(ТекстРодитель);
		КонецЕсли;
		ПредставлениеРодителя = Новый ФорматированнаяСтрока(ПредставлениеРодителя,, ЦветаСтиля.ПоясняющийТекст);
		
		Представление = Новый ФорматированнаяСтрока(ПредставлениеЭлемента, ПредставлениеРодителя);
		
		ВозвращаемоеЗначение.Добавить(Идентификатор, Представление,, БиблиотекаКартинок.БизнесСеть);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ДобавитьВКорзинуПоИдентификатору(ПредложениеИдентификатор, Количество)
	
	Отказ = Ложь;
	
	РежимДобавления = Ложь;
	Если Количество = Неопределено Тогда
		РежимДобавления = Истина;
		Количество = 1;
	КонецЕсли;
	
	ПоискСтрок = Корзина.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПредложениеИдентификатор));
	Если ПоискСтрок.Количество() Тогда
		СтрокаКорзины = ПоискСтрок[0];
		СтрокаКорзины.Количество = ?(РежимДобавления, СтрокаКорзины.Количество + Количество, Количество);
		Если СтрокаКорзины.Количество <= 0 Тогда
			Корзина.Удалить(Корзина.Индекс(СтрокаКорзины));
		Иначе
			ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаКорзины);
		КонецЕсли;
	Иначе
		Предложение = ТорговыеПредложения.ПрочитатьТорговоеПредложение(ПредложениеИдентификатор,, Отказ);
		Если Отказ ИЛИ Предложение = Неопределено ИЛИ ТипЗнч(Предложение) <> Тип("Структура") Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка получения карточки торгового предложения в сервисе 1С:Бизнес-сеть.'");
		КонецЕсли;
		СтрокаКорзины = Корзина.Добавить();
		СтрокаКорзины.ЕдиницаИзмерения    = Предложение.unit;
		СтрокаКорзины.ЕдиницаИзмеренияКод = Предложение.basicUnit;
		СтрокаКорзины.ПредложениеИдентификатор = ПредложениеИдентификатор;
		СтрокаКорзины.Количество          = Количество;
		СтрокаКорзины.Наименование        = Предложение.name;
		СтрокаКорзины.Характеристика      = Предложение.feature;
		СтрокаКорзины.Пометка             = Истина;
		СтрокаКорзины.ПоставщикНаименование = Предложение.vendor.title;
		СтрокаКорзины.ПоставщикИНН        = Предложение.vendor.inn;
		ПоставщикКПП                      = Предложение.vendor.kpp;
		Если ПоставщикКПП = "0" Тогда
			ПоставщикКПП = "";
		КонецЕсли;
		СтрокаКорзины.ПоставщикКПП = ПоставщикКПП;
		СтрокаКорзины.ПоставщикИдентификатор = Предложение.vendor.inn + ?(ПустаяСтрока(ПоставщикКПП), "",
			"_" + ПоставщикКПП);
		СтрокаКорзины.СтавкаНДС = ТорговыеПредложенияПереопределяемый.ЗначениеПеречисленияПоНаименованию(
			"СтавкаНДС", Предложение.nds);
		СтрокаКорзины.Цена                = Предложение.price / 100;
		СтрокаКорзины.ЦенаВключаетНДС     = Предложение.campaign.saleWithNds;
		СтрокаКорзины.СрокПоставки        = Предложение.deliveryTime;
		ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Гиперссылка списка формы Добавить.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Добавить'");
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Добавить'"));
	
	// Надпись "в наличии".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокПоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'в наличии'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитСнятьФлагКомандыЗапрашиватьКоличество()
	
	Элементы.КомандаЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаПанельОтборов.Видимость = Элементы.КомандаПоказыватьОтборы.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРегистрациюОрганизаций()
	
	ОрганизацияЗарегистрирована = БизнесСеть.ОрганизацияПодключена();
	ТребуетсяРегистрацияОрганизации = Не ОрганизацияЗарегистрирована;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыВыбораКонтрагентов()
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяФормыВыбора = "Справочник." + ИмяСправочника + ".ФормаВыбора";
	Возврат ИмяФормыВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВыборКонтрагентаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоставщикНаименование = Строка(Результат);
	Поставщик = Результат;
	ЗаполнитьТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацииОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Обработка.БизнесСеть.Форма.ПодключениеУчастников",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборИОбновитьСписок()
	
	// Проверка открытия из другой формы.
	РазрешитьИзменениеПоставщика = ЭтотОбъект.ВладелецФормы = Неопределено;
	Если РазрешитьИзменениеПоставщика Тогда
		Поставщик = Неопределено;
		ПоставщикНаименование = "";
		ПоставщикИНН = "";
		ПоставщикКПП = "";
		ПоставщикИдентификатор = "";
	КонецЕсли;
	
	ЦенаОт = 0;
	ЦенаДо = 0;
	СтрокаПоиска = "";
	
	ТекущаяКатегория = Неопределено;
	ОтборыПоКатегорииАктуальны = Ложь;
	ПараметрыОбработчиков = Новый Структура("ТекущаяКатегория, ОчиститьСтруктуру", Неопределено, Ложь);
	ЗаполнитьНавигациюКатегорийИЗагрузитьТорговыеПредложения();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти

