#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// 4D:ERP для Беларуси, Юлия, 05.07.2017 14:31:20 
	// Печатные формы анализ, №15283
	// { 
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т1_Локализация", НСтр("ru='Приказ о приеме'"),        
		ПолучитьТабличныйДокументПриказаТ1(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т1_Локализация"), МассивОбъектов, ОбъектыПечати), , 
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т1_Локализация");   
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8_Локализация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т8_Локализация", НСтр("ru='Приказ об увольнении'"),
		ПолучитьТабличныйДокументПриказаТ8(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т8_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т8_Локализация");
	КонецЕсли;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т5_Локализация", НСтр("ru='Приказ о переводе'"),
		ПолучитьТабличныйДокументПриказаТ5(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т5_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т5_Локализация");
	КонецЕсли;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т6_Локализация", НСтр("ru='Приказ о предоставлении отпуска'"),
		ТабличныйДокументПриказаТ6(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6_1_Локализация") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т6_1_Локализация", НСтр("ru='Приказ о предоставлении отпуска'"),
		ТабличныйДокументПриказаТ61(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6_1_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_Т6_1_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаключениеНовогоТрудовогоДоговора_Локализация") Тогда   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ЗаключениеНовогоТрудовогоДоговора_Локализация", НСтр("ru='Приказ о заключение нового трудового договора'"),
		ПолучитьТабличныйДокументПриказаНовыйДоговор(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ЗаключениеНовогоТрудовогоДоговора_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ЗаключениеНовогоТрудовогоДоговора_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПереводРаботникаНаКонтракт_Локализация") Тогда   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ПереводРаботникаНаКонтракт_Локализация", НСтр("ru='Приказ о переводе работника на контрактную форму найма'"),
		ПолучитьТабличныйДокументПриказаОПереводеРаботникаНаКонтракт(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ПереводРаботникаНаКонтракт_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ПереводРаботникаНаКонтракт_Локализация");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПродлениеТрудовогоДоговора_Локализация") Тогда   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ПродлениеТрудовогоДоговора_Локализация", НСтр("ru='Приказ о продлении нового трудового договора'"),
		ПолучитьТабличныйДокументПриказаОПродленииТрудовогоДоговора(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ПродлениеТрудовогоДоговора_Локализация"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ПродлениеТрудовогоДоговора_Локализация");
	КонецЕсли;
	// }
	// 4D
	
	
	// 4D:ERP для Беларуси, Юлия, 05.02.2018 9:35:53 
	// Доработать документ "Отпуск по уходу за ребенком" и печатную форму, доступную в документе, № 17753
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОПредоставленииОтпускаБезОплаты") Тогда   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ОПредоставленииОтпускаБезОплаты", НСтр("ru='Приказ о предоставлении кратковременного отпуска без сохранения заработной платы'"),
		ПолучитьТабличныйДокументПриказаОПредоставленииОтпускаБезОплаты(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ОПредоставленииОтпускаБезОплаты"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ОПредоставленииОтпускаБезОплаты");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОПредоставленииОтпускаПоУходуЗаРебенком") Тогда   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ОПредоставленииОтпускаПоУходуЗаРебенком", НСтр("ru='Приказ о предоставлении отпуска'"),
		ПолучитьТабличныйДокументПриказаОПредоставленииОтпускаПоУходуЗаРебенком(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ОПредоставленииОтпускаПоУходуЗаРебенком"), МассивОбъектов, ОбъектыПечати), ,
		"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ОПредоставленииОтпускаПоУходуЗаРебенком");
	КонецЕсли;
	// }
	// 4D
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорМикропредприятий") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ТрудовойДоговорМикропредприятий", НСтр("ru='Трудовой договор (микропредприятий)'"),
			ТабличныйДокументТрудовойДоговорМикропредприятий(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ТрудовойДоговорМикропредприятий"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_ТрудовойДоговорМикропредприятий");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице", НСтр("ru='Приказ о предоставлении отпуска'"),
			ТабличныйДокументСправкаОСреднемЗаработкеДляПособияПоБезработице(УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказов.ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице"), МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказов.ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице");
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыФункцииПечатиКадровыхДанных

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ1(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПриеме";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ1(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 
	
// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ5(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПереводе";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ5(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 
	
// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении".
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПолучитьТабличныйДокументПриказаТ8(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОбУвольнении";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаТ8(МассивОбъектов);
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции 

Процедура ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати)
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ1(МассивОбъектов)
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ1(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ1();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		// 4D:ERP для Беларуси, Юлия, 12.10.2017 15:20:12 
		// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
		// Изменить список печатных форм, доступных в док-те "Прием на работу списком", № 15984
		// {
		КонтактнаяИнформация = Выборка.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.Должность.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		
		РезультатСклонения1 = Выборка.Работник;
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.Работник, 2, РезультатСклонения1, Параметры.Пол) Тогда
			Параметры.Работник1	= РезультатСклонения1;
		КонецЕсли;
		
		Структура1 = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.Подразделение.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		
		Параметры.Подразделение = ВыделитьДС(Структура1.ВинительныйПадеж);
		Параметры.Работник1 = ВыделитьФамилию(РезультатСклонения1);
		Параметры.Должность = Нрег(Структура.ВинительныйПадеж);
		Параметры.Работник = ВыделитьСлово(РезультатСклонения);
		Параметры.ДатаЗавершенияТрудовогоДоговора = Формат(Параметры.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=Д");
		Параметры.НомерДок = Параметры.Ссылка.Номер;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.Номер,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.СрочныйДоговор
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу";
		Выборка2 = Запрос.Выполнить().Выбрать();
		
		Пока Выборка2.Следующий() Цикл
			Если Выборка2.ФизическоеЛицо.Наименование = Выборка.Работник И Выборка2.Номер = Параметры.Ссылка.Номер Тогда
				
				Если Выборка2.СрочныйДоговор = Истина Тогда
					Если ЗначениеЗаполнено(Параметры.ДатаЗавершенияТрудовогоДоговора) Тогда
						Параметры.Текст4 = "по " + Параметры.ДатаЗавершенияТрудовогоДоговора + " по срочному договору ";
						Если ЗначениеЗаполнено(Параметры.ДлительностьИспытательногоСрока) Тогда
							Параметры.Текст2 = "с предварительным испытанием на срок " + Параметры.ДлительностьИспытательногоСрока;
							Если Параметры.ДлительностьИспытательногоСрока = 1 Тогда
								Параметры.Текст3 = "  месяц ";
							ИначеЕсли Параметры.ДлительностьИспытательногоСрока = 2 ИЛИ Параметры.ДлительностьИспытательногоСрока = 3 ИЛИ Параметры.ДлительностьИспытательногоСрока = 3 Тогда 
								Параметры.Текст3 = " месяца ";
							Иначе
								Параметры.Текст3 = " месяцев ";
							КонецЕсли;
						КонецЕсли;
					Иначе 
						Параметры.Текст4 = " по срочному трудовому договору ";
						Если ЗначениеЗаполнено(Параметры.ДлительностьИспытательногоСрока) Тогда
							Параметры.Текст2 = "с предварительным испытанием на срок " + Параметры.ДлительностьИспытательногоСрока;
							Если Параметры.ДлительностьИспытательногоСрока = 1 Тогда
								Параметры.Текст3 = "  месяц ";
							ИначеЕсли Параметры.ДлительностьИспытательногоСрока = 2 ИЛИ Параметры.ДлительностьИспытательногоСрока = 3 ИЛИ Параметры.ДлительностьИспытательногоСрока = 3 Тогда 
								Параметры.Текст3 = " месяца ";
							Иначе
								Параметры.Текст3 = " месяцев ";	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
				Иначе
					Параметры.Текст1 = "с заключением трудового договора на неопределенный срок";
					Если ЗначениеЗаполнено(Параметры.ДлительностьИспытательногоСрока) Тогда
						Параметры.Текст2 = "с предварительным испытанием на срок " + Параметры.ДлительностьИспытательногоСрока;
						Если Параметры.ДлительностьИспытательногоСрока = 1 Тогда
							Параметры.Текст3 = " месяц ";
						Иначе 
							Параметры.Текст3 = " месяца ";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ТрудовойДоговорДата = Формат(Выборка2.ТрудовойДоговорДата, "ДЛФ=Д");
				Если ЗначениеЗаполнено(ТрудовойДоговорДата) Тогда
					Параметры.Основание = "2. Трудовой договор от " + Параметры.ТрудовойДоговорДата;
				КонецЕсли;
				Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(Выборка2.Руководитель);
			КонецЕсли;
		КонецЦикла;
		// }
		// 4D
		
		Параметры.ДатаПриема = Формат(Параметры.ДатаПриема, "ДЛФ=Д");
		Параметры.НаименованиеОрганизации = Выборка.Организация.НаименованиеСокращенное;
		Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=Д");
		
		Параметры.РаботникРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(Выборка.Работник);
		Если  КИнформация <> Неопределено Тогда 	
			Параметры.ГородЮрАдресОрганизации    = ?( ЗначениеЗаполнено(КИнформация.Город), КИнформация.Город, КИнформация.Регион );
		КонецЕсли;  
		// }
		// 4D
		ЦелаяЧасть = Цел(Выборка.ТарифнаяСтавка);
		Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = ЦелаяЧасть;
		ДробнаяЧасть = Выборка.ТарифнаяСтавка - ЦелаяЧасть;
		Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ5(МассивОбъектов)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ5(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ5();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		// 4D:ERP для Беларуси, Юлия, 05.09.2017 12:29:18 
		// Приказ о переводе (перемещении) на другую работу, № 15941
		// Редактировать формы кадровых приказов, № 16287
		// {
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= ВыделитьСлово(РезультатСклонения);
		КонецЕсли;
		
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.Должность.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		Параметры.Должность = Нрег(Структура.ВинительныйПадеж);
		
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.Подразделение.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		Параметры.Подразделение = Структура.РодительныйПадеж;
		
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.НоваяДолжность.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		Параметры.НоваяДолжность = Нрег(Структура.ТворительныйПадеж);
		
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Выборка.НовоеПодразделение.Наименование, Ложь, Перечисления.ПолФизическогоЛица.Женский, Ложь);
		Параметры.НовоеПодразделение = Структура.РодительныйПадеж;

		Параметры.НомерДок = Параметры.Ссылка.Номер;
		Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=Д");
		Параметры.ДатаНачала = Формат(Параметры.ДатаНачала, "ДЛФ=Д");
		Параметры.ДатаОкончания = Формат(Параметры.ДатаОкончания, "ДЛФ=Д");
		
		Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(Выборка.Работник);
		Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(Выборка.Руководитель.Наименование);
		
		Параметры.НаименованиеОрганизации = Параметры.Ссылка.Организация.НаименованиеСокращенное;

		Если ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
			Параметры.Текст = "временном ";
		КонецЕсли;
		
		КонтактнаяИнформация = Выборка.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Если  КИнформация <> Неопределено Тогда 	
			Параметры.ГородЮрАдресОрганизации = КИнформация.Город;
		КонецЕсли;
		// }
		// 4D
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
			И ЗначениеЗаполнено(Параметры.НовоеПодразделение) Тогда
			
			Параметры.НовоеПодразделение = Параметры.НовоеПодразделение.ПолноеНаименование();
			
		КонецЕсли;
		
		ЦелаяЧасть = Цел(Выборка.ТарифнаяСтавка);
		Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = ЦелаяЧасть;
		ДробнаяЧасть = Выборка.ТарифнаяСтавка - ЦелаяЧасть;
		Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
		
		Если ЗначениеЗаполнено(Параметры.НовыйРазрядКатегория) Тогда
			Параметры.НовыйРазрядКатегория = ", " + Параметры.НовыйРазрядКатегория;
		КонецЕсли; 
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	

Функция ПолучитьДанныеДляПечатиКадровогоПриказаТ8(МассивОбъектов)
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ8(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Параметры = ПараметрыПриказаТ8();	
		
		// 4D:ERP для Беларуси, Юлия, 16.10.2017 14:37:49 
		// Печатная форма "Приказ об увольнении" документа "Увольнение", № 16038
		// {
		Параметры.Ссылка = Выборка.Ссылка;
		Параметры.ДатаДок 							= Формат(Выборка.ДатаДок, "ДЛФ=Д");
		Параметры.НомерДок 							= Выборка.Ссылка.Номер;		
		Параметры.НазваниеОрганизации 				= Выборка.НазваниеОрганизации;
		Параметры.НаименованиеСокращенное 			= Выборка.Организация.НаименованиеСокращенное;
		Параметры.РаботникРасшифровкаПодписи		= РасшифровкаПодписи(Выборка.Работник);
		Параметры.ДолжностьРуководителя 			= Выборка.ДолжностьРуководителя;
		Параметры.РуководительРасшифровкаПодписи 	= РасшифровкаПодписи(Выборка.Руководитель.Наименование);
		Параметры.Основание 						= Выборка.ОснованиеУвольнения;
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.Должность.Наименование, 2, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Должность	= Нрег(РезультатСклонения)
		КонецЕсли;
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.Подразделение.Наименование, 2, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Подразделение = РезультатСклонения
		КонецЕсли;
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник= ВыделитьСлово(РезультатСклонения)
		КонецЕсли;
		
		Параметры.ДатаУвольнения = Формат(Выборка.ДатаУвольнения, "ДЛФ=D");
		
		Параметры.ОснованиеУвольнения = Выборка.СтатьяТКРФ;
		Параметры.ТекстОснования = Нрег(Выборка.ТекстОснования);
		
		РезультатЗапроса = ПолучитьДанные(МассивОбъектов);		
		Выборка2 = РезультатЗапроса.Выбрать();
		
		ПризнакКомпенсацииОсновногоОтпуска = ""+ Выборка.Ссылка.ПризнакКомпенсацииУдержанияОтпуска + "";
		КоличествоДнейДопОтпуска = 0;
		КоличествоДнейДопОтпуска2 = 0;
		ПризнакКомпенсацииДополнительногоОтпуска = "";
		Пока Выборка2.Следующий() Цикл
			
			Если Выборка2.Номер = Выборка.Ссылка.Номер Тогда
				
				ПризнакКомпенсацииДополнительногоОтпуска = ""+ Выборка2.ПризнакКомпенсацииУдержания + "";
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.Работник, 3, РезультатСклонения, Параметры.Пол) Тогда
					Работник = ВыделитьФамилию(РезультатСклонения);
				КонецЕсли;
				
				Если ПризнакКомпенсацииОсновногоОтпуска = "Не использовать" Тогда 
					Если Выборка2.ПризнакКомпенсацииУдержания = Неопределено Тогда
						Параметры.Текст = " Трудовой отпуск использован по" + Параметры.ДатаУвольнения + ".";
					ИначеЕсли ПризнакКомпенсацииДополнительногоОтпуска = "Компенсировать неиспользованный отпуск" Тогда
						КоличествоДнейДопОтпуска = КоличествоДнейДопОтпуска + Выборка2.ДнейКомпенсацииУдержания;
						Параметры.Текст2 = " Выплатить " + Работник + " компенсацию за неиспользованный отпуск в количестве " 
											+ КоличествоДнейДопОтпуска + " дней за период с " + Формат(Выборка2.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") + " по " 
											+ Формат(Выборка2.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") + ".";
					ИначеЕсли ПризнакКомпенсацииДополнительногоОтпуска = "Удержать за использованный авансом отпуск" Тогда
						КоличествоДнейДопОтпуска2 = КоличествоДнейДопОтпуска2 + Выборка2.ДнейКомпенсацииУдержания;
						Параметры.Текст3 = " Удержать из заработной платы денежную сумму за " + КоличествоДнейДопОтпуска2 + " календарных дней трудового отпуска, предоставленного авансом в соответствии со ст. 107 ТК РБ.";
					КонецЕсли;
				КонецЕсли;
				
				Если ПризнакКомпенсацииОсновногоОтпуска = "Компенсировать неиспользованный отпуск" Тогда
					
					Если ПризнакКомпенсацииДополнительногоОтпуска = "Компенсировать неиспользованный отпуск" Тогда
						КоличествоДнейДопОтпуска = КоличествоДнейДопОтпуска + Выборка2.ДнейКомпенсацииУдержания;
						КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска + КоличествоДнейДопОтпуска;
						Параметры.Текст2 = " Выплатить " + Работник + " компенсацию за неиспользованный отпуск в количестве " 
											+ КоличествоДней + " дней за период с " + Формат(Выборка.Ссылка.РабочийГодС, "ДЛФ=D") + " по " 
											+ Формат(Выборка.Ссылка.РабочийГодПо, "ДЛФ=D") + ".";
					ИначеЕсли ПризнакКомпенсацииДополнительногоОтпуска = "Удержать за использованный авансом отпуск" Тогда
						
						Если НЕ ЗначениеЗаполнено(Параметры.Текст2) Тогда
							КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска;
							Параметры.Текст2 = " Выплатить " + Работник + " компенсацию за неиспользованный отпуск в количестве " 
												+ КоличествоДней + " дней за период с " + Формат(Выборка.Ссылка.РабочийГодС, "ДЛФ=D") + " по " 
												+ Формат(Выборка.Ссылка.РабочийГодПо, "ДЛФ=D") + ".";
						КонецЕсли;
						
						КоличествоДнейДопОтпуска2 = КоличествоДнейДопОтпуска2 + Выборка2.ДнейКомпенсацииУдержания;
						Параметры.Текст3 = " Удержать из заработной платы денежную сумму за " + КоличествоДнейДопОтпуска2 + " календарных дней трудового отпуска, предоставленного авансом в соответствии со ст. 107 ТК РБ.";
					КонецЕсли;
				КонецЕсли;
				
				
				Если ПризнакКомпенсацииОсновногоОтпуска = "Удержать за использованный авансом отпуск" Тогда
					Если ПризнакКомпенсацииДополнительногоОтпуска = "Удержать за использованный авансом отпуск" Тогда
						КоличествоДнейДопОтпуска = КоличествоДнейДопОтпуска + Выборка2.ДнейКомпенсацииУдержания;
						КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска + КоличествоДнейДопОтпуска;
						Параметры.Текст3 = " Удержать из заработной платы денежную сумму за " + КоличествоДней + " календарных дней трудового отпуска, предоставленного авансом в соответствии со ст. 107 ТК РБ.";
					ИначеЕсли ПризнакКомпенсацииДополнительногоОтпуска = "Компенсировать неиспользованный отпуск" Тогда
						
						Если НЕ ЗначениеЗаполнено(Параметры.Текст3) Тогда
							КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска;
							Параметры.Текст3 = " Удержать из заработной платы денежную сумму за "+ КоличествоДней + " календарных дней трудового отпуска, предоставленного авансом в соответствии со ст. 107 ТК РБ.";
						КонецЕсли;
						
						КоличествоДнейДопОтпуска2 = КоличествоДнейДопОтпуска2 + Выборка2.ДнейКомпенсацииУдержания;
						Параметры.Текст2 = " Выплатить " + Работник + " компенсацию за неиспользованный отпуск в количестве " 
											+ КоличествоДнейДопОтпуска2 + " дней за период с " + Формат(Выборка2.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") + " по " 
											+ Формат(Выборка2.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D")  + ".";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПризнакКомпенсацииОсновногоОтпуска = "Компенсировать неиспользованный отпуск"
			И НЕ ЗначениеЗаполнено(Параметры.Текст3) Тогда
			КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска;
			Параметры.Текст3 = " Выплатить " + Работник + " компенсацию за неиспользованный отпуск в количестве " 
			+ КоличествоДней + " дней за период с " + Формат(Выборка.Ссылка.РабочийГодС, "ДЛФ=D") + " по " 
			+ Формат(Выборка.Ссылка.РабочийГодПо, "ДЛФ=D") + ".";
		КонецЕсли;
		
		Если ПризнакКомпенсацииОсновногоОтпуска = "Удержать за использованный авансом отпуск"
			И НЕ ЗначениеЗаполнено(Параметры.Текст2) Тогда
			КоличествоДней = Выборка.Ссылка.ДнейКомпенсацииУдержанияОтпуска;
			Параметры.Текст3 = " Удержать из заработной платы денежную сумму за " + КоличествоДней + " календарных дней трудового отпуска, предоставленного авансом в соответствии со ст. 107 ТК РБ.";
		КонецЕсли;
		
		
		Если ПризнакКомпенсацииОсновногоОтпуска = "Не использовать" Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.Текст2) И НЕ ЗначениеЗаполнено(Параметры.Текст3) Тогда
				Параметры.Текст = " Трудовой отпуск использован по " + Параметры.ДатаУвольнения + ".";
			КонецЕсли;
		КонецЕсли;
		
		КонтактнаяИнформация = Выборка.Организация.КонтактнаяИнформация;
		КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
		Если  КИнформация <> Неопределено Тогда 	
			Параметры.ГородЮрАдресОрганизации = КИнформация.Город;
		КонецЕсли;
		// }
		// 4D
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции	

Функция ПараметрыПриказаТ1()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаПриема");
	Параметры.Вставить("ДатаЗавершенияТрудовогоДоговора");
	Параметры.Вставить("УсловияПриема");
	Параметры.Вставить("ОкладТарифнаяСтавкаЦелаяЧасть");
	Параметры.Вставить("ОкладТарифнаяСтавкаДробнаяЧасть");
	Параметры.Вставить("ВалютаТарифнойСтавки", "руб.");
	Параметры.Вставить("КопейкиТарифнойСтавки", "коп.");
	Параметры.Вставить("Надбавка", 0);
	Параметры.Вставить("ДлительностьИспытательногоСрока", "");

	// 4D:ERP для Беларуси, Яна, 02.06.2017 16:14:25 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
	// {
	Параметры.Вставить("НаименованиеОрганизации", "");
	Параметры.Вставить("РаботникРасшифровкаПодписи", "");
	Параметры.Вставить("ГородЮрАдресОрганизации", "");
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 14.06.2017 11:22:45 
	// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928 
	// {
	Параметры.Вставить("Работник1", "");
	Параметры.Вставить("Текст1", "");
	Параметры.Вставить("Текст2", "");
	Параметры.Вставить("Текст3", "");
	Параметры.Вставить("Текст4", "");
	Параметры.Вставить("Подразделение", "");
	Параметры.Вставить("Основание", "");
	// }
	// 4D
	
	Возврат Параметры;
	
КонецФункции	

Функция ПараметрыПриказаТ5()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	Параметры.Вставить("ВидПеревода");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Должность");
	Параметры.Вставить("НовоеПодразделение");
	Параметры.Вставить("НоваяДолжность");
	Параметры.Вставить("НовыйРазрядКатегория");
	Параметры.Вставить("ОкладТарифнаяСтавкаЦелаяЧасть");
	Параметры.Вставить("ОкладТарифнаяСтавкаДробнаяЧасть");
	Параметры.Вставить("ВалютаТарифнойСтавки", "руб.");
	Параметры.Вставить("КопейкиТарифнойСтавки", "коп.");
	Параметры.Вставить("Надбавка", 0);
	Параметры.Вставить("ОснованиеПеревода");
	Параметры.Вставить("ПричинаПеревода");
	
	// 4D:ERP для Беларуси, Юлия, 05.09.2017 12:47:59 
	// Приказ о переводе (перемещении) на другую работу, № 15941
	// {
	Параметры.Вставить("РаботникРасшифровкаПодписи");
	Параметры.Вставить("РуководительРасшифровкаПодписи");
	Параметры.Вставить("НаименованиеОрганизации");
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 04.11.2017 11:28:59 
	// Ошибка при попытке сформировать печ. форму "Приказ о переводе", № 16497 
	// {
	Параметры.Вставить("Текст");
	Параметры.Вставить("ГородЮрАдресОрганизации");
	// }
	// 4D
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПриказаТ8()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ДатаУвольненияЧисло");
	Параметры.Вставить("ДатаУвольненияМесяцГод");
	Параметры.Вставить("СтатьяТКРФ", "");
	Параметры.Вставить("ОснованиеУвольнения", "");
	
	// 4D:ERP для Беларуси, Юлия, 16.10.2017 10:37:49 
	// Печатная форма "Приказ об увольнении" документа "Увольнение", № 16038
	// {
	Параметры.Вставить("ДатаУвольнения", "");
	Параметры.Вставить("НаименованиеСокращенное", "");
	Параметры.Вставить("РаботникРасшифровкаПодписи", "");
	Параметры.Вставить("ДолжностьРуководителя", "");
	Параметры.Вставить("РуководительРасшифровкаПодписи", "");
	Параметры.Вставить("Текст", "");
	Параметры.Вставить("Текст2", "");
	Параметры.Вставить("Текст3", "");
	Параметры.Вставить("ТекстОснования", "");
	Параметры.Вставить("Основание", "");
	Параметры.Вставить("ГородЮрАдресОрганизации", "");
	// }
	// 4D
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Отпуск

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о предоставлении отпуска.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументПриказаТ6(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	МассивДанныхЗаполнения = ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов);
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			// 4D:ERP для Беларуси, Юлия, 15.01.2018 15:09:35 
			// Редактировать печатную форму "Приказ о предоставлении отпуска", № 17079
			// {
			ВыборкаДопОтпуск = ПолучитьДанныеКадровогоПриказаТ6(МассивОбъектов).Выбрать();
			КоличествоВыборкаДопОтпуск = ВыборкаДопОтпуск.Количество();
			
				МакетШапка = Макет.ПолучитьОбласть("Шапка");
				МакетШапка.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетШапка);
				
				МакетРаботник = Макет.ПолучитьОбласть("Работник");
				МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
				
				Если ПараметрыМакета.Ссылка.ПредоставитьДополнительныйОтпуск Тогда
					МакетРаботник.Параметры.ВТомЧисле = ", в том числе:";
				КонецЕсли;
				МакетРаботник.Параметры.КалендарныеДни = СклонениеКаледнадрныеДни(ПараметрыМакета.Продолжительность);
				
				ДокументРезультат.Вывести(МакетРаботник);
				
				
				Если ПараметрыМакета.Ссылка.ПредоставитьДополнительныйОтпуск Тогда
					
					Если ПараметрыМакета.Ссылка.ПредоставитьОсновнойОтпуск и ПараметрыМакета.Ссылка.КоличествоДнейОсновногоОтпуска <> 0 Тогда
						
						МакетОснОтпуск = Макет.ПолучитьОбласть("Основной");
						МакетОснОтпуск.Параметры.Заполнить(ПараметрыМакета);
						МакетОснОтпуск.Параметры.КоличествоДней = ПараметрыМакета.Ссылка.КоличествоДнейОсновногоОтпуска;
						МакетОснОтпуск.Параметры.КалендарныеДни = СклонениеКаледнадрныеДни(ПараметрыМакета.Ссылка.КоличествоДнейОсновногоОтпуска);
						ДокументРезультат.Вывести(МакетОснОтпуск);
					КонецЕсли;
					
					МакетДопОтпускЗаголовок = Макет.ПолучитьОбласть("ДопОтпускЗаголовок");
					МакетДопОтпускЗаголовок.Параметры.Заполнить(ПараметрыМакета);
					
					ДокументРезультат.Вывести(МакетДопОтпускЗаголовок);
					
					Пока ВыборкаДопОтпуск.Следующий() Цикл
						Если ВыборкаДопОтпуск.Ссылка = ПараметрыМакета.Ссылка Тогда
							ПериодЗаКоторыйПредоставляетсяДопОтпуск = Ложь;
							Если ПараметрыМакета.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск <> ВыборкаДопОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 
								И ПараметрыМакета.КонецПериодаЗаКоторыйПредоставляетсяОтпуск <>  ВыборкаДопОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
								
								ПериодЗаКоторыйПредоставляетсяДопОтпуск = Истина;
								Прервать;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
					ВыборкаДопОтпуск.Сбросить();
					
					Количество = 1;
					Пока ВыборкаДопОтпуск.Следующий() Цикл
						Если ВыборкаДопОтпуск.Ссылка = ПараметрыМакета.Ссылка Тогда
							МакетДопОтпуск = Макет.ПолучитьОбласть("ДопОтпуска");
							МакетДопОтпуск.Параметры.Заполнить(ПараметрыМакета);
							МакетДопОтпуск.Параметры.ВидДопОтпуска = ВыборкаДопОтпуск.ВидОтпуска.Наименование;
							МакетДопОтпуск.Параметры.КоличествоДнейДопОтпуска = ВыборкаДопОтпуск.КоличествоДней;
							МакетДопОтпуск.Параметры.КалендарныеДни = СклонениеКаледнадрныеДни(ВыборкаДопОтпуск.КоличествоДней);
							
							Если ПериодЗаКоторыйПредоставляетсяДопОтпуск Тогда
								МакетДопОтпуск.Параметры.ПериодДопОтпуска = " за период с " + Формат(ВыборкаДопОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") +
								" по " + Формат(ВыборкаДопОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D");
							КонецЕсли;
							
							Если Количество = КоличествоВыборкаДопОтпуск Тогда
								
								МакетДопОтпуск.Параметры.ЗнакПрепинания = ".";
								
							Иначе
								
								МакетДопОтпуск.Параметры.ЗнакПрепинания = ";";
								
							КонецЕсли;
							
							
							ДокументРезультат.Вывести(МакетДопОтпуск);
							Количество = Количество + 1;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПараметрыМакета.Ссылка.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
					
					МакетКомпенсация = Макет.ПолучитьОбласть("Компенсация");
					МакетКомпенсация.Параметры.Заполнить(ПараметрыМакета);
					МакетКомпенсация.Параметры.КоличествоДнейКомпенсации = ПараметрыМакета.Ссылка.КоличествоДнейКомпенсацииОсновногоОтпуска;
					МакетКомпенсация.Параметры.ДатаНачалаКомпенсации = Формат(ПараметрыМакета.Ссылка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D");
					МакетКомпенсация.Параметры.ДатаОкончанияКомпенсации = Формат(ПараметрыМакета.Ссылка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D");
					МакетКомпенсация.Параметры.КалендарныеДни = СклонениеКаледнадрныеДни(ПараметрыМакета.Ссылка.КоличествоДнейКомпенсацииОсновногоОтпуска);
					ДокументРезультат.Вывести(МакетКомпенсация);
					
				КонецЕсли; 
				
				МакетОснование = Макет.ПолучитьОбласть("Основание");
				МакетОснование.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетОснование);
				
				МакетПодвал = Макет.ПолучитьОбласть("Подвал");
				МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетПодвал);
			// }
			// 4D
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов)
	
	МассивПараметров = Новый Массив;
	НомерДополнительногоОтпуска = 1;
	
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	ВыборкаПоСсылкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровПриказаТ6();
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДатаНачалаВсего = '00010101';
			ДатаОкончанияВсего = '00010101';
			ШапкаЗаполнена = Ложь;
			ПродолжительностьВсего = 0;
			ОрганизацияДокумента = Неопределено;
			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				// 4D:ERP для Беларуси, Юлия, 04.01.2018 16:10:22 
				// Редактировать печатную форму "Приказ о предоставлении отпуска", № 17079
				// {
				Параметры.НаименованиеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеСокращенное;
				КонтактнаяИнформация = ВыборкаПоВидуОтпуска.Организация.КонтактнаяИнформация;
				КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				
				Если КИнформация <> Неопределено Тогда 	
					Параметры.ГородЮрАдресОрганизации    = ?( ЗначениеЗаполнено(КИнформация.Город), КИнформация.Город, КИнформация.Регион );
				КонецЕсли;
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 3, РезультатСклонения, Параметры.Пол) Тогда
					Параметры.Работник = ВыделитьСлово(РезультатСклонения);
				КонецЕсли;
				
				Параметры.Должность = Нрег(СклонениеДолжностей(Строка(ВыборкаПоВидуОтпуска.Должность)));
				Параметры.Подразделение = СклонениеПодразделений(Строка(ВыборкаПоВидуОтпуска.Подразделение));
				
				Параметры.ДолжностьРуководителя = ВыборкаПоВидуОтпуска.ДолжностьРуководителя.Наименование;
				Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Руководитель.Наименование);
				Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Сотрудник.Наименование);
				
				ВыборкаДопОтпуск = ПолучитьДанныеКадровогоПриказаТ6(МассивОбъектов).Выбрать();
				
				ДатаНачалаДопОтпуска = '39991231';
				ДатаОкончанияДопОтпуска = '00010101';
				КоличесвтоДопОтпусков = 0;
				ПродолжительностьДопОтпуска = 0;
				
				Пока ВыборкаДопОтпуск.Следующий() Цикл
					
					Если ВыборкаДопОтпуск.Ссылка = ВыборкаПоВидуОтпуска.Ссылка Тогда
						ПериодЗаКоторыйПредоставляетсяДопОтпуск = Ложь;
						Если ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск <> ВыборкаДопОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 
							И ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск <> ВыборкаДопОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
							
							ПериодЗаКоторыйПредоставляетсяДопОтпуск = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				ВыборкаДопОтпуск.Сбросить();
				
				Пока ВыборкаДопОтпуск.Следующий() Цикл
					Если ВыборкаДопОтпуск.Ссылка = ВыборкаПоВидуОтпуска.Ссылка Тогда
						КоличесвтоДопОтпусков = КоличесвтоДопОтпусков + 1;
						ПродолжительностьДопОтпуска = ПродолжительностьДопОтпуска + ВыборкаДопОтпуск.КоличествоДней;
						
						Если ВыборкаДопОтпуск.ДатаНачала < ДатаНачалаДопОтпуска Тогда
							ДатаНачалаДопОтпуска = ВыборкаДопОтпуск.ДатаНачала;
						КонецЕсли;
						
						Если ВыборкаДопОтпуск.ДатаОкончания > ДатаОкончанияДопОтпуска Тогда
							ДатаОкончанияДопОтпуска = ВыборкаДопОтпуск.ДатаОкончания;
						КонецЕсли;
						
						Если НЕ ПериодЗаКоторыйПредоставляетсяДопОтпуск Тогда
							
							Параметры.Период = " за период с " + Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") +
							" по " + Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") + " "; 
						Иначе
							Параметры.ПериодОснОтп = " за период с " + Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") +
							" по " + Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВыборкаПоВидуОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск Тогда
					
					Параметры.Период = " за период с " + Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") +
					" по " + Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=D") + ".";
					
				КонецЕсли; 
				
				Если КоличесвтоДопОтпусков= 2 Тогда
					Параметры.ДопОтпускЗаголовок = "- дополнительные отпуска:";
				Иначе
					Параметры.ДопОтпускЗаголовок = "- дополнительный отпуск:";
				КонецЕсли;
				
				Параметры.Сотрудник = ВыделитьФамилию(ВыборкаПоВидуОтпуска.Работник);
				
				Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДЛФ=Д");
				ШапкаЗаполнена = Истина;
				
				ПредставлениеДатыНачалаОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=D");
				Параметры.Год = СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, 4));
				
				Параметры.ДатаНачалаЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыНачалаОсновногоОтпуска,2)), "      ");
				Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, СтрДлина(ПредставлениеДатыНачалаОсновногоОтпуска)-2)), "                     г.");
				
				ПредставлениеДатыОкончанияОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				Параметры.ДатаОкончанияЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыОкончанияОсновногоОтпуска,2)), "      ");
				Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДатыОкончанияОсновногоОтпуска, СтрДлина(ПредставлениеДатыОкончанияОсновногоОтпуска)-2)), "                     г.");
				
				Параметры.Продолжительность = ПродолжительностьДопОтпуска + ВыборкаПоВидуОтпуска.Ссылка.КоличествоДнейОсновногоОтпуска;
				
				Если ДатаНачалаДопОтпуска < ВыборкаПоВидуОтпуска.Ссылка.ДатаНачалаОсновногоОтпуска Тогда
					Параметры.ДатаНачалаВсего = Формат(ДатаНачалаДопОтпуска, "ДЛФ=D");
				Иначе 
					Параметры.ДатаНачалаВсего = Формат(ВыборкаПоВидуОтпуска.Ссылка.ДатаНачалаОсновногоОтпуска, "ДЛФ=D");
				КонецЕсли;
				
				Если ДатаОкончанияДопОтпуска < ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончанияОсновногоОтпуска Тогда
					Параметры.ДатаОкончанияВсего = Формат(ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончанияОсновногоОтпуска, "ДЛФ=D");
				Иначе 
					Параметры.ДатаОкончанияВсего = Формат(ДатаОкончанияДопОтпуска, "ДЛФ=D");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала) Тогда
					ДатаНачалаВсего = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания) Тогда
					ДатаОкончанияВсего = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоВидуОтпуска.Сбросить();
			
			ДатаНачалаДоп = '00010101';
			ДатаОкончанияДоп = '00010101';
			СтрокаВидДопОтпуска = "";
			ПродолжительностьДоп = 0;
			
			Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
				Если НЕ ШапкаЗаполнена  Тогда
					
					КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
					
					РезультатСклонения = "";
					Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 3, РезультатСклонения, Параметры.Пол) Тогда
						Параметры.Работник	= РезультатСклонения
					КонецЕсли;
					
					Параметры.Продолжительность  = 0;
					Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
					ШапкаЗаполнена = Истина;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаНачалаДоп) ИЛИ ДатаНачалаДоп > ВыборкаПоВидуОтпуска.ДатаНачала Тогда
					ДатаНачалаДоп = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаОкончанияДоп) ИЛИ ДатаОкончанияДоп < ВыборкаПоВидуОтпуска.ДатаОкончания Тогда
					ДатаОкончанияДоп = ВыборкаПоВидуОтпуска.ДатаОкончания; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска) Тогда
					СтрокаВидДопОтпуска = СтрокаВидДопОтпуска + ", " + Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					ПродолжительностьДоп = ПродолжительностьДоп + ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				// Заполнение параметров приложения к приказу.
				ПараметрыДопОтпуска = Новый Структура;
				ПараметрыДопОтпуска.Вставить("НомерОтпуска", НомерДополнительногоОтпуска);
				ПараметрыДопОтпуска.Вставить("НазваниеОтпуска", Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска));
				ПараметрыДопОтпуска.Вставить("Продолжительность", ВыборкаПоВидуОтпуска.Продолжительность);
				// }
				// 4D
				
				ПараметрыДопОтпуска.Вставить("УказанПериодЗаКоторыйПредоставляетсяОтпуск", ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				Параметры.ДополнительныеОтпуска.Добавить(ПараметрыДопОтпуска);
				
				НомерДополнительногоОтпуска = НомерДополнительногоОтпуска + 1;
				
			КонецЦикла;
			
			ПредставлениеДатыНачалаДопОтпуска  = Формат(ДатаНачалаДоп, "ДЛФ=DD");
			Параметры.ДатаСДопЧисло = ?(ЗначениеЗаполнено(ДатаНачалаДоп), СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)), "      ");
			Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаДоп),  СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияДопОтпуска  = Формат(ДатаОкончанияДоп, "ДЛФ=DD");
			Параметры.ДатаПоДопЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияДоп), СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)), "      ");
			Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияДоп),  СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)), "                     г.");
			
			Если ЗначениеЗаполнено(ПродолжительностьДоп) Тогда
				Параметры.ПродолжительностьДоп = ПродолжительностьДоп;
				ПродолжительностьВсего = ПродолжительностьВсего + ПродолжительностьДоп;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПродолжительностьВсего) Тогда
				Параметры.ПродолжительностьВсего = ПродолжительностьВсего;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВидДопОтпуска) Тогда
				СтрокаВидДопОтпуска = Прав(СтрокаВидДопОтпуска,СтрДлина(СтрокаВидДопОтпуска) - 2);
				Параметры.ВидДопОтпуска = СтрокаВидДопОтпуска;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаНачалаВсего) ИЛИ (ЗначениеЗаполнено(ДатаНачалаДоп) И ДатаНачалаВсего > ДатаНачалаДоп) Тогда
				ДатаНачалаВсего = ДатаНачалаДоп;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияВсего) ИЛИ (ЗначениеЗаполнено(ДатаОкончанияДоп) И ДатаОкончанияВсего < ДатаОкончанияДоп) Тогда
				ДатаОкончанияВсего = ДатаОкончанияДоп;
			КонецЕсли;
			
			// 4D:ERP для Беларуси, Юлия, 04.01.2018 16:11:33 
			// Редактировать печатную форму "Приказ о предоставлении отпуска", № 17079
			// {
			// Действие не требуется.
			// }
			// 4D
			
			МассивПараметров.Добавить(Параметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции 

Функция СтруктураПараметровПриказаТ6()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	// 4D:ERP для Беларуси, Юлия, 04.07.2017 11:38:33 
	// Печатные формы анализ, №15283
	// Редактировать печатную форму "Приказ о предоставлении отпуска", № 17079
	// {
	Параметры.Вставить("НазваниеОрганизации");
	Параметры.Вставить("КодПоОКПО");
	Параметры.Вставить("Работник");
	Параметры.Вставить("НомерДок");
	Параметры.Вставить("ДатаДок");
	Параметры.Вставить("ТабельныйНомер");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Должность");
	Параметры.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("ДатаНачалаЧисло");
	Параметры.Вставить("ДатаНачалаМесяцГод");
	Параметры.Вставить("ДатаОкончанияЧисло");
	Параметры.Вставить("ДатаОкончанияМесяцГод");
	Параметры.Вставить("ПродолжительностьДоп");
	Параметры.Вставить("ДатаСДопЧисло");
	Параметры.Вставить("ДатаСДопМесяцГод");
	Параметры.Вставить("ДатаПоДопЧисло");
	Параметры.Вставить("ДатаПоДопМесяцГод");
	Параметры.Вставить("ВидДопОтпуска");
	Параметры.Вставить("ПродолжительностьВсего");
	Параметры.Вставить("ДатаНачалаВсего");
	Параметры.Вставить("ДатаОкончанияВсего");
	Параметры.Вставить("Основание");
	Параметры.Вставить("ДолжностьРуководителя");
	Параметры.Вставить("РуководительРасшифровкаПодписи");
	Параметры.Вставить("ДополнительныеОтпуска", Новый Массив);
	Параметры.Вставить("РаботникРасшифровкаПодписи");
	Параметры.Вставить("ДопОтпускЗаголовок");
	Параметры.Вставить("КоличествоДнейДопОтпуска");
	Параметры.Вставить("КоличествоДнейКомпенсации");
	Параметры.Вставить("ДатаНачалаКомпенсации");
	Параметры.Вставить("ДатаОкончанияКомпенсации");
	Параметры.Вставить("ВТомЧисле");
	Параметры.Вставить("ГородЮрАдресОрганизации");
	Параметры.Вставить("КалендарныеДни");
	Параметры.Вставить("Период");
	Параметры.Вставить("ПериодДопОтпуска");
	Параметры.Вставить("ПериодОснОтп");
	Параметры.Вставить("НаименованиеОрганизации");
	Параметры.Вставить("Сотрудник");
	Параметры.Вставить("Год");
	Параметры.Вставить("ЗнакПрепинания");
	// }
	// 4D
	
	Возврат Параметры;
КонецФункции 

// 4D:ERP для Беларуси, Юлия, 15.01.2018 15:27:59 
// Редактировать печатную форму "Приказ о предоставлении отпуска", № 17079
// {
Функция СклонениеКаледнадрныеДни(КоличествоДней)

	ПоследнЦифраКоличествоДней = Прав(КоличествоДней, 1);
	Если ПоследнЦифраКоличествоДней = "1" Тогда
		
		КалендарныеДни = "календарный день";
		
	ИначеЕсли ПоследнЦифраКоличествоДней = "2" 
		ИЛИ ПоследнЦифраКоличествоДней = "3" 
		ИЛИ ПоследнЦифраКоличествоДней = "4" Тогда
		
		КалендарныеДни = "календарных дня";
	Иначе
		КалендарныеДни = "календарных дней";
	КонецЕсли; 
	
	Если КоличествоДней = 11 ИЛИ КоличествоДней = 12 Тогда
		КалендарныеДни = "календарных дней";
	КонецЕсли;
	
	Возврат КалендарныеДни;
	
КонецФункции

Функция СклонениеЧасы(КоличествоЧасов)

	ПоследнЦифраКоличествоЧасов = Прав(КоличествоЧасов, 1);
	Если ПоследнЦифраКоличествоЧасов = "1" Тогда
		
		Часы = "час";
		
	ИначеЕсли ПоследнЦифраКоличествоЧасов = "2" 
		ИЛИ ПоследнЦифраКоличествоЧасов = "3" 
		ИЛИ ПоследнЦифраКоличествоЧасов = "4" Тогда
		
		Часы = "часа";
	Иначе
		Часы = "часов";
	КонецЕсли; 
	
	Если КоличествоЧасов = 11 ИЛИ КоличествоЧасов = 12 Тогда
		Часы = "часов";
	КонецЕсли;
	
	Возврат Часы;
	
КонецФункции

Функция ПолучитьДанныеКадровогоПриказаТ6(МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДопОтпуск.Ссылка,
	|	ДопОтпуск.КоличествоДней,
	|	ДопОтпуск.ДатаНачала,
	|	ДопОтпуск.ДатаОкончания,
	|	ДопОтпуск.КоличествоДнейКомпенсации,
	|	ДопОтпуск.ВидОтпуска,
	|	ДопОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ДопОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ДопОтпуск
	|ГДЕ
	|	ДопОтпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции 
// }
// 4D

#КонецОбласти

#Область ТрудовойДоговорМикропредприятий

Функция ТабличныйДокументТрудовойДоговорМикропредприятий(Макет, МассивОбъектов, ОбъектыПечати, ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговорМикропредприятий";
	
	ДанныеДоговоров = КадровыйУчет.ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником);
	Для каждого ДанныеДоговора Из ДанныеДоговоров Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТаблицаТрудовогоДоговора = Новый ТабличныйДокумент;
		
		ПараметрыНумерации = Новый Структура;
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, 1);
		УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		
		ТрудовойДоговорВывестиРаздел("Шапка", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОбщиеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботодателя", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОплатаТрудаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_РабочееВремяИВремяОтдыхаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОхранаТруда", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_СоциальноеСтрахованиеИИныеГарантии", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИныеУсловияТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИзменениеУсловийТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОтветственностьСторонТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ЗаключительныеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Подвал", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		
		ДокументРезультат.Вывести(ТаблицаТрудовогоДоговора);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДоговора.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ТрудовойДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеДоговора, ПараметрыНумерации)
	
	Если ИмяОбласти = "Раздел_ОхранаТруда"
		И (ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
			Или ДанныеДоговора.ТрудовойДоговорСНадомником) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьНачалаРаздела = Новый ТабличныйДокумент;
	НомерОбласти = 1;
	
	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	Для каждого ВложеннаяОбласть Из ОбластьРаздела.Области Цикл
		
		Если ОбластьРаздела.Области.Количество() > 1 И ВложеннаяОбласть.Имя = ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимаяОбласть = ОбластьРаздела.ПолучитьОбласть(ВложеннаяОбласть.Имя);
		
		Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление"
				Или ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
			
			Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.КомпенсационныеВыплаты;
			ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.СтимулирующиеВыплаты;
			Иначе
				КоллекцияСтрок = Новый Массив;
			КонецЕсли;
			
			Если КоллекцияСтрок.Количество() = 0 Тогда
				
				ВыводимаяОбласть.Параметры.Начисление =
					Символы.ПС
					+ Символы.ПС
					+ Символы.ПС
					+ Символы.ПС;
				
			Иначе
				
				ОбластьТаблицы = Новый ТабличныйДокумент;
				Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
					
					ВыводимаяОбласть.Параметры.Заполнить(СтрокаКоллекции);
					ВыводимаяОбласть.Параметры.Размер = Формат(ВыводимаяОбласть.Параметры.Размер, "ЧДЦ=2");
					ОбластьТаблицы.Вывести(ВыводимаяОбласть);
					
				КонецЦикла;
				
				ВыводимаяОбласть = ОбластьТаблицы;
				
			КонецЕсли;
			
		Иначе
			
			//Если ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы Тогда
			//	
			//	Если ВложеннаяОбласть.Имя = "Пункт_10_б"
			//		Или ВложеннаяОбласть.Имя = "Пункт_13_з" Тогда
			//		
			//		Продолжить;
			//		
			//	КонецЕсли;
			//	
			//ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_09_01" Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			//Если Не ДанныеДоговора.ТрудовойДоговорСНадомником
			//	И ВложеннаяОбласть.Имя = "Пункт_09_02" Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			//Если ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
			//	Или ДанныеДоговора.ТрудовойДоговорСНадомником Тогда
			//		
			//	Если ВложеннаяОбласть.Имя = "Пункт_18"
			//		Или ВложеннаяОбласть.Имя = "Подписи_06_ИнструктажПоОхранеТруда" Тогда
			//		
			//		Продолжить;
			//		
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Заполнить(ПараметрыНумерации);
			ВыводимаяОбласть.Параметры.Заполнить(ДанныеДоговора);
			
		КонецЕсли;
		
		Если НомерОбласти > 2 Тогда
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		Иначе
			
			ОбластьНачалаРаздела.Вывести(ВыводимаяОбласть);
			Если НомерОбласти = 2 Тогда
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьНачалаРаздела) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьНачалаРаздела);
				ОбластьНачалаРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерОбласти = НомерОбласти + 1;
		
		Если СтрДлина(ВложеннаяОбласть.Имя) = 8 И СтрНайти(ВложеннаяОбласть.Имя, "Пункт_") = 1 Тогда
			ПараметрыНумерации.НомерПункта = ПараметрыНумерации.НомерПункта + 1;
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		ИначеЕсли СтрЧислоВхождений(ВложеннаяОбласть.Имя, "_") = 2 Тогда
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерПодпункта + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьНачалаРаздела <> Неопределено Тогда
		
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьНачалаРаздела) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьНачалаРаздела);
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Раздел_") = 1 Тогда
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерРаздела + 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, Знач НомерРаздела)
	
	ПараметрыНумерации.Вставить("НомерРаздела", НомерРаздела);
	ПараметрыНумерации.Вставить("НомерРазделаВРимскойНотации",
		СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(НомерРаздела, Ложь));
	
КонецПроцедуры

Процедура УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПункта)
	
	ПараметрыНумерации.Вставить("НомерПункта", НомерПункта);
	
КонецПроцедуры

Процедура УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПодпункта)
	
	ПараметрыНумерации.Вставить("НомерПодпункта", НомерПодпункта);
	ПараметрыНумерации.Вставить("НомерПодпунктаБуквой", Сред("абвгдежзиклмнопрстуфхцчшщ", НомерПодпункта, 1));
	
КонецПроцедуры

#КонецОбласти

#Область СправкаОСреднемЗаработкеДляПособияПоБезработице

Функция ТабличныйДокументСправкаОСреднемЗаработкеДляПособияПоБезработице(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеСправок = КадровыйУчет.ДанныеСправокОСреднемЗаработкеДляПособияПоБезработице(МассивОбъектов);
	Для Каждого ДанныеСправки Из ДанныеСправок Цикл
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеСправки);
		ДокументРезультат.Вывести(ОбластьШапка);
		
		ПериодовНаПолномРабочемДне = ДанныеСправки.ПериодыРаботы.НайтиСтроки(Новый Структура("ПериодРаботыСПолнымРабочимДнем", Истина)).Количество();
		Если ПериодовНаПолномРабочемДне = 0 Тогда
			
			ОбластьПериодРаботыНаПолномГрафике = Макет.ПолучитьОбласть("ПериодРаботыНаПолномГрафике");
			ДокументРезультат.Вывести(ОбластьПериодРаботыНаПолномГрафике);
			
		КонецЕсли;
		
		ВывестиОбластьПериодаРаботыНаНеПолномГрафике = Истина;
		Для Каждого ПериодРаботы Из ДанныеСправки.ПериодыРаботы Цикл
			
			Если ПериодРаботы.ПериодРаботыСПолнымРабочимДнем Тогда
				ОбластьПериодРаботы = Макет.ПолучитьОбласть("ПериодРаботыНаПолномГрафике");
			Иначе
				ОбластьПериодРаботы = Макет.ПолучитьОбласть("ПериодРаботыНаНеПолномГрафике");
				ВывестиОбластьПериодаРаботыНаНеПолномГрафике = Ложь;
			КонецЕсли;
			
			ОбластьПериодРаботы.Параметры.Заполнить(ПериодРаботы);
			ДокументРезультат.Вывести(ОбластьПериодРаботы);
			
		КонецЦикла;
		
		Если ВывестиОбластьПериодаРаботыНаНеПолномГрафике Тогда
			
			ОбластьПериодРаботыНаНеПолномГрафике = Макет.ПолучитьОбласть("ПериодРаботыНаНеПолномГрафике");
			ДокументРезультат.Вывести(ОбластьПериодРаботыНаНеПолномГрафике);
			
		КонецЕсли;
		
		ОбластьТело = Макет.ПолучитьОбласть("Тело");
		ДокументРезультат.Вывести(ОбластьТело);
		
		Для Каждого ПериодНеРаботы Из ДанныеСправки.ПериодыНеРаботы Цикл
			
			ОбластьПериодНеРаботы = Макет.ПолучитьОбласть("ПериодНеРаботы");
			ОбластьПериодНеРаботы.Параметры.Заполнить(ПериодНеРаботы);
			ДокументРезультат.Вывести(ОбластьПериодНеРаботы);
			
		КонецЦикла;
		
		Если ДанныеСправки.ПериодыНеРаботы.Количество() < 7 Тогда
			
			ОбластьПериодНеРаботы = Макет.ПолучитьОбласть("ПериодНеРаботы");
			Для НомерОбласти = ДанныеСправки.ПериодыНеРаботы.Количество() + 1 По 7 Цикл
				ДокументРезультат.Вывести(ОбластьПериодНеРаботы);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(ДанныеСправки);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

// 4D:ERP для Беларуси, Юлия, 04.07.2017 11:38:33 
// Печатные формы анализ, №15283 
// {
Функция ПолучитьСтруктуруПараметровКадровогоПриказа() Экспорт
	
	СтруктураПараметровКадровогоПриказа = Новый Структура;
	
	СтруктураПараметровКадровогоПриказа.Вставить("Ссылка");
	СтруктураПараметровКадровогоПриказа.Вставить("НазваниеОрганизации", "");
	СтруктураПараметровКадровогоПриказа.Вставить("КодПоОКПО", "");
	СтруктураПараметровКадровогоПриказа.Вставить("НомерДок", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ДатаДок", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("Работник", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Пол");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорЧисло", "    ");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорМесяцГод", "______________ 20__");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорДата", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорНомер", "____");
	СтруктураПараметровКадровогоПриказа.Вставить("ТабельныйНомер", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Подразделение");
	СтруктураПараметровКадровогоПриказа.Вставить("Должность");
	СтруктураПараметровКадровогоПриказа.Вставить("РазрядКатегория");
	СтруктураПараметровКадровогоПриказа.Вставить("ДолжностьРуководителя", "");
	СтруктураПараметровКадровогоПриказа.Вставить("РуководительРасшифровкаПодписи", "");
	
	Возврат СтруктураПараметровКадровогоПриказа;
		
КонецФункции

Функция ПолучитьТабличныйДокументПриказаНовыйДоговор(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОЗаключениеНовогоТрудовогоДоговора";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаНовыйДоговор(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции

Функция ПолучитьТабличныйДокументПриказаОПереводеРаботникаНаКонтракт(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПереводРаботникаНаКонтракт";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаОПереводеРаботникаНаКонтракт(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции

// 4D:ERP для Беларуси, Юлия, 23.08.2017 17:40:45 
// Ошибка при нажатии на кнопку Печати "Приказ о продлении трудового договора", № 15795 
// { 
Функция ПолучитьТабличныйДокументПриказаОПродленииТрудовогоДоговора(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПродленииТрудовогоДоговора";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаОПродленииТрудовогоДоговора(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции
// }
// 4D

Функция ПолучитьДанныеДляПечатиКадровогоПриказаНовыйДоговор(МассивОбъектов, ЭтоПереводРаботникаНаКонтракт = Ложь)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ5(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПолучитьСтруктуруПараметровПриказаНовыйДоговор();		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
	Если ЭтоПереводРаботникаНаКонтракт Тогда	
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник,2, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник1	= РезультатСклонения
		КонецЕсли;
	КонецЕсли;	
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 5, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
			И ЗначениеЗаполнено(Параметры.НовоеПодразделение) Тогда
			
			Параметры.НовоеПодразделение = Параметры.НовоеПодразделение.ПолноеНаименование();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.НовыйРазрядКатегория) Тогда
			Параметры.НовыйРазрядКатегория = ", " + Параметры.НовыйРазрядКатегория;
		КонецЕсли; 
		
    	Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(Выборка.Работник);
		
		Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=Д");
		Параметры.ДатаНачала = Формат(Параметры.ДатаНачала, "ДЛФ=Д");
		Если ЗначениеЗаполнено(Параметры.Датаокончания) Тогда
			Параметры.Датаокончания = Формат(Параметры.ДатаОкончания, "ДЛФ=Д");
		Иначе 
			Параметры.Датаокончания = "«__» ___________ 20__ г.";
		КонецЕсли;
		
		Параметры.ТрудовойДоговорДата = Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=Д");
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции

Функция ПолучитьДанныеДляПечатиКадровогоПриказаОПереводеРаботникаНаКонтракт(МассивОбъектов, ЭтоПереводРаботникаНаКонтракт = Ложь)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Выборка = КадровыйУчет.СформироватьЗапросДляТ5(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПолучитьСтруктуруПараметровПриказаНовыйДоговор();		
		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник,2, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник1	= РезультатСклонения
		КонецЕсли;
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
			И ЗначениеЗаполнено(Параметры.НовоеПодразделение) Тогда
			
			Параметры.НовоеПодразделение = Параметры.НовоеПодразделение.ПолноеНаименование();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.НовыйРазрядКатегория) Тогда
			Параметры.НовыйРазрядКатегория = ", " + Параметры.НовыйРазрядКатегория;
		КонецЕсли; 
		
		Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(Выборка.Работник);
		
		Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=Д");
		Параметры.ДатаНачала = Формат(Параметры.ДатаНачала, "ДЛФ=Д");
		Если ЗначениеЗаполнено(Параметры.Датаокончания) Тогда
			Параметры.Датаокончания = Формат(Параметры.ДатаОкончания, "ДЛФ=Д");
		Иначе 
			Параметры.Датаокончания = "«__» ___________ 20__ г.";
		КонецЕсли;
		
		Параметры.ТрудовойДоговорДата = Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=Д");
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции

// 4D:ERP для Беларуси, Юлия, 23.08.2017 17:40:45 
// Ошибка при нажатии на кнопку Печати "Приказ о продлении трудового договора", № 15795 
// {
Функция ПолучитьДанныеДляПечатиКадровогоПриказаОПродленииТрудовогоДоговора(МассивОбъектов, ЭтоПереводРаботникаНаКонтракт = Ложь)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Выборка = СформироватьЗапросДляПриказаОПродленииТрудовогоДоговора(МассивОбъектов).Выбрать();
	
	МассивПараметров = Новый Массив;
	
	Пока  Выборка.Следующий() Цикл
		
		Параметры = ПолучитьСтруктуруПараметровПриказаНовыйДоговор();		
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;

КонецФункции

Функция СформироватьЗапросДляПриказаОПродленииТрудовогоДоговора(МассивОбъектов)
	
	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродлениеКонтрактаДоговора.Ссылка,
	|	ПродлениеКонтрактаДоговора.Номер,
	|	ПродлениеКонтрактаДоговора.Дата,
	|	ПродлениеКонтрактаДоговора.Организация,
	|	ПродлениеКонтрактаДоговора.Сотрудник КАК Работник,
	|	ПродлениеКонтрактаДоговора.ДатаПродления,
	|	ПродлениеКонтрактаДоговора.ТрудовойДоговорНомер,
	|	ПродлениеКонтрактаДоговора.ТрудовойДоговорДата,
	|	ПродлениеКонтрактаДоговора.СрочныйДоговор,
	|	ПродлениеКонтрактаДоговора.ДатаЗавершенияТрудовогоДоговора,
	|	ПродлениеКонтрактаДоговора.ОснованиеСрочногоДоговора,
	|	ПродлениеКонтрактаДоговора.СрокЗаключенияДоговора,
	|	ПродлениеКонтрактаДоговора.ПредставительНанимателя КАК Руководитель,
	|	ПродлениеКонтрактаДоговора.ДолжностьПредставителяНанимателя КАК ДолжностьРуководителя
	|ИЗ
	|	Документ.ПродлениеКонтрактаДоговора КАК ПродлениеКонтрактаДоговора";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции
// }
// 4D

Функция ПолучитьСтруктуруПараметровПриказаНовыйДоговор()
	
	Параметры = ПолучитьСтруктуруПараметровКадровогоПриказа();
	
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Должность");
	Параметры.Вставить("НовоеПодразделение");
	Параметры.Вставить("НоваяДолжность");
	Параметры.Вставить("НовыйРазрядКатегория");
	Параметры.Вставить("Работник");
	Параметры.Вставить("РаботникРасшифровкаПодписи");

	Возврат Параметры;
	
КонецФункции

Функция ТабличныйДокументПриказаТ61(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	МассивДанныхЗаполнения = ДанныеДляПечатиКадровогоПриказаТ61(МассивОбъектов);
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
				
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(Макет);
			
			// Печать приложения
			Если ПараметрыМакета.ДополнительныеОтпуска.Количество() > 0 Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				МакетШапкиПриложения = Макет.ПолучитьОбласть("ПриложениеШапка");
				МакетШапкиПриложения.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетШапкиПриложения);
				
				Для Каждого ПараметрыМакетаПриложения Из ПараметрыМакета.ДополнительныеОтпуска Цикл
					МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаОтпуск");
					МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
					ДокументРезультат.Вывести(МакетСтрокиПриложения);
					
					Если ПараметрыМакетаПриложения.УказанПериодЗаКоторыйПредоставляетсяОтпуск Тогда
						МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаПериод");
						МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
						ДокументРезультат.Вывести(МакетСтрокиПриложения);
					КонецЕсли;
					
					МакетСтрокиПриложения = Макет.ПолучитьОбласть("ПриложениеСтрокаОснование");
					МакетСтрокиПриложения.Параметры.Заполнить(ПараметрыМакетаПриложения);
					ДокументРезультат.Вывести(МакетСтрокиПриложения);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);

		КонецЦикла;

	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ61(МассивОбъектов)
	
	МассивПараметров = Новый Массив;  		
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока  Выборка.Следующий() Цикл  
		
		Параметры = СтруктураПараметровПриказаТ6();				
		Параметры.РаботникРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(Выборка.Работник);		
		ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 				
		ОрганизацияДокумента = Неопределено;
		Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
			
			КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
				Параметры.Работник	= РезультатСклонения
			КонецЕсли;
			
			Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДЛФ=Д");
		КонецЕсли;
		
		Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
			
			КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
			Параметры.РаботникРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(Выборка.Работник);
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 4, РезультатСклонения, Параметры.Пол) Тогда
				Параметры.Работник	= РезультатСклонения
			КонецЕсли;
			
		КонецЦикла;
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции 
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 13.06.2017 14:38:12 
// Привести типовые формы документов приказа о приеме на работу и трудового договора, №14928
// Печатная форма "Приказ об увольнении" документа "Увольнение", № 16038
// {
Функция ВыделитьСлово(ФИОПолные) Экспорт
	
	Если ТипЗнч(ФИОПолные) = Тип("Структура") Тогда
		
		ФИО = Новый Массив;
		ФИО.Добавить(ФИОПолные.Фамилия);
		ФИО.Добавить(ФИОПолные.Имя);
		ФИО.Добавить(ФИОПолные.Отчество);
		
	Иначе
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	КонецЕсли;
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьСлово = Врег(ФИО[0]) + " " + ФИО[1] + " " + ФИО[2];
			
	Иначе
		ВыделитьСлово = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьСлово;
	
КонецФункции

Функция ВыделитьФамилию(ФИОПолные) Экспорт
	
	Если ТипЗнч(ФИОПолные) = Тип("Структура") Тогда
		
		ФИО = Новый Массив;
		ФИО.Добавить(ФИОПолные.Фамилия);
		ФИО.Добавить(ФИОПолные.Имя);
		ФИО.Добавить(ФИОПолные.Отчество);
		
	Иначе
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	КонецЕсли;
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьФамилию = ФИО[0] + " " + Лев(ФИО[1],1) + ". " + Лев(ФИО[2],1) + ".";
			
	Иначе
		ВыделитьФамилию = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьФамилию;
	
КонецФункции

Функция ВыделитьДС(ПодразделениеПолн) Экспорт
	
	Подразделение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПодразделениеПолн), " ");

	Если Подразделение.Количество() >= 3 Тогда
		
		ВыделитьДС = Подразделение[0] + " " + Нрег(Подразделение[1]) + " " + Нрег(Подразделение[2]);
			
	Иначе
		ВыделитьДС = ПодразделениеПолн;
	КонецЕсли; 
	
	Возврат ВыделитьДС;
	
КонецФункции

Функция РасшифровкаПодписи(ФИОПолные) Экспорт

		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	
	Если ФИО.Количество() >= 3 Тогда
		
		ВыделитьСлово =  Лев(ФИО[1],1) + ". " + Лев(ФИО[2],1) + ". " + ФИО[0];
			
	Иначе
		ВыделитьСлово = ФИОПолные;
	КонецЕсли; 
	
	Возврат ВыделитьСлово;
	
КонецФункции

Функция ПолучитьАдресОрганизации(КонтактнаяИнформация, ВидКонтактнойИнформации) 
	
	ПараметрыОтбора = Новый Структура;
 	ПараметрыОтбора.Вставить("Вид", ВидКонтактнойИнформации);
	
	НайденнаяСтрока = КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда  
		Возврат НайденнаяСтрока[0];
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанные(МассивОбъектов)
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Дата,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
		|	УвольнениеДополнительныеОтпуска.Ссылка.Номер,
		|	УвольнениеДополнительныеОтпуска.Ссылка,
		|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|ГДЕ
		|	УвольнениеДополнительныеОтпуска.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция СклонениеДолжностей(Должность)
	
	Разделитель = " ";
	МассивСлов = СтрРазделить(Должность, Разделитель);
	ПолнаяДолжность = "";
	Для каждого Слово Из МассивСлов Цикл
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Слово, Ложь, , Ложь);
		ЧастьДолжность = Структура.ДательныйПадеж;
		ПолнаяДолжность = ПолнаяДолжность + " " + ЧастьДолжность;
	КонецЦикла;
	
	Возврат ПолнаяДолжность;
	
КонецФункции

Функция СклонениеПодразделений(Подразделение)
	
	Разделитель = " ";
	МассивСлов = СтрРазделить(Подразделение, Разделитель);
	ПолноеПодразделение = "";
	Для каждого Слово Из МассивСлов Цикл
		Структура = СклонениеПредставленийОбъектов.ДанныеСклонения(Слово, Ложь, , Ложь);
		ЧастьПодразделение = Структура.РодительныйПадеж;
		ПолноеПодразделение = ПолноеПодразделение + " " + ЧастьПодразделение;
	КонецЦикла;
	
	Возврат ПолноеПодразделение;
	
КонецФункции
// }
// 4D


// 4D:ERP для Беларуси, Юлия, 05.02.2018 9:21:41 
// Разработать печатную форму "Приказ о предоставлении кратковременного отпуска без сохранения з/п", № 17678
// Доработать документ "Отпуск по уходу за ребенком" и печатную форму, доступную в документе, № 17753
// {
Функция ПолучитьТабличныйДокументПриказаОПредоставленииОтпускаБезОплаты(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпускаБезОплаты";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаОПредоставленииОтпускаБезОплаты(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаОПредоставленииОтпускаБезОплатыВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции

Функция ПолучитьДанныеДляПечатиКадровогоПриказаОПредоставленииОтпускаБезОплаты(МассивОбъектов, ЭтоПереводРаботникаНаКонтракт = Ложь)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	МассивПараметров = Новый Массив;
	
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	ВыборкаПоСсылкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = ПолучитьСтруктуруПараметровПриказаОПредоставленииОтпускаБезОплаты();
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				МассивПараметров.Добавить(Параметры);
				
				Параметры.НазваниеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеПолное;
				Параметры.НаименованиеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеСокращенное;
				Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДФ=dd.MM.yyyy");
				Параметры.НомерДок = ВыборкаПоВидуОтпуска.НомерДок;
				Параметры.НаименованиеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеСокращенное;
				КонтактнаяИнформация = ВыборкаПоВидуОтпуска.Организация.КонтактнаяИнформация;
				КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				
				Если КИнформация <> Неопределено Тогда 	
					Параметры.ГородЮрАдресОрганизации = ?( ЗначениеЗаполнено(КИнформация.Город), КИнформация.Город, КИнформация.Регион );
				КонецЕсли;
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(ВыборкаПоВидуОтпуска.Сотрудник.Наименование, 3, РезультатСклонения,) Тогда
					Параметры.Работник = ВыделитьСлово(РезультатСклонения);
				КонецЕсли;
				
				Параметры.Должность = Нрег(СклонениеДолжностей(Строка(ВыборкаПоВидуОтпуска.Должность)));
				Параметры.Подразделение = СклонениеПодразделений(Строка(ВыборкаПоВидуОтпуска.Подразделение));
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Ссылка.Причина) Тогда
					Параметры.Причина = " " + ВыборкаПоВидуОтпуска.Ссылка.Причина;
				КонецЕсли;
				
				Если ВыборкаПоВидуОтпуска.Ссылка.ОтсутствиеВТечениеЧастиСмены Тогда
					Продолжительность = ВыборкаПоВидуОтпуска.Ссылка.ЧасовОтпуска;
					Параметры.Продолжительность = " на " + Продолжительность + " " + СклонениеЧасы(Продолжительность) + " ";
					Параметры.Период = Формат(ВыборкаПоВидуОтпуска.Ссылка.ДатаОтсутствия, "ДФ=dd.MM.yyyy");
				Иначе
					Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Ссылка.ДатаНачала)
						И ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончания)  
						И ВыборкаПоВидуОтпуска.Ссылка.ДатаНачала <= ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончания Тогда
						
						Продолжительность = Окр((КонецДня(ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончания) - НачалоДня(ВыборкаПоВидуОтпуска.Ссылка.ДатаНачала))/86400, 0);
						Параметры.Продолжительность = " на " + Продолжительность + " " + СклонениеКаледнадрныеДни(Продолжительность) + " ";
					Иначе
						Параметры.Продолжительность = 0;
					КонецЕсли;
					Параметры.Период = "с " + Формат(ВыборкаПоВидуОтпуска.Ссылка.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ВыборкаПоВидуОтпуска.Ссылка.ДатаОкончания, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
				Параметры.Основание = ВыборкаПоВидуОтпуска.Основание;
				
				Параметры.ДолжностьРуководителя = ВыборкаПоВидуОтпуска.ДолжностьРуководителя.Наименование;
				Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Руководитель.Наименование);
				Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Сотрудник.Наименование);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат МассивПараметров;

КонецФункции

Функция ПолучитьСтруктуруПараметровПриказаОПредоставленииОтпускаБезОплаты()
	
	Параметры = ПолучитьСтруктуруПараметровКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");
	Параметры.Вставить("НаименованиеОрганизации");
	Параметры.Вставить("ДатаДок");
	Параметры.Вставить("НомерДок");
	Параметры.Вставить("ГородЮрАдресОрганизации");
	Параметры.Вставить("Работник");
	Параметры.Вставить("Должность");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Причина");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("Период");
	Параметры.Вставить("Основание");
	Параметры.Вставить("РуководительРасшифровкаПодписи");
	Параметры.Вставить("РаботникРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРуководителя");

	Возврат Параметры;
	
КонецФункции

Процедура ВывестиДанныеКадровогоПриказаОПредоставленииОтпускаБезОплатыВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати)
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабличныйДокументПриказаОПредоставленииОтпускаПоУходуЗаРебенком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпускаБезОплаты";
	МассивДанныхЗаполнения = ПолучитьДанныеДляПечатиКадровогоПриказаОПредоставленииОтпускаПоУходуЗаРебенком(МассивОбъектов);	
	
	ВывестиДанныеКадровогоПриказаОПредоставленииОтпускаПоУходуЗаРебенкомВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
КонецФункции

Функция ПолучитьДанныеДляПечатиКадровогоПриказаОПредоставленииОтпускаПоУходуЗаРебенком(МассивОбъектов, ЭтоПереводРаботникаНаКонтракт = Ложь)
	
	НастройкиПечатныхФорм  = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	МассивПараметров = Новый Массив;
	
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;
	
	ВыборкаПоСсылкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = ПолучитьСтруктуруПараметровПриказаОПредоставленииОтпускаПоУходуЗаРебенком();
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				МассивПараметров.Добавить(Параметры);
				
				Параметры.НазваниеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеПолное;
				Параметры.НаименованиеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеСокращенное;
				Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДФ=dd.MM.yyyy");
				Параметры.НомерДок = ВыборкаПоВидуОтпуска.НомерДок;
				Параметры.НаименованиеОрганизации = ВыборкаПоВидуОтпуска.Организация.НаименованиеСокращенное;
				КонтактнаяИнформация = ВыборкаПоВидуОтпуска.Организация.КонтактнаяИнформация;
				КИнформация = ПолучитьАдресОрганизации(КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				
				Если КИнформация <> Неопределено Тогда 	
					Параметры.ГородЮрАдресОрганизации = ?( ЗначениеЗаполнено(КИнформация.Город), КИнформация.Город, КИнформация.Регион );
				КонецЕсли;
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(ВыборкаПоВидуОтпуска.Сотрудник.Наименование, 3, РезультатСклонения,) Тогда
					Параметры.Сотрудник = ВыделитьФамилию(РезультатСклонения);
				КонецЕсли;
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(ВыборкаПоВидуОтпуска.Сотрудник.Наименование, 3, РезультатСклонения,) Тогда
					Параметры.Работник = ВыделитьСлово(РезультатСклонения);
				КонецЕсли;
				
				Параметры.Должность = Нрег(СклонениеДолжностей(Строка(ВыборкаПоВидуОтпуска.Должность)));
				Параметры.Подразделение = СклонениеПодразделений(Строка(ВыборкаПоВидуОтпуска.Подразделение));
				Параметры.ДатаНачала = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=D");
				Параметры.ДатаОкончания = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=D");
				Параметры.Основание = ВыборкаПоВидуОтпуска.Ссылка.Основание;
				
				Параметры.ДолжностьРуководителя = ВыборкаПоВидуОтпуска.ДолжностьРуководителя.Наименование;
				Параметры.РуководительРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Руководитель.Наименование);
				Параметры.РаботникРасшифровкаПодписи = РасшифровкаПодписи(ВыборкаПоВидуОтпуска.Сотрудник.Наименование);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат МассивПараметров;

КонецФункции

Функция ПолучитьСтруктуруПараметровПриказаОПредоставленииОтпускаПоУходуЗаРебенком()
	
	Параметры = ПолучитьСтруктуруПараметровКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");
	Параметры.Вставить("НаименованиеОрганизации");
	Параметры.Вставить("ДатаДок");
	Параметры.Вставить("НомерДок");
	Параметры.Вставить("ГородЮрАдресОрганизации");
	Параметры.Вставить("Работник");
	Параметры.Вставить("Должность");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("Причина");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("Период");
	Параметры.Вставить("Основание");
	Параметры.Вставить("РуководительРасшифровкаПодписи");
	Параметры.Вставить("РаботникРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРуководителя");
	Параметры.Вставить("Сотрудник");
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	
	Возврат Параметры;
	
КонецФункции

Процедура ВывестиДанныеКадровогоПриказаОПредоставленииОтпускаПоУходуЗаРебенкомВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати)
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

#КонецОбласти

#КонецЕсли