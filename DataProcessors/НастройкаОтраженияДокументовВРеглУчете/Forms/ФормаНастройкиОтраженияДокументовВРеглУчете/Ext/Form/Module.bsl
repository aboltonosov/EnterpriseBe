&НаКлиенте
Перем ФормаРасшифровкаПоДокументамОткрыта;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ДатаОкончанияПериода.Дата = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
	ПолучитьСостояниеРегламентногоЗадания();
	
	ДополнительныеПараметры = Новый Структура;
	ИнтеграцияССППР.ДобавитьРазмещениеКомандСППРВДополнительныеПараметры(Элементы.ГруппаСППР, ДополнительныеПараметры);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаРасшифровкаПоДокументамОткрыта = Ложь;
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВнешниеСобытия = Новый Массив;
	ВнешниеСобытия.Добавить("Запись_ОтражениеДокументовВРегламентированномУчете");
	ВнешниеСобытия.Добавить("Запись_СтатусПроверкиДокумента");
	ВнешниеСобытия.Добавить("ИзмененыНастройкиОтраженияВУчете");
	ВнешниеСобытия.Добавить("ЗакрытаФормаСпискаДокументов");
	
	Если ВнешниеСобытия.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбработкаОповещенияСервер(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	ДатаОкончанияПериода.Вариант = Настройки.Получить("ДатаОкончанияПериода.Вариант");
	Если ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		ДатаОкончанияПериода.Дата = Настройки.Получить("ДатаОкончанияПериода.Дата");
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ДатаОкончанияПериода.Дата = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаОкончанияПериода.Дата) Тогда
		ДатаОкончанияПериода.Дата = КонецДня(ДатаОкончанияПериода);
	КонецЕсли;
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтсутствуютПравилаОтраженияВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.ФормаНастройкиОтраженияДокументовВРеглУчете.Элемент.НастройкаСчетовУчета.Нажатие");
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДополнительныеОперацииКОтражениюВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Истина);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДополнительныеОперацииОтраженоВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Истина);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеОтражениеВУчетеПриИзменении(Элемент)
	
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеРасписанияРегламентногоЗадания();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроверенныхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНеПроверенныхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументовКПроверкеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОффлайновыхОперацийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗакрытияМесяца = Новый Структура("ПериодРегистрации, Организация", НачалоМесяца(ДатаОкончанияПериода), Организация);
	
	ОткрытьФорму("Обработка.ОперацииЗакрытияМесяца.Форма", ПараметрыЗакрытияМесяца, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.ФормаНастройкиОтраженияДокументовВРеглУчете.Команда.ОбновитьСостояние");
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументыВРегламентированномУчете(Команда)
	
	Результат = ОтразитьДокументыВРегламентированномУчетеСервер();
	
	Если Результат.Статус = "Выполняется" Тогда
		ОповещениеФормаДлительнойОперацииЗакрыта = Новый ОписаниеОповещения("ВыполнениеФоновогоЗаданияЗавершено", ЭтотОбъект);
		ПараметрыФормы = ИнициализироватьПараметрыФормыДлительнойОперации(Результат);
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеФормаДлительнойОперацииЗакрыта, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда 
		ОповеститьОбОтраженииДокументовВРеглУчете(Результат);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При отражении документов в регл. учете возникли ошибки. Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Функция ОтразитьДокументыВРегламентированномУчетеСервер()
	
	НаименованиеЗадания = НСтр("ru = 'Отражение документов в регламентированном учете'");
	ВыполняемыйМетод = "РеглУчетПроведениеСервер.ОтразитьВсеВФоне";
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПериодРасчета", ?(ЗначениеЗаполнено(ДатаОкончанияПериода.Дата), ДатаОкончанияПериода.Дата, ДАТА(2099,1,1)));
	ПараметрыОбработки.Вставить("Организация", Организация);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = ЭтотОбъект.УникальныйИдентификатор;
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		РезультатФоновогоЗадания.Вставить("Результат", ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресРезультата));
		ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокументов(МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	//	Документы, отражаемые вручную
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|			И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ОтраженоВручную_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|			И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК ОтраженоВручную_Количество,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|			И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК КОтражениюВручную_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|			И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК КОтражениюВручную_Количество,
	|
	//	Документы, отражаемые автоматически
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК Отражено_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК Отражено_Количество,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|			ИЛИ НЕ &ДокументыОтражаютсяВручную И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|			И (ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную))
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК КОтражению_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|			ИЛИ НЕ &ДокументыОтражаютсяВручную И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|			И (ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную))
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК КОтражению_Количество,
	|
	//	Документы, отражаемые корректировками (Операция Бух.)
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|			И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ОтраженоКорректировкой_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|			И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК ОтраженоКорректировкой_Количество,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|			И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК КОтражениюКорректировкой_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|			И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК КОтражениюКорректировкой_Количество,
	|
	//	Документы, не отраженные из-за отсутствия счетов учета
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК НеОтражено_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК НеОтражено_Количество,
	|
	//	Проверка документов
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК Проверено_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК Проверено_Количество,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке) И НЕ &ЕстьБлокировка
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК КПовторнойПроверке_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке) И НЕ &ЕстьБлокировка
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК КПовторнойПроверке_Количество,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки Есть NULL И ТИПЗНАЧЕНИЯ(ОтражениеДокументов.Регистратор) В (&СписокПроверяемыхТипов)
	|			ИЛИ &ЕстьБлокировка И ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	|			ИЛИ ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	|		ТОГДА ОтражениеДокументов.ДатаОтражения
	|		ИНАЧЕ ДАТАВРЕМЯ(2099,1,1) КОНЕЦ) КАК НеПроверено_Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА ПроверкаДокументов.СтатусПроверки Есть NULL И ТИПЗНАЧЕНИЯ(ОтражениеДокументов.Регистратор) В (&СписокПроверяемыхТипов)
	|			ИЛИ &ЕстьБлокировка И ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	|			ИЛИ ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	|		ТОГДА ОтражениеДокументов.Регистратор
	|		ИНАЧЕ NULL КОНЕЦ) КАК НеПроверено_Количество
	|
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК ПроверкаДокументов
	|		ПО &ДокументыПроверяются
	|			И ОтражениеДокументов.Регистратор = ПроверкаДокументов.Документ
	|			И ОтражениеДокументов.Организация В(&МассивОрганизаций)
	|			И ПроверкаДокументов.Организация В (&МассивОрганизаций)
	|			И ОтражениеДокументов.Организация = ПроверкаДокументов.Организация
	|			И ОтражениеДокументов.ДатаОтражения <= &ДатаОкончания
	|ГДЕ
	|	ОтражениеДокументов.Организация В(&МассивОрганизаций)
	|	И ОтражениеДокументов.ДатаОтражения <= &ДатаОкончания";
			
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончанияПериода.Дата), ДатаОкончанияПериода.Дата, Дата(2399, 1, 1)));
	// Если снята галка ручного отражения, но ранее документы были отражены вручную они не будут попадать ни в один из списков:
	Запрос.УстановитьПараметр("ДокументыОтражаютсяВручную", ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету"));
	СписокПроверяемыхТипов = Новый СписокЗначений;
	СписокПроверяемыхТипов.ЗагрузитьЗначения(Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.Измерения.Документ.Тип.Типы());
	ЕстьБлокировка = Не ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету");
	
	Запрос.УстановитьПараметр("СписокПроверяемыхТипов", СписокПроверяемыхТипов);
	Запрос.УстановитьПараметр("ЕстьБлокировка", ЕстьБлокировка);
	Запрос.УстановитьПараметр("ДокументыПроверяются", ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету"));
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		#Область РучноеОтражениеДокументов
		
		Если Выборка.ОтраженоВручную_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Документы, скорректированные вручную (%Количество%), по %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.ОтраженоВручную_Количество);
			СтатусОтраженоВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ОтраженоВручную_Дата, "ДЛФ=Д"));
			Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Истина;
		Иначе
			СтатусОтраженоВУчетеВручную = НСтр("ru = 'Нет скорректированных вручную документов.'");
			Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Ложь;
		КонецЕсли;
		
		Если Выборка.КОтражениюВручную_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Документы, требующие ручной корректировки и подтверждения (%Количество%), с %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.КОтражениюВручную_Количество);
			СтатусКОтражениюВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.КОтражениюВручную_Дата, "ДЛФ=Д"));
			Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Истина;
		Иначе
			СтатусКОтражениюВУчетеВручную = НСтр("ru = 'Нет документов, требующих ручной корректировки и подтверждения.'");
			Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Ложь;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область АвтоматическоеОтражениеДокументов
		
		Если Выборка.Отражено_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Отраженные документы (%Количество%), по %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Отражено_Количество);
			СтатусОтраженоВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.Отражено_Дата, "ДЛФ=Д"));
			Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусОтраженоВУчете.Гиперссылка = Истина;
		Иначе
			СтатусОтраженоВУчете = НСтр("ru = 'Нет отраженных документов.'");
			Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусОтраженоВУчете.Гиперссылка = Ложь;
		КонецЕсли;
		
		Если Выборка.КОтражению_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Документы, ожидающие автоматического отражения (%Количество%), с %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.КОтражению_Количество);
			СтатусКОтражениюВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.КОтражению_Дата, "ДЛФ=Д"));
			Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусКОтражениюВУчете.Гиперссылка = Истина;
		Иначе
			СтатусКОтражениюВУчете = НСтр("ru = 'Нет документов, ожидающих автоматического отражения.'");
			Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусКОтражениюВУчете.Гиперссылка = Ложь;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ОтражениеДокументовПутемКорректировок
		
		Если Выборка.ОтраженоКорректировкой_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Ручные операции регл. учета (%Количество%), по %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.ОтраженоКорректировкой_Количество);
			СтатусДополнительныеОперацииОтраженоВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ОтраженоКорректировкой_Дата, "ДЛФ=Д"));
			Элементы.СтатусДополнительныеОперацииОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусДополнительныеОперацииОтраженоВУчете.Гиперссылка = Истина;
		Иначе
			СтатусДополнительныеОперацииОтраженоВУчете = НСтр("ru = 'Нет ручных операций регл. учета.'");
			Элементы.СтатусДополнительныеОперацииОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусДополнительныеОперацииОтраженоВУчете.Гиперссылка = Ложь;
		КонецЕсли;
		
		Если Выборка.КОтражениюКорректировкой_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Ручные операции регл. учета, требующие корректировки и подтверждения (%Количество%), с %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.КОтражениюКорректировкой_Количество);
			СтатусДополнительныеОперацииКОтражениюВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.КОтражениюКорректировкой_Дата, "ДЛФ=Д"));
			Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.Гиперссылка = Истина;
		Иначе
			СтатусДополнительныеОперацииКОтражениюВУчете = НСтр("ru = 'Нет ручных операций регл. учета, требующих корректировки и подтверждения.'");
			Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.Гиперссылка = Ложь;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область НеНастроенныеСчетаУчета
		
		Если Выборка.НеОтражено_Количество Тогда
			ТекстСтатуса = НСтр("ru = 'Документы, не отраженные в учете из-за ненастроенных счетов учета (%Количество%), с %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.НеОтражено_Количество);
			СтатусОтсутствуютПравилаОтраженияВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.НеОтражено_Дата, "ДЛФ=Д"));
			Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
			Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Гиперссылка = Истина;
		Иначе
			СтатусОтсутствуютПравилаОтраженияВУчете = НСтр("ru = 'Нет документов, не отраженных в учете.'");
			Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Гиперссылка = Ложь;
		КонецЕсли;

		#КонецОбласти
		
		#Область ПроверкаДокументов
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		
			Если Выборка.Проверено_Количество Тогда
				ТекстСтатуса = НСтр("ru = 'Проверенные документы (%Количество%), по %Дата%'");
				ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Проверено_Количество);
				СтатусПроверенныхДокументов = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.Проверено_Дата, "ДЛФ=Д"));
				Элементы.СтатусПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
				Элементы.СтатусПроверенныхДокументов.Гиперссылка = Истина;
			Иначе
				СтатусПроверенныхДокументов = НСтр("ru = 'Нет проверенных документов.'");
				Элементы.СтатусПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
				Элементы.СтатусПроверенныхДокументов.Гиперссылка = Ложь;
			КонецЕсли;
			
			Если Выборка.КПовторнойПроверке_Количество Тогда
				ТекстСтатуса = НСтр("ru = 'Документы, требующие повторной проверки (%Количество%), с %Дата%'");
				ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.КПовторнойПроверке_Количество);
				СтатусДокументовКПроверке = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.КПовторнойПроверке_Дата, "ДЛФ=Д"));
				Элементы.СтатусДокументовКПроверке.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
				Элементы.СтатусДокументовКПроверке.Гиперссылка = Истина;
			Иначе
				СтатусДокументовКПроверке = НСтр("ru = 'Нет документов, требующих повторной проверки.'");
				Элементы.СтатусДокументовКПроверке.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
				Элементы.СтатусДокументовКПроверке.Гиперссылка = Ложь;
			КонецЕсли;
			Элементы.СтатусДокументовКПроверке.Видимость = Не ЕстьБлокировка;
			
			Если Выборка.НеПроверено_Количество Тогда
				ТекстСтатуса = НСтр("ru = 'Документы, требующие проверки (%Количество%), с %Дата%'");
				ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.НеПроверено_Количество);
				СтатусНеПроверенныхДокументов = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.НеПроверено_Дата, "ДЛФ=Д"));
				Элементы.СтатусНеПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
				Элементы.СтатусНеПроверенныхДокументов.Гиперссылка = Истина;
			Иначе
				СтатусНеПроверенныхДокументов = НСтр("ru = 'Нет документов, требующих проверки.'");
				Элементы.СтатусНеПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
				Элементы.СтатусНеПроверенныхДокументов.Гиперссылка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеОффлайновыхРасчетов(МассивОрганизаций)
	
	СостояниеОффлайновыхОпераций = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	
	СписокЭтапов = Новый СписокЗначений;
	СписокЭтапов.Добавить("РасчетыСПартнерами");
	СписокЭтапов.Добавить("ПартииТоваров");
	СписокЭтапов.Добавить("Себестоимость");
	
	СостоянияЭтапов = Новый Структура;
	НеВыполненныеОперации = Новый Массив;
	
	Период = ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода.Дата, ТекущаяДатаСеанса());
	ПараметрыРасчета = Новый Структура("СписокОрганизаций, СписокПодразделений, Период", МассивОрганизаций, СписокПодразделений(), Период);
	Для Каждого Этап Из СписокЭтапов Цикл
		
		СостояниеЭтапа = ОбработкаЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап.Значение);
		СостоянияЭтапов.Вставить(Этап.Значение, СостояниеЭтапа);
		
		Если СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
			
			Если Этап.Значение = "РасчетыСПартнерами" Тогда
				НеВыполненныеОперации.Добавить(НСтр("ru = 'восстановления последовательности расчетов с контрагентами'"));
			ИначеЕсли Этап.Значение = "Себестоимость" Тогда
				НеВыполненныеОперации.Добавить(НСтр("ru = 'расчета себестоимости'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеВыполненныеОперации.Количество() Тогда
		
		ТекстПредупреждения = НСтр("ru = 'До закрытия месяца отражение документов в бухгалтерском учете носит предварительный характер и может измениться
                                    |по результатам %1.'") + Символы.ПС; 
			
		ТекстНеВыполненныеОперации = СтрСоединить(НеВыполненныеОперации, " "+НСтр("ru = 'и'")+" ");
		
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ТекстНеВыполненныеОперации);
		
		СостояниеОффлайновыхОпераций = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ТекстПредупреждения,, ЦветаСтиля.РезультатПроблемаЦвет),
			Новый ФорматированнаяСтрока(НСтр("ru = 'Регламентные операции по закрытию месяца'"),,,, "ОткрытьФормуЗакрытияМесяца"));
		
	КонецЕсли;
		
	Элементы.ГруппаПредупреждение.Видимость = НеВыполненныеОперации.Количество();
	
КонецПроцедуры

&НаСервере
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета()
	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	
	ПолучитьСостояниеОффлайновыхРасчетов(МассивОрганизаций);
	
	ПолучитьСостояниеОтраженияДокументов(МассивОрганизаций);
	
	УстановитьСостояниеСчетовУчета(МассивОрганизаций);
	
	ПолучитьСостояниеРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьПараметрыФормыСпискаДокументов(ИмяЭлемента)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода.Дата, '39991231'));
	ПараметрыФормы.Вставить("Заголовок", ЭтотОбъект[ИмяЭлемента]);
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
		
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ИнициализироватьПараметрыФормыДлительнойОперации(РезультатЗапускаФоновогоЗадания)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЗадания", РезультатЗапускаФоновогоЗадания.ИдентификаторЗадания);
	ПараметрыФормы.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыФормы.Вставить("ПолучатьРезультат", Истина);
	ПараметрыФормы.Вставить("АдресРезультата", РезультатЗапускаФоновогоЗадания.АдресРезультата);
		
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия)

	Если ИмяСобытия = "Запись_ОтражениеДокументовВРегламентированномУчете"
		ИЛИ ИмяСобытия = "Запись_СтатусПроверкиДокумента" Тогда
		ПолучитьСостояниеОтраженияДокументов(МассивДоступныхОрганизаций());
	ИначеЕсли ИмяСобытия = "ИзмененыНастройкиОтраженияВУчете"
		ИЛИ ИмяСобытия = "ЗакрытаФормаСпискаДокументов" Тогда
		ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтраженииДокументовВРеглУчете(ДанныеПоОтражениюВУчете)
	
	Оповестить("Запись_ОтражениеДокументовВРегламентированномУчете", Неопределено, ЭтотОбъект);
	
	МассивСообщений = Новый Массив; 
	
	// 4D:ERP для Беларуси, Алексей4Д , 08.11.2017 23:54:57 
	// Исправление ошибки обработки данных по отражению в учете, Задача № 16569
	// {
	Если ТипЗнч(ДанныеПоОтражениюВУчете) = Тип("Структура") И ДанныеПоОтражениюВУчете.Свойство("Отражено") Тогда
		
		ТекстЗаголовок = СтрШаблон(НСтр("ru = 'Обработано %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.Отражено + ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета ));
		
		Если ДанныеПоОтражениюВУчете.Отражено > 0 Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru = 'Отражено в регл. учете %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.Отражено)));
		КонецЕсли;
		Если ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета > 0 Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru = 'Не отражены из-за ненастроенных счетов учета %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета)));
		КонецЕсли;
		
		ТекстСообщение = СтрСоединить(МассивСообщений, Символы.ПС);
		ПоказатьОповещениеПользователя(ТекстЗаголовок, , ТекстСообщение, БиблиотекаКартинок.Информация32);
		
		Если ДанныеПоОтражениюВУчете.ОшибкиПриОтражении > 0 Тогда
			ВызватьИсключение НСтр("ru = 'При отражении документов в регл. учете возники ошибки (подробности см. в журнале регистрации).'");
		КонецЕсли;
		
	Иначе
		
		ТекстЗаголовок = СтрШаблон(НСтр("ru = 'Обработано %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.Результат.Отражено + ДанныеПоОтражениюВУчете.Результат.НеУказаныСчетаУчета ));
		
		Если ДанныеПоОтражениюВУчете.Результат.Отражено > 0 Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru = 'Отражено в регл. учете %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.Результат.Отражено)));
		КонецЕсли;
		Если ДанныеПоОтражениюВУчете.Результат.НеУказаныСчетаУчета > 0 Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru = 'Не отражены из-за ненастроенных счетов учета %1'"), ЧислоДокументовПрописью(ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета)));
		КонецЕсли;
		
		ТекстСообщение = СтрСоединить(МассивСообщений, Символы.ПС);
		ПоказатьОповещениеПользователя(ТекстЗаголовок, , ТекстСообщение, БиблиотекаКартинок.Информация32);
		
		Если ДанныеПоОтражениюВУчете.Результат.ОшибкиПриОтражении > 0 Тогда
			ВызватьИсключение НСтр("ru = 'При отражении документов в регл. учете возники ошибки (подробности см. в журнале регистрации).'");
		КонецЕсли;
		
	КонецЕсли; 
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Функция МассивДоступныхОрганизаций()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Организация
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НЕ ДанныеСправочника.Предопределенный");
	Запрос.УстановитьПараметр("Организация", Организация);
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоДокументовПрописью(КоличествоДокументов)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоДокументов,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru = 'документ,документа,документов,м,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "документ");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоДокументов) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции

&НаКлиенте
Процедура ВыполнениеФоновогоЗаданияЗавершено(РезультатЗакрытияФормыДлительнойОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатЗакрытияФормыДлительнойОперации = Неопределено Тогда
		// Задание отменено, ничего не делаем.
	ИначеЕсли РезультатЗакрытияФормыДлительнойОперации.Статус = "Выполнено" Тогда
		ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
		ОповеститьОбОтраженииДокументовВРеглУчете(РезультатЗакрытияФормыДлительнойОперации.Результат);
	ИначеЕсли РезультатЗакрытияФормыДлительнойОперации.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При отражении документов в регл. учете возникли ошибки. Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеОтражениеВУчете

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВРеглУчете);
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ЗначениеЗаполнено(Задание.Шаблон) Тогда
		РасписаниеРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание.Шаблон, "Расписание").Получить();
	Иначе
		РасписаниеРегламентногоЗадания	= Задание.Расписание;
	КонецЕсли;
	ИспользоватьАвтоматическоеОтражениеВУчете = Задание.Использование;
	
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(Задание);
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
		СостояниеАвтоматическогоОтраженияВУчете = НСтр("ru = 'Не выполнялось'");
	Иначе
		СостояниеАвтоматическогоОтраженияВУчете = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
			+ Строка(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРасписаниеРегламентногоЗадания", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВРеглУчете);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьАвтоматическоеОтражениеВУчете);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете()

	Элементы.ПредставлениеРасписания.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете 
		И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.СостояниеАвтоматическогоОтраженияВУчете.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормыРасшифровки)
	
	Если ФормаРасшифровкаПоДокументамОткрыта Тогда
		Оповестить("РасшифровкаПоДокументам_ИзмененийУсловийОтбора", ПараметрыФормыРасшифровки, ЭтотОбъект);
	Иначе
		ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПриЗакрытииФормыРасшифровкаПоДокументам", ЭтотОбъект);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументам", ПараметрыФормыРасшифровки, ЭтотОбъект,,,, ОповещениеОЗакрытииФормы);
		ФормаРасшифровкаПоДокументамОткрыта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыРасшифровкаПоДокументам(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаРасшифровкаПоДокументамОткрыта = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСчетовУчета

&НаСервере
Процедура УстановитьСостояниеСчетовУчета(МассивОрганизаций)
	
	МассивТребуетсяЗаполнитьСчетаУчета = Новый Массив;
	НеТребуетЗаполнения = Ложь;
	
	ПолучитьСостояниеСчетовУчета(МассивОрганизаций, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	
	Если МассивТребуетсяЗаполнитьСчетаУчета.Количество() > 0 Тогда
		
		СостояниеСчетовУчета = НСтр("ru = 'Требуется заполнить:'");
		Для Каждого ЭлементМассива Из МассивТребуетсяЗаполнитьСчетаУчета Цикл
			СостояниеСчетовУчета = СостояниеСчетовУчета + " " + ЭлементМассива + ",";
		КонецЦикла;
		СостояниеСчетовУчета = Лев(СостояниеСчетовУчета, СтрДлина(СостояниеСчетовУчета) - 1);
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		
		ТекстСтатуса = НСтр("ru = 'Заполнить счета учета (%Количество%)'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", МассивТребуетсяЗаполнитьСчетаУчета.Количество());
		
	ИначеЕсли НеТребуетЗаполнения Тогда
		
		СостояниеСчетовУчета = НСтр("ru = 'Счета учета не требуют заполнения'");
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		
	Иначе
		
		СостояниеСчетовУчета = НСтр("ru = 'Счета учета заполнены'");
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчета(МассивОрганизаций, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 4D:ERP для Беларуси, Михаил, 01.02.2018 15:47:25 
	// Ошибка чтения данных, при ограничении доступа, № 17676
	// {
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// }
	// 4D
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета В (&ВидыСчетовНоменклатуры)), ЛОЖЬ) КАК ТребуетсяЗаполнитьНоменклатуру,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета В (&ВидыСчетовРасчетовСПартнерами)), ЛОЖЬ) КАК ТребуетсяЗаполнитьРасчетыСПартнерами,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета = &СчетДоходов), ЛОЖЬ) КАК ТребуетсяЗаполнитьДоходы,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета В (&ВидыСчетовРасходов)), ЛОЖЬ) КАК ТребуетсяЗаполнитьРасходы,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета = &СчетДенежныхСредств), ЛОЖЬ) КАК ТребуетсяЗаполнитьДенежныеСредства,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета = &СчетПроизводства), ЛОЖЬ) КАК ТребуетсяЗаполнитьПроизводство,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета = &СчетПодарочныхСертификатов), ЛОЖЬ) КАК ТребуетсяЗаполнитьПодарочныеСертификаты,
	|	ЕСТЬNULL(МАКСИМУМ(СчетаРеглУчетаТребующиеНастройки.ВидСчета В (&ВидыСчетовТМЦВЭксплуатации)), ЛОЖЬ) КАК ТребуетсяЗаполнитьТМЦ
	|ИЗ
	|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|ГДЕ
	|	СчетаРеглУчетаТребующиеНастройки.Организация В(&Организации)";
	
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	
	ВидыСчетовНоменклатуры = Новый Массив;
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.НаСкладе);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.НДСПриПродаже);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.ПередачаНаКомиссию);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера);
	ВидыСчетовНоменклатуры.Добавить(Перечисления.ВидыСчетовРеглУчета.НДСПриПродажеКомиссионера);
	Запрос.УстановитьПараметр("ВидыСчетовНоменклатуры", ВидыСчетовНоменклатуры);
	
	ВидыСчетовРасчетовСПартнерами = Новый Массив;
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоВознаграждению);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПретензиям);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара);
	ВидыСчетовРасчетовСПартнерами.Добавить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара);
	Запрос.УстановитьПараметр("ВидыСчетовРасчетовСПартнерами", ВидыСчетовРасчетовСПартнерами);
	
	Запрос.УстановитьПараметр("СчетДоходов", Перечисления.ВидыСчетовРеглУчета.Доходы);
	
	ВидыСчетовРасходов = Новый Массив;
	ВидыСчетовРасходов.Добавить(Перечисления.ВидыСчетовРеглУчета.Расходы);
	ВидыСчетовРасходов.Добавить(Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовОСНО);
	ВидыСчетовРасходов.Добавить(Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД);
	Запрос.УстановитьПараметр("ВидыСчетовРасходов", ВидыСчетовРасходов);
	
	Запрос.УстановитьПараметр("СчетДенежныхСредств", Перечисления.ВидыСчетовРеглУчета.ДенежныеСредства);
	Запрос.УстановитьПараметр("СчетПроизводства", Перечисления.ВидыСчетовРеглУчета.Производство);
	Запрос.УстановитьПараметр("СчетПодарочныхСертификатов", Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам);
	
	ВидыСчетовТМЦВЭксплуатации = Новый Массив;
	ВидыСчетовТМЦВЭксплуатации.Добавить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации);
	ВидыСчетовТМЦВЭксплуатации.Добавить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом);
	Запрос.УстановитьПараметр("ВидыСчетовТМЦВЭксплуатации", ВидыСчетовТМЦВЭксплуатации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НеТребуетЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ТребуетсяЗаполнитьНоменклатуру Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета номенклатуры'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьТМЦ Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета ТМЦ в эксплуатации'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьДенежныеСредства Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета денежных средств'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьПодарочныеСертификаты Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета подарочных сертификатов'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьРасчетыСПартнерами Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета расчетов с партнерами'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьПроизводство Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета производства'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьРасходы Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета расходов'"));
		КонецЕсли;
		Если Выборка.ТребуетсяЗаполнитьДоходы Тогда
			МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru = 'счета учета доходов'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
