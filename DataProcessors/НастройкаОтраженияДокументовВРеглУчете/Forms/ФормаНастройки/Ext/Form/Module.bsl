&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	#Область ЗаполнениеПоПараметрам
	
	Организация = Параметры.Организация;
	ДатаОкончанияПериода = Параметры.ДатаОкончанияПериода;
	
	ОрганизацииДляНастройки = Новый Массив; // Пусто - все организации
	Если Параметры.Свойство("ОрганизацииДляНастройки") Тогда
		ОрганизацииДляНастройки = Параметры.ОрганизацииДляНастройки;
	КонецЕсли;
	
	МассивВидовСчетовРеглУчета = Неопределено;
	Параметры.Свойство("МассивВидовСчетовРеглУчета", МассивВидовСчетовРеглУчета);
	
	МассивСкрываемыхЭлементов = Неопределено;
	Параметры.Свойство("МассивСкрываемыхЭлементов", МассивСкрываемыхЭлементов);
	
	Если Параметры.Свойство("ПоказыватьТолькоТребующиеНастройки") Тогда
		ПоказыватьТолькоТребующиеНастройки = Параметры.ПоказыватьТолькоТребующиеНастройки;
	КонецЕсли;
	
	#КонецОбласти
	
	ЗаполнитьСписокВыбораОрганизации(ОрганизацииДляНастройки);
				
	ПанельУправленияСвернута = Ложь;
	РедактированиеЗаполненныхСчетов = Ложь;
	ПоказыватьОбщуюНастройку = 1;
	
	СоздатьСтруктуруТаблицФормы();
	ЗаполнитьСвойстваСтруктурыТаблицФормы(МассивВидовСчетовРеглУчета);
	
	ЗаполнитьТаблицыНастройки();
	
	УстановитьСвойстваЭлементовФормы(МассивВидовСчетовРеглУчета, МассивСкрываемыхЭлементов);
	
	УстановитьДоступныеСчетаУчета();
	
	Если Параметры.Свойство("ТекущаяСтраница") И Элементы.ТекущаяТаблицаНастройки.СписокВыбора.НайтиПоЗначению(Параметры.ТекущаяСтраница) <> Неопределено Тогда
		ТекущаяТаблицаНастройки = Параметры.ТекущаяСтраница;
	Иначе
		ТекущаяТаблицаНастройки = Элементы.ТекущаяТаблицаНастройки.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	УстановитьТекущуюСтраницу(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		ВыполняетсяЗакрытие = Истина;
		ТекстПредупреждения = 
		НСтр("ru = 'Настройки счетов были изменены, но не сохранены. Для того, чтобы изменения вступили в силу следует сохранить настройку.'");
		Возврат;
	КонецЕсли;
		
	Если НЕ ВыполняетсяЗакрытие и Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Настройки счетов были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        СохранитьНастройкиОтраженияВУчете();
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ИзмененыНастройкиОтраженияВУчете И Не ЗавершениеРаботы Тогда
		Оповестить("ИзмененыНастройкиОтраженияВУчете");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПорядокОтраженияНоменклатуры" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаНоменклатуры");		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияНоменклатурыПереданнойНаКомиссию" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаНоменклатурыПереданнойНаКомиссию");		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияРасчетовСПартнерами" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаРасчетовСПартнерами");		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияДоходов" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаДоходов");		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияРасходов" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаРасходов");		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияПроизводства" Тогда
		ЗаполнитьТаблицыНастройки("СчетаУчетаПроизводства");		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбораНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоТребующиеНастройкиПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОбщуюНастройкуПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	ОбновитьПредставлениеСпискаВыбораСтраниц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТаблицаНастройкиПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаНоменклатуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаНоменклатурыОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыСклад Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Склад);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаНоменклатуры");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаНоменклатуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаНоменклатурыГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаНоменклатурыПереданнойНаКомиссию

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаНоменклатурыПереданнойНаКомиссию");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаРасчетов

&НаКлиенте
Процедура СчетаУчетаРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаРасчетовСПартнерамиОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасчетовСПартнерамиГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовСПартнерамиПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовСПартнерамиПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовСПартнерамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаРасчетовСПартнерами");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаРасчетовСПартнерами

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасчетовСПартнерамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасчетовСПартнерамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасчетовСПартнерамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасчетовСПартнерамиПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаДоходов

&НаКлиенте
Процедура СчетаУчетаДоходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаДоходовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаДоходовПодразделение Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Подразделение);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаДоходовСтатьяДоходов Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.СтатьяДоходов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаДоходов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаДоходов

&НаКлиенте
Процедура ОбщиеСчетаУчетаДоходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаДоходовСтатьяДоходов Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаДоходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаДоходовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаРасходов

&НаКлиенте
Процедура СчетаУчетаРасходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаРасходовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасходовПодразделение Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Подразделение);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасходовСтатьяРасходов Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.СтатьяРасходов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущийЭлемент.Имя = "СчетаУчетаРасходовСчетУчета" Тогда
		Элементы.СчетаУчетаРасходовСчетУчета.ПараметрыВыбора = ПараметрыВыбора("СчетаУчетаРасходов", "СчетУчета", Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаРасходов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаРасходов

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаРасходовСтатьяРасходов Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасходовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ОбщиеСчетаУчетаРасходовСчетУчета" Тогда
		Элементы.ОбщиеСчетаУчетаРасходовСчетУчета.ПараметрыВыбора = ПараметрыВыбора("ОбщиеСчетаУчетаРасходов", "СчетУчета", Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаРасходовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаТМЦВЭксплуатации

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.СчетаУчетаТМЦВЭксплуатацииОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаТМЦВЭксплуатацииКатегорияЭксплуатации Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.КатегорияЭксплуатации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаТМЦВЭксплуатации");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаТМЦВЭксплуатации

&НаКлиенте
Процедура ОбщиеСчетаУчетаТМЦВЭксплуатацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаТМЦВЭксплуатацииКатегорияЭксплуатации Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаТМЦВЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаТМЦВЭксплуатацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаТМЦВЭксплуатацииПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаСертификатов

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаПодарочныхСертификатовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаПодарочныхСертификатовВидСертификата Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ВидСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаПодарочныхСертификатов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеСчетаУчетаПодарочныхСертификатов

&НаКлиенте
Процедура ОбщиеСчетаУчетаПодарочныхСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбщиеСчетаУчетаПодарочныхСертификатовВидСертификата Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаПодарочныхСертификатовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(Элемент.Имя, Элемент.ТекущиеДанные);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеСчетаУчетаПодарочныхСертификатовПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаНезавершенногоПроизводства

&НаКлиенте
Процедура СчетаУчетаНезавершенногоПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СчетаУчетаПроизводстваОрганизация Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Организация);		
	ИначеЕсли Поле = Элементы.СчетаУчетаПроизводстваПодразделение Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.МестоПроизводства);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНезавершенногоПроизводстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНезавершенногоПроизводстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПроизводстваПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПроизводстваПослеУдаления(Элемент)
	Модифицированность = Истина;
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПроизводстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаПроизводства");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаДенежныхСредств

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СчетаУчетаДенежныхСредствОрганизация Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Организация);		
	ИначеЕсли Поле = Элементы.СчетаУчетаДенежныхСредствАналитикаУчета Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АналитикаУчета);		
	ИначеЕсли Поле = Элементы.СчетаУчетаДенежныхСредствТипДенежныхСредств Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ТипДенежныхСредств);
	ИначеЕсли Поле = Элементы.СчетаУчетаДенежныхСредствВалюта Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбновитьИзмененныеДанные(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, ""), Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущийЭлемент.Имя = "СчетаУчетаДенежныхСредствСчетУчета" Тогда
		Элементы.СчетаУчетаДенежныхСредствСчетУчета.ПараметрыВыбора = ПараметрыВыбора("СчетаУчетаДенежныхСредств", "СчетУчета", Элемент.ТекущиеДанные.ТипДенежныхСредств);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(Элемент.Имя, Элемент.ТекущиеДанные);
	ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(Элемент.ТекущиеДанные.ТребуетсяНастройка, ТребуетсяНастройка);
	ИзменитьЧислоТребующихсяНастроек(Элемент.Имя, ЧислоИзменения);
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	Элемент.ТекущиеДанные.ТребуетсяНастройка = ТребуетсяНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиРедактирования(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	ИмяТекущейТаблицы = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	ИмяСчета = СтрЗаменить(Элемент.Имя, ИмяТекущейТаблицы, "");
	ТекущаяСтрока = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	
	//Сбросим флаг по умолчанию:
	Если ТекущаяСтрока.Свойство(ИмяСчета + "ПоУмолчанию") Тогда
		ТекущаяСтрока[ИмяСчета + "ПоУмолчанию"] = Ложь;
	КонецЕсли;
	
	ОбновитьИзмененныеДанные(ИмяСчета, ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройкуИЗакрыть(Команда)
	
	СохранитьНастройкиОтраженияВУчете();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	СохранитьНастройкиОтраженияВУчете();
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройку(Команда)
	
	ЗаполнитьТаблицуКПрименениюНастроки();
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	Если КоличествоДокументов > 0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Новая настройка будет применена для %1. Продолжить?'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
	    КодОтвета = Неопределено;

	    ПоказатьВопрос(Новый ОписаниеОповещения("ПрименитьНастройкуЗавершение", ЭтотОбъект, Новый Структура("КоличествоДокументов", КоличествоДокументов)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	Иначе
		СохранитьНастройкиОтраженияВУчете();
	КонецЕсли;
	
	ПрименитьНастройкуФрагмент(КоличествоДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуФрагмент(Знач КоличествоДокументов)
    
    ОповеститьПользователяОПримененииНастройки(КоличествоДокументов);

КонецПроцедуры

&НаКлиенте
Процедура АнализСчетовТребующихНастройки(Команда)
	
	Результат = АнализСчетовТребующихНастройкиСервер();
	
	Если Результат.Статус = "Выполняется" Тогда
		ОповещениеФормаДлительнойОперацииЗакрыта = Новый ОписаниеОповещения("ВыполнениеФоновогоЗаданияЗавершено", ЭтотОбъект, Ложь);
		ПараметрыФормы = ИнициализироватьПараметрыФормыДлительнойОперации(Результат);
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеФормаДлительнойОперацииЗакрыта, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанельУправления(Команда)
	
	ПанельУправленияСвернута = НЕ ПанельУправленияСвернута;
	
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПанельУправления(Команда)
	
	ПанельУправленияСвернута = НЕ ПанельУправленияСвернута;
	
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетаУчета(Команда)
	
	ИмяТекущейТаблицы = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	МассивСчетов = СчетаУчетаТаблицы(ИмяТекущейТаблицы);
	
	ТребуетсяНастройка = Ложь;
	РедактированиеРазрешено = РедактированиеЗаполненныхСчетов;
	ВыделенныеСтроки = Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				
		СтрокаТаблицы = ЭтотОбъект[ИмяТекущейТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ТребуетсяНастройка = СтрокаТаблицы.ТребуетсяНастройка;	
		
		Если Не РедактированиеРазрешено Тогда
			Для каждого Счет из МассивСчетов Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы[Счет]) Тогда
					РедактированиеРазрешено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
						
		Если ТребуетсяНастройка И РедактированиеРазрешено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;		
	
	Если Не ТребуетсяНастройка Тогда 
		ПоказатьПредупреждение(,НСтр("ru= 'Для выделенных строк все необходимые счета указаны.'")); 
		Возврат; 
	КонецЕсли;
	
	Если Не РедактированиеРазрешено Тогда
		ПоказатьПредупреждение(,НСтр("ru= 'Для выделенных строк нельзя изменить счета учета (нельзя изменять заполненные счета учета).'")); 
		Возврат; 
	КонецЕсли;
		
	СтруктураСчетов = Новый Структура;
	Для каждого Счет из МассивСчетов Цикл
		ПараметрыВыбора = ПараметрыВыбора(ИмяТекущейТаблицы, Счет);
		Если Счет = "СчетУчета" Тогда
			ОкончаниеСчета = СтрЗаменить(ИмяТекущейТаблицы, "Общие", "");
			ОкончаниеСчета = СтрЗаменить(ОкончаниеСчета, "СчетаУчета", "");
			Счет = Счет + ОкончаниеСчета;
		КонецЕсли;
		СтруктураСчетов.Вставить(Счет, ПараметрыВыбора);
	КонецЦикла;
	СтруктураПараметры = ПараметрыОткрытияГрупповойНастройкиСчетов(СтруктураСчетов);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("УказатьСчетаУчетаЗавершение", ЭтотОбъект, ИмяТекущейТаблицы);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", 
		СтруктураПараметры,,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ОповещениеРазблокированиеРеквизитовЗакрытие = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("РедактированиеРазрешено", РедактированиеЗаполненныхСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РазблокированиеРеквизитов",
		ПараметрыФормы, ЭтотОбъект, , , , ОповещениеРазблокированиеРеквизитовЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

#Область ПроцедурыОбработчикиКомандОбновленияТаблицНастроек

&НаКлиенте
Процедура ОповеститьПользователяОПримененииНастройки(КоличествоДокументов)
	
	ТекстСообщения = "";
	
	Если КоличествоДокументов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройка применена для %1'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отработано %1'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствуют документы, требующие применения настройки'");
		ТекстЗаголовка = НСтр("ru = 'Отсутствуют документы для настройки'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	ИмяТекущейТаблицы = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	ЗаполнитьТаблицыНастройки(ИмяТекущейТаблицы);
	ОбновитьПредставлениеСпискаВыбораСтраниц(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаПериод(Команда)
	ИмяТекущейТаблицы = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	ПараметрыПериода = Новый Структура("НачалоПериода, КонецПериода", ДобавитьМесяц(ДатаОкончанияПериода.Дата, -1), ДатаОкончанияПериода.Дата);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПериодаДобавленияЗавершение", ЭтотОбъект, ИмяТекущейТаблицы);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыПериода, ЭтотОбъект, , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоНезаполненнымСчетам(Команда)
	
	Результат = ДобавитьЗаписиВТаблицуСервер("ПоНеотраженным");
	
	Если Результат.Статус = "Выполняется" Тогда
		ОповещениеФормаДлительнойОперацииЗакрыта = Новый ОписаниеОповещения("ВыполнениеФоновогоЗаданияЗавершено", ЭтотОбъект, Истина);
		ПараметрыФормы = ИнициализироватьПараметрыФормыДлительнойОперации(Результат);
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеФормаДлительнойОперацииЗакрыта, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиКомандОткрытияФормРасшифровокДанных

&НаКлиенте
Функция СтруктураОтбораДанных()
	
	СтрокаТаблицы = Элементы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Склад, ГруппаФинансовогоУчета",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Склад,
			СтрокаТаблицы.ГруппаФинансовогоУчета);
	Иначе
		СтруктураОтбор = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтбор;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеЕслиНеВыбранаСтрока()
	
	ПоказатьПредупреждение(, НСтр("ru= 'Выберите строку для расшифровки'"), 10);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоНоменклатуре(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамПродажи(Команда)
	
	СтруктураОтбор = СтруктураОтбораДанных();
	Если СтруктураОтбор <> Неопределено Тогда
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамПродаж", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамПоступления(Команда)
	
	СтруктураОтбор = СтруктураОтбораДанных();
	Если СтруктураОтбор <> Неопределено Тогда
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамПоступления", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоСоглашениямСКлиентами(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетовСПартнерами.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураМенеджер = Новый Структура("Менеджер");
		СтруктураПараметры = Новый Структура("Отбор, СтруктураБыстрогоОтбора",
			СтруктураОтбор,
			СтруктураМенеджер);
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоСоглашениямСПоставщиками(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетовСПартнерами.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураМенеджер = Новый Структура("Менеджер");
		СтруктураПараметры = Новый Структура("Отбор, СтруктураБыстрогоОтбора",
			СтруктураОтбор,
			СтруктураМенеджер);
		ОткрытьФорму("Справочник.СоглашенияСПоставщиками.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетовСКлиентами(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетовСПартнерами.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ГруппаФинансовогоУчета", СтрокаТаблицы.Организация, СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамРасчетовСКлиентами", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетовСПоставщиками(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетовСПартнерами.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ГруппаФинансовогоУчета", СтрокаТаблицы.Организация, СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамРасчетовСПоставщиками", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамДоходы(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаДоходов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Подразделение, СтатьяДоходов",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.СтатьяДоходов);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияДоходов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасходы(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Подразделение, СтатьяРасходов",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.СтатьяРасходов);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияРасходов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетыПоСертификатам(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаПодарочныхСертификатов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ВидСертификата",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.ВидСертификата);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияСертификатов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыОбработчикиКомандСозданияНовыхНастроекСчетовУчета

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаНоменклатуры(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаНоменклатуры");
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаНоменклатуры()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаНоменклатурыПереданнойНаКомиссию(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаНоменклатурыПереданнойНаКомиссию");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаРасчетов(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаРасчетовСПартнерами");
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаРасчетов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаДоходов(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаДоходов");
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаДоходов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаРасходов(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаРасходов");
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаРасходов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаТМЦ(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаТМЦВЭксплуатации");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаСертификатов(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаПодарочныхСертификатов");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаПроизводства(Команда)
	
	ОткрытьФормуСозданияНовойСтрокиИсключения("СчетаУчетаПроизводства");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ОформлениеСчетов
	
	ТаблицыФормы = СоответствиеТаблицИПолейВидамСчетовРеглУчета();
	
	Для каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ИмяТаблицы = ТаблицаФормы.Ключ;
		ЕстьОбщиеНастройки = Не ИмяТаблицы = "СчетаУчетаПроизводства" И Не ИмяТаблицы = "СчетаУчетаДенежныхСредств";
		Для каждого СоответствиеСчетаУчетаВидуСчета Из ТаблицаФормы.Значение Цикл
			
			СчетУчета = СоответствиеСчетаУчетаВидуСчета.Ключ;
			
			Если ЕстьОбщиеНастройки Тогда
				// Оформление счетов по умолчанию:
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы[ИмяТаблицы + СчетУчета].Имя);
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяТаблицы + "." + СчетУчета + "ПоУмолчанию", Истина);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
					ИмяТаблицы + "." + СчетУчета, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
			КонецЕсли;
			
			// Оформление счетов требующих заполнения:
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы[ИмяТаблицы + СчетУчета].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
				ИмяТаблицы + "." + "ТребуетсяНастройка" + ?(ТаблицаФормы.Значение.Количество() = 1, "", СчетУчета), Истина);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
				ИмяТаблицы + "." + СчетУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
			Если ЕстьОбщиеНастройки	И (ИмяТаблицы <> "СчетаУчетаНоменклатурыПереданнойНаКомиссию" ИЛИ СчетУчета = "СчетУчетаПередачиНаКомиссию") Тогда
				// Оформление счетов требующих заполнения:
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Общие" + ИмяТаблицы + СчетУчета].Имя);
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Общие" + ИмяТаблицы + "." + "ТребуетсяНастройка"
					+ ?(ТаблицаФормы.Значение.Количество() = 1 ИЛИ СчетУчета = "СчетУчетаПередачиНаКомиссию", "", СчетУчета), Истина);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
					"Общие" + ИмяТаблицы + "." + СчетУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			КонецЕсли;
			
			// Оформление счетов не требующих заполнения:
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы[ИмяТаблицы + СчетУчета].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
				ИмяТаблицы + "." + "ТребуетсяНастройка" + ?(ТаблицаФормы.Значение.Количество() = 1, "", СчетУчета), Ложь);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
				ИмяТаблицы + "." + СчетУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
				ИмяТаблицы + ".ИзмененныеДанные", СчетУчета, ВидСравненияКомпоновкиДанных.НеСодержит);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
			
			Если ЕстьОбщиеНастройки	И (ИмяТаблицы <> "СчетаУчетаНоменклатурыПереданнойНаКомиссию" ИЛИ СчетУчета = "СчетУчетаПередачиНаКомиссию") Тогда
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Общие" + ИмяТаблицы + СчетУчета].Имя);
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Общие" + ИмяТаблицы + "." + "ТребуетсяНастройка"
					+ ?(ТаблицаФормы.Значение.Количество() = 1 ИЛИ СчетУчета = "СчетУчетаПередачиНаКомиссию", "", СчетУчета), Ложь);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
					"Общие" + ИмяТаблицы + "." + СчетУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
					"Общие" + ИмяТаблицы + ".ИзмененныеДанные", СчетУчета, ВидСравненияКомпоновкиДанных.НеСодержит);
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
				Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;
	
	#КонецОбласти
		
	#Область Номенклатура
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.ГруппаФинансовогоУчета", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаНоменклатурыГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатуры.АналитикаУчета", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыСклад.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.Склад", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
							
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродажПоУмолчанию", Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродажПоУмолчанию", Ложь);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СтатьяДоходовРегл", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж", ПланыСчетов.Хозрасчетный.ПрочиеДоходы, ВидСравненияКомпоновкиДанных.НеРавно);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаНоменклатурыСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатуры.СтатьяДоходовРегл", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаНоменклатурыСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж", ПланыСчетов.Хозрасчетный.ПрочиеДоходы, ВидСравненияКомпоновкиДанных.НеРавно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатуры.СтатьяДоходовРегл", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
		
	#Область НоменклатураПереданнаяНаКомиссию
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.ГруппаФинансовогоУчета",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию.АналитикаУчета",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродаж",
		ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродажПоУмолчанию", Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродаж",
		ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродажПоУмолчанию", Ложь);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СтатьяДоходовРегл",
		Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСтатьяДоходовРегл.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродаж",
		ПланыСчетов.Хозрасчетный.ПрочиеДоходы, ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область РасчетыСПартнерами
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаРасчетовСПартнерамиГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаРасчетовСПартнерами.ГруппаФинансовогоУчета", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиГруппаФинансовогоУчета.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаРасчетовСПартнерами.АналитикаУчета", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
		
	#КонецОбласти
	
	#Область ТМЦВЭксплуатации
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СчетаУчетаТМЦВЭксплуатацииКатегорияЭксплуатации.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "СчетаУчетаТМЦВЭксплуатации.КатегорияЭксплуатации", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ОбщиеСчетаУчетаТМЦВЭксплуатацииКатегорияЭксплуатации.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ОбщиеСчетаУчетаТМЦВЭксплуатации.АналитикаУчета", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указана'"));
		
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы(МассивВидовСчетовРеглУчета, МассивСкрываемыхЭлементов)
	
	#Область ЗаполнениеСпискаВыбораСтраниц
	
	МассивТаблицДляУдаления = Новый Массив;
	Для каждого Таблица из Элементы.ТекущаяТаблицаНастройки.СписокВыбора Цикл;
		
		Если Не (СтруктураТаблицФормы[Таблица.Значение].Используется
			ИЛИ СтруктураТаблицФормы.Свойство("Общие"+Таблица.Значение)
			И СтруктураТаблицФормы["Общие"+Таблица.Значение].Используется) Тогда
				МассивТаблицДляУдаления.Добавить(Таблица);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТаблицаДляУдаления из МассивТаблицДляУдаления Цикл
		Элементы.ТекущаяТаблицаНастройки.СписокВыбора.Удалить(ТаблицаДляУдаления);
	КонецЦикла;
	
	// Если показывается только одна страница - скрываем поле переключателя страниц:
	Элементы.ГруппаУправлениеОткрытиемСтраниц.Видимость = Элементы.ТекущаяТаблицаНастройки.СписокВыбора.Количество() <> 1;
	
	#КонецОбласти
	
	Если МассивВидовСчетовРеглУчета <> Неопределено Тогда
		ТаблицыФормы = СоответствиеТаблицИПолейВидамСчетовРеглУчета();
	КонецЕсли;		
	
	Для каждого Таблица из СтруктураТаблицФормы Цикл
		
		// Управление свойствами соответствующих страниц:
		Элементы["Страница"+Таблица.Ключ].Видимость = Таблица.Значение.Используется;
		Элементы["Страница"+Таблица.Ключ].ТолькоПросмотр = Не Таблица.Значение.Изменяется;
		
		// Скрытие элементов страниц в зависимости от отбора видов счетов:
		Если Таблица.Значение.Используется И МассивВидовСчетовРеглУчета <> Неопределено Тогда
			СоответствиеТекущейТаблицы = ТаблицыФормы.Получить(СтрЗаменить(Таблица.Ключ, "Общие", ""));
			Для каждого ПолеТаблицы из СоответствиеТекущейТаблицы Цикл
				Если Таблица.Ключ = "ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию" И ПолеТаблицы.Ключ <> "СчетУчетаПередачиНаКомиссию" Тогда
					//Для таблица общих счетов учета номенклатуры на комиссии есть только счет на комиссии, все остальные счета настраиваются в "ОбщиеСчетаУчетаНоменклатуры".
					Продолжить;
				КонецЕсли;
				Элементы[Таблица.Ключ+ПолеТаблицы.Ключ].Видимость = МассивВидовСчетовРеглУчета.Найти(ПолеТаблицы.Значение) <> Неопределено;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	Если МассивСкрываемыхЭлементов <> Неопределено Тогда
		Для каждого ИмяСкрываемогоЭлемента из МассивСкрываемыхЭлементов Цикл
			СкрываемыйЭлемент = Элементы.Найти(ИмяСкрываемогоЭлемента);
			Если Не СкрываемыйЭлемент = Неопределено Тогда
				СкрываемыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоОрганизацииИФункциональнымОпциям();
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваСтруктурыТаблицФормы(ВидыСчетовРеглУчета)
		
	#Область СоответствиеТаблицИИспользуемыхФункциональныхОпций
	
	СоответствиеТаблицИИспользуемыхФункциональныхОпций = Новый Соответствие;
	СоответствиеТаблицИИспользуемыхФункциональныхОпций.Вставить("СчетаУчетаПодарочныхСертификатов", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	СоответствиеТаблицИИспользуемыхФункциональныхОпций.Вставить("ОбщиеСчетаУчетаПодарочныхСертификатов", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	СоответствиеТаблицИИспользуемыхФункциональныхОпций.Вставить("СчетаУчетаПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство"));
	
	#КонецОбласти
	
	#Область СоответствиеТаблицИИспользуемыхМетаданных
	
	СоответствиеТаблицИИспользуемыхМетаданных = Новый Соответствие;

	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаНоменклатуры", "РегистрСведений.ПорядокОтраженияНоменклатуры");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаНоменклатуры", "Справочник.ГруппыФинансовогоУчетаНоменклатуры");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", "РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию", "Справочник.ГруппыФинансовогоУчетаНоменклатуры");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаТМЦВЭксплуатации", "РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаТМЦВЭксплуатации", "Справочник.КатегорииЭксплуатации");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаДенежныхСредств", "Справочник.БанковскиеСчетаОрганизаций, Справочник.Кассы");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаПодарочныхСертификатов", "РегистрСведений.ПорядокОтраженияПодарочныхСертификатов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаПодарочныхСертификатов", "Справочник.ВидыПодарочныхСертификатов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаРасчетовСПартнерами", "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаРасчетовСПартнерами", "Справочник.ГруппыФинансовогоУчетаРасчетов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаПроизводства", "РегистрСведений.ПорядокОтраженияПроизводства");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ТекстЗапросаСчетаУчетаРасходов", "РегистрСведений.ПорядокОтраженияРасходов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаРасходов", "ПланВидовХарактеристик.СтатьиРасходов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("СчетаУчетаДоходов", "РегистрСведений.ПорядокОтраженияДоходов");
	СоответствиеТаблицИИспользуемыхМетаданных.Вставить("ОбщиеСчетаУчетаДоходов", "ПланВидовХарактеристик.СтатьиДоходов");
	
	#КонецОбласти
	
	Если ВидыСчетовРеглУчета <> Неопределено Тогда
		ТаблицыФормы = СоответствиеТаблицИПолейВидамСчетовРеглУчета();
	КонецЕсли;
	
	Для каждого Таблица из СтруктураТаблицФормы Цикл
		
		// Проверка функциональных опций:
		ЗначениеИспользуемойФункциональнойОпции = СоответствиеТаблицИИспользуемыхФункциональныхОпций.Получить(Таблица.Ключ);
		
		Если ЗначениеИспользуемойФункциональнойОпции = Ложь Тогда
			Таблица.Значение.Используется = Ложь;
			Таблица.Значение.Изменяется = Ложь;
			Продолжить;
		КонецЕсли; 
		
		// Если заданы используемые виды счетов, проверяем использует ли таблица указанные в параметрах счета:
		Если ВидыСчетовРеглУчета <> Неопределено Тогда
			
			ТаблицаИспользуется = Ложь;
			СоответствиеСчетовТаблицыФормы = ТаблицыФормы.Получить(СтрЗаменить(Таблица.Ключ, "Общие", ""));
			
			Для каждого СоответствиеСчетаВидуСчета из СоответствиеСчетовТаблицыФормы Цикл
				Если ВидыСчетовРеглУчета.Найти(СоответствиеСчетаВидуСчета.Значение) <> Неопределено Тогда
					ТаблицаИспользуется = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ТаблицаИспользуется Тогда
				Таблица.Значение.Используется = Ложь;
				Таблица.Значение.Изменяется = Ложь;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка прав:
		МассивИспользуемыхМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СоответствиеТаблицИИспользуемыхМетаданных.Получить(Таблица.Ключ), ", ");
		
		ПравоЧтения = Истина;
		ПравоИзменения = Истина;
		
		Для каждого МетаданныеСтрокой из МассивИспользуемыхМетаданных Цикл
			ПравоЧтения = ПравоЧтения И ПравоДоступа("Чтение", Метаданные.НайтиПоПолномуИмени(МетаданныеСтрокой));
			ПравоИзменения = ПравоИзменения И ПравоДоступа("Изменение", Метаданные.НайтиПоПолномуИмени(МетаданныеСтрокой));
		КонецЦикла;
		
		Таблица.Значение.Используется = ПравоЧтения;
		Таблица.Значение.Изменяется = ПравоИзменения;			
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеТаблицИПолейВидамСчетовРеглУчета()
	
	ТаблицыФормы = Новый Соответствие;
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаНаСкладе", Перечисления.ВидыСчетовРеглУчета.НаСкладе);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаВыручкиОтПродаж", Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаСебестоимостиПродаж", Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаНДСПриПродаже", Перечисления.ВидыСчетовРеглУчета.НДСПриПродаже);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаВПути", Перечисления.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаНДСВПути", Перечисления.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности);
	ТаблицыФормы.Вставить("СчетаУчетаНоменклатуры", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаПередачиНаКомиссию", Перечисления.ВидыСчетовРеглУчета.ПередачаНаКомиссию);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаВыручкиОтПродаж", Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаСебестоимостиПродаж", Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаНДСПриПродаже", Перечисления.ВидыСчетовРеглУчета.НДСПриПродажеКомиссионера);
	ТаблицыФормы.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации);
	СоответствиеПолейВидамСчетов.Вставить("СчетЗабалансовогоУчета", Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом);
	ТаблицыФормы.Вставить("СчетаУчетаТМЦВЭксплуатации", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.ДенежныеСредства);
	ТаблицыФормы.Вставить("СчетаУчетаДенежныхСредств", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам);
	ТаблицыФормы.Вставить("СчетаУчетаПодарочныхСертификатов", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовСКлиентами", Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаАвансовПолученных", Перечисления.ВидыСчетовРеглУчета.АвансыПолученные);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовПоВознаграждению", Перечисления.ВидыСчетовРеглУчета.РасчетыПоВознаграждению);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовСПоставщиками", Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаАвансовВыданных", Перечисления.ВидыСчетовРеглУчета.АвансыВыданные);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовПоПретензиям", Перечисления.ВидыСчетовРеглУчета.РасчетыПоПретензиям);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовСКлиентамиТара", Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара);
	СоответствиеПолейВидамСчетов.Вставить("СчетУчетаРасчетовСПоставщикамиТара", Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара);
	ТаблицыФормы.Вставить("СчетаУчетаРасчетовСПартнерами", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.Производство);
	ТаблицыФормы.Вставить("СчетаУчетаПроизводства", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.Расходы);
	СоответствиеПолейВидамСчетов.Вставить("СчетСписанияОСНО", Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовОСНО);
	СоответствиеПолейВидамСчетов.Вставить("СчетСписанияЕНВД", Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД);
	ТаблицыФормы.Вставить("СчетаУчетаРасходов", СоответствиеПолейВидамСчетов);
	
	СоответствиеПолейВидамСчетов = Новый Соответствие;
	СоответствиеПолейВидамСчетов.Вставить("СчетУчета", Перечисления.ВидыСчетовРеглУчета.Доходы);
	ТаблицыФормы.Вставить("СчетаУчетаДоходов", СоответствиеПолейВидамСчетов);
	
	Возврат ТаблицыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизации(Ограничение)
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеСправочника.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	(&ВсеОрганизации ИЛИ ДанныеСправочника.Ссылка В (&СписокОрганизаций))
	|	И ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
	
	Запрос.УстановитьПараметр("ВсеОрганизации",    НЕ ЗначениеЗаполнено(Ограничение));
	Запрос.УстановитьПараметр("СписокОрганизаций", Ограничение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураТаблицыПоЗаголовку(Заголовок)
	Возврат Новый Структура("Представление, Используется, Изменяется, ТребуютНастройки", Заголовок, Ложь, Ложь, 0);
КонецФункции

&НаСервере
Процедура СоздатьСтруктуруТаблицФормы()
	
	СтруктураТаблиц = Новый Структура;

	СтруктураТаблиц.Вставить("СчетаУчетаНоменклатуры", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Номенклатуры'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаНоменклатуры", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Номенклатуры'")));

	СтруктураТаблиц.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Номенклатуры на комиссии'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Номенклатуры на комиссии'")));

	СтруктураТаблиц.Вставить("СчетаУчетаТМЦВЭксплуатации", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'ТМЦ в эксплуатации'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаТМЦВЭксплуатации", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'ТМЦ в эксплуатации'")));

	СтруктураТаблиц.Вставить("СчетаУчетаДенежныхСредств", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Денежных средств'")));

	СтруктураТаблиц.Вставить("СчетаУчетаПодарочныхСертификатов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Подарочных сертификатов'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаПодарочныхСертификатов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Подарочных сертификатов'")));

	СтруктураТаблиц.Вставить("СчетаУчетаРасчетовСПартнерами", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Расчетов с партнерами'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаРасчетовСПартнерами", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Расчетов с партнерами'")));

	СтруктураТаблиц.Вставить("СчетаУчетаПроизводства", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Производства'")));

	СтруктураТаблиц.Вставить("СчетаУчетаРасходов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Прочих расходов'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаРасходов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Прочих расходов'")));

	СтруктураТаблиц.Вставить("СчетаУчетаДоходов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Прочих доходов'")));
	СтруктураТаблиц.Вставить("ОбщиеСчетаУчетаДоходов", СтруктураТаблицыПоЗаголовку(НСтр("ru = 'Прочих доходов'")));

	СтруктураТаблицФормы = Новый ФиксированнаяСтруктура(СтруктураТаблиц);

КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПанелейУправления(Форма)
	
	Форма.Элементы.ГруппаПанельРазвернута.Видимость = НЕ Форма.ПанельУправленияСвернута;
	Форма.Элементы.ГруппаПанельСвернута.Видимость = Форма.ПанельУправленияСвернута;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоОрганизацииИФункциональнымОпциям()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
		Элементы.СчетаУчетаПроизводстваПодразделение.Заголовок = НСтр("ru='Подразделение / Переработчик'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФО = Новый Структура;
		ПараметрыФО.Вставить("Организация", Организация);
		ПлательщикЕНВД = ПолучитьФункциональнуюОпцию("ПлательщикЕНВД", ПараметрыФО);
	Иначе
		ПлательщикЕНВД = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Для каждого Таблица из Элементы.ТекущаяТаблицаНастройки.СписокВыбора Цикл
			Элементы[Таблица.Значение+"Организация"].Видимость = Не ЗначениеЗаполнено(Организация);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СчетаУчетаРасходовСчетСписанияЕНВД.Видимость = ПлательщикЕНВД;
	
	Если ПлательщикЕНВД Тогда
		Элементы.СчетаУчетаРасходовСчетСписанияОСНО.Заголовок = НСтр("ru='Счет списания (ОСНО)'");
	Иначе
		Элементы.СчетаУчетаРасходовСчетСписанияОСНО.Заголовок = НСтр("ru='Счет списания'");
	КонецЕсли;
	
	Элементы.СчетаУчетаДоходовДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	Элементы.СчетаУчетаРасходовДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	Элементы.СчетаУчетаТМЦВЭксплуатацииДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление");
	Элементы.СчетаУчетаРасчетовСПартнерамиДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	Элементы.СчетаУчетаНоменклатурыДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюДекорация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиСохраненияНастроекФормы(Форма)
	
	Форма.Элементы.СохранитьНастройкуИЗакрыть.Доступность = Форма.Модифицированность;
	Форма.Элементы.СохранитьНастройку.Доступность = Форма.Модифицированность;
	Форма.Элементы.ПрименитьНастройку.Доступность = Форма.Модифицированность;
	
КонецПроцедуры // УправлениеЭлементамиСохраненияНастроекФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма)
	
	// Определим таблицу на основании настроек и данных о доступности таблиц:
	ОбщаяТаблица = Неопределено;
	ТаблицаИсключений = Неопределено;
	ОбщаяТаблицаИспользуется = Форма.СтруктураТаблицФормы.Свойство("Общие"+Форма.ТекущаяТаблицаНастройки, ОбщаяТаблица) И ОбщаяТаблица.Используется;
	ТаблицаИсключенийИспользуется = Форма.СтруктураТаблицФормы.Свойство(Форма.ТекущаяТаблицаНастройки, ТаблицаИсключений) И ТаблицаИсключений.Используется;	
	
	ЭтоОбщаяТаблица = Форма.ПоказыватьОбщуюНастройку И ОбщаяТаблицаИспользуется ИЛИ Не ТаблицаИсключенийИспользуется;
	ИмяТекущейТаблицы = ?(ЭтоОбщаяТаблица, "Общие", "") + Форма.ТекущаяТаблицаНастройки;
	
	// Установим отбор:
	СтруктураОтбора = Новый Структура;
	Если Форма.ПоказыватьТолькоТребующиеНастройки Тогда
		СтруктураОтбора.Вставить("ТребуетсяНастройка", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Организация) И Не ЭтоОбщаяТаблица Тогда
		// Отбор по организации добавляем, если организация заполнена и в выводимой таблицы есть колонка "Организация" (это все настройки исключений)
		СтруктураОтбора.Вставить("Организация", Форма.Организация);
	КонецЕсли;
	
	ОтборСтрок = ?(СтруктураОтбора.Количество(), Новый ФиксированнаяСтруктура(СтруктураОтбора), Неопределено);
	
	Если Форма.Элементы.Страницы.ТекущаяСтраница.Имя <> "Страница"+ИмяТекущейТаблицы Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы["Страница"+ИмяТекущейТаблицы];
	КонецЕсли;
	Форма.Элементы[ИмяТекущейТаблицы].ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСпискаВыбораСтраниц(Форма)
	
	ЕстьНеНастроенные = Ложь;
	
	Для каждого Таблица из Форма.Элементы.ТекущаяТаблицаНастройки.СписокВыбора Цикл
		
		Данные = Неопределено;
		ОбщаяТаблицаПоказывается = Форма.СтруктураТаблицФормы.Свойство("Общие"+Таблица.Значение, Данные) И Данные.Используется;
		ИмяТекущейТаблицы = ?(Форма.ПоказыватьОбщуюНастройку И ОбщаяТаблицаПоказывается, "Общие", "") + Таблица.Значение;
		
		СтруктураТаблицыФормы = Форма.СтруктураТаблицФормы[ИмяТекущейТаблицы];
		
		Таблица.Представление = ПредставлениеТаблицы(СтруктураТаблицыФормы);
		
		ЕстьНеНастроенные = ЕстьНеНастроенные ИЛИ СтруктураТаблицыФормы.ТребуютНастройки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЧислоТребующихсяНастроек(ИмяТаблицы, ЧислоИзменения)
	
	Если ЧислоИзменения <> 0 Тогда
		СтруктураТаблицы = Неопределено;
		СтруктураТаблицФормы.Свойство(ИмяТаблицы, СтруктураТаблицы);
		Если СтруктураТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтруктураТаблицы.ТребуютНастройки = СтруктураТаблицы.ТребуютНастройки + ЧислоИзменения;
		ОбновитьПредставлениеСпискаВыбораСтраниц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТаблицы(СтруктураТаблицы)
	
	ТекстПредставления = СтруктураТаблицы.Представление;
	Если СтруктураТаблицы.ТребуютНастройки <> 0 Тогда
		ТекстПредставления = ТекстПредставления + " (" + СтруктураТаблицы.ТребуютНастройки + ")";
	КонецЕсли;
	
	Возврат ТекстПредставления;
		
КонецФункции

#КонецОбласти

#Область ЗаполнениеДоступныхСчетов

&НаСервере
Процедура УстановитьДоступныеСчетаУчета()
	
	#Область Номенклатура
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаНоменклатуры();
	
	// Счета учета товаров на складе.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаНаСкладе)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаНаСкладе.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаНаСкладе.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета товаров в пути и передачи на комиссию.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаПередачиНаКомиссию)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаВПути.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаПередачиНаКомиссию.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаВПути.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаПередачиНаКомиссию.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета выручки от продаж.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаВыручкиОтПродаж)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВыручкиОтПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета себестоимости от продаж.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаСебестоимостиПродаж)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаСебестоимостиПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета НДС при продаже.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаНДСПриПродаже)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаНДСПриПродаже.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаНДСПриПродаже.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаНДСПриПродаже.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета НДС при отгрузке без перехода права собственности
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаНДСВПути)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаНДСВПути.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаНоменклатурыСчетУчетаНДСВПути.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	#КонецОбласти
	
	#Область РасчетыСПартнерами
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасчетов();
	
	// Счета учета расчетов с поставщиками.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСПоставщиками.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСПоставщиками.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам выданным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаАвансовВыданных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовПоПретензиям.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаАвансовВыданных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовПоПретензиям.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов с клиентами.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКлиентами)));
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСКлиентами.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСКлиентами.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам полученным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаАвансовПолученных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаАвансовПолученных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссионному вознаграждению.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоКомиссии)));
	Элементы.СчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаРасчетовСПартнерамиСчетУчетаРасчетовПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по подарочным сертификатам.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетаУчетаПодарочныхСертификатовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаПодарочныхСертификатовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	#КонецОбласти
	
	#Область Доходы
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаПрочихДоходов();
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихДоходов)));
	Элементы.СчетаУчетаДоходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ОбщиеСчетаУчетаДоходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	#КонецОбласти
	
	#Область Расходы
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасходов();
	
	ДоступныеСчетаУчетаРасходов = Новый Структура;
	ДоступныеСчетаУчетаРасходов.Вставить("СчетаУчетаРасходов", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасходов));
	ДоступныеСчетаУчетаРасходов.Вставить("СчетаУчетаПрочихРасходов", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихРасходов));
	ДоступныеСчетаУчетаРасходов.Вставить("СчетаУчетаОС", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаОС));
	ДоступныеСчетаУчетаРасходов.Вставить("СчетаУчетаНМА", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаНМА));
	ДоступныеСчетаУчетаРасходов.Вставить("СчетаСписанияРасходов", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаСписания));
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов.СчетаУчетаРасходов));
	Элементы.СчетаУчетаРасходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ОбщиеСчетаУчетаРасходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов.СчетаСписанияРасходов));
	Элементы.СчетаУчетаРасходовСчетСписанияОСНО.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ОбщиеСчетаУчетаРасходовСчетСписанияОСНО.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов.СчетаСписанияРасходов));
	Элементы.СчетаУчетаРасходовСчетСписанияЕНВД.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ОбщиеСчетаУчетаРасходовСчетСписанияЕНВД.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированнаяСтруктура(ДоступныеСчетаУчетаРасходов);
	
	#КонецОбласти
	
	#Область ТМЦВЭксплуатации
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаТМЦВЭксплуатации();
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчета)));
	Элементы.СчетаУчетаТМЦВЭксплуатацииСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ОбщиеСчетаУчетаТМЦВЭксплуатацииСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаЗабалансовогоУчета)));
	Элементы.СчетаУчетаТМЦВЭксплуатацииСчетЗабалансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ОбщиеСчетаУчетаТМЦВЭксплуатацииСчетЗабалансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	#КонецОбласти
	
	#Область Производство
	
	СчетаУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаНЗП();
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаУчета)));
	Элементы.СчетаУчетаПроизводстваСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	#КонецОбласти
	
	#Область ДенежныеСредства
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаДенежныхСредств();
	
	ДоступныеСчетаУчетаДенежныхСредств = Новый Структура;
	ДоступныеСчетаУчетаДенежныхСредств.Вставить("СчетаБезналичныхДенежныхСредств", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаБезналичныхДенежныхСредств));
	ДоступныеСчетаУчетаДенежныхСредств.Вставить("СчетаНаличныхДенежныхСредств", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаНаличныхДенежныхСредств));
	
	ДоступныеСчетаУчетаДенежныхСредств = Новый ФиксированнаяСтруктура(ДоступныеСчетаУчетаДенежныхСредств);
	
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Функция МассивДоступныхСчетовРасходов(СтрокаТаблицы)
	
	ОС  = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
	ОбС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства");
	НМА = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА");
	
	ОсновнаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяДеятельность");
	ПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ПрочаяДеятельность");
	ОсновнаяИПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность");
	
	Если СтрокаТаблицы = Неопределено Или Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенностиНДС) Тогда
		МассивВозврата = ДоступныеСчетаУчетаРасходов.СчетаУчетаРасходов;		
	ИначеЕсли СтрокаТаблицы.ВидЦенностиНДС = ОС Или СтрокаТаблицы.ВидЦенностиНДС = ОбС Тогда
		МассивВозврата = ДоступныеСчетаУчетаРасходов.СчетаУчетаОС;
	ИначеЕсли СтрокаТаблицы.ВидЦенностиНДС = НМА Тогда
		МассивВозврата = ДоступныеСчетаУчетаРасходов.СчетаУчетаНМА;
	ИначеЕсли СтрокаТаблицы.ВидДеятельностиРасходов = ОсновнаяДеятельность Тогда
		МассивВозврата = ДоступныеСчетаУчетаРасходов.СчетаУчетаРасходов;
	ИначеЕсли СтрокаТаблицы.ВидДеятельностиРасходов = ПрочаяДеятельность Тогда
		МассивВозврата = ДоступныеСчетаУчетаРасходов.СчетаУчетаПрочихРасходов;
	Иначе
		МассивВозврата = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчетаРасходов.СчетаУчетаРасходов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчетаРасходов.СчетаУчетаПрочихРасходов);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Функция МассивДоступныхСчетовДенежныхСредств(ТипДенежныхСредств)
	
	МассивВозврата = Новый Массив;
	Если ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
		МассивВозврата = ДоступныеСчетаУчетаДенежныхСредств.СчетаБезналичныхДенежныхСредств;
	ИначеЕсли ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		МассивВозврата = ДоступныеСчетаУчетаДенежныхСредств.СчетаНаличныхДенежныхСредств;
	Иначе
		МассивВозврата = Новый Массив(ДоступныеСчетаУчетаДенежныхСредств.СчетаБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчетаДенежныхСредств.СчетаНаличныхДенежныхСредств, Истина);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Функция НовыйСчетУдовлетворяетПараметрамВыбора(ИмяСчета, СтрокаТаблицы, Счет)
	
	Если ИмяСчета = "СчетУчетаРасходов" Тогда
		Возврат МассивДоступныхСчетовРасходов(СтрокаТаблицы).Найти(Счет) <> Неопределено;
	ИначеЕсли ИмяСчета = "СчетУчетаДенежныхСредств" Тогда
		Возврат МассивДоступныхСчетовДенежныхСредств(СтрокаТаблицы.ТипДенежныхСредств).Найти(Счет) <> Неопределено;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыбора(ИмяТаблицы, Счет, ЗначениеУсловия = Неопределено)
	
	Если ИмяТаблицы = "СчетаУчетаРасходов" ИЛИ ИмяТаблицы = "ОбщиеСчетаУчетаРасходов" Тогда
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивДоступныхСчетовРасходов(ЗначениеУсловия)));
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ИначеЕсли ИмяТаблицы = "СчетаУчетаДенежныхСредств" Тогда
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивДоступныхСчетовДенежныхСредств(ЗначениеУсловия)));
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Иначе
		ПараметрыВыбора = Элементы[ИмяТаблицы+Счет].ПараметрыВыбора
	КонецЕсли;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ПараметрыОткрытияГрупповойНастройкиСчетов(СтруктураСчетов)
	
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("Организация", Организация);
	СтруктураПараметры.Вставить("СтруктураСчетов", СтруктураСчетов);
	
	Возврат СтруктураПараметры;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбораНастроек()
	
	УстановитьСвойстваЭлементовПоОрганизацииИФункциональнымОпциям();
	ОбновляемыеТаблицы = "";
	Для каждого Таблица из СтруктураТаблицФормы Цикл
		Если Таблица.Значение.Используется И СтрНачинаетсяС(Таблица.Ключ, "Общие") Тогда
			ОбновляемыеТаблицы = ОбновляемыеТаблицы + ?(ОбновляемыеТаблицы = "", "", ",") + Таблица.Ключ;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьТаблицыНастройки(ОбновляемыеТаблицы, Истина);
	ОбновитьИтоговыеДанныеПоКоличествуСтрокТребующихНастройки(Истина);
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацииДляНастройки()
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОрганизаций.Добавить(Организация);
	Иначе
		МассивОрганизаций = Элементы.Организация.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоДокументовПрописью(КоличествоДокументов)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоДокументов,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru = 'документ,документа,документов,м,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "документ");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоДокументов) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции // ЧислоДокументовПрописью()

&НаСервере
Процедура ЗаполнитьТаблицыНастройки(ИменаТаблицДляЗаполнения = Неопределено, ОбновлятьТолькоТребуемыеСчета = Ложь)
	
	МассивОрганизаций = Элементы.Организация.СписокВыбора.ВыгрузитьЗначения();
	
	ТаблицыДляЗаполнения = Новый Структура;
		
	Если ИменаТаблицДляЗаполнения = Неопределено Тогда
		Для каждого Таблица Из СтруктураТаблицФормы Цикл
			Если Таблица.Значение.Используется Тогда
				Значение = ?(ОбновлятьТолькоТребуемыеСчета, ЭтотОбъект[Таблица.Ключ].Выгрузить(), Неопределено);
				ТаблицыДляЗаполнения.Вставить(Таблица.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивТаблицДляЗаполнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблицДляЗаполнения);
		Для каждого ТаблицаДляЗаполнения из МассивТаблицДляЗаполнения Цикл
			Значение = ?(ОбновлятьТолькоТребуемыеСчета, ЭтотОбъект[ТаблицаДляЗаполнения].Выгрузить(), Неопределено);
			ТаблицыДляЗаполнения.Вставить(ТаблицаДляЗаполнения, Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполненныеТаблицы = Обработки.НастройкаОтраженияДокументовВРеглУчете.ТаблицыНастроекСчетов(ТаблицыДляЗаполнения, МассивОрганизаций, Организация);
	
	ОбновлениеТаблиц(ЗаполненныеТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СчетаУчетаТаблицы(ИмяТаблицы)
	
	МассивВозврата = Новый Массив;
	
	Если ИмяТаблицы = "СчетаУчетаНоменклатуры" Или ИмяТаблицы = "ОбщиеСчетаУчетаНоменклатуры" Тогда
		МассивВозврата.Добавить("СчетУчетаНаСкладе");
		МассивВозврата.Добавить("СчетУчетаВПути");
		МассивВозврата.Добавить("СчетУчетаНДСВПути");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаНоменклатурыПереданнойНаКомиссию" Или ИмяТаблицы = "ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию" Тогда
		МассивВозврата.Добавить("СчетУчетаПередачиНаКомиссию");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаНоменклатуры" Или ИмяТаблицы = "ОбщиеСчетаУчетаНоменклатуры" Или ИмяТаблицы = "СчетаУчетаНоменклатурыПереданнойНаКомиссию" Тогда
		МассивВозврата.Добавить("СчетУчетаВыручкиОтПродаж");
		МассивВозврата.Добавить("СчетУчетаСебестоимостиПродаж");
		МассивВозврата.Добавить("СчетУчетаНДСПриПродаже");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаРасчетовСПартнерами" Или ИмяТаблицы = "ОбщиеСчетаУчетаРасчетовСПартнерами" Тогда
		МассивВозврата.Добавить("СчетУчетаРасчетовСКлиентами");
		МассивВозврата.Добавить("СчетУчетаАвансовПолученных");
		МассивВозврата.Добавить("СчетУчетаРасчетовПоВознаграждению");
		МассивВозврата.Добавить("СчетУчетаРасчетовСПоставщиками");
		МассивВозврата.Добавить("СчетУчетаАвансовВыданных");
		МассивВозврата.Добавить("СчетУчетаРасчетовПоПретензиям");
		МассивВозврата.Добавить("СчетУчетаРасчетовСКлиентамиТара");
		МассивВозврата.Добавить("СчетУчетаРасчетовСПоставщикамиТара");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаТМЦВЭксплуатации" Или ИмяТаблицы = "ОбщиеСчетаУчетаТМЦВЭксплуатации"
		Или ИмяТаблицы = "СчетаУчетаПодарочныхСертификатов" Или ИмяТаблицы = "ОбщиеСчетаУчетаПодарочныхСертификатов"
		Или ИмяТаблицы = "СчетаУчетаДенежныхСредств" Или ИмяТаблицы = "СчетаУчетаПроизводства"
		Или ИмяТаблицы = "СчетаУчетаРасходов" Или ИмяТаблицы = "ОбщиеСчетаУчетаРасходов"
		Или ИмяТаблицы = "СчетаУчетаДоходов" Или ИмяТаблицы = "ОбщиеСчетаУчетаДоходов" Тогда
			МассивВозврата.Добавить("СчетУчета");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаТМЦВЭксплуатации" Или ИмяТаблицы = "ОбщиеСчетаУчетаТМЦВЭксплуатации" Тогда
		МассивВозврата.Добавить("СчетЗабалансовогоУчета");
	КонецЕсли;
	Если ИмяТаблицы = "СчетаУчетаРасходов" Или ИмяТаблицы = "ОбщиеСчетаУчетаРасходов" Тогда
		МассивВозврата.Добавить("СчетСписанияОСНО");
		МассивВозврата.Добавить("СчетСписанияЕНВД");
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Функция АнализСчетовТребующихНастройкиСервер()
	
	СтруктураЗаполняемыхТаблиц = Новый Структура;
	Для каждого Таблица из СтруктураТаблицФормы Цикл
		Если Таблица.Значение.Используется Тогда
			СтруктураЗаполняемыхТаблиц.Вставить(Таблица.Ключ, ЭтотОбъект[Таблица.Ключ].Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Анализ счетов требующих настройки и обновление таблиц соответствующих счетов'");
	ВыполняемыйМетод = "Обработки.НастройкаОтраженияДокументовВРеглУчете.АнализСчетовТребующихНастройкиИОбновлениеТаблиц";
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Таблицы", СтруктураЗаполняемыхТаблиц);
	ПараметрыОбработки.Вставить("МассивОрганизаций", ОрганизацииДляНастройки());
	ПараметрыОбработки.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = ЭтотОбъект.УникальныйИдентификатор;
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ОбновлениеТаблиц(РезультатФоновогоЗадания.АдресРезультата);
	ИначеЕсли РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При анализе требующихся счетов возникли ошибки. Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Функция ДобавитьЗаписиВТаблицуСервер(РежимАнализа, ДатаНачала = Неопределено, ДатаОкончания = Неопределено)
	
	НаименованиеЗадания = НСтр("ru = 'Обновление таблицы настройки счетов'");
	ИмяРегистра = СтрЗаменить(ТекущаяТаблицаНастройки, "СчетаУчета", "ПорядокОтражения");
	ВыполняемыйМетод = "РегистрыСведений."+ИмяРегистра+".ДополнитьТаблицуНаОснованииАнализаОпераций";
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("РежимАнализа", РежимАнализа);
	ПараметрыОбработки.Вставить("МассивОрганизаций", ОрганизацииДляНастройки());
	ПараметрыОбработки.Вставить("ЗаполняемаяТаблица", ЭтотОбъект[ТекущаяТаблицаНастройки].Выгрузить());
	Если РежимАнализа = "ЗаПериод" Тогда
		ПараметрыОбработки.Вставить("НачалоПериода", ДатаНачала);
		ПараметрыОбработки.Вставить("КонецПериода", ДатаОкончания);
	Иначе
		ПараметрыОбработки.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	КонецЕсли;
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = ЭтотОбъект.УникальныйИдентификатор;
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ОбновлениеТаблиц(РезультатФоновогоЗадания.АдресРезультата);
		УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	ИначеЕсли РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При обновлении таблицы счетов учета возникли ошибки. Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Процедура ОбновлениеТаблиц(Знач Результат)
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Результат = ПолучитьИзВременногоХранилища(Результат);
	КонецЕсли;
	
	Для каждого Таблица из Результат Цикл
		ЭтотОбъект[Таблица.Ключ].Загрузить(Таблица.Значение);
	КонецЦикла;
	
	ОбновитьИтоговыеДанныеПоКоличествуСтрокТребующихНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеДанныеПоКоличествуСтрокТребующихНастройки(ТолькоДетальные = Ложь)
	
	Для каждого Таблица из СтруктураТаблицФормы Цикл
		
		Отбор = Новый Структура("ТребуетсяНастройка", Истина);
		Если ЗначениеЗаполнено(Организация) И Не СтрНачинаетсяС(Таблица.Ключ, "Общие") Тогда
			Отбор.Вставить("Организация", Организация);
		КонецЕсли;
		
		Если Таблица.Значение.Используется Тогда
			МассивСтрокТребующихНастройки = ЭтотОбъект[Таблица.Ключ].НайтиСтроки(Отбор);
			Таблица.Значение.ТребуютНастройки = МассивСтрокТребующихНастройки.Количество();
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеСпискаВыбораСтраниц(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьПараметрыФормыДлительнойОперации(РезультатЗапускаФоновогоЗадания)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЗадания", РезультатЗапускаФоновогоЗадания.ИдентификаторЗадания);
	ПараметрыФормы.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыФормы.Вставить("АдресРезультата", РезультатЗапускаФоновогоЗадания.АдресРезультата);
		
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ТребуетсяНастройкаСчетовУчета(ИмяТаблицы, Строка)
	
	ТребуетсяНастройка = Ложь;
	
	МассивСчетов = СчетаУчетаТаблицы(ИмяТаблицы);
	
	Если МассивСчетов.Количество() = 1 Тогда
		ТребуетсяНастройка = Строка.ТребуетсяНастройка И Не ЗначениеЗаполнено(Строка[МассивСчетов.Получить(0)]);
	Иначе
		Для каждого Счет из МассивСчетов Цикл
			Строка["ТребуетсяНастройка"+Счет] = Строка["ТребуетсяНастройка"+Счет] И Не ЗначениеЗаполнено(Строка[Счет]);
			ТребуетсяНастройка = ТребуетсяНастройка ИЛИ Строка["ТребуетсяНастройка"+Счет];
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ТребуетсяНастройка;
	
КонецФункции

&НаКлиенте
Функция ИзменяемоеЧислоТребующихсяНастроек(СтароеЗначение, НовоеЗначение)
	
	Если СтароеЗначение = НовоеЗначение Тогда
		// Количество строк, требующих настройки не изменилось:
		Возврат 0;
	ИначеЕсли СтароеЗначение = Ложь Тогда
		// Строк, требующих настройки стало больше на 1:
		Возврат 1;
	Иначе
		// Строк, требующих настройки стало меньше на 1:
		Возврат -1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаВозможностиРедактирования(Элемент, Отказ)
	
	Если Не РедактированиеЗаполненныхСчетов Тогда
		
		ТекущееЗначениеСчета = Неопределено;
		ЭтоСчетПоУмолчанию = Неопределено;
		ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "");
		Элемент.ТекущиеДанные.Свойство(ИмяРеквизита, ТекущееЗначениеСчета);
		Элемент.ТекущиеДанные.Свойство(ИмяРеквизита+"ПоУмолчанию", ЭтоСчетПоУмолчанию);
		
		Если ЗначениеЗаполнено(ТекущееЗначениеСчета) И Не СтрНайти(Элемент.ТекущиеДанные.ИзмененныеДанные, ИмяРеквизита) Тогда
			ТекстПредупреждения = НСтр("ru = 'Редактирование указанных счетов не рекомендуется.'");
			Отказ = Истина;
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзмененныеДанные(ИмяПоля, СтрокаТаблицы);
	
	ЕстьИзмененныеДанные = ЗначениеЗаполнено(СтрокаТаблицы.ИзмененныеДанные);
	Если ЕстьИзмененныеДанные И Не СтрНайти(СтрокаТаблицы.ИзмененныеДанные, ИмяПоля) Тогда
		СтрокаТаблицы.ИзмененныеДанные = СтрокаТаблицы.ИзмененныеДанные + ", " + ИмяПоля;
	ИначеЕсли Не ЕстьИзмененныеДанные Тогда
		СтрокаТаблицы.ИзмененныеДанные = ИмяПоля;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСчетаИсключенийПриИзмененииСчетовПоУмолчанию(ИмяТаблицы, СтрокаОбщихНастроек)
	
	ИмяТаблицыИсключений = СтрЗаменить(ИмяТаблицы, "Общие", "");
	МассивСчетов = СчетаУчетаТаблицы(ИмяТаблицы);
	
	СоответствиеТаблицИсключенийИИменАналитикУчета = Новый Соответствие;
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаНоменклатуры", "ГруппаФинансовогоУчета");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", "ГруппаФинансовогоУчета");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаТМЦВЭксплуатации", "КатегорияЭксплуатации");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаПодарочныхСертификатов", "ВидСертификата");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаРасчетовСПартнерами", "ГруппаФинансовогоУчета");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаРасходов", "СтатьяРасходов");
	СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаДоходов", "СтатьяДоходов");
	
	ТаблицаИсключений = ЭтотОбъект[ИмяТаблицыИсключений];
	
	ПараметрыОтбора = Новый Структура(СоответствиеТаблицИсключенийИИменАналитикУчета.Получить(ИмяТаблицыИсключений), СтрокаОбщихНастроек.АналитикаУчета);
	СтрокиДляИзменения = ТаблицаИсключений.НайтиСтроки(ПараметрыОтбора);
	
	ИзменениеСтрокТребующихНастройки = 0;
	Для каждого ИзменяемаяСтрока из СтрокиДляИзменения Цикл
		Для каждого Счет из МассивСчетов Цикл
			Если ИзменяемаяСтрока[Счет+"ПоУмолчанию"] Тогда
				ИзменяемаяСтрока[Счет] = СтрокаОбщихНастроек[Счет];
			КонецЕсли;
		КонецЦикла;
		ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(ИмяТаблицыИсключений, ИзменяемаяСтрока);
		ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(ИзменяемаяСтрока.ТребуетсяНастройка, ТребуетсяНастройка);
		ИзменениеСтрокТребующихНастройки = ИзменениеСтрокТребующихНастройки + ЧислоИзменения;
		ИзменяемаяСтрока.ТребуетсяНастройка = ТребуетсяНастройка;
	КонецЦикла;
	ИзменитьЧислоТребующихсяНастроек(ИмяТаблицыИсключений, ИзменениеСтрокТребующихНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНовойСтрокиИсключения(ИмяТаблицы)
	
	ЗначенияЗаполнения = Новый Структура("Организация", Организация);
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения, ВозвратЗначенияБезЗаписи", ЗначенияЗаполнения, Истина);
	ОповещениеОДобавленииЗаписиИсключений = Новый ОписаниеОповещения("ЗаполнениеНовойЗаписиИсключения", ЭтотОбъект, ИмяТаблицы);
	ИмяОткрываемойФормы = "РегистрСведений." + СтрЗаменить(ИмяТаблицы, "СчетаУчета", "ПорядокОтражения") + ".ФормаЗаписи";
	ОткрытьФорму(ИмяОткрываемойФормы, СтруктураПараметры, ЭтотОбъект,,,, ОповещениеОДобавленииЗаписиИсключений, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура УказатьСчетаУчетаЗавершение(Результат, ИмяТаблицы) Экспорт
	
	СтруктураСчетов = Результат;
	
	Если СтруктураСчетов <> Неопределено Тогда
		
		ИзменениеСтрокТребующихНастройки = 0;
		ВыделенныеСтроки = Элементы[ИмяТаблицы].ВыделенныеСтроки;
		Для каждого ИдентификаторСтроки из ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = ЭтотОбъект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Для каждого ВыбранныйСчет из СтруктураСчетов Цикл
				
				ИмяСчета = ?(СтрокаТаблицы.Свойство(ВыбранныйСчет.Ключ), ВыбранныйСчет.Ключ, "СчетУчета");
				Если Не ЗначениеЗаполнено(СтрокаТаблицы[ИмяСчета]) И ЗначениеЗаполнено(ВыбранныйСчет.Значение)
					И НовыйСчетУдовлетворяетПараметрамВыбора(ВыбранныйСчет.Ключ, СтрокаТаблицы, ВыбранныйСчет.Значение) Тогда
						
						СтрокаТаблицы[ИмяСчета] = ВыбранныйСчет.Значение;
						Если СтрокаТаблицы.Свойство(ИмяСчета+"ПоУмолчанию") Тогда
							СтрокаТаблицы[ИмяСчета+"ПоУмолчанию"] = Ложь;
						КонецЕсли;
						ОбновитьИзмененныеДанные(ИмяСчета, СтрокаТаблицы);
						
				КонецЕсли;
				
			КонецЦикла;
			
			ТребуетсяНастройка = ТребуетсяНастройкаСчетовУчета(ИмяТаблицы, СтрокаТаблицы);
			ЧислоИзменения = ИзменяемоеЧислоТребующихсяНастроек(СтрокаТаблицы.ТребуетсяНастройка, ТребуетсяНастройка);
			ИзменениеСтрокТребующихНастройки = ИзменениеСтрокТребующихНастройки + ЧислоИзменения;
			СтрокаТаблицы.ТребуетсяНастройка = ТребуетсяНастройка;
			
		КонецЦикла;
		
		ИзменитьЧислоТребующихсяНастроек(ИмяТаблицы, ИзменениеСтрокТребующихНастройки);
		
		Модифицированность = Истина;
			
		УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаДобавленияЗавершение(Результат, ИмяТаблицы = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Результат = ДобавитьЗаписиВТаблицуСервер("ЗаПериод", Результат.НачалоПериода, Результат.КонецПериода);
	
		Если Результат.Статус = "Выполняется" Тогда
			ОповещениеФормаДлительнойОперацииЗакрыта = Новый ОписаниеОповещения("ВыполнениеФоновогоЗаданияЗавершено", ЭтотОбъект, Истина);
			ПараметрыФормы = ИнициализироватьПараметрыФормыДлительнойОперации(Результат);
			ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеФормаДлительнойОперацииЗакрыта, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РедактированиеЗаполненныхСчетов = Результат = Истина;
	Элементы.ФормаРазрешитьРедактированиеРеквизитовОбъекта.Пометка = Результат = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеФоновогоЗаданияЗавершено(РезультатЗакрытияФормыДлительнойОперации, ВыполняетсяДобавлениеЗаписейВТаблицу = Ложь) Экспорт
	Если РезультатЗакрытияФормыДлительнойОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатЗакрытияФормыДлительнойОперации.Статус = "Выполнено" Тогда
		ОбновлениеТаблиц(РезультатЗакрытияФормыДлительнойОперации.АдресРезультата);
		Если ВыполняетсяДобавлениеЗаписейВТаблицу Тогда
			УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли РезультатЗакрытияФормыДлительнойОперации.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При обновлении таблицы счетов учета возникли ошибки. Подробнее см. в журнале регистрации.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеНовойЗаписиИсключения(Результат, ИмяТаблицы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для номенклатуры возвращается если и СчетУчетаНДСПриЗакупке, который не анализируется в этой форме, удалим:
	Если Результат.Свойство("СчетУчетаНДСПриЗакупке") Тогда
		Результат.Удалить("СчетУчетаНДСПриЗакупке");
	КонецЕсли;
	
	#Область ПроверкиВозможностиДобавления
	
	СчетаУчета = СчетаУчетаТаблицы(ИмяТаблицы);
	СтруктураОтбора = Новый Структура;
	Для каждого ЭлементРезультата из Результат Цикл
		Если СчетаУчета.Найти(ЭлементРезультата.Ключ) = Неопределено И ЭлементРезультата.Ключ <> "СтатьяДоходовРегл" Тогда
			// Добавляем в структуру отбора только данные по подразделениям:
			СтруктураОтбора.Вставить(ЭлементРезультата.Ключ, ЭлементРезультата.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиССовпадающимиИзмерениями = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиССовпадающимиИзмерениями.Количество() > 0 Тогда
		Элементы[ИмяТаблицы].ТекущаяСтрока = СтрокиССовпадающимиИзмерениями.Получить(0).ПолучитьИдентификатор();
		ТекстПредупреждения = НСтр("ru = 'Строка с соответствующими измерениями уже есть в таблице исключений.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолучениеЗначенийПоУмолчанию
	
	Если ИмяТаблицы <> "СчетаУчетаПроизводства" Тогда
		
		СоответствиеТаблицИсключенийИИменАналитикУчета = Новый Соответствие;
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаНоменклатуры", "ГруппаФинансовогоУчета");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", "ГруппаФинансовогоУчета");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаТМЦВЭксплуатации", "КатегорияЭксплуатации");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаПодарочныхСертификатов", "ВидСертификата");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаРасчетовСПартнерами", "ГруппаФинансовогоУчета");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаРасходов", "СтатьяРасходов");
		СоответствиеТаблицИсключенийИИменАналитикУчета.Вставить("СчетаУчетаДоходов", "СтатьяДоходов");
		
		СтруктураОтбора = Новый Структура("АналитикаУчета", Результат[СоответствиеТаблицИсключенийИИменАналитикУчета.Получить(ИмяТаблицы)]);
		СтрокиСДаннойАналитикой = ЭтотОбъект["Общие"+ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
		
		ЗначенияПоУмолчанию = ?(СтрокиСДаннойАналитикой.Количество() > 0, СтрокиСДаннойАналитикой.Получить(0), Неопределено);
		
	КонецЕсли;
	
	#КонецОбласти
	
	НоваяСтрокаТаблицы = ЭтотОбъект[ИмяТаблицы].Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Результат);
	НоваяСтрокаТаблицы.ИзмененныеДанные = СтрСоединить(СчетаУчета, ", ");
	Если ЗначенияПоУмолчанию <> Неопределено Тогда
		Для каждого СчетУчета из СчетаУчетаТаблицы("Общие" + ИмяТаблицы) Цикл
			Если Не ЗначениеЗаполнено(НоваяСтрокаТаблицы[СчетУчета]) И ЗначениеЗаполнено(ЗначенияПоУмолчанию[СчетУчета]) Тогда
				НоваяСтрокаТаблицы[СчетУчета] = ЗначенияПоУмолчанию[СчетУчета];
				НоваяСтрокаТаблицы[СчетУчета+"ПоУмолчанию"] = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы[ИмяТаблицы].ТекущаяСтрока = НоваяСтрокаТаблицы.ПолучитьИдентификатор();
	УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоличествоДокументов = ДополнительныеПараметры.КоличествоДокументов;
    
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        ПрименитьНастройкуОтраженияВУчете();
        УправлениеЭлементамиСохраненияНастроекФормы(ЭтотОбъект);
    КонецЕсли;
    
    ПрименитьНастройкуФрагмент(КоличествоДокументов);

КонецПроцедуры

#КонецОбласти

#Область СохранениеДанных

&НаСервере
Процедура ЗаполнитьТаблицуКПрименениюНастроки()
	
	ТаблицаДокументов.Очистить();
	
	РегистрыСведений.ПорядокОтраженияНоменклатуры.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаНоменклатуры,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаНоменклатурыПереданнойНаКомиссию,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаРасчетовСПартнерами,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияДоходов.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаДоходов,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияРасходов.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаРасходов,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбщиеСчетаУчетаНоменклатуры()
	
	СоответствиеГФУиСчетаПередачиНаКомиссию = Новый Соответствие;
	Для каждого Стр из ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию Цикл
		Если ЗначениеЗаполнено(Стр.ИзмененныеДанные) И ЗначениеЗаполнено(Стр.АналитикаУчета) Тогда
			Стр.ИзмененныеДанные = "";
			СоответствиеГФУиСчетаПередачиНаКомиссию.Вставить(Стр.АналитикаУчета, Стр.СчетУчетаПередачиНаКомиссию);
		КонецЕсли;
	КонецЦикла;			
	
	Для каждого СтрокаТаблицы из ОбщиеСчетаУчетаНоменклатуры Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИзмененныеДанные) ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ИзмененныеДанные = "";
		
		ИзменяемыйОбъект = СтрокаТаблицы.АналитикаУчета.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ИзменяемыйОбъект, СтрокаТаблицы);
		
		ИзмененныйСчетПередачиНаКомиссию = СоответствиеГФУиСчетаПередачиНаКомиссию.Получить(СтрокаТаблицы.АналитикаУчета);
		Если ИзмененныйСчетПередачиНаКомиссию <> Неопределено Тогда
			ИзменяемыйОбъект.СчетУчетаПередачиНаКомиссию = ИзмененныйСчетПередачиНаКомиссию;
			СоответствиеГФУиСчетаПередачиНаКомиссию.Удалить(СтрокаТаблицы.АналитикаУчета);
		КонецЕсли;
		
		ИзменяемыйОбъект.Записать();
		
	КонецЦикла;
	
	// Записываем данные, которые не изменялись для номенклатуры, но были изменены для номенклатуры на комиссии:
	Для каждого КлючЗначениеСоответствия из СоответствиеГФУиСчетаПередачиНаКомиссию Цикл
		
		ИзменяемыйОбъект = КлючЗначениеСоответствия.Ключ.ПолучитьОбъект();
		
		ИзменяемыйОбъект.СчетУчетаПередачиНаКомиссию = КлючЗначениеСоответствия.Значение;
		
		ИзменяемыйОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбщиеСчетаУчета(Таблица, МассивИменСчетовУчета)
	
	Для каждого СтрокаТаблицы из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИзмененныеДанные) ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяемыйОбъект = СтрокаТаблицы.АналитикаУчета.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ИзменяемыйОбъект, СтрокаТаблицы, СтрокаТаблицы.ИзмененныеДанные);
		
		ИзменяемыйОбъект.Записать();
		
		СтрокаТаблицы.ИзмененныеДанные = "";
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПорядокОтраженияСчетовУчета(ИмяТаблицы)
	
	СчетаУчета = СчетаУчетаТаблицы(ИмяТаблицы);
	НаборЗаписей = РегистрыСведений[СтрЗаменить(ИмяТаблицы, "СчетаУчета", "ПорядокОтражения")].СоздатьНаборЗаписей();
	
	ЗамещатьЗаписи = Истина;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		// Очистим записи регистра по организациям для настройки, для того чтобы реализовать замещение записей по записываемым организациям:
		ЗамещатьЗаписи = Ложь;
		ОрганизацииДляНастройки = Элементы.Организация.СписокВыбора.ВыгрузитьЗначения();
		ОрганизацииДляНастройки.Добавить(Справочники.Организации.ПустаяСсылка());
		
		Для каждого ОрганизацияДляОчисткиЗаписей из ОрганизацииДляНастройки Цикл
			НаборЗаписей.Отбор.Организация.Установить(ОрганизацияДляОчисткиЗаписей);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Отбор.Сбросить();
	
	Для каждого СтрокаТаблицы из ЭтотОбъект[ИмяТаблицы] Цикл
				
		СтрокаЗаписейРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписейРегистра, СтрокаТаблицы);
		Для каждого СчетУчета из СчетаУчета Цикл
			ЭтоСчетПоУмолчанию = СтрокаТаблицы.Свойство(СчетУчета+"ПоУмолчанию") И СтрокаТаблицы[СчетУчета+"ПоУмолчанию"];
			Если ЭтоСчетПоУмолчанию Тогда
				СтрокаЗаписейРегистра[СчетУчета] = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.ИзмененныеДанные = "";
		
	КонецЦикла;
	
	// Запишем общую настройку:
	Если СтруктураТаблицФормы.Свойство("Общие"+ИмяТаблицы) Тогда
		
		СтрокаПустойАналитики = Неопределено;
		Для каждого Стр из ЭтотОбъект["Общие"+ИмяТаблицы] Цикл
			Если Не ЗначениеЗаполнено(Стр.АналитикаУчета) Тогда
				СтрокаПустойАналитики = Стр;
				Стр.ИзмененныеДанные = "";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПустойАналитики <> Неопределено Тогда
			СтрокаПустойЗаписейРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПустойЗаписейРегистра, СтрокаПустойАналитики);
		КонецЕсли;
		
		Если ИмяТаблицы = "СчетаУчетаНоменклатурыПереданнойНаКомиссию" Тогда
			СтрокаПустойАналитики = Неопределено;
			Для каждого Стр из ЭтотОбъект["ОбщиеСчетаУчетаНоменклатуры"] Цикл
				Если Не ЗначениеЗаполнено(Стр.АналитикаУчета) Тогда
					СтрокаПустойАналитики = Стр;
					Стр.ИзмененныеДанные = "";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПустойАналитики <> Неопределено Тогда
				СтрокаПустойЗаписейРегистра = ?(СтрокаПустойЗаписейРегистра = Неопределено, НаборЗаписей.Добавить(), СтрокаПустойЗаписейРегистра);
				ЗаполнитьЗначенияСвойств(СтрокаПустойЗаписейРегистра, СтрокаПустойАналитики);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей.Записать(ЗамещатьЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтраженияВУчете()
	
	НачатьТранзакцию();
	Попытка
		Для каждого Таблица из СтруктураТаблицФормы Цикл
			
			Если Не Таблица.Значение.Изменяется Тогда
				Продолжить;
			КонецЕсли;
			
			Если Таблица.Ключ = "СчетаУчетаДенежныхСредств" Тогда
				СохранитьОбщиеСчетаУчета(СчетаУчетаДенежныхСредств, СчетаУчетаТаблицы(Таблица.Ключ));
			ИначеЕсли Таблица.Ключ = "ОбщиеСчетаУчетаНоменклатуры" ИЛИ Таблица.Ключ = "ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию" Тогда
				СохранитьОбщиеСчетаУчетаНоменклатуры();
			Иначе
				Если СтрНачинаетсяС(Таблица.Ключ, "Общие") Тогда
					СохранитьОбщиеСчетаУчета(ЭтотОбъект[Таблица.Ключ], СчетаУчетаТаблицы(Таблица.Ключ));
				Иначе
					СохранитьПорядокОтраженияСчетовУчета(Таблица.Ключ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось сохранить настройки отражения в регл. учете по причине: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Настройка отражения в регл. учете'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		ВызватьИсключение;
	КонецПопытки;
	
	Модифицированность = Ложь;
	ИзмененыНастройкиОтраженияВУчете = Истина;
	
	ЗаполнитьТаблицыНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуОтраженияВУчете()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ТаблицаДокументов.Выгрузить());
	СохранитьНастройкиОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти