#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует массивы доступных счетов учета для номенклатуры.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаНоменклатуры() Экспорт
	
	Запрос = Новый Запрос("
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета товаров на складе
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|	И Не ПланСчетов.Забалансовый
	|	И ПланСчетов.Количественный
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета товаров в пути
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И Не ПланСчетов.Забалансовый
	|	И ПланСчетов.Количественный
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета передачи на комиссию
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И Не ПланСчетов.Забалансовый
	|	И ПланСчетов.Количественный
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета выручки от продаж
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета себестоимости продаж
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета НДС продаж
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	// 4D:ERP для Беларуси, ВалентинМ, 03.08.2017 
	// возможность указания в списке счетов учета НДС при продаже - счета 90.08, 91.02
	// {
	|	ПланСчетов.ВидыСубконто.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы))
	|	И ПланСчетов.ВидыСубконто.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы))
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	// }
	// 4D 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета НДС при закупке
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета НДС товаров в пути
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаТовары = МассивРезультатов[0];
	РезультатЗапросаТоварыВПути = МассивРезультатов[1];
	РезультатЗапросаКомиссия = МассивРезультатов[2];
	РезультатЗапросаВыручка = МассивРезультатов[3];
	РезультатЗапросаСебестоимость = МассивРезультатов[4];
	РезультатЗапросаНДС = МассивРезультатов[5];
	РезультатЗапросаНДСПриЗакупке = МассивРезультатов[6];
	РезультатЗапросаНДСВПути = МассивРезультатов[7];
	
	СтруктураСчетовУчета = Новый Структура;
	
	// Счета учета товаров на складе.
	МассивСчетовУчетаНаСкладе = Новый Массив;
	Выборка = РезультатЗапросаТовары.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаНаСкладе.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	// 4D:ERP для Беларуси, Яна, 02.02.2017 15:34:50 
	// Добавить возможность выбрать счет 07.02 в ГруппыФинансовогоУчетаНоменклатуры, № 13938
	// {
	МассивСчетовУчетаНаСкладе.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановкеПереданноеВМонтаж);
	// }
	// 4D 
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаНаСкладе", МассивСчетовУчетаНаСкладе); 
	
	// Счета учета товаров в пути.
	МассивСчетовУчетаТоваровВПути = Новый Массив;
	Выборка = РезультатЗапросаТоварыВПути.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаТоваровВПути.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаВПути", МассивСчетовУчетаТоваровВПути);
	
	// Счета учета передачи на комиссию.
	МассивСчетовПередачиНаКомиссию = Новый Массив;
	Выборка = РезультатЗапросаКомиссия.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовПередачиНаКомиссию.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаПередачиНаКомиссию", МассивСчетовПередачиНаКомиссию);
	
	// Счета учета выручки от продаж.
	МассивСчетовУчетаВыручкиОтПродаж = Новый Массив;
	Выборка = РезультатЗапросаВыручка.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаВыручкиОтПродаж.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаВыручкиОтПродаж", МассивСчетовУчетаВыручкиОтПродаж);
	
	// Счета учета себестоимости от продаж.
	МассивСчетовУчетаСебестоимостиПродаж = Новый Массив;
	Выборка = РезультатЗапросаСебестоимость.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаСебестоимостиПродаж.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаСебестоимостиПродаж", МассивСчетовУчетаСебестоимостиПродаж);
	
	// Счета учета НДС при продаже.
	МассивСчетовУчетаНДС = Новый Массив;
	Выборка = РезультатЗапросаНДС.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаНДС.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаНДСПриПродаже", МассивСчетовУчетаНДС);
	
	// Счета учета НДС при закупке.
	МассивСчетовУчетаНДСПриЗакупке = Новый Массив;
	Выборка = РезультатЗапросаНДСПриЗакупке.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаНДСПриЗакупке.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаНДСПриЗакупке", МассивСчетовУчетаНДСПриЗакупке);
	
	// Счета учета НДС товаров в пути
	МассивСчетовУчетаНДСВПути = Новый Массив;
	Выборка = РезультатЗапросаНДСВПути.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчетаНДСВПути.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчетаНДСВПути", МассивСчетовУчетаНДСВПути);
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Функция формирует массивы доступных счетов учета для расчетов с клиентами.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаРасчетов() Экспорт
	
	Запрос = Новый Запрос("
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов с поставщиками
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И (ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный) ИЛИ ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов по авансам, выданным поставщикам
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФинансовыеВложения)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И (ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный) ИЛИ ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов с клиентами
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФинансовыеВложения)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И (ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный) ИЛИ ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов по авансам, полученным от клиентов
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И (ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный) ИЛИ ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов по комиссионному вознаграждению
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаРасчетыСПоставщиками = МассивРезультатов[0];
	РезультатЗапросаРасчетыПоАвансамВыданным = МассивРезультатов[1];
	РезультатЗапросаРасчетыСКлиентами = МассивРезультатов[2];
	РезультатЗапросаРасчетыПоАвансамПолученным = МассивРезультатов[3];
	РезультатЗапросаРасчетыПоКомиссии = МассивРезультатов[4];
	
	СтруктураСчетовУчета = Новый Структура;
	
	// Счета учета расчетов с поставщиками.
	МассивСчетовРасчетовСПоставщиками = Новый Массив;
	Выборка = РезультатЗапросаРасчетыСПоставщиками.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовРасчетовСПоставщиками.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаРасчетовСПоставщиками", МассивСчетовРасчетовСПоставщиками);
	
	// Счета учета расчетов по авансам выданным.
	МассивСчетовРасчетовПоАвансамВыданным = Новый Массив;
	Выборка = РезультатЗапросаРасчетыПоАвансамВыданным.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовРасчетовПоАвансамВыданным.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаРасчетовПоАвансаВыданным", МассивСчетовРасчетовПоАвансамВыданным);
	
	// Счета учета расчетов с клиентами.
	МассивСчетовРасчетовСКлиентами = Новый Массив;	
	Выборка = РезультатЗапросаРасчетыСКлиентами.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовРасчетовСКлиентами.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаРасчетовСКлиентами", МассивСчетовРасчетовСКлиентами);
	
	// Счета учета расчетов по авансам полученным.
	МассивСчетовРасчетовПоАвансамПолученным = Новый Массив;
	Выборка = РезультатЗапросаРасчетыПоАвансамПолученным.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовРасчетовПоАвансамПолученным.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаРасчетовПоАвансаПолученным", МассивСчетовРасчетовПоАвансамПолученным);
	
	// Счета учета расчетов по комиссионному вознаграждению.
	МассивСчетовРасчетовПоКомиссии = Новый Массив;
	Выборка = РезультатЗапросаРасчетыПоКомиссии.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовРасчетовПоКомиссии.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаРасчетовПоКомиссии", МассивСчетовРасчетовПоКомиссии);
	
	// 4D:ERP для Беларуси, ВладимирР, 06.09.2016 12:53:31 
	// Счет 06.02 в группе настроек фин.учета расчетов с партнерами, №12447
	// {
	Для каждого ПеремМассив Из СтруктураСчетовУчета Цикл
		Если ТипЗнч(ПеремМассив.Значение) = Тип("Массив") И Не ПеремМассив.Значение.Найти(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы) = Неопределено Тогда
			ПеремМассив.Значение.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеДолгосрочныеЗаймы);
		КонецЕсли;
	КонецЦикла;
	// }
	// 4D
	
	Возврат СтруктураСчетовУчета;

КонецФункции

// Функция формирует массивы доступных счетов учета для прочих доходов.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаПрочихДоходов() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ПланСчетов.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	// 4D:ERP для Беларуси, Алексей4Д, 18.09.2017 23:15:27 
	// Требуется для статьи доходов возможность выбора счета 84.04 "Нераспределенная прибыль", № 16071
	// {
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка,
	|	ПланСчетов.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыльИспользованная)
	// }
	// 4D 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|");
	
	МассивСчетов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета = Новый Структура;
	
	СтруктураСчетовУчета.Вставить("СчетаПрочихДоходов", МассивСчетов);
	
	Возврат СтруктураСчетовУчета;

КонецФункции

// Функция формирует массивы доступных счетов учета для расходов.
//
// Параметры
// 	 СтатьяРасходов - ПланВидовХарактеристик.СтатьиРасходов - Статья для которой необходимо получить доступные счета учета.
// 											Если Неопределено, то формируется общий список доступных счетов.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаРасходов(СтатьяРасходов = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка,
	|	ВЫБОР КОГДА ВидЦенностиНДС В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|								  ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА),
	|								  ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК НаВнеоборотныеАктивы,
	|	ВЫБОР КОГДА ВидЦенностиНДС В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|								  ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасходыНаОбъектыЭксплуатации,
	|	ВЫБОР КОГДА ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасходыНаНМАиНИОКР,
	|	ВЫБОР КОГДА ВидДеятельностиРасходов В (
	|					ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиРасходов.ПрочаяДеятельность),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПоПрочейДеятельности
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	Ссылка = &СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Счета учета Расходов
	// Прочие расходы
	|ВЫБРАТЬ
	|	""СчетаПрочихРасходов"" КАК РазделСчета,
	|	План.Ссылка КАК Ссылка,
	|	План.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланСчетов.Хозрасчетный.ВидыСубконто КАК Виды
	|	ПО
	|		План.Ссылка = Виды.Ссылка
	|		И Виды.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы))
	|
	|ГДЕ
	|	НЕ ЕСТЬNULL(Статьи.НаВнеоборотныеАктивы, ЛОЖЬ)
	|	И ЕСТЬNULL(Статьи.ПоПрочейДеятельности, ИСТИНА)
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СчетаРасходов"" КАК РазделСчета,
	|	План.Ссылка КАК Ссылка,
	|	План.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланСчетов.Хозрасчетный.ВидыСубконто КАК Виды
	|	ПО
	|		План.Ссылка = Виды.Ссылка
	|		И Виды.ВидСубконто В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|							  ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов))
	|
	|ГДЕ
	|	НЕ ЕСТЬNULL(Статьи.НаВнеоборотныеАктивы, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(Статьи.ПоПрочейДеятельности, ЛОЖЬ)
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|	И НЕ План.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей),
	// 4D:ERP для Беларуси, Екатерина, 01.07.2015 13:31:02 
	// Локализация плана счетов, №8969
	// {
	|								 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеОсновныхСредств),
	|								 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеИнвестиционнойНедвижимости),
	|								 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеПредметовФинансовойАренды),
	|								 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов),
	|								 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеИныхДолгосрочныхАктивов))
	// }
	// 4D
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Недостачи и расходы на продажу
	|ВЫБРАТЬ
	|	""СчетаРасходов"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|	
	|ГДЕ
	|	НЕ ЕСТЬNULL(Статьи.НаВнеоборотныеАктивы, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(Статьи.ПоПрочейДеятельности, ЛОЖЬ)
	|	И План.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбытокПодлежащийПокрытию))
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	// 4D:ERP для Беларуси, Алексей4Д, 19.09.2017 0:17:19 
	// Дивиденды
	// {
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Дивиденды
	|ВЫБРАТЬ
	|	""СчетаРасходов"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|	
	|ГДЕ
	|	НЕ ЕСТЬNULL(Статьи.НаВнеоборотныеАктивы, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(Статьи.ПоПрочейДеятельности, ЛОЖЬ)	
	|	И План.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСУчредителями))
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	// }
	// 4D
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ОС
	|ВЫБРАТЬ
	|	""СчетаОС"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = План.Ссылка
	|			И ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|			И ХозрасчетныйВидыСубконто.ВидСубконто В (
	|					ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|					ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|	
	|ГДЕ
	|	ЕСТЬNULL(Статьи.РасходыНаОбъектыЭксплуатации, ИСТИНА)
	// 4D:ERP для Беларуси, Екатерина, 01.07.2015 13:30:36 
	// Локализация плана счетов, №8969, №10452
	// {
	|	И План.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеОсновныхСредств), 
	|							  ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеИнвестиционнойНедвижимости),
	|							  ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИСозданиеИныхДолгосрочныхАктивов))
	// }
	// 4D
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// НМА
	|ВЫБРАТЬ
	|	""СчетаНМА"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|	
	|ГДЕ
	|	ЕСТЬNULL(Статьи.РасходыНаНМАиНИОКР, ИСТИНА)
	// 4D:ERP для Беларуси, Екатерина, 01.07.2015 13:30:36 
	// Локализация плана счетов, №8969
	// {
	|	И План.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов))
	// }
	// 4D
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СчетаНМА"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = План.Ссылка
	|			И ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|			И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК Статьи ПО ИСТИНА
	|	
	|ГДЕ
	|	ЕСТЬNULL(Статьи.РасходыНаНМАиНИОКР, ИСТИНА)
	|	И План.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Счета списания расходов
	|ВЫБРАТЬ
	|	""СчетаСписания"",
	|	План.Ссылка,
	|	План.Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК План
	|	
	|ГДЕ
	|	План.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж),
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажу),
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходы),
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы))
	|	И План.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	И НЕ План.Забалансовый
	|	И НЕ План.Количественный
	|	И НЕ План.ЗапретитьИспользоватьВПроводках
	|;
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	СтруктураСчетовУчета = Новый Структура;
	СтруктураСчетовУчета.Вставить("СчетаРасходов",			Новый Массив);
	СтруктураСчетовУчета.Вставить("СчетаПрочихРасходов",	Новый Массив);
	СтруктураСчетовУчета.Вставить("СчетаОС",				Новый Массив);
	СтруктураСчетовУчета.Вставить("СчетаНМА",				Новый Массив);
	СтруктураСчетовУчета.Вставить("СчетаСписания",			Новый Массив);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСчетовУчета[Выборка.РазделСчета].Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Функция формирует массивы доступных счетов учета ТМЦ в эксплуатации.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаТМЦВЭксплуатации() Экспорт
	
	Запрос = Новый Запрос("
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета в эксплуатации
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации)
	|	И Не ПланСчетов.Забалансовый
	|	И ПланСчетов.Количественный
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета забалансового учета в эксплуатации
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации)
	|	И ПланСчетов.Забалансовый
	|	И ПланСчетов.Количественный
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаСчетаУчета = МассивРезультатов[0];
	РезультатЗапросаСчетаЗабалансовогоУчета = МассивРезультатов[1];
	
	СтруктураСчетовУчета = Новый Структура;
	
	// Счета учета в эксплуатации
	МассивСчетовУчета = Новый Массив;
	Выборка = РезультатЗапросаСчетаУчета.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчета.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаУчета", МассивСчетовУчета); 
	
	// Счета забалансового учета в эксплуатации.
	МассивСчетовЗабалансовогоУчета = Новый Массив;
	Выборка = РезультатЗапросаСчетаЗабалансовогоУчета.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовЗабалансовогоУчета.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтруктураСчетовУчета.Вставить("СчетаЗабалансовогоУчета", МассивСчетовЗабалансовогоУчета);
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Функция формирует массивы доступных счетов учета НЗП.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаНЗП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	НЕ ПланСчетов.ЗапретитьИспользоватьВПроводках
	|	И ПланСчетов.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство),
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства),
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбслуживающиеПроизводства))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код";
	
	Результат = Запрос.Выполнить();
	
	МассивСчетовУчета = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовУчета.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСчетовУчета;
	
КонецФункции

// Функция формирует массивы доступных счетов учета денежных средств.
//
// Возвращаемое значение:
//	Структура - Структура массивов доступных счетов учета
//
Функция ДоступныеСчетаУчетаДенежныхСредств() Экспорт
	Запрос = Новый Запрос("
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета безналичных денежных средств
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код 
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// Счета учета наличных денежных средств
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Код КАК Код
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|	И ПланСчетов.ВидыСубконто.ВидСубконто <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеДокументы)
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Код 
	|;
	|");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаБезналичныеДенежныеСредства = МассивРезультатов[0];
	РезультатЗапросаНаличныеДенежныеСредства    = МассивРезультатов[1];
	
	СтруктураСчетовУчета = Новый Структура;
	
	// Счета учета безналичных ДС
	МассивСчетовБезналичныхДенежныехСредств = Новый Массив;
	Выборка = РезультатЗапросаБезналичныеДенежныеСредства.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовБезналичныхДенежныехСредств.Добавить(Выборка.Ссылка);
	КонецЦикла;
	СтруктураСчетовУчета.Вставить("СчетаБезналичныхДенежныхСредств", МассивСчетовБезналичныхДенежныехСредств);
	
	// Счета учета наличных ДС
	МассивСчетовНаличныхДенежныхСредств = Новый Массив;
	Выборка = РезультатЗапросаНаличныеДенежныеСредства.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетовНаличныхДенежныхСредств.Добавить(Выборка.Ссылка);
	КонецЦикла;
	СтруктураСчетовУчета.Вставить("СчетаНаличныхДенежныхСредств", МассивСчетовНаличныхДенежныхСредств);
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Функция возвращает признак того, что требуется настройка счетов учета денежных средств
//
// Параметры:
// 	МассивОрганизаций - Массив - Организации, для которых необходимо выполнить проверку
//
// Возвращаемое значение:
// 	ТребуетсяНастройка - Булево - Признак необходимости настройки
//
Функция ТребуетсяНастройкаСчетовУчетаДенежныхСредств(МассивОрганизаций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ТребуетсяНастройка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец В (&МассивОрганизаций)
	|	И БанковскиеСчетаОрганизаций.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ТребуетсяНастройка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец В (&МассивОрганизаций)
	|	И Кассы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	ТребуетсяНастройка = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ТребуетсяНастройка;
	
КонецФункции

// Функция определяет период, в котором находятся документы к отражению в регл. учете
// 
// Параметры:
// 	МассивОрганизаций - Массив - Организации для отбора
// 	ОрганичениеПериода - СтандартнаяДатаНачала - ограничение периода "сверху"
//
// Возвращаемое значение:
// 	Период - Структура - Структура с полями ДатаНачала и ДатаОкончания
// 	
Функция ПериодКОтражениюВРеглУчете(МассивОрганизаций, ОрганичениеПериода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(Строки.ДатаОтражения) КАК ДатаНачала,
	|	МАКСИМУМ(Строки.ДатаОтражения) КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
	|		ПО Передачи.Ссылка = Строки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
	|		ПО Возвраты.Ссылка = Строки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетыПоКомиссии
	|		ПО ОтчетыПоКомиссии.Ссылка = Строки.Регистратор
	|ГДЕ
	|	(Строки.Организация В (&МассивОрганизаций)
	|		ИЛИ Передачи.ОрганизацияПолучатель В (&МассивОрганизаций)
	|		ИЛИ Возвраты.ОрганизацияПолучатель В (&МассивОрганизаций)
	|		ИЛИ ОтчетыПоКомиссии.Комиссионер В (&МассивОрганизаций))
	|	И Строки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(Строки.ДатаОтражения) ЕСТЬ NULL
	|	ИЛИ НЕ МАКСИМУМ(Строки.ДатаОтражения) ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Период = Новый Структура("ДатаНачала, ДатаОкончания", Дата(1,1,1), Дата(2029, 12, 31));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Период.ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		Период.ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганичениеПериода.Дата) И Период.ДатаОкончания > КонецДня(ОрганичениеПериода.Дата) Тогда
		Период.ДатаОкончания = КонецДня(ОрганичениеПериода.Дата);
	КонецЕсли;
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Период.ДатаНачала = Период.ДатаОкончания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Период;
	
КонецФункции

// Функция обновляет таблицы счетов учета, используемые в форме обработки "ФормаНастройки". При обновлении анализируется регистр
//	"СчетаРеглУчетаТребующиеНастройки" и на основании данных в нем заполняется информация о требовании настройки. Для таблиц исключений
//	получаются данных по умолчанию (соответствующих счетов учета, указанных непосредственно в общих настройках - аналитиках).
//
//	Параметры:
//		СтруктураТаблиц - Структура - содержит следующие значения:
//			* Ключ - Строка - Имя соответствующей таблицы для заполнения. На основании переданного имени отрабывается тот или иной запрос;
//			* Значение - ТаблицаЗначений - текущая таблица настроек. Если значение заполнено, то исходные данные берутся из этой таблицы
//				и для нее лишь обновляется информация по необходимости настройки и значения по умолчанию;
//		Организации - Массив - СправочникСсылка.Организации - отбор по организациям.
//
//	Возвращаемое значение:
//		Структура - ключ структуры содержит имя соответствующей таблицы, а значение - обновленную таблицу значений для нее.
//
Функция ТаблицыНастроекСчетов(СтруктураТаблиц, Организации, ОрганизацияОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ОрганизацияОтбора", ОрганизацияОтбора);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	// Таблицы, анализирующие общие настройки:
	ТекстЗапросаОбщиеСчетаУчетаНоменклатуры(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаТМЦВЭксплуатации(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаПодарочныхСертификатов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаРасчетовСПартнерами(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаДоходов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаОбщиеСчетаУчетаРасходов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	
	// Смежные таблицы (применяются и в общих настройках и в исключениях):
	ТекстЗапросаСчетаУчетаДенежныхСредств(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаНезавершенногоПроизводства(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	
	// Таблицы, анализирующие настройки исключений:
	ТекстЗапросаСчетаУчетаНоменклатуры(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаТМЦВЭксплуатации(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаПодарочныхСертификатов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаРасчетовСПартнерами(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаДоходов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	ТекстЗапросаСчетаУчетаРасходов(СтруктураТаблиц, ТекстыЗапроса, Запрос);
	
	ТаблицыЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	Возврат ТаблицыЗапроса;
	
КонецФункции

// Выполняет анализ всех неотраженных операций,
//	ищет для них ненастроенные счета учета и заносит эти данные в регистр ненастроенных счетов учета, после чего обновляет данные по таблицам
//	настройки счетов учета.
//
//	Параметры:
//		СтруктураПараметров - Структура - содержит следующие значения:
//			* Таблицы - Структура - ключ содержит имя таблицы для обновления, значение - не используется.
//			* МассивОрганизаций - Массив - СправочникСсылка.Организации - отбор по организациям, операции которых будут анализироваться;
//			* ДатаОкончанияПериода - СтандартнаяДатаНачала - конец периода определяется на основании этой даты
//				(см. метод "Обработки.НастройкаОтраженияДокументовВРеглУчете.ПериодКОтражениюВРеглУчете");
//		АдресХранилища - результаты обновления таблиц (см. функцию "ТаблицыНастроекСчетов") будут записаны во временное хранилище по этому адресу.
//
Процедура АнализСчетовТребующихНастройкиИОбновлениеТаблиц(СтруктураПараметров, АдресХранилища) Экспорт
	
	МассивТаблиц = Новый Массив;
	Для каждого Таблица из СтруктураПараметров.Таблицы Цикл
		ИмяРегистра = СтрЗаменить(Таблица.Ключ, "СчетаУчета", "ПорядокОтражения");
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			МассивТаблиц.Добавить(ИмяРегистра);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметровАнализа = Новый Структура;
	СтруктураПараметровАнализа.Вставить("МассивАнализируемыхТаблиц", МассивТаблиц);
	СтруктураПараметровАнализа.Вставить("МассивОрганизаций", СтруктураПараметров.МассивОрганизаций);
	СтруктураПараметровАнализа.Вставить("ДатаОкончанияПериода", СтруктураПараметров.ДатаОкончанияПериода);
	
	РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.АнализСчетовТребующихНастройки(СтруктураПараметровАнализа);
	
	ОбновленныеТаблицыЗапроса = ТаблицыНастроекСчетов(СтруктураПараметров.Таблицы, СтруктураПараметров.МассивОрганизаций);
	
	ПоместитьВоВременноеХранилище(ОбновленныеТаблицыЗапроса, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросовПолученияНастроекСчетовУчета

Функция ТекстЗапросаОбщиеСчетаУчетаНоменклатуры(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаНоменклатуры", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНаСкладе,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСПриПродаже,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВПути,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСВПути,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходовРегл,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНаСкладе,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаВПути,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНДСВПути,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаНоменклатуры
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаНоменклатуры КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыФинансовогоУчетаНоменклатуры.Ссылка КАК АналитикаУчета,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНаСкладе,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаСебестоимостиПродаж,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНДСПриПродаже,
	|	ГруппыФинансовогоУчетаНоменклатуры.СтатьяДоходовРегл,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаВПути,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНДСВПути,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)) КАК ТребуетсяНастройкаСчетУчетаНаСкладе,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж)) КАК ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж)) КАК ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже)) КАК ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаВПути,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаНДСВПути,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ГруппыФинансовогоУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ГруппыФинансовогоУчетаНоменклатуры.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ ГруппыФинансовогоУчетаНоменклатуры.ЭтоГруппа
	|	И НЕ (ГруппыФинансовогоУчетаНоменклатуры.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) 
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыФинансовогоУчетаНоменклатуры.Ссылка,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНаСкладе,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаСебестоимостиПродаж,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНДСПриПродаже,
	|	ГруппыФинансовогоУчетаНоменклатуры.СтатьяДоходовРегл,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаВПути,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаНДСВПути,
	|	""""";
	
	Если ТаблицаИсточник = Неопределено Тогда
		// Таблица - источник не задана, значит нам необходимо дополнить элементы справочника пустым значением, счета учета которого будут взяты из соотв. регистра порядка отражения:
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС +
		"ВЫБРАТЬ
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаНаСкладе, &ПустойСчет) КАК СчетУчетаНаСкладе,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаВыручкиОтПродаж, &ПустойСчет) КАК СчетУчетаВыручкиОтПродаж,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаСебестоимостиПродаж, &ПустойСчет) КАК СчетУчетаСебестоимостиПродаж,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаНДСПриПродаже, &ПустойСчет) КАК СчетУчетаНДСПриПродаже,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)) КАК СтатьяДоходовРегл,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаВПути, &ПустойСчет) КАК СчетУчетаВПути,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаНДСВПути, &ПустойСчет) КАК СчетУчетаНДСВПути,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)) КАК ТребуетсяНастройкаСчетУчетаНаСкладе,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера))) КАК ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера))) КАК ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродажеКомиссионера))) КАК ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаВПути,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаНДСВПути,
		|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
		|	""""
		|ИЗ
		|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчета) КАК ПустаяАналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНоменклатуры КАК ДанныеПустойАналитикиУчета
		|	ПО ДанныеПустойАналитикиУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И ДанныеПустойАналитикиУчета.ГруппаФинансовогоУчета = ПустаяАналитикаУчета.АналитикаУчета
		|		И ДанныеПустойАналитикиУчета.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
		|	ПО (СчетаТребующиеНастройки.АналитикаУчета = ПустаяАналитикаУчета.АналитикаУчета)
		|		И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродажеКомиссионера),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)))
		|		И (СчетаТребующиеНастройки.Организация В (&Организации))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ДанныеПустойАналитикиУчета.СчетУчетаНаСкладе,
		|	ДанныеПустойАналитикиУчета.СчетУчетаВыручкиОтПродаж,
		|	ДанныеПустойАналитикиУчета.СчетУчетаСебестоимостиПродаж,
		|	ДанныеПустойАналитикиУчета.СчетУчетаНДСПриПродаже,
		|	ДанныеПустойАналитикиУчета.СтатьяДоходовРегл,
		|	ДанныеПустойАналитикиУчета.СчетУчетаВПути,
		|	ДанныеПустойАналитикиУчета.СчетУчетаНДСВПути";
	Иначе
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаНоменклатуры", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ГруппыФинансовогоУчетаНоменклатуры", "ТаблицаОбщиеСчетаУчетаНоменклатуры");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГруппыФинансовогоУчетаНоменклатуры.Ссылка", "ГруппыФинансовогоУчетаНоменклатуры.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ГруппыФинансовогоУчетаНоменклатуры.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
									|	НЕ ГруппыФинансовогоУчетаНоменклатуры.ЭтоГруппа
									|	И НЕ (ГруппыФинансовогоУчетаНоменклатуры.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаНоменклатуры");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПередачиНаКомиссию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|	
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыФинансовогоУчетаНоменклатуры.Ссылка КАК АналитикаУчета,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаПередачиНаКомиссию,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ГруппыФинансовогоУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ГруппыФинансовогоУчетаНоменклатуры.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПередачаНаКомиссию))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ ГруппыФинансовогоУчетаНоменклатуры.ЭтоГруппа
	|	И НЕ (ГруппыФинансовогоУчетаНоменклатуры.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыФинансовогоУчетаНоменклатуры.Ссылка,
	|	ГруппыФинансовогоУчетаНоменклатуры.СчетУчетаПередачиНаКомиссию,
	|	""""";
	
	Если ТаблицаИсточник = Неопределено Тогда
		// Таблица - источник не задана, значит нам необходимо дополнить элементы справочника пустым значением, счета учета которого будут взяты из соотв. регистра порядка отражения:
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС +
		"ВЫБРАТЬ
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаПередачиНаКомиссию, &ПустойСчет) КАК СчетУчетаПередачиНаКомиссию,
		|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
		|	""""
		|ИЗ
		|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчета) КАК ПустаяАналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию КАК ДанныеПустойАналитикиУчета
		|	ПО ДанныеПустойАналитикиУчета.ГруппаФинансовогоУчета = ПустаяАналитикаУчета.АналитикаУчета
		|		И ДанныеПустойАналитикиУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
		|	ПО (СчетаТребующиеНастройки.АналитикаУчета = ПустаяАналитикаУчета.АналитикаУчета)
		|		И (СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПередачаНаКомиссию))
		|		И (СчетаТребующиеНастройки.Организация В (&Организации))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ДанныеПустойАналитикиУчета.СчетУчетаПередачиНаКомиссию";
	Иначе
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ГруппыФинансовогоУчетаНоменклатуры", "ТаблицаОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГруппыФинансовогоУчетаНоменклатуры.Ссылка", "ГруппыФинансовогоУчетаНоменклатуры.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ГруппыФинансовогоУчетаНоменклатуры.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ ГруппыФинансовогоУчетаНоменклатуры.ЭтоГруппа
	|	И НЕ (ГруппыФинансовогоУчетаНоменклатуры.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаНоменклатурыПереданнойНаКомиссию");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаТМЦВЭксплуатации(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаТМЦВЭксплуатации", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетЗабалансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчета,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетЗабалансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаТМЦВЭксплуатации
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаТМЦВЭксплуатации КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КатегорииЭксплуатации.Ссылка КАК АналитикаУчета,
	|	КатегорииЭксплуатации.СчетУчета,
	|	КатегорииЭксплуатации.СчетЗабалансовогоУчета,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации)) КАК ТребуетсяНастройкаСчетУчета,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)) КАК ТребуетсяНастройкаСчетЗабалансовогоУчета,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	Справочник.КатегорииЭксплуатации КАК КатегорииЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = КатегорииЭксплуатации.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ КатегорииЭксплуатации.ЭтоГруппа
	|	И НЕ (КатегорииЭксплуатации.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	КатегорииЭксплуатации.Ссылка,
	|	КатегорииЭксплуатации.СчетУчета,
	|	КатегорииЭксплуатации.СчетЗабалансовогоУчета,
	|	""""";
	
	Если ТаблицаИсточник = Неопределено Тогда
		// Таблица - источник не задана, значит нам необходимо дополнить элементы справочника пустым значением, счета учета которого будут взяты из соотв. регистра порядка отражения:
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС +
		"ВЫБРАТЬ
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчета, &ПустойСчет) КАК СчетУчета,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетЗабалансовогоУчета, &ПустойСчет) КАК СчетЗабалансовогоУчета,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации)) КАК ТребуетсяНастройкаСчетУчета,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)) КАК ТребуетсяНастройкаСчетЗабалансовогоУчета,
		|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
		|	""""
		|ИЗ
		|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка) КАК АналитикаУчета) КАК ПустаяАналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации КАК ДанныеПустойАналитикиУчета
		|	ПО ДанныеПустойАналитикиУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И ДанныеПустойАналитикиУчета.КатегорияЭксплуатации = ПустаяАналитикаУчета.АналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
		|	ПО (СчетаТребующиеНастройки.АналитикаУчета = ПустаяАналитикаУчета.АналитикаУчета)
		|		И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации),
		|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)))
		|		И (СчетаТребующиеНастройки.Организация В (&Организации))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ДанныеПустойАналитикиУчета.СчетУчета,
		|	ДанныеПустойАналитикиУчета.СчетЗабалансовогоУчета";
	Иначе
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаТМЦВЭксплуатации", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.КатегорииЭксплуатации", "ТаблицаОбщиеСчетаУчетаТМЦВЭксплуатации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КатегорииЭксплуатации.Ссылка", "КатегорииЭксплуатации.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "КатегорииЭксплуатации.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ КатегорииЭксплуатации.ЭтоГруппа
	|	И НЕ (КатегорииЭксплуатации.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
								
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаТМЦВЭксплуатации");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаПодарочныхСертификатов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаПодарочныхСертификатов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаПодарочныхСертификатов
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаПодарочныхСертификатов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыПодарочныхСертификатов.Ссылка КАК АналитикаУчета,
	|	ВидыПодарочныхСертификатов.СчетУчета,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ВидыПодарочныхСертификатов.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ (ВидыПодарочныхСертификатов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыПодарочныхСертификатов.Ссылка,
	|	ВидыПодарочныхСертификатов.СчетУчета,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаПодарочныхСертификатов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ВидыПодарочныхСертификатов", "ТаблицаОбщиеСчетаУчетаПодарочныхСертификатов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыПодарочныхСертификатов.Ссылка", "ВидыПодарочныхСертификатов.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ВидыПодарочныхСертификатов.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ (ВидыПодарочныхСертификатов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаПодарочныхСертификатов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаРасчетовСПартнерами(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаРасчетовСПартнерами", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентами,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовПолученных,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоВознаграждению,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщиками,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовВыданных,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоПретензиям,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентамиТара,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщикамиТара,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСКлиентами,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаАвансовПолученных,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовПоВознаграждению,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСПоставщиками,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаАвансовВыданных,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовПоПретензиям,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСКлиентамиТара,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСПоставщикамиТара,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаРасчетовСПартнерами
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаРасчетовСПартнерами КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыФинансовогоУчетаРасчетов.Ссылка КАК АналитикаУчета,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСКлиентами,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаАвансовПолученных,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовПоВознаграждению,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСПоставщиками,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаАвансовВыданных,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовПоПретензиям,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСКлиентамиТара,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСПоставщикамиТара,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентами,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)) КАК ТребуетсяНастройкаСчетУчетаАвансовПолученных,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоВознаграждению,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщиками,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)) КАК ТребуетсяНастройкаСчетУчетаАвансовВыданных,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоПретензиям,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентамиТара,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщикамиТара,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ГруппыФинансовогоУчетаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ГруппыФинансовогоУчетаРасчетов.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ ГруппыФинансовогоУчетаРасчетов.ЭтоГруппа
	|	И НЕ (ГруппыФинансовогоУчетаРасчетов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыФинансовогоУчетаРасчетов.Ссылка,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСКлиентами,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаАвансовПолученных,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовПоВознаграждению,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСПоставщиками,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаАвансовВыданных,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовПоПретензиям,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСКлиентамиТара,
	|	ГруппыФинансовогоУчетаРасчетов.СчетУчетаРасчетовСПоставщикамиТара,
	|	""""";
	
	Если ТаблицаИсточник = Неопределено Тогда
		// Таблица - источник не задана, значит нам необходимо дополнить элементы справочника пустым значением, счета учета которого будут взяты из соотв. регистра порядка отражения:
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС +
		"ВЫБРАТЬ
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСКлиентами, &ПустойСчет) КАК СчетУчетаРасчетовСКлиентами,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаАвансовПолученных, &ПустойСчет) КАК СчетУчетаАвансовПолученных,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовПоВознаграждению, &ПустойСчет) КАК СчетУчетаРасчетовПоВознаграждению,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСПоставщиками, &ПустойСчет) КАК СчетУчетаРасчетовСПоставщиками,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаАвансовВыданных, &ПустойСчет) КАК СчетУчетаАвансовВыданных,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовПоПретензиям, &ПустойСчет) КАК СчетУчетаРасчетовПоПретензиям,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСКлиентамиТара, &ПустойСчет) КАК СчетУчетаРасчетовСКлиентамиТара,
		|	ЕСТЬNULL(ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара, &ПустойСчет) КАК СчетУчетаРасчетовСПоставщикамиТара,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентами,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)) КАК ТребуетсяНастройкаСчетУчетаАвансовПолученных,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоВознаграждению,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщиками,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)) КАК ТребуетсяНастройкаСчетУчетаАвансовВыданных,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоПретензиям,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентамиТара,
		|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщикамиТара,
		|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
		|	""""
		|ИЗ
		|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка) КАК АналитикаУчета) КАК ПустаяАналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ДанныеПустойАналитикиУчета
		|	ПО ДанныеПустойАналитикиУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		И ДанныеПустойАналитикиУчета.ГруппаФинансовогоУчета = ПустаяАналитикаУчета.АналитикаУчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
		|	ПО (СчетаТребующиеНастройки.АналитикаУчета = ПустаяАналитикаУчета.АналитикаУчета)
		|		И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара),
		|												ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)))
		|		И (СчетаТребующиеНастройки.Организация В (&Организации)) 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПустаяАналитикаУчета.АналитикаУчета,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСКлиентами,
		|	ДанныеПустойАналитикиУчета.СчетУчетаАвансовПолученных,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовПоВознаграждению,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСПоставщиками,
		|	ДанныеПустойАналитикиУчета.СчетУчетаАвансовВыданных,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовПоПретензиям,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСКлиентамиТара,
		|	ДанныеПустойАналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара";
	Иначе
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаРасчетовСПартнерами", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ГруппыФинансовогоУчетаРасчетов", "ТаблицаОбщиеСчетаУчетаРасчетовСПартнерами");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГруппыФинансовогоУчетаРасчетов.Ссылка", "ГруппыФинансовогоУчетаРасчетов.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ГруппыФинансовогоУчетаРасчетов.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ ГруппыФинансовогоУчетаРасчетов.ЭтоГруппа
	|	И НЕ (ГруппыФинансовогоУчетаРасчетов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаРасчетовСПартнерами");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаДоходов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаДоходов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаДоходов
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаДоходов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатьиДоходов.Ссылка КАК АналитикаУчета,
	|	СтатьиДоходов.СчетУчета,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = СтатьиДоходов.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ СтатьиДоходов.ЭтоГруппа
	|	И НЕ (СтатьиДоходов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиДоходов.Ссылка,
	|	СтатьиДоходов.СчетУчета,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаДоходов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовХарактеристик.СтатьиДоходов", "ТаблицаОбщиеСчетаУчетаДоходов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтатьиДоходов.Ссылка", "СтатьиДоходов.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "СтатьиДоходов.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ СтатьиДоходов.ЭтоГруппа
	|	И НЕ (СтатьиДоходов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаДоходов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеСчетаУчетаРасходов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("ОбщиеСчетаУчетаРасходов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.АналитикаУчета,
		|	ТекущаяТаблицаСчетовУчета.ВидЦенностиНДС,
		|	ТекущаяТаблицаСчетовУчета.ВидДеятельностиРасходов,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияОСНО,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияЕНВД,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчета,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетСписанияОСНО,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетСписанияЕНВД,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаОбщиеСчетаУчетаРасходов
		|ИЗ
		|	&ТаблицаОбщиеСчетаУчетаРасходов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатьиРасходов.Ссылка КАК АналитикаУчета,
	|	СтатьиРасходов.ВидЦенностиНДС,
	|	СтатьиРасходов.ВидДеятельностиРасходов,
	|	СтатьиРасходов.СчетУчета,
	|	СтатьиРасходов.СчетСписанияОСНО,
	|	СтатьиРасходов.СчетСписанияЕНВД,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетсяНастройкаСчетУчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовОСНО)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетсяНастройкаСчетСписанияОСНО,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетсяНастройкаСчетСписанияЕНВД,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = СтатьиРасходов.Ссылка)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы),
	|															ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовОСНО),
	|															ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ СтатьиРасходов.ЭтоГруппа
	|	И НЕ (СтатьиРасходов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиРасходов.Ссылка,
	|	СтатьиРасходов.ВидЦенностиНДС,
	|	СтатьиРасходов.ВидДеятельностиРасходов,
	|	СтатьиРасходов.СчетУчета,
	|	СтатьиРасходов.СчетСписанияОСНО,
	|	СтатьиРасходов.СчетСписанияЕНВД,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаОбщиеСчетаУчетаРасходов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовХарактеристик.СтатьиРасходов", "ТаблицаОбщиеСчетаУчетаРасходов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтатьиРасходов.Ссылка", "СтатьиРасходов.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "СтатьиРасходов.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ СтатьиРасходов.ЭтоГруппа
	|	И НЕ (СтатьиРасходов.ПометкаУдаления И СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	// Переопределим ТекстЗапроса, если задана ОрганизацияОтбора, с тем, чтобы данные из регистра ошибок брались только по этой организации:
	Если ЗначениеЗаполнено(Запрос.Параметры.ОрганизацияОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"СчетаТребующиеНастройки.Организация В (&Организации)",
									"СчетаТребующиеНастройки.Организация = &ОрганизацияОтбора");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОбщиеСчетаУчетаРасходов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаДенежныхСредств(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаДенежныхСредств", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств,
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
		|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств КАК Валюта,
		|	БанковскиеСчетаОрганизаций.Наименование,
		|	БанковскиеСчетаОрганизаций.Подразделение,
		|	БанковскиеСчетаОрганизаций.Владелец КАК Организация,
		|	БанковскиеСчетаОрганизаций.СчетУчета,
		|	БанковскиеСчетаОрганизаций.ПометкаУдаления
		|ПОМЕСТИТЬ ВременнаяТаблицаАналитикиДенежныхСредств
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные),
		|	Кассы.Ссылка,
		|	Кассы.ВалютаДенежныхСредств,
		|	Кассы.Наименование,
		|	Кассы.Подразделение,
		|	Кассы.Владелец,
		|	Кассы.СчетУчета,
		|	Кассы.ПометкаУдаления
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСчетаУчетаДенежныхСредств.АналитикаУчета,
		|	ТаблицаСчетаУчетаДенежныхСредств.Организация,
		|	ТаблицаСчетаУчетаДенежныхСредств.ТипДенежныхСредств,
		|	ТаблицаСчетаУчетаДенежныхСредств.Валюта,
		|	ТаблицаСчетаУчетаДенежныхСредств.Подразделение,
		|	ТаблицаСчетаУчетаДенежныхСредств.СчетУчета,
		|	ТаблицаСчетаУчетаДенежныхСредств.ТребуетсяНастройка,
		|	ТаблицаСчетаУчетаДенежныхСредств.ИзмененныеДанные
		|	
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаДенежныхСредств
		|ИЗ
		|	&ТаблицаСчетаУчетаДенежныхСредств КАК ТаблицаСчетаУчетаДенежныхСредств";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаДенежныхСредств.СчетУчета,
	|	МАКСИМУМ(НЕ СчетаРеглУчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	АналитикаДенежныхСредств.Ссылка КАК АналитикаУчета,
	|	АналитикаДенежныхСредств.ТипДенежныхСредств,
	|	АналитикаДенежныхСредств.Валюта,
	|	АналитикаДенежныхСредств.Организация,
	|	АналитикаДенежныхСредств.Подразделение,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	ВременнаяТаблицаАналитикиДенежныхСредств КАК АналитикаДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|		ПО (СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = АналитикаДенежныхСредств.Ссылка)
	|			И (СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства))
	|			И (СчетаРеглУчетаТребующиеНастройки.Организация В (&Организации))
	|ГДЕ
	|	НЕ (АналитикаДенежныхСредств.ПометкаУдаления И СчетаРеглУчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаДенежныхСредств.СчетУчета,
	|	АналитикаДенежныхСредств.Ссылка,
	|	АналитикаДенежныхСредств.ТипДенежныхСредств,
	|	АналитикаДенежныхСредств.Валюта,
	|	АналитикаДенежныхСредств.Организация,
	|	АналитикаДенежныхСредств.Подразделение,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчета";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаДенежныхСредств", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблицаАналитикиДенежныхСредств", "ТаблицаСчетаУчетаДенежныхСредств");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АналитикаДенежныхСредств.Ссылка", "АналитикаДенежныхСредств.АналитикаУчета");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "АналитикаДенежныхСредств.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	НЕ (АналитикаДенежныхСредств.ПометкаУдаления И СчетаРеглУчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаДенежныхСредств");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаНезавершенногоПроизводства(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаПроизводства", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.МестоПроизводства,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|	
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНезавершенногоПроизводства
		|ИЗ
		|	&ТаблицаСчетаУчетаНезавершенногоПроизводства КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтраженияПроизводства.Организация,
	|	ПорядокОтраженияПроизводства.МестоПроизводства,
	|	МАКСИМУМ(ПорядокОтраженияПроизводства.СчетУчета),
	|	МАКСИМУМ(ПорядокОтраженияПроизводства.ТребуетсяНастройка) КАК ТребуетсяНастройка,
	|	МАКСИМУМ(ПорядокОтраженияПроизводства.ИзмененныеДанные) КАК ИзмененныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПорядокОтражения.Организация КАК Организация,
	|		ПорядокОтражения.МестоПроизводства КАК МестоПроизводства,
	|		ПорядокОтражения.СчетУчета КАК СчетУчета,
	|		ЛОЖЬ КАК ТребуетсяНастройка,
	|		"""" КАК ИзмененныеДанные
	|	ИЗ
	|		РегистрСведений.ПорядокОтраженияПроизводства КАК ПорядокОтражения
	|	ГДЕ
	|		ПорядокОтражения.Организация В (&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаРеглУчетаТребующиеНастройки.Организация,
	|		СчетаРеглУчетаТребующиеНастройки.МестоУчета,
	|		&ПустойСчет,
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Производство),
	|		NULL
	|	ИЗ
	|		РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|	ГДЕ
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Производство)
	|		И СчетаРеглУчетаТребующиеНастройки.Организация В(&Организации)) КАК ПорядокОтраженияПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияПроизводства.Организация,
	|	ПорядокОтраженияПроизводства.МестоПроизводства";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаНезавершенногоПроизводства", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияПроизводства", "ТаблицаСчетаУчетаНезавершенногоПроизводства");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|		ПорядокОтражения.Организация В(&Организации)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаПроизводства");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаНоменклатуры(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаНоменклатуры", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.Склад,
		|	ТекущаяТаблицаСчетовУчета.ГруппаФинансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНаСкладе,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСПриПродаже,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВПути,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСВПути,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходовРегл,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНаСкладеПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВыручкиОтПродажПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаСебестоимостиПродажПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСПриПродажеПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВПутиПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСВПутиПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходовРеглПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНаСкладе,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаВПути,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНДСВПути,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНоменклатуры
		|ИЗ
		|	&ТаблицаСчетаУчетаНоменклатуры КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.Склад,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	Выбор когда ПорядокОтражения.СчетУчетаНаСкладе = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаНаСкладе, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНаСкладе, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаНаСкладе Конец КАК СчетУчетаНаСкладе,
	|	Выбор когда ПорядокОтражения.СчетУчетаВыручкиОтПродаж = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаВыручкиОтПродаж Конец КАК СчетУчетаВыручкиОтПродаж,
	|	Выбор когда ПорядокОтражения.СчетУчетаСебестоимостиПродаж = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаСебестоимостиПродаж Конец КАК СчетУчетаСебестоимостиПродаж,
	|	Выбор когда ПорядокОтражения.СчетУчетаНДСПриПродаже = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаНДСПриПродаже Конец КАК СчетУчетаНДСПриПродаже,
	|	Выбор когда ПорядокОтражения.СтатьяДоходовРегл = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|		Тогда ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)))
	|		Иначе ПорядокОтражения.СтатьяДоходовРегл Конец КАК СтатьяДоходовРегл,
	|	Выбор когда ПорядокОтражения.СчетУчетаВПути = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВПути, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаВПути Конец КАК СчетУчетаВПути,
	|	Выбор когда ПорядокОтражения.СчетУчетаНДСВПути = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСВПути, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаНДСВПути Конец КАК СчетУчетаНДСВПути,
	|	ПорядокОтражения.СчетУчетаНаСкладе = ЕСТЬNULL(АналитикиУчета.СчетУчетаНаСкладе, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНаСкладе, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаНаСкладе, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНаСкладе, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаНаСкладе = &ПустойСчет КАК СчетУчетаНаСкладеПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаВыручкиОтПродаж = ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаВыручкиОтПродаж = &ПустойСчет КАК СчетУчетаВыручкиОтПродажПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаСебестоимостиПродаж = ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаСебестоимостиПродаж = &ПустойСчет КАК СчетУчетаСебестоимостиПродажПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаНДСПриПродаже = ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаНДСПриПродаже = &ПустойСчет КАК СчетУчетаНДСПриПродажеПоУмолчанию,
	|	ПорядокОтражения.СтатьяДоходовРегл = ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка))) <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|	И ПорядокОтражения.СтатьяДоходовРегл = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка) КАК СтатьяДоходовРеглПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаВПути = ЕСТЬNULL(АналитикиУчета.СчетУчетаВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВПути, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВПути, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаВПути = &ПустойСчет КАК СчетУчетаВПутиПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаНДСВПути = ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСВПути, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСВПути, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСВПути, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаНДСВПути = &ПустойСчет КАК СчетУчетаНДСВПутиПоУмолчанию,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)) КАК ТребуетсяНастройкаСчетУчетаНаСкладе,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж)) КАК ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж)) КАК ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже)) КАК ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаВПути,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)) КАК ТребуетсяНастройкаСчетУчетаНДСВПути,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНоменклатуры КАК ПорядокОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНоменклатуры КАК ОбщаяНастройка
	|		ПО ОбщаяНастройка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ОбщаяНастройка.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			И ПорядокОтражения.ГруппаФинансовогоУчета = ОбщаяНастройка.ГруппаФинансовогоУчета
	|			И ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК АналитикиУчета
	|		ПО (ПорядокОтражения.ГруппаФинансовогоУчета = АналитикиУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ПорядокОтражения.ГруппаФинансовогоУчета)
	|			И (СчетаТребующиеНастройки.МестоУчета = ПорядокОтражения.Склад)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|			И (ПорядокОтражения.Организация В (&Организации))
	|			И (СчетаТребующиеНастройки.Организация = ПорядокОтражения.Организация)
	|ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПорядокОтражения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.Склад,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	АналитикиУчета.СчетУчетаНаСкладе,
	|	АналитикиУчета.СчетУчетаВыручкиОтПродаж,
	|	АналитикиУчета.СчетУчетаСебестоимостиПродаж,
	|	АналитикиУчета.СчетУчетаНДСПриПродаже,
	|	АналитикиУчета.СтатьяДоходовРегл,
	|	АналитикиУчета.СчетУчетаВПути,
	|	АналитикиУчета.СчетУчетаНДСВПути,
	|	ПорядокОтражения.СчетУчетаНаСкладе,
	|	ПорядокОтражения.СчетУчетаВыручкиОтПродаж,
	|	ПорядокОтражения.СчетУчетаСебестоимостиПродаж,
	|	ПорядокОтражения.СчетУчетаНДСПриПродаже,
	|	ПорядокОтражения.СтатьяДоходовРегл,
	|	ПорядокОтражения.СчетУчетаВПути,
	|	ПорядокОтражения.СчетУчетаНДСВПути,
	|	ОбщаяНастройка.СчетУчетаНаСкладе,
	|	ОбщаяНастройка.СчетУчетаВыручкиОтПродаж,
	|	ОбщаяНастройка.СчетУчетаСебестоимостиПродаж,
	|	ОбщаяНастройка.СчетУчетаНДСПриПродаже,
	|	ОбщаяНастройка.СтатьяДоходовРегл,
	|	ОбщаяНастройка.СчетУчетаВПути,
	|	ОбщаяНастройка.СчетУчетаНДСВПути,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.Склад";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаНоменклатуры", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияНоменклатуры КАК ПорядокОтражения", "ТаблицаСчетаУчетаНоменклатуры КАК ПорядокОтражения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ПорядокОтражения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаНоменклатуры");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаНоменклатурыПереданнойНаКомиссию", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.ГруппаФинансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПередачиНаКомиссию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСПриПродаже,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходовРегл,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПередачиНаКомиссиюПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаВыручкиОтПродажПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаСебестоимостиПродажПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаНДСПриПродажеПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходовРеглПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаПередачиНаКомиссию,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНоменклатурыПереданнойНаКомиссию
		|ИЗ
		|	&ТаблицаСчетаУчетаНоменклатурыПереданнойНаКомиссию КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	Выбор когда ПорядокОтражения.СчетУчетаПередачиНаКомиссию = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаПередачиНаКомиссию, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаПередачиНаКомиссию, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаПередачиНаКомиссию Конец КАК СчетУчетаПередачиНаКомиссию,
	|	Выбор когда ПорядокОтражения.СчетУчетаВыручкиОтПродаж = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаВыручкиОтПродаж Конец КАК СчетУчетаВыручкиОтПродаж,
	|	Выбор когда ПорядокОтражения.СчетУчетаСебестоимостиПродаж = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаСебестоимостиПродаж Конец КАК СчетУчетаСебестоимостиПродаж,
	|	Выбор когда ПорядокОтражения.СчетУчетаНДСПриПродаже = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаНДСПриПродаже Конец КАК СчетУчетаНДСПриПродаже,
	|	Выбор когда ПорядокОтражения.СтатьяДоходовРегл = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|		Тогда ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)))
	|		Иначе ПорядокОтражения.СтатьяДоходовРегл Конец КАК СтатьяДоходовРегл,
	|	ПорядокОтражения.СчетУчетаПередачиНаКомиссию = ЕСТЬNULL(АналитикиУчета.СчетУчетаПередачиНаКомиссию, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаПередачиНаКомиссию, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаПередачиНаКомиссию, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаПередачиНаКомиссию, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаПередачиНаКомиссию = &ПустойСчет КАК СчетУчетаПередачиНаКомиссиюПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаВыручкиОтПродаж = ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаВыручкиОтПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаВыручкиОтПродаж, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаВыручкиОтПродаж = &ПустойСчет КАК СчетУчетаВыручкиОтПродажПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаСебестоимостиПродаж = ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаСебестоимостиПродаж, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаСебестоимостиПродаж, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаСебестоимостиПродаж = &ПустойСчет КАК СчетУчетаСебестоимостиПродажПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаНДСПриПродаже = ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаНДСПриПродаже, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаНДСПриПродаже, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаНДСПриПродаже = &ПустойСчет КАК СчетУчетаНДСПриПродажеПоУмолчанию,
	|	ПорядокОтражения.СтатьяДоходовРегл = ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СтатьяДоходовРегл, ЕСТЬNULL(ОбщаяНастройка.СтатьяДоходовРегл, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка))) <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|	И ПорядокОтражения.СтатьяДоходовРегл = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка) КАК СтатьяДоходовРеглПоУмолчанию,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПередачаНаКомиссию)) КАК ТребуетсяНастройкаСчетУчетаПередачиНаКомиссию,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж)) КАК ТребуетсяНастройкаСчетУчетаВыручкиОтПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж)) КАК ТребуетсяНастройкаСчетУчетаСебестоимостиПродаж,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже)) КАК ТребуетсяНастройкаСчетУчетаНДСПриПродаже,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию КАК ПорядокОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию КАК ОбщаяНастройка
	|		ПО ОбщаяНастройка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ОбщаяНастройка.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК АналитикиУчета
	|		ПО (ПорядокОтражения.ГруппаФинансовогоУчета = АналитикиУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ПорядокОтражения.ГруппаФинансовогоУчета)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПередачаНаКомиссию),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|			И (ПорядокОтражения.Организация В (&Организации))
	|			И (СчетаТребующиеНастройки.Организация = ПорядокОтражения.Организация)
	|ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	АналитикиУчета.СчетУчетаПередачиНаКомиссию,
	|	АналитикиУчета.СчетУчетаВыручкиОтПродаж,
	|	АналитикиУчета.СчетУчетаСебестоимостиПродаж,
	|	АналитикиУчета.СчетУчетаНДСПриПродаже,
	|	АналитикиУчета.СтатьяДоходовРегл,
	|	ПорядокОтражения.СчетУчетаПередачиНаКомиссию,
	|	ПорядокОтражения.СчетУчетаВыручкиОтПродаж,
	|	ПорядокОтражения.СчетУчетаСебестоимостиПродаж,
	|	ПорядокОтражения.СчетУчетаНДСПриПродаже,
	|	ПорядокОтражения.СтатьяДоходовРегл,
	|	ОбщаяНастройка.СчетУчетаПередачиНаКомиссию,
	|	ОбщаяНастройка.СчетУчетаВыручкиОтПродаж,
	|	ОбщаяНастройка.СчетУчетаСебестоимостиПродаж,
	|	ОбщаяНастройка.СчетУчетаНДСПриПродаже,
	|	ОбщаяНастройка.СтатьяДоходовРегл,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	ПорядокОтражения.Организация";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаНоменклатурыПереданнойНаКомиссию", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию КАК ПорядокОтражения", "ТаблицаСчетаУчетаНоменклатурыПереданнойНаКомиссию КАК ПорядокОтражения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаНоменклатурыПереданнойНаКомиссию");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаТМЦВЭксплуатации(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаТМЦВЭксплуатации", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.КатегорияЭксплуатации,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетЗабалансовогоУчета,
		|	
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетЗабалансовогоУчетаПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчета,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетЗабалансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаТМЦВЭксплуатации
		|ИЗ
		|	&ТаблицаСчетаУчетаТМЦВЭксплуатации КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.КатегорияЭксплуатации,
	|	Выбор когда ПорядокОтражения.СчетУчета = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчета, ЕСТЬNULL(ОбщаяНастройка.СчетУчета, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчета Конец КАК СчетУчета,
	|	Выбор когда ПорядокОтражения.СчетЗабалансовогоУчета = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетЗабалансовогоУчета, ЕСТЬNULL(ОбщаяНастройка.СчетЗабалансовогоУчета, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетЗабалансовогоУчета Конец КАК СчетЗабалансовогоУчета,
	|	ПорядокОтражения.СчетУчета = ЕСТЬNULL(АналитикиУчета.СчетУчета, ЕСТЬNULL(ОбщаяНастройка.СчетУчета, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчета, ЕСТЬNULL(ОбщаяНастройка.СчетУчета, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчета = &ПустойСчет КАК СчетУчетаПоУмолчанию,
	|	ПорядокОтражения.СчетЗабалансовогоУчета = ЕСТЬNULL(АналитикиУчета.СчетЗабалансовогоУчета, ЕСТЬNULL(ОбщаяНастройка.СчетЗабалансовогоУчета, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетЗабалансовогоУчета, ЕСТЬNULL(ОбщаяНастройка.СчетЗабалансовогоУчета, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетЗабалансовогоУчета = &ПустойСчет КАК СчетЗабалансовогоУчетаПоУмолчанию,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации)) КАК ТребуетсяНастройкаСчетУчета,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)) КАК ТребуетсяНастройкаСчетЗабалансовогоУчета,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации КАК ПорядокОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации КАК ОбщаяНастройка
	|		ПО ОбщаяНастройка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ОбщаяНастройка.КатегорияЭксплуатации = ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииЭксплуатации КАК АналитикиУчета
	|		ПО (ПорядокОтражения.КатегорияЭксплуатации = АналитикиУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ПорядокОтражения.КатегорияЭксплуатации)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатации),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|			И (ПорядокОтражения.Организация В (&Организации))
	|			И (СчетаТребующиеНастройки.Организация = ПорядокОтражения.Организация)
	|ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.КатегорияЭксплуатации = ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.КатегорияЭксплуатации,
	|	АналитикиУчета.СчетУчета,
	|	АналитикиУчета.СчетЗабалансовогоУчета,
	|	ПорядокОтражения.СчетУчета,
	|	ПорядокОтражения.СчетЗабалансовогоУчета,
	|	ОбщаяНастройка.СчетУчета,
	|	ОбщаяНастройка.СчетЗабалансовогоУчета,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОтражения.КатегорияЭксплуатации,
	|	ПорядокОтражения.Организация";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаТМЦВЭксплуатации", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации КАК ПорядокОтражения", "ТаблицаСчетаУчетаТМЦВЭксплуатации КАК ПорядокОтражения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.КатегорияЭксплуатации = ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаТМЦВЭксплуатации");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаПодарочныхСертификатов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаПодарочныхСертификатов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.ВидСертификата,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаПодарочныхСертификатов
		|ИЗ
		|	&ТаблицаСчетаУчетаПодарочныхСертификатов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтраженияПодарочныхСертификатов.Организация,
	|	ПорядокОтраженияПодарочныхСертификатов.ВидСертификата,
	|	Выбор когда МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.СчетУчета) = &ПустойСчет
	|		Тогда ЕСТЬNULL(ВидыПодарочныхСертификатов.СчетУчета, &ПустойСчет)
	|		Иначе МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.СчетУчета) Конец КАК СчетУчета,
	|	МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.СчетУчета) = ВидыПодарочныхСертификатов.СчетУчета
	|	ИЛИ МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.СчетУчета) = &ПустойСчет
	|		И НЕ ВидыПодарочныхСертификатов.Ссылка ЕСТЬ NULL КАК СчетУчетаПоУмолчанию,
	|	МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.ТребуетсяНастройка) КАК ТребуетсяНастройка,
	|	МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.ИзмененныеДанные) КАК ИзмененныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПорядокОтражения.Организация КАК Организация,
	|		ПорядокОтражения.ВидСертификата КАК ВидСертификата,
	|		ПорядокОтражения.СчетУчета КАК СчетУчета,
	|		ЛОЖЬ КАК ТребуетсяНастройка,
	|		"""" КАК ИзмененныеДанные
	|	ИЗ
	|		РегистрСведений.ПорядокОтраженияПодарочныхСертификатов КАК ПорядокОтражения
	|	ГДЕ
	|		ПорядокОтражения.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаРеглУчетаТребующиеНастройки.Организация,
	|		ВЫБОР
	|			КОГДА СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыПодарочныхСертификатов.ПустаяСсылка)
	|			ИНАЧЕ СчетаРеглУчетаТребующиеНастройки.АналитикаУчета
	|		КОНЕЦ,
	|		&ПустойСчет,
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам),
	|		NULL
	|	ИЗ
	|		РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|	ГДЕ
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам)
	|		И СчетаРеглУчетаТребующиеНастройки.Организация В(&Организации)) КАК ПорядокОтраженияПодарочныхСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|		ПО (ПорядокОтраженияПодарочныхСертификатов.ВидСертификата = ВидыПодарочныхСертификатов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияПодарочныхСертификатов.Организация,
	|	ПорядокОтраженияПодарочныхСертификатов.ВидСертификата,
	|	ВидыПодарочныхСертификатов.СчетУчета,
	|	ВидыПодарочныхСертификатов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(ВидыПодарочныхСертификатов.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ МАКСИМУМ(ПорядокОтраженияПодарочныхСертификатов.ИзмененныеДанные) ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидСертификата,
	|	Организация";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаПодарочныхСертификатов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияПодарочныхСертификатов", "ТаблицаСчетаУчетаПодарочныхСертификатов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаПодарочныхСертификатов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаРасчетовСПартнерами(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаРасчетовСПартнерами", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.ГруппаФинансовогоУчета,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентами,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовПолученных,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоВознаграждению,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщиками,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовВыданных,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоПретензиям,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентамиТара,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщикамиТара,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентамиПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовПолученныхПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоВознаграждениюПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщикамиПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаАвансовВыданныхПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовПоПретензиямПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСКлиентамиТараПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаРасчетовСПоставщикамиТараПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСКлиентами,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаАвансовПолученных,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовПоВознаграждению,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСПоставщиками,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаАвансовВыданных,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовПоПретензиям,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСКлиентамиТара,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчетаРасчетовСПоставщикамиТара,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаРасчетовСПартнерами
		|ИЗ
		|	&ТаблицаСчетаУчетаРасчетовСПартнерами КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовСКлиентами = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентами, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентами, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовСКлиентами Конец КАК СчетУчетаРасчетовСКлиентами,
	|	Выбор когда ПорядокОтражения.СчетУчетаАвансовПолученных = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовПолученных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовПолученных, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаАвансовПолученных Конец КАК СчетУчетаАвансовПолученных,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовПоВознаграждению = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоВознаграждению, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоВознаграждению, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовПоВознаграждению Конец КАК СчетУчетаРасчетовПоВознаграждению,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовСПоставщиками = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщиками, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщиками, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовСПоставщиками Конец КАК СчетУчетаРасчетовСПоставщиками,
	|	Выбор когда ПорядокОтражения.СчетУчетаАвансовВыданных = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовВыданных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовВыданных, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаАвансовВыданных Конец КАК СчетУчетаАвансовВыданных,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовПоПретензиям = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоПретензиям, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоПретензиям, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовПоПретензиям Конец КАК СчетУчетаРасчетовПоПретензиям,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовСКлиентамиТара = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентамиТара, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовСКлиентамиТара Конец КАК СчетУчетаРасчетовСКлиентамиТара,
	|	Выбор когда ПорядокОтражения.СчетУчетаРасчетовСПоставщикамиТара = &ПустойСчет
	|		Тогда ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщикамиТара, &ПустойСчет))
	|		Иначе ПорядокОтражения.СчетУчетаРасчетовСПоставщикамиТара Конец КАК СчетУчетаРасчетовСПоставщикамиТара,
	|	ПорядокОтражения.СчетУчетаРасчетовСКлиентами = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентами, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентами, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентами, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентами, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовСКлиентами = &ПустойСчет КАК СчетУчетаРасчетовСКлиентамиПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаАвансовПолученных = ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовПолученных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовПолученных, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовПолученных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовПолученных, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаАвансовПолученных = &ПустойСчет КАК СчетУчетаАвансовПолученныхПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаРасчетовПоВознаграждению = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоВознаграждению, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоВознаграждению, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоВознаграждению, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоВознаграждению, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовПоВознаграждению = &ПустойСчет КАК СчетУчетаРасчетовПоВознаграждениюПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаРасчетовСПоставщиками = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщиками, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщиками, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщиками, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщиками, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовСПоставщиками = &ПустойСчет КАК СчетУчетаРасчетовСПоставщикамиПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаАвансовВыданных = ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовВыданных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовВыданных, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаАвансовВыданных, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаАвансовВыданных, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаАвансовВыданных = &ПустойСчет КАК СчетУчетаАвансовВыданныхПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаРасчетовПоПретензиям = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоПретензиям, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоПретензиям, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовПоПретензиям, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовПоПретензиям, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовПоПретензиям = &ПустойСчет КАК СчетУчетаРасчетовПоПретензиямПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаРасчетовСКлиентамиТара = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентамиТара, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСКлиентамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСКлиентамиТара, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовСКлиентамиТара = &ПустойСчет КАК СчетУчетаРасчетовСКлиентамиТараПоУмолчанию,
	|	ПорядокОтражения.СчетУчетаРасчетовСПоставщикамиТара = ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщикамиТара, &ПустойСчет))
	|	ИЛИ ЕСТЬNULL(АналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара, ЕСТЬNULL(ОбщаяНастройка.СчетУчетаРасчетовСПоставщикамиТара, &ПустойСчет)) <> &ПустойСчет
	|	И ПорядокОтражения.СчетУчетаРасчетовСПоставщикамиТара = &ПустойСчет КАК СчетУчетаРасчетовСПоставщикамиТараПоУмолчанию,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентами,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)) КАК ТребуетсяНастройкаСчетУчетаАвансовПолученных,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоВознаграждению,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщиками,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)) КАК ТребуетсяНастройкаСчетУчетаАвансовВыданных,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям)) КАК ТребуетсяНастройкаСчетУчетаРасчетовПоПретензиям,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСКлиентамиТара,
	|	МАКСИМУМ(СчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)) КАК ТребуетсяНастройкаСчетУчетаРасчетовСПоставщикамиТара,
	|	МАКСИМУМ(НЕ СчетаТребующиеНастройки.ВидСчета ЕСТЬ NULL) КАК ТребуетсяНастройка,
	|	"""" КАК ИзмененныеДанные
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ПорядокОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ОбщаяНастройка
	|		ПО ОбщаяНастройка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ОбщаяНастройка.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаРасчетов КАК АналитикиУчета
	|		ПО (ПорядокОтражения.ГруппаФинансовогоУчета = АналитикиУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаТребующиеНастройки
	|		ПО (СчетаТребующиеНастройки.АналитикаУчета = ПорядокОтражения.ГруппаФинансовогоУчета)
	|			И (СчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоВознаграждению),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара),
	|													ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара)))
	|			И (СчетаТребующиеНастройки.Организация В (&Организации))
	|			И (ПорядокОтражения.Организация В (&Организации))
	|			И (СчетаТребующиеНастройки.Организация = ПорядокОтражения.Организация)
	|ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	АналитикиУчета.СчетУчетаРасчетовСКлиентами,
	|	АналитикиУчета.СчетУчетаАвансовПолученных,
	|	АналитикиУчета.СчетУчетаРасчетовПоВознаграждению,
	|	АналитикиУчета.СчетУчетаРасчетовСПоставщиками,
	|	АналитикиУчета.СчетУчетаАвансовВыданных,
	|	АналитикиУчета.СчетУчетаРасчетовПоПретензиям,
	|	АналитикиУчета.СчетУчетаРасчетовСКлиентамиТара,
	|	АналитикиУчета.СчетУчетаРасчетовСПоставщикамиТара,
	|	ПорядокОтражения.СчетУчетаРасчетовСКлиентами,
	|	ПорядокОтражения.СчетУчетаАвансовПолученных,
	|	ПорядокОтражения.СчетУчетаРасчетовПоВознаграждению,
	|	ПорядокОтражения.СчетУчетаРасчетовСПоставщиками,
	|	ПорядокОтражения.СчетУчетаАвансовВыданных,
	|	ПорядокОтражения.СчетУчетаРасчетовПоПретензиям,
	|	ПорядокОтражения.СчетУчетаРасчетовСКлиентамиТара,
	|	ПорядокОтражения.СчетУчетаРасчетовСПоставщикамиТара,
	|	ОбщаяНастройка.СчетУчетаРасчетовСКлиентами,
	|	ОбщаяНастройка.СчетУчетаАвансовПолученных,
	|	ОбщаяНастройка.СчетУчетаРасчетовПоВознаграждению,
	|	ОбщаяНастройка.СчетУчетаРасчетовСПоставщиками,
	|	ОбщаяНастройка.СчетУчетаАвансовВыданных,
	|	ОбщаяНастройка.СчетУчетаРасчетовПоПретензиям,
	|	ОбщаяНастройка.СчетУчетаРасчетовСКлиентамиТара,
	|	ОбщаяНастройка.СчетУчетаРасчетовСПоставщикамиТара,
	|	""""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОтражения.ГруппаФинансовогоУчета,
	|	ПорядокОтражения.Организация";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаРасчетовСПартнерами", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами КАК ПорядокОтражения", "ТаблицаСчетаУчетаРасчетовСПартнерами КАК ПорядокОтражения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)
	|	И НЕ (ПорядокОтражения.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|	И ПорядокОтражения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаРасчетовСПартнерами");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаДоходов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаДоходов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.Подразделение,
		|	ТекущаяТаблицаСчетовУчета.СтатьяДоходов,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаДоходов
		|ИЗ
		|	&ТаблицаСчетаУчетаДоходов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтраженияДоходов.Организация,
	|	ПорядокОтраженияДоходов.СтатьяДоходов,
	|	ПорядокОтраженияДоходов.Подразделение,
	|	Выбор когда МАКСИМУМ(ПорядокОтраженияДоходов.СчетУчета) = &ПустойСчет
	|		Тогда ЕСТЬNULL(СтатьиДоходов.СчетУчета, &ПустойСчет)
	|		Иначе МАКСИМУМ(ПорядокОтраженияДоходов.СчетУчета) Конец КАК СчетУчета,
	|	МАКСИМУМ(ПорядокОтраженияДоходов.СчетУчета) = СтатьиДоходов.СчетУчета
	|	ИЛИ МАКСИМУМ(ПорядокОтраженияДоходов.СчетУчета) = &ПустойСчет
	|		И НЕ СтатьиДоходов.Ссылка ЕСТЬ NULL КАК СчетУчетаПоУмолчанию,
	|	МАКСИМУМ(ПорядокОтраженияДоходов.ТребуетсяНастройка) КАК ТребуетсяНастройка,
	|	МАКСИМУМ(ПорядокОтраженияДоходов.ИзмененныеДанные) КАК ИзмененныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПорядокОтражения.Организация КАК Организация,
	|		ПорядокОтражения.Подразделение КАК Подразделение,
	|		ПорядокОтражения.СтатьяДоходов КАК СтатьяДоходов,
	|		ПорядокОтражения.СчетУчета КАК СчетУчета,
	|		ЛОЖЬ КАК ТребуетсяНастройка,
	|		"""" КАК ИзмененныеДанные
	|	ИЗ
	|		РегистрСведений.ПорядокОтраженияДоходов КАК ПорядокОтражения
	|	ГДЕ
	|		ПорядокОтражения.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаРеглУчетаТребующиеНастройки.Организация,
	|		СчетаРеглУчетаТребующиеНастройки.МестоУчета,
	|		ВЫБОР
	|			КОГДА СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|			ИНАЧЕ СчетаРеглУчетаТребующиеНастройки.АналитикаУчета
	|		КОНЕЦ,
	|		&ПустойСчет,
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы),
	|		NULL
	|	ИЗ
	|		РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|	ГДЕ
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы)
	|		И СчетаРеглУчетаТребующиеНастройки.Организация В(&Организации)) КАК ПорядокОтраженияДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|		ПО (ПорядокОтраженияДоходов.СтатьяДоходов = СтатьиДоходов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияДоходов.Организация,
	|	ПорядокОтраженияДоходов.СтатьяДоходов,
	|	ПорядокОтраженияДоходов.Подразделение,
	|	СтатьиДоходов.СчетУчета,
	|	СтатьиДоходов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(СтатьиДоходов.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ МАКСИМУМ(ПорядокОтраженияДоходов.ИзмененныеДанные) ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьяДоходов,
	|	Организация,
	|	Подразделение";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаДоходов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияДоходов", "ТаблицаСчетаУчетаДоходов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаДоходов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСчетаУчетаРасходов(СтруктураТаблиц, ТекстыЗапроса, Запрос)
	
	ТаблицаИсточник = Неопределено;
	Если Не СтруктураТаблиц.Свойство("СчетаУчетаРасходов", ТаблицаИсточник) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТаблицаИсточник <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТекущаяТаблицаСчетовУчета.Организация,
		|	ТекущаяТаблицаСчетовУчета.Подразделение,
		|	ТекущаяТаблицаСчетовУчета.СтатьяРасходов,
		|	ТекущаяТаблицаСчетовУчета.ВидЦенностиНДС,
		|	ТекущаяТаблицаСчетовУчета.ВидДеятельностиРасходов,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчета,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияОСНО,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияЕНВД,
		|
		|	ТекущаяТаблицаСчетовУчета.СчетУчетаПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияОСНОПоУмолчанию,
		|	ТекущаяТаблицаСчетовУчета.СчетСписанияЕНВДПоУмолчанию,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетУчета,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетСписанияОСНО,
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройкаСчетСписанияЕНВД,
		|
		|	ТекущаяТаблицаСчетовУчета.ТребуетсяНастройка,
		|	ТекущаяТаблицаСчетовУчета.ИзмененныеДанные
		|
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаРасходов
		|ИЗ
		|	&ТаблицаСчетаУчетаРасходов КАК ТекущаяТаблицаСчетовУчета";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтраженияРасходов.Организация,
	|	ПорядокОтраженияРасходов.СтатьяРасходов,
	|	ПорядокОтраженияРасходов.Подразделение,
	|	СтатьиРасходов.ВидЦенностиНДС,
	|	СтатьиРасходов.ВидДеятельностиРасходов,
	|	Выбор когда МАКСИМУМ(ПорядокОтраженияРасходов.СчетУчета) = &ПустойСчет
	|		Тогда ЕСТЬNULL(СтатьиРасходов.СчетУчета, &ПустойСчет)
	|		Иначе МАКСИМУМ(ПорядокОтраженияРасходов.СчетУчета) Конец КАК СчетУчета,
	|	Выбор когда МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияОСНО) = &ПустойСчет
	|		Тогда ЕСТЬNULL(СтатьиРасходов.СчетСписанияОСНО, &ПустойСчет)
	|		Иначе МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияОСНО) Конец КАК СчетСписанияОСНО,
	|	Выбор когда МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияЕНВД) = &ПустойСчет
	|		Тогда ЕСТЬNULL(СтатьиРасходов.СчетСписанияЕНВД, &ПустойСчет)
	|		Иначе МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияЕНВД) Конец КАК СчетСписанияЕНВД,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.СчетУчета) = СтатьиРасходов.СчетУчета
	|	ИЛИ МАКСИМУМ(ПорядокОтраженияРасходов.СчетУчета) = &ПустойСчет
	|		И НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL КАК СчетУчетаПоУмолчанию,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияОСНО) = СтатьиРасходов.СчетСписанияОСНО
	|	ИЛИ МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияОСНО) = &ПустойСчет
	|		И НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL КАК СчетСписанияОСНОПоУмолчанию,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияЕНВД) = СтатьиРасходов.СчетСписанияЕНВД
	|	ИЛИ МАКСИМУМ(ПорядокОтраженияРасходов.СчетСписанияЕНВД) = &ПустойСчет
	|		И НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL КАК СчетСписанияЕНВДПоУмолчанию,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.ТребуетсяНастройкаСчетУчета) КАК ТребуетсяНастройкаСчетУчета,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.ТребуетсяНастройкаСчетСписанияОСНО) КАК ТребуетсяНастройкаСчетСписанияОСНО,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.ТребуетсяНастройкаСчетСписанияЕНВД) КАК ТребуетсяНастройкаСчетСписанияЕНВД,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.ТребуетсяНастройка) КАК ТребуетсяНастройка,
	|	МАКСИМУМ(ПорядокОтраженияРасходов.ИзмененныеДанные) КАК ИзмененныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПорядокОтражения.Организация КАК Организация,
	|		ПорядокОтражения.Подразделение КАК Подразделение,
	|		ПорядокОтражения.СтатьяРасходов КАК СтатьяРасходов,
	|		ПорядокОтражения.СчетУчета КАК СчетУчета,
	|		ПорядокОтражения.СчетСписанияОСНО КАК СчетСписанияОСНО,
	|		ПорядокОтражения.СчетСписанияЕНВД КАК СчетСписанияЕНВД,
	|		ЛОЖЬ КАК ТребуетсяНастройкаСчетУчета,
	|		ЛОЖЬ КАК ТребуетсяНастройкаСчетСписанияОСНО,
	|		ЛОЖЬ КАК ТребуетсяНастройкаСчетСписанияЕНВД,
	|		ЛОЖЬ КАК ТребуетсяНастройка,
	|		"""" КАК ИзмененныеДанные
	|	ИЗ
	|		РегистрСведений.ПорядокОтраженияРасходов КАК ПорядокОтражения
	|	ГДЕ
	|		ПорядокОтражения.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаРеглУчетаТребующиеНастройки.Организация,
	|		СчетаРеглУчетаТребующиеНастройки.МестоУчета,
	|		ВЫБОР
	|			КОГДА СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|			ИНАЧЕ СчетаРеглУчетаТребующиеНастройки.АналитикаУчета
	|		КОНЕЦ,
	|		&ПустойСчет,
	|		&ПустойСчет,
	|		&ПустойСчет,
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы),
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовОСНО),
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД),
	|		ИСТИНА,
	|		NULL
	|	ИЗ
	|		РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
	|	ГДЕ
	|		СчетаРеглУчетаТребующиеНастройки.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы),
	|													 ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовОСНО),
	|													 ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД))
	|		И СчетаРеглУчетаТребующиеНастройки.Организация В(&Организации)) КАК ПорядокОтраженияРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (ПорядокОтраженияРасходов.СтатьяРасходов = СтатьиРасходов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияРасходов.Организация,
	|	ПорядокОтраженияРасходов.СтатьяРасходов,
	|	ПорядокОтраженияРасходов.Подразделение,
	|	СтатьиРасходов.ВидЦенностиНДС,
	|	СтатьиРасходов.ВидДеятельностиРасходов,
	|	СтатьиРасходов.СчетУчета,
	|	СтатьиРасходов.СчетСписанияОСНО,
	|	СтатьиРасходов.СчетСписанияЕНВД,
	|	СтатьиРасходов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(СтатьиРасходов.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ МАКСИМУМ(ПорядокОтраженияРасходов.ИзмененныеДанные) ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОтраженияРасходов.СтатьяРасходов,
	|	Организация,
	|	Подразделение";
	
	Если ТаблицаИсточник <> Неопределено Тогда
		// Задана таблица - источник, значит данные по счетам берем из представленной таблицы и лишь обновляем требуемые счета по данным регистра с ошибками:
		Запрос.УстановитьПараметр("ТаблицаСчетаУчетаРасходов", ТаблицаИсточник);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокОтраженияРасходов", "ТаблицаСчетаУчетаРасходов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "ПорядокОтражения.ИзмененныеДанные");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"ГДЕ
	|	ПорядокОтражения.Организация В(&Организации)",
									"");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "СчетаУчетаРасходов");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
