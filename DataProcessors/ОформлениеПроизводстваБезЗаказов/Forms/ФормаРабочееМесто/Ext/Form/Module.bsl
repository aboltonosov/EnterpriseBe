#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Параметры.Свойство("ПериодРегистрации", ПериодРегистрации);
	
	Если Не НесколькоОрганизаций Тогда
		Организация = Неопределено;
	Иначе
		Параметры.Свойство("Организация", Организация);
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Параметры.Свойство("Подразделение", Подразделение);
	Параметры.Свойство("Номенклатура", Номенклатура);
	Параметры.Свойство("Назначение", Назначение);
	Параметры.Свойство("ТребуетсяНастройка", ТребуетсяНастройка);
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Элементы.Организация.Видимость = НесколькоОрганизаций;
	Элементы.КОформлениюОрганизация.Видимость = НесколькоОрганизаций;
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа);
	ОбъектыМетаданных.Добавить(Метаданные.Документы.РаспределениеВозвратныхОтходов);
	
	// СтандартныеПодсистемы.ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании, ОбъектыМетаданных);
	// Конец СтандартныеПодсистемы.ВводНаОсновании

	// СтандартныеПодсистемы.ВнешниеОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВнешниеОбработки
	
	// СтандартныеПодсистемы.МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты, ОбъектыМетаданных);
	// Конец СтандартныеПодсистемы.МенюОтчеты
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать, ОбъектыМетаданных);
	// Конец СтандартныеПодсистемы.Печать
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	ОбновитьОтборы();
	УстановитьОформлениеИтогиРассчитаны();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Настройки["ПериодРегистрации"] = Параметры["ПериодРегистрации"];
	КонецЕсли;
	
	Если Не НесколькоОрганизаций Тогда
		Настройки["Организация"] = Неопределено;
	ИначеЕсли Параметры.Свойство("Организация") Тогда
		Настройки["Организация"] = Параметры["Организация"];
	КонецЕсли;
	Настройки["Организация"] = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Настройки["Организация"]);
	
	Если Параметры.Свойство("Подразделение") Тогда
		Настройки["Подразделение"] = Параметры["Подразделение"];
	КонецЕсли;
	
	Если Параметры.Свойство("Номенклатура") Тогда
		Настройки["Номенклатура"] = Параметры["Номенклатура"];
	КонецЕсли;
	
	Если Параметры.Свойство("Назначение") Тогда
		Настройки["Назначение"] = Параметры["Назначение"];
	КонецЕсли;
	
	Если Параметры.Свойство("ТребуетсяНастройка") Тогда
		Настройки["ТребуетсяНастройка"] = Параметры["ТребуетсяНастройка"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "МодельФормированияСтоимости_Изменение" Тогда
		
		Элементы.КОформлению.Обновить();
		
	ИначеЕсли ИмяСобытия = "ПроизводствоБезЗаказа_Запись"
		ИЛИ ИмяСобытия = "РаспределениеВозвратныхОтходов_Запись" Тогда
		
		ОбновитьДанныеСписков();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцСтрокаНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		ПериодРегистрации = ВыбранныйПериод;
		МесяцСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ПериодРегистрации", Новый Структура("Тип, Значение", "Отбор", ПериодРегистрации));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ДатаНачала",			Новый Структура("Тип, Значение", "Параметр", НачалоМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ДатаОкончания",		Новый Структура("Тип, Значение", "Параметр", КонецМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ПериодРегистрации",	Новый Структура("Тип, Значение", "Параметр", ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	УстановитьОформлениеИтогиРассчитаны();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	МесяцСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ПериодРегистрации", Новый Структура("Тип, Значение", "Отбор", ПериодРегистрации));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ДатаНачала",			Новый Структура("Тип, Значение", "Параметр", НачалоМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ДатаОкончания",		Новый Структура("Тип, Значение", "Параметр", КонецМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ПериодРегистрации",	 Новый Структура("Тип, Значение", "Параметр", ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	УстановитьОформлениеИтогиРассчитаны();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаПриИзменении(Элемент)
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ПериодРегистрации", Новый Структура("Тип, Значение", "Отбор", ПериодРегистрации));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ДатаНачала",			Новый Структура("Тип, Значение", "Параметр", НачалоМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ДатаОкончания",		Новый Структура("Тип, Значение", "Параметр", КонецМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ПериодРегистрации",	Новый Структура("Тип, Значение", "Параметр", ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	УстановитьОформлениеИтогиРассчитаны();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Элементы.Организация.Видимость = Не ЗначениеЗаполнено(Организация);
	Элементы.КОформлениюОрганизация.Видимость = Не ЗначениеЗаполнено(Организация);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Организация", Новый Структура("Тип, Значение", "Отбор", Организация));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Организация", Новый Структура("Тип, Значение", "Отбор", Организация));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Организация.Видимость = Не ЗначениеЗаполнено(Организация);
	Элементы.КОформлениюОрганизация.Видимость = Не ЗначениеЗаполнено(Организация);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Организация", Новый Структура("Тип, Значение", "Отбор", Организация));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Организация", Новый Структура("Тип, Значение", "Отбор", Организация));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	Элементы.Подразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	Элементы.КОформлениюПодразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Подразделение", Новый Структура("Тип, Значение", "Отбор", Подразделение));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Подразделение", Новый Структура("Тип, Значение", "Отбор", Подразделение));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Подразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	Элементы.КОформлениюПодразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Подразделение", Новый Структура("Тип, Значение", "Отбор", Подразделение));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Подразделение", Новый Структура("Тип, Значение", "Отбор", Подразделение));
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Номенклатура", Новый Структура("Тип, Значение", "Отбор", Номенклатура));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Номенклатура", Новый Структура("Тип, Значение", "Отбор", Номенклатура));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	Элементы.КОформлениюНазначение.Видимость = Не ЗначениеЗаполнено(Назначение);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Назначение", Новый Структура("Тип, Значение", "Отбор", Назначение));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.КОформлениюНазначение.Видимость = Не ЗначениеЗаполнено(Назначение);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Назначение", Новый Структура("Тип, Значение", "Отбор", Назначение));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИтогиНеРассчитаныНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияИтогиНеРассчитаныНажатиеЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УправлениеИтогамиИАгрегатами.Форма",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКОформлению

&НаКлиенте
Процедура ТребуетсяНастройкаПриИзменении(Элемент)
	
	ПараметрОтбора	= Новый Структура("Тип, Значение",
										"Отбор", ?(ТребуетсяНастройка, ТребуетсяНастройка, Неопределено));
	
	СтруктураОтборов	= Новый Структура;
	СтруктураОтборов.Вставить("ТребуетсяНастройка",	ПараметрОтбора);
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если Поле.Имя = "КОформлениюНастройка"
		И Не ТекущиеДанные = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МодельФормированияСтоимости",	ТекущиеДанные.МодельФормированияСтоимости);
		ПараметрыФормы.Вставить("ПравилоРаспределения",			ТекущиеДанные.СпецификацияПравило);
		ПараметрыФормы.Вставить("Спецификация",					ТекущиеДанные.СпецификацияПравило);
		ПараметрыФормы.Вставить("ОтражатьЗатратыДокументом",	ТекущиеДанные.ОтражатьЗатратыДокументом);
		ПараметрыФормы.Вставить("ТребуетсяНастройка",			ТекущиеДанные.ТребуетсяНастройка);

		ПараметрыОтбора = Новый Структура("Подразделение, Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТекущиеДанные);
		ПараметрыФормы.Вставить("ПараметрыОтбора", ПараметрыОтбора);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеМоделиЗавершение", ЭтаФорма);
		
		Форма = ОткрытьФорму("Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаНастройкаМоделиФормированияСтоимости",
								ПараметрыФормы,
								ЭтаФорма,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокДокументов);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.МенюОтчеты

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокДокументов);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокДокументов);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВводНаОсновании

#Область ОбработчикиКомандСтраницыКОформлению

&НаКлиенте
Процедура КОформлениюОформитьСогласноНастройке(Команда)
	
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	НеУказанаМодель			= 0;
	ИзделияПоСпецификации	= Новый Массив;
	ИзделияПоПравилу		= Новый Массив;
	ТипСпецификация			= Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	ТипПравилоРаспределения	= Новый ОписаниеТипов("СправочникСсылка.ПравилаРаспределенияРасходов");
	ВыпускВПодразделение	= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
	ВыпускНаСклад			= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	ТипРабота				= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	МодельПродукция			= ПредопределенноеЗначение("Перечисление.ТипыМоделейФормированияСтоимости.ВыпускПоРассчитываемойСтоимости");
	МодельВозвратныйОтход	= ПредопределенноеЗначение("Перечисление.ТипыМоделейФормированияСтоимости.ВыпускПоФиксированнойСтоимости");
	
	Для Каждого ЭлКоллекции Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучательПодразделение	= ДанныеСтроки.ТипНоменклатуры = ТипРабота;
		Получатель				= ?(ПолучательПодразделение, ДанныеСтроки.Подразделение, ДанныеСтроки.Кладовая);
		НаправлениеВыпуска		= ?(ПолучательПодразделение, ВыпускВПодразделение, ВыпускНаСклад);
		ТребуетсяПравило		= ДанныеСтроки.МодельФормированияСтоимости = МодельВозвратныйОтход;
		ТребуетсяСпецификация	= ДанныеСтроки.МодельФормированияСтоимости = МодельПродукция;
		
		
		СтруктураИзделия = Новый Структура("Организация, ГруппировкаЗатрат,
											|Подразделение, Получатель, Номенклатура,
											|Характеристика, Серия, Назначение, МодельФормированияСтоимости,
											|Спецификация, ПравилоРаспределения, НаправлениеВыпуска,
											|Количество, ОшибкаВНастройкахМодели");
		
		ЗаполнитьЗначенияСвойств(СтруктураИзделия, ДанныеСтроки);
		
		Если Не ДанныеСтроки.Свойство("Организация") Тогда
			СтруктураИзделия.Организация = Организация;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Подразделение") Тогда
			СтруктураИзделия.Подразделение = Подразделение;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Назначение") Тогда
			СтруктураИзделия.Назначение = Назначение;
		КонецЕсли;
		
		СтруктураИзделия.НаправлениеВыпуска		= НаправлениеВыпуска;
		СтруктураИзделия.Количество				= ДанныеСтроки.КОформлению;
		СтруктураИзделия.Получатель				= Получатель;
		СтруктураИзделия.Спецификация			= ТипСпецификация.ПривестиЗначение(ДанныеСтроки.СпецификацияПравило);
		СтруктураИзделия.ПравилоРаспределения	= ТипПравилоРаспределения.ПривестиЗначение(ДанныеСтроки.СпецификацияПравило);
		
		Если ТребуетсяСпецификация Тогда
			Если СтруктураИзделия.Спецификация.Пустая() Тогда
				СтруктураИзделия.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются");
			Иначе
				СтруктураИзделия.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям");
			КонецЕсли;
			ИзделияПоСпецификации.Добавить(СтруктураИзделия);
		КонецЕсли;
		
		Если ТребуетсяПравило Тогда
			ИзделияПоПравилу.Добавить(СтруктураИзделия);
		КонецЕсли;
		
		Если Не ТребуетсяСпецификация
			И Не ТребуетсяПравило Тогда
			СтруктураИзделия.ОшибкаВНастройкахМодели = Истина;
			НеУказанаМодель = НеУказанаМодель + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВопроса = НСтр("ru = 'При проверке настроек модели формирования стоимости возникли ошибки:'");
	ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Не указана модель формирования стоимости (%1 из %2)'");
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("ИзделияПоСпецификации",	ИзделияПоСпецификации);
	ПараметрыДокументов.Вставить("ИзделияПоПравилу",		ИзделияПоПравилу);
	ПараметрыДокументов.Вставить("ЗаполнятьАвтоматически",	Истина);
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("ВозвратныеОтходы");
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");
	
	ПараметрыДокументов.Вставить("ПереченьДанных",	ПереченьДанных);
	ПараметрыДокументов.Вставить("ОбъектыФормы",	Новый Структура());
	
	ФормаДокумента = ПолучитьФорму("Документ.ПроизводствоБезЗаказа.ФормаОбъекта",, ЭтаФорма);
	ПараметрыДокументов.ОбъектыФормы.Вставить("ПроизводствоБезЗаказа", ФормаДокумента.Объект);
	
	ФормаДокумента = ПолучитьФорму("Документ.РаспределениеВозвратныхОтходов.ФормаОбъекта",, ЭтаФорма);
	ПараметрыДокументов.ОбъектыФормы.Вставить("РаспределениеВозвратныхОтходов", ФормаДокумента.Объект);
	
	Если НеУказанаМодель = ВыделенныеСтроки.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Ни для одной строки не заданы настройки. Не будет сформировано ни одного документа.'"));
		Возврат;
	КонецЕсли;
	
	Если Не НеУказанаМодель = 0 Тогда
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Документы по таким строкам сформированы не будут. Продолжить?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, НеУказанаМодель, ВыделенныеСтроки.Количество());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КОформлениюОформитьСогласноНастройкеЗавершение", ЭтаФорма, ПараметрыДокументов);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		Результат = ДокументыПоПараметрам(ПараметрыДокументов);
		ОбработатьСформированныеДокументы(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюПроизводствоБезЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ИзделияПоСпецификации	= Новый Массив;
	ИзделияПоПравилу		= Новый Массив;
	ВыпускВПодразделение	= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
	ВыпускНаСклад			= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	ТипРабота				= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	ТипСпецификация			= Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	
	Для Каждого ЭлКоллекции Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучательПодразделение	= ДанныеСтроки.ТипНоменклатуры = ТипРабота;
		Получатель				= ?(ПолучательПодразделение, ДанныеСтроки.Подразделение, ДанныеСтроки.Кладовая);
		НаправлениеВыпуска		= ?(ПолучательПодразделение, ВыпускВПодразделение, ВыпускНаСклад);
		
		СтруктураИзделия = Новый Структура("Организация, ГруппировкаЗатрат,
											|Подразделение, Получатель, Номенклатура,
											|Характеристика, Серия, Назначение, МодельФормированияСтоимости,
											|Спецификация, ПравилоРаспределения, НаправлениеВыпуска,
											|Количество, ОшибкаВНастройкахМодели");
		
		ЗаполнитьЗначенияСвойств(СтруктураИзделия, ДанныеСтроки);
		
		Если Не ДанныеСтроки.Свойство("Организация") Тогда
			СтруктураИзделия.Организация = Организация;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Подразделение") Тогда
			СтруктураИзделия.Подразделение = Подразделение;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Назначение") Тогда
			СтруктураИзделия.Назначение = Назначение;
		КонецЕсли;
		
		СтруктураИзделия.ГруппировкаЗатрат	= ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции");
		СтруктураИзделия.НаправлениеВыпуска	= НаправлениеВыпуска;
		СтруктураИзделия.Количество			= ДанныеСтроки.КОформлению;
		СтруктураИзделия.Получатель			= Получатель;
		СтруктураИзделия.Спецификация		= ТипСпецификация.ПривестиЗначение(ДанныеСтроки.СпецификацияПравило);
		ИзделияПоСпецификации.Добавить(СтруктураИзделия);
		
	КонецЦикла;
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("ИзделияПоСпецификации",	ИзделияПоСпецификации);
	ПараметрыДокументов.Вставить("ИзделияПоПравилу",		ИзделияПоПравилу);
	ПараметрыДокументов.Вставить("ЗаполнятьАвтоматически",	Ложь);
	ПараметрыДокументов.Вставить("ПереченьДанных",			Новый Массив);
	ПараметрыДокументов.Вставить("ОбъектыФормы",			Новый Структура());
	
	ФормаДокумента = ПолучитьФорму("Документ.ПроизводствоБезЗаказа.ФормаОбъекта",, ЭтаФорма);
	ПараметрыДокументов.ОбъектыФормы.Вставить("ПроизводствоБезЗаказа", ФормаДокумента.Объект);
	
	Результат = ДокументыПоПараметрам(ПараметрыДокументов);
	ОбработатьСформированныеДокументы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюРаспределениеВозвратныхОтходов(Команда)
	
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ИзделияПоСпецификации	= Новый Массив;
	ИзделияПоПравилу		= Новый Массив;
	ВыпускВПодразделение	= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
	ВыпускНаСклад			= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	ТипРабота				= ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	ТипПравилоРаспределения	= Новый ОписаниеТипов("СправочникСсылка.ПравилаРаспределенияРасходов");
	
	Для Каждого ЭлКоллекции Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(ЭлКоллекции);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучательПодразделение	= ДанныеСтроки.ТипНоменклатуры = ТипРабота;
		Получатель				= ?(ПолучательПодразделение, ДанныеСтроки.Подразделение, ДанныеСтроки.Кладовая);
		НаправлениеВыпуска		= ?(ПолучательПодразделение, ВыпускВПодразделение, ВыпускНаСклад);
		
		СтруктураИзделия = Новый Структура("Организация, ГруппировкаЗатрат,
											|Подразделение, Получатель, Номенклатура,
											|Характеристика, Серия, Назначение, МодельФормированияСтоимости,
											|Спецификация, ПравилоРаспределения, НаправлениеВыпуска,
											|Количество, ОшибкаВНастройкахМодели");
		
		ЗаполнитьЗначенияСвойств(СтруктураИзделия, ДанныеСтроки);
		
		Если Не ДанныеСтроки.Свойство("Организация") Тогда
			СтруктураИзделия.Организация = Организация;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Подразделение") Тогда
			СтруктураИзделия.Подразделение = Подразделение;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Свойство("Назначение") Тогда
			СтруктураИзделия.Назначение = Назначение;
		КонецЕсли;
		
		СтруктураИзделия.НаправлениеВыпуска		= НаправлениеВыпуска;
		СтруктураИзделия.Количество				= ДанныеСтроки.КОформлению;
		СтруктураИзделия.Получатель				= Получатель;
		СтруктураИзделия.ПравилоРаспределения	= ТипПравилоРаспределения.ПривестиЗначение(ДанныеСтроки.СпецификацияПравило);
		
		ИзделияПоПравилу.Добавить(СтруктураИзделия);
		
	КонецЦикла;
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("ИзделияПоСпецификации",	ИзделияПоСпецификации);
	ПараметрыДокументов.Вставить("ИзделияПоПравилу",		ИзделияПоПравилу);
	ПараметрыДокументов.Вставить("ЗаполнятьАвтоматически",	Ложь);
	ПараметрыДокументов.Вставить("ПереченьДанных",			Новый Массив);
	ПараметрыДокументов.Вставить("ОбъектыФормы",			Новый Структура());
	
	ФормаДокумента = ПолучитьФорму("Документ.РаспределениеВозвратныхОтходов.ФормаОбъекта",, ЭтаФорма);
	ПараметрыДокументов.ОбъектыФормы.Вставить("РаспределениеВозвратныхОтходов", ФормаДокумента.Объект);
	
	Результат = ДокументыПоПараметрам(ПараметрыДокументов);
	ОбработатьСформированныеДокументы(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбновить(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто.Команда.КОформлениюОбновить");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Элементы.КОформлению.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюНастроитьМодель(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто.Команда.КОформлениюНастроитьМодель");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	
	Если Не ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПараметрыФормы = Новый Структура("МодельФормированияСтоимости, ОтражатьЗатратыДокументом, Спецификация, ПравилоРаспределения, ПараметрыОтбора");
		
		МодельФормированияСтоимости	= Неопределено;
		СпецификацияПравило			= Неопределено;
		ОтражатьЗатратыДокументом	= Неопределено;
		ТребуетсяНастройка			= Неопределено;
		
		ОднаМодель = Истина;
		ОднаСпецификацияПравило = Истина;
		ОдноОтражениеЗатаратВДокументе = Истина;
		ОднаТребуетсяНастройка = Истина;
		
		ПараметрыОтбора = Новый Массив;
		
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(ТекСтрока);
			
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МодельФормированияСтоимости = Неопределено Тогда
				МодельФормированияСтоимости	= ДанныеСтроки.МодельФормированияСтоимости;
				СпецификацияПравило			= ДанныеСтроки.СпецификацияПравило;
				ОтражатьЗатратыДокументом	= ДанныеСтроки.ОтражатьЗатратыДокументом;
				ТребуетсяНастройка			= ДанныеСтроки.ТребуетсяНастройка;
			КонецЕсли;
			
			Если Не МодельФормированияСтоимости = ДанныеСтроки.МодельФормированияСтоимости Тогда
				ОднаМодель = Ложь;
			КонецЕсли;
			
			Если Не СпецификацияПравило = ДанныеСтроки.СпецификацияПравило Тогда
				ОднаСпецификацияПравило = Ложь;
			КонецЕсли;
			
			Если Не ОтражатьЗатратыДокументом = ДанныеСтроки.ОтражатьЗатратыДокументом Тогда
				ОдноОтражениеЗатаратВДокументе = Ложь;
			КонецЕсли;
			
			Если Не ТребуетсяНастройка = ДанныеСтроки.ТребуетсяНастройка Тогда
				ОднаТребуетсяНастройка = Ложь;
			КонецЕсли;
			
			Параметр = Новый Структура("Подразделение, Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(Параметр, ДанныеСтроки);
			ПараметрыОтбора.Добавить(Параметр);
			
		КонецЦикла;
		
		ПараметрыФормы.Вставить("ПараметрыОтбора", ПараметрыОтбора);
		
		Если ОднаМодель Тогда
			ПараметрыФормы.Вставить("МодельФормированияСтоимости", МодельФормированияСтоимости);
		КонецЕсли;
		
		Если ОднаСпецификацияПравило Тогда
			ПараметрыФормы.Вставить("ПравилоРаспределения", СпецификацияПравило);
			ПараметрыФормы.Вставить("Спецификация", СпецификацияПравило);
		КонецЕсли;
		
		Если ОдноОтражениеЗатаратВДокументе Тогда
			ПараметрыФормы.Вставить("ОтражатьЗатратыДокументом", ОтражатьЗатратыДокументом);
		КонецЕсли;
		
		Если ОднаТребуетсяНастройка Тогда
			ПараметрыФормы.Вставить("ТребуетсяНастройка", ТребуетсяНастройка);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеМоделиЗавершение", ЭтаФорма);
		
		Форма = ОткрытьФорму("Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаНастройкаМоделиФормированияСтоимости",
								ПараметрыФормы,
								ЭтаФорма,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОчиститьМодель(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто.Команда.КОформлениюОчиститьМодель");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ВыделенныеСтроки = Элементы.КОформлению.ВыделенныеСтроки;
	
	Если Не ВыделенныеСтроки.Количество() = 0 Тогда
		
		Строки = Новый Массив;
		
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.КОформлению.ДанныеСтроки(ТекСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("Подразделение, Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ДанныеСтроки);
			Строки.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		КОформлениюОчиститьМодельСервер(Строки);
		
		Элементы.КОформлению.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандСтраницыОформлено

&НаКлиенте
Процедура СоздатьПроизводствоБезЗаказа(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗначенияЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПроизводствоБезЗаказа.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРаспределениеВозвратныхОтходов(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗначенияЗаполнения.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.РаспределениеВозвратныхОтходов.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещение = Новый ОписаниеОповещения("ОбновитьДанныеСписков", ЭтаФорма);
		ПоказатьЗначение(ОписаниеОповещение, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовИзменить(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовСкопировать(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Документ = ТекущиеДанные.Ссылка;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Документ);
		
		ИмяДокумента = ИмяДокумента(Документ);
		ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовУстановитьПометкуУдаления(Команда)
	
	ВыделенныеСтрокиСписка = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Если ВыделенныеСтрокиСписка.Количество() <> 0 Тогда
		
		ВыделенныеСтроки = Новый Массив;
		
		Для Каждого ТекСтрока Из ВыделенныеСтрокиСписка Цикл
			ВыделенныеСтроки.Добавить(Элементы.СписокДокументов.ДанныеСтроки(ТекСтрока).Ссылка);
		КонецЦикла;
		
		ЕстьПомеченныеНаУдаление = ЕстьПомеченныеНаУдаление(ВыделенныеСтроки);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			Документ = ВыделенныеСтроки[0];
			ТекстВопроса = ?(ЕстьПомеченныеНаУдаление, НСтр("ru='Снять с ""%1"" пометку на удаление?'"),
			НСтр("ru='Пометить ""%1"" на удаление?'"));
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Документ);
		Иначе
			ТекстВопроса = ?(ЕстьПомеченныеНаУдаление, НСтр("ru='Снять с выделенных элементов пометку на удаление?'"),
			НСтр("ru='Пометить выделенные элементы на удаление?'"));
		КонецЕсли;
		
		СписокОтветов = Новый СписокЗначений;
		СписокОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Да'"));
		СписокОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Нет'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", 
			ЭтотОбъект, 
			Новый Структура("ВыделенныеСтроки, УстановкаПометкиУдаления", ВыделенныеСтроки, НЕ ЕстьПомеченныеНаУдаление)), 
			ТекстВопроса, 
			СписокОтветов);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОтменаПроведения(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Новый Массив;
		
	Для Каждого ТекСтрока Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Элементы.СписокДокументов.ДанныеСтроки(ТекСтрока).Ссылка);
	КонецЦикла;
	
	РезультатПроведения = ПроведениеДокументов(ВыделенныеСтроки, Ложь);
	
	ДокументыДляОбработки = РезультатПроведения.ДокументыДляОбработки;
	НеОбработанныеДокументы = РезультатПроведения.НепроведенныеДокументы;
	
	ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, НеОбработанныеДокументы, Ложь);
	
	ОбновитьДанныеСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПровести(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Новый Массив;
	
	Для Каждого ТекСтрока Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Элементы.СписокДокументов.ДанныеСтроки(ТекСтрока).Ссылка);
	КонецЦикла;
	
	РезультатПроведения = ПроведениеДокументов(ВыделенныеСтроки, Истина);
	
	ДокументыДляОбработки = РезультатПроведения.ДокументыДляОбработки;
	НеОбработанныеДокументы = РезультатПроведения.НепроведенныеДокументы;
	
	ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, НеОбработанныеДокументы, Истина);
	
	ОбновитьДанныеСписков();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "СписокДокументов.Дата", "Дата");
	
	// Установка цвета для ячеек, требующих настройки
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюНастройка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.ТребуетсяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Без назначения, если назначение не заполнено.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<без назначения>'"));
	
	// Установка текста кладовой для работ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюКладовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	
	// Без серии, если серия не заполнена.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КОформлениюСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КОформлению.Серия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Нстр("ru = '<без серии>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеИтогиРассчитаны()
	
	Элементы.ДекорацияИтогиНеРассчитаны.Видимость = Не ИтогиРассчитаны;
	
	Если Не ИтогиРассчитаны Тогда
		ТекстЗаголовка = НСтр("ru = 'Не рассчитаны итоги за: %1. Отбор по периоду не используется.'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, МесяцСтрока);
		Элементы.ДекорацияИтогиНеРассчитаны.Заголовок = ТекстЗаголовка;
	Иначе
		Элементы.ДекорацияИтогиНеРассчитаны.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандСлужебные

&НаСервере
Функция ПроведениеДокументов(ВыделенныеСтроки, Проведение = Истина)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОписаниеЗамера = Производительность.НачатьЗамерВремени(
		"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто.Команда.СписокДокументовПровести");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтруктураВозврата = ПровестиДокументы(ВыделенныеСтроки, Проведение);
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	КоличествоОпераций = СтруктураВозврата.ДокументыДляОбработки.Количество();
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоОпераций);
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПровестиДокументы(ВыделенныеСтроки, Проведение = Истина)
	
	СтруктураВозврата = Новый Структура("ДокументыДляОбработки, НепроведенныеДокументы");
	
	НепроведенныеДокументы = Новый Массив();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("ДокументыДляОбработки", Новый Массив());
		СтруктураВозврата.Вставить("НепроведенныеДокументы", Новый Массив());
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументыДляОбработки = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если Проведение Тогда
		НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыДляОбработки);
	Иначе
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			
			НачатьТранзакцию();
			Блокировка = Новый БлокировкаДанных;
			
			Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.ПроизводствоБезЗаказа");
			ИначеЕсли ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.РаспределениеВозвратныхОтходов") Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ.РаспределениеВозвратныхОтходов");
			Иначе
				ПредставлениеОшибки = НСтр("ru = 'Документ %1 недоступен для обработки. Обратитесь к администратору.'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, Строка(ТекСтрока));
				НепроведенныеДокументы.Добавить(Новый Структура("Ссылка, ОписаниеОшибки", ТекСтрока, ПредставлениеОшибки));
				Продолжить;
			КонецЕсли;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекСтрока);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Попытка
				Блокировка.Заблокировать();
				ДокументОбъект = ТекСтрока.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ЗафиксироватьТранзакцию();
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				НепроведенныеДокументы.Добавить(Новый Структура("Ссылка, ОписаниеОшибки", ТекСтрока, ПредставлениеОшибки));
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СписокДокументов.Обновить();
	
	СтруктураВозврата.Вставить("ДокументыДляОбработки", ДокументыДляОбработки);
	СтруктураВозврата.Вставить("НепроведенныеДокументы", НепроведенныеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, ДанныеОНеОбработанныхДокументах, Проведение)
	
	НеОбработанныеДокументы = Новый Массив;
	
	ШаблонСообщения = ?(Проведение, 
		НСтр("ru = 'Документ %1 не проведен: %2'"),
		НСтр("ru = 'Документ %1 не удалось сделать непроведенным: %2'"));
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНеОбработанныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
			ИнформацияОДокументе.Ссылка);
		
		НеОбработанныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Если НеОбработанныеДокументы.Количество() > 0 Тогда
		ТекстДиалога = ?(Проведение, 
				НСтр("ru = 'Не удалось провести один или несколько документов.'"),
				НСтр("ru = 'Не удалось сделать непроведенным один или несколько документов.'"));

		ПоказатьПредупреждение(, ТекстДиалога);
	КонецЕсли;

	ОбработанныеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДокументыДляОбработки, НеОбработанныеДокументы);
	
	Если ОбработанныеДокументы.Количество() > 0 Тогда
		
		Если ДокументыДляОбработки.Количество() > 1 Тогда
			Документ = Заголовок;
			ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)'");
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ОбработанныеДокументы.Количество());
		Иначе
			Документ = ДокументыДляОбработки[0];
			ТекстОповещения = НСтр("ru='Изменение'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		
		УстановитьПометкуУдаленияЗавершениеСервер(ДополнительныеПараметры);
		
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = Заголовок;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = МассивСсылок[0];
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята'"),
				НСтр("ru='Пометка удаления установлена'"));
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
			
		ОбновитьДанныеСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияЗавершениеСервер(ДополнительныеПараметры)
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
			
		Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПроизводствоБезЗаказа");
		ИначеЕсли ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.РаспределениеВозвратныхОтходов") Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.РаспределениеВозвратныхОтходов");
		Иначе
			ПредставлениеОшибки = НСтр("ru = 'Документ %1 недоступен для обработки. Обратитесь к администратору.'");
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, Строка(ТекСтрока));
			Продолжить;
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекСтрока);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			Блокировка.Заблокировать();
			// Запись только тех объектов, значение пометки которых меняется
			Если ПометитьНаУдаление И НЕ ТекСтрока.ПометкаУдаления
				ИЛИ НЕ ПометитьНаУдаление И ТекСтрока.ПометкаУдаления Тогда
				ДокументОбъект = ТекСтрока.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(ПометитьНаУдаление)
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеОшибки, ТекСтрока);
		КонецПопытки;
	КонецЦикла;
	Элементы.СписокДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеМоделиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.КОформлению.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура КОформлениюОчиститьМодельСервер(Строки)
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаПараметров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПараметров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для Каждого ТекСтрока Из Строки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПараметров.Добавить(), ТекСтрока);
	КонецЦикла;
	
	ТаблицаПараметров.Свернуть("Подразделение, Номенклатура, Характеристика");
	
	Для Каждого ТекСтрока Из ТаблицаПараметров Цикл
		
		Запись = РегистрыСведений.ОсновныеСпецификации.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Запись, ТекСтрока);
		
		Запись.МодельФормированияСтоимости	= Неопределено;
		Запись.ПравилоРаспределения			= Неопределено;
		Запись.Спецификация					= Неопределено;
		Запись.ТребуетсяНастройка			= Истина;
		Запись.ОтражатьЗатратыДокументом	= Ложь;
		
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОформитьСогласноНастройкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ДокументыПоПараметрам(ДополнительныеПараметры);
		ОбработатьСформированныеДокументы(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСформированныеДокументы(Результат)
	
	Если Не Результат.ОбъектФормы = Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ." + Результат.ТипДокумента + ".ФормаОбъекта", Результат, ЭтаФорма);
		КопироватьДанныеФормы(Результат.ОбъектФормы, ФормаДокумента.Объект);
		ФормаДокумента.ОбновитьПриОткрытии = Истина;
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.Открыть();
		
	ИначеЕсли Результат.СписокДокументов.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанныеСписков", ЭтаФорма);
		ОткрытьФорму("Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаСпискаНовыхДокументов",
						Результат, ЭтаФорма,,,,ОписаниеОповещения);
			
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не сформировано ни одного документа.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИтогиНеРассчитаныНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ДатаНачала",			Новый Структура("Тип, Значение", "Параметр", НачалоМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ДатаОкончания",		Новый Структура("Тип, Значение", "Параметр", КонецМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ПериодРегистрации",	Новый Структура("Тип, Значение", "Параметр", ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)));
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
	УстановитьОформлениеИтогиРассчитаны();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьОтборы()
	
	Элементы.Организация.Видимость = Не ЗначениеЗаполнено(Организация);
	Элементы.КОформлениюОрганизация.Видимость = Не ЗначениеЗаполнено(Организация);
	Элементы.Подразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	Элементы.КОформлениюПодразделение.Видимость = Не ЗначениеЗаполнено(Подразделение);
	Элементы.КОформлениюНазначение.Видимость = Не ЗначениеЗаполнено(Назначение);
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ПериодРегистрации",				Новый Структура("Тип, Значение", "Отбор", ПериодРегистрации));
	СтруктураОтборов.Вставить("Организация",					Новый Структура("Тип, Значение", "Отбор", Организация));
	СтруктураОтборов.Вставить("ТекстВидОперацииПроизводство",	Новый Структура("Тип, Значение", "Параметр", НСтр("ru = 'Производство без заказа'")));
	СтруктураОтборов.Вставить("ТекстВидОперацииРаспределение",	Новый Структура("Тип, Значение", "Параметр", НСтр("ru = 'Распределение возвратных отходов'")));
	
	УстановитьОтборы(ЭтаФорма.СписокДокументов, СтруктураОтборов);
	
	ПараметрОтбора	= Новый Структура("Тип, Значение",
										"Отбор", ?(ТребуетсяНастройка, ТребуетсяНастройка, Неопределено));
	
	СтруктураОтборов	= Новый Структура;
	СтруктураОтборов.Вставить("ДатаНачала",				Новый Структура("Тип, Значение", "Параметр", НачалоМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ДатаОкончания",			Новый Структура("Тип, Значение", "Параметр", КонецМесяца(ПериодРегистрации)));
	СтруктураОтборов.Вставить("ПериодРегистрации",		Новый Структура("Тип, Значение", "Параметр", ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)));
	СтруктураОтборов.Вставить("ТекстНастройкиНеЗаданы",	Новый Структура("Тип, Значение", "Параметр", НСтр("ru = '<Настройки не заданы>'")));
	СтруктураОтборов.Вставить("Организация",			Новый Структура("Тип, Значение", "Отбор", Организация));
	СтруктураОтборов.Вставить("Подразделение",			Новый Структура("Тип, Значение", "Отбор", Подразделение));
	СтруктураОтборов.Вставить("Номенклатура",			Новый Структура("Тип, Значение", "Отбор", Номенклатура));
	СтруктураОтборов.Вставить("Назначение",				Новый Структура("Тип, Значение", "Отбор", Назначение));
	
	СтруктураОтборов.Вставить("ТребуетсяНастройка",	ПараметрОтбора);
	
	УстановитьОтборы(ЭтаФорма.КОформлению, СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСписков(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.КОформлению.Обновить();
	Элементы.СписокДокументов.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборы(ДинамическийСписок, СтруктураОтборов)
	
	Для Каждого ТекОтбор Из СтруктураОтборов Цикл
		
		Если ТекОтбор.Значение.Тип = "Параметр" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ДинамическийСписок,
			ТекОтбор.Ключ,
			ТекОтбор.Значение.Значение,
			ЗначениеЗаполнено(ТекОтбор.Значение.Значение));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ДинамическийСписок,
				ТекОтбор.Ключ,
				ТекОтбор.Значение.Значение,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				ЗначениеЗаполнено(ТекОтбор.Значение.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПомеченныеНаУдаление(ВыделенныеСтроки)
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Документ = Строка.Ссылка;
		Если Документ.ПометкаУдаления Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДокументыПоПараметрам(ПараметрыДокументов)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОписаниеЗамера = Производительность.НачатьЗамерВремени(
		"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто.Процедура.ДокументыПоПараметрам");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Результат = СформироватьДокументыПоПараметрам(ПараметрыДокументов);
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	КоличествоОпераций = ПараметрыДокументов.ИзделияПоСпецификации.Количество() + ПараметрыДокументов.ИзделияПоПравилу.Количество();
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоОпераций);
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьДокументыПоПараметрам(ПараметрыДокументов)
	
	// Данные шапки.
	ДанныеШапки = Новый Структура("Дата", Мин(КонецМесяца(ПериодРегистрации), ТекущаяДатаСеанса()));
	
	ТаблицаИзделияПоСпецификации	= ТаблицаПараметровИзделий(ПараметрыДокументов.ИзделияПоСпецификации);
	ТаблицаИзделияПоПравилу			= ТаблицаПараметровИзделий(ПараметрыДокументов.ИзделияПоПравилу);
	
	ПараметрыСозданияДокументов = Новый Структура("ДанныеШапки",	ДанныеШапки);
	ПараметрыСозданияДокументов.Вставить("ИзделияПоСпецификации",	ПоместитьВоВременноеХранилище(ТаблицаИзделияПоСпецификации));
	ПараметрыСозданияДокументов.Вставить("ИзделияПоПравилу",		ПоместитьВоВременноеХранилище(ТаблицаИзделияПоПравилу));
	ПараметрыСозданияДокументов.Вставить("ЗаполнятьАвтоматически",	ПараметрыДокументов.ЗаполнятьАвтоматически);
	ПараметрыСозданияДокументов.Вставить("ПереченьДанных",			ПараметрыДокументов.ПереченьДанных);
	
	СписокОбъектов = Новый СписокЗначений;
	
	Документы.ПроизводствоБезЗаказа.ДокументыПоПараметрам(ПараметрыСозданияДокументов, СписокОбъектов);
	Документы.РаспределениеВозвратныхОтходов.ДокументыПоПараметрам(ПараметрыСозданияДокументов, СписокОбъектов);
	
	Результат = Новый Структура("СписокДокументов, ОбъектФормы, ТипДокумента, ЕстьОшибки");
	Результат.СписокДокументов = Новый СписокЗначений;
	Результат.ЕстьОшибки = Ложь;
	
	Если СписокОбъектов.Количество() = 1 Тогда
		
		ТекДокумент = СписокОбъектов[0].Значение;
		Если ТипЗнч(ТекДокумент) = Тип("ДокументОбъект.ПроизводствоБезЗаказа") Тогда
			Результат.ОбъектФормы = ПараметрыДокументов.ОбъектыФормы["ПроизводствоБезЗаказа"];
			Результат.ТипДокумента = "ПроизводствоБезЗаказа";
		Иначе
			Результат.ОбъектФормы = ПараметрыДокументов.ОбъектыФормы["РаспределениеВозвратныхОтходов"];
			Результат.ТипДокумента = "РаспределениеВозвратныхОтходов";
		КонецЕсли;
		
		ЗначениеВДанныеФормы(ТекДокумент, Результат.ОбъектФормы);
		
	Иначе
		
		Для Каждого ТекДокумент Из СписокОбъектов Цикл
			ТекДокумент.Значение.Записать(РежимЗаписиДокумента.Запись);
			Результат.СписокДокументов.Добавить(ТекДокумент.Значение.Ссылка);
			
			Если ТекДокумент.Значение.ПроверитьЗаполнение() Тогда
				Попытка
					ТекДокумент.Значение.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Результат.ЕстьОшибки = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Результат.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("МассивОшибок", ПолучитьСообщенияПользователю(Истина));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаПараметровИзделий(Изделия)
	
	ПараметрыИзделий = Новый ТаблицаЗначений;
	ПараметрыИзделий.Колонки.Добавить("НомерГруппыЗатрат",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ПараметрыИзделий.Колонки.Добавить("Организация",				Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПараметрыИзделий.Колонки.Добавить("ГруппировкаЗатрат",			Новый ОписаниеТипов("ПеречислениеСсылка.ГруппировкиЗатратВПроизводствеБезЗаказа"));
	ПараметрыИзделий.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ПараметрыИзделий.Колонки.Добавить("НаправлениеВыпуска",			Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	ПараметрыИзделий.Колонки.Добавить("Получатель",					Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия,
																						|СправочникСсылка.Склады"));
	
	ПараметрыИзделий.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПараметрыИзделий.Колонки.Добавить("Характеристика",				Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПараметрыИзделий.Колонки.Добавить("Серия",						Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ПараметрыИзделий.Колонки.Добавить("Назначение",					Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ПараметрыИзделий.Колонки.Добавить("Спецификация",				Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ПараметрыИзделий.Колонки.Добавить("ПравилоРаспределения",		Новый ОписаниеТипов("СправочникСсылка.ПравилаРаспределенияРасходов"));
	ПараметрыИзделий.Колонки.Добавить("Количество",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ПараметрыИзделий.Колонки.Добавить("ОшибкаВНастройкахМодели",	Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из Изделия Цикл
		
		НоваяСтрока = ПараметрыИзделий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НоваяСтрока.Организация);
		
	КонецЦикла;
	
	Возврат ПараметрыИзделий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяДокумента(Документ)
	
	Возврат Документ.Метаданные().Имя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрПериод(ПериодРегистрации, ИтогиРассчитаны)
	
	ПараметрПериод = КонецМесяца(ПериодРегистрации) + 1;
	
	ИтогиПродукции = РегистрыНакопления.ТоварыОрганизаций.ПолучитьМаксимальныйПериодРассчитанныхИтогов() + 1;
	ИтогиРабот = РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолучитьМаксимальныйПериодРассчитанныхИтогов() + 1;
	
	ИтогиРассчитаны = ПараметрПериод <= ИтогиПродукции
						И ПараметрПериод <= ИтогиРабот;
	
	Если НЕ ИтогиРассчитаны Тогда
		ПараметрПериод = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрПериод;
	
КонецФункции

#КонецОбласти

#КонецОбласти