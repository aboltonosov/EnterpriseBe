
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеквизитыФормыПоПараметрам() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокОпераций();
	
	УстановитьЗаголовокФормы();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПроизводственнаяОперация" И Тип(Параметр) = Тип("Структура") И Параметр.Свойство("КлючОперации") 
		И Параметр.КлючОперации.Этап                  = Параметры.КлючОперации.Этап 
		И Параметр.КлючОперации.Операция              = Параметры.КлючОперации.Операция 
		И Параметр.КлючОперации.ИдентификаторОперации = Параметры.КлючОперации.ИдентификаторОперации Тогда
		
		Если Параметр.Свойство("Ссылка") Тогда
			НоваяСсылка = ОтображаемыеОперации.НайтиПоЗначению(Параметр.Ссылка) = Неопределено;
			Если Источник = ЭтаФорма.УникальныйИдентификатор
				И НоваяСсылка Тогда
				ОтображаемыеОперации.Добавить(Параметр.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьДанныеНаСервере(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнформационнаяНадписьДобавитьОперациюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = ЗначенияЗаполненияОперации(ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОперации

&НаКлиенте
Процедура СписокОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя,"СписокОпераций","");
	Если Найти("ВидРабочегоЦентра,РабочийЦентр,Исполнитель,Статус", ИмяПоля) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = СписокОпераций.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтрокиДоИзменения = ДанныеСтрокиСтруктурой(Элементы.СписокОпераций.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиСтруктурой(ТекущиеДанные);
	
	Если Не ДанныеСтрокиИзменены(ДанныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменитьОперациюПриОкончанииРедактирования(ТекущиеДанные.Ссылка, ДанныеСтроки) Тогда
		
		ОтменаРедактирования = Истина;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиДоИзменения);
		Возврат;
		
	КонецЕсли;
	
	ОповеститьОбИзмененииОпераций(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполняется(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Выполняется"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусВыполняетсяЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполняетсяЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Выполняется");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокОпераций, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Выполняется'"));
	
	Если КоличествоОбработанных > 0 Тогда
		ОповеститьОбИзмененииОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Выполнена"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусВыполненаЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполненаЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Выполнена");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокОпераций, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Выполнена'"));
	
	Если КоличествоОбработанных > 0 Тогда
		ОповеститьОбИзмененииОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Не выполнена"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусНеВыполненаЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеВыполненаЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "НеВыполнена");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокОпераций, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Не выполнена'"));
	
	Если КоличествоОбработанных > 0 Тогда
		ОповеститьОбИзмененииОпераций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление поля "Исполнитель"
	#Область ОформлениеПоля_Исполнитель
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийИсполнитель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.Исполнитель");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти 
	
	// Оформление поля "ВидРабочегоЦентра"
	#Область ОформлениеПоля_ВидРабочегоЦентра
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийВидРабочегоЦентра.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	// Оформление поля "РабочийЦентр"
	#Область ОформлениеПоля_РабочийЦентр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийРабочийЦентр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.РабочийЦентр");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти 
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы()
	
	#Область КомандыПоРежимуРаботы
	
	Элементы.УстановитьСтатусВыполняется.Видимость = (РежимРаботы = РежимРаботыПринятьВРаботу());
	Элементы.УстановитьСтатусВыполнена.Видимость   = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	Элементы.УстановитьСтатусНеВыполнена.Видимость = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	
	Элементы.ГруппаВыполняется.Видимость = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	
	#КонецОбласти

	#Область СтатусыПоРежимуРаботы
	
	СписокСтатусов = СписокДоступныхСтатусовПоРежимуРаботы();
	Элементы.СписокОперацийСтатус.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);
	
	#КонецОбласти
	
	#Область ПредставлениеЕдиницыИзмерения
	
	ЕдиницаИзмеренияЗапланированоПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоЗапланировано);
	
	ЕдиницаИзмеренияМожноВыполнятьПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоМожноВыполнять);

	ЕдиницаИзмеренияВыполняетсяПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоВыполняется);
		
	#КонецОбласти
	
	Если КоличествоСоздать > 0 Тогда
		Элементы.ИнформационнаяНадписьДобавитьОперацию.Видимость = Истина;
		ИнформационнаяНадписьДобавитьОперацию = ФорматированнаяСтрокаДобавитьОперацию();
	Иначе
		Элементы.ИнформационнаяНадписьДобавитьОперацию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	// Установка заголовка формы
	#Область ЗаголовокФормы
	
	Если РежимРаботы = РежимРаботыПринятьВРаботу() Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Принять в работу операции'");
		
	ИначеЕсли РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Отметить выполнение операции'");
		
	КонецЕсли;
	
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, "Номер,НаименованиеЭтапа"); 
	ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(РеквизитыЭтапа);
	
	ТекстЗаголовок = ТекстЗаголовок + " (" + ПредставлениеЭтапа + ", " + Операция + ")";
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = ТекстЗаголовок;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СписокОпераций

&НаСервере
Процедура ЗаполнитьСписокОпераций()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И Операции.Операция = &Операция
		|	И Операции.ИдентификаторОперации = &ИдентификаторОперации
		|	И Операции.Статус В (&ДоступныеСтатусы)
		|	И Операции.Проведен");
	
	Запрос.УстановитьПараметр("Этап",Параметры.КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция",Параметры.КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации",Параметры.КлючОперации.ИдентификаторОперации);
	
	ДоступныеСтатусы = ДоступныеСтатусыПоРежимуРаботы();
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ДоступныеСтатусы);
	
	МассивОпераций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	ОтображаемыеОперации.ЗагрузитьЗначения(МассивОпераций);
	
	ПеречитатьСписокОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьСписокОпераций()
	
	Перем Идентификатор, ВыбраннаяОперация;
	
	ТекущаяСтрока = Элементы.СписокОпераций.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СписокОпераций.НайтиПоИдентификатору(ТекущаяСтрока);
		ВыбраннаяОперация = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	СписокОпераций.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка,
		|	Операции.Номер КАК Номер,
		|	Операции.Исполнитель КАК Исполнитель,
		|	Операции.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Операции.РабочийЦентр КАК РабочийЦентр,
		|	Операции.Количество КАК Количество,
		|	Операции.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Операции.Статус КАК Статус
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&СписокОпераций)
		|	И Операции.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("СписокОпераций", ОтображаемыеОперации.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СписокОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ЕдиницаИзмеренияПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			Выборка.ЕдиницаИзмерения,
			Выборка.Количество);
			
		Если Выборка.Ссылка = ВыбраннаяОперация Тогда
			Идентификатор = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификатор <> Неопределено Тогда
		Элементы.СписокОпераций.ТекущаяСтрока = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОперации()
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокОпераций.ВыделенныеСтроки;
	Для каждого Идентификатор ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокОпераций.НайтиПоИдентификатору(Идентификатор);
		Результат.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСтрокиСтруктурой(ТекущиеДанные)

	ДанныеСтроки = Новый Структура("
		|Ссылка,
		|Исполнитель,
		|ВидРабочегоЦентра,
		|РабочийЦентр,
		|Статус");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиИзменены(ДанныеСтроки)
	
	Возврат Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
						ДанныеСтроки, 
						ДанныеСтрокиДоИзменения,
						"Ссылка,Исполнитель,ВидРабочегоЦентра,РабочийЦентр,Статус");
	
КонецФункции

#КонецОбласти

#Область ИзменениеОперации

&НаСервереБезКонтекста
Функция ИзменитьОперациюПриОкончанииРедактирования(Операция, ДанныеОперации)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Операция);
		
		Если Не ТребуетсяИзменитьОперацию(Операция, ДанныеОперации) Тогда
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ОперацияОбъект = Операция.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ОперацияОбъект, ДанныеОперации, "Исполнитель,ВидРабочегоЦентра,РабочийЦентр");
		
		Если ОперацияОбъект.Статус <> ДанныеОперации.Статус Тогда
			
			ОперацияОбъект.Статус = ДанныеОперации.Статус;
			
			Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкиСтатуса(ОперацияОбъект);
			
		КонецЕсли;
		
		Если Не ОперацияОбъект.ПроверитьЗаполнение() Тогда
			
			ЗафиксироватьТранзакцию();
			
			ВывестиСообщениеОбОшибкеИзмененияОперации();
			Возврат Ложь;
			
		КонецЕсли;
		
		ОперацияОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВывестиСообщениеОбОшибкеИзмененияОперации();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОбОшибкеИзмененияОперации()
	
	ТекстСообщения = НСтр("ru='Ошибка изменения производственной операции!'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяИзменитьОперацию(Операция, ДанныеОперации)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка = &Ссылка
		|	И (Операции.Статус <> &Статус
		|			ИЛИ Операции.ВидРабочегоЦентра <> &ВидРабочегоЦентра
		|			ИЛИ Операции.РабочийЦентр <> &РабочийЦентр
		|			ИЛИ Операции.Исполнитель <> &Исполнитель)");
		
	Запрос.УстановитьПараметр("Ссылка", Операция);
	Запрос.УстановитьПараметр("Исполнитель", ДанныеОперации.Исполнитель);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ДанныеОперации.ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("РабочийЦентр", ДанныеОперации.РабочийЦентр);
	Запрос.УстановитьПараметр("Статус", ДанныеОперации.Статус);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыПринятьВРаботу()
	
	Возврат "ПринятьВРаботу";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыОтметитьВыполнение()
	
	Возврат "ОтметитьВыполнение";
	
КонецФункции

&НаСервере
Функция СписокДоступныхСтатусовПоРежимуРаботы()
	
	СписокСтатусов = Новый Массив;
	
	СписокСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
	СписокСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	
	Если РежимРаботы <> РежимРаботыПринятьВРаботу() Тогда
		СписокСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
		СписокСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
	КонецЕсли;
	
	Возврат СписокСтатусов;
	
КонецФункции

&НаСервере
Функция ДоступныеСтатусыПоРежимуРаботы()
	
	МассивСтатусов = Новый Массив;
	
	МассивСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
	
	Если РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусОперацииПоРежимуРаботы(РежимРаботы)
	
	Если РежимРаботы = РежимРаботыПринятьВРаботу() Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполняется");
		
	ИначеЕсли РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена");
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияЗаполненияОперации(Форма)
	
	СпособЗаполнения = "ЗаполнитьПоОперации";
	СтатусОперации = СтатусОперацииПоРежимуРаботы(Форма.РежимРаботы);
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("СпособЗаполнения", СпособЗаполнения);
	ДанныеЗаполнения.Вставить("Статус", СтатусОперации);
	
	ДанныеЗаполнения.Вставить("Подразделение", Форма.Подразделение);
	ДанныеЗаполнения.Вставить("КлючОперации", Форма.Параметры.КлючОперации);
	
	ДанныеЗаполнения.Вставить("Количество", Форма.КоличествоСоздать);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере
Функция ФорматированнаяСтрокаДобавитьОперацию()
	
	МассивСтрок = Новый Массив;
	
	Если РежимРаботы = РежимРаботыПринятьВРаботу() Тогда
		МассивСтрок.Добавить(НСтр("ru = 'принять в работу'"));
	ИначеЕсли РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		МассивСтрок.Добавить(НСтр("ru = 'отметить выполнение'"));
	КонецЕсли;
	
	МассивСтрок.Добавить(" ");
	
	МассивСтрок.Добавить(НСтр("ru = 'еще'"));
	
	МассивСтрок.Добавить(" ");
	
	ПредставлениеКоличества = Формат(КоличествоСоздать, "ЧЦ=15; ЧДЦ=3; ЧН=");
	МассивСтрок.Добавить(ПредставлениеКоличества);
	
	МассивСтрок.Добавить(" ");
	
	ПредставлениеЕдиницыИзмерения = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		КоличествоСоздать,
		НСтр("ru = 'операции'"),
		НСтр("ru = 'операций'"),
		НСтр("ru = 'операций'"),
		"ж");
	МассивСтрок.Добавить(ПредставлениеЕдиницыИзмерения);
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок,,,,"#ДобавитьОперацию");

КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыФормыПоПараметрам()
	
	Этап     = Параметры.КлючОперации.Этап; 
	Операция = Параметры.КлючОперации.Операция;
	
	Если Этап.Пустая() Или Операция.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("РежимРаботы", РежимРаботы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьРеквизитыФормыПоДаннымОперации();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоДаннымОперации()
	
	ДанныеОперации = ДанныеОперацииИзОчереди();
	Если ДанныеОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ЭтаФорма, 
		ДанныеОперации,
		"ЕдиницаИзмерения,
		|МаршрутнаяКарта,
		|Подразделение");
	
	КоличествоЗапланировано  = ДанныеОперации.Запланировано;
	КоличествоМожноВыполнять = ДанныеОперации.МожноВыполнять;
	КоличествоВыполняется    = ДанныеОперации.Выполняется;
	
	КоличествоСоздать = ДанныеОперации.МожноВыполнять - ((ДанныеОперации.Запланировано - ДанныеОперации.ОжиданиеСоздания) - (ДанныеОперации.Выполняется + ДанныеОперации.Выполнено));
	
	НастроитьЗависимыеЭлементыФормы();

КонецПроцедуры

&НаСервере
Функция ДанныеОперацииИзОчереди()
	
	Возврат РегистрыСведений.ОчередьПроизводственныхОпераций.ДанныеОперацииИзОчереди(Параметры.КлючОперации);
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОпераций(ДокументСсылка = Неопределено)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Подразделение", ЭтаФорма.Подразделение);
	ПараметрОповещения.Вставить("КлючОперации", Параметры.КлючОперации);
	
	Если ДокументСсылка <> Неопределено Тогда
		ПараметрОповещения.Вставить("Ссылка", ДокументСсылка);
	КонецЕсли;
	
	Оповестить("Запись_ПроизводственнаяОперация", ПараметрОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(ПеречитатьСписокОпераций = Истина)
	
	ЗаполнитьРеквизитыФормыПоДаннымОперации();
	
	Если ПеречитатьСписокОпераций Тогда
		ПеречитатьСписокОпераций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
