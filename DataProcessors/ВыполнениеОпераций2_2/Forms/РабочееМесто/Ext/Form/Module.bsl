
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияФормыПриСозданииНаСервере();
	
	#Область СтандартныеМеханизмы
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.КомандыОперацииПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.КомандыОперацииПодменюСоздатьНаОсновании);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.КомандыОперацииГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Настройки.Удалить("Подразделение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗначениеНастройки = Настройки.Получить("Подразделение");
	Если ЗначениеНастройки <> Неопределено Тогда
	
		УстановитьОтборПоПодразделению();
		
	КонецЕсли;
	
	ЗначениеНастройки = Настройки.Получить("РабочийЦентр");
	Если ЗначениеНастройки <> Неопределено Тогда
		
		Если ТипЗнч(ЗначениеНастройки) = Тип("СправочникСсылка.ВидыРабочихЦентров")
			ИЛИ НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ТипОтбораРабочийЦентр = ТипОтбораВидРабочегоЦентра();
		Иначе
			ТипОтбораРабочийЦентр = ТипОтбораРабочийЦентр();
		КонецЕсли;
		
		НастроитьТипЗначенияОтборРабочийЦентр(ЭтаФорма);
		УстановитьОтборПоРабочемуЦентру();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПроизводственнаяОперация"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Подразделение")
		И Параметр.Подразделение = Подразделение
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеОпераций Тогда
		ОбновитьВыполнениеОпераций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ВыполнениеОпераций_Обновить(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ВыполнениеОпераций2_2.РабочееМесто.Команда.ОбновитьСписок");
	
	ОбновитьВыполнениеОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_Создать(Команда)
	
	ТекущиеДанные = Элементы.ВыполнениеОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОжиданиеСоздания = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для выбранной строки!'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДобавленияОперации(ТекущиеДанные, "Создать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_ПринятьВРаботу(Команда)
	
	ТекущиеДанные = Элементы.ВыполнениеОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.МожноВыполнять = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для выбранной строки!'"));
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Запланировано - ТекущиеДанные.ОжиданиеСоздания)
		- (ТекущиеДанные.Выполняется + ТекущиеДанные.Выполнено) > 0 Тогда
		ОткрытьФормуСпискаОпераций(ТекущиеДанные, "ПринятьВРаботу");
	Иначе
		ОткрытьФормуДобавленияОперации(ТекущиеДанные, "ПринятьВРаботу");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_ОтметитьВыполнение(Команда)
	
	ТекущиеДанные = Элементы.ВыполнениеОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.МожноВыполнять + ТекущиеДанные.Выполняется) = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для выбранной строки!'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Запланировано - ТекущиеДанные.ОжиданиеСоздания - ТекущиеДанные.Выполнено > 0
		ИЛИ ТекущиеДанные.Выполняется > 0 Тогда
		ОткрытьФормуСпискаОпераций(ТекущиеДанные, "ОтметитьВыполнение");
	Иначе
		ОткрытьФормуДобавленияОперации(ТекущиеДанные, "ОтметитьВыполнение");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура Операции_НазначитьРабочийЦентр(Команда)
	
	Если ДопустимоНазначениеРабочегоЦентра() Тогда
		
		УстановленОтбор = ЗначениеЗаполнено(РабочийЦентр);
		
		Если УстановленОтбор И ТипОтбораРабочийЦентр = ТипОтбораРабочийЦентр() Тогда
			
			НазначитьРабочийЦентрНаСервере(ВыделенныеОперации(), РабочийЦентр);
			ОбновитьСписокОпераций();
			
		Иначе
			
			Если УстановленОтбор И ТипОтбораРабочийЦентр = ТипОтбораВидРабочегоЦентра() Тогда
				ВидРабочегоЦентра = РабочийЦентр;
			Иначе
				ВыделеннаяСтрока  = Элементы.Операции.ВыделенныеСтроки[0];
				ВидРабочегоЦентра = Элементы.Операции.ДанныеСтроки(ВыделеннаяСтрока).ВидРабочегоЦентра;
			КонецЕсли;
			
			Отбор = Новый Структура("Подразделение", Подразделение);
			
			Если ЗначениеЗаполнено(ВидРабочегоЦентра) Тогда
				Отбор.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НазначитьРабочийЦентрЗавершение",
				ЭтотОбъект);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			ПараметрыФормы.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.РабочиеЦентры.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Конецесли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРабочийЦентрЗавершение(РезультатЗакрытия, ДополнительныеПараметры)Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		НазначитьРабочийЦентрНаСервере(ВыделенныеОперации(), РезультатЗакрытия);
		ОбновитьСписокОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_ОтменитьНазначениеРабочегоЦентра(Команда)
	
	ВыделенныеОперации = ВыделенныеОперации();
	Если ВыделенныеОперации.Количество() > 0 Тогда
		
		НазначитьРабочийЦентрНаСервере(
			ВыделенныеОперации,
			ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
		
		ОбновитьСписокОпераций();
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбранаОперация();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусВыполняется(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Выполняется"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусВыполняетсяЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполняетсяЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Выполняется");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Операции, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Выполняется'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Выполнена"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусВыполненаЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполненаЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Выполнена");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Операции, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Выполнена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусНеВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке операций будет установлен статус ""Не выполнена"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусНеВыполненаЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеВыполненаЗавершение(РезультатВопроса, ДополнительныеПараметры)Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "НеВыполнена");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Операции, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Не выполнена'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Операции);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Операции);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Операции);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Операции);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаЖурналОпераций Тогда
		Элементы.Операции.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыполнениеОпераций Тогда
		Элементы.ВыполнениеОпераций.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОтборПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтбораРабочийЦентрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РабочийЦентр) Тогда
		ЗначениеОтбораДоИзменения = РабочийЦентр;
	Иначе
		ЗначениеОтбораДоИзменения = Неопределено;
	КонецЕсли;
	
	НастроитьТипЗначенияОтборРабочийЦентр(ЭтаФорма);
	
	Если ЗначениеОтбораДоИзменения <> Неопределено
		И ЗначениеОтбораДоИзменения <> РабочийЦентр Тогда
		УстановитьОтборПоРабочемуЦентру();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	УстановитьОтборПоРабочемуЦентру();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСостояниеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Перечисление", Тип("ПеречислениеСсылка.СостоянияВыполненияОпераций"));
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Состояние.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.ВыборЗначенийПеречисления",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Состояние.ЗагрузитьЗначения(РезультатЗакрытия);
		УстановитьОтборПоСостоянию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОчистка(Элемент, СтандартнаяОбработка)
	
	Если Состояние.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние.Очистить();
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ВыполнениеОперацийОперация" Тогда
			ПоказатьЗначение(, ТекущиеДанные.Операция);
		ИначеЕсли Найти("ВыполнениеОперацийЭтап,ВыполнениеОперацийПредставлениеЭтапа" ,Поле.Имя) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Этап);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОперацийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационноеСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтключитьОтборПоЭтапу() Тогда
		
		СтандартнаяОбработка = Ложь;
		УстановитьОтборПоЭтапу();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УстановитьОтборПоИсполнителю();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСтатусНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Перечисление", Тип("ПеречислениеСсылка.СтатусыПроизводственныхОпераций"));
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Статус.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.ВыборЗначенийПеречисления",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Статус.ЗагрузитьЗначения(РезультатЗакрытия);
		УстановитьОтборПоСтатусу();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ТипОтбораВидРабочегоЦентра()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОтбораРабочийЦентр()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление цветом ожидающих предшествующие операции
	#Область ВыполнениеОпераций_ОжиданиеПредшествующих
	
	Элемент = ВыполнениеОпераций.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НачатыПредшествующие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОжиданиеПредшествующих");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти 
	
	// Оформление поля Дата в списке операций
	#Область Операции_Дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Операции.Дата", Элементы.ОперацииДата.Имя);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьДинамическиеСписки();
	НастроитьЭлементыФормы();
	
	#Область Список_ВыполнениеОпераций
	
	ВыполнениеОпераций.Параметры.УстановитьЗначениеПараметра("ИспользуетсяГрафикПроизводства", ИспользуетсяГрафикПроизводства);
	ВыполнениеОпераций.Параметры.УстановитьЗначениеПараметра("СтатусРабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	#КонецОбласти
	
	#Область Список_Операции
	
	#КонецОбласти
	
	УстановитьОтборПоПодразделению();
	УстановитьОтборПоРабочемуЦентру();
	УстановитьОтборПоСостоянию();
	
	Если Параметры.Свойство("ОтборЭтап") Тогда
		УстановитьОтборПоЭтапу(Параметры.ОтборЭтап);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ИспользуетсяГрафикПроизводства = УправлениеПроизводством.ИспользуетсяГрафикПроизводства();
	
	Состояние.ЗагрузитьЗначения(АктивныеСостояния());
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	НастроитьТипЗначенияОтборРабочийЦентр(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Состояние") Тогда
		
		Если ТолькоАктивныеСостояния(Форма.Состояние) Тогда
			Форма.СостояниеСтрока = НСтр("ru = 'Незавершенные'");
		Иначе
			Форма.СостояниеСтрока = СтрСоединить(Форма.Состояние.ВыгрузитьЗначения(), ";");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ИнформационноеСообщение") Тогда
		
		ЗаполненоИнформационноеСообщение = ЗначениеЗаполнено(Форма.ИнформационноеСообщение);
		
		Элементы.ИнформационноеСообщение1.Видимость = ЗаполненоИнформационноеСообщение;
		Элементы.ИнформационноеСообщение2.Видимость = ЗаполненоИнформационноеСообщение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическиеСписки()
	
	ТекстЗапроса = ВыполнениеОпераций.ТекстЗапроса;

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Очередь.Этап"));

	ВыполнениеОпераций.ТекстЗапроса = ТекстЗапроса;
	
	ТекстЗапроса = Операции.ТекстЗапроса;

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ПроизводственнаяОперация.Этап"));

	Операции.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область ИнформационноеСообщение

&НаСервере
Процедура СформироватьНадписьУстановленОтборПоЭтапу(ЭтапПроизводства)
	
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтапПроизводства, "Номер,НаименованиеЭтапа"); 
	ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(РеквизитыЭтапа);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по этапу'"));
	МассивСтрок.Добавить(" ");
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ПредставлениеЭтапа,
		,
		,
		,
		ПолучитьНавигационнуюСсылку(ЭтапПроизводства)));
	
	МассивСтрок.Добавить(" (");
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить'"),,,, 
		ЗначениеГиперссылкиОтключитьОтборПоЭтапу()));
	
	МассивСтрок.Добавить(") ");
	
	ИнформационноеСообщение = Новый ФорматированнаяСтрока(МассивСтрок);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ИнформационноеСообщение");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИнформационноеСообщение()
	
	ИнформационноеСообщение = Неопределено;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ИнформационноеСообщение");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ЗначениеГиперссылкиОтключитьОтборПоЭтапу()
	
	Возврат "ОтключитьОтборПоЭтапу";
	
КонецФункции

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ВыполнениеОпераций,
			"Подразделение",
			Подразделение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Операции,
			"Подразделение",
			Подразделение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРабочемуЦентру()
	
	УстановленОтбор = ЗначениеЗаполнено(РабочийЦентр);
	
	Если УстановленОтбор И ТипОтбораРабочийЦентр = ТипОтбораРабочийЦентр() Тогда
		ЗначениеОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра");
	Иначе
		ЗначениеОтбора = РабочийЦентр;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВыполнениеОпераций, 
			"ВидРабочегоЦентра", 
			ЗначениеОтбора, 
			ВидСравненияКомпоновкиДанных.Равно,
			, 
			УстановленОтбор);
		
	Если ТипОтбораРабочийЦентр = ТипОтбораРабочийЦентр() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Операции, 
				"РабочийЦентр", 
				РабочийЦентр, 
				ВидСравненияКомпоновкиДанных.Равно,
				, 
				УстановленОтбор);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Операции, 
				"ВидРабочегоЦентра", 
				,
				,
				,
				Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Операции, 
				"РабочийЦентр", 
				,
				,
				,
				Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Операции, 
				"ВидРабочегоЦентра", 
				РабочийЦентр, 
				ВидСравненияКомпоновкиДанных.Равно,
				, 
				УстановленОтбор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЭтапу(ЭтапПроизводства = Неопределено)
	
	УстановленОтбор = ЗначениеЗаполнено(ЭтапПроизводства);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВыполнениеОпераций,
			"Этап",
			ЭтапПроизводства,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			УстановленОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Операции,
			"Этап",
			ЭтапПроизводства,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			УстановленОтбор);
			
	Если УстановленОтбор Тогда
		СформироватьНадписьУстановленОтборПоЭтапу(ЭтапПроизводства);
	Иначе
		ОчиститьИнформационноеСообщение();
	КонецЕсли;
	
	Если УстановленОтбор Тогда
		
		ПодразделениеЭтапа = Документы.ЭтапПроизводства2_2.ПодразделениеИсполнитель(ЭтапПроизводства);
		
		Если Подразделение <> ПодразделениеЭтапа Тогда
			
			Подразделение = ПодразделениеЭтапа;
			УстановитьОтборПоПодразделению();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВыполнениеОпераций

&НаСервере
Процедура УстановитьОтборПоСостоянию()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ВыполнениеОпераций.Отбор,, "ГруппаОтбораПоСостоянию");
		
	НаборСостояний = Состояние.ВыгрузитьЗначения();
	
	Если НаборСостояний.ВГраница() <> -1 Тогда
		
		ОтборГруппа = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ВыполнениеОпераций.Отбор.Элементы, "ГруппаОтбораПоСостоянию", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		Для каждого СостояниеЗначение Из НаборСостояний Цикл
			
			Если СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.ОжиданиеПредшествующих Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "ОжиданиеПредшествующих", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.НачатаПредшествующая Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "НачатыПредшествующие", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.МожноВыполнять Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "МожноВыполнять", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.Выполняется Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "Выполняется", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.Завершена Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "Выполнено", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Состояние");
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура УстановитьОтборПоИсполнителю()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"Исполнитель", 
		Исполнитель, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Исполнитель));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"Статус", 
		Статус, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		, 
		ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ОбновитьВыполнениеОпераций()
	
	Элементы.ВыполнениеОпераций.Обновить();

КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ОбновитьСписокОпераций()
	
	Элементы.Операции.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОперации()
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Операции.ВыделенныеСтроки;
	Для каждого Строка ИЗ ВыделенныеСтроки Цикл
		Результат.Добавить(Строка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДопустимоНазначениеРабочегоЦентра()
	
	Результат = Истина;
	
	ВыделенныеСтроки = Элементы.Операции.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() <> 0 Тогда
		
		ВидРабочегоЦентра = Неопределено;
		Для каждого Строка ИЗ ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Операции.ДанныеСтроки(Строка);
			Если ВидРабочегоЦентра = Неопределено Тогда
				
				ВидРабочегоЦентра = ДанныеСтроки.ВидРабочегоЦентра;
				
			ИначеЕсли ВидРабочегоЦентра <> ДанныеСтроки.ВидРабочегоЦентра Тогда
				
				ТекстПредупреждения = НСтр("ru='Выбраны операции с различными видами рабочих центров'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбранаОперация();
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НазначитьРабочийЦентрНаСервере(Операции, РабочийЦентр)
	
	Документы.ПроизводственнаяОперация2_2.НазначитьРабочийЦентрОперациям(Операции, РабочийЦентр);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ОткрытьФормуДобавленияОперации(ТекущиеДанные, РежимРаботы)
	
	КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
	ЗаполнитьЗначенияСвойств(КлючОперации, ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОперации", КлючОперации);
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
	
	Если ТипОтбораРабочийЦентр = ТипОтбораРабочийЦентр()
		И ЗначениеЗаполнено(РабочийЦентр) Тогда
		ПараметрыФормы.Вставить("РабочийЦентр", РабочийЦентр);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.ДобавитьОперацию",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

&НаКлиенте
Функция ОткрытьФормуСпискаОпераций(ТекущиеДанные, РежимРаботы)
	
	КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
	ЗаполнитьЗначенияСвойств(КлючОперации, ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОперации", КлючОперации);
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.СписокОпераций",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АктивныеСостояния()
	
	Состояния = Новый Массив;
	
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.ОжиданиеПредшествующих"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.НачатаПредшествующая"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.МожноВыполнять"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.Выполняется"));
	
	Возврат Состояния;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоАктивныеСостояния(СписокСостояний)
	
	АктивныеСостояния = АктивныеСостояния();
	
	Если АктивныеСостояния.Количество() <> СписокСостояний.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из СписокСостояний Цикл
		Если АктивныеСостояния.Найти(ЭлементКоллекции.Значение) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТипЗначенияОтборРабочийЦентр(Форма)
	
	Если Форма.ТипОтбораРабочийЦентр = ТипОтбораВидРабочегоЦентра() Тогда
		ДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Иначе
		ДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры");
	КонецЕсли;
	
	Форма.РабочийЦентр = ДопустимыйТип.ПривестиЗначение(Форма.РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеПриИзмененииНаСервере()
	
	НастроитьТипЗначенияОтборРабочийЦентр(ЭтаФорма);
	
	УстановитьОтборПоПодразделению();
	УстановитьОтборПоРабочемуЦентру();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеНеВыбранаОперация()
	
	ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать операцию.'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

