#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Метод возвращает массив этапов к расчету,
// упорядоченных по приоритету выполнения (номеру индекса).
// Элементы с большим индексом зависят от элементов с меньшим индексом.
// Для добавления нового этапа необходимо добавить новый элемент в массив
// и прописать вызов соответствующего метода в методе ВыполнитьЭтапыРасчета()
//
// Возвращаемое значение:
//	Массив - Имена этапов расчета.
Функция ЭтапыКРасчету() Экспорт
	КРасчету = Новый Массив();
#Область ЭтапыЗапускаютсяВручную
	КРасчету.Добавить("ИсправлениеОтрицательныхОстатков");
	КРасчету.Добавить("РаспределениеРБП");
	//++ НЕ УТ
	КРасчету.Добавить("СписаниеЗатратНаВыпуск");
	КРасчету.Добавить("РаспределениеМатериаловРаботНаПродукцию");
	//++ НЕ УТКА
	КРасчету.Добавить("ПроизводствоБезЗаказов");
	КРасчету.Добавить("РаспределениеМатериаловРаботНаПродукцию22");
	//-- НЕ УТКА
	КРасчету.Добавить("НастройкаПоказателейРаспределенияРасходов");
	//-- НЕ УТ
	КРасчету.Добавить("ПередачаТоваров");
	КРасчету.Добавить("ОтчетыПоКомиссииИнтеркампани");
	КРасчету.Добавить("ОтчетыКомитентамОСписании");
	КРасчету.Добавить("ПомощникПоУчетуНДС");
#КонецОбласти //ЭтапыЗапускаютсяВручную
	КРасчету.Добавить("РасчетыСПартнерами");
	КРасчету.Добавить("ПереоценкаДенежныхСредств");
	КРасчету.Добавить("НачисленияПоКредитамДепозитам");
	КРасчету.Добавить("АннулированиеПодарочныхСертификатов");
	//++ НЕ УТ
	КРасчету.Добавить("ОтражениеЗарплаты");
	КРасчету.Добавить("НачислениеОО");
	КРасчету.Добавить("АмортизацияОСиНМА");
	//++ НЕ УТКА
	КРасчету.Добавить("АмортизацияОСиНМАМеждународный");
	//-- НЕ УТКА
	КРасчету.Добавить("ПризнаниеВНУЛизинговыхПлатежей");
	КРасчету.Добавить("ПогашениеСтоимостиТМЦ");
	КРасчету.Добавить("НалогНаИмущество");
	КРасчету.Добавить("ТранспортныйНалог");
	КРасчету.Добавить("ЗемельныйНалог");
	КРасчету.Добавить("ТорговыйСбор");
	КРасчету.Добавить("РаспределениеРасходов");
	//-- НЕ УТ
	КРасчету.Добавить("ПартииТоваров");
	КРасчету.Добавить("РаспределениеНДС");
	//++ НЕ УТ
	КРасчету.Добавить("ДолиСписанияКосвенныхРасходов");
	КРасчету.Добавить("РасходыНаПродукцию");
	//-- НЕ УТ
	КРасчету.Добавить("Себестоимость");
	КРасчету.Добавить("РаспределениеДоходовРасходов");
	КРасчету.Добавить("РеглУчет");
	//++ НЕ УТ
	КРасчету.Добавить("СписаниеКосвенныхРасходов");
	КРасчету.Добавить("РезервыПоДолгам");
	КРасчету.Добавить("РасчетКурсовыхРазницРегл");
	КРасчету.Добавить("ФинансовыйРезультат");
	КРасчету.Добавить("ФормированиеКУДиР");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	КРасчету.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	
	Возврат КРасчету;
КонецФункции

// Метод возвращает массив этапов, исключаемых из расчета.
//
//	Параметры:
//	 Критерии - Структура - Перечень ФО и их значений.
//
//	Возвращаемое значение:
//	  Массив - Массив имен отключенных этапов.
Функция ОтключенныеЭтапы(Критерии = Неопределено) Экспорт
	Если Критерии = Неопределено Тогда
		 Критерии = ПолучитьКритерии();
	КонецЕсли;
	ОтключенныеЭтапы = Новый Массив();
	Если Критерии.БазоваяВерсия Тогда
		ОтключенныеЭтапы.Добавить("ПомощникПоУчетуНДС");
	КонецЕсли;
	Если НЕ Критерии.УчитыватьПрочиеДоходыИРасходы Тогда
		ОтключенныеЭтапы.Добавить("РаспределениеРБП");
	КонецЕсли;
	Если НЕ Критерии.ИспользоватьКредитыДепозитыЗаймы Тогда
		ОтключенныеЭтапы.Добавить("НачисленияПоКредитамДепозитам");
	КонецЕсли;
	Если НЕ Критерии.ИспользоватьПодарочныеСертификаты Тогда
		ОтключенныеЭтапы.Добавить("АннулированиеПодарочныхСертификатов");
	КонецЕсли;
	//++ НЕ УТКА
	Если НЕ Критерии.ИспользоватьМеждународныйУчет Тогда
		ОтключенныеЭтапы.Добавить("АмортизацияОСиНМАМеждународный");
	КонецЕсли;
	//-- НЕ УТКА
	Если НЕ (Критерии.РаспределятьНДС ИЛИ Критерии.ИспользоватьНДС0) Тогда
		ОтключенныеЭтапы.Добавить("РаспределениеНДС");
	КонецЕсли;
	Если НЕ Критерии.ИспользоватьНесколькоВалют Тогда
		ОтключенныеЭтапы.Добавить("ПереоценкаДенежныхСредств");
	КонецЕсли;
	Если НЕ Критерии.ФормироватьФинансовыйРезультат Тогда
		ОтключенныеЭтапы.Добавить("РаспределениеДоходовРасходов");
	КонецЕсли;
	//++ НЕ УТКА
	Если НЕ Критерии.ИспользоватьМеждународныйУчет Тогда
		ОтключенныеЭтапы.Добавить("МеждународныйУчет");
	КонецЕсли;
	//-- НЕ УТКА
	//++ НЕ УТ
	Если Не Критерии.ИспользоватьНачислениеЗарплаты Тогда
		ОтключенныеЭтапы.Добавить("ОтражениеЗарплаты");
	КонецЕсли;
	Если Не Критерии.ИспользоватьНачислениеЗарплаты
		ИЛИ Не Критерии.ИспользоватьРасчетРезервовОтпусков
		ИЛИ Не Критерии.ИспользоватьРеглУчет Тогда
		ОтключенныеЭтапы.Добавить("НачислениеОО");
	КонецЕсли;
	Если Не Критерии.ИспользоватьТорговыйСбор Тогда
		ОтключенныеЭтапы.Добавить("ТорговыйСбор");
	КонецЕсли;
	Если Не Критерии.ИспользоватьРеглУчет Тогда
		ОтключенныеЭтапы.Добавить("АмортизацияОСиНМА");
		ОтключенныеЭтапы.Добавить("ПогашениеСтоимостиТМЦ");
		ОтключенныеЭтапы.Добавить("НалогНаИмущество");
		ОтключенныеЭтапы.Добавить("ТранспортныйНалог");
		ОтключенныеЭтапы.Добавить("ЗемельныйНалог");
		ОтключенныеЭтапы.Добавить("ДолиСписанияКосвенныхРасходов");
		ОтключенныеЭтапы.Добавить("СписаниеКосвенныхРасходов");
		ОтключенныеЭтапы.Добавить("РезервыПоДолгам");
		ОтключенныеЭтапы.Добавить("РасчетКурсовыхРазницРегл");
		ОтключенныеЭтапы.Добавить("ФинансовыйРезультат");
		ОтключенныеЭтапы.Добавить("ФормированиеКУДиР");				
	КонецЕсли;
	Если Не Критерии.ИспользоватьЛизинг Тогда
		ОтключенныеЭтапы.Добавить("ПризнаниеВНУЛизинговыхПлатежей");
	КонецЕсли;
	//-- НЕ УТ
	Возврат ОтключенныеЭтапы;
КонецФункции

// Возвращает для указанного этапа его состояние.
//
//	Параметры:
//	 ПредыдущиеЭтапы - Массив - Этапы, рассчитанные ранее.
//	 ПараметрыРасчета - Структура - Структура расчета, см. метод формы ИнициализироватьПараметрыРасчета()
//	 ИмяЭтапаРасчета - Строка - Имя рассчитываемого этапа.
//
//	Возвращаемое значение:
//	  Перечисления.СостоянияОперацийЗакрытияМесяца - Состояние указанного этапа
Функция СостояниеЭтапа(ПредыдущиеЭтапы, ПараметрыРасчета, ИмяЭтапаРасчета) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ИмяЭтапаРасчета = "ИсправлениеОтрицательныхОстатков" Тогда
		Состояние = СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПередачаТоваров" Тогда
		Состояние = СостояниеПередачаВозвратТоваров(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыПоКомиссииИнтеркампани" Тогда
		Состояние = СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыКомитентамОСписании" Тогда
		Состояние = СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПомощникПоУчетуНДС" Тогда
		Состояние = СостояниеОперацииПоУчетуНДС(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		Состояние = СостояниеРасчетыСПартнерами(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРБП" Тогда
		Состояние = СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "НачисленияПоКредитамДепозитам" Тогда
		Состояние = СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		Состояние = СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		Состояние = СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеНДС" Тогда
		Состояние = СостояниеРаспределениеНДС(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		Состояние = СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		Состояние = СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		Состояние = СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РеглУчет" Тогда
		Состояние = СостояниеРеглУчет(ПараметрыРасчета, ПредыдущиеЭтапы);
	//++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМА" Тогда
		Состояние = СостояниеАмортизацияОСиНМА(ПараметрыРасчета);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМАМеждународный" Тогда
		Состояние = СостояниеАмортизацияОСиНМАМеждународный(ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "ПогашениеСтоимостиТМЦ" Тогда
		Состояние = СостояниеПогашениеСтоимостиТМЦ(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "НалогНаИмущество" Тогда
		Состояние = СостояниеРасчетНалогаНаИмущество(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ТранспортныйНалог" Тогда
		Состояние = СостояниеРасчетТранспортногоНалога(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ЗемельныйНалог" Тогда
		Состояние = СостояниеРасчетЗемельногоНалога(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ТорговыйСбор" Тогда
		Состояние = СостояниеРасчетТорговогоСбора(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРасходов" Тогда
		Состояние = СостояниеНастройкаРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "НастройкаПоказателейРаспределенияРасходов" Тогда
		Состояние = СостояниеНастройкаПоказателейРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеЗатратНаВыпуск" Тогда
		Состояние = СостояниеСписаниеЗатратНаВыпуск(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеМатериаловРаботНаПродукцию" Тогда
		Состояние = СостояниеРаспределениеМатериаловИРаботНаПродукцию(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ДолиСписанияКосвенныхРасходов" Тогда
		Состояние = СостояниеРасчетДолейСписанияКосвенныхРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РасходыНаПродукцию" Тогда
		Состояние = СостояниеРаспределениеРасходовНаПродукцию(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеКосвенныхРасходов" Тогда
		Состояние = СостояниеСписаниеКосвенныхРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РезервыПоДолгам" Тогда
		Состояние = СостояниеРезервыПоДолгам(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетКурсовыхРазницРегл" Тогда
		Состояние = СостояниеРасчетКурсовыхРазницРегл(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ФинансовыйРезультат" Тогда
		Состояние = СостояниеФормированиеФинансовогоРезультата(ПараметрыРасчета, ПредыдущиеЭтапы);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "МеждународныйУчет" Тогда
		Состояние = СостояниеМеждународныйУчет(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ПроизводствоБезЗаказов" Тогда
		Состояние = СостояниеПроизводствоБезЗаказов(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеМатериаловРаботНаПродукцию22" Тогда
		Состояние = СостояниеРаспределениеМатериаловРаботНаПродукцию22(ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "НачислениеОО" Тогда
		Состояние = СостояниеНачислениеОО(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ОтражениеЗарплаты" Тогда
		Состояние = СостояниеОтражениеЗарплаты(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ФормированиеКУДиР" Тогда
		Состояние = СостояниеФормированиеКУДиР(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ПризнаниеВНУЛизинговыхПлатежей" Тогда
		Состояние = СостояниеПризнаниеВНУЛизинговыхПлатежей(ПараметрыРасчета, ПредыдущиеЭтапы);
	//-- НЕ УТ
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Состояние;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКритерии()
	Критерии = Новый Структура();
	Критерии.Вставить("УчитыватьПрочиеДоходыИРасходы", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Критерии.Вставить("ФормироватьФинансовыйРезультат", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	Критерии.Вставить("БазоваяВерсия", ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	Критерии.Вставить("ИспользоватьНесколькоВалют", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	Критерии.Вставить("ИспользоватьПодарочныеСертификаты", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	Критерии.Вставить("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	Критерии.Вставить("РаспределятьНДС", ПолучитьФункциональнуюОпцию("РаспределятьНДС"));
	Критерии.Вставить("ИспользоватьНДС0", ПолучитьФункциональнуюОпцию("ИспользоватьНДС0"));
	Критерии.Вставить("ИспользоватьКредитыДепозитыЗаймы", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
	//++ НЕ УТ
	//++ НЕ УТКА
	Критерии.Вставить("ИспользоватьМеждународныйУчет", ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет"));
	//-- НЕ УТКА
	Критерии.Вставить("ИспользоватьНачислениеЗарплаты", ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ"));
	Критерии.Вставить("ИспользоватьРасчетРезервовОтпусков", ПолучитьФункциональнуюОпцию("ИспользоватьРасчетРезервовОтпусков"));
	Критерии.Вставить("ИспользоватьТорговыйСбор", ПолучитьФункциональнуюОпцию("УплачиваетсяТорговыйСбор"));
	Критерии.Вставить("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	Критерии.Вставить("ИспользоватьЛизинг", ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг"));
	//-- НЕ УТ
	Возврат Критерии;
КонецФункции
//++ НЕ УТ
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция РезультатТребуетсяРаспределениеРасходов(Период, СписокОрганизаций)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения() + "
	|ВЫБРАТЬ
	|	Таблица.СтатьяРасходов
	|ИЗ
	|	ВТДанныеДляРаспределения КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СтатьяРасходов
	|ИЗ
	|	ВТДанныеДляРаспределения КАК Таблица
	|ГДЕ
	|	Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения)
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",        НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций",    СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокПодразделений",  СписокПодразделений());
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",   Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Ложь);
	Запрос.УстановитьПараметр("ФильтрПоСостоянию",    Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
	
	Возврат Запрос.ВыполнитьПакет();	
КонецФункции
//-- НЕ УТ

#Область СостоянияЭтапов

Функция СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета)
	
	ПараметрыПроверкиОстатков = Новый Структура;
	ПараметрыПроверкиОстатков.Вставить("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	ПараметрыПроверкиОстатков.Вставить("ДатаНачала", 		НачалоМесяца(ПараметрыРасчета.Период));
	ПараметрыПроверкиОстатков.Вставить("ДатаОкончания", 	КонецМесяца(ПараметрыРасчета.Период));
	
	МассивРезультатов = Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.ПолучитьСостояниеОстатковТоваровОрганизаций(ПараметрыПроверкиОстатков);
	
	РезультатЗапросаОтрицательныеОстатки = МассивРезультатов[2];
	РезультатЗапросаРазвернутоеСальдо 	 = МассивРезультатов[3];
	
	Если РезультатЗапросаОтрицательныеОстатки.Пустой()
	 И РезультатЗапросаРазвернутоеСальдо.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеПередачаВозвратТоваров(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КПередачеВозврату.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&Граница) КАК КПередачеВозврату
	|ГДЕ
	|	(КПередачеВозврату.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередачеВозврату.ВидЗапасовПродавца.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И (КПередачеВозврату.КоличествоОстаток > 0
	|		ИЛИ КПередачеВозврату.ВозвращеноОстаток > 0)
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|ГДЕ
	|	(КОформлению.АналитикаУчетаНоменклатуры.Склад В (&МассивОрганизаций)
	|		ИЛИ (&ПоВсемОрганизациям И КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации))
	|	И (КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0
	|		ИЛИ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|ГДЕ
	|	(КОформлению.ВидЗапасов.Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации
	|	И (КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0
	|		ИЛИ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0)
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|ГДЕ
	|	(КОформлению.ВидЗапасов.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ (КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации)
	|	И (КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток) <> 0
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРасчетыСПартнерами(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (Ключи.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (Ключи.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И Расчеты.Активность
	|");
	
	ПоляОтбора = Новый Структура("Организация, Партнер, Контрагент, Договор");
	ПоляОтбора.Организация = ПараметрыРасчета.СписокОрганизаций;
	
	АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
	АналитикиРасчета.Организации = ПараметрыРасчета.СписокОрганизаций;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	НачалоРасчета = РаспределениеВзаиморасчетов.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
	Результат = Запрос.Выполнить();
	ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценкаВзаиморасчетов(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);

	Если Результат.Пустой() И (НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период) И НЕ ТребуетсяПереоценка Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	СУММА(Приходы.Сумма) КАК Сумма,
		|	СУММА(Приходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Приходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Приходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Приходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Приходы.Период <= &ДатаОкончания
		|	И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Приходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Приходы.Организация,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Организация,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов,
		|	СУММА(Расходы.Сумма) КАК Сумма,
		|	СУММА(Расходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Расходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Расходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Расходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Расходы.Регистратор.Дата <= &ДатаОкончания
		|	И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Организация,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма ,0) КАК Сумма,
		|	Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0) КАК СуммаРегл,
		|	Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
		|	Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0) КАК ВременнаяРазница
		|ИЗ
		|	Приходы КАК Приходы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК Расходы
		|	ПО Расходы.Организация = Приходы.Организация
		|		И Расходы.Подразделение = Приходы.Подразделение
		|		И Расходы.СтатьяРасходов = Приходы.СтатьяРасходов
		|		И Расходы.АналитикаРасходов = Приходы.АналитикаРасходов
		|ГДЕ
		|	(Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма, 0)) <> 0
		|	ИЛИ (Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0)) <> 0
		|	ИЛИ (Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница ,0)) <> 0
		|	ИЛИ (Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0)) <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		УстановитьПривилегированныйРежим(Истина);
		Если Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафикаКредитовИДепозитов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФакт
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Договор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт КАК ОтклонениеПроцентаНачисления,
	|	втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт КАК ОтклонениеКомиссииНачисления
	|ИЗ
	|	втПланФакт КАК втПланФакт
	|ГДЕ
	|	втПланФакт.Договор.Организация В (&СписокОрганизаций)
	|	И (втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт > 0
	|		ИЛИ втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт > 0)
	|");
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СтатусДоговора", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[3].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено) КАК СостояниеАннулирования
	|
	|ИЗ
	|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&КонецПериода) КАК ИсторияСертификатов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияСертификатов
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = АктивацияСертификатов.ПодарочныйСертификат
	|		И АктивацияСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПодарочныеСертификаты КАК СправочникСертификаты
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = СправочникСертификаты.Ссылка
	|ГДЕ
	|	АктивацияСертификатов.Регистратор.Организация В (&СписокОрганизаций)
	|	И ИсторияСертификатов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Аннулирован)
	|	И ВЫБОР АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕНЬ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, НЕДЕЛЯ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, МЕСЯЦ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, КВАРТАЛ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ГОД, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕКАДА, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ПОЛУГОДИЕ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			ИНАЧЕ АктивацияСертификатов.Период
	|		КОНЕЦ < &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно)
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|
	|ГДЕ
	|	Аннулирование.Организация В (&СписокОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеТребуется)
	|");
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СостояниеАннулирования;
КонецФункции

Функция СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.РасчетыСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = УниверсальныеМеханизмыПартийИСебестоимости.СостояниеРасчетПартийТоваров(
			ПараметрыРасчета.Период,
			ПараметрыРасчета.СписокОрганизаций);
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРаспределениеНДС(ПараметрыРасчета, ПредыдущиеЭтапы)
	Если ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = ЗакрытиеМесяцаУТВызовСервера.СостояниеРаспределениеНДС(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = УниверсальныеМеханизмыПартийИСебестоимости.СостояниеРасчетаСебестоимости(
			ПараметрыРасчета.Период,
			ПараметрыРасчета.СписокОрганизаций);
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецМесяца
	|	И Задания.Операция = &ОперацияПереоценки
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|");
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОперацияПереоценки", Перечисления.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	ЗаданияКРасчету = Запрос.Выполнить();
	Если НЕ ЗаданияКРасчету.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		РегистрыДляРасчета = Документы.ПереоценкаВалютныхСредств.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
			РегистрыДляРасчета.Вставить("РасчетыПоДоговорамКредитовИДепозитов");
		КонецЕсли;
		
		ЕстьВалютныеОстатки = Документы.ПереоценкаВалютныхСредств.ЕстьВалютныеОстатки(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			РегистрыДляРасчета);
		ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценка(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			РегистрыДляРасчета);
			
		Если ЕстьВалютныеОстатки И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы)
	Если ПредыдущиеЭтапы.Свойство("РаспределениеНДС") И ПредыдущиеЭтапы.РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расходы.Организация КАК Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Расходы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|		И (Статьи.ВариантРаспределенияРасходов = 
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|ГДЕ
		|	Расходы.СуммаПриход <> 0
		|	ИЛИ Расходы.СуммаРасход <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПриход <> 0
		|	ИЛИ Доходы.СуммаРасход <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расходы.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		Расходы.Организация,
		|		Расходы.Подразделение,
		|		Расходы.НаправлениеДеятельности,
		|		Расходы.СтатьяРасходов,
		|		Расходы.АналитикаРасходов
		|	ИЗ
		|		РегистрНакопления.ПрочиеРасходы.Остатки(
		|			&ГраницаДатаОкончания,
		|			Организация В (&СписокОрганизаций)
		|		) КАК Расходы
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|		ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|			И (Статьи.ВариантРаспределенияРасходов = 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|	ГДЕ
		|		Расходы.СуммаОстаток <> 0
		|	) КАК Расходы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Остатки(
		|		&ГраницаДатаОкончания,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаОстаток <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		ИначеЕсли НЕ Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОперацииПоУчетуНДС(ПараметрыРасчета)
	
	ПараметрыНДС = Новый Структура;
	ПараметрыНДС.Вставить("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	ПараметрыНДС.Вставить("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	
	Если ПараметрыРасчета.СписокОрганизаций.Количество() = 1 Тогда
		ПараметрыНДС.Вставить("Организация", ПараметрыРасчета.СписокОрганизаций[0])
	Иначе
		ПараметрыНДС.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	ОперацииПоНДСКВыполнению = Обработки.ПомощникПоУчетуНДС.ОперацииПоНДСКВыполнению(ПараметрыНДС);
	Если ОперацииПоНДСКВыполнению.ЕстьОбязательныеОперацииКВыполнению Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ОперацииПоНДСКВыполнению.ЕстьОперацииКВыполнению Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРеглУчет(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Запрос = Новый Запрос(ЗакрытиеМесяцаУТВызовСервера.ТекстЗапросаСостояниеОтраженияДокументов(Истина));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций",ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЕстьОтраженныеВУчете   = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	Если ЕстьНеОтраженныеВУчете Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	ИначеЕсли ЕстьОжидающиеОтражения Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьОтраженныеВУчете Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

//++ НЕ УТ
#Область НЕ_УТ

Функция СостояниеАмортизацияОСиНМА(ПараметрыРасчета)

	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &НачалоПериода
	|	И Задания.Операция В (ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.АмортизацияОС),
	|							ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.АмортизацияНМА))
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.АмортизацияОС КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И (Док.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И Док.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.АмортизацияНМА КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И (Док.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И Док.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций",  ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаданияКРасчету = НЕ Результат[0].Пустой();
	ЕстьДокумент = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьДокумент Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

//++ НЕ УТКА
#Область НЕ_УТКА
Функция СостояниеАмортизацияОСиНМАМеждународный(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(
	|		НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ),
	|		Организация В (&СписокОрганизаций)
	|	) КАК Т
	|;
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеСредства.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(
	|		&КонецПериода,
	|		Организация В (ВЫБРАТЬ Ссылка ИЗ Организации)
	|	) КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Состояние = &Состояние
	|	И ОсновныеСредства.ПорядокУчета = &ПорядокУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НематериальныеАктивы.НематериальныйАктив
	|ИЗ
	|	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(
	|		&КонецПериода,
	|		Организация В (ВЫБРАТЬ Ссылка ИЗ Организации)
	|	) КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Состояние = &Состояние
	|	И НематериальныеАктивы.ПорядокУчета = &ПорядокУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияОС.Ссылка
	|ИЗ
	|	Документ.АмортизацияОСМеждународныйУчет КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|	И АмортизацияОС.Организация В (ВЫБРАТЬ Ссылка ИЗ Организации)
	|	И АмортизацияОС.Дата >= &НачалоПериода
	|	И АмортизацияОС.Дата <= &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияНМА.Ссылка
	|ИЗ
	|	Документ.АмортизацияНМАМеждународныйУчет КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|	И АмортизацияНМА.Организация В (ВЫБРАТЬ Ссылка ИЗ Организации)
	|	И АмортизацияНМА.Дата >= &НачалоПериода
	|	И АмортизацияНМА.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("ПорядокУчета", Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	АмортизацияОСНачислена = НЕ РезультатЗапроса[3].Пустой() ИЛИ РезультатЗапроса[1].Пустой();// есть документы амортизации ОС или НЕ требуется
	АмортизацияНМАНачислена = НЕ РезультатЗапроса[4].Пустой() ИЛИ РезультатЗапроса[2].Пустой();// есть документы амортизации НМА или НЕ требуется
	
	// если нет документов принятия к учету 
	Если РезультатЗапроса[1].Пустой() И РезультатЗапроса[2].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли АмортизацияОСНачислена И АмортизацияНМАНачислена Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеПроизводствоБезЗаказов(ПараметрыРасчета)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов,
	|	ТоварыОрганизаций.НомерГТД
	|ИЗ
	|	// Получаем перечень аналитик, по которым была оформлена передача продукции в этом месяце
	|	(ВЫБРАТЬ
	|		ТоварыОрганизацийДвижения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизацийДвижения.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизацийДвижения
	|	ГДЕ
	|		ТоварыОрганизацийДвижения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТоварыОрганизацийДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И (ТоварыОрганизацийДвижения.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|		И ТИПЗНАЧЕНИЯ(ТоварыОрганизацийДвижения.Регистратор) = ТИП(Документ.ДвижениеПродукцииИМатериалов)
	|		И ТоварыОрганизацийДвижения.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыОрганизацийДвижения.АналитикаУчетаНоменклатуры,
	|		ТоварыОрганизацийДвижения.Организация) КАК ТоварыОрганизацийДвижения
	|	
	|	// Получаем остатки переданной продукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаКонецПериода) КАК ТоварыОрганизаций
	|		ПО ТоварыОрганизацийДвижения.АналитикаУчетаНоменклатуры = ТоварыОрганизаций.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизацийДвижения.Организация = ТоварыОрганизаций.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО (Аналитика.КлючАналитики = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО (Аналитика.Склад = СпрСклады.Ссылка)
	|	
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток < 0
	|	И СпрСклады.ЦеховаяКладовая;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ДД
	|ГДЕ
	|	ДД.Проведен
	|	И (ДД.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И ДД.Дата МЕЖДУ &НачалоПериода И &КонецПериода");
	
	Запрос.УстановитьПараметр("МассивОрганизаций",   ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",  НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Не Результат[1].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРаспределениеМатериаловРаботНаПродукцию22(ПараметрыРасчета)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПроизводственныхЗатрат.ТекстЗапросаМатериаловИРаботВКладовых(Истина) + 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Распределить > 0
	|	И МатериалыИРаботы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Распределить > 0
	|	И МатериалыИРаботы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Организация
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДД
	|ГДЕ
	|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (ДД.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И (ДД.Организация В (&Организации)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Распределено > 0";
	
	Запрос.УстановитьПараметр("НачалоПериода",           НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОкончаниеПериода",        КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВсеПодразделения",        Истина);
	Запрос.УстановитьПараметр("Подразделения",           СписокПодразделений());
	Запрос.УстановитьПараметр("Организации",             ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",      НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("ТипНоменклатуры",         Неопределено);
	Запрос.УстановитьПараметр("ВсеТипыНоменклатуры",     Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	ИндексРезультатов = Результат.ВГраница();
	
	Если Не Результат[ИндексРезультатов-3].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Не Результат[ИндексРезультатов-2].Пустой() Тогда
		
		Если Не Результат[ИндексРезультатов-1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
		
	ИначеЕсли Не Результат[ИндексРезультатов].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти //НЕ_УТКА
//-- НЕ УТКА

Функция СостояниеПогашениеСтоимостиТМЦ(ПараметрыРасчета)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &НачалоПериода
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ПогашениеСтоимостиТМЦВЭксплуатации КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И (Док.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И Док.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций",  ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаданияКРасчету = НЕ Результат[0].Пустой();
	ЕстьДокумент = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьДокумент Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРасчетНалогаНаИмущество(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	
	НеобходимРасчетНалогаНаИмущество = 
		Месяц(ПараметрыРасчета.Период) = 12 
		ИЛИ (Месяц(ПараметрыРасчета.Период)%3 = 0 И УплачиваютсяАвансы);
	
	Если Не НеобходимРасчетНалогаНаИмущество Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &НачалоПериода
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И (РегламентнаяОперация.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций",  ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("Операция",           Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаданияКРасчету = НЕ Результат[0].Пустой();
	ЕстьДокумент = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьДокумент Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРасчетТранспортногоНалога(ПараметрыРасчета)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	
	НеобходимРасчетТранспортногоНалога = 
		Месяц(ПараметрыРасчета.Период) = 12 
		ИЛИ (Месяц(ПараметрыРасчета.Период)%3 = 0 И УплачиваютсяАвансы);
	
	Если Не НеобходимРасчетТранспортногоНалога Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &НачалоПериода
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И (РегламентнаяОперация.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетТранспортногоНалога)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций",  ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("Операция",           Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаданияКРасчету = НЕ Результат[0].Пустой();
	ЕстьДокумент = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьДокумент Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРасчетЗемельногоНалога(ПараметрыРасчета)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	
	НеобходимРасчетЗемельногоНалога = 
		Месяц(ПараметрыРасчета.Период) = 12 
		ИЛИ (Месяц(ПараметрыРасчета.Период)%3 = 0 И УплачиваютсяАвансы);
	
	Если Не НеобходимРасчетЗемельногоНалога Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &НачалоПериода
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И (РегламентнаяОперация.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетЗемельногоНалога)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций",  ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("Операция",           Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьЗаданияКРасчету = НЕ Результат[0].Пустой();
	ЕстьДокумент = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьДокумент Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;

КонецФункции

Функция СостояниеНастройкаРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)

	Результат = РезультатТребуетсяРаспределениеРасходов(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
	Если Результат[10].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Результат[11].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНастройкаПоказателейРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатТребуетсяРаспределениеРасходов(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
	Если Результат[10].Пустой() Тогда
		Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Показатели.Ссылка КАК Показатель
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов КАК ЗначенияЕжемесячно
		|		ПО Показатели.Ссылка = ЗначенияЕжемесячно.Показатель
		|			И (НАЧАЛОПЕРИОДА(ЗначенияЕжемесячно.Период, МЕСЯЦ) = &НачалоМесяца)
		|ГДЕ
		|	НЕ Показатели.ПометкаУдаления
		|	И ЗначенияЕжемесячно.Показатель ЕСТЬ NULL 
		|	И Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов.СрезПоследних(&КонецМесяца, ) КАК ЗначенияПриИзменении
		|		ПО Показатели.Ссылка = ЗначенияПриИзменении.Показатель
		|ГДЕ
		|	НЕ Показатели.ПометкаУдаления
		|	И ЗначенияПриИзменении.Показатель ЕСТЬ NULL 
		|	И Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении)
		|");
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеСписаниеЗатратНаВыпуск(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Распоряжения.КоличествоКонечныйОстаток, 0) КАК КонечныйОстаток,
	|	ЕСТЬNULL(Распоряжения.КоличествоНачальныйОстаток, 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(Распоряжения.КоличествоПриход, 0) КАК Оборот
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&ОкончаниеПериода,
	|		Авто,
	|		,
	|		Организация В (&Организация)
	|		ИЛИ &ПоВсемОрганизациям
	|	) КАК Распоряжения
	|");
	
	Запрос.УстановитьПараметр("Организация",        ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КонечныйОстаток > 0 И Выборка.НачальныйОстаток = 0 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Выборка.Оборот > 0 И Выборка.НачальныйОстаток = 0 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеМатериаловИРаботНаПродукцию(ПараметрыРасчета)
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если Не НастройкиПроизводства.ИспользуетсяПроизводство21 Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПроизводственныхЗатрат.ТекстЗапросаЗаполнитьПроизводственныеЗатраты(Истина) + 
	"ВЫБРАТЬ
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.КРаспределению <> 0
	|	И МатериалыИРаботы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.КРаспределению <> 0
	|	И МатериалыИРаботы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Организация
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве КАК ДД
	|ГДЕ
	|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (ДД.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И (ДД.Организация В (&Организация)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Номенклатура
	|ИЗ
	|	МатериалыИРаботы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.РаспределеноНаПроизводство > 0";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОкончаниеПериода",  КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВсеПодразделения",  Истина);
	Запрос.УстановитьПараметр("Подразделения",     СписокПодразделений());
	Запрос.УстановитьПараметр("Организация",       ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	Результат = Запрос.ВыполнитьПакет();
	ИндексРезультатов = Результат.ВГраница();
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если Не Результат[ИндексРезультатов-3].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Не Результат[ИндексРезультатов-2].Пустой() Тогда
		
		Если Не Результат[ИндексРезультатов-1].Пустой() Или Не НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		КонецЕсли;
		
	ИначеЕсли Не Результат[ИндексРезультатов].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеРасчетДолейСписанияКосвенныхРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Если ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = ЗакрытиеМесяцаУТВызовСервера.СостояниеРасчетДолейСписанияКосвенныхРасходов(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеРасходовНаПродукцию(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПараметрыРасчета.Период)) Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется; // не выполняется отдельно от остальных этапов расчета партий
	ИначеЕсли ПредыдущиеЭтапы.РаспределениеРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.Свойство("ДолиСписанияКосвенныхРасходов")
		И ПредыдущиеЭтапы.ДолиСписанияКосвенныхРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения() + "
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|ГДЕ
		|	Данные.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.ОшибкаРаспределения)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|ГДЕ
		|	Данные.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.Распределено)
		|";
		
		Запрос.УстановитьПараметр("НачалоПериода", 		  НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода", 	  	  КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СписокПодразделений",  СписокПодразделений());
		Запрос.УстановитьПараметр("МассивОрганизаций",    ПараметрыРасчета.СписокОрганизаций);
		Запрос.УстановитьПараметр("ПоВсемОрганизациям",   Ложь);
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", Ложь);
		Запрос.УстановитьПараметр("ФильтрПоСостоянию",    Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
		
		Результат = Запрос.ВыполнитьПакет();
		Если Результат[10].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли НЕ Результат[11].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
		ИначеЕсли Результат[12].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеСписаниеКосвенныхРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)
	Если ПредыдущиеЭтапы.ДолиСписанияКосвенныхРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РеглУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РеглУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК Ссылка,
		|	СтатьиРасходов.ВариантРаспределенияРасходов,
		|	СтатьиРасходов.КосвенныеЗатратыНУ
		|ПОМЕСТИТЬ ВТКосвенныеРасходы
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	(СтатьиРасходов.ВариантРаспределенияРасходов =
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|			И СтатьиРасходов.ВидРасходов <> &ТранспортныеРасходы)
		|	ИЛИ (СтатьиРасходов.ВариантРаспределенияРасходов =
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|	 	И СтатьиРасходов.КосвенныеЗатратыНУ)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаДатаОкончания, Организация В (&СписокОрганизаций)) КАК Таб
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКосвенныеРасходы КАК ВТКосвенныеРасходы
		|	ПО Таб.СтатьяРасходов = ВТКосвенныеРасходы.Ссылка
		|ГДЕ
		|	Таб.ВременнаяРазницаОстаток <> 0 ИЛИ (Таб.СуммаРеглОстаток <> 0 И НЕ ВТКосвенныеРасходы.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|ГДЕ
		|	РегламентнаяОперация.Организация В(&СписокОрганизаций)
		|	И РегламентнаяОперация.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РегламентнаяОперация.Проведен
		|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов)
		|;
		|////////////////////////////////////////////////////////////////////////////////");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		// Транспортные расходы исключить, т.к. они могут относиться к остатку нереализованных товаров
		Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[1].Пустой() И Результат[2].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли НЕ Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРезервыПоДолгам(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли ПредыдущиеЭтапы.ДолиСписанияКосвенныхРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РеглУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Организация КАК Ссылка
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, Организация В (&СписокОрганизаций)) КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
		|		ПО Т.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
		|			И (СпрУчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ
		|				ИЛИ СпрУчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	ИСТИНА КАК ЕстьРезервы
		|ПОМЕСТИТЬ ВТРезервы
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
		|ГДЕ
		|	Расчеты.Период <= &ОкончаниеПериода
		|	И Расчеты.АналитикаУчетаПоПартнерам.Организация В
		|			(ВЫБРАТЬ
		|				Т.Ссылка
		|			ИЗ
		|				Организации КАК Т)
		|	И Расчеты.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Проводки.Организация,
		|	ИСТИНА
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Граница,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
		|			&ТипыСубконто,
		|			Организация В
		|					(ВЫБРАТЬ
		|						Т.Ссылка
		|					ИЗ
		|						Организации КАК Т)
		|				И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК Проводки
		|ГДЕ
		|	(Проводки.СуммаОстаток <> 0
		|			ИЛИ Проводки.СуммаНУОстаток <> 0
		|			ИЛИ Проводки.СуммаПРОстаток <> 0
		|			ИЛИ Проводки.СуммаВРОстаток <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	ВЫБОР 
		|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РегламентнаяОперация
		|ПОМЕСТИТЬ ВТРегламентынеОперации
		|ИЗ
		|	Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|		ПО (РегламентнаяОперация.Организация = Организации.Ссылка)
		|			И (РегламентнаяОперация.Проведен)
		|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подзапрос.Организация,
		|	МАКСИМУМ(Подзапрос.ЕстьРезервы) КАК ЕстьРезервы,
		|	МАКСИМУМ(Подзапрос.ЕстьРегламентнаяОперация) КАК ЕстьРегламентнаяОперация
		|ИЗ
		|	(ВЫБРАТЬ
		|		Резервы.Организация КАК Организация,
		|		Резервы.ЕстьРезервы КАК ЕстьРезервы,
		|		ЛОЖЬ КАК ЕстьРегламентнаяОперация
		|	ИЗ
		|		ВТРезервы КАК Резервы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РегламентынеОперации.Организация,
		|		ЛОЖЬ,
		|		РегламентынеОперации.РегламентнаяОперация
		|	ИЗ
		|		ВТРегламентынеОперации КАК РегламентынеОперации) КАК Подзапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Подзапрос.Организация");
		
		ТипыСубконто = Новый Массив;
		ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
		
		Запрос.УстановитьПараметр("НачалоПериода",		НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ОкончаниеПериода",	КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("Граница",			Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СписокОрганизаций",	ПараметрыРасчета.СписокОрганизаций);
		Запрос.УстановитьПараметр("ТипыСубконто",		ТипыСубконто);
		
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			
			Если НЕ Результат.ЕстьРезервы Тогда
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			ИначеЕсли НЕ Результат.ЕстьРегламентнаяОперация Тогда
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
				Прервать;
			Иначе
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеФормированиеФинансовогоРезультата(ПараметрыРасчета, ПредыдущиеЭтапы)
	НеВыполнено = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли ПредыдущиеЭтапы.СписаниеКосвенныхРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РеглУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РезервыПоДолгам = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТипыРеглОпераций.Ссылка КАК ТипОперации
		|ПОМЕСТИТЬ ТипыОпераций
		|ИЗ
		|	Перечисление.ТипыРегламентныхОпераций КАК ТипыРеглОпераций
		|ГДЕ
		|	ТипыРеглОпераций.Ссылка В (&ТипыОпераций)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Таб.Организация,
		|	Таб.Обособленное,
		|	Таб.ГоловнаяОрганизация
		|ПОМЕСТИТЬ СписокОрганизаций
		|ИЗ (
		|	ВЫБРАТЬ
		|		ЕСТЬNULL(ОбособПодр.Ссылка, ДД.Ссылка) КАК Организация, // Получим организации без обособ. подразделений и обособленные подразделения
		|		ЕСТЬNULL(ОбособПодр.ОбособленноеПодразделение, ЛОЖЬ) КАК Обособленное,
		|		ЕСТЬNULL(ОбособПодр.ГоловнаяОрганизация, ДД.Ссылка) КАК ГоловнаяОрганизация
		|	ИЗ
		|		Справочник.Организации КАК ДД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособПодр
		|		ПО ДД.Ссылка = ОбособПодр.ГоловнаяОрганизация
		|			И ОбособПодр.ОбособленноеПодразделение
		|	ГДЕ
		|		НЕ ДД.ОбособленноеПодразделение
		|		И (ДД.Ссылка В (&СписокОрганизаций)
		|			ИЛИ ЕСТЬNULL(ОбособПодр.Ссылка, ДД.Ссылка) В (&СписокОрганизаций)
		|		) И ДД.Ссылка <> &УпрОрганизация
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДД.Ссылка КАК Организация, // Добавим ссылки на сами головные организации
		|		ЛОЖЬ КАК Обособленное,
		|		ДД.Ссылка КАК ГоловнаяОрганизация
		|	ИЗ
		|		Справочник.Организации КАК ДД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособПодр
		|		ПО ДД.Ссылка = ОбособПодр.ГоловнаяОрганизация
		|	ГДЕ
		|		НЕ ДД.ОбособленноеПодразделение
		|		И ОбособПодр.ОбособленноеПодразделение
		|		И ДД.Ссылка В (&СписокОрганизаций)
		|		И ДД.Ссылка <> &УпрОрганизация
		|	) КАК Таб
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокОрганизаций.Организация,
		|	ТипыОпераций.ТипОперации
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	СписокОрганизаций КАК СписокОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			ТипыОпераций КАК ТипыОпераций
		|		ПО
		|			НЕ СписокОрганизаций.Обособленное
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
		|				&ДатаОкончания, 
		|				Организация В (
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|						Т.Организация 
		|					ИЗ 
		|						СписокОрганизаций КАК Т)) КАК УчетныеПолитики
		|	ПО
		|		СписокОрганизаций.Организация = УчетныеПолитики.Организация
		|ГДЕ
		|	// Расчет налога на прибыль только в организации на ОСНО
		|	НЕ (ТипыОпераций.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль)
		|			И ЕСТЬNULL(УчетныеПолитики.УчетнаяПолитика.СистемаНалогообложения, &ОСНО) <> &ОСНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокОрганизаций.Организация,
		|	&ОперацияЗакрытиеГода Как ТипОперации
		|ИЗ
		|	СписокОрганизаций КАК СписокОрганизаций
		|ГДЕ
		|	СписокОрганизаций.Обособленное 
		|	И СписокОрганизаций.Организация В (&СписокОрганизаций)
		|	И &КонецГода
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеглОперация.Ссылка КАК Ссылка,
		|	РеглОперация.Организация КАК Организация,
		|	РеглОперация.ТипОперации КАК ТипОперации
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.РегламентнаяОперация КАК РеглОперация
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыОпераций КАК ТипыОпераций
		|	ПО РеглОперация.ТипОперации = ТипыОпераций.ТипОперации
		|ГДЕ
		|	РеглОперация.Проведен
		|	И РеглОперация.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РеглОперация.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ СписокОрганизаций КАК Т)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Организация КАК Организация
		|ПОМЕСТИТЬ ОрганизацииСОборотами
		|ИЗ (
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация
		|	ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала,
		|		 &ДатаОкончания,
		|		 ,
		|		 ,
		|		 ,
		|		НЕ &КонецГода И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ СписокОрганизаций КАК Т ГДЕ НЕ Т.Обособленное)
		|		 ) КАК ХозрасчетныйОбороты
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация
		|	ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаГода,
		|		 &ДатаОкончанияГода,
		|		 ,
		|		 ,
		|		 ,
		|		&КонецГода И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ СписокОрганизаций КАК Т)
		|		 ) КАК ХозрасчетныйОбороты
		|	) КАК Таб
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.Организация КАК Организация,
		|	СписокОрганизаций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ПОМЕСТИТЬ Остатки90еСчета
		|ИЗ (
		|	ВЫБРАТЬ
		|		Проводки.Организация КАК Организация,
		|		Проводки.СуммаОстаток КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Граница,
		|			Счет В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи)),
		|			,
		|			Организация В (ВЫБРАТЬ Т.Организация ИЗ СписокОрганизаций КАК Т)
		|		) КАК Проводки
		|	ГДЕ
		|		(СуммаОстаток <> 0 ИЛИ СуммаНУОстаток <> 0
		|		ИЛИ СуммаПРОстаток <> 0 ИЛИ СуммаВРОстаток <> 0)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Проводки.Организация КАК Организация,
		|		Проводки.СуммаОстаток КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Граница,
		|			Счет В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
		|			,
		|			Организация В (ВЫБРАТЬ Т.Организация ИЗ СписокОрганизаций КАК Т)
		|		) КАК Проводки
		|	ГДЕ
		|		(СуммаОстаток <> 0 ИЛИ СуммаНУОстаток <> 0
		|			ИЛИ СуммаПРОстаток <> 0 ИЛИ СуммаВРОстаток <> 0)
		|	) КАК Таб
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		СписокОрганизаций КАК СписокОрганизаций
		|	ПО
		|		Таб.Организация = СписокОрганизаций.Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	СписокОрганизаций.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Организация,
		|	Организации.ТипОперации,
		|	Документы.Ссылка
		|ИЗ
		|	Организации КАК Организации
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииСОборотами КАК Обороты
		|	ПО Организации.Организация = Обороты.Организация
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документы КАК Документы
		|	ПО Организации.Организация = Документы.Организация
		|		И Организации.ТипОперации = Документы.ТипОперации
		|ГДЕ
		|	Документы.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Организация,
		|	Организации.ТипОперации,
		|	ЕСТЬNULL(СУММА(Остатки90еСчета.Сумма), 0) КАК Сумма
		|ИЗ
		|	Организации КАК Организации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Остатки90еСчета КАК Остатки90еСчета
		|	ПО Организации.Организация = Остатки90еСчета.ГоловнаяОрганизация
		|		И Организации.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата)
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Организация,
		|	Организации.ТипОперации
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(СУММА(Остатки90еСчета.Сумма), 0) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ ОрганизацииСОборотами
		|");
		
		ТипыОпераций = Новый Массив;
		ТипыОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата);
		ТипыОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль);
		Если КонецМесяца(ПараметрыРасчета.Период) = КонецГода(ПараметрыРасчета.Период) Тогда
			ТипыОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
		Запрос.УстановитьПараметр("ОперацияЗакрытиеГода", Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаОкончанияГода", КонецГода(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("КонецГода", (КонецМесяца(ПараметрыРасчета.Период) = КонецГода(ПараметрыРасчета.Период)));
		Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ОСНО", Перечисления.СистемыНалогообложения.Общая);
		Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
		Запрос.УстановитьПараметр("УпрОрганизация", Справочники.Организации.УправленческаяОрганизация);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[7].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли Результат[6].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции
//++ НЕ УТКА
Функция СостояниеМеждународныйУчет(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = новый Запрос(
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийМУСрезПоследних.Организация КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация В (&Организация) ИЛИ &ПоВсемОрганизациям) КАК УчетнаяПолитикаОрганизацийМУСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Ссылка ИЗ Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период КАК Период,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Организация В (ВЫБРАТЬ Ссылка ИЗ Организации)
	|	И ОтражениеДокументов.Период <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВРучную)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//Есть документ закрытия счетов доходов/расходов
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеСчетов.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ЗакрытиеСчетов
	|ГДЕ
	|	ЗакрытиеСчетов.Проведен
	|	И ЗакрытиеСчетов.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов)
	|	И (ЗакрытиеСчетов.Организация В(&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И ЗакрытиеСчетов.Дата МЕЖДУ &НачалоПериода И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//Есть документ пересчета в валюту представления
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &ДатаОкончания
	|	И ДанныеДокумента.Проведен
	|	И (ДанныеДокумента.Организация В(&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И ДанныеДокумента.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления)
	|	И Константы.ВалютаФункциональная <> Константы.ВалютаПредставления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(Документ.РегламентнаяОперацияМеждународныйУчет.ПустаяСсылка)
	|ИЗ Константы
	|ГДЕ
	|	ВалютаФункциональная = ВалютаПредставления
	|;");
	
	ДатаОкончания = ?(ЗначениеЗаполнено(ПараметрыРасчета.Период), КонецМесяца(ПараметрыРасчета.Период), Дата(3999, 1, 1));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(ПараметрыРасчета.Период), ПараметрыРасчета.Период, Дата(1980, 1, 1)));
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ВсегоНеПересчитано = Документы.РегламентнаяОперацияМеждународныйУчет.НепересчитаноВВалютуПредставления(
							ПараметрыРасчета.СписокОрганизаций,
							КонецМесяца(ПараметрыРасчета.Период),
							Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[1].Пустой() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Результат[3].Пустой() И Результат[4].Пустой() И НЕ Результат[5].Пустой() И ВсегоНеПересчитано = 0 Тогда
		Состояние =  Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции
//-- НЕ УТКА

Функция СостояниеРасчетКурсовыхРазницРегл(ПараметрыРасчета, ПредыдущиеЭтапы)

	СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца;
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат СостояниеЭтапа.НеТребуется;
	ИначеЕсли ПредыдущиеЭтапы.РеглУчет = СостояниеЭтапа.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.ДолиСписанияКосвенныхРасходов = СостояниеЭтапа.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.РезервыПоДолгам = СостояниеЭтапа.НеВыполнено
	Тогда
		Возврат СостояниеЭтапа.НеВыполнено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ втКурсы
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату,) КАК КурсыВалютСрезПоследних
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Валюта,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК ОстатокРегл
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ГраницаОстатков,
	|		Счет.Валютный И НЕ Счет.ИсключитьИзПереоценкиПоПлануСчетов,
	|		,
	|		Организация В (&СписокОрганизаций)
	|	) КАК ХозрасчетныйОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втОстатки.Счет,
	|	втОстатки.Организация,
	|	втОстатки.Подразделение,
	|	втОстатки.Счет.ВидыСубконто КАК ВидыСубконтоСчета,
	|	втОстатки.Счет.Валютный КАК СчетВалютный,
	|	втОстатки.Счет.НалоговыйУчет КАК НалоговыйУчет,
	|	втОстатки.Субконто1,
	|	втОстатки.Субконто2,
	|	втОстатки.Субконто3,
	|	втОстатки.Валюта,
	|	втОстатки.ВалютнаяСуммаОстаток,
	|	ВЫРАЗИТЬ(втОстатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ЧИСЛО(15,2)) КАК ОстатокПоКурсу,
	|	втОстатки.СуммаОстаток,
	|	втОстатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность - втОстатки.СуммаОстаток КАК АбсолютнаяРазница,
	|	ВЫРАЗИТЬ(втОстатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ЧИСЛО(15,2)) - втОстатки.СуммаОстаток КАК КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА втОстатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность = втОстатки.СуммаОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Переоценен
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ГраницаОстатков,
	|		Счет.Валютный И НЕ Счет.ИсключитьИзПереоценкиПоПлануСчетов,
	|		,
	|		Организация В (&СписокОрганизаций)
	|	) КАК втОстатки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсы КАК втКурсы
	|	ПО втОстатки.Валюта = втКурсы.Валюта
	|ГДЕ
	|	ВЫРАЗИТЬ(втОстатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ЧИСЛО(15,2)) <> втОстатки.СуммаОстаток
	|
	|УПОРЯДОЧИТЬ ПО
	|	АбсолютнаяРазница УБЫВ
	|");
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НаДату", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецМесяца(ПараметрыРасчета.Период),ВидГраницы.Включая));
	НеПереоценныйСчет = Запрос.Выполнить().Выбрать();
	ЕстьНеПреоцененныеСчета = НеПереоценныйСчет.Следующий();
	Если ЕстьНеПреоцененныеСчета Тогда // 0.005
		ЕстьНеПреоцененныеСчета = Макс(НеПереоценныйСчет.АбсолютнаяРазница, -НеПереоценныйСчет.АбсолютнаяРазница) >= 0.01;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втОстатки.Счет
	|ИЗ
	|	втОстатки КАК втОстатки
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	ЕстьВалютныеОстатки = Запрос.Выполнить().Выбрать().Следующий();
	
	Если НЕ ЕстьВалютныеОстатки Тогда
		Состояние = СостояниеЭтапа.НеТребуется;
	ИначеЕсли ЕстьНеПреоцененныеСчета Тогда
		Состояние = СостояниеЭтапа.НеВыполнено;
	Иначе
		Состояние = СостояниеЭтапа.ВыполненоУспешно;
	КонецЕсли;
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНачислениеОО(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Начисления.СуммаОборот
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|		&ДатаНачала, 
	|		&ГраницаДатаОкончания,
	|		,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК Начисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(
	|		&ДатаНачала,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК НастройкиРасчета
	|	ПО Начисления.Организация = НастройкиРасчета.Организация
	|ГДЕ
	|	НастройкиРасчета.ФормироватьРезервОтпусковБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОценочныхОбязательствПоОтпускам КАК ДокументНачисленияОО
	|		ПО ДокументНачисленияОО.Организация = Организации.Ссылка
	|			И ДокументНачисленияОО.ПериодРегистрации = &ДатаНачала
	|			И ДокументНачисленияОО.Проведен
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|		&ДатаНачала,
	|		&ГраницаДатаОкончания,
	|		,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК Начисления
	|	ПО Начисления.Организация = Организации.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(
	|		&ДатаНачала,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК НастройкиРасчета
	|	ПО НастройкиРасчета.Организация = Организации.Ссылка
	|ГДЕ
	|	(Организации.Ссылка В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И ДокументНачисленияОО.Ссылка ЕСТЬ NULL
	|	И НЕ Начисления.Организация ЕСТЬ NULL
	|	И НастройкиРасчета.ФормироватьРезервОтпусковБУ");
	
	Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[1].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтражениеЗарплаты(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.СуммаОборот
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&ДатаНачала, &ГраницаДатаОкончания, , Организация В (&СписокОрганизаций)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеЗарплатыВФинансовомУчете КАК ОтражениеЗарплатыВФинансовомУчете
	|		ПО (ОтражениеЗарплатыВФинансовомУчете.Организация = Организации.Ссылка)
	|			И (ОтражениеЗарплатыВФинансовомУчете.Проведен
	|				И ОтражениеЗарплатыВФинансовомУчете.ПериодРегистрации = &ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&ДатаНачала, &ГраницаДатаОкончания, , Организация В (&СписокОрганизаций)) КАК Начисления
	|			ПО (Начисления.Организация = Организации.Ссылка)
	|
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|	И ОтражениеЗарплатыВФинансовомУчете.Ссылка ЕСТЬ NULL
	|	И НЕ Начисления.Организация ЕСТЬ NULL ");
	
	Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[1].Пустой()
		И ((ПредыдущиеЭтапы.Свойство("НачислениеОО") И ПредыдущиеЭтапы.НачислениеОО <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено) Или Не ПредыдущиеЭтапы.Свойство("НачислениеОО")) Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРасчетТорговогоСбора(ПараметрыРасчета)
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Если Месяц(ПараметрыРасчета.Период)%3 = 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Ссылка В (&СписокОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1
		|ИЗ
		|	РегистрСведений.ПараметрыТорговыхТочек.СрезПоследних(
		|			&ОкончаниеПериода,
		|			Организация В(&СписокОрганизаций)) КАК ПараметрыТорговыхТочекСрезПоследних
		|ГДЕ
		|	ПараметрыТорговыхТочекСрезПоследних.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийТорговыеТочки.СнятиеСУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1
		|ИЗ
		|	РегистрСведений.ПараметрыТорговыхТочек КАК ПараметрыТорговыхТочек
		|ГДЕ
		|	ПараметрыТорговыхТочек.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ПараметрыТорговыхТочек.Организация В(&СписокОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|		ПО (РегламентнаяОперация.Организация = Организации.Ссылка)
		|			И (РегламентнаяОперация.Проведен)
		|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетТорговогоСбора))
		|ГДЕ
		|	РегламентнаяОперация.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|		ПО (РегламентнаяОперация.Организация = Организации.Ссылка)
		|			И (НЕ РегламентнаяОперация.Проведен)
		|			И (НЕ РегламентнаяОперация.ПометкаУдаления)
		|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетТорговогоСбора))
		|ГДЕ
		|	РегламентнаяОперация.Ссылка ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("НачалоПериода",    НачалоКвартала(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапросов[3].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
		ИначеЕсли РезультатыЗапросов[2].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		ИначеЕсли РезультатыЗапросов[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеФормированиеКУДиР(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если УчетнаяПолитика.ПрименяетсяУСН(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период) 
		И НачалоМесяца(ПараметрыРасчета.Период) >= Константы.ДатаНачалаВеденияРеглУчета.Получить() Тогда
		
		НачалоРасчетаОперацийПоУСН = УчетУСНСервер.НачалоРасчетаОперацийПоУСН(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
		
		Если НачалоРасчетаОперацийПоУСН.НачалоРасчетаПризнаниеРасходовПриУСН <= КонецМесяца(ПараметрыРасчета.Период)
			ИЛИ НачалоРасчетаОперацийПоУСН.НачалоРасчетаСторноДоходовКУДиРПоЕНВД <= КонецМесяца(ПараметрыРасчета.Период)
			ИЛИ КонецМесяца(ПараметрыРасчета.Период) = КонецКвартала(ПараметрыРасчета.Период)
			И НачалоРасчетаОперацийПоУСН.НачалоРасчетаНалогаУСН <= КонецМесяца(ПараметрыРасчета.Период) Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		КонецЕсли;
		
	Иначе
		
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеПризнаниеВНУЛизинговыхПлатежей(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца;
	
	Если НачалоМесяца(ПараметрыРасчета.Период) < Константы.ДатаНачалаВеденияРеглУчета.Получить() 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг") Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоМесяца, Организация В (&СписокОрганизаций)) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО Т.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|			И СпрУчетнаяПолитика.СхемаУчетаСтоимостиОСвНУ = ЗНАЧЕНИЕ(Перечисление.СхемыУчетаСтоимостиОСвНУ.СФормированиемВР)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. НеВыполнено
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецМесяца
	|	И Задания.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеВНУЛизинговыхПлатежей)
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ВыполненоУспешно
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Организации.Ссылка)
	|			И (РегламентнаяОперация.Проведен)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И (РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Организации.Ссылка) = СУММА(ВЫБОР КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. ВыполненоСОшибками
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Организации.Ссылка)
	|			И (НЕ РегламентнаяОперация.Проведен)
	|			И (НЕ РегламентнаяОперация.ПометкаУдаления)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И (РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. НеТребуется
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Организации
	|");
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	Если НЕ РезультатыЗапросов[1].Пустой() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли НЕ РезультатыЗапросов[2].Пустой() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	ИначеЕсли НЕ РезультатыЗапросов[3].Пустой() Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	Иначе
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // НЕ_УТ
//-- НЕ УТ
#КонецОбласти // Состояния этапов

#КонецОбласти

#КонецЕсли
