
&НаКлиенте
Перем ПредыдущийЭтап;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ОбменДаннымиУТ.ВЭтомУзлеДоступноВыполнениеОперацийЗакрытияМесяца(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ПериодРегистрации", Объект.ПериодРегистрации);
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Параметры.Свойство("Организация", Объект.Организация);
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаАмортизация.Видимость = Ложь;
		Элементы.ГруппаПогашениеСтоимостиТМЦОбщая.Видимость = Ложь;
		Элементы.ГруппаНалогНаИмуществоОбщая.Видимость = Ложь;
		Элементы.ГруппаТранспортныйНалогОбщая.Видимость = Ложь;
		Элементы.ГруппаЗемельныйНалогОбщая.Видимость = Ложь;
		Элементы.ГруппаТорговыйСбор.Видимость = Ложь;
		Элементы.ГруппаДолиСписанияКосвенныхРасходовОбщая.Видимость = Ложь;
		Элементы.ГруппаРегламентныеОперацииРеглУчета.Видимость = Ложь;
		Элементы.ГруппаФинансовыйРезультатОбщая.Видимость = Ложь;
		Элементы.ГруппаУСН.Видимость = Ложь;
		Элементы.ГруппаТорговыйСборОбщая.Видимость = Ложь;
		//++ НЕ УТ
		Элементы.ГруппаПризнаниеВНУЛизинговыхПлатежейОбщая.Видимость = Ложь;
		//-- НЕ УТ
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Элементы.ГруппаПроизводственныеЗатраты.Видимость = Ложь;
		Элементы.ГруппаРасходыНаПродукциюОбщая.Видимость = Ложь;
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукциюОбщая.Видимость = Ложь;
		Элементы.ГруппаНастройкаПоказателейРаспределенияРасходовОбщая.Видимость = Ложь;
		Элементы.ГруппаСписаниеЗатратНаВыпускОбщая.Видимость = Ложь;
		Элементы.ГруппаПроизводствоБезЗаказовОбщая.Видимость = Ложь;
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукцию22Общая.Видимость = Ложь;
		Элементы.ГруппаПризнаниеВНУЛизинговыхПлатежейОбщая.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьМеждународныйУчет = Ложь;
	//++ НЕ УТ
	ИспользоватьМеждународныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет");
	//-- НЕ УТ
	Элементы.ГруппаМеждународныйУчетОбщая.Видимость = ИспользоватьМеждународныйУчет;
	Элементы.ГруппаАмортизацияОСиНМАМеждународныйОбщая.Видимость = ИспользоватьМеждународныйУчет;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Элементы.ГруппаНачислениеОООбщая.Видимость = Ложь;
		Элементы.ГруппаОтражениеЗарплатыОбщая.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.ИсправлениеОтрицательныхОстатков.Заголовок = НСтр("ru = 'Исправление отрицательных остатков товаров организации'");
		Элементы.ПереоценкаДенежныхСредств.Заголовок = НСтр("ru = 'Переоценка денежных средств'");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.СписаниеЗатратНаВыпуск.Заголовок = НСтр("ru = 'Списание затрат на выпуск'");
		Элементы.ГруппаПроизводствоБезЗаказовОбщая.Видимость = Ложь;
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукцию22Общая.Видимость = Ложь;
	КонецЕсли;
	
	//++ НЕ УТКА
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	Если НастройкиПроизводства.ИспользуетсяПроизводство21 И НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		// если используются две методики, то все пункты отображаются с номером версии
		Элементы.ПроизводствоБезЗаказов.Заголовок = НСтр("ru = 'Оформить производство без заказов (2.2)'");
		Элементы.РаспределениеМатериаловРаботНаПродукцию22.Заголовок = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции (2.2)'");
		
		Элементы.СписаниеЗатратНаВыпуск.Заголовок = НСтр("ru = 'Списать затраты на выпуск без распоряжений (2.1)'");
		Элементы.РаспределениеМатериаловРаботНаПродукцию.Заголовок = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции (2.1)'");
		
	ИначеЕсли НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		// если только новое производство, то пункты старого производства отображаются с номерами версий
		Элементы.СписаниеЗатратНаВыпуск.Заголовок = НСтр("ru = 'Списать затраты на выпуск без распоряжений (2.1)'");
		Элементы.РаспределениеМатериаловРаботНаПродукцию.Заголовок = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции (2.1)'");
	Иначе
		// если только старое производство, то пункты нового производства отображаются с номерами версий
		Элементы.ПроизводствоБезЗаказов.Заголовок = НСтр("ru = 'Оформить производство без заказов (2.2)'");
		Элементы.РаспределениеМатериаловРаботНаПродукцию22.Заголовок = НСтр("ru = 'Распределение материалов и работ на себестоимость продукции (2.2)'");
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Элементы.ФормаОтчетСверкаДанныхПартионногоУчетаИСебестоимостиОткрыть.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	ВидПериодаРегистрации = Перечисления.ДоступныеПериодыОтчета.Месяц;
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ОшибкиРасчета = Новый Структура;
	РезультатыРасчетов = Новый Структура;
	
	НачалоВеденияРеглУчета				 = Дата(1,1,1);
	//++ НЕ УТ
	НачалоВеденияРеглУчета				 = Константы.ДатаНачалаВеденияРеглУчета.Получить();
	//-- НЕ УТ
	
	УчитыватьПрочиеДоходыИРасходы		 = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	ФормироватьФинансовыйРезультат		 = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	БазоваяВерсия						 = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	ИспользоватьНесколькоВалют			 = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьПодарочныеСертификаты	 = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	РаспределятьНДС						 = ПолучитьФункциональнуюОпцию("РаспределятьНДС");
	ИспользоватьНДС0					 = ПолучитьФункциональнуюОпцию("ИспользоватьНДС0");
	ИспользоватьКредитыДепозитыЗаймы	 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьНачислениеЗарплаты		 = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	ИспользоватьМеждународныйУчет		 = Ложь;
	//++ НЕ УТКА
	ИспользоватьМеждународныйУчет		 = ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет");
	//-- НЕ УТКА
		
	ЗаполнитьСписокВыбораОрганизации();
	СкрытьУказанныеЭтапы(ОтключенныеЭтапы());
	
	Этапы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ЭтапыКРасчету(), ОтключенныеЭтапы());
	ЭтапыКРасчету.ЗагрузитьЗначения(Этапы);
	СкрытьОтобразитьДлительныеОперации(Ложь);
	
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Истина;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ФормаПоказатьСкрытьПоясненияКЭтапам","Заголовок",НСтр("ru = 'Скрыть пояснения к этапам'"));
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Видимость = НЕ РазделениеВключено;
	
	ЕстьПраво = Ложь;
	//++ НЕ УТ
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации);
	//-- НЕ УТ
	Элементы.ФормаОткрытьЗаданияКПогашениюСтоимостиТМЦ.Видимость = ЕстьПраво;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	ПредыдущийЭтап = "";
	Если Не СтатусыОбновлены Тогда
		ВывестиСостоянияЭтапов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Настройки.Вставить("Объект.Организация", Параметры.Организация);
	КонецЕсли;
	Если Параметры.Свойство("ПериодРегистрации") И ЗначениеЗаполнено(Параметры.ПериодРегистрации) Тогда
		Настройки.Вставить("Объект.ПериодРегистрации", Параметры.ПериодРегистрации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если Настройки.Получить("ПериодРегистрации") <> Неопределено Тогда
		Объект.ПериодРегистрации = Настройки["ПериодРегистрации"];
	КонецЕсли;
	Если Настройки.Получить("Организация") <> Неопределено Тогда
		Объект.Организация = Настройки["Организация"];
	КонецЕсли;
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ВывестиСостоянияЭтапов();
	Если Настройки.Получить("СкрыватьЭтапыСоСтатусомНеТребуется") <> Неопределено Тогда
		СкрыватьЭтапыСоСтатусомНеТребуется = Настройки["СкрыватьЭтапыСоСтатусомНеТребуется"];
		Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Пометка = СкрыватьЭтапыСоСтатусомНеТребуется;
		СкрыватьЭтапыСоСтатусомНеТребуетсяСервер();
	КонецЕсли;
	Если Настройки.Получить("ВыводитьПоясненияКЭтапам") <> Неопределено Тогда
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Не Настройки["ВыводитьПоясненияКЭтапам"];
	КонецЕсли;
	Если Настройки.Получить("РезультатыРасчетов") <> Неопределено Тогда
		РезультатыРасчетов = Настройки.Получить("РезультатыРасчетов");
	Иначе
		РезультатыРасчетов = Новый Структура;
	КонецЕсли;
	СтатусыОбновлены = Истина;
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуЗапрета()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаРасчета = УниверсальныеМеханизмыПартийИСебестоимости.СхемаРасчетаПартий(
		КонецМесяца(Объект.ПериодРегистрации),
		Объект.Организация);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СхемаРасчета.Количество() = 0 Тогда
		УстановленаДатаЗапрета = Ложь;
	Иначе
		СебестоимостьНеактуальнаСДаты = СхемаРасчета[0].Дата;
		
		ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
		СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
		СтрокаШаблона.Дата = КонецМесяца(СебестоимостьНеактуальнаСДаты);
		СтрокаШаблона.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.РегламентныеОперации;
		
		Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных) Тогда
			УстановленаДатаЗапрета = Истина;
			Элементы.Статус.ЦветТекста = ЦветаСтиля.ЦветТекстаПредупреждение;
			Статус = НСтр("ru = 'Себестоимость неактуальна на дату %ДатаРасчета%. 
			|В этом периоде установлена дата запрета редактирования.
			|Необходимо разрешить редактирование данного периода.'");
			Статус = СтрЗаменить(Статус, "%ДатаРасчета%", Формат(СебестоимостьНеактуальнаСДаты, "ДФ=dd.MM.yyyy"));
		Иначе
			УстановленаДатаЗапрета = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаЭтапы.Доступность = Не УстановленаДатаЗапрета;
	Элементы.ГруппаВыполнениеОпераций.Доступность = Не УстановленаДатаЗапрета;
	Элементы.ФормаВыполнитьЗакрытие.Доступность = Не УстановленаДатаЗапрета;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормыВыбораПериода = Новый Структура("Значение, РежимВыбораПериода", Объект.ПериодРегистрации, "МЕСЯЦ");
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормыВыбораПериода, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,,, 
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
		ПоказатьСвязанныеОрганизации();
		ОтобразитьЭтапы(ЭтапыКРасчету);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
		СтандартнаяОбработка,
		Объект.ПериодРегистрации,
		ПредставлениеПериодаРегистрации);
	ПоказатьСвязанныеОрганизации();
	ОтобразитьЭтапы(ЭтапыКРасчету);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиВыполнятьОперацииПоЗакрытиюМесяцаПриИзменении(Элемент)
	Если АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца Тогда
		Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
			ПериодРегистрацииРегламентный = Объект.ПериодРегистрации;
			ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
		КонецЕсли;
		Если РазделениеВключено Тогда
			РасписаниеРегламентногоЗадания = ПредопределенноеРасписание();
		КонецЕсли;
	КонецЕсли;
	СохранитьРеквизитыРегламентногоЗадания();
КонецПроцедуры

// Выполнение задания каждый день в 22:00.
&НаКлиенте
Функция ПредопределенноеРасписание()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы            = Месяцы;
	Расписание.ДниНедели         = ДниНедели;
	Расписание.ВремяНачала       = Дата('00010101220000'); // 22:00
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
		СтандартнаяОбработка,
		ПериодРегистрацииРегламентный,
		ПредставлениеПериодРегистрацииРегламентный);
	СохранитьРеквизитыРегламентногоЗадания();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
		СтандартнаяОбработка,
		ПериодРегистрацииРегламентный,
		ЭтаФорма,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		ПериодРегистрацииРегламентный = ВыбранныйПериод;
		
		ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

#Область ОбработчикиСобытийЭтапов

#Область ДействиеВыполнитьЭтап

&НаКлиенте
Процедура ИсправлениеОтрицательныхОстатковНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ИсправлениеОтрицательныхОстатков")
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеМатериаловРаботНаПродукцию22Нажатие(Элемент)
	//++ НЕ УТКА
	ВыполнитьЭтапыРасчета("РаспределениеМатериаловРаботНаПродукцию22");
	//-- НЕ УТКА
	Возврат; // В УТ, КА данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеМатериаловРаботНаПродукциюНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("РаспределениеМатериаловРаботНаПродукцию");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоказателейРаспределенияРасходовНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("НастройкаПоказателейРаспределенияРасходов");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРБПНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РаспределениеРБП");
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоБезЗаказовНажатие(Элемент)
	//++ НЕ УТКА
	ВыполнитьЭтапыРасчета("ПроизводствоБезЗаказов");
	//-- НЕ УТКА
	Возврат; // В УТ, КА данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура СписаниеЗатратНаВыпускНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("СписаниеЗатратНаВыпуск");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ПередачаТоваровНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПередачаТоваров")
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыКомитентамОСписанииНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ОтчетыКомитентамОСписании")
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПоКомиссииИнтеркампаниНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ОтчетыПоКомиссииИнтеркампани")
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоРасчетуСПартнерамиНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РасчетыСПартнерами", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоПартиямТоваровНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПартииТоваров", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияОСиНМАреглНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("АмортизацияОСиНМА");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПогашениеСтоимостиТМЦНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ПогашениеСтоимостиТМЦ");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияОСиНМАМеждународныйНажатие(Элемент)
	//++ НЕ УТКА
	ВыполнитьЭтапыРасчета("АмортизацияОСиНМАМеждународный");
	//-- НЕ УТКА
	Возврат; // В УТ и КА данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПризнаниеВНУЛизинговыхПлатежейНажатие(Элемент)
	
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ПризнаниеВНУЛизинговыхПлатежей");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачислениеООНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("НачислениеОО");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтражениеЗарплатыНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ОтражениеЗарплаты");
	//-- НЕ УТ
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачисленияПоКредитамДепозитамЗаймамНажатие(Элемент)
	ВыполнитьЭтапыРасчета("НачисленияПоКредитамДепозитам");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНастройкаРаспределенияРасходовНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("РаспределениеРасходов", Истина);
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетДолейСписанияКосвенныхРасходовНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("СписаниеКосвенныхРасходов", Истина);
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеРасходовНаПродукциюАвтоматическиНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("РасходыНаПродукцию", Истина);
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеНДСНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РаспределениеНДС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетСебестоимостиНажатие(Элемент)
	ВыполнитьЭтапыРасчета("Себестоимость", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПереоценкаДенежныхСредствНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПереоценкаДенежныхСредств", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАннулированиеПодарочныхСертификатовНажатие(Элемент)
	ВыполнитьЭтапыРасчета("АннулированиеПодарочныхСертификатов");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РаспределениеДоходовРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтражениеДокументовВРеглУчетеНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РеглУчет");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСписаниеКосвенныхРасходовНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("СписаниеКосвенныхРасходов");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеРезервовПоСомнительнымДолгамНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("РезервыПоДолгам");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеФинансовогоРезультатаНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ФинансовыйРезультат");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетНалогаНаИмуществоНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("НалогНаИмущество");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетТранспортногоНалогаНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ТранспортныйНалог");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетЗемельногоНалогаНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ЗемельныйНалог");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМеждународныйУчетНажатие(Элемент)
	//++ НЕ УТКА
	ВыполнитьЭтапыРасчета("МеждународныйУчет");
	//-- НЕ УТКА
	Возврат; // В УТ и КА обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетКурсовыхРазницРеглНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("РасчетКурсовыхРазницРегл");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеТорговыйСборНажатие(Элемент)
	//++ НЕ УТ
	ВыполнитьЭтапыРасчета("ТорговыйСбор");
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйСборНажатие(Элемент)
	//++ НЕ УТ
	ВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ТорговыйСбор", ВремяРасчета);
	Если ЗначениеЗаполнено(ВремяРасчета) Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, СобытиеЖурналаРегистрации",
			ВремяРасчета.Начало, ВремяРасчета.Конец, "РегламентнаяОперация");
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Торговый сбор");
	Иначе
		ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетТорговогоСбора"));
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовНажатие(Элемент)
	
	//++ НЕ УТ
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения"));
	
	
	Форма = ПолучитьФорму("Документ.РаспределениеПрочихЗатрат.Форма.ФормаРабочееМесто",
					ПараметрыФормы,, ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения"));
	Форма.Открыть();
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПоУчетуНДСНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("КонецПериода", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
	
	ОткрытьФорму("Обработка.ПомощникПоУчетуНДС.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаЭтапа

&НаКлиенте
Процедура ПогашениеСтоимостиТМЦНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьФорму("Документ.ПогашениеСтоимостиТМЦВЭксплуатации.ФормаСписка",,,ЭтаФорма);
	//-- НЕ УТ
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияОСиНМАреглНажатие(Элемент)
	//++ НЕ УТ
	Если ОшибкиРасчета.Свойство("АмортизацияОСиНМА") Тогда
		ОтборПоУровню = Новый СписокЗначений;
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["АмортизацияОСиНМА"].НачалоРасчета);
		ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["АмортизацияОСиНМА"].КонецРасчета);
		ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Закрытие месяца.Начисление амортизации ОС и НМА'"));
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
	Иначе
		ТипыДокументов = Новый Массив;
		ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияОС"));
		ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияНМА"));
		Отбор = Новый Структура("Тип", ТипыДокументов);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("ЖурналДокументов.РегламентныеДокументы.Форма.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
		//-- НЕ УТ
	Возврат; // В УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДвиженийПоПартиямТоваровНажатие(Элемент)
	
	ПротоколыРасчета = ПолучитьПротоколыРасчета(Ложь);
	
	Если ЗначениеЗаполнено(ПротоколыРасчета) Тогда
		ПоказатьПротоколыРасчетаПартийИСебестоимости(ПротоколыРасчета);
		Возврат;
	КонецЕсли;
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПартииТоваровВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ПартииТоваров", ПартииТоваровВремяРасчета);
	Если НЕ ЗначениеЗаполнено(ПартииТоваровВремяРасчета) Тогда
		ПартииТоваровВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ПартииТоваровВремяРасчета.Начало);
	ПараметрыФормы.Вставить("ДатаОкончания", ПартииТоваровВремяРасчета.Конец);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Партионный учет.Операции закрытия месяца.'"));
	
	ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Закрытие месяца");
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДвиженийПоРасчетуСПартнерамиНажатие(Элемент)
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["РасчетыСПартнерами"].НачалоРасчета);
	ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["РасчетыСПартнерами"].КонецРасчета);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("Расчеты с партнерами.Операции закрытия месяца.");
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("ОтложенноеПроведениеПоРасчетам");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ПереоценкаДенежныхСредствНажатие(Элемент)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.ПереоценкаВалютныхСредств.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеПодарочныхСертификатовНажатие(Элемент)
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["АннулированиеПодарочныхСертификатов"].НачалоРасчета);
	ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["АннулированиеПодарочныхСертификатов"].КонецРасчета);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("Аннулирование подарочных сертификатов.Операции закрытия месяца.");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияОСиНМАМеждународныйНажатие(Элемент)
	//++ НЕ УТКА
	Если ОшибкиРасчета.Свойство("АмортизацияОСиНМАМеждународный") Тогда
		ОтборПоУровню = Новый СписокЗначений;
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["АмортизацияОСиНМАМеждународный"].НачалоРасчета);
		ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["АмортизацияОСиНМАМеждународный"].КонецРасчета);
		ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("Закрытие месяца.Начисление амортизации ОС и НМА (международный учет)");
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
	Иначе
		ТипыДокументов = Новый Массив;
		ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияОСМеждународныйУчет"));
		ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияНМАМеждународныйУчет"));
		Отбор = Новый Структура("Тип", ТипыДокументов);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("ЖурналДокументов.РегламентныеДокументыМеждународныйУчет.Форма.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	//-- НЕ УТКА
	Возврат; // В УТ11 и КА обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ПризнаниеВНУЛизинговыхПлатежейНажатие(Элемент)
	
	//++ НЕ УТ
	ВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ПризнаниеВНУЛизинговыхПлатежей", ВремяРасчета);
	Если ОшибкиРасчета.Свойство("ПризнаниеВНУЛизинговыхПлатежей") 
		И ЗначениеЗаполнено(ВремяРасчета) Тогда
		
		ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, СобытиеЖурналаРегистрации",
			ВремяРасчета.Начало, ВремяРасчета.Конец, "РегламентнаяОперация");
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Признание в НУ лизинговых платежей");
	Иначе
		ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей"));
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // В УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетДолейСписанияКосвенныхРасходовНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов"));
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовНаПродукциюАвтоматическиНажатие(Элемент)
	//++ НЕ УТ
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	ОткрытьФорму("Документ.РаспределениеПрочихЗатрат.Форма.ФормаРабочееМесто", ПараметрыФормы, ,ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ОшибкаРаспределения"));
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНДСНажатие(Элемент)
	
	ДокументыРаспределения = ПолучитьДокументыРаспределенияНДС(Объект.Организация, Объект.ПериодРегистрации);
	
	Если ДокументыРаспределения.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ДокументыРаспределения[0]); 
	Иначе
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("Документ.РаспределениеНДС.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСебестоимостиНажатие(Элемент)
	
	ПротоколыРасчета = ПолучитьПротоколыРасчета(Истина);
	
	Если ЗначениеЗаполнено(ПротоколыРасчета) Тогда
		ПоказатьПротоколыРасчетаПартийИСебестоимости(ПротоколыРасчета);
		Возврат;
	КонецЕсли;
	
	ПартииТоваровВремяРасчета = Неопределено;
	СебестоимостьВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("Себестоимость", СебестоимостьВремяРасчета);
	РезультатыРасчетов.Свойство("ПартииТоваров", ПартииТоваровВремяРасчета);
	Если НЕ ЗначениеЗаполнено(СебестоимостьВремяРасчета) Тогда
		СебестоимостьВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПартииТоваровВремяРасчета) Тогда
		ПартииТоваровВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
 	Если СебестоимостьВремяРасчета.Конец >= ПартииТоваровВремяРасчета.Конец Тогда
		Начало = СебестоимостьВремяРасчета.Начало;
		Конец = СебестоимостьВремяРасчета.Конец;
	Иначе
		Начало = ПартииТоваровВремяРасчета.Начало;
		Конец = ПартииТоваровВремяРасчета.Конец;
	КонецЕсли;
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, Уровень", Начало, Конец + 600, ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Партионный учет.Операции закрытия месяца.'"));
	
	ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Расчет себестоимости");
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент)
	ПараметрыФормы = Новый Структура("ПериодРегистрации, Организация, НеПомеченныеНаУдаление",
		Объект.ПериодРегистрации, Объект.Организация, Истина);
	ОткрытьФорму("Документ.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.Форма.ФормаСписка", ПараметрыФормы, , ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено"));
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДокументовВРеглУчетеНажатие(Элемент)
	
	Если ОшибкиРасчета.Свойство("РеглУчет") Тогда
		
		ОтборПоУровню = Новый СписокЗначений;
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["РеглУчет"].НачалоРасчета);
		ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["РеглУчет"].КонецРасчета);
		ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Формирование записей книг покупок и продаж.'"));
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Отражение в регламентированном учете.'"));
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
		
	ИначеЕсли ИспользоватьРеглУчет Тогда
		//++ НЕ УТ
		ПараметрыФормы = Новый Структура("ДатаОкончанияПериода, Организация", 
			КонецМесяца(Объект.ПериодРегистрации), Объект.Организация);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройкиОтраженияДокументовВРеглУчете", ПараметрыФормы);
		//-- НЕ УТ
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеКосвенныхРасходовНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов"));
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеРезервовПоСомнительнымДолгамНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам"));
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетКурсовыхРазницРеглНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ПереоценкаВалютныхСредств"));
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеФинансовогоРезультатаНажатие(Элемент)
	//++ НЕ УТ
	Если ОшибкиРасчета.Свойство("ФинансовыйРезультат") Тогда
		ОтборПоУровню = Новый СписокЗначений;
		ОтборПоУровню.Добавить("Ошибка", "Ошибка");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["ФинансовыйРезультат"].НачалоРасчета);
		ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["ФинансовыйРезультат"].КонецРасчета);
		ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Расчет налога на прибыль'"));
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Формирование финансового результата'"));
		ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru = 'Закрытие года'"));
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
	Иначе
		МассивОпераций = Новый Массив();
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата"));
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль"));
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ЗакрытиеГода"));
		ОткрытьСписокРегламентныхОперацийЗаМесяц(МассивОпераций);
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетИмущественныхНалоговНажатие(Элемент)
	//++ НЕ УТ
	ВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("НалогНаИмущество", ВремяРасчета);
	Если ЗначениеЗаполнено(ВремяРасчета) Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, СобытиеЖурналаРегистрации",
			ВремяРасчета.Начало, ВремяРасчета.Конец, "РегламентнаяОперация");
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Налог на имущество");
	Иначе
		ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество"));
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетТранспортногоНалогаНажатие(Элемент)
	//++ НЕ УТ
	ВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ТранспортныйНалог", ВремяРасчета);
	Если ЗначениеЗаполнено(ВремяРасчета) Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, СобытиеЖурналаРегистрации",
			ВремяРасчета.Начало, ВремяРасчета.Конец, "РегламентнаяОперация");
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Транспортный налог");
	Иначе
		ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетТранспортногоНалога"));
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗемельногоНалогаНажатие(Элемент)
	//++ НЕ УТ
	ВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ЗемельныйНалог", ВремяРасчета);
	Если ЗначениеЗаполнено(ВремяРасчета) Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, СобытиеЖурналаРегистрации",
			ВремяРасчета.Начало, ВремяРасчета.Конец, "РегламентнаяОперация");
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Земельный налог");
	Иначе
		ОткрытьСписокРегламентныхОперацийЗаМесяц(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетЗемельногоНалога"));
	КонецЕсли;
	//-- НЕ УТ
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура НачислениеООНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьФорму("Документ.НачислениеОценочныхОбязательствПоОтпускам.ФормаСписка",,,ЭтаФорма);
	//-- НЕ УТ
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеЗарплатыНажатие(Элемент)
	//++ НЕ УТ
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете.ФормаСписка",,,ЭтаФорма);
	//-- НЕ УТ
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура МеждународныйУчетНажатие(Элемент)
	
	//++ НЕ УТКА
	
	ПараметрыРасчета = Новый Структура("РучнойЗапуск", Истина);
	МеждународныйУчет(Ложь, ПараметрыРасчета);
	
	//-- НЕ УТКА
	
	Возврат; // Для УТ и КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеКУДиРНажатие(Элемент)
	
	//++ НЕ УТ
	ПараметрыРасчета = Новый Структура("РучнойЗапуск", Истина);
	ФормированиеКУДиР(Ложь, ПараметрыРасчета);
	//-- НЕ УТ
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти // РасшифровкаЭтапа

#КонецОбласти // ОбработчикиСобытийЭтапов

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьВсе(Команда)
	ГраницаРасчета = 0;
	ВыполнитьЭтапыРасчета(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРегламентногоЗадания(Команда)
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояния(Команда)
	ВывестиСостоянияЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПояснения(Команда)
	ВыводитьПоясненияКЭтапам = Не ВыводитьПоясненияКЭтапам;
	Если ВыводитьПоясненияКЭтапам Тогда
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Ложь;
	Иначе
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Истина;
	КонецЕсли;
	УстановитьВидимостьПояснений();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
	ОтменитьФоновоеЗадание();
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьЭтапыСоСтатусомНеТребуется(Команда)
	СкрыватьЭтапыСоСтатусомНеТребуется = Не СкрыватьЭтапыСоСтатусомНеТребуется;
	Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Пометка = СкрыватьЭтапыСоСтатусомНеТребуется;
	СкрыватьЭтапыСоСтатусомНеТребуетсяСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСверкаДанныхПартионногоУчетаИСебестоимости(Команда)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",
		Объект.Организация);
	ПараметрыОтчета.Вставить("Период",
		Новый СтандартныйПериод(НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации)));
	
	ОткрытьФорму("Отчет.СверкаДанныхПартионногоУчетаИСебестоимости.ФормаОбъекта",
		Новый Структура("Отбор, СформироватьПриОткрытии", ПараметрыОтчета, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуСебестоимости(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЗаданияКРасчетуСебестоимости.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСКлиентами(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСПоставщиками(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКЗакрытиюМесяца(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЗаданияКЗакрытиюМесяца.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКПогашениюСтоимостиТМЦ(Команда)
	
	//++ НЕ УТ
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ФормаСписка", ПараметрыФормы);
	//-- НЕ УТ
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьКартинкуСтатусаЭтапа(Этап, НазваниеЭтапа)
	Если Не ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	ИндексЗначения = Перечисления.СостоянияОперацийЗакрытияМесяца.Индекс(Этап);
	ИмяПеречисления = Метаданные.Перечисления.СостоянияОперацийЗакрытияМесяца.ЗначенияПеречисления[ИндексЗначения].Имя;
	ИмяГруппыДействия = "Действия" + НазваниеЭтапа;
	Элементы["Картинки" + НазваниеЭтапа].ТекущаяСтраница = Элементы[НазваниеЭтапа + ИмяПеречисления];

	Если Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Если Элементы.Найти(ИмяГруппыДействия) <> Неопределено Тогда
			Элементы[ИмяГруппыДействия].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"НеТребуется"];
		КонецЕсли;
		Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
	Иначе
		Если Элементы.Найти(ИмяГруппыДействия) <> Неопределено Тогда
			Элементы[ИмяГруппыДействия].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"Выполнять"];
		КонецЕсли;
		Если ВыводитьПоясненияКЭтапам
			И (Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			ИЛИ Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками) Тогда
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиПодвала()
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность 	= АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.ПредставлениеПериодРегистрацииРегламентный.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.СостояниеАвтоматическогоВыполненияОпераций.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	ОбновитьПредставлениеРасписания();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПояснений()
	Для Каждого Этап Из СостоянияЭтапов Цикл
		СостояниеЭтапа = Этап.Значение;
		Если ВыводитьПоясненияКЭтапам 
			И (СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			   ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками) Тогда
			Элементы["ГруппаПояснение"+Этап.Ключ].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение"+Этап.Ключ].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СкрытьОтобразитьДлительныеОперации(Отобразить)
	Элементы.ГруппаДлительныеОперации.Видимость = Отобразить;
	Если Отобразить Тогда
		Элементы.ЗаголовокРасчетаВФоне.Заголовок = НСтр("ru = 'Выполняется операция'") + ": " + ЭтапРассчитываемыйВФоне;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьДоступностьЭлементов(Доступность)
	Элементы.ГруппаПараметры.Доступность = Доступность;
	Элементы.ФормаВыполнитьЗакрытие.Доступность = Доступность; 
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Доступность = Доступность;
	Элементы.ФормаОбновитьСостоянияОпераций.Доступность = Доступность;
	Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Доступность = Доступность;
	Элементы.ГруппаВыполнениеОпераций.Доступность = Доступность;
	Элементы.ГруппаЭтапы.Доступность = Доступность;
КонецПроцедуры

&НаСервере
Процедура ИзмененияВИнтерфейсеПриРаботеВФоне(ЗаданиеЗапущено)
	СкрытьОтобразитьДлительныеОперации(ЗаданиеЗапущено);	
	УстановитьСнятьДоступностьЭлементов(НЕ ЗаданиеЗапущено);
КонецПроцедуры

&НаСервере
Функция ДоступныеОрганизации(Организация = Неопределено, ДляВыбора = Ложь)
	
	// Для регламентных операций необходим полный список организаций,
	// а для списка выбора поля "Организация" - только доступные данному пользователю.
	СписокОрганизаций = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.Добавить(Организация);
	Иначе
		СписокОрганизаций.ЗагрузитьЗначения(Справочники.Организации.ДоступныеОрганизации(ДляВыбора));
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизации()
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации(, Истина).ВыгрузитьЗначения());
	СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>'"));
КонецПроцедуры

&НаСервере
Процедура СкрыватьЭтапыСоСтатусомНеТребуетсяСервер()
	ПараметрыОформления = Новый Структура("Статус");
	Для Каждого Состояние ИЗ СостоянияЭтапов Цикл
		Если Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			ПараметрыОформления.Статус = Состояние.Значение;
			ОформлениеЭтапа(Состояние.Ключ, ПараметрыОформления);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиСостоянияЭтапов()
	ОтобразитьЭтапы(ЭтапыКРасчету);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭтапВручную(Знач ИмяФормы, Знач ПараметрыФормы, Знач ПараметрыРасчета)
	Обработчик = Новый ОписаниеОповещения("РасчетЭтапаЗавершение", ЭтотОбъект, ПараметрыРасчета);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура РасчетЭтапаЗавершение(Знач РезультатЗакрытия, Знач Параметры) Экспорт
	ОтобразитьЭтапы(ЭтапыКРасчету);
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ОткрытьСписокРегламентныхОперацийЗаМесяц(ТипОперации = Неопределено)
	СтруктураПериод = Новый Структура("ДатаНачала, ДатаОкончания",
		НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	ПараметрыФормы = Новый Структура("Период, ДатаОкончанияПериода",
		СтруктураПериод, КонецМесяца(Объект.ПериодРегистрации));
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипОперации) Тогда
		Отбор.Вставить("ТипОперации", ТипОперации);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаСписка", ПараметрыФормы);
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ОтобразитьЭтапы(ЭтапыКРасчету);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		ДобавитьУсловноеОформление(Этап);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление(НаименованиеЭтапа)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[НаименованиеЭтапа].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭтапа);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыРаспределенияНДС(Организация, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	РаспределениеНДС.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ РаспределениеНДС.ПометкаУдаления
	|	И (РаспределениеНДС.Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям)";
	
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	
	ДокументыРаспределения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ДокументыРаспределения;
	
КонецФункции

#Область ФоновоеЗаданиеРасчета

&НаСервере
Функция ФоновоеЗаданиеЗапустить(КРасчету, ПараметрыЗадания, Отказ)

	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("ЭтапыКРасчету", КРасчету);
	ПараметрыЗадания.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("Отказ", Ложь);
	ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
	
	ЗапускУспешен = ЗакрытиеМесяцаУТВызовСервера.РассчитатьВФоновомЗадании(ПараметрыЗадания);
	
	ИзмененияВИнтерфейсеПриРаботеВФоне(ЗапускУспешен);
	Возврат ЗапускУспешен;
КонецФункции

&НаКлиенте
Функция ФоновоеЗаданиеВыполнено()
	ЗаданиеВыполнено = Ложь;
	ПараметрыОформления = Новый Структура("Статус, ИмяЭтапа");
	Попытка
		Результат = ЗакрытиеМесяцаУТВызовСервера.СостояниеЗаданияЗакрытияМесяца();
		Если Результат.УспешноВыполнено Тогда
			ЗаданиеВыполнено = Истина;
			РезультатРасчета = ПолучитьИзВременногоХранилища(АдресХранилища);
			ОчиститьОшибкиРасчетаЭтапа(РезультатРасчета.РасчитанЭтап);
			Если Не РезультатРасчета.Отказ Тогда
				ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
				ЗагрузитьРезультат(РезультатРасчета.РасчитанЭтап, Результат);
				НомерЭтапа = ОпределитьНомерЭтапа(РезультатРасчета.РасчитанЭтап);
				ПараметрыОформления.ИмяЭтапа = РезультатРасчета.РасчитанЭтап;
				ПараметрыОформления.Статус = СостояниеЭтапа(СостоянияЭтапов, РезультатРасчета.РасчитанЭтап);
				СостоянияЭтапов[РезультатРасчета.РасчитанЭтап] = ПараметрыОформления.Статус;
				ОформлениеЭтапа(РезультатРасчета.РасчитанЭтап, ПараметрыОформления);
				Если ПараметрыОформления.Статус = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено")
					И ОстанавливатьсяПоОшибке 
				Тогда
					// этап не рассчитан, завершаем работу
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОтобразитьЭтапы(ЭтапыКРасчету);
					ГраницаРасчета = 0;
					ТекстСообщения = НСтр("ru = 'Ошибка при расчете этапа'")+ ": " + ЭтапРассчитываемыйВФоне;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат ЗаданиеВыполнено;
				КонецЕсли;
				Если НомерЭтапа < ГраницаРасчета Тогда 
					// продолжаем расчет этапов
					ВыполнитьЭтапыРасчета(ГраницаРасчета, Ложь, НомерЭтапа+1);
				Иначе
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОтобразитьЭтапы(ЭтапыКРасчету);
				КонецЕсли;
			ИначеЕсли НЕ ОстанавливатьсяПоОшибке Тогда
				СведенияРасчета = Новый Структура("НачалоРасчета, КонецРасчета");
				ЗаполнитьЗначенияСвойств(СведенияРасчета, РезультатРасчета);
				ОшибкиРасчета.Вставить(РезультатРасчета.РасчитанЭтап, СведенияРасчета);
				ПараметрыОформления.ИмяЭтапа = РезультатРасчета.РасчитанЭтап;
				ПараметрыОформления.Статус = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено");
				ОформлениеЭтапа(РезультатРасчета.РасчитанЭтап, ПараметрыОформления);
				НомерЭтапа = ОпределитьНомерЭтапа(РезультатРасчета.РасчитанЭтап);
				ЗагрузитьРезультат(РезультатРасчета.РасчитанЭтап, Результат);
				Если НомерЭтапа + 2 <= ЭтапыКРасчету.Количество() Тогда
					СледующийЭтап = ЭтапыКРасчету.Получить(НомерЭтапа+1);
					ВыполнитьЭтапыРасчета(СледующийЭтап.Значение, Ложь, НомерЭтапа + 1);
				Иначе
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОбновитьФорму();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Результат.ЕщеВыполняется Тогда
			ПараметрыОбработчика = Новый Структура("Интервал", 1);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
		ИначеЕсли Результат.ВыполненоСОшибками Тогда
			ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
			ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
			ТекстСобытия = НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСобытия, "Ошибка", Результат.ТекстОшибки,,Истина);
			ПараметрыРасчета = Новый Структура("НачалоРасчета, КонецРасчета, СведенияОбОшибке",);
			ОбновитьФорму();
		КонецЕсли;
	Исключение
		ТекстСобытия = НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСобытия, "Ошибка", ТекстОшибки,,Истина);
		ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
		ОбновитьФорму();
	КонецПопытки;
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаКлиенте
Процедура ОчиститьОшибкиРасчетаЭтапа(Этап)
	Если ОшибкиРасчета.Свойство(Этап) Тогда
		ОшибкиРасчета.Удалить(Этап);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если НЕ ФоновоеЗаданиеВыполнено() Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(РассчиталиЭтап, Результат)
	ВремяРасчета = Новый Структура("Начало, Конец");
	ЗаполнитьЗначенияСвойств(ВремяРасчета, Результат);
	РезультатыРасчетов.Вставить(РассчиталиЭтап, ВремяРасчета);
КонецПроцедуры

&НаСервере
Процедура ОтменитьФоновоеЗадание()
	ЗакрытиеМесяцаУТВызовСервера.ОтменитьВыполнениеЗадания("ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	ВывестиСостоянияЭтапов();
КонецПроцедуры
#КонецОбласти // ФоновоеЗаданиеРасчета

// Метод выполняет анализ массива этапов для определения их состояния.
// Параметры:
//		МассивЭтапов - Массив - Массив, содержащий в себе имена этапов.
//						Заполняется в методе МассивЭтаповКВыполнению()
// ВозвращаемоеЗначение - Соответствие - В ключе содержится имя этапа,
//						в значении его статус.
&НаСервере
Функция СостоянияЭтапов(СписокЭтапов) 
	УстановитьПривилегированныйРежим(Истина);
	СостоянияЭтапов = Новый Структура;
	Для Каждого Этап Из СписокЭтапов Цикл
		СостояниеЭтапа = СостояниеЭтапа(СостоянияЭтапов, Этап.Значение);
		СостоянияЭтапов.Вставить(Этап.Значение, СостояниеЭтапа);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СостоянияЭтапов;
КонецФункции

Функция ОпределитьНомерЭтапа(Этап)
	Элемент = ЭтапыКРасчету.НайтиПоЗначению(Этап);
	Если Элемент = Неопределено Тогда
		НомерЭтапа = ЭтапыКРасчету.Количество() - 1;
	Иначе
		НомерЭтапа = ЭтапыКРасчету.Индекс(Элемент);
	КонецЕсли;
	Возврат НомерЭтапа;
КонецФункции

&НаКлиенте
Процедура ВыполнитьЭтапыРасчета(ИмяЭтапаРасчета = Неопределено, РучнойЗапуск = Истина, НачалоРасчета = 0)
	Отказ = Ложь;
	РасчетВФоне = Ложь;
	ПараметрыРасчета = Новый Структура("РучнойЗапуск, Статус, Этап", РучнойЗапуск);
	СтатусНеТребуется = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеТребуется");
	СтатусВыполненоУспешно = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно");
	
	Если ГраницаРасчета = 0 ИЛИ РучнойЗапуск Тогда
		ГраницаРасчета = ОпределитьНомерЭтапа(ИмяЭтапаРасчета);
	КонецЕсли;
	Пока НачалоРасчета <= ГраницаРасчета Цикл
		Если Отказ Тогда
			Прервать; // при расчете предыдущего этапа произошла критическая ошибка
		КонецЕсли;
		// Пропускаем все ручные операции кроме текущего
		Если НачалоРасчета <> ГраницаРасчета Тогда
			ПараметрыРасчета.РучнойЗапуск = Ложь;
		ИначеЕсли НачалоРасчета = ГраницаРасчета
			И ГраницаРасчета = ЭтапыКРасчету.Количество() - 1
		Тогда
			ПараметрыРасчета.РучнойЗапуск = РучнойЗапуск;
		Иначе
			ПараметрыРасчета.РучнойЗапуск = Истина;
		КонецЕсли;

		ЭтапКРасчету = ЭтапыКРасчету.Получить(НачалоРасчета).Значение;
		РезультатыРасчетов.Удалить(ЭтапКРасчету);
		
		ПараметрыРасчета.Этап = ЭтапКРасчету;
		ПараметрыРасчета.Статус = СостояниеЭтапа(СостоянияЭтапов, ЭтапКРасчету);
		СостоянияЭтапов.Вставить(ЭтапКРасчету, ПараметрыРасчета.Статус);
		Если (ПараметрыРасчета.Статус = СтатусНеТребуется
				ИЛИ ПараметрыРасчета.Статус = СтатусВыполненоУспешно
				ИЛИ ПараметрыРасчета.Статус = Неопределено)
		Тогда
			СостояниеЭтапа = ПараметрыРасчета.Статус; // это финальный статус этапа
			ОформлениеЭтапа(ПараметрыРасчета.Этап, ПараметрыРасчета);
		Иначе
			РассчитатьЭтап(ЭтапКРасчету, ПараметрыРасчета, Отказ, РасчетВФоне);
			Если РасчетВФоне ИЛИ ПараметрыРасчета.РучнойЗапуск Тогда
				Прервать; // запущен обработчик ожидания, позже будет перезапуск расчета
			КонецЕсли;
			СостояниеЭтапа = СостояниеЭтапа(СостоянияЭтапов, ЭтапКРасчету);
		КонецЕсли; 
		СостоянияЭтапов.Вставить(ЭтапКРасчету, СостояниеЭтапа);
		НачалоРасчета = НачалоРасчета + 1;
	КонецЦикла;
	Если НачалоРасчета >= ГраницаРасчета Тогда
		ГраницаРасчета = 0;
		Если Не РасчетВФоне Тогда
			ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
			ВывестиСостоянияЭтапов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ)
	РасчетВФоне = Истина;
	ЗапускУспешен = ФоновоеЗаданиеЗапустить(КРасчету, ПараметрыРасчета, Отказ);
	Если ЗапускУспешен Тогда
		ПараметрыОбработчика = Новый Структура("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ИнициализироватьПараметрыРасчета()
	ПараметрыРасчета = Новый Структура("Организация, Период", Объект.Организация, Объект.ПериодРегистрации);
	Возврат ПараметрыРасчета;
КонецФункции

&НаКлиенте
Функция ПоказатьПротоколыРасчетаПартийИСебестоимости(ПротоколыРасчета)
	
	Для Каждого КлючИЗначение Из ПротоколыРасчета Цикл
		Результат = ПолучитьПротоколРасчета(КлючИЗначение.Ключ, Объект.ПериодРегистрации);
		Результат.Протокол.Показать(Результат.Заголовок);
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПротоколРасчета(Идентификатор, Период)
	
	Заголовок = ПротоколРасчетаПартийИСебестоимости.ЗаголовокПротоколаПриВыводе(Период);
	Протокол  = РегистрыСведений.ПротоколыРасчетаПартийИСебестоимости.ПолучитьТекстПротокола(Идентификатор, , Период);
	
	Возврат Новый Структура("Протокол, Заголовок", Протокол, Заголовок);
	
КонецФункции

&НаСервере
Функция ПолучитьПротоколыРасчета(РасчетСебестоимости)
	
	Возврат РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.ПолучитьПротоколыРасчета(
		Объект.ПериодРегистрации,
		ОрганизацииДляПолученияПротоколов(),
		РасчетСебестоимости);
	
КонецФункции

&НаСервере
Функция ОрганизацииДляПолученияПротоколов()
	
	Если ЗначениеЗаполнено(СвязанныеОрганизации) Тогда
		Результат = СвязанныеОрганизации;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Результат = ОбщегоНазначенияУТКлиентСервер.Массив(Объект.Организация);
	Иначе
		Результат = ОбщегоНазначенияУТКлиентСервер.Массив(ДоступныеОрганизации());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область НастройкаРегламентногоЗадания

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасписаниеЗадания.РегламентноеЗадание КАК ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК РасписаниеЗадания
	|ГДЕ
	|	РасписаниеЗадания.Организация = &Организация
	|");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Результат = Запрос.Выполнить();
	
	ИдентификаторЗадания = Неопределено;
	Если Не Результат.Пустой() Тогда
		Расписание = Результат.Выгрузить();
		ИдентификаторЗадания = Расписание[0].ИдентификаторЗадания;
	КонецЕсли;
	
	ОрганизацииКРасчету = Новый Массив();
	ОрганизацииКРасчету.Добавить(Объект.Организация);
	
	ПараметрыЗадания = Новый Структура("Использование, Параметры", АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца, ОрганизацииКРасчету);
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
	ОбновитьЗаданиеЗакрытияМесяца(ИдентификаторЗадания, ПараметрыЗадания);
	
	Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
		ПериодРегистрацииРегламентный = НачалоМесяца(ТекущаяДата());
		ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Запись = НаборЗаписей.Добавить();
	Запись.Организация = Объект.Организация;
	Запись.РегламентноеЗадание = ИдентификаторЗадания;
	Запись.ЗакрываемыйПериод = ПериодРегистрацииРегламентный;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаданиеЗакрытияМесяца(ИдентификаторЗадания, ПараметрыЗадания)
	Задание = Неопределено;
	Если ИдентификаторЗадания <> Неопределено Тогда
		Отбор = Новый Структура("УникальныйИдентификатор", ИдентификаторЗадания);
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда // идентификатор не заполнен или задание не нашли
		СтрокаНаименования = НСтр("ru = 'Закрытие месяца по организации: %1'");
		Если Объект.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
										НСтр("ru = 'По всем организациям.'"));
		Иначе
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования, СокрЛП(Объект.Организация));
		КонецЕсли;
		ПараметрыЗадания.Вставить("Метаданные",Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
		ПараметрыЗадания.Вставить("Наименование", СтрокаНаименования);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		 ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗадания = Неопределено;
	ПериодРегистрацииРегламентный = Дата("00010101000000");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задание.РегламентноеЗадание,
	|	Задание.ЗакрываемыйПериод
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК Задание
	|ГДЕ
	|	Задание.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторЗадания = ВыборкаДетальныеЗаписи.РегламентноеЗадание;
		ПериодРегистрацииРегламентный = ВыборкаДетальныеЗаписи.ЗакрываемыйПериод;
	КонецЦикла;
	
	ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	Если ИдентификаторЗадания <> Неопределено Тогда
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			РасписаниеРегламентногоЗадания	= Задание.Расписание;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Задание.Использование;
			
			СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(Задание);
			Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
				СостояниеАвтоматическогоВыполненияОпераций = НСтр("ru = 'Не выполнялось'");
			Иначе
				СостояниеАвтоматическогоВыполненияОпераций = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
				+ Строка(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения);
			КонецЕсли;
		Иначе
			РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
			СостояниеАвтоматическогоВыполненияОпераций = "";
		КонецЕсли;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
		СостояниеАвтоматическогоВыполненияОпераций = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВнутреннийИнтерфейс
// Метод возвращает массив этапов к расчету,
// упорядоченных по приоритету выполнения (номеру индекса).
// Элементы с большим индексом зависят от элементов с меньшим индексом.
// Для добавления нового этапа необходимо добавить новый элемент в массив
// и прописать вызов соответствующего метода в методе ВыполнитьЭтапыРасчета()
Функция ЭтапыКРасчету()
	ОбработкаОъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОъект.ЭтапыКРасчету();
КонецФункции

// Метод возвращает массив этапов, исключаемых из расчета.
Функция ОтключенныеЭтапы()
	ОбработкаОъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОъект.ОтключенныеЭтапы();
КонецФункции

&НаКлиенте
Процедура РассчитатьЭтап(ИмяЭтапаРасчета, ПараметрыРасчета, Отказ = Ложь, РасчетВФоне = Ложь)
	Если ИмяЭтапаРасчета = "ИсправлениеОтрицательныхОстатков" Тогда
		ИсправлениеОтрицательныхОстатков(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПередачаТоваров" Тогда
		ПередачаВозвратТоваров(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыПоКомиссииИнтеркампани" Тогда
		ОтчетыПоКомиссииИнтеркампани(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыКомитентамОСписании" Тогда
		ОтчетыКомитентамОСписании(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПомощникПоУчетуНДС" Тогда
		ОперацииПоУчетуНДС(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		РасчетыСПартнерами(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРБП" Тогда
		РаспределениеРБП(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "НачисленияПоКредитамДепозитам" Тогда
		НачисленияПоКредитамДепозитам(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		АннулированиеПодарочныхСертификатов(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		РасчетПартийТоваров(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеНДС" Тогда
		РаспределениеНДС(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		РасчетСебестоимости(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		ПереоценкаДенежныхСредств(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		РаспределениеДоходовРасходовПоНаправлениям(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РеглУчет" Тогда
		РеглУчет(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	//++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМА" Тогда
		АмортизацияОСиНМА(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМАМеждународный" Тогда
		АмортизацияОСиНМАМеждународный(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ПроизводствоБезЗаказов" Тогда
		ПроизводствоБезЗаказов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеМатериаловРаботНаПродукцию22" Тогда
		РаспределениеМатериаловРаботНаПродукцию22(Отказ, ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "ПогашениеСтоимостиТМЦ" Тогда
		ПогашениеСтоимостиТМЦ(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "НалогНаИмущество" Тогда
		РасчетНалогаНаИмущество(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ТранспортныйНалог" Тогда
		РасчетТранспортногоНалога(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ЗемельныйНалог" Тогда
		РасчетЗемельногоНалога(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ТорговыйСбор" Тогда
		РасчетТорговогоСбора(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРасходов" Тогда
		НастройкаРаспределенияРасходов(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "НастройкаПоказателейРаспределенияРасходов" Тогда
		НастройкаПоказателейРаспределенияРасходов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеЗатратНаВыпуск" Тогда
		СписаниеЗатратНаВыпуск(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеМатериаловРаботНаПродукцию" Тогда
		РаспределениеМатериаловРаботНаПродукцию(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ДолиСписанияКосвенныхРасходов" Тогда
		РасчетДолейСписанияКосвенныхРасходов(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасходыНаПродукцию" Тогда
		РаспределениеРасходовНаПродукцию(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "МеждународныйУчет" Тогда
		МеждународныйУчет(Отказ, ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеКосвенныхРасходов" Тогда
		СписаниеКосвенныхРасходов(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РезервыПоДолгам" Тогда
		РезервыПоДолгам(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетКурсовыхРазницРегл" Тогда
		РасчетКурсовыхРазницРегл(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ФинансовыйРезультат" Тогда
		ФинансовыйРезультат(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "НачислениеОО" Тогда
		НачислениеОО(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ОтражениеЗарплаты" Тогда
		ОтражениеЗарплаты(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ФормированиеКУДиР" Тогда
		ФормированиеКУДиР(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПризнаниеВНУЛизинговыхПлатежей" Тогда
		ПризнаниеВНУЛизинговыхПлатежей(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	//-- НЕ УТ
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СостояниеЭтапа(ПредыдущиеЭтапы, ИмяЭтапаРасчета)
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыРасчета = Новый Структура("СписокОрганизаций, СписокПодразделений, Период",
		СписокДоступныхОрганизаций.ВыгрузитьЗначения(), СписокПодразделений(), Объект.ПериодРегистрации);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Состояние = ОбработкаОбъект.СостояниеЭтапа(ПредыдущиеЭтапы, ПараметрыРасчета, ИмяЭтапаРасчета);
	Возврат Состояние;
КонецФункции

&НаСервере
Процедура ОформлениеЭтапа(Этап, ПараметрыОформления)
	Если Этап = "ИсправлениеОтрицательныхОстатков" Тогда
		ОформлениеИсправлениеОтрицательныхОстатков(ПараметрыОформления);
	ИначеЕсли Этап = "ПередачаТоваров" Тогда
		ОформлениеПередачаВозвратТоваров(ПараметрыОформления);
	ИначеЕсли Этап = "ОтчетыПоКомиссииИнтеркампани" Тогда
		ОформлениеОтчетыПоКомиссииИнтеркампани(ПараметрыОформления);
	ИначеЕсли Этап = "ОтчетыКомитентамОСписании" Тогда
		ОформлениеОтчетыКомитентамОСписании(ПараметрыОформления);
	ИначеЕсли Этап = "ПомощникПоУчетуНДС" Тогда
		ОформлениеОперацииПоУчетуНДС(ПараметрыОформления);
	ИначеЕсли Этап = "РасчетыСПартнерами" Тогда
		ОформлениеРасчетыСПартнерами(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеРБП" Тогда
		ОформлениеРаспределениеРБП(ПараметрыОформления);
	ИначеЕсли Этап = "НачисленияПоКредитамДепозитам" Тогда
		ОформлениеНачисленияПоКредитамДепозитам(ПараметрыОформления);
	ИначеЕсли Этап = "АннулированиеПодарочныхСертификатов" Тогда
		ОформлениеАннулированиеПодарочныхСертификатов(ПараметрыОформления);
	ИначеЕсли Этап = "ПартииТоваров" Тогда
		ОформлениеПартииТоваров(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеНДС" Тогда
		ОформлениеРаспределениеНДС(ПараметрыОформления);
	ИначеЕсли Этап = "Себестоимость" Тогда
		ОформлениеРасчетСебестоимости(ПараметрыОформления);
	ИначеЕсли Этап = "ПереоценкаДенежныхСредств" Тогда
		ОформлениеПереоценкаДенежныхСредств(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеДоходовРасходов" Тогда
		ОформлениеРаспределениеДоходовРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "РеглУчет" Тогда
		ОформлениеРеглУчет(ПараметрыОформления);
	//++ НЕ УТ
	ИначеЕсли Этап = "АмортизацияОСиНМА" Тогда
		ОформлениеАмортизацияОСиНМА(ПараметрыОформления);
	//++ НЕ УТКА
	ИначеЕсли Этап = "АмортизацияОСиНМАМеждународный" Тогда
		ОформлениеАмортизацияОСиНМАМеждународный(ПараметрыОформления);
	ИначеЕсли Этап = "ПроизводствоБезЗаказов" Тогда
		ОформлениеПроизводствоБезЗаказов(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеМатериаловРаботНаПродукцию22" Тогда
		ОформлениеРаспределениеМатериаловРаботНаПродукцию22(ПараметрыОформления);
	//-- НЕ УТКА
	ИначеЕсли Этап = "ПогашениеСтоимостиТМЦ" Тогда
		ОформлениеПогашениеСтоимостиТМЦ(ПараметрыОформления);
	ИначеЕсли Этап = "НалогНаИмущество" Тогда
		ОформлениеНалогНаИмущество(ПараметрыОформления);
	ИначеЕсли Этап = "ТранспортныйНалог" Тогда
		ОформлениеТранспортныйНалог(ПараметрыОформления);
	ИначеЕсли Этап = "ЗемельныйНалог" Тогда
		ОформлениеЗемельныйНалог(ПараметрыОформления);
	ИначеЕсли Этап = "ТорговыйСбор" Тогда
		ОформлениеТорговыйСбор(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеРасходов" Тогда
		ОформлениеРаспределениеРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "НастройкаПоказателейРаспределенияРасходов" Тогда
		ОформлениеНастройкаПоказателейРаспределенияРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "СписаниеЗатратНаВыпуск" Тогда
		ОформлениеСписаниеЗатратНаВыпуск(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеМатериаловРаботНаПродукцию" Тогда
		ОформлениеРаспределениеМатериаловРаботНаПродукцию(ПараметрыОформления);
	ИначеЕсли Этап = "ДолиСписанияКосвенныхРасходов" Тогда
		ОформлениеДолиСписанияКосвенныхРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "РасходыНаПродукцию" Тогда
		ОформлениеРасходыНаПродукцию(ПараметрыОформления);
	ИначеЕсли Этап = "СписаниеКосвенныхРасходов" Тогда
		ОформлениеСписаниеКосвенныхРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "РезервыПоДолгам" Тогда
		ОформлениеРезервыПоДолгам(ПараметрыОформления);
	ИначеЕсли Этап = "РасчетКурсовыхРазницРегл" Тогда
		ОформлениеРасчетКурсовыхРазницРегл(ПараметрыОформления);
	ИначеЕсли Этап = "ФинансовыйРезультат" Тогда
		ОформлениеФинансовыйРезультат(ПараметрыОформления);
	//++ НЕ УТКА
	ИначеЕсли Этап = "МеждународныйУчет" Тогда
		ОформлениеМеждународныйУчет(ПараметрыОформления);
	//-- НЕ УТКА
	ИначеЕсли Этап = "НачислениеОО" Тогда
		ОформлениеНачислениеОО(ПараметрыОформления);
	ИначеЕсли Этап = "ОтражениеЗарплаты" Тогда
		ОформлениеОтражениеЗарплаты(ПараметрыОформления);
	ИначеЕсли Этап = "ФормированиеКУДиР" Тогда
		ОформлениеФормированиеКУДиР(ПараметрыОформления);
	ИначеЕсли Этап = "ПризнаниеВНУЛизинговыхПлатежей" Тогда
		ОформлениеПризнаниеВНУЛизинговыхПлатежей(ПараметрыОформления);
	//-- НЕ УТ
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиЭтапов

#Область СлужебныеМетодыОбработчиковЭтапов

&НаСервере
Процедура СкрытьУказанныеЭтапы(МассивЭтапов)
	ПараметрыОформления = Новый Структура("Скрыть, Статус", Истина, Неопределено);
	Для Каждого Этап Из МассивЭтапов Цикл
		ОформлениеЭтапа(Этап, ПараметрыОформления)
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭтапы(Этапы)
	
	СостоянияЭтапов = СостоянияЭтапов(Этапы);
	ПараметрыОформления = Новый Структура("ИмяЭтапа, Статус", "", Неопределено);
	
	ВыполненоУспешно = 0;
	НеТребуется		 = 0;
	НеВыполнено		 = 0;

	Для Каждого Состояние Из СостоянияЭтапов Цикл
		ПараметрыОформления.Статус = Состояние.Значение;
		ПараметрыОформления.ИмяЭтапа = Состояние.Ключ;
		ОформлениеЭтапа(Состояние.Ключ, ПараметрыОформления);
		Если Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		 ИЛИ Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
			НеВыполнено = НеВыполнено + 1; // в обоих случаях требуется пересчет этапа
		ИначеЕсли Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			НеТребуется = НеТребуется + 1;
		ИначеЕсли Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
			ВыполненоУспешно = ВыполненоУспешно + 1;
		КонецЕсли;
	КонецЦикла;
	ПроверитьДатуЗапрета();
	Если ВыполненоУспешно > 0 И НеВыполнено = 0 Тогда
		Если Не УстановленаДатаЗапрета Тогда
			Статус = НСтр("ru = 'Операции выполнены успешно'");
		КонецЕсли;
		Элементы.ДекорацияВыполнено.Видимость= Истина;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	ИначеЕсли НеТребуется > 0 И НеВыполнено = 0 Тогда
		Если Не УстановленаДатаЗапрета Тогда
			Статус = "";
		КонецЕсли;
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	Иначе
		Если Не УстановленаДатаЗапрета Тогда
			Статус = НСтр("ru = 'Существуют невыполненные операции'");
		КонецЕсли;
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Истина;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Истина;
	КонецЕсли;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(Объект.ПериодРегистрации)) Тогда
		Элементы.ПартииТоваров.Заголовок = НСтр("ru = 'Формирование движений по партиям товаров'");
	Иначе
		Элементы.ПартииТоваров.Заголовок = НСтр("ru = 'Распределение доп. расходов по товарам'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Функция АктивноЗаданиеРасчетаПартий()
	Отбор = Новый Структура("Ключ, Состояние", ПартионныйУчет.ИмяФоновогоЗадания(), СостояниеФоновогоЗадания.Активно);
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Возврат АктивныеЗадания.Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗавершениеРасчетаПартий()
	Если АктивноЗаданиеРасчетаПартий() Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Интервал", 1);
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеРасчетаПартий", ПараметрыОбработчика.Интервал, Истина);
	Иначе
		РасчетВФоне = Ложь;
		Отказ = Ложь;
		РасчетПартийТоваров("ПартионныйУчет", РасчетВФоне, Отказ)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьСвязанныеОрганизации()
	
	СвязанныеОрганизации.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаРасчета = УниверсальныеМеханизмыПартийИСебестоимости.СхемаРасчетаПартий(
		КонецМесяца(Объект.ПериодРегистрации),
		Объект.Организация);
	
	Если СхемаРасчета.Количество() > 0 Тогда
		СвязанныеОрганизации.ЗагрузитьЗначения(СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
	КонецЕсли;
	
	Если СвязанныеОрганизации.Количество() < 2 Тогда
		// Это организация "одиночка" - нет связанных с ней по Интеркампани организаций
		Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СвязанныеОрганизации.СортироватьПоЗначению();
	
	// Перенесем организацию-отбор на первую позицию в списке
	ЭлементОрганизацииВСписке = СвязанныеОрганизации.НайтиПоЗначению(Объект.Организация);
	Если ЭлементОрганизацииВСписке <> Неопределено Тогда
		Если СвязанныеОрганизации.Индекс(ЭлементОрганизацииВСписке) > 0 Тогда
			СвязанныеОрганизации.Удалить(ЭлементОрганизацииВСписке);
			СвязанныеОрганизации.Вставить(0, Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем текст для вывода в форме
	ПояснениеСвязанныеОрганизации = "";
	
	Для Каждого ТекущаяОрганизация Из СвязанныеОрганизации Цикл
		ПояснениеСвязанныеОрганизации = ПояснениеСвязанныеОрганизации
			+ ?(ПояснениеСвязанныеОрганизации = "", "", "," + Символы.ПС) + "- " + СокрЛП(ТекущаяОрганизация.Значение);
	КонецЦикла;
	
	ПояснениеСвязанныеОрганизации =
		НСтр("ru = 'Будет выполнен расчет для следующих организаций:'") + Символы.ПС + ПояснениеСвязанныеОрганизации;
				
	Элементы.ПояснениеСвязанныеОрганизации.Высота = СвязанныеОрганизации.Количество() + 1;
	Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы)
	
	УниверсальныеМеханизмыПартийИСебестоимости.ДополнитьОтборыДляЖурналаРегистрации(
		ПараметрыФормы.Уровень,
		ПараметрыФормы.СобытиеЖурналаРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
&НаКлиенте
Процедура ИсправлениеОтрицательныхОстатков(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ИмяФормыРасчета = "Обработка.ПомощникИсправленияОстатковТоваровОрганизаций.Форма.ФормаМониторСостоянияТоваровОрганизаций";
		РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеИсправлениеОтрицательныхОстатков(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИсправлениеОтрицательныхОстатковТоваров","Заголовок", НСтр("ru = 'Исправление отрицательных остатков товаров организации'"));
		КонецЕсли;
		Элементы.ГруппаИсправлениеОтрицательныхОстатковОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ИсправлениеОтрицательныхОстатков.Имя);
	Иначе
		Элементы.ГруппаИсправлениеОтрицательныхОстатковОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередачаВозвратТоваров(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ПередачиВозвратыТоваровМеждуОрганизациями.Форма.ФормаРабочееМесто", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеПередачаВозвратТоваров(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаПередачаТоваровОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаПередачаТоваровОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыКомитентамОСписании(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ОтчетыКомитентам.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтчетыКомитентамОСписании(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаОтчетыКомитентамОСписанииОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаОтчетыКомитентамОСписанииОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПоКомиссииИнтеркампани(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ОтчетыПоКомиссииМеждуОрганизациями.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтчетыПоКомиссииИнтеркампани(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаОтчетыПоКомиссииИнтеркампаниОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаОтчетыПоКомиссииИнтеркампаниОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерами(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("Организация", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'формирование движений по расчетам с партнерами и переоценка расчетов.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасчетыСПартнерами(ПараметрыОформления)
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(ЭтотОбъект,
		"РасчетыСПартнерами",
		НСтр("ru = 'Формирование движений по расчетам с контрагентами'"),
		ИспользоватьПартнеровКакКонтрагентов);
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется
	Тогда
		Элементы.ГруппаРасчетыСПартнерамиОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			ПояснениеФормированиеДвиженийПоРасчетуСПартнерами = НСтр("ru = 'Необходимо выполнить формирование движений по взаиморасчетам с контрагентами.'");
		Иначе
			ПояснениеФормированиеДвиженийПоРасчетуСПартнерами = НСтр("ru = 'Необходимо выполнить формирование движений по взаиморасчетам с партнерами.'");
		КонецЕсли;
		Если ОшибкиРасчета.Свойство("РасчетыСПартнерами") Тогда 
			Элементы.РасчетыСПартнерами.Гиперссылка = Истина;
		Иначе
			Элементы.РасчетыСПартнерами.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаРасчетыСПартнерамиОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РасчетыСПартнерами.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПоУчетуНДС(Отказ, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.ПериодРегистрации);
		ПараметрыФормы.Вставить("КонецПериода", Объект.ПериодРегистрации);
		ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
		
		ОткрытьФорму("Обработка.ПомощникПоУчетуНДС.Форма.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеОперацииПоУчетуНДС(ПараметрыОформления)
	
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаПомощникПоУчетуНДСОбщая.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) 
			И УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.ПериодРегистрации) Тогда
		Элементы.ГруппаПомощникПоУчетуНДСОбщая.Видимость = Ложь;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаПомощникПоУчетуНДСОбщая.Видимость = Истина;
		Элементы.ПомощникПоУчетуНДС.Заголовок = 
							НСтр("ru = 'Оформить счета-фактуры и таможенные документы'");
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПомощникПоУчетуНДС.Имя);
	Иначе
		Элементы.ГруппаПомощникПоУчетуНДСОбщая.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Затраты

//++ НЕ УТ

&НаКлиенте
Процедура НачислениеОО(ИмяЭтапа, РасчетВФоне, Отказ)
	
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'начисление оценочных обязательств и резервов по отпускам.'");
	ПараметрыРасчета.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеНачислениеОО(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаНачислениеОООбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеНачислениеОО = НСтр("ru = 'Существуют неначисленные оценочные обязательства (резервы) по отпускам.'");
		Элементы.НачислениеОО.Гиперссылка = Истина;
	Иначе
		Элементы.НачислениеОО.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаНачислениеОООбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.НачислениеОО.Имя);
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтражениеЗарплаты(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаОтражениеЗарплатыОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеОтражениеЗарплаты = НСтр("ru = 'Существуют начисления к отражению в финансовом учете'");
		Элементы.ОтражениеЗарплаты.Гиперссылка = Истина;
	Иначе
		Элементы.ОтражениеЗарплаты.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаОтражениеЗарплатыОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ОтражениеЗарплаты.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеЗарплаты(ИмяЭтапа, РасчетВФоне, Отказ)
	
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'отражение зарплаты в финансовом учете.'");
	ПараметрыРасчета.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	
КонецПроцедуры

//-- НЕ УТ

&НаКлиенте
Процедура РаспределениеРБП(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
	ИмяФормыРасчета = "Документ.РаспределениеРасходовБудущихПериодов.Форма.ФормаСпискаДокументов";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеРБП(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеРБП = НСтр("ru = 'Существуют не распределенные расходы будущих периодов.'");
		Элементы.ГруппаРаспределениеРБПОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеРБП.Имя);
	Иначе
		Элементы.ГруппаРаспределениеРБПОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоКредитамДепозитам(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Период", Объект.ПериодРегистрации);
	ИмяФормыРасчета = "Документ.НачисленияКредитовИДепозитов.Форма.ФормаСписка";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеНачисленияПоКредитамДепозитам(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется 
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаНачисленияПоКредитамДепозитамОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеНачисленияПоКредитамДепозитамЗаймам = НСтр("ru = 'Существуют договора кредитов, депозитов или займов, по которым не выполнено начисление.'");
	Иначе
		Элементы.ГруппаНачисленияПоКредитамДепозитамОбщая.Видимость = Истина;
	КонецЕсли;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.НачисленияПоКредитамДепозитам.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеПодарочныхСертификатов(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'аннулирование подарочных сертификатов.'");
	ПараметрыРасчета.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеАннулированиеПодарочныхСертификатов(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаАннулированиеПодарочныхСертификатовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеАннулированиеПодарочныхСертификатов = НСтр("ru = 'Необходимо выполнить аннулирование подарочных сертификатов.'");
		Если ОшибкиРасчета.Свойство(ПараметрыОформления.ИмяЭтапа) Тогда 
			Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Истина;
		Иначе
			Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Ложь;
		КонецЕсли;
	Иначе
		Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаАннулированиеПодарочныхСертификатовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.АннулированиеПодарочныхСертификатов.Имя);
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура АмортизацияОСиНМА(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'амортизация ОС и НМА (регламентированный учет).'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеАмортизацияОСиНМА(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаАмортизацияОСиНМАОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.АмортизацияОСиНМА.Гиперссылка = Истина;
		ПояснениеАмортизацияОСиНМАрегл = НСтр("ru = 'Необходимо начислить амортизацию по регламентированному учету'");
	Иначе
		Элементы.АмортизацияОСиНМА.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаАмортизацияОСиНМАОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.АмортизацияОСиНМА.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПризнаниеВНУЛизинговыхПлатежей(ИмяЭтапа, РасчетВФоне, Отказ)

	Если СостоянияЭтапов.Свойство("АмортизацияОСиНМА")
		И СостоянияЭтапов.АмортизацияОСиНМА = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено") Тогда
		Возврат;
	КонецЕсли;
	 
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'признание в НУ лизинговых платежей.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОформлениеПризнаниеВНУЛизинговыхПлатежей(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаПризнаниеВНУЛизинговыхПлатежейОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено 
		ИЛИ ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		
		Элементы.ПризнаниеВНУЛизинговыхПлатежей.Гиперссылка = Истина;
		ПояснениеПризнаниеВНУЛизинговыхПлатежей = НСтр("ru = 'Необходимо выполнить признание в налоговом учете лизинговых платежей.'");
	Иначе
		Элементы.ПризнаниеВНУЛизинговыхПлатежей.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаПризнаниеВНУЛизинговыхПлатежейОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПризнаниеВНУЛизинговыхПлатежей.Имя);
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура АмортизацияОСиНМАМеждународный(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'амортизация ОС и НМА (международный учет).'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеАмортизацияОСиНМАМеждународный(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаАмортизацияОСиНМАМеждународныйОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.АмортизацияОСиНМАМеждународный.Гиперссылка = Истина;
		ПояснениеАмортизацияОСиНМАМеждународный = НСтр("ru = 'Необходимо начислить амортизацию по международному учету'");
	Иначе
		Элементы.АмортизацияОСиНМАМеждународный.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаАмортизацияОСиНМАМеждународныйОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.АмортизацияОСиНМАМеждународный.Имя);
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ПогашениеСтоимостиТМЦ(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'погашение стоимости ТМЦ в эксплуатации (регламентированный учет).'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеПогашениеСтоимостиТМЦ(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаПогашениеСтоимостиТМЦОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ПогашениеСтоимостиТМЦ.Гиперссылка = Истина;
		ПояснениеПогашениеСтоимостиТМЦ = НСтр("ru = 'Необходимо погастить стоимость ТМЦ в эксплуатации в регламентированном учете'");
	Иначе
		Элементы.ПогашениеСтоимостиТМЦ.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаПогашениеСтоимостиТМЦОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПогашениеСтоимостиТМЦ.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РасчетНалогаНаИмущество(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет налога на имущество.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеНалогНаИмущество(ПараметрыОформления)
	
	// 4D:ERP для Беларуси, Екатерина, 31.03.2016 15:15:30 
	// , №11223
	// {
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаНалогНаИмуществоОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется	
	// }
	// 4D

		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаНалогНаИмуществоОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРасчетНалогаНаИмущество = НСтр("ru = 'Необходимо ввести документ расчета налога на имущество.'");
		Элементы.НалогНаИмущество.Гиперссылка = Истина;
	Иначе
		Элементы.НалогНаИмущество.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаНалогНаИмуществоОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.НалогНаИмущество.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РасчетТранспортногоНалога(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет транспортного налога.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеТранспортныйНалог(ПараметрыОформления)
	
	// 4D:ERP для Беларуси, Екатерина, 31.03.2016 15:16:57 
	// , №11223
	// {
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаТранспортныйНалогОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется	
	// }
	// 4D
	
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаТранспортныйНалогОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРасчетТранспортногоНалога = НСтр("ru = 'Необходимо ввести документ расчета транспортного налога.'");
		Элементы.ТранспортныйНалог.Гиперссылка = Истина;
	Иначе
		Элементы.ТранспортныйНалог.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаТранспортныйНалогОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ТранспортныйНалог.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗемельногоНалога(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет земельного налога.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеЗемельныйНалог(ПараметрыОформления)
	
	// 4D:ERP для Беларуси, Екатерина, 31.03.2016 15:17:46 
	// , №11223
	// {
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаЗемельныйНалогОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется	
	// }
	// 4D
	
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаЗемельныйНалогОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРасчетЗемельногоНалога = НСтр("ru = 'Необходимо ввести документ расчета земельного налога.'");
		Элементы.ЗемельныйНалог.Гиперссылка = Истина;
	Иначе
		Элементы.ЗемельныйНалог.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаЗемельныйНалогОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ЗемельныйНалог.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РасчетТорговогоСбора(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет торгового сбора.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеТорговыйСбор(ПараметрыОформления)
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаТорговыйСборОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется Тогда
		Элементы.ГруппаТорговыйСборОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРасчетТорговогоСбора = НСтр("ru = 'Необходимо ввести документ расчета торгового сбора.'");
		Элементы.ТорговыйСбор.Гиперссылка = Истина;
	Иначе
		Элементы.ТорговыйСбор.Гиперссылка = Ложь;
	КонецЕсли;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ТорговыйСбор.Имя);
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ
#Область ПроизводственныеЗатраты

&НаКлиенте
Процедура НастройкаРаспределенияРасходов(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	Состояние = ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения");
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("СписокПодразделений", СписокПодразделений());
	ПараметрыРасчета.Вставить("Состояние", Состояние);
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'настройка распределения расходов.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеРасходов(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется
	Тогда
		Элементы.ГруппаРаспределениеРасходовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.РаспределениеРасходов.Гиперссылка = Истина;
		ПояснениеНастройкаРаспределенияРасходов = НСтр("ru = 'Существуют производственные расходы, не полностью распределенные по статьям калькуляции.'");
	Иначе
		Элементы.РаспределениеРасходов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРаспределениеРасходовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеРасходов.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоказателейРаспределенияРасходов(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = ИнициализироватьПараметрыРасчета();
	ПараметрыФормы.Вставить("ТолькоНезаполненные", Истина);
	ИмяФормыРасчета = "Справочник.ПравилаРаспределенияРасходов.Форма.ФормаСпискаВручную";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеНастройкаПоказателейРаспределенияРасходов(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеНастройкаПоказателейДляРаспределенияРасходовНаПродукцию =  НСтр("ru = 'Существуют показатели, необходимые для расчета базы распределения расходов,
			| значения которых не заданы в данном месяце.'");
		Элементы.ГруппаНастройкаПоказателейРаспределенияРасходовОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.НастройкаПоказателейРаспределенияРасходов.Имя);
	Иначе
		Элементы.ГруппаНастройкаПоказателейРаспределенияРасходовОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписаниеЗатратНаВыпуск(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ПериодРегистрации, Организация", Объект.ПериодРегистрации, Объект.Организация);
	ИмяФормыРасчета = "Документ.СписаниеЗатратНаВыпуск.Форма.ФормаСпискаДокументов";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеСписаниеЗатратНаВыпуск(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеСписаниеЗатратНаВыпуск = 
			НСтр("ru = 'Требуется списать материалы (работы) и распределить трудозатраты на выпуски продукции без распоряжений'");
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.СписаниеЗатратНаВыпуск.Имя);
		Элементы.ГруппаСписаниеЗатратНаВыпускОбщая.Видимость = Истина;
	Иначе
		Элементы.ГруппаСписаниеЗатратНаВыпускОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеМатериаловРаботНаПродукцию(Элемент, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Состояние", 		 "ТребуетсяРаспределить");
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация", 		 Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", 	 ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Если СостоянияЭтапов.СписаниеЗатратНаВыпуск = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено") Тогда
		ПараметрыФормы.Вставить("ТребуетсяСписатьЗатраты", Истина);
	КонецЕсли;
	ИмяФормыРасчета = "Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаРабочееМесто";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеМатериаловРаботНаПродукцию(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеМатериаловИРаботНаПродукцию = 
			НСтр("ru = 'Требуется распределить материалы и работы на этапы производства.'");
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукциюОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеМатериаловРаботНаПродукцию.Имя);
	Иначе
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукциюОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ПроизводствоБезЗаказов(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ПериодРегистрации, Организация", Объект.ПериодРегистрации, Объект.Организация);
	ИмяФормыРасчета = "Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаРабочееМесто";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеПроизводствоБезЗаказов(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеСписаниеЗатратНаВыпуск = 
			НСтр("ru = 'Требуется списать материалы (работы) и трудозатраты на производство без заказов'");
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПроизводствоБезЗаказов.Имя);
		Элементы.ГруппаПроизводствоБезЗаказовОбщая.Видимость = Истина;
	Иначе
		Элементы.ГруппаПроизводствоБезЗаказовОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеМатериаловРаботНаПродукцию22(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Состояние",             "ТребуетсяРаспределить");
	ПараметрыФормы.Вставить("ПериодРегистрации",     Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация",           Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",         ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Если СостоянияЭтапов.ПроизводствоБезЗаказов = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено") Тогда
		ПараметрыФормы.Вставить("ОформитьПроизводствоБезЗаказов", Истина);
	КонецЕсли;
	ИмяФормыРасчета = "Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаРаспределениеМатериаловИРабот";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеМатериаловРаботНаПродукцию22(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеМатериаловИРаботНаПродукцию = 
			НСтр("ru = 'Требуется распределить материалы и работы на производство.'");
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукцию22Общая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеМатериаловРаботНаПродукцию22.Имя);
	Иначе
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукцию22Общая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
//-- НЕ УТ

#Область Себестоимость

&НаКлиенте
Процедура РасчетПартийТоваров(ИмяЭтапа, РасчетВФоне, Отказ)
	Если Не АктивноЗаданиеРасчетаПартий() Тогда
		КРасчету = Новый Массив();
		КРасчету.Добавить(ИмяЭтапа);
		ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
		ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет себестоимости.'");
		РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеРасчетаПартий", 1);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеПартииТоваров(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
	 И СкрыватьЭтапыСоСтатусомНеТребуется Тогда
		Элементы.ГруппаПартииТоваровОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	 ИЛИ ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
	 
		БылиОшибкиПриРасчете = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.БылиОшибкиПриРасчете(
			Объект.ПериодРегистрации,
			ОрганизацииДляПолученияПротоколов(),
			Ложь);
		
		Если ОшибкиРасчета.Свойство("ПартииТоваров") ИЛИ БылиОшибкиПриРасчете Тогда 
			Элементы.ПартииТоваров.Гиперссылка = Истина;
		Иначе
			Элементы.ПартииТоваров.Гиперссылка = Ложь;
		КонецЕсли;
		
		ПояснениеФормированиеДвиженийПоПартиямТоваров = ?(БылиОшибкиПриРасчете,
			НСтр("ru = 'При распределении партий товаров возникли ошибки.'"),
			НСтр("ru = 'Формирование движений не выполнялось или при распределении партий товаров возникли ошибки.'"));
		
	Иначе
		Элементы.ПартииТоваров.Гиперссылка = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПартииТоваровОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПартииТоваров.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНДС(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	
	ДокументыРаспределения = ПолучитьДокументыРаспределенияНДС(Объект.Организация, Объект.ПериодРегистрации);
	
	Если ((Месяц(Объект.ПериодРегистрации)%3 <> 0) ИЛИ ЗначениеЗаполнено(ДокументыРаспределения))
	 ИЛИ НЕ РезультатыРасчетов.Свойство("ПартииТоваров") Тогда
		Если УчитыватьПрочиеДоходыИРасходы Тогда
			КРасчету = Новый Массив();
			КРасчету.Добавить(ИмяЭтапа);
			ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
			ЭтапРассчитываемыйВФоне = НСтр("ru = 'распределение НДС.'");
			РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));
		ИмяФормыРасчета = "Документ.РаспределениеНДС.ФормаОбъекта";
		РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
	Иначе
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));
		ИмяФормыРасчета = "Документ.РаспределениеНДС.ФормаСписка";
		РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеНДС(ПараметрыОформления)
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаРаспределениеНДСОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы.РаспределениеНДС.Гиперссылка = Ложь;
		Если СкрыватьЭтапыСоСтатусомНеТребуется Тогда
			Элементы.ГруппаРаспределениеНДСОбщая.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		ПояснениеРаспределениеНДС = НСтр("ru = 'Выполнено распределение НДС'");
		Элементы.РаспределениеНДС.Гиперссылка = Ложь;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеНДС = НСтр("ru = 'Необходимо сформировать документ распределения НДС'");
		Элементы.РаспределениеНДС.Гиперссылка = Истина;
	КонецЕсли;
	Элементы.ГруппаРаспределениеНДСОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеНДС.Имя);
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура РасчетДолейСписанияКосвенныхРасходов(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	Если РезультатыРасчетов.Свойство("ПартииТоваров") Тогда
		Возврат;
	КонецЕсли;
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("РучнойЗапуск", Истина);
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'доли списания косвенных расходов.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеДолиСписанияКосвенныхРасходов(ПараметрыОформления)
	Если ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаДолиСписанияКосвенныхРасходовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы.ДолиСписанияКосвенныхРасходов.Гиперссылка = Ложь;
		Если СкрыватьЭтапыСоСтатусомНеТребуется Тогда
			Элементы.ГруппаДолиСписанияКосвенныхРасходовОбщая.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.ДолиСписанияКосвенныхРасходов.Гиперссылка = Ложь;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРасчетДолейСписанияКосвенныхРасходов = НСтр("ru = 'Необходимо ввести документ расчета долей списания косвенных расходов.'");
		Элементы.ДолиСписанияКосвенныхРасходов.Гиперссылка = Истина;
	КонецЕсли;
	Элементы.ГруппаДолиСписанияКосвенныхРасходовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ДолиСписанияКосвенныхРасходов.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовНаПродукцию(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	Если РезультатыРасчетов.Свойство("ПартииТоваров") Тогда
		Возврат;
	КонецЕсли;
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("СписокПодразделений", СписокПодразделений());
	ПараметрыРасчета.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	ПараметрыРасчета.Вставить("РучнойЗапуск", Истина);
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'распределение расходов на себестоимость продукции.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасходыНаПродукцию(ПараметрыОформления)
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Объект.ПериодРегистрации)) Тогда
		Элементы.ГруппаРасходыНаПродукциюОбщая.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы.РасходыНаПродукцию.Гиперссылка = Ложь;
		Если СкрыватьЭтапыСоСтатусомНеТребуется Тогда
			Элементы.ГруппаРасходыНаПродукциюОбщая.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.РасходыНаПродукцию.Гиперссылка = Ложь;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		ПояснениеРаспределениеРасходовНаПродукциюАвтоматически = НСтр("ru = 'Существуют производственные расходы,
			| для распределения которых не удалось сформировать базу распределения.'");
		Элементы.РасходыНаПродукцию.Гиперссылка = Истина;
	ИначеЕсли ПараметрыОформления.Статус =Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеРасходовНаПродукциюАвтоматически = 
			НСтр("ru = 'Существуют производственные расходы, требующие распределения пропорционально показателям.'");
		Элементы.РасходыНаПродукцию.Гиперссылка = Истина;
	КонецЕсли;
	Элементы.ГруппаРасходыНаПродукциюОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РасходыНаПродукцию.Имя);
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура РасчетСебестоимости(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	Если РезультатыРасчетов.Свойство("ПартииТоваров") Тогда
		Возврат;
	КонецЕсли;
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("РучнойЗапуск", Истина);
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет себестоимости.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасчетСебестоимости(ПараметрыОформления)
	
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы.Себестоимость.Гиперссылка = Ложь;
		Если СкрыватьЭтапыСоСтатусомНеТребуется Тогда
			Элементы.ГруппаСебестоимостьОбщая.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.Себестоимость.Гиперссылка = Ложь;
	Иначе
		
		БылиОшибкиПриРасчете = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.БылиОшибкиПриРасчете(
			Объект.ПериодРегистрации,
			ОрганизацииДляПолученияПротоколов(),
			Истина);
		
		Элементы.Себестоимость.Гиперссылка = БылиОшибкиПриРасчете
			ИЛИ РезультатыРасчетов.Свойство("Себестоимость")
			ИЛИ РезультатыРасчетов.Свойство("ПартииТоваров");
		
		ПояснениеРасчетСебестоимости = ?(БылиОшибкиПриРасчете,
			НСтр("ru = 'При расчете себестоимости возникли ошибки.'"),
			НСтр("ru = 'Расчет себестоимости не выполнялся или при расчете возникли ошибки.'"));
		
	КонецЕсли;
	
	Элементы.ГруппаСебестоимостьОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.Себестоимость.Имя);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Организация,
	|	Док.ПрименитьПравило5Процентов
	|ПОМЕСТИТЬ ВТДокументыВсе
	|ИЗ
	|	Документ.РаспределениеНДС КАК Док
	|ГДЕ
	|	&ВыборкаПоКварталу
	|	И Док.Проведен
	|	И (Док.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И Док.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|;
	|//////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНДС.Организация,
	|	РаспределениеНДС.ПрименитьПравило5Процентов КАК ПрименениеПравила5Процентов,
	|	ВЫБОР КОГДА НЕ Политика.УчетнаяПолитика ЕСТЬ NULL
	|		ТОГДА Политика.УчетнаяПолитика.Учитывать5ПроцентныйПорог
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Учитывать5ПроцентныйПорог 
	|ИЗ
	|	ВТДокументыВсе КАК РаспределениеНДС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|		&ДатаНачала, 
	|		Организация В (
	|			ВЫБРАТЬ 
	|				Т.Организация 
	|			ИЗ 
	|				ВТДокументыВсе КАК Т)
	|	) КАК Политика
	|	ПО РаспределениеНДС.Организация = Политика.Организация
	|");
	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ВыборкаПоКварталу", (Месяц(Объект.ПериодРегистрации)%3=0));
	Запрос.УстановитьПараметр("СписокОрганизаций", Объект.Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(Объект.Организация));
	ПрименениеПравила5ПроцентовПоДокументам = Запрос.Выполнить().Выгрузить();
	
	// Отображение информации по применению НДС 5%
	// Информацию выводим только в случае если организаця указана в шапке
	Элементы.ГруппаПрименениеПравила5ПроцентовВнимание.Видимость = Ложь;
	Если ПрименениеПравила5ПроцентовПоДокументам.Количество() = 1
		 И СостоянияЭтапов.Свойство("РаспределениеНДС")
		 И СостоянияЭтапов["РаспределениеНДС"] = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
	Тогда
		ПрименениеПравила5Процентов = ПрименениеПравила5ПроцентовПоДокументам[0];
		Если ПрименениеПравила5Процентов.Учитывать5ПроцентныйПорог 
			 И ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно 
		Тогда
			Оценка = Документы.РаспределениеНДС.ОценкаПримененияПравила5Процентов(
						ПрименениеПравила5Процентов.Организация,
						Объект.ПериодРегистрации);
			Если НЕ ПрименениеПравила5Процентов.ПрименениеПравила5Процентов И Оценка.Доля <= 5 Тогда
				Элементы.ГруппаПрименениеПравила5ПроцентовВнимание.Видимость = Истина;
				ПрименениеПравила5ПроцентовКартинка = БиблиотекаКартинок.Внимание16;
				ПрименениеПравила5ПроцентовПояснение = 
						НСтр("ru = 'Расходы по реализации не облагаемой НДС не превышают 5% от общих расходов. НДС может быть принят к вычету в полном объеме.'");
			ИначеЕсли ПрименениеПравила5Процентов.ПрименениеПравила5Процентов И Оценка.Доля > 5 Тогда
				Элементы.ГруппаПрименениеПравила5ПроцентовВнимание.Видимость = Истина;
				ПрименениеПравила5ПроцентовКартинка = БиблиотекаКартинок.ВниманиеКрасный;
				ПрименениеПравила5ПроцентовПояснение = 
						НСтр("ru = 'Расходы по реализации не облагаемой НДС превышают 5% от общих расходов. Необходимо выполнить распределение НДС между видами деятельности.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФинансовыйРезультат

&НаКлиенте
Процедура ПереоценкаДенежныхСредств(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'переоценка денежных средств.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеПереоценкаДенежныхСредств(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаПереоценкаДенежныхСредствОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ПереоценкаДенежныхСредств.Гиперссылка = Истина;
		ПояснениеПереоценкаДенежныхСредств = НСтр("ru = 'Необходимо выполнить переоценку остатков денежных средств.'");
	Иначе
		Элементы.ПереоценкаДенежныхСредств.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаПереоценкаДенежныхСредствОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПереоценкаДенежныхСредств.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоходовРасходовПоНаправлениям(ИмяЭтапа, РасчетВФоне, Отказ)
	Если УчитыватьПрочиеДоходыИРасходы И (ФормироватьФинансовыйРезультат ИЛИ БазоваяВерсия) Тогда
		КРасчету = Новый Массив();
		КРасчету.Добавить(ИмяЭтапа);
		ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
		ЭтапРассчитываемыйВФоне = НСтр("ru = 'распределение доходов и расходов по направлениям деятельности.'");
		РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеДоходовРасходов(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаРаспределениеДоходовРасходовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.РаспределениеДоходовРасходов.Гиперссылка = Истина;
		ПояснениеРаспределениеДоходовИРасходовПоНаправлениям = НСтр("ru = 'Необходимо выполнить распределение доходов и расходов по направлениям деятельности.'");
	Иначе
		Элементы.РаспределениеДоходовРасходов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРаспределениеДоходовРасходовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеДоходовРасходов.Имя);
КонецПроцедуры

#КонецОбласти


#Область РеглУчет

&НаКлиенте
Процедура РеглУчет(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	Если ИспользоватьРеглУчет Тогда
		ЭтапРассчитываемыйВФоне = НСтр("ru = 'отражение документов в регламентированном учете.'");
	Иначе
		ЭтапРассчитываемыйВФоне = НСтр("ru = 'отражение документов в учете НДС.'");
	КонецЕсли;
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРеглУчет(ПараметрыОформления)
	
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") И Объект.ПериодРегистрации >= НачалоВеденияРеглУчета;
	Если ИспользоватьРеглУчет Тогда
		Элементы.РеглУчет.Заголовок = НСтр("ru = 'Отражение документов в регламентированном учете'");
	Иначе
		Элементы.РеглУчет.Заголовок = НСтр("ru = 'Формирование записей книг покупок и продаж'");
	КонецЕсли;
	Элементы.ДействиеРеглУчет.Заголовок = ?(ИспользоватьРеглУчет, НСтр("ru = 'Отразить'"), НСтр("ru = 'Сформировать'"));
	Элементы.ГруппаОтражениеВРеглУчете.ОтображатьЗаголовок = ИспользоватьРеглУчет;
	Элементы.ГруппаОтражениеВРеглУчете.Отображение = ?(ИспользоватьРеглУчет, ОтображениеОбычнойГруппы.СлабоеВыделение, ОтображениеОбычнойГруппы.Нет);
	
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаРеглУчетОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Если ИспользоватьРеглУчет Тогда
			ПояснениеОтражениеДокументовВРеглУчете = НСтр("ru = 'При отражении документов в регл. учете и учете НДС произошли ошибки'");
		Иначе
			ПояснениеОтражениеДокументовВРеглУчете = НСтр("ru = 'При отражении документов в учете НДС произошли ошибки'");
		КонецЕсли;
		Элементы.РеглУчет.Гиперссылка = Истина;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если ИспользоватьРеглУчет Тогда
			ПояснениеОтражениеДокументовВРеглУчете = НСтр("ru = 'Существуют документы, не отраженные в регламентированном учете'");
		Иначе
			ПояснениеОтражениеДокументовВРеглУчете = НСтр("ru = 'Существуют документы, не отраженные в учете НДС'");
		КонецЕсли;
		Если ОшибкиРасчета.Свойство("РеглУчет") ИЛИ ИспользоватьРеглУчет Тогда
			Элементы.РеглУчет.Гиперссылка = Истина;
		Иначе
			Элементы.РеглУчет.Гиперссылка = Ложь;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.РеглУчет.Гиперссылка = Ложь;
	Иначе
		Элементы.РеглУчет.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРеглУчетОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РеглУчет.Имя);
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура СписаниеКосвенныхРасходов(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'списание косвенных расходов на финансовый результат.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеСписаниеКосвенныхРасходов(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаСписаниеКосвенныхРасходовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеСписаниеКосвенныхРасходов = НСтр("ru = 'Необходимо ввести документ списания косвенных расходов.'");
		Элементы.СписаниеКосвенныхРасходов.Гиперссылка = Истина;
	Иначе
		Элементы.СписаниеКосвенныхРасходов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаСписаниеКосвенныхРасходовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.СписаниеКосвенныхРасходов.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РезервыПоДолгам(ИмяЭтапа, РасчетВФоне, Отказ);
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'формирование резервов по сомнительным долгам.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРезервыПоДолгам(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаРезервыПоДолгамОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеФормированиеРезервовПоСомнительнымДолгам = НСтр("ru = 'Необходимо ввести документ формирования резервов по сомнительным долгам.'");
		Элементы.РезервыПоДолгам.Гиперссылка = Истина;
	Иначе
		Элементы.РезервыПоДолгам.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРезервыПоДолгамОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РезервыПоДолгам.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыйРезультат(ИмяЭтапа, РасчетВФоне, Отказ);
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'формирование финансового результата.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеФинансовыйРезультат(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаФинансовыйРезультатОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ФинансовыйРезультат.Гиперссылка = Истина;
	Иначе
		Элементы.ФинансовыйРезультат.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаФинансовыйРезультатОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ФинансовыйРезультат.Имя);	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура МеждународныйУчет(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Статус, Организация, ПериодРегистрации", Статус, Объект.Организация, Объект.ПериодРегистрации);
	ИмяФормыРасчета = "Обработка.ОперацииЗакрытияМесяцаМеждународныйУчет.Форма";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеМеждународныйУчет(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
		ИЛИ ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
	Тогда
		Элементы.ГруппаМеждународныйУчетОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.МеждународныйУчет.Гиперссылка = Истина;
		ПояснениеМеждународныйУчет = НСтр("ru = 'Перейти к закрытию месяца по международному учету'");
	КонецЕсли;
	Элементы.ГруппаМеждународныйУчетОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.МеждународныйУчет.Имя);	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура РасчетКурсовыхРазницРегл(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru = 'расчет курсовых разниц.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасчетКурсовыхРазницРегл(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаРасчетКурсовыхРазницРеглОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.РасчетКурсовыхРазницРегл.Гиперссылка = Истина;
		ПояснениеРасчетКурсовыхРазницРегл = НСтр("ru = 'Необходимо выполнить расчет курсовых разниц по регламентированному учету.'");
	Иначе
		Элементы.РасчетКурсовыхРазницРегл.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРасчетКурсовыхРазницРеглОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РасчетКурсовыхРазницРегл.Имя);
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ
#Область УчетПоУСН

&НаКлиенте
Процедура ФормированиеКУДиР(Отказ, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Период, Организация", Объект.ПериодРегистрации, Объект.Организация);
	ИмяФормыРасчета = "Обработка.ПомощникФормированияКУДиР.Форма";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеФормированиеКУДиР(ПараметрыОформления)
	
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется ИЛИ ПараметрыОформления.Свойство("Скрыть") Тогда
		Элементы.ГруппаУСН.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУСН.Видимость = Истина;
		ПояснениеФормированиеКУДиР = НСтр("ru = 'Перейти к помощнику формирования книги учета доходов и расходов для УСН'");
		Элементы.ФормированиеКУДиР.Гиперссылка = Не ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ФормированиеКУДиР.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецОбласти
