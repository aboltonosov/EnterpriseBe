
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УведомлениеОКонтролируемыхСделках"
		И Источник = Объект.Уведомление Тогда
		
		НомерКорректировки 	= 0;
		ТипУведомления 		= 0;
		НайтиИОбновитьУведомление("Последний");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
  	Если Параметры.Свойство("АвтоТест") Тогда
   		Возврат;
  	КонецЕсли;
	
	КонтролируемыеСделки.ЗаполнитьСписокГоловныхОрганизаций(Элементы.Организация.СписокВыбора);
	
	ПоказатьПоясненияКЭтапам = Истина;
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
		
	ПоказыватьНастройкиСоглашений = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
		
	Элементы.ДекорацияНастройкаСоглашений.Видимость = ПоказыватьНастройкиСоглашений;
	Элементы.ПояснениеНастройкиСоглашений.Видимость = ПоказыватьНастройкиСоглашений;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НайтиИОбновитьУведомление("Последний");
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Уведомление") И ЗначениеЗаполнено(Параметры.Уведомление) Тогда
		СвойстваУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Уведомление, "Организация, ОтчетныйГод");
		Объект.Организация = СвойстваУведомления.Организация;
		Объект.ОтчетныйГод = Год(СвойстваУведомления.ОтчетныйГод);
		Объект.Уведомление = Параметры.Уведомление;
	Иначе
		
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		Объект.Уведомление = НайтиУведомление("Последний", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
		
	КонецЕсли;
	
	ОбновитьУведомление(ЭтаФорма);
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийПараметров

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиИОбновитьУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйГодПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиИОбновитьУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУведомленияПриИзменении(Элемент)
	
	НомерКорректировки = ?(ТипУведомления = 0, 0, ?(НомерКорректировки = 0,1,НомерКорректировки));
	НайтиИОбновитьУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	НайтиИОбновитьУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Уведомление);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ПараметрыФормы = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.ФормаСписка", ПараметрыФормы, Элемент, , ,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСозданияУведомленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НомерКорректировки = ?(ЗначениеЗаполнено(Объект.Уведомление), НомерКорректировки + 1, 0);
	ТипУведомления = ?(НомерКорректировки = 0, 0, 1);
	СоздатьУведомление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаНастройки

&НаКлиенте
Процедура ДекорацияВзаимозависимыеЛицаНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаТоваровНажатие(Элемент)
	
	Адрес = НастройкиФормыИзмененияРеквизитовДляТоваров(Элемент.Заголовок);	
	
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаИзмененияРеквизитов",
					Новый Структура("АдресНастроек", Адрес), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаКонтрагентовНажатие(Элемент)
	
	Адрес = НастройкиФормыИзмененияРеквизитовДляКонтрагентов(Элемент.Заголовок);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаИзмененияРеквизитов", 
					Новый Структура("АдресНастроек", Адрес), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаСоглашенийНажатие(Элемент)
	
	Адрес = НастройкиФормыИзмененияРеквизитовДляСоглашений(Элемент.Заголовок);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаИзмененияРеквизитов", Новый Структура("АдресНастроек", Адрес), Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаФормирования

&НаКлиенте
Процедура ДекорацияСписокПрочихКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием списка прочих контролируемых сделок необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		СтандартнаяОбработка = Ложь;
			
		ПараметрыФормы=Новый Структура; 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
		ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
		ОткрытьФорму("Документ.РегистрацияПрочихКонтролируемыхСделок.ФормаСписка", ПараметрыФормы, , Объект.Уведомление, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСделокНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "КонтролируемыеСделки", Объект.Уведомление);
	ОткрытьФорму("Отчет.СписокКонтролируемыхСделок.Форма.ФормаОтчетаКонтролируемыеСделки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаПроверки

&НаКлиенте
Процедура ДекорацияСведенияОВзаимозависимыхЛицахНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "ВзаимозависимыеЛицаКонтролируемыхСделок", Объект.Уведомление);
		ОткрытьФорму("Отчет.ВзаимозависимыеЛицаКонтролируемыхСделок.Форма.ВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПредметовНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "ПредметыКонтролируемыхСделок", Объект.Уведомление);
		ОткрытьФорму("Отчет.ПредметыКонтролируемыхСделок.Форма.ФормаОтчетаПредметы", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаПодготовки

&НаКлиенте
Процедура ДекорацияСведенияГраницахВключенияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("ОтчетныйГод", Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаГраницыВключенияСделок", 
				ПараметрыОткрытия, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытия = Новый Структура("Уведомление, КлючВарианта", Объект.Уведомление,  "КонтролируемыеСделкиДляВключенияВУведомление");
		ОткрытьФорму("Отчет.КонтролируемыеСделкиДляВключенияВУведомление.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоставУведомленияНажатие(Элемент)
	
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.КонтролируемаяСделка.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАнализУведомленияНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "АнализУведомления", Объект.Уведомление);
		ОткрытьФорму("Отчет.АнализУведомления.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНастройкиЗаполненияУведомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо создать уведомление, перед открытием настроек его заполнения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытияФормы = Новый Структура("Уведомление", Объект.Уведомление);
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкиЗаполнения", ПараметрыОткрытияФормы, ЭтаФорма, Объект.Уведомление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаСведенийОКонтролируемыхСделкахНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Организация, Уведомление", Объект.Организация, Объект.Уведомление);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаРаботыСДокументамиКонтролируемыхСделок",
					ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьСписокСделок(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед заполнением списка контролируемых сделок необходимо создать уведомление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
			ТекстВопроса = НСтр("ru = 'Заполнение списка сделок может занять длительное время%ОчисткаСпискаСделок%
				|Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаСпискаСделок%",
				?(СделкиСуществуют, НСтр("ru = ',
				|существующие данные о сделках при заполнении будут очищены.'"), НСтр("ru = '.'")));
				
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполненияСделокЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьУведомление(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед заполнением уведомления необходимо его создать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
			ТекстВопроса = НСтр("ru = 'Заполнение уведомления может занять значительное время%ОчисткаУведомления%
				|Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаУведомления%",
				?(УведомлениеЗаполнено, НСтр("ru = ',
				|существующие листы 1А при заполнении будут помечены на удаление.'"), НСтр("ru = '.'")));
				
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнениеУведомленийЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед проверкой заполнения уведомления необходимо его создать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		РезультатВыполнения = ПроверитьЗаполнениеНаСервере(Объект.Уведомление, УникальныйИдентификатор);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.Уведомление);
		ПараметрыФормы.Вставить("АдресХранилища", РезультатВыполнения.АдресХранилища);
		
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Уведомление не создано. Его выгрузка не возможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		Если НЕ НомераКонтролируемыхСделокКорректны(Объект.Уведомление) Тогда
			ТекстВопроса = Нстр("ru = 'Нумерация листов 1А не корректна.
			|Перенумеровать листы 1А?
			|(операция может занять продолжительное время)'");
			Оповещение = Новый ОписаниеОповещения("ВопросПеренумероватьЛисты1АЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьФормуВыгрузкиУведомления();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьУведомленияОКонтролируемыхСделках(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Уведомление не создано. Его печать не возможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Не ЗначениеЗаполнено(Объект.Уведомление) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыПечати = Новый Структура("Уведомление", Объект.Уведомление);
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаПечатиУведомления", ПараметрыПечати, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясненияКЭтапам(Команда)
	
	ПоказатьПоясненияКЭтапам = Не ПоказатьПоясненияКЭтапам;
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

&НаСервере
Процедура ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.ПодготовитьДанныеАвтоматическогоЗаполнения(Объект.Уведомление);
	Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
	Объект.Уведомление = НайтиУведомление(Истина, Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	ОбновитьУведомление(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомлениеНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.СформироватьКонтролируемыеСделкиУведомления(Объект.Уведомление);
	Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
	Объект.Уведомление = НайтиУведомление("Указанный", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	ОбновитьУведомление(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеНаСервере(Уведомление, УникальныйИдентификатор)
	
	РезультатВыполнения = Документы.УведомлениеОКонтролируемыхСделках.ПроверитьЗаполнениеУведомления(Уведомление, УникальныйИдентификатор);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСделок(СделкиСуществуют, ДатаФормированияСпискаСделок)
	
	СделкиЗаполнены = ?(СделкиСуществуют, НСтр("ru = 'Сформирован %ДатаФормированияСпискаСделок%'"),НСтр("ru = 'Список сделок пуст'"));
	СделкиЗаполнены = СтрЗаменить(СделкиЗаполнены, "%ДатаФормированияСпискаСделок%", Формат(ДатаФормированияСпискаСделок, "ДЛФ=D"));
	
	Возврат СделкиЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаполненияУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления)
	
	Представление = ?(УведомлениеЗаполнено, НСтр("ru = 'Сформировано %ДатаЗаполненияУведомления%'"),НСтр("ru = 'Не заполнено'"));
	Представление = СтрЗаменить(Представление, "%ДатаЗаполненияУведомления%", Формат(ДатаЗаполненияУведомления, "ДЛФ=D"));
	
	Возврат Представление;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУведомления(Организация, ОтчетныйГод, НомерКорректировки)
	
	Если НомерКорректировки = Неопределено Тогда
		
		Представление = НСтр("ru = 'Уведомление о контролируемых сделках не создано'");
		
	Иначе
		
		Представление = НСтр("ru = 'Открыть %ПредставлениеУведомления%'");
		Если НомерКорректировки = 0 Тогда
			Представление = СтрЗаменить(Представление, "%ПредставлениеУведомления%", НСтр("ru = 'уведомление'"));
		Иначе
			ПредставлениеНомераКорректировки = ?(НомерКорректировки = 1, "", "№"+Формат(НомерКорректировки, "ЧЦ=2; ЧГ=0")+" ");
			Представление = СтрЗаменить(Представление, "%ПредставлениеУведомления%", НСтр("ru = 'корректировку %НомерКорректировки%уведомления'"));
			Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПредставлениеНомераКорректировки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСозданияУведомления(НомерКорректировки)
	
	Если НомерКорректировки = Неопределено Тогда
		
		Представление = НСтр("ru = 'Создать уведомление'");
		
	Иначе
			
		Представление = Нстр("ru = 'Создать корректировку %НомерСледующейКорректировки% уведомления'");
		Представление = СтрЗаменить(Представление, "%НомерСледующейКорректировки% ", ?(НомерКорректировки, "№"+Формат(НомерКорректировки + 1, "ЧЦ=2")+" ", ""));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура НайтиИОбновитьУведомление(ТипПоиска)
	
	Объект.Уведомление = НайтиУведомление(ТипПоиска, Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	
	ОбновитьУведомление(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиУведомление(ТипПоиска, Организация, ОтчетныйГод, ТипУведомления, НомерКорректировки)
	
	ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(ОтчетныйГод);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат КонтролируемыеСделки.НайтиУведомлениеОрганизацииВОтчетномГоду(Организация,ОтчетныйГод,ТипУведомления,НомерКорректировки,ТипПоиска);
	Иначе
		Возврат Документы.УведомлениеОКонтролируемыхСделках.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьОтчетныйГодЕслиНеЗаполнен(ОтчетныйГод)
	Возврат ?(ЗначениеЗаполнено(ОтчетныйГод), ОтчетныйГод, Год(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУведомление(ЗаполняемаяФорма)
	
	ДанныеУведомления = ПолучитьДанныеУведомления(ЗаполняемаяФорма.Объект.Уведомление);
	ЗаполнитьЗначенияСвойств(ЗаполняемаяФорма, ДанныеУведомления);
	
	Если ДанныеУведомления.Свойство("Организация") И Не ДанныеУведомления.Организация = ЗаполняемаяФорма.Объект.Организация Тогда
		ЗаполняемаяФорма.Объект.Организация = ДанныеУведомления.Организация;
	КонецЕсли;
	Если ДанныеУведомления.Свойство("ОтчетныйГод") И Не ДанныеУведомления.ОтчетныйГод = ЗаполняемаяФорма.Объект.ОтчетныйГод Тогда
		ЗаполняемаяФорма.Объект.ОтчетныйГод = ДанныеУведомления.ОтчетныйГод;
	КонецЕсли;
	
	ЗаполняемаяФорма.ПредставлениеСделок = ПредставлениеСделок(ЗаполняемаяФорма.СделкиСуществуют, ДанныеУведомления.ДатаФормированияСпискаСделок);
	ЗаполняемаяФорма.ПредставлениеЗаполненияУведомления = ПредставлениеЗаполненияУведомления(ЗаполняемаяФорма.УведомлениеЗаполнено, ДанныеУведомления.ДатаЗаполненияУведомления);
	ЗаполняемаяФорма.ПредставлениеУведомления = ПредставлениеУведомления(ЗаполняемаяФорма.Объект.Организация, ЗаполняемаяФорма.Объект.ОтчетныйГод, ДанныеУведомления.НомерКорректировки);
	ЗаполняемаяФорма.ПредставлениеСозданияУведомления = ПредставлениеСозданияУведомления(?(ЗначениеЗаполнено(ЗаполняемаяФорма.Объект.Уведомление), ЗаполняемаяФорма.НомерКорректировки, Неопределено));
	
	УправлениеФормой(ЗаполняемаяФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеУведомления(ДокументУведомления)
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(ДокументУведомления) Тогда
		
		СвойстваУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУведомления,
								"НомерКорректировки, ДатаФормированияСпискаСделок, ДатаЗаполненияУведомления, Организация, ОтчетныйГод");
		
		СтруктураВозврата.Вставить("ТипУведомления", ?(СвойстваУведомления.НомерКорректировки = 0, 0, 1));
		СтруктураВозврата.Вставить("НомерКорректировки", ?(СтруктураВозврата.ТипУведомления = 0, 0, СвойстваУведомления.НомерКорректировки));
		СтруктураВозврата.Вставить("СделкиСуществуют", Документы.УведомлениеОКонтролируемыхСделках.ДанныеАвтоматическогоЗаполненияПодготовлены(ДокументУведомления));
		СтруктураВозврата.Вставить("УведомлениеЗаполнено", Документы.УведомлениеОКонтролируемыхСделках.УведомлениеЗаполнено(ДокументУведомления));
		СтруктураВозврата.Вставить("ДатаФормированияСпискаСделок", СвойстваУведомления.ДатаФормированияСпискаСделок);
		СтруктураВозврата.Вставить("ДатаЗаполненияУведомления", СвойстваУведомления.ДатаЗаполненияУведомления);
		СтруктураВозврата.Вставить("Организация", СвойстваУведомления.Организация);
		СтруктураВозврата.Вставить("ОтчетныйГод", Формат(СвойстваУведомления.ОтчетныйГод, "ДФ=yyyy"));
	Иначе
		СтруктураВозврата.Вставить("СделкиСуществуют", Ложь);
		СтруктураВозврата.Вставить("УведомлениеЗаполнено", Ложь);
		СтруктураВозврата.Вставить("ДатаФормированияСпискаСделок", Дата(1,1,1));
		СтруктураВозврата.Вставить("ДатаЗаполненияУведомления", Дата(1,1,1));
		СтруктураВозврата.Вставить("НомерКорректировки", Неопределено);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТекстНастройкиЗаполненияУведомления", Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстНастроекФормированияУведомления(ДокументУведомления));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.НомерКорректировки.Доступность = Форма.ТипУведомления <> 0;
	
	ДоступностьГиперссылок = ЗначениеЗаполнено(Форма.Объект.Организация) И ЗначениеЗаполнено(Форма.Объект.ОтчетныйГод);
	
	Форма.Элементы.ГруппаЭтапы.Доступность = ДоступностьГиперссылок;
	Форма.Элементы.ПредставлениеСозданияУведомления.Доступность = ДоступностьГиперссылок;
	
	Форма.Элементы.ПредставлениеУведомления.Видимость = ЗначениеЗаполнено(Форма.Объект.Уведомление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойстваПредыдущегоУведомления(Организация, ОтчетныйГод, НомерКорректировки)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("НомерКорректировки", НомерКорректировки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	УведомлениеОКонтролируемыхСделках.КодФормыРеорганизации,
	|	УведомлениеОКонтролируемыхСделках.ИННРеорганизованнойОрганизации,
	|	УведомлениеОКонтролируемыхСделках.КППРеорганизованнойОрганизации,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки < &НомерКорректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	УведомлениеОКонтролируемыхСделках.КодФормыРеорганизации,
	|	УведомлениеОКонтролируемыхСделках.ИННРеорганизованнойОрганизации,
	|	УведомлениеОКонтролируемыхСделках.КППРеорганизованнойОрганизации,
	|	2
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод < &ОтчетныйГод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ОтчетныйГод,
	|	НомерКорректировки";
	
	
	СвойстваУведомления = Новый Структура;
	СвойстваУведомления.Вставить("КодМестаПредставления", "");
	СвойстваУведомления.Вставить("ГруппироватьСделкиСОдинаковойЦеной", Ложь);
	СвойстваУведомления.Вставить("КодФормыРеорганизации", "");
	СвойстваУведомления.Вставить("ИННРеорганизованнойОрганизации", "");
	СвойстваУведомления.Вставить("КППРеорганизованнойОрганизации", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СвойстваУведомления, Выборка);
	КонецЕсли;
	
	Возврат СвойстваУведомления;
	
КонецФункции

&НаСервере
Функция ВернутьРанееСозданноеНоПомеченноеНаУдалениеИлиНовоеУведомление()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УведомлениеОКонтролируемыхСделках.Ссылка
	                      |ИЗ
	                      |	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	                      |ГДЕ
	                      |	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	                      |	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	                      |	И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтчетныйГод", Дата(Объект.ОтчетныйГод, 1, 1));
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка.ПолучитьОбъект(), Документы.УведомлениеОКонтролируемыхСделках.СоздатьДокумент());
	
КонецФункции

&НаСервере
Процедура СоздатьУведомление()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ОтчетныйГод > 2000 Тогда
		
		НовоеУведомление = ВернутьРанееСозданноеНоПомеченноеНаУдалениеИлиНовоеУведомление();
		НовоеУведомление.ПометкаУдаления = Ложь;
		НовоеУведомление.Дата = ТекущаяДатаСеанса();
		НовоеУведомление.Организация = Объект.Организация;
		НовоеУведомление.ОтчетныйГод = Дата(Объект.ОтчетныйГод, 1, 1);
		НовоеУведомление.НомерКорректировки = НомерКорректировки;
		
		СвойстваПредыдущегоУведомления = ПолучитьСвойстваПредыдущегоУведомления(НовоеУведомление.Организация, НовоеУведомление.ОтчетныйГод, НовоеУведомление.НомерКорректировки);
		
		ЗаполнитьЗначенияСвойств(НовоеУведомление, СвойстваПредыдущегоУведомления);
		
		Попытка
			НовоеУведомление.Записать();
		Исключение
			НомерКорректировки = НомерКорректировки - 1;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось создать новое уведомление.'"), , "ПредставлениеСозданияУведомления"); 
			Возврат;
		КонецПопытки;
		
		Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
		Объект.Уведомление = НайтиУведомление("Указанный", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
		ОбновитьУведомление(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумероватьЛисты1А(Уведомление)
	
	КонтролируемыеСделки.ПеренумерацияКонтролируемыхСделокУведомления(Уведомление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомераКонтролируемыхСделокКорректны(Уведомление)
	
	Возврат КонтролируемыеСделки.НомераКонтролируемыхСделокУведомленияКоректны(Уведомление);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыИВидимостьПояснений()
	
	Если ПоказатьПоясненияКЭтапам Тогда
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Скрыть пояснения к этапам'");
	Иначе
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Показать пояснения к этапам'");
	КонецЕсли;
	
	Для каждого ЭлементФормы из Элементы Цикл
		Если Тип(ЭлементФормы) = Тип("ГруппаФормы") И Лев(ЭлементФормы.Имя, 15) = "ГруппаПояснение" Тогда
			ЭлементФормы.Видимость = ПоказатьПоясненияКЭтапам;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователем

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомления()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыгрузкиУведомленияЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Уведомление", Объект.Уведомление);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаВыгрузкиВXML", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого Сообщение из Результат Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполненияСделокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере();
		УправлениеФормой(ЭтаФорма);
		ПоказатьПредупреждение( , НСтр("ru = 'Список сделок успешно заполнен по данным учета'"), 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнениеУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьУведомлениеНаСервере();
		УправлениеФормой(ЭтаФорма);
		ПоказатьПредупреждение( , НСтр("ru = 'Листы 1А уведомления успешно заполнены'"), 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренумероватьЛисты1АЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренумероватьЛисты1А(Объект.Уведомление);
	КонецЕсли;
	
	ОткрытьФормуВыгрузкиУведомления();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроекОткрытияФормыИзмененияРеквизитов

&НаСервереБезКонтекста
Функция НастройкиФормыИзмененияРеквизитовДляТоваров(Заголовок)
	
	СтруктураНастроек = Новый Структура("Заголовок", Заголовок);
	СтруктураНастроек.Вставить("ЗаголовокГруппыИзменяемыхРеквизитов", НСтр("ru = 'Классификация'"));
	СтруктураНастроек.Вставить("ПояснениеФормы",
		НСтр("ru = 'Сделки, заключенные по товарам, коды ТНВЭД которых относятся к перечню кодов товаров мировой биржевой торговли (соответствующая пометка в левой колонке), будут признаны контролируемыми, при условии превышения суммы этих сделок между контрагентом и организацией ограничения для сделок с иностранными независимыми лицами.'"));
	
	ОтборНаРаботуУслугу = Новый ОтборКомпоновкиДанных;
	СписокРаботУслуг = Новый СписокЗначений;
	СписокРаботУслуг.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокРаботУслуг.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборНаРаботуУслугу, "ТипНоменклатуры", СписокРаботУслуг, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	ИзменяемыеОбъекты = Новый Соответствие;
	СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
	СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
	СтруктураИзменяемогоОбъекта.ИмяОбъекта = "Номенклатура";
	СтруктураИзменяемогоОбъекта.Вставить("ОбработкаПодбора", "Обработка.ПодборТоваровПоОтбору.Форма.Форма");
	СтруктураИзменяемогоОбъекта.Вставить("ПодсказкаПодбора",
		НСтр("ru = 'В открытой форме отбора можно будет выбрать номенклатуру (по произвольным условиям) для последующего 
					|присвоения ей значения из выделенной строки изменяемого реквизита."));
	
	ДеревоЭлементов = Новый ДеревоЗначений;
	ДеревоЭлементов.Колонки.Добавить("ИмяЭлемента");
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Наименование"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Код"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Артикул"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "КодДляПоиска"));
	СтруктураИзменяемогоОбъекта.Вставить("ДеревоЭлементов", ДеревоЭлементов);
	
	ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	
	СтруктураНастроек.Вставить("ИзменяемыеОбъекты", ИзменяемыеОбъекты);
	
	ИзменяемыеРеквизиты = Новый Соответствие;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодТНВЭД";
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ТНВЭД'"));
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	// Устанавливаем список кодов, на вхождение в который будет определяться относятся ли товары к товарам мировой биржевой торговли.
	СтруктураИзменяемогоРеквизита.Вставить("СписокКодовУсловийПометки", КонтролируемыеСделкиПовтИсп.ПереченьКодовТНВЭДМировойБиржевойТорговли());
	СтруктураИзменяемогоРеквизита.Вставить("ПодсказкаПометки", НСтр("ru = 'Является товаром мировой биржевой торговли'"));
	СтруктураИзменяемогоРеквизита.Вставить("ПоУмолчанию", Истина);
	
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКВЭД";
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКВЭД'"));
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКП";
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКП'"));
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "ОблагаетсяНДПИПоПроцентнойСтавке";
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'НДПИ'"));
	СтруктураИзменяемогоРеквизита.Вставить("ПредставлениеБулевскогоТипаВТаблице", НСтр("ru = 'Облагается НДПИ по процентной ставке'"));
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураНастроек.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиФормыИзмененияРеквизитовДляКонтрагентов(Заголовок)
	
	СтруктураНастроек = Новый Структура("Заголовок", Заголовок);
	СтруктураНастроек.Вставить("ЗаголовокГруппыИзменяемыхРеквизитов", НСтр("ru = 'Страны регистрации'"));
	СтруктураНастроек.Вставить("ПояснениеФормы",
		НСтр("ru = 'Страны, которые являются офшорными зонами (присутствует пометка в левой колонке), отмечают факт того, что контрагенты (для которых эти страны указаны) ведут свою деятельность в офшорах, а значит, сделки с таким контрагентом будут признаваться контролируемыми, если сумма доходов сделок за соответствующий календарный год будет превышать ограничение для сделок с иностранными независимыми лицами.'"));
	
	
	ИзменяемыеОбъекты = Новый Соответствие;
	СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
	СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
	СтруктураИзменяемогоОбъекта.ИмяОбъекта = "Контрагенты";
	ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	
	СтруктураНастроек.Вставить("ИзменяемыеОбъекты", ИзменяемыеОбъекты);
	
	ИзменяемыеРеквизиты = Новый Соответствие;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "СтранаРегистрации";
	ОтборКонтрагентов = Новый ОтборКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборКонтрагентов, "ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборКонтрагентов);
	// Устанавливаем список кодов, на вхождение в который будет определяться относятся ли контрагенты к контрагентам зарегистрированным в офшорах.
	СтруктураИзменяемогоРеквизита.Вставить("СписокКодовУсловийПометки", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров());
	СтруктураИзменяемогоРеквизита.Вставить("ПодсказкаПометки", НСтр("ru = 'Является страной, зарегистрированной в офшоре'"));
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураНастроек.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиФормыИзмененияРеквизитовДляСоглашений(Заголовок)
	
	СтруктураНастроек = Новый Структура("Заголовок", Заголовок);
	СтруктураНастроек.Вставить("ЗаголовокГруппыИзменяемыхРеквизитов", НСтр("ru = 'Данные для заполнения'"));
	
	ДеревоЭлементов = Новый ДеревоЗначений;
	ДеревоЭлементов.Колонки.Добавить("ИмяЭлемента");
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Наименование"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Номер"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Дата"));
	
	ИзменяемыеОбъекты = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
		СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
		СтруктураИзменяемогоОбъекта.ИмяОбъекта = "СоглашенияСКлиентами";
			
		СтруктураИзменяемогоОбъекта.Вставить("ДеревоЭлементов", ДеревоЭлементов);
		
		ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
		СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
		СтруктураИзменяемогоОбъекта.ИмяОбъекта = "СоглашенияСПоставщиками";
			
		СтруктураИзменяемогоОбъекта.Вставить("ДеревоЭлементов", ДеревоЭлементов);
		
		ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ИзменяемыеОбъекты", ИзменяемыеОбъекты);
	
	ИзменяемыеРеквизиты = Новый Соответствие;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодНаименованияСделки";
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	СтруктураИзменяемогоРеквизита.Вставить("СписокВозможныхЗначенийРеквизита", КонтролируемыеСделкиПовтИсп.ПолучитьСписокКодовНаименованийСделки());
	
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "СпособОпределенияЦеныСделки";
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "НалогообложениеНДС";
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодУсловийПоставки";
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	СтруктураИзменяемогоРеквизита.Вставить("СписокВозможныхЗначенийРеквизита", КонтролируемыеСделкиПовтИсп.ПолучитьКодыУсловийПоставки());
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураНастроек.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти