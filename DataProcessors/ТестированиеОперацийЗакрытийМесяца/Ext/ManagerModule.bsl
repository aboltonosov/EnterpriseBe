#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выполняет тестирование операций закрытия месяца.
// Входными параметрами принимает строку запуска.
// Возвращает успех/не успех тестирования.
// Если не успех, то смотри в журнале регистрации сообщения об ошибке.
Функция Тестирование(ВходныеПараметры) Экспорт
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = РазобратьСтрокуВПараметры(ВходныеПараметры.ПараметрыЗапуска);
		АвтоТестирование = Истина;
		Если ВходныеПараметры.Свойство("ХранилищеЭталонныхДанных21") Тогда
			ПараметрыТестирования.Вставить("ХранилищеЭталонныхДанных21", ВходныеПараметры.ХранилищеЭталонныхДанных21);
		КонецЕсли;
	Иначе // интерактивный запуск
		ПараметрыТестирования = ВходныеПараметры;
		АвтоТестирование = Ложь;
	КонецЕсли;
	
	Если АвтоТестирование Тогда
		РезультатТестирования = ТестироватьДоКонца(ПараметрыТестирования);
	Иначе
		РезультатТестирования = Новый Структура("Отказ,Расхождения,ОписаниеОшибки",Ложь);
		Если Не (ПараметрыТестирования.Свойство("ТолькоСравнитьС21")
					И ПараметрыТестирования.ТолькоСравнитьС21) Тогда
			Попытка
				РезультатТестирования.Расхождения = ТестироватьУказанныйМесяц(ПараметрыТестирования.Период, ПараметрыТестирования); // возврат расхождений
				Если ПараметрыТестирования.Свойство("Отказ")
					И ПараметрыТестирования.Отказ Тогда
					РезультатТестирования.Отказ = Истина;
					СообщитьОбОшибке();
				КонецЕсли;
			Исключение
				РезультатТестирования.Отказ = Истина;
				РезультатТестирования.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыТестирования.Свойство("ХранилищеЭталонныхДанных21") Тогда
			РезультатТестирования.Вставить("Расхождения21");
			Попытка
				РезультатТестирования.Расхождения21 = ТестироватьУказанныйМесяц21(ПараметрыТестирования.ХранилищеЭталонныхДанных21, ПараметрыТестирования.Период, ПараметрыТестирования);
			Исключение
				РезультатТестирования.Отказ = Истина;
				РезультатТестирования.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатТестирования;
КонецФункции

// Запускает тестирование регламентных заданий по закрытию месяца в фоновом задании.
//
// Параметры:
//	ПараметрыТестирования - Структура - Параметры закрытия месяца: период, организация к закрытию.
//
// ВозвращаемоеЗначение:
//	Булево - Истина, в случае если фоновое задание запущено; Ложь, если возник сбой при запуске задания или же уже есть активные задания.
Функция ЗапуститьТестированиеВФоне(ПараметрыТестирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = ЗакрытиеМесяцаУТВызовСервера.ИмяФоновогоЗадания();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется закрытие месяца'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыТестирования);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	Возврат Истина;
КонецФункции

Функция ПараметрыЗапускаТестирования()
	ПараметрыЗадания = Новый Структура("СписокОрганизаций, Организация, МассивОпераций, ПериодРегистрации, 
										|Период, Тестирование, КонтрольныеРегистры, АдресХранилища");
	ПараметрыЗадания.СписокОрганизаций = Новый СписокЗначений;
	ПараметрыЗадания.Организация = Неопределено;
	ПараметрыЗадания.МассивОпераций = Новый Массив;
	ПараметрыЗадания.ПериодРегистрации = ТекущаяДатаСеанса();
	ПараметрыЗадания.Период = ТекущаяДатаСеанса();
	ПараметрыЗадания.Тестирование = Истина;
	ПараметрыЗадания.Вставить("Этапы", ЭтапыДляТестирования().ВыгрузитьЗначения());
	ПараметрыЗадания.АдресХранилища = Неопределено;
	Возврат ПараметрыЗадания;
КонецФункции

#Область МетаданныеКТестированию

// Список этапов тестирования, которые могут использоваться при тестировании.
// Для них будут скинуты границы перед началом обработки тестирования и выполнены соответствующие задания из закрытия месяца в процессе обработки.
//
// Возвращаемое значение:
// СписокЗначений - список этапов, для которых может проводиться тестирование.
//
Функция ЭтапыДляТестирования() Экспорт
	
	ЭтапыДляТестирования = Новый СписокЗначений;
	ЭтапыДляТестирования.Добавить("ВзаиморасчетыСПартнерами", НСтр("ru = ' Взаиморасчеты с партнерами'"), Истина);
	ЭтапыДляТестирования.Добавить("Себестоимость", НСтр("ru = ' Себестоимость'"), Истина);
	ЭтапыДляТестирования.Добавить("НДС", НСтр("ru = ' Распределение НДС'"), Истина);
	//++ НЕ УТ
	ЭтапыДляТестирования.Добавить("УСН", НСтр("ru = ' Отражение доходов и расходов при УСН'"), Истина);
	ЭтапыДляТестирования.Добавить("РеглУчет", НСтр("ru = ' Отражение в регл. учете'"), Истина);
	//-- НЕ УТ
	
	Возврат ЭтапыДляТестирования;
	
КонецФункции

// Список регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// ВозвращаемоеЗначение:
//	Массив - массив имен метаданных.
Функция КонтрольныеРегистры(ВыбранныеЭтапы = Неопределено) Экспорт
	
	Если ВыбранныеЭтапы = Неопределено Тогда
		ВыбранныеЭтапы = ЭтапыДляТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	РегистрыКонтроля = Новый Массив;
	
	Если ВыбранныеЭтапы.Найти("ВзаиморасчетыСПартнерами") <> Неопределено Тогда // Взаиморасчеты
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.ПолноеИмя());
	КонецЕсли;
	
	Если ВыбранныеЭтапы.Найти("Себестоимость") <> Неопределено Тогда // Себестоимость
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя());
		
		// ПартионныйУчет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
		//++ НЕ УТ
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
		//-- НЕ УТ
	КонецЕсли;
	
	//++ НЕ УТ
	Если ВыбранныеЭтапы.Найти("УСН") <> Неопределено Тогда //УСН
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСН.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНТовары.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходовРаздел2.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	
	Если ВыбранныеЭтапы.Найти("НДС") <> Неопределено Тогда //НДС
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя());
		РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
	КонецЕсли;
	
	//++ НЕ УТ
	Если ВыбранныеЭтапы.Найти("РеглУчет") <> Неопределено Тогда //Регл. учет
		РегистрыКонтроля.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	КонецЕсли;
	//-- НЕ УТ
	
	Возврат РегистрыКонтроля;
	
КонецФункции

Функция КонтрольныеРегистры_21_21()
	
	РегистрыКонтроля = Новый Массив;
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.Закупки.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты.ПолноеИмя());
	//++ НЕ УТ
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя());
	//-- НЕ УТ
	Возврат РегистрыКонтроля;
КонецФункции

Функция КонтрольныеРегистры_21_22()
	
	РегистрыКонтроля = Новый Массив;
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	//++ НЕ УТ
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
	РегистрыКонтроля.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
	//-- НЕ УТ
	Возврат РегистрыКонтроля;
КонецФункции

#КонецОбласти // МетаданныеКТестированию

// Возвращает период самого первого движения по регистру "Себестоимость товаров".
// 
// ВозвращаемоеЗначение:
//	Период - Дата.
Функция СебестоимостьМинПериод() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(ДД.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|ИМЕЮЩИЕ
	|	НЕ (МИНИМУМ(ДД.Период) ЕСТЬ NULL)
	|");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Период = НачалоМесяца(ТекущаяДатаСеанса());
	Иначе
		Период = НачалоМесяца(Результат.Выгрузить()[0].Период);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТестироватьДоКонца(ПараметрыТестирования)
	
	РезультатТестирования = Новый Структура("Отказ, ДанныеРасхождений", Ложь, Новый Соответствие);
	ТестируемыйМесяц = ПараметрыТестирования.НачалоРасчета;
	КонецТестирования = ПараметрыТестирования.КонецРасчета;
	
	ФайлОтчета = Неопределено;
	ИмяФайла = ПолучитьИмяФайла(Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), Строка("_" + Новый УникальныйИдентификатор()));
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + ИмяФайла;
	
	ТолькоСравнитьС21 = ПараметрыТестирования.ТолькоСравнитьС21;
	СравнитьС21 = ПараметрыТестирования.Свойство("ХранилищеЭталонныхДанных21");
	ФайлОтчета21 = Неопределено;
	ИмяФайла21 = ПолучитьИмяФайла(Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"), Строка("_erp21_" + Новый УникальныйИдентификатор()));
	ПутьКФайлу21 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + ИмяФайла21;
	
	ПараметрыЗапуска = ПараметрыЗапускаТестирования();	
	Если ПараметрыТестирования.Свойство("Этапы") Тогда
		Этапы = СтрРазделить(ПараметрыТестирования.Этапы, ",");
		ПараметрыЗапуска.Вставить("Этапы", Этапы);
	КонецЕсли;
	
	Пока ТестируемыйМесяц < КонецТестирования Цикл
		ПараметрыЗапуска.Период = ТестируемыйМесяц;
		ПараметрыЗапуска.ПериодРегистрации = ТестируемыйМесяц;
		Расхождения = Неопределено;
		
		Если Не ТолькоСравнитьС21 Тогда
			Попытка
				Расхождения = ТестироватьУказанныйМесяц(ТестируемыйМесяц, ПараметрыЗапуска);
				Если ПараметрыЗапуска.Отказ Тогда
					РезультатТестирования.Отказ = Истина;
					СообщитьОбОшибке();
					Прервать;
				КонецЕсли;
			Исключение
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				ВызватьИсключение;
			КонецПопытки;
			ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТестируемыйМесяц, ПутьКФайлу);
			ЗаполнитьДанныеРасхожденийПоЭтапам(РезультатТестирования.ДанныеРасхождений, Расхождения, ТестируемыйМесяц);
			Если ЗначениеЗаполнено(Расхождения) И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если СравнитьС21 Тогда
			Попытка
				Расхождения = ТестироватьУказанныйМесяц21(ПараметрыТестирования.ХранилищеЭталонныхДанных21, ТестируемыйМесяц, ПараметрыЗапуска);
			Исключение
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				ВызватьИсключение;
			КонецПопытки;
			ЗафиксироватьРасхождения(ФайлОтчета21, Расхождения, ТестируемыйМесяц, ПутьКФайлу21);
			
			Если ЗначениеЗаполнено(Расхождения) И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
	КонецЦикла;
	
	ЗаписатьФайлОтчета(ФайлОтчета);
	Если ФайлОтчета <> Неопределено Тогда
		ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
		РезультатТестирования.Вставить("АдресХранилища", АдресХранилища);
		РезультатТестирования.Вставить("ЕстьРасхождения", Истина);
		УдалитьФайлОтчета(ПутьКФайлу);
	КонецЕсли;
	
	Для каждого ДанныеРасхожденийЭтапа из РезультатТестирования.ДанныеРасхождений Цикл
		
		ЗаписатьФайлОтчета(ДанныеРасхожденийЭтапа.Значение.Файл);
		ДанныеТестирования = Новый ДвоичныеДанные(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
		ДанныеРасхожденийЭтапа.Значение.Вставить("АдресХранилища", АдресХранилища);
		УдалитьФайлОтчета(ДанныеРасхожденийЭтапа.Значение.ПутьКФайлу);
		ДанныеРасхожденийЭтапа.Значение.Удалить("Файл");
		
	КонецЦикла;
	
	Если СравнитьС21 Тогда
		ЗаписатьФайлОтчета(ФайлОтчета21);
		Если ФайлОтчета21 <> Неопределено Тогда
			ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу21);
			АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
			РезультатТестирования.Вставить("АдресХранилища21", АдресХранилища);
			РезультатТестирования.Вставить("ЕстьРасхождения21", Истина);
			УдалитьФайлОтчета(ПутьКФайлу21);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьВременныеФайлы();
	Возврат РезультатТестирования;
	
КонецФункции

Функция ПолучитьИмяФайла(ДатаЗапуска = "", Идентификатор = "")
	Шаблон = "Complete_%DataTest%%UID%.xml";
	ИмяФайла = СтрЗаменить(Шаблон, "%DataTest%", ДатаЗапуска);
	ИмяФайла = СтрЗаменить(ИмяФайла, "%UID%", Идентификатор);
	Возврат ИмяФайла;
КонецФункции

Процедура СообщитьОбОшибке()
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Ошибка тестирования'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

Функция СоздатьФайлОтчета(ПутьКФайлу) Экспорт
	ФайлОтчета = Новый ЗаписьXML;
	ФайлОтчета.ОткрытьФайл(ПутьКФайлу);
	
	ФайлОтчета.ЗаписатьОбъявлениеXML();
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Корневой");
	Возврат ФайлОтчета;
КонецФункции

Процедура ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТекущийМесяц, ПутьКФайлу)
	Если ЗначениеЗаполнено(Расхождения) Тогда
		Если ФайлОтчета = Неопределено Тогда
			ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
		КонецЕсли;
		ФайлОтчета.ЗаписатьНачалоЭлемента("Период");
		СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ТекущийМесяц);
		ФайлОтчета.ЗаписатьТекст(СтрокаXML);
		Для Каждого Строка Из Расхождения Цикл
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
			ФайлОтчета.ЗаписатьТекст(СтрокаXML);
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("Записи");
			ФайлОтчета.ЗаписатьТекст(Строка.Значение.Записи);
			ФайлОтчета.ЗаписатьКонецЭлемента(); // записи

			ФайлОтчета.ЗаписатьКонецЭлемента(); // имя регистра
		КонецЦикла;
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Период
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанныеРасхожденийПоЭтапам(ДанныеЗаполнения, Расхождения, ТестируемыйМесяц)
	
	РегистрыВзаиморасчетов = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВзаиморасчетыСПартнерами"));
	РегистрыНДС = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НДС"));
	РегистрыУСН = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("УСН"));
	РегистрыРегл = КонтрольныеРегистры(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РеглУчет"));
	
	МассивЭтаповТекущегоПериода = Новый Массив;
	
	Если ЗначениеЗаполнено(Расхождения) Тогда
		
		Для каждого Строка из Расхождения Цикл
			
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтапТекущегоРасхождения = Неопределено;
			МетаданныеРасхождения = Неопределено;
			Если РегистрыВзаиморасчетов.Найти(Строка.Ключ) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "ВзаиморасчетыСПартнерами";
				МетаданныеРасхождения = "РегистрыНакопления.СебестоимостьТоваров";
			ИначеЕсли РегистрыНДС.Найти(Строка.Ключ) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "НДС";
				МетаданныеРасхождения = "РегистрыНакопления.НДСПредъявленный";
			//++ НЕ УТ
			ИначеЕсли РегистрыУСН.Найти(Строка.Ключ) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "УСН";
				МетаданныеРасхождения = "РегистрыНакопления.РасходыПриУСН";
			ИначеЕсли РегистрыРегл.Найти(Строка.Ключ) <> Неопределено Тогда
				ЭтапТекущегоРасхождения = "РеглУчет";
				МетаданныеРасхождения = "РегистрыБухгалтерии.Хозрасчетный";
			//-- НЕ УТ
			Иначе
				ЭтапТекущегоРасхождения = "Себестоимость";
				МетаданныеРасхождения = "РегистрыНакопления.СебестоимостьТоваров";
			КонецЕсли;
			
			ДанныеТекущегоЭтапа = Неопределено;
			Если ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения) = Неопределено Тогда
				ИмяФайла = "%ИмяЭтапа_%ДатаЭтапа_%Идентификатор.xml";
				ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяЭтапа", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ЭтапТекущегоРасхождения));
				ИмяФайла = СтрЗаменить(ИмяФайла, "%ДатаЭтапа", Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"));
				ИмяФайла = СтрЗаменить(ИмяФайла, "%Идентификатор", Строка(Новый УникальныйИдентификатор()));
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + ИмяФайла;
				ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
				СтруктураРасхожденийЭтапа = Новый Структура("Количество, Файл, ОбъектМетаданных, ПутьКФайлу", 0, ФайлОтчета, МетаданныеРасхождения, ПутьКФайлу);
				ДанныеЗаполнения.Вставить(ЭтапТекущегоРасхождения, СтруктураРасхожденийЭтапа);
			КонецЕсли;
			ДанныеТекущегоЭтапа = ДанныеЗаполнения.Получить(ЭтапТекущегоРасхождения);
			
			Если МассивЭтаповТекущегоПериода.Найти(ЭтапТекущегоРасхождения) = Неопределено Тогда
				ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("Период");
				СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ТестируемыйМесяц);
				ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(СтрокаXML);
				МассивЭтаповТекущегоПериода.Добавить(ЭтапТекущегоРасхождения);
			КонецЕсли;
			
			ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
			ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(СтрокаXML);
			
			ДанныеТекущегоЭтапа.Файл.ЗаписатьНачалоЭлемента("Записи");
			ДанныеТекущегоЭтапа.Файл.ЗаписатьТекст(Строка.Значение.Записи);
			ДанныеТекущегоЭтапа.Файл.ЗаписатьКонецЭлемента(); // записи

			ДанныеТекущегоЭтапа.Файл.ЗаписатьКонецЭлемента(); // имя регистра
			
			ДанныеТекущегоЭтапа.Количество = ДанныеТекущегоЭтапа.Количество + Строка.Значение.Количество;
			
		КонецЦикла;
		
		Для каждого ДанныеРасхожденийЭтапа из ДанныеЗаполнения Цикл
			
			Если МассивЭтаповТекущегоПериода.Найти(ДанныеРасхожденийЭтапа.Ключ) <> Неопределено Тогда
				ДанныеРасхожденийЭтапа.Значение.Файл.ЗаписатьКонецЭлемента(); // Период
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьФайлОтчета(ФайлОтчета)
	Если ФайлОтчета <> Неопределено Тогда
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Корневой
		ФайлОтчета.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьФайлОтчета(ПутьКФайлу)
	УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры

Процедура УдалитьВременныеФайлы()
	Граница = НачалоДня(ТекущаяДатаСеанса() - 86401); // Считаем, что тестирование не идет больше суток
	МассивФайлов = НайтиФайлы(КаталогВременныхФайлов(), ПолучитьИмяФайла("*"), Ложь);
	Для Каждого ВременныйФайл Из МассивФайлов Цикл
		Если ВременныйФайл.ПолучитьВремяИзменения() < Граница Тогда // файл несколько дней не изменялся
			Попытка
				УдалитьФайлы(ВременныйФайл.ПолноеИмя);
			Исключение
				// Специальная обработка не требуется. Файл занят другим приложенем, будет удален в другом сеансе.
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ТестироватьУказанныйМесяц(Месяц, ПараметрыРасчета)
	КонтрольныеРегистры = КонтрольныеРегистры(ПараметрыРасчета.Этапы);
	Расхождения = Неопределено;
		
	ВременныеТаблицы = Тестирование.СохранитьЭталонныеДанные(КонтрольныеРегистры, Месяц);
	
	УстановитьЗаданияКРасчетуНаДату(Месяц, ПараметрыРасчета.Этапы);
	
	ЗакрытиеМесяцаУТВызовСервера.РассчитатьЭтапы(ПараметрыРасчета);
	//++ НЕ УТ
	// УСН не включен в единый режим выполнения закрытия месяца, поэтому, если таковой этап требуется рассчитать, рассчитаем его отдельно:
	Если ПараметрыРасчета.Этапы.Найти("УСН") <> Неопределено Тогда
		ОрганизацииНаУСН = УчетнаяПолитикаПереопределяемый.ОрганизацииНаУСНЗаПериод(НачалоМесяца(Месяц), КонецМесяца(Месяц));
		ОперацииДляВыполнения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыРегламентныхОпераций.ПризнаниеРасходовПриУСН);
		Для каждого Организация из ОрганизацииНаУСН Цикл
			Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Месяц) Тогда
				Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(Месяц, ОперацииДляВыполнения, Организация);
			Иначе
				Параметры = Новый Структура("Организация, НачалоПериода, КонецПериода", Организация, НачалоМесяца(Месяц), КонецМесяца(Месяц));
				УчетУСНСервер.СторноДоходовКУДиРПоЕНВД(Параметры, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТ
	
	Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц);
	
	Возврат Расхождения;
КонецФункции

Функция ТестироватьУказанныйМесяц21(ХранилищеЭталонныхДанных21, Месяц, ПараметрыРасчета)
	ПартионныйУчетВерсии22 = ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
	Если ПартионныйУчетВерсии22 Тогда
		КонтрольныеРегистры = КонтрольныеРегистры_21_22();
	Иначе
		КонтрольныеРегистры = КонтрольныеРегистры_21_21();
	КонецЕсли;
	
	ДопустимоеОтклонение = 5;
	
	Расхождения = Неопределено;
	
	ДополнительныеПараметрыСравнения = Новый Структура;
	
	ТекстЗапроса = "";
	СохранитьЭталонныеДанные = Истина;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ПараметрыЗапроса = Новый Структура("НачалоПериода, КонецПериода, МассивРегистраторов, ОтборПоРегистраторам");
	ПараметрыЗапроса.МассивРегистраторов = Новый Массив();
	ПараметрыЗапроса.ОтборПоРегистраторам = Ложь;
	
	Если ЗначениеЗаполнено(Месяц) Тогда
		ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Месяц);
		ПараметрыЗапроса.КонецПериода = КонецМесяца(Месяц);
	Иначе
		ПараметрыЗапроса.НачалоПериода = Дата("00010101000000");
		ПараметрыЗапроса.КонецПериода = Дата("39991212235959");
	КонецЕсли;
	
	Если Лев(ХранилищеЭталонныхДанных21, 6) = "e1cib/" Тогда // если передан адрес хранилища
		ЭталонныеТаблицы = ПолучитьИзВременногоХранилища(ХранилищеЭталонныхДанных21);
		УдалитьИзВременногоХранилища(ХранилищеЭталонныхДанных21);
	Иначе
		ЭталонныеТаблицы = ОбщегоНазначения.ЗначениеИзСтрокиXML(ХранилищеЭталонныхДанных21).Получить();
	КонецЕсли;
	ЗапросДанных = Новый Запрос;
	Для Каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл
		
		ИмяРегистраПараметр = СтрЗаменить(КонтрольныйРегистр,".","_");
		ЭталоннаяТаблица = ЭталонныеТаблицы[ИмяРегистраПараметр];
		
		СтрокиКонтроля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйРегистр, ".", Ложь);
		ИмяКоллекцииМетаданных = СтрокиКонтроля[0];
		ИмяРегистра = СтрокиКонтроля[1];
		
		Если ИмяКоллекцииМетаданных = "РегистрНакопления" Тогда
			КоллекцияМетаданных = Метаданные.РегистрыНакопления[ИмяРегистра];
		ИначеЕсли ИмяКоллекцииМетаданных = "РегистрСведений" Тогда
			КоллекцияМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
		КонецЕсли;
		
		ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапроса();
		
		Для Каждого Поле Из КоллекцияМетаданных.Измерения Цикл
			Если ЭталоннаяТаблица.Колонки.Найти(Поле.Имя) = Неопределено Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Поле.Тип, Тип("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры")) Тогда
				ДополнительныеПараметры.ПоляКлючиКоторыеНужноРазвернуть.Добавить(Поле.Имя);
				Для Каждого МетаАналитика Из Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры.Реквизиты Цикл
					ПсевдонимПоля = Поле.Имя + МетаАналитика.Имя;
					Если ЭталоннаяТаблица.Колонки.Найти(ПсевдонимПоля) = Неопределено Тогда
						ДополнительныеПараметры.ИсключаемыеПоля.Вставить(ПсевдонимПоля);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Поле.Тип, Тип("СправочникСсылка.КлючиАналитикиУчетаПартий")) Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Поле Из КоллекцияМетаданных.Ресурсы Цикл
			Если ЭталоннаяТаблица.Колонки.Найти(Поле.Имя) = Неопределено Тогда
				ДополнительныеПараметры.ИсключаемыеПоля.Вставить(Поле.Имя);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.СгруппироватьПоИзмерениям = Истина;
		
		ТекстПоРегистру = Тестирование.СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам, ДополнительныеПараметры);
		
		Если ИмяРегистраПараметр = "РегистрСведений_СтоимостьТоваров"
			Или ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров" Тогда
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Стоимость", "Т.Стоимость + Т.СтоимостьЗабалансовая + Т.Трудозатраты + Т.ПостатейныеСНДС");
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("СтоимостьБезНДС", "Т.СтоимостьБезНДС + Т.СтоимостьЗабалансовая + Т.Трудозатраты + Т.ПостатейныеБезНДС");
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("СтоимостьРегл", "Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл + Т.ДопРасходыРегл + Т.ТрудозатратыРегл + ПостатейныеРегл");
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров"
			Или ИмяРегистраПараметр = "РегистрНакопления_ПартииНезавершенногоПроизводства" Тогда
			ЗаменаРегистратора = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА &ПартионныйУчет22
				|			И Т.Период >= &ДатаНачалаПУ22
				|			И ВЫРАЗИТЬ(Т.ВидЗапасов КАК Справочник.ВидыЗапасов).УдалитьНазначение.Заказ ССЫЛКА Документ.ЗаказДавальца
				|			И (Т.Регистратор ССЫЛКА Документ.ОтчетДавальцу
				|				ИЛИ Т.Регистратор ССЫЛКА Документ.ВыпускПродукции)
				|			ТОГДА ЗНАЧЕНИЕ(Документ.ОтчетДавальцу.ПустаяСсылка)
				|		ИНАЧЕ Т.Регистратор
				|	КОНЕЦ
				//|ИЗ РегистрНакопления.ПартииНезавершенногоПроизводства КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Регистратор", ЗаменаРегистратора);
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Регистратор", ЗаменаРегистратора);
		КонецЕсли;
		//-- НЕ УТКА
		
		Если ИмяРегистраПараметр = "РегистрНакопления_СебестоимостьТоваров" Тогда
			
			//++ НЕ УТ
			
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("РазделУчета",  "
			//|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ПартионныйУчет22
			|				И Т.Период >= &ДатаНачалаПУ22
			|				И Т.Регистратор ССЫЛКА Документ.ВыпускПродукции
			|				И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И ВЫРАЗИТЬ(Т.Регистратор КАК Документ.ВыпускПродукции).ВыпускПоРаспоряжениям
			|				И Т.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
			|		ИНАЧЕ Т.РазделУчета
			|	КОНЕЦ
			//|ИЗ	РегистрНакопления.СебестоимостьТоваров КАК Т
			|");
			
			ДополнительныеПараметры.УсловияОтбораДо = "
			//|ВЫБРАТЬ 1 ИЗ РегистрНакопления.СебестоимостьТоваров КАК Т ГДЕ
			|	НЕ &ПартионныйУчет22
			|	ИЛИ Период < &ДатаНачалаПУ22
			|	ИЛИ НЕ (Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
			|		И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты))";
			
			//-- НЕ УТ
			
			ДополнительныеПараметры.УсловияОтбораПосле = "
			|	РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)";
			
			//++ НЕ УТ
			ДополнительныеПараметры.УсловияОтбораПосле = ДополнительныеПараметры.УсловияОтбораПосле + "
			|	И (НЕ &ПартионныйУчет22
			|		ИЛИ Период < &ДатаНачалаПУ22
			|		ИЛИ (НЕ (Регистратор ССЫЛКА Документ.ОтчетПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
			|				И КорРазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))
			|			И НЕ (Регистратор ССЫЛКА Документ.ОтчетПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))
			|			И НЕ (Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика
			|				И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство))))";
			//-- НЕ УТ
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеАктивыПассивы" Тогда
			ДополнительныеПараметры.УсловияОтбораПосле = "
			//|ВЫБРАТЬ 1 ИЗ РегистрНакопления.ПрочиеАктивыПассивы КАК Т ГДЕ
			|	ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.ПустаяСсылка)";
			ДополнительныеПараметры.ИсключаемыеПоля.Вставить("ВидДвижения");
			ЗаменаСуммы = "
			//|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|			ТОГДА -Т.Сумма
			|		ИНАЧЕ Т.Сумма
			|	КОНЕЦ
			//|ИЗ	РегистрНакопления.ПрочиеАктивыПассивы КАК Т
			|";
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Сумма", ЗаменаСуммы);
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Сумма", ЗаменаСуммы);
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_Закупки" Тогда
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Партнер","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		ИНАЧЕ Т.Партнер
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
			 ДополнительныеПараметры.ЗаменыПолей21.Вставить("Контрагент","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ Т.Контрагент
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Договор","
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				|		ИНАЧЕ Т.Договор
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.Закупки КАК Т
				|");
		КонецЕсли;
		
		Если ИмяРегистраПараметр = "РегистрНакопления_ФинансовыеРезультаты" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы)
				|			ИЛИ Т.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ФинансовыеРезультаты КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеДоходы" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ПрочиеДоходы КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		Если ИмяРегистраПараметр = "РегистрНакопления_ПрочиеРасходы" Тогда
			ТекстЗамены = "
				//|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Т.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				|		ИНАЧЕ Т.Подразделение
				|	КОНЕЦ
				//|ИЗ	РегистрНакопления.ПрочиеРасходы КАК Т
				|";
			ДополнительныеПараметры.ЗаменыПолей21.Вставить("Подразделение", ТекстЗамены);
			ДополнительныеПараметры.ЗаменыПолей22.Вставить("Подразделение", ТекстЗамены);
		КонецЕсли;
		ТекстПоРегистру = СтрЗаменить(ТекстПоРегистру, КонтрольныйРегистр, "&" + ИмяРегистраПараметр);
		ТекстЗапроса = ТекстЗапроса + ТекстПоРегистру;
		ЗапросДанных.УстановитьПараметр(ИмяРегистраПараметр, ЭталоннаяТаблица);
		
		ДополнительныеПараметры.ДопустимоеОтклонение = ДопустимоеОтклонение;
		
		ДополнительныеПараметрыСравнения.Вставить(ИмяРегистраПараметр, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ЗапросДанных.Текст = ТекстЗапроса;
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Начато сохранение эталонных данных ERP 2.1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ЗапросДанных.ВыполнитьПакет();
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Тестирование.Завершено сохранение эталонных данных ERP 2.1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц,,ДополнительныеПараметрыСравнения);
	
	Возврат Расхождения;
КонецФункции

Процедура УстановитьЗаданияКРасчетуНаДату(Период, ВыбранныеЭтапы = Неопределено)
	
	Если ВыбранныеЭтапы = Неопределено Тогда
		ВыбранныеЭтапы = ЭтапыДляТестирования().ВыгрузитьЗначения();
	КонецЕсли;
	
	Для Каждого ЭтапРасчета Из ВыбранныеЭтапы Цикл
		Если ЭтапРасчета = "Себестоимость" Тогда
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Период); // по всем организациям
		КонецЕсли;
		
		Если ЭтапРасчета = "ВзаиморасчетыСПартнерами" Тогда
			РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьЗаписьРегистра(Период); // по всем организациям
			РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьЗаписьРегистра(Период); // по всем организациям
		КонецЕсли;
			
		Если ЭтапРасчета = "НДС" Тогда
			
			// Задания к распределению НДС
			ВыборкаДокументовРаспределенияНДС = ДокументыРаспределенияНДС(Период).Выбрать();
			Пока ВыборкаДокументовРаспределенияНДС.Следующий() Цикл
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(Период,, ВыборкаДокументовРаспределенияНДС.Организация, Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
			КонецЦикла;
			
			// Задания по формированию НДСПредъявленный, КнигиПокупок, КнигиПродаж
			ВыборкаЗаданийКФормированиюНДС = ЗаданияКФормированиюНДС(Период).Выбрать();
			РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаЗаданийКФормированиюНДС);
			
		КонецЕсли;
		
		//++ НЕ УТ
		Если ЭтапРасчета = "УСН" Тогда
			// для расчета по усн не обязательно обновлять задания к закрытию месяца, так как предусмотрено безусловное выполнение.
		КонецЕсли;
		
		Если ЭтапРасчета = "РеглУчет" Тогда
			ОтражаемыеТипы = Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.СтандартныеРеквизиты.Регистратор.Тип.Типы();
			ТипыДокументовКПоследовательномуОтражению = РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению();
			ИсключаемыеТипы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ТипыДокументовКПоследовательномуОтражению);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ИсключаемыеТипы.Удалить(ИсключаемыеТипы.Количество() - 1);
			ТипыДляСнятияОтражения = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОтражаемыеТипы, ИсключаемыеТипы);	
			РегистрыСведений.ОтражениеДокументовВРеглУчете.ЗарегистрироватьДокументыКОтражению(НачалоМесяца(Период), КонецМесяца(Период), , ТипыДляСнятияОтражения);
		КонецЕсли;
		//-- НЕ УТ
		
	КонецЦикла;
КонецПроцедуры

Функция РазобратьСтрокуВПараметры(ПараметрЗапуска)
	
	СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(ПараметрЗапуска);
	
	Если СтруктураПараметров.Свойство("РабочийКаталог") Тогда
		РабочийКаталог = СтруктураПараметров.РабочийКаталог;
	Иначе
		РабочийКаталог = КаталогВременныхФайлов() 
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НачалоРасчета") Тогда
		НачалоРасчета = Дата(СтруктураПараметров.НачалоРасчета);
	Иначе
		НачалоРасчета = СебестоимостьМинПериод();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("КонецРасчета") Тогда
		КонецРасчета = Дата(СтруктураПараметров.КонецРасчета);
	Иначе
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОстанавливатьсяПриРасхождениях") Тогда
		ОстанавливатьсяПриРасхождениях = Булево(СтруктураПараметров.ОстанавливатьсяПриРасхождениях);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ТолькоСравнитьС21") Тогда
		ТолькоСравнитьС21 = Булево(СтруктураПараметров.ТолькоСравнитьС21);
	Иначе
		ТолькоСравнитьС21 = Ложь;
	КонецЕсли;
	ПараметрыТестирования = Новый Структура();
	ПараметрыТестирования.Вставить("НачалоРасчета", НачалоРасчета);
	ПараметрыТестирования.Вставить("КонецРасчета", КонецРасчета);
	ПараметрыТестирования.Вставить("РабочийКаталог", РабочийКаталог);
	ПараметрыТестирования.Вставить("ОстанавливатьсяПриРасхождениях", ОстанавливатьсяПриРасхождениях);
	ПараметрыТестирования.Вставить("ТолькоСравнитьС21", ТолькоСравнитьС21);
	Если СтруктураПараметров.Свойство("Этапы") И ЗначениеЗаполнено(СтруктураПараметров.Этапы) Тогда
		ПараметрыТестирования.Вставить("Этапы", СтруктураПараметров.Этапы);
	КонецЕсли;
	
	Возврат ПараметрыТестирования;
КонецФункции

Функция ЗаданияКФормированиюНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСПредъявленный.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация";
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыРаспределенияНДС(Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНДС.Ссылка,
	|	РаспределениеНДС.Организация
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	РаспределениеНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспределениеНДС.Проведен
	|	И РаспределениеНДС.ВыручкаНДС + РаспределениеНДС.ВыручкаНеНДС + РаспределениеНДС.ВыручкаЕНВД + РаспределениеНДС.ВыручкаНДС0 + РаспределениеНДС.ВыручкаНДС0СырьевыеТоварыУслуги + РаспределениеНДС.ВыручкаНДС0НесырьевыеТовары <> 0";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
