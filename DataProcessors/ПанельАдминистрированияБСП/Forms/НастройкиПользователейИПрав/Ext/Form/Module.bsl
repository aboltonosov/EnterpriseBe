#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",            Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	РежимРаботы.Вставить("БазоваяВерсия",                        ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	
	Элементы.ГруппаОграничиватьДоступНаУровнеЗаписей.Видимость 		= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаПартнеров.Видимость 	= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаНоменклатуры.Видимость 	= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаФизЛиц.Видимость 		=
		НЕ РежимРаботы.БазоваяВерсия И РежимРаботы.СоставНабораКонстантФормы.Свойство("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица");
	Элементы.ГруппаКопированиеНастроекПользователей.Видимость 		= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаОчисткаНастроекПользователей.Видимость			= РежимРаботы.БазоваяВерсия;
	Элементы.ПрофилиГруппДоступа.Видимость 							= НЕ РежимРаботы.БазоваяВерсия;
	
	Если Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Элементы.ГруппаНастройкиВхода.Видимость = Ложь;
		Элементы.ГоризонтальныйОтступ2.Видимость = Ложь;
		Элементы.ГруппаНастройкиВходаВнешнихПользователей.Видимость = Ложь;
		Элементы.ГруппаВнешниеПользователи.Группировка
			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	 Или СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		Элементы.ГруппаВнешниеПользователи.Видимость = Ложь;
		Элементы.ОписаниеРаздела.Заголовок =
			НСтр("ru = 'Администрирование пользователей, настройка групп доступа, управление пользовательскими настройками.'");
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		Элементы.ИспользоватьГруппыПользователей.Доступность = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		УпрощенныйИнтерфейс = МодульУправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа();
		Элементы.ГруппыДоступа.Видимость       = НЕ УпрощенныйИнтерфейс;
		Элементы.ГруппыПользователей.Видимость = НЕ УпрощенныйИнтерфейс;
		
		Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
			Элементы.ОграничиватьДоступНаУровнеЗаписей.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ИспользоватьГруппыДоступаПартнеров",
	      НСтр("ru = 'Группы доступа контрагентов'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ПояснениеИспользоватьГруппыДоступаПартнеров",
	      НСтр("ru = 'Деление контрагентов на группы, по которым можно назначать пользователям права на добавление (изменение), просмотр контрагентов и всех документов по этим контрагентам.'"),
	      РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ОткрытьГруппыДоступаПартнеров",
	      НСтр("ru = 'Группы доступа контрагентов'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ПояснениеОткрытьГруппыДоступаПартнеров",
	      НСтр("ru = 'Создание групп доступа контрагентов.'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
		  
	ИспользоватьБюджетирование = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование");
	Элементы.ГруппаИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов.Видимость = ИспользоватьБюджетирование;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьГруппыПользователейПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейПриИзменении(Элемент)
	
	Если НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
		
		ТекстВопроса =
			НСтр("ru = 'Включить ограничение доступа на уровне записей?
			           |
			           |Потребуется заполнение данных, которое будет выполняться частями
			           |регламентным заданием ""Заполнение данных для ограничения доступа""
			           |(ход выполнения в журнале регистрации).
			           |
			           |Выполнение может сильно замедлить работу программы и выполняться
			           |от нескольких секунд до многих часов (в зависимости от объема данных).'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение",
				ЭтотОбъект, Элемент),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнихПользователейПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьВнешнихПользователей Тогда
		
		ТекстВопроса =
			НСтр("ru = 'Разрешить доступ внешним пользователям?
			           |
			           |При входе в программу список выбора пользователей станет пустым
			           |(реквизит ""Показывать в списке выбора"" в карточках всех
			           | пользователей будет очищен и скрыт).'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстВопроса =
			НСтр("ru = 'Запретить доступ внешним пользователям?
			           |
			           |Реквизит ""Вход в программу разрешен"" будет
			           |очищен в карточках всех внешних пользователей.'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СправочникВнешниеПользователи(Команда)
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаПользователей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаВнешнихПользователей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьНастройкиВнешнихПользователей", Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	МассивИменКонстант = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Для Каждого КонстантаИмя Из МассивИменКонстант Цикл
		Если КонстантаИмя <> "" Тогда
			Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ОграничиватьДоступНаУровнеЗаписей = Ложь;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнихПользователейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ИспользоватьВнешнихПользователей = Ложь;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	МассивИменКонстант = Новый Массив;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	НачатьТранзакцию();
	Попытка
		
		КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
		МассивИменКонстант.Добавить(КонстантаИмя);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат МассивИменКонстант;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		ТекущееЗначение  = КонстантаМенеджер.Получить();
		
		Если ТекущееЗначение <> КонстантаЗначение Тогда
			Попытка
				КонстантаМенеджер.Установить(КонстантаЗначение);
			Исключение
				НаборКонстант[КонстантаИмя] = ТекущееЗначение;
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнешнихПользователей" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" Тогда
		
		Если Не НаборКонстант.ИспользоватьГруппыДоступаПартнеров 
			  И НаборКонстант.ИспользоватьВнешнихПользователей 
			  И НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
			
			Константы.ИспользоватьГруппыДоступаПартнеров.Установить(Истина);
		КонецЕсли;	
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаПартнеров");
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнешнихПользователей" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьВнешниеПользователи.Доступность         = НаборКонстант.ИспользоватьВнешнихПользователей;
		Элементы.НастройкиВходаВнешнихПользователей.Доступность = НаборКонстант.ИспользоватьВнешнихПользователей;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьГруппыДоступаПартнеров" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаПартнеров.Доступность = НаборКонстант.ИспользоватьГруппыДоступаПартнеров;
		Элементы.ГруппаИспользоватьГруппыДоступаПартнеров.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		Элементы.ГруппаИспользоватьГруппыДоступаПартнеровЛево.Доступность = НЕ НаборКонстант.ИспользоватьВнешнихПользователей;
		Элементы.ГруппаКомментарийИспользоватьГруппыДоступаПартнеров.Видимость = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей И НаборКонстант.ИспользоватьВнешнихПользователей;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ИспользоватьГруппыДоступаПартнеров.Доступность    = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		//++ НЕ УТ 		
		Элементы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		//-- НЕ УТ
		
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаПартнеров");
		//++ НЕ УТ		
		УстановитьДоступность("НаборКонстант.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица");
		//-- НЕ УТ	
		
	КонецЕсли;
	
	//++ НЕ УТ	
	Если РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаФизЛиц.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица;
	КонецЕсли;
	//-- НЕ УТ
	
	Если РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ИспользоватьГруппыДоступаНоменклатуры.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры");
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаНоменклатуры.Доступность = НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры;
	КонецЕсли;
	
	//++ НЕ УТ	
	Если РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов");
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаВидовБюджетов.Доступность = НаборКонстант.ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов;
		Элементы.ОткрытьГруппыДоступаСтатейИПоказателейБюджетов.Доступность = НаборКонстант.ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетов;
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаПартнеров(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаПартнеров.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаФизЛиц(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаФизическихЛиц.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейФизическиеЛицаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДоступаПартнеровПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаНоменклатуры(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаНоменклатуры.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДоступаНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура ОткрытьГруппыДоступаСтатейИПоказателейБюджетов(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаСтатейИПоказателейБюджетов.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДоступаСтатейИПоказателейБюджетовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаВидовБюджетов(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаВидовБюджетов.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДоступаВидовСтатейИПоказателейБюджетовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти
