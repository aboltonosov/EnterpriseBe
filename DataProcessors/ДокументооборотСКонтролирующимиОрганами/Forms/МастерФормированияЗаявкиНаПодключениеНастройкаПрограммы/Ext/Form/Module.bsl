&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем РеквизитыДокумента;

&НаКлиенте
Перем Статус;

&НаКлиенте
Перем СпецоператорСвязи;

&НаКлиенте
Перем ИдентификаторДокументооборота;

&НаКлиенте
Перем РеквизитыДокументаДляЗаписи;

&НаКлиенте
Перем Результат;

&НаКлиенте
Перем СписокСтатей;

&НаКлиенте
Перем СсылкаНаДокумент;

&НаКлиенте
Перем ДатаПолученияОтвета;

&НаКлиенте
Перем ПараметрыЗапускаПодключениеЭДО;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторАбонента 			= Параметры.ИдентификаторАбонента;
	НовыйСтатусДокумента  			= Параметры.НовыйСтатусДокумента;
	ОтпечатокСертификатаИзОтвета	= Параметры.ОтпечатокСертификатаИзОтвета;

	ЭтоВторичноеЗаявление 	   = ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	ПодключитьЭДО 			   = ДокументЗаявление.ПодключитьЭДО;
	ТребуетсяПолучениеРасписки = ДокументЗаявление.ПодписатьЭП И НовыйСтатусДокумента = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено;
	
	
	Если НовыйСтатусДокумента = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено 
		И ТребуетсяПолучениеРасписки И ЭтоВторичноеЗаявление Тогда
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторАбонента) Тогда
			ИдентификаторАбонента = Параметры.ИдентификаторАбонента;
		Иначе
			ИдентификаторАбонента = Сред(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "УчетнаяЗапись.ИдентификаторАбонента"), 4);
		КонецЕсли;
		Результат = ПолучитьФайлАвтонастройки(Параметры.Ключ.СпецоператорСвязи, ИдентификаторАбонента);
		
		Если Результат.Выполнено Тогда
			Сертификаты = ПолучитьСертификатыИзФайлаНастройки(Результат.Настройки);
			Для Каждого Сертификат Из Сертификаты Цикл
				Если Врег(Сертификат.Хранилище) = "MY" Тогда
					НовыйСертификат = Сертификат.Сертификат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ПечатьСертификатаНаСервере(Расписка, НовыйСертификат);
		
		Сертификат = ДокументЗаявление.Ссылка.Сертификат.Получить();
		АдресСертификата                = ПоместитьВоВременноеХранилище(НовыйСертификат, УникальныйИдентификатор);
		
		Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобреноТребуетсяРасписка;
		
		СканРасписка = "Выберите файл";
	КонецЕсли;
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	НастроитьВнешнийВидЭлементовУправления();
	
	НастройкаПользователей();
	
КонецПроцедуры     

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Закрыть.Заголовок = "Закрыть" 
		ИЛИ Элементы.Закрыть.Заголовок = "Завершить подключение к 1С-ЭДО" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	Если ПодключитьЭДО 
		И НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено")
		И Элементы.Закрыть.Заголовок = "Завершить подключение к 1С-ЭДО" Тогда
		
		// попытка отмены завершения подключения к 1С-ЭДО
		ТекстПредупреждения = НСтр("ru = 'Закрыть мастер без подключения к сервису 1С-ЭДО?'");

	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?'");
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьБланкСертификата(Команда)
	
	ПечатныеФормы = Новый Массив;
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ТабличныйДокумент", Расписка);
	ПечатнаяФорма.Вставить("ПолныйПутьКМакету", "");
	ПечатнаяФорма.Вставить("ИмяМакета", "");
	ПечатнаяФорма.Вставить("Экземпляров", 1);
	ПечатнаяФорма.Вставить("ИмяФайлаПечатнойФормы", "");
	ПечатнаяФорма.Вставить("СинонимМакета", "Сертификат");
	
	ПечатныеФормы.Добавить(ПечатнаяФорма);
	
	УправлениеПечатьюКлиент.ПечатьДокументов(ПечатныеФормы, Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СканРаспискаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МаксимальныйРазмерФайла = 10 * 1024 * 1024 * 1024;
	ДопустимыеТипыФайлов = "png;jpg;jpeg;pdf";
				
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	ПараметрыДобавления.Вставить("ВозвращатьРазмер", Истина);
	ПараметрыДобавления.Вставить("ДопустимыеТипыФайлов", ДопустимыеТипыФайлов);
			
	
	Оповещение = Новый ОписаниеОповещения("СканРаспискаПослеДобавленияФайлов", ЭтотОбъект);
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Сведения о сертификате>", ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг1 И Не ТребуетсяПолучениеРасписки Тогда
		
		ВыполнитьЗавершениеПодключения();
		
	ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг1_1 Тогда
		
		Если Элементы.ГруппаРасписка.ТекущаяСтраница = Элементы.ГруппаРаспискаПодписаниеЭП Тогда
			ПодписатьРасписку();
		ИначеЕсли Элементы.ГруппаРасписка.ТекущаяСтраница = Элементы.ГруппаРаспискаПодписаниеРукой Тогда
			
			Если Не ЗначениеЗаполнено(ФайлСканРасписка) Тогда
				ТекстСообщения = НСтр("ru = 'Укажите скан-копию подписанного бланка сертификата'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СканРасписка");
				Возврат;
			КонецЕсли;
			
			ПрисоединитьФайлРаспискиКДокументу(ФайлСканРасписка.Адрес, Неопределено);
			Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
			ОтправитьРасписку(Оповещение);
			
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг1 И ТребуетсяПолучениеРасписки Тогда
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг1_1;
		Элементы.ГруппаРасписка.ТекущаяСтраница = Элементы.ГруппаРаспискаПодписаниеЭП;
		КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
				
	ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг2 Тогда
		
		ОбработатьВыборПользователейУчетнойЗаписи(Результат);
		
	Иначе
		
		КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	
	Если ЭтоВторичноеЗаявление Тогда
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://its.1c.ru/bmk/elreps/settings");
	Иначе
		КонтекстЭДОКлиент.ОткрытьИнструкциюПоПодключениюК1СОтчетности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидеоПоПодключению(Команда)
	КонтекстЭДОКлиент.ОткрытьВидеоИнструкциюПоПодключениюК1СОтчетности();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления = Неопределено)
	
	Результат = СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи);
	Если Не Результат.Выполнено Тогда
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Выполнено", Ложь);
	Попытка
		ДатаПоследнегоОбновления = ?(ЗначениеЗаполнено(ДатаПоследнегоОбновления), ДатаПоследнегоОбновления, Дата(1, 1, 1));
		Ответ = Результат.КлиентСервиса.ReceiveUpdatedPacket(ИдентификаторАбонента, ДатаПоследнегоОбновления);
		ОтветXDTO = Дессериализовать(Ответ);
		
		Результат = ОбработатьОтвет(ОтветXDTO);
		Если Результат.Выполнено Тогда
			Если Результат.ОбновлениеНеТребуется Тогда
				// получить файл из регистра
			Иначе
				Файлы = Разархивировать(ПоместитьВоВременноеХранилище(Результат.Пакет));
				Если Файлы.Количество() = 1 Тогда
					
					НастройкаXDTO = Дессериализовать(Файлы[0].Адрес);
					
					КонфЧасть = НастройкаXDTO.КонфиденциальнаяИнформация;
					
					РезультатВыполнения.Вставить("Выполнено", Истина);
					РезультатВыполнения.Вставить("КонфиденциальнаяИнформация", ПоместитьВоВременноеХранилище(Base64Значение(НастройкаXDTO.КонфиденциальнаяИнформация), Новый УникальныйИдентификатор));
					РезультатВыполнения.Вставить("Настройки", Файлы[0].Адрес);
					
					Возврат РезультатВыполнения;
					
				Иначе
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи)
	
	Результат = Новый Структура("Выполнено", Истина);
	
	ИменаПараметров = "ВебСервисОпределение,ВебСервисURIПространстваИменСервиса,ВебСервисИмяСервиса,ВебСервисИмяТочкиПодключения";
	ПараметрыСпецоператораСвязи = ПолучитьПараметрыСпецоператораСвязи(СпецоператорСвязи, ИменаПараметров);
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL 				= ПараметрыСпецоператораСвязи.ВебСервисОпределение;
	ПараметрыПодключения.URIПространстваИмен 	= ПараметрыСпецоператораСвязи.ВебСервисURIПространстваИменСервиса;
	ПараметрыПодключения.ИмяСервиса 			= ПараметрыСпецоператораСвязи.ВебСервисИмяСервиса;
	ПараметрыПодключения.ИмяТочкиПодключения 	= ПараметрыСпецоператораСвязи.ВебСервисИмяТочкиПодключения;
	ПараметрыПодключения.ИмяПользователя 		= "";
	ПараметрыПодключения.Пароль 				= "";
	ПараметрыПодключения.Таймаут 				= 20;
	
	Попытка
		КлиентаСервиса = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Результат.Вставить("КлиентСервиса", КлиентаСервиса);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			"Электронный документооборот с контролирующими органами.Создание клиента сервиса",
		    УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Выполнено = Истина;
 		Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

// Функция - Получить параметры спецоператора связи
//
// Параметры:
//  СпецоператорСвязи - ПеречислениеСсылка.СпецоператорыСвязи - спецоператор связи, 
//                      для которого необходимо получить параметры. 
//  ИменаПараметров   - Строка - имена параметров перечисленные через запятую. 
// 
// Возвращаемое значение:
//  Структура - значения параметров
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыСпецоператораСвязи(СпецоператорСвязи, ИменаПараметров)
	
	ПараметрыСпецоператораСвязи = Новый Структура;
	
	Если Не ЗначениеЗаполнено(СпецоператорСвязи) Тогда
		Возврат ПараметрыСпецоператораСвязи;
	КонецЕсли;
	
	ИмяСтроки = XMLСтрока(СпецоператорСвязи);
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Макет = КонтекстЭДО.ПолучитьМакет("ПараметрыСпецоператоровСвязи");
	
	СписокИменПараметров = СтрРазделить(ИменаПараметров, ",");
	Для Каждого ИмяПараметра Из СписокИменПараметров Цикл
		ИмяКолонки = СокрЛП(ИмяПараметра);
		ПараметрыСпецоператораСвязи.Вставить(ИмяКолонки, СокрЛП(Макет.Область(ИмяСтроки + "|" + ИмяКолонки).Текст));	
	КонецЦикла;
	
	Возврат ПараметрыСпецоператораСвязи;
	
КонецФункции

&НаСервереБезКонтекста
Функция Разархивировать(ИмяИлиАдресФайлаАрхива) Экспорт

	Если ЭтоАдресВременногоХранилища(ИмяИлиАдресФайлаАрхива) Тогда
		ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
		ПолучитьИзВременногоХранилища(ИмяИлиАдресФайлаАрхива).Записать(ИмяФайлаАрхива);
		ВернутьКакАдрес = Истина;	
	Иначе
		ИмяФайлаАрхива = ИмяИлиАдресФайлаАрхива;
		ВернутьКакАдрес = Ложь;
	КонецЕсли;
	
	КаталогДляИзвлечения = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогДляИзвлечения);
	
	
	Файлы = НайтиФайлы(КаталогДляИзвлечения, "*"); 
	
	ОписанияФайлов = Новый Массив;
	Для Каждого Файл Из Файлы Цикл
		ОписаниеФайла = Новый Структура;
		Если ВернутьКакАдрес Тогда
			ОписаниеФайла.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый УникальныйИдентификатор));			
		Иначе
			ОписаниеФайла.Вставить("Путь", Файл.Путь);
		КонецЕсли;
		ОписаниеФайла.Вставить("Имя", Файл.Имя);
		ОписанияФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если ВернутьКакАдрес Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогДляИзвлечения);
	КонецЕсли;
	
	Возврат ОписанияФайлов;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьОтвет(ОтветXDTO)
	
	Результат = Новый Структура("Выполнено,ОбновлениеНеТребуется", Ложь, Ложь);
	Если ОтветXDTO.code = "0" Тогда
		
		Если ОтветXDTO.Свойства().Получить("packet") <> Неопределено Тогда
			Результат.Выполнено = Истина;
			Результат.Вставить("Пакет", Base64Значение(ОтветXDTO.packet));
		ИначеЕсли ОтветXDTO.Свойства().Количество() = 1 Тогда  // в ответе только code 0

		Иначе
			ВызватьИсключение(НСтр("ru = 'Неизвестная структура ответа'"));			
		КонецЕсли;
		
		// message: Ошибка запроса. Не найдено заявление (обновление) для документооборота (абонента): {0}
		// description: Ответ (обновление) еще не сформирован(о).
	ИначеЕсли ОтветXDTO.code = "1" Тогда // Заявление еще обрабатывается
		
		// message: Ошибка сервера. Сервер обновления временно не доступен, повторите операцию позже.
		// description: Ошибка при получении ответа или обновления от сервера.
		
		//ИначеЕсли ОтветXDTO.Code = "17" Тогда // ошибка??
	ИначеЕсли ОтветXDTO.code = "11" Тогда
		//версия файла на сервер и в  кэше клиент совпала, скачивать не требуется
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("ОбновлениеНеТребуется", Истина);
	ИначеЕсли ОтветXDTO.code = "94" Тогда // временная проблема с сервером КА
	Иначе // Ошибка обработки заявление - автоматически отказ
		//Результат.Отклонено	= Истина;
		//Результат.Комментарий = ПакетXDTO.errorMessage;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ОписаниеОшибки", ОтветXDTO.errorMessage);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Дессериализовать(ТекстXML, Фабрика = Неопределено) Экспорт
	
	УдалитьФайл = Ложь;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если Найти(ТекстXML, "<") > 0 Тогда
		ЧтениеXML.УстановитьСтроку(ТекстXML);
	Иначе
		ИмяФайла = ТекстXML;
		Если ЭтоАдресВременногоХранилища(ТекстXML) Тогда
			УдалитьФайл = Истина;
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ПолучитьИзВременногоХранилища(ТекстXML).Записать(ИмяФайла);
		КонецЕсли;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	КонецЕсли;
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если Фабрика = Неопределено Тогда
		Фабрика = ФабрикаXDTO;
	КонецЕсли;
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Если УдалитьФайл Тогда
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСертификатыИзФайлаНастройки(АдресФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ПолучитьИзВременногоХранилища(АдресФайла).Записать(ИмяВременногоФайла);
	
	НастройкиXDTO = Дессериализовать(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Сертификаты = Новый Массив;
	Для Каждого СертификатXDTO Из НастройкиXDTO.Сертификаты.Сертификат Цикл
		Сертификат = Новый Структура;
		Сертификат.Вставить("Сертификат", Base64Значение(СертификатXDTO.Последовательность().ПолучитьТекст(0)));
		Сертификат.Вставить("Отпечаток", СертификатXDTO.Отпечаток);
		Сертификат.Вставить("Хранилище", СертификатXDTO.Хранилище);
		
		Сертификаты.Добавить(Сертификат);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗавершениеПодключения()
	
	Результат = Ложь;
	
	Если Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобрено
		ИЛИ Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОшибкаПодключенияКСерверу
		ИЛИ Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобреноТребуетсяРасписка Тогда
		
		ДатаПолученияОтвета 			= ДатаПолученияОтвета(); // серверный вызов для соблюдения стандарта работы в разных часовых поясах
		ПараметрыОбработатьОбновление 	= КонтекстЭДОКлиент.ПараметрыОбработатьОбновление();
		ПараметрыОбработатьОбновление.ЭтоЭлектроннаяПодписьВМоделиСервиса 	= ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса;
		ОписаниеОповещения 				= Новый ОписаниеОповещения("КоманднаяПанельМастерДалееШаг1Завершение", ЭтотОбъект, ПараметрыОбработатьОбновление);
		
		КоманднаяПанельМастерДалееШаг1Завершение(ПараметрыОбработатьОбновление);
		
	Иначе 
		
		// Если статус заявления - "Отклонено", тогда создаем новое заявление
		СоздатьНовоеЗаявление();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку()
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьРаспискуПослеПодписания", ЭтотОбъект);
	КриптографияЭДКОКлиент.ПодписатьPKCS7(
		Оповещение, 
		Сертификат,
		АдресСертификата, 
		Ложь, 
		ПоместитьВоВременноеХранилище(, УникальныйИдентификатор),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРаспискуПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ПрисоединитьФайлРаспискиКДокументу(АдресСертификата, Результат.ФайлПодписи);
		Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
		ОтправитьРасписку(Оповещение);
		Возврат;	 	
	Иначе
		ТекстВопроса  = СтрШаблон(
			НСтр("ru = 'Не удалось выполнить подписание сертификата электронной подписью по причине:
                  |%1
                  |
                  |Подписать бланк сертификата рукописной подписью и отправить скан-копию?'"),
			Результат.ОписаниеОшибки);
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписку()
	
	ФайлыРасписки = Новый Структура;
	
	ПрисоединенныйФайл = Неопределено;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.Документ = "Расписка" Тогда
			ПрисоединенныйФайл = ЭлектронныйДокумент.Файл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("Имя", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор() + ".bin");
	СвойстваФайла.Вставить("Адрес", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	СвойстваФайла.Вставить("Расширение", ДанныеФайла.Расширение);
	
	ФайлыРасписки.Вставить("Расписка", СвойстваФайла);
	
	Если ДанныеФайла.ПодписанЭП Тогда
		Адрес = ПоместитьВоВременноеХранилище(ПрисоединенныйФайл.ЭлектронныеПодписи[0].Подпись.Получить(), УникальныйИдентификатор);
		
		СвойстваФайла = Новый Структура;
		СвойстваФайла.Вставить("Имя", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор() + ".bin");
		СвойстваФайла.Вставить("Адрес", Адрес);
		СвойстваФайла.Вставить("Расширение", "bin");
		
		ФайлыРасписки.Вставить("Подпись", СвойстваФайла);
	КонецЕсли;
	
	Возврат ФайлыРасписки;
		
КонецФункции

&НаСервере
Функция ПодготовитьРаспискуКОтправке()
	
	ФайлыРасписки = ПолучитьРасписку();
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("пакет");
	ЗаписьXML.ЗаписатьАтрибут("версияФормата", "1С:1.1");
	ЗаписьXML.ЗаписатьАтрибут("версПрог", РегламентированнаяОтчетность.ВерсияПрограммы());
	ЗаписьXML.ЗаписатьАтрибут("типДокументооборота", "РегистрацияАбонента");
	ЗаписьXML.ЗаписатьАтрибут("типТранзакции", "Расписка");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокументооборота", ДокументЗаявление.ИдентификаторДокументооборота);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("отправитель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "абонент");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", ИдентификаторАбонента);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("получатель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", "КалугаАстрал");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("документ");	
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокумента", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
	Если ФайлыРасписки.Свойство("Подпись") Тогда 
		ЗаписьXML.ЗаписатьАтрибут("типДокумента", "РаспискаЭП");
		ЗаписьXML.ЗаписатьАтрибут("типСодержимого", "cer");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("типДокумента", "РаспискаСкан");
		ЗаписьXML.ЗаписатьАтрибут("типСодержимого", ФайлыРасписки.Расписка.Расширение);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("сжат", "true");
	ЗаписьXML.ЗаписатьАтрибут("зашифрован", "false");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("содержимое");	
	ЗаписьXML.ЗаписатьАтрибут("имяФайла", ФайлыРасписки.Расписка.Имя);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ФайлыРасписки.Свойство("Подпись") Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("подпись");	
		ЗаписьXML.ЗаписатьАтрибут("имяФайла", ФайлыРасписки.Подпись.Имя);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();

	ИмяФайлаРасписки = ФайлыРасписки.Расписка.Имя;
	ФайлыРасписки.Расписка.Имя = "file";
	ФайлыРасписки.Расписка.Адрес = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлыРасписки.Расписка));
	ФайлыРасписки.Расписка.Имя = ИмяФайлаРасписки;
	
	ОписаниеПакета = Новый Структура;
	ОписаниеПакета.Вставить("Имя", "packageDescription.xml");
	ОписаниеПакета.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), УникальныйИдентификатор));
	ФайлыРасписки.Вставить("ОписаниеПакета", ОписаниеПакета);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат ФайлыРасписки;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьРасписку(ОповещениеОЗавершении)
	
	Результат = ОтправитьРаспискуНаСервере();
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРаспискуНаСервере()
	
	ФайлыРасписки = ПодготовитьРаспискуКОтправке();
	
	РезультатВыполнения = Новый Структура("Выполнено", Истина);
	Файлы = Новый Массив;
	Файлы.Добавить(ФайлыРасписки.Расписка);
	Если ФайлыРасписки.Свойство("Подпись") Тогда
		Файлы.Добавить(ФайлыРасписки.Подпись);
	КонецЕсли;
	Файлы.Добавить(ФайлыРасписки.ОписаниеПакета);
	АдресПакета = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(Файлы);
	
	Результат = СоздатьКлиентСервисаПоСпецоператоруСвязи(ДокументЗаявление.СпецоператорСвязи);
	Если Результат.Выполнено Тогда
		Ответ = Результат.КлиентСервиса.SendPacket(Base64Строка(ПолучитьИзВременногоХранилища(АдресПакета)));
		ОтветXDTO = Дессериализовать(Ответ);		
		Если ОтветXDTO.code <> "0" И ОтветXDTO.code <> "60" Тогда
			РезультатВыполнения.Вставить("Выполнено", Ложь);
			Если ОтветXDTO.Свойства().Получить("errorMessage") <> Неопределено Тогда
				РезультатВыполнения.Вставить("ОписаниеОшибки", ОтветXDTO.errorMessage);
			Иначе
				РезультатВыполнения.Вставить("ОписаниеОшибки", "Ошибка при отправке расписки в получении сертификата");
			КонецЕсли;	
		КонецЕсли;
	Иначе
		РезультатВыполнения = Результат;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьРаспискуПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
		
		ВыполнитьЗавершениеПодключения();		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Элементы.ГруппаРасписка.ТекущаяСтраница = Элементы.ГруппаРаспискаПодписаниеРукой;
		Элементы.Далее.Заголовок = "Отправить скан-копию бланка сертификата";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрисоединитьФайлРаспискиКДокументу(АдресФайлаРасписки, АдресФайлаПодписи)
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументЗаявление.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Расписка");
	ПараметрыФайла.Вставить("РасширениеБезТочки", "cer");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаРасписки);
	
	Если ЗначениеЗаполнено(АдресФайлаПодписи) Тогда
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", ПолучитьИзВременногоХранилища(АдресФайлаПодписи));
		СвойстваПодписи.Вставить("Сертификат", ПолучитьИзВременногоХранилища(АдресСертификата));
		СвойстваПодписи.Вставить("ПодписьВерна", Истина);
		СвойстваПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДата());

		ПрисоединенныеФайлы.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, СвойстваПодписи, УникальныйИдентификатор);		
	КонецЕсли;
	
	СтрокаТаблицы = Неопределено;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.Документ = "Расписка" Тогда
			СтрокаТаблицы = ЭлектронныйДокумент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ДокументЗаявление.ЭлектронныеДокументы.Добавить();
	КонецЕсли;
	
	СтрокаТаблицы.Документ = "Расписка";
	СтрокаТаблицы.Файл = ПрисоединенныйФайл;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПользователейУчетнойЗаписи(Результат)
	
	// Записываем выбранных пользователей в регистр сведений
	ЗаписатьПользователейУчетныхЗаписейДокументооборота(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
	
	Если Результат Тогда
		СтатусКомментарий = "Создана учетная запись.";
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		
		РеквизитыДокументаДляЗаписи.Вставить("Статус",				Статус);
		РеквизитыДокументаДляЗаписи.Вставить("ДатаПолученияОтвета", ДатаПолученияОтвета);
		РеквизитыДокументаДляЗаписи.Вставить("УчетнаяЗапись", 		КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		РеквизитыДокументаДляЗаписи.Вставить("НастройкаЗавершена", 	Истина);
		
		КонтекстЭДОКлиент.УстановитьУчетнуюЗаписьОрганизации(РеквизитыДокумента.Организация, КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		ОповеститьОбИзменении(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		Оповестить("ОбновитьУчетнуюЗапись",КонтекстЭДОКлиент.НоваяУчетнаяЗапись,);
	Иначе
		СтатусКомментарий = "Заявление одобрено, но не удалось создать учетную запись.";
	КонецЕсли;
	
	РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий",СтатусКомментарий);
	
	// Настройка списка пользователей
	ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(СсылкаНаДокумент,РеквизитыДокументаДляЗаписи);
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг3;
	
	КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееШаг1Завершение(ПараметрыОбработатьОбновление) Экспорт
	
	ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
		
	ДополнитьПараметрыАвтонастройкиУчетнойЗаписи(ПараметрыОбработатьОбновление);
	
	ДополнительныеПараметры = Новый Структура(
		"ТекстОшибокДляМастераПодключенияК1СОтчетности", 
		ТекстОшибокДляМастераПодключенияК1СОтчетности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Шаг1ПослеАвтонастройки", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	КонтекстЭДОКлиент.ОбработатьОбновление(ПараметрыОбработатьОбновление, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПараметрыАвтонастройкиУчетнойЗаписи(ПараметрыОбработатьОбновление) Экспорт
	
	Если ЭтоВторичноеЗаявление Тогда
		РеквизитыУчетнойЗаписи = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.РеквизитыУчетнойЗаписи(ДокументЗаявление.УчетнаяЗапись);
		ПараметрыОбработатьОбновление.ИдентификаторДокументооборота = РеквизитыУчетнойЗаписи.ИдентификаторДокументооборота;
		ПараметрыОбработатьОбновление.ТелефонМобильныйДляАвторизации = РеквизитыУчетнойЗаписи.ТелефонМобильныйДляАвторизации;
	Иначе
		ПараметрыОбработатьОбновление.ИдентификаторДокументооборота = 
			?(ЗначениеЗаполнено(
				ДокументЗаявление.ИдентификаторКлючевогоКонтейнера), 
				ДокументЗаявление.ИдентификаторКлючевогоКонтейнера, 
				ДокументЗаявление.ИдентификаторДокументооборота);
				
		ПараметрыОбработатьОбновление.ТелефонМобильныйДляАвторизации = ДокументЗаявление.ТелефонМобильныйДляАвторизации;
	КонецЕсли;
	ПараметрыОбработатьОбновление.ИдентификаторАбонента 				= ИдентификаторАбонента;
	ПараметрыОбработатьОбновление.СпецОператорСвязи 					= СпецоператорСвязи;
	ПараметрыОбработатьОбновление.ПутьКонтейнерЗакрытогоКлюча 			= РеквизитыДокумента.ПутьКонтейнерЗакрытогоКлюча;
	ПараметрыОбработатьОбновление.Организация 							= РеквизитыДокумента.Организация;
	ПараметрыОбработатьОбновление.ЭтоВторичноеЗаявление 				= ЭтоВторичноеЗаявление;
	ПараметрыОбработатьОбновление.ОтпечатокСертификатаИзОтвета 			= ОтпечатокСертификатаИзОтвета;
	ПараметрыОбработатьОбновление.ВызовИзМастераПодключенияК1СОтчетности = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Шаг1ПослеАвтонастройки(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	Результат = СтруктураРезультат.РезультатОбновления;
	
	Если НЕ Результат ИЛИ ИдентификаторАбонента = "" Тогда
		
		ОбработатьОшибкиАвтонастройки(ДополнительныеПараметры);
		
	Иначе
		
		Если ДокументЗаявление.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение") Тогда
			
			Шаг1ВторичноеЗаявлениеПослеАвтонастройки();
			
		ИначеЕсли СписокПользователей.Количество() <= 1 Тогда
			
			Шаг1ПервичноеЗаявлениеПослеАвтонастройки();
			
		Иначе 
			
			// Если пользователей больше, чем 1, то показываем Шаг 2
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг2;
			
		КонецЕсли;
		
		КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Шаг1ВторичноеЗаявлениеПослеАвтонастройки()
	
	// Вторичное заявление
	Если Результат Тогда
		СтатусКомментарий 	= НСтр("ru = 'Выполнено '") + ИзмененныеРеквизиты;
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		НастройкаЗавершена 	= Истина;
	Иначе
		СтатусКомментарий 	= НСтр("ru = 'Заявление одобрено но не удалось создать учетную запись.'");
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		НастройкаЗавершена	= Ложь;
	КонецЕсли;
	
	РеквизитыДокументаДляЗаписи.Вставить("ДатаПолученияОтвета", ДатаПолученияОтвета);
	РеквизитыДокументаДляЗаписи.Вставить("Статус",				Статус);
	РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий",	СтатусКомментарий);
	РеквизитыДокументаДляЗаписи.Вставить("НастройкаЗавершена", 	НастройкаЗавершена);
	
	// Настройка списка пользователей
	ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(СсылкаНаДокумент,РеквизитыДокументаДляЗаписи);
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	// Если заявление вторичное, то пропускаем шаг 2
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг3;
	
КонецПроцедуры

&НаКлиенте
Процедура Шаг1ПервичноеЗаявлениеПослеАвтонастройки()
	
	// Первичное заявление
	// Если пользователь 1, то не показываем Шаг 2, а сразу выполняем запись в регистр и переходим к Шагу 3
	Для Каждого Пользователь Из СписокПользователей Цикл
		Пользователь.Пометка = Истина;
	КонецЦикла;
	// Записываем выбранных пользователей в регистр сведений
	ЗаписатьПользователейУчетныхЗаписейДокументооборота(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
	
	Если Результат Тогда
		
		СтатусКомментарий 	= "Создана учетная запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		НастройкаЗавершена 	= Истина;
		
		РеквизитыДокументаДляЗаписи.Вставить("УчетнаяЗапись", КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		КонтекстЭДОКлиент.УстановитьУчетнуюЗаписьОрганизации(РеквизитыДокумента.Организация, КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		ОповеститьОбИзменении(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		Оповестить("ОбновитьУчетнуюЗапись", КонтекстЭДОКлиент.НоваяУчетнаяЗапись,);
		
	Иначе
		
		СтатусКомментарий 	= "Заявление одобрено, но не удалось создать учетную запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		НастройкаЗавершена 	= Ложь;
		
	КонецЕсли;
	
	РеквизитыДокументаДляЗаписи.Вставить("ДатаПолученияОтвета", ДатаПолученияОтвета);
	РеквизитыДокументаДляЗаписи.Вставить("Статус",				Статус);
	РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий",	СтатусКомментарий);
	РеквизитыДокументаДляЗаписи.Вставить("НастройкаЗавершена", 	НастройкаЗавершена);
	
	ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(СсылкаНаДокумент, РеквизитыДокументаДляЗаписи);
	
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.НастрокаПрограммыШаг3;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиАвтонастройки(ДополнительныеПараметры)
	
	ТекстОшибокДляМастераПодключенияК1СОтчетности = ДополнительныеПараметры.ТекстОшибокДляМастераПодключенияК1СОтчетности;
	
	НеУдалосьПодключитьсяКСерверу = СтрНайти(ВРЕГ(ТекстОшибокДляМастераПодключенияК1СОтчетности), НСтр("ru = 'СЕРВЕР'"));
	Если НеУдалосьПодключитьсяКСерверу Тогда
		Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОшибкаПодключенияКСерверу;
		ТекстОшибокПриОтклоненномЗаявлении = ТекстОшибокДляМастераПодключенияК1СОтчетности;
	Иначе				
		Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеПрочиеОшибки;	
		ТекстОшибокПриОтклоненномЗаявлении = ТекстОшибокДляМастераПодключенияК1СОтчетности;
	КонецЕсли;	
	
	КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление);
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееУстановитьВидимостьДоступность(ДокументЗаявление)

	Если ДокументЗаявление <> Неопределено Тогда
		Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи", ДокументЗаявление.Ссылка);
	КонецЕсли;	
	
	Элементы.Назад.Видимость = Истина;
	Элементы.Далее.Доступность = Истина;
	
	УправлениеКнопкамиНавигации();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	Если Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) > 0 Тогда
		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) -1);
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
		
	КонецЕсли;
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ВсегоСтраниц 			= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
		
	КнопкаДалее	  = Элементы.Далее;
	КнопкаНазад   = Элементы.Назад;
	КнопкаЗакрыть = Элементы.Закрыть;
	
	КнопкаДалее.Заголовок = "Далее  >";
	КнопкаДалее.Видимость = Истина;
	КнопкаНазад.Заголовок = "<  Назад";
	КнопкаНазад.Видимость = Истина;
	
	Если ИндексТекущейСтраницы = 0 Тогда
		
    	//первая закладка		
		Если Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобрено
			ИЛИ Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобреноТребуетсяРасписка Тогда
			КнопкаЗакрыть.Заголовок 		= "Отмена";			
			КнопкаНазад.Видимость 			= Ложь;
		ИначеЕсли Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОшибкаПодключенияКСерверу Тогда
			КнопкаДалее.Заголовок 			= "Обновить статус заявления";
			КнопкаЗакрыть.Заголовок 		= "Закрыть";	
			КнопкаНазад.Видимость 			= Ложь;
			КнопкаДалее.КнопкаПоУмолчанию 	= Истина;

		ИначеЕсли Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеПрочиеОшибки Тогда
			КнопкаДалее.Видимость 			= Ложь;
	    	КнопкаНазад.Видимость 			= Ложь;
			КнопкаЗакрыть.Заголовок 		= "Закрыть";
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;			
		Иначе	
			КнопкаДалее.Заголовок 			= "Подготовить новое заявление";
			КнопкаЗакрыть.Заголовок			= "Закрыть";
			КнопкаНазад.Видимость 			= Ложь;
			КнопкаДалее.КнопкаПоУмолчанию 	= Истина;
		КонецЕсли;
		
	ИначеЕсли ИндексТекущейСтраницы = 1 Тогда
		КнопкаЗакрыть.Заголовок 			= "Отмена";
		КнопкаДалее.Заголовок = "Подписать и отправить сертификат";
		КнопкаДалее.Видимость 				= Истина;
    	КнопкаНазад.Видимость 				= Истина;
		КнопкаДалее.КнопкаПоУмолчанию 		= Истина;		    
	ИначеЕсли ИндексТекущейСтраницы = 2 Тогда 	
		//вторая закладка
		КнопкаЗакрыть.Заголовок 			= "Отмена";
		КнопкаДалее.Видимость 				= Истина;
    	КнопкаНазад.Видимость 				= Ложь;
		КнопкаДалее.КнопкаПоУмолчанию 		= Истина;		
    ИначеЕсли ИндексТекущейСтраницы = ВсегоСтраниц - 1 Тогда
		//последняя закладка
		КнопкаДалее.Видимость 				= Ложь;
    	КнопкаНазад.Видимость 				= Ложь;
		
		Если ПодключитьЭДО Тогда
			КнопкаЗакрыть.Заголовок 			= "Завершить подключение к 1С-ЭДО";
		Иначе
			КнопкаЗакрыть.Заголовок 			= "Закрыть";
		КонецЕсли;
		
		КнопкаЗакрыть.КнопкаПоУмолчанию 	= Истина;		
		
		ПрограммноеЗакрытие 				= Истина;
	Иначе	
		//все остальные закладки
		КнопкаЗакрыть.Заголовок 			= "Отмена";
		КнопкаНазад.Видимость 				= Истина;
    	КнопкаДалее.Видимость 				= Истина;
		КнопкаДалее.КнопкаПоУмолчанию 		= Истина;	
	КонецЕсли;
	
	ЭтотОбъект.Команды.КоманднаяПанельМастерНазад.Подсказка = КнопкаНазад.Заголовок;
	ЭтотОбъект.Команды.КоманднаяПанельМастерДалее.Подсказка = КнопкаДалее.Заголовок;
	ЭтотОбъект.Команды.ЗакрытьМастер.Подсказка 				= КнопкаЗакрыть.Заголовок;
	
	Если КнопкаЗакрыть.Заголовок = "Закрыть" 
		ИЛИ КнопкаЗакрыть.Заголовок = "Завершить подключение к 1С-ЭДО" Тогда
		ОтметитьЗаявлениеКакНастроенное(ДокументЗаявление.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер()
	
	Если Элементы.Закрыть.Заголовок = "Завершить подключение к 1С-ЭДО"
		И ПодключитьЭДО 
		И НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено") Тогда
			
		// завершение подключения к 1С-ЭДО
		ПараметрыЗапускаПодключениеЭДО = ПолучитьПараметрыДляЗапускаМетодаБЭД(ДокументЗаявление.Ссылка);
		Если ЗначениеЗаполнено(ПараметрыЗапускаПодключениеЭДО) Тогда
			// по данному заявлению сформирована учетная запись, 
			// у заявления ПодключитьЭДО = Истина
			
			//выполним отмену закрытия без возвращаемого значения и инициируем закрытие с параметрами подключения ЭДО
			ЗакрытьМастерИПодключитьЭДО();
			Возврат;
		КонецЕсли;
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПользователей()
	
	СписокПользователей.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫБОР
	                      |		КОГДА Настройки.УчетнаяЗапись ЕСТЬ NULL 
	                      |			ТОГДА Ложь
	                      |		ИНАЧЕ Истина
	                      |	КОНЕЦ КАК Пометка,
	                      |	Пользователи.Ссылка КАК Пользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |			ПользователиУчетныхЗаписейДокументооборота.Пользователь КАК Пользователь
	                      |		ИЗ
	                      |			РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |		ГДЕ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись) КАК Настройки
	                      |		ПО Пользователи.Ссылка = Настройки.Пользователь
	                      |ГДЕ
	                      |	НЕ Пользователи.ПометкаУдаления
	                      |	И НЕ Пользователи.Недействителен
	                      |	И НЕ Пользователи.Служебный
	                      |	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Пользователи.Наименование");
	Запрос.УстановитьПараметр("УчетнаяЗапись", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Пользователь = ТекущийПользователь Тогда 
			Картинка = БиблиотекаКартинок.Пользователь;
		Иначе 
			Картинка = Неопределено;
		КонецЕсли;
		СписокПользователей.Добавить(Выборка.Пользователь, Выборка.Пользователь.Наименование, Выборка.Пометка, Картинка);
	КонецЦикла;

	СтрокаПользователь = СписокПользователей.НайтиПоЗначению(ТекущийПользователь);
	Если СтрокаПользователь <> Неопределено Тогда 
		СтрокаПользователь.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователейУчетныхЗаписейДокументооборота(СсылкаУчетнаяЗапись)
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СсылкаУчетнаяЗапись.Ссылка);
	ФлагОтметки = Ложь;
	
	Для Каждого СтрокаСписка Из СписокПользователей Цикл
		Если СтрокаСписка.Пометка Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.УчетнаяЗапись = СсылкаУчетнаяЗапись.Ссылка;
			НоваяСтрока.Пользователь = СтрокаСписка.Значение;
			ФлагОтметки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(), Ложь,
		"Не удалось обновить список пользователей по учетной записи налогоплательщика """ + СокрЛП(СсылкаУчетнаяЗапись.Ссылка) + """.");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСсылку(Команда)
	
	НомерСсылки = 0;
	Попытка
		НомерСсылки = Число(СтрЗаменить(Команда.Имя,"КомандаОткрытьСсылку",""));
	Исключение
	КонецПопытки; 
	
	Если НомерСсылки <> 0 Тогда 
		Ссылка = СписокСтатей.Получить(НомерСсылки - 1).Значение;
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСсылкиНаСтатьи()
	
	Если СписокСтатей.Количество() >= 1 тогда
	
		Счетчик = 1;
		Для каждого ЗаписьСтатьи Из СписокСтатей Цикл
			
			Если Счетчик > 5 тогда
				Прервать;
			КонецЕсли;	
			
			Элементы["КомандаОткрытьСсылку" + Строка(Счетчик)].Заголовок = ЗаписьСтатьи.Представление;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		Если Счетчик <= 5 Тогда
			Пока Счетчик <=5 Цикл
				Элементы["КомандаОткрытьСсылку" + Строка(Счетчик)].Видимость = Ложь;
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Для Счетчик = 1 по 5 Цикл
			Элементы["КомандаОткрытьСсылку" + Строка(Счетчик)].Видимость = Ложь;
		КонецЦикла; 
		
		Элементы.ПодсказкаСсылкиНаСтатьи.Видимость = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСлужбыПоддержки()

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

КонецПроцедуры

&НаСервере
Функция СсылкаНаДокумент()

	Возврат РеквизитФормыВЗначение("ДокументЗаявление").Ссылка;	

КонецФункции 

&НаКлиенте
Процедура Подключаемый_ВыполнитьАвтонастройку()
	
	КоманднаяПанельМастерДалее(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ДатаПолученияОтвета()
	Возврат ТекущаяДатаСеанса();
КонецФункции
	
&НаСервере
Процедура ДобавитьРеквизитКСтроке(НазваниеРеквизита, РеквизитИзменился, ИзмененныеРеквизиты)
	
	Если РеквизитИзменился Тогда
		Если ИзмененныеРеквизиты = "" Тогда
			ИзмененныеРеквизиты = НазваниеРеквизита;
		Иначе
			ИзмененныеРеквизиты = ИзмененныеРеквизиты + "%1" + НазваниеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидЭлементовУправления()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	// Настраиваем разный внешний вид для вторичных и первичных заявлений
	Если ЭтоВторичноеЗаявление Тогда
		
		// Определяем, что было изменено
		СписокИзмененныхРеквизитов = ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления;
		
		ПродлитьСертификат = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата);
			
		ИзменитьВладельцаСертификата = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП);
			
		ПродлитьЛицензиюНа1СОтчетность = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии);
			
		ИзменитьМобильныйТелефон = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный);
			
		ПереиздатьСертификат = ?(КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
			Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата), 2, 0);
			
		ИзменитьСоставКонтролирующихОрганов = 
			КонтекстЭДОСервер.БылИзмененСоставКонтролирующихОрганов(СписокИзмененныхРеквизитов);
			
		ИзменитьРеквизитыПодключенияК1СОтчетности = 
			КонтекстЭДОСервер.БылиИзменененыРеквизитыПодключенияК1СОтчетности(СписокИзмененныхРеквизитов);
			
		// Представление изменившихся настроек подключения 
		ИзмененныеРеквизиты = "";
		ДобавитьРеквизитКСтроке(НСтр("ru = 'изменение состава контролирующих органов'"), ИзменитьСоставКонтролирующихОрганов, ИзмененныеРеквизиты);
		ДобавитьРеквизитКСтроке(НСтр("ru = 'изменение сотрудника-владельца сертификата'"), ИзменитьВладельцаСертификата, ИзмененныеРеквизиты);
		ДобавитьРеквизитКСтроке(НСтр("ru = 'переиздание сертификата'"), ПереиздатьСертификат, ИзмененныеРеквизиты);
		ДобавитьРеквизитКСтроке(НСтр("ru = 'продление лицензии на 1С-Отчетность'"), ПродлитьЛицензиюНа1СОтчетность, ИзмененныеРеквизиты);
		ДобавитьРеквизитКСтроке(НСтр("ru = 'изменение номера мобильного телефона для SMS-уведомления'"), ИзменитьМобильныйТелефон, ИзмененныеРеквизиты);
		ДобавитьРеквизитКСтроке(НСтр("ru = 'изменение реквизитов подключения к 1С-Отчетности'"), ИзменитьРеквизитыПодключенияК1СОтчетности, ИзмененныеРеквизиты);
		КонтекстЭДОСервер.ЗаменитьЗапятуюНаИВСтроке(ИзмененныеРеквизиты);
			
		// Состав контролирующих органов
		ИзменитьСоставКонтролирующихОрганов = КонтекстЭДОСервер.БылИзмененСоставКонтролирующихОрганов(СписокИзмененныхРеквизитов);
		
		Заголовок =  НСтр("ru = 'Изменение настроек подключения к 1С-Отчетности'");
		
		// Текст заголовка при одобрении 
		ТекстЗаголовкаПриОдобрении = НСтр("ru = 'Ваше заявление%1одобрено'");
		ТекстЗаголовкаПриОдобрении = СтрЗаменить(ТекстЗаголовкаПриОдобрении, "%1", 
			?(ПустаяСтрока(ИзмененныеРеквизиты), " ", НСтр("ru = ' на '") + ИзмененныеРеквизиты + " "));
		Элементы.ПодсказкаПоРезультатуОдобрено.Заголовок = ТекстЗаголовкаПриОдобрении;
		Элементы.ПодсказкаПоРезультатуОдобреноТребуетсяРасписка.Заголовок = ТекстЗаголовкаПриОдобрении;
		
		// Текст заголовка при отклонении
		ТекстЗаголовкаПриОтклонении = НСтр("ru = 'Ваше заявление%1отклонено'");
		ТекстЗаголовкаПриОтклонении = СтрЗаменить(ТекстЗаголовкаПриОтклонении, "%1", 
			?(ПустаяСтрока(ИзмененныеРеквизиты), " ", НСтр("ru = ' на '") + ИзмененныеРеквизиты + " "));
		Элементы.ПодсказкаПоРезультатуОтклонено.Заголовок = ТекстЗаголовкаПриОтклонении;
		
		ТекстСообщения = "";
		Если ПереиздатьСертификат Тогда
			ТекстСообщения = НСтр("ru = 'Далее произойдет установка сертификатов и автоматическая настройка электронного документооборота.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Далее произойдет автоматическая настройка электронного документооборота.'");
		КонецЕсли;
		Элементы.ПодсказкаПоРезультатам1.Заголовок = ТекстСообщения;
		
		Элементы.ГруппаЗакладокЭтап1.ТекущаяСтраница = Элементы.Этап1ВторичноеЗаявление;
		Элементы.ГруппаЗакладокЭтап3.ТекущаяСтраница = Элементы.Этап3ВторичноеЗаявление;
		
		// Третий шаг
		Элементы.ПодсказкаСсылкиНаСтатьи.Видимость = Ложь;
		Элементы.КомандаОткрытьСсылку1.Видимость = Ложь;
		Элементы.КомандаОткрытьСсылку2.Видимость = Ложь;
		Элементы.КомандаОткрытьСсылку3.Видимость = Ложь;
		Элементы.КомандаОткрытьСсылку4.Видимость = Ложь;
		Элементы.КомандаОткрытьСсылку5.Видимость = Ложь;
		
		Элементы.ПодсказкаКонечныйРезультат.Заголовок = НСтр("ru = 'Поздравляем!
			|Новые настройки подключения к 1С-Отчетности успешно применены'");
			
		// Информацию о том, что эту организацию можно бесплатно подключить
		// к 1С-Отчетности из другой базы для вторияного заявления не показываем.
		Элементы.ПодключениеОрганизацииВДругихБазах.Видимость = Ложь;
		Элементы.ДекорацияОтступ38.Видимость = Ложь;
			
		// Гиперссылка
		Элементы.ОткрытьСсылкуНаСтатьюПоПодключению.Заголовок = НСтр("ru = 'Инструкция по изменению настроек подключения к 1С-Отчетности'");
			
	Иначе
			
		Заголовок =  НСтр("ru = 'Помощник подключения к 1С-Отчетности'");
			
		// Первый шаг 
		Элементы.ПодсказкаПоРезультатуОдобрено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ПодсказкаПоРезультатуОдобрено.Заголовок,
			ДокументЗаявление.Номер,
			Формат(ДокументЗаявление.Дата,"ДФ=dd.MM.yyyy"),
			ДокументЗаявление.Организация);
			
		Элементы.ПодсказкаПоРезультатуОдобреноТребуетсяРасписка.Заголовок = Элементы.ПодсказкаПоРезультатуОдобрено.Заголовок;
		
		Элементы.ПодсказкаПоРезультатуОтклонено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ПодсказкаПоРезультатуОтклонено.Заголовок,
			ДокументЗаявление.Номер,
			Формат(ДокументЗаявление.Дата,"ДФ=dd.MM.yyyy"),
			ДокументЗаявление.Организация);
			
		Элементы.ГруппаЗакладокЭтап1.ТекущаяСтраница = Элементы.Этап1ПервичноеЗаявление;
			
		// Третий шаг
		Элементы.ПодсказкаКонечныйРезультат.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ПодсказкаКонечныйРезультат.Заголовок,
			ДокументЗаявление.Организация);
			
		Элементы.ПодключениеОрганизацииВДругихБазах.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ПодключениеОрганизацииВДругихБазах.Заголовок,
			ДокументЗаявление.Организация);
			
		Элементы.ПодсказкаПоРезультатамШаг2.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ПодсказкаПоРезультатамШаг2.Заголовок,
			ДокументЗаявление.Организация);
			
		Элементы.ГруппаЗакладокЭтап3.ТекущаяСтраница = Элементы.Этап3ПервичноеЗаявление;
		
	КонецЕсли;
	
	Элементы.ОткрытьВидеоПоПодключению.Видимость = Ложь;
	
	Элементы.ПодсказкаПодключениеЭДО.Видимость = ПодключитьЭДО;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		ДокументЗаявление.КраткоеНаименование,
		Заголовок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляЗапускаМетодаБЭД(ЗаявлениеСсылка)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация,
		|	ЗаявлениеАбонентаСпецоператораСвязи.АдресЮридический,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодключитьЭДО,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ОператорЭДО,
		|	ЗаявлениеАбонентаСпецоператораСвязи.КодНалоговогоОрганаЭДО,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ТипКриптопровайдера
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.УчетнаяЗапись <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка = &ЗаявлениеСсылка";
	
	Запрос.УстановитьПараметр("ЗаявлениеСсылка", ЗаявлениеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ПодключитьЭДО Тогда
			Результат = Новый Структура;
			
			Результат.Вставить("Организация", 				Выборка.Организация);
			Результат.Вставить("ОператорЭДО", 				Выборка.ОператорЭДО);
			Результат.Вставить("КодНалоговогоОргана", 		Выборка.КодНалоговогоОрганаЭДО);
			
			//ТипКриптопровайдера
			Если Выборка.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.CryptoPro Тогда
				ТипКриптоПровайдера = "CryptoPro";
			ИначеЕсли Выборка.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.VipNet Тогда 
				ТипКриптоПровайдера = "VipNet";
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			Результат.Вставить("ТипКриптопровайдера", ТипКриптоПровайдера);
			
			АдресЮридический = Выборка.АдресЮридический;
			Если ЗначениеЗаполнено(АдресЮридический) Тогда
				СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдресЮридический);
				
				Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
					
					Результат.Вставить("Индекс", 			СтруктураАдреса.Индекс);
					Результат.Вставить("Район", 			СтруктураАдреса.Район);
					Результат.Вставить("Город", 			СтруктураАдреса.Город);
					Результат.Вставить("НаселенныйПункт", 	СтруктураАдреса.НаселенныйПункт);
					Результат.Вставить("Улица", 			СтруктураАдреса.Улица);
					Результат.Вставить("Дом", 				СтруктураАдреса.Дом);
					Результат.Вставить("Корпус", 			СтруктураАдреса.Корпус);
					Результат.Вставить("Квартира", 			СтруктураАдреса.Квартира);
					
					КодРегиона = СтруктураАдреса.Регион;
					Результат.Вставить("КодРегиона", КодРегиона);
					
					Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(КодРегиона);
					Если ЗначениеЗаполнено(Регион) Тогда
						Результат.Вставить("Регион", Регион);
					КонецЕсли;
					
				Иначе
					
					Возврат Неопределено;	
					
				КонецЕсли;
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьМастерИПодключитьЭДО()
	
	РезультатЗакрытия = Новый Структура("ПодключитьЭДО, Организация, ПараметрыЗапускаПодключениеЭДО");
	РезультатЗакрытия.Вставить("ПодключитьЭДО", Истина);
	
	ПараметрОрганизация = ПараметрыЗапускаПодключениеЭДО.Организация;
	РезультатЗакрытия.Вставить("Организация", ПараметрыЗапускаПодключениеЭДО.Организация);
	
	ПараметрыЗапускаПодключениеЭДО.Удалить("Организация");	
	РезультатЗакрытия.Вставить("ПараметрыЗапускаПодключениеЭДО", ПараметрыЗапускаПодключениеЭДО);
	
	ПодключитьЭДО = Ложь; //для предотвращения повторного выполнения при закрытии формы	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьЗаявлениеКакНастроенное(Заявление)
	
	Если Заявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено")
		И НЕ Заявление.НастройкаЗавершена Тогда
		
		ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(
			Заявление.Ссылка, 
			Новый Структура("НастройкаЗавершена", Истина));
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатПолученияКонтекста, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = РезультатПолученияКонтекста.КонтекстЭДО;
	
	РеквизитыДокументаДляЗаписи =  Новый Структура;

	СсылкаНаДокумент 				= СсылкаНаДокумент();
	РеквизитыДокумента 				= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(СсылкаНаДокумент);
	Статус							= РеквизитыДокумента.Статус;
	ПредыдущийСтатус				= Статус;
	СпецоператорСвязи				= РеквизитыДокумента.СпецоператорСвязи;
	ИдентификаторДокументооборота	= РеквизитыДокумента.ИдентификаторДокументооборота;
	
	
	Если НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено") Тогда
		Если ТребуетсяПолучениеРасписки И ЭтоВторичноеЗаявление Тогда
			Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобреноТребуетсяРасписка;
		Иначе
			Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОдобрено;
		КонецЕсли;
	Иначе 
		Элементы.ГруппаСостоянийЗаявление.ТекущаяСтраница = Элементы.ГруппаСостояниеОтклонено;
		ТекстОшибокПриОтклоненномЗаявлении = ДокументЗаявление.СтатусКомментарий;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	ЗаполнитьДанныеСлужбыПоддержки();
	
	СписокСтатей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.СписокСсылокНаСтатьиПо1СОтчетности();
	УстановитьСсылкиНаСтатьи();
	
	Если ДокументЗаявление <> Неопределено Тогда
    	Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи",ДокументЗаявление.Ссылка);
	КонецЕсли;
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьАвтонастройку", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеЗаявление()

	// Если статус заявления - "Отклонено", тогда создаем новое заявление
	ПараметрыФормы = Новый Структура("ЗначениеКопирования",СсылкаНаДокумент);
	ОткрытьФорму("Документ.ЗаявлениеАбонентаСпецоператораСвязи.ФормаОбъекта",ПараметрыФормы,,Истина);
	ПрограммноеЗакрытие = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура СканРаспискаПослеДобавленияФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		ФайлСканРасписка = Новый Структура;
		ФайлСканРасписка.Вставить("Адрес", Результат.ОписанияФайлов[0].Адрес);
		Файл = Новый Файл(Результат.ОписанияФайлов[0].Имя);
		ФайлСканРасписка.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ФайлСканРасписка.Вставить("Расширение", СтрЗаменить(Файл.Расширение, ".", ""));

		СканРасписка = Файл.Имя;
		
		Элементы.СканРасписка.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеобходимостиИспользоватьКнопки(Элемент)
	
	ТекстСообщения = НСтр("ru = 'Для перехода к другим страницам воспользуйтесь кнопками ""Далее >"" и ""< Назад"" в нижней части Помощника'");
	ПоказатьПредупреждение(,ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти