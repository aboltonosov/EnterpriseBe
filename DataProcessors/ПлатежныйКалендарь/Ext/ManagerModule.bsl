#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Обработки.ПлатежныйКалендарь.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru= 'Сформировать списания ДС...'") ;
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.Картинка = БиблиотекаКартинок.ОформитьПродажу;
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция БанковскиеСчетаКассыДоступныеДляЗаявки(ЗаявкиКПереносу, Исключительные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Заявки = Новый Массив;
	Если ТипЗнч(ЗаявкиКПереносу) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Заявки.Добавить(ЗаявкиКПереносу);
	Иначе
		Для каждого ЗаявкаКПереносу Из ЗаявкиКПереносу Цикл
			Если ТипЗнч(ЗаявкаКПереносу) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				Заявки.Добавить(ЗаявкаКПереносу);
			ИначеЕсли ТипЗнч(ЗаявкаКпереносу) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей")
				Или ТипЗнч(ЗаявкаКпереносу) = Тип("ДанныеФормыСтруктура") Тогда
				Заявки.Добавить(ЗаявкаКПереносу.ОбъектОплаты);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчетКасса
	|ПОМЕСТИТЬ ВсеБанковскиеСчетаКассы
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО
	|		Заявка.Организация = БанковскиеСчета.Владелец
	|		И (БанковскиеСчета.ВалютаДенежныхСредств = Заявка.Валюта
	|				И (Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа)
	|					ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка))
	|			ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|		И (БанковскиеСчета.ВалютаДенежныхСредств = Заявка.БанковскийСчетПолучатель.ВалютаДенежныхСредств
	|			ИЛИ Заявка.БанковскийСчетПолучатель = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|		И Заявка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		ИЛИ
	|		БанковскиеСчета.ВалютаДенежныхСредств = Заявка.Валюта
	|			И Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|ГДЕ
	|	Заявка.Ссылка В (&Ссылка)
	|	И Заявка.ФормаОплатыБезналичная
	//++ НЕ УТ
	|	И НЕ Заявка.ПлатежиПо275ФЗ
	|	И НЕ БанковскиеСчета.ОтдельныйСчетГОЗ
	//-- НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заявка.Ссылка,
	|	Кассы.Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО
	|		Заявка.Организация = Кассы.Владелец
	|		И (Кассы.ВалютаДенежныхСредств = Заявка.Валюта
	|				И (Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа)
	|					ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка))
	|			ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|		И (Кассы.ВалютаДенежныхСредств = Заявка.КассаПолучатель.ВалютаДенежныхСредств
	|			ИЛИ Заявка.КассаПолучатель = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|		И Заявка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		ИЛИ
	|		Кассы.ВалютаДенежныхСредств = Заявка.Валюта
	|			И Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|ГДЕ
	|	Заявка.Ссылка В (&Ссылка)
	|	И Заявка.ФормаОплатыНаличная
	//++ НЕ УТ
	|	И НЕ Заявка.ПлатежиПо275ФЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявка.Ссылка КАК Заявка,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчетКасса
	|
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО
	|		Заявка.Организация = БанковскиеСчета.Владелец
	|		И (БанковскиеСчета.ВалютаДенежныхСредств = Заявка.Валюта
	|				И (Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа)
	|					ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка))
	|			ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|		И (БанковскиеСчета.ВалютаДенежныхСредств = Заявка.БанковскийСчетПолучатель.ВалютаДенежныхСредств
	|			ИЛИ Заявка.БанковскийСчетПолучатель = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.ДоговорыСЗаказчиками КАК Договоры
	|	ПО
	|		Договоры.Ссылка = Заявка.Ссылка
	|		И Договоры.ДоговорСЗаказчиком.БанковскийСчет = БанковскиеСчета.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов.КалькуляцияЗатрат КАК ДоговорыКалькуляцияЗатрат
	|	ПО
	|		ДоговорыКалькуляцияЗатрат.СтатьяКалькуляции = Заявка.СтатьяКалькуляции
	|		И ДоговорыКалькуляцияЗатрат.Ссылка.БанковскийСчет = БанковскиеСчета.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|	ПО
	|		Расшифровка.Ссылка = Заявка.Ссылка
	|		И Расшифровка.ДоговорКредитаДепозита.БанковскийСчет = БанковскиеСчета.Ссылка
	|		
	|	ГДЕ
	|		Заявка.Ссылка В (&Ссылка)
	|		И Заявка.ФормаОплатыБезналичная
	|		И Заявка.ПлатежиПо275ФЗ
	|		И (НЕ Договоры.ДоговорСЗаказчиком ЕСТЬ NULL
	|			ИЛИ (НЕ Заявка.ДоговорСУчастникомГОЗ
	|				И НЕ ДоговорыКалькуляцияЗатрат.Ссылка ЕСТЬ NULL
	|				И НЕ Заявка.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПроцентовПоКредитам))
	|				ИЛИ НЕ БанковскиеСчета.ОтдельныйСчетГОЗ)
	|			ИЛИ (Заявка.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПроцентовПоКредитам))
	|				И НЕ Расшифровка.ДоговорКредитаДепозита ЕСТЬ NULL)
	|			)
	//-- НЕ УТ
	|;
	|
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеБанковскиеСчетаКассы.БанковскийСчетКасса
	|ИЗ
	|	ВсеБанковскиеСчетаКассы КАК ВсеБанковскиеСчетаКассы
	|СГРУППИРОВАТЬ ПО
	|	ВсеБанковскиеСчетаКассы.БанковскийСчетКасса
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВсеБанковскиеСчетаКассы.Заявка) = &ВсегоЗаявок
	|;
	|
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеБанковскиеСчетаКассы.Заявка,
	|	ВсеБанковскиеСчетаКассы.БанковскийСчетКасса
	|ИЗ
	|	ВсеБанковскиеСчетаКассы КАК ВсеБанковскиеСчетаКассы
	|ИТОГИ ПО
	|	ВсеБанковскиеСчетаКассы.Заявка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Заявки);
	Запрос.УстановитьПараметр("ВсегоЗаявок", Заявки.Количество());
	
	Если Исключительные Тогда
		Возврат Запрос.ВыполнитьПакет()[1].Выгрузить().ВыгрузитьКолонку("БанковскийСчетКасса");
	Иначе
		ЗначенияБанковскихСчетовКасс = Новый Соответствие;
		Выборка = Запрос.ВыполнитьПакет()[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			СчетаКассыЗаявки = Новый Массив;
			ВыборкаСчетовКасс = Выборка.Выбрать();
			Пока ВыборкаСчетовКасс.Следующий() Цикл
				СчетаКассыЗаявки.Добавить(ВыборкаСчетовКасс.БанковскийСчетКасса);
			КонецЦикла;
			ЗначенияБанковскихСчетовКасс.Вставить(Выборка.Заявка, СчетаКассыЗаявки);
		КонецЦикла;
		Возврат ЗначенияБанковскихСчетовКасс;
	КонецЕсли;
	
КонецФункции

Функция СтруктураПереносаЗаявки() Экспорт
	
	Возврат Новый Структура("БанковскийСчетКасса, ДатаПлатежа, Валюта, СуммаПереноса, Коэффициент, ВалютаПереноса");
	
КонецФункции

Процедура ПеренестиЗаявки(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("ПланированиеИКонтрольДенежныхСредств.ПереносЗаявокНаРасходованиеДенежныхСредствВПлатежномКалендаре");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПереноса = Параметры.ДанныеПереноса;
	ПланироватьСДаты = Параметры.ПланироватьСДаты;
	
	ПеренесенныеЗаявки = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
		
		Для каждого ОбъектОплаты Из ДанныеПереноса Цикл
			
			ЗаявкаОбъект = ОбъектОплаты.Ключ.ПолучитьОбъект();
			
			Попытка
				ЗаявкаОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(
					НСтр("ru = '%1 находится в процессе редактирования пользователем или системой и не может быть изменена.'"),
					ЗаявкаОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			ИзменитьСтатус = Ложь;
			МожноМенятьЖелаемуюДату = Истина;
			
			Для каждого ЭлементПереноса Из ОбъектОплаты.Значение Цикл
				
				Если ЭлементПереноса.Коэффициент > 0 Тогда
				
					Если ЗначениеЗаполнено(ЭлементПереноса.БанковскийСчетКасса) Тогда
						
						МожноМенятьЖелаемуюДату = Ложь;
						
						Если ЭлементПереноса.ДатаПлатежа >= ПланироватьСДаты Тогда
							
							СтруктураПоиска = Новый Структура("БанковскийСчетКасса, ДатаПлатежа");
							ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементПереноса);
							
							СуммаУменьшения = ЭлементПереноса.СуммаПереноса;
							
							НайденныеСтроки = ЗаявкаОбъект.РаспределениеПоСчетам.НайтиСтроки(СтруктураПоиска);
							
							Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								
								СуммаПоСтроке = Мин(СуммаУменьшения, НайденнаяСтрока.Сумма);
								НайденнаяСтрока.Сумма = НайденнаяСтрока.Сумма - СуммаПоСтроке;
								СуммаУменьшения = СуммаУменьшения - СуммаПоСтроке;
								Если Не НайденнаяСтрока.Сумма Тогда
									ЗаявкаОбъект.РаспределениеПоСчетам.Удалить(НайденнаяСтрока);
								КонецЕсли;
								Если Не СуммаУменьшения Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							СтрокиКУдалению = Новый Массив;
							СуммаРазницы = ЭлементПереноса.СуммаПереноса;
							
							Для каждого СтрокаРаспределения Из ЗаявкаОбъект.РаспределениеПоСчетам Цикл
								
								Если СтрокаРаспределения.БанковскийСчетКасса = ЭлементПереноса.БанковскийСчетКасса Тогда
									Если СтрокаРаспределения.Сумма = ЭлементПереноса.СуммаПереноса Тогда
										СтрокиКУдалению.Добавить(СтрокаРаспределения);
										Прервать;
									ИначеЕсли СтрокаРаспределения.Сумма > СуммаРазницы Тогда
										СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма - СуммаРазницы;
										Прервать;
									Иначе
										СтрокиКУдалению.Добавить(СтрокаРаспределения);
										СуммаРазницы = СуммаРазницы - СтрокаРаспределения.Сумма;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
								ЗаявкаОбъект.РаспределениеПоСчетам.Удалить(СтрокаКУдалению);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
				
					Если ЗначениеЗаполнено(ЭлементПереноса.БанковскийСчетКасса) Тогда
						
						ИзменитьСтатус = Истина;
						
						НоваяСтрокаРаспределения = ЗаявкаОбъект.РаспределениеПоСчетам.Добавить();
						НоваяСтрокаРаспределения.БанковскийСчетКасса = ЭлементПереноса.БанковскийСчетКасса;
						НоваяСтрокаРаспределения.Сумма = ЭлементПереноса.СуммаПереноса;
						Если ЗначениеЗаполнено(ЭлементПереноса.ДатаПлатежа) Тогда
							НоваяСтрокаРаспределения.ДатаПлатежа = ЭлементПереноса.ДатаПлатежа;
						Иначе
							НоваяСтрокаРаспределения.ДатаПлатежа = ЗаявкаОбъект.ЖелательнаяДатаПлатежа;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(ЭлементПереноса.ДатаПлатежа) Тогда
							Если МожноМенятьЖелаемуюДату Тогда
								ЗаявкаОбъект.ЖелательнаяДатаПлатежа = ЭлементПереноса.ДатаПлатежа;
							Иначе
								ЭлементПереноса.ДатаПлатежа = ЗаявкаОбъект.ЖелательнаяДатаПлатежа;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ИзменитьСтатус Тогда
				ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
			КонецЕсли;
			
			Если Не ЗаявкаОбъект.РаспределениеПоСчетам.Количество()
				И ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
				ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
			КонецЕсли;
			
			Если ЗаявкаОбъект.ПроверитьЗаполнение() Тогда
				ЗаявкаОбъект.Записать();
				
				НаборЗаписей = РегистрыНакопления.ДенежныеСредстваКВыплате.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор["Регистратор"].Установить(ЗаявкаОбъект.Ссылка);
				
				ДопСвойства = Новый Структура;
				ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ЗаявкаОбъект.Ссылка, ДопСвойства);
				МенеджерДокумента.ИнициализироватьДанныеДокумента(ЗаявкаОбъект.Ссылка, ДопСвойства, "ДенежныеСредстваКВыплате");
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", ДопСвойства.ДляПроведения);
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
				НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаДенежныеСредстваКВыплате"]);
				НаборЗаписей.Записать();
				
				ПеренесенныеЗаявки.Вставить(ОбъектОплаты.Ключ, ОбъектОплаты.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ПеренесенныеЗаявки.Очистить();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Не удалось перенести заявки по причине: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось перенести заявки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ПеренесенныеЗаявки, АдресРезультата);
	
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, ПеренесенныеЗаявки.Количество());
	
КонецПроцедуры

Процедура ПодготовитьДанныеРаспределенияЗаявок(ДанныеРаспределения,
	ЗаявкиКРаспределению, СписокЗаявок, ДеревоПлатежей, ПланироватьСДаты, ДнейПланирования) Экспорт
	
	Для каждого ЗаявкаКРаспределению Из ЗаявкиКРаспределению Цикл
		Если ТипЗнч(ЗаявкаКРаспределению) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей") Тогда
			
			Если ТипЗнч(ЗаявкаКРаспределению.ОбъектОплаты) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗаявкаКРаспределению.БанковскийСчетКасса) Тогда
				РаспределеннаяЗаявка = СписокЗаявок.Найти(ЗаявкаКРаспределению.ОбъектОплаты);
				Если РаспределеннаяЗаявка <> Неопределено Тогда
					СписокЗаявок.Удалить(РаспределеннаяЗаявка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ДанныеПереносаОбъектаОплаты = ДанныеРаспределения.Получить(ЗаявкаКРаспределению.ОбъектОплаты);
			Если ДанныеПереносаОбъектаОплаты = Неопределено Тогда
				ДанныеПереносаОбъектаОплаты = Новый Массив;
			КонецЕсли;
			
			СтруктураПереноса = СтруктураПереносаЗаявки();
			ЗаполнитьЗначенияСвойств(СтруктураПереноса, ЗаявкаКРаспределению);
			СтруктураПереноса.ВалютаПереноса = ЗаявкаКРаспределению.Валюта;
			ОтборЗаписи = Новый Структура("ОбъектОплаты, БанковскийСчетКасса, ДатаПлатежа,
				|ПоступлениеСписание, ПлательщикПолучатель, Организация, Валюта");
			ЗаполнитьЗначенияСвойств(ОтборЗаписи, ЗаявкаКРаспределению);
			
			СтруктураПереноса.СуммаПереноса = РегистрыСведений.ГрафикПлатежей.Получить(ОтборЗаписи).Сумма;
			СтруктураПереноса.Коэффициент = 1;
			ДанныеПереносаОбъектаОплаты.Добавить(СтруктураПереноса);
			
			ДанныеРаспределения.Вставить(ЗаявкаКРаспределению.ОбъектОплаты, ДанныеПереносаОбъектаОплаты);
		КонецЕсли;
	КонецЦикла;
	
	//++ НЕ УТ
	ФОПлатежи275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	//-- НЕ УТ
	
	СписокРеквизитов = "Ссылка, БанковскийСчет, Касса, ЖелательнаяДатаПлатежа
	//++ НЕ УТ
		|, ПлатежиПо275ФЗ, ДоговорыСЗаказчиками, СтатьяКалькуляции, СуммаДокумента
	//-- НЕ УТ
		|";
	РеквизитыЗаявок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокЗаявок, СписокРеквизитов);
	
	ЗначенияБанковскихСчетовКасс = БанковскиеСчетаКассыДоступныеДляЗаявки(СписокЗаявок, Ложь);
	
	Для каждого Заявка Из СписокЗаявок Цикл
		
		РеквизитыЗаявки = РеквизитыЗаявок.Получить(Заявка);
		
		ДеньПлатежа = ДенежныеСредстваКлиентСервер.ДеньПлатежа(ПланироватьСДаты, РеквизитыЗаявки.ЖелательнаяДатаПлатежа);
		Если ДеньПлатежа > (ДнейПланирования + 1) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаспределенияЗаявки = ДанныеРаспределения.Получить(Заявка);
		СтруктураРаспределения = ДанныеРаспределенияЗаявки[0];
		
		ЖелательныйБанковскийСчетКасса = Неопределено;
		Если ЗначениеЗаполнено(РеквизитыЗаявки.БанковскийСчет) Тогда
			ЖелательныйБанковскийСчетКасса = РеквизитыЗаявки.БанковскийСчет;
		ИначеЕсли ЗначениеЗаполнено(РеквизитыЗаявки.Касса) Тогда
			ЖелательныйБанковскийСчетКасса = РеквизитыЗаявки.Касса;
		КонецЕсли;
		
		СтрокиОстатков = ДеревоПлатежей.Строки.НайтиСтроки(Новый Структура("ВидСтроки", 0), Истина);
		
		Если ЖелательныйБанковскийСчетКасса <> Неопределено Тогда
			НайденныеСтроки = ДеревоПлатежей.Строки.НайтиСтроки(Новый Структура("БанковскийСчетКасса, ВидСтроки", ЖелательныйБанковскийСчетКасса, 0), Истина);
			Если НайденныеСтроки.Количество() Тогда
				ПервыйСчет = СтрокиОстатков.Найти(НайденныеСтроки[0]);
				Если ПервыйСчет <> Неопределено И ПервыйСчет <> 0 Тогда
					СтрокиОстатков.Удалить(ПервыйСчет);
					СтрокиОстатков.Вставить(0, НайденныеСтроки[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДоступныеБанковскиеСчетаКассы = ЗначенияБанковскихСчетовКасс.Получить(Заявка);
		Если ДоступныеБанковскиеСчетаКассы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОсталосьОплатить = СтруктураРаспределения.СуммаПереноса;
		
		//++ НЕ УТ
		Если ФОПлатежи275ФЗ И РеквизитыЗаявки.ПлатежиПо275ФЗ Тогда
			Если ОсталосьОплатить <> РеквизитыЗаявки.СуммаДокумента Тогда
				Продолжить;
			КонецЕсли;

			ЗаСчетСредствГОЗ = СтруктураРаспределения.СуммаПереноса - ОсталосьОплатить;
			Если ЗаСчетСредствГОЗ > 0 Тогда
				РаспределитьСуммуМеждуДоступнымиДоговорами(ДанныеРаспределенияЗаявки, РеквизитыЗаявки, ЗаСчетСредствГОЗ, ДоступныеБанковскиеСчетаКассы, ДеревоПлатежей, ПланироватьСДаты, ДнейПланирования);
			КонецЕсли;
		КонецЕсли;
		//-- НЕ УТ
		
		ОплатитьЗаявкуПоДеревуПлатежей(ДанныеРаспределенияЗаявки, РеквизитыЗаявки, ОсталосьОплатить, ДоступныеБанковскиеСчетаКассы, СтрокиОстатков, ПланироватьСДаты, ДнейПланирования);
		
		СуммаРаспределения = 0;
		Для каждого СтрокаРаспределения Из ДанныеРаспределенияЗаявки Цикл
			СуммаРаспределения = СуммаРаспределения + СтрокаРаспределения.СуммаПереноса * СтрокаРаспределения.Коэффициент;
		КонецЦикла;
		Если СуммаРаспределения Тогда
			ДанныеРаспределения.Удалить(Заявка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось распределить оплату документа %1'"), Заявка),
				Заявка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОплатитьЗаявкуПоДеревуПлатежей(ДанныеРаспределенияЗаявки,
		РеквизитыЗаявки, ОсталосьОплатить, ДоступныеБанковскиеСчетаКассы, СтрокиОстатков, ПланироватьСДаты, ДнейПланирования)
	
	СтруктураРаспределения = ДанныеРаспределенияЗаявки[0];
	
	МинимальныйДеньОплаты = 0;
	
	Для Инд = 1 По ДнейПланирования Цикл
		
		ДеньПроверки = ДнейПланирования - Инд + 1;
		ВсегоДоступноПоСчетамЗаДень = 0;
		
		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			//++ НЕ УТ
			Если СтрокаОстатков.ОтдельныйСчетГОЗ Тогда
				Продолжить;
			КонецЕсли;
			//-- НЕ УТ
			Если ДоступныеБанковскиеСчетаКассы.Найти(СтрокаОстатков.БанковскийСчетКасса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоэффициентКонвертации = 1;
			Если ЗначениеЗаполнено(СтрокаОстатков.Валюта) И СтрокаОстатков.Валюта <> СтруктураРаспределения.Валюта Тогда
				КоэффициентКонвертации = ДенежныеСредстваПовтИсп.КоэффициентКонвертации(
					СтрокаОстатков.Валюта, СтруктураРаспределения.Валюта, ПланироватьСДаты);
			КонецЕсли;
			
			Если СтрокаОстатков["День" + ДеньПроверки] > 0 Тогда
				ВсегоДоступноПоСчетамЗаДень = ВсегоДоступноПоСчетамЗаДень + СтрокаОстатков["День" + ДеньПроверки] * КоэффициентКонвертации;
			КонецЕсли;
			
			Если ВсегоДоступноПоСчетамЗаДень >= ОсталосьОплатить Тогда
				МинимальныйДеньОплаты = ДеньПроверки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не МинимальныйДеньОплаты Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДатаПлатежа = ДенежныеСредстваКлиентСервер.ДатаПлатежа(ПланироватьСДаты, МинимальныйДеньОплаты);
	РасчетнаяДатаОплаты = Макс(МинимальнаяДатаПлатежа, СтруктураРаспределения.ДатаПлатежа);
	
	Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
		//++ НЕ УТ
		Если СтрокаОстатков.ОтдельныйСчетГОЗ Тогда
			Продолжить;
		КонецЕсли;
		//-- НЕ УТ
		Если ДоступныеБанковскиеСчетаКассы.Найти(СтрокаОстатков.БанковскийСчетКасса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентКонвертации = 1;
		Если ЗначениеЗаполнено(СтрокаОстатков.Валюта) И СтрокаОстатков.Валюта <> СтруктураРаспределения.Валюта Тогда
			КоэффициентКонвертации = ДенежныеСредстваПовтИсп.КоэффициентКонвертации(
				СтруктураРаспределения.Валюта, СтрокаОстатков.Валюта, ПланироватьСДаты);
		КонецЕсли;
		
		ОплатитьСоСчета = Мин(СтрокаОстатков["День" + МинимальныйДеньОплаты], ОсталосьОплатить * КоэффициентКонвертации);
		
		Если ОплатитьСоСчета <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОстатков["День" + МинимальныйДеньОплаты] = СтрокаОстатков["День" + МинимальныйДеньОплаты] - ОплатитьСоСчета;
		ОсталосьОплатить = ОсталосьОплатить - ОплатитьСоСчета / КоэффициентКонвертации;
		
		СтруктураПереноса = СтруктураПереносаЗаявки();
		СтруктураПереноса.БанковскийСчетКасса = СтрокаОстатков.БанковскийСчетКасса;
		СтруктураПереноса.ДатаПлатежа = РасчетнаяДатаОплаты;
		СтруктураПереноса.Валюта = СтруктураРаспределения.Валюта;
		СтруктураПереноса.ВалютаПереноса = СтрокаОстатков.Валюта;
		СтруктураПереноса.СуммаПереноса = ОплатитьСоСчета / КоэффициентКонвертации;
		СтруктураПереноса.Коэффициент = -1;
		ДанныеРаспределенияЗаявки.Добавить(СтруктураПереноса);
		
		Если Не ОсталосьОплатить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ
Процедура РаспределитьСуммуМеждуДоступнымиДоговорами(ДанныеРаспределенияЗаявки,
	РеквизитыЗаявки, СуммаКОплате, ДоступныеБанковскиеСчетаКассы, ДеревоПлатежей, ПланироватьСДаты, ДнейПланирования)
	
	СтруктураРаспределения = ДанныеРаспределенияЗаявки[0];
	
	ТаблицаОстатковПоСтатьямКалькуляции =
		ОстаткиПоСтатьямКалькуляции(ДоступныеБанковскиеСчетаКассы, РеквизитыЗаявки.СтатьяКалькуляции, РеквизитыЗаявки.Ссылка);
	
	ТаблицаОстатковПоСтатьямКалькуляции.Колонки.Добавить("Отклонение", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОстатковПоСтатьямКалькуляции.Колонки.Добавить("Распределено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОстатковПоСтатьямКалькуляции.Колонки.Добавить("РаспределеноВТекущейИттерации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Если Не ТаблицаОстатковПоСтатьямКалькуляции.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОстатокКРаспределению = СуммаКОплате;
	Пока ОстатокКРаспределению Цикл
		
		РассчитатьОтклонение(ТаблицаОстатковПоСтатьямКалькуляции);
	
		НижнееОтклонение = ТаблицаОстатковПоСтатьямКалькуляции[0].Отклонение;
		СледующееОтклонение = Неопределено;
		
		Для Сч = 1 по ТаблицаОстатковПоСтатьямКалькуляции.Количество() - 1 Цикл
			СтрокаОстатков = ТаблицаОстатковПоСтатьямКалькуляции[Сч];
			Если СтрокаОстатков.Отклонение <> НижнееОтклонение Тогда
				СледующееОтклонение = СтрокаОстатков.Отклонение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СледующееОтклонение = Неопределено Тогда
			
			РаспределитьПоСчетамПропорционально(ТаблицаОстатковПоСтатьямКалькуляции, ОстатокКРаспределению);
			
		Иначе
			
			НайденныеСтроки = ТаблицаОстатковПоСтатьямКалькуляции.НайтиСтроки(Новый Структура("Отклонение", НижнееОтклонение));
			ВсегоПоСтатьям = 0; Израсходовано = 0;
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ВсегоПоСтатьям = ВсегоПоСтатьям + НайденнаяСтрока.Сумма;
				Израсходовано = Израсходовано + НайденнаяСтрока.ИзрасходованоПоСтатье;
			КонецЦикла;
			СреднийПроцент = 100 * Израсходовано / ВсегоПоСтатьям;
			Прирост = СледующееОтклонение - НижнееОтклонение;
			НовыйПроцент = СреднийПроцент + Прирост;
			НоваяСумма = НовыйПроцент * ВсегоПоСтатьям / 100;
			Прирост = НоваяСумма - Израсходовано;
			Прирост = Мин(Прирост, ОстатокКРаспределению);
			
			РаспределитьПоСчетамПропорционально(НайденныеСтроки, Прирост);
			
		КонецЕсли;
		
		Распределено = 0;
		
		Для Каждого СтрокаОстатков из ТаблицаОстатковПоСтатьямКалькуляции Цикл
			
			СтрокаПоискаОстатка = СтрокаСчетаКассы(ДеревоПлатежей, СтрокаОстатков.БанковскийСчет, Истина);
			Если СтрокаПоискаОстатка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступныйОстаток = СтрокаПоискаОстатка["День" + ДнейПланирования];
			Если ДоступныйОстаток < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступныйОстаток = ДоступныйОстаток - СтрокаОстатков.Распределено;
			ДоступныйОстаток = Макс(ДоступныйОстаток, 0);
			
			МожноРаспределить = Мин(ДоступныйОстаток, СтрокаОстатков.РаспределеноВТекущейИттерации);
			
			СтрокаОстатков.РаспределеноВТекущейИттерации = 0;
			Распределено = Распределено + МожноРаспределить;
			
			СтрокаОстатков.Распределено = СтрокаОстатков.Распределено + МожноРаспределить;
			СтрокаОстатков.ИзрасходованоПоСтатье = СтрокаОстатков.ИзрасходованоПоСтатье + МожноРаспределить;
			
		КонецЦикла;
		
		Если Не Распределено Тогда
			Возврат;
		КонецЕсли;
		
		ОстатокКРаспределению = ОстатокКРаспределению - Распределено;
		
	КонецЦикла;
	
	МинимальнаяВозможнаяДатаОплаты = Неопределено;
	Для Сч = 1 По ДнейПланирования Цикл
		
		ДеньПроверки = ДнейПланирования - Сч + 1;
		ВсегоДоступноПоСчетамЗаДень = 0;
		
		ВТекущийДеньСредствДостаточно = Истина;
		
		Для Каждого ЭлементСписка из ТаблицаОстатковПоСтатьямКалькуляции Цикл
			
			СчетКасса = ЭлементСписка.БанковскийСчет;
			
			СтрокаПоискаОстатка = СтрокаСчетаКассы(ДеревоПлатежей, СчетКасса, Истина);
			Если СтрокаПоискаОстатка = Неопределено Тогда
				ВТекущийДеньСредствДостаточно = Ложь;
				Прервать;
			КонецЕсли;
			
			ДоступныйОстаток = СтрокаПоискаОстатка["День" + ДеньПроверки];
			Если ДоступныйОстаток < 0 Тогда
				ВТекущийДеньСредствДостаточно = Ложь;
				Прервать;
			КонецЕсли;
			
			Если ДоступныйОстаток < ЭлементСписка.Распределено Тогда
				ВТекущийДеньСредствДостаточно = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ВТекущийДеньСредствДостаточно Тогда
			Прервать;
		КонецЕсли;
		
		МинимальнаяВозможнаяДатаОплаты = ДеньПроверки;
		
	КонецЦикла;
	
	Если МинимальнаяВозможнаяДатаОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПлатежа = ДенежныеСредстваКлиентСервер.ДатаПлатежа(ПланироватьСДаты, МинимальнаяВозможнаяДатаОплаты);
	РассчитаннаяДатаОплаты = Макс(ДатаПлатежа, РеквизитыЗаявки.ЖелательнаяДатаПлатежа);
	
	Для Каждого СтрокаРаспределения из ТаблицаОстатковПоСтатьямКалькуляции Цикл
		
		Если Не СтрокаРаспределения.Распределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПереноса = СтруктураПереносаЗаявки();
		СтруктураПереноса.БанковскийСчетКасса = СтрокаРаспределения.БанковскийСчет;
		СтруктураПереноса.ДатаПлатежа = РассчитаннаяДатаОплаты;
		СтруктураПереноса.Валюта = СтруктураРаспределения.Валюта;
		СтруктураПереноса.СуммаПереноса = СтрокаРаспределения.Распределено;
		СтруктураПереноса.Коэффициент = -1;
		ДанныеРаспределенияЗаявки.Добавить(СтруктураПереноса);
	КонецЦикла;
	
КонецПроцедуры

Функция ОстаткиПоСтатьямКалькуляции(СписокСчетов, СтатьяКалькуляции, Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Договоры.БанковскийСчет,
	|	СУММА(Договоры.СуммаМинусВозмещение) КАК Сумма,
	|	МАКСИМУМ(Договоры.ПланПроцентИсполнения) КАК ПланПроцентИсполнения
	|ПОМЕСТИТЬ ИтогоПоДоговорам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.БанковскийСчет КАК БанковскийСчет,
	|		ДоговорыКонтрагентовКалькуляцияЗатрат.Сумма - ДоговорыКонтрагентовКалькуляцияЗатрат.СуммаКВозмещению КАК СуммаМинусВозмещение,
	|		ВЫБОР
	|			КОГДА ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия = &ПустаяДата
	|					ИЛИ ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия = &ПустаяДата
	|					ИЛИ ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия <= &ТекущаяДата
	|				ТОГДА 100
	|			ИНАЧЕ 100 * РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия, МЕСЯЦ), КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ), МЕСЯЦ) / РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия, МЕСЯЦ), КОНЕЦПЕРИОДА(ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия, МЕСЯЦ), МЕСЯЦ)
	|		КОНЕЦ КАК ПланПроцентИсполнения
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов.КалькуляцияЗатрат КАК ДоговорыКонтрагентовКалькуляцияЗатрат
	|	ГДЕ
	|		ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.БанковскийСчет В(&СписокСчетов)
	|		И НЕ ДоговорыКонтрагентовКалькуляцияЗатрат.Ссылка.ПометкаУдаления
	|		И ДоговорыКонтрагентовКалькуляцияЗатрат.СтатьяКалькуляции = &СтатьяКалькуляции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.БанковскийСчет,
	|		ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Сумма - ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.СуммаКВозмещению,
	|		ВЫБОР
	|			КОГДА ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия = &ПустаяДата
	|					ИЛИ ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия = &ПустаяДата
	|					ИЛИ ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия <= &ТекущаяДата
	|				ТОГДА 100
	|			ИНАЧЕ 100 * РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия, МЕСЯЦ), КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ), МЕСЯЦ) / РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаНачалаДействия, МЕСЯЦ), КОНЕЦПЕРИОДА(ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ДатаОкончанияДействия, МЕСЯЦ), МЕСЯЦ)
	|		КОНЕЦ
	|	ИЗ
	|		Справочник.ДоговорыМеждуОрганизациями.КалькуляцияЗатрат КАК ДоговорыМеждуОрганизациямиКалькуляцияЗатрат
	|	ГДЕ
	|		ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.БанковскийСчет В(&СписокСчетов)
	|		И НЕ ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.Ссылка.ПометкаУдаления
	|		И ДоговорыМеждуОрганизациямиКалькуляцияЗатрат.СтатьяКалькуляции = &СтатьяКалькуляции) КАК Договоры
	|
	|СГРУППИРОВАТЬ ПО
	|	Договоры.БанковскийСчет
	|
	|ИМЕЮЩИЕ
	|	СУММА(Договоры.СуммаМинусВозмещение) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка,
	|	ДенежныеСредстваКВыплатеОстатки.БанковскийСчетКасса,
	|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ НеоплаченныеЗаявкиПоСтатье
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредстваКВыплатеОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО
	|		Заявка.Ссылка = ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств
	|		
	|ГДЕ
	|	Заявка.СтатьяКалькуляции = &СтатьяКалькуляции
	|	И ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК ДокументСписания
	|ПОМЕСТИТЬ ДокументыСписанияПоЗаявкам
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеоплаченныеЗаявкиПоСтатье КАК НеоплаченныеЗаявкиПоСтатье
	|		ПО СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств = НеоплаченныеЗаявкиПоСтатье.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатыПоЗаявкам.ДенежныеСредства,
	|	СУММА(ОплатыПоЗаявкам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ОплатыПоЗаявкам
	|ИЗ (
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходы.ДенежныеСредства КАК ДенежныеСредства,
	|	ДвиженияДенежныеСредстваДоходыРасходы.СуммаВВалюте КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияДенежныеСредстваДоходыРасходы
	|ГДЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.СтатьяКалькуляции = &СтатьяКалькуляции
	|	И ДвиженияДенежныеСредстваДоходыРасходы.ДенежныеСредства В(&СписокСчетов)
	|	И ДвиженияДенежныеСредстваДоходыРасходы.Регистратор В
	|			(ВЫБРАТЬ
	|				Фильтр.ДокументСписания
	|			ИЗ
	|				ДокументыСписанияПоЗаявкам КАК Фильтр)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагент.ДенежныеСредства,
	|	ДвиженияДенежныеСредстваКонтрагент.СуммаОплатыВВалютеПлатежа
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
	|ГДЕ
	|	ДвиженияДенежныеСредстваКонтрагент.СтатьяКалькуляции = &СтатьяКалькуляции
	|	И ДвиженияДенежныеСредстваКонтрагент.ДенежныеСредства В(&СписокСчетов)
	|	И ДвиженияДенежныеСредстваКонтрагент.Регистратор В
	|			(ВЫБРАТЬ
	|				Фильтр.ДокументСписания
	|			ИЗ
	|				ДокументыСписанияПоЗаявкам КАК Фильтр)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредств.ДенежныеСредства,
	|	ДвиженияДенежныхСредств.СуммаВВалюте
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДвиженияДенежныхСредств
	|ГДЕ
	|	ДвиженияДенежныхСредств.СтатьяКалькуляции = &СтатьяКалькуляции
	|	И ДвиженияДенежныхСредств.ДенежныеСредства В(&СписокСчетов)
	|	И ДвиженияДенежныхСредств.Регистратор В
	|			(ВЫБРАТЬ
	|				Фильтр.ДокументСписания
	|			ИЗ
	|				ДокументыСписанияПоЗаявкам КАК Фильтр)
	|) КАК ОплатыПоЗаявкам
	|СГРУППИРОВАТЬ ПО
	|	ОплатыПоЗаявкам.ДенежныеСредства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеоплаченныеЗаявкиПоСтатье.БанковскийСчетКасса,
	|	НеоплаченныеЗаявкиПоСтатье.Сумма - ЕСТЬNULL(ОплатыПоЗаявке.Сумма, 0) КАК Сумма
	|ПОМЕСТИТЬ РазмещеноВЗаявках
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заявки.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|		СУММА(Заявки.Сумма) КАК Сумма
	|	ИЗ
	|		НеоплаченныеЗаявкиПоСтатье КАК Заявки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Заявки.БанковскийСчетКасса) КАК НеоплаченныеЗаявкиПоСтатье
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоЗаявкам КАК ОплатыПоЗаявке
	|		ПО НеоплаченныеЗаявкиПоСтатье.БанковскийСчетКасса = ОплатыПоЗаявке.ДенежныеСредства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ДенежныеСредства КАК ДенежныеСредства,
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.СуммаВВалютеОборот КАК Сумма
	|ПОМЕСТИТЬ ОплатыПоСтатье
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			,
	|			,
	|			,
	|			СтатьяКалькуляции = &СтатьяКалькуляции
	|				И ДенежныеСредства В (&СписокСчетов)) КАК ДвиженияДенежныеСредстваДоходыРасходыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.ДенежныеСредства,
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыВВалютеПлатежаОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			,
	|			,
	|			,
	|			СтатьяКалькуляции = &СтатьяКалькуляции
	|				И ДенежныеСредства В (&СписокСчетов)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредствОбороты.ДенежныеСредства,
	|	ДвиженияДенежныхСредствОбороты.СуммаВВалютеОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(
	|			,
	|			,
	|			,
	|			СтатьяКалькуляции = &СтатьяКалькуляции
	|				И ДенежныеСредства В (&СписокСчетов)) КАК ДвиженияДенежныхСредствОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогоПоДоговорам.БанковскийСчет,
	|	ИтогоПоДоговорам.Сумма,
	|	ИтогоПоДоговорам.ПланПроцентИсполнения,
	|	ЕСТЬNULL(ОплатыПоСтатье.Сумма, 0) + ЕСТЬNULL(РазмещеноВЗаявках.Сумма, 0) КАК ИзрасходованоПоСтатье,
	|	0 КАК ФактПроцентИсполнения
	|ИЗ
	|	ИтогоПоДоговорам КАК ИтогоПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОплатыПоСтатье.ДенежныеСредства КАК ДенежныеСредства,
	|			СУММА(ОплатыПоСтатье.Сумма) КАК Сумма
	|		ИЗ
	|			ОплатыПоСтатье КАК ОплатыПоСтатье
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОплатыПоСтатье.ДенежныеСредства) КАК ОплатыПоСтатье
	|		ПО ИтогоПоДоговорам.БанковскийСчет = ОплатыПоСтатье.ДенежныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазмещеноВЗаявках КАК РазмещеноВЗаявках
	|		ПО ИтогоПоДоговорам.БанковскийСчет = РазмещеноВЗаявках.БанковскийСчетКасса
	|";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	Запрос.УстановитьПараметр("СтатьяКалькуляции", СтатьяКалькуляции);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура РассчитатьОтклонение(ТаблицаОстатков)
	
	Для Каждого СтрокаОстатков из ТаблицаОстатков Цикл
		
		СтрокаОстатков.ПланПроцентИсполнения = Окр(СтрокаОстатков.ПланПроцентИсполнения, 2);
		Если Не ЗначениеЗаполнено(СтрокаОстатков.Сумма) Тогда
			СтрокаОстатков.ФактПроцентИсполнения = 0;
		Иначе
			СтрокаОстатков.ФактПроцентИсполнения = СтрокаОстатков.ИзрасходованоПоСтатье * 100 / СтрокаОстатков.Сумма;
		КонецЕсли;
		СтрокаОстатков.ФактПроцентИсполнения = Окр(СтрокаОстатков.ФактПроцентИсполнения, 2);
		СтрокаОстатков.Отклонение = СтрокаОстатков.ФактПроцентИсполнения - СтрокаОстатков.ПланПроцентИсполнения;
		
	КонецЦикла;
	
	ТаблицаОстатков.Сортировать("Отклонение");
	
КонецПроцедуры

Процедура РаспределитьПоСчетамПропорционально(СтрокиКРаспределению, Сумма)
	
	МассивКоэффициентов = Новый Массив;
	Для Каждого СтрокаРаспределения из СтрокиКРаспределению Цикл
		МассивКоэффициентов.Добавить(СтрокаРаспределения.Сумма);
	КонецЦикла;
	
	РезультатРаспределения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(Сумма, МассивКоэффициентов);
	Для Сч = 0 по МассивКоэффициентов.ВГраница() Цикл
		СтрокаРаспределения = СтрокиКРаспределению[Сч];
		РаспределеннаяСумма = РезультатРаспределения[Сч];
		СтрокаРаспределения.РаспределеноВТекущейИттерации = РаспределеннаяСумма;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаСчетаКассы(ДеревоПлатежей, БанковскийСчетКасса, ОтдельныйСчетГОЗ = Ложь)
	
	СтруктураПоиска = Новый Структура("БанковскийСчетКасса, ОтдельныйСчетГОЗ", БанковскийСчетКасса, ОтдельныйСчетГОЗ);
	
	НайденныеСтроки = ДеревоПлатежей.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Если Не НайденныеСтроки.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаПоискаОстатка = НайденныеСтроки[0];
	
	Возврат СтрокаПоискаОстатка;
	
КонецФункции
//-- НЕ УТ

Процедура УдалитьМакетыДереваПлатежейИзХранилища() Экспорт
	
	ХранилищеОбщихНастроек.Удалить("Обработка.ПлатежныйКалендарь", "ДеревоПлатежей", Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли