#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументыДляПлатежей.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресДокументовДляФормированияПлатежей));
	ЗаполнитьТЧЗаявки();
	
	Если Не Заявки.Количество() Тогда
		ОтборПоРезультатамКонтроля = 2;
		ЗаполнитьТЧЗаявки(, Ложь);
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	// КомандыЭДО
	ОбменСБанками.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюЭДО);
	// Конец КомандыЭДО
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРезультатамКонтроляПриИзменении(Элемент)
	
	ЗаполнитьТЧЗаявки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявки

&НаКлиенте
Процедура ЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ЗаявкиБанковскийСчет
		И Поле <> Элементы.ЗаявкиДатаПлатежа Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущийДокумент = Элемент.ТекущиеДанные.Ссылка;
		ЗаявкиПриАктивизацииСтрокиНаСервере(ТекущийДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкиПриАктивизацииСтрокиНаСервере(ТекущийДокумент)
	
	РезультатыКонтроляДокумента.Очистить();
	
	Отбор = Новый Структура("Ссылка", ТекущийДокумент);
	СтрокиРезультатовКонтроля = РезультатыКонтроля.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаРезультатовКонтроля Из СтрокиРезультатовКонтроля Цикл 
		НовыйРезультатДокумента = РезультатыКонтроляДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйРезультатДокумента, СтрокаРезультатовКонтроля);
	КонецЦикла;
	
	ОбновитьПоказателиКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиБанковскийСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	СтруктураЗаполнения = Новый Структура("Ссылка, БанковскийСчет, ДатаПлатежа, Пометка, РезультатКонтроля, КартинкаКонтроля, КоличествоОшибок");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ТекущиеДанные);
	РеквизитСтрокиПриИзмененииСервер(СтруктураЗаполнения, "Ссылка, ДатаПлатежа");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиДатаПлатежаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	СтруктураЗаполнения = Новый Структура("Ссылка, БанковскийСчет, ДатаПлатежа, Пометка, РезультатКонтроля, КартинкаКонтроля, КоличествоОшибок");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ТекущиеДанные);
	РеквизитСтрокиПриИзмененииСервер(СтруктураЗаполнения, "Ссылка, БанковскийСчет");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураЗаполнения);
	
КонецПроцедуры

&НаСервере 
Процедура РеквизитСтрокиПриИзмененииСервер(СтруктураЗаполнения, ПоляКонтроля)
	
	Отбор = Новый Структура(ПоляКонтроля);
	ЗаполнитьЗначенияСвойств(Отбор, СтруктураЗаполнения);
	
	// Актуализация в таблице документов
	НайденныеСтроки = ДокументыДляПлатежей.НайтиСтроки(Отбор);
	ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтруктураЗаполнения);
	
	// Очистка контролей, т.к. будут произведены заново
	НайденныеСтроки = РезультатыКонтроля.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		РезультатыКонтроля.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	//++ НЕ УТ
	// Контроль выбранной строки с учетом изменений
	Если ТипЗнч(СтруктураЗаполнения.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ЗаявкиДляКонтроля275ФЗ = Новый Массив;
		ЗаявкиДляКонтроля275ФЗ.Добавить(СтруктураЗаполнения.Ссылка);
		ДанныеДляКонтроля = ДанныеДокументовДляКонтроля(ЗаявкиДляКонтроля275ФЗ);
		ПровестиКонтрольДокумента275ФЗ(ДанныеДляКонтроля, СтруктураЗаполнения);
	КонецЕсли;
	//-- НЕ УТ
	
	ПровестиКонтрольДокументаОбщий(СтруктураЗаполнения);
	СводныеПоказатели = СводныеПоказателиКонтроляПоДокументу(СтруктураЗаполнения, ПоляКонтроля);
	ЗаполнитьРеквизитыКонтроля(СтруктураЗаполнения, СводныеПоказатели);
	ЗаявкиПриАктивизацииСтрокиНаСервере(СтруктураЗаполнения.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыКонтроляДокумента

&НаКлиенте
Процедура РезультатыКонтроляДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элементы.Заявки.ТекущиеДанные.Ссылка); // иное открытие, чтобы после изменения обновлялась ТЧ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеДокументы

&НаКлиенте
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элементы.СформированныеДокументы.ТекущиеДанные.Ссылка); // иное открытие, чтобы после изменения обновлялась ТЧ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументы;
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольЗаявок;
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого Заявка Из Заявки Цикл
		Заявка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для Каждого Заявка Из Заявки Цикл
		Заявка.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольЗаявок Тогда
		ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.СформированныеДокументы.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеПоручения(Команда)
	
	СформированоДокументов = СформироватьПлатежныеПорученияНаСервере();
	
	// Используется для автоматического обновления формы платежного календаря
	Оповестить("ПомощникФормированияПлатежныхПоручений_ПорученияСформированы");
	
	ТекстСообщения = НСтр("ru = 'Сформировано документов %1'");
	ПоказатьОповещениеПользователя(СтрШаблон(ТекстСообщения, СформированоДокументов));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПлатежейВБанк(Команда)
	
	// Формирование параметров открытия
	ПараметрыКлиентБанка = Новый Структура("АдресДокументовДляВыгрузки", АдресДокументовДляВыгрузки());
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк", 
		ПараметрыКлиентБанка,
		ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.СформированныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСБанком(Команда)
	
	ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьТЧЗаявки(,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСТЧЗаявки

&НаСервере
Процедура ЗаполнитьТЧЗаявки(Документ = Неопределено, Контролировать = Истина, Перечитать = Ложь)
	
	Заявки.Очистить();
	Если Документ = Неопределено Тогда
		РезультатыКонтроля.Очистить();
	Иначе
		ОтборПоДокументу = Новый Структура("Ссылка", Документ);
		НайденныеСтроки = РезультатыКонтроля.НайтиСтроки(ОтборПоДокументу);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			РезультатыКонтроля.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если Контролировать Тогда
		
		//++ НЕ УТ
		// Контроль заявок на расходование ДС на соответствие 275-ФЗ
		ЗаявкиДляКонтроля275ФЗ = Новый ТаблицаЗначений;
		ЗаявкиДляКонтроля275ФЗ.Колонки.Добавить("Ссылка");
		ЗаявкиДляКонтроля275ФЗ.Колонки.Добавить("БанковскийСчет");
		ЗаявкиДляКонтроля275ФЗ.Колонки.Добавить("ДатаПлатежа");
		
		Для Каждого СтрокаДокумента Из ДокументыДляПлатежей Цикл
			Если ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				НоваяСтрока = ЗаявкиДляКонтроля275ФЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляКонтроля = ДанныеДокументовДляКонтроля(ЗаявкиДляКонтроля275ФЗ.ВыгрузитьКолонку("Ссылка"), Перечитать);
		
		Если Документ = Неопределено Тогда
			Для Каждого ЗаявкаДляКонтроля275ФЗ Из ЗаявкиДляКонтроля275ФЗ Цикл
				ПровестиКонтрольДокумента275ФЗ(ДанныеДляКонтроля, ЗаявкаДляКонтроля275ФЗ);
			КонецЦикла;
		Иначе
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				ПровестиКонтрольДокумента275ФЗ(ДанныеДляКонтроля, Документ);
			КонецЕсли;
		КонецЕсли;
		//-- НЕ УТ
		
		// Контроль возможности формирования списаний, на основании заявок
		Если Документ = Неопределено Тогда
			Для Каждого СтрокаДокумента Из ДокументыДляПлатежей Цикл
				ПровестиКонтрольДокументаОбщий(СтрокаДокумента);
			КонецЦикла;
		Иначе
			ПровестиКонтрольДокументаОбщий(Документ);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение табличной части заявок
	Для Каждого ДокументДляПлатежа Из ДокументыДляПлатежей Цикл 
		
		СводныеПоказатели = СводныеПоказателиКонтроляПоДокументу(ДокументДляПлатежа, "Ссылка, БанковскийСчет, ДатаПлатежа");
		КонтрольПройден = СводныеПоказатели.КонтрольПройден;
		
		Если ОтборПоРезультатамКонтроля = 1 И Не КонтрольПройден Тогда // Только прошедшие контроль
			Продолжить;
		ИначеЕсли ОтборПоРезультатамКонтроля = 0 И КонтрольПройден Тогда // Только не прошедшие контроль
			Продолжить;
		КонецЕсли;
		
		НоваяЗаявка = Заявки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаявка, ДокументДляПлатежа);
		ЗаполнитьРеквизитыКонтроля(НоваяЗаявка, СводныеПоказатели);
	КонецЦикла;
	
	ОбновитьПоказателиКоличества();
	
КонецПроцедуры

&НаСервере
Функция СводныеПоказателиКонтроляПоДокументу(Знач ДокументДляПлатежа, ПоляКонтроля)
	
	СводныеПоказатели = Новый Структура("КоличествоОшибок, КоличествоВсе, КонтрольПройден, РезультатКонтроля"); 
	
	Отбор = Новый Структура(ПоляКонтроля);
	ЗаполнитьЗначенияСвойств(Отбор, ДокументДляПлатежа);
	СтрокиКонтроляВсе = РезультатыКонтроля.НайтиСтроки(Отбор);
	
	ОтборКонтрольНеПройден = Новый Структура(ПоляКонтроля + ", КонтрольПройден");
	ЗаполнитьЗначенияСвойств(ОтборКонтрольНеПройден, ДокументДляПлатежа);
	ОтборКонтрольНеПройден.Вставить("КонтрольПройден", Ложь);
	СтрокиКонтроляКонтрольНеПройден = РезультатыКонтроля.НайтиСтроки(ОтборКонтрольНеПройден);
	
	КоличествоВсе = СтрокиКонтроляВсе.Количество();
	КоличествоОшибок = СтрокиКонтроляКонтрольНеПройден.Количество();
	
	КонтрольПройден = (КоличествоОшибок = 0);
	
	СводныеПоказатели.Вставить("КоличествоВсе", КоличествоВсе);
	СводныеПоказатели.Вставить("КоличествоОшибок", КоличествоОшибок);
	СводныеПоказатели.Вставить("КонтрольПройден", КонтрольПройден);
	СводныеПоказатели.Вставить("РезультатКонтроля", 
		?(СтрокиКонтроляКонтрольНеПройден.Количество() = 1, СтрокиКонтроляКонтрольНеПройден[0].РезультатКонтроля, ""));
	
	Возврат СводныеПоказатели;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыКонтроля(ДанныеЗаполнения, СводныеПоказателиКонтроля)
	
	ДанныеЗаполнения.КоличествоОшибок = СводныеПоказателиКонтроля.КоличествоОшибок;
	
	РезультатКонтроля = "";
	Если СводныеПоказателиКонтроля.КоличествоОшибок = 0 Тогда
		РезультатКонтроля = НСтр("ru = 'Контроль пройден'");
	ИначеЕсли СводныеПоказателиКонтроля.КоличествоОшибок = 1 Тогда
		РезультатКонтроля = СводныеПоказателиКонтроля.РезультатКонтроля;
	Иначе
		РезультатКонтроля = НСтр("ru = 'См. ""Результаты контроля""'");
	КонецЕсли;
	
	ДанныеЗаполнения.Пометка = СводныеПоказателиКонтроля.КонтрольПройден;
	ДанныеЗаполнения.РезультатКонтроля = РезультатКонтроля;
	ДанныеЗаполнения.КартинкаКонтроля = ?(СводныеПоказателиКонтроля.КонтрольПройден, 1, 4);
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Функция ДанныеДокументовДляКонтроля(Знач ЗаявкиДляКонтроля275ФЗ, Перечитать = Ложь)
	
	Перем ДанныеДляКонтроля;
	
	// Проверка кэша данных проверки
	// На время существования формы, данные контроля не изменяются
	Если Не Перечитать И ЗначениеЗаполнено(АдресДанныхДляКонтроля) Тогда
		ДанныеДляКонтроля = ПолучитьИзВременногоХранилища(АдресДанныхДляКонтроля);
	Иначе
		ДанныеДляКонтроля = ДенежныеСредстваСервер.ДанныеДокументовДляКонтроля(ЗаявкиДляКонтроля275ФЗ);
		АдресДанныхДляКонтроля = ПоместитьВоВременноеХранилище(ДанныеДляКонтроля, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ДанныеДляКонтроля;
	
КонецФункции

&НаСервере
Процедура ПровестиКонтрольДокумента275ФЗ(Знач ДанныеДляКонтроля, Знач РеквизитыПлатежа)
	
	Перем КонтрольДокумента, ОписаниеРезультата;
	
	КонтрольДокумента = ДенежныеСредстваСервер.КонтрольДокумента(РеквизитыПлатежа.Ссылка, ДанныеДляКонтроля);
	
	Если КонтрольДокумента.ВсеКонтролиПройдены Тогда
		ДобавитьРезультатКонтроля(
			РеквизитыПлатежа.Ссылка,
			РеквизитыПлатежа.БанковскийСчет,
			РеквизитыПлатежа.ДатаПлатежа,
			НСтр("ru = 'Платежный документ может быть сформирован'"), 
			КонтрольДокумента.ВсеКонтролиПройдены);
	Иначе
		Для Каждого ОписаниеРезультата Из КонтрольДокумента.ОписанияРезультатов Цикл
			Если Не ОписаниеРезультата.КонтрольПройден Тогда
				ДобавитьРезультатКонтроля(
					РеквизитыПлатежа.Ссылка,
					РеквизитыПлатежа.БанковскийСчет,
					РеквизитыПлатежа.ДатаПлатежа,
					ОписаниеРезультата.Описание, 
					ОписаниеРезультата.КонтрольПройден);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ПровестиКонтрольДокументаОбщий(Знач РеквизитыПлатежа)
	
	Перем КонтрольПройден;
	
	Если Не ЗначениеЗаполнено(РеквизитыПлатежа.ДатаПлатежа) Тогда
		КонтрольПройден = Ложь;
		
		ДобавитьРезультатКонтроля(
			РеквизитыПлатежа.Ссылка,
			РеквизитыПлатежа.БанковскийСчет,
			РеквизитыПлатежа.ДатаПлатежа,
			НСтр("ru = 'Требуется указание даты платежа'"), 
			КонтрольПройден);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РеквизитыПлатежа.БанковскийСчет) Тогда
		КонтрольПройден = Ложь;
		
		ДобавитьРезультатКонтроля(
			РеквизитыПлатежа.Ссылка,
			РеквизитыПлатежа.БанковскийСчет,
			РеквизитыПлатежа.ДатаПлатежа,
			НСтр("ru = 'Требуется указание банковского счета'"), 
			КонтрольПройден);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРезультатКонтроля(Ссылка, БанковскийСчет, ДатаПлатежа, РезультатКонтроля, КонтрольПройден)
	
	Отбор = Новый Структура("Ссылка, РезультатКонтроля, КонтрольПройден", Ссылка, РезультатКонтроля, КонтрольПройден);
	СтрокиПроверки = РезультатыКонтроля.НайтиСтроки(Отбор);
	
	Если СтрокиПроверки.Количество() = 0 Тогда
		НовыйРезультат = РезультатыКонтроля.Добавить();
		
		НовыйРезультат.Ссылка = Ссылка;
		НовыйРезультат.БанковскийСчет = БанковскийСчет;
		НовыйРезультат.ДатаПлатежа = ДатаПлатежа;
		
		НовыйРезультат.РезультатКонтроля = РезультатКонтроля;
		НовыйРезультат.КартинкаКонтроля = ?(КонтрольПройден, 1, 4);
		НовыйРезультат.КонтрольПройден = КонтрольПройден;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТЧСформированныеДокументы

&НаСервере
Функция СформироватьПлатежныеПорученияНаСервере()
	
	ОтборПомеченных = Новый Структура("Пометка", Истина);
	СтрокиКОплате = Заявки.НайтиСтроки(ОтборПомеченных);
	
	ТаблицаДокументов = Заявки.Выгрузить(СтрокиКОплате);
	ТаблицаДокументов.Колонки.Добавить("ОтдельныйСчетГОЗ");
	ТаблицаДокументов.Колонки.Добавить("ВалютаДенежныхСредств");
	
	МассивСчетов = ТаблицаДокументов.ВыгрузитьКолонку("БанковскийСчет");
	РеквизитыСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "ВалютаДенежныхСредств, ОтдельныйСчетГОЗ");
	
	Для каждого СтрокаСчета Из ТаблицаДокументов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.БанковскийСчет) Тогда
			СтрокаСчета.ОтдельныйСчетГОЗ = РеквизитыСчетов[СтрокаСчета.БанковскийСчет].ОтдельныйСчетГОЗ;
			СтрокаСчета.ВалютаДенежныхСредств = РеквизитыСчетов[СтрокаСчета.БанковскийСчет].ВалютаДенежныхСредств;
		Иначе
			СтрокаСчета.ОтдельныйСчетГОЗ = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВалютаДенежныхСредств)
			И СтрокаТаблицы.ВалютаДенежныхСредств <> СтрокаТаблицы.Валюта Тогда
			СтрокаТаблицы.СуммаКОплате = РаботаСКурсамиВалют.ПересчитатьВВалюту(
				СтрокаТаблицы.СуммаКОплате, СтрокаТаблицы.Валюта, СтрокаТаблицы.ВалютаДенежныхСредств, ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаГруппировки = ТаблицаДокументов.Скопировать();
	ТаблицаГруппировки.Свернуть("БанковскийСчет, ПлательщикПолучатель, ХозяйственнаяОперация, ОтдельныйСчетГОЗ", "СуммаКОплате");
	
	СформированоДокументов = 0;
	
	СписокПлатежей = Новый Массив;
	Для каждого СтрокаГруппировки Из ТаблицаГруппировки Цикл
		
		Если СтрокаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПлатежей = Новый Структура("БанковскийСчет, ПлательщикПолучатель, ХозяйственнаяОперация");
		ЗаполнитьЗначенияСвойств(ОтборПлатежей, СтрокаГруппировки);
		
		МассивСсылок = Новый Массив;
		СписокПлатежей = ТаблицаДокументов.НайтиСтроки(ОтборПлатежей);
		Для Каждого СтрокаПлатежа из СписокПлатежей Цикл
			МассивСсылок.Добавить(СтрокаПлатежа.Ссылка);
		КонецЦикла;
		
		Если СформированныеДокументы.НайтиСтроки(Новый Структура("Заявка", СтрокаПлатежа.Ссылка)).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МассивСсылок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
			ДанныеЗаполнения = МассивСсылок[0];
		Иначе
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", СтрокаГруппировки.БанковскийСчет);
			ДанныеЗаполнения.Вставить("Сумма", СтрокаГруппировки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Истина);
		КонецЕсли;
		
		НовыйДокумент = СоздатьПлатеж(ДанныеЗаполнения, СтрокаГруппировки);
		
		Если НовыйДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаСформированных = СформированныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСформированных, НовыйДокумент);
		НоваяСтрокаСформированных.Заявка = СтрокаПлатежа.Ссылка;
		
		СформированоДокументов = СформированоДокументов + 1;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		
		Если Не СтрокаТаблицы.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", СтрокаТаблицы.Ссылка);
		ДанныеЗаполнения.Вставить("БанковскийСчетКасса", СтрокаТаблицы.БанковскийСчет);
		ДанныеЗаполнения.Вставить("Сумма", СтрокаТаблицы.СуммаКОплате);
		ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Истина);
		
		НовыйДокумент = СоздатьПлатеж(ДанныеЗаполнения, СтрокаГруппировки);
		
		Если НовыйДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаСформированных = СформированныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСформированных, НовыйДокумент);
		НоваяСтрокаСформированных.Заявка = СтрокаТаблицы.Ссылка;
		
		СформированоДокументов = СформированоДокументов + 1;
	КонецЦикла;
	
	ОбновитьПоказателиКоличества();
	
	Возврат СформированоДокументов;
	
КонецФункции

&НаСервере
Функция СоздатьПлатеж(ДанныеЗаполнения, СтрокаГруппировки)
	
	НовыйДокумент = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
	НовыйДокумент.Заполнить(ДанныеЗаполнения);
	
	НовыйДокумент.БанковскийСчет = СтрокаГруппировки.БанковскийСчет;
	Если Не СтрокаГруппировки.ОтдельныйСчетГОЗ Тогда
		НовыйДокумент.ПлатежиПо275ФЗ = Ложь;
		НовыйДокумент.ДоговорСУчастникомГОЗ = Ложь;
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		СуммаКРаспределению = СтрокаГруппировки.СуммаКОплате;
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаДокумента Из НовыйДокумент.РасшифровкаПлатежа Цикл
			СтрокаДокумента.Сумма = Мин(СтрокаДокумента.Сумма, СуммаКРаспределению);
			СуммаКРаспределению = СуммаКРаспределению - СтрокаДокумента.Сумма;
			Если Не СтрокаДокумента.Сумма Тогда
				МассивСтрокКУдалению.Добавить(СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДокумента из МассивСтрокКУдалению Цикл
			НовыйДокумент.РасшифровкаПлатежа.Удалить(СтрокаДокумента);
		КонецЦикла;
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.УстановитьНовыйНомер();
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать списание безналичных денежных средств.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Функция АдресДокументовДляВыгрузки()
	
	Возврат ПоместитьВоВременноеХранилище(СформированныеДокументы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьПоказателиКоличества()
	
	КоличествоЗаявок = Заявки.Количество();
	КоличествоОшибокТекущейСтроки = РезультатыКонтроляДокумента.Количество();
	КоличествоДокументов = СформированныеДокументы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольЗаявок Тогда
		Элементы.ФормаНазад.Видимость = Ложь;
		Элементы.ФормаДалее.Видимость = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументы Тогда
		Элементы.ФормаНазад.Видимость = Истина;
		Элементы.ФормаДалее.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти