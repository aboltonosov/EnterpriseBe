
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Параметры.АдресСпецификация) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие формы ""Редактирование спецификации строки заказа"" не предусмотрено. 
			|Для открытия формы можно воспользоваться командой ""Изменить позицию заказа"" в форме документа ""Заказ на производство"".'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.Свойство("ЗаписыватьРезультатРедактирования", ЗаписыватьРезультатРедактирования);
	
	// Инициализируем настройки формы
	ЗаполнитьРеквизитыПоПараметрамФормы();
	
	УправлениеФормой();
	
	// Упаковки.
	ИспользованиеУпаковок = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	НаборУпаковок = ДанныеПродукции.НаборУпаковок;
	
	Элементы.Упаковка.Видимость = ЗначениеЗаполнено(НаборУпаковок);
	Элементы.ЕдиницаИзмерения.Видимость = Не ЗначениеЗаполнено(НаборУпаковок) Или Не ДанныеПродукции.ИспользоватьУпаковки Или Не ИспользованиеУпаковок;
	
	ПараметрыВыбора = Новый Структура("Номенклатура", Объект.Номенклатура);
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"), ПараметрыВыбора);
	СписокВыбора = Элементы.Упаковка.СписокВыбора;
	
	Для каждого ЗначениеВыбора из ДанныеВыбора Цикл
		СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Упаковка) Тогда
		Упаковка = Объект.Упаковка;
	КонецЕсли;
	
	// Характеристики.
	Если Не ЗначениеЗаполнено(Объект.Характеристика) Тогда
		Элементы.Характеристика.Доступность = Ложь;
	КонецЕсли;
	
	// Тип номенклатуры.
	Если ДанныеПродукции.ЭтоРабота Тогда
		Элементы.Склад.Видимость = Ложь;
	Иначе
		Элементы.Подразделение.Видимость = Ложь;
	КонецЕсли;
	
	ИспользуетсяПроизводствоНаСтороне = Константы.ИспользоватьПроизводствоНаСтороне.Получить();
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");	
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(Объект.Этапы);
	
	НастроитьОтображениеПредупрежденийПриРедактировании();
	
	ОтметитьНаличиеАналогов();
	
	ДоступныеВариантыОбеспечения = УправлениеПроизводствомКлиентСервер.ДоступныеВариантыОбеспечения();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПроизводство));
	Элементы.МатериалыИУслугиСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораВыполнена = Ложь;
	ТребуетсяРассчитатьГрафик = Ложь;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма.Форма.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;
		
		ОбработкаВыбораВыполнена = Истина;
		ТребуетсяРассчитатьГрафик = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
		ОбработкаВыбораВыполнена = Истина;
		ТребуетсяРассчитатьГрафик = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда
		
		Объект.Назначение = ВыбранноеЗначение;
		
		НазначениеПриИзмененииНаСервере();
		
		ОбработкаВыбораВыполнена = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
		ОбработкаВыбораВыполнена = Истина;
		ТребуетсяРассчитатьГрафик = Истина;
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище, ТекущиеДанные.Этап, ТекущиеДанные.НомерСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ЕстьСоответствиеСтандартнойСпецификации = ?(
		ОбработкаВыбораВыполнена, 
		Объект.ЕстьСоответствиеСтандартнойСпецификации, 
		Ложь
	);
	
	СтатусГрафикаПроизводства = ?(
		ОбработкаВыбораВыполнена И НЕ ТребуетсяРассчитатьГрафик,
		СтатусГрафикаПроизводства,
		ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать"));
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
	Если ОбработкаВыбораВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ВыполняемаяОперация = Неопределено;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация)
	КонецЕсли;
	
	Если ВыполняемаяОперация = "ВыборЭтапаПроизводства" Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение.ЗначениеВыбора);
		ОбработатьИзменениеЭтапаНаСервере(ТекущийЭлемент.Имя);
		
	ИначеЕсли ВыполняемаяОперация = "РедактированиеЭтапаПроизводства" Тогда
		
		ИзменитьДанныеЭтапа(ВыбранноеЗначение.АдресВХранилище, ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		
		Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
			Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
			ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ВыполняемаяОперация = "ВыборЭтапаВыпускаПолуфабриката" Тогда
		
		ОбработатьВыборЭтапаПолуфабрикатаНаКлиенте(ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций" Тогда
		
		ОбработатьВыборСпецификацииПолуфабрикатаНаКлиенте(ТекущиеДанные, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.НеОтгружатьЧастями = Ложь;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопроса",
			Ложь); // Всегда Ложь, для данного документа, вопрос используется фиктивно.
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
КонецПРоцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.НачатьНеРанее);
	
	Если Не МногоэтапнаяСпецификация Тогда
		
		МассивНовыхСтрок = Новый Массив;
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		
		ТаблицаМатериалов.Колонки.Добавить(
			"Подразделение", 
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаМатериалов.Колонки.Добавить(
			"ПроизводствоНаСтороне", 
			Новый ОписаниеТипов("Булево"));
		ТаблицаМатериалов.Колонки.Добавить(
			"Номенклатура", 
			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить(
			"Характеристика", 
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		НоваяСтрока.КлючСвязиПродукция = Объект.КлючСвязи;
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			СтрокаТовара,
			"Номенклатура,
			|Характеристика,
			|Упаковка,
			|КоличествоУпаковок,
			|Количество,
			|Склад,
			|ВариантОбеспечения,
			|Серия");
		
		НоваяСтрока.ДатаПотребности = Макс(СтрокаТовара.ДатаОтгрузки, ДатаПоУмолчанию);
		
		ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаСервере(НоваяСтрока, Истина);
		ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(НоваяСтрока, Объект.КоличествоУпаковок);
		
		Если Не МногоэтапнаяСпецификация Тогда
			
			МассивНовыхСтрок.Добавить(НоваяСтрока);
			
			ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификацииНаСервере(НоваяСтрока, "МатериалыИУслуги");
			
			ЗаполнитьЗначенияСвойств(ТаблицаМатериалов.Добавить(), НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не МногоэтапнаяСпецификация Тогда
		
		МенеджерВременныхТаблиц = Документы.ЗаказНаПроизводство.СоздатьВтСпособыПолученияМатериалов(Объект);
		
		ДанныеЗаказа = Новый Структура("ПодразделениеДиспетчер, Назначение, НачатьНеРанее");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, Объект);
		
		СпособыПолученияМатериаловПоУмолчанию = ПланированиеПроизводства.СпособыПолученияМатериаловПоУмолчанию(
			ДанныеЗаказа, 
			ТаблицаМатериалов, 
			МенеджерВременныхТаблиц);
		
		ПараметрыОтбора = Новый Структура("
			|Подразделение, 
			|ПроизводствоНаСтороне, 
			|Номенклатура, 
			|Характеристика");
		
		Для каждого НоваяСтрока Из МассивНовыхСтрок Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, НоваяСтрока);
			Для каждого СпособПолученияМатериала Из СпособыПолученияМатериаловПоУмолчанию.НайтиСтроки(ПараметрыОтбора) Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СпособПолученияМатериала);
				Прервать;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИУслуги, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОповещениеСохранитьИЗакрыть = Новый ОписаниеОповещения(
		"ПередЗакрытиемСохранитьИЗакрыть", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
		ОповещениеСохранитьИЗакрыть, Отказ, ЗавершениеРаботы);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемСохранитьИЗакрыть(Ответ, ДополнительныеПараметры) Экспорт
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	ЗаполнитьПоСпецификацииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьПоСпецификацииКлиент();
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Объект.Упаковка = Упаковка;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьПоСпецификацииКлиент();
	
	УстановитьЗаголовокКолонкиКоличествоНаЕдиницуПродукции();
		
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	УстановитьЗаголовокКолонкиКоличествоНаЕдиницуПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СтруктураОтбора = Новый Структура("НаправлениеВыпуска, Склад",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"), СохраненноеЗначениеСклад);
	
	СтрокиВыходныеИзделия = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
	СтрокиОходы           = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	
	СохраненноеЗначениеСклад = Объект.Склад;
	
	Если СтрокиВыходныеИзделия.Количество() = 0 И СтрокиОходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из СтрокиВыходныеИзделия Цикл
		Строка.Склад = Объект.Склад;
		Строка.Получатель = Объект.Склад;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиОходы Цикл
		Строка.Склад = Объект.Склад;
		Строка.Получатель = Объект.Склад;
	КонецЦикла;
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	СтруктураОтбора = Новый Структура("НаправлениеВыпуска, Подразделение",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение"), СохраненноеЗначениеПодразделение);
	
	СтрокиВыходныеИзделия = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
	СтрокиОходы           = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	
	СохраненноеЗначениеПодразделение = Объект.Подразделение;
	
	Если СтрокиВыходныеИзделия.Количество() = 0 И СтрокиОходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из СтрокиВыходныеИзделия Цикл
		Строка.Подразделение = Объект.Подразделение;
		Строка.Получатель = Объект.Подразделение;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиОходы Цикл
		Строка.Подразделение = Объект.Подразделение;
		Строка.Получатель = Объект.Подразделение;
	КонецЦикла;
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ДанныеПродукцииСохраненныеЗначения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПродукции);
	
	ЗаполнитьДанныеПродукцииНаКлиенте();
	
	ЗаполнитьНазначениеВТЧВыходныеИзделияНаКлиенте(ДанныеПродукцииСохраненныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ДанныеПродукцииСохраненныеЗначения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПродукции);
	
	ЗаполнитьДанныеПродукцииНаКлиенте();
	
	ЗаполнитьНазначениеВТЧВыходныеИзделияНаКлиенте(ДанныеПродукцииСохраненныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	НазначениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииНаСервере()
	
	ДанныеПродукцииСохраненныеЗначения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеПродукции);
	
	ЗаполнитьДанныеПродукцииНаСервере();
	
	ЗаполнитьНазначениеВТЧВыходныеИзделияНаСервере(ДанныеПродукцииСохраненныеЗначения);
	ЗаполнитьНазначениеВТЧМатериалыИУслугиНаСервере(ДанныеПродукцииСохраненныеЗначения);
	
	ОтметитьНаличиеАналогов();

КонецПроцедуры

&НаКлиенте
Процедура НачатьНеРанееПриИзменении(Элемент)
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПотребностиПриИзменении(Элемент)
	
	ОтметитьНаличиеАналогов();
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование и ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактирование выполненного этапа недоступно.'"));
	ИначеЕсли Копирование И ТекущиеДанные.Номенклатура = Объект.Номенклатура И ТекущиеДанные.Характеристика = Объект.Характеристика Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Копирование основного выходного изделия недоступно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСвязиПродукция = Объект.КлючСвязи;
		
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		ТекущиеДанные.Склад              = Объект.Склад;
		ТекущиеДанные.Подразделение      = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Получатель         = Объект.Склад;
		
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		
		ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификации(ТекущиеДанные);
		
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
		
	КонецЕсли;
	
	СохранитьДанныеСтроки("ВыходныеИзделия", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "ВыходныеИзделия");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		Иначе
			ТекущиеДанные.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап, "Подразделение");
		КонецЕсли;
		
		ТекущиеДанные.Получатель = ТекущиеДанные.Подразделение;
	Иначе
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Склад = Объект.Склад;
		ТекущиеДанные.Получатель = Объект.Склад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "ВыходныеИзделия");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "ВыходныеИзделия");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборЭтапаПроизводства(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Удаление данных выполненного этапа недоступно.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Номенклатура = Объект.Номенклатура И ТекущиеДанные.Характеристика = Объект.Характеристика Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя удалить производимое изделие.'"));
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя удалить производимый в процессе полуфабрикат.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилисьОбязательныеРеквизиты = ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные);
	
	ОбработатьОкончаниеРедактированияВыходныхИзделий(
		ТекущиеДанные.ПолучитьИдентификатор(), НоваяСтрока, ИзменилисьОбязательныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ОбработатьУдалениеВыходныхИзделий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		
		ТекущиеДанные.Склад = Объект.Склад;
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Получатель = Объект.Склад;
		
	ИначеЕсли НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап, "Подразделение");
		ТекущиеДанные.Получатель = ТекущиеДанные.Подразделение;
		
	КонецЕсли;
	
	ЗаполнитьСкладМатериалаНаОснованииСтрокиИзделия(ТекущиеДанные, ТекущиеДанные.КлючСвязиПолуфабрикат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Склад = ТекущиеДанные.Получатель;
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.Подразделение = ТекущиеДанные.Получатель;
	КонецЕсли;
	
	ЗаполнитьСкладМатериалаНаОснованииСтрокиИзделия(ТекущиеДанные, ТекущиеДанные.КлючСвязиПолуфабрикат);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование и ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактирование данных выполненного этапа недоступно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	МассивСтрок = Новый Массив;

	КоличествоВсего = 0;
	КоличествоВыполненныхСтрок = 0;
	КоличествоПолуфабрикатовВПроцессе = 0;
	
	Для каждого ЭлементКоллекции из Элементы.ВозвратныеОтходы.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ВозвратныеОтходы.ДанныеСтроки(ЭлементКоллекции);
		
		Если ДанныеСтроки.ЭтапВыполнен Тогда
			
			КоличествоВыполненныхСтрок = КоличествоВыполненныхСтрок + 1;
			
		КонецЕсли;
		
		Если ДанныеСтроки.ПроизводитсяВПроцессе Тогда
			
			КоличествоПолуфабрикатовВПроцессе = КоличествоПолуфабрикатовВПроцессе + 1;
			
		КонецЕсли;
			
		Если НЕ (ДанныеСтроки.ЭтапВыполнен ИЛИ ДанныеСтроки.ПроизводитсяВПроцессе) Тогда
			
			МассивСтрок.Добавить(ДанныеСтроки);
			
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	Если КоличествоВыполненныхСтрок > 0 ИЛИ КоличествоПолуфабрикатовВПроцессе > 0 Тогда
		
		Отказ = Истина;
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			ПараметрыОповещения = Новый Структура("МассивСтрок", МассивСтрок);
				
			Если КоличествоВыполненныхСтрок > 0 И КоличествоПолуфабрикатовВПроцессе > 0 Тогда
				
				ТекстВопроса = НСтр("ru = 'Удаление строк выполненных этапов, а также полуфабрикатов, производимых в процессе, невозможно. Удалить остальные строки?'");
				
			ИначеЕсли КоличествоВыполненныхСтрок > 0 Тогда
				
				ТекстВопроса = НСтр("ru = 'Удаление строк выполненных этапов невозможно. Удалить остальные строки?'");
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Удаление строк полуфабрикатов, производимых в процессе, невозможно. Удалить остальные строки?'");
				
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВозвратныеОтходыПередУдалениемЗавершение", 
				ЭтотОбъект, 
				ПараметрыОповещения);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли КоличествоВыполненныхСтрок = КоличествоВсего Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Удаление данных выполненного этапа недоступно.'"));
			
		Иначе
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Удаление полуфабрикатов, потребляемых на следующих этапах, невозможно.'"));
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого Строка Из ДополнительныеПараметры.МассивСтрок Цикл
		
		Объект.ВозвратныеОтходы.Удалить(Строка);
		
	КонецЦикла;
	
	ВозвратныеОтходыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КлючСвязи          = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСвязиПродукция = Объект.КлючСвязи;
		
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		ТекущиеДанные.Склад              = Объект.Склад;
		ТекущиеДанные.Подразделение      = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Получатель         = Объект.Склад;
		
		Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
			
			ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
			ТекущиеДанные.КлючСвязиМатериалыИУслуги = ПолучитьПустойУникальныйИдентификатор();
			ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
			
		КонецЕсли;
		
		ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификации(ТекущиеДанные);
		
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
		
	КонецЕсли;
	
	СохранитьДанныеСтроки("ВозвратныеОтходы", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаКлиенте(
		ТекущиеДанные, НоваяСтрока, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная"));
	
	Если НоваяСтрока И Объект.ЕстьСоответствиеСтандартнойСпецификации
		ИЛИ ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные) Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "ВозвратныеОтходы");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекущиеДанные.Подразделение = Объект.Подразделение;
		Иначе
			ТекущиеДанные.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап, "Подразделение");
		КонецЕсли;
		
		ТекущиеДанные.Получатель = ТекущиеДанные.Подразделение;
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Склад = Объект.Склад;
		ТекущиеДанные.Получатель = Объект.Склад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ВозвратныеОтходыОбработкаСобытияКоличествоПриИзменении(Элементы.ВозвратныеОтходы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ВозвратныеОтходыОбработкаСобытияКоличествоПриИзменении(Элементы.ВозвратныеОтходы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбработкаСобытияКоличествоПриИзменении(ТекущиеДанные, ИмяРеквизита = "КоличествоУпаковок")
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "ВозвратныеОтходы");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	ВозвратныеОтходыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборЭтапаПроизводства(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		
		ТекущиеДанные.Склад = Объект.Склад;
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ТекущиеДанные.Получатель = Объект.Склад;
		
	ИначеЕсли НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.Подразделение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Этап, "Подразделение");
		ТекущиеДанные.Получатель = ТекущиеДанные.Подразделение;
		
	КонецЕсли;
	
	ЗаполнитьСкладМатериалаНаОснованииСтрокиИзделия(ТекущиеДанные, ТекущиеДанные.КлючСвязиМатериалыИУслуги);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Склад = ТекущиеДанные.Получатель;
		ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.Подразделение = ТекущиеДанные.Получатель;
	КонецЕсли;
	
	ЗаполнитьСкладМатериалаНаОснованииСтрокиИзделия(ТекущиеДанные, ТекущиеДанные.КлючСвязиМатериалыИУслуги);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма.Форма.Элементы..МатериалыИУслуги.Выбор");
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТолькоПросмотр
		Или ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтапВыполнен
		Или ТекущиеДанные.Отменено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = Элементы.МатериалыИУслугиВариантОбеспечения.Имя
		И Не ИспользуютсяКорректировкиЗаказаМатериалов Тогда
		
		МатериалыИУслугиВыборВариантОбеспечения(ТекущиеДанные)
		
	ИначеЕсли Поле.Имя = "МатериалыИУслугиЕстьАналогиМатериала"
		И ТекущиеДанные.ЕстьАналогиМатериала Тогда
		
		МатериалыИУслугиНайтиАналоги(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВыборВариантОбеспечения(ТекущиеДанные)
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе И НЕ ТекущиеДанные.ЗаказатьНаСклад Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
			"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
			ПараметрыФормы,
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
			"МатериалыИУслуги", НСтр("ru = 'Материалы и услуги'"));
		
		ПараметрыПроверки.Поля.Вставить("Склад",   "Объект.МатериалыИУслуги[%1].Склад");
		ПараметрыПроверки.Тексты.Вставить("Склад",
			НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Материалы и работы""'"));
			
		ПараметрыПроверки.Поля.Удалить("Подразделение");
		ПараметрыПроверки.Поля.Вставить("КлючСвязиЭтапы", "Объект.МатериалыИУслуги[%1].НаименованиеЭтапа");
		ПараметрыПроверки.Тексты.Вставить("КлючСвязиЭтапы",
			НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Материалы и работы""'"));
		
		Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
			Объект, Объект.МатериалыИУслуги, Элементы.МатериалыИУслуги.ТекущаяСтрока, ПараметрыПроверки) Тогда
			
			ПараметрыФормы = ПараметрыВыбораОбеспечения();
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
				ЭтаФорма, УникальныйИдентификатор);
			Иначе
				Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "МатериалыИУслуги",
				НСтр("ru = 'Материалы и работы'"));
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование и ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактирование выполненного этапа недоступно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоваяСтрока Или Не ЗначениеЗаполнено(ТекущиеДанные.КлючСвязи) Тогда
		
		ТекущиеДанные.Отменено = Ложь;
		
		ТекущиеДанные.КодСтроки = 0;
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		
		ТекущиеДанные.КлючСвязиПродукция = Объект.КлючСвязи;
		
		Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
			
			ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
			
			ТекущиеДанные.ЗаказатьНаСклад = Ложь;
			ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			
			ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
			ТекущиеДанные.КлючСвязиЭтапВыпуска = Неопределено;
			
			ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
			
		ИначеЕсли Не Копирование Тогда
			
			ТекущиеДанные.ЗаказатьНаСклад = Ложь;
			ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			
			ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
			ТекущиеДанные.КлючСвязиЭтапВыпуска = Неопределено;
		
		КонецЕсли;
		
		ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификации(ТекущиеДанные, "МатериалыИУслуги");
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		
		ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	СохранитьДанныеСтроки("МатериалыИУслуги", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаКлиенте(ТекущиеДанные, НоваяСтрока);
	
	Если НоваяСтрока И Объект.ЕстьСоответствиеСтандартнойСпецификации
		ИЛИ ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные) Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	МатериалыИУслугиОбработкаСобытияНоменклатураПриИзменении(Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	МатериалыИУслугиОбработкаСобытияХарактеристикаПриИзменении(Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоНаЕдиницуИзделияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоНаЕдиницуИзделия * Объект.КоличествоУпаковок;
	
	МатериалыИУслугиОбработкаСобытияКоличествоПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	МатериалыИУслугиОбработкаСобытияКоличествоПриИзменении(Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	МатериалыИУслугиОбработкаСобытияКоличествоПриИзменении(Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборЭтапаПроизводства(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.МатериалыИУслуги.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.МатериалыИУслуги.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	МассивСтрок = Новый Массив;
	МассивДанных = Новый Массив;
	
	СтруктураДанных = Новый Структура("
		|КлючСвязи, 
		|КлючСвязиЭтапВыпуска,
		|Номенклатура,
		|Характеристика,
		|Подразделение,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|ПроизводитсяВПроцессе,
		|СпособПолученияПолуфабриката,
		|ИсточникПолученияПолуфабриката,
		|Склад,
		|ЗаказатьНаСклад");

	КоличествоВыполненныхСтрок = 0;
	ЕстьПолуфабрикатыПроизводимыеВПроцессе = Ложь;
	
	Для каждого ЭлементКоллекции из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МатериалыИУслуги.ДанныеСтроки(ЭлементКоллекции);
		
		Если ДанныеСтроки.ЭтапВыполнен Тогда
			
			КоличествоВыполненныхСтрок = КоличествоВыполненныхСтрок + 1;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
			
			МассивСтрок.Добавить(ДанныеСтроки);
			МассивДанных.Добавить(СтруктураДанных);
			
		КонецЕсли;
		
		ЕстьПолуфабрикатыПроизводимыеВПроцессе = ЕстьПолуфабрикатыПроизводимыеВПроцессе ИЛИ ДанныеСтроки.ПроизводитсяВПроцессе;
		
	КонецЦикла;
	
	Если КоличествоВыполненныхСтрок > 0 ИЛИ ЕстьПолуфабрикатыПроизводимыеВПроцессе Тогда
		
		Отказ = Истина;
		
		Если КоличествоВыполненныхСтрок = Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество() Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Удаление данных выполненного этапа недоступно.'"));
			
		Иначе
		
			ПараметрыОповещения = Новый Структура("МассивДанных, МассивСтрок, ЕстьПолуфабрикатыПроизводимыеВПроцессе", 
				МассивДанных, МассивСтрок, ЕстьПолуфабрикатыПроизводимыеВПроцессе);
				
			Если КоличествоВыполненныхСтрок > 0 Тогда
					
				ТекстВопроса = НСтр("ru = 'По некоторым из выбранных строк этапы уже выполнены, их удаление невозможно. Удалить остальные строки?'");
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"МатериалыИУслугиПередУдалениемПродолжение", 
					ЭтотОбъект, 
					ПараметрыОповещения);
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			Иначе
				
				МатериалыИУслугиПередУдалениемПродолжение(КодВозвратаДиалога.Да, ПараметрыОповещения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	УдаляемыеСтрокиМассивДанных = Новый ФиксированныйМассив(МассивДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалениемПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьПолуфабрикатыПроизводимыеВПроцессе Тогда
		
		Если ДополнительныеПараметры.МассивДанных.Количество() > 1 Тогда
			
			ТекстВопроса = НСтр("ru = 'Удаление строк приведет к потере связанных данных о производимых в процессе полуфабрикатах. Продолжить?'");
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Удаление строки приведет к потере связанных данных о производимых в процессе полуфабрикатах. Продолжить?'");
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"МатериалыИУслугиПередУдалениемЗавершение", 
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	МатериалыИУслугиПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УдаляемыеСтрокиМассивДанных = Новый ФиксированныйМассив(ДополнительныеПараметры.МассивДанных);
	
	Для каждого Строка Из ДополнительныеПараметры.МассивСтрок Цикл
		
		Объект.МатериалыИУслуги.Удалить(Строка);
		
	КонецЦикла;
	
	МатериалыИУслугиПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПослеУдаления(Элемент)

	МатериалыИУслугиПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОтменитьПолучениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ПриИзмененииОтменено(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПроизводитсяВПроцессеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе 
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПолученияПолуфабриката) Тогда
		ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации");
	ИначеЕсли НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка");
	КонецЕсли; 
	
	ПриИзмененииПараметровПроизводитсяВПроцессе();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияПолуфабрикатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПолученияПолуфабриката) Тогда
		ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации");
	КонецЕсли; 
	
	ПриИзмененииПараметровПроизводитсяВПроцессе();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСпособПолученияПолуфабрикатаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СпособПолученияПолуфабриката) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиИсточникПолученияПолуфабрикатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации") Тогда
		
		ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаКлиенте(ТекущиеДанные)
		
	ИначеЕсли ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе") Тогда
		
		ОтменитьПотребностьВоВнутреннихПолуфабрикатах(ТекущиеДанные);
		
	КонецЕсли;
	
	Если ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные) Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
		СохраненныеЗначения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиИсточникПолученияПолуфабрикатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ПроизвестиНаЭтапе = ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе");
	
	ПроизвестиПоСпецификации = ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации");
	
	Если ПроизвестиНаЭтапе ИЛИ ПроизвестиПоСпецификации Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо указать этап производства.'"));
			Возврат;
		КонецЕсли;
		
		Если ПроизвестиПоСпецификации Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
			ПараметрыФормы.Вставить("НачалоПроизводства", Объект.НачатьНеРанее);
			ПараметрыФормы.Вставить("ПолучитьСписокДействующихСпецификаций", Истина);
			
			ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций", ПараметрыФормы, ЭтаФорма);
			
		ИначеЕсли ПроизвестиНаЭтапе Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВыполняемаяОперация", "ВыборЭтапаВыпускаПолуфабриката");
			ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ПараметрыФормы.Вставить("Адрес", ПоместитьТаблицуДоступныхДляВыбораЭтаповВыпускаПолуфабрикатаВХранилище());
			
			ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма.ФормаВыбораЭтапаПроизводства", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиИсточникПолученияПолуфабрикатаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИсточникПолученияПолуфабриката) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	
	Если НЕ ТекущиеДанные.ЗаказатьНаСклад 
		И ЗначениеЗаполнено(ТекущиеДанные.Склад)
		И ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	КонецЕсли;	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад)
		И ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.ЗаказатьНаСклад = ЗначениеЗаполнено(ТекущиеДанные.Склад);
		ЗаполнитьВариантОбеспеченияПолуфабриката(ТекущиеДанные);
		ЗаполнитьНаправлениеВыпускаНаОснованииСтрокиМатериала(ТекущиеДанные, "КлючСвязиПолуфабрикат", Объект.ВыходныеИзделия);
		ЗаполнитьНаправлениеВыпускаНаОснованииСтрокиМатериала(ТекущиеДанные, "КлючСвязиМатериалыИУслуги", Объект.ВозвратныеОтходы);
	КонецЕсли; 
	
	Если ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И ТекущиеДанные.ЗаказатьНаСклад Тогда
		ТекущиеДанные.ЗаказатьНаСклад = Ложь;
	ИначеЕсли ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И НЕ ТекущиеДанные.ЗаказатьНаСклад 
		И ТекущиеДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.ЗаказатьНаСклад = Истина;
	КонецЕсли; 
	
	Если ТекущиеДанные.ЗаказатьНаСклад 
		И НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
			Или (Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) И ТекущиеДанные.ХарактеристикиИспользуются)
			Или Не ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
			
			ТекущиеДанные.Запланировать = Ложь;
			
		Иначе
			ТекущиеДанные.Запланировать = ПризнакПланированияПолуфабрикатов(
				ТекущиеДанные.ТипНоменклатуры, ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Склад, Объект.ПодразделениеДиспетчер);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные) Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
		СохраненныеЗначения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование и ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактирование выполненного этапа недоступно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Удаление данных выполненного этапа недоступно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСвязиПродукция = Объект.КлючСвязи;
		
		ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификации(ТекущиеДанные);
		
	КонецЕсли;
	
	СохранитьДанныеСтроки("Трудозатраты", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборЭтапаПроизводства(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Объект.ЕстьСоответствиеСтандартнойСпецификации
		ИЛИ ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные) Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПослеУдаления(Элемент)
	
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭтапыРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
	Перем ОписаниеОшибки;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтапВыполнен Тогда
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru = 'Удаление выполненного этапа недоступно.'");
		ПоказатьПредупреждение(Неопределено, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	УдалитьДанныеЭтапа(ТекущиеДанные.КлючСвязи, Отказ, ОписаниеОшибки);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(Неопределено, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
	СтатусГрафикаПроизводства = ПредопределенноеЗначение("Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ЗаполнитьПоСпецификацииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСоСпецификацией(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Спецификация) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Не указана стандартная спецификация'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстПредупреждения,
			,
			"Спецификация",
			"Объект",);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаказа = Новый Соответствие;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КлючСвязиПродукция", Объект.КлючСвязи);
	СтруктураДанных.Вставить("НомерСтроки",        Объект.НомерСтроки);
	СтруктураДанных.Вставить("Номенклатура",       Объект.Номенклатура);
	СтруктураДанных.Вставить("Характеристика",     Объект.Характеристика);
	СтруктураДанных.Вставить("Спецификация",       Объект.Спецификация);
	СтруктураДанных.Вставить("Количество",         Объект.КоличествоУпаковок);
	СтруктураДанных.Вставить("Упаковка",           Объект.Упаковка);
	
	ДанныеЗаказа.Вставить(СтруктураДанных.НомерСтроки, СтруктураДанных);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЗаказа",       ДанныеЗаказа);
	ПараметрыФормы.Вставить("Этапы",              Объект.Этапы);
	ПараметрыФормы.Вставить("МатериалыИУслуги",   Объект.МатериалыИУслуги);
	ПараметрыФормы.Вставить("ВыходныеИзделия",    Объект.ВыходныеИзделия);
	ПараметрыФормы.Вставить("ВозвратныеОтходы",   Объект.ВозвратныеОтходы);
	ПараметрыФормы.Вставить("ВидыРабочихЦентров", Объект.ВидыРабочихЦентров);
	
	ОткрытьФорму("Обработка.СравнениеСпецификаций.Форма.СравнениеЗаказаСоСпецификациями", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьМатериалПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьМатериалСледующий(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнениеСпецификации(Команда)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроверитьЗаполнение();
	
	Если Не РезультатПроверки и Не ЕстьУточненияМатериалов Тогда
		ЕстьОшибкиЗаполнения = Истина;
	Иначе
		ЕстьОшибкиЗаполнения = Ложь;
	КонецЕсли;
	
	Если Не ЕстьОшибкиЗаполнения и Не ЕстьУточненияМатериалов Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("КомандаПроверитьЗаполнениеСпецификацииЗавершение", ЭтотОбъект), НСтр("ru = 'Ошибок не обнаружено.'"));
        Возврат;
	КонецЕсли;
	
	КомандаПроверитьЗаполнениеСпецификацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнениеСпецификацииЗавершение(ДополнительныеПараметры) Экспорт
    
    КомандаПроверитьЗаполнениеСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнениеСпецификацииФрагмент()
    
    ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураИзделия(Команда)
	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии, Заголовок", Истина, НСтр("ru = 'Структура изделия'"));
	
	ПараметрыФормы.Вставить("Режим", УправлениеДаннымиОбИзделияхКлиентСервер.РежимДеревоСпецификацийЗаказа());
	
	ПараметрыФормы.Вставить("Номенклатура",					Объект.Номенклатура);
	ПараметрыФормы.Вставить("ХарактеристикаНоменклатуры",	Объект.Характеристика);
	ПараметрыФормы.Вставить("Спецификация",					Объект.Спецификация);
	ПараметрыФормы.Вставить("Количество",					Объект.Количество);
	ПараметрыФормы.Вставить("КоличествоУпаковок",			Объект.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Упаковка",						Объект.Упаковка);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Объект.Номенклатура, Объект.Характеристика);
	
	НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("КлючСвязи", НайденныеСтроки[0].КлючСвязиПолуфабрикат);
	Иначе
		ПараметрыФормы.Вставить("КлючСвязи", ПолучитьПустойУникальныйИдентификатор());
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресВХранилище", ДанныеСпецификацииВХранилище());
	
	ОткрытьФорму("Обработка.ДеревоРесурсныхСпецификаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЭтап(Команда)
	
	ЭтапыРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналоги(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЕстьАналогиМатериала Тогда
		МатериалыИУслугиНайтиАналоги(ТекущиеДанные);
	Иначе
		
		МассивКлючей = Новый Массив;
		МассивКлючей.Добавить(ТекущиеДанные.КлючСвязи);
		ОтметитьНаличиеАналогов(МассивКлючей);
		
		Если ТекущиеДанные.ЕстьАналогиМатериала Тогда
			МатериалыИУслугиНайтиАналоги(ТекущиеДанные);
		Иначе
			ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Для выделенной строки аналоги не найдены'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма.Команда.ПодобратьТовары");
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.НачатьНеРанее);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение",                                Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                             Объект.Подразделение);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",                Истина);
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                      Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)
	
	ПутьМатериалыИУслуги = "Объект";

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"МатериалыИУслуги", НСтр("ru = 'Материалы и работы'"));
		
	ПараметрыПроверки.Поля.Удалить("Склад");
	ПараметрыПроверки.Поля.Удалить("Подразделение");
	ПараметрыПроверки.Поля.Вставить("КлючСвязиЭтапы",   ПутьМатериалыИУслуги + ".МатериалыИУслуги[%1].НаименованиеЭтапа");
	ПараметрыПроверки.Тексты.Вставить("КлючСвязиЭтапы",
		НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Материалы и работы""'"));
		
	ЭлементМатериалыИУслуги = Элементы.МатериалыИУслуги;
	ТаблицаМатериалыИУслуги = Объект.МатериалыИУслуги;
	
	ЕстьСобственноеПроизводство = Ложь;
	ИдентификаторыСтрок = Новый Массив();
	Для каждого Идентификатор Из ЭлементМатериалыИУслуги.ВыделенныеСтроки Цикл

		ДанныеСтроки = ТаблицаМатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
		
		Если ДанныеСтроки.ПроизводитсяВПроцессе И НЕ ДанныеСтроки.ЗаказатьНаСклад Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(Идентификатор);
		
		ЕстьСобственноеПроизводство = НЕ ДанныеСтроки.ПроизводствоНаСтороне ИЛИ ЕстьСобственноеПроизводство;
		
	КонецЦикла;

	Если ИдентификаторыСтрок.Количество() > 0 Тогда

		Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
			Объект, ТаблицаМатериалыИУслуги, ИдентификаторыСтрок, ПараметрыПроверки) Тогда

			ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа("РедактированиеСпецификацииСтрокиЗаказа");
			ПараметрыФормы.СписокВыбора = ДоступныеВариантыОбеспечения.Скопировать();
			ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
			Если НЕ ЕстьСобственноеПроизводство Тогда
				ПараметрыФормы.СписокВыбора.Удалить(ПараметрыФормы.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")));
				ПараметрыФормы.СписокВыбора.Удалить(ПараметрыФормы.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")));
			КонецЕсли;
			ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
				ЭтаФорма, УникальныйИдентификатор);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.СтатусЗаказаНаПроизводство = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, Строка(МинимальныйСтатус));
	ИначеЕсли ЭтаФорма.ВладелецФормы.Модифицированность
		Или Модифицированность
		Или Не СтруктураОбъектаОснования.Проведен 
		Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.'"));
	ИначеЕсли ЗначениеЗаполнено(Объект.Назначение) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для спецификации указано назначение. Резервирование для указанного назначения доступно
			|из соответствующего заказа, или с помощью документа ""Корректировка назначения товаров"".'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	ОбъектОснования = ОбъектыОснований[0];
	
	Если Объект.СтатусЗаказаНаПроизводство = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, Строка(МинимальныйСтатус));
	ИначеЕсли ЭтаФорма.ВладелецФормы.Модифицированность
		Или Модифицированность
		Или Не СтруктураОбъектаОснования.Проведен 
		Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.'"));
	ИначеЕсли ЗначениеЗаполнено(Объект.Назначение) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для спецификации указано назначение. Снятие резерва для указанного назначения доступно
			|из соответствующего заказа, или с помощью документа ""Корректировка назначения товаров"".'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

&НаКлиенте
Процедура ЗапретитьРедактирование(Команда)
	
	Если Объект.ИзмененияЗапрещены Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ЕстьОшибкиЗаполнения = Не ПроверитьЗаполнение();
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
	Если ЕстьОшибкиЗаполнения Или ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Запретить редактирование спецификации заказа?'");
	
	КодВозврата = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗапретитьРедактированиеЗавершение", ЭтотОбъект), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодВозврата = РезультатВопроса;
	
	Если КодВозврата = КодВозвратаДиалога.Да  Тогда
		
		ТолькоПросмотр = Истина;
		
		Объект.ИзмененияЗапрещены = Истина;
		Элементы.ФормаЗавершитьРедактирование.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	
	Если Не Объект.ИзмененияЗапрещены Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Разрешить редактирование спецификации заказа?'");
	
	КодВозврата = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РазрешитьРедактированиеЗавершение", ЭтотОбъект), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодВозврата = РезультатВопроса;
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		
		ТолькоПросмотр = Ложь;
		
		УправлениеФормой("НастроитьДоступностьЭлементов");
		
		Объект.ИзмененияЗапрещены = Ложь;
		Элементы.ФормаЗавершитьРедактирование.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСпецификациюНаОснованииСпецификацииЗаказа(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСпецификациюНаОснованииСпецификацииЗаказаЗавершение", ЭтотОбъект);
	
	УправлениеДаннымиОбИзделияхКлиент.СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоПараметрамФормы()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресСпецификация);
	
	Если Параметры.Свойство("Модифицированность") Тогда
		Модифицированность = Параметры.Модифицированность;
	КонецЕсли;
	
	ТолькоПросмотр = СтруктураДанных.СтруктураПродукции.ИзмененияЗапрещены И НЕ Модифицированность;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанных.СтруктураПродукции, "ЕстьОшибкиЗаполнения, ЕстьУточненияМатериалов, СтатусГрафикаПроизводства, СтатусЗаказаНаПроизводство");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных.СтруктураПродукции);
	
	Если ЗначениеЗаполнено(Объект.Назначение) Тогда
		ЗаказНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "Заказ");
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
	
	// Этапы
	Объект.Этапы.Загрузить(СтруктураДанных.Этапы);
	
	// Выходные изделия
	Объект.ВыходныеИзделия.Загрузить(СтруктураДанных.ВыходныеИзделия);
	
	// Возвратные отходы
	Объект.ВозвратныеОтходы.Загрузить(СтруктураДанных.ВозвратныеОтходы);
	
	// Материалы и услуги
	Объект.МатериалыИУслуги.Загрузить(СтруктураДанных.МатериалыИУслуги);
	
	Для каждого Строка из Объект.МатериалыИУслуги Цикл
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоАвтовыборуМатериала(Строка);
		
	КонецЦикла;
	
	// Трудозатраты
	Объект.Трудозатраты.Загрузить(СтруктураДанных.Трудозатраты);
	Для каждого Строка из Объект.Трудозатраты Цикл
		
		СтруктураОтбора.Вставить("КлючСвязи", Строка.КлючСвязиЭтапы);
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка.Этап = НайденныеСтроки[0].Этап;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ВидыРабочихЦентров.Загрузить(СтруктураДанных.ВидыРабочихЦентров);
	Объект.АльтернативныеВидыРабочихЦентров.Загрузить(СтруктураДанных.АльтернативныеВидыРабочихЦентров);
	Объект.ЭтапыВосстановленияБрака.Загрузить(СтруктураДанных.ЭтапыВосстановленияБрака);
	
	// Данные о ходе выполнения этапов
	ПолучитьДанныеОХодеВыполненияЭтапов();
	
	// Параметры редактирования материалов
	Если ЗаписыватьРезультатРедактирования
		И Параметры.Свойство("ПараметрыРедактированияМатериалов")
		И Параметры.ПараметрыРедактированияМатериалов.ИспользоватьКорректировки Тогда 
		
		ПараметрыРедактированияМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
		
		КорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПолучитьРезультатКорректировкиСпецификацииЗаказаИзХранилища(
			Параметры.ПараметрыРедактированияМатериалов, 
			Объект.КлючСвязи);
			
		Обработки.ВводКорректировкиЗаказаМатериалов.ПоместитьРезультатКорректировкиСпецификацииЗаказаВХранилище(
			Объект.КлючСвязи, 
			ПараметрыРедактированияМатериалов, 
			КорректировкиЗаказаМатериалов);
			
	ИначеЕсли Не Параметры.Свойство("ПараметрыРедактированияМатериалов", ПараметрыРедактированияМатериалов) Тогда
		
		ПараметрыРедактированияМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
		
	КонецЕсли;
	
	ИспользуютсяКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ИспользуютсяКорректировки(Объект);
	
	// Товары для обеспечения
	ЗаполнитьТаблицуДокументаДляОбеспечения();
	
	// Дополнительные реквизиты продукции
	Если Не Объект.ПроизводствоПоЗаказу И ЗначениеЗаполнено(Объект.Назначение) Тогда
		
		МассивНазначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Назначение);
		СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(МассивНазначений);
		СвойстваНазначения = СвойстваНазначений.Получить(Объект.Назначение);
		Объект.ПроизводствоПоЗаказу = СвойстваНазначения <> Неопределено И СвойстваНазначения.ЭтоНазначениеДавальца;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПродукцииНаСервере();
	
	// Параметры производственного процесса
	ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере();
	
	// Служебные реквизиты
	ЗаполнитьСлужебныеРеквизиты();
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

&НаСервере
Функция ДанныеСпецификацииВХранилище()
	
	ДанныеЗаказа = Новый Структура;
	
	ДанныеЗаказа.Вставить("Этапы",            Объект.Этапы.Выгрузить());
	ДанныеЗаказа.Вставить("ВыходныеИзделия",  Объект.ВыходныеИзделия.Выгрузить());
	ДанныеЗаказа.Вставить("ВозвратныеОтходы", Объект.ВозвратныеОтходы.Выгрузить());
	ДанныеЗаказа.Вставить("МатериалыИУслуги", Объект.МатериалыИУслуги.Выгрузить());
	ДанныеЗаказа.Вставить("Трудозатраты",     Объект.Трудозатраты.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеЗаказа, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ДанныеЭтапаВХранилище(КлючСвязи)
	
	ДанныеЭтапа = Объект.Этапы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
	
	СвойстваЭтапа = Новый Структура;
	
	СвойстваЭтапа.Вставить("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭтапа.Этап, "Владелец"));
	СвойстваЭтапа.Вставить("Ссылка",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭтапа.Этап, "Ссылка"));
	
	СвойстваЭтапа.Вставить("Подразделение",                          ДанныеЭтапа.Подразделение);
	СвойстваЭтапа.Вставить("НомерЭтапа",                             ДанныеЭтапа.НомерЭтапа);
	СвойстваЭтапа.Вставить("НомерСледующегоЭтапа",                   ДанныеЭтапа.НомерСледующегоЭтапа);
	СвойстваЭтапа.Вставить("МаршрутнаяКарта",                        ДанныеЭтапа.МаршрутнаяКарта);
	СвойстваЭтапа.Вставить("ПланироватьРаботуВидовРабочихЦентров",   ДанныеЭтапа.ПланироватьРаботуВидовРабочихЦентров);
	СвойстваЭтапа.Вставить("Описание",                               ДанныеЭтапа.Описание);
	СвойстваЭтапа.Вставить("ДлительностьЭтапа",                      ДанныеЭтапа.ДлительностьЭтапа);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияДлительностиЭтапа",      ДанныеЭтапа.ЕдиницаИзмеренияДлительностиЭтапа);
	СвойстваЭтапа.Вставить("ПредварительныйБуфер",                   ДанныеЭтапа.ПредварительныйБуфер);
	СвойстваЭтапа.Вставить("ЗавершающийБуфер",                       ДанныеЭтапа.ЗавершающийБуфер);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияПредварительногоБуфера", ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера",     ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
	СвойстваЭтапа.Вставить("Наименование",                           ДанныеЭтапа.НаименованиеЭтапа);
	СвойстваЭтапа.Вставить("Непрерывный",                            ДанныеЭтапа.Непрерывный);
	СвойстваЭтапа.Вставить("ПроизводствоНаСтороне",                  ДанныеЭтапа.ПроизводствоНаСтороне);
	СвойстваЭтапа.Вставить("Партнер",                                ДанныеЭтапа.Партнер);
	СвойстваЭтапа.Вставить("ГрафикРаботыПартнера",                   ДанныеЭтапа.ГрафикРаботыПартнера);
	СвойстваЭтапа.Вставить("УслугаПереработчика",                    ДанныеЭтапа.УслугаПереработчика);
	СвойстваЭтапа.Вставить("ХарактеристикаУслугиПереработчика",      ДанныеЭтапа.ХарактеристикаУслугиПереработчика);
	СвойстваЭтапа.Вставить("СтатьяКалькуляции",                      ДанныеЭтапа.СтатьяКалькуляции);
	СвойстваЭтапа.Вставить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", ДанныеЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	
	СвойстваЭтапа.Вставить("НомерЭтапаФорма",           ДанныеЭтапа.НомерЭтапаФорма);
	СвойстваЭтапа.Вставить("НомерСледующегоЭтапаФорма", ДанныеЭтапа.НомерСледующегоЭтапаФорма);
	
	СтруктураОтбора = Новый Структура("КлючСвязиЭтапы", КлючСвязи);
	
	СвойстваЭтапа.Вставить("ВидыРабочихЦентров", Объект.ВидыРабочихЦентров.Выгрузить(СтруктураОтбора));
	
	АльтернативныеВидыРабочихЦентров = Новый ТаблицаЗначений;
	
	Для каждого Строка из СвойстваЭтапа.ВидыРабочихЦентров Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиВидыРабочихЦентров", Строка.КлючСвязи);
		
		Если АльтернативныеВидыРабочихЦентров.Количество() = 0 Тогда
			АльтернативныеВидыРабочихЦентров = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураОтбора);
		Иначе
			НайденныеСтроки = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СтрокаАльтернативныеВидыРабочихЦентров из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(АльтернативныеВидыРабочихЦентров.Добавить(), СтрокаАльтернативныеВидыРабочихЦентров);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвойстваЭтапа.Вставить("АльтернативныеВидыРабочихЦентров", АльтернативныеВидыРабочихЦентров);
	
	МассивКодовСтрок = Новый Массив;
	
	Для каждого НайденнаяСтрока Из Объект.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", КлючСвязи)) Цикл
		
		Если НайденнаяСтрока.КодСтроки <> 0 Тогда
			
			МассивКодовСтрок.Добавить(НайденнаяСтрока.КодСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьКорректировкиМатериалов = Ложь;
	
	Если МассивКодовСтрок.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Распоряжение", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивКодовСтрок", МассивКодовСтрок);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 1
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок КАК Т
		|ГДЕ
		|	Т.Распоряжение = &Распоряжение
		|	И Т.КодСтрокиРаспоряжения В (&МассивКодовСтрок)
		|	И Т.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство";
		
		ЕстьКорректировкиМатериалов = НЕ Запрос.Выполнить().Пустой();
				
	КонецЕсли;
	
	СвойстваЭтапа.Вставить("Выполняется", ДанныеЭтапа.ВыполненоЗапланировано > 0);
	СвойстваЭтапа.Вставить("ЕстьКорректировкиМатериалов", ЕстьКорректировкиМатериалов);
	
	Возврат ПоместитьВоВременноеХранилище(СвойстваЭтапа, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РезультатРедактированияВХранилище()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураПродукции = Новый Структура;
	
	СтруктураПродукции.Вставить("НомерСтроки",                               Объект.НомерСтроки);
	СтруктураПродукции.Вставить("Номенклатура",                              Объект.Номенклатура);
	СтруктураПродукции.Вставить("Характеристика",                            Объект.Характеристика);
	СтруктураПродукции.Вставить("Упаковка",                                  Объект.Упаковка);
	СтруктураПродукции.Вставить("КоличествоУпаковок",                        Объект.КоличествоУпаковок);
	СтруктураПродукции.Вставить("Количество",                                Объект.Количество);
	СтруктураПродукции.Вставить("Спецификация",                              Объект.Спецификация);
	СтруктураПродукции.Вставить("ДатаПотребности",                           Объект.ДатаПотребности);
	СтруктураПродукции.Вставить("НачатьНеРанее",                             Объект.НачатьНеРанее);
	СтруктураПродукции.Вставить("РазмещениеВыпуска",                         Объект.РазмещениеВыпуска);
	СтруктураПродукции.Вставить("Склад",                                     Объект.Склад);
	СтруктураПродукции.Вставить("Подразделение",                             Объект.Подразделение);
	СтруктураПродукции.Вставить("Назначение",                                Объект.Назначение);
	СтруктураПродукции.Вставить("ИзмененияЗапрещены",                        Объект.ИзмененияЗапрещены);
	СтруктураПродукции.Вставить("КодСтроки",                                 Объект.КодСтроки);
	СтруктураПродукции.Вставить("КлючСвязи",                                 Объект.КлючСвязи);
	СтруктураПродукции.Вставить("КлючСвязиМатериалыИУслуги",                 Объект.КлючСвязиМатериалыИУслуги);
	СтруктураПродукции.Вставить("КлючСвязиПродукция",                        Объект.КлючСвязиПродукция);
	СтруктураПродукции.Вставить("ЕстьСоответствиеСтандартнойСпецификации",   Объект.ЕстьСоответствиеСтандартнойСпецификации);
	СтруктураПродукции.Вставить("ЕстьУточненияМатериалов",                   ЕстьУточненияМатериалов);
	СтруктураПродукции.Вставить("ЕстьОшибкиЗаполнения",                      ЕстьОшибкиЗаполнения);
	СтруктураПродукции.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", Объект.ОптимальноеКоличествоПередачиМеждуЭтапами);
	
	СтруктураДанных.Вставить("СтруктураПродукции",               СтруктураПродукции);
	СтруктураДанных.Вставить("Этапы",                            Объект.Этапы.Выгрузить());
	
	СтруктураДанных.Вставить("ВыходныеИзделия",                  Объект.ВыходныеИзделия.Выгрузить());
	СтруктураДанных.Вставить("ВозвратныеОтходы",                 Объект.ВозвратныеОтходы.Выгрузить());
	СтруктураДанных.Вставить("МатериалыИУслуги",                 Объект.МатериалыИУслуги.Выгрузить());
	СтруктураДанных.Вставить("Трудозатраты",                     Объект.Трудозатраты.Выгрузить());
	СтруктураДанных.Вставить("ВидыРабочихЦентров",               Объект.ВидыРабочихЦентров.Выгрузить());
	СтруктураДанных.Вставить("АльтернативныеВидыРабочихЦентров", Объект.АльтернативныеВидыРабочихЦентров.Выгрузить());
	СтруктураДанных.Вставить("ЭтапыВосстановленияБрака",         Объект.ЭтапыВосстановленияБрака.Выгрузить());
	
	ТаблицаОбеспечения = ТаблицаДокументаДляОбеспечения.Выгрузить(Новый Структура("Модифицирована", Истина));
	ТаблицаОбеспечения.Колонки.ИдентификаторСтрокиЗаказа.Имя = "Идентификатор";
	СтруктураДанных.Вставить("ТаблицаОбеспечения", ТаблицаОбеспечения);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормыНаСервере()
	
	ТекстЗаголовка = НСтр("ru = 'Спецификация заказа (строка %1: %2)'");
	
	ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка, Объект.НомерСтроки, Объект.Номенклатура);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКолонкиКоличествоНаЕдиницуПродукции()
	
	Если Элементы.Упаковка.Видимость Тогда
		
		ТекстЗаголовка = ТекстЗаголовкаКолонкиКоличествоНаЕдиницуПродукции(Объект.Номенклатура, Объект.Упаковка);
		
	Иначе
		
		ТекстЗаголовка = ТекстЗаголовкаКолонкиКоличествоНаЕдиницуПродукции(Объект.Номенклатура);
		
	КонецЕсли;
	
	Элементы.МатериалыИУслугиКоличествоНаЕдиницуИзделия.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКолонкиКоличествоНаЕдиницуПродукцииНаСервере()
	
	Если Элементы.Упаковка.Видимость Тогда
		
		ТекстЗаголовка = ТекстЗаголовкаКолонкиКоличествоНаЕдиницуПродукции(Объект.Номенклатура, Объект.Упаковка);
		
	Иначе
		
		ТекстЗаголовка = ТекстЗаголовкаКолонкиКоличествоНаЕдиницуПродукции(Объект.Номенклатура);
		
	КонецЕсли;
	
	Элементы.МатериалыИУслугиКоличествоНаЕдиницуИзделия.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЭтапаПроизводства(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Этапы", Объект.Этапы);
	ПараметрыФормы.Вставить("ТекущийЭтап", ТекущиеДанные.КлючСвязиЭтапы);
	
	ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма.ФормаВыбораЭтапаПроизводства", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование()
	
	ОчиститьСообщения();
	ЕстьОшибкиЗаполнения = Не ПроверитьЗаполнение();
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
	// Возврат результата редактирования в форму документа.
	Если Не ЗаписыватьРезультатРедактирования Тогда
		
		Если ЕстьОшибкиЗаполнения или ЕстьУточненияМатериалов Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Обнаружены ошибки заполнения, завершение редактирования невозможно.'"));
			Возврат;
		КонецЕсли;
		
		РезультатРедактирования = РезультатРедактированияВХранилище();
		
		Модифицированность = Ложь;
		ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище", "СпецификацияСтрокиЗаказа", РезультатРедактирования));
		
	Иначе
		// Запись результата редактирования.
		
		Если Модифицированность Тогда
			
			Если ЕстьОшибкиЗаполнения или ЕстьУточненияМатериалов Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Обнаружены ошибки заполнения, завершение редактирования невозможно.'"));
				Возврат;
			КонецЕсли;
			
			ЗаписатьДокументНаСервере();
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			
			Оповестить("Запись_ЗаказНаПроизводство", ПараметрыОповещения, Объект.Ссылка);
			Модифицированность = Ложь;
			
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Действие = "")
	
	ВсеДействия = ПустаяСтрока(Действие);
	
	Если ВсеДействия Тогда
		
		УстановитьЗаголовокФормыНаСервере();
		
		УстановитьЗаголовокКолонкиКоличествоНаЕдиницуПродукцииНаСервере();
		
		ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство);
		
		ТолькоПросмотр = ТолькоПросмотр Или Не ПравоИзменения;
		
		Элементы.ФормаЗавершитьРедактирование.Доступность = Не ТолькоПросмотр;
		Элементы.ФормаЗапретитьРедактирование.Доступность = ПравоИзменения;
		Элементы.ФормаРазрешитьРедактирование.Доступность = ПравоИзменения;
		
		Элементы.Номенклатура.ТолькоПросмотр       = Выполняется;
		Элементы.Характеристика.ТолькоПросмотр     = Выполняется;
		Элементы.Спецификация.ТолькоПросмотр       = Выполняется;
		Элементы.Упаковка.ТолькоПросмотр           = Выполняется;
		Элементы.КоличествоУпаковок.ТолькоПросмотр = Выполняется;
		
		Элементы.ФормаЗаполнитьПоСпецификации.Видимость = Не Выполняется;
		
		Элементы.Назначение.Доступность = НЕ (Объект.ПроизводствоПоЗаказу И ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказДавальца"));
		
		#Область Материалы
		
		Элементы.МатериалыИУслугиЗаполнитьОбеспечение.Доступность = Не ИспользуютсяКорректировкиЗаказаМатериалов;
		Элементы.МатериалыИУслугиВариантОбеспечения.ТолькоПросмотр = ИспользуютсяКорректировкиЗаказаМатериалов;
		
		Элементы.ГруппаУточнениеМатериалов.Видимость = Не Выполняется;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

#Область ВыходныеИзделия

	// выходное изделие указанное в заказе выделяется жирным

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтап.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаименованиеПолуфабриката.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Характеристика");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	// упаковки
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");
	
	// полуфабрикаты выделяются коричневым

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтап.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаименованиеПолуфабриката.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Характеристика");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);

	// характеристики

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");

	// данные изделия, этап выпуска, направление выпуска, склад изделия, указанного в заказе менять нельзя

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Номенклатура");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// запрет изменения реквизитов изделия если это ПФ производимый в процессе

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтап.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// выполненные этапы редактировать нельзя

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНазначение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияПолучатель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// направление выпуска для работ и услуг только В подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// если изделий больше 2, то тип стоимости обязателен для заполнения

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// только просмотр получателя для полуфабрикатов производимых в подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// только просмотр получателя для полуфабрикатов производимых в подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Текст 'На склад' в поле ВыходныеИзделия.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад'"));
	
	// Текст 'В подразделение' в поле ВыходныеИзделия.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение'"));
	
	// Текст 'На склад' в поле ВозвратныеОтходы.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад'"));
	
	// Текст 'В подразделение' в поле ВозвратныеОтходы.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение'"));
	
#КонецОбласти

#Область ВозвратныеОтходы

	// характеристики

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	// упаковки
	
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	// полуфабрикаты выделяются коричневым

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ЗаполнитьПоляЭлементаУсловногоОформления(Элемент, Элементы.ВозвратныеОтходы.ПодчиненныеЭлементы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);

	// для полуфабрикатов можно менять только ограниченный набор полей

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаименованиеПолуфабриката.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// выполненные этапы редактировать нельзя

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНазначение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыПолучатель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// статья калькуляции

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	// направление выпуска для работ и услуг только В подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

#КонецОбласти

#Область Этапы

	// выполненные этапы редактировать нельзя

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыНомерЭтапа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыНомерСледующегоЭтапа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыЭтап.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыНаименованиеПолуфабриката.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыПодразделение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыКоличество.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыВыполненоЗапланировано.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыПроизводствоНаСтороне.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти

#Область Трудозатраты

	// выполненные этапы редактировать нельзя

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРабот.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРаботЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыНаименованиеПолуфабриката.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

#КонецОбласти

#Область МатериалыИУслуги

	УстановитьУсловноеОформлениеОбеспечения();
	
	Обработки.ВводКорректировкиЗаказаМатериалов.УстановитьУсловноеОформление(УсловноеОформление, Элементы, "Объект", "", Ложь);
	
	// характеристики
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	// упаковки
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");
																   
	// статья калькуляции

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// отменено для полуфабрикатов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОтменитьПолучение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// выполненные этапы отображаются серым цветом

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслуги.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// выполненные этапы редактировать нельзя, можно только отменить и изменить количество

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("МатериалыИУслугиОтменитьПолучение");
	МассивИсключений.Добавить("МатериалыИУслугиКоличествоУпаковок");
	
	ЗаполнитьПоляЭлементаУсловногоОформления(Элемент, Элементы.МатериалыИУслуги.ПодчиненныеЭлементы, МассивИсключений);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЭтапВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отмененные строки редактировать нельзя
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("МатериалыИУслугиОтменитьПолучение");
	
	ЗаполнитьПоляЭлементаУсловногоОформления(Элемент, Элементы.МатериалыИУслуги.ПодчиненныеЭлементы, МассивИсключений);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// нельзя выбрать спецификацию если материал не производится

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Если материал производится и получается из подразделения то нужно изменить текст варианта обеспечения

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиВариантОбеспечения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ЗаказатьНаСклад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обеспечивать обособленно'"));
	
	// Текст способа получения полуфабриката "на этапе" или "по спецификации"
	#Область ТекстСпособПолученияПолуфабриката
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", " " + НСтр("ru = 'на этапе'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособПолученияПолуфабриката");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", " " + НСтр("ru = 'по спецификации'"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСпособПолученияПолуфабриката.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиИсточникПолученияПолуфабриката.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	// Нельзя производить ПФ, если этап выполняется силами переработчика.
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПроизводитсяВПроцессе.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область Серии

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", 
																     "МатериалыИУслугиСерия", 
																     "Объект.МатериалыИУслуги.СтатусУказанияСерий", 
																     "Объект.МатериалыИУслуги.ТипНоменклатуры");
																	 
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбеспечения()
	
#Область ОтметкаНезаполненнойДатыОтгрузкиСтрокиЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаПотребности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатусЗаказаНаПроизводство");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство.Создан;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляЭлементаУсловногоОформления(ЭлементУсловногоОформления, КоллекцияПолей, Исключения = Неопределено)
	
	Для каждого ЭлементКоллекции Из КоллекцияПолей Цикл
		
		Если ЗначениеЗаполнено(Исключения) И Исключения.Найти(ЭлементКоллекции.Имя) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ЗаполнитьПоляЭлементаУсловногоОформления(ЭлементУсловногоОформления, ЭлементКоллекции.ПодчиненныеЭлементы, Исключения);
		КонецЕсли;
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
		
	КонецЦикла
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗаголовкаКолонкиКоличествоНаЕдиницуПродукции(Номенклатура, Упаковка = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Представление КАК Представление
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка = &Упаковка";
		
		Запрос.УстановитьПараметр("Упаковка", Упаковка);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ЕдиницаИзмерения.Представление КАК Представление
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Количество на единицу продукции'");
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекстШаблона = НСтр("ru = 'Количество на 1 %1 продукции'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, Выборка.Представление);
	
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаКлиенте
Процедура СохранитьДанныеСтроки(ИмяТЧ, ДанныеСтроки)
	
	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		
		СохраненныеЗначения = Новый Структура("Номенклатура, Характеристика, ПроизводитсяВПроцессе,
			|ВариантОбеспечения, Назначение,
			|Этап, СтатьяКалькуляции,
			|СпособПолученияПолуфабриката,
			|ИсточникПолученияПолуфабриката, КлючСвязиЭтапВыпуска,
			|Склад, Подразделение,
			|Упаковка, КоличествоУпаковок");
			
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		
		СохраненныеЗначения = Новый Структура("Номенклатура, Характеристика, ПроизводитсяВПроцессе,
			|Склад, Подразделение,
			|Этап, ДоляСтоимости,
			|Упаковка, КоличествоУпаковок");
			
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		
		СохраненныеЗначения = Новый Структура("Номенклатура, Характеристика,ПроизводитсяВПроцессе, 
			|Склад, Подразделение,
			|Этап, СтатьяКалькуляции,
			|Упаковка, КоличествоУпаковок");
			
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		СохраненныеЗначения = Новый Структура("ВидРабот, Количество, СтатьяКалькуляции, Этап");
		
	Иначе
		
		СохраненныеЗначения = Новый Структура;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СохраненныеЗначения, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ИзменениеОбязательныхРеквизитовСтроки(ТекущиеДанные)
	
	Если Не Объект.ЕстьСоответствиеСтандартнойСпецификации Или СохраненныеЗначения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Спецификация) Или Не ЗначениеЗаполнено(Объект.Количество) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	
	МассивИсключений.Добавить("ПроизводитсяВПроцессе");
	МассивИсключений.Добавить("Подразделение");
	МассивИсключений.Добавить("Склад");
	
	МассивИсключений.Добавить("СпособПолученияПолуфабриката");
	
	МассивИсключений.Добавить("ВариантОбеспечения");
	МассивИсключений.Добавить("Назначение");
	
	Для каждого Элемент Из СохраненныеЗначения Цикл
		
		Если МассивИсключений.Найти(Элемент.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Значение <> ТекущиеДанные[Элемент.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииКлиент()
	
	Если Объект.Количество = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""количество"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"КоличествоУпаковок",
			"Объект", );
			
		Возврат;
		
	КонецЕсли;
	
	ЕстьУточненияМатериалов = Ложь;
	ЕстьОшибкиЗаполнения = Ложь;
	Объект.ЕстьСоответствиеСтандартнойСпецификации = Истина;
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаКлиенте();
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаКлиенте(ТекущиеДанные = Неопределено)
	
	МассивДанных = Новый Массив;
	ДанныеПоНоменклатуре = Новый Структура;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",    Объект.КлючСвязи);
		ДанныеПоНоменклатуре.Вставить("Номенклатура",          ТекущиеДанные.Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика",        ТекущиеДанные.Характеристика);
		ДанныеПоНоменклатуре.Вставить("Склад",                 ТекущиеДанные.Склад);
		ДанныеПоНоменклатуре.Вставить("Подразделение",         ТекущиеДанные.Подразделение);
		ДанныеПоНоменклатуре.Вставить("Спецификация",          ТекущиеДанные.ИсточникПолученияПолуфабриката);
		ДанныеПоНоменклатуре.Вставить("Количество",            ТекущиеДанные.Количество);
		ДанныеПоНоменклатуре.Вставить("Упаковка",              ТекущиеДанные.Упаковка);
		ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер",Объект.ПодразделениеДиспетчер);
		ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы",        ТекущиеДанные.КлючСвязиЭтапы);
		ДанныеПоНоменклатуре.Вставить("Назначение",            Объект.Назначение);
		ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",      Объект.НазначениеЗаказа);
		ДанныеПоНоменклатуре.Вставить("ДатаПотребности",       Объект.НачатьНеРанее);
		ДанныеПоНоменклатуре.Вставить("ЗаказатьНаСклад",       ТекущиеДанные.ЗаказатьНаСклад);
		
		КлючСвязиПолуфабрикат = ТекущиеДанные.КлючСвязи;
		
	Иначе
		
		ОчиститьТабличныеЧасти();
		
		ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",    Объект.КлючСвязи);
		ДанныеПоНоменклатуре.Вставить("Номенклатура",          Объект.Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика",        Объект.Характеристика);
		ДанныеПоНоменклатуре.Вставить("Склад",                 Объект.Склад);
		ДанныеПоНоменклатуре.Вставить("Подразделение",         Объект.Подразделение);
		ДанныеПоНоменклатуре.Вставить("Спецификация",          Объект.Спецификация);
		ДанныеПоНоменклатуре.Вставить("Количество",            Объект.Количество);
		ДанныеПоНоменклатуре.Вставить("Упаковка",              Объект.Упаковка);
		ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер",Объект.ПодразделениеДиспетчер);
		ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы");
		ДанныеПоНоменклатуре.Вставить("Назначение",            Объект.Назначение);
		ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",      Объект.НазначениеЗаказа);
		ДанныеПоНоменклатуре.Вставить("ДатаПотребности",       Объект.НачатьНеРанее);
		ДанныеПоНоменклатуре.Вставить("ЗаказатьНаСклад",       Истина);
		
		КлючСвязиПолуфабрикат = Неопределено;
		
	КонецЕсли;
	
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПолуфабрикат", КлючСвязиПолуфабрикат);
	
	МассивДанных.Добавить(ДанныеПоНоменклатуре);
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанных, КэшированныеЗначения, КлючСвязиПолуфабрикат);
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанных, КэшированныеЗначения, КлючСвязиПолуфабрикат = Неопределено)
	
	ЗаполнятьИнформациюПоАвтовыбору = Истина;
	
	Если КлючСвязиПолуфабрикат <> Неопределено Тогда
		МатериалыИУслугиУдалитьДанныеПолуфабриката(КлючСвязиПолуфабрикат);
	КонецЕсли;
	
	ПланированиеПроизводства.ЗаполнитьСпецификациюЗаказа(
		Объект,
		МассивДанных,
		КэшированныеЗначения,
		Истина,
		ЗаполнятьИнформациюПоАвтовыбору,
		ЕстьУточненияМатериалов);
	
	ПланированиеПроизводства.ЗаполнитьКоличествоЭтаповНаЕдиницуСледующегоЭтапаРекурсивно(Объект, Объект.КлючСвязи);
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(Объект.Этапы);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере();
	
	ОтметитьНаличиеАналогов();
	
	НастроитьОтображениеПредупрежденийПриРедактировании();
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();

КонецПроцедуры

&НаСервере
Процедура ИзменениеСоставаТЧВыходныеИзделияИВозвратныеОтходыНаСервере()
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеВыходныхИзделий()
	
	ИзменениеСоставаТЧВыходныеИзделияИВозвратныеОтходыНаСервере();
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОкончаниеРедактированияВыходныхИзделий(Идентификатор, НоваяСтрока, ИзменилисьОбязательныеРеквизиты)
	
	ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтоимостиРассчитывается = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается");
	
	ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(
		ТекущиеДанные, НоваяСтрока, ТипСтоимостиРассчитывается);
	
	Если НоваяСтрока И Объект.ЕстьСоответствиеСтандартнойСпецификации
		ИЛИ ИзменилисьОбязательныеРеквизиты Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается();
	
	СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается()
	
	ПараметрыОтбора = Новый Структура("КлючСвязиЭтапы");
	
	ВременнаяТаблица = Объект.ВыходныеИзделия.Выгрузить(, "КлючСвязиЭтапы");
	ВременнаяТаблица.Индексы.Добавить("КлючСвязиЭтапы");

	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		ПараметрыОтбора.КлючСвязиЭтапы = Строка.КлючСвязиЭтапы;
		
		КоличествоИзделий = ВременнаяТаблица.НайтиСтроки(ПараметрыОтбора).Количество();
		
		Строка.КоличествоИзделийСТипомСтоимостиРассчитывается = КоличествоИзделий;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	ИспользуетсяЗаказДавальца = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Назначение) Тогда
		Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "Заказ");
		Если ЗначениеЗаполнено(Заказ) Тогда
			//++ НЕ УТКА
			ИспользуетсяЗаказДавальца = ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказДавальца");
			//-- НЕ УТКА
			Если ИспользуетсяЗаказДавальца Тогда
				ОбъектОснования = Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

#Область Обеспечение

#Область ОбслуживаниеТабличнойЧастиВозвратныеОтходы

&НаСервере
Процедура ВозвратныеОтходыПослеУдаленияНаСервере()
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	МатериалыИУслуги = Объект.МатериалыИУслуги;
	
	//Таблица выделенных строк табличной части.
	ИдентификаторыСтрок = Новый Массив();
	ИдентификаторыСтрок.Добавить(ТекущаяСтрока);

	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(ИдентификаторыСтрок);
	ВыделеннаяСтрока = ТаблицаВыделенныеСтроки[0];

	//Таблица невыделенных строк табличной части с такой же аналитикой как у текущей строки.
	МатериалыИУслуги.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор).Количество = 0;
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение, Склад");
	ЗаполнитьЗначенияСвойств(Отбор, ВыделеннаяСтрока);

	ТаблицаНевыделенныеСтроки = СтрокиВТаблицу(Отбор);

	ТекСтрока = МатериалыИУслуги.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
	ТекСтрока.Количество = ВыделеннаяСтрока.Количество;

	//Таблица оформлено по строке заказа.
	КодыСтрок = Новый Массив();
	КодыСтрок.Добавить(ВыделеннаяСтрока.КодСтроки);

	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаОтбора.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаОтбора, ТаблицаВыделенныеСтроки);
	ТаблицаОформлено = РегистрыНакопления.ЗаказыМатериаловВПроизводство.ТаблицаОформлено(ТаблицаОтбора);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспеченияУниверсальный(
		ТаблицаВыделенныеСтроки,
		ТаблицаОформлено,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка);

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Вставить("ТаблицаНевыделенныеСтроки", ТаблицаНевыделенныеСтроки);
		Результат.Вставить("ГруппаСкладов", Неопределено);
		Результат.СписокВыбора = ДоступныеВариантыОбеспечения.Скопировать();
		Если ТекСтрока.ПроизводствоНаСтороне 
			ИЛИ ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Результат.СписокВыбора.Удалить(Результат.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.Отгрузить));
			Результат.СписокВыбора.Удалить(Результат.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно));
		ИначеЕсли ТекСтрока.ПроизводитсяВПроцессе Тогда
			Результат.Вставить("ТолькоОбособленно", Истина);
			Результат.Вставить("ОтгружатьЕслиПоступилоПодНазначениеПолностью", Истина); // частичная отгрузка запрещена, т.к. она требует разбиения строк
		КонецЕсли; 
	КонецЕсли;
	
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"МатериалыИУслуги", НСтр("ru = 'Материалы и услуги'"));
	
	ПараметрыПроверки.Поля.Вставить("Склад",   "Объект.МатериалыИУслуги[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад",
		НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Материалы и работы""'"));
		
	ПараметрыПроверки.Поля.Удалить("Подразделение");
	ПараметрыПроверки.Поля.Вставить("КлючСвязиЭтапы", "Объект.МатериалыИУслуги[%1].НаименованиеЭтапа");
	ПараметрыПроверки.Тексты.Вставить("КлючСвязиЭтапы",
		НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Материалы и работы""'"));
	
	Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.МатериалыИУслуги, Элементы.МатериалыИУслуги.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "МатериалыИУслуги",
				НСтр("ru = 'Материалы и работы'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.ДатаПотребности);
	ПараметрыФормы.Вставить("Склад",                             Неопределено);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	// Дополнительные параметры
	ПараметрыФормы.Вставить("ПроизводитсяВПроцессе",              ТекущаяСтрока.ПроизводитсяВПроцессе);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса",
		Ложь); // Всегда Ложь, для данного документа, вопрос используется фиктивно.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	// Ответ всегда равен КодВозвратаДиалога.Нет, для данного документа.
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ВыделенныеСтрокиВТаблицу(ИдентификаторыСтрок)

	МатериалыИУслуги = Объект.МатериалыИУслуги;
	
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	Для каждого Идентификатор Из ИдентификаторыСтрок Цикл

		Строка = МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
		
		Если Строка.ПроизводитсяВПроцессе И НЕ Строка.ЗаказатьНаСклад Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.ДатаОтгрузки      = Строка.ДатаПотребности;
		НоваяСтрока.ДатаОтгрузкиРабот = Строка.ДатаПотребности;

		НоваяСтрока.Идентификатор = Идентификатор;

		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда

			МассивСтрок = Объект.Этапы.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязиЭтапы));
			НоваяСтрока.Подразделение = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].Подразделение, Неопределено);

		КонецЕсли;

	КонецЦикла;

	Возврат Таблица;

КонецФункции

&НаСервере
Функция СтрокиВТаблицу(ПараметрыОтбора = Неопределено)

	Отбор = Неопределено;
	Если ПараметрыОтбора <> Неопределено Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика, Склад");
		ЗаполнитьЗначенияСвойств(Отбор, ПараметрыОтбора);
	КонецЕсли;

	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	Таблица.Колонки.Добавить("Скрывать"); //признак необходим только для состояния обеспечения
	Таблица.Колонки.Добавить("НомерСтрокиПродукция"); //необходим только для состояния обеспечения
	Таблица.Колонки.Добавить("Этап"); //необходим только для состояния обеспечения
	Таблица.Колонки.Добавить("ЭтапПорядок"); //необходим только для состояния обеспечения
	Таблица.Колонки.Добавить("ЖелаемаяДатаОтгрузки"); //необходим только для состояния обеспечения
	Таблица.Колонки.Добавить("Продукция"); //необходим только для состояния обеспечения

	МатериалыИУслуги = Объект.МатериалыИУслуги; 
	
	Для каждого Строка Из МатериалыИУслуги Цикл

		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если (Не Строка.ЗаказатьНаСклад И Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа) Тогда

			Продолжить;

		КонецЕсли;

		МассивСтрок = Объект.Этапы.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязиЭтапы));
		Подразделение = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].Подразделение, Неопределено);
		Этап = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].Этап, Неопределено);
		ЭтапПорядок = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].НомерЭтапа, Неопределено);

		Если Отбор <> Неопределено И (ОбеспечениеКлиентСервер.ИзменилсяКлюч(Отбор, Строка)
			Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
				И ПараметрыОтбора.Подразделение <> Подразделение) Тогда

				Продолжить;

		КонецЕсли;

		НоваяСтрока = Таблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ДатаОтгрузки      = Строка.ДатаПотребности;
		НоваяСтрока.ДатаОтгрузкиРабот = Строка.ДатаПотребности;

		НоваяСтрока.Подразделение     = Подразделение;
		НоваяСтрока.НомерСтрокиПродукция = НомерСтрокиПродукция;
		НоваяСтрока.ЖелаемаяДатаОтгрузки = Объект.НачатьНеРанее;
		НоваяСтрока.Продукция            = Объект.Номенклатура;
		НоваяСтрока.Этап                 = Этап;
		НоваяСтрока.ЭтапПорядок          = ЭтапПорядок;

		НоваяСтрока.Идентификатор = Строка.ПолучитьИдентификатор();
		
	КонецЦикла;

	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура();
	КонецЕсли;

	Для каждого Строка Из ТаблицаДокументаДляОбеспечения Цикл

		Если Не ОбеспечениеКлиентСервер.ИзменилсяКлюч(Отбор, Строка) Тогда

			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ДатаОтгрузкиРабот = Строка.ДатаОтгрузки;
			НоваяСтрока.Скрывать = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Таблица;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	Если ТекущиеДанные.ПроизводитсяВПроцессе И ВыбранноеЗначение.Количество() > 1 Тогда
		// Нельзя разбивать строку полуфабриката
		Возврат НСтр("ru = 'Действие не выполнено, т.к. разбиение строки не допускается.'");
	КонецЕсли;
	
	Для каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.МатериалыИУслуги.ТекущаяСтрока);
	КонецЦикла;
	
	Товары = Объект.МатериалыИУслуги;
	ТекстОповещения = Обработки.РедактированиеСпецификацииСтрокиЗаказа.ЗаполнитьВариантОбеспечения(
		Объект, Товары, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	ТаблицаМатериалыИУслуги = Объект.МатериалыИУслуги;
	ЭлементМатериалыИУслуги = Элементы.МатериалыИУслуги;
	
	//Таблица выделенных строк табличной части.
	ТаблицаВыделенныеСтроки = ВыделенныеСтрокиВТаблицу(ЭлементМатериалыИУслуги.ВыделенныеСтроки);
	
	КодыСтрок = Новый Массив();
	Для каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТаблицаМатериалыИУслуги.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = 0;
		КодыСтрок.Добавить(ВыделеннаяСтрока.КодСтроки);
	КонецЦикла;
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаОтбора.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаОтбора, ТаблицаВыделенныеСтроки);
	ТаблицаОформлено = РегистрыНакопления.ЗаказыМатериаловВПроизводство.ТаблицаОформлено(ТаблицаОтбора);
	//Таблица невыделенных строк табличной части.
	ТаблицаНевыделенныеСтроки = СтрокиВТаблицу();
	Для каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
		Строка = ТаблицаМатериалыИУслуги.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
		Строка.Количество = ВыделеннаяСтрока.Количество;
	КонецЦикла;
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияУниверсальный(
		ТаблицаВыделенныеСтроки,
		ТаблицаОформлено,
		ТаблицаНевыделенныеСтроки,
		Объект.Ссылка,
		Неопределено,
		Неопределено,
		ПараметрыЗаполнения);
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "МатериалыИУслуги", НСтр("ru = 'Материалы и работы'")));
	КонецЕсли;
	//Перенос результатов в документ.
	СчетИзменений = Обработки.РедактированиеСпецификацииСтрокиЗаказа.ЗаполнитьВариантОбеспечения(
		Объект, ТаблицаМатериалыИУслуги, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий);
	ТекстОповещения = ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(СчетИзменений);
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеОдноэтапныхСпецификаций

&НаКлиенте
Процедура ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификации(ТекущиеДанные, ТекущийЭлемент = "")
	
	Если МногоэтапнаяСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЭтапаОдноэтапнойСпецификации = Неопределено Тогда
		ЗаполнитьПараметрыПроизводственногоПроцесса();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЭтапаОдноэтапнойСпецификации);
	
	Если ТекущийЭлемент = "МатериалыИУслуги" И ТекущиеДанные.ПроизводствоНаСтороне Тогда
		ТекущиеДанные.ЗаказатьНаСклад = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЭтапаВСтрокеДляОдноэтапнойСпецификацииНаСервере(ТекущиеДанные, ТекущийЭлемент = "")
	
	Если МногоэтапнаяСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЭтапаОдноэтапнойСпецификации = Неопределено Тогда
		ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЭтапаОдноэтапнойСпецификации);
	
	Если ТекущийЭлемент = "МатериалыИУслуги" И ТекущиеДанные.ПроизводствоНаСтороне Тогда
		ТекущиеДанные.ЗаказатьНаСклад = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПроизводственногоПроцесса()
	
	НовоеЗначениеМногоэтапнаяСпецификация = Объект.Этапы.Количество() > 1;
	
	Если НовоеЗначениеМногоэтапнаяСпецификация И НЕ МногоэтапнаяСпецификация Тогда
		
		ДанныеЭтапаОдноэтапнойСпецификации = Неопределено;
		
	ИначеЕсли НЕ НовоеЗначениеМногоэтапнаяСпецификация 
				И (МногоэтапнаяСпецификация 
						ИЛИ ДанныеЭтапаОдноэтапнойСпецификации = Неопределено) Тогда
		
		ДанныеЭтапаОдноэтапнойСпецификации = ПолучитьДанныеЭтапаОдноэтапнойСпецификацииНаСервере(Объект.Этапы);
		
	КонецЕсли;
	
	МногоэтапнаяСпецификация = НовоеЗначениеМногоэтапнаяСпецификация;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере()
	
	НовоеЗначениеМногоэтапнаяСпецификация = Объект.Этапы.Количество() > 1;
	
	Если НовоеЗначениеМногоэтапнаяСпецификация Тогда
		
		ДанныеЭтапаОдноэтапнойСпецификации = Неопределено;
		
	ИначеЕсли НЕ НовоеЗначениеМногоэтапнаяСпецификация
				И (МногоэтапнаяСпецификация 
						ИЛИ ДанныеЭтапаОдноэтапнойСпецификации = Неопределено) Тогда
		
		ДанныеЭтапаОдноэтапнойСпецификации = ПолучитьДанныеЭтапаОдноэтапнойСпецификацииНаСервере(Объект.Этапы);
		
	КонецЕсли;
	
	МногоэтапнаяСпецификация = НовоеЗначениеМногоэтапнаяСпецификация;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЭтапаОдноэтапнойСпецификацииНаСервере(Этапы)
	
	Результат = Новый Структура;
	Результат.Вставить("Этап");
	Результат.Вставить("КлючСвязиЭтапы");
	Результат.Вставить("КлючСвязиЭтапыСтрока");
	Результат.Вставить("Подразделение");
	Результат.Вставить("ПроизводствоНаСтороне");
	Результат.Вставить("НаименованиеЭтапа");
	Результат.Вставить("НаименованиеПолуфабриката");
	Результат.Вставить("ЭтапВосстановленияБрака");
	Результат.Вставить("ЭтапВыполнен");
	
	Если Этапы.Количество() > 0 И НЕ Этапы[0].ЭтапВыполнен Тогда
		
		ДанныеПервогоЭтапа = Этапы[0];
		
		Результат.Этап = ДанныеПервогоЭтапа.Этап;
		Результат.КлючСвязиЭтапы = ДанныеПервогоЭтапа.КлючСвязи;
		Результат.КлючСвязиЭтапыСтрока = Строка(ДанныеПервогоЭтапа.КлючСвязи);
		
		Результат.Подразделение = ДанныеПервогоЭтапа.Подразделение;
		Результат.ПроизводствоНаСтороне = ДанныеПервогоЭтапа.ПроизводствоНаСтороне;
		
		Результат.НаименованиеЭтапа = ДанныеПервогоЭтапа.НаименованиеЭтапа;
		Результат.НаименованиеПолуфабриката = ДанныеПервогоЭтапа.НаименованиеПолуфабриката;
		Результат.ЭтапВосстановленияБрака = ДанныеПервогоЭтапа.ЭтапВосстановленияБрака;
		Результат.ЭтапВыполнен = ДанныеПервогоЭтапа.ЭтапВыполнен;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДокументаДляОбеспечения()
	
	Таблица = ПолучитьИзВременногоХранилища(Параметры.АдресТоварыДляОбеспечения);
	
	Для каждого Строка Из Таблица Цикл
		
		Если Строка.СтрокаНеВыделена Тогда
			НоваяСтрока = ТаблицаДокументаДляОбеспечения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИдентификаторСтрокиЗаказа = Строка.Идентификатор;
		Иначе
			НомерСтрокиПродукция = Строка.НомерСтрокиПродукция;
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(Параметры.АдресТоварыДляОбеспечения);

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеТабличнойЧастиМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиОбработкаСобытияНоменклатураПриИзменении(ТекущиеДанные)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	МатериалыИУслугиПриИзмененииНоменклатурыХарактеристикиНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(ТекущиеДанные, Объект.КоличествоУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОбработкаСобытияХарактеристикаПриИзменении(ТекущиеДанные)
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	МатериалыИУслугиПриИзмененииНоменклатурыХарактеристикиНаСервере(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОбработкаСобытияКоличествоПриИзменении(ТекущиеДанные)
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе 
		И ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации")
		И СтатусЗаказаНаПроизводство = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство.Создан") Тогда
		
		ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаКлиенте(ТекущиеДанные);
		
	ИначеЕсли ТекущиеДанные.ПроизводитсяВПроцессе 
		И ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе") Тогда
		
		СтруктураПотребности = ПолучитьСтруктуруПотребностиВоВнутреннихПолуфабрикатах(ТекущиеДанные);
		
		ИзменитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, Истина);
		
	КонецЕсли;
		
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		
		ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
		НастроитьОтображениеПредупрежденийПриРедактировании();
		
	КонецЕсли;
	
	ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(ТекущиеДанные, Объект.КоличествоУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиПриИзмененииНоменклатурыХарактеристикиНаСервере(Идентификатор)
	
	ТекущаяСтрока = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
	
	ЗаполнитьСпособПолученияМатериаловПоУмолчаниюНаСервере(ТекущаяСтрока);
	
	МатериалыИУслугиПроверитьНаличиеУточненийМатериалов();
	
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить(ТекущаяСтрока.КлючСвязи);
	
	ОтметитьНаличиеАналогов(МассивКлючей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособПолученияМатериаловПоУмолчаниюНаСервере(ТекущиеДанные)
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		МатериалыИУслугиУдалитьДанныеПолуфабриката(ТекущиеДанные.КлючСвязи);
		
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		ТекущиеДанные.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
		ТекущиеДанные.ИсточникПолученияПолуфабриката = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Документы.ЗаказНаПроизводство.СоздатьВтСпособыПолученияМатериалов(Объект);
	
	ДанныеЗаказа = Новый Структура("ПодразделениеДиспетчер, Назначение, НачатьНеРанее, ПроизводствоПоЗаказу, Заказ");
	ЗаполнитьЗначенияСвойств(ДанныеЗаказа, Объект);
	
	ДанныеМатериала = Новый Структура("Подразделение, ПроизводствоНаСтороне, Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(ДанныеМатериала, ТекущиеДанные);
	
	СпособПолученияМатериала = ПланированиеПроизводства.СпособПолученияМатериалаПоУмолчанию(
		ДанныеЗаказа, 
		ДанныеМатериала, 
		МенеджерВременныхТаблиц);
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СпособПолученияМатериала);
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиПослеУдаленияНаСервере()
	
	Если Не ЗначениеЗаполнено(УдаляемыеСтрокиМассивДанных) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// удаление связанных полуфабрикатов
	
	Для каждого ДанныеСтроки Из УдаляемыеСтрокиМассивДанных Цикл
		
		Если ДанныеСтроки.ПроизводитсяВПроцессе 
			И ДанныеСтроки.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации Тогда
			
			МатериалыИУслугиУдалитьДанныеПолуфабриката(ДанныеСтроки.КлючСвязи);
			
		ИначеЕсли ДанныеСтроки.ПроизводитсяВПроцессе 
			И ДанныеСтроки.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе Тогда
			
			СтруктураПотребности = ПолучитьСтруктуруПотребностиВоВнутреннихПолуфабрикатах(ДанныеСтроки);
			ОтменитьПотребностьВоВнутреннихПолуфабрикатахНаСервере(СтруктураПотребности);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МатериалыИУслугиПроверитьНаличиеУточненийМатериалов();
	
	ОбновитьСостояниеСпецификацииЗаказа(ЭтаФорма);
	
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	УдаляемыеСтрокиМассивДанных = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.МатериалыИУслуги.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиУдалитьДанныеПолуфабриката(КлючСвязи)
	
	Обработки.РедактированиеСпецификацииСтрокиЗаказа.УдалитьДанныеПолуфабрикатаИзСпецификации(КлючСвязи, Объект);
	
	ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере();
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПризнакПланированияПолуфабрикатов(ТипНоменклатуры, Номенклатура, Характеристика, Склад, ПодразделениеДиспетчер)
	
	Если Не ЗначениеЗаполнено(Склад)
			И (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
		Или Не ЗначениеЗаполнено(ПодразделениеДиспетчер) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Номенклатура,
	|	&Характеристика,
	|	&Склад
	|ПОМЕСТИТЬ ВТТовары
	|;
	|
	|///////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	ИСТИНА КАК Запланировать
	|ИЗ
	|	ВтСпособыОбеспечения КАК Фильтр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособы
	|		ПО СпрСпособы.Ссылка = Фильтр.СпособОбеспеченияПотребностей
	|		И СпрСпособы.Подразделение = &ПодразделениеДиспетчер
	|		И СпрСпособы.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|ГДЕ
	|	НЕ СпрСпособы.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер",  ПодразделениеДиспетчер);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(ТекущиеДанные, ИзделиеКоличествоУпаковок)
	
	Если ИзделиеКоличествоУпаковок > 0 Тогда
		
		ТекущиеДанные.КоличествоНаЕдиницуИзделия = ТекущиеДанные.КоличествоУпаковок / ИзделиеКоличествоУпаковок;
		
	Иначе
		
		ТекущиеДанные.КоличествоНаЕдиницуИзделия = ТекущиеДанные.КоличествоУпаковок;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоместитьТаблицуДоступныхДляВыбораЭтаповВыпускаПолуфабрикатаВХранилище()
	
	Адрес = Неопределено;
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Этап)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И (ТекущиеДанные.ХарактеристикиИспользуются И ЗначениеЗаполнено(ТекущиеДанные.Характеристика)
			ИЛИ НЕ ТекущиеДанные.ХарактеристикиИспользуются) Тогда
			
		// Таблица этапов
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НомерСледующегоЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапаФорма", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
		ТаблицаЭтапов.Колонки.Добавить("НомерСледующегоЭтапаФорма", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
		ТаблицаЭтапов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ТаблицаЭтапов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеПолуфабриката", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЭтапВыполнен", Ложь);
		ПараметрыОтбора.Вставить("ПроизводствоНаСтороне", Ложь);
		
		НомерТекущегоЭтапа = 0;
		
		Для каждого ЭлементКоллекции Из Объект.Этапы.НайтиСтроки(ПараметрыОтбора) Цикл
			
			Если ЭлементКоллекции.КлючСвязи = ТекущиеДанные.КлючСвязиЭтапы Тогда
				НомерТекущегоЭтапа = ЭлементКоллекции.НомерЭтапа;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			
		КонецЦикла;
		
		// Таблица полуфабрикатов
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		
		Если ТекущиеДанные.ХарактеристикиИспользуются Тогда
			
			ПараметрыОтбора.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ЭтапВыполнен", Ложь);
		ПараметрыОтбора.Вставить("НаправлениеВыпуска", Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад);
		
		Для каждого ЭлементКоллекции Из Объект.ВозвратныеОтходы.НайтиСтроки(ПараметрыОтбора) Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("Этап, КлючСвязиСтрока", "Количество");
		
		// Таблица этапов для выбора
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Этап",      ТекущиеДанные.Этап);
		Запрос.УстановитьПараметр("НомерЭтап", НомерТекущегоЭтапа);
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("Упаковка",     ТекущиеДанные.Упаковка);
		Запрос.УстановитьПараметр("Количество",   ТекущиеДанные.Количество);
		
		Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", ТаблицаПолуфабрикатов);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.НомерЭтапа КАК НомерЭтапа,
		|	Таблица.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
		|	Таблица.НомерЭтапаФорма КАК НомерЭтапаФорма,
		|	Таблица.НомерСледующегоЭтапаФорма КАК НомерСледующегоЭтапаФорма,
		|	Таблица.Этап КАК Этап,
		|	Таблица.Количество КАК Количество,
		|	Таблица.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Таблица.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	Таблица.НаименованиеПолуфабриката КАК НаименованиеПолуфабриката,
		|	Таблица.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТТаблицаЭтапов
		|ИЗ
		|	&ТаблицаЭтапов КАК Таблица
		|ГДЕ
		|	Таблица.НомерЭтапа < &НомерЭтап
		|	И Таблица.НомерСледующегоЭтапа <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Этап КАК Этап,
		|	Таблица.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаПолуфабрикатов
		|ИЗ
		|	&ТаблицаПолуфабрикатов КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтапов.Этап КАК Этап,
		|	ТаблицаЭтапов.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтапов.НаименованиеПолуфабриката КАК НаименованиеПолуфабриката,
		|	ТаблицаЭтапов.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтапов.НомерЭтапаФорма КАК НомерЭтапаФорма,
		|	ТаблицаЭтапов.НомерСледующегоЭтапаФорма КАК НомерСледующегоЭтапаФорма,
		|	ТаблицаЭтапов.Подразделение КАК Подразделение,
		|	ЛОЖЬ КАК ПроизводствоНаСтороне,
		|	ЛОЖЬ КАК ЭтапВыполнен,
		|	ТаблицаЭтапов.Количество КАК Количество,
		|	ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) / ВЫБОР
		|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоличествоИзделия,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаПолуфабрикатов.Количество, 0) >= &Количество
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КоличествоИзделияДостаточно,
		|	ВЫБОР
		|		КОГДА &Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление
		|		ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаИзделияПредставление
		|ИЗ
		|	ВТТаблицаЭтапов КАК ТаблицаЭтапов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПолуфабрикатов КАК ТаблицаПолуфабрикатов
		|		ПО ТаблицаЭтапов.КлючСвязиСтрока = ТаблицаПолуфабрикатов.КлючСвязиСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЭтапов.НомерЭтапа";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
																										"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаЭтапов = Неопределено;
		ТаблицаПолуфабрикатов = Неопределено;
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ТаблицаЭтапов = Новый ТаблицаЗначений;
			
			ТаблицаЭтапов.Колонки.Добавить("Этап");
			ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа");
			ТаблицаЭтапов.Колонки.Добавить("НаименованиеПолуфабриката");
			ТаблицаЭтапов.Колонки.Добавить("КлючСвязи");
			ТаблицаЭтапов.Колонки.Добавить("НомерЭтапаФорма");
			ТаблицаЭтапов.Колонки.Добавить("НомерСледующегоЭтапаФорма");
			ТаблицаЭтапов.Колонки.Добавить("Подразделение");
			ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне");
			ТаблицаЭтапов.Колонки.Добавить("ЭтапВыполнен");
			ТаблицаЭтапов.Колонки.Добавить("Количество");
			
			ТаблицаЭтапов.Колонки.Добавить("КоличествоИзделия");
			ТаблицаЭтапов.Колонки.Добавить("КоличествоИзделияДостаточно");
			ТаблицаЭтапов.Колонки.Добавить("УпаковкаИзделияПредставление");
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ТаблицаЭтапов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор(Выборка.КлючСвязиСтрока);
				
			КонецЦикла;
			
			Адрес = ПоместитьВоВременноеХранилище(ТаблицаЭтапов, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПараметровПроизводитсяВПроцессе()

	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеЗначения.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации")
		И СохраненныеЗначения.СпособПолученияПолуфабриката <> ТекущиеДанные.СпособПолученияПолуфабриката
		И ЗначениеЗаполнено(СохраненныеЗначения.ИсточникПолученияПолуфабриката) Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение настройки приведет к удалению данных спецификации полуфабриката. Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьДанныеПолуфабрикатаЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	ИначеЕсли СохраненныеЗначения.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе") Тогда
		
		Если СохраненныеЗначения.СпособПолученияПолуфабриката = ТекущиеДанные.СпособПолученияПолуфабриката
			И СохраненныеЗначения.ИсточникПолученияПолуфабриката = ТекущиеДанные.ИсточникПолученияПолуфабриката
			И СохраненныеЗначения.КлючСвязиЭтапВыпуска = ТекущиеДанные.КлючСвязиЭтапВыпуска Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ОтменитьПотребностьВоВнутреннихПолуфабрикатах(ТекущиеДанные);
		
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПослеИзмененияПараметровПроизводитсяВПроцессе(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеПолуфабрикатаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.ПроизводитсяВПроцессе = СохраненныеЗначения.ПроизводитсяВПроцессе;
		ТекущиеДанные.СпособПолученияПолуфабриката = СохраненныеЗначения.СпособПолученияПолуфабриката;
		Возврат;
	КонецЕсли;
	
	МатериалыИУслугиУдалитьДанныеПолуфабриката(ТекущиеДанные.КлючСвязи);
	
	Если НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка");
	КонецЕсли;
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПослеИзмененияПараметровПроизводитсяВПроцессе(Идентификатор);

КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияПараметровПроизводитсяВПроцессе(Знач Идентификатор)
	
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		
		ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе");
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПолученияПолуфабриката) Тогда
			ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации");
		КонецЕсли; 
		
		Если ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе")
			И ТипЗнч(ТекущиеДанные.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
			ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		ИначеЕсли ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации")
			И ТипЗнч(ТекущиеДанные.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
		КонецЕсли;
		
		ЗаполнитьВариантОбеспеченияПолуфабриката(ТекущиеДанные);
		
	Иначе
		
		ТекущиеДанные.СпособПолученияПолуфабриката = ПредопределенноеЗначение("Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка");
		ТекущиеДанные.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
		ТекущиеДанные.КлючСвязиЭтапВыпуска = Неопределено;
		
		Если СохраненныеЗначения.ПроизводитсяВПроцессе
			И ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе") Тогда
		
			ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		КонецЕсли;
		
		ЗаполнитьСпособПолученияМатериаловПоУмолчаниюНаСервере(ТекущиеДанные);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВариантОбеспеченияПолуфабриката(ТекущиеДанные)

	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
		И ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
	ИначеЕсли НЕ ТекущиеДанные.ЗаказатьНаСклад 
		И ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	ИначеЕсли ТекущиеДанные.ЗаказатьНаСклад 
		И ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно") Тогда
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
	КонецЕсли;

КонецПроцедуры

#Область МатериалыИУслугиУточнения

&НаСервере
Процедура МатериалыИУслугиПроверитьНаличиеУточненийМатериалов()
	
	НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(Новый Структура("ИспользуетсяАвтовыбор", Истина));
	
	Для каждого СтрокаМатерилы Из НайденныеСтроки Цикл
		
		Если (СтрокаМатерилы.Номенклатура.Пустая()
			ИЛИ СтрокаМатерилы.Характеристика.Пустая() И СтрокаМатерилы.ХарактеристикиИспользуются и ХарактеристикиИспользуются) Тогда
			
			ЕстьУточненияМатериалов = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьУточненияМатериалов Тогда
		ЕстьУточненияМатериалов = Ложь;
		ОбновитьСостояниеСпецификацииЗаказа = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущийНомерСтроки, Направление)
	
	Если Объект.МатериалыИУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда
		Для каждого СтрокаМатериал из Объект.МатериалыИУслуги Цикл
			
			Если СтрокаМатериал.Номенклатура.Пустая()
					ИЛИ СтрокаМатериал.Характеристика.Пустая() И СтрокаМатериал.ХарактеристикиИспользуются и ХарактеристикиИспользуются Тогда
				
				Если СтрокаМатериал.НомерСтроки > ТекущийНомерСтроки Тогда
					
					Элементы.МатериалыИУслуги.ТекущаяСтрока = СтрокаМатериал.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		СчМатериал = Объект.МатериалыИУслуги.Количество() - 1;
		
		Пока СчМатериал > 0 Цикл
			
			СтрокаМатериал = Объект.МатериалыИУслуги[СчМатериал];
			
			Если СтрокаМатериал.Номенклатура.Пустая()
					ИЛИ СтрокаМатериал.Характеристика.Пустая() И СтрокаМатериал.ХарактеристикиИспользуются И ХарактеристикиИспользуются Тогда
				
				Если СтрокаМатериал.НомерСтроки < ТекущийНомерСтроки Тогда
					
					Элементы.МатериалыИУслуги.ТекущаяСтрока = СтрокаМатериал.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СчМатериал = СчМатериал - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МатериалыИУслугиАналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)

	Если МассивКлючей = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("ПроизводитсяВПроцессе", Ложь);
		
		МатериалыИУслуги = Объект.МатериалыИУслуги.Выгрузить(ПараметрыОтбора, "НомерСтроки, Номенклатура, Характеристика");
		
	Иначе
		
		МатериалыИУслуги = Новый ТаблицаЗначений;
		
		МатериалыИУслуги.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		МатериалыИУслуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		МатериалыИУслуги.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		ПараметрыОтбора = Новый Структура("ПроизводитсяВПроцессе", Ложь);
		
		Для каждого Строка из Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
			
			Если МассивКлючей.Найти(Строка.КлючСвязи) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(МатериалыИУслуги.Добавить(), Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма);
	УправлениеПроизводством.ОтметитьНаличиеАналогов(Объект.МатериалыИУслуги, ПараметрыВыбораАналогов, МатериалыИУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНайтиАналоги(ТекущиеДанные)
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма, ТекущиеДанные);
	
	ДополнитьПараметрыНаСервере(ПараметрыВыбораАналогов, ТекущиеДанные.КлючСвязиЭтапы);
	
	УправлениеПроизводствомКлиент.ОткрытьПодборАналогов(ПараметрыВыбораАналогов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораАналогов(Форма, ТекущиеДанные = Неопределено)

	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыВыбораАналогов();
	
	ПараметрыФормы.ДатаОкончанияДействияРазрешений = НачалоДня(Форма.Объект.ДатаПотребности);

	ПараметрыФормы.ЗаказНаПроизводство    = Форма.Объект.Ссылка;
	ПараметрыФормы.Изделие                = Форма.Объект.Номенклатура;
	ПараметрыФормы.ХарактеристикаИзделия  = Форма.Объект.Характеристика;
	
	Если ТипЗнч(Форма.ЗаказНазначения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыФормы.ЗаказКлиента = Форма.ЗаказНазначения;
	Иначе
		ПараметрыФормы.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.КлючСвязиСпецификация = ТекущиеДанные.КлючСвязиСпецификация;
		
		ПараметрыФормы.Материал = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.ХарактеристикаМатериала = ТекущиеДанные.Характеристика;
		ПараметрыФормы.УпаковкаМатериала = ТекущиеДанные.Упаковка;
		ПараметрыФормы.КоличествоУпаковокМатериала = ТекущиеДанные.КоличествоУпаковок;
		ПараметрыФормы.КоличествоМатериала = ТекущиеДанные.Количество;
		
		ПараметрыФормы.ПоказатьДоступныеОстатки = ТекущиеДанные.ЗаказатьНаСклад;
	КонецЕсли; 

	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыНаСервере(ПараметрыФормы, КлючСвязиЭтапы)
	

	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязиЭтапы);
	
	ТекущийЭтап = Объект.Этапы.НайтиСтроки(СтруктураОтбора)[0];
	
	ПараметрыФормы.Подразделение = ТекущийЭтап.Подразделение;
	
	ВладелецЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЭтап.Этап, "Владелец");
	
	ПараметрыФормы.Спецификация = ВладелецЭтапа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Этап, Знач НомерСтроки, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей          = Новый Массив;
	МассивЗаменяемыхСтрок = Новый Массив;
	
	КоличествоОстаток     = Новый Соответствие;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПроизводитсяВПроцессе", Ложь);
	
	НаборыМатериалов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		Если НаборыМатериалов.ПоСпецификации Тогда
			СтруктураОтбора.Вставить("КлючСвязиСпецификация", СтрокаМатериал.КлючСвязиСпецификация);
		Иначе
			СтруктураОтбора.Вставить("Этап", Этап);
			СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		КонецЕсли;
		
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Ошибка применения аналога. Материал ""%1"" на этапе ""%2"" не потребляется.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СокрЛП(СтрокаМатериал.Номенклатура), СокрЛП(Этап));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", НомерСтроки, "ЕстьАналогиМатериала"),
				"Объект", Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаСпецификации = НайденныеСтроки[0];
		
		Если СтрокаСпецификации.Количество < СтрокаМатериал.Количество Тогда
			
			ШаблонСообщения = НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" на этапе ""%2"" недостаточно для замены по разрешению.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СокрЛП(СтрокаМатериал.Номенклатура), СокрЛП(Этап));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", НомерСтроки, "ЕстьАналогиМатериала"),
				"Объект", Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		МассивЗаменяемыхСтрок.Добавить(СтрокаСпецификации);
		КоличествоОстаток.Вставить(СтрокаСпецификации.КлючСвязи, СтрокаСпецификации.Количество - СтрокаМатериал.Количество);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	
	Для каждого СтрокаСпецификации из МассивЗаменяемыхСтрок Цикл
		
		ИндексТекущейСтроки = Объект.МатериалыИУслуги.Индекс(СтрокаСпецификации);
		
		ЗначенияРеквизитовНовыхСтрок.Вставить("Этап", СтрокаСпецификации.Этап);
		ЗначенияРеквизитовНовыхСтрок.Вставить("НаименованиеЭтапа", СтрокаСпецификации.НаименованиеЭтапа);
		ЗначенияРеквизитовНовыхСтрок.Вставить("НаименованиеПолуфабриката", СтрокаСпецификации.НаименованиеПолуфабриката);
		ЗначенияРеквизитовНовыхСтрок.Вставить("Склад", СтрокаСпецификации.Склад);
		ЗначенияРеквизитовНовыхСтрок.Вставить("СтатьяКалькуляции", СтрокаСпецификации.СтатьяКалькуляции);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ПрименениеМатериала", СтрокаСпецификации.ПрименениеМатериала);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ЗаказатьНаСклад", СтрокаСпецификации.ЗаказатьНаСклад);
		ЗначенияРеквизитовНовыхСтрок.Вставить("КлючСвязиПродукция", СтрокаСпецификации.КлючСвязиПродукция);
		ЗначенияРеквизитовНовыхСтрок.Вставить("КлючСвязиЭтапы", СтрокаСпецификации.КлючСвязиЭтапы);
		ЗначенияРеквизитовНовыхСтрок.Вставить("Подразделение", СтрокаСпецификации.Подразделение);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ВариантОбеспечения", СтрокаСпецификации.ВариантОбеспечения);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ДатаПотребности", СтрокаСпецификации.ДатаПотребности);
		ЗначенияРеквизитовНовыхСтрок.Вставить("Назначение", СтрокаСпецификации.Назначение);
		ЗначенияРеквизитовНовыхСтрок.Вставить("СпособПолученияПолуфабриката", СтрокаСпецификации.СпособПолученияПолуфабриката);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ИсточникПолученияПолуфабриката", СтрокаСпецификации.ИсточникПолученияПолуфабриката);
		
		Если КоличествоОстаток[СтрокаСпецификации.КлючСвязи] > 0 Тогда
			
			СтрокаСпецификации.Количество = КоличествоОстаток[СтрокаСпецификации.КлючСвязи];
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСпецификации, СтруктураДействий, Неопределено);
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			МассивКлючей.Добавить(СтрокаСпецификации.КлючСвязи);
			
		Иначе
			
			Объект.МатериалыИУслуги.Удалить(СтрокаСпецификации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаАналог из НаборыМатериалов.Аналоги Цикл
		
		НоваяСтрокаМатериалыИУслуги = Объект.МатериалыИУслуги.Вставить(ИндексТекущейСтроки);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, ЗначенияРеквизитовНовыхСтрок);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, СтрокаАналог);
		
		ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(НоваяСтрокаМатериалыИУслуги, Объект.КоличествоУпаковок);
		
		НоваяСтрокаМатериалыИУслуги.КлючСвязи = Новый УникальныйИдентификатор;
		НоваяСтрокаМатериалыИУслуги.КлючСвязиЭтапыСтрока = Строка(НоваяСтрокаМатериалыИУслуги.КлючСвязиЭтапы);
		
		МассивКлючей.Добавить(НоваяСтрокаМатериалыИУслуги.КлючСвязи);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
		ИдентификаторПоследнейСтроки = НоваяСтрокаМатериалыИУслуги.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	ИдентификаторПоследнейСтроки = 0;
	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИУслуги, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Элементы.МатериалыИУслуги.ТекущаяСтрока = ИдентификаторПоследнейСтроки;
	
	ОтметитьНаличиеАналогов(МассивКлючей);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбслуживаниеТабличнойЧастиЭтапы

&НаКлиенте
Процедура ЭтапыРедактирование()
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим",           "СпецификацияЗаказа");
	ПараметрыФормы.Вставить("ТолькоПросмотр",  ТолькоПросмотр Или ТекущиеДанные.ЭтапВыполнен);
	ПараметрыФормы.Вставить("АдресВХранилище", ДанныеЭтапаВХранилище(ТекущиеДанные.КлючСвязи));
	
	ОткрытьФорму("Справочник.ЭтапыПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДанныеЭтапа(АдресВХранилище, Идентификатор, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.Этапы.НайтиПоИдентификатору(Идентификатор);
	
	ОтборКлючСвязиЭтапы = Новый Структура;
	ОтборКлючСвязиЭтапы.Вставить("КлючСвязиЭтапы", ТекущиеДанные.КлючСвязи);
	
	СвойстваЭтапа = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	ИзмененоПодразделение     = СвойстваЭтапа.Подразделение <> ТекущиеДанные.Подразделение;
	ИзмененоНаименование      = СвойстваЭтапа.НаименованиеЭтапа <> ТекущиеДанные.НаименованиеЭтапа;
	ИзмененСпособПроизводства = СвойстваЭтапа.ПроизводствоНаСтороне <> ТекущиеДанные.ПроизводствоНаСтороне;
	
	Если ИзмененоНаименование Тогда
		НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.НаименованиеЭтапа = СвойстваЭтапа.НаименованиеЭтапа;
		КонецЦикла;
		
		НайденныеСтроки = Объект.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.НаименованиеЭтапа = СвойстваЭтапа.НаименованиеЭтапа;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененСпособПроизводства ИЛИ ИзмененоНаименование ИЛИ ИзмененоПодразделение Тогда
		
		Для каждого Строка Из Объект.МатериалыИУслуги.НайтиСтроки(ОтборКлючСвязиЭтапы) Цикл
			
			Строка.НаименованиеЭтапа = СвойстваЭтапа.НаименованиеЭтапа;
			
			Если ИзмененСпособПроизводства Тогда
				
				Строка.ПроизводствоНаСтороне = СвойстваЭтапа.ПроизводствоНаСтороне;
				
				Если Строка.ПроизводствоНаСтороне Тогда
				
					Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
						ИЛИ Строка.ПроизводитсяВПроцессе Тогда 
						
						ЗаполнитьСпособПолученияМатериаловПоУмолчаниюНаСервере(Строка);
						ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаСервере(Строка);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИзмененоПодразделение Тогда
				
				Строка.Подразделение = СвойстваЭтапа.Подразделение;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
					Новый Структура("Склад, ПараметрыУказанияСерий", Строка.Склад, ПараметрыУказанияСерий));
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваЭтапа);
	
	НайденныеСтроки = Объект.ВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
	Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
		Объект.ВидыРабочихЦентров.Удалить(ДанныеСтроки);
	КонецЦикла;
	
	НайденныеСтроки = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
	Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
		Объект.АльтернативныеВидыРабочихЦентров.Удалить(ДанныеСтроки);
	КонецЦикла;
	
	ПустойКлюч = ПолучитьПустойУникальныйИдентификатор();
	КлючиСвязиВидовРабочихЦентров = Новый Соответствие;
	
	ОтборКлючСвязиЭтапы.Очистить();
	Для каждого ДанныеСтроки Из СвойстваЭтапа.ВидыРабочихЦентров Цикл
		Строка = Объект.ВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		Строка.КлючСвязиЭтапы = ТекущиеДанные.КлючСвязи;
		Строка.КлючСвязиПродукция = ТекущиеДанные.КлючСвязиПродукция;
		
		ОтборКлючСвязиЭтапы.Вставить("КлючСвязиВидыРабочихЦентров", Строка.КлючСвязи);
		АльтернативныеВидыРабочихЦентров = СвойстваЭтапа.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
		
		Для каждого СтрокаАльтернативныеВидыРабочихЦентров Из АльтернативныеВидыРабочихЦентров Цикл
			НоваяСтрока = Объект.АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАльтернативныеВидыРабочихЦентров);
			Если НоваяСтрока.КлючСвязи = ПустойКлюч Тогда
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			КонецЕсли;
			НоваяСтрока.КлючСвязиЭтапы = ТекущиеДанные.КлючСвязи;
			НоваяСтрока.КлючСвязиПродукция = ТекущиеДанные.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиВидыРабочихЦентров = Строка.КлючСвязи;
		КонецЦикла;
		
	КонецЦикла;
	
	НастроитьОтображениеПредупрежденийПриРедактировании();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеЭтапа(КлючСвязи, Отказ, ОписаниеОшибки)
	
	ПланированиеПроизводства.УдалитьЭтапПроизводства(Объект, КлючСвязи, Отказ, ОписаниеОшибки, БракПоМаршрутнымЛистам);
	
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Объект.ЕстьСоответствиеСтандартнойСпецификации = Ложь;
		НастроитьОтображениеПредупрежденийПриРедактировании();
	КонецЕсли;
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(Объект.Этапы);
	
	ЗаполнитьПараметрыПроизводственногоПроцессаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеОХодеВыполненияЭтапов()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Распоряжение", Объект.Ссылка);
	Запрос.УстановитьПараметр("КлючСвязиПродукция", Объект.КлючСвязи);
	Запрос.УстановитьПараметр("КодСтрокиПродукция", Объект.КодСтроки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоЭтапыГрафик.КодСтроки      КАК КодСтроки,
	|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы
	|ПОМЕСТИТЬ ВТГрафик
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка = &Распоряжение
	|	И ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = &КлючСвязиПродукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЭтапыПроизводства.КодСтрокиЭтапыГрафик     КАК КодСтроки,
	|	(ТЭтапыПроизводства.КВыполнениюОборот
	|		+ ТЭтапыПроизводства.ВыполненоОборот
	|		+ ТЭтапыПроизводства.БракОборот)        КАК ВыполненоЗапланировано
	|ПОМЕСТИТЬ ВТЭтапыПроизводства
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(,,,
	|			Распоряжение = &Распоряжение
	|				И КодСтрокиПродукция = &КодСтрокиПродукция) КАК ТЭтапыПроизводства
	|ГДЕ
	|	(ТЭтапыПроизводства.КВыполнениюОборот
	|		+ ТЭтапыПроизводства.ВыполненоОборот
	|		+ ТЭтапыПроизводства.БракОборот) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТГрафик.КлючСвязиЭтапы                           КАК КлючСвязи,
	|	СУММА(ТЭтапыПроизводства.ВыполненоЗапланировано) КАК ВыполненоЗапланировано
	|ИЗ
	|	ВТГрафик КАК ТГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыПроизводства КАК ТЭтапыПроизводства
	|		ПО ТГрафик.КодСтроки = ТЭтапыПроизводства.КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТГрафик.КлючСвязиЭтапы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выполняется = Истина;
		
		ОтборКлючСвязи = Новый Структура("КлючСвязи");
		ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтборКлючСвязи.КлючСвязи = Выборка.КлючСвязи;
			
			НайденныеСтроки = Объект.Этапы.НайтиСтроки(ОтборКлючСвязи);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтапСпецификации = НайденныеСтроки[0];
			
			ЭтапСпецификации.ВыполненоЗапланировано = Выборка.ВыполненоЗапланировано;
			ЭтапСпецификации.ЭтапВыполнен           = (ЭтапСпецификации.Количество = Выборка.ВыполненоЗапланировано);
			
			ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = Выборка.КлючСвязи;

			// установка отметки выполненных этапов.
			Если ЭтапСпецификации.ЭтапВыполнен Тогда
				
				Для каждого Строка из Объект.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы) Цикл
					Строка.ЭтапВыполнен = Истина;
				КонецЦикла;
				
				Для каждого Строка из Объект.ВозвратныеОтходы.НайтиСтроки(ОтборКлючСвязиЭтапы) Цикл
					Строка.ЭтапВыполнен = Истина;
				КонецЦикла;
				
				Для каждого Строка из Объект.МатериалыИУслуги.НайтиСтроки(ОтборКлючСвязиЭтапы) Цикл
					Строка.ЭтапВыполнен = Истина;
				КонецЦикла;
				
				Для каждого Строка из Объект.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы) Цикл
					Строка.ЭтапВыполнен = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеВнутреннихПолуфабрикатов

&НаКлиенте
Процедура ОбработатьВыборЭтапаПолуфабрикатаНаКлиенте(ТекущиеДанные, ВыбранноеЗначение)
	
	ЗначениеВыбора = ВыбранноеЗначение.ЗначениеВыбора;
	
	Если ТекущиеДанные.КлючСвязиЭтапВыпуска = ЗначениеВыбора.КлючСвязиЭтапы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КлючСвязиЭтапВыпуска           = ЗначениеВыбора.КлючСвязиЭтапы;
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ЗначениеВыбора.Этап;
	
	ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаКлиенте(ТекущиеДанные);
	
	СтруктураПотребности = ПолучитьСтруктуруПотребностиВоВнутреннихПолуфабрикатах(ТекущиеДанные);
	
	ОбработатьВыборЭтапаПолуфабрикатаНаСервере(СтруктураПотребности);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборСпецификацииПолуфабрикатаНаКлиенте(Знач ТекущиеДанные, Знач ВыбранноеЗначение)
	
	ТекущиеДанные.ИсточникПолученияПолуфабриката = ВыбранноеЗначение;
	
	ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаКлиенте(ТекущиеДанные);
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаКлиенте(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПотребностьВоВнутреннихПолуфабрикатах(ТекущиеДанные)
	
	СтруктураПотребности = ПолучитьСтруктуруПотребностиВоВнутреннихПолуфабрикатах(ТекущиеДанные);
	
	ОтменитьПотребностьВоВнутреннихПолуфабрикатахНаСервере(СтруктураПотребности);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборЭтапаПолуфабрикатаНаСервере(СтруктураПотребности)
	
	ОтменитьПотребностьВоВнутреннихПолуфабрикатахНаСервере(СтруктураПотребности);
	ИзменитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, Изменение = Истина)
	
	Если Изменение Тогда
		
		ПромежуточныйВыпуск = 0;
		
		НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючСвязиМатериалыИУслуги", СтруктураПотребности.КлючСвязи));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПромежуточныйВыпуск = ПромежуточныйВыпуск + НайденнаяСтрока.Количество;
		КонецЦикла;
		
		КоличествоПотребность = СтруктураПотребности.Количество - ПромежуточныйВыпуск;
		
	Иначе
		
		КоличествоПотребность = СтруктураПотребности.КоличествоУпаковок;
		
	КонецЕсли;
	
	Если КоличествоПотребность > 0 Тогда
		
		УвеличитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, КоличествоПотребность);
		
	ИначеЕсли КоличествоПотребность < 0 Тогда
	
		УменьшитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, КоличествоПотребность);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПотребностьВоВнутреннихПолуфабрикатахНаСервере(СтруктураПотребности)
	
	УменьшитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности);
	
КонецПроцедуры

&НаСервере
Процедура УменьшитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, Знач КоличествоПотребность = Неопределено)
	
	Перем КэшированныеЗначения;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтруктураПотребности.КлючСвязиЭтапВыпуска);
	
	ЭтапВыпуска = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	Если ЭтапВыпуска.ВГраница() = -1
		ИЛИ ЭтапВыпуска[0].ЭтапВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	УменьшитьПотребность = (КоличествоПотребность <> Неопределено);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиМатериалыИУслуги", СтруктураПотребности.КлючСвязи);
	
	ПромежуточныйВыпуски = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	Если ПромежуточныйВыпуски.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНовыхСтрок      = Новый Массив;
	МассивСтрокКУдалению  = Новый Массив;
	МассивСтрокКПересчету = Новый Массив;
	
	СтруктураПоиска = Новый Структура("
		|Номенклатура,
		|Характеристика,
		|КлючСвязиЭтапы");
		
	СтруктураПоиска.Вставить("Склад", Объект.Склад);
	
	Для каждого ПромежуточныйВыпуск из ПромежуточныйВыпуски Цикл
		
		Если УменьшитьПотребность Тогда
			
			Если КоличествоПотребность = 0 Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоНеТребуется = Мин(-КоличествоПотребность, ПромежуточныйВыпуск.Количество);
			
		Иначе
			
			КоличествоНеТребуется = ПромежуточныйВыпуск.Количество;
			
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПромежуточныйВыпуск,, "Склад");
		
		ПобочныеВыпуски = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		
		Если КоличествоНеТребуется < ПромежуточныйВыпуск.Количество Тогда
			
			ПромежуточныйВыпуск.Количество = ПромежуточныйВыпуск.Количество - КоличествоНеТребуется;
			
			МассивСтрокКПересчету.Добавить(ПромежуточныйВыпуск);
			
			Если ПобочныеВыпуски.ВГраница() <> -1 Тогда
				
				ПобочныйВыпуск = ПобочныеВыпуски[0];
				ПобочныйВыпуск.Количество = ПобочныйВыпуск.Количество + КоличествоНеТребуется;
				
				МассивСтрокКПересчету.Добавить(ПобочныйВыпуск);
				
			Иначе
				
				НоваяСтрока = Объект.ВозвратныеОтходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПромежуточныйВыпуск,
					"Номенклатура,
					|Характеристика,
					|Упаковка,
					|Этап,
					|НаименованиеЭтапа,
					|НаименованиеПолуфабриката,
					|КлючСвязиПродукция,
					|КлючСвязиЭтапы,
					|КлючСвязиПолуфабрикат,
					|СтатьяКалькуляции,
					|ОписаниеИзделия");
				
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
				
				НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				НоваяСтрока.Склад              = Объект.Склад;
				НоваяСтрока.Подразделение      = Справочники.СтруктураПредприятия.ПустаяСсылка();
				НоваяСтрока.Получатель         = Объект.Склад;
				
				НоваяСтрока.Количество         = КоличествоНеТребуется;
				
				МассивНовыхСтрок.Добавить(НоваяСтрока);
				
			КонецЕсли;
			
		Иначе
			
			Если ПобочныеВыпуски.ВГраница() <> -1 Тогда
				
				ПобочныйВыпуск = ПобочныеВыпуски[0];
				ПобочныйВыпуск.Количество = ПобочныйВыпуск.Количество + КоличествоНеТребуется;
				
				МассивСтрокКУдалению.Добавить(ПромежуточныйВыпуск);
				МассивСтрокКПересчету.Добавить(ПобочныйВыпуск);
				
			Иначе
				
				ПромежуточныйВыпуск.ПроизводитсяВПроцессе = Ложь;
				ПромежуточныйВыпуск.КлючСвязиМатериалыИУслуги = ПолучитьПустойУникальныйИдентификатор();
				
				ПромежуточныйВыпуск.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				ПромежуточныйВыпуск.Склад              = Объект.Склад;
				ПромежуточныйВыпуск.Подразделение      = Справочники.СтруктураПредприятия.ПустаяСсылка();
				ПромежуточныйВыпуск.Получатель         = Объект.Склад;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УменьшитьПотребность Тогда
			
			КоличествоПотребность = КоличествоПотребность + КоличествоНеТребуется;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрокКУдалению Цикл
		
		Объект.ВозвратныеОтходы.Удалить(Строка);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для каждого Строка Из МассивСтрокКПересчету Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", 
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Для каждого Строка Из МассивНовыхСтрок Цикл
		
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(
			Строка, Истина, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная"));
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ИзменениеСоставаТЧВыходныеИзделияИВозвратныеОтходыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УвеличитьПотребностьВоВнутреннихПолуфабрикатах(СтруктураПотребности, Знач КоличествоПотребность)
	
	Перем КэшированныеЗначения;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтруктураПотребности.КлючСвязиЭтапВыпуска);
	
	ЭтапВыпуска = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	Если ЭтапВыпуска.ВГраница() = -1
		ИЛИ ЭтапВыпуска[0].ЭтапВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	МассивНовыхСтрок      = Новый Массив;
	МассивСтрокКУдалению  = Новый Массив;
	МассивСтрокКПересчету = Новый Массив;
	
	ПромежуточныйВыпуск = Неопределено;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиМатериалыИУслуги", СтруктураПотребности.КлючСвязи);
	
	НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПромежуточныйВыпуск = НайденнаяСтрока;
		Прервать;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",       СтруктураПотребности.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика",     СтруктураПотребности.Характеристика);
	СтруктураОтбора.Вставить("НаправлениеВыпуска", Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад);
	
	СтруктураОтбора.Вставить("КлючСвязиЭтапы",     СтруктураПотребности.КлючСвязиЭтапВыпуска);
	
	НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	Для каждого ПобочныйВыпуск Из НайденныеСтроки Цикл
		
		Если КоличествоПотребность = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ПобочныйВыпуск.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток      = Макс(ПобочныйВыпуск.Количество - КоличествоПотребность, 0);
		КоличествоИспользовано = ПобочныйВыпуск.Количество - КоличествоОстаток;
		
		Если КоличествоОстаток > 0 Тогда
			
			ПобочныйВыпуск.Количество = КоличествоОстаток;
			
			МассивСтрокКПересчету.Добавить(ПобочныйВыпуск);
			
		Иначе
			
			МассивСтрокКУдалению.Добавить(ПобочныйВыпуск);
			
		КонецЕсли;
		
		Если ПромежуточныйВыпуск <> Неопределено Тогда
			
			ПромежуточныйВыпуск.Количество = ПромежуточныйВыпуск.Количество + КоличествоИспользовано;
			
			МассивСтрокКПересчету.Добавить(ПромежуточныйВыпуск);
			
		Иначе
			
			НоваяСтрока = Объект.ВозвратныеОтходы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПобочныйВыпуск);
			
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			
			НоваяСтрока.ПроизводитсяВПроцессе = Истина;
			НоваяСтрока.КлючСвязиМатериалыИУслуги = СтруктураПотребности.КлючСвязи;
			
			НоваяСтрока.Склад              = Справочники.Склады.ПустаяСсылка();
			НоваяСтрока.Подразделение      = СтруктураПотребности.Подразделение;
			НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
			НоваяСтрока.Получатель         = СтруктураПотребности.Подразделение;
			
			НоваяСтрока.СтатьяКалькуляции  = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
			
			НоваяСтрока.Упаковка           = СтруктураПотребности.Упаковка;
			НоваяСтрока.Количество         = КоличествоИспользовано;
			
			ЗаполнитьНаправлениеВыпускаНаОснованииСтрокиМатериала(СтруктураПотребности, "КлючСвязиМатериалыИУслуги", Объект.ВозвратныеОтходы);
			
			МассивНовыхСтрок.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		КоличествоПотребность = КоличествоПотребность - КоличествоИспользовано;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрокКУдалению Цикл
		
		Объект.ВозвратныеОтходы.Удалить(Строка);
		
	КонецЦикла;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для каждого Строка Из МассивСтрокКПересчету Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", 
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Для каждого Строка Из МассивНовыхСтрок Цикл
		
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(
			Строка, Истина, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная"));
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ИзменениеСоставаТЧВыходныеИзделияИВозвратныеОтходыНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПотребностиВоВнутреннихПолуфабрикатах(ТекущиеДанные)
	
	СтруктураПотребности = Новый Структура;
	
	СтруктураПотребности.Вставить("КлючСвязи",            ТекущиеДанные.КлючСвязи);
	СтруктураПотребности.Вставить("КлючСвязиЭтапВыпуска", ТекущиеДанные.КлючСвязиЭтапВыпуска);
	
	СтруктураПотребности.Вставить("Номенклатура",         ТекущиеДанные.Номенклатура);
	СтруктураПотребности.Вставить("Характеристика",       ТекущиеДанные.Характеристика);
	СтруктураПотребности.Вставить("Подразделение",        ТекущиеДанные.Подразделение);
	СтруктураПотребности.Вставить("Склад",                ТекущиеДанные.Склад);
	СтруктураПотребности.Вставить("ЗаказатьНаСклад",      ТекущиеДанные.ЗаказатьНаСклад);
	СтруктураПотребности.Вставить("Количество",           ТекущиеДанные.Количество);
	СтруктураПотребности.Вставить("Упаковка",             ТекущиеДанные.Упаковка);
	СтруктураПотребности.Вставить("КоличествоУпаковок",   ТекущиеДанные.КоличествоУпаковок);
	СтруктураПотребности.Вставить("ПроизводитсяВПроцессе",ТекущиеДанные.ПроизводитсяВПроцессе);
	
	Возврат СтруктураПотребности;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ОчиститьТабличныеЧасти()
	
	Объект.Этапы.Очистить();
	Объект.ВыходныеИзделия.Очистить();
	Объект.ВозвратныеОтходы.Очистить();
	Объект.МатериалыИУслуги.Очистить();
	Объект.Трудозатраты.Очистить();
	Объект.ВидыРабочихЦентров.Очистить();
	Объект.АльтернативныеВидыРабочихЦентров.Очистить();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСостояниеСпецификацииЗаказа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЕстьОшибкиЗаполнения = Форма.ЕстьОшибкиЗаполнения;
	ЕстьУточненияМатериалов = Форма.ЕстьУточненияМатериалов;
	
	// Установка страницы ошибок.
	Если ЕстьОшибкиЗаполнения или ЕстьУточненияМатериалов Тогда
		Элементы.ПанельОшибок.ТекущаяСтраница = Элементы.ПанельОшибок.ПодчиненныеЭлементы.СтраницаЕстьОшибки;
	Иначе
		Элементы.ПанельОшибок.ТекущаяСтраница = Элементы.ПанельОшибок.ПодчиненныеЭлементы.СтраницаНетОшибок;
	КонецЕсли;
	
	// Установка страницы соответствия.
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Элементы.ПанельСоответствияСтандартной.ТекущаяСтраница = Элементы.ПанельСоответствияСтандартной.ПодчиненныеЭлементы.СтраницаСостояниеИзмененийНет;
	Иначе
		Элементы.ПанельСоответствияСтандартной.ТекущаяСтраница = Элементы.ПанельСоответствияСтандартной.ПодчиненныеЭлементы.СтраницаСостояниеИзмененияЕсть;
	КонецЕсли;
	
	// Формирование надписи.
	
	Если ЕстьУточненияМатериалов и ЕстьОшибкиЗаполнения Тогда
		Форма.ТекстИнформационнойНадписи = НСтр("ru = 'Требуется уточнить материалы, обнаружены ошибки заполнения.'");
	ИначеЕсли ЕстьУточненияМатериалов Тогда
		Форма.ТекстИнформационнойНадписи = НСтр("ru = 'Требуется уточнить материалы.'");
	ИначеЕсли ЕстьОшибкиЗаполнения Тогда
		Форма.ТекстИнформационнойНадписи = НСтр("ru = 'Обнаружены ошибки заполнения.'");
	КонецЕсли;
	
	Форма.ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	Форма.ОбновитьСостояниеСпецификацииЗаказа = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПустойУникальныйИдентификатор()
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции

&НаСервере
Процедура НастроитьОтображениеПредупрежденийПриРедактировании()
	
	ТекстПредупреждения = НСтр("ru = 'Спецификация изменена. Изменение приведет к возврату стандартной спецификации'");
	
	Элементы.КоличествоУпаковок.ПредупреждениеПриРедактировании = ТекстПредупреждения;
	Элементы.Упаковка.ПредупреждениеПриРедактировании = ТекстПредупреждения;
	
	Если Объект.ЕстьСоответствиеСтандартнойСпецификации Тогда
		Элементы.КоличествоУпаковок.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.Упаковка.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.Спецификация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
	Иначе
		Элементы.КоличествоУпаковок.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Упаковка.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Спецификация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвязанныеЭтапы(МассивСтрокЦепочки, НомерЭтапаФорма, Испорчено)
	
	СтруктураОтбора = Новый Структура("НомерСледующегоЭтапаФорма", НомерЭтапаФорма);
	
	НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если МассивСтрокЦепочки.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		Иначе
			Строка.КоличествоЭтаповВосстановления = Испорчено * Строка.КоличествоЭтаповНаЕдиницуСледующегоЭтапа;
			МассивСтрокЦепочки.Добавить(Строка);
			
			ДобавитьСвязанныеЭтапы(МассивСтрокЦепочки, Строка.НомерЭтапаФорма, Испорчено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументНаСервере()
	
	ЗаказОбъект = Объект.Ссылка.ПолучитьОбъект();

	ПланированиеПроизводства.УдалитьДанныеСпецификацииПоКлючу(ЗаказОбъект, Объект.КлючСвязи);
	
	// Запись изменений в реквизиты заказа.
	ЗаказОбъект.СтатусГрафикаПроизводства = СтатусГрафикаПроизводства;
	
	// Запись изменений в табличную часть Продукция.
	СтрокаПродукции = ЗаказОбъект.Продукция.Найти(Объект.КлючСвязи, "КлючСвязи");
	СтрокаПродукции.ГрафикРассчитан = Ложь;
	
	ЗаполнитьЗначенияСвойств(СтрокаПродукции, Объект, "Упаковка, КоличествоУпаковок, Количество, ДатаПотребности,
		|НачатьНеРанее, РазмещениеВыпуска, Склад, Назначение, ЕстьСоответствиеСтандартнойСпецификации");
	
	// Запись изменений в табличную часть Этапы.
	Для каждого Строка Из Объект.Этапы Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.Этапы.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВыходныеИзделия.
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВыходныеИзделия.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВозвратныеОтходы.
	Для каждого Строка Из Объект.ВозвратныеОтходы Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВозвратныеОтходы.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть МатериалыИУслуги.
	Для каждого Строка Из Объект.МатериалыИУслуги Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.МатериалыИУслуги.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть Трудозатраты.
	Для каждого Строка Из Объект.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВидыРабочихЦентров.
	Для каждого Строка Из Объект.ВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть АльтернативныеВидыРабочихЦентров.
	Для каждого Строка Из Объект.АльтернативныеВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.АльтернативныеВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ЭтапыВосстановленияБрака.
	Для каждого Строка Из Объект.ЭтапыВосстановленияБрака Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ЭтапыВосстановленияБрака.Добавить(), Строка);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(ЗаказОбъект, ПараметрыРедактированияМатериалов);
		
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВыходныеИзделия, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвратныеОтходы, СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИУслуги, СтруктураДействий);
	
	Для каждого Строка Из Объект.МатериалыИУслуги Цикл
		
		Если Строка.ПроизводитсяВПроцессе 
			И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации;
		ИначеЕсли Строка.ПроизводитсяВПроцессе 
			И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
			Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе;
		Иначе
			Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПустаяСсылка();
		КонецЕсли;
		
		ЗаполнитьКоличествоМатериалаНаЕдиницуИзделия(Строка, Объект.КоличествоУпаковок);
	
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
			
			Если ЗначениеЗаполнено(Строка.Склад) Тогда
				Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				Строка.Получатель         = Строка.Склад;
			Иначе
				Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
				Строка.Получатель         = Строка.Подразделение;
			КонецЕсли; 
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			Или Строка.Подразделение <> Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
			
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
			Строка.Получатель         = Строка.Подразделение;
			
		Иначе
			
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			Строка.Получатель         = Строка.Склад;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВозвратныеОтходы Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
			
			Если ЗначениеЗаполнено(Строка.Склад) Тогда
				Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				Строка.Получатель         = Строка.Склад;
			Иначе
				Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
				Строка.Получатель         = Строка.Подразделение;
			КонецЕсли; 
			
		ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			Или Строка.Подразделение <> Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
			
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
			Строка.Получатель         = Строка.Подразделение;
			
		Иначе
			
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			Строка.Получатель         = Строка.Склад;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыЭтапов();
	
	СохраненноеЗначениеПодразделение = Объект.Подразделение;
	СохраненноеЗначениеСклад = Объект.Склад;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыЭтапов()
	
	ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
	ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Строка"));
	ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ПараметрыОтбора = Новый Структура("КлючСвязи");
	
	Для каждого СтрокаЭтап Из Объект.Этапы Цикл
		
		Если ЗначениеЗаполнено(СтрокаЭтап.КлючСвязиПолуфабрикат) Тогда
			
			ПараметрыОтбора.КлючСвязи = СтрокаЭтап.КлючСвязиПолуфабрикат;
			
			Для каждого СтрокаМатериал Из Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
				
				НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
				НоваяСтрока.КлючСвязи = Строка(СтрокаЭтап.КлючСвязи);
				НоваяСтрока.Номенклатура = СтрокаМатериал.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаМатериал.Характеристика;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТПолуфабрикатов.КлючСвязи КАК КлючСвязи,
	|	ТПолуфабрикатов.Номенклатура КАК Номенклатура,
	|	ТПолуфабрикатов.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТПолуфабрикатов
	|ИЗ
	|	&ТаблицаПолуфабрикатов КАК ТПолуфабрикатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТПолуфабрикатов.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ТПолуфабрикатов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ""-""
	|		ИНАЧЕ ТПолуфабрикатов.Номенклатура.Наименование
	|	КОНЕЦ КАК Номенклатура,
	|	ТПолуфабрикатов.Характеристика.Наименование КАК Характеристика
	|ИЗ
	|	ВТПолуфабрикатов КАК ТПолуфабрикатов";
	
	Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", ТаблицаПолуфабрикатов);
	
	ДанныеПолуфабрикатов = Запрос.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура("КлючСвязи", "");
	
	СоответствиеДанныеЭтапов = Новый Соответствие;
	СоответствиеВыполнениеЭтаповНаСтороне = Новый Соответствие;
	
	ЭтапыВосстановленияБрака = Новый Массив;
	
	// Этапы.
	Для каждого Строка Из Объект.Этапы Цикл
		
		Строка.НаименованиеПолуфабриката = "";
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиПолуфабрикат) Тогда
			
			ПараметрыОтбора.КлючСвязи = Строка(Строка.КлючСвязи);
			
			Для каждого СтрокаМатериал Из ДанныеПолуфабрикатов.НайтиСтроки(ПараметрыОтбора) Цикл
				
				Строка.НаименованиеПолуфабриката = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
																						СтрокаМатериал.Номенклатура, 
																						СтрокаМатериал.Характеристика);
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеЭтапа = Новый Структура;
		ДанныеЭтапа.Вставить("НаименованиеЭтапа", Строка.НаименованиеЭтапа);
		ДанныеЭтапа.Вставить("НаименованиеПолуфабриката", Строка.НаименованиеПолуфабриката); 
			
		СоответствиеДанныеЭтапов.Вставить(Строка.КлючСвязи, ДанныеЭтапа);
		СоответствиеВыполнениеЭтаповНаСтороне.Вставить(Строка.КлючСвязи, Строка.ПроизводствоНаСтороне);
		
		Если Строка.ЭтапВосстановленияБрака Тогда
			ЭтапыВосстановленияБрака.Добавить(Строка.КлючСвязи);
		КонецЕсли;
		
	КонецЦикла;
	
	// Выходные изделия.
	Для каждого Строка из Объект.ВыходныеИзделия Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, СоответствиеДанныеЭтапов[Строка.КлючСвязиЭтапы]);
		
		Если ЭтапыВосстановленияБрака.Найти(Строка.КлючСвязиЭтапы) <> Неопределено Тогда
			Строка.ЭтапВосстановленияБрака = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвратные отходы.
	Для каждого Строка из Объект.ВозвратныеОтходы Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, СоответствиеДанныеЭтапов[Строка.КлючСвязиЭтапы]);
		
		Если ЭтапыВосстановленияБрака.Найти(Строка.КлючСвязиЭтапы) <> Неопределено Тогда
			Строка.ЭтапВосстановленияБрака = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Материалы и услуги.
	Для каждого Строка из Объект.МатериалыИУслуги Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, СоответствиеДанныеЭтапов[Строка.КлючСвязиЭтапы]);
		
		Строка.ПроизводствоНаСтороне = СоответствиеВыполнениеЭтаповНаСтороне[Строка.КлючСвязиЭтапы];
		Если ЭтапыВосстановленияБрака.Найти(Строка.КлючСвязиЭтапы) <> Неопределено Тогда
			Строка.ЭтапВосстановленияБрака = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	// Трудозатраты.
	Для каждого Строка из Объект.Трудозатраты Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, СоответствиеДанныеЭтапов[Строка.КлючСвязиЭтапы]);
		
		Если ЭтапыВосстановленияБрака.Найти(Строка.КлючСвязиЭтапы) <> Неопределено Тогда
			Строка.ЭтапВосстановленияБрака = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(ПараметрыСпецификации)

	НоваяСпецификация = УправлениеДаннымиОбИзделиях.СоздатьСпецификациюНаОснованииСпецификацииЗаказа(
							Объект, 
							Объект, 
							ПараметрыСпецификации);
	
	Возврат НоваяСпецификация;
	
КонецФункции

&НаКлиенте
Процедура СоздатьСпецификациюНаОснованииСпецификацииЗаказаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСпецификация = СоздатьСпецификациюНаОснованииСпецификацииЗаказа(РезультатЗакрытия);
	ПоказатьЗначение(, НоваяСпецификация.Ссылка);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	Оповестить("Запись_ЭтапыПроизводства");
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(НоваяСпецификация.Ссылка), 
			НоваяСпецификация.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтменено(ТекущиеДанные)

	Если ТекущиеДанные.Отменено
		И ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		
		ТекущиеДанные.ЗаказатьНаСклад = Ложь;
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭтапаНаСервере(ИмяТЧ)

	Если ИмяТЧ = "МатериалыИУслуги" Тогда
		
		ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
		ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ЗаполнитьСпособПолученияМатериаловПоУмолчаниюНаСервере(ТекущиеДанные);
		ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаСервере(ТекущиеДанные);
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		
		ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущаяСтрока;
		ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ТекущаяСтрока);
	
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(
			ТекущиеДанные, Ложь, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается"));
		
		ЗаполнитьКоличествоИзделийСТипомСтоимостиРассчитывается();
		
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		
		ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущаяСтрока;
		ТекущиеДанные = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(
			ТекущиеДанные, Ложь, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная"));
			
	КонецЕсли;
	
	НастроитьОтображениеПредупрежденийПриРедактировании();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыУказанияСерий, ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеПродукцииНаКлиенте()
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("КлючСвязи",        Объект.КлючСвязи);
	ДанныеЗаполнения.Вставить("Номенклатура",     Объект.Номенклатура);
	ДанныеЗаполнения.Вставить("Характеристика",   Объект.Характеристика);
	ДанныеЗаполнения.Вставить("Подразделение",    Объект.Подразделение);
	ДанныеЗаполнения.Вставить("Склад",            Объект.Склад);
	ДанныеЗаполнения.Вставить("Назначение",       Объект.Назначение);
	ДанныеЗаполнения.Вставить("НазначениеЗаказа", Объект.НазначениеЗаказа);
	ДанныеЗаполнения.Вставить("ПоЗаказуДавальца", Объект.ПроизводствоПоЗаказу);
	
	ДанныеПродукции = ПланированиеПроизводстваКлиентСервер.СтруктураДанныхПродукции(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПродукцииНаСервере()
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("КлючСвязи",        Объект.КлючСвязи);
	ДанныеЗаполнения.Вставить("Номенклатура",     Объект.Номенклатура);
	ДанныеЗаполнения.Вставить("Характеристика",   Объект.Характеристика);
	ДанныеЗаполнения.Вставить("Подразделение",    Объект.Подразделение);
	ДанныеЗаполнения.Вставить("Склад",            Объект.Склад);
	ДанныеЗаполнения.Вставить("Назначение",       Объект.Назначение);
	ДанныеЗаполнения.Вставить("НазначениеЗаказа", Объект.НазначениеЗаказа);
	ДанныеЗаполнения.Вставить("ПоЗаказуДавальца", Объект.ПроизводствоПоЗаказу);
	
	ДанныеПродукции = ПланированиеПроизводства.СтруктураДанныхПродукции(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаКлиенте(ТекущиеДанные, НоваяСтрока, ТипСтоимости)

	Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущиеДанные, СохраненныеЗначения, ТипСтоимости, НоваяСтрока) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущиеДанные, ДанныеПродукции, ТипСтоимости);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделияНаСервере(ТекущиеДанные, НоваяСтрока, ТипСтоимости)

	Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущиеДанные, СохраненныеЗначения, ТипСтоимости, НоваяСтрока) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущиеДанные, ДанныеПродукции, ТипСтоимости);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеВТЧВыходныеИзделияНаКлиенте(ДанныеПродукцииСохраненныеЗначения)
	
	РежимОбновления = "";
	
	Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВТЧВыходныеИзделия(
													ДанныеПродукции,
													ДанныеПродукцииСохраненныеЗначения,
													РежимОбновления) Тогда
		
		ЗаполнитьНазначениеВТЧВыходныеИзделияНаСервере(ДанныеПродукцииСохраненныеЗначения, Истина, РежимОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеВТЧВыходныеИзделияНаСервере(ДанныеПродукцииСохраненныеЗначения, Обновить = Ложь, РежимОбновления = "")
	
	Если Обновить ИЛИ ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВТЧВыходныеИзделия(
													ДанныеПродукции,
													ДанныеПродукцииСохраненныеЗначения,
													РежимОбновления) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВТЧВыходныеИзделия(Объект, ДанныеПродукции, РежимОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаКлиенте(ТекущиеДанные, НоваяСтрока = Ложь)
	
	Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекущиеДанные, СохраненныеЗначения, НоваяСтрока) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекущиеДанные, ДанныеПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслугиНаСервере(ТекущиеДанные, НоваяСтрока = Ложь)
	
	Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекущиеДанные, СохраненныеЗначения, НоваяСтрока) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекущиеДанные, ДанныеПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеВТЧМатериалыИУслугиНаСервере(ДанныеПродукцииСохраненныеЗначения, Обновить = Ложь)
	
	Если Обновить ИЛИ ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВТЧМатериалыИУслуги(
													ДанныеПродукции,
													ДанныеПродукцииСохраненныеЗначения) Тогда
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВТЧМатериалыИУслуги(Объект, ДанныеПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаправлениеВыпускаНаОснованииСтрокиМатериала(ТекущиеДанные, ИмяПоляКлючСвязи, ТабличнаяЧасть)

	Если НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(ИмяПоляКлючСвязи, ТекущиеДанные.КлючСвязи);
 	СписокСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаИзделие Из СписокСтрок Цикл
		Если СтрокаИзделие.Номенклатура <> ТекущиеДанные.Номенклатура
			ИЛИ СтрокаИзделие.Характеристика <> ТекущиеДанные.Характеристика Тогда
			Продолжить; // Выходное изделие не относится к материалу (в спецификации несколько выходных изделий)
		КонецЕсли;
		
		Если ТекущиеДанные.ЗаказатьНаСклад Тогда
			СтрокаИзделие.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			СтрокаИзделие.Получатель = ТекущиеДанные.Склад;
			СтрокаИзделие.Склад = ТекущиеДанные.Склад;
			СтрокаИзделие.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		Иначе
			СтрокаИзделие.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
			СтрокаИзделие.Получатель = ТекущиеДанные.Подразделение;
			СтрокаИзделие.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			СтрокаИзделие.Подразделение = ТекущиеДанные.Подразделение;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладМатериалаНаОснованииСтрокиИзделия(ТекущиеДанные, КлючСвязи)

	Если НЕ ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
 	СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаМатериал Из СписокСтрок Цикл
		
		Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
			НовыйСклад = ТекущиеДанные.Получатель;
		Иначе
			НовыйСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			ТекущиеДанные.Подразделение = СтрокаМатериал.Подразделение;
			ТекущиеДанные.Получатель = ТекущиеДанные.Подразделение;
		КонецЕсли; 
		
		Если СтрокаМатериал.Склад = НовыйСклад Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатериал.Номенклатура = ТекущиеДанные.Номенклатура
			И СтрокаМатериал.Характеристика = ТекущиеДанные.Характеристика Тогда
			
			СтрокаМатериал.Склад = НовыйСклад;
			СтрокаМатериал.ЗаказатьНаСклад = ЗначениеЗаполнено(СтрокаМатериал.Склад);
			Если СтрокаМатериал.ЗаказатьНаСклад Тогда
				СтрокаМатериал.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
			Иначе
				СтрокаМатериал.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			КонецЕсли;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаМатериал.Склад, ПараметрыУказанияСерий));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаМатериал, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
