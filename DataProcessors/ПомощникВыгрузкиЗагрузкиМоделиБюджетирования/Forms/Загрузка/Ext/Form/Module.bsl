&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	//++ НЕ УТКА
	ИспользоватьБюджетныйПроцесс = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс");
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ПереходыПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);

	Элементы.СтраницаЭтапыПодготовкиБюджетов.Видимость = ИспользоватьБюджетныйПроцесс;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаМодели) Тогда
		УдалитьВременныеФайлыНаСервере(Объект.ИмяФайлаМодели);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаМоделиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыАналитикПриАктивизацииСтроки(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаЗначенийАналитикАналитикаБДПриИзменении(Элемент)
	
	ВидыАналитикРассчитать(Элементы.ЗаменаЗначенийАналитик.ТекущиеДанные.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеАналитикиПриИзменении(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодельПриИзменении(Элемент)
	
	ПризнакОбновитьМодельПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаМодели) Тогда
		УдалитьВременныеФайлыНаСервере(Объект.ИмяФайлаМодели);
		Объект.ИмяФайлаМодели = "";
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ЗавершитьФоновоеЗадание(ИдентификаторЗадания);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Истина;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Ложь;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

&НаКлиенте
Функция ПараметрыПерехода()
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("ПорядковыйНомерПерехода", "");
	ПараметрыПерехода.Вставить("ИмяОсновнойСтраницы", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыНавигации", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыДекорации", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриОткрытии", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПослеОткрытия", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаКлиенте
Процедура ПереходыПоСценарию()
	
	Переходы.Очистить();
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 1;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНачало";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаПриветствие_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаПриветствие_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 2;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаФильтры";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаФильтры_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаФильтры_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 3;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗаменаЗначений";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗаменаЗначений_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаЗаменаЗначений_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 4;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаОжидания";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОжидание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаОжидания_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПослеОткрытия = "СтраницаОжидания_ПослеОткрытия";
 
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 5;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОкончание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗавершение_ПриОткрытии";
	ДобавитьПереход(ПараметрыПерехода);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереход(ПараметрыПерехода)
	
	НоваяСтрока = Переходы.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПараметрыПерехода.ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ПараметрыПерехода.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ПараметрыПерехода.ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ПараметрыПерехода.ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ПараметрыПерехода.ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ПараметрыПерехода.ИмяОбработчикаПриОткрытии;
	НоваяСтрока.ИмяОбработчикаПослеОткрытия    = ПараметрыПерехода.ИмяОбработчикаПослеОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Выполнить(ИмяПроцедуры);
						
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Выполнить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Выполнить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработчикПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПослеОткрытия()
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];

	// обработчик ПослеОткрытия
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия);
		
		Выполнить(ИмяПроцедуры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	Заголовок = НСтр("ru = 'Загрузка модели бюджетирования.'");
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаСостояние.Видимость = Истина;
	Элементы.ВидыБюджетов.Видимость = Ложь;
		
	Если ПустаяСтрока(ИмяФайлаАрхива) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан путь к файлу с данными'"), , "ИмяФайлаАрхива", "ИмяФайлаАрхива", Отказ);
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СтраницаПриветствие_ПриПереходеДалее_ИнициализацияФайла",
		ЭтотОбъект);
	
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайлаАрхива);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаФильтры_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Заголовок = НСтр("ru = 'Выбор загружаемых видов бюджетов и этапов подготовки бюджетов.'");
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаФильтры_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	ЗаполнитьЗагружаемыеНппПоДаннымXML();
	ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML();
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗаменаЗначений_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
		
	ОтображатьВсеАналитики = Истина;
	Заголовок = НСтр("ru = 'Определение значений аналитик.'");	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗаменаЗначений_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
		
	Заголовок = НСтр("ru = 'Загрузка модели бюджетирования.'");
			
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПриветствие_ПриПереходеДалее_ИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СтраницаПриветствие_ПриПереходеДалее_ПроверкаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПриветствие_ПриПереходеДалее_ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'По указанному пути файл с данными не найден'"), , "ИмяФайлаАрхива", "ИмяФайлаАрхива");
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПомещениеФайлаНаСерверЗавершение", ЭтаФорма);
	НачатьПомещениеФайла(Обработчик, АдресВременногоХранилищаФайлаОбмена, ИмяФайлаАрхива, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьСтатусЗагрузки.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
			НСтр("ru = 'Загрузка успешно завершена'"),
			НСтр("ru = 'Загрузка выполненна с ошибками'"));
	
	Элементы.НадписьВариантовПродолжения.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
		НСтр("ru = 'Нажмите кнопку ""Готово"" для выхода из помощника.'"),
		НСтр("ru = 'Для того чтобы попробовать загрузить еще раз, нажмите ""Назад"", для выхода из помощника, нажимите ""Готово""'"));
		
	ЗаполнитьИтоговуюИнформацию();
	
	Заголовок = НСтр("ru = 'Загрузка модели бюджетирования.'");
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Заголовок = НСтр("ru = 'Загрузка модели бюджетирования.'");	
		
	Если Не ЭтоПереходДалее Тогда		
		ПропуститьСтраницу = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПослеОткрытия()
	
	ВыполнитьЗагрузкуМодели();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыполнитьЗагрузкуМодели() Экспорт
	
	Результат = ЗагрузитьНаСервере();
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		ЗагрузкаВыполнена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаНаСерверЗавершение(Результат, Адрес, ВыбранноеИмяФайла, Параметры) Экспорт
	
	АдресВременногоХранилищаФайлаОбмена = Адрес;
	
	ТекстОшибки = "";
	ИмяФайлаМоделиXML = РазархивироватьФайлНаСервере(АдресВременногоХранилищаФайлаОбмена, ТекстОшибки);
	Если ИмяФайлаМоделиXML = Неопределено Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	Объект.ИмяФайлаМодели = ИмяФайлаМоделиXML;
	
	ЗаполнитьФильтрыПоДаннымXML();
	ПризнакОбновитьМодельПриИзменении();
	РаскрытьВерхнийУровеньДереваФормы(ВидыБюджетов,"ВидыБюджетов");
	//++ НЕ УТКА
	РаскрытьВерхнийУровеньДереваФормы(ЭтапыПодготовкиБюджетов,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
	
	Элементы.ГруппаСостояние.Видимость = Ложь;
	Элементы.ВидыБюджетов.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДвоичныеДанные",Новый ДвоичныеДанные(Объект.ИмяФайлаМодели));
	ПараметрыЗадания.Вставить("ВыбранныеВидыБюджета", ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов,"Нпп"));
	ПараметрыЗадания.Вставить("ВыбранныеЭтапыПодготовкиБюджета", ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов,"Нпп"));
	ПараметрыЗадания.Вставить("ЗаменаЗначенийАналитик", ЗаменаЗначенийАналитик.Выгрузить(,"АналитикаФайлаУИН,АналитикаФайлаНпп,АналитикаБД"));
	ПараметрыЗадания.Вставить("ЗагружаемыеНпп",ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ЗагружаемыеНпп.ВыгрузитьЗначения()));
	ПараметрыЗадания.Вставить("ПараметрыОбновленияНпп",ПолучитьПараметрыОбновленияВсехНпп());
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ЗагрузитьМодельУчета(ПараметрыЗадания, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		НаименованиеЗадания = "";
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ЗагрузитьМодельУчета",
				ПараметрыЗадания,
				НаименованиеЗадания);
				
		АдресХранилища = Результат.АдресХранилища;
		
	КонецЕсли;
	                                         
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ЕстьОшибки = Не СтатусВыполненнойЗагрузки;
	
	Элементы.ИтоговаяИнформация.Видимость = ЕстьОшибки;
	Если ЕстьОшибки Тогда
		ИтоговаяИнформация =  НСтр("ru = 'Протокол:'") + Символы.ПС+ ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ЗавершитьФоновоеЗадание(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		ФоновоеЗадание.Отменить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ЗагрузкаВыполнена();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыполнена()
	
	РезультатВыгрузкиИзФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
	СтатусВыполненнойЗагрузки = РезультатВыгрузкиИзФайла.ЗагрузкаВыполнена;
	ПротоколОбмена.УстановитьТекст(РезультатВыгрузкиИзФайла.ПротоколОбмена);
	
	ЗаполнитьИтоговуюИнформацию();
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр             = НСтр("ru = 'Файл выгрузки (*.zip)|*.zip'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок 		   = НСтр("ru = 'Выберите путь к файлу выгрузки модели учета'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиПоказатьДиалогЗавершение",
		ЭтотОбъект);
		
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиПоказатьДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаАрхива = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФильтрыПоДаннымXML() Экспорт	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Объект.ИмяФайлаМодели); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Объекты = ДокументDOM.ПолучитьЭлементыПоИмени("Объект");
	
	ВидыБюджетовДерево = РеквизитФормыВЗначение("ВидыБюджетов");
	ВидыБюджетовДерево.Строки.Очистить();
	//++ НЕ УТКА
	ЭтапыПодготовкиБюджетовДерево = РеквизитФормыВЗначение("ЭтапыПодготовкиБюджетов");
	ЭтапыПодготовкиБюджетовДерево.Строки.Очистить();
	//-- НЕ УТКА
	ЭлементыФайла.Очистить();
	ТипыЗначенийАналитик = ТипыЗначенийАналитик();
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	Для Каждого Элемент Из Объекты Цикл
		
		ТипЭлементаСтрока = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;

		РезультатЧтения = ПрочитатьЭлементXML(Элемент);

		Если ТипЭлементаСтрока = "СправочникСсылка.МоделиБюджетирования" Тогда
			
			МодельБюджетированияНпп = Число(РезультатЧтения.Нпп);
			УИД = Новый УникальныйИдентификатор(РезультатЧтения.УИН);
			НайденнаяМодель = Справочники.МоделиБюджетирования.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденнаяМодель.Наименование) Тогда
				МодельБюджетированияСсылка = НайденнаяМодель;
				ИспользуемыеВидыЭтапыБюджета = ПолучитьИспользуемыеВидыЭтапыБюджета(МодельБюджетированияСсылка); 
				ОбновитьМодель = Истина;
			Иначе
				ОбновитьМодель = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаСтрока = "СправочникСсылка.ВидыБюджетов" Тогда
			
			Нов = ВидыБюджетовДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
			УИД = Новый УникальныйИдентификатор(Нов.УИН);
			НайденныйВидБюджета = Справочники.ВидыБюджетов.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденныйВидБюджета.Наименование) Тогда
				Нов.Ссылка = НайденныйВидБюджета;
				Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйВидБюджета) = Неопределено Тогда
					Нов.Используется = Истина;
				КонецЕсли;
			КонецЕсли;
			
		//++ НЕ УТКА
		ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ЭтапыПодготовкиБюджетов") Тогда

			Нов = ЭтапыПодготовкиБюджетовДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
			УИД = Новый УникальныйИдентификатор(Нов.УИН);
			НайденныйЭтапБюджета = Справочники.ЭтапыПодготовкиБюджетов.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденныйЭтапБюджета.Наименование) ИЛИ ЗначениеЗаполнено(НайденныйЭтапБюджета.Код) Тогда
				Нов.Ссылка = НайденныйЭтапБюджета;
				Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйЭтапБюджета) = Неопределено Тогда
					Нов.Используется = Истина;
				КонецЕсли;
			КонецЕсли;
		//-- НЕ УТКА
	
		КонецЕсли;
					
		НоваяСтрока = ЭлементыФайла.Добавить();
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип(ТипЭлементаСтрока));
		ОписаниеТиповАнилитики = Новый ОписаниеТипов(МассивТипов);
		НоваяСтрока.Тип = ОписаниеТиповАнилитики;
		НоваяСтрока.ТипСтрока = ТипЭлементаСтрока;
		Если РезультатЧтения.Свойство("Код") Тогда
			НоваяСтрока.Код = РезультатЧтения.Код;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Наименование") Тогда
			НоваяСтрока.Наименование = РезультатЧтения.Наименование;
		КонецЕсли;
		Если РезультатЧтения.Свойство("ИНН") Тогда
			НоваяСтрока.ИНН = РезультатЧтения.ИНН;
		КонецЕсли;
		Если РезультатЧтения.Свойство("КПП") Тогда
			НоваяСтрока.КПП = РезультатЧтения.КПП;
		КонецЕсли;
		Если РезультатЧтения.Свойство("ЭтоГруппа") И РезультатЧтения.ЭтоГруппа Тогда
			НоваяСтрока.ЭтоГруппа = Истина;
		КонецЕсли;
		Если РезультатЧтения.Свойство("УИН") Тогда
			НоваяСтрока.УИН = РезультатЧтения.УИН;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Нпп") Тогда
			НоваяСтрока.Нпп = РезультатЧтения.Нпп;
		КонецЕсли;
		
	КонецЦикла;
		
	ВосстановитьИерархиюДереваФильтра(ВидыБюджетовДерево);
	ЗначениеВРеквизитФормы(ВидыБюджетовДерево,"ВидыБюджетов");
	//++ НЕ УТКА
	ВосстановитьИерархиюДереваФильтра(ЭтапыПодготовкиБюджетовДерево);
	ЗначениеВРеквизитФормы(ЭтапыПодготовкиБюджетовДерево,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
				
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML() Экспорт
		
	ВидыАналитик.Очистить();
	ЗаменаЗначенийАналитик.Очистить();
	ТипыЗначенийАналитик = ТипыЗначенийАналитик();
	
	Для Каждого ЭлементФайла Из ЭлементыФайла Цикл
		Если ТипыЗначенийАналитик.Найти(Тип(ЭлементФайла.ТипСтрока)) = Неопределено 
				ИЛИ ЭлементФайла.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
			
		Если Не ЗагружаемыеНпп.НайтиПоЗначению(ЭлементФайла.Нпп) = Неопределено Тогда
			ДобавитьЗаменуЗначенийАналитик(ЭлементФайла);
		КонецЕсли;
	КонецЦикла;
		
	ВидыАналитикРассчитать();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗагружаемыеНппПоДаннымXML() Экспорт
	
	ЗагружаемыеНпп.Очистить();

	ВыбранныеВидыБюджета = ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов,"Нпп");
	Для Каждого Стр Из ВыбранныеВидыБюджета Цикл
		ЗагружаемыеНпп.Добавить(Стр);
	КонецЦикла;
	//++ НЕ УТКА
	ВыбранныеЭтапыПодготовкиБюджета = ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов,"Нпп");
	Для Каждого Стр Из ВыбранныеЭтапыПодготовкиБюджета Цикл
		ЗагружаемыеНпп.Добавить(Стр);
	КонецЦикла;
	//-- НЕ УТКА
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Объект.ИмяФайлаМодели); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Объекты = ДокументDOM.ПолучитьЭлементыПоИмени("Объект");
	
	Сч = 1;
	ВсегоЭлементов = 0;
	Пока ВсегоЭлементов <> ЗагружаемыеНпп.Количество() И Сч <= 100 Цикл
		
		ВсегоЭлементов = ЗагружаемыеНпп.Количество();
		Для Каждого Элемент Из Объекты Цикл
			
			ТипЭлементаСтрока = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;

			РезультатЧтения = ПрочитатьЭлементXML(Элемент,Истина);
			
			ДобавлятьДочерние = Ложь;
			Если (РезультатЧтения.Свойство("ВладелецНпп") И Не ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.ВладелецНпп) = Неопределено) 
			  		ИЛИ Не ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
				Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
					ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
				КонецЕсли;
				ДобавлятьДочерние = Истина;
			ИначеЕсли РезультатЧтения.ВладельцыНпп.Количество() > 0 Тогда
				Для Каждого Нпп Из РезультатЧтения.ВладельцыНпп Цикл
					Если Не ЗагружаемыеНпп.НайтиПоЗначению(Нпп) = Неопределено ИЛИ МодельБюджетированияНпп = Нпп Тогда
						Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
							ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
						КонецЕсли;
						ДобавлятьДочерние = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Не Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ВидыБюджетов") 
				//++ НЕ УТКА
				И Не Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ЭтапыПодготовкиБюджетов") 
				//-- НЕ УТКА
					И РезультатЧтения.Свойство("ВладелецНпп") И РезультатЧтения.ВладелецНпп = МодельБюджетированияНпп Тогда
				Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
					ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
				КонецЕсли;
				ДобавлятьДочерние = Истина;
			КонецЕсли;
			
			Если ДобавлятьДочерние Тогда
				Для Каждого Нпп Из РезультатЧтения.ДочерниеНпп Цикл
					Если ЗагружаемыеНпп.НайтиПоЗначению(Нпп) = Неопределено Тогда
						ЗагружаемыеНпп.Добавить(Нпп);
					КонецЕсли;
				КонецЦикла;
				Если РезультатЧтения.Свойство("РодительНпп") Тогда
					Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.РодительНпп) = Неопределено Тогда
						ЗагружаемыеНпп.Добавить(РезультатЧтения.РодительНпп);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
					
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИерархиюДереваФильтра(Дерево) 
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Дерево.Скопировать();
	Дерево.Строки.Очистить();

	Для Каждого СтрокаТЗ Из ТЗ.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.родительУИН) Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
		Иначе
			РодительСтроки = Дерево.Строки.Найти(СтрокаТЗ.РодительУИН,"УИН",Истина);
			Если Не РодительСтроки = Неопределено Тогда
				СтрокаДерева = РодительСтроки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			Иначе
				СтрокаДерева = Дерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьВерхнийУровеньДереваФормы(ДеревоФормы,ИмяЭлемента)
	
	ЭлементыДерева = ДеревоФормы.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы[ИмяЭлемента].Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЭлементXML(ЭлементXML,ЧитатьДочерниеНпп=Ложь)
				
		Результат = Новый Структура;
		Результат.Вставить("ДочерниеНпп",Новый Массив());
		Результат.Вставить("ВладельцыНпп",Новый Массив());
		
		ТипЭлементаСтрока = ЭлементXML.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;
		Нпп = ЭлементXML.Атрибуты.ПолучитьИменованныйЭлемент("Нпп").Значение;
		Результат.Вставить("Нпп",Число(Нпп));

		ТипыЗначенийАналитик = ТипыЗначенийАналитик();
	
		РеквизитыОбъекта = ЭлементXML.ДочерниеУзлы;

		Для каждого Реквизит Из РеквизитыОбъекта Цикл

			Если Реквизит.ИмяУзла = "Ссылка" Тогда
				
				АтрибутНпп = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
				Если Не АтрибутНпп = Неопределено Тогда
					Результат.Вставить("Нпп",Число(АтрибутНпп.ТекстовоеСодержимое));
				КонецЕсли;

				Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
					Если Узел.Атрибуты = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					АтрибутИмя = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
					Если АтрибутИмя = Неопределено Тогда
						Продолжить;
					КонецЕсли;                               
					Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
						Результат.Вставить("УИН",Узел.ТекстовоеСодержимое);
					ИначеЕсли АтрибутИмя.Значение = "Наименование" Тогда
						Результат.Вставить("Наименование",Узел.ТекстовоеСодержимое);
					ИначеЕсли АтрибутИмя.Значение = "Код" Тогда
						Результат.Вставить("Код",Узел.ТекстовоеСодержимое);
					ИначеЕсли АтрибутИмя.Значение = "ЭтоГруппа" Тогда
						ЭтоГруппа  = Узел.ТекстовоеСодержимое;
						Результат.Вставить("ЭтоГруппа",Булево(ЭтоГруппа));
						Результат.Вставить("ИндексКартинки",Не ЭтоГруппа);
					ИначеЕсли АтрибутИмя.Значение = "ИНН" Тогда
						Результат.Вставить("ИНН",Узел.ТекстовоеСодержимое);
					ИначеЕсли АтрибутИмя.Значение = "КПП" Тогда
						Результат.Вставить("КПП",Узел.ТекстовоеСодержимое);
					ИначеЕсли АтрибутИмя.Значение = "Родитель" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Ссылка" Тогда
								АтрибутНпп = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
								Если Не АтрибутНпп = Неопределено Тогда
									Результат.Вставить("РодительНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
								КонецЕсли;
								Для Каждого Узел2 Из Узел1.ДочерниеУзлы Цикл
									АтрибутИмя = Узел2.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
									Если АтрибутИмя = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
										Результат.Вставить("РодительУИН",Узел2.ТекстовоеСодержимое);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли АтрибутИмя.Значение = "Владелец" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Ссылка" Тогда
								АтрибутНпп = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
								Если Не АтрибутНпп = Неопределено Тогда
									Результат.Вставить("ВладелецНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Реквизит.ИмяУзла = "Свойство" Тогда
				
				АтрибутИмя = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
				Если АтрибутИмя = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если АтрибутИмя.Значение = "Родитель" Тогда
					
					Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
						Если Узел.ИмяУзла = "Ссылка" Тогда
							АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
							Если Не АтрибутНпп = Неопределено Тогда
								Результат.Вставить("РодительНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
							КонецЕсли;
							Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
								АтрибутИмя = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
								Если АтрибутИмя = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
									Результат.Вставить("РодительУИН",Узел1.ТекстовоеСодержимое);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;			
					КонецЦикла;		
				ИначеЕсли АтрибутИмя.Значение = "Наименование" Тогда
					
					Результат.Вставить("Наименование",Реквизит.ТекстовоеСодержимое);
					
				ИначеЕсли АтрибутИмя.Значение = "ИНН" Тогда	
					
					Результат.Вставить("ИНН",Реквизит.ТекстовоеСодержимое); 
					
				ИначеЕсли АтрибутИмя.Значение = "КПП" Тогда	
					
					Результат.Вставить("КПП",Реквизит.ТекстовоеСодержимое);	
					
				ИначеЕсли Не Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип") = Неопределено 
						И Тип(Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение) = Тип("ХранилищеЗначения") Тогда
		
					Если НЕ ЧитатьДочерниеНпп ИЛИ ЭлементыФайла.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					ЗначениеСтрока = Реквизит.ТекстовоеСодержимое;
					Если ЗначениеЗаполнено(ЗначениеСтрока) Тогда
						ДанныеХранилища = XMLЗначение(Тип("ХранилищеЗначения"), ЗначениеСтрока).Получить();
						Если ТипЗнч(ДанныеХранилища) = Тип("ТаблицаЗначений") Тогда
							Для Каждого Стр Из ДанныеХранилища Цикл
								Для Каждого Колонка Из ДанныеХранилища.Колонки Цикл
									ЗначениеКолонки = Стр[Колонка.Имя];
									ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеКолонки);
								КонецЦикла;
							КонецЦикла;
						ИначеЕсли ТипЗнч(ДанныеХранилища) =  Тип("НастройкиКомпоновкиДанных") Тогда
							Для Каждого Стр Из ДанныеХранилища.Отбор.Элементы Цикл
								Если ТипЗнч(Стр) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
									Продолжить;
								КонецЕсли;
								ДобавитьДочерниеНппПоЗначению(Результат,Стр.ПравоеЗначение);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				// Нестандартные названия реквизитов владельцев справочников
				ИначеЕсли (Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") И  АтрибутИмя.Значение = "СтатьяБюджетов")
					ИЛИ (Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") И  АтрибутИмя.Значение = "ПоказательБюджетов") 
						ИЛИ (ТипЭлементаСтрока = "СправочникСсылка.МоделиБюджетированияПрисоединенныеФайлы" И АтрибутИмя.Значение = "ВладелецФайла") Тогда
					Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
						Если Узел.ИмяУзла = "Ссылка" Тогда
							АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
							Если Не АтрибутНпп = Неопределено Тогда									
								Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("РегистрСведенийЗапись.СвязиПоказателейБюджетов") 
						И  (АтрибутИмя.Значение = "СвязанныйПоказательБюджетов" ИЛИ АтрибутИмя.Значение = "СвязанныйПоказательБюджетов") Тогда
					Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
						Если Узел.ИмяУзла = "Ссылка" Тогда
							АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
							Если Не АтрибутНпп = Неопределено Тогда									
								Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				Иначе
					Если Не ЧитатьДочерниеНпп Тогда 
						Продолжить;
					КонецЕсли;
					АтрибутТип = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
					Если Не АтрибутТип = Неопределено  
						И (ЭтоСсылочныйТип(Тип(АтрибутТип.Значение)) 
						  ИЛИ Не ТипыЗначенийАналитик.Найти(Тип(АтрибутТип.Значение)) = Неопределено) Тогда 
							Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
								Если Узел.ИмяУзла = "Ссылка" Тогда
									АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
									Если Не АтрибутНпп = Неопределено Тогда									
										Результат.ДочерниеНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Реквизит.ИмяУзла = "ТабличнаяЧасть" Тогда
				Для Каждого СтрокаТЧ Из Реквизит.ДочерниеУзлы Цикл
					Для Каждого КолонкаТЧ Из СтрокаТЧ.ДочерниеУзлы Цикл
						Если КолонкаТЧ.Атрибуты = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						АтрибутТип = КолонкаТЧ.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
						Если Не АтрибутТип = Неопределено 
							И (ЭтоСсылочныйТип(Тип(АтрибутТип.Значение))
							  ИЛИ Не ТипыЗначенийАналитик.Найти(Тип(АтрибутТип.Значение)) = Неопределено) Тогда 
								Для Каждого Свойство Из КолонкаТЧ.ДочерниеУзлы Цикл
									Если Свойство.ИмяУзла = "Ссылка" Тогда
										АтрибутНпп = Свойство.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
										Если Не АтрибутНпп = Неопределено Тогда									
											Результат.ДочерниеНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
						КонецЕсли;	
					КонецЦикла;
				КонецЦикла;
				// Для Шаблонов ввода нфп, владельцев выбираем из таб. части ПоказателиШаблона
				АтрибутИмя = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
				Если Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ШаблоныВводаНефинансовыхПоказателей") 
					И АтрибутИмя.Значение = "ПоказателиШаблона" Тогда
					Если Не СтрокаТЧ = Неопределено Тогда
						Для Каждого КолонкаТЧ Из СтрокаТЧ.ДочерниеУзлы Цикл
							АтрибутТип = КолонкаТЧ.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
							Если Не АтрибутТип = Неопределено 
								И Тип(АтрибутТип.Значение) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда 
									Для Каждого Свойство Из КолонкаТЧ.ДочерниеУзлы Цикл
										Если Свойство.ИмяУзла = "Ссылка" Тогда
											АтрибутНпп = Свойство.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
											Если Не АтрибутНпп = Неопределено Тогда									
												Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 

		Если Не Результат.Свойство("РодительУИН") Тогда
			Результат.Вставить("РодительУИН","");
		КонецЕсли;
						
		Возврат Результат;
		
КонецФункции
	
&НаСервере	
Процедура ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеКолонки)
	
	Если ТипЗнч(ЗначениеКолонки) = Тип("СписокЗначений") Тогда
		Для Каждого Эл Из ЗначениеКолонки Цикл
			Если ЭтоСсылочныйТип(ТипЗнч(Эл.Значение)) Тогда
				УИД = Эл.Значение.УникальныйИдентификатор();
				Если Не УИД = Неопределено Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("УИН",Строка(УИД));
					Строки = ЭлементыФайла.НайтиСтроки(ПараметрыОтбора);
					Если Строки.Количество() > 0 Тогда
						Результат.ДочерниеНпп.Добавить(Строки[0].Нпп);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеКолонки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ЗначениеКолонки Цикл
			Для Каждого Колонка Из ЗначениеКолонки.Колонки Цикл
				ЗначениеПодчиненнойКолонки = Стр[Колонка.Имя];
				ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеПодчиненнойКолонки);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Если ЗначениеКолонки <> Неопределено И ЭтоСсылочныйТип(ТипЗнч(ЗначениеКолонки)) Тогда 
			УИД = ЗначениеКолонки.УникальныйИдентификатор();
			Если Не УИД = Неопределено Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("УИН",Строка(УИД));
				Строки = ЭлементыФайла.НайтиСтроки(ПараметрыОтбора);
				Если Строки.Количество() > 0 Тогда
					Результат.ДочерниеНпп.Добавить(Строки[0].Нпп);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеЭлементыОтбора(ДеревоОтбора,ИмяКолонки)
	
	ВыбранныеЗначения = Новый Массив;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			ВыбранныеЗначения.Добавить(ЭлементыДерева[ИмяКолонки]);
			ПодчиненныеЗначения = ПолучитьВыбранныеЭлементыОтбора(ЭлементыДерева,ИмяКолонки);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ВыбранныеЗначения.Добавить(Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеЗначения;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаменуЗначенийАналитик(Аналитика)
			
	НоваяСтрока = ЗаменаЗначенийАналитик.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Аналитика);
	НоваяСтрока.АналитикаФайла = Аналитика.Наименование;
	НоваяСтрока.АналитикаФайлаУИН = Аналитика.УИН;
	НоваяСтрока.АналитикаФайлаНпп = Аналитика.Нпп;

	НоваяСтрока.АналитикаБД = НайтиАналитикуБД(Аналитика);
	Если Не ЗначениеЗаполнено(НоваяСтрока.АналитикаБД) Тогда
		НоваяСтрока.ТребуетВнимания = Истина;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Тип",Аналитика.Тип);
	ВидыАналитикСтроки = ВидыАналитик.НайтиСтроки(ПараметрыПоиска);
	Если ВидыАналитикСтроки.Количество() = 0 Тогда
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.Тип = Аналитика.Тип;
		НоваяСтрока.Представление = Строка(Аналитика.Тип);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыАналитикРассчитать(Тип=Неопределено)
		
	Для Каждого Стр Из ВидыАналитик Цикл
		Если Тип <> Неопределено И Стр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Тип",Стр.Тип);
		ЗаменаЗначенийСтроки = ЗаменаЗначенийАналитик.НайтиСтроки(ПараметрыПоиска);
		Стр.Всего = ЗаменаЗначенийСтроки.Количество();
		Сч = 0;
		Для Каждого Строка Из ЗаменаЗначенийСтроки Цикл
			Если Не ЗначениеЗаполнено(Строка.АналитикаБД) Тогда
				Строка.ТребуетВнимания = Истина;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		Стр.НеЗаполнено = Сч;
		Стр.ТребуетВнимания = Сч > 0;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция НайтиАналитикуБД(Аналитика)
		
	АналитикаБД = Неопределено;	
	ИмяОбъекта = Сред(Аналитика.ТипСтрока,СтрНайти(Аналитика.ТипСтрока, ".") + 1);
	ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(Тип(Аналитика.ТипСтрока));
	
	// 1. поиск по ссылке
	УИД = Новый УникальныйИдентификатор(Аналитика.УИН);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВидОбъекта + "."+ ИмяОбъекта);
	АналитикаБД = МенеджерОбъекта.ПолучитьСсылку(УИД);
	Если ЗначениеЗаполнено(Аналитика.Наименование) И Не ЗначениеЗаполнено(АналитикаБД.Наименование) Тогда
		АналитикаБД = Неопределено;
	ИначеЕсли  ЗначениеЗаполнено(Аналитика.Код) И Не ЗначениеЗаполнено(АналитикаБД.Код) Тогда
		АналитикаБД = Неопределено;
	КонецЕсли;
	
	// 2. поиск по коду + наименование
	Если Не ЗначениеЗаполнено(АналитикаБД) И ЗначениеЗаполнено(Аналитика.Код) И ЗначениеЗаполнено(Аналитика.Наименование) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Аналитики.Ссылка
		               |ИЗ
		               |	"+ВидОбъекта+"."+ИмяОбъекта+" КАК Аналитики
		               |ГДЕ
		               |	Аналитики.Код = &Код
		               |	И Аналитики.Наименование = &Наименование";
					   
		Запрос.УстановитьПараметр("Код",Аналитика.Код);
		Запрос.УстановитьПараметр("Наименование",Аналитика.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			АналитикаБД = Выборка.Ссылка;	
		КонецЕсли;
	КонецЕсли;
				   
	// 3. для контрагентов и организаций по инн + кпп
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Аналитики.Ссылка
	               |ИЗ
	               |	"+ВидОбъекта+"."+ИмяОбъекта+" КАК Аналитики
	               |ГДЕ
	               |	Аналитики.ИНН = &ИНН
	               |			И (&ИскатьТолькоПоИНН
	               |				ИЛИ Аналитики.КПП = &КПП)";
				   
	Если Не ЗначениеЗаполнено(АналитикаБД) И ЗначениеЗаполнено(Аналитика.ИНН) И ЗначениеЗаполнено(Аналитика.КПП)  Тогда
		Запрос.УстановитьПараметр("ИНН",Аналитика.ИНН);
		Запрос.УстановитьПараметр("КПП",Аналитика.КПП);
		Запрос.УстановитьПараметр("ИскатьТолькоПоИНН",Ложь);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			АналитикаБД = Выборка.Ссылка;
		ИначеЕсли Выборка.Количество() = 0 Тогда
			Запрос.УстановитьПараметр("ИскатьТолькоПоИНН",Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				АналитикаБД = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(АналитикаБД) И ЗначениеЗаполнено(Аналитика.ИНН) Тогда
		Запрос.УстановитьПараметр("ИНН",Аналитика.ИНН);
		Запрос.УстановитьПараметр("КПП",Аналитика.КПП);
		Запрос.УстановитьПараметр("ИскатьТолькоПоИНН",Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			АналитикаБД = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;

	// 4. поиск по наименованию
	Если Не ЗначениеЗаполнено(АналитикаБД) Тогда
		АналитикаБД = МенеджерОбъекта.НайтиПоНаименованию(Аналитика.Наименование,Истина);		
	КонецЕсли;
	
	Возврат АналитикаБД;

КонецФункции

&НаСервере
Функция ТипыЗначенийАналитик()
	
	ТипыЗначенийАналитик = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип.Типы();
	
	Возврат ТипыЗначенийАналитик;
	
КонецФункции

&НаКлиенте
Процедура УправлениеОтображениемСтраницаЗаменаЗначений()
	
	ВидыАналитикТекущиеДанные = Элементы.ВидыАналитик.ТекущиеДанные;
	
	Если  ОтображатьВсеАналитики Тогда
		Элементы.ВидыАналитик.ОтборСтрок = Неопределено;
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("Тип",
			?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	Иначе
		Элементы.ВидыАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания",Истина);
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания,Тип",
			Истина, ?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьПараметрыОбновленияНпп(ДеревоОтбора)
	
	ПараметрыОбновленияНпп = Новый Соответствие;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			Если ЗначениеЗаполнено(ЭлементыДерева.Ссылка) Тогда
				ПараметрыОбновленияНпп.Вставить(ЭлементыДерева.Нпп,ЭлементыДерева.Обновить);
			КонецЕсли;
			ПодчиненныеЗначения = ПолучитьПараметрыОбновленияНпп(ЭлементыДерева);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ПараметрыОбновленияНпп.Вставить(Значение.Ключ,Значение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОбновленияНпп;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыОбновленияВсехНпп()
	
	ПараметрыОбновленияНпп1 = ПолучитьПараметрыОбновленияНпп(ВидыБюджетов);
	ПараметрыОбновленияНпп2 = ПолучитьПараметрыОбновленияНпп(ЭтапыПодготовкиБюджетов);

	Для Каждого Значение Из ПараметрыОбновленияНпп2 Цикл
		ПараметрыОбновленияНпп1.Вставить(Значение.Ключ,Значение.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МодельБюджетированияСсылка) Тогда
		ПараметрыОбновленияНпп1.Вставить(МодельБюджетированияНпп,ОбновитьМодель);
	КонецЕсли;
	
	Возврат ПараметрыОбновленияНпп1;

КонецФункции

&НаКлиенте
Процедура ПризнакОбновитьМодельПриИзменении()
		
	Дерево = ВидыБюджетов;	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;

		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
	КонецЦикла;
	
	//++ НЕ УТКА
	Дерево = ЭтапыПодготовкиБюджетов;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);

	КонецЦикла;
	//-- НЕ УТКА
	
	Если Не ЗначениеЗаполнено(МодельБюджетированияСсылка) Тогда
		Элементы.ГруппаИнформацияПоМодели.Видимость = Ложь;
	КонецЕсли;
	Если Не ОбновитьМодель Тогда
		Элементы.ВидыБюджетовОбновить.Видимость = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Ложь;
	Иначе
		Элементы.ВидыБюджетовОбновить.Видимость = Истина;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Истина;
	КонецЕсли;
	
	//++ НЕ УТКА
	ЗапрещеноИзменятьЭтапыБюджетов = ОбновитьМодель И ЗапрещеноИзменятьЭтапыБюджетов(МодельБюджетированияСсылка);
	
	Если ЗапрещеноИзменятьЭтапыБюджетов Тогда
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Истина;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Ложь;
	Иначе
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Истина;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Истина;
	КонецЕсли;		
	//-- НЕ УТКА

КонецПроцедуры

&НаСервереБезКонтекста
Функция РазархивироватьФайлНаСервере(АдресХранилищаФайлаНаСервере, ТекстОшибки = "")
	
ФайлДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаФайлаНаСервере);	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла(".zip");
	
	Если ТипЗнч(ФайлДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ФайлДвоичныеДанные.Записать(ИмяФайлаАрхива);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = "";
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		Если ОбъектЧтение.Элементы.Количество() = 0 Тогда
			ОбъектЧтение.Закрыть();
			ТекстОшибки = НСтр("ru = 'Нет файлов в архиве.'");
			Попытка	
				УдалитьФайлы(ИмяФайлаАрхива);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС + 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка удаления временных файлов: %1'"), ИнформацияОбОшибке().Описание);
			КонецПопытки;
			Возврат Неопределено;
		КонецЕсли;
		
		КаталогРаспаковки = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
		СоздатьКаталог(КаталогРаспаковки);
		ЭлементПоиска = Неопределено;
		Если ОбъектЧтение.Элементы.Количество() = 1 Тогда
			ЭлементПоиска = ОбъектЧтение.Элементы[0];
			ИмяФайлаИзАрхива = ОбъектЧтение.Элементы[0].Имя;
		Иначе
			ИмяФайлаМоделиСтрока = НСтр("ru = 'ВыгрузкаМоделиКА.xml'");			
			//++ НЕ УТКА
			ИмяФайлаМоделиСтрока = НСтр("ru = 'ВыгрузкаМодели.xml'");
			//-- НЕ УТКА
			
			ЭлементПоиска = ОбъектЧтение.Элементы.Найти(ИмяФайлаМоделиСтрока);
			
			Если ЭлементПоиска = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден файл - %1, в архиве.'"), ИмяФайлаМоделиСтрока);
				Попытка
					УдалитьФайлы(КаталогРаспаковки);
					УдалитьФайлы(ИмяФайлаАрхива);
				Исключение
					ТекстОшибки = ТекстОшибки + Символы.ПС + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка удаления временных файлов: %1'"), ИнформацияОбОшибке().Описание);
				КонецПопытки;
				Возврат Неопределено;
			КонецЕсли;
			ИмяФайлаИзАрхива = ЭлементПоиска.Имя;		
		КонецЕсли;
		
		ОбъектЧтение.Извлечь(ЭлементПоиска, КаталогРаспаковки,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ОбъектЧтение.Закрыть();
		
		Возврат КаталогРаспаковки + ИмяФайлаИзАрхива;
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка распаковки архива: %1'"), Символы.ПС + ИнформацияОбОшибке().Описание);
		Попытка	
			УдалитьФайлы(ИмяФайлаАрхива);
			Если ЗначениеЗаполнено(КаталогРаспаковки) Тогда
				УдалитьФайлы(КаталогРаспаковки);
			КонецЕсли;
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка удаления временных файлов: %1'"), ИнформацияОбОшибке().Описание);
		КонецПопытки;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныеФайлыНаСервере(ИмяФайлаНаСервере)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаНаСервере) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаНаСервере);
	КаталогРаспаковки = Файл.Путь;
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка удаления временных файлов: %1'"), ИнформацияОбОшибке().Описание));
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЭтоСсылочныйТип(Тип)
	
	Результат = Ложь;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) 
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

//++ НЕ УТКА
&НаСервере
Функция ЗапрещеноИзменятьЭтапыБюджетов(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	БюджетнаяЗадача.Ссылка
	               |ИЗ
	               |	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	               |ГДЕ
	               |	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования";
				   
				   
	Запрос.УстановитьПараметр("МодельБюджетирования",Модель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции
//-- НЕ УТКА

&НаКлиенте
Процедура УстановитьФлагОбновитьВидовЭтаповБюджета(ТекСтрока)
	
	Если Не ОбновитьМодель Тогда
		ТекСтрока.Обновить = Ложь;
	КонецЕсли;
 
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка.Обновить = ТекСтрока.Обновить;
		Если ТекСтрока.Обновить И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
						
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемыеВидыЭтапыБюджета(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыБюджетов.Ссылка
	               |ПОМЕСТИТЬ ВидыБюджетов
	               |ИЗ
	               |	Справочник.ВидыБюджетов КАК ВидыБюджетов
	               |ГДЕ
	               |	ВидыБюджетов.Владелец = &Модель;
	               |				   
				   //++ НЕ УТКА
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭтапыПодготовкиБюджетов.Ссылка
	               |ПОМЕСТИТЬ ЭтапыБюджетов
	               |ИЗ
	               |	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	               |ГДЕ
	               |	ЭтапыПодготовкиБюджетов.Владелец = &Модель
	               |;  				   
				   //-- НЕ УТКА
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭкземплярБюджета.ВидБюджета КАК Ссылка
	               |ИЗ
	               |	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |ГДЕ
	               |	ЭкземплярБюджета.ВидБюджета В
	               |			(ВЫБРАТЬ
	               |				А.Ссылка
	               |			ИЗ
	               |				ВидыБюджетов КАК А) 
				   //++ НЕ УТКА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов
	               |ИЗ
	               |	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	               |ГДЕ
	               |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В
	               |			(ВЫБРАТЬ
	               |				А.Ссылка
	               |			ИЗ
	               |				ЭтапыБюджетов КАК А)		   
				   //-- НЕ УТКА
				   |";
	
	Запрос.УстановитьПараметр("Модель",Модель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ИспользуемыеВидыЭтапыБюджета = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуемыеВидыЭтапыБюджета;
	
КонецФункции

&НаКлиенте
Функция ДоступныеДействия(ТекущаяСтрока)
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить(Ложь,Нстр("ru = 'загрузить новый'"));
	
	ЗапретОбновления = Ложь;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Не Родитель.Обновить Тогда
			ЗапретОбновления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапретОбновления И ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) И Не ТекущаяСтрока.Используется Тогда
		СписокДействий.Добавить(Истина,Нстр("ru = 'обновить существующий'"));
	КонецЕсли;

	Возврат СписокДействий;
	
КонецФункции

#КонецОбласти
