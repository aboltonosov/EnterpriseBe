// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	ВариантПроверкиДокументов = ?(НаборКонстант.РазрешатьИзменятьПроверенныеДокументыПоРеглУчету, 1, 0);
	НачалоВеденияРеглУчетаСОпределеннойДаты = ?(ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияРеглУчета), 1, 0);
	НачалоВеденияРеглУчетаСНачальнойДаты = ?(ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияРеглУчета), 0, 1);
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФорматСохраненияРегистровУчетаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонтитулов(Команда)

	ОткрытьФорму("ОбщаяФорма.НастройкаКолонтитулов", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛизингПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтролируемыеСделкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УплачиваетсяТорговыйСборПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучнуюКорректировкуПроводокПоРеглУчетуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроверкуДокументовПоРегламентированномуУчетуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПроверкиДокументовПриИзменении(Элемент)
	НаборКонстант.РазрешатьИзменятьПроверенныеДокументыПоРеглУчету = ВариантПроверкиДокументов;
	Подключаемый_ПриИзмененииРеквизита(Элементы.РазрешатьИзменятьПроверенныеДокументыПоРеглУчету);	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВеденияРеглУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбораПериода = Новый Структура("Значение, РежимВыбораПериода", НаборКонстант.ДатаНачалаВеденияРеглУчета, "МЕСЯЦ");
	ОписаниеОповедения = Новый ОписаниеОповещения("ВыбратьПериодНачалаВеденияРеглУчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормыВыбораПериода, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор, 
		ВариантОткрытияОкна.ОтдельноеОкно, 
		, 
		ОписаниеОповедения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентированныйУчетПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НачалоВеденияРеглУчетаСНачальнойДатыПриИзменении(Элемент)
	
	НачалоВеденияРеглУчетаСОпределеннойДаты = 0;
	Если Не НаборКонстант.ДатаНачалаВеденияРеглУчета = Дата(1,1,1) Тогда
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДатаНачалаВеденияРеглУчета, Ложь);
		Оповестить("ДатаНачалаВеденияРеглУчета_Изменение", НаборКонстант.ДатаНачалаВеденияРеглУчета, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВеденияРеглУчетаСОпределеннойДатыПриИзменении(Элемент)
	
	НачалоВеденияРеглУчетаСНачальнойДаты = 0;
	Подключаемый_ПриИзмененииРеквизита(Элементы.ДатаНачалаВеденияРеглУчета, Ложь);
	Оповестить("ДатаНачалаВеденияРеглУчета_Изменение", НаборКонстант.ДатаНачалаВеденияРеглУчета, ЭтотОбъект);
	УстановитьДоступность("НаборКонстант.ДатаНачалаВеденияРеглУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВеденияРеглУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияРеглУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала ведения регл. учета должна быть заполнена!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаНачалаВеденияРеглУчета", "НаборКонстант.ДатаНачалаВеденияРеглУчета");
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	Оповестить("ДатаНачалаВеденияРеглУчета_Изменение", НаборКонстант.ДатаНачалаВеденияРеглУчета, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчкиКоманд

&НаКлиенте
Процедура СоздатьДокументыВводаНачальныхОстатков(Команда)
	
	ОбработчикОповещенияВопросВводНачальныхОстатков = Новый ОписаниеОповещения("ОбработчикОповещенияВопросВводНачальныхОстатков", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Сформировать документы ввода остатков по регламентированному учету на %1?'"),
		НаборКонстант.ДатаНачалаВеденияРеглУчета - 1);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сформировать'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не формировать'"));
	
	ПоказатьВопрос(ОбработчикОповещенияВопросВводНачальныхОстатков, ТекстВопроса, Кнопки,,, НСтр("ru = 'Ввод начальных остатков'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВводаНачальныхОстатков(Команда)
	
	ПараметрыФормы = Новый Структура("РазделУчета", ПредопределенноеЗначение("Перечисление.РазделыВводаНачальныхОстатков.РегламентированныйУчет"));
	ОткрытьФорму("Документ.ВводОстатков.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодНачалаВеденияРеглУчетаЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборКонстант.ДатаНачалаВеденияРеглУчета = РезультатВыбора;
	Подключаемый_ПриИзмененииРеквизита(Элементы.ДатаНачалаВеденияРеглУчета, Ложь);
	Оповестить("ДатаНачалаВеденияРеглУчета_Изменение", НаборКонстант.ДатаНачалаВеденияРеглУчета, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросВводНачальныхОстатков(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Результат = ЗапуститьВводНачальныхОстатковРегламентированногоУчета(УникальныйИдентификатор, НаборКонстант.ДатаНачалаВеденияРеглУчета-1);
		
		Если Результат.Статус = "Выполняется" Тогда
		
			ПараметрыФормаДлительнойОперации = ПараметрыФормыДлительнойОперации();
			ПараметрыФормаДлительнойОперации.АдресРезультата = Результат.АдресРезультата;
			ПараметрыФормаДлительнойОперации.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменениеОбъектовЗавершено", ЭтотОбъект);
			
			ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормаДлительнойОперации, ЭтотОбъект, , , , ОповещениеОЗакрытии);
			
		Иначе
			
			ИзменениеОбъектовЗавершено(Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыДлительнойОперации()
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
	ПараметрыДлительнойОперации.Вставить("АдресРезультата");
	ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
	
	Возврат ПараметрыДлительнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеОбъектовЗавершено(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) И Не Результат.Статус = "Ошибка" Тогда
			СписокСозданныхДокументов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			ТекстОповещения = НСтр("ru = 'Ввод начальных остатков...'");
			Если СписокСозданныхДокументов.Количество() Тогда
				ТекстПояснения = СтрШаблон(НСтр("ru = 'Создано %1 документов ввода начальных остатков по регламентированному учету.'"), СписокСозданныхДокументов.Количество());
			Иначе
				ТекстПояснения = НСтр("ru = 'Не удалось создать документы ввода начальных остатков по регламентированному учету.'");
			КонецЕсли;
			ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения);
			
		Иначе
			
			ТекстОповещения = НСтр("ru = 'Ввод начальных остатков не выполнен'");
			ТекстПояснения = НСтр("ru = 'Ввод начальных остатков завершен с ошибкой, по причине: %1'");
			ТекстПояснения = СтрШаблон(ТекстПояснения, Результат.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ТекстПояснения, , ТекстОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	// Устанавливаем значения даты начала ведения регл учета в зависимости от настройки начала ведения учета.
	Если ИмяЭлемента = "ДатаНачалаВеденияРеглУчета" Тогда
		Если НачалоВеденияРеглУчетаСОпределеннойДаты Тогда
			Если ЗначениеЗаполнено(НаборКонстант.ДатаНачалаВеденияРеглУчета) Тогда
				НаборКонстант.ДатаНачалаВеденияРеглУчета = НачалоМесяца(НаборКонстант.ДатаНачалаВеденияРеглУчета);
			Иначе
				НаборКонстант.ДатаНачалаВеденияРеглУчета = НачалоМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
		Иначе
			НаборКонстант.ДатаНачалаВеденияРеглУчета = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Новый Структура);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьВводНачальныхОстатковРегламентированногоУчета(УникальныйИдентификатор, ДатаВвода)
	
	ВыполняемыйМетод = "Документы.ВводОстатков.ВвестиНачОстаткиРеглУчетаПоДаннымОперативного";
	
	НаименованиеЗадания = НСтр("ru = 'Создание и заполнение документов ввода начальных остатков по регламентированному учету на дату %1'");
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ДатаВвода);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = "ВводНачальныхОстатковПоРеглУчету";
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	ПараметрыОбработки = Новый Структура("ДатаВвода", ДатаВвода);
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
			
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроверкуДокументовПоРегламентированномуУчету"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаВариантовПроверкиДокумента.Доступность = НаборКонстант.ИспользоватьПроверкуДокументовПоРегламентированномуУчету;
		
	КонецЕсли;
	
	ЕстьОтражениеДокументовВРеглУчете = ЕстьОтражениеДокументовВРеглУчете();
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьРеглУчет"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаДатаНачалаВеденияРеглУчета.Доступность = НаборКонстант.ИспользоватьРеглУчет;
		Элементы.ГруппаНастройкиРегламентированногоУчета.Доступность = НаборКонстант.ИспользоватьРеглУчет;
		Элементы.ПояснениеРегламентированныйУчет.Доступность = НаборКонстант.ИспользоватьРеглУчет;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьРегламентированныйУчет, ЕстьОтражениеДокументовВРеглУчете);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ДатаНачалаВеденияРеглУчета" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ДатаНачалаВеденияРеглУчета.Доступность = НачалоВеденияРеглУчетаСОпределеннойДаты;
		Элементы.СоздатьДокументыВводаНачальныхОстатков.Доступность = НачалоВеденияРеглУчетаСОпределеннойДаты;
		Элементы.СписокДокументовВводаНачальныхОстатков.Доступность = НачалоВеденияРеглУчетаСОпределеннойДаты;
		Элементы.ДатаНачалаВеденияРеглУчета.АвтоОтметкаНезаполненного = НачалоВеденияРеглУчетаСОпределеннойДаты;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.НачалоВеденияРеглУчетаСНачальнойДаты, ЕстьОтражениеДокументовВРеглУчете);
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.НачалоВеденияРеглУчетаСОпределеннойДаты, ЕстьОтражениеДокументовВРеглУчете);
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ДатаНачалаВеденияРеглУчета, ЕстьОтражениеДокументовВРеглУчете);
			
	КонецЕсли;
	
	ОбменДаннымиУТУП.УстановитьДоступностьНастроекУзлаИнформационнойБазы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьОтражениеДокументовВРеглУчете()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Регистр.Регистратор
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Регистр
	|";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти