&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
//++ НЕ УТКА
	ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
//-- НЕ УТКА
	
	УстановитьВидимостьЭлементовФормы();
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
		
		ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
				Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0)
				
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьУправлениеПроизводством") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьПартионныйУчет") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ПартионныйУчетВерсии22") > 0) Тогда
		
		ЭтаФорма.Прочитать();
		НастроитьЗависимыеЭлементыФормы();
//++ НЕ УТКА
		ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
//-- НЕ УТКА
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
//++ НЕ УТКА
	СохранитьЗначенияДоИзменения(ЭтаФорма);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПроизводствоПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводство21ПриИзменении(Элемент)
	
//++ НЕ УТКА
	Если ТребуетсяВывестиПредупреждениеПриОтключении21() Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ИспользоватьПроизводство21ПриИзмененииЗавершение", ЭтотОбъект, Элемент);
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияКА.Форма.ПредупреждениеОбИспользовании21",, ЭтаФорма,,,,
			ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Возврат;
		
	КонецЕсли;
//-- НЕ УТКА
	
	ИспользоватьПроизводство21ПриИзмененииЗавершение(Истина, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводство21ПриИзмененииЗавершение(Результат, Элемент) Экспорт
	
//++ НЕ УТКА
	Если Результат <> Истина Тогда
		ВосстановитьЗначенияДоИзменения(ЭтаФорма, "ИспользоватьУправлениеПроизводством");
		Возврат;
	КонецЕсли;
	СохранитьЗначенияДоИзменения(ЭтаФорма, "ИспользоватьУправлениеПроизводством");
//-- НЕ УТКА
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодикаУправленияПроизводствомПриИзменении(Элемент)
	
//++ НЕ УТКА
	Если НаборКонстант.МетодикаУправленияПроизводством.Пустая() Тогда
		ВосстановитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
		Возврат;
	КонецЕсли;
	СохранитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
//-- НЕ УТКА
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитическийУчетПоГруппамПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантИспользоватьВыпускПоНесколькимРаспоряжениямПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасценокВидовРаботПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлановыеКалькуляцииПриВыпускеПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПлановойСебестоимостиВыпускаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПлановойСтоимостиЗатратПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКорректировкиЗаказаМатериаловВПроизводствоПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтервалПланированияЧасПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводствоНаСторонеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеРемонтамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУзлыОбъектовЭксплуатацииПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыЗаказовПереработчикамПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыПереработчикамБезПолнойОтработкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыПереработчикамБезПолнойОплатыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыДвиженийПродукцииИМатериаловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбособленияМатериаловВПроизводствеПриИзменении(Элемент)
	
//++ НЕ УТКА
	Если НаборКонстант.ВариантОбособленияМатериаловВПроизводстве.Пустая() Тогда
		ВосстановитьЗначенияДоИзменения(ЭтаФорма, "ВариантОбособленияМатериаловВПроизводстве");
		Возврат;
	КонецЕсли;
	СохранитьЗначенияДоИзменения(ЭтаФорма, "ВариантОбособленияМатериаловВПроизводстве");
//-- НЕ УТКА
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетГрафикаПроизводстваИспользованиеПриИзменении(Элемент)
	
//++ НЕ УТКА
	УстановитьИспользованиеРегламентногоЗадания();
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписание(Команда)
	
//++ НЕ УТКА
	Если РасчетГрафикаПроизводстваРасписание = Неопределено Тогда
		РасчетГрафикаПроизводстваРасписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("РасчетГрафикаПроизводстваРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасчетГрафикаПроизводстваРасписание);
	ДиалогРасписания.Показать(ОписаниеОповещения);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

//++ НЕ УТКА
&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписаниеЗавершение(Расписание, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РасчетГрафикаПроизводстваРасписание = Расписание;
	
	УстановитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ПереходНаУправлениеПроизводством22(Команда)
	
//++ НЕ УТКА
	ОткрытьФорму("Обработка.ПереходНаУправлениеПроизводствомВерсии22.Форма");
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА
&НаКлиенте
Функция ТребуетсяВывестиПредупреждениеПриОтключении21()
	
	Если ИспользуетсяТолькоПроизводство22() И ПолучитьЗначениеДоИзменения(ЭтаФорма, "ИспользоватьУправлениеПроизводством") Тогда
		
		Возврат ТребуетсяВывестиПредупреждениеПриОтключении21НаСервере();
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;

	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение)
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьПроизводство") > 0
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьУправлениеПроизводством") > 0 Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя
	
КонецФункции

//++ НЕ УТКА
&НаСервереБезКонтекста
Функция ТребуетсяВывестиПредупреждениеПриОтключении21НаСервере()
	
	Возврат УправлениеПроизводством.ЕстьНезавершенныеОперацииВПроизводстве21();
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

#Область Константы

&НаСервере
Функция ИспользуетсяПроизводство()
	
	Возврат НаборКонстант.ИспользоватьПроизводство;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ИспользуетсяПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство21_22()
	
	Возврат ИспользуетсяПроизводство21() И ИспользуетсяПроизводство22();
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область НастройкаЭлементов

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	Элементы.ГруппаПроизводствоКА.Видимость = НЕ УправлениеПредприятием;
	Элементы.ГруппаПроизводствоУП.Видимость = УправлениеПредприятием;
	Элементы.ГруппаУчетПроизводства.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПлановаяСтоимость.Видимость = УправлениеПредприятием;
	Элементы.ГруппаНастройкиРемонты.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПрочее.Видимость = УправлениеПредприятием;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным = "")
	
	//ВалютаРасценокВидовРабот
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаРасценокВидовРабот" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаРасценокВидовРабот, ЗначениеЗаполнено(НаборКонстант.ВалютаРасценокВидовРабот));
	КонецЕсли;
	
//++ НЕ УТКА
	//ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство, НаборКонстант.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство);
	КонецЕсли;
//-- НЕ УТКА

	//ВалютаПлановойСебестоимостиПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаПлановойСебестоимостиПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаПлановойСебестоимостиВыпуска, ЗначениеЗаполнено(НаборКонстант.ВалютаПлановойСебестоимостиПродукции));
	КонецЕсли;
	
	//ИспользоватьПроизводствоНаСтороне
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьПереработку = Константы.ИспользоватьПроизводствоНаСтороне.Получить();
		ИспользоватьКонстанты = ИспользоватьПереработку И Константы.ИспользоватьСтатусыЗаказовПереработчикам.Получить();
		
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки.Доступность = ИспользоватьКонстанты;
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты.Доступность = ИспользоватьКонстанты;
		Элементы.ГруппаКомментарийКонтролироватьЗакрытиеЗаказовПереработчикам.Видимость = ИспользоватьПереработку И НЕ ИспользоватьКонстанты;
		
	КонецЕсли;
	
//++ НЕ УТКА
	//ИспользоватьУправлениеРемонтами
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьУправлениеРемонтами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьУзлыОбъектовЭксплуатации.Доступность = НаборКонстант.ИспользоватьУправлениеРемонтами;
	КонецЕсли;
	
	//ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции, ЗначениеКонстанты);
		
	КонецЕсли;
//-- НЕ УТКА
	
	// ИспользоватьПроизводство, ИспользоватьУправлениеПроизводством
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		Элементы.ГруппаУчетЗатрат.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ГруппаМетодикаУправленияПроизводством.Видимость = Ложь;
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве.Видимость = Ложь;
		
//++ НЕ УТКА
		Элементы.ИспользоватьПроизводство22.Доступность = ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
		
		Элементы.ГруппаМетодикаУправленияПроизводством.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве.Видимость = ИспользуетсяПроизводство22();
		
		Элементы.ГруппаПереходНаУправлениеПроизводством22.Видимость = ИспользуетсяПроизводство21_22();
		Элементы.ГруппаПредупреждениеИспользованиеПроизводства22.Видимость =
			НЕ ИспользуетсяПроизводство22() И НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22");
		
		Элементы.ГруппаПрочее.Доступность = ИспользуетсяПроизводство();
//-- НЕ УТКА
		
//++ НЕ УТКА
		Элементы.ГруппаУчетПроизводства.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ИспользоватьВыпускПоНесколькимРаспоряжениям.Видимость = ИспользуетсяПроизводство21();
		Элементы.ИспользоватьСтатусыДвиженийПродукцииИМатериалов.Видимость = ИспользуетсяПроизводство22();
//-- НЕ УТКА
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьПроизводство, ИспользуетсяПроизводство());
		
//++ НЕ УТКА
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьПроизводство21, ИспользуетсяТолькоПроизводство21());
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьПроизводство22, ИспользуетсяПроизводство22());
			
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.МетодикаУправленияПроизводством, ИспользуетсяПроизводство22());
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВариантОбособленияМатериаловВПроизводстве, ИспользуетсяПроизводство22());
//-- НЕ УТКА
	
	КонецЕсли;
	
	// АналитическийУчетПоГруппамПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.АналитическийУчетПоГруппамПродукции"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.АналитическийУчетПоГруппамПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.АналитическийУчетПоГруппамПродукции, ЗначениеКонстанты);
		
		Элементы.ГруппаАналитическийУчетПоГруппамПродукции.Доступность = ИспользуетсяПроизводство() И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить();
		Элементы.ГруппаКомментарийВидыПродукции.Видимость = НЕ (ИспользуетсяПроизводство() И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить());
		
	КонецЕсли;
	
	// ИспользоватьПроизводствоНаСтороне
	Если РеквизитПутьКДанным = "" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне" 
		//++ НЕ УТКА
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		//-- НЕ УТКА
		Тогда
		
		ЗапрещеноИзменениеКонстанты = Ложь;
		//++ НЕ УТКА
		ЗапрещеноИзменениеКонстанты = НаборКонстант.ИспользоватьПроизводствоНаСтороне
			И (НаборКонстант.ИспользоватьПроизводство 
				ИЛИ НаборКонстант.ИспользоватьУправлениеПроизводством
				ИЛИ НаборКонстант.ИспользоватьУправлениеПроизводством2_2);
		//-- НЕ УТКА
		
		Элементы.ИспользоватьСтатусыЗаказовПереработчикам.Доступность = 
			?(ЗапрещеноИзменениеКонстанты, Ложь, НаборКонстант.ИспользоватьПроизводствоНаСтороне);
			
		Элементы.ГруппаКомментарийИспользоватьСтатусыЗаказовПереработчикам.Видимость = ЗапрещеноИзменениеКонстанты;
		
	КонецЕсли;
	
//++ НЕ УТКА
	// МетодикаУправленияПроизводством
	Если РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ТекстПодсказки = Перечисления.МетодикаУправленияПроизводством.ПодсказкаПоМетодике(НаборКонстант.МетодикаУправленияПроизводством);
		Элементы.ПодсказкаМетодикаУправленияПроизводством.Подсказка = ТекстПодсказки;
		
	КонецЕсли;
//-- НЕ УТКА

//++ НЕ УТКА
	// РегламентноеЗадание_РасчетГрафикаПроизводства
	Если СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Если (НаборКонстант.ИспользоватьУправлениеПроизводством
				ИЛИ НаборКонстант.МетодикаУправленияПроизводством <> Перечисления.МетодикаУправленияПроизводством.БезПланирования
				) Тогда
			ВидимостьЭлементов = Истина;
		Иначе
			ВидимостьЭлементов = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ВидимостьЭлементов;
		Элементы.ОтступРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ВидимостьЭлементов И ИспользуетсяТолькоПроизводство22();
		
	КонецЕсли;
//-- НЕ УТКА
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
		"ИспользоватьСтатусыЗаказовПереработчикам,
		//++ НЕ УТКА
		|ИспользоватьСтатусыДвиженийПродукцииИМатериалов,
		//-- НЕ УТКА
		|ИспользоватьУзлыОбъектовЭксплуатации,
		|ИспользоватьУправлениеРемонтами,
		|АналитическийУчетПоГруппамПродукции");
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область ЗначенияДоИзменения

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначенияДоИзменения(Форма, ИмяРеквизита = Неопределено)
	
	Если Форма.ЗначенияДоИзменения = Неопределено Тогда
		
		Форма.ЗначенияДоИзменения = Новый Структура(
			"ИспользоватьУправлениеПроизводством,
			|МетодикаУправленияПроизводством,
			|ВариантОбособленияМатериаловВПроизводстве");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма.ЗначенияДоИзменения, Форма.НаборКонстант, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьЗначенияДоИзменения(Форма, ИмяРеквизита)
	
	ЗаполнитьЗначенияСвойств(Форма.НаборКонстант, Форма.ЗначенияДоИзменения, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеДоИзменения(Форма, ИмяРеквизита)
	
	Возврат Форма.ЗначенияДоИзменения[ИмяРеквизита];
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область РегламентноеЗадание_РасчетГрафикаПроизводства

&НаСервере
Процедура ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства()
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Задание = ПланированиеПроизводства.ЗаданиеРасчетГрафикаПроизводства();
		Если Задание <> Неопределено Тогда
			РасчетГрафикаПроизводстваИдентификатор = Задание.УникальныйИдентификатор;
			РасчетГрафикаПроизводстваИспользование = Задание.Использование;
			РасчетГрафикаПроизводстваРасписание    = Задание.Расписание;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	Если РасчетГрафикаПроизводстваИспользование И Не РазделениеВключено Тогда
		
		ПредставлениеРасписания = Строка(РасчетГрафикаПроизводстваРасписание);
		Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
			 ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		КонецЕсли;
		Элементы.РасчетГрафикаПроизводстваРасписание.Заголовок = ПредставлениеРасписания;
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Видимость = Истина;
	Иначе
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("Использование", РасчетГрафикаПроизводстваИспользование);
	
	Если РасчетГрафикаПроизводстваИспользование И РазделениеВключено Тогда
		
		РасчетГрафикаПроизводстваРасписание = ПланированиеПроизводства.ПредопределенноеРасписание();
		
		ПараметрыЗадания.Вставить("Расписание", РасчетГрафикаПроизводстваРасписание);
		
	КонецЕсли;
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура("Расписание", РасчетГрафикаПроизводстваРасписание);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#КонецОбласти
