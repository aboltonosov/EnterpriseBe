
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ОтображатьЗаказыКОформлению = Истина;
	
	//++ НЕ УТКА
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	//-- НЕ УТКА
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	ИнициализироватьКомпоновщикНастроек();
	ВосстановитьНастройки();
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	ЗаполнитьЗначенияСвойств(Объект, ГраницыПериода);
	Периодичность = ГраницыПериода.Периодичность;
	ПланированиеПоНазначениям = ГраницыПериода.ПланированиеПоНазначениям;
	УстановитьВидимостьЭлементовФормы();
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма);
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"  И Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		СписокДокументовДляОбновления.Добавить(Источник);
		ОбновитьДанныеКогдаФормаСтанетАктивной();
		
	ИначеЕсли ИмяСобытия = "УстановленОтбор_ФормированиеЗаказовНаПередачуВПроизводствоПоПлану" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ПериодЗаказаОкончание) И Объект.ПериодЗаказаОкончание < Объект.ПериодЗаказаНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Окончание периода заказа должно быть больше начала периода.'"),
			,
			"Объект.ПериодЗаказаОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ПериодПоступленияОкончание) И Объект.ПериодПоступленияОкончание < Объект.ПериодПоступленияНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Окончание периода поступления должно быть больше начала периода.'"),
			,
			"Объект.ПериодПоступленияОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	ПланированиеПоНазначениям = ГраницыПериода.ПланированиеПоНазначениям;
	Если Не ПланированиеПоНазначениям Тогда
		Назначение = Неопределено
	КонецЕсли;
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделенияПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаПотребности);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ОкончаниеПериодаПотребности));
	
	КлючСтроки.Вставить("Склад", 	        ТекСтрока.Склад);
	КлючСтроки.Вставить("ПодразделениеИсполнитель", Объект.ПодразделениеИсполнитель);
	КлючСтроки.Вставить("Сценарий", 				Объект.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Назначение", 		ТекСтрока.Назначение);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаПотребности);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ОкончаниеПериодаПотребности));
	
	КлючСтроки.Вставить("Склад", 	                ТекСтрока.Склад);
	КлючСтроки.Вставить("ПодразделениеИсполнитель", ТекСтрока.ПодразделениеИсполнитель);
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовОтметитьКЗаказуПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСкладПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовЦеховаяКладоваяПриИзменении(Элемент)
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзинаЗаказов

&НаКлиенте
Процедура КорзинаЗаказовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	Если Строка <> Неопределено И (Поле.Имя = "КорзинаЗаказовПодразделениеИсполнитель"
		Или Поле.Имя = "КорзинаЗаказовСклад") Тогда
		СтрокаКорзины = КорзинаЗаказов.НайтиПоИдентификатору(Строка);
		Если Поле.Имя = "КорзинаЗаказовПодразделениеИсполнитель" Тогда
			ИменаПолей = "ПодразделениеИсполнитель";
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Назначить для выделенного товара подразделение-исполнитель: %1?'"), СтрокаКорзины.ПодразделениеИсполнитель);
		ИначеЕсли Поле.Имя = "КорзинаЗаказовСклад" Тогда
			ИменаПолей = "Склад";
			ТекстВопроса =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Назначить для выделенного товара склад: %1?'"),СтрокаКорзины.Склад);
		Иначе
			ИменаПолей= "";
			ТекстВопроса = "";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ИменаПолей) Тогда 
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Назначить'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не назначать'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("ИменаПолей", ИменаПолей);
			ДополнительныеПараметры.Вставить("СтрокаКорзины", СтрокаКорзины);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("КорзинаЗаказовПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ИменаПолей = ДополнительныеПараметры.ИменаПолей;
		СтрокаКорзины = ДополнительныеПараметры.СтрокаКорзины;
		
		Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
			Если Не СтрокаТЧ.РедактироватьСклад И ИменаПолей = "Склад" Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКорзины, ИменаПолей);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() =0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Попытка	
		ОтметитьКЗаказу = ПараметрыПеретаскивания.Значение[0].ОтметитьКЗаказу;
	Исключение
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказа(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаЗаказаЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодЗаказаНачало", "ПериодЗаказаОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаОтгрузки(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаСборкиЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодПоступленияНачало", "ПериодПоступленияОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.Команда.Заполнить");
	
	Объект.РежимЗаполненияДанных = Истина;
	Если НЕ ПроверитьЗаполнение() Тогда
		Объект.РежимЗаполненияДанных = Ложь;
		Возврат
	КонецЕсли;
	Объект.РежимЗаполненияДанных = Ложь;
	
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru='В таблице имеются строки. При заполнении строки будут очищены. Продолжить?'"), Режим, 0);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаСписка"); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область КомандыТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ОтображатьЗаказыКОформлению(Команда)
	
	ОтображатьЗаказыКОформлениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	Склад = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", 
		ЭтотОбъект, 
		Новый Структура("СтрокаТаблицы", СтрокаТаблицы));
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", 
		Новый Структура("Ключ", СтрокаТаблицы.Склад),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеховаяКладавая(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ЦеховаяКладовая", Истина);
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	Склад = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЦеховуюКладовуюЗавершение", 
		ЭтотОбъект, 
		Новый Структура("СтрокаТаблицы", СтрокаТаблицы));
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", 
		Новый Структура("Ключ, Отбор", СтрокаТаблицы.ЦеховаяКладовая, Отбор),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ФормированиеЗаказов;
	ДанныеТаблицы = Объект.ФормированиеЗаказов;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		Действия = Новый Структура;
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределить(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыФормы.Вставить("НачалоПериодаПотребности", Элементы.ФормированиеЗаказов.ТекущиеДанные.НачалоПериодаПотребности);
	ПараметрыФормы.Вставить("ТипПланирования", "ПланированиеПередачиМатериаловВПроизводство");
	
	Оповещение = Новый ОписаниеОповещения("ПеренестиИлиРаспределитьЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормированиеЗаказовПоПланамРаспределениеИПеренос",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	
КонецПроцедуры
	
#КонецОбласти

#Область КомандыПошаговогоМастера

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьНастройки();
		ЗаполнитьНаКлиенте();
		
		Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
			Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
		ОбновитьКорзинуЗаказов();
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Нет заказов к оформлению. Отметьте флажком количество в колонке 
				|""К заказу"" для номенклатуры которую необходимо заказать.'");
			
			ПоказатьПредупреждение(,ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		СоздатьЗаказыНаСервере();
		
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru='Сформированные заказы'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		ОчиститьСообщения();
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить заказы'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос
				(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru = 'Список созданных заказов не пуст. Созданные заказы будут удалены. Удалить заказы и продолжить?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		КорзинаЗаказов.Очистить();
		Объект.ФормированиеЗаказов.Очистить();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаказыНаСервере(СформированныеЗаказы.ВыгрузитьЗначения());
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	КорзинаЗаказов.Очистить();
	ОчиститьСообщения();
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОтображенияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовСклад.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.ОтметитьКЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУправлениеПроизводством2_2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовСклад.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовЦеховаяКладовая.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.ЦеховаяКладовая");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы(Страница)
	
	Если Страница = Элементы.СтраницаШаг1 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 1 из 3. Отбор планов'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 2 из 3. Определение состава и объема заказа'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 3 из 3. Уточнение сформированных заказов'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ФормаОтображатьЗаказыКОформлению.Пометка = ОтображатьЗаказыКОформлению;
	Элементы.ГруппаЗаказыКОформлению.Видимость        = ОтображатьЗаказыКОформлению;
	
	Элементы.ФормированиеЗаказовПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;
	Элементы.ФормированиеЗаказовКонтекстноеМенюПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ДалееШаг2.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг3;
		Элементы.ЗавершитьФормированиеЗаказовШаг3.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(Форма)
	
	Форма.Элементы.ФормированиеЗаказовПодразделениеИсполнитель.Видимость = Не Форма.ОтборПодразделения;
	Форма.Элементы.КорзинаЗаказовПодразделениеИсполнитель.Видимость = Не Форма.ОтборПодразделения;
	
	Форма.Элементы.ФормированиеЗаказовЦеховаяКладовая.Видимость = Форма.ИспользоватьУправлениеПроизводством2_2;
	Форма.Элементы.ФормаЗаполнитьЦеховаяКладавая.Видимость = Форма.ИспользоватьУправлениеПроизводством2_2;
	Форма.Элементы.КорзинаЗаказовЦеховаяКладовая.Видимость = Форма.ИспользоватьУправлениеПроизводством2_2;
	
	Форма.Элементы.Подразделение.Доступность = Форма.ОтборПодразделения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииСценария(Форма)
	
	ВидимостьНазначения = Форма.ПланированиеПоНазначениям И Форма.ИспользоватьОбособленноеОбеспечениеЗаказов;
	Форма.Элементы.ГруппаДополнительныеОтборы.Видимость = ВидимостьНазначения;
	Форма.Элементы.ФормированиеЗаказовНазначение.Видимость = ВидимостьНазначения;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновки2_2");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновки");
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПользовательскиеНастройки",  КомпоновщикНастроек.ПользовательскиеНастройки);
	Настройки.Вставить("Сценарий",                   Объект.Сценарий);
	Настройки.Вставить("ПодразделениеИсполнитель",   Объект.ПодразделениеИсполнитель);
	Настройки.Вставить("ПериодПоступленияНачало",    Объект.ПериодПоступленияНачало);
	Настройки.Вставить("ПериодПоступленияОкончание", Объект.ПериодПоступленияОкончание);
	Настройки.Вставить("ПериодЗаказаНачало",         Объект.ПериодЗаказаНачало);
	Настройки.Вставить("ПериодЗаказаОкончание",      Объект.ПериодЗаказаОкончание);
	Настройки.Вставить("ОтборПодразделения",         ОтборПодразделения);
	Настройки.Вставить("Организация",                Объект.Организация);
	Настройки.Вставить("Назначение",                 Объект.Назначение);
	
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	КлючОбъекта = "Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "Настройки", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	КлючОбъекта = "Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану";
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода",       Объект.ПериодПоступленияНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОкончаниеПериода",    Объект.ПериодПоступленияОкончание);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачалаЗаказа",    Объект.ПериодЗаказаНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаОкончанияЗаказа", Объект.ПериодЗаказаОкончание);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
					СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос,
					"ПодстановкаОсновногоСпособаОбеспечения",
					"ТаблицаПланов.Номенклатура,ТаблицаПланов.Характеристика,ТаблицаПланов.Склад");
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработчикиКомандЗавершение

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаСборкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаКлиенте()
	
	Объект.ФормированиеЗаказов.Очистить();
	КорзинаЗаказов.Очистить();
	ОбновитьНаСервере();
	Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
		Если ОтборПодразделения Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сценарию %1 у подразделения исполнителя %2 за установленный период потребность в материалах отсутствует.'"),
				Объект.Сценарий,
				Объект.ПодразделениеИсполнитель);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сценарию %1 за установленный период потребность в материалах отсутствует.'"),
				Объект.Сценарий);
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	Склад = Результат;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли; 
	
	СкладИзменен = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			СкладИзменен = Истина;
			СтрокаТаблицы.Склад = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкладИзменен И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеховуюКладовуюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	ЦеховаяКладовая = Результат;
	
	Если НЕ ЗначениеЗаполнено(ЦеховаяКладовая) Тогда
		Возврат;
	КонецЕсли; 
	
	ЦеховаяКладоваяИзменена = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.ЦеховаяКладовая <> ЦеховаяКладовая Тогда
			ЦеховаяКладоваяИзменена = Истина;
			СтрокаТаблицы.ЦеховаяКладовая = ЦеховаяКладовая;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЦеховаяКладоваяИзменена И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределитьЗавершение(ПараметрыРаспределения, ДополнительныеПараметры) Экспорт 
	
	Если ПараметрыРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,
		Элементы.ФормированиеЗаказов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,Знач ВыделенныеСтроки) 
	
	Планирование.ПеренестиИлиРаспределитьНаСервере(ПараметрыРаспределения,
		ВыделенныеСтроки,
		Объект.ФормированиеЗаказов);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПолученияПлановИЗаказов

&НаСервере
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПланыПотребленияМатериаловОбороты.КоличествоОборот) КАК Количество,
	|	ПланыПотребленияМатериаловОбороты.Регистратор КАК Документ,
	|	ДокПланПроизводства.Дата КАК ДатаДокумента,
	|	ДокПланПроизводства.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ПодразделениеИсполнитель = &ПодразделениеИсполнитель) КАК ПланыПотребленияМатериаловОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокПланПроизводства
	|		ПО ПланыПотребленияМатериаловОбороты.Регистратор = ДокПланПроизводства.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПотребленияМатериаловОбороты.Регистратор,
	|	ДокПланПроизводства.МоментВремени,
	|	ДокПланПроизводства.Дата,
	|	ДокПланПроизводства.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокПланПроизводства.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Заказы.Количество) КАК Количество,
	|	РеквизитыЗаказа.Ссылка КАК Документ,
	|	РеквизитыЗаказа.Дата КАК ДатаДокумента,
	|	РеквизитыЗаказа.Номер КАК НомерДокумента
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Заказы
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК РеквизитыЗаказа
	|		ПО Заказы.Ссылка = РеквизитыЗаказа.Ссылка
	|ГДЕ
	|	РеквизитыЗаказа.Проведен
	|	И НЕ Заказы.Отменено
	|	И Заказы.Номенклатура = &Номенклатура
	|	И Заказы.Характеристика = &Характеристика
	|	И ВЫБОР
	|			КОГДА &ПланированиеПоНазначениям И &Назначение<>ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА Заказы.Назначение = &Назначение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И Заказы.НачалоОтгрузки МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеквизитыЗаказа.Склад = &Склад
	|	И РеквизитыЗаказа.Подразделение = &ПодразделениеИсполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыЗаказа.Ссылка,
	|	РеквизитыЗаказа.Дата,
	|	РеквизитыЗаказа.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитыЗаказа.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область СозданиеУдалениеЗаказов

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстОшибкиЗаписи = НСтр("ru='%1 невозможно записать документ по причине:
								|%2'");
	ТекстОшибкиЗаполнения = НСтр("ru='%1 невозможно провести по причине некорректного заполнения.'");
	
	ТаблицаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Новый Структура("ОтметитьКЗаказу", ИСтина));
	Колонки = "Склад,ПодразделениеИсполнитель,ЦеховаяКладовая";
	
	ТаблицаДокументов = ТаблицаЗаказов.Скопировать(, Колонки);
	ТаблицаДокументов.Свернуть(Колонки,);
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СпособыОбеспечения = Новый Соответствие;
	
	Для Каждого СтрокаДокумента Из ТаблицаДокументов Цикл
		
		СтруктураПоиска = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
		ОтобранныеСтроки = ТаблицаЗаказов.НайтиСтроки(СтруктураПоиска);
		
		Если ОтобранныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ДокументОбъект = Документы.ЗаказМатериаловВПроизводство.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата;
		
		ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Формирование заказов на передачу в производство по планам"".'");
		
		Если ЗначениеЗаполнено(ОтобранныеСтроки[0].СпособОбеспечения) Тогда
		
			ПараметрыСпособа = СпособыОбеспечения.Получить(ОтобранныеСтроки[0].СпособОбеспечения);
			Если ПараметрыСпособа = Неопределено Тогда
			
				ПараметрыСпособа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтобранныеСтроки[0].СпособОбеспечения, "Организация, Подразделение");
				СпособыОбеспечения.Вставить(ОтобранныеСтроки[0].СпособОбеспечения, ПараметрыСпособа);
				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыСпособа, "Организация, Подразделение");
		КонецЕсли;
		
		ДокументОбъект.Заполнить(Неопределено);
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ДокументОбъект.Организация = Объект.Организация;
		КонецЕсли;
		ДокументОбъект.Подразделение = СтрокаДокумента.ПодразделениеИсполнитель;
		
		//++ НЕ УТКА
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
			ДокументОбъект.ЦеховаяКладовая = СтрокаДокумента.ЦеховаяКладовая;
		КонецЕсли;
		//-- НЕ УТКА
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Склад) Тогда
			ДокументОбъект.Склад = СтрокаДокумента.Склад;
		КонецЕсли;
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению;
		
		Для каждого СтрокаДанныеЗаказа Из ОтобранныеСтроки Цикл
			Если СтрокаДанныеЗаказа.КоличествоУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаДанныеЗаказа.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаДанныеЗаказа.Характеристика;
			НоваяСтрока.Назначение = СтрокаДанныеЗаказа.Назначение;
			НоваяСтрока.Упаковка = СтрокаДанныеЗаказа.Упаковка;
			НоваяСтрока.Количество = СтрокаДанныеЗаказа.Количество;
			НоваяСтрока.КоличествоУпаковок = СтрокаДанныеЗаказа.КоличествоУпаковок;
			НоваяСтрока.НачалоОтгрузки = СтрокаДанныеЗаказа.НачалоПериодаПотребности;
			НоваяСтрока.ОкончаниеПоступления = СтрокаДанныеЗаказа.НачалоПериодаПотребности;
			
		КонецЦикла;
		
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументОбъект.Товары);
		
		Для Каждого Строка Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(Строка.Назначение) Тогда
				Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОбъект.Товары.Количество() > 0 Тогда
			
			Попытка
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Сообщения = ПолучитьСообщенияПользователю(Истина);
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)), 
					ДокументОбъект);
				КонецЕсли;
				
				СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование заказов материалов в производство по планам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки),
				ДокументОбъект);
				
			КонецПопытки; 
			
		
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		СформированныеЗаказы,
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru='Сформированные заказы'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = НСтр("ru='Имеются ссылки на объект %1  %2. Документ не удален'");
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
				//++ НЕ УТКА
				Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании")
				//-- НЕ УТКА
				Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Ссылка[1]) = Тип("СправочникСсылка.Назначения") Тогда
				
				МассивНазачений = Новый Массив;
				МассивНазачений.Добавить(Ссылка[1]);
				ТабСсылокНазначения = НайтиПоСсылкам(МассивНазачений);
				ЕстьСсылкиНаНазначения = Ложь;
				
				Для Каждого СсылкаНазначения из ТабСсылокНазначения Цикл
					
					Если СсылкаНазначения[0] <> СсылкаНазначения[1]
						И СсылкаНазначения[0] <> Ссылка[0]
						//++ НЕ УТКА
						И ТипЗнч(СсылкаНазначения[1]) <> Тип("РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании")
						//-- НЕ УТКА
						И ТипЗнч(СсылкаНазначения[1]) <> Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
						Тогда
						
						ЕстьСсылкиНаНазначения = Истина;
						
						Прервать;
					КонецЕсли
					
				КонецЦикла;
				
				Если Не ЕстьСсылкиНаНазначения Тогда
					СсылкиНаУдаление.Добавить(Ссылка[1]);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
			
				СсылкиНаУдаление.Удалить(Индекс);
			
			КонецЕсли;
		
	КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанными


#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция УстановитьНачалоОкончаниеПериодаПлана(Сценарий, НачалоПериода, ОкончаниеПериода)

	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &НачалоПериода
	               |	КОНЕЦ КАК НачалоПериода,
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &ОкончаниеПериода
	               |	КОНЕЦ КАК ОкончаниеПериода";
				   
	СтруктураЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "Периодичность, ПланированиеПоНазначениям");
	Периодичность = СтруктураЗначений.Периодичность;
	Запрос.УстановитьПараметр("Периодичность", 		Периодичность);
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	КонецДня(ОкончаниеПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ГраницыПериода = Новый Структура();
	ГраницыПериода.Вставить("НачалоПериода", 	?(ЗначениеЗаполнено(НачалоПериода), 	Выборка.НачалоПериода, 		НачалоПериода));
	ГраницыПериода.Вставить("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), 	Выборка.ОкончаниеПериода, 	ОкончаниеПериода));
	ГраницыПериода.Вставить("Периодичность", Периодичность);
	ГраницыПериода.Вставить("ПланированиеПоНазначениям", СтруктураЗначений.ПланированиеПоНазначениям);
	
	Возврат ГраницыПериода;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("ПодразделениеИсполнитель", Объект.ПодразделениеИсполнитель);
	Запрос.УстановитьПараметр("ОтборПодразделения", ОтборПодразделения);
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.УстановитьПараметр("ОтборПоНазначению", ЗначениеЗаполнено(Объект.Назначение));

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Объект.ФормированиеЗаказов.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = СтрокаЗаказа.НачалоПериодаПотребности;
			СтрокаЗаказа.Период.ДатаОкончания = СтрокаЗаказа.ОкончаниеПериодаПотребности;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		Если ПроверитьЕстьДокументыДляОбновления() Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект), 
				НСтр("ru='Заказы материалов в производство были изменены. Хотите обновить данные? При обновлении строки будут очищены.'"), 
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru='Формирование заказов на передачу в производство по плану'"));
		КонецЕсли;
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьДокументыДляОбновления()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормированиеЗаказов.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	|	ТаблицаФормированиеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаФормированиеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаФормированиеЗаказов.НачалоПериодаПотребности КАК НачалоПериодаПотребности,
	|	ТаблицаФормированиеЗаказов.ОкончаниеПериодаПотребности КАК ОкончаниеПериодаПотребности
	|ПОМЕСТИТЬ ТаблицаФормированиеЗаказов
	|ИЗ
	|	&ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Заказы.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ПО Заказы.Номенклатура = ТаблицаФормированиеЗаказов.Номенклатура
	|			И Заказы.Характеристика = ТаблицаФормированиеЗаказов.Характеристика
	|ГДЕ
	|	Заказы.Ссылка.Проведен
	|	И Заказы.Ссылка.Подразделение = ТаблицаФормированиеЗаказов.ПодразделениеИсполнитель
	|	И Заказы.НачалоОтгрузки МЕЖДУ ТаблицаФормированиеЗаказов.НачалоПериодаПотребности И ТаблицаФормированиеЗаказов.ОкончаниеПериодаПотребности
	|	И (НЕ Заказы.Отменено)
	|	И Заказы.Ссылка В(&СписокДокументовДляОбновления)";
	
	Запрос.УстановитьПараметр("СписокДокументовДляОбновления", СписокДокументовДляОбновления);
	Запрос.УстановитьПараметр("ТаблицаФормированиеЗаказов", Объект.ФормированиеЗаказов.Выгрузить());
	
	ЗаказыНеВходятВПланы = Запрос.Выполнить().Пустой();
	СписокДокументовДляОбновления.Очистить();
	
	Возврат Не ЗаказыНеВходятВПланы;
	
КонецФункции

&НаСервере
Процедура ОтображатьЗаказыКОформлениюНаСервере()
	
	ОтображатьЗаказыКОформлению = Не ОтображатьЗаказыКОформлению;
	УстановитьВидимостьЭлементовФормы();
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКорзинуЗаказов()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	Колонки = "Склад, ПодразделениеИсполнитель";
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
		Колонки = Колонки + ", ЦеховаяКладовая";
	КонецЕсли;
	
	ТаблицаКорзинаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, Колонки + ", КоличествоУпаковок");
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок>0 Тогда
			Строка.КоличествоУпаковок = 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКорзинаЗаказов.Свернуть(Колонки, "КоличествоУпаковок");
	КорзинаЗаказов.Очистить();
	
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КорзинаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВсегоСтрок = Строка.КоличествоУпаковок;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
