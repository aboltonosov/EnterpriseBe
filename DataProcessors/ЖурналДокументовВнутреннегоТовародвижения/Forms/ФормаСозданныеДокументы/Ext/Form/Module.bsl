
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	УстановитьУсловноеОформление();
	//-- НЕ УТКА
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСписок();
	
	ОбъектыПечати = ПолучитьОбъектыПечати();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать, ОбъектыПечати);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьЗаголовок();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытьБезВопроса Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Принять и закрыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить и удалить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Выберите действие, которое необходимо произвести с созданными документами'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗакрытии", ЭтотОбъект), ТекстВопроса, Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВнутреннееПотреблениеТоваров"
		Или ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" 
		Или ИмяСобытия = "Запись_ПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_СборкаТоваров"
		Или ИмяСобытия = "Запись_ДвижениеПродукцииИМатериалов" Тогда
		
		ЗагрузитьСписок();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокСозданныеДокументы);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСозданныеДокументы();
	
	ЗакрытьБезВопроса = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныеДокументы()
	
	СсылкиНаУдаление = СписокДокументов.ВыгрузитьЗначения();
	
	ОбщегоНазначенияУТ.УдалитьДокументы(СсылкиНаУдаление);
	
	СписокСозданныеДокументы.Очистить();
	СписокДокументов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если СписокСозданныеДокументы.Количество() > 0 Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить сформированные документы'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'При переходе назад сформированные документы будут удалены.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	ЗакрытьБезВопроса = Истина;
	Оповестить("Принять_ФормаСозданныеДокументы");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокСозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗагрузитьСписок()
	
	СозданныеДокументы = ПрочитатьДанныеИзБезопасногоХранилища();
	
	Если ЗначениеЗаполнено(СозданныеДокументы) Тогда
		УдалитьДанныеИзБезопасногоХранилища();
	ИначеЕсли СписокДокументов.Количество() > 0 Тогда
		СозданныеДокументы = СписокДокументов.ВыгрузитьЗначения();
	Иначе
		ВызватьИсключение НСтр("ru='Произошла исключительная ситуация при создании документов.'");
		Отказ = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документы", СозданныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеВнутреннихДокументов.Ссылка,
	|	ДанныеВнутреннихДокументов.МестоХранения КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеВнутреннихДокументов.Ссылка ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДанныеВнутреннихДокументов.Ссылка КАК Документ.ПеремещениеТоваров).СкладПолучатель
	//++ НЕ УТ
	|		КОГДА ДанныеВнутреннихДокументов.Ссылка ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|			ТОГДА ВЫРАЗИТЬ(ДанныеВнутреннихДокументов.Ссылка КАК Документ.ПередачаМатериаловВПроизводство).Подразделение
	//-- НЕ УТ
	//++ НЕ УТКА
	|		КОГДА ДанныеВнутреннихДокументов.Ссылка ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеВнутреннихДокументов.Ссылка КАК Документ.ДвижениеПродукцииИМатериалов).Получатель
	//-- НЕ УТКА
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК Получатель,
	|	ДанныеВнутреннихДокументов.Организация,
	|	ДанныеВнутреннихДокументов.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеВнутреннихДокументов.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеВнутреннихДокументов.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК ДанныеВнутреннихДокументов
	|ГДЕ
	|	ДанныеВнутреннихДокументов.Ссылка В(&Документы)
	|	И НЕ ДанныеВнутреннихДокументов.ДополнительнаяЗапись";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокСозданныеДокументы.Загрузить(Результат);
	
	// Список применяется только при сценарии удаления документов.
	// Для реквизита формы отключены пользовательские редактирование и просмотр.
	СписокДокументов.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектыПечати()
	
	МассивОбъектовМетаданных = Новый Массив();
	Для Каждого Строка Из СписокСозданныеДокументы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Строка.Ссылка));
		МассивОбъектовМетаданных.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбъектовМетаданных);
	
	Возврат МассивОбъектовМетаданных;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовок() 
	
	КоличествоДокументов = СписокСозданныеДокументы.Количество();
	
	СклонениеСоздано = НСтр("ru = 'Создан, Создано, Создано'");
	Создано = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоДокументов, СклонениеСоздано);
	Создано = СтрЗаменить(Создано, КоличествоДокументов + " ", "");
	
	СклонениеДокументов = НСтр("ru = 'документ, документа, документов'");
	Документов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоДокументов, СклонениеДокументов);
	
	Заголовок = Создано + " " + Документов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НазадЗавершение(Ответ, Неопределено);
	Иначе
		ЗакрытьБезВопроса = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()

	ЕстьПолучатель = Ложь;
	ОтправительСклад = Ложь;
	ОтправительПодразделение = Ложь;
	
	Для каждого ДанныеСтроки Из СписокСозданныеДокументы Цикл
		
		Если НЕ ЕстьПолучатель Тогда
			ЕстьПолучатель = ЗначениеЗаполнено(ДанныеСтроки.Получатель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Склад) И ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады") Тогда
			ОтправительСклад = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.Склад) И ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ОтправительПодразделение = Истина;
		КонецЕсли;
		
		Если ОтправительСклад И ОтправительПодразделение Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтправительСклад И ОтправительПодразделение Тогда
		Элементы.СписокСозданныеДокументыСклад.Заголовок = НСтр("ru = 'Отправитель'");
	ИначеЕсли ОтправительПодразделение Тогда
		Элементы.СписокСозданныеДокументыСклад.Заголовок = НСтр("ru = 'Подразделение'");
	КонецЕсли; 
	
	Если НЕ ЕстьПолучатель Тогда
		Элементы.СписокСозданныеДокументыПолучатель.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#Область ОбеспечениеБезопасностиДанных

&НаСервереБезКонтекста
Функция ПрочитатьДанныеИзБезопасногоХранилища()
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ЗащищенныеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ВнутреннееТовародвижениеФормаСозданныеДокументы");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗащищенныеДанные
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьДанныеИзБезопасногоХранилища()
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, "ВнутреннееТовародвижениеФормаСозданныеДокументы");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ДвижениеПродукцииИМатериалов.УстановитьУсловноеОформлениеОперации(
			УсловноеОформление, 
			"СписокСозданныеДокументыХозяйственнаяОперация",
			"СписокСозданныеДокументы.ХозяйственнаяОперация");
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти