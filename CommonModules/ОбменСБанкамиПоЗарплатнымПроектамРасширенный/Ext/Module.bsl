////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен с банками по зарплатным проектам".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьИзмененияЛицевыхСчетов(ЛицевыеСчетаФизическихЛиц, Организация, ДатаНачала) Экспорт
	
	Если ЛицевыеСчетаФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(ЛицевыеСчетаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо"), Организация);
	
	ЗапрашиваемыеКадровыеДанные = "ФизическоеЛицо, ТекущаяОрганизация, ТекущееПодразделение";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, ЗапрашиваемыеКадровыеДанные, ДатаНачала);
	
	Для каждого ДанныеЛицевогоСчета Из ЛицевыеСчетаФизическихЛиц Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ФизическоеЛицо", ДанныеЛицевогоСчета.ФизическоеЛицо);
		СтрокиФизическогоЛица = КадровыеДанные.НайтиСтроки(Отбор);
		Для каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
			МестоВыплатыЗарплатыПодразделенияОрганизации = ВзаиморасчетыССотрудникамиРасширенный.МестоВыплатыЗарплатыПодразделенияОрганизации(
				СтрокаФизическогоЛица.ТекущееПодразделение);
			МестоВыплатыЗарплатыСотрудника = ВзаиморасчетыССотрудникамиРасширенный.МестоВыплатыЗарплатыСотрудника(
				СтрокаФизическогоЛица.Сотрудник, СтрокаФизическогоЛица.ФизическоеЛицо);
				Если МестоВыплатыЗарплатыПодразделенияОрганизации <> Неопределено 
					И МестоВыплатыЗарплатыПодразделенияОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект
					И МестоВыплатыЗарплатыСотрудника.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка() Тогда
					
				ИначеЕсли МестоВыплатыЗарплатыПодразделенияОрганизации <> Неопределено 
					И МестоВыплатыЗарплатыСотрудника.Вид <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект
					И МестоВыплатыЗарплатыПодразделенияОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					МестоВыплатыЗарплатыСотрудника.Вид = Неопределено;
					ВзаиморасчетыССотрудникамиРасширенный.ЗаписатьМестоВыплатыЗарплаты(МестоВыплатыЗарплатыСотрудника);
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сотруднику %1 установлено место выплаты по зарплатному проекту, как всему подразделению.'"),
						СтрокаФизическогоЛица.Сотрудник);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтрокаФизическогоЛица.Сотрудник);
					
				ИначеЕсли МестоВыплатыЗарплатыСотрудника.Вид <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По сотруднику %1 получено подтверждение открытия лицевого счета, но не установлено место выплаты по зарплатному проекту.'"),
						СтрокаФизическогоЛица.Сотрудник);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтрокаФизическогоЛица.Сотрудник);
					
				КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДеньВыплатыЗарплатыВОрганизации(Организация) Экспорт
	
	СтруктураСведений = Новый Структура;
	СтруктураСведений.Вставить("ДатаВыплатыЗарплатыНеПозжеЧем");
	СтруктураСведений.Вставить("ВыплачиватьЗарплатуВПоследнийДеньМесяца");
	
	СведенияОНастройкахОрганизации = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СведенияОНастройкахОрганизации(Организация, СтруктураСведений);
	Если СведенияОНастройкахОрганизации.ВыплачиватьЗарплатуВПоследнийДеньМесяца Тогда
		Возврат 31;
	Иначе
		Возврат СведенияОНастройкахОрганизации.ДатаВыплатыЗарплатыНеПозжеЧем;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьКадровыеДанные(КадровыеДанные, ТекстЗапроса) Экспорт
	
	КадровыеДанные = КадровыеДанные + ", ТелефонМобильный, ТелефонМобильныйПредставление";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
	|ИЗ", ",
	|	КадровыеДанныеСотрудников.ТелефонМобильный КАК НомерМобильногоТелефона,
	|	КадровыеДанныеСотрудников.ТелефонМобильныйПредставление КАК НомерМобильногоТелефонаПредставление
	|ИЗ");
	
КонецПроцедуры

Процедура ДополнитьОписаниеФиксацииРеквизитовЗаявкиНаОткрытиеЛицевыхСчетов(ОписаниеФиксацииРеквизитов) Экспорт
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиНомерМобильногоТелефона",
		Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ФиксацияОписаниеФиксацииРеквизита("НомерМобильногоТелефона", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиНомерМобильногоТелефонаПредставление",
		Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ФиксацияОписаниеФиксацииРеквизита("НомерМобильногоТелефонаПредставление", "ФизическоеЛицо"));
КонецПроцедуры

Процедура ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников) Экспорт
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
КонецПроцедуры

Процедура ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметров, АдресХранилища) Экспорт
	
	СтруктураПараметров.Вставить("МассивОписанийФайлов", Новый Массив);
	
	Если Не ОграничениеИспользованияДокументов.ЕстьОграниченныеДокументы(СтруктураПараметров.МассивДокументов) Тогда
		
		МетаданныеПлатежногоДокумента = ОбменСБанкамиПоЗарплатнымПроектам.МетаданныеПлатежногоДокументаПеречисленияЗарплаты();
		МассивПлатежныхДокументов = Новый Массив;
		МассивОбычныхДокументов = Новый Массив;
		
		Если СтруктураПараметров.МассивДокументов.Количество() > 0 Тогда
			Для каждого ДокументМассива Из СтруктураПараметров.МассивДокументов Цикл
				МетаданныеДокумента = ДокументМассива.Метаданные();
				Если (МетаданныеПлатежногоДокумента = Неопределено
					Или МетаданныеДокумента.ПолноеИмя() <> МетаданныеПлатежногоДокумента.ПолноеИмя()) Тогда
					МассивОбычныхДокументов.Добавить(ДокументМассива);
				Иначе
					МассивПлатежныхДокументов.Добавить(ДокументМассива);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивОбычныхДокументов.Количество() > 0 Тогда
			
			СтруктураПараметров.Вставить("МассивДокументов", МассивОбычныхДокументов);
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(МассивОбычныхДокументов[0]);
			МенеджерОбъекта.ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметров);
			
			Если ПолучитьФункциональнуюОпцию("АвтоматическиОграничиватьИспользованиеДокументов")
				И СтруктураПараметров.Свойство("ДанныеДокументов") И СтруктураПараметров.ДанныеДокументов.Количество() > 0 Тогда
				ОграничениеИспользованияДокументов.ОграничитьДокументыПослеВыгрузки(МассивОбычныхДокументов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивПлатежныхДокументов.Количество() > 0 Тогда
			
			Для каждого ПлатежныйДокумент Из МассивПлатежныхДокументов Цикл
				
				СтруктураПараметров.Вставить("МассивДокументов", ОбменСБанкамиПоЗарплатнымПроектам.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент));
				СтруктураПараметров.Вставить("ПлатежныйДокумент", ПлатежныйДокумент);
				Документы.ВедомостьНаВыплатуЗарплатыВБанк.ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметров);
				
				Если ПолучитьФункциональнуюОпцию("АвтоматическиОграничиватьИспользованиеДокументов")
					И СтруктураПараметров.Свойство("ДанныеДокументов") И СтруктураПараметров.ДанныеДокументов.Количество() > 0 Тогда
					ОграничениеИспользованияДокументов.ОграничитьДокументыПослеВыгрузки(МассивПлатежныхДокументов);
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров.МассивОписанийФайлов, АдресХранилища);
	
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

Процедура СформироватьДвиженияПоДокументамОплаты(ДокументОплаты) Экспорт
	
	// Регистрация выдачи зарплаты.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		
		ВедомостьОбъект = ДокументОплаты.ПолучитьОбъект();
		
		Отказ = Ложь;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ДокументОплаты);
		ВзаиморасчетыССотрудниками.СоздатьВТДанныеВедомостейДляОплатыДокументом(Запрос.МенеджерВременныхТаблиц, Истина, ДокументОплаты, Ведомости, Неопределено, Ложь);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОплачиваемыеДанныеВедомостей.Ведомость,
		|	ОплачиваемыеДанныеВедомостей.ФизическоеЛицо,
		|	ОплачиваемыеДанныеВедомостей.СуммаКВыплате КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	ВТДанныеВедомостейДляОплатыДокументом КАК ОплачиваемыеДанныеВедомостей";
		
		ОплатаВедомостей = Запрос.Выполнить();
		
		УчетНДФЛ.РассчитатьИЗарегистрироватьУдержанныеНалоги(
			ДокументОплаты, 
			ВедомостьОбъект.Движения, 
			Отказ, 
			ВедомостьОбъект.Организация,
			ВедомостьОбъект.Дата, 
			Запрос.МенеджерВременныхТаблиц,
			Ложь);
		
		Если ВедомостьОбъект.ПеречислениеНДФЛВыполнено Тогда
			УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(ВедомостьОбъект.Движения, Отказ,
					ВедомостьОбъект.Организация, ВедомостьОбъект.Дата, ВедомостьОбъект.ПеречислениеНДФЛРеквизиты);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Для каждого КоллекцияДвижения Из ВедомостьОбъект.Движения Цикл
				КоллекцияДвижения.ОбменДанными.Загрузка = Истина;
			КонецЦикла;
			ВедомостьОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
