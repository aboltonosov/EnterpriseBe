
#Область ПрограммныйИнтерфейс

// Метод для вызова из регламентного задания отражения в регл. учете
Процедура ОтразитьВсеРегламент() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УчетНДСУТ.СформироватьЗаписиКнигиПокупокПродаж(КонецМесяца(ТекущаяДата()));
	ОтразитьВсе(КонецДня(ТекущаяДата()));
	
КонецПроцедуры

// Метод для вызова в фоне отражения в регл. учете
Процедура ОтразитьВсеВФоне(Параметры, АдресХранилища) Экспорт
	
	ДанныеПоОтражениюВУчете = ИнициализироватьДанныеПоОтражениюВУчете();
	
	УчетНДСУТ.СформироватьЗаписиКнигиПокупокПродаж(КонецМесяца(Параметры.ПериодРасчета), Параметры.Организация);
	ОтразитьВсе(
		КонецДня(Параметры.ПериодРасчета), 
		Параметры.Организация, 
		ДанныеПоОтражениюВУчете);
		
	ПоместитьВоВременноеХранилище(ДанныеПоОтражениюВУчете, АдресХранилища);
	
КонецПроцедуры

// Метод инициализирует дополнительную информацию по отражению документов в регл. учете (сколько отражено, количество ошибок)
//
//	Возвращаемое значение:
//		Структура - содержит результирующие данные по количеству отраженных документов в регламентированном учете:
//			* Отражено - Число - количество отраженных в учете документов.
//			* НеУказаныСчетаУчета - Число - количество документов, которые не были отражены в результате ненастроенных счетов учета.
//			* ОшибкиПриОтражении - Число - количество документов, которые не были отражены в результате прочих ошибок при отражении.
//
Функция ИнициализироватьДанныеПоОтражениюВУчете() Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Отражено", 0);
	СтруктураРезультата.Вставить("НеУказаныСчетаУчета", 0);
	СтруктураРезультата.Вставить("ОшибкиПриОтражении", 0);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Формирует движения по регистру Хозрасчетный для всех документов, помеченных к отражению в регламентированном учете.
//
// Параметры:
// 	ПериодРасчета - Дата - Дата, по которую документы необходимо отразить в учете
// 	Организация - СправочникСсылка.Организации, Неопределено - Организация, по которой необходимо отразить документы в учете.
// 																Если Неопределено, то по всем организациям.
//	ДанныеПоОтражениюВУчете - Структура - (см. функцию "ИнициализироватьДанныеПоОтражениюВУчете")
//		содержит результирующие данные по количеству отраженных документов в регламентированном учете:
// 		* Отражено - Число - в значение параметра устанавливается количество отраженных в учете документов
// 		* НеУказаныСчетаУчета - Число - в значение параметра устанавливается количество документов, 
// 											которые не удалось отразить в учете из-за ненастроенных счетов учета. 
// 		*ОшибкиПриОтражении - Число - в значение параметра устанавливается количество документов при отражении которых возникли ошибки.
//
Процедура ОтразитьВсе(ПериодРасчета, Организация = Неопределено, ДанныеПоОтражениюВУчете = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоОтражениюВУчете = Неопределено Тогда
		ДанныеПоОтражениюВУчете = ИнициализироватьДанныеПоОтражениюВУчете();
	КонецЕсли;
	
	ВременныеТаблицы = ВременныеТаблицы();
	
	// Отразим документы пакетно
	ТипыДокументов = ТипыДокументовКПакетномуОтражению(ПериодРасчета, Организация);
	Для каждого ТипДокумента Из ТипыДокументов Цикл
		Результат = ОтразитьДокументыПакетноСЗамеромВремени(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета);
		ДанныеПоОтражениюВУчете.Отражено = ДанныеПоОтражениюВУчете.Отражено + Результат.КоличествоОтраженоВУчете;
		ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета = ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета + Результат.КоличествоНеУказаныСчетаУчета;
		ДанныеПоОтражениюВУчете.ОшибкиПриОтражении = ДанныеПоОтражениюВУчете.ОшибкиПриОтражении + Результат.КоличествоОшибкиПриОтражении;
	КонецЦикла;
	
	// Отразим документы последовательно
	Результат = ОтразитьДокументыПоследовательноСЗамеромВремени(ВременныеТаблицы, Организация, ПериодРасчета);
	ДанныеПоОтражениюВУчете.Отражено = ДанныеПоОтражениюВУчете.Отражено + Результат.КоличествоОтраженоВУчете;
	ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета = ДанныеПоОтражениюВУчете.НеУказаныСчетаУчета + Результат.КоличествоНеУказаныСчетаУчета;
	ДанныеПоОтражениюВУчете.ОшибкиПриОтражении = ДанныеПоОтражениюВУчете.ОшибкиПриОтражении + Результат.КоличествоОшибкиПриОтражении;
	
	ВременныеТаблицы.Закрыть();
	
	Если ДанныеПоОтражениюВУчете.ОшибкиПриОтражении > 0 Тогда
		ВызватьИсключение НСтр("ru = 'При отражении документов в регл. учете возникли ошибки. Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру Хозрасчетный для указанных документов
//
// Параметры:
//    МассивДокументов - Массив - Документы
//    ВыполнитьПересчеты - Булево - Признак, что перед отражением документа необходимо выполнить отражение в учете НДС и распределение взаиморасчетов.
//
// Возвращаемое значение:
//    Массив - Документы, которые не удалось отразить в регл. учете
//
Функция ОтразитьДокументыВРеглУчете(МассивДокументов, ВыполнитьПересчеты = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НеотраженныеДокументы = Новый Массив;
	
	Если ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(МассивДокументов);
	КонецЕсли;
	
	ВременныеТаблицы = ВременныеТаблицы();
	
	// Отразим документы пакетно
	ТипыДокументов = ТипыДокументовКПакетномуОтражению(, , МассивДокументов);
	Для каждого ТипДокумента Из ТипыДокументов Цикл
		Пока СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, , , МассивДокументов, НеотраженныеДокументы) Цикл
			Результат = ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотраженныеДокументы, Результат.НеУказаныСчетаУчета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотраженныеДокументы, Результат.ОшибкиПриОтражении);
		КонецЦикла;
	КонецЦикла;
	
	// Отразим документы последовательно
	Выборка = ДокументыКПоследовательномуОтражению(, , МассивДокументов);
	Если Не Выборка = Неопределено Тогда
		Пока Выборка.Следующий() Цикл
			ТипДокумента = ТипЗнч(Выборка.Ссылка);
			Если СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, , , Выборка.Ссылка) Тогда
				Результат = ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотраженныеДокументы, Результат.НеУказаныСчетаУчета);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеотраженныеДокументы, Результат.ОшибкиПриОтражении);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВременныеТаблицы.Закрыть();
	
	Возврат НеотраженныеДокументы;
	
КонецФункции

// Формирует движения по регистру Хозрасчетный для указанных документов
//
// Параметры:
//    МассивДокументов - Массив - Документы
//
// Возвращаемое значение:
//    Массив - Документы, которые не удалось отразить в регл. учете
//
Функция ОтразитьДокументыВРеглУчетеПриПечати(МассивДокументов) Экспорт
	
	Возврат ОтразитьДокументыВРеглУчете(МассивДокументов, Истина);
	
КонецФункции

// Формирует движения по регистру Хозрасчетный для указанного документа. Аналог "ОтразитьДокумент", вызываемый для фоновых операций.
//
// Параметры:
// 	ПараметрыОтражения - Структура - Параметры отражения
// 		*РеквизитыДокумента - Структура - реквизиты документа
// 			** Ссылка - ДокументСсылка - ссылка на документ
// 			** Дата - Дата - Дата документа
// 			** Организация - СправочникСсылка.Организации - Организация документа
//		* ВыполнитьПересчеты - Булево - Если истина, запускает актуализацию взаиморасчетов с партнерами
// 	АдресРезультата - Строка - Адрес временного хранилища для помещения результата
//
Процедура ОтразитьДокументВФоне(ПараметрыОтражения, АдресРезультата) Экспорт
	
	Статус = ОтразитьДокумент(ПараметрыОтражения.РеквизитыДокумента, ПараметрыОтражения.ВыполнитьПересчеты);
	
	ПоместитьВоВременноеХранилище(Статус, АдресРезультата);
	
КонецПроцедуры

// Формирует движения по регистру Хозрасчетный для указанного документа.
//
// Параметры:
// 	РеквизитыДокумента - Структура - реквизиты документа
// 		* Ссылка - ДокументСсылка - ссылка на документ
// 		* Дата - Дата - Дата документа
// 		* Организация - СправочникСсылка.Организации - Организация документа
// 	ВыполнитьПересчеты - Булево - Признак необходимости выполнить пересчеты
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Поставляемый внешний менеджер временных таблиц
//
// Возвращаемое значение:
//    Статус - ПеречислениеСсылка.СтатусыОтраженияДокументовВРеглУчете - Статус отражения документа в учете
//
Функция ОтразитьДокумент(РеквизитыДокумента, ВыполнитьПересчеты = Ложь, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	ТипДокумента = ТипЗнч(РеквизитыДокумента.Ссылка);
	Статусы = Перечисления.СтатусыОтраженияДокументовВРеглУчете;
	ДатаДокументаНеПодлежитОтражению = РеквизитыДокумента.Дата < Константы.ДатаНачалаВеденияРеглУчета.Получить()
		И Не ТипДокумента = Тип("ДокументСсылка.ВводОстатков")
		И Не ТипДокумента = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов")
		И Не ТипДокумента = Тип("ДокументСсылка.ОперацияБух");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат Статусы.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РеквизитыДокумента.Организация = Справочники.Организации.УправленческаяОрганизация Тогда
		Возврат ?(ДатаДокументаНеПодлежитОтражению, Статусы.ПустаяСсылка(), Статусы.ОтраженоВРеглУчете);
	КонецЕсли;
	
	Если ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(РеквизитыДокумента.Ссылка);
	КонецЕсли;
	
	ВременныеТаблицы = ВременныеТаблицы(МенеджерВременныхТаблиц); 
	
	Если НЕ СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, , , РеквизитыДокумента.Ссылка) Тогда
		Возврат ?(ДатаДокументаНеПодлежитОтражению, Статусы.ПустаяСсылка(), Статусы.ОтраженоВРеглУчете);
	КонецЕсли;
	
	РезультатОтражения = ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы);
	ВременныеТаблицы.Закрыть();
	
	Если РезультатОтражения.ОтраженоВУчете.Количество() = 1 Тогда
		Статус = Статусы.ОтраженоВРеглУчете;
	Иначе
		Статус = Статусы.НеУказаныСчетаУчета;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Записывает движения по регистру ОтражениеДокументаВРеглУчете, выполняет очистку неактуальных записей в Хозрасчетный.
// Вызывается из обработки проведения документов.
//
// Параметры:
// 	Объект - ДокументОбъект - документ, который необходимо зарегистрировать к отражению
// 	ДополнительныеСвойства - Структура - содержит доп. параметры регистрации:
// 								* НеРегистрироватьКОтражениюВРеглУчете - Булево - Признак того, что документ не надо регистрировать к отражению.
// 								* ТаблицаОтражениеДокументовВРеглУчете - ТаблицаЗначений - Готовая таблица регистрации.
// 								* ВыборочнаяРегистрацияКОтражениюВРеглУчете - Булево - Признак того, то регистрацию к отражению необходимо выполнить только в выбранных периодах/организациях.
// 								* ТаблицаВыборочнойРегистрации - ТаблицаЗначений - Таблица с разрезами выборочной регистрации.
//
Процедура ЗарегистрироватьКОтражению(Объект, ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Если Отказ ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
	 	Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеРегистрироватьКОтражениюВРеглУчете") 
		 И ДополнительныеСвойства.НеРегистрироватьКОтражениюВРеглУчете Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияХозрасчетный = Движения.Хозрасчетный;
	ДвиженияХозрасчетный.ДополнительныеСвойства.Вставить("НеВыполнятьДопОбработкуПроводок", Истина);
	ДвиженияХозрасчетный.Записывать = Истина;
	
	ДвиженияОтражениеДокументовВРеглУчете = Движения.ОтражениеДокументовВРеглУчете;
	ДвиженияОтражениеДокументовВРеглУчете.Записывать = Истина;
	
	ТаблицаДанные = Новый ТаблицаЗначений;
	ТаблицаДанные.Колонки.Добавить("Период",         Новый ОписаниеТипов("Дата"));
	ТаблицаДанные.Колонки.Добавить("Организация",    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанные.Колонки.Добавить("ДатаОтражения",  Новый ОписаниеТипов("Дата"));
	ТаблицаДанные.Колонки.Добавить("Статус",         Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОтраженияДокументовВРеглУчете"));
	
	ТаблицаОтражениеДокументовВРеглУчете = Неопределено;
	ПереданаТаблицаОтражениеДокументовВРеглУчете = 
			ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОтражениеДокументовВРеглУчете", ТаблицаОтражениеДокументовВРеглУчете)
			ИЛИ ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ОтражениеДокументовВРеглУчете", ТаблицаОтражениеДокументовВРеглУчете);
	
	Если ПереданаТаблицаОтражениеДокументовВРеглУчете  Тогда 
		// В модуле менеджера была подготовлена таблица данных для регистрации.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаОтражениеДокументовВРеглУчете, 
			ТаблицаДанные);
	Иначе
		// Документ регистрируется общим порядком:
		// - датой документа
		// - по организации документа.
		НоваяСтрока = ТаблицаДанные.Добавить();
		НоваяСтрока.Период         = Объект.Дата;
		НоваяСтрока.Организация    = Объект.Организация;
		НоваяСтрока.ДатаОтражения  = НачалоДня(Объект.Дата);
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	НачалоОтраженияВРеглУчете = Константы.ДатаНачалаВеденияРеглУчета.Получить();
	Для каждого Строка Из ТаблицаДанные Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаОтражения) Тогда
			Строка.ДатаОтражения = НачалоДня(Строка.Период);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.Статус) Тогда
			Строка.Статус = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете;
		КонецЕсли;
		Если Строка.Организация = Справочники.Организации.УправленческаяОрганизация
			ИЛИ (Строка.ДатаОтражения < НачалоОтраженияВРеглУчете
			И Не ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков")
			И Не ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов")
			И Не ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияБух")) Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		ТаблицаДанные.Удалить(Строка);
	Конеццикла;
	
	ВыборочнаяРегистрацияКОтражениюВРеглУчете = 
		ДополнительныеСвойства.Свойство("ВыборочнаяРегистрацияКОтражениюВРеглУчете")
		И ДополнительныеСвойства.ВыборочнаяРегистрацияКОтражениюВРеглУчете;
	ИспользуетсяРучнаяКорректировкаПроводок = ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету");
	
	Если НЕ ИспользуетсяРучнаяКорректировкаПроводок И НЕ ВыборочнаяРегистрацияКОтражениюВРеглУчете Тогда
		ДвиженияОтражениеДокументовВРеглУчете.Загрузить(ТаблицаДанные);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Период         КАК Период,
	|	ТаблицаДанных.Организация    КАК Организация,
	|	ТаблицаДанных.ДатаОтражения  КАК ДатаОтражения
	|ПОМЕСТИТЬ НовыеДанные
	|ИЗ
	|	&ТаблицаДанные КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыборочнойРегистрации.Организация    КАК Организация,
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ДанныеКОтражению
	|ИЗ
	|	&ТаблицаВыборочнойРегистрации КАК ТаблицаВыборочнойРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Организация    КАК Организация,
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Статус         КАК Статус,
	|	ОтражениеДокументов.Комментарий    КАК Комментарий
	|ПОМЕСТИТЬ ТекущиеСтатусы
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеДанные.Период КАК Период,
	|	НовыеДанные.Организация КАК Организация,
	|	НовыеДанные.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ДанныеКОтражению.ДатаОтражения ЕСТЬ NULL И НЕ ТекущиеСтатусы.Статус ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Статус
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА &КОтражениюВУчетеВручную
	|		ИНАЧЕ &КОтражениюВРеглУчете
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ДанныеКОтражению.ДатаОтражения ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий
	|ПОМЕСТИТЬ НовыеСтатусы
	|ИЗ
	|	НовыеДанные КАК НовыеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТекущиеСтатусы КАК ТекущиеСтатусы
	|	ПО 
	|		НовыеДанные.Организация = ТекущиеСтатусы.Организация
	|		И НовыеДанные.ДатаОтражения = ТекущиеСтатусы.ДатаОтражения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ДанныеКОтражению КАК ДанныеКОтражению
	|	ПО 
	|		НовыеДанные.Организация = ДанныеКОтражению.Организация	
	|		И НовыеДанные.ДатаОтражения = ДанныеКОтражению.ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ИзмененияСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ДатаОтражения КАК ДатаОтражения,
	|		Таблица.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВРеглУчете
	|				ТОГДА 1
	|			КОГДА Таблица.Статус = &ОтраженоВРеглУчете
	|				ТОГДА 2
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		НовыеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВРеглУчете, &ОтраженоВРеглУчете)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ДатаОтражения,
	|		Таблица.Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВРеглУчете
	|				ТОГДА -1
	|			КОГДА Таблица.Статус = &ОтраженоВРеглУчете
	|				ТОГДА -2
	|		КОНЕЦ
	|	ИЗ
	|		ТекущиеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВРеглУчете, &ОтраженоВРеглУчете)) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ДатаОтражения,
	|	Таблица.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Статус) <> 0
	|;
	|
	|ВЫБРАТЬ
	|	НовыеСтатусы.Период          КАК Период,
	|	НовыеСтатусы.Организация     КАК Организация,
	|	НовыеСтатусы.ДатаОтражения  КАК ДатаОтражения,
	|	НовыеСтатусы.Статус          КАК Статус,
	|	НовыеСтатусы.Комментарий     КАК Комментарий
	|ИЗ
	|	НовыеСтатусы КАК НовыеСтатусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Период                                       КАК Период,
	|	Хозрасчетный.Организация                                  КАК Организация,
	|	
	|	Хозрасчетный.ПодразделениеДт                              КАК ПодразделениеДт,
	|	Хозрасчетный.НаправлениеДеятельностиДт                    КАК НаправлениеДеятельностиДт,
	|	Хозрасчетный.СчетДт                                       КАК СчетДт,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоДт1, &ПустойВидСубконто) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоДт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт1,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоДт2, &ПустойВидСубконто) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоДт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт2,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоДт3, &ПустойВидСубконто) КАК ВидСубконтоДт3,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоДт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт3,
	|	Хозрасчетный.ВалютаДт                                     КАК ВалютаДт,
	|	Хозрасчетный.ВалютнаяСуммаДт                              КАК ВалютнаяСуммаДт,
	|	Хозрасчетный.КоличествоДт                                 КАК КоличествоДт,
	|	
	|	Хозрасчетный.ПодразделениеКт                              КАК ПодразделениеКт,
	|	Хозрасчетный.НаправлениеДеятельностиКт                    КАК НаправлениеДеятельностиКт,
	|	Хозрасчетный.СчетКт                                       КАК СчетКт,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоКт1, &ПустойВидСубконто) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоКт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт1,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоКт2, &ПустойВидСубконто) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоКт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт2,
	|	ЕСТЬNULL(Хозрасчетный.ВидСубконтоКт3, &ПустойВидСубконто) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(Хозрасчетный.СубконтоКт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт3,
	|	Хозрасчетный.ВалютаКт                                     КАК ВалютаКт,
	|	Хозрасчетный.ВалютнаяСуммаКт                              КАК ВалютнаяСуммаКт,
	|	Хозрасчетный.КоличествоКт                                 КАК КоличествоКт,
	|	
	|	Хозрасчетный.Сумма                                        КАК Сумма,
	|	Хозрасчетный.СуммаНУДт                                    КАК СуммаНУДт,
	|	Хозрасчетный.СуммаНУКт                                    КАК СуммаНУКт,
	|	Хозрасчетный.СуммаПРДт                                    КАК СуммаПРДт,
	|	Хозрасчетный.СуммаПРКт                                    КАК СуммаПРКт,
	|	Хозрасчетный.СуммаВРДт                                    КАК СуммаВРДт,
	|	Хозрасчетный.СуммаВРКт                                    КАК СуммаВРКт,
	|	
	|	Хозрасчетный.Содержание                                   КАК Содержание,
	|	Хозрасчетный.НеКорректироватьСтоимостьАвтоматически       КАК НеКорректироватьСтоимостьАвтоматически
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(,,Регистратор = &Ссылка,,) КАК Хозрасчетный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИзмененияСтатусов КАК ИзмененияСтатусов
	|	ПО
	|		Хозрасчетный.Организация = ИзмененияСтатусов.Организация
	|		И НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) = ИзмененияСтатусов.ДатаОтражения
	|ГДЕ
	|	ИзмененияСтатусов.Организация ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаДанные",    ТаблицаДанные);
	Запрос.УстановитьПараметр("Ссылка",             Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустойВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ОтраженоВРеглУчете",      Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете);
	Запрос.УстановитьПараметр("КОтражениюВРеглУчете",    Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете);
	Запрос.УстановитьПараметр("ОтраженоВУчетеВручную",   Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную);
	Запрос.УстановитьПараметр("КОтражениюВУчетеВручную", Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную);
	
	Если ВыборочнаяРегистрацияКОтражениюВРеглУчете Тогда
		Запрос.УстановитьПараметр("ТаблицаВыборочнойРегистрации",  
			ДополнительныеСвойства.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаВыборочнойРегистрации", ТаблицаДанные);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	Количество = Результат.Количество();
	
	Хозрасчетный  = Результат[Количество - 1].Выгрузить();
	ДвиженияХозрасчетный.Загрузить(Хозрасчетный);
	
	ТаблицаДанные = Результат[Количество - 2].Выгрузить();
	ДвиженияОтражениеДокументовВРеглУчете.Загрузить(ТаблицаДанные);
	
КонецПроцедуры

// Возвращает документы к отражению в регл. учете
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗачений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временых таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна имееть колонки Документ, Организация, ДатаОтражения. 
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Если ТипЗнч(ДокументыКОтражению) = Тип("ТаблицаЗначений") Тогда
		Если ДокументыКОтражению.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Документ КАК Документ,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	&ДокументыКОтражению КАК ДокументыКОтражению
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ,
		|	Организация,
		|	ДатаОтражения
		|;
		|/////////////////////////////////////////////////
		|";
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
	Иначе
		Запрос.МенеджерВременныхТаблиц = ДокументыКОтражению;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Документ КАК Документ
	|ПОМЕСТИТЬ ТолькоДокументыКОтражению
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ГДЕ
	|	НЕ ДокументыКОтражению.Документ ССЫЛКА Документ.КорректировкаРегистров
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|    ОтражениеДокументовВРеглУчете.Период КАК Период,
	|    ОтражениеДокументовВРеглУчете.Регистратор КАК Регистратор,
	|    ОтражениеДокументовВРеглУчете.Организация КАК Организация,
	|    ОтражениеДокументовВРеглУчете.ДатаОтражения КАК ДатаОтражения,
	|    ОтражениеДокументовВРеглУчете.Статус,
	|    ОтражениеДокументовВРеглУчете.Комментарий
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|    РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТолькоДокументыКОтражению КАК ДокументыКОтражению
	|		ПО (ДокументыКОтражению.Документ = ОтражениеДокументовВРеглУчете.Регистратор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|    Регистратор,
	|    Организация,
	|    ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Документ                  КАК Документ,
	|	МИНИМУМ(ЕстьNULL(ОтражениеДокументовВРеглУчете.Период, ДокументыКОтражению.ДатаОтражения)) КАК Период
	|ПОМЕСТИТЬ ПериодыРегистрации
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаРегистра КАК ОтражениеДокументовВРеглУчете
	|	ПО
	|		ДокументыКОтражению.Документ = ОтражениеДокументовВРеглУчете.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Документ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументыКОтражению.Документ
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВРеглУчете.Период         КАК Период,
	|	ОтражениеДокументовВРеглУчете.Регистратор    КАК Регистратор,
	|	ОтражениеДокументовВРеглУчете.Организация    КАК Организация,
	|	ОтражениеДокументовВРеглУчете.ДатаОтражения  КАК ДатаОтражения,
	|	ВЫБОР 
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВРеглУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|			КОНЕЦ
	|		ИНАЧЕ ОтражениеДокументовВРеглУчете.Статус
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВРеглУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ОтражениеДокументовВРеглУчете.Комментарий
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|		ИНАЧЕ ОтражениеДокументовВРеглУчете.Комментарий
	|	КОНЕЦ КАК Комментарий
	|ИЗ
	|	ТаблицаРегистра КАК ОтражениеДокументовВРеглУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДокументыКОтражению.Документ = ОтражениеДокументовВРеглУчете.Регистратор
	|		И ДокументыКОтражению.Организация = ОтражениеДокументовВРеглУчете.Организация
	|		И ДокументыКОтражению.ДатаОтражения = ОтражениеДокументовВРеглУчете.ДатаОтражения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ОтражениеДокументовВРеглУчете.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И (ОтражениеДокументовВРеглУчете.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|			ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ОперацияБух)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыРегистрации.Период          КАК Период,
	|	ДокументыКОтражению.Документ       КАК Регистратор,
	|	ДокументыКОтражению.Организация    КАК Организация,
	|	ДокументыКОтражению.ДатаОтражения  КАК ДатаОтражения,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете) КАК Статус,
	|	"""" КАК Комментарий
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаРегистра КАК ОтражениеДокументовВРеглУчете
	|	ПО
	|		ДокументыКОтражению.Документ = ОтражениеДокументовВРеглУчете.Регистратор
	|		И ДокументыКОтражению.Организация = ОтражениеДокументовВРеглУчете.Организация
	|		И ДокументыКОтражению.ДатаОтражения = ОтражениеДокументовВРеглУчете.ДатаОтражения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПериодыРегистрации КАК ПериодыРегистрации
	|	ПО
	|		ДокументыКОтражению.Документ = ПериодыРегистрации.Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	ДокументыКОтражению.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) <> ТИП(Документ.КорректировкаРегистров)
	|	И ОтражениеДокументовВРеглУчете.Регистратор ЕСТЬ NULL
	|	И (ДокументыКОтражению.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) = ТИП(Документ.ВводОстатков)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) = ТИП(Документ.ОперацияБух))
	|	
	|ИТОГИ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыРегистрации;
	|//////////////////////////////////
	|УНИЧТОЖИТЬ ТолькоДокументыКОтражению;
	|//////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТипыОтражаемыеВУчете = Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.СтандартныеРеквизиты.Регистратор.Тип;
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Если ТипыОтражаемыеВУчете.СодержитТип(ТипЗнч(ВыборкаПоДокументам.Регистратор)) Тогда
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
			Выборка = ВыборкаПоДокументам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает движения по регистру ПорядокОтраженияПрочихОпераций. 
// Оставлена для совместимости со старым подходом настройки отражения прочих операций.
// 
// Параметры:
// 	 ДополнительныеСвойства - Структура - Содержит таблицу с порядком регистрации прочих операций.
// 	 Отказ - Булево - Отказ проведения документа
//
Процедура ОтразитьПорядокОтраженияПрочихОпераций(ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ДополнительныеСвойства.ДляПроведения.Ссылка;
	
	ТаблицаПорядокОтраженияПрочихОпераций = Неопределено;
	Если Не ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПорядокОтраженияПрочихОпераций", ТаблицаПорядокОтраженияПрочихОпераций)
		И Не ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ПорядокОтраженияПрочихОпераций", ТаблицаПорядокОтраженияПрочихОпераций) Тогда
		Возврат;
	КонецЕсли;
	
	// Если параметры отражения заданы в документе (списание безналичных ДС),
	// то ТаблицаПорядокОтраженияПрочихОпераций содержит готовые данные для отражения.
	Если ДополнительныеСвойства.Свойство("ПараметрыОтраженияВРеглУчете") Тогда
		
		ПараметрыОтраженияВРеглУчете = ТаблицаПорядокОтраженияПрочихОпераций;
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Операция.Документ,
		|	Операция.ИдентификаторСтроки,
		|	Операция.Организация,
		|	Операция.Дата
		|ПОМЕСТИТЬ
		|	Операция
		|ИЗ &Таблица КАК Операция;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Операция.Документ,
		|	Операция.ИдентификаторСтроки,
		|	Операция.Организация,
		|   Операция.Дата,
		|	Счета.СчетУчета КАК СчетУчета,
		|	Счета.Субконто1 КАК Субконто1,
		|	Счета.Субконто2 КАК Субконто2,
		|	Счета.Субконто3 КАК Субконто3
		|ИЗ
		|	Операция
		|	ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияПрочихОпераций КАК Счета
		|		ПО Счета.Документ = Операция.Документ И Счета.ИдентификаторСтроки = Операция.ИдентификаторСтроки
		|ГДЕ
		|	НЕ Операция.Документ ЕСТЬ NULL
		|");
		Запрос.УстановитьПараметр("Таблица", ТаблицаПорядокОтраженияПрочихОпераций);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		ПараметрыОтраженияВРеглУчете = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПорядокОтраженияПрочихОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Загрузить(ПараметрыОтраженияВРеглУчете);
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Проверяет переданные документы на факт отражения ОтразитьДокументв регл. учете при наличии прав на формирование проводок
//
// Параметры:
//    МассивДокументов - Массив - Документы
//
// Возвращаемое значение:
//    Массив - Документы, которые не отражены в регл. учете
//
Функция ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(МассивДокументов) Экспорт
	
	Если ПравоДоступа("Редактирование", Метаданные.РегистрыБухгалтерии.Хозрасчетный)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат НеотраженныеВРеглУчетеДокументы(МассивДокументов);
	Иначе
		Возврат Новый Массив;
	КонецЕСли;
	
КонецФункции

// Получает результат отражения в регл. учете. Результат помещаяется во временное хранилище.
//
// Параметры:
//		ПараметрыОтражения - Структура - параметров отражения, где:
//			* Ссылка - ДокументСсылка - документ, для которого надо получить таблицу проводок;
//			* Дата - дата документа;
//			* Организация - ОрганизацияСсылка - организация, по которой получается таблица проводок;
//			* ВыполнитьПересчеты - булево, флажок о том, необходимо ли перед формированием проводок выполнять оффлайновые пересчеты по документу
// 		АдресРезультата - Строка - Адрес временного хранилища для помещения результата
//
Процедура ВернутьРезультатОтраженияДокумента(ПараметрыОтражения, АдресРезультата) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		СтруктураВозврата = Новый Структура("ТаблицаПроводок, КомментарийОшибки", Новый ТаблицаЗначений, "");
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОтражения.ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(ПараметрыОтражения.Ссылка);
	КонецЕсли;
	
	ВременныеТаблицы = ВременныеТаблицы();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор                  КАК Ссылка,
	|	Данные.Период                       КАК Период,
	|	Данные.Организация                  КАК Организация,
	|	Данные.ДатаОтражения               КАК ДатаОтражения
	|ПОМЕСТИТЬ РазрезыКОтражению
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Данные.Регистратор = &Ссылка
	|	И (Данные.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ОперацияБух)
	|;
	|
	|//////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазрезыКОтражению.Ссылка КАК Ссылка,
	|	РазрезыКОтражению.Период КАК Период
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	РазрезыКОтражению КАК РазрезыКОтражению
	|";
	Запрос.УстановитьПараметр("Ссылка",            ПараметрыОтражения.Ссылка);
	Запрос.Выполнить();
	
	ТипДокумента = ТипЗнч(ПараметрыОтражения.Ссылка);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Результат = ВыборкиОтраженияДокументов(ИмяДокумента, ВременныеТаблицы);
	
	СтруктураВозврата = Новый Структура("ТаблицаПроводок, КомментарийОшибки, СтатусОтражения");
	
	Если Результат.ВыборкаСтатусов.Следующий() Тогда
		
		Результат.ВыборкаХозрасчетный.Следующий();
		СтруктураВозврата.ТаблицаПроводок = ТаблицаПроводок();
		ДобавитьСтрокиВТаблицуПроводок(СтруктураВозврата.ТаблицаПроводок, Результат.ВыборкаХозрасчетный);
		СтруктураВозврата.КомментарийОшибки = "";
		СтруктураВозврата.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете;
		
		Если Результат.ВыборкаПроверки.Следующий() Тогда
			СтруктураВозврата.КомментарийОшибки = КомментарийОшибокЗаполнения(Результат.ВыборкаПроверки);
			СтруктураВозврата.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	ВременныеТаблицы.Закрыть();
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

// Записывает статус отражения документа в регистре сведений "ОтражениеДокументовВРеглУчете" как ОтраженоВУчетеВручную.
//
//	Параметры:
//		Документ - ДокументСсылка - ссылка на документ, для которого должен быть записан статус ручного отражения. Если ссылка - пустая, записи не происходит.
//		СтатусОтражения - ПеречислениеСсылка.СтатусыОтраженияДокументовВРеглУчете - статус, который будет установлен после выполнения процедуры.
//		Комментарий - строка - дополнительные сведения о ручном отражении документа.
//
Процедура ЗарегистрироватьОтражениеДокумента(Документ, СтатусОтражения, Комментарий = Неопределено) Экспорт
	
	Если Документ.Пустая() ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "ОтражениеДокументовВРеглУчете.НаборЗаписей");
	ЗначенияБлокировки	= Новый Структура("Регистратор", Документ);
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
	
	ОтражениеДокументовВРегламентированномУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
	ОтражениеДокументовВРегламентированномУчете.Отбор.Регистратор.Установить(Документ);
	ОтражениеДокументовВРегламентированномУчете.Прочитать();
	
	Для каждого Запись из ОтражениеДокументовВРегламентированномУчете Цикл
		
		Запись.Статус = СтатусОтражения;
		
		Если Не Запись.Комментарий = Комментарий Тогда
			Запись.Комментарий = Комментарий;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеДокументовВРегламентированномУчете.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Получает данные об отражении документа в регламентированном учете. Причем получает в определенном порядке. 
//
//	Параметры:
//		Документ - ДокументСсылка - ссылка на документ, для которого необходимо получить данные отражения.
//
//	Возвращаемое значение:
//		Результат - Структура - содержит следующие данные:
//			* Статус - ПеречислениеСсылка.СтатусыОтраженияДокументовВРеглУчете - текущий статус отражения документа;
//			* Отражен - Булево - признак отражения документа, истина если Статус = ОтраженоВРеглУчете ИЛИ Статус = ОтраженоВУчетеВручную;
//			* РучноеОтражение - Булево - признак ручного отражения документа, истина если Статус = ОтраженоВУчетеВручную ИЛИ Статус = КОтражениюВУчетеВручную;
//			* Комментарий - Строка - дополнительная информация по отражению документа. Заполняется пользователем если отражение ручное или содержит перечень ошибок, если не удалось отразить документ автоматически.
//
Функция ПолучитьДанныеОтраженияДокумента(Документ) Экспорт
	
	СтруктураВозврата = Новый Структура(
		"Статус, Отражен, РучноеОтражение, Комментарий", 
		Перечисления.СтатусыОтраженияДокументовВРеглУчете.ПустаяСсылка(), Ложь, Ложь);
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтражениеДокументовВРеглУчете.Статус,
		|	ВЫБОР
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
		|			ТОГДА 1
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
		|			ТОГДА 2
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
		|			ТОГДА 3
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
		|			ТОГДА 4
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
		|			ТОГДА 5
		|	КОНЕЦ КАК Приоритет,
		|	ОтражениеДокументовВРеглУчете.Комментарий,
		|	ВЫБОР
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
		|				ИЛИ ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Отражен,
		|	ВЫБОР
		|		КОГДА ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
		|				ИЛИ ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РучноеОтражение
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
		|ГДЕ
		|	ОтражениеДокументовВРеглУчете.Регистратор = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает составной комментарий к неотраженнному в регл. учете документу
//
// Параметры:
// 	Документ - ДокументСсылка - Документ, по которому необходимо получить комментарий
// 	Организация - СправочникСсылка.Организации - Дополнительный отбор, если необходимо получить комментарий отражения по конкретной организации
// Возвращаемое значение:
// 	 Комментарий - Строка - составной комментарий к неотраженному в учете документу
//
Функция СводныйКомментарийПоДокументу(Документ, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Записи.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Записи
	|ГДЕ
	|	Записи.Регистратор = &Документ
	|	И (Записи.Организация = &Организация 
	|		ИЛИ &ВсеОрганизации)
	|";
	Запрос.УстановитьПараметр("Статус",         Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета);
	Запрос.УстановитьПараметр("Документ",       Документ);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Подстроки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Комментарий = "" Тогда
			Продолжить;
		КонецЕсли;
		Если Подстроки.Найти(Выборка.Комментарий) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Подстроки.Добавить(Выборка.Комментарий);
	КонецЦикла;
	
	Результат = СтрСоединить(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает параметры выборочной регистрации документа к отражению в регл. учете
// 
// Параметры:
// 	 ДопСвойства - Структура - Дополнительные свойства объекта
// 	 Организация - СправочникСсылка.Организации - Организация для выборочной регистрации к отражению
// 	 Период      - Дата - Дата выборочной регистрации к отражению в регл. учете
//
Процедура ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(ДопСвойства, Организация, Период) Экспорт
	
	Если Не ДопСвойства.Свойство("ВыборочнаяРегистрацияКОтражениюВРеглУчете") Тогда
		
		ДопСвойства.Вставить("ВыборочнаяРегистрацияКОтражениюВРеглУчете", Истина);
		ТаблицаКРегистрацииВРеглУчете = Новый ТаблицаЗначений;
		ТаблицаКРегистрацииВРеглУчете.Колонки.Добавить("Организация",     Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаКРегистрацииВРеглУчете.Колонки.Добавить("ДатаОтражения",   Новый ОписаниеТипов("Дата"));
		ДопСвойства.Вставить("ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете", ТаблицаКРегистрацииВРеглУчете);
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",   Организация);
	Отбор.Вставить("ДатаОтражения", НачалоДня(Период));
	
	РезультатПоиска = ДопСвойства.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		НоваяСтрока = ДопСвойства.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
	КонецЕсли;
	
КонецПроцедуры

// Отключает регистрацию документа к отражению в регл. учете 
// 
// Параметры:
// 	 ДопСвойства - Структура - Дополнительные свойства объекта
//
Процедура НеРегистрироватьКОтражениюВРеглУчете(ДопСвойства) Экспорт
	
	ДопСвойства.Вставить("НеРегистрироватьКОтражениюВРеглУчете", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Восстановление партий, расчетов по документам, сумм в валюте регл., расчет себестоимости
Процедура ВыполнитьОффлайновыеРасчеты(Документы)
	
	Если ТипЗнч(Документы) <> Тип("Массив") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Документы);
	Иначе
		МассивСсылок = Документы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Данные.ДатаОтражения) КАК Период
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Данные.Регистратор В (&МассивСсылок)
	|	И (Данные.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ОперацияБух)
	|;
	|
	|//////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Расчеты.Регистратор В (&МассивСсылок)
	|	И Расчеты.Активность
	|;
	|
	|//////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Расчеты.Регистратор В (&МассивСсылок)
	|	И Расчеты.Активность
	|";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПериодРасчета = Результат[0].Выбрать();
	Если ВыборкаПериодРасчета.Следующий() Тогда
		ПериодРасчета = КонецМесяца(ВыборкаПериодРасчета.Период) + 1;
	Иначе
		// Переданные документы не требуют отражения, расчеты не выполняем
		Возврат;
	КонецЕсли;
	
	
	МассивАналитикПоставщиков = Результат[1].Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	Если МассивАналитикПоставщиков.Количество() > 0 Тогда
		АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
		АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикПоставщиков;
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСПоставщиками(ПериодРасчета, АналитикиРасчета);
	КонецЕсли;
	
	МассивАналитикКлиентов = Результат[2].Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	Если МассивАналитикКлиентов.Количество() > 0 Тогда
		АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
		АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикКлиентов;
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ПериодРасчета, АналитикиРасчета);
	КонецЕсли;
	
	УчетНДСУТ.ОтразитьДокументыВУчетеНДС(ПериодРасчета, МассивСсылок);
	
КонецПроцедуры

Функция ОтразитьДокументыПакетноСЗамеромВремени(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета)
	
	КлючеваяОперация = СтрШаблон("ОтражениеВРеглУчете.%1", Метаданные.НайтиПоТипу(ТипДокумента).Имя);
	ОписаниеЗамера = Производительность.НачатьЗамерВремени(КлючеваяОперация);
	
	Результат = ОтразитьДокументыПакетно(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета);
	
	КоличествоОбработано = 
		Результат.КоличествоОтраженоВУчете 
		+ Результат.КоличествоНеУказаныСчетаУчета 
		+ Результат.КоличествоОшибкиПриОтражении;
		
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоОбработано);
	
	Возврат Результат;
	
КонецФункции

Функция ОтразитьДокументыПакетно(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета)
	
	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("КоличествоОтраженоВУчете", 0);
	РезультатВозврата.Вставить("КоличествоНеУказаныСчетаУчета", 0);
	РезультатВозврата.Вставить("КоличествоОшибкиПриОтражении", 0);
	
	МассивНеОтраженоВУчете = Новый Массив;
	Пока СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета, , МассивНеОтраженоВУчете) Цикл
		РезультатОтражения = ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы, Ложь);
		
		РезультатВозврата.КоличествоОтраженоВУчете = 
			РезультатВозврата.КоличествоОтраженоВУчете 
			+ РезультатОтражения.ОтраженоВУчете.Количество(); 
			
		РезультатВозврата.КоличествоНеУказаныСчетаУчета = 
			РезультатВозврата.КоличествоНеУказаныСчетаУчета 
			+ РезультатОтражения.НеУказаныСчетаУчета.Количество(); 
			
		РезультатВозврата.КоличествоОшибкиПриОтражении = 
			РезультатВозврата.КоличествоОшибкиПриОтражении 
			+ РезультатОтражения.ОшибкиПриОтражении.Количество(); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНеОтраженоВУчете, РезультатОтражения.НеУказаныСчетаУчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНеОтраженоВУчете, РезультатОтражения.ОшибкиПриОтражении);
		
	КонецЦикла;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция ОтразитьДокументыПоследовательноСЗамеромВремени(ВременныеТаблицы, Организация, ПериодРасчета)
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("ОтражениеВРеглУчете.ДокументыСПоследовательнымОтражением");
	
	Результат = ОтразитьДокументыПоследовательно(ВременныеТаблицы, Организация, ПериодРасчета);
	
	КоличествоОбработано = 
		Результат.КоличествоОтраженоВУчете 
		+ Результат.КоличествоНеУказаныСчетаУчета 
		+ Результат.КоличествоОшибкиПриОтражении;
		
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоОбработано);
	
	Возврат Результат;
	
КонецФункции

Функция ОтразитьДокументыПоследовательно(ВременныеТаблицы, Организация, ПериодРасчета)
	
	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("КоличествоОтраженоВУчете", 0);
	РезультатВозврата.Вставить("КоличествоНеУказаныСчетаУчета", 0);
	РезультатВозврата.Вставить("КоличествоОшибкиПриОтражении", 0);
	
	Выборка = ДокументыКПоследовательномуОтражению(ПериодРасчета, Организация);
	Если Не Выборка = Неопределено Тогда
		Пока Выборка.Следующий() Цикл
			ТипДокумента = ТипЗнч(Выборка.Ссылка);
			Если СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, Организация, ПериодРасчета, Выборка.Ссылка) Тогда; 
				
				РезультатОтражения = ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы, Ложь);
				
				РезультатВозврата.КоличествоОтраженоВУчете = 
					РезультатВозврата.КоличествоОтраженоВУчете 
					+ РезультатОтражения.ОтраженоВУчете.Количество(); 
					
				РезультатВозврата.КоличествоНеУказаныСчетаУчета = 
					РезультатВозврата.КоличествоНеУказаныСчетаУчета 
					+ РезультатОтражения.НеУказаныСчетаУчета.Количество(); 
					
				РезультатВозврата.КоличествоОшибкиПриОтражении = 
					РезультатВозврата.КоличествоОшибкиПриОтражении 
					+ РезультатОтражения.ОшибкиПриОтражении.Количество(); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция ВыполнитьОтражение(ТипДокумента, ВременныеТаблицы, ИсключениеПриОшибке = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Результат = ВыборкиОтраженияДокументов(ИмяДокумента, ВременныеТаблицы);
	
	ВыборкаСтатусов = Результат.ВыборкаСтатусов;
	
	//++ НЕ УТКА
	ВыборкаСтатусовМФУ = Результат.ВыборкаСтатусовМФУ;
	ВыборкаСтатусовМФУ.Следующий();
	//-- НЕ УТКА
	
	ВыборкаПроверки = Результат.ВыборкаПроверки;
	ВыборкаПроверки.Следующий();
	
	ВыборкаХозрасчетный = Результат.ВыборкаХозрасчетный;
	ВыборкаХозрасчетный.Следующий();
	
	ВыборкаХозрасчетныйДополнение = Результат.ВыборкаХозрасчетныйДополнение;
	ВыборкаХозрасчетныйДополнение.Следующий();
	
	ВыборкаСвязанныеОперацииБух = Результат.ВыборкаСвязанныеОперацииБух;
	ВыборкаСвязанныеОперацииБух.Следующий();
	
	ОтраженоВУчете       = Новый Массив();
	НеУказаныСчетаУчета  = Новый Массив();
	ОшибкиПриОтражении   = Новый Массив();
	
	СтатусОтраженоВРеглУчете = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете; 
	СтатусНеУказаныСчетаУчета = Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета;
	
	КоличествоДокументов = ВыборкаСтатусов.Количество();
	
	Пока ВыборкаСтатусов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаСтатусов.Ссылка);
			//++ НЕ УТКА
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаСтатусов.Ссылка);
			//-- НЕ УТКА
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаСтатусов.Ссылка);
			
			Блокировка.Заблокировать();
			
			Если ДанныеДокументаИзменились(ВыборкаСтатусов) Тогда
				ОтменитьТранзакцию();
				СдвинутьВыборки(Результат);
				Продолжить;
			КонецЕсли;
			
			ОшибкиОтражения = ОшибкиОтраженияСЗаписьюВРегистрТребующихсяНастроек(ВыборкаСтатусов.Ссылка, ВыборкаПроверки);
			
			СформироватьОтражениеДокументовВРеглУчете(ВыборкаСтатусов, ОшибкиОтражения);
			//++ НЕ УТКА
			СформироватьОтражениеДокументовВМФУ(ВыборкаСтатусов, ВыборкаСтатусовМФУ, ОшибкиОтражения);
			//-- НЕ УТКА
			СформироватьХозрасчетный(ВыборкаСтатусов, ВыборкаХозрасчетный, ВыборкаХозрасчетныйДополнение);
			
			ЗарегистрироватьКОтражениюСвязанныеОперацииБух(ВыборкаСтатусов, ВыборкаСвязанныеОперацииБух);
			
			ЗафиксироватьТранзакцию();
			
			Если ОшибкиОтражения.Количество() > 0 Тогда
				НеУказаныСчетаУчета.Добавить(ВыборкаСтатусов.Ссылка);
			Иначе
				ОтраженоВУчете.Добавить(ВыборкаСтатусов.Ссылка);
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОшибкиПриОтражении.Добавить(ВыборкаСтатусов.Ссылка);
			СдвинутьВыборки(Результат);
			
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось отразить в регл. учете документ ""%1"" по причине: %2'"),
					ВыборкаСтатусов.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Отражение в регламентированном учете'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
			Если ИсключениеПриОшибке Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ДополнительнаяОбработкаПриОтраженииДокумента(ТипДокумента, ВременныеТаблицы);
	
	ЗапросОчистки = РеглУчетВыборкиСерверПовтИсп.ЗапросОчистки(ИмяДокумента);
	ЗапросОчистки.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросОчистки.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Структура();
	Результат.Вставить("ОтраженоВУчете",      ОтраженоВУчете);
	Результат.Вставить("НеУказаныСчетаУчета", НеУказаныСчетаУчета);
	Результат.Вставить("ОшибкиПриОтражении",  ОшибкиПриОтражении);
	
	Возврат Результат;
	
КонецФункции

Функция ВыборкиОтраженияДокументов(ИмяДокумента, ВременныеТаблицы)
	
	// Выборка статусов отражения документов из регистра ОтражениеДокументовВРеглУчете
	ЗапросОтражениеДокументовВРеглУчете = РеглУчетВыборкиСерверПовтИсп.ЗапросОтражениеДокументовВРеглУчете();
	ЗапросОтражениеДокументовВРеглУчете.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	РезультатОтражениеДокументовВРеглУчете = ЗапросОтражениеДокументовВРеглУчете.Выполнить();
	ВыборкаСтатусов = РезультатОтражениеДокументовВРеглУчете.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоДокументов = ВыборкаСтатусов.Количество();
	
	//++ НЕ УТКА
	// Выборка статусов отражения документов из регистра ОтражениеДокументовВМеждународномУчете
	ЗапросОтражениеДокументовВМФУ = РеглУчетВыборкиСерверПовтИсп.ЗапросОтражениеДокументовВМеждународномУчете();
	ЗапросОтражениеДокументовВМФУ.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросОтражениеДокументовВМФУ.УстановитьПараметр("ПроводкиМеждународногоУчетаПоДаннымРегл", ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного"));
	
	РезультатОтражениеДокументовВМФУ = ЗапросОтражениеДокументовВМФУ.Выполнить();
	ВыборкаСтатусовМФУ = РезультатОтражениеДокументовВМФУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//-- НЕ УТКА
	
	// Выборка контекстных данных (данных из документов)
	ЭтоОбъектРасчетов = РеглУчетВыборкиСерверПовтИсп.ЭтоОбъектРасчетов(ИмяДокумента);
	ЗапросДанных = РеглУчетВыборкиСерверПовтИсп.ЗапросДанных(ИмяДокумента, ЭтоОбъектРасчетов);
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	УстановитьПараметрыЗапросаДанных(ЗапросДанных, Тип("ДокументСсылка." + ИмяДокумента), ИмяДокумента, ВыборкаСтатусов);
	
	ЗапросДанных.Выполнить();
	
	// Выборка счетов учета прочих операций
	ЗапросПрочихСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросПрочихСчетов();
	ЗапросПрочихСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросПрочихСчетов.Выполнить();
	
	// Выборка создаваемых движений
	ЗапросСопоставлений = РеглУчетВыборкиСерверПовтИсп.ЗапросСопоставлений();
	ЗапросСопоставлений.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСопоставлений.Выполнить();
	
	// Проверяем полученные и дополненные данные
	ЗапросПроверки = РеглУчетВыборкиСерверПовтИсп.ЗапросПроверки();
	ЗапросПроверки.МенеджерВременныхТаблиц = ВременныеТаблицы;
	РезультатПроверки = ЗапросПроверки.Выполнить();
	ВыборкаПроверки = РезультатПроверки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗапросХозрасчетный = РеглУчетВыборкиСерверПовтИсп.ЗапросХозрасчетный();
	ЗапросХозрасчетный.МенеджерВременныхТаблиц = ВременныеТаблицы;
	РезультатХозрасчетный = ЗапросХозрасчетный.Выполнить();
	ВыборкаХозрасчетный = РезультатХозрасчетный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗапросХозрасчетныйДополнение = РеглУчетВыборкиСерверПовтИсп.ЗапросХозрасчетныйДополнение();
	ЗапросХозрасчетныйДополнение.МенеджерВременныхТаблиц = ВременныеТаблицы;
	РезультатХозрасчетныйДополнение = ЗапросХозрасчетныйДополнение.Выполнить();
	ВыборкаЗапросХозрасчетныйДополнение = РезультатХозрасчетныйДополнение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Выборка связанных документов ОперацияБух
	ЗапросСвязанныеОперацииБух = РеглУчетВыборкиСерверПовтИсп.ЗапросСвязанныеОперацииБух();
	ЗапросСвязанныеОперацииБух.МенеджерВременныхТаблиц = ВременныеТаблицы;
	РезультатСвязанныеОперацииБух = ЗапросСвязанныеОперацииБух.Выполнить();
	ВыборкаСвязанныеОперацииБух = РезультатСвязанныеОперацииБух.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыборкаСтатусов",               ВыборкаСтатусов);
	//++ НЕ УТКА
	СтруктураВозврата.Вставить("ВыборкаСтатусовМФУ",            ВыборкаСтатусовМФУ);
	//-- НЕ УТКА
	СтруктураВозврата.Вставить("ВыборкаПроверки",               ВыборкаПроверки);
	СтруктураВозврата.Вставить("ВыборкаХозрасчетный",           ВыборкаХозрасчетный);
	СтруктураВозврата.Вставить("ВыборкаХозрасчетныйДополнение", ВыборкаЗапросХозрасчетныйДополнение);
	СтруктураВозврата.Вставить("ВыборкаСвязанныеОперацииБух",   ВыборкаСвязанныеОперацииБух);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КомментарийОшибокЗаполнения(РезультатПроверки)
	
	СтрокиКомментарий = Новый Массив();
	
	ВсегоОшибок = 0;
	ОШ = РезультатПроверки.Выбрать();
	Пока ОШ.Следующий() Цикл
		КодОшибки = ОШ.КодОшибки;
		Если КодОшибки = NULL Тогда
			// Строка итогов
			Продолжить;
		КонецЕсли;
		ВсегоОшибок = ВсегоОшибок + 1;
		Ошибка = РеглУчетВыборкиСерверПовтИсп.ШаблонКомментарияОшибок(КодОшибки);
		Ошибка = СтрЗаменить(Ошибка, "%ВидСчета%", Строка(ОШ.ВидСчета));
		Ошибка = СтрЗаменить(Ошибка, "%Измерение%", 
			РеглУчетВыборкиСерверПовтИсп.СтрокаИзмерениеНастройки(ОШ.ВидСчета, ОШ.ИдентификаторСтроки, ОШ.Организация));
		Ошибка = СтрЗаменить(Ошибка, "%МестоАналитика%", 
			РеглУчетВыборкиСерверПовтИсп.СтрокаМестоАналитика(ОШ.МестоУчета, ОШ.АналитикаУчета));
		Ошибка = СтрЗаменить(Ошибка, "%Счет%", Строка(ОШ.Счет));
		СтрокиКомментарий.Добавить(Ошибка);
	КонецЦикла;
	
	Комментарий = СтрСоединить(СтрокиКомментарий, Символы.ПС);
	
	Возврат Комментарий;
	
КонецФункции

Функция ВременныеТаблицы(ВнешнийМенеджерВременныхТаблиц = Неопределено)
	
	ВременныеТаблицы = ВнешнийМенеджерВременныхТаблиц;
	
	Если ВременныеТаблицы = Неопределено Тогда
		
		ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
		
		ТекстЗапроса = УчетНМА.ТекстЗапросаПустаяВременнаяТаблицаАмортизации()
						+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
						+ УчетНМА.ТекстЗапросаПустаяВременнаяТаблицаРасходыПоАренднымПлатежам()
						+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
						+ УчетНМА.ТекстЗапросаПустаяВременнаяТаблицаКорректировкаАмортизации();
						
		ЗапросПустыхТаблиц = Новый Запрос(ТекстЗапроса);
		ЗапросПустыхТаблиц.МенеджерВременныхТаблиц = ВременныеТаблицы;
		ЗапросПустыхТаблиц.Выполнить();
		
	КонецЕсли;
	
	ЗапросПланаСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросПланаСчетов();
	ЗапросПланаСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросПланаСчетов.Выполнить();
	// выборка вариабельных счетов учета
	ЗапросСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросСчетов();
	ЗапросСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСчетов.Выполнить();
	
	// выборка счетов по умолчанию
	ЗапросСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросСчетовПоУмолчанию();
	ЗапросСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСчетов.Выполнить();
	
	Возврат ВременныеТаблицы;
КонецФункции

Процедура ДополнительнаяОбработкаПриОтраженииДокумента(ТипДокумента, МенеджерВременныхТаблиц)
	
	Если ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		Документы.ПринятиеКУчетуОС.ЗаполнитьПервоначальныеСуммыПриОтражении(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
		Документы.ПринятиеКУчетуНМА.ЗаполнитьПервоначальныеСуммыПриОтражении(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.МодернизацияОС") Тогда
		Документы.МодернизацияОС.ЗаполнитьПараметрыНачисленияАмортизацииПриОтражении(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		Документы.ВнутреннееПотреблениеТоваров.ДополнительнаяОбработкаПриОтраженииДокумента(МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаДанных(ЗапросДанных, ТипДокумента, ИмяДокумента, ВыборкаДокументов)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачалаДействия150ФЗ", УчетНДСУТ.ДатаНачалаДействия150ФЗ());
	
	ТипыДокументов = РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению();
	Если ТипыДокументов.Найти(ТипДокумента) <> Неопределено 
		И ВыборкаДокументов.Количество() = 1 Тогда
		
		ВыборкаДокументов.Следующий();
		
		СтруктураПараметров.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
		СтруктураПараметров.Вставить("Дата",   ВыборкаДокументов.Период);
		
		ГраницаМесяцНачало = Новый Граница(НачалоМесяца(ВыборкаДокументов.Период), ВидГраницы.Включая);
		ГраницаМесяцОкончание = Новый Граница(КонецМесяца(ВыборкаДокументов.Период), ВидГраницы.Включая);
		СтруктураПараметров.Вставить("ГраницаМесяцНачало",    ГраницаМесяцНачало);
		СтруктураПараметров.Вставить("ГраницаМесяцОкончание", ГраницаМесяцОкончание);
		
		МассивВидовСубконто = Новый Массив;
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СтруктураПараметров.Вставить("ВидыСубконтоХозрасчетныеОсновныеСредстваКонтрагенты", МассивВидовСубконто);
		
		// Спозиционируем выборку в начало
		ВыборкаДокументов.Сбросить();
		
	КонецЕсли;
	
	ЭтоОбъектРасчетов = РеглУчетВыборкиСерверПовтИсп.ЭтоОбъектРасчетов(ИмяДокумента); 
	// Устанавливаем параметры по-умолчанию и {&ИмяФункциональнойОпции}
	ПараметрыДанных = РеглУчетВыборкиСерверПовтИсп.ЗапросДанныхПараметры(ИмяДокумента, ЭтоОбъектРасчетов);
	Для Каждого ПараметрДанных Из ПараметрыДанных Цикл
		ЗначениеПараметра = Неопределено;
		Если Не СтруктураПараметров.Свойство(ПараметрДанных.Имя, ЗначениеПараметра) Тогда
			ЗначениеПараметра = ПолучитьФункциональнуюОпцию(ПараметрДанных.Имя);
		КонецЕсли;
		ЗапросДанных.УстановитьПараметр(ПараметрДанных.Имя, ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

Функция ТипыДокументовКПакетномуОтражению(ПериодОтражения = Неопределено, Организация = Неопределено, МассивСсылок = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТИПЗНАЧЕНИЯ(Данные.Регистратор) КАК ТипДокумента
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(Данные.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ОперацияБух)
	|	И (&ВсеОрганизации 
	|		ИЛИ Данные.Организация = &Организация) 
	|	И (&ВесьПериод 
	|		ИЛИ Данные.ДатаОтражения <= &ПериодОтражения)
	|	И (&ВсеДокументы 
	|		ИЛИ Данные.Регистратор В (&МассивСсылок))
	|	И Данные.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета))
	|";
	
	Запрос.УстановитьПараметр("ПериодОтражения", ПериодОтражения);
	Запрос.УстановитьПараметр("ВесьПериод",      ?(ПериодОтражения = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ВсеОрганизации",  НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("МассивСсылок",    МассивСсылок);
	Запрос.УстановитьПараметр("ВсеДокументы",    ?(МассивСсылок = Неопределено, Истина, Ложь));
	
	ТипыДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипДокумента");
	
	ИсключаемыеТипы = РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению();
	Результат = ОбщегоНазначенияКлиентСервер.СократитьМассив(ТипыДокументов, ИсключаемыеТипы);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицыОтбораДанных(ТипДокумента, ВременныеТаблицы, Организация = Неопределено, ПериодОтражения = Неопределено, МассивСсылок = Неопределено, МассивИсключаемыхСсылок = Неопределено)
	
	Если МассивСсылок = Неопределено Тогда
		МассивСсылок = Новый Массив;
	КонецЕсли;
	
	Если МассивИсключаемыхСсылок = Неопределено Тогда
		МассивИсключаемыхСсылок = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Данные.Период                       КАК Период,
	|	Данные.Регистратор                  КАК Ссылка,
	|	Данные.Организация                  КАК Организация,
	|	Данные.ДатаОтражения                КАК ДатаОтражения
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(&ВсеОрганизации 
	|		ИЛИ Данные.Организация = &Организация)
	|	И (&ВесьПериод 
	|		ИЛИ Данные.ДатаОтражения <= &ПериодОтражения)
	|	И (Данные.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатков
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|			ИЛИ Данные.Регистратор ССЫЛКА Документ.ОперацияБух)
	|	И (&ВсеДокументы 
	|		ИЛИ Данные.Регистратор В (&МассивСсылок))
	|	И НЕ Данные.Регистратор В (&МассивИсключаемыхСсылок)
	|	И ТИПЗНАЧЕНИЯ(Данные.Регистратор) = &ТипДокумента
	|	И Данные.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000 
	|	ДанныеРегистра.Ссылка КАК Ссылка,
	|	ДанныеРегистра.Период КАК Период
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период         КАК Период,
	|	ДанныеРегистра.Ссылка         КАК Ссылка,
	|	ДанныеРегистра.Организация    КАК Организация,
	|	ДанныеРегистра.ДатаОтражения  КАК ДатаОтражения
	|ПОМЕСТИТЬ РазрезыКОтражению
	|ИЗ
	|	ДанныеРегистра КАК  ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Ссылка = ДокументыКОтражению.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|///////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистра
	|";
	
	Запрос.УстановитьПараметр("ПериодОтражения",         ПериодОтражения);
	Запрос.УстановитьПараметр("ВесьПериод",              ?(ПериодОтражения = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ВсеОрганизации",          НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ТипДокумента",            ТипДокумента);
	Запрос.УстановитьПараметр("МассивСсылок",            МассивСсылок);
	Запрос.УстановитьПараметр("ВсеДокументы",            ?(НЕ ЗначениеЗаполнено(МассивСсылок), Истина, Ложь));
	Запрос.УстановитьПараметр("МассивИсключаемыхСсылок", МассивИсключаемыхСсылок);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьДокументыКОтражению = Выборка.Количество <> 0;
	Иначе
		ЕстьДокументыКОтражению = Ложь;
	КонецЕсли;
	
	ПроверитьБлокировкуВходящихДанных(ТипДокумента, ВременныеТаблицы);
	
	Если НЕ ЕстьДокументыКОтражению Тогда
		// Уничтожим пустую таблицу документов к отражению
		Запрос.Текст = "
			|УНИЧТОЖИТЬ РазрезыКОтражению
			|;
			|/////////////////////////////////////////////////
			|
			|УНИЧТОЖИТЬ ДокументыКОтражению
			|";
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат ЕстьДокументыКОтражению;
	
КонецФункции

Функция ДокументыКПоследовательномуОтражению(ПериодОтражения, Организация = Неопределено, МассивСсылок = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Регистратор   КАК Ссылка,
	|	Данные.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(Данные.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение	
	|	ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатков	
	|	ИЛИ Данные.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|	ИЛИ Данные.Регистратор ССЫЛКА Документ.ОперацияБух)
	|	И (&ВсеОрганизации
	|		ИЛИ Данные.Организация = &Организация)
	|	И (&ВесьПериод 
	|		ИЛИ Данные.Период <= &ПериодОтражения)
	|	И (&ВсеДокументы 
	|		ИЛИ Данные.Регистратор В (&МассивСсылок))
	|	И ТИПЗНАЧЕНИЯ(Данные.Регистратор) В (&ТипыДокументов)
	|	И Данные.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.МоментВремени
	|";
	
	Запрос.УстановитьПараметр("ПериодОтражения",   ПериодОтражения);
	Запрос.УстановитьПараметр("ВесьПериод",        ?(ПериодОтражения = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ВсеОрганизации",    НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ТипыДокументов",    РеглУчетВыборкиСерверПовтИсп.ТипыДокументовКПоследовательномуОтражению());
	Запрос.УстановитьПараметр("МассивСсылок",      МассивСсылок);
	Запрос.УстановитьПараметр("ВсеДокументы",     ?(МассивСсылок = Неопределено, Истина, Ложь));
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция НеотраженныеВРеглУчетеДокументы(МассивДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НеотраженныеДокументы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтражениеДокументовВРеглУчете.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОтражениеДокументовВРеглУчете.Регистратор В (&МассивДокументов)
	|	И (ОтражениеДокументовВРеглУчете.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ВводОстатков
	|	ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов
	|	ИЛИ ОтражениеДокументовВРеглУчете.Регистратор ССЫЛКА Документ.ОперацияБух)
	|	И НЕ ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|	И НЕ ОтражениеДокументовВРеглУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НеотраженныеДокументы = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат НеотраженныеДокументы;
	
КонецФункции

#Область ФормированиеИЗаписьДвижений

Функция ДанныеДокументаИзменились(ВыборкаСтатусов) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Статусы.ИдентификаторСтатуса КАК ИдентификаторСтатуса
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК Статусы
	|ГДЕ
	|	Статусы.Регистратор = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ВыборкаСтатусов.Ссылка);
	ВыборкаТекущихСтатусов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаТекущихСтатусов.Следующий() Тогда
		ДанныеИзменились = (ВыборкаТекущихСтатусов.ИдентификаторСтатуса <> ВыборкаСтатусов.ИдентификаторСтатуса);
	Иначе
		ДанныеИзменились = Истина;
	КонецЕсли;
	
	Возврат ДанныеИзменились;
	
КонецФункции

Процедура СдвинутьВыборки(Выборки)
	
	ТекущаяСсылка = Выборки.ВыборкаСтатусов.Ссылка;
	
	//++ НЕ УТКА
	Если Выборки.ВыборкаСтатусовМФУ.Ссылка = ТекущаяСсылка Тогда
		Выборки.ВыборкаСтатусовМФУ.Следующий();
	КонецЕсли;
	//-- НЕ УТКА
	Если Выборки.ВыборкаПроверки.Ссылка = ТекущаяСсылка Тогда
		Выборки.ВыборкаПроверки.Следующий();
	КонецЕсли;
	Если Выборки.ВыборкаХозрасчетный.Ссылка = ТекущаяСсылка Тогда
		Выборки.ВыборкаХозрасчетный.Следующий();
	КонецЕсли;
	Если Выборки.ВыборкаХозрасчетныйДополнение.Ссылка = ТекущаяСсылка Тогда
		Выборки.ВыборкаХозрасчетныйДополнение.Следующий();
	КонецЕсли;
	Если Выборки.ВыборкаСвязанныеОперацииБух.Ссылка = ТекущаяСсылка Тогда
		Выборки.ВыборкаСвязанныеОперацииБух.Следующий();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтражениеДокументовВРеглУчете(ВыборкаСтатусов, ОшибкиОтражения)
	
	СтатусыОтраженияВРеглУчете = Перечисления.СтатусыОтраженияДокументовВРеглУчете;
	
	ОтражениеВРеглУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
	ОтражениеВРеглУчете.Отбор.Регистратор.Установить(ВыборкаСтатусов.Ссылка);
	
	ВыборкаСтатусовПоОрганизациям = ВыборкаСтатусов.Выбрать();
	
	Пока ВыборкаСтатусовПоОрганизациям.Следующий() Цикл
		
		ОбновитьСтатус = (ВыборкаСтатусовПоОрганизациям.Статус = Неопределено);
		
		НоваяЗапись = ОтражениеВРеглУчете.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтатусовПоОрганизациям);
		
		Если ОбновитьСтатус Тогда
			Отбор = Новый Структура("Организация, ДатаОтражения", НоваяЗапись.Организация, НоваяЗапись.ДатаОтражения);
			Ошибки = ОшибкиОтражения.НайтиСтроки(Отбор);
			Если Ошибки.Количество() > 0 Тогда
				НоваяЗапись.Статус = СтатусыОтраженияВРеглУчете.НеУказаныСчетаУчета;
				НоваяЗапись.Комментарий = Ошибки[0].Комментарий;
			Иначе
				НоваяЗапись.Статус = СтатусыОтраженияВРеглУчете.ОтраженоВРеглУчете;
				НоваяЗапись.Комментарий = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеВРеглУчете.Записать();
	
КонецПроцедуры

//++ НЕ УТКА
Процедура СформироватьОтражениеДокументовВМФУ(ВыборкаСтатусов, ВыборкаСтатусовМФУ, ОшибкиОтражения)
	
	Если ВыборкаСтатусов.Ссылка <> ВыборкаСтатусовМФУ.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыОтраженияВМФУ = Перечисления.СтатусыОтраженияВМеждународномУчете;
	
	ОтражениеВМФУ = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ОтражениеВМФУ.Отбор.Регистратор.Установить(ВыборкаСтатусовМФУ.Ссылка);
	
	ВыборкаСтатусовМФУПоОрганизациям = ВыборкаСтатусовМФУ.Выбрать();
	Пока ВыборкаСтатусовМФУПоОрганизациям.Следующий() Цикл
		ОбновитьСтатус = ВыборкаСтатусовМФУПоОрганизациям.ОбновитьСтатус;
		НоваяЗапись = ОтражениеВМФУ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтатусовМФУПоОрганизациям);
		Если ОбновитьСтатус Тогда
			Отбор = Новый Структура("Организация, ДатаОтражения", НоваяЗапись.Организация, НачалоДня(НоваяЗапись.Период));
			Ошибки = ОшибкиОтражения.НайтиСтроки(Отбор);
			Если Ошибки.Количество() > 0 Тогда
				НоваяЗапись.Статус = СтатусыОтраженияВМФУ.ОжидаетсяОтражениеВРеглУчете;
			Иначе
				Если ВыборкаСтатусовМФУПоОрганизациям.РучноеОтражение Тогда
					НоваяЗапись.Статус = СтатусыОтраженияВМФУ.КОтражениюВУчетеВручную;
				Иначе
					НоваяЗапись.Статус = СтатусыОтраженияВМФУ.КОтражениюВУчете;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОтражениеВМФУ.Записать();
	ВыборкаСтатусовМФУ.Следующий();
	
КонецПроцедуры
//-- НЕ УТКА

Процедура СформироватьХозрасчетный(ВыборкаСтатусов, ВыборкаХозрасчетный, ВыборкаХозрасчетныйДополнение)
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаСтатусов.Ссылка);
	УстановитьДопСвойстваНабораЗаписейХозрасчетный(НаборЗаписей, ВыборкаСтатусов.Ссылка);
	
	ТаблицаПроводок = ТаблицаПроводок(НаборЗаписей);
	Если ВыборкаСтатусов.Ссылка = ВыборкаХозрасчетный.Ссылка Тогда
		ДобавитьСтрокиВТаблицуПроводок(ТаблицаПроводок, ВыборкаХозрасчетный);
		ВыборкаХозрасчетный.Следующий();
	КонецЕсли;
	
	// Выполним доп. обработку новых проводок.
	НаборЗаписей.Загрузить(ТаблицаПроводок);
	РегистрыБухгалтерии.Хозрасчетный.ВыполнитьДопОбработкуПроводок(
		НаборЗаписей);
		
	// Дополним набор проводками, которые необходимо оставить без изменения.
	ТаблицаПроводок = ТаблицаПроводок(НаборЗаписей);
	Если ВыборкаСтатусов.Ссылка = ВыборкаХозрасчетныйДополнение.Ссылка Тогда
		ДобавитьСтрокиВТаблицуПроводок(ТаблицаПроводок, ВыборкаХозрасчетныйДополнение);
		ВыборкаХозрасчетныйДополнение.Следующий();
	КонецЕсли;
	
	ТаблицаПроводок.Сортировать("Период");
	
	НаборЗаписей.Загрузить(ТаблицаПроводок);
	
	// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
	// Учет бланков строгой отчетности, №10038
	// {
	Источник = ВыборкаСтатусов.Ссылка;
	ЭтоДокументПодсистемыБСО = УчетБланковСтрогойОтчетностиКлиентСервер.ЭтоДокументПодсистемыБСО(Источник);
	
	Если ЭтоДокументПодсистемыБСО Тогда
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				И (Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Или Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
				И Источник.РежимИспользованияБСО Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") И Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию И Источник.РежимИспользованияБСО Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВводОстатков") И Источник.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров И Источник.РежимИспользованияБСО Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей, Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВводОстатков") И Источник.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации И Источник.РежимИспользованияБСО Тогда
			НаборЗаписей.Очистить();
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей, Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеТоваров") И Источник.РежимИспользованияБСО И Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") И Источник.РежимИспользованияБСО Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И Источник.РежимИспользованияБСО Тогда
			УчетБланковСтрогойОтчетностиСервер.ВыполнитьДвиженияРегл(Источник, НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
	// }
	// 4D

	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОшибкиОтраженияСЗаписьюВРегистрТребующихсяНастроек(Документ, ВыборкаПроверки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("ДатаОтражения");
	Результат.Колонки.Добавить("Комментарий");
	
	// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
	// Учет бланков строгой отчетности, №10038
	// {
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВводОстатков") И Документ.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации И Документ.РежимИспользованияБСО Тогда
		Возврат Результат;
	КонецЕсли;
	// }
	// 4D

	Если Документ <> ВыборкаПроверки.Ссылка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаПоОрганизации = ВыборкаПроверки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		ВыборкаПоМесяцуОтражения = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоМесяцуОтражения.Следующий() Цикл
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Организация   = ВыборкаПоМесяцуОтражения.Организация;
			НоваяСтрока.ДатаОтражения = ВыборкаПоМесяцуОтражения.ДатаОтражения;
			ТаблицаОшибок			  = ТаблицаОшибокОтражения(ВыборкаПоМесяцуОтражения);
			НоваяСтрока.Комментарий   = СтрСоединить(ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОшибок, "Комментарий", Истина), Символы.ПС);
			ЗаписатьТребующиеНастройкиСчетаРеглУчета(ТаблицаОшибок);
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаПроверки.Следующий();
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаПроводок(НаборЗаписей = Неопределено)
	
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	КонецЕсли;
	
	ТаблицаПроводок = НаборЗаписей.Выгрузить();
	ТаблицаПроводок.Колонки.Удалить("Активность");
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуПроводок(ТаблицаПроводок, ВыборкаПоДокументу)
	
	Выборка = ВыборкаПоДокументу.Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = ТаблицаПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДопСвойстваНабораЗаписейХозрасчетный(НаборЗаписей, Ссылка)
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		Или ТипСсылки = Тип("ДокументСсылка.АмортизацияНМА")
		Или ТипСсылки = Тип("ДокументСсылка.АмортизацияОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПодготовкаКПередачеНМА")
		Или ТипСсылки = Тип("ДокументСсылка.ПереоценкаНМА")
		Или ТипСсылки = Тип("ДокументСсылка.ПринятиеКУчетуНМА")
		Или ТипСсылки = Тип("ДокументСсылка.СписаниеНМА")
		Или ТипСсылки = Тип("ДокументСсылка.ВозвратОСОтАрендатора")
		Или ТипСсылки = Тип("ДокументСсылка.ВыбытиеАрендованныхОС")
		Или ТипСсылки = Тип("ДокументСсылка.ИзменениеПараметровОС")
		Или ТипСсылки = Тип("ДокументСсылка.МодернизацияОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПеремещениеОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПереоценкаОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПодготовкаКПередачеОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПоступлениеАрендованныхОС")
		Или ТипСсылки = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		Или ТипСсылки = Тип("ДокументСсылка.СписаниеОС")
		Тогда
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	КонецЕсли;
	
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеВыполнятьДопОбработкуПроводок", Истина)
	
КонецПроцедуры

Процедура ЗарегистрироватьКОтражениюСвязанныеОперацииБух(ВыборкаСтатусов, ВыборкаСвязанныеОперацииБух)
	
	Если ВыборкаСтатусов.Ссылка <> ВыборкаСвязанныеОперацииБух.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументы = ВыборкаСвязанныеОперацииБух.Выбрать();
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументы.Регистратор);
		Блокировка.Заблокировать();
			
		ОтражениеВРеглУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
		ОтражениеВРеглУчете.Отбор.Регистратор.Установить(ВыборкаДокументы.Регистратор);
		
		НоваяЗапись = ОтражениеВРеглУчете.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДокументы);
		
		ОтражениеВРеглУчете.Записать();
		
	КонецЦикла;
	
	ВыборкаСвязанныеОперацииБух.Следующий();
	
КонецПроцедуры

Функция ТаблицаОшибокОтражения(РезультатПроверки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("АналитикаУчета");
	Результат.Колонки.Добавить("МестоУчета");
	Результат.Колонки.Добавить("ВидСчета");
	Результат.Колонки.Добавить("Комментарий");
	
	ВыборкаОшибок = РезультатПроверки.Выбрать();
	Пока ВыборкаОшибок.Следующий() Цикл
		КодОшибки = ВыборкаОшибок.КодОшибки;
		Если КодОшибки = NULL Тогда
			// Строка итогов
			Продолжить;
		КонецЕсли;
		КомментарийОшибки = РеглУчетВыборкиСерверПовтИсп.ШаблонКомментарияОшибок(КодОшибки);
		КомментарийОшибки = СтрЗаменить(КомментарийОшибки, "%ВидСчета%", Строка(ВыборкаОшибок.ВидСчета));
		КомментарийОшибки = СтрЗаменить(КомментарийОшибки, "%Измерение%", 
			РеглУчетВыборкиСерверПовтИсп.СтрокаИзмерениеНастройки(ВыборкаОшибок.ВидСчета, ВыборкаОшибок.ИдентификаторСтроки, ВыборкаОшибок.Организация));
		КомментарийОшибки = СтрЗаменить(КомментарийОшибки, "%МестоАналитика%", 
			РеглУчетВыборкиСерверПовтИсп.СтрокаМестоАналитика(ВыборкаОшибок.МестоУчета, ВыборкаОшибок.АналитикаУчета));
		КомментарийОшибки = СтрЗаменить(КомментарийОшибки, "%Счет%", Строка(ВыборкаОшибок.Счет));
		
		НоваяСтрокаОшибки = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, ВыборкаОшибок);
		НоваяСтрокаОшибки.Комментарий = КомментарийОшибки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьТребующиеНастройкиСчетаРеглУчета(ТаблицаОшибокОтражения)
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаОшибки из ТаблицаОшибокОтражения Цикл
			
			ИзмеренияРегистра = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СписокИзмеренийРегистраПоВидуСчета(СтрокаОшибки.ВидСчета);
			ИзмеренияРегистра.Добавить("ВидСчета");
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			Для каждого ЭлементИзмерения из ИзмеренияРегистра Цикл
				ЭлементБлокировкиДанных.УстановитьЗначение(ЭлементИзмерения, СтрокаОшибки[ЭлементИзмерения]);
			КонецЦикла;
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
		
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			Для каждого ЭлементИзмерения из ИзмеренияРегистра Цикл
				НаборЗаписей.Отбор[ЭлементИзмерения].Установить(СтрокаОшибки[ЭлементИзмерения]);
			КонецЦикла;
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаОшибки);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ПроверкаБлокировкиДанных

Процедура ПроверитьБлокировкуВходящихДанных(ТипДокумента, Отбор = Неопределено, МассивСсылок = Неопределено)
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДокумента);
	ВходящиеДанные = РеглУчетВыборкиСерверПовтИсп.ИспользуемыеТаблицыДляОтраженияТипа(ОбъектМетаданных.Имя);
	
	ИмяВременнойТаблицы = Неопределено;
	Если ТипЗнч(Отбор) = Тип("МенеджерВременныхТаблиц") Тогда
		ИмяВременнойТаблицы = "ДокументыКОтражению";
	КонецЕсли;
	
	ЕстьБлокировкаДанных = ЕстьБлокировкаДанных(ВходящиеДанные, Отбор, ИмяВременнойТаблицы);
	Если ЕстьБлокировкаДанных Тогда
		// Нельзя выполнять отражение документов в регл. учете - не завершено обновление всех входящих данных
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Отражение документов ""%1""
				|в регламентированном учете остановлено из-за блокировки входящих данных - не завершено обновление ИБ.'"),
			ТипДокумента);
		
		Если ТипЗнч(Отбор) <> Тип("МенеджерВременныхТаблиц") И ТипЗнч(Отбор) <> Тип("Массив") И ЗначениеЗаполнено(Отбор) Тогда
			ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Отражение документа ""%1""
				|в регламентированном учете остановлено из-за блокировки входящих данных - не завершено обновление ИБ.'"),
			Отбор);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отражение в регламентированном учете'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ОбъектМетаданных,
			Отбор,
			ОписаниеОшибки);
			
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
		
КонецПроцедуры

// Проверяет, есть ли еще заблокированные обновлением данные.
// В случае если передан массив проверяемых объектов и среди них присутствуют независимые регистры сведений,
// то для таких регистров наличие блокировки проверяется без отбора - если есть ли хоть одна заблокированная запись, 
// то регистр сведений считается заблокированным полностью.
// Проверки независимых регистров сведений с отбором по измерениям возможна только для одного объекта метаданных.
//
// Параметры:
//  ПолныеИменаМетаданныеОбъектов - Строка, ОбъектМетаданных, Массив строк, Массив ОбъектовМетаданых - полное имя обрабатываемого объекта или его метаданные или массив имен или объектов.
//									Например, "Документ.ПриходныйОрдерНаТовары"
//  Отбор - ЛюбаяСсылка, Структура, Неопределено, Массив, МенеджерВременныхТаблиц - отбор данных для проверки.
//									Если передано Неопределено - проверяется по всему типу объекта без отбора,
//									Если объект - регистр, подчиненный регистратору, то в отборе - ссылка на регистратор или массив ссылок
//									Если объект ссылочного типа, то в отборе - или ссылка, или массив ссылок
//									Если объект - независимый регистр сведений, то в отборе - структура со значениями измерений.
//										Ключ структуры - имя измерения, значение - значение отбора (можно передать массив значений)
//	ИмяВременнойТаблицыОтбора - Строка - Имя временной таблицы если отбор задан МенеджеромВременныхТаблиц, если отбор не МенеджерВременныхТаблиц, то игнорируется
//	ИзмеренияРегистраСведений - Строка, Массив - Имена измерений независимого регитра сведений через запятую или в массиве, 
//									по которым необходимо выполнить внутреннее соединение с таблицей отбора переданной в МенеджереВременныхТаблиц
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьБлокировкаДанных(ПолныеИменаМетаданныеОбъектов, Отбор = Неопределено, ИмяВременнойТаблицыОтбора = Неопределено, ИзмеренияРегистраСведений = Неопределено)
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПолныеИменаМетаданныеОбъектов) = Тип("Массив") Тогда
		МассивПолныхИменМетаданныхОбъектов = ПолныеИменаМетаданныеОбъектов;
	Иначе
		МассивПолныхИменМетаданныхОбъектов = Новый Массив;
		МассивПолныхИменМетаданныхОбъектов.Добавить(ПолныеИменаМетаданныеОбъектов);
	КонецЕсли;
	
	Если ТипЗнч(ИзмеренияРегистраСведений) = Тип("Массив") Тогда
		МассивИзмеренийРегистраСведений = ИзмеренияРегистраСведений;
	ИначеЕсли ТипЗнч(ИзмеренияРегистраСведений) = Тип("Строка") Тогда
		МассивИзмеренийРегистраСведений = СтрРазделить(ИзмеренияРегистраСведений,",",Ложь);
	КонецЕсли;
	
	МассивТекстовЗапросов = Новый Массив;
	ОтборПоСсылкам = ТипЗнч(Отбор) <> Тип("МенеджерВременныхТаблиц") И ЗначениеЗаполнено(Отбор);
	ОтборПоВременнойТаблице = ТипЗнч(Отбор) = Тип("МенеджерВременныхТаблиц");
	Для Каждого ПолноеИмяМетаданныеОбъекта Из МассивПолныхИменМетаданныхОбъектов Цикл
	
		Если ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Строка") Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданныеОбъекта);
			ПолноеИмяОбъекта = ПолноеИмяМетаданныеОбъекта;
		Иначе
			МетаданныеОбъекта = ПолноеИмяМетаданныеОбъекта;
			ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
		КонецЕсли;
		
		УсловиеОтбораДанных = "ИСТИНА";
		ТекстВыборкиИзмерений = "ТаблицаИзменений.Ссылка КАК Ссылка";
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И &УсловиеОтбораДанных";
			
			Если ОтборПоСсылкам Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Ссылка В (&МассивСсылок)";
			ИначеЕсли ОтборПоВременнойТаблице Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"	#ТаблицаИзменения КАК ТаблицаИзменений",
								"	#ТаблицаИзменения КАК ТаблицаИзменений
								|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОтбора КАК Отбор
								|	ПО ТаблицаИзменений.Ссылка = Отбор.Ссылка");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОтбора", ИмяВременнойТаблицыОтбора);
				
			КонецЕсли;
				
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ТекстВыборкиИзмерений
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И &УсловиеОтбораДанных";
			
			ТекстВыборкиИзмерений = "";
			НовоеУсловиеОтбораДанных = "";
			Для Каждого Измерение из МетаданныеОбъекта.Измерения Цикл
				
				Если МассивПолныхИменМетаданныхОбъектов.Количество() > 1 Тогда
					ТекстВыборкиИзмерений = "ТаблицаИзменений." + Измерение.Имя + " КАК Ссылка";
					Прервать;
					
				Иначе
					ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
						|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
					Если ТипЗнч(Отбор) = Тип("Структура") И Отбор.Свойство(Измерение.Имя) Тогда
						НовоеУсловиеОтбораДанных = НовоеУсловиеОтбораДанных + "
							|	(ТаблицаИзменений." + Измерение.Имя + " В (&" + Измерение.Имя + ")
							|		ИЛИ &" + Измерение.Имя + " = НЕОПРЕДЕЛЕНО)
							|	И ";
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;// по измерениям регистра
			
			Если МассивПолныхИменМетаданныхОбъектов.Количество() = 1 Тогда
				ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
				Если НЕ ПустаяСтрока(НовоеУсловиеОтбораДанных) Тогда
					УсловиеОтбораДанных = Лев(НовоеУсловиеОтбораДанных, СтрДлина(НовоеУсловиеОтбораДанных) - 3);
				КонецЕсли;
			КонецЕсли;
			
			Если ОтборПоВременнойТаблице И ИзмеренияРегистраСведений <> Неопределено Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"	#ТаблицаИзменения КАК ТаблицаИзменений",
						"	#ТаблицаИзменения КАК ТаблицаИзменений
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОтбора КАК Отбор
						|	ПО ТаблицаИзменений.Ссылка = Отбор.Ссылка");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОтбора", ИмяВременнойТаблицыОтбора);
				
				ТекстСоединения = "";
				Для Каждого Измерение Из МассивИзмеренийРегистраСведений Цикл
					ТекстСоединения = ТекстСоединения +
						СтрШаблон("ТаблицаИзменений.%1 = Отбор.%1
								|	И ", Измерение);
				КонецЦикла;
				ТекстСоединения = Лев(ТекстСоединения, СтрДлина(ТекстСоединения) - 3);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИзменений.Ссылка = Отбор.Ссылка", ТекстСоединения);
				
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Регистратор КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменения КАК ТаблицаИзменений
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И &УсловиеОтбораДанных";
			
			Если ОтборПоСсылкам Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Регистратор В (&МассивСсылок)";
			ИначеЕсли ОтборПоВременнойТаблице Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"	#ТаблицаИзменения КАК ТаблицаИзменений",
								"	#ТаблицаИзменения КАК ТаблицаИзменений
								|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОтбора КАК Отбор
								|	ПО ТаблицаИзменений.Регистратор = Отбор.Ссылка");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОтбора", ИмяВременнойТаблицыОтбора);
				
			КонецЕсли;
			
		Иначе
			ТекстИсключения = НСтр("ru = 'Для этого типа метаданных не поддерживается проверка в функции ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменения", ПолноеИмяОбъекта + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораДанных", УсловиеОтбораДанных);
		МассивТекстовЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Соединитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, Соединитель);
	Запрос = Новый Запрос;
	Если ОтборПоСсылкам Тогда
		Запрос.УстановитьПараметр("МассивСсылок", Отбор);
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для Каждого Измерение Из Отбор Цикл
			Запрос.УстановитьПараметр(Измерение.Ключ, ?(ЗначениеЗаполнено(Измерение.Значение), Измерение.Значение, Неопределено));
		КонецЦикла;
	ИначеЕсли ОтборПоВременнойТаблице Тогда
		Запрос.МенеджерВременныхТаблиц = Отбор;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат НЕ Запрос.Выполнить().Пустой(); 
	
КонецФункции

#КонецОбласти

#КонецОбласти
