
#Область ПрограммныйИнтерфейс

#Область ПравилаПолученияФактическихДанных
	
// Возвращает имена показателей и соответствующих полей из схемы-источника
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема источник данных, которая содержит набор данных типа "Объединение" с именем "ОбъединенныйФакт"
//	Правило - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило получения фактических данных
//
// Возвращаемое значение:
//	ИсточникиСуммы - Структура - сопоставленные показатели факта и поля источника данных
//		* Ключ     - Строка - имя показателя фактических данных
//		* Значение - Строка - имя поля в схеме-источнике данных
// 
Функция ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.ОбъединенныйФакт;
	
	ИсточникиСуммы = Новый Структура;
	ИмяНабораДанных = Правило.ИмяМакетаИсточникаДанных; // Имя набора данных соответствует регистру операции
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		
		ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(Правило.ИсточникСуммыОперации).Ресурсы;
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для источника суммы %1 хозяйственной операции %2 не найдены соотвествующие ресурсы в источнике данных.'"), 
				Правило.ИсточникСуммыОперации, 
				Правило.ИсточникДанных);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				//Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		БюджетированиеСервер.ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных.Элементы[ИмяНабораДанных]);
	КонецЕсли;
	
	Возврат ИсточникиСуммы;
	
КонецФункции

// Делает свертку однотипно названных колонок таблицы значений в одну колонку с переносом данных.
// Например, позволяет несколько колонок Аналитика1..6 свернуть в одну колонку Аналитика.
// Имена сворачиваемых колонок должны состоять из двух (трех) частей - ИмяКолонкиИзмерения+(ПрефиксИдентификатора)+Идентификатор
// 
// Параметры:
//	ТаблицаДанных         - ТаблицаЗначений - таблица, колонки которой будут свернуты
//		После свертки таблица будет содержать следующие колонки:
//			- Колонки, не указанные в КолонкиИзмерения
//			- Колонки, указанные в КолонкиИзмерения, но свернутые из нескольких в одну
//			- Колонки, указанные в КолонкиАгрегаты с просуммированными данными
//	КолонкиИзмерения      - Строка, Массив - имена колонок через запятую, по уникальным  значениям которых будет сворачиваться таблица. 
//		После свертки колонки будут удалены
//	Идентификаторы        - Массив - строковые идентификаторы, по которым будут сворачиваться колонки и которые содержаться в именах колонок. 
//		Например, уникальный идентификатор или порядковый номер колонки
//	ПрефиксИдентификатора - Строка - префикс, который будет использоваться как составная часть идентификатора
//	КолонкиАгрегаты       - Строка, Массив - мена колонок через запятую, значения которых будут суммироваться при свертке
//
Процедура СвернутьПоКолонкамИдентификаторам(ТаблицаДанных, КолонкиИзмерения, Идентификаторы, ПрефиксИдентификатора = "", КолонкиАгрегаты = Неопределено, НечеткоеСоответствиеИдентификаторов = Ложь) Экспорт
	
	#Область Инициализация
	
	ИсходныеКолонки = ТаблицаДанных.Колонки;
	НетрансформируемыеИзмерения = Новый Массив;
	
	СКДСвертки = КомпоновкаДанныхСервер.ПустаяСхема();
	ПоляИтога = СКДСвертки.ПоляИтога;
	
	#КонецОбласти 
	
	#Область ПроверкаТиповПараметров
	
	Если ТипЗнч(КолонкиИзмерения) = Тип("Строка") Тогда
		// Удалим пробелы и сформируем список имен
		ИменаКолонокИзмерений = СтрРазделить(СтрЗаменить(КолонкиИзмерения, " ", ""), ",");
	ИначеЕсли ТипЗнч(КолонкиИзмерения) = Тип("Массив") Тогда
		ИменаКолонокИзмерений = КолонкиИзмерения;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
	
	Если ТипЗнч(КолонкиАгрегаты) = Тип("Строка") Тогда
		// Удалим пробелы и сформируем список имен
		ИменаКолонокАгрегатов = СтрРазделить(СтрЗаменить(КолонкиАгрегаты, " ", ""), ",");
	ИначеЕсли ТипЗнч(КолонкиАгрегаты) = Тип("Массив") Тогда
		ИменаКолонокАгрегатов = КолонкиАгрегаты;
	ИначеЕсли ТипЗнч(КолонкиАгрегаты) = Тип("Неопределено") Тогда
		ИменаКолонокАгрегатов = Новый Массив;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 4'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(Идентификаторы) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 5'") ;
	КонецЕсли;
	
	#КонецОбласти

	НДТаблицаДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДСвертки, 
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");

	#Область ДобавлениеИсходныхПолейВНаборДанных
	
	Для Каждого ИсходнаяКолонка Из ИсходныеКолонки Цикл
		ИмяКолонки = ИсходнаяКолонка.Имя;
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаДанных, ИмяКолонки, ИмяКолонки, , ИсходнаяКолонка.ТипЗначения);
		
		НетрансформируемыеИзмерения.Добавить(ИмяКолонки);
	КонецЦикла;
	
	#КонецОбласти 

	#Область ДобавлениеНовыхПолейИзмерений
		
	ЭлементыВыраженияСверткиПоля = Новый Массив;
	
	Для Каждого ИмяКолонкиИзмерения Из ИменаКолонокИзмерений Цикл
		
		ЭлементыВыраженияСверткиПоля.Добавить("ВЫБОР");
		
		Для Каждого УникальныйИдентификатор Из Идентификаторы Цикл 
			
			ИмяИсходногоПоля = ИмяКолонкиИзмерения + ПрефиксИдентификатора + УникальныйИдентификатор;
			
			Если НечеткоеСоответствиеИдентификаторов И ИсходныеКолонки.Найти(ИмяИсходногоПоля) = Неопределено Тогда // Идентификаторов может быть передано больше, чем есть колонок
				Продолжить;
			КонецЕсли;
			
			ЭлементыВыраженияСверткиПоля.Добавить("КОГДА " + "ЗначениеЗаполнено(" + ИмяИсходногоПоля + ")" + Символы.ПС
			+ "ТОГДА " + ИмяИсходногоПоля);
			
			ИндексПоля = НетрансформируемыеИзмерения.Найти(ИмяИсходногоПоля);
			Если Не ИндексПоля = Неопределено Тогда
				НетрансформируемыеИзмерения.Удалить(ИндексПоля);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыВыраженияСверткиПоля.Добавить("КОНЕЦ");
		
		ВыражениеСверткиПоля = СтрСоединить(ЭлементыВыраженияСверткиПоля, Символы.ПС);
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДСвертки, ИмяКолонкиИзмерения, ВыражениеСверткиПоля, , Истина);
		
		ЭлементыВыраженияСверткиПоля.Очистить();
		
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ДобавлениеНовыхПолейАгрегатов
	
	Для Каждого ИмяКолонкиАгрегата Из ИменаКолонокАгрегатов Цикл
		
		ВыражениеАгрегата = "ЕСТЬNULL(" 
		+ "ВЫБОР КОГДА ЗначениеЗаполнено(" + ИмяКолонкиАгрегата + ") ТОГДА " + ИмяКолонкиАгрегата + " ИНАЧЕ 0 КОНЕЦ" + ", 0)";
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДСвертки, ИмяКолонкиАгрегата, ВыражениеАгрегата, , Истина);
		
		Если ПоляИтога.Найти(ИмяКолонкиАгрегата) = Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовыйРесурс(СКДСвертки, ИмяКолонкиАгрегата, "Сумма");
		КонецЕсли;
		
		ИндексПоля = НетрансформируемыеИзмерения.Найти(ИмяКолонкиАгрегата);
		Если Не ИндексПоля = Неопределено Тогда
			НетрансформируемыеИзмерения.Удалить(ИндексПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область СозданиеНастроек
	
	// Создадим и инициализируем компоновщик
	НастройкиСвертки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДСвертки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиСвертки);
	
	КорневойЭлементСтруктуры = НастройкиСвертки.Структура;
	
	ГруппировкаДанных = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
	
	Для Каждого ИмяКолонки Из НетрансформируемыеИзмерения Цикл 
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаДанных, ИмяКолонки);
		
	КонецЦикла;
	
	Для Каждого ИмяКолонки Из ИменаКолонокИзмерений Цикл
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаДанных, ИмяКолонки);
		
	КонецЦикла;
	
	Для Каждого ИмяКолонки Из ИменаКолонокАгрегатов Цикл
		
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(НастройкиСвертки, ИмяКолонки);
	
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеСвернутойТаблицы
	
	// Инициализировать макет компоновки, который будет сохраняться в кэш и выполняться
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДСвертки, НастройкиСвертки);
	
	// Выполнить процессор вывода в коллекцию значений
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	
	#КонецОбласти 
	
КонецПроцедуры

// Возвращает схему для правила получения фактических данных
// 
// Параметры
// 	 ОписаниеПравила - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//			   СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов,
//			   Выборка, СтрокаТаблицыЗначений, Структура - Правило получения факта по показателям бюджетов.
// 
// Возвращаемое значение
// 	 СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соотвествующая источнику
//
Функция СхемаКомпоновкиДанныхПравила(ОписаниеПравила) Экспорт
	
	// Пустая схема, для выполнения без ошибок
	СхемаКомпоновкиДанныхПравила = КомпоновкаДанныхСервер.ПустаяСхема();
	
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанныхПравила);
	НаборДанных.Запрос =
		"ВЫБРАТЬ
		|*";
		
	// Получим схему правила
	ТипОписанияПравила = ТипЗнч(ОписаниеПравила);
	
	Если ТипОписанияПравила = Тип("СтрокаТаблицыЗначений")
		Или ТипОписанияПравила = Тип("ТаблицаЗначений") Тогда
		РеквизитыПравила = ОписаниеПравила.Правило
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипОписанияПравила) Тогда
		РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеПравила, "Ссылка, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных");
		
	Иначе
		РеквизитыПравила = ОписаниеПравила;
	КонецЕсли;
	
	ПроизвольныеДанныеВИсточнике = (РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные);
	
	ТипОбъектаИсточникаДанных = ТипЗнч(РеквизитыПравила.Ссылка);
	ПоддерживаемыеТипыОбъектов = ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных();
	
	ИмяСправочникаИсточника = ПоддерживаемыеТипыОбъектов[ТипОбъектаИсточникаДанных];
	
	Если ИмяСправочникаИсточника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимое название справочника-источника получения данных.'");
	КонецЕсли;
		
	Если Не ПроизвольныеДанныеВИсточнике Тогда
		НайденнаяСхемаПравила = 
			ИсточникиДанныхПовтИсп.СхемаКомпоновкиДанныхПравила(
				ИмяСправочникаИсточника, 
				РеквизитыПравила.РазделИсточникаДанных,
				РеквизитыПравила.ИсточникДанных);
		
	Иначе // Произвольная схема в источнике данных 
		НайденнаяСхемаПравила = 
			ИсточникиДанныхПовтИсп.ПроизвольнаяСхемаКомпоновкиДанныхПравила(
				ИмяСправочникаИсточника, 
				РеквизитыПравила.РазделИсточникаДанных,
				РеквизитыПравила.ХешСхемыКомпоновкиДанных);
		
	КонецЕсли;
	
	// Если схема не найдена, тогда получим общую схему-умолчание, в которой будет осуществляться отбор данных
	Если Не НайденнаяСхемаПравила = Неопределено Тогда
			
		СхемаКомпоновкиДанныхПравила = НайденнаяСхемаПравила;
		
	Иначе
		
		Если РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
			И ЗначениеЗаполнено(РеквизитыПравила.ИсточникДанных) Тогда
			
			ИменаСхемУмолчаний = ИсточникиДанныхПовтИсп.ИменаСхемУмолчанийДляИсточниковДанных();
			ИмяСхемыУмолчания = ИменаСхемУмолчаний[ИмяСправочникаИсточника];
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для правила ""%1"" и источника ""%2"" не определена схема получения данных.'"), 
				РеквизитыПравила.Ссылка,
				ОписаниеПравила.ИсточникДанных);
					
			Если Не ЗначениеЗаполнено(ИмяСхемыУмолчания) Тогда
				
				ВызватьИсключение ТекстСообщенияОбОшибке;
				
			КонецЕсли;
			
			СхемаКомпоновкиДанныхПравила = Справочники[ИмяСправочникаИсточника].ПолучитьМакет(ИмяСхемыУмолчания);
			
			Если СхемаКомпоновкиДанныхПравила = Неопределено Тогда
				
				ВызватьИсключение ТекстСообщенияОбОшибке;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает параметры получения факта по умолчанию
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов
//		* ВалютаМеждународ                 - СправочникСсылка.Валюты - Закешированное значение функц. валюты МФУ. См. Константы.ВалютаФункциональная
//		* ВалютаОтчета                     - СправочникСсылка.Валюты - Валюта данных
//		* ВалютаРегл                       - СправочникСсылка.Валюты - Закешированное значение валюты регл. учета. См. Константы.ВалютаРегламентированногоУчета
//		* ВалютаУпр                        - СправочникСсылка.Валюты - Закешированное значение валюты упр. учета. См. Константы.ВалютаУправленческогоУчета
//		* ВидыАналитик                     - Массив - Аналитика (Номенклатура, Контрагенты...), в разрезе которой необходимо получить факт.
//			** ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - значения массива
//		* ВозвращатьПравилоПолученияДанных - Булево - добавлять в таблицу данных колонку с примененным правилом
//			Значение по умолчанию - Ложь.
//		* ВозвращатьСтатьюПоказательБюджета - Булево - добавлять в таблицу данных колонку со статьей/показателем (источник данных)
//			Значение по умолчанию - Ложь.
//		* ВозвращатьСуммуВВалюте           - Булево - Вернуть сумму в валюте в соответствии с настройками статьи / показателя.
//			Значение по умолчанию - Истина.
//		* ВозвращатьУпрИРеглСуммы          - Булево - Вернуть суммы из регистров упр. и регл.
//			Значение по умолчанию - Ложь.
//		* ДополнительныеДанные             - Структура - дополнительные данные, которые будут присединяться к фактическим данным
//			** Вид                   - ПеречислениеСсылка.ВидДополнительныхДанныхИсточниковДанных - описывает способ дополнения фактических данных 
//			** ИмяПоляИдентификатора - Строка - имя поля-ключа для соединения с фактическими данными
//			** ТаблицаДанных         - ТаблицаЗначений - таблица дополнительных данных, содержащая колонку с именем поля-идентификатора
//		* ДополнительныйОтбор              - Структура - Дополнительный (к основному отбору правила) отбор, который накладывается на данные источника.
//			** Ключ     - Произвольный - имя поля, по которому требуется применить доп. отбор
//			** Значение - Произвольный - значение доп. отбора
//		* ИндексыТаблиц                    - Соответствие - имена таблиц значений параметров получения факта и массивы включеных в них индексах.
//			** Ключ - Строка - имя таблицы в параметрах получения факта
//			** Значение - Массив - массив строк, описывающих примененные индексы
//		* ИспользуемыеНумерованныеАналитики- Структура - задействованные нумерованные аналитики. Принимает значения от "Аналитика1" до "Аналитика6"
//		* МаксимальныйНомерАналитики       - Число - число задействованных аналитик. Принимает значения от 1 до 6
//		* ОстаткиТолькоНаНачалоПериода     - Булево - Получать факт только на начало периода (для остатков),
//			в противном случае данные получаются на конец каждого из подпериодов.
//			Значение по умолчанию - Ложь.
//		* Период                           - СтандартныйПериод - Период выборки
//		* Периодичность                    - ПеречислениеСсылка.Периодичность, Неопределено - Периодичность детализации данных за период. Неопределено - без детализации.
//		* Показатели                       - показатели, которые автоматически подбираются в выборку с учетом настроек набора данных источника
//			** Количество - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение количества
//			** Сумма      - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение суммы
//		* ПоОрганизациям                   - Булево - Развернуть по организациям.
//			Значение по умолчанию - Ложь.
//		* ПоПодразделениям                 - Булево - Развернуть по подразделениям.
//			Значение по умолчанию - Ложь.
//		* РазворачиватьПоРегистратору      - Булево - Разверуть факт по регистратору (для оборотов).
//			Значение по умолчанию - Ложь.
//		* ТаблицаАналитик                  - ТаблицаЗначений - правила, используемые измерения, аналитики и мэппинг аналитик (вид и выражение для получения). По умолчанию пустая таблица.
//			** Правило                          - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - ссылка на правило
//			** ПоОрганизациям                   - Булево - получать данные по соответствующему измерению
//			** ПоПодразделениям                 - Булево - получать данные по соответствующему измерению
//			** ВидАналитики1..6                 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики
//			** ВыражениеЗаполненияАналитики1..6 - Строка - выражение для получения данные из полей схемы-источника
//		* ТаблицаПериодов                  - ТаблицаЗначений - непрерывные периоды, за которые требуется получить данные. По умолчанию пустая таблица.
//			** ПравилоФакта  - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - ссылка на правило
//			** НачалоПериода - Дата - дата начала периода
//			** КонецПериода  - Дата - дата окончания периода
//		* ТаблицаПравилСтатей              - ТаблицаЗначений - правила получения факта и колонки с реквизитами. По умолчанию пустая таблица.
//			** Состав колонок см. подробнее в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта
//
Функция ШаблонПараметровПолученияФакта() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода", Ложь);
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина);
	Параметры.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
	Параметры.Вставить("ВозвращатьПравилоПолученияДанных", Ложь);
	Параметры.Вставить("ВозвращатьСтатьюПоказательБюджета", Ложь);
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	
	// Разрезы данных
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	Параметры.Вставить("РазворачиватьПоРегистратору", Ложь);
	Параметры.Вставить("МаксимальныйНомерАналитики", 0);
	Параметры.Вставить("ИспользуемыеНумерованныеАналитики", Новый Структура);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	// Валюты
	Параметры.Вставить("ВалютаОтчета");
	Параметры.Вставить("ВалютаУпр",        Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	//++ НЕ УТКА
	Параметры.Вставить("ВалютаМеждународ", Константы.ВалютаФункциональная.Получить());
	//-- НЕ УТКА
	
	// Параметры пакетного получения данных с помощью правил получения данных
	
	ОписаниеТипаПравилаПолученияФакта = Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	Параметры.Вставить("ТаблицаПравилСтатей", Новый ТаблицаЗначений);
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	ТаблицаПериодов.Колонки["ДатаНачала"].Имя = "НачалоПериода";
	ТаблицаПериодов.Колонки["ДатаОкончания"].Имя = "КонецПериода";
	ТаблицаПериодов.Колонки.Добавить("ПравилоФакта", ОписаниеТипаПравилаПолученияФакта);
	
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("Правило", ОписаниеТипаПравилаПолученияФакта);
	ТаблицаАналитик.Колонки.Добавить("ПоОрганизациям", ОписаниеТипаБулево);
	ТаблицаАналитик.Колонки.Добавить("ПоПодразделениям", ОписаниеТипаБулево);
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаАналитик.Колонки.Добавить("ВидАналитики" + НомерАналитики);
		ТаблицаАналитик.Колонки.Добавить("ВыражениеЗаполненияАналитики" + НомерАналитики);
	КонецЦикла;
	
	Параметры.Вставить("ТаблицаАналитик", ТаблицаАналитик);
	
	Параметры.Вставить("ДополнительныеДанные", Новый Структура);
	Параметры.ДополнительныеДанные.Вставить("Вид", Перечисления.ВидДополнительныхДанныхИсточниковДанных.ПустаяСсылка()); // Поддерживается только этот вид
	Параметры.ДополнительныеДанные.Вставить("ИмяПоляИдентификатора", "");
	Параметры.ДополнительныеДанные.Вставить("НумерацияИдентификаторов", Ложь);
	Параметры.ДополнительныеДанные.Вставить("ТаблицаДанных", Неопределено);
	
	Параметры.Вставить("ИндексыТаблиц", Новый Соответствие); // Ключ - название таблицы, значение - массив строк индексов
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти 

#Область ИндексыТаблицЗначений

// Возвращает строковые представления индексов
// 
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - таблица, индексы которой требуется получить
//
// Возвращаемое значение:
//	Массив - строковые представления индексов таблицы
// 
Функция ИндексыТаблицыВМассив(ТаблицаЗначений) Экспорт
	ИндексыТаблицы = Новый Массив;
	
	Для Каждого ИндексТаблицы Из ТаблицаЗначений.Индексы Цикл
		ИндексыТаблицы.Добавить(Строка(ИндексТаблицы));
	КонецЦикла;
	
	Возврат ИндексыТаблицы;
	
КонецФункции

// Возвращает строковые представления индексов для нескольких таблиц
// 
// Параметры:
//	ТаблицыЗначений - Соответствие, Структура - таблицы, индексы которой требуется получить
//		* Ключ     - Строка - имя таблицы
//		* Значение - ТаблицаЗначений - таблица, индексы которой требуется получить
//
// Возвращаемое значение:
//	Соответствие - индексы таблиц
//		* Ключ     - Строка - имя таблицы
//		* Значение - Массив - строковые представления индексов таблицы
// 
Функция ИменаТаблицИИндексы(ТаблицыЗначений) Экспорт
	ИменаТаблицИИндексы = Новый Соответствие;
	
	Для Каждого ЭлементТаблицЗначений Из ТаблицыЗначений Цикл 
		ИменаТаблицИИндексы.Вставить(ЭлементТаблицЗначений.Ключ, ИндексыТаблицыВМассив(ЭлементТаблицЗначений.Значение));
	КонецЦикла;
	
	Возврат ИменаТаблицИИндексы;
КонецФункции

// Устанавливает или очищает индексы таблицы значений
// 
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - таблица, индексы которой требуется установить
//	ИндексыТаблицы - Массив, Неопределено - строковые представления индексов таблицы.
//		Если передано Неопределено, то индексы таблицы будут очищены
//
Процедура УстановитьИндексыИзМассива(ТаблицаЗначений, ИндексыТаблицы = Неопределено) Экспорт
	
	Если ИндексыТаблицы = Неопределено Тогда
		ТаблицаЗначений.Индексы.Очистить();
	Иначе
		
		Для Каждого ИндексТаблицы Из ИндексыТаблицы Цикл
			ТаблицаЗначений.Индексы.Добавить(ИндексТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти