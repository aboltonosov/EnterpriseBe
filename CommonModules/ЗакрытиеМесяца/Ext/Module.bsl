////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАКРЫТИЯ МЕСЯЦА

#Область СлужебныеПроцедурыИФункции

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "Регистратор"   // <ДокументСсылка.*>
	;
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты,
		СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", ТаблицаПараметров);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВоВспомогательныеРегистрыСведений(Движения, ТаблицаДвижений, ТаблицаРеквизиты,
										ВспомогательныйРегистр, СтрокаГруппировки = Неопределено, СтрокаСуммирования = Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВспомогательныйРасчет = Движения[ВспомогательныйРегистр];
	Параметры = ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Если СтрокаГруппировки <> Неопределено И СтрокаСуммирования <> Неопределено Тогда
		ТаблицаДвижений.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	КонецЕсли;
	
	КолонкиПериода = Новый Структура;
	КолонкиПериода.Вставить("ПериодРасчета", Реквизиты.Период);
	КолонкиПериода.Вставить("Период",        Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		ВспомогательныйРасчетЗапись = ВспомогательныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, КолонкиПериода);
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, СтрокаТаблицы);
	КонецЦикла;
	
	ВспомогательныйРасчет.Записывать = Истина;
	
КонецПроцедуры

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

#Область ВыявлениеФинансовогоРезультата

#Область Счета90и91

Процедура СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(Движения, Проводки, Период, Организация) Экспорт
	
	СодержаниеПроводки = НСтр("ru = 'Определение финансовых результатов'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	
	Для Каждого Запись Из Проводки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		
		Если Запись.ЭтоПрибыль Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		
		Проводка.Сумма = Запись.Сумма;
		СуммаНУ        = Запись.СуммаНУ;
		СуммаПР        = Запись.СуммаПР;
		СуммаВР        = Запись.СуммаВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ, СуммаПР, СуммаПР,
								СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		Проводка.Содержание = СодержаниеПроводки;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()

Функция ПолучитьТаблицаЗакрытияСчетов90_91()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытияСчетов90_91 = Новый ТаблицаЗначений;
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетДт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетКт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Сумма",          ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаНУ",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаПР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаВР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ЭтоПрибыль",     Новый ОписаниеТипов("Булево"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ПрибылиИУбытки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Подразделение",  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат ТаблицаЗакрытияСчетов90_91;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытияСчетов90_91
	
	СписокОбязательныхКолонок = ""
	+ "Сумма,"          // <Число, 15, 2>
	+ "СуммаНУ,"        // <Число, 15, 2>
	+ "СуммаПР,"        // <Число, 15, 2>
	+ "СуммаВР,"        // <Число, 15, 2>
	+ "СчетДт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "ЭтоПрибыль,"     // <Булево>
	+ "ПрибылиИУбытки," // <ПеречислениеСсылка.ПрибылиИУбытки>
	+ "Подразделение,"   // <Ссылка на справочник подразделений>
	+ "НаправлениеДеятельности" // // <Ссылка на справочник направлений деятельности>
	;
	
	Параметры.Вставить("ТаблицаЗакрытияСчетов90_91", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "НачДата,"         // <Дата>
	+ "КонДата,"         // <Дата>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка.*>
	+ "КоэффициентЕНВД," // <Число, 15, 2>
	+ "Содержание"       // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

#КонецОбласти

#Область Счет90

Функция ПроводкиЗакрытиеСчета90(Период, Организация) Экспорт
	
	НачалоПериода = НачалоМесяца(Период);
	КонецПериода  = КонецМесяца(Период);
	Организации   = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	Прибыль = ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации);
	ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль);
	
	ОписаниеСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	РанееСформированныеПроводки = РанееСформированныеПроводкиПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации);
	
	// Вычтем РанееСформированныеПроводки из Проводки
	Для Каждого ПроводкаСторно Из РанееСформированныеПроводки Цикл
		Проводка = Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, ПроводкаСторно, , КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
		КоллекцииСумм.Вычесть(Проводка, ПроводкаСторно, ОписаниеСумм);
	КонецЦикла;
	
	// Свернем
	КолонкиСумм        = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	КолонкиГруппировок = Новый Массив;
	Для Каждого Колонка Из Проводки.Колонки Цикл
		Если КолонкиСумм.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
			
	Проводки.Свернуть(СтрСоединить(КолонкиГруппировок, ","), КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
	
	// Удалим пустые проводки
	КоличествоПроводок = Проводки.Количество();
	Для НомерСКонца = 1 По КоличествоПроводок Цикл
		Проводка = Проводки[КоличествоПроводок - НомерСКонца];
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСумм) Тогда
			Проводки.Удалить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

Функция НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм = Неопределено)
	
	Если ОписаниеКоллекцииСумм = Неопределено Тогда
		ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина); // Всегда включаем все четыре суммы
	КонецЕсли;
	
	Прибыль = Новый ТаблицаЗначений;
	Прибыль.Колонки.Добавить("ОсновнаяСистемаНалогообложения", Новый ОписаниеТипов("Булево"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Прибыль, ОписаниеКоллекцииСумм);
	
	Возврат Прибыль;
	
КонецФункции

Функция ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации)
	
	ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	Прибыль = НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм);
	
	Счет90 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи);
	// На счете 90 есть субсчета 
	// - "накопительные" - для учета доходов и расходов в течение периода (90.01, 90.02 и т.д.)
	// - "закрывающий" - для учета финансового результата по окончании периода (90.09)
	// Финансовый результат определяется сопоставлением оборотов по накопительным счетам.
	// При этом следует исключить обороты между "накопительными" и "закрывающим" счетами, которые могут быть сформированы при закрытии года.
	НакопительныеСубсчетаСчета90 = ОбщегоНазначенияКлиентСервер.СократитьМассив(
		Счет90,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж));// 90.09
		
	// Получим список счетов, предназначенных для учета доходов и расходов деятельности с особым порядком налогообложения
	ПрименяетсяОсобыйПорядокНалогообложения = Ложь;
	Для Каждого Организация Из Организации Цикл
		
		ПрименяетсяОсобыйПорядокНалогообложения = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
			Организация,
			НачалоПериода,
			КонецПериода);
			
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПрименяетсяОсобыйПорядокНалогообложения Тогда
		СчетаОсобыйПорядокНалогообложения = Новый Массив;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90", НакопительныеСубсчетаСчета90);
		Запрос.УстановитьПараметр("СчетаЕНВД", НалоговыйУчет.ПолучитьМассивСчетовЕНВД());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&НакопительныеСубсчетаСчета90)
		|	И Хозрасчетный.Ссылка В(&СчетаЕНВД)";
		СчетаОсобыйПорядокНалогообложения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                      КонецПериода);
	Запрос.УстановитьПараметр("Организации",                       Организации);
	Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90",      НакопительныеСубсчетаСчета90);
	Запрос.УстановитьПараметр("СчетаОсобыйПорядокНалогообложения", СчетаОсобыйПорядокНалогообложения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения) КАК ОсновнаяСистемаНалогообложения,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&НакопительныеСубсчетаСчета90), , Организация В (&Организации), КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Прибыль.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Прибыль;
	
КонецФункции

Функция РанееСформированныеПроводкиПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации)
	
	// Обратное преобразование к СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоПрибыль,
	|	Прибыль.Подразделение КАК Подразделение,
	|	Прибыль.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Прибыль.Субконто1 КАК ПрибылиИУбытки,
	|	Прибыль.Счет КАК СчетКт,
	|	Прибыль.КорСчет КАК СчетДт,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаОборотКт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаНУОборотКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаПРОборотКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаВРОборотКт, 0)) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки), Организация В (&Организации), КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Прибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	Прибыль.Счет,
	|	Прибыль.КорСчет,
	|	Прибыль.Подразделение,
	|	Прибыль.НаправлениеДеятельности,
	|	Прибыль.Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1,
	|	Убыток.КорСчет,
	|	Убыток.Счет,
	|	СУММА(ЕСТЬNULL(Убыток.СуммаОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаНУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаПРОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаВРОборотДт, 0))
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки), Организация В (&Организации), КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), ) КАК Убыток
	|
	|СГРУППИРОВАТЬ ПО
	|	Убыток.Счет,
	|	Убыток.КорСчет,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

Процедура ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль)
	
	// См. также РанееВыявленнаяПрибыльОтПродаж()
	
	ОписаниеКоллекции = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина);
	
	Для Каждого ЗаписьПрибыль Из Прибыль Цикл
		
		Если КоллекцииСумм.Пустая(ЗаписьПрибыль, ОписаниеКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьПрибыль.ОсновнаяСистемаНалогообложения Тогда
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Иначе
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		КонецЕсли;
		
		ОписаниеПроводки = Проводки.Добавить();
		Если ЗаписьПрибыль.Сумма > 0 Или (ЗаписьПрибыль.Сумма = 0 И ЗаписьПрибыль.СуммаНУ > 0) Тогда
			// Прибыль
			ОписаниеПроводки.ЭтоПрибыль     = Истина;
			ОписаниеПроводки.СчетДт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.СчетКт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			КоллекцииСумм.Заполнить(ОписаниеПроводки, ЗаписьПрибыль, ОписаниеКоллекции);
		Иначе
			// Убыток
			ОписаниеПроводки.ЭтоПрибыль     = Ложь;
			ОписаниеПроводки.СчетДт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.СчетКт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			Убыток = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекции);
			КоллекцииСумм.Вычесть(Убыток, ЗаписьПрибыль, ОписаниеКоллекции); // Поменяем знак
			КоллекцииСумм.Заполнить(ОписаниеПроводки, Убыток, ОписаниеКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Счет91

Функция ПодготовитьТаблицыЗакрытиеСчета91(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	ЗакрытиеСчетов90_91 = ПолучитьТаблицаЗакрытияСчетов90_91();
	Параметры = ПодготовитьПараметрыЗакрытиеСчетов90_91(ЗакрытиеСчетов90_91, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводок = Параметры.ТаблицаЗакрытияСчетов90_91;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("КоэффициентЕНВД",   Реквизиты.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("Счета91",           БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_НеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|					ИЛИ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|					ИЛИ Субконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|					ИЛИ Субконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|					ИЛИ Субконто1 = НЕОПРЕДЕЛЕНО),
	|			НЕ КорСчет В (&Счета91),
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * (1 - &КоэффициентЕНВД)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			) КАК Хозрасчетный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД) КАК СчетПрибылейИУбытков,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_ЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|					ИЛИ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)),
	|			НЕ КорСчет В (&Счета91),
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * &КоэффициентЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			) КАК Хозрасчетный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков КАК СчетПрибылейИУбытков,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.Прибыль) КАК Прибыль,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльПР) КАК ПрибыльПР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПРибыльВР) КАК ПРибыльВР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльНУ) КАК ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_НеЕНВД КАК ВТ_Закрытие91_НеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_ЕНВД.СчетПрибылейИУбытков,
	|	ВТ_Закрытие91_ЕНВД.Прибыль,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльПР,
	|	ВТ_Закрытие91_ЕНВД.ПРибыльВР,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_ЕНВД КАК ВТ_Закрытие91_ЕНВД";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Прибыль = 0 ИЛИ НЕ Выборка.ПрибыльНУ = 0 ИЛИ НЕ Выборка.ПрибыльПР = 0 ИЛИ НЕ Выборка.ПрибыльВР = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Запись.ЭтоПрибыль = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = Выборка.Прибыль;
				Запись.СуммаНУ        = Выборка.ПрибыльНУ;
				Запись.СуммаПР        = Выборка.ПрибыльПР;
				Запись.СуммаВР        = Выборка.ПрибыльВР;
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = -Выборка.Прибыль;
				Запись.СуммаНУ        = -Выборка.ПрибыльНУ;
				Запись.СуммаПР        = -Выборка.ПрибыльПР;
				Запись.СуммаВР        = -Выборка.ПрибыльВР;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции // ПодготовитьТаблицыЗакрытиеСчета91()

#КонецОбласти

#КонецОбласти

#Область ОкруглениеНДС

Процедура СформироватьДвиженияПоОкруглениюНДС(ТаблицаРеквизиты, СписокОрганизаций, Движения) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения);
	
	ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения);
		
КонецПроцедуры // СформироватьДвиженияПоОкруглениюНДС()

Процедура ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос	= Новый Запрос;
	
	СубконтоВидыПлатежейВБюджет = Новый Массив;
	СубконтоВидыПлатежейВБюджет.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Запрос.УстановитьПараметр("НачДата",					 Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",					 Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейВБюджет", СубконтоВидыПлатежейВБюджет);
	Запрос.УстановитьПараметр("СписокОрганизаций", 			 СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НалогНачисленУплачен",		 Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС),
	|			&СубконтоВидыПлатежейВБюджет,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &НалогНачисленУплачен,
	|			НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)),
	|			) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация", 			 Реквизиты.Организация);
		ПараметрыОтчета.Вставить("ГруппаОрганизаций",        СписокОрганизаций.ВыгрузитьЗначения());
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", Реквизиты.НачДата);
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  Реквизиты.КонДата);
		ПараметрыОтчета.Вставить("ВесьОборотЗаПериод",  	 Истина);
		ПараметрыОтчета.Вставить("ВидДокумента");
		ПараметрыОтчета.Вставить("ДатаПодписи", Реквизиты.КонДата);
		
		Контейнер = Новый Структура();
		Контейнер.Вставить("Раздел3", ПолучитьСтруктуруПоказателейРаздела3Декларации());
		Контейнер.Вставить("Раздел4", ПолучитьСтруктуруПоказателейРаздела4Декларации());
		Контейнер.Вставить("Раздел6", ПолучитьСтруктуруПоказателейРаздела6Декларации());
		
		УчетНДС.ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер, Ложь);
		
		СтруктураПоказателейРаздела3 = Контейнер.Раздел3;
		СтруктураПоказателейРаздела4 = Контейнер.Раздел4;
		СтруктураПоказателейРаздела6 = Контейнер.Раздел6;
		
		УчетНДС.РасчитатьПоказателиРаздела3Декларации(СтруктураПоказателейРаздела3);
		
		ОстатокОкругления = 0;
		НДСКВозмещению = Ложь;
		ВычетПоЭкспорту = Окр(СтруктураПоказателейРаздела4.П000400000103_1) + Окр(СтруктураПоказателейРаздела6.П000600000104_1);
		НачислениеПоЭкспорту = Окр(СтруктураПоказателейРаздела6.П000600000103_1);

		Если СтруктураПоказателейРаздела3.П000300023003 > 0 Тогда 
			НДСПо68_02 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
			ОстатокОкругления = НДСПо68_02 - СтруктураПоказателейРаздела3.П000300023003 + ВычетПоЭкспорту - НачислениеПоЭкспорту;
		ИначеЕсли СтруктураПоказателейРаздела3.П000300024003 > 0 Тогда 
			НДСКВозмещению = Истина;
			НДСПо68_02 = Выборка.СуммаОборотДт - Выборка.СуммаОборотКт;
			ОстатокОкругления = НДСПо68_02 - СтруктураПоказателейРаздела3.П000300024003 - ВычетПоЭкспорту + НачислениеПоЭкспорту;
		КонецЕсли;
		
		Если ОстатокОкругления = 0 
			ИЛИ ОстатокОкругления > 0.99
			ИЛИ ОстатокОкругления < -0.99 Тогда // Если остаток округления больше рубля, проводку по округлению не формируем
			Возврат;
		Иначе 
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
			Проводка.СчетКт      = Выборка.Счет;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
			Если НЕ НДСКВозмещению Тогда
				Проводка.Сумма = - ОстатокОкругления;
			Иначе
				Проводка.Сумма = ОстатокОкругления;
			КонецЕсли;
			
			Проводка.Содержание = Реквизиты.Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос = Новый Запрос;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ВидыСубконто",      ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	Хозрасчетный.Субконто1 КАК Контрагент,
	|	Хозрасчетный.Субконто2 КАК Договор,
	|	Хозрасчетный.Субконто3 КАК ДокументРасчетовСКонтрагентами,
	|	Хозрасчетный.СуммаОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто2.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияИмущества), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент))) КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СуммаКонечныйОстатокКт <> 0";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОкрСумма = Окр(Выборка.СуммаОборотКт);
			ОстатокОкругления = ОкрСумма - Выборка.СуммаОборотКт;
			
			Если ОстатокОкругления = 0 Тогда 
				Продолжить;
			Иначе
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				Проводка.СчетКт      = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Контрагенты", Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Договоры", Выборка.Договор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"ДокументыРасчетовСКонтрагентами", Выборка.ДокументРасчетовСКонтрагентами);
				
				Проводка.Сумма      = ОстатокОкругления;
				Проводка.Содержание = Реквизиты.Содержание;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОкруглениеНДСНалоговогоАгента

Функция ПолучитьСтруктуруПоказателейРаздела3Декларации()
	
	СтруктураПоказателейРаздела3 = Новый Структура;
	
	СтруктураПоказателейРаздела3.Вставить("П000300001003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300013003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300014003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300015003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300016003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300017003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300018003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300019003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300020003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300021003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300022003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300023003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300024003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300001005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300009005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300010005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300011005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300012005",0);
	
	Возврат СтруктураПоказателейРаздела3;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейРаздела4Декларации()
	
	СтруктураПоказателейРаздела4 = Новый Структура;
	
	СтруктураПоказателейРаздела4.Вставить("П000400000102_1",0);
	СтруктураПоказателейРаздела4.Вставить("П000400000103_1",0);
	
	Возврат СтруктураПоказателейРаздела4;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейРаздела6Декларации()

	СтруктураПоказателейРаздела6 = Новый Структура;
	
	СтруктураПоказателейРаздела6.Вставить("П000600000102_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000103_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000104_1", 0);
	
	Возврат СтруктураПоказателейРаздела6;

КонецФункции

#КонецОбласти

// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА

Процедура СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Если Параметры.ТаблицаЗакрытие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаЗакрытие Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		Проводка.Сумма       = Запись.Сумма;
		Проводка.Содержание  = Запись.Содержание;
		
		Если Запись.КоличествоДт <> 0 Тогда
			Проводка.КоличествоДт = Запись.КоличествоДт;
		КонецЕсли;
		
		Если Запись.КоличествоКт <> 0 Тогда
			Проводка.КоличествоКт = Запись.КоличествоКт;
		КонецЕсли;
		
		Если Запись.СубконтоДт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.СубконтоДт1);
		КонецЕсли;
		
		Если Запись.СубконтоКт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.СубконтоКт1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Подразделение) Тогда
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.НаправлениеДеятельности) Тогда
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["СчетДт"]);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["СчетКт"]);
			
			Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиДт"] = Запись.НаправлениеДеятельности;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиКт"] = Запись.НаправлениеДеятельности;
			КонецЕсли;
		КонецЕсли;
		
		СуммаНУ = Запись.СуммаНУ;
		СуммаПР = Запись.СуммаПР;
		СуммаВР = Запись.СуммаВР;
		
		Если СуммаНУ <> 0 Или СуммаПР <> 0 Или СуммаВР <> 0 Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУ, СуммаНУ, СуммаПР, СуммаПР, СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвижения99Реформация()

Процедура СформироватьДвиженияуПересчетОНАиОНО(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ, ЗакрытиеГода = Истина, СуммаПересчетаУбытков = 0) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
		Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОНАОНО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеГода Тогда  
		СчетПрибыли = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
		СчетУбытка = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	Иначе
		СчетПрибыли = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
		СчетУбытка =  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	КонецЕсли;
	
	Если СуммаПересчетаУбытков <> 0 Тогда   
		Запись = Параметры.ТаблицаОНАОНО.Добавить();
		Запись.Разница = СуммаПересчетаУбытков;
		Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
		Запись.Вид = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
		Запись.Содержание = "Пересчет убытков";
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаОНАОНО Цикл
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы И НЕ Запись.Разница = 0 Тогда // Счет 09
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0  Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства И НЕ Запись.Разница = 0 Тогда // Счет 77
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0 Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияуПересчетОНАиОНО

Функция ПодготовитьТаблицуПересчетОНАиОНО(ТаблицаРеквизиты, СписокОрганизаций, Отказ, Реформация = Истина) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаОНАОНО();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаОНАОНО   = Параметры.ТаблицаОНАОНО;
	
	НоваяСтавка     = Реквизиты.НоваяСтавка;
	СтараяСтавка    = Реквизиты.СтараяСтавка;
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат ТаблицаОНАОНО;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(
										СтрокаВидАктиваОбязательства, СписокОрганизаций, Реквизиты.НачалоГода, Реквизиты.КонДата);
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО, СтараяСумма", "Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			Если НЕ (Строка.Сумма = 0 И Строка.СтараяСумма = 0) Тогда
				Запись = ТаблицаОНАОНО.Добавить();
				Запись.Счет        = Строка.СчетОНАОНО;
				Запись.Вид         = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
				Запись.НоваяСумма  = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
				Запись.СтараяСумма = Строка.СтараяСумма;
				Запись.Разница     = 0;
				Запись.Содержание  = "";
			Конецесли;
		КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет, Вид, СтараяСумма, Содержание", "НоваяСумма, Разница");
	
	ТаблицаОНАОНО.Колонки.Добавить("ВидАктивовИОбязательствПБУ18");
	ТаблицаОНАОНО.Колонки.Добавить("Реформация");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСтавка");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСтавка");
	
	ОНО = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
	ОНА = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
	
	Для каждого Запись Из ТаблицаОНАОНО Цикл
		Запись.Разница      = Запись.НоваяСумма - Запись.СтараяСумма;
		Запись.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пересчет по ставке %1'"), Строка(Окр(НоваяСтавка, 6)) + "%");
		Запись.Реформация   = Реформация;
		Запись.СтараяСтавка = СтараяСтавка;
		Запись.НоваяСтавка  = НоваяСтавка;
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы Тогда // Счет 09
			Запись.ВидАктивовИОбязательствПБУ18 = ОНА;
		Иначе
			Запись.ВидАктивовИОбязательствПБУ18 = ОНО;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции // ПодготовитьТаблицуПересчетОНАиОНО

Функция ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты                   = Параметры.Реквизиты[0];
	ТаблицаЗакрытие99Реформация = Параметры.ТаблицаЗакрытие;
	ПлательщикНалогаНаПрибыль   = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18              = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	// Закрытие 99 счетов в БУ и реформация баланса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаПрибылейИУбытков", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаСписания,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаСписанияНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаСписанияПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаСписанияВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&СчетаПрибылейИУбытков), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Прибыль   = 0;
	ПрибыльНУ = 0;
	ПрибыльПР = 0;
	ПрибыльВР = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = 0;
		СуммаСписанияПР = 0;
		СуммаСписанияВР = 0;
		
		Прибыль = Прибыль + СуммаСписания;
		Если ПлательщикНалогаНаПрибыль Тогда
			СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
			ПрибыльНУ       = ПрибыльНУ + СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				СуммаСписанияПР = Выборка.СуммаСписанияПР;
				СуммаСписанияВР = Выборка.СуммаСписанияВР;
				ПрибыльПР       = ПрибыльПР + СуммаСписанияПР;
				ПрибыльВР       = ПрибыльВР + СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
			СуммаСписания           = 0;
			Если ПлательщикНалогаНаПрибыль Тогда
				СуммаСписанияНУ     = 0;
				Если ПоддержкаПБУ18 Тогда
					СуммаСписанияПР = 0;
					СуммаСписанияВР = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0  Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			Запись.Сумма         = СуммаСписания;
			Запись.СуммаНУ       = СуммаСписанияНУ;
			Запись.СуммаПР       = СуммаСписанияПР;
			Запись.СуммаВР       = СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			Запись.Сумма         = -СуммаСписания;
			Запись.СуммаНУ       = -СуммаСписанияНУ;
			Запись.СуммаПР       = -СуммаСписанияПР;
			Запись.СуммаВР       = -СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
	КонецЦикла;
	
	Если Прибыль > 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Запись.Сумма         = Прибыль;
		Запись.СуммаНУ       = ПрибыльНУ;
		Запись.СуммаПР       = ПрибыльПР;
		Запись.СуммаВР       = ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Если Прибыль < 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Запись.Сумма         = -Прибыль;
		Запись.СуммаНУ       = -ПрибыльНУ;
		Запись.СуммаПР       = -ПрибыльПР;
		Запись.СуммаВР       = -ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Возврат ТаблицаЗакрытие99Реформация;
	
КонецФункции // ПодготовитьТаблицуЗакрытие99Реформация()

Функция ПодготовитьТаблицуЗакрытие90БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.Продажи,
		ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
		
КонецФункции

Функция ПодготовитьТаблицуЗакрытие91БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы,
		ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
	
КонецФункции // ПодготовитьТаблицуЗакрытие91БУ()

// Готовит данные для закрытия счетов внутренними записями.
// См. приказ Минфина от 31 октября 2000 г. N 94н:
// "По окончании отчетного года 
// - все субсчета, открытые к счету 90 "Продажи" (кроме субсчета 90-9 "Прибыль / убыток от продаж"), 
// закрываются внутренними записями на субсчет 90-9 "Прибыль / убыток от продаж";
// - все субсчета, открытые к счету 91 "Прочие доходы и расходы" (кроме субсчета 91-9 "Сальдо прочих доходов и расходов"),
// закрываются внутренними записями на субсчет 91-9 "Сальдо прочих доходов и расходов"."
//
// Параметры:
//  Проводки			 - ТаблицаЗначений - заполняемая таблица, описывающая проводки по закрытию счета, см. ПолучитьТаблицаЗакрытие()
//  Период				 - Дата - дата, характеризующая закрываемый год: любая дата этого года
//  Организация			 - СправочникСсылка.Организации - (головная) организация
//  СинтетическийСчет	 - ПланСчетовСсылка.Хозрасчетный - закрываемый счет: 90 или 91
//  СубсчетСальдо		 - ПланСчетовСсылка.Хозрасчетный - субсчет, на который закрываются субсчета: 90.09 или 91.09
Процедура ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(Проводки, Период, Организация, СинтетическийСчет, СубсчетСальдо, Содержание) Экспорт
	
	// Подготовим список закрываемых субсчетов (все счета закрываемого счета, кроме предназначенного для переноса сальдо).
	СубсчетаСинтетическогоСчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СинтетическийСчет),
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СубсчетСальдо));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ВсяОрганизация",       ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Счета",                СубсчетаСинтетическогоСчета);
	
	// Все субконто на счетах 90, 91 должны быть оборотными.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет.Вид КАК Вид,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстаток, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстаток, 0)) КАК СуммаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоСледующегоГода, Счет В (&Счета), , Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности,
	|	ХозрасчетныйОстатки.Счет.Вид
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет.Порядок,
	|	ХозрасчетныйОстатки.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма = 0 И Выборка.Количество = 0 И Выборка.СуммаНУ = 0 И Выборка.СуммаПР = 0  И Выборка.СуммаВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Проводки.Добавить();
		Запись.Содержание    = Содержание;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Если Выборка.Вид = ВидСчета.Пассивный Тогда
			
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = СубсчетСальдо;
			Запись.Сумма         = -Выборка.Сумма;
			Запись.СуммаНУ       = -Выборка.СуммаНУ;
			Запись.СуммаПР       = -Выборка.СуммаПР;
			Запись.СуммаВР       = -Выборка.СуммаВР;
			Запись.КоличествоДт  = -Выборка.Количество;
			
		Иначе
			
			Запись.СчетДт        = СубсчетСальдо;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Сумма         = Выборка.Сумма;
			Запись.СуммаНУ       = Выборка.СуммаНУ;
			Запись.СуммаПР       = Выборка.СуммаПР;
			Запись.СуммаВР       = Выборка.СуммаВР;
			Запись.КоличествоКт  = Выборка.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуЗакрытие20_23_25_26НУиНЕ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаЗакрытие20_23_25_26НУ = Параметры.ТаблицаЗакрытие;
	
	// закрытие счетов 20, 23, 25, 26
	СписокСчетовНУ = Новый Массив;
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходыРасходыНеУчитываемые);
	СписокСчетовНУ = БухгалтерскийУчет.СформироватьМассивСубсчетов(СписокСчетовНУ);   // детализируем до субсчетов
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",     КонГраница);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовНУ", СписокСчетовНУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.Подразделение КАК Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&СписокСчетовНУ), , Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности,
	|	НалоговыйОстатки.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		Если Выборка.СуммаСписанияНУ > 0 Тогда
			Запись = ТаблицаЗакрытие20_23_25_26НУ.Добавить();
			Запись.СчетДт      = Выборка.Счет;
			Запись.СубконтоДт1 = Выборка.СтатьяЗатрат;
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			КонецЕсли;
			Запись.Сумма       = Выборка.СуммаСписания;
			Запись.СуммаНУ     = Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;

		КонецЕсли;
		
		Если Выборка.СуммаСписанияНУ < 0 Тогда
			Запись = ТаблицаЗакрытие20_23_25_26НУ.Добавить();
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
			Запись.СчетКт      = Выборка.Счет;
			Запись.СубконтоКт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = -Выборка.СуммаСписания;
			Запись.СуммаНУ     = -Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = -Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = -Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода; 
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;

		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗакрытие20_23_25_26НУ;
	
КонецФункции // ПодготовитьТаблицуЗакрытие20_23_25_26НУ()

Функция ПодготовитьТаблицуЗакрытие44НУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаЗакрытие44НУ = Параметры.ТаблицаЗакрытие;
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	// закрытие счета 44 по всем статьям затрат, кроме транспортных расходов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Счета44",     БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыНаПродажу));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.Подразделение КАК Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В (&Счета44),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности,
	|	НалоговыйОстатки.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		Если Выборка.СуммаСписанияНУ > 0 Тогда
			Запись = ТаблицаЗакрытие44НУ.Добавить();
			Запись.СчетДт      = Выборка.Счет;
			Запись.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Запись.СубконтоДт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = Выборка.СуммаСписания;
			Запись.СуммаНУ     = Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			
		КонецЕсли;
		
		Если Выборка.СуммаСписанияНУ < 0 Тогда
			Запись = ТаблицаЗакрытие44НУ.Добавить();
			Запись.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Запись.СчетКт      = Выборка.Счет;
			Запись.СубконтоКт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = -Выборка.СуммаСписания;
			Запись.СуммаНУ     = -Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = -Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = -Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода; 
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗакрытие44НУ;
	
КонецФункции // ПодготовитьТаблицуЗакрытие44НУ()

Функция ПолучитьТаблицаЗакрытие()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаЧисла15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытие = Новый ТаблицаЗначений;
	ТаблицаЗакрытие.Колонки.Добавить("СчетДт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("СчетКт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("Подразделение",           БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаЗакрытие.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоДт1");
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоКт1");
	ТаблицаЗакрытие.Колонки.Добавить("Сумма",         ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаНУ",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаПР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаВР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоДт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоКт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("Содержание",    ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаЗакрытие;
	
КонецФункции

Функция ПолучитьТаблицаОНАОНО()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаОНАОНО = Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма",  ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма", ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Разница",     ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Вид",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаОНАОНО.Колонки.Добавить("Содержание",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, ТаблицаОНАОНО, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытие
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "НаправлениеДеятельности," // <Ссылка на направление деятельности>
	+ "СубконтоДт1,"
	+ "СубконтоКт1,"
	+ "Сумма,"         // <Число, 15, 2>
	+ "СуммаНУ,"       // <Число, 15, 2>
	+ "СуммаПР,"       // <Число, 15, 2>
	+ "СуммаВР,"       // <Число, 15, 2>
	+ "КоличествоДт,"  // <Число, 15, 3>
	+ "КоличествоКт,"  // <Число, 15, 3>
	+ "Содержание"     // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаЗакрытие", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗакрытие, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаОНАОНО
	СписокОбязательныхКолонок = ""
	+ "Счет,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "НоваяСумма,"  // <Число, 15, 2>
	+ "СтараяСумма," // <Число, 15, 2>
	+ "Разница,"     // <Число, 15, 2>
	+ "Вид,"         // <ПеречислениеСсылка.ВидыАктивовИОбязательств>
	+ "Содержание"   // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаОНАОНО", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОНАОНО, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "НачалоГода,"              // <Дата>
	+ "НачДата,"                 // <Дата>
	+ "КонДата,"                 // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Регистратор,"             // <ДокументСсылка.*>
	+ "Предприниматель,"         // <Булево>
	+ "НоваяСтавка,"             // <Число, 15, 2>
	+ "СтараяСтавка,"            // <Число, 15, 2>
	+ "СодержаниеРеформация,"    // <Строка, 150>
	+ "СодержаниеЗакрытиеГода"   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеГода()

// РЕЗЕРВЫ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ
  
Процедура ПодготовитьТаблицыРачетРезервовПоСомнительнымДолгам(РезервыПоСомнительнымДолгам, ТаблицаДолейКосвенныхРасходов, ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицыРезервовПоСомнительнымДолгам = ПолучитьТаблицаРезервовПоСомнительнымДолгам();
	Параметры = ПодготовитьПараметрыРезервовПоСомнительнымДолгам(
		ТаблицыРезервовПоСомнительнымДолгам,
		РезервыПоСомнительнымДолгам,
		ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	РасчетРезервыПоСомнительнымДолгам = Параметры.РезервыПоСомнительнымДолгам;
	
	Если РасчетРезервыПоСомнительнымДолгам.Количество() > 0 Тогда
		РасчетРезервыПоСомнительнымДолгам.Очистить();
	КонецЕсли;
	
	РасчетРезервыПоСомнительнымДолгам = УчетДоходовРасходов.СформироватьТаблицуРасчетаРезервовПоСомнительнымДолгам(
		ТаблицаРеквизиты,
		ТаблицаДолейКосвенныхРасходов);
	
	РезервыПоСомнительнымДолгам = РасчетРезервыПоСомнительнымДолгам.Скопировать();
	
КонецПроцедуры

Функция ПолучитьТаблицаРезервовПоСомнительнымДолгам()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаРезервовПоСомнительнымДолгам = Новый ТаблицаЗначений;
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Сумма",							ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоБУ",						ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоНУ",						ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоБУ",					ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоНУ",					ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ПрисоединеноБУ",					ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоСНачалаГодаНУ",			ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Контрагент",						Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДоговорКонтрагента",				БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДокументРасчетовСКонтрагентом",	Неопределено);
	
	Возврат ТаблицаРезервовПоСомнительнымДолгам;
	
КонецФункции

Функция ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаПроводок, РезервыПоСомнительнымДолгам, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРезервовПоСомнительнымДолгам
	
	СписокОбязательныхКолонок = ""
		+ "НачисленоБУ,"					// <Число, 15, 2>
		+ "НачисленоНУ,"					// <Число, 15, 2>
		+ "ВосстановленоБУ,"				// <Число, 15, 2>
		+ "ВосстановленоНУ,"				// <Число, 15, 2>
		+ "ПрисоединеноБУ,"					// <Число, 15, 2>
		+ "НачисленоСНачалаГодаНУ,"			// <Число, 15, 2>
		+ "Контрагент,"						// <СправочникСсылка.Контрагент>
		+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговораКонтрагнетов>
		+ "ДокументРасчетовСКонтрагентом"	// <Документы расчетов с контрагентами>
		+ "";
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок,
		СписокОбязательныхКолонок);
	Параметры.Вставить("ТаблицаРезервовПоСомнительнымДолгам", ТаблицаПараметров);
	
	// Подготовка таблицы Параметры.РезервыПоСомнительнымДолгам
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		РезервыПоСомнительнымДолгам,
		СписокОбязательныхКолонок);
	Параметры.Вставить("РезервыПоСомнительнымДолгам", ТаблицаПараметров);
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата>
		+ "КонДата,"		// <Дата>
		+ "Организация,"	// <СправочникСсылка.Организации>
		+ "Регистратор"		// <ДокументСсылка.*>
		+ "";
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты,
		СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", ТаблицаПараметров);
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияРезервыПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры		= ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, Неопределено, ТаблицаРеквизиты);
	Реквизиты		= Параметры.Реквизиты[0];
	ПрименениеПБУ18	= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	Счет63			= ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Счет91_1		= ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_2		= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	СтатьяРасходов	= ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам;
	СтатьяДоходов	= ПланыВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам;
	ДанныеСворачивания = "Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом";
	КолонкиСворачивания = "НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ";
	ТаблицаРезервовПоСомнительнымДолгам.Свернуть(ДанныеСворачивания, КолонкиСворачивания);
	
	Для каждого Запись Из ТаблицаРезервовПоСомнительнымДолгам Цикл
		
		Если Запись.НачисленоБУ <> 0 Или Запись.НачисленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетДт         = Счет91_2;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяРасходов);
			
			Проводка.СчетКт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.НачисленоБУ;
			
			НачисленоНУ = Запись.НачисленоНУ;
			НачисленоПР = Запись.НачисленоБУ - Запись.НачисленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = НСтр("ru = 'Начислены резервы по сомнительным долгам'");
		КонецЕсли;
		
		Если Запись.ВосстановленоБУ <> 0 Или Запись.ВосстановленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетКт         = Счет91_1;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДоходов);
			
			Проводка.СчетДт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.ВосстановленоБУ;
			
			НачисленоНУ = Запись.ВосстановленоНУ;
			НачисленоПР = Запись.ВосстановленоБУ - Запись.ВосстановленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = НСтр("ru = 'Восстановлены резервы по сомнительным долгам'");
		КонецЕсли;
		
		Если Запись.ПрисоединеноБУ <> 0 Тогда

			ПрисоединеноБУ = Запись.ПрисоединеноБУ;
			
			Если ПрисоединеноБУ <> 0 Тогда
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетКт         = Счет91_1;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДоходов);
				
				Проводка.СчетДт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = НСтр("ru = 'Присоединение резерва к доходам'");
				
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетДт         = Счет91_2;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяРасходов);
				
				Проводка.СчетКт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = НСтр("ru = 'Присоединение резерва к расходам'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти