#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ВыгрузитьЗапросДляОбменаЭЛН(Документ, Операция) Экспорт
	
	ОписаниеОперации = WSОписаниеОперации(Документ, Операция);
	Если ОписаниеОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Если Операция = "getPrivateLNData" Или Операция = "disableLn" Тогда
		ОписаниеОперации.WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ОписаниеОперации.WSПараметр, Операция);
		РегистрационныйНомерФСС = ОписаниеОперации.WSПараметр.regNum;
	ИначеЕсли Операция = "prParseReestrFile" Тогда
		ОписаниеОперации.WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ОписаниеОперации.WSПараметр.request.pXmlFile.ROWSET, "ROWSET");
		РегистрационныйНомерФСС = Документ.РегистрационныйНомерФСС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = Запись.Закрыть();
	
	Результат = Новый Структура("Организация, РегистрационныйНомерФСС, ТекстЗапроса, Адрес");
	Результат.Организация = Документ.Организация;
	Результат.РегистрационныйНомерФСС = РегистрационныйНомерФСС;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьОбменДаннымиЭЛН(Документ, Операция, АдресЗашифрованногоЗапросаSOAP, АдресЗашифрованногоОтветаSOAP,
	ВыполнитьОбмен, ОбработатьРезультаты) Экспорт
	
	ОписаниеОперации = WSОписаниеОперации(Документ, Операция);
	Если ОписаниеОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Отправка данных ЛН.
	РезультатВыполненияОбмена = РезультатВыполненияОбменаДаннымиЭЛН(
		ОписаниеОперации,
		АдресЗашифрованногоЗапросаSOAP,
		АдресЗашифрованногоОтветаSOAP,
		ВыполнитьОбмен,
		ОбработатьРезультаты);
	
	Если РезультатВыполненияОбмена = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ОбработатьРезультаты Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	WSResult = РезультатВыполненияОбмена.WSResult;
	Если РезультатВыполненияОбмена.ОбменЗавершенБезОшибок Тогда
		Если ОписаниеОперации.Операция = "getPrivateLNData" Тогда
			ПроверкаРезультатаОбменаЭЛН(Документ, РезультатВыполненияОбмена, Отказ);
			Если Не Отказ Тогда
				ЗаполнитьДанныеПолученныеИзСервисаОбменаЭЛН(Документ, РезультатВыполненияОбмена);
			КонецЕсли;
		ИначеЕсли ОписаниеОперации.Операция = "prParseReestrFile" Тогда
			Документ.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		
		ТекстыОшибокФСС = Новый Массив;
		Если Строка(WSResult.STATUS) <> "1" Или ЗначениеЗаполнено(WSResult.MESS) Тогда
			ТекстыОшибокФСС.Добавить(WSResult.MESS);
		КонецЕсли;
		
		Если ОписаниеОперации.Операция = "prParseReestrFile" Тогда
			СписокОшибок = КоллекцияОбъектовXDTO(WSResult.INFO.ROWSET.ROW);
			Для Каждого ОписаниеОшибки Из СписокОшибок Цикл
				Если Строка(ОписаниеОшибки.STATUS) <> "1" Тогда
					ОшибкиЛН = КоллекцияОбъектовXDTO(ОписаниеОшибки.ERRORS.ERROR);
					Для Каждого ОшибкаЛН Из ОшибкиЛН Цикл
						ТекстыОшибокФСС.Добавить(ОшибкаЛН.ERR_MESS);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отправке реестра в ФСС возникли ошибки. Ответ ФСС:%1'"),
			Символы.ПС + СтрСоединить(ТекстыОшибокФСС, Символы.ПС));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	Если WSResult.Свойства().Получить("INFO") <> Неопределено
		И WSResult.INFO.Свойства().Получить("ROWSET") <> Неопределено
		И WSResult.INFO.ROWSET.Свойства().Получить("ROW") <> Неопределено Тогда
		
		СписокРезультатов = КоллекцияОбъектовXDTO(WSResult.INFO.ROWSET.ROW);
		Для Каждого ОписаниеРезультата Из СписокРезультатов Цикл
			Если Строка(ОписаниеРезультата.STATUS) = "1" Тогда
				СтрокаДанныхЭЛН = Документ.ДанныеЭЛН.Найти(ОписаниеРезультата.LN_CODE, "НомерЛисткаНетрудоспособности");
				Если СтрокаДанныхЭЛН <> Неопределено Тогда
					СтрокаДанныхЭЛН.Хеш = ОписаниеРезультата.LN_HASH;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не Отказ;
КонецФункции

#Область ПодготовкаОбмена

Функция WSОписаниеОперации(Документ, Операция)
	НастройкиWS = ЭлектронныйДокументооборотСКонтролирующимиОрганами.НастройкиОбменаФССЭЛН(Документ.Организация);
	Если НастройкиWS = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НастройкиWS.Свойство("WSПрокси") И ТипЗнч(НастройкиWS.WSПрокси) = Тип("WSПрокси") Тогда
		WSПрокси = НастройкиWS.WSПрокси;
	Иначе
		ПараметрыWSПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыWSПрокси.АдресWSDL              = НастройкиWS.Определение;
		ПараметрыWSПрокси.URIПространстваИмен    = НастройкиWS.URIПространстваИменСервиса;
		ПараметрыWSПрокси.ИмяСервиса             = НастройкиWS.ИмяСервиса;
		ПараметрыWSПрокси.ИмяТочкиПодключения    = НастройкиWS.ИмяТочкиПодключения;
		ПараметрыWSПрокси.ИмяПользователя        = "";
		ПараметрыWSПрокси.Пароль                 = "";
		ПараметрыWSПрокси.Таймаут                = 600;
		ПараметрыWSПрокси.ДелатьКонтрольныйВызов = Ложь;
		
		WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыWSПрокси);
	КонецЕсли;
	
	ОписаниеОперации = Новый Структура("WSПрокси, WSПараметр, Операция, АдресWSDL");
	ОписаниеОперации.АдресWSDL = НастройкиWS.Определение;
	ОписаниеОперации.Операция = Операция;
	ОписаниеОперации.WSПрокси = WSПрокси;
	
	WSТипПараметра = WSПрокси.ФабрикаXDTO.Тип(НастройкиWS.URIПространстваИменСервиса, Операция);
	ОписаниеОперации.WSПараметр = WSПрокси.ФабрикаXDTO.Создать(WSТипПараметра);
	
	Отказ = Ложь;
	ЗаполнитьWSОписаниеОперации(Документ, ОписаниеОперации, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеОперации;
КонецФункции

Процедура ЗаполнитьWSОписаниеОперации(Документ, ОписаниеОперации, Отказ)
	
	WSПараметр = ОписаниеОперации.WSПараметр;
	Операция   = ОписаниеОперации.Операция;
	
	Если Операция = "getPrivateLNData"
		Или Операция = "disableLn" Тогда
		
		// Номер больничного листа.
		Если Не ЗначениеЗаполнено(Документ.НомерЛисткаНетрудоспособности) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен номер листка нетрудоспособности'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Регистрационный номер ФСС организации (страхователя).
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Документ.Организация, ТекущаяДатаСеанса(), Сведения);
		Если Не ОргСведения.Свойство("РегистрационныйНомерФСС") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации не заполнен регистрационный номер ФСС'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		РегистрационныйНомерФСС = ОргСведения["РегистрационныйНомерФСС"];
		
		// СНИЛС сотрудника на которого оформлен листок нетрудоспособности.
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Документ.Сотрудник, "СтраховойНомерПФР");
		Если КадровыеДанные.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У сотрудника не указан СНИЛС'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СНИЛС = СтрЗаменить(СтрЗаменить(КадровыеДанные[0].СтраховойНомерПФР, "-", ""), " ", "");
		
		WSПараметр.lnCode = Документ.НомерЛисткаНетрудоспособности;
		WSПараметр.regNum = РегистрационныйНомерФСС;
		WSПараметр.snils  = СНИЛС;
		
		Если Операция = "disableLn" Тогда
			WSПараметр.reasonCode = "020";
			WSПараметр.reason = НСтр("ru = 'Обнаружены расхождения ЭЛН с бумажным ЛН'");
		КонецЕсли;
		
	ИначеЕсли Операция = "prParseReestrFile" Тогда
		
		// Регистрационный номер ФСС организации (страхователя).
		Если Не ЗначениеЗаполнено(Документ.РегистрационныйНомерФСС) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации не заполнен регистрационный номер ФСС'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		WSФабрикаXDTO = ОписаниеОперации.WSПрокси.ФабрикаXDTO;
		
		WSПараметр_request  = WSДочернийОбъект(WSФабрикаXDTO, WSПараметр, "request");
		WSПараметр_pXmlFile = WSДочернийОбъект(WSФабрикаXDTO, WSПараметр_request, "pXmlFile");
		ROWSET              = WSДочернийОбъект(WSФабрикаXDTO, WSПараметр_pXmlFile, "ROWSET");
		
		ТипROW = ROWSET.Свойства().Получить("ROW").Тип;
		СписокROW = ROWSET["ROW"];
		
		WSПараметр_request.regNum = Документ.РегистрационныйНомерФСС;
		
		// Заполняем ROWSET данными выбранных листков нетрудоспособности
		
		ROWSET.version  = "1.0";
		ROWSET.software = Лев("1С:" + Метаданные.Синоним, 255);
		ROWSET.author   = Строка(Документ.РеестрСоставил);
		ROWSET.phone    = Строка(Документ.ТелефонСоставителя);
		ROWSET.email    = Строка(Документ.АдресЭлектроннойПочтыСоставителя);
		ROWSET.version_software = Лев(Метаданные.Версия, 15);
		
		СписокФизлиц = Новый Массив;
		СписокФизлиц.Добавить(Документ.Руководитель);
		СписокФизлиц.Добавить(Документ.ГлавныйБухгалтер);
		КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизлиц, "ФИОПолные");
		ФИОРуководителя       = КадровыеДанныеФизическихЛиц.Найти(Документ.Руководитель,     "ФизическоеЛицо");
		ФИОГлавногоБухгалтера = КадровыеДанныеФизическихЛиц.Найти(Документ.ГлавныйБухгалтер, "ФизическоеЛицо");
		
		Для Каждого ДанныеЛН Из Документ.ДанныеЭЛН Цикл
			
			ROW = WSФабрикаXDTO.Создать(ТипROW);
			ROW.LN_CODE        = ДанныеЛН.НомерЛисткаНетрудоспособности;
			ROW.SNILS          = СтрЗаменить(СтрЗаменить(ДанныеЛН.СНИЛС, "-","")," ","");
			ROW.INN_PERSON     = ДанныеЛН.ИНН;
			ROW.EMPLOYER       = Строка(Документ.Организация);
			ROW.EMPL_FLAG      = ?(ДанныеЛН.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, 1 ,0);
			ROW.EMPL_REG_NO    = Документ.РегистрационныйНомерФСС;
			ROW.EMPL_PARENT_NO = Документ.КодПодчиненностиФСС;
			ROW.EMPL_REG_NO2   = Документ.ДополнительныйКодФСС;
			ROW.APPROVE1       = ?(ФИОРуководителя <> Неопределено, ФИОРуководителя.ФИОПолные,"");
			Если ФИОГлавногоБухгалтера <> Неопределено И ЗначениеЗаполнено(ФИОГлавногоБухгалтера) Тогда
				ROW.APPROVE2 = ФИОГлавногоБухгалтера.ФИОПолные;
			КонецЕсли;
			
			ROW.BASE_AVG_SAL       = ДанныеЛН.БазаДляРасчетаСреднегоЗаработка;
			ROW.BASE_AVG_DAILY_SAL = ДанныеЛН.СреднийДневнойЗаработок;
			
			ROW.INSUR_YY = ДанныеЛН.СтажЛет;
			ROW.INSUR_MM = ДанныеЛН.СтажМесяцев;
			
			РазностьСтажей = УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(
				ДанныеЛН.СтажРасширенныйЛет,
				ДанныеЛН.СтажРасширенныйМесяцев,
				ДанныеЛН.СтажЛет,
				ДанныеЛН.СтажМесяцев);
			Если РазностьСтажей.РазностьЛет <> 0 Или РазностьСтажей.РазностьМесяцев <> 0 Тогда
				ROW.NOT_INSUR_YY = РазностьСтажей.РазностьЛет;
				ROW.NOT_INSUR_MM = РазностьСтажей.РазностьМесяцев;
			КонецЕсли;
			
			ROW.CALC_CONDITION1  = ДанныеЛН.УсловияИсчисленияКод1;
			ROW.CALC_CONDITION2  = ДанныеЛН.УсловияИсчисленияКод2;
			ROW.CALC_CONDITION3  = ДанныеЛН.УсловияИсчисленияКод3;
			ROW.CALC_CONDITION4  = "";
			ROW.FORM1_DT         = ДанныеЛН.ДатаАктаН1;
			ROW.RETURN_DATE_EMPL = ДанныеЛН.ПриступитьКРаботеС;
			ROW.DT1              = ДанныеЛН.ДатаНачалаОплатыФСС;
			ROW.DT2              = ДанныеЛН.ДатаОкончанияОплатыФСС;
			ROW.DT1_LN           = ДанныеЛН.ДатаНачалаОплаты;
			ROW.DT2_LN           = ДанныеЛН.ДатаОкончанияОплаты;
			ROW.EMPL_PAYMENT     = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя;
			ROW.FSS_PAYMENT      = ДанныеЛН.СуммаОплатыЗаСчетФСС;
			ROW.PAYMENT          = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя + ДанныеЛН.СуммаОплатыЗаСчетФСС;
			ROW.CORRECTION_FLAG  = 0;
			ROW.LN_HASH          = ДанныеЛН.Хеш;
			
			СписокROW.Добавить(ROW);
		КонецЦикла;
		
		// Заполним pXmlFile подготовленным ROWSET'ом.
		WSПараметр_pXmlFile.ROWSET = ROWSET;
		WSПараметр_request.pXmlFile = WSПараметр_pXmlFile;
		WSПараметр.request = WSПараметр_request;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРезультатовОбмена

Функция РезультатВыполненияОбменаДаннымиЭЛН(ОписаниеОперации, АдресЗашифрованногоЗапросаSOAP,
	АдресЗашифрованногоОтветаSOAP, ВыполнитьОбмен, ОбработатьРезультаты)
	
	ОбъектXDTOРезультата = РезультатВыполненияОперацииСервиса(
		ОписаниеОперации,
		АдресЗашифрованногоЗапросаSOAP,
		АдресЗашифрованногоОтветаSOAP,
		ВыполнитьОбмен,
		ОбработатьРезультаты);
	
	Если ОбъектXDTOРезультата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ОбработатьРезультаты Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеОперации.Операция = "getPrivateLNData" Тогда
		WSResult = ОбъектXDTOРезультата.Body.getPrivateLNDataResponse.FileOperationsLnUserGetPrivateLNDataOut;
		
	ИначеЕсли ОписаниеОперации.Операция = "disableLn" Тогда
		Если ОбъектXDTOРезультата.Body.disableLnResponse.Свойства().Получить("return") <> Неопределено Тогда
			WSResult = ОбъектXDTOРезультата.Body.disableLnResponse.return;
		Иначе
			WSResult = ОбъектXDTOРезультата.Body.disableLnResponse.FileOperationsLnUserDisableLnOut;
		КонецЕсли;
		
	ИначеЕсли ОписаниеОперации.Операция = "prParseReestrFile" Тогда
		WSResult = ОбъектXDTOРезультата.Body.prParseReestrFileResponse.WSResult;
		
	Иначе
		WSResult = Неопределено;
	КонецЕсли;
	
	Если WSResult = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("WSResult, ОбменЗавершенБезОшибок, ТекстОшибки", WSResult, Истина, "");
	Результат.WSResult = WSResult;
	
	Если Строка(WSResult.STATUS) <> "1" Тогда
		Результат.ОбменЗавершенБезОшибок = Ложь;
		Результат.ТекстОшибки = WSResult.MESS;
		Возврат Результат;
	КонецЕсли;
	
	Если ОписаниеОперации.Операция = "prParseReestrFile"
		И WSResult.Свойства().Получить("INFO") <> Неопределено
		И WSResult.INFO.Свойства().Получить("ROWSET") <> Неопределено
		И WSResult.INFO.ROWSET.Свойства().Получить("ROW") <> Неопределено Тогда
		
		СписокРезультатов = КоллекцияОбъектовXDTO(WSResult.INFO.ROWSET.ROW);
		Для Каждого ОписаниеРезультата Из СписокРезультатов Цикл
			Если Строка(ОписаниеРезультата.STATUS) <> "1" Тогда
				Результат.ОбменЗавершенБезОшибок = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияОперацииСервиса(ОписаниеОперации, АдресЗашифрованногоЗапросаSOAP,
	АдресЗашифрованногоОтветаSOAP, ВыполнитьВызов, ИзвлечьОбъектXDTOРезультата)
	
	Если Не ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗашифрованногоОтветаSOAP = Неопределено;
	ФайлОтветаSOAP = Неопределено;
	
	Если ВыполнитьВызов Тогда
		ТекстЗашифрованногоЗапросаSOAP = ПолучитьИзВременногоХранилища(АдресЗашифрованногоЗапросаSOAP);
		УдалитьИзВременногоХранилища(АдресЗашифрованногоЗапросаSOAP);
		
		АдресСервера = ОписаниеОперации.АдресWSDL;
		РесурсНаСервере = "";
		ПозицияЗавершенияСхемы = СтрНайти(АдресСервера, "://");
		Если ПозицияЗавершенияСхемы > 0 Тогда
			СтрокаURI = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3);
			ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI, "/");
			ДлинаСоединения = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI));
			РесурсНаСервере = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3 + ДлинаСоединения);
			АдресСервера = Лев(АдресСервера, ПозицияЗавершенияСхемы + 2 + ДлинаСоединения);
			
			ПозицияПараметров = СтрНайти(РесурсНаСервере, "?");
			ДлинаРесурсаНаСервере = ?(ПозицияПараметров > 0, ПозицияПараметров - 1, СтрДлина(РесурсНаСервере));
			РесурсНаСервере = Лев(РесурсНаСервере, ДлинаРесурсаНаСервере);
		КонецЕсли;
		
		ОписаниеОшибкиУстановкиСоединения = "";
		СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(АдресСервера, ОписаниеОшибкиУстановкиСоединения);
		Если СоединениеHTTP = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
							   |%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибкиУстановкиСоединения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		// формируем общие заголовки запроса SOAP
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
		ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
		
		ФайлЗапросаSOAP = ПолучитьИмяВременногоФайла();
		ТекстовыйФайлSOAP = Новый ЗаписьТекста(ФайлЗапросаSOAP, "utf-8");
		ТекстовыйФайлSOAP.Записать(ТекстЗашифрованногоЗапросаSOAP);
		ТекстовыйФайлSOAP.Закрыть();
		
		// посылаем запрос
		ФайлОтветаSOAP = ПолучитьИмяВременногоФайла();
		Попытка
			СоединениеHTTP.ОтправитьДляОбработки(ФайлЗапросаSOAP, РесурсНаСервере, ФайлОтветаSOAP, ЗаголовкиHTTP);
		Исключение
			ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлЗапросаSOAP);
			ОписаниеОшибкиОтправки = ОписаниеОшибки();
			ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
							   |%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибкиОтправки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецПопытки;
		
		Если Не ИзвлечьОбъектXDTOРезультата Тогда
			ТекстовыйФайлОтветаSOAP = Новый ЧтениеТекста(ФайлОтветаSOAP, "utf-8");
			ТекстЗашифрованногоОтветаSOAP = ТекстовыйФайлОтветаSOAP.Прочитать();
			ТекстовыйФайлОтветаSOAP.Закрыть();
			АдресЗашифрованногоОтветаSOAP = ПоместитьВоВременноеХранилище(ТекстЗашифрованногоОтветаSOAP, Новый УникальныйИдентификатор());
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлЗапросаSOAP);
	КонецЕсли;
	
	Если ИзвлечьОбъектXDTOРезультата Тогда
		Если ФайлОтветаSOAP = Неопределено Тогда
			ТекстЗашифрованногоОтветаSOAP = ПолучитьИзВременногоХранилища(АдресЗашифрованногоОтветаSOAP);
			УдалитьИзВременногоХранилища(АдресЗашифрованногоОтветаSOAP);
			
			ФайлОтветаSOAP = ПолучитьИмяВременногоФайла();
			ТекстовыйФайлОтветаSOAP = Новый ЗаписьТекста(ФайлОтветаSOAP, "utf-8");
			ТекстовыйФайлОтветаSOAP.Записать(ТекстЗашифрованногоОтветаSOAP);
			ТекстовыйФайлОтветаSOAP.Закрыть();
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлОтветаSOAP);
		ОбъектXDTOРезультата = ОписаниеОперации.WSПрокси.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Возврат ОбъектXDTOРезультата;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлОтветаSOAP);
	
КонецФункции

Процедура ПроверкаРезультатаОбменаЭЛН(Документ, РезультатВыполненияОбмена, Отказ)
	
	ДанныеЛН = КоллекцияОбъектовXDTO(РезультатВыполненияОбмена.WSResult.DATA.OUT_ROWSET.ROW)[0];
	
	Состояние = СостояниеЭЛН(ДанныеЛН.LN_State);
	Если Состояние = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка в структуре сообщения ФСС: В поле ""%1"" недокументированное значение: ""%2"".'");
		СообщитьОбОшибке(Отказ, ТекстОшибки, "LN_State", ДанныеЛН.LN_State);
		Возврат;
	КонецЕсли;
	Если Состояние.Имя <> "Закрыт" И Состояние.Имя <> "НаправленНаМСЭ" И Состояние.Имя <> "ДополненДаннымиМСЭ" Тогда
		СообщитьОбОшибке(Отказ, НСтр("ru = 'Листок нетрудоспособности не может быть загружен, его состояние: ""%1"".'"), Состояние.Представление);
		Возврат;
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Документ.Сотрудник, "Фамилия, Имя, Отчество, ДатаРождения", ДанныеЛН["LN_DATE"]);
	Найденные = КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Документ.Сотрудник));
	Если Найденные.Количество() > 0 Тогда
		КадровыеДанныеСотрудника = Найденные[0];
		
		Значения = Новый Структура("SURNAME, NAME, PATRONIMIC, BIRTHDAY");
		ЗаполнитьЗначенияСвойств(Значения, ДанныеЛН);
		
		Если ВРег(СокрЛП(Значения.SURNAME))       <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Фамилия))
			Или ВРег(СокрЛП(Значения.NAME))       <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Имя))
			Или ВРег(СокрЛП(Значения.PATRONIMIC)) <> ВРег(СокрЛП(КадровыеДанныеСотрудника.Отчество)) Тогда
			ТекстОшибки = НСтр("ru = 'ФИО указанные в листке нетрудоспособности (%1 %2 %3) не совпадают с ФИО сотрудника.'");
			СообщитьОбОшибке(Неопределено, ТекстОшибки, Значения.SURNAME, Значения.NAME, Значения.PATRONIMIC);
		КонецЕсли;
		
		ДанныеЛНДатаРождения = XMLЗначениеСПроверкойТипа(Значения.BIRTHDAY, Тип("Дата"));
		Если ДанныеЛНДатаРождения <> КадровыеДанныеСотрудника.ДатаРождения Тогда
			ТекстОшибки = НСтр("ru = 'Дата рождения указанная в листке нетрудоспособности (%1) не совпадает с датой рождения сотрудника.'");
			СообщитьОбОшибке(Неопределено, ТекстОшибки, Формат(ДанныеЛНДатаРождения, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПолученныеИзСервисаОбменаЭЛН(Документ, РезультатВыполненияОбмена)
	
	ДанныеЛН = КоллекцияОбъектовXDTO(РезультатВыполненияОбмена.WSResult.DATA.OUT_ROWSET.ROW)[0];
	
	ИменаПолейИзСервиса = 
	"LN_DATE, LN_HASH, LN_RESULT,
	|LPU_NAME, LPU_ADDRESS, LPU_OGRN,
	|REASON1, REASON2, REASON3, PARENT_CODE,
	|DATE1, DATE2,
	|VOUCHER_NO, VOUCHER_OGRN,
	|SERV1_AGE, SERV1_MM, SERV1_RELATION_CODE, SERV1_FIO, SERV1_DT1, SERV1_DT2,
	|SERV2_AGE, SERV2_MM, SERV2_RELATION_CODE, SERV2_FIO, SERV2_DT1, SERV2_DT2,
	|PREGN12W_FLAG,
	|HOSPITAL_DT1, HOSPITAL_DT2, HOSPITAL_BREACH,
	|MSE_DT1, MSE_DT2, MSE_DT3, MSE_INVALID_GROUP,
	|PRIMARY_FLAG, DUPLICATE_FLAG, PREV_LN_CODE";
	ДанныеИзСервиса = Новый Структура(ИменаПолейИзСервиса);
	ЗаполнитьЗначенияСвойств(ДанныеИзСервиса, ДанныеЛН);
	
	ДанныеИзСервиса.SERV1_DT1 = XMLЗначениеСПроверкойТипа(ДанныеИзСервиса.SERV1_DT1, Тип("Дата"));
	ДанныеИзСервиса.SERV1_DT2 = XMLЗначениеСПроверкойТипа(ДанныеИзСервиса.SERV1_DT2, Тип("Дата"));
	ДанныеИзСервиса.SERV2_DT1 = XMLЗначениеСПроверкойТипа(ДанныеИзСервиса.SERV2_DT1, Тип("Дата"));
	ДанныеИзСервиса.SERV2_DT2 = XMLЗначениеСПроверкойТипа(ДанныеИзСервиса.SERV2_DT2, Тип("Дата"));
	
	СоответствиеПолей = Документы.БольничныйЛист.СоответствиеПолейЭЛН();
	Для Каждого СвойствоДокумента Из СоответствиеПолей Цикл
		Документ[СвойствоДокумента.Ключ] = XMLЗначениеСПроверкойТипа(ДанныеИзСервиса[СвойствоДокумента.Значение], ТипЗнч(Документ[СвойствоДокумента.Ключ]));
	КонецЦикла;
	
	Документ.ЯвляетсяПродолжениемБолезни = Не XMLЗначениеСПроверкойТипа(ДанныеИзСервиса.PRIMARY_FLAG, Тип("Булево"));
	
	Если ДанныеИзСервиса.LN_RESULT <> Неопределено Тогда
		Значения = Новый Структура("MSE_RESULT, OTHER_STATE_DT, RETURN_DATE_LPU, NEXT_LN_CODE");
		ЗаполнитьЗначенияСвойств(Значения, ДанныеИзСервиса.LN_RESULT);
		ЗаполнитьЗначениеИзСтрокиXML(Документ.НовыйСтатусНетрудоспособного,     Значения.MSE_RESULT,      Тип("Строка"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ДатаНовыйСтатусНетрудоспособного, Значения.OTHER_STATE_DT,  Тип("Дата"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ПриступитьКРаботеС,               Значения.RETURN_DATE_LPU, Тип("Дата"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.НомерЛисткаПродолжения,           Значения.NEXT_LN_CODE,    Тип("Строка"));
	КонецЕсли;
	
	Если ДанныеИзСервиса.HOSPITAL_BREACH <> Неопределено Тогда
		Значения = Новый Структура("HOSPITAL_BREACH_CODE, HOSPITAL_BREACH_DT");
		ЗаполнитьЗначенияСвойств(Значения, ДанныеИзСервиса.HOSPITAL_BREACH);
		ЗаполнитьЗначениеИзСтрокиXML(Документ.КодНарушенияРежима,  Значения.HOSPITAL_BREACH_CODE, Тип("Строка"));
		ЗаполнитьЗначениеИзСтрокиXML(Документ.ДатаНарушенияРежима, Значения.HOSPITAL_BREACH_DT,   Тип("Дата"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.НомерПервичногоЛисткаНетрудоспособности)
		И Документ.ЯвляетсяПродолжениемБолезни Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", Документ.НомерПервичногоЛисткаНетрудоспособности);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Документ.ПервичныйБольничныйЛист = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Номер = 0;
	ТаблицаПолныхПериодов = КоллекцияОбъектовXDTO(ДанныеЛН.TREAT_PERIODS.TREAT_FULL_PERIOD);
	Для Каждого СтрокаТаблицыПолныхПериодов Из ТаблицаПолныхПериодов Цикл
		
		ЗначенияПолныхПериодов = Новый Структура("TREAT_CHAIRMAN, TREAT_CHAIRMAN_ROLE");
		ЗаполнитьЗначенияСвойств(ЗначенияПолныхПериодов, СтрокаТаблицыПолныхПериодов);
		
		ТаблицаПериодов = КоллекцияОбъектовXDTO(СтрокаТаблицыПолныхПериодов.TREAT_PERIOD);
		Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			Номер = Номер + 1;
			
			ЗначенияПериодов = Новый Структура("TREAT_DT1, TREAT_DT2, TREAT_DOCTOR_ROLE, TREAT_DOCTOR");
			ЗаполнитьЗначенияСвойств(ЗначенияПериодов, СтрокаТаблицыПериодов);
			
			Документ["ОсвобождениеДатаНачала" + Номер]     = XMLЗначениеСПроверкойТипа(ЗначенияПериодов.TREAT_DT1, Тип("Дата"));
			Документ["ОсвобождениеДатаОкончания" + Номер]  = XMLЗначениеСПроверкойТипа(ЗначенияПериодов.TREAT_DT2, Тип("Дата"));
			Документ["ОсвобождениеФИОВрача" + Номер]       = ЗначенияПериодов.TREAT_DOCTOR;
			Документ["ОсвобождениеДолжностьВрача" + Номер] = ЗначенияПериодов.TREAT_DOCTOR_ROLE;
			
			Документ["ОсвобождениеФИОВрачаПредседателяВК" + Номер]       = ЗначенияПолныхПериодов.TREAT_CHAIRMAN;
			Документ["ОсвобождениеДолжностьВрачаПредседателяВК" + Номер] = ЗначенияПолныхПериодов.TREAT_CHAIRMAN_ROLE;
			
			Если Номер = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Номер = 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Документы.БольничныйЛист.ПослеЗагрузкиЭЛН(Документ, ДанныеИзСервиса);
	
КонецПроцедуры

// Интерпретирует коды состояний ЛН.
Функция СостояниеЭЛН(LN_State)
	Состояние = Новый Структура("Код, Имя, Представление");
	Состояние.Код = LN_State;
	
	Если LN_State = "010" Тогда
		Состояние.Имя = "Открыт";
		Состояние.Представление = НСтр("ru = 'Открыт'");
		
	ИначеЕсли LN_State = "020" Тогда
		Состояние.Имя = "Продлен";
		Состояние.Представление = НСтр("ru = 'Продлен'");
		
	ИначеЕсли LN_State = "030" Тогда
		Состояние.Имя = "Закрыт";
		Состояние.Представление = НСтр("ru = 'Закрыт'");
		
	ИначеЕсли LN_State = "040" Тогда
		Состояние.Имя = "НаправленНаМСЭ";
		Состояние.Представление = НСтр("ru = 'Направлен на медико-социальную экспертизу'");
		
	ИначеЕсли LN_State = "050" Тогда
		Состояние.Имя = "ДополненДаннымиМСЭ";
		Состояние.Представление = НСтр("ru = 'Дополнен данными медико-социальной экспертизы'");
		
	ИначеЕсли LN_State = "060" Тогда
		Состояние.Имя = "ЗаполненСтрахователем";
		Состояние.Представление = НСтр("ru = 'Заполнен страхователем'");
		
	ИначеЕсли LN_State = "070" Тогда
		Состояние.Имя = "ПособиеНачисленоСтраховщиком";
		Состояние.Представление = НСтр("ru = 'Пособие начислено страховщиком (прямые выплаты страхового обеспечения)'");
		
	ИначеЕсли LN_State = "080" Тогда
		Состояние.Имя = "ПособиеВыплачено";
		Состояние.Представление = НСтр("ru = 'Пособие выплачено'");
		
	ИначеЕсли LN_State = "090" Тогда
		Состояние.Имя = "ДействияПрекращены";
		Состояние.Представление = НСтр("ru = 'Отменен'");
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Состояние;
КонецФункции

#КонецОбласти

Функция WSДочернийОбъект(WSФабрика, WSРодитель, ИмяСвойства)
	WSТипПараметра = WSРодитель.Свойства().Получить(ИмяСвойства).Тип;
	Возврат WSФабрика.Создать(WSТипПараметра);
КонецФункции

Функция XMLЗначениеСПроверкойТипа(Значение, Тип)
	Если Тип <> Тип("Строка") И ТипЗнч(Значение) = Тип("Строка") И Не ПустаяСтрока(Значение) Тогда
		Возврат XMLЗначение(Тип, Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

Функция КоллекцияОбъектовXDTO(Значение)
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьЗначениеИзСтрокиXML(Приемник, ЗначениеВФорматеXML, ТипЗначения)
	Если ЗначениеВФорматеXML <> Неопределено И ЗначениеЗаполнено(ЗначениеВФорматеXML) Тогда
		Приемник = XMLЗначениеСПроверкойТипа(ЗначениеВФорматеXML, ТипЗначения);
	КонецЕсли;
КонецПроцедуры

Процедура СообщитьОбОшибке(Отказ, ТекстОшибки, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено)
	Отказ = Истина;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			Параметр1,
			Параметр2,
			Параметр3));
КонецПроцедуры

#КонецОбласти

#КонецЕсли
