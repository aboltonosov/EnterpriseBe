
#Область ПрограммныйИнтерфейс

// Определяет разделы, в которых доступна панель отчетов.
// См. описание к ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов().
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Разделы.Добавить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы(),
			НСтр("ru = 'Главное'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.CRMИМаркетинг,
			НСтр("ru= 'Отчеты по CRM и маркетингу'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Закупки,
			НСтр("ru= 'Отчеты по закупкам'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Казначейство,
			НСтр("ru= 'Отчеты по казначейству'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Продажи,
			НСтр("ru= 'Отчеты по продажам'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Склад,
			НСтр("ru= 'Отчеты по складу'") );
		
		Разделы.Добавить(Метаданные.Подсистемы.ФинансовыйРезультатИКонтроллинг,
			НСтр("ru= 'Отчеты по финансовому результату'"));
			
		//++ НЕ УТ
		Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		//-- НЕ УТ
			Разделы.Добавить(Метаданные.Подсистемы.Найти("Планирование"),
					НСтр("ru= 'Отчеты по планированию'"));
		//++ НЕ УТ
		Иначе
			Разделы.Добавить(Метаданные.Подсистемы.БюджетированиеИПланирование,
				НСтр("ru= 'Отчеты по бюджетированию и планированию'"));
		КонецЕсли;
		//-- НЕ УТ
		
		//++ НЕ УТ
		Разделы.Добавить(Метаданные.Подсистемы.РегламентированныйУчет,
			НСтр("ru= 'Отчеты по регламентированному учету'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.РегламентированныйУчет.Подсистемы.СтандартныеОтчеты, 
			НСтр("ru= 'Стандартные бухгалтерские отчеты'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Производство,
			НСтр("ru= 'Отчеты по производству'"));
		//-- НЕ УТ
		
		//++ НЕ УТКА
		Разделы.Добавить(Метаданные.Подсистемы.МеждународныйФинансовыйУчет,
			НСтр("ru= 'Отчеты по международному финансовому учету'"));
		//-- НЕ УТКА
	КонецЕсли;
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//
// Описание:
//   В данной процедуре необходимо указать каким именно образом предопределенные варианты отчетов
//   будут регистрироваться в системе и показываться в панели отчетов.
//
// Вспомогательные функции:
//   Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//   Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "<ИмяВарианта>");
//
//   Данные функции получают описание отчета или варианта отчета следующей структуры:
//       	|- Включен (Булево)
//            Если Ложь, то вариант отчета не регистрируется в подсистеме.
//              Используется для удаления технических и контекстных вариантов отчетов из всех интерфейсов.
//              Эти варианты отчета по прежнему можно открывать в форме отчета программно при помощи
//              параметров открытия (см. справку по "Расширение управляемой формы для отчета.КлючВарианта").
//       	|- ВидимостьПоУмолчанию (Булево)
//            Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//              Пользователь может "включить" его в режиме настройки панели отчетов
//              или открыть через форму "Все отчеты".
//       	|- Описание (Строка)
//            Дополнительная информация по варианту отчета.
//              В панели отчетов выводится в качестве подсказки.
//              Должно расшифровывать для пользователя содержимое варианта отчета
//              и не должно дублировать наименование варианта отчета.
//       	|- Размещение (Соответствие) Настройки размещения варианта отчета в разделах
//           	|- Ключ     (ОбъектМетаданных) Подсистема, в которой размещается отчет или вариант отчета
//           	|- Значение (Строка)           Необязательный. Настройки размещения в подсистеме.
//               	|- ""        - Выводить отчет в своей группе обычным шрифтом.
//               	|- "Важный"  - Выводить отчет в своей группе жирным шрифтом.
//               	|- "СмТакже" - Выводить отчет в группе "См. также".
//
// Например:
//
//  (1) Оставить в подсистеме только один из вариантов отчета
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Отчет.Размещение.Вставить(Метаданные.Подсистемы.ИмяРаздела);
//
//  (2) Отключить вариант отчета
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИмяОтчета, "ИмяВарианта1");
//	Вариант.Включен = Ложь;
//
//  (3) Отключить все варианты отчета, кроме требуемого
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Включен = Ложь;
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта");
//	Вариант.Включен = Истина;
//
//  (4) Результат исполнения любого из двух фрагментов кода будет одинаковым:
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта2");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта3");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта2");
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта3");
//	Отчет.Размещение.Вставить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//
//
// Важно:
//   Начальная настройка размещения отчетов по разделам зачитывается из метаданных,
//   ее дублирование в коде не требуется.
//   
//   Настройки варианта имеют приоритет над настройками отчета.
//   
//   Настройки варианта при получении формируются из настроек отчета
//   и после получения не зависят от настроек отчета (становятся самостоятельными, см. примеры 3 и 4).
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	ВыводитьВариантыОтчетов = Ложь;
	
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	//++ НЕ УТ
	// Для всех отчетов разделов "Зарплата" и "Кадры" устанавливаем вывод отчетов вместо вариантов
	ВыводитьВариантыОтчетов = Ложь;
	КоллекцияОтчетов = Метаданные.Отчеты;
	Для Каждого Отчет Из КоллекцияОтчетов Цикл
		Если ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(Отчет.ПолноеИмя(), "ЗарплатаКадрыПодсистемы,ЗарплатаКадрыРасширеннаяПодсистемы,ЗарплатаКадрыПриложения") Тогда
			ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Отчет);
			ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.НастроитьВариантыОтчетов(Настройки);
	ЗарплатаКадрыКомандныйИнтерфейс.НастроитьВариантыОтчетов(Настройки);
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КнигаУчетаДепонентов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДанныеДляБазыРаспределенияРасходов);
	//-- НЕ УТ 
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ABCXYZАнализНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие товары хорошо и стабильно продаются? 
		|Какие имеют низкий товарооборот и продаются нестабильно?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗапасыПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие товары хорошо и стабильно продаются? 
		|Какие имеют низкий товарооборот и продаются нестабильно?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ABCXYZРаспределениеКлиентов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализВыполненияМаршрутныхЛистов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова длительность выполнения маршрутных листов?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеМаршрутныхЛистовБезЗадержек");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким этапам прозводства можно уменьшить длительность выполнения?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеМаршрутныхЛистовСЗадержками");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким маршрутным картам и по какой продукции возникают задержки при производстве.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СведенияОВыполненииМаршрутныхЛистовКонтекст");
	//-- НЕ УТКА

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиИДоступностьТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каков остаток товаров и сколько из них доступно?
		|Сколько товаров отгружается, в резерве или в обособлении?
		|Какими заказами зарезервирован товар?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиИДоступностьТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каков остаток товаров и сколько из них доступно?
		|Сколько товаров отгружается, в резерве или в обособлении?
		|Какими заказами зарезервирован товар?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализДоходовРасходов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Постатейный анализ доходов и расходов предприятия.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыИРасходы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Постатейный анализ доходов и расходов предприятия с возможностью выбора аналитики.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольРаспределенияДоходовИРасходов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль полноты распределения доходов и расходов.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЖурналаРегистрации);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АктивностьПользователя");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализАктивностиПользователей");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольЖурналаРегистрации");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродолжительностьРаботыРегламентныхЗаданий");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЗависимостиОтКлиентовABC);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие группы клиентов покупают более всего?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ изменения количества и соотношения клиентов, покупающих много, средне и мало.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализИсполненияАссортимента);
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль соблюдения требований ассортиментной политики.
		|Какие квоты назначены на товары? Какие товары представлены в магазинах?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализИсполненияАссортимента");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.Описание = НСтр("ru= 'Соответствует ли количество товаров установленным квотам:
		|- по вводу в ассортимент,
		|- по наличию в магазинах?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКатегорииКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализКлиентскойБазыBCG);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Комплексный анализ клиентской базы на основе АВС/XYZ-классификации клиентов.
		|С какими клиентам перспективно работать?'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'A-класс
		|B-класс
		|C-класс
		|X-класс
		|Y-класс
		|Z-класс
		|Потерянные
		|Потенциальные
		|Текущая классификация
		|Предыдущая классификация
		|ABC/XYZ распределение
		|Изменения ABC
		|Изменения XYZ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Анализ на дату
		|Тип параметра классификации
		|Дата текущего среза
		|Дата предыдущего среза'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЛояльностиКлиентовXYZ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие клиенты покупают регулярно?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие клиенты покупают стабильно?
		|Какие клиенты являются разовыми?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализОстатковТоваровОрганизаций);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПервичногоИнтереса);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько клиентов было привлечено?
		|Сколько было заключено сделок?
		|Анализ в разрезе источников воздействия, каналов первичного интереса и типам источников.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПервичныйИнтерес");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение источников первичного интереса по количеству зарегистрированных клиентов и заключенных сделок.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПервичногоСпроса);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Насколько удовлетворен спрос клиентов?
		|Какие причины неудовлетворения спроса?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УдовлетворениеПервичногоСпроса");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каковы основные причины неудовлетворения спроса в разрезе сделок и менеджеров?
		|По каким сделкам спрос был удовлетворен?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПретензийКлиентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ регистрации и удовлетворения претензий от клиентов.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализВозникновенияПретензийКлиентов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Рейтинг причин возникновения претензий, подразделений и сотрудников по количеству претензий.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализУдовлетворенияПретензий");
	ОписаниеВарианта.Описание = НСтр("ru= 'Соотношение удовлетворенных и неудовлетворенных претензий в разрезе причин.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаВозникновения");
	ОписаниеВарианта.Описание = НСтр("ru= 'Соотношение поступивших и отработанных претензий за период помесячно.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыСИстекающимиСертификатами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, НСтр("ru = 'Товары с истекающими сертификатами'"));
	ОписаниеВарианта.Описание = НСтр("ru= 'Товары с истекающими сертификатами.'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинЗадержекВыполненияМаршрутныхЛистов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныЗадержек");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.Описание = НСтр("ru= 'Показывает на диаграмме соотношение
		|причин задержек выполнения маршрутных листов.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПричиныЗадержекКонтекст");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовКлиентов);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныОтменыЗаказовКлиентовБезЦеновыхГрупп");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
		|У каких менеджеров более всего выполненных не полностью заказов?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьЦеновыеГруппы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныОтменыЗаказовКлиентовСЦеновымиГруппами");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
		|У каких менеджеров более всего выполненных не полностью заказов?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЦеновыеГруппы");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
		|У каких поставщиков более всего выполненных не полностью заказов?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РейтингПричинОтменыЗаказовПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Соотношение причин отмены с нашей стороны и со стороны поставщика.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтатистикаОтменыЗаказовПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Соотношение заказанных и отмененных строк в заказах поставщикам.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинПроигрышаСделок);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие причины привели к проигрышу сделок?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныПроигрышаСделок");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие причины привели к проигрышу сделок?
		|У каких менеджеров?
		|С какими клиентами?'");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСебестоимостиВыпущеннойПродукции);
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ фактической себестоимости выпущенной продукции после закрытия месяца.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСебестоимостиВыпущеннойПродукции");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьУправлениеПроизводством");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "Производство.АнализСебестоимости2_2");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "Производство.АнализСебестоимости2_2_СЗаголовком");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова себестоимость единицы произведенной продукции?
		|Какова совокупная себестоимость всей выпущеной продукции за период?'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСебестоимостиВыпущеннойПродукции22");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьУправлениеПроизводством2_2");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "Производство.АнализСебестоимости2_1");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "Производство.АнализСебестоимости2_1_СЗаголовком");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова себестоимость единицы произведенной продукции?
		|Какова совокупная себестоимость всей выпущеной продукции за период?'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеСебестоимостиВыпущеннойПродукцииПоЗаказам");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьУправлениеПроизводством");
	ОписаниеВарианта.Описание = НСтр("ru= 'Позаказный анализ удельной себестоимости выпущенной продукции.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСебестоимостиТоваровРасширенный);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ себестоимости товаров и сумм ТЗР.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ себестоимости товаров и сумм ТЗР,
		|распределенных на себестоимость реализованных товаров.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровПоОперациям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ себестоимости товаров и сумм ТЗР в разрезе операций.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ себестоимости товаров и сумм ТЗР,
		|распределенных на себестоимость реализованных товаров.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровПоОперациямБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ себестоимости товаров и сумм ТЗР в разрезе операций.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаЗакупок");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "ФинансовыйРезультатИКонтроллинг.СебестоимостьЗапасов");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Вставить", "Закупки.Закупки");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.Описание = НСтр("ru= 'Помесячные объемы закупок за выбранный период по поставщикам и номенклатуре.
		|Возможен анализ по периодам - квартал, месяц, неделя, день.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСтатейКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль поступлений и списаний средств
		|по кредитным (депозитным) договорам.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСтатейКредитовДепозитов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль поступлений и списаний средств
		|по кредитным (депозитным) договорам.'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСуточнойЗагрузки);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ данных регламентированного учета по выбранным одному или нескольким субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСубконто");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ данных регламентированного учета по выбранным одному или нескольким субконто.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов регламентированного учета
		|между выбранным счетом и всеми остальными счетами.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСчета");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов регламентированного учета
		|между выбранным счетом и всеми остальными счетами.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализФинансовыхРезультатов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ прибылей и убытков по статьям и направлениям деятельности.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетОПрибыляхИУбыткахПоНаправлениям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Постатейный анализ финансовых результатов по направлениям деятельности.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНаправлениямДеятельности");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЦенПоставщиков);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЭффективностиРаботыТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ того, насколько успешно торговые представители справляются с поставленными заданиями.
		|Отчет используется только при схеме работы с выдачей заданий торговым представителям.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ того, насколько успешно торговые представители справляются с поставленными заданиями.
		|Отчет используется только при схеме работы с выдачей заданий торговым представителям.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БонусныеБаллы);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько осталось бонусных баллов, начисленных клиенту?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиБонусныхБаллов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько осталось бонусных баллов, начисленных клиенту?
		|По каким бонусным программам остались начисленные баллы?'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БухгалтерскийОтчетМеждународный);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ сальдо и оборотов по счетам международного финансового учета.
		|Данные в функциональной валюте и валюте представления.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализВзаиморасчетовКонтрагентов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ взаиморасчетов с контрагентами (клиентами и поставщиками, дебиторами и кредиторами).
		|Данные в функциональной валюте и валюте представления.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСубконтоМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ данных международного учета по выбранным одному или нескольким субконто.
		|Данные в функциональной валюте и валюте представления.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСчетаМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов международного учета
		|между выбранным счетом и всеми остальными счетами.
		|Данные в функциональной валюте и валюте представления.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВ_Международный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.
		|Данные в функциональной валюте и валюте представления.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВ_ПоСчетуМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов и сальдо по счетам международного учета.
		|Данные в функциональной валюте и валюте представления.'");
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БюджетныйОтчет);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВаловаяПрибыльПоОплаченнымОтгрузкам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоПолностьюОплаченнымОтгрузкам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие подразделения и менеджеры принесли более всего прибыли по оплате?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоПолностьюОплаченнымОтгрузкамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие клиенты принесли более всего прибыли по оплате?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоЧастичноОплаченнымОтгрузкам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие подразделения и менеджеры принесли более всего прибыли по частиной оплате?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоЧастичноОплаченнымОтгрузкамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие клиенты принесли более всего прибыли по частиной оплате?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьАмортизацииОСБухгалтерскийУчет);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Данные бухгалтерского и налогового учета об основных средствах.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьАмортизацииОСБухгалтерскийУчет");
	ОписаниеВарианта.Описание = НСтр("ru= 'Данные бухгалтерского и налогового учета об основных средствах.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьБезналичныхДенежныхСредств);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоДням");
	ОписаниеВарианта.Описание = НСтр("ru='Есть ли расхождения данных системы с загруженными выписками банка?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ВедомостьПоДнямОдинСчет");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоДенежнымСредствам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоДенежнымСредствам");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько денежных средств на расчетных счетах и в кассах?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредств");
	ОписаниеВарианта.Описание = НСтр("ru='Какие движения денежных средств происходили помесячно за период?
		|По каким статьям ДДС?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваУПодотчетныхЛиц");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько денежных средств на руках у подотчетных лиц?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПартиямТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль поступлений и списаний партий товаров.
		|Контроль распределения расходов механизмом партионного учета.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПартиямТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль поступлений и списаний партий товаров.
		|Контроль распределения расходов механизмом партионного учета.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПереданнойВозвратнойТаре);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ оборотов переданной клиентам возвратной тары за определенный период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПереданнойВозвратнойТаре");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ оборотов переданной клиентам возвратной тары за определенный период.
		|Какова ее стоимость и количество?'");	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКПоступлению);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ состояний распоряжений на поступление.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеПриемки");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ состояний распоряжений на поступление.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКОтгрузке);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ состояний распоряжений на отгрузку.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеСборкиОтгрузкиТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ состояний распоряжений на отгрузку.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПринятойВозвратнойТаре);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ оборотов принятой от поставщиков тары за определенный период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПринятойВозвратнойТаре");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ оборотов принятой от поставщиков тары за определенный период.
		|Какова ее стоимость и количество?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ количественного движения товаров на складах предприятия.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоТоварамНаСкладах");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ количественного движения товаров на складах предприятия.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиНаСкладе");
	ОписаниеВарианта.Описание = НСтр("ru= 'Остатки товаров на складах и в помещениях предприятия.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОстаткиИОборотыСГруппировкойПоСкладам");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтгружаемыеТовары");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтгружаемыеТоварыПоПересчетуКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ движений и оценка стоимости товаров на складах по выбранному виду цен.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьВЦенахНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ движений и оценка стоимости товаров на складах по выбранному виду цен.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОценкаОстатковТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка стоимости остатков товаров на складах по выбранному виду цен.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль остатков и движений товаров по организациям.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияТоваровОрганизаций");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ движений товаров на складах и организациях.
		|В какой организации и по какому складу есть товар и были движения за период?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоступныеДляПродажиТоварыОрганизаций");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие товары доступны на складах для продажи от имени выбранной организации?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОстаткиТоваровОрганизаций");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ движений и оценка стоимости товаров
		|на розничных складах по выбранному виду цен.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ движений и оценка стоимости товаров
		|на розничных складах по выбранному виду цен.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВероятностныйПрогноз);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какая вероятность выигрыша сделок на каждом из этапов процесса продаж?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какая вероятность выигрыша сделок на каждом из этапов процесса продаж?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВоронкаПродаж);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова эффективность каждой стадии продажи?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова эффективность каждой стадии продажи?'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыполнениеЗадачБюджетногоПроцесса);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ исполнительской дисциплины бюдженого процесса.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВсеЗадачи");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выполнены или нет задачи бюджетирования?
		|Какие просрочены, кем и на сколько дней?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтатистикаПоИсполнениюЗадач");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько бюджетных задач выполнено и не выполнено исполнителями?
		|В рамках каких бюджетных шагов?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СвязанныеЗадачи");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ТекущиеЗадачи");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ТекущиеЗадачиРасшифровка");
	//-- НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль выполнения клиентами условий соглашений, в которых заданы регулярные условия продаж.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль выполнения клиентами условий соглашений, в которых заданы регулярные условия продаж.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Финансовый анализ продаж по аналитикам организации, клиенты, менеджеры, 
		|склады, номенклатура и другим.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродаж");
	ОписаниеВарианта.Описание = НСтр("ru= 'Помесячные объемы продаж за выбранный период по видам номенклатуры.
		|Возможен анализ по периодам - квартал, месяц, неделя, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Помесячные объемы продаж за выбранный период по бизнес-регионам и видам номенклатуры.
		|Возможен анализ по периодам - квартал, месяц, неделя, день.'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПартнерам");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким клиентам получена наибольшая валовая прибыль?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПартнерамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким клиентам получена наибольшая валовая прибыль?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'По товарам от каких поставщиков получена наибольшая валовая прибыль?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоСделкам");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким видам сделок и сделкам больше всего продаж клиентам?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.ФинансовыйРезультатИКонтроллинг.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.CRMИМаркетинг.Подсистема.ПроведениеСделокОтчеты");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСделкиСКлиентами");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиСводно");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ продаж по организациям, подразделениям (магазинам), 
		|менеджерам и номенклатуре.'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Вставить(Подсистема, "Важный");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиСводноБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ продаж по организациям, подразделениям (магазинам), 
		|менеджерам и номенклатуре.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДинамикаПродажКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПродажиПоЗаказуКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыручкаИСебестоимостьРозничныхПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Финансовый анализ розничных продаж
		|по подразделениям (магазинам), складам и поставщикам.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажРозницы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Помесячные объемы розничных продаж за выбранный период.
		|Возможен анализ по периодам - квартал, месяц, неделя, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажРозницыБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Помесячные объемы розничных продаж за выбранный период.
		|Возможен анализ по периодам - квартал, месяц, неделя, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиРозницыПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие магазины принесли более всего валовой прибыли?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиРозницыПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'По товарам от каких поставщиков получена
		|наибольшая валовая прибыль при розничных продажах?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГлавнаяКнига);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводная информация о сальдо и корреспондирующих оборотах по счетам бухгалтерского учета.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Счет
		|Начальное сальдо дебет
		|Начальное сальдо кредит
		|С кредита счета
		|Оборот по дебету
		|Оборот по кредиту
		|Конечное сальдо дебет
		|Конечное сальдо кредит'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Периодичность
		|По субсчетам
		|По субсчетам кор. счетов
		|Развернутое сальдо
		|Выводить единицу измерения'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГрафикОплатНачисленийКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ графика траншей, погашений основного долга, процентов, комиссий.
		|Когда и на какую сумму произведены начисления?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикОплатПоДатам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный график траншей, оплат и начислений.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикОплатПоМесяцам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Укрупненный, помесячный график траншей, оплат и начислений.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ГрафикОплатПоМесяцамКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеАссортимента);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Сводный анализ движения серии номенклатуры на складах и в производстве.'"),
									НСтр("ru= 'Сводный анализ движения серии номенклатуры на складах.'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоСериямНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Сводный анализ движения серии номенклатуры на складах и в производстве.'"),
									НСтр("ru= 'Сводный анализ движения серии номенклатуры на складах.'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ВедомостьПоСериямНоменклатурыКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтруктураСерииНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Какие серии использовались при выпуске серии изделия?'"),
									НСтр("ru= 'Какие серии использовались при сборке серии комплекта?'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтруктураСерииНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Какие серии использовались при выпуске серии изделия?'"),
									НСтр("ru= 'Какие серии использовались при сборке серии комплекта?'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СтруктураСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДвижениеСерииНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Детальный анализ движения серии номенклатуры на складах и в производстве.'"),
									НСтр("ru= 'Детальный анализ движения серии номенклатуры на складах.'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеСерииНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'Детальный анализ движения серии номенклатуры на складах и в производстве.'"),
									НСтр("ru= 'Детальный анализ движения серии номенклатуры на складах.'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвижениеСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрименениеСерииНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru= 'В каких изделия использовалась серия номенклатуры?'"),
									НСтр("ru= 'В каких комплектах использовалась серия номенклатуры?'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрименениеСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДебиторскаяЗадолженность);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задолженности клиентов с разбивкой по интервалам долга.
		|Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДебиторскаяЗадолженность");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задолженности клиентов с разбивкой по интервалам долга.
		|Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДебиторскаяЗадолженностьДоляПросрочки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ изменения доли просроченной дебиторской задолженности с разбивкой по периодам.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоляПросроченнойДЗ");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ изменения доли просроченной дебиторской задолженности с разбивкой по периодам.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаИзмененияЦенНоменклатуры);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаИзмененияЦенНоменклатурыПоставщика);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаПоказателейРаботыТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ изменения показателей, характеризующих эффективность работы торговых представителей.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПоказателейТорговыхПредставителей");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ изменения показателей, характеризующих эффективность работы торговых представителей.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДоступностьВариантовАнализаЦелевыхПоказателей);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДосьеПартнера);
	ОписаниеОтчета.Включен = Ложь;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДосьеКонтрагента);
	ОписаниеОтчета.Включен = Ложь;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналУчетаСчетовФактур);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование списка счетов-фактур, исправленных счетов-фактур,
		|корректировочных счетов-фактур, полученных от поставщиков и переданных покупателям.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Наименование налогоплательщика
		|ИНН
		|КПП
		|Выставленные счета-фактуры
		|Полученные счета-фактуры
		|Руководитель организации
		|Индивидуальный предприниматель'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаблокированныеЯчейки);
	ОтключитьОтчет(ОписаниеОтчета);

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗависшиеЗадачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Задачи, которые не могут быть выполнены из-за того, что не заполнен список ролей и исполнителей.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗависшиеЗадачиПоИсполнителям");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗависшиеЗадачиПоОбъектамАдресации");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПросроченныеЗадачи");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводкаПоЗависшимЗадачам");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗагрузкаВидовРабочихЦентров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ загрузки видов рабочих центров по графику производства.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗагрузкаВидовРабочихЦентровТаблица");
	ОписаниеВарианта.Описание = НСтр("ru= 'Показывает загрузку видов рабочих центров в каждом поздразделении.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ЗагрузкаВидовРабочихЦентровТаблицаКонтекст");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗанятостьВидовРабочихЦентров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Занятость видов рабочих центров с детализацией до производственных процессов.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяТолькоУправлениеПроизводством21");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗагрузкаРабочихЦентров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ загрузки рабочих центров по данным расписания работы ключевых РЦ и данным пооперационного планирования.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗагрузкаРабочихЦентров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова степень загрузки рабочих центров?
										|Предельная или частичная?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗанятостьРабочихЦентров");
	ОписаниеВарианта.Описание = НСтр("ru= 'В каких подразделениях заняты рабочие центры?
										|Для производства какой продукции заняты рабочие центры?'");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.Задачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаПоИсполнительскойДисциплине");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущиеЗадачи");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗадачиИстекающиеНаДату);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗадачиИстекающиеНаДату");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаполнениеСвойствПартнеров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Все ли свойства клиентов, поставщиков заполнены?
		|Сколько и каких свойств нужно заполнить?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Насколько заполнены свойства клиентов, поставщиков?
		|Оценка полноты клиентской базы.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаполненностьСклада);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие складские помещения простаивают (пусты или заполнены недостаточно)?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗаполненностьСклада");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие складские помещения простаивают (пусты или заполнены недостаточно)?
		|Какие области переполнены и требуют расширения?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИзменениеABCXYZРаспределенияКлиентов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИнвентарнаяКнигаОС);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Наименование организации
		|Наименование структурного подразделения
		|Наименование объектов основных средств
		|Инвентарный номер
		|Поступило
		|Первоначальная стоимость
		|Срок полезного использования
		|Сумма начисленной амортизации (износа)
		|Остаточная стоимость
		|Переоценка
		|Внутренние перемещения, выбытие (списание)'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Подразделение
		|МОЛ
		|Ответственный'");
	//-- НЕ УТ
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗначенияНефинансовыхПоказателей);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗначенияНефинансовыхПоказателей");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обзор значений нефинансовых показателей по периодам.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ЗначенияНефинансовогоПоказателя");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расшифровка");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыЦенНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка эффективности сдерживания закупочных цен
		|без учета цен отдельных поставщиков.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИндексыЦенНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка эффективности сдерживания закупочных цен
		|без учета цен отдельных поставщиков.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыЦенПоставщиков);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка эффективности сдерживания закупочных цен
		|с учетом цен отдельных поставщиков.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИндексыЦенПоставщиков");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка эффективности сдерживания закупочных цен
		|с учетом цен отдельных поставщиков.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИспользованиеСчетовИСубконтоМеждународныйУчет);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ настроек отчетов и шаблонов проводок, где используются счета плана счетов и субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИспользованиеСчетовИСубконтоМеждународныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ настроек отчетов и шаблонов проводок, где используются счета плана счетов и субконто.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ИспользованиеСчетаКонтекст");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаЗакупок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка фактического состояния закупок товаров по плану.
		|Какие заказы поставщикам еще не поступили на склад?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе подразделений и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе поставщиков и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе складов и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаОплатПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка исполнения плана по фактическому расходу денежных средств.
		|План и факт поставок от поставщика за период.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка фактического состояния продаж товаров по плану.
		|Какие заказы клиентов еще не отгружены со склада?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаОплатПоКлиентам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка исполнения плана оплат по фактическому приходу денежных средств.
		|Плана и факт отгрузок клиенту за период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоКлиентам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе клиентов и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоМенеджерам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе менеджеров и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе подразделений и номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Динамика фактического исполнения плана в разрезе складов и номенклатуры.'");
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаПроизводства);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выполнен ли план производства?
		|Насколько выполнен по факту?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПроизводстваПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка фактического состояния производства продукции по плану.
		|Какие заказы на производство еще не поступили на склад?'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаСборкиРазборки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выполнен ли план сборок (разборок)?
		|Насколько выполнен по факту?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаСборкиРазборки");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка фактического состояния сборки (разборки) товаров по плану.
		|Какие заказы на сборку (разборку) еще не поступили на склад?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Склад.Подсистема.ВнутреннееТовародвижение");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеРаспоряженийНаПеремещениеСборку);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КалендарьСобытий);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Список текущих дел - просроченных и запланированных.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Список текущих дел - просроченных и запланированных.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КартаПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ объемов продаж с помощью географической карты.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КартаПродаж");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ объемов продаж с помощью географической карты.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаНМАМеждународныйУчет);
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаОСМеждународныйУчет);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаПартииПоВидамНалогообложения);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Корреспонденции счетов за выбранный период,
		|в которых был использован выбранный вид  или значение субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСубконто");
	ОписаниеВарианта.Описание = НСтр("ru= 'Корреспонденции счетов за выбранный период,
		|в которых был использован выбранный вид  или значение субконто.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСчета");
	ОписаниеВарианта.Описание = НСтр("ru= 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.'");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСчетаМеждународный);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ проводок по счетам международного учета.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСчетаМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныеПроводки");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводные корреспонденции между счетами за выбранный период.'");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КнигаПокупок);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование книги покупок после выполнения регламентных операций закрытия периода по НДС.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Покупатель
		|ИНН
		|КПП
		|Покупка за период
		|Дата и номер счета-фактуры
		|Номер и дата исправления счета-фактуры
		|Номер и дата корректировочного счета-фактуры
		|Наименование продавца
		|Страна происхождения товара
		|НДС'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Контрагент
		|Выводить покупателей'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КнигаПродаж);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование книги продаж после выполнения регламентных операций закрытия периода по НДС.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Продавец
		|ИНН
		|КПП
		|Продажа за период
		|Дата и номер счета-фактуры
		|Номер и дата исправления счета-фактуры
		|Номер и дата корректировочного счета-фактуры
		|Наименование покупателя
		|Страна происхождения товара
		|НДС'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Контрагент
		|Выводить продавцов'");
	
		
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрСчетовФактурДляСверки);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыставленныеСчетаФактуры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование печатной формы реестра счетов-фактур, выданных покупателю за налоговый период.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Покупатель
		|Дата и номер счета-фактуры
		|Номер и дата исправления счета-фактуры
		|Номер и дата корректировочного счета-фактуры
		|НДС
		|Сверка
		|Реестр'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Контрагент'");

	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПолученныеСчетаФактуры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование печатной формы реестра счетов-фактур, полученных от поставщика за налоговый период.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Поставщик
		|Дата и номер счета-фактуры
		|Номер и дата исправления счета-фактуры
		|Номер и дата корректировочного счета-фактуры
		|НДС
		|Сверка
		|Реестр'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Контрагент'");

	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КнигаУчетаДоходовИРасходов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование книги доходов и расходов по данным налогового учета
		|для организаций и индивидуальных предпринимателей на УСН.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Налогоплательщик
		|ИНН
		|КПП
		|Объект налогообложения
		|Адрес организации
		|Номера расчетных счетов
		|Содержание операции
		|Доходы
		|Расходы
		|Наименование объекта
		|Дата оплаты объекта основных средств
		|Дата подачи документов
		|Дата ввода в эксплуатациюв
		|Первоначальная стоимость
		|Срок полезного использования
		|Остаточная стоимость 
		|Количество кварталов эксплуатации
		|Доля стоимости
		|Дата выбытия
		|Сумма убытков
		|Налоговая база за истекший налоговый период
		|Страховые взносы на обязательное пенсионное страхование
		|Страховые взносы на обязательное социальное страхование
		|Страховые взносы на обязательное медицинское страхование
		|Расходы по выплате пособия по временной нетрудоспособности
		|Платежи (взносы) по договорам добровольного личного страхования'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация'");

	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтактнаяИнформация);
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Информация о клиентах, поставщиках, их основном менеджере, 
		|ABC/XYZ-классификации и контактной информации.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПоКонтаткнымЛицам");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Информация о контактных лицах.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольНомеровГТДТоваров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль корректности учета операций с импортными товарами с указанием номера ГТД и страны происхождения.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольНомеровГТДТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль корректности учета операций с импортными товарами с указанием номера ГТД и страны происхождения.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольНомеровГТДТоваровБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОперацийСДенежнымиСредствами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль корректности операций с денежными средствами:
		|- подотчетные лица,
		|- эквайринг (операции с платежными картами),
		|- конвертация валют,
		|- перемещения внутри организации,
		|- перемещения между организациями.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольОперацийСДенежнымиСредствами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный контроль корректности операций с денежными средствами.'");

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОформленияДокументовТовародвижений);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль корректности операций с товарно-материальными ценностями.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольОформленияДокументовТовародвижений");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль отражения операций с детализацией до номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныйКонтрольОформленияДокументовТовародвижений");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль отражения операций сводно по номенклатуре с детализацией до документа.'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПередачиПродукцииДавальцу);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько выпущено, передано продукции давальцам?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольПередачиПродукцииДавальцу");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько выпущено, передано продукции давальцам?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольПередачиПродукцииДавальцуКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаСтоимостиПереработки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПередачиСырьяИМатериаловПереработчику);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько передано сырья и материалов переработчикам по заказам?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольПередачиСырьяИМатериаловПереработчику");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько передано сырья и материалов переработчикам по заказам?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольПередачиСырьяИМатериаловПереработчикуКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыПереданныеПереработчикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько сырья и материалов было передано переработчикам за период?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПереданныеНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько сырья и материалов было передано переработчикам за период?
		|Сколько он израсходовал или вернул за тот же период?'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Все ли возвраты товаров оформлены?
		|Все ли отчеты комиссии оформлены? Каковы остатки комиссионных товаров?
		|Все ли передачи товаров оформлены?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеВозвратовТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ возвращенных организации товаров в рамках заключенных договоров комиссии.
		|Кто отправитель и получатель?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеОтчетовПоКомиссии");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ товаров, которые были переданы на комиссию другой организации.
		|Какие получатели еще не отчитались?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеПередачТоваров");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ товаров, проданных по схеме интеркампани.
		|Кто отправитель и получатель?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыНаКомиссии");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ имеющихся остатков комиссионных товаров организации.
		|От каких организаций приняты товары на комиссию?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеВозвратовТоваровКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеПередачТоваровКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеОтчетовПоКомиссииКонтекст");
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПоставкиПродукцииПереработчиком);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько продукции поступило от переработчиков?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольПоставкиПродукцииПереработчиком");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько продукции поступило от переработчиков?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольПоставкиПродукцииПереработчикомКонтекст");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПоставкиСырьяИМатериаловДавальцем);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько материалов и сырья поступило от давальцев?
		|Сколько возвращено или списано?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольПоставкиСырьяИМатериаловДавальцем");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько материалов и сырья поступило от давальцев?
		|Сколько возвращено или списано?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольПоставкиСырьяИМатериаловДавальцемКонтекст");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КредиторскаяЗадолженность);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задолженности перед поставщиками с разбивкой по интервалам долга.
		|Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КредиторскаяЗадолженность");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задолженности перед поставщиками с разбивкой по интервалам долга.
		|Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'План-фактный анализ использования лимитов за период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИспользованияЛимитовРасходаДенежныхСредств");
	ОписаниеВарианта.Описание = НСтр("ru= 'План-фактный анализ использования лимитов за период.
		|По каким статьям ДДС есть превышение или лимит израсходован не полностью?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ЛимитыРасходаДенежныхСредствКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	
	// ++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'План-фактный анализ использования лимитов за период.'");
	// -- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МатериалыВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько и каких товарно-материальных ценностей передано сотрудникам в эксплуатацию?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТМЦВЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько и каких товарно-материальных ценностей передано сотрудникам в эксплуатацию?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ТМЦВЭксплуатацииКонтекст");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МеждународныйОтчет);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МониторБюджетныхПроцессов);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МониторЦелевыхПоказателей);
	ОписаниеОтчета.Размещение.Очистить();
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "МониторЦелевыхПоказателей");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль ключевых (целевых) показателей деятельности предприятия.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.НаличиеСчетовФактур);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль наличия счетов-фактур, полученных от поставщиков.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Документ-основание
		|Счет-фактура
		|Проведен'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Наличие счета-фактуры
		|Документ'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборачиваемостьЗапасов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какая оборачиваемость у товаров?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборачиваемостьЗапасов");
	ОписаниеВарианта.Описание = НСтр("ru= 'На каких складах оборачиваемость товаров низкая?
		|Каковы текущие остатки и уровень запасов интересующих товаров?'");
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотнаяВедомостьБюджетирования);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение запланированных в рамках сценариев сумм с фактическим исполнением за период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотнаяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение запланированных в рамках сценариев сумм с фактическим исполнением за период.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОборотнаяВедомостьПоСтатьеБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расшифровка");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомостьБюджетирования);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение плановых и фактических сальдо и оборотов по показателям за период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение плановых и фактических сальдо и оборотов по показателям за период.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомостьПоПоказателюБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расшифровка");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РекомендацииПоПовышениюСкоростиРасчетаЭкземпляраБюджета);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомостьПоСчету);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов и сальдо по счетам регламентированного учета.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомостьПоСчету");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ оборотов и сальдо по счетам регламентированного учета.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыМеждуСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обороты между выбранными субконто и корреспондирующими субконто.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыМеждуСубконто");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обороты между выбранными субконто и корреспондирующими субконто.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обороты между выбранным счетом и всеми остальными счетами за определенный период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыСчета");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обороты между выбранным счетом и всеми остальными счетами за определенный период.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиИДвиженияДенежныхСредствВКассахККМ);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль денежных средств в кассах ККМ.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредствККМ");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль денежных средств в кассах ККМ.
		|В какой кассе ККМ, когда и сколько денежных средств приходило или уходило?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьНесколькоВалют");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредствККМОднаВалюта");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль денежных средств в кассах ККМ.
		|В какой кассе ККМ, когда и сколько денежных средств приходило или уходило?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьНесколькоВалют");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровОрганизаций);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровПереданныхНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько, каких товаров у комиссионеров и по какой цене?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажах");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПереданныхНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько, каких товаров у комиссионеров и по какой цене?
		|Когда товары были переданы на комиссию?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажах");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровПринятыхНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько, каких товаров от комитентов и по какой цене?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПринятыхНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько, каких товаров от комитентов и по какой цене?
		|Когда товары были приняты на комиссию?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияОтУсловийПродаж);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмпортныеТоварыКОформлению);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИмпортныеТоварыКОформлению");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьИмпортныеЗакупки");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким товарам не оформлены таможенные декларации?'");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтчетПоПроводкам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ корреспонденций счетов.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетПоПроводкам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ корреспонденций счетов.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОформлениеОтчетовКомитенту);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль за своевременным предоставлением отчетности комитенту.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеОтчетовКомитенту");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль за своевременным предоставлением отчетности комитенту.
		|По каким товарам, на какие количество и сумму мы не отчитались?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОценкаРентабельностиПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОценкаРискаНалоговойПроверки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Самостоятельная оценка налогоплательщиком риска проведения выездной налоговой проверки.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Налоговая проверка
		|Оценка риска'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Организация'");

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ФинансовыйАнализ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Финансовый анализ бухгалтерской отчетности.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Финансовый анализ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Организация'");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОшибкиНастройкиШаблоновПроводок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОшибкиУточненияСчетов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПартнерыКоторымОтгрузкаЗапрещена);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каким клиентам запрещена отгрузка?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЗапретОтгрузки");
	ОписаниеОтчета.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПартнерыКоторымОтгрузкаЗапрещена");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каким клиентам запрещена отгрузка?
		|Кто основной менеджер клиента?
		|Какие причины запрета?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЗапретОтгрузки");
	ОписаниеОтчета.ВидимостьПоУмолчанию = Ложь;
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПереданнаяВозвратнаяТара);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества и залоговых суммы невозвращенной клиентом тары.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПереданнаяВозвратнаяТара");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества и залоговых суммы невозвращенной (или возвращенной не вовремя) клиентом тары.
		|Каковы сроки наступления ближайших возвратов?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПересеченияСегментаНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПересеченияСегментаПартнеров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлановаяИФактическаяСебестоимостьВыпущеннойПродукции);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПлановаяИФактическая");
	ОписаниеВарианта.Описание = НСтр("ru='Какова плановые и фактические затраты по выпущенной продукции?
		|По каким объектам и статьям калькуляции произошли отклонения?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Отклонения");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы отклонения себестоимости от плановых показателей?'");
	
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПлановаяИФактическаяРасшифровка");
	
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклонениеЗаказаФактаОтКалькуляции);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклонениеЗаказаФактаОтКалькуляции");
	ОписаниеВарианта.Описание = НСтр("ru='Какие нормы расходов установлены спецификацией заказа?
		|Каковы отклонения от плановой калькуляции?
		|Каковы отклонения по результатам выполнения этапов?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализОтклоненийПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru='В каких подразделениях произошли отклонения от нормативов?
		|При производстве каких полуфабрикатов произошли отклонения?'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтклонениеСпецификацииЗаказаОтКалькуляции");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтклонениеФактаОтСпецификацииЗаказа");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтклонениеФактаОтКалькуляции");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ЗаказКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтклонениеФактаОтСпецификацииЗаказаБезПрогноза");
	
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ отклонений по фактически произведенным оплатам и начислениям
		|в рамках заключенных кредитных (депозитных) договоров с учетом комиссии.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПланФактныйАнализ");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ отклонений по фактически произведенным оплатам и начислениям
		|в рамках заключенных кредитных (депозитных) договоров с учетом комиссии.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПланФактныйАнализКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение плановых и фактических количественных показателей торгового представителя.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоНоменклатуре");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ исполнения заданий торговыми представителями.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоПредставителям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ исполнения заданий торговыми представителями с точностью до номенклатуры.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализРаботыТорговыхПредставителейПоСумме);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение плановых и фактических суммовых показателей торгового представителя.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоСумме");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение плановых и фактических суммовых показателей торгового представителя.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлатежнаяДисциплинаКлиентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Как часто, на сколько дней и какие клиенты задерживают оплаты?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПлатежнаяДисциплинаКлиентов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль просроченной задолженности у клиентов в течении выбранного периода.
		|Как часто, на сколько дней и какие клиенты задерживают оплаты?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрайсЛист);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие цены установлены на товары?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрайсЛист");
	ОписаниеВарианта.Описание = НСтр("ru= 'Формирование прайс-листа по выбранным ценам, 
		|при необходимости только товары в наличии.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрайсЛистКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрайсЛистДляПриемаЗаказов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Печатная форма прайс-листа для выдачи торговому представителю.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Печатная форма прайс-листа для выдачи торговому представителю.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПримененныеСкидкиВДокументе);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПринятаяВозвратнаяТара);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества и залоговых суммы принятой тары.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПринятаяВозвратнаяТара");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества и залоговых суммы принятой тары.
		|Каковы сроки наступления ближайших возвратов тары поставщикам?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПричиныЗапретаОтгрузки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроверкаСвязейПоказателейБюджетов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка соответствия настройки связанных статей правилам получения фактических данных показателей бюджетов.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПроверкаСвязейПоказателейБюджетов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка соответствия настройки связанных статей правилам получения фактических данных показателей бюджетов.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПроверкаСвязейПоказателяБюджетов");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиМеждуОрганизациями);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ прибыли при продажах между организациями предприятия.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиМеждуОрганизациями");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ прибыли, полученной при оформлении продаж товаров между организациями, 
		|входящими в состав торгового предприятия.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиСравнениеАналогичныхПериодов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеПродажАналогичныхПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ структуры и изменений выручки за несколько периодов - лет, месяцев,
		|недель, дней.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеПродажАналогичныхПериодов");

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиСравнениеДвухПериодов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РейтингПродажДвухПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ тренда продаж по сравнению с прошлым перидом?
		|Понижаются или повышаются продажи?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РейтингПродажДвухПериодов");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеВыручкиДвухПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ продаж по двум периодам
		|по бизнес-регионам и видам номенклатуры.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеВыручкиДвухПериодов");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроизводительностьРаботниковСклада);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества обработанных складскими сотрудниками заданий.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПроизводительностьРаботниковСклада");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка количества обработанных складскими сотрудниками грузов за период.
		|Сколько приемок, размещений, отборов или пересчетов было сделано?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПросроченныеЗадачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗадачиВыполненныеСНарушениемСроков");
	ОписаниеВарианта.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы());
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РаспределениеТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Когда, по какому заданию и к какому клиенту планируется визит?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КалендарьВизитовТорговыхПредставителей");
	ОписаниеВарианта.Описание = НСтр("ru= 'Когда, по какому заданию и к какому клиенту планируется визит?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыМеждуОрганизациями);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль взаиморасчетов между организациями, входящими в состав предприятия.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыПоЗакупкам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль взаиморасчетов между организациями, входящими в состав предприятия.
		|Сколько организация-покупатель должна организации-продавцу?
		|Уменьшился или увеличился долг за выбранный период?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ взаиморасчетов с клиентами.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСКлиентами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ взаиморасчетов с клиентами.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСКлиентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ТекстОписания = НСтр("ru= 'Суммовые оценки отклонений от курса ЦБ при валютных взаиморасчетах с клиентами.'");
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияСуммыВзаиморасчетовПоКлиентам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = ТекстОписания;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклоненияСуммыВзаиморасчетовПоКлиентам");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ТекстОписания;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСПартнерами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПартнерами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ взаиморасчетов с клиентами и поставщиками.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПартнерамиБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводный анализ взаиморасчетов с клиентами и поставщиками.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКонтрагентамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКонтрагентамКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоПартнерамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоПартнерамКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСверкеВзаиморасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСверкеВзаиморасчетовКонтекстБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ взаиморасчетов с поставщиками.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщиками");
	ОписаниеВарианта.Описание = НСтр("ru= 'Детальный анализ взаиморасчетов с поставщиками.
		|Как изменялась задолженность за указанный период?
		|Какое текущее сальдо расчетов?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщикамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ТекстОписания = НСтр("ru= 'Суммовые оценки отклонений от курса ЦБ при валютных взаиморасчетах с поставщиками.'");
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияСуммыВзаиморасчетовПоПоставщикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = ТекстОписания;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклоненияСуммыВзаиморасчетовПоПоставщикам");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ТекстОписания;
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаФормулыБюджетногоОтчета);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегламентированныйОтчетУСН);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Форма по КНД 1152017
		|ИНН
		|КПП
		|Налогоплательщик
		|ОКВЭД
		|Объект налогообложения
		|ОКАТО
		|Код бюджетной классификации
		|Авансовые платежи по налогу
		|Подлежащие уплате налоги
		|Сумма налога к уменьшению
		|Ставка налога
		|Доходы за налоговый период
		|Расходы за налоговый период
		|Налоговая база
		|Сумма убытка
		|Исчисленный налог
		|Уплаченные страховые взносы'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Организация
		|Период составления отчета
		|Дата подписи
		|Вид документа'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Реквизиты договоров кредитов и депозитов.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РеестрДоговоровКредитовДепозитов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Договоры указанного типа (кредиты или депозиты) с реквизитами,
		|суммами плана оплат и начислений, фактом оплат и начислений,
		|отклонениями и остатком долга по договору.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрНормативноСправочнойИнформации);
	ОтключитьОтчет(ОписаниеОтчета);	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрУчетныхДанных);
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЗакупки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РезультатРаботыПравилПоСтатьеБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РезультатРаботыПравилПоПоказателюБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РезультатРаботыПравилПоСтатьямБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РезультатРаботыПравилПоПоказателямБюджетов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РезультатРаботыПравилПоСтатьямИПоказателямБюджетов");	
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияПродажи);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СбалансированностьПлановУП);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выполнимы ли планы потребностей за счет планов обеспечения?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СбалансированностьПланов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка корректности составленных планов. 
		|Выполнимы ли планы потребностей за счет планов обеспечения?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СбалансированностьПлановУТ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	//++ НЕ УТ
	ОписаниеВарианта.Включен = Ложь;
	//-- НЕ УТ
	ОписаниеВарианта.Описание = НСтр("ru= 'Выполнимы ли планы потребностей за счет планов обеспечения?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СбалансированностьПланов");
	//++ НЕ УТ
	ОписаниеВарианта.Включен = Ложь;
	//-- НЕ УТ
	ОписаниеВарианта.Описание = НСтр("ru= 'Проверка корректности составленных планов. 
		|Выполнимы ли планы потребностей за счет планов обеспечения?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаОборотовМУиБУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выявление отклонений оборотов международного финансового учета
		|от оборотов регламентированного бухгалтерского учета.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаОборотовМУиБУ");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выявление отклонений оборотов международного финансового учета
		|от оборотов регламентированного бухгалтерского учета.'");
	//-- НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаРасчетовСПартнерами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задокументированных сверок расчетов с клиентами.
		|Есть ли расхождения между данными от клиента и нашими?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаРасчетовСПартнерами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задокументированных сверок расчетов с клиентами.
		|Есть ли расхождения между данными от клиента и нашими?'");
		
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыСПАРКРиски);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотр индексов 1СПАРК Риски по контрагентам.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СобытияМониторингаСПАРКРиски);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотра событий мониторинга 1СПАРК Риски. Показываются события за последние 15 дней.'");
		
	//++ НЕ УТ	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СводныеПроводки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводные корреспонденции между счетами за выбранный период.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныеПроводки");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводные корреспонденции между счетами за выбранный период.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СвязиПоказателейБюджетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Как обороты бюджетных статей влияют на показатели?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СвязиСтатейИПоказателейБюджетов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Как обороты бюджетных статей влияют на показатели?'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СертификатыНоменклатурыСИстекающимСрокомДействия);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СоставПродажи);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СоставСегмента);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеВыполненияДокументов);
	ОтключитьОтчет(ОписаниеОтчета);
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеОбъектовЭксплуатации);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Когда были выполнены последние ремонты? 
		|Каковы текущие и плановые показателей наработок?
		|Каков остаточный ресурс в величине показателя и срока службы?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеОбъектовЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru= 'Когда были выполнены последние ремонты? 
		|Каковы текущие и плановые показателей наработок?
		|Каков остаточный ресурс в величине показателя и срока службы?'");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Текущее состояние расчетов с клиентами.
		|Какой долг клиента сейчас? На какую сумму планируется отгрузка?
		|На какую сумма ожидается оплата от клиента?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Текущее состояние расчетов с клиентами.
		|Какой долг клиента сейчас? На какую сумму планируется отгрузка?
		|На какую сумма ожидается оплата от клиента?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентомКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентомКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовУпрощенныйКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовУпрощенныйКонтекстБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКлиентамиСамообслуживание);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько комиссионер должен нам за проданные товары?
		|Сколько мы должны комиссионеру, например, по вознаграждениям?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько комиссионер должен нам за проданные товары?
		|Сколько мы должны комиссионеру, например, по вознаграждениям?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКомитентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько мы должны комитенту за реализованные товары?
		|Сколько комитент должен нам, например, по вознаграждениям?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько мы должны комитенту за реализованные товары?
		|Сколько комитент должен нам, например, по вознаграждениям?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Текущее состояние расчетов с поставщиками.
		|Какой долг поставщику сейчас? На какую сумму планируется поступление?
		|На какую сумма ожидается оплата поставщику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщиками");
	ОписаниеВарианта.Описание = НСтр("ru= 'Текущее состояние расчетов с поставщиками.
		|Какой долг поставщику сейчас? На какую сумму планируется поступление?
		|На какую сумма ожидается оплата поставщику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Текущее состояние расчетов с поставщиками.
		|Какой долг поставщику сейчас? На какую сумму планируется поступление?
		|На какую сумма ожидается оплата поставщику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикомКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикомКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиКонтекстБазовая");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПоказателяБюджетов);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Для каких товаров в наличии не назначена основная ячейка?
		|Какие ячейки пусты и не назначены для товаров?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РазмещениеНоменклатурыПоЯчейкамСправочно");
	ОписаниеВарианта.Описание = НСтр("ru= 'Для каких товаров в наличии не назначена основная ячейка?
		|Какие ячейки пусты и не назначены для товаров?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ отклонений между двумя вариантами графиков по кредитным (депозитным) договорам.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеВариантовГрафиков");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ отклонений между двумя вариантами графиков по кредитным (депозитным) договорам.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеВариантовГрафиковКонтекст");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеКалькуляцииИРесурснойСпецификации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеНМА);
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеОС);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеСегментовПартнеров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько клиентов в сегментах?
		|Какой объем продаж по сегментам?
		|Какое количество сделок и их состояние.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько клиентов в сегментах?
		|Какой объем продаж по сегментам?
		|Какое количество сделок и их состояние.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнительныйАнализДинамикиАссортиментаИПродаж);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Как изменяется наполнение ассортимента со временем?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПоКатегориям");
	ОписаниеВарианта.Описание = НСтр("ru= 'Как изменяется наполнение ассортимента со временем?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнительныйАнализПоказателейРаботыМенеджеров);
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Комплексный анализ показателей, характеризующих эффективность работы менеджеров.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Продажи
		|Прибыль
		|Поступление денежных средств
		|Выручка (по оплате) минус себестоимость (по отгрузке)
		|Соблюдение условий продаж
		|Потери
		|Ручные скидки
		|Продажи на одну сделку
		|Продажи на одно взаимодействие
		|Основные этапы потерь
		|Причины проигрыша сделок
		|Причины неудовлетворения первичного спроса
		|Динамика клиентской базы
		|Продажи новым клиентам
		|Претензии клиентов
		|Причины возникновения претензий клиентов'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Анализируемый период
		|Период для сравнения
		|Показатели
		|Годовая ставка
		|Подразделение
		|Менеджер'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Комплексный анализ показателей, характеризующих эффективность работы менеджеров.
		|Таких, как продажи, прибыль, поступление ДС, скидки и другие.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Продажи
		|Прибыль
		|Поступление денежных средств
		|Выручка (по оплате) минус себестоимость (по отгрузке)
		|Соблюдение условий продаж
		|Потери
		|Ручные скидки
		|Продажи на одну сделку
		|Продажи на одно взаимодействие
		|Основные этапы потерь
		|Причины проигрыша сделок
		|Причины неудовлетворения первичного спроса
		|Динамика клиентской базы
		|Продажи новым клиентам
		|Претензии клиентов
		|Причины возникновения претензий клиентов'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Анализируемый период
		|Период для сравнения
		|Показатели
		|Годовая ставка
		|Подразделение
		|Менеджер'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтоимостьМатериаловИРаботСпецификации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализМатериаловРаботВСебестоимостиВыпущеннойПродукции);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СхемаМаршрутнойКарты);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Последовательность выполнения операций маршрутной карты в виде схемы.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Вид операции
		|Подразделение
		|Вид рабочего центра'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Маршрутная карта
		|Операции вложенных маршрутов'");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТекущаяНаполненностьАссортимента);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова роль, стадия жизни товара в ассортименте?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущаяНаполненностьАссортимента");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какова роль, стадия жизни товара в ассортименте?
		|В каких форматах магазинов товар представлен и по какой цене?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТекущиеКвотыАссортимента);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Состав и объемы квот товаров ассортимента.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрисутствиеМаркиВКатегориях");
	ОписаниеВарианта.Описание = НСтр("ru= 'В каких категориях товаров присутствуют различные марки?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущиеКвотыАссортимента");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие квоты действуют на товары для различных форматов магазинов?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварныйКалендарь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каковы текущие остатки товаров на складах? 
		|Когда планируются отгрузки и поступления товаров?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварныйКалендарь");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каковы текущие остатки товаров на складах? 
		|Когда планируются отгрузки и поступления товаров?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварныйОтчетТОРГ29);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Форма по ОКУД 330229
		|Организация
		|Структурное подразделение
		|ОКПО
		|ОКДП
		|Материально-ответственное лицо
		|МОЛ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Склад
		|Номер отчета'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналУчетаТМЦСданныхНаХранение);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Форма по ОКУД 0335003
		|Организация
		|Организация-хранитель
		|Поклажедатель
		|Поклажедержатель
		|Структурное подразделение
		|ОКПО
		|ОКДП
		|Материально-ответственное лицо
		|МОЛ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация'");
	ОписаниеВарианта.Описание = НСтр("ru= 'Печать унифицированных форм МХ-1, МХ-2, МХ-3 по организации-хранителю за период'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыВЯчейках);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие товары размещены по складским ячейкам?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияТоваровВнутриСклада");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары размещены по складским ячейкам?
		|Какие товары запланированы к непосредственной выемке или размещению?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвиженияТоваровВЯчейкеКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвиженияТоваровПоЗаблокированнымЯчейкамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоОбластиХраненияКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСкладскойГруппеНоменклатурыКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоЯчейкеКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКОтгрузке);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКПоступлению);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким товарам скоро истекает срок годности?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПоСрокамГодности");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким товарам скоро истекает срок годности?
		|Сколько таких товаров и на каком складе?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");

	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МатериалыВПроизводствеПоСрокамГодности);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким материалам скоро истекает срок годности?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПоСрокамГодности");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким материалам скоро истекает срок годности?
		|Сколько таких материалов и в каких они подразделениях?'");
	//-- НЕ УТ	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыПереданныеНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько товаров было передано комиссионеру за период?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПереданныеНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько товаров было передано комиссионеру за период?
		|Сколько он продал, списал, вернул или заказал за тот же период?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПереданныеНаКомиссиюБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыПринятыеНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько товаров было принято от комитентов за период?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПринятыеНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сколько товаров было принято от комитентов за период?
		|Сколько мы продали, списали, вернули или заказали за тот же период?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПринятыеНаКомиссиюБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыСИстекающимиСертификатами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, НСтр("ru = 'Товары с истекающими сертификатами'"));
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким сертификатам заканчивается срок действия?'");
	ОписаниеВарианта.Включен = Истина;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УправленческийБаланс);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ финансовых показателей на начало и конец периода и их изменения.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УправленческийБаланс");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каковы финансовые показатели по статьям активов и пассивов?
		|Каковы финансовые показатели по организациям и подразделениям?
		|Есть ли нарушение баланса?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УпрБалансПоНаправлениям");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("УправлениеПредприятием");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УправленческийБалансКонтроль);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольБалансаКонтекст");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольБаланса");
	ОписаниеВарианта.Описание = НСтр("ru= 'Контроль финансовых показателей по месяцам, статьям активов/пассивов и документам.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомостьАктивовПассивов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВАктивовПассивов");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Остатки активов и пассивов на начало и на конец периода и суммы оборотов за период.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КарточкаАктиваПассива");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ФинансовоеСостояние);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ФинансовоеСостояниеБазовая");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каковы финансовые показатели по статьям активов и обязательств?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УсловияЗакупок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение условий закупки товаров у различных поставщиков.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УсловияЗакупок");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение условий закупки товаров у различных поставщиков.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УсловияПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сравнение фактических условий продаж товаров с зарегистрированными в соглашениях.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОбщиеПараметры");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ типовых соглашений о продажах по видам цен, графикам оплат, периодам действия, хозяйственным операциям, складам и срокам поставки номенклатуры.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Цены");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводные данные по ценовым группам и соглашениям.'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ХодРемонтныхМероприятий);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие заказы на ремонт оформлены, выполнены или просрочены?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ХодРемонтныМероприятий");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие заказы на ремонт оформлены?
		|Сколько заказов на ремонт выполнено по плану?
		|Есть ли просроченные ремонтные работы?'");
	//-- НЕ УТКА

	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ШахматнаяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ШахматнаяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.'");
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ШахматнаяВедомостьМеждународный);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ШахматнаяВедомостьМУ");
	ОписаниеВарианта.Описание = НСтр("ru= 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.'");

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГрафикПроизводстваПродукции);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотр графика производства продукции.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикПроизводстваПродукцииПоЗаказам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие даты выпуска/запуска продукции?
										|Когда будут выполнены заказы?
										|Какой объем выпуска запланирован в подразделении?
										|Какие этапы необходимо выполнить в подразделении за период?'");
										
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикПроизводстваПродукцииБезЗаказов");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие даты выпуска/запуска продукции?
										|Какой объем выпуска запланирован в подразделении?
										|Какие этапы необходимо выполнить в подразделении за период?'");
										
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГрафикПроизводстваПродукции2_2);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотр графика производства продукции.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикПроизводстваПродукцииПоЗаказам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие даты выпуска/запуска продукции?
										|Когда будут выполнены заказы?
										|Какой объем выпуска запланирован в подразделении?
										|Какие этапы необходимо выполнить в подразделении за период?'");
										
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеВыполненияЗаказовНаПроизводство);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЭффективностьСделокСКлиентами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какое количество сделок выиграно, проиграно или находится в работе?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЭффективностьСделок");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какое количество сделок выиграно, проиграно или находится в работе?
		|На какую потенциальную сумму продаж?'");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыпускПродукции);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка выпуска по подразделениям.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыпускПродукции");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какой объем выпуска в подразделениях?
											|Нет ли ошибок при оформлении документов выпуска?
											|Нет ли ошибок в отражении затрат по работам и полуфабрикатам?'");
											

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЗатрат);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты подразделений за период?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализПроизводственныхЗатрат");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты подразделений за период?
		|Какова структура затрат за период и остаток незавершенного производства?'");
	
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияВыпускаПродукцииОтГрафика);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПроизводство");
	ОписаниеВарианта.Описание = НСтр("ru= 'Оценка отклонений при выпуске продукции.'");
											
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклоненияВыпуска");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие отклонения при выпуске продукции?
											|На какую продукцию еще не оформлен выпуск?'");
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрТорговыхДокументов);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Список всех торговых документов'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.НастройкаСписка);
	ОтключитьОтчет(ОписаниеОтчета);
	
	//++ НЕ УТ
	ОтключитьОтчет(ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаПоступлениеМатериаловВПроизводство));
	ОтключитьОтчет(ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаРасходовНаПроизводство));
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве");
	//++ НЕ УТКА
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяТолькоУправлениеПроизводством21");
	//-- НЕ УТКА
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты производства по материалам, полуфабрикатам и работам?
										|Куда распределены затраты производства?
										|Каковы остатки материалов, полуфабрикатов в производстве?'");
	
	ОтключитьВариант = Истина;
	//++ НЕ УТКА
	ОтключитьВариант = Ложь;
	//-- НЕ УТКА
	Если ОтключитьВариант Тогда
		ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве21");
	Иначе
		ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве21");
		//++ НЕ УТКА
		ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяУправлениеПроизводством21и22");
		//-- НЕ УТКА
		ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты производства по материалам, полуфабрикатам и работам?
											 |Куда распределены затраты производства?
											 |Каковы остатки материалов, полуфабрикатов в производстве?'");
	КонецЕсли;
	
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводствеКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлановаяПотребностьВМатериалах);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПлановаяПотребностьВМатериалахКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасшифровкаКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлановаяПотребностьВПолуфабрикатах);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПлановаяПотребностьВПолуфабрикатахКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасшифровкаКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлановаяПотребностьВТрудовыхРесурсах);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Оценка потребности в трудовых ресурсах для исполнения планов производства.'");
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПлановыеТрудозатратыКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасшифровкаКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расшифровка");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлановаяПотребностьВВидахРЦ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Оценка потребности в видах РЦ для исполнения планов производства и сопоставление с доступностью для определения дефицита.'");
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расшифровка");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПлановаяПотребностьВВидахРЦКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасшифровкаКонтекст");
	//-- НЕ УТКА
	
	// Справки-расчеты и регистры налогового учета выводятся на специальных панелях
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНормированияРасходов); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетРезервыПоСомнительнымДолгам); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизации); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизационнойПремии); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетДолиНалоговойБазы); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетЗемельногоНалога); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаНаИмущество); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаНаПрибыль); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПостоянныхИВременныхРазниц); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПризнаниеРасходовПоОСПоступившимВЛизинг); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТранспортногоНалога); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТорговогоСбора); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТранспортныхРасходов); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаУСН); 
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрыНалоговогоУчета); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрНалоговогоУчетаФинРезультатовОтРеализацииАмортизируемогоИмущества); 
	ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрИнформацииОбОбъектеОС); 
	ОтключитьОтчет(ОписаниеОтчета); 
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрДоговоровЛизинга);  
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;  
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");  
	ОписаниеВарианта.Описание = НСтр("ru= 'Состояние расчетов по договорам лизинга.'"); 
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасчетыПоДоговоруЛизинга");
	
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаПоступленийПоНоменклатуре); 
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналУчетаРозничнойПродажиАлкогольнойПродукции);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Журнал учета объема розничной продажи алкогольной
		|и спиртосодержащей продукции.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Журнал учета объема розничной продажи алкогольной и спиртосодержащей продукции
		|Организация
		|Подразделение'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Склад'");
		
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроблемыПроверкиКонтрагентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проблемы, выявленные при проверке контрагентов сервисом ФНС.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Контрагент
		|Документ
		|ИНН
		|КПП
		|Проблема'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Контрагенты
		|Документы'");
		
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выявление и анализ расхождений между ТТН ЕГАИС и поступлением товаров.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Алкогольная продукция
		|ЕГАИС
		|ТТН'");
		
	//++ НЕ УТ
	// Отчеты по контролируемым сделкам необходимы только в помощнике.
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтролируемыеСделкиДляВключенияВУведомление);
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализУведомления);
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВзаимозависимыеЛицаКонтролируемыхСделок);
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПредметыКонтролируемыхСделок);
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СписокКонтролируемыхСделок);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТ

	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПооперационногоРасписания); 
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДиаграммаПооперационногоРасписания);
	ОписаниеОтчета.Описание = НСтр("ru = 'Просмотр и анализ пооперационного расписания производства в виде диаграммы Ганта.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'РабочийЦентр'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Подразделение
		|Маршрутный лист
		|Распоряжение'");
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаСостоянияВыполненияЗаказовПереработчикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровПереданныхПереработчикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПроизводствоНаСтороне");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каков остаток сырья и материалов у переработчиков?
	|Какая потребность в сырье и материалах у переработчиков?
	|Какой излишек/дефицит сырья и материалов у переработчиков?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СырьеИМатериалыУПепереработчиков");
	ОписаниеВарианта.Описание = НСтр("ru= 'Каков остаток сырья и материалов у переработчиков?
	|Какая потребность в сырье и материалах у переработчиков?
	|Какой излишек/дефицит сырья и материалов у переработчиков?'");
	
	//-- НЕ УТ
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхОУиБУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выявление отклонений данных оперативного учета
		|от данных регламентированного бухгалтерского учета.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаБезПодразделений");
	ОписаниеВарианта.Описание = НСтр("ru= 'Выявление отклонений данных оперативного учета
		|от данных регламентированного бухгалтерского учета.'");
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОперацийСДенежнымиСредствами);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольДенежныхСредствУПодотчетныхЛиц");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПлатежаНаСоответствие275ФЗ);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПаспортКонтракта);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СведенияОКооперации);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТ
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПередачаМатериаловПоЗаказу);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасходовПриУСН);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоСебестоимостиРасшифровка");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрочиеРасходыРасшифровка");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоАмортизацииРасшифровка");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоМатериаламРасшифровка");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ расходов для целей УСН по данным налогового учета для заполнения КУДиР
		|для организаций и индивидуальных предпринимателей на УСН.'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоСебестоимости");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ расходов по товарам для целей УСН.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеРасходы");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ прочих расходов для целей УСН.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоАмортизации");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ расходов по ОС и НМА для целей УСН.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоМатериалам");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ расходов по материалам для целей УСН.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация'");
		
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРаспределенияНДС);
	ОтключитьОтчет(ОписаниеОтчета);
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСостоянияНалоговогоУчетаПоНДС);
	ОтключитьОтчет(ОписаниеОтчета);
		
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль);
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТ
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхПартионногоУчетаИСебестоимости);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаДанныхПартионногоУчетаИСебестоимости");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сверка движений по регистрам партионного учета и движений по регистру себестоимости.'");
	
	//++ НЕ УТКА
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДиаграммаПроизводстваЗаказа);
	ОписаниеОтчета.Описание = НСтр("ru = 'Просмотр графика производства заказа в виде диаграммы Ганта.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Подразделение
		|Вид рабочего центра
		|Продукция
		|Полуфабрикат
		|Этап производства'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Заказ на производство'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДиаграммаПроизводстваПартииЗапуска);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДиаграммаСмежныхЭтаповПроизводства);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗагрузкаОборудованияПоМоделиГрафикаПроизводства);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПотребностьВМатериалахПоМоделиГрафикаПроизводства);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДиагностикаЭтапаПроизводства);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтруктураЗаказаНаПроизводство2_2);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БазаРаспределенияМатериаловИРабот);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	//-- НЕ УТКА
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыСхемыОбеспечения);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрПлатежей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗаявкиКОплате");
	ОписаниеВарианта.Описание = НСтр("ru='Реестр заявок, утвержденных к оплате.'");
	
	//++ НЕ УТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеСметКонтрактовСЗаказчиками);
	ОписаниеОтчета.Описание = НСтр("ru='Исполнение сметы контрактов по статьям калькуляции, рассчитываемое кассовым методом.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БазаРаспределенияПроизводственныхРасходов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	//-- НЕ УТ
	
	// 4D:ERP для Беларуси, ВладимирР, 13.12.2016 23:11:21
	// Настройка отчетов по БСО, задача №13557
	// {
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоУчетуБСО);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru= 'Ведомость по учету бланков строгой отчетности.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Склад
		|Физическое лицо
		|Номенклатура
		|Характеристика
		|Тип
		|Серия
		|Номер
		|Документы использования
		|Сумма'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Склад
		|Физическое лицо
		|Номенклатура
		|Тип
		|Серия'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДвиженияОстаткиБСО);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Движения и остатки БСО.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Основание
		|Наименование бланка первичных учетных документов
		|Серия
		|Номера бланков
		|Количество бланков'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Склад
		|Физическое лицо
		|Номенклатура
		|Тип
		|Серия'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСправкаБСО);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Карточка-справка БСО.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Дата
		|Основание (наименование документа и дата)
		|Получено
		|Израсходованно
		|Остаток'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Склад
		|Физическое лицо
		|Номенклатура
		|Тип
		|Серия'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПриходноРасходнаяКнигаБСО);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Приходно-расходная книга БСО.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Дата записи операции
		|От кого получено и кому выдано
		|Основание (наименование документа, номер и дата)
		|Количество бланков
		|Получено
		|Выдано
		|Списано
		|Остаток'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Склад
		|Физическое лицо
		|Номенклатура
		|Тип
		|Серия'");
	// }
	// 4D
	
КонецПроцедуры

// Содержит описания изменений имен вариантов отчетов. Используется
//   при обновлении информационной базы, в целях контроля ссылочной целостности
//   и для сохранения настроек варианта, сделанных администратором.
//
//   (см. подробнее ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов)
//
Процедура ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения) Экспорт
	
	ДобавитьИзменениеКлючей(Изменения, "ДебиторскаяЗадолженность", "ИнтервалыГоризонтально", "ДебиторскаяЗадолженность");
	ДобавитьИзменениеКлючей(Изменения, "ДебиторскаяЗадолженность", "ПоРасчетнымДокументам", "ДебиторскаяЗадолженностьПоРасчетнымДокументам");
	ДобавитьИзменениеКлючей(Изменения, "КредиторскаяЗадолженность", "ИнтервалыГоризонтально", "КредиторскаяЗадолженность");
	ДобавитьИзменениеКлючей(Изменения, "КредиторскаяЗадолженность", "ПоРасчетнымДокументам", "КредиторскаяЗадолженностьПоРасчетнымДокументам");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры", "Основной", "ВедомостьВЦенахНоменклатуры");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамОрганизаций", "ОстаткиТоваровПоВладельцамИПродавцам", "ДоступныеДляПродажиТоварыОрганизаций");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры", "Основной", "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "ПродажиСписок", "ПродажиПоПартнерам");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "АнализПродажПоПоставщикам", "ПродажиПоПоставщикам");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "АнализПродажПоБизнесРегионамДиаграмма", "АнализПродажПоБизнесРегионам");
	ДобавитьИзменениеКлючей(Изменения, "ДинамикаПоказателейРаботыТорговыхПредставителей", "Основной", "ДинамикаПоказателейТорговыхПредставителей");
	ДобавитьИзменениеКлючей(Изменения, "КарточкаРасчетовСКлиентами", "Основной", "КарточкаРасчетовСКлиентами");
	ДобавитьИзменениеКлючей(Изменения, "КарточкаРасчетовСПоставщиками", "Основной", "КарточкаРасчетовСПоставщиками");
	ДобавитьИзменениеКлючей(Изменения, "ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству", 
		"ВыполнениеЗаданийПоКоличествуВРазрезеТорговыхПредставителей", "ВыполнениеЗаданийПоПредставителям");
	ДобавитьИзменениеКлючей(Изменения, "ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству", 
		"ВыполнениеЗаданийПоКоличествуВРазрезеНоменклатуры", "ВыполнениеЗаданийПоНоменклатуре");
	ДобавитьИзменениеКлючей(Изменения, "РаспределениеТорговыхПредставителей", "Основной", "КалендарьВизитовТорговыхПредставителей");
	ДобавитьИзменениеКлючей(Изменения, "РеестрКредитовИДепозитов", "Основной", "РеестрДоговоровКредитовДепозитов");
	ДобавитьИзменениеКлючей(Изменения, "РеестрКредитовИДепозитов", "Горизонтальный", "РеестрДоговоровКредитовДепозитовГоризонтальный");
	ДобавитьИзменениеКлючей(Изменения, "СостояниеРасчетовСКлиентами", "Основной", "СостояниеРасчетовСКлиентами");
	ДобавитьИзменениеКлючей(Изменения, "СостояниеРасчетовСПоставщиками", "Основной", "СостояниеРасчетовСПоставщиками");
	ДобавитьИзменениеКлючей(Изменения, "ТоварныйКалендарь", "Основной", "ТоварныйКалендарь");
	ДобавитьИзменениеКлючей(Изменения, "УправленческийБаланс", "ПоОрганизациям", "УправленческийБаланс");
	
КонецПроцедуры

// Возвращает имя отчета как оно задано в конфигураторе
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета
//
// Возвращаемое значение:
//	Строка - имя отчета без слова "Отчет."
//
Функция ИмяОтчетаПоКлючуОбъекта(Форма) Экспорт
	Если Форма = Неопределено Тогда
		ИмяОтчета = Неопределено;
	Иначе
		Если ТипЗнч(Форма.НастройкиОтчета.ОтчетСсылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			ИмяОтчета = Форма.НастройкиОтчета.ОтчетСсылка.ИмяОбъекта;
		ИначеЕсли ТипЗнч(Форма.НастройкиОтчета.ОтчетСсылка) = Тип("Строка") Тогда
			ИмяОтчета = СтрЗаменить(Форма.НастройкиОтчета.ОтчетСсылка, "ВнешнийОтчет.", "");
		Иначе
			ИмяОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НастройкиОтчета.ОтчетСсылка, "Имя");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяОтчета;
КонецФункции

// Отключает указанный отчет со всеми его вариантами от механизма "Варианты отчетов".
//
// Параметры:
//  ОписаниеОтчета - СтрокаДереваЗначений - Передается "как есть" из ВариантыОтчетов.ОписаниеОтчета().
//
Процедура ОтключитьОтчет(ОписаниеОтчета) Экспорт
	
	ОписаниеОтчета.Включен = Ложь;
	
КонецПроцедуры

// Отключает указанный вариант отчета от механизма "Варианты отчетов".
//
// Параметры:
//  Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//  ОписаниеОтчета - СтрокаДереваЗначений - Передается "как есть" из ВариантыОтчетов.ОписаниеОтчета().
//  КлючВарианта   - Строка - имя варианта отчета
//
Процедура ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, КлючВарианта) Экспорт
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, КлючВарианта);
	
	ОписаниеВарианта.Включен = Ложь;
	
КонецПроцедуры

// Устанавливает важность для указанного варианта отчета в указанной подсистеме
//
// Параметры:
//  ОписаниеОтчета - СтрокаДереваЗначений - Передается "как есть" из ВариантыОтчетов.ОписаниеОтчета().
//  Важность - Строка
//               	|- ""        - Вывод отчета в своей группе обычным шрифтом.
//               	|- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               	|- "СмТакже" - Вывод отчета в группе "См. также".
//  Подсистема   - Метаданные.Подсистема - если подсистема не указана, то для всех подсистем варианта
//
Процедура УстановитьВажностьВариантаОтчета(ОписаниеВарианта, Важность, Подсистема = Неопределено) Экспорт
	
	Если ВажностьУказанаВерно(Важность) Тогда
		Размещение = ОписаниеВарианта.Размещение.Получить(Подсистема);
		
		Если Не Размещение = Неопределено Тогда
			ОписаниеВарианта.Размещение.Вставить(Подсистема, Важность);
		Иначе
			Для Каждого Размещение Из ОписаниеВарианта.Размещение Цикл 
				ОписаниеВарианта.Размещение.Вставить(Размещение.Ключ, Важность);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет строку на содержание параметров важности
//
// Параметры:
//  Важность   - (Строка)
//
// Возвращаемое значение: 
//  Булево   - Истина, если переданная строка равна одному из значений:
//               	|- ""        - Вывод отчета в своей группе обычным шрифтом.
//               	|- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               	|- "СмТакже" - Вывод отчета в группе "См. также".
//             Ложь, в ином случае
//
Функция ВажностьУказанаВерно(Важность)
	
	Возврат ПустаяСтрока(Важность) Или Важность = "Важный" Или Важность = "СмТакже";
	
КонецФункции

Процедура ДобавитьИзменениеКлючей(Изменения, ИмяОтчета, СтароеИмяВарианта, АктуальноеИмяВарианта)
	
	Изменение = Изменения.Добавить();
	
	Изменение.Отчет 				= Метаданные.Отчеты[ИмяОтчета];
	Изменение.СтароеИмяВарианта 	= СтароеИмяВарианта;
	Изменение.АктуальноеИмяВарианта = АктуальноеИмяВарианта;
	
КонецПроцедуры

// Добавляет или удаляет подсистему из размещений варианта отчета.
//
// Параметры:
//	Размещение - размещение варианта отчета, подробнее см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
//	Дествие - Строка - "Удалить" или "Вставить"
//	ИмяПодсистемы - Строка - имя подсистемы
//		подчиненные подсистемы разделяются ".",	служебные слова "Подсистема" или "Подсистемы" указывать не нужно
//
Процедура ИзменитьРазмещениеВариантаОтчета(Размещение, Действие, ИмяПодсистемы) Экспорт
	
	Подсистема = ОбщегоНазначенияУТ.ПодсистемаПоИмени(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат; // нет такой подсистемы в метаданных
	КонецЕсли;
	
	Если Действие = "Удалить" Тогда
		Размещение.Удалить(Подсистема);
	ИначеЕсли Действие = "Вставить" Тогда
		Размещение.Вставить(Подсистема);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПодменюОтчеты

#Область ABCXYZАнализНоменклатуры

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Функция ДобавитьКомандуABCXYZАнализНоменклатуры(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ABCXYZАнализНоменклатуры) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ABCXYZАнализНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'ABC/XYZ-анализ номенклатуры'");
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.ABCXYZАнализНоменклатуры";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования",     "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область АнализПричинОтменыЗаказовПоставщикамПоДокументу

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Анализ причин отмены'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область АнализРасхожденийПриПоступленииАлкогольнойПродукции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВНакладную(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расхождения при поступлении ТТН ЕГАИС'");
		КомандаОтчет.Порядок       = 1;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ВестиСведенияДляДекларацийАлкоВРознице";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "АнализРасхожденийПриПоступленииАлкогольнойПродукцииНакладная");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализРасхожденийПриПоступленииАлкогольнойПродукции.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расхождения при поступлении ТТН ЕГАИС'");
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ВестиСведенияДляДекларацийАлкоВРознице";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "АнализРасхожденийПриПоступленииАлкогольнойПродукцииТТН_ЕГАИС");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти 

#Область АнализЦенПоставщиков

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализЦенПоставщиков) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализЦенПоставщиков.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Анализ цен'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "АнализЦенПоставщиков");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ВедомостьПоТоварамНаСкладах

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПоПересчетуТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Товары в процессе отгрузки'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ТоварыВПроцессеОтгрузки");
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьОрдернуюСхемуПриОтгрузке,ИспользоватьСтатусыПеремещенийТоваров,ИспользоватьСтатусыРеализацийТоваровУслуг,ИспользоватьСтатусыСборокТоваров";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтгружаемыеТоварыПоПересчетуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОтгружаемыеТоварыПоПересчетуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияТовара(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Движения товара на складах'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ДвиженияТовара");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеУсловийСоглашенийСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВыполнениеУсловийСоглашенийСКлиентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Выполнение регулярных условий'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыполнениеУсловийСоглашенийСКлиентами");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВыполнениеУсловийСоглашенийСКлиентамиПоПартнеру(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Выполнение регулярных условий соглашений'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыполнениеУсловийСоглашенийСКлиентамиПоПартнеру");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ВыручкаИСебестоимостьПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Продажи'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Продажи");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоЗаказу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Продажи по заказу'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоЗаказу");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПродажиПоЗаказуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПродажиПоЗаказуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоСегменту(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Продажи по сегменту'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоСегменту");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СегментПартнеров");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СтруктураПодчиненности

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СтруктураПодчиненности) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СтруктураПодчиненности";
		КомандаОтчет.Идентификатор = Метаданные.ОбщиеФормы.СтруктураПодчиненности.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Связанные документы'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Картинка      = БиблиотекаКартинок.СтруктураПодчиненности;
		КомандаОтчет.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.S, Ложь, Истина, Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции
#КонецОбласти

#Область ВзаимодействияПоКонтакту

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВзаимодействияПоКонтакту(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.ЖурналыДокументов.Взаимодействия.Формы.ФормаСпискаПараметрическая) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Обработчик                  = "МенюОтчетыУТКлиент.ВзаимодействияПоКонтакту";
		КомандаОтчет.Идентификатор               = Метаданные.ЖурналыДокументов.Взаимодействия.Формы.ФормаСпискаПараметрическая.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Взаимодействия'");
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции         = "ИспользоватьПочтовыйКлиент";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СегментыПартнера

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСегментыПартнера(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.ЖурналыДокументов.Взаимодействия.Формы.ФормаСпискаПараметрическая) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Обработчик                  = "МенюОтчетыУТКлиент.СегментыПартнера";
		КомандаОтчет.Идентификатор               = Метаданные.РегистрыСведений.ПартнерыСегмента.Формы.СегментыПартнераПараметрическая.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Сегменты'");
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции         = "ИспользоватьСегментыПартнеров";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ДвиженияДокумента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДвиженияДокумента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДвиженияДокумента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Движения документа'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "НеБазоваяВерсия";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияЗаказов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДвиженияДокумента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДвиженияДокумента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Движения документа'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьОтчетДвиженияЗаказов";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ДосьеПартнера

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДосьеПартнера(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеПартнера) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
		Представление = ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru = 'Досье контрагента по данным программы'"), НСтр("ru = 'Досье партнера'"));
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДосьеПартнера.ПолноеИмя();
		КомандаОтчет.Представление = Представление;
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ЗначенияНефинансовыхПоказателей

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПоНефинансовомуПоказателю(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЗначенияНефинансовыхПоказателей) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ЗначенияНефинансовыхПоказателей.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Значения показателя'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ЗначенияНефинансовогоПоказателя");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТКА
#Область ИспользованиеСчетовИСубконтоМеждународныйУчет

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуИспользованиеСчетаМеждународногоУчета(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ИспользованиеСчетовИСубконтоМеждународныйУчет) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет")
			И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ИспользованиеСчетовИСубконтоМеждународныйУчет.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Использование счета'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ИспользованиеСчетаКонтекстныйОтчет");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ИспользованиеСчетаКонтекстныйОтчет");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ИспользованиеСчетаКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область КарточкаПартииПоВидамНалогообложения

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаПартииПоВидамНалогообложения(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаПартииПоВидамНалогообложения) 
			И ПолучитьФункциональнуюОпцию("ФормироватьОтчетностьПоНДС") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаПартииПоВидамНалогообложения.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка партии по видам налогообложения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовПоПереданнойВозвратнойТаре

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовПоПереданнойВозвратнойТаре(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов по таре'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМногооборотнуюТару";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовПоПринятойВозвратнойТаре

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов по таре'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМногооборотнуюТару";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСКлиентом(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов с клиентами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентом");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов с клиентами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовСПоставщиками

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСПоставщиком(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов с поставщиками'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщиком");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка расчетов с поставщиками'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщикомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтактнаяИнформацияПоПартнерам(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтактнаяИнформация) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтактнаяИнформация.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контактная информация'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРолиКонтактныхЛицПартнеров";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции


// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтактнаяИнформацияКонтактныхЛиц(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтактнаяИнформация) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтактнаяИнформация.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контактная информация контактных лиц'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРолиКонтактныхЛицПартнеров";
		КомандаОтчет.ПараметрыФормы.Вставить("ГруппироватьПоПартнеру", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область КонтрольПередачиПродукцииДавальцу

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПередачиПродукции(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачиПродукцииДавальцу) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачиПродукцииДавальцу.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль передачи'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПередачиПродукцииДавальцуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТ
#Область КонтрольПередачиСырьяИМатериаловПереработчику

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПередачиСырьяИМатериалов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачиСырьяИМатериаловПереработчику) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачиСырьяИМатериаловПереработчику.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль передачи сырья и материалов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПередачиСырьяИМатериаловПереработчикуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область КонтрольПередачТоваровМеждуОрганизациями

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольВозвратовТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
			//++ НЕ УТ
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			//-- НЕ УТ
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль возвратов товаров'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеВозвратовТоваровКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПередачТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
			//++ НЕ УТ
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			//-- НЕ УТ
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль передач товаров'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеПередачТоваровКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформленияОтчетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
			//++ НЕ УТ
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			//-- НЕ УТ
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оформление отчетов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеОтчетовПоКомиссииКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область КонтрольПоставкиПродукцииПереработчиком

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПоставкиПродукции(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПоставкиПродукцииПереработчиком) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПоставкиПродукцииПереработчиком.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль поставки продукции'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПоставкиПродукцииПереработчикомКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТКА
#Область КонтрольПоставкиСырьяИМатериаловДавальцем

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПоставкиСырьяИМатериалов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПоставкиСырьяИМатериаловДавальцем) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПоставкиСырьяИМатериаловДавальцем.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль поставки'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПоставкиСырьяИМатериаловДавальцемКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область ЛимитыРасходаДенежныхСредств

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуЛимитыРасходаДенежныхСредств(КомандыОтчетов) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредств") Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств)
			//++ НЕ УТ
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование")
			//-- НЕ УТ
			Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Идентификатор = Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru = 'Лимиты расхода ДС'");
			КомандаОтчет.СписокФорм = "ФормаДокумента";
			КомандаОтчет.Порядок       = 50;
			КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
			КомандаОтчет.ФункциональныеОпции = "";
			КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ЛимитыРасходаДенежныхСредствКонтекст");
			КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//++ НЕ УТ
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования)
		И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Лимиты расхода ДС'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ИспользованияЛимитовРасходаДенежныхСредствКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	//-- НЕ УТ

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область МатериалыВЭксплуатации

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуМатериалыВЭксплуатации(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.МатериалыВЭксплуатации) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.МатериалыВЭксплуатации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'ТМЦ в эксплуатации'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМатериалыВЭксплуатацииКонтекст";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТМЦВЭксплуатацииКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ОборотнаяВедомостьБюджетирования

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОборотнаяВедомостьБюджетированияПоСтатьеБюджетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОборотнаяВедомостьБюджетирования) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОборотнаяВедомостьБюджетирования.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оборотная ведомость'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОборотнаяВедомостьПоСтатьеБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТ
#Область ОборотноСальдоваяВедомостьБюджетирования

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОборотноСальдоваяВедомостьБюджетированияПоПоказателюБюджетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОборотноСальдоваяВедомостьБюджетирования) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОборотноСальдоваяВедомостьБюджетирования.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оборотно-сальдовая ведомость'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОборотноСальдоваяВедомостьПоПоказателюБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ОстаткиТоваровОрганизаций

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиТоваровОрганизаций(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиТоваровОрганизаций) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
				ИЛИ ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОстаткиТоваровОрганизаций.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Остатки товаров организаций'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область ПередачаМатериаловПоЗаказу

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПередачаМатериаловПоЗаказу(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПередачаМатериаловПоЗаказу) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПередачаМатериаловПоЗаказу.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Передача материалов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПередачаМатериаловПоЗаказуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПередачаМатериаловПоЗаказуМЛ(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПередачаМатериаловПоЗаказу) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПередачаМатериаловПоЗаказу.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Передача материалов по заказу'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПередачаМатериаловПоМаршрутномуЛистуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль движения продукции и материалов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводстваКонекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область ОтклонениеЗаказаФактаОтКалькуляции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОтклоненияРасходов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОтклонениеЗаказаФактаОтКалькуляции) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОтклонениеЗаказаФактаОтКалькуляции.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Отклонения расходов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ЗаказКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область ОтклоненияОтУсловийЗакупок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Отклонения от условий закупок'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОтклоненияОтУсловийПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОтклоненияОтУсловийПродаж(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОтклоненияОтУсловийПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОтклоненияОтУсловийПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Отклонения от условий продаж'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента,ФормаСписка";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОформлениеИзлишковНедостачТоваров

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформление(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оформление'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформлениеПересчет(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оформление'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОценкаРентабельностиПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОценкаРентабельностиПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОценкаРентабельностиПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОценкаРентабельностиПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оценка рентабельности продажи'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		Если Не ИспользоватьРучныеСкидкиВПродажах
			И Не ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиБезСкидокКонтекст";
		ИначеЕсли ИспользоватьРучныеСкидкиВПродажах И Не ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиТолькоРучныеСкидкиКонтекст";
		ИначеЕсли Не ИспользоватьРучныеСкидкиВПродажах И ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиТолькоАвтоСкидкиКонтекст";
		Иначе
			КлючВарианта = "ОценкаРентабельностиПродажиКонтекст";
		КонецЕсли;
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область ОшибкиНастройкиШаблоновПроводок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОшибкиНастройкиШаблоновПроводок(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОшибкиНастройкиШаблоновПроводок) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОшибкиНастройкиШаблоновПроводок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ошибки настройки шаблонов проводок'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область ОшибкиУточненияСчетов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОшибкиУточненияСчетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОшибкиУточненияСчетов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОшибкиУточненияСчетов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ошибки уточнения счетов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область ПересеченияСегментаНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПересеченияСегментаНоменклатурыПересеченияСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПересеченияСегментаНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПересеченияСегментаНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Пересечения сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСегментыНоменклатуры";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПересеченияСегментаПартнеров

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПересеченияСегментаПартнеровПересеченияСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПересеченияСегментаПартнеров) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПересеченияСегментаПартнеров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Пересечения сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область ПлановаяПотребностьВВидахРЦ

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПотребностьВВидахРЦ(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПлановаяПотребностьВВидахРЦ) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПлановаяПотребностьВВидахРЦ.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Потребность в видах РЦ'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПлановаяПотребностьВВидахРЦКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПлановаяПотребностьВВидахРЦКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТ
#Область ПлановаяПотребностьВМатериалах

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПотребностьВМатериалах(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПлановаяПотребностьВМатериалах) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПлановаяПотребностьВМатериалах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Потребность в материалах'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПлановаяПотребностьВМатериалахКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПлановаяПотребностьВМатериалахКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТКА
#Область ПлановаяПотребностьВПолуфабрикатах

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПотребностьВПолуфабрикатах(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПлановаяПотребностьВПолуфабрикатах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПлановаяПотребностьВПолуфабрикатах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Потребность в полуфабрикатах'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПлановаяПотребностьВПолуфабрикатахКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПлановаяПотребностьВПолуфабрикатахКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТ
#Область ПлановаяПотребностьВТрудовыхРесурсах

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПотребностьВТрудовыхРесурсах(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПлановаяПотребностьВТрудовыхРесурсах) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПлановаяПотребностьВТрудовыхРесурсах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Потребность в трудовых ресурсах'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПлановыеТрудозатратыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПлановыеТрудозатратыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ПланФактныйАнализКредитовИДепозитов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПланФактныйАнализДоговора(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'План-фактный анализ'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПланФактныйАнализКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПримененныеСкидкиВДокументе

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПримененныеСкидки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПримененныеСкидкиВДокументе) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПримененныеСкидкиВДокументе.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Примененные скидки'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ПроверкаСвязейПоказателейБюджетов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПроверкаСвязейПоказателейБюджетовПоПоказателюБюджетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПроверкаСвязейПоказателейБюджетов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПроверкаСвязейПоказателейБюджетов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Проверить настройку связей'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПроверкаСвязейПоказателяБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область РасчетыСПартнерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьРасчетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСПартнерами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РасчетыСПартнерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ведомость расчетов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область РеестрДоговоровЛизинга

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРасчетыПоДоговору(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РеестрДоговоровЛизинга) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РеестрДоговоровЛизинга.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расчеты по договору'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "РасчетыПоДоговоруЛизинга");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ НЕ УТ
#Область РезультатРаботыПравилПолученияФактическихДанных

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатРаботыПравилПолученияФактическихДанныхПоСтатьеБюджетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результат работы правил'");
		КомандаОтчет.СписокФорм = "ФормаОбъекта,ФормаСпискаКонтекстСтатьяБюджетов";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоСтатьеБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "РезультатРаботыПравилПоСтатьеБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатРаботыПравилПолученияФактическихДанныхПоПоказателюБюджетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результат работы правил'");
		КомандаОтчет.СписокФорм = "ФормаОбъекта,ФормаСпискаКонтекстПоказательБюджетов";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоПоказателюБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "РезультатРаботыПравилПоПоказателюБюджетов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область РезультатыСогласованияЗакупки

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗакупкиПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗакупки) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗакупки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗакупкиПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗакупки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗакупки) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗакупки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗакупки");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияПродажи

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаказаКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеЗаказовКлиентов";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаказаКлиента");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияКоммерческогоПредложения(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеКоммерческихПредложений";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияКоммерческогоПредложения");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеЗаказовКлиентов,ИспользоватьВнутреннееСогласованиеКоммерческихПредложений,ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияПродажи");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияСоглашенияСКлиентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияСоглашенияСКлиентами");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияЦенНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЦенНоменклатурыПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЦенНоменклатуры";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЦенНоменклатурыПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЦенНоменклатуры(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Результаты согласования'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЦенНоменклатуры";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЦенНоменклатуры");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СверкаРасчетовСПартнерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСверкаРасчетовСПартнерами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СверкаРасчетовСПартнерами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СверкаРасчетовСПартнерами";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СверкаРасчетовСПартнерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сверка расчетов с партнерами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СоставПродажи

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСоставПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СоставПродажи) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СоставПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состав продажи'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СоставПродажи");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СоставСегмента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСоставСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СоставСегмента) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СоставСегмента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состав сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ИмяФормыОтчета = "Отчет.СоставСегмента.Форма.ФормаОтчета";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСегментыНоменклатуры,ИспользоватьСегментыПартнеров";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеВыполненияДокументов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаявокНаВозврат(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СостояниеВыполненияРеализацииАкта";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказПереработчику(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область СостояниеВыполненияЗаказовНаПроизводство

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказа(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияЗаказовНаПроизводство) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияЗаказовНаПроизводство.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область СостояниеРасчетовСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКлиентом(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Задолженность клиентов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Задолженность клиентов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСКомиссионерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКомиссионерами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние расчетов с комиссионерами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомиссионера");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСКомитентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКомитентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКомитентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКомитентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние расчетов с комитентами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомитенту");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСПоставщиками

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСПоставщиком(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Задолженность поставщикам'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Задолженность поставщикам'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СправочноеРазмещениеНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРазмещениеНоменклатурыПоЯчейкам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Размещение номенклатуры по ячейкам'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СравнениеГрафиковКредитовИДепозитов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСравнениеПроизвольныхГрафиков(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СравнениеПроизвольныхГрафиков";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сравнение графиков'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область СравнениеКалькуляцииИРесурснойСпецификации

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСравнениеСПлановойКалькуляцией(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СравнениеКалькуляцииИРесурснойСпецификации) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СравнениеКалькуляцииИРесурснойСпецификации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Отклонения от плановой калькуляции'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СравнениеКалькуляцииИРесурснойСпецификацииКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область СтоимостьМатериаловИРаботСпецификации

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСтоимостьМатериаловИРабот(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СтоимостьМатериаловИРаботСпецификации) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СтоимостьМатериаловИРаботСпецификации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Стоимость материалов и работ'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область ТоварыВЯчейках

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыВЯчейках(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыВЯчейках) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыВЯчейках.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Товары в ячейках'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияТовараВЯчейках(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыВЯчейках) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыВЯчейках.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Движения товара в ячейках'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДвиженияТоваровВЯчейкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДвиженияТоваровВЯчейкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыКПоступлению

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыКПоступлению(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыКПоступлению) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыКПоступлению.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Выполнение приемки товаров'");
		
		КомандаОтчет.Порядок    = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаДокумента";
		
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ТоварыКПоступлениюПоРаспоряжению");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "СостояниеПриемкиКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования",     "СостояниеПриемкиКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыПереданныеНаКомиссию

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыПереданныеНаКомиссию(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыПереданныеНаКомиссию) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыПереданныеНаКомиссию.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Товары переданные на комиссию'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомиссионера");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТоварыПереданныеНаКомиссию");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ТоварыПринятыеНаКомиссию

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыПринятыеНаКомиссию(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыПринятыеНаКомиссию) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыПринятыеНаКомиссию.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Товары, принятые на комисию'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомитенту");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТоварыПринятыеНаКомиссию");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УправленческийБаланс

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаАктиваПассива(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОборотноСальдоваяВедомостьАктивовПассивов) 
			И ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОборотноСальдоваяВедомостьАктивовПассивов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка актива/пассива'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "НеБазоваяВерсия";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КарточкаАктиваПассива");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "КонтекстныйОтчетСтатьиАктиваПассива");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УсловияЗакупок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияЗакупок(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Условия закупок'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияЗакупок");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияЗакупокПоПоставщику(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Условия закупок по поставщику'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст,ИспользоватьДанныеПоставщикаИлиКонкурентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияЗакупокПоПоставщику");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УсловияПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияПродаж(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияПродаж) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Условия продаж'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияПродаж");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияПродажПоПартнеру(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияПродаж) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Условия продаж клиенту'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияПродажПоПартнеру");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область ВнеоборотныеАктивыМеждународныйУчет

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаНМАМеждународныйУчет(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаНМАМеждународныйУчет) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаНМАМеждународныйУчет.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка НМА (международный учет)'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента, ФормаСписка";
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМеждународныйФинансовыйУчет";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КарточкаНМАМеждународныйУчет");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаОСМеждународныйУчет(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаОСМеждународныйУчет) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаОСМеждународныйУчет.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка ОС (международный учет)'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента, ФормаСписка";
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМеждународныйФинансовыйУчет";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КарточкаОСМеждународныйУчет");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСравнениеНМА(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СравнениеНМА) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СравнениеНМА.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сравнение НМА в бухгалтерском и международном учете'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента, ФормаСписка";
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМеждународныйФинансовыйУчет";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СравнениеНМА");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСравнениеОС(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СравнениеОС)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СравнениеОС.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сравнение ОС в регламентированном и международном учете'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента, ФормаСписка";
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМеждународныйФинансовыйУчет";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СравнениеОС");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаОбъектаЭксплуатации(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаОбъектаЭксплуатации) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаОбъектаЭксплуатации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Карточка объекта эксплуатации'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента, ФормаСписка";
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьУправлениеРемонтами";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КарточкаОбъектаЭксплуатации");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА

#Область Производство

//++ НЕ УТ

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуБазаРаспределенияПрочихПроизводственныхРасходов(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.БазаРаспределенияПроизводственныхРасходов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.БазаРаспределенияПроизводственныхРасходов.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Распределение расходов'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента,ФормаСписка,ФормаРабочееМесто";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции         = "ПартионныйУчетВерсии22";
		КомандаОтчет.ПроверкаПроведенияПередОтчетом = Истина;
		КомандаОтчет.ВыполнятьЗаписьВФорме          = Истина;
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "РаспределениеРасхода");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//-- НЕ УТ

//++ НЕ УТКА

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуБазаРаспределенияМатериаловИРабот(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.БазаРаспределенияМатериаловИРабот) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.БазаРаспределенияМатериаловИРабот.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Распределение материала (работы)'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента,ФормаЭлемента,ФормаСписка,ФормаРаспределениеМатериаловИРабот";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции         = "ИспользоватьУправлениеПроизводством2_2";
		КомандаОтчет.ПроверкаПроведенияПередОтчетом = Истина;
		КомандаОтчет.ВыполнятьЗаписьВФорме          = Истина;
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "РаспределениеМатериала");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуГрафикПроизводстваЗаказа(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиаграммаПроизводстваЗаказа)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.ДиаграммаПроизводстваЗаказа.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'График производства'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента, ФормаСписка, УправлениеОчередьюЗаказов";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДиагностикаГрафикаЭтапаПроизводства(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиагностикаЭтапаПроизводства)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.ДиагностикаЭтапаПроизводства.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Диагностика графика'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента, ФормаСписка, Диспетчирование";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСмежныеЭтапыПроизводства(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиаграммаСмежныхЭтаповПроизводства)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.ДиаграммаСмежныхЭтаповПроизводства.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'Смежные этапы'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента, ФормаСписка, Диспетчирование";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуГрафикПартииЗапуска(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиаграммаПроизводстваПартииЗапуска)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.ДиаграммаПроизводстваПартииЗапуска.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'График партии запуска'");
		КомандаОтчет.СписокФорм                  = "ФормаДокумента, ФормаСписка, Диспетчирование";
		КомандаОтчет.Порядок                     = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти


#КонецОбласти

#Область КомандыПодменюОбработки

#Область СбалансированностьПланов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСбалансированностьПланов(КомандыОтчетов) Экспорт
	
	//++ НЕ УТ
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СбалансированностьПлановУП) 
			И (    ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж")
			   ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства")
			   ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СбалансированностьПлановУП.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сбалансированность планов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	//-- НЕ УТ
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СбалансированностьПлановУТ) 
			И (    ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж")
			   ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СбалансированностьПлановУТ.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сбалансированность планов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область КонтрольПлатежаНаСоответствие275ФЗ

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПлатежа275ФЗ(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПлатежаНаСоответствие275ФЗ) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПлатежаНаСоответствие275ФЗ.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль платежа на соответствие 275-ФЗ'");
		КомандаОтчет.СписокФорм    = "ФормаДокумента";
		КомандаОтчет.Порядок       = 65;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ПоддержкаПлатежейВСоответствииС275ФЗ";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПаспортКонтракта

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПаспортКонтракта(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПаспортКонтракта) 
		И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		МетаданныеОтчета = Метаданные.Отчеты.ПаспортКонтракта;
		
		КомандаОтчет.Идентификатор = МетаданныеОтчета.ПолноеИмя();
		КомандаОтчет.Представление = МетаданныеОтчета.Синоним;
		КомандаОтчет.Порядок       = 10;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ПоддержкаПлатежейВСоответствииС275ФЗ";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПаспортКонтракта" + Новый УникальныйИдентификатор());
		КомандаОтчет.СписокФорм = "ФормаЭлемента,ФормаСпискаПродажи,ФормаСпискаЗакупки";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СведенияОКооперации

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСведенияОКооперацииПриложение1(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СведенияОКооперации) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СведенияОКооперации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сведения о кооперации (Приложение 1)'");
		КомандаОтчет.Порядок       = 40;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ПоддержкаПлатежейВСоответствииС275ФЗ";
		КомандаОтчет.ПараметрыФормы.Вставить("Приложение1", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Приложение1" + Новый УникальныйИдентификатор());
		КомандаОтчет.СписокФорм = "ФормаЭлемента,ФормаСпискаПродажи";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСведенияОКооперацииПриложения2и3(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СведенияОКооперации) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СведенияОКооперации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Сведения о кооперации (Приложения 2 и 3)'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ПоддержкаПлатежейВСоответствииС275ФЗ";
		КомандаОтчет.ПараметрыФормы.Вставить("Приложения2и3", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Приложения2и3" + Новый УникальныйИдентификатор());
		КомандаОтчет.СписокФорм = "ФормаЭлемента,ФормаСпискаПродажи";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Контроль выданных подотчетному лицу авансов'");
		КомандаОтчет.СписокФорм    = "ФормаДокумента";
		КомандаОтчет.Порядок       = 70;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПоЗаявкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОплатаЗаявок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОплатаЗаявок(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Оплата заявок на расходование денежных средств'");
		КомандаОтчет.СписокФорм    = "ФормаДокумента";
		КомандаОтчет.Порядок       = 60;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СостояниеОбеспечения

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеОбеспеченияСпискаЗаказовКлиента(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспечения) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Обработки.СостояниеОбеспечения.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние обеспечения'");
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВедомостьПоТоварамОрганизаций

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьПоНоменклатуреОрганизаций(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Движения товара в организациях'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВедомостьПоНоменклатуреОрганизаций");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьНесколькоОрганизаций";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВедомостьПоСериямНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьПоСериямТовара(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Движения по сериям товара'");
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.ВедомостьПоСериямТовара";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВедомостьПоСериямТовара");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоСериямНоменклатурыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ВедомостьПоСериямНоменклатурыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоНоменклатуре(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru= 'Продажи номенклатуры'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОстаткиИДоступностьТоваров

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиИДоступность(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДоступностьТоваров)
		И НЕ ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОстаткиИДоступностьТоваров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Остатки и доступность'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ОстаткиИДоступность");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыНаСкладахПоСрокамГодности

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиНоменклатурыПоСрокамГодности(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Остатки по срокам годности'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ОстаткиНоменклатурыПоСрокамГодности");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СостояниеВыполненияДокументов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеАссортимента(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеАссортимента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеАссортимента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние ассортимента'");
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеАссортимента");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОсновнойКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОсновнойКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДосьеКонтрагента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДосьеКонтрагента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеКонтрагента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДосьеКонтрагента.ПолноеИмя();
		
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
		Представление = ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru = 'Досье контрагента по данным сервиса 1С:Контрагент'"), НСтр("ru = 'Досье контрагента'"));
		
		КомандаОтчет.Представление = Представление;
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.ДосьеКонтрагента";
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#КонецОбласти
