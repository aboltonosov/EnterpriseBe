////////////////////////////////////////////////////////////////////////////////
// Производительность - модуль контроля производительности конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Начать замер времени на сервере при помощи подсистемы "Оценка производительности".
// Упрощает замеры длительных операций, обрабатывающих массивы однотипных данных.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//
// Возвращаемое значение:
//  Структура - используется в дальнейших вызовах процедур и функций этого модуля.
//              Описание полей доступно в комментариях функции СтруктураОписанияЗамера().
//  Неопределено - возвращается, если механизм оценки производительности отключен.
//
Функция НачатьЗамерВремени(КлючеваяОперация) Экспорт
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		Возврат СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецФункции

// Зафиксировать промежуточное время замера с учетом количества обработанных данных.
// Добавляет к длительности замера время обработки единицы данных.
//
// Может вызываться неограниченнок количество раз после НачатьЗамерВремени(),
// но не после вызова ЗакончитьЗамерВремени() с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если КоличествоДанных = 0 Тогда
			КоличествоДанных = 1;
		КонецЕсли;
		
		ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных);
		Интервал = ТекущееВремя - ОписаниеЗамера.ВремяНачала;
		УдельноеВремя = Интервал / КоличествоДанных;
		ОписаниеЗамера.СуммарноеВремя = ОписаниеЗамера.СуммарноеВремя + УдельноеВремя;
		ОписаниеЗамера.Вес = ОписаниеЗамера.Вес + КоличествоДанных;
		ОписаниеЗамера.ВремяНачала = ТекущееВремя;
	КонецЕсли;
	
КонецПроцедуры

// Завершить замер начатый НачатьЗамерВремени() и сохранить его результат.
// Добавляет к длительности замера время обработки единицы данных и сохраняет замер.
//
// Может вызываться однократно с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
		ВремяНачала = ОписаниеЗамера.ВремяНачала - ОписаниеЗамера.СуммарноеВремя;
		ДополнительнаяИнформация = Новый Соответствие;
		ДополнительнаяИнформация["Длительная"] = Истина;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(ОписаниеЗамера.КлючеваяОперация,
			ВремяНачала,
			ОписаниеЗамера.Вес,
			ДополнительнаяИнформация);
		ОписаниеЗамера.ЗамерЗавершен = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверить, что указано допустимое количество данных и замер не завершен.
// Если проверка не выполняется успешно, вызывается исключение с описанием проблемы.
//
// Параметры:
//  ОписаниеЗамера - Структура, полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных.
//
Процедура ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных)
	
	Если КоличествоДанных < 0 Тогда
		ТекстОшибки = НСтр("ru = 'Параметр ""КоличествоДанных"" должен быть положительным (текущее значение ""%1"").'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, КоличествоДанных);
	ИначеЕсли ОписаниеЗамера.ЗамерЗавершен Тогда
		ТекстОшибки = НСтр("ru = 'Замер ключевой операции ""%1"" уже завершен. Повторное использование описания этого замера запрещено.'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, ОписаниеЗамера.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Создать описание замера производительности.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//  ВремяНачала - Число - время начала замера с точностью до миллисекунд.
//
// Возвращаемое значение:
//  Структура:
//   КлючеваяОперация - СправочникСсылка.КлючевыеОперации или Строка, равно значению параметра КлючеваяОперация.
//   ВремяНачала      - Число - время начала замера с точностью до миллисекунд, равно значению параметра ВремяНачала.
//   СуммарноеВремя   - Число - время, накопленное при вызовах ЗафиксироватьЗамерВремени().
//   Вес              - Число - суммарное количество обработанных данных.
//   ЗамерЗавершен    - Булево - Ложь, означает, что замер только начат, а Истина (позже), что замер завершен.
//
Функция СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала)
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("КлючеваяОперация", КлючеваяОперация);
	СтруктураОписания.Вставить("ВремяНачала", ВремяНачала);
	СтруктураОписания.Вставить("СуммарноеВремя", 0.0);
	СтруктураОписания.Вставить("Вес", 0);
	СтруктураОписания.Вставить("ЗамерЗавершен", Ложь);
	
	Возврат СтруктураОписания;
	
КонецФункции

#КонецОбласти
