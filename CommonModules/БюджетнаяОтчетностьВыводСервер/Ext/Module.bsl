#Область ПрограммныйИнтерфейс

// Получает ячейки бюджета в соответствии с переданными параметрами
// 
// Параметры:
//	ДанныеЯчеек - ТаблицаЗначений - описание параметра
//	Измерения - Массив, Строка - коллекция имен измерений или название единственного измерения
//	НакопленныйОтбор - Структура - описание состава накапливаемых отборов
//	* Ключ - Строка - имя измерения
//	* Значение - ПроизвольноеЗначение - значение применяемого отбора
//	ИерархическийОтборПоЯчейкам - Булево - Истина, означает что будет применен отбор с учетом иерархии
//	Колонка - СписокЗначений, Неопределено - список колонок к выводу
//	Строка - СписокЗначений, Неопределено - список строк к выводу
//	ИндексыПоиска - Соответствие, Неопределено - описание параметра
//	* Ключ - Строка - имена колонок индекса через запятую
//	* Значение - Булево
//	ДобавлятьФлаг - Булево - признак добавления колонки в формате Флаг + <ИмяИзмерения>
//
// Возвращаемое значение:
//	Массив - массив строк, найденных в таблице ДанныеЯчеек
//		ЭлементМассива - СтрокаТаблицыЗначений
// 
Функция ПолучитьВыборкуЯчеек(ДанныеЯчеек, Измерения,
							НакопленныйОтбор, ИерархическийОтборПоЯчейкам, 
							Колонка = Неопределено, Строка = Неопределено,
							ИндексыПоиска = Неопределено, ДобавлятьФлаг = Ложь) Экспорт
	
	Если ИерархическийОтборПоЯчейкам Тогда
		
		ФинОтчеты = ФинансоваяОтчетностьСервер;
		Набор = Неопределено;
		СКД = ФинОтчеты.НоваяСхемаНаборОбъект("ДанныеЯчеек", Набор);
		ФинОтчеты.НовоеПолеНабора(Набор, "ОсновнойЭлемент");
		ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
		ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
		
		Если ТипЗнч(Измерения) = Тип("Массив") Тогда
			
			СписокИзмерений = Измерения;
			
		Иначе
			
			СписокИзмерений = Новый Массив;
			СписокИзмерений.Добавить(Измерения);
			
		КонецЕсли;
		
		Для Каждого ИмяИзмерения из СписокИзмерений Цикл
		
			Поле = ФинОтчеты.НовоеПолеНабора(Набор, ИмяИзмерения);
			ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
			ПолеУпорядочивания.Выражение = 
			"ВЫБОР
			|	КОГДА ЗначениеЗаполнено(" + ИмяИзмерения + ") ТОГДА
			|	0 ИНАЧЕ 1 КОНЕЦ";
			ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
			ПолеУпорядочивания.Выражение = ИмяИзмерения;
			ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			ПолеУпорядочивания.Автоупорядочивание = Истина;
		
		КонецЦикла;
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКД);
		
		Если Колонка <> Неопределено
			И ЗначениеЗаполнено(Колонка) Тогда
			
			ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВСписке;
			Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Колонка", Колонка);
			Отбор.ВидСравнения = ВидСравненияОтчета;
			
		КонецЕсли;
		
		Если Строка <> Неопределено
			И ЗначениеЗаполнено(Строка) Тогда
			
			ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВСписке;
			Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Строка", Строка);
			Отбор.ВидСравнения = ВидСравненияОтчета;
			
		КонецЕсли;
		
		ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "ОсновнойЭлемент", Истина);
		
		//Поиск с учетом индексов
		СтрокиВКоторыхСледуетИскать = НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Неопределено, Неопределено, НакопленныйОтбор, ИндексыПоиска);
		СтрокиВКоторыхСледуетИскать = ДанныеЯчеек.Скопировать(СтрокиВКоторыхСледуетИскать);
		
		Группировка = Неопределено;
		
		Для Каждого ИмяИзмерения из СписокИзмерений Цикл
			
			Порядок = Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Поле = Новый ПолеКомпоновкиДанных(ИмяИзмерения);
			
			Если Группировка = Неопределено Тогда
				Группировка = ФинОтчеты.НоваяГруппировка(Компоновщик.Настройки.Структура, ИмяИзмерения);
			Иначе
				ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяИзмерения);
			КонецЕсли;
			
			Если ДобавлятьФлаг Тогда
				ФинОтчеты.НовоеПолеНабора(Набор, "Флаг" + ИмяИзмерения);
				ФинОтчеты.НовоеПолеГруппировки(Группировка, "Флаг" + ИмяИзмерения);
			КонецЕсли;
			
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
		ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
		
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СКД, Компоновщик, Новый Структура("ДанныеЯчеек", СтрокиВКоторыхСледуетИскать));
		
		Возврат Результат;
		
	Иначе
		
		СтруктураОтбора = Неопределено;
		НайденныеСтроки = НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Колонка, Строка, НакопленныйОтбор, ИндексыПоиска, СтруктураОтбора);
		
		ОтборЯчейки = ОтборЯчейкиПоСтруктуреПоиска(СтруктураОтбора);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НайденнаяСтрока.ОтборЯчейки = ОтборЯчейки;
		КонецЦикла;
		
		Возврат НайденныеСтроки;
		
	КонецЕсли;
	
КонецФункции

#Область ПроцедурыИФункцииГенерацииБюджета

// Возвращает данные ячеек вида бюджета и параметры их вывода
//
// Параметры:
//	Параметры - Структура - См. Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент()
//
// Возвращаемое значение:
//	Структура - данные ячеек и параметры их вывода
//		* ДанныеЯчеек                     - ТаблицаЗначений - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ДанныеРасшифровки               - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* Результат                       - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ПараметрыВыводаВидаБюджета      - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* СтильУровней                    - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* ДеревоСтрокСпискаРедактирования - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//		* Примечания                      - Тип - См. ПолучитьДанныеДляБюджетногоОтчета()
//
Функция ДанныеЭкземпляраБюджета(Параметры) Экспорт
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	РежимФормирования = Параметры.РежимФормирования;
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, РежимФормирования, СтруктураПараметровВывода);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		СтруктураПараметровВывода.Вставить("КолонкиТаблиц", Результат.КолонкиТаблиц);
		
		РезультатРасчета.Вставить("ДанныеРасшифровки", Результат.ДанныеРасшифровки);
		РезультатРасчета.Вставить("Результат", Результат.ТабличныйДокумент);
		РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
		РезультатРасчета.Вставить("СтильУровней", Результат.СтильУровней);
		РезультатРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Результат.ДеревоСтрокСпискаРедактирования);
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			РезультатРасчета.Вставить("Примечания", Результат.Примечания);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииГенерацииБюджета

#Область ПолучениеДанныхБюджетногоОтчета

Функция ДанныеДляБюджетногоОтчета(Параметры) Экспорт
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Результат.ТабличныйДокумент);
	РезультатВыполнения.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	РезультатВыполнения.Вставить("ДанныеРасшифровки", Результат.ДанныеРасшифровки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ПоместитьДанныеДляБюджетногоОтчетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатВыполнения = ДанныеДляБюджетногоОтчета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Ключевая операция: "Бюджетирование.ВыводПолучениеДанныхДляБюджетногоОтчета"
//
Функция ПолучитьДанныеДляБюджетногоОтчета(ПараметрыДанных, РежимФормирования,
											СсылкаНаПараметрыВыводаВидаБюджета = Неопределено)
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("Бюджетирование.ВыводПолучениеДанныхДляБюджетногоОтчета");
	
	ВидБюджета = ПараметрыДанных.ВидБюджета;
	
	ПараметрыЭтаповРасчета = Новый Структура;
	Результат = Новый ТабличныйДокумент;
	ПродолжитьРасчет = Истина;
	
	#Область КонтрольЗаполненияВидаБюджета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
		ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаКонтрольЗаполненияВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеКонтрольПараметровВыводаВидаБюджета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
		ПараметрыЭтаповРасчета.Вставить("СсылкаНаПараметрыВыводаВидаБюджета", СсылкаНаПараметрыВыводаВидаБюджета);
		ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольПараметровВыводаВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		Производительность.ЗафиксироватьЗамерВремени(ОписаниеЗамера, 
			ПараметрыЭтаповРасчета.СтруктураОписанияОтчета.СтруктураЯчеек.Количество());
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеДанныхПоИсточникам
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("СКДДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("КэшДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеДанныхПоИсточникам(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		Производительность.ЗафиксироватьЗамерВремени(ОписаниеЗамера, 
			ПараметрыЭтаповРасчета.ДанныеИсточников.Количество());
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеКонтрольСтруктурыЯчеекСДанными
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольСтруктурыЯчеекСДанными(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		Производительность.ЗафиксироватьЗамерВремени(ОписаниеЗамера, 
			ПараметрыЭтаповРасчета.ДанныеЯчеек.Количество());
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПодготовкаПараметровВывода
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПодготовкаПараметровВывода(ПараметрыЭтаповРасчета, ПродолжитьРасчет);
		
		Производительность.ЗафиксироватьЗамерВремени(ОписаниеЗамера);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ВыводБюджетногоОтчета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаВыводБюджетногоОтчета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		ВысотаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ВысотаТаблицы;
		ШиринаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ШиринаТаблицы;
		
		Производительность.ЗафиксироватьЗамерВремени(ОписаниеЗамера, ВысотаТаблицы * ШиринаТаблицы);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ОформлениеБюджета
	Если ПродолжитьРасчет Тогда
		ВыводПолучениеДанныхДляБюджетногоОтчетаОформлениеБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		ВысотаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ВысотаТаблицы;
		ШиринаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ШиринаТаблицы;
		
		Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, ВысотаТаблицы * ШиринаТаблицы);
	КонецЕсли;
	#КонецОбласти 
	
	Возврат Результат;
	
КонецФункции

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаКонтрольЗаполненияВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	Если Не ЗначениеЗаполнено(ПараметрыЭтаповРасчета.ВидБюджета) Тогда
		Результат = Новый ТабличныйДокумент;
		ПродолжитьРасчет = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольПараметровВыводаВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	СсылкаНаПараметрыВыводаВидаБюджета = ПараметрыЭтаповРасчета.СсылкаНаПараметрыВыводаВидаБюджета;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
	Иначе
		Если СсылкаНаПараметрыВыводаВидаБюджета = Неопределено Тогда
			ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
		Иначе
			ПараметрыВыводаВидаБюджета = СсылкаНаПараметрыВыводаВидаБюджета;
		КонецЕсли;
	КонецЕсли;
	
	// Описание отчета - состав колонок таблицы данных.
	СтруктураКолонокТаблицыДанных	 = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных;
	
	// СтруктураОписанияОтчета содержит:
	// Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета.
	// Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений.
	СтруктураОписанияОтчета			 = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	Если Не СтруктураОписанияОтчета.ИсточникиДанных.Количество() Тогда
		
		РезультатРасчета = Новый Структура;
		РезультатРасчета.Вставить("КолонкиТаблиц", 						Неопределено);
		РезультатРасчета.Вставить("ДанныеЯчеек", 						Неопределено);
		РезультатРасчета.Вставить("ТабличныйДокумент", 					Новый ТабличныйДокумент);
		РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", 		Неопределено);
		РезультатРасчета.Вставить("СтильУровней", 						Неопределено);
		РезультатРасчета.Вставить("ДеревоСтрокСпискаРедактирования", 	Неопределено);
		
		Результат = РезультатРасчета;
		ПродолжитьРасчет = Ложь;
		
	КонецЕсли;
	
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("СсылкаНаПараметрыВыводаВидаБюджета", СсылкаНаПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеДанныхПоИсточникам(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	ПараметрыВыводаВидаБюджета = ПараметрыЭтаповРасчета.ПараметрыВыводаВидаБюджета;
	СтруктураОписанияОтчета = ПараметрыЭтаповРасчета.СтруктураОписанияОтчета;
	
	// СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц.
	СКДДанных						 = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	// Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета.
	ДеревоВывода					 = ПараметрыВыводаВидаБюджета.ДеревоВывода;
	КэшДанных						 = ПараметрыВыводаВидаБюджета.КэшДанных;
	
	// Получаем данные источников по СКД.
	ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, 
							СтруктураОписанияОтчета.ИсточникиДанных, СтруктураОписанияОтчета.СтруктураЯчеек, КэшДанных);
							
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("СКДДанных", СКДДанных);
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", ДанныеИсточников);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольСтруктурыЯчеекСДанными(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	СтруктураКолонокТаблицыДанных = ПараметрыЭтаповРасчета.СтруктураКолонокТаблицыДанных;
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	СтруктураОписанияОтчета = ПараметрыЭтаповРасчета.СтруктураОписанияОтчета;
	ДанныеИсточников = ПараметрыЭтаповРасчета.ДанныеИсточников;
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	КэшДанных = ПараметрыЭтаповРасчета.КэшДанных;
	
	// Получаем данные ячеек по источникам.
	ДанныеЯчеек = ПолучитьСтруктуруЯчеекСДанными(СтруктураКолонокТаблицыДанных, ПараметрыДанных,
													СтруктураОписанияОтчета, ДанныеИсточников,
													РежимФормирования, КэшДанных);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		Результат = Новый Структура("ДанныеЯчеек", ДанныеЯчеек);
		
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", ДанныеИсточников);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПодготовкаПараметровВывода(ПараметрыЭтаповРасчета, ПродолжитьРасчет)
		
	ДеревоВывода = ПараметрыЭтаповРасчета.ДеревоВывода;
	ДанныеЯчеек = ПараметрыЭтаповРасчета.ДанныеЯчеек;
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	СтруктураКолонокТаблицыДанных = ПараметрыЭтаповРасчета.СтруктураКолонокТаблицыДанных;
	КэшДанных = ПараметрыЭтаповРасчета.КэшДанных;
	СтруктураОписанияОтчета = ПараметрыЭтаповРасчета.СтруктураОписанияОтчета;
	
	// Выводим дерево в отчет.
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыВывода.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	ПараметрыВывода.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыВывода.Вставить("НачалоПериода", ПараметрыДанных.НачалоПериода);
	ПараметрыВывода.Вставить("КонецПериода", ПараметрыДанных.КонецПериода);
	ПараметрыВывода.Вставить("РежимФормирования", РежимФормирования);
	
	ПараметрыВывода.Вставить("ПредставленияИзмерений", ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, СтруктураКолонокТаблицыДанных));
	ПараметрыВывода.Вставить("ДанныеРасшифровки", Новый Соответствие);
	ПараметрыВывода.Вставить("КэшЗначенийАналитик", КэшДанных.КэшЗначенийАналитик);
	ПараметрыВывода.Вставить("ИндексыПоискаИзмерений", Новый Соответствие);
	ПараметрыВывода.Вставить("ПараметрыЯчеек", СтруктураОписанияОтчета.ПараметрыЯчеек);
	ПараметрыВывода.Вставить("СтруктураЯчеек", СтруктураОписанияОтчета.СтруктураЯчеек);
	ПараметрыВывода.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыВывода.Вставить("ПараметрыПериодов", ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных));
	ПараметрыВывода.Вставить("ПодчиненныеЭлементыВидаБюджета", СтруктураОписанияОтчета.ТаблицаПодчиненностиЭлементов);
	ПараметрыВывода.Вставить("ЗначенияПодстановки", ПолучитьЗначенияПодстановкиПоПараметрамДанных(РежимФормирования, ПараметрыДанных));
	ПараметрыВывода.Вставить("ВыводитьПримечания", Ложь);
	ПараметрыВывода.Вставить("ВыводитьНомераТаблиц", Ложь);
	
	КэшПараметровЕдиницИзмерения = ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	ПараметрыВывода.Вставить("КэшПараметровЕдиницИзмерения", КэшПараметровЕдиницИзмерения);
	
	КэшПараметровВалют = ПолучитьКэшПараметровВалют(ДанныеЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек, 
															ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета);
	ПараметрыВывода.Вставить("КэшПараметровВалют", КэшПараметровВалют);
	
	Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
		
		ДеревоСтрокСпискаРедактирования = Новый ДеревоЗначений;
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Строка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Представление");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Картинка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Уровень");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДТаблицы");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДГруппировки");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ЭтоАналитикаПрочее");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("РедактируемыеЗначения");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Расшифровка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ЭтоОбъединеннаяАналитика");
		
		ПараметрыВывода.Вставить("ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
		ПараметрыВывода.Вставить("СтильУровней", Новый Соответствие);
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			
			ПараметрыВыводаПримечаний = ПолучитьПараметрыВыводаПримечаний(СтруктураКолонокТаблицыДанных, ДанныеЯчеек, ДеревоВывода);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыВывода, ПараметрыВыводаПримечаний, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаВыводБюджетногоОтчета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ПараметрыВывода = ПараметрыЭтаповРасчета.ПараметрыВывода;
	ПараметрыВыводаВидаБюджета = ПараметрыЭтаповРасчета.ПараметрыВыводаВидаБюджета;
	
	// Вывод бюджетного отчета.
	ТабличныйДокументРезультат = ВывестиДанныеВОтчет(ПараметрыВывода);
	
	ПараметрыВыводаВидаБюджета.Вставить("ИндексыТаблицыДанныхЯчеек", ПараметрыВывода.ИндексыПоискаИзмерений);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеЯчеек", ПараметрыЭтаповРасчета.ДанныеЯчеек);
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокументРезультат);
	Результат.Вставить("ДанныеРасшифровки", ПараметрыВывода.ДанныеРасшифровки);
	
	Если (ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
			
		Результат.Вставить("ДеревоСтрокСпискаРедактирования", ПараметрыЭтаповРасчета.ДеревоСтрокСпискаРедактирования);
		Результат.Вставить("СтильУровней", ПараметрыВывода.СтильУровней);
		Результат.Вставить("КолонкиТаблиц", ПараметрыВывода.КолонкиТаблиц);
		
		Если ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			
			Результат.Вставить("Примечания", ПараметрыВывода.Примечания);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьРасчет = Истина;
		
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", ТабличныйДокументРезультат);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаОформлениеБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ТабличныйДокументРезультат = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат;
	ПараметрыВывода = ПараметрыЭтаповРасчета.ПараметрыВывода;
	ДеревоВывода = ПараметрыЭтаповРасчета.ДеревоВывода;
	
	ОформитьБюджет(ТабличныйДокументРезультат, ПараметрыВывода, ДеревоВывода);
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", ТабличныйДокументРезультат);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	
КонецПроцедуры

#КонецОбласти 

Процедура ПоместитьДанныеЭкземпляраБюджетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатРасчета = ДанныеЭкземпляраБюджета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры

// Производит расчета изменений в ячейках табличного документа экземпляра бюджета
// Ключевая операция: "Бюджетирование.ВыводПолучениеИзмененийЭкземпляраБюджета"
//
Функция ИзмененияЭкземпляраБюджета(Параметры) Экспорт
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("Бюджетирование.ВыводПолучениеИзмененийЭкземпляраБюджета");
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	
	РассчитанныеИзменения = ПолучитьИзмененияВЯчейкахРекурсивно(Параметры.ВидБюджета, 
											Параметры.НачалоПериода, Параметры.КонецПериода, 
											СтруктураПараметровВывода, Параметры,
											Параметры.ДанныеЯчеек);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Результат", РассчитанныеИзменения.Результат);
	РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
	РезультатРасчета.Вставить("ДанныеЯчеек", РассчитанныеИзменения.ДанныеЯчеек);
	
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера);
	
	Возврат РезультатРасчета;
	
КонецФункции

Процедура ПоместитьИзмененияЭкземпляраБюджетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатРасчета = ИзмененияЭкземпляраБюджета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьИзмененияВЯчейках(ВидБюджета, НачалоПериода, КонецПериода,
									ПараметрыВыводаВидаБюджета, ПараметрыДанных, ПредыдущиеДанныеЯчеек)
	
	ИндексыТаблицыДанныхЯчеек = ПараметрыВыводаВидаБюджета.ИндексыТаблицыДанныхЯчеек;
	
	//Описание отчета - состав колонок таблицы данных
	СтруктураКолонокТаблицыДанных	 = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных;
	
	//СтруктураОписанияОтчета содержит:
	//Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета
	//Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений
	СтруктураОписанияОтчета			 = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	//СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц
	СКДДанных						 = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	//Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета
	КэшДанных						 = ПараметрыВыводаВидаБюджета.КэшДанных;
		
	//Получаем данные ячеек по источникам
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	
	СтрокиОснования = Неопределено;
	МассивКПересчету = Новый Массив;
	
	Если Не СтруктураОписанияОтчета.НеТребуетРасчетаДанныхЯчеек Тогда
	
		//Получаем данные источников по СКД
		ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, 
								СтруктураОписанияОтчета.ИсточникиДанных, СтруктураОписанияОтчета.СтруктураЯчеек, КэшДанных);
	
		//таблица с развернутыми ячейками по данным, проходит итеративные циклы расчета формул
		ДанныеЯчеек = ПолучитьСтруктуруЯчеекСДанными(СтруктураКолонокТаблицыДанных, ПараметрыДанных,
													СтруктураОписанияОтчета, ДанныеИсточников,
													РежимФормирования, КэшДанных);
	
		ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных);
		
		Если ПараметрыДанных.Свойство("СтрокиОснования", СтрокиОснования) И ПараметрыДанных.Свойство("ТолькоРасчетные") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			
			СтруктураПоиска = Новый Структура("РасчетЗаполнение", "итог");
			ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, МассивКПересчету);
			
			Для Каждого СтрокаОтчета из СтрокиОснования Цикл
				СтруктураПоиска = Новый Структура("Строка", СтрокаОтчета);
				ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, МассивКПересчету);
			КонецЦикла;
		ИначеЕсли ПараметрыДанных.Свойство("СтрокиОснования") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			Для Каждого СтрокаОтчета из СтрокиОснования Цикл
				СтруктураПоиска = Новый Структура("Строка", СтрокаОтчета);
				ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, МассивКПересчету);
			КонецЦикла;
		ИначеЕсли ПараметрыДанных.Свойство("ТолькоРасчетные") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			СтруктураПоиска = Новый Структура("РасчетЗаполнение", "итог");
			ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, МассивКПересчету);
		Иначе
			НовыеДанныеЯчеек = ДанныеЯчеек;
		КонецЕсли;
				
		Если ПараметрыДанных.Свойство("ТолькоРасчетные")
			ИЛИ ПараметрыДанных.Свойство("СтрокиОснования") Тогда
			СтрокиКРасчету = Новый Массив;
			Для Каждого СтрокаДанных из ДанныеЯчеек Цикл
				НоваяСтрока = НовыеДанныеЯчеек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
						
				Если НоваяСтрока.ОсновнойЭлемент Тогда
					СтрокиКРасчету.Добавить(НоваяСтрока);
				КонецЕсли;				
			КонецЦикла;
		Иначе
			СтрокиКРасчету = НовыеДанныеЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
		КонецЕсли;
		
	Иначе
		
		ПредыдущиеДанныеЯчеек.Индексы.Очистить();
		НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
		Расшифровка = Неопределено;
		СтрокиКРасчету = Новый Массив;
		
		Если ПараметрыДанных.Свойство("Расшифровка", Расшифровка) Тогда
			СброситьФлагРасчетаУСвязанныхЯчеек(ПредыдущиеДанныеЯчеек, НовыеДанныеЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек, 
																		Расшифровка.Строка, Расшифровка.Колонка, МассивКПересчету);
		Иначе
			Для Каждого СтрокаДанныхЯчеек из ПредыдущиеДанныеЯчеек Цикл
				Если Не СтрокаДанныхЯчеек.ОсновнойЭлемент Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыЯчейки = СтруктураОписанияОтчета.ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
				Если ПараметрыЯчейки.РасчетЗаполнение <> "итог" Тогда
					Продолжить;
				КонецЕсли;
				ИндексСтроки = ПредыдущиеДанныеЯчеек.Индекс(СтрокаДанныхЯчеек);
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанСумма		= Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанКоличество	= Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанЗначение	= Ложь;
				МассивКПересчету.Добавить(СтрокаДанныхЯчеек);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
	РезультатИзменений = РассчитатьИзмененияВОтчете(СтруктураОписанияОтчета.ПараметрыЯчеек, ПредыдущиеДанныеЯчеек, 
										НовыеДанныеЯчеек, СтрокиКРасчету, МассивКПересчету, ПараметрыПериодов, ИндексыТаблицыДанныхЯчеек);
										
	ТаблицаИзменений = РезультатИзменений.ТаблицаИзменений;
	ИзмененияСвязанныхЯчеек = РезультатИзменений.ИзмененияСвязанныхЯчеек;
												
	Результат = Новый Структура("Результат, ДанныеЯчеек, ИзмененияСвязанныхЯчеек", ТаблицаИзменений, НовыеДанныеЯчеек, ИзмененияСвязанныхЯчеек);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияВЯчейкахРекурсивно(ВидБюджета, НачалоПериода, КонецПериода,
									ПараметрыВыводаВидаБюджета, ПараметрыДанных, ПредыдущиеДанныеЯчеек)

	Результат = ПолучитьИзмененияВЯчейках(ВидБюджета, НачалоПериода, КонецПериода,
									ПараметрыВыводаВидаБюджета, ПараметрыДанных, ПредыдущиеДанныеЯчеек);
									
	ПараметрыДанных.Вставить("Объект", ПараметрыДанных);
	ТаблицаИзмененийИтог = Результат.Результат;
	ДанныеЯчеек = Результат.ДанныеЯчеек;
	ИзмененияСвязанныхЯчеек = Результат.ИзмененияСвязанныхЯчеек;
	ТаблицаИзменений = ТаблицаИзмененийИтог; 
	ИменаОбластей = Новый Массив;
	ИменаОбластей.Добавить("ИмяОбластиСумма");
	ИменаОбластей.Добавить("ИмяОбластиКоличество");	
	ИменаОбластей.Добавить("ИмяОбластиЗначение");
	
	КоличествоПересчетовЯчеек = Новый Соответствие;
	
	МаксимумПересчетовЯчейки = 0;
	Сч = 0;
	
	Пока ИзмененияСвязанныхЯчеек.Количество() > 0 Цикл
		
		Сч = Сч + 1;
		Если МаксимумПересчетовЯчейки > 10 ИЛИ Сч > 10000 Тогда // Защита от зацикливания.
			ТекстОшибки = НСтр("ru = 'Превышено допустимое количество запусков процедуры расчета изменений в ячейках.
				|Выполнение прервано для предотвращения зацикливания, данные заполненные по связанным ячейкам могут быть некорректными.'");
			ВызватьИсключение ТекстОшибки;              	
		КонецЕсли;
		
		//Отразить измененные ячейки в параметрах данных
		Для Каждого СтрокаОтражения Из ИзмененияСвязанныхЯчеек Цикл
			Для Каждого ИмяОбласти Из ИменаОбластей Цикл
				Область = СтрокаОтражения[ИмяОбласти];
				Если ЗначениеЗаполнено(Область) Тогда
					ЗначениеИзменений = ТаблицаИзменений.Получить(Область);
					КоличествоПересчетовЯчейки = КоличествоПересчетовЯчеек.Получить(Область);
					КоличествоПересчетовЯчейки = ?(КоличествоПересчетовЯчейки = Неопределено, 0, КоличествоПересчетовЯчейки) + 1;
					КоличествоПересчетовЯчеек.Вставить(Область, КоличествоПересчетовЯчейки);
					МаксимумПересчетовЯчейки = Макс(МаксимумПересчетовЯчейки, КоличествоПересчетовЯчейки);  
					Если Не ЗначениеИзменений = Неопределено Тогда
						Расшифровка = Новый Структура;
						Расшифровка.Вставить("Значение", ЗначениеИзменений);
						Расшифровка.Вставить("ИмяПоказателя", СтрЗаменить(ИмяОбласти, "ИмяОбласти", "")); 
						Расшифровка.Вставить("Строка", СтрокаОтражения.Строка);
						Расшифровка.Вставить("Колонка", СтрокаОтражения.Колонка); 
						Если ЗначениеЗаполнено(СтрокаОтражения.СтатьяБюджетов) Тогда
							Расшифровка.Вставить("СтатьяБюджетов", СтрокаОтражения.СтатьяБюджетов);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтражения.РедактируемоеЗначение) Тогда
							Расшифровка.Вставить("РедактируемоеЗначение",СтрокаОтражения.РедактируемоеЗначение);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтражения.Валюта) Тогда
							Расшифровка.Вставить("Валюта", СтрокаОтражения.Валюта);
						КонецЕсли;
						Для Каждого ПериодСтрокой ИЗ Перечисления.Периодичность Цикл
							ПериодСтрокой = "Период" + Строка(ПериодСтрокой);
							Если Не ДанныеЯчеек.Колонки.Найти(ПериодСтрокой) = Неопределено И ЗначениеЗаполнено(СтрокаОтражения[ПериодСтрокой]) Тогда
								Расшифровка.Вставить(ПериодСтрокой, СтрокаОтражения[ПериодСтрокой]);	
							КонецЕсли;
						КонецЦикла;
						СоответствиеЗначенийАналитик = Новый Соответствие;
						Для Каждого ВидАналитики из ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
							КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
							Значение = Неопределено;
							Если Не ДанныеЯчеек.Колонки.Найти(КлючИмени) = Неопределено И ЗначениеЗаполнено(СтрокаОтражения[КлючИмени]) Тогда
								Значение = СтрокаОтражения[КлючИмени];
							КонецЕсли;
							ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(КлючИмени, ВидАналитики);
							Значение = ТипЗначения.ПривестиЗначение(Значение);
							СоответствиеЗначенийАналитик.Вставить(ВидАналитики, Значение);
						КонецЦикла;
						Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик); 

						РезультатОтражения = БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ПараметрыДанных, Расшифровка, ЗначениеИзменений);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		Результат = ПолучитьИзмененияВЯчейках(ВидБюджета, НачалоПериода, КонецПериода,
									ПараметрыВыводаВидаБюджета, ПараметрыДанных, ДанныеЯчеек);
									
		ТаблицаИзменений = Результат.Результат;
		Для Каждого КлючИЗначение Из ТаблицаИзменений Цикл
			ТаблицаИзмененийИтог.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ДанныеЯчеек = Результат.ДанныеЯчеек;
		ИзмененияСвязанныхЯчеек = Результат.ИзмененияСвязанныхЯчеек;

	КонецЦикла;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	
	Для Каждого КлючЗначение Из ТаблицаИзмененийИтог Цикл
		НоваяСтрока = ТаблицаИзменений.Добавить();
		НоваяСтрока.ИмяОбласти = КлючЗначение.Ключ;
		НоваяСтрока.Значение = КлючЗначение.Значение;
	КонецЦикла;
	
	Результат = Новый Структура("Результат, ДанныеЯчеек", ТаблицаИзменений, ДанныеЯчеек);
	
	Возврат Результат;
									
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоИсточникам

Процедура ПолучитьНастраиваемыеЭлементыОтбора(Отбор, Список, Имя) Экспорт
	
	Для Каждого ЭлементОтбора из Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПолучитьНастраиваемыеЭлементыОтбора(ЭлементОтбора, Список, Имя);
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(ЭлементОтбора.ПравоеЗначение, "<заполнить")
			И СтрНайти(НРег(ЭлементОтбора.ЛевоеЗначение), Имя) Тогда
			
			Список.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьНастройкиСКДПередВыводом(Настройки, ПараметрыДанных) Экспорт
	Перем Значение;
	
	Структура = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
	Структура.Вставить("Организация");
	Структура.Вставить("Сценарий");
	Структура.Вставить("Подразделение");
	Структура.Вставить("ВалютаХранения");
	
	Для Каждого КлючИЗначение из Структура Цикл
		
		Используется = ПараметрыДанных.Свойство(КлючИЗначение.Ключ, Значение);
		Если Используется Тогда
			Если КлючИЗначение.Ключ = "Подразделение" Тогда
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Отборы = Новый Массив;
		ПолучитьНастраиваемыеЭлементыОтбора(Настройки.Отбор, Отборы, НРег(КлючИЗначение.Ключ));
		Для Каждого ЭлементОтбора из Отборы Цикл
			ЭлементОтбора.Использование = Используется;
			Если Используется Тогда
				ЭлементОтбора.ПравоеЗначение = Значение;
				ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, ИсточникиДанных, СтруктураЯчеек, КэшДанных)
	Перем СКДПлановыеДанные, СКДПлановыеДанныеПривилегированно, СКДДанныеДокумента, СКДФактическиеДанные, СКДФактическиеДанныеПривилегированно;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	НачалоПериода = ПараметрыДанных.НачалоПериода;
	КонецПериода = ПараметрыДанных.КонецПериода;
	ГраницаФактДанных = ПараметрыДанных.ГраницаФактДанных;
	
	ВнешниеНаборы = Новый Структура;
	
	Если КэшДанных.Свойство("ВалютаРеглУчета") Тогда
		ВалютаРеглУчета = КэшДанных.ВалютаРеглУчета;
	Иначе
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КэшДанных.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	КонецЕсли;
	
	Если КэшДанных.Свойство("ВалютаУпрУчета") Тогда
		ВалютаУпрУчета = КэшДанных.ВалютаУпрУчета;
	Иначе
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		КэшДанных.Вставить("ВалютаУпрУчета", ВалютаУпрУчета);
	КонецЕсли;
	
	Если КэшДанных.Свойство("КэшЗначенийАналитик") Тогда
		КэшЗначенийАналитик = КэшДанных.КэшЗначенийАналитик;
	Иначе
		КэшЗначенийАналитик = Новый Соответствие;
		КэшДанных.Вставить("КэшЗначенийАналитик", КэшЗначенийАналитик);
	КонецЕсли;
		
	Если КэшДанных.Свойство("КэшПлановыхКурсов") Тогда
		
		КэшПлановыхКурсов = КэшДанных.КэшПлановыхКурсов;
		
	Иначе
		
		КэшПлановыхКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(,,НачалоПериода, КонецПериода);
		КэшПлановыхКурсов.Сортировать("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий");
		
		КэшДанных.Вставить("КэшПлановыхКурсов", КэшПлановыхКурсов);
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("ПлановыеДанные") Тогда
		
		ПлановыеДанные = КэшДанных.ПлановыеДанные;
		
	ИначеЕсли СКДДанных.Свойство("СКДПлановыеДанные", СКДПлановыеДанные) И 
		СКДПлановыеДанные.НаборыДанных[0].Элементы.Количество() Тогда
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПлановыеДанные);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ПараметрыДанных.Свойство("Документ") Тогда
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ", ПараметрыДанных.Документ);
		КонецЕсли;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВариантСумм", ПараметрыДанных.ВариантСумм);
		
		Если ПараметрыДанных.Свойство("Статус") Тогда
			ФинОтчеты.УстановитьОтбор(Компоновщик.Настройки.Отбор, "Статус", ПараметрыДанных.Статус, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ПлановыеДанные = ФинОтчеты.ВыгрузитьРезультатСКД(СКДПлановыеДанные, Компоновщик);
		
		КэшДанных.Вставить("ПлановыеДанные", ПлановыеДанные);
		
	Иначе
		
		ПлановыеДанные = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ПлановыеДанные", ПлановыеДанные);
	
	// Плановые данные привилегированно
	Если КэшДанных.Свойство("ПлановыеДанныеПривилегированно") Тогда
		
		ПлановыеДанныеПривилегированно = КэшДанных.ПлановыеДанныеПривилегированно;
		
	ИначеЕсли СКДДанных.Свойство("СКДПлановыеДанныеПривилегированно", СКДПлановыеДанныеПривилегированно)  
		И СКДПлановыеДанныеПривилегированно.НаборыДанных[0].Элементы.Количество() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПлановыеДанныеПривилегированно);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ПараметрыДанных.Свойство("Документ") Тогда
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ", ПараметрыДанных.Документ);
		КонецЕсли;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВариантСумм", ПараметрыДанных.ВариантСумм);
		
		Если ПараметрыДанных.Свойство("Статус") Тогда
			ФинОтчеты.УстановитьОтбор(Компоновщик.Настройки.Отбор, "Статус", ПараметрыДанных.Статус, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ПлановыеДанныеПривилегированно = ФинОтчеты.ВыгрузитьРезультатСКД(СКДПлановыеДанныеПривилегированно, Компоновщик);
		
		КэшДанных.Вставить("ПлановыеДанныеПривилегированно", ПлановыеДанныеПривилегированно);
		
		УстановитьПривилегированныйРежим(Ложь);
	
	Иначе
		
		ПлановыеДанныеПривилегированно = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ПлановыеДанныеПривилегированно", ПлановыеДанныеПривилегированно);
	
	Если СКДДанных.Свойство("СКДДанныеДокумента", СКДДанныеДокумента) И СКДДанныеДокумента <> Неопределено Тогда
		
		#Область ПодготовкаКэшейДляДанныхДокумента
		
		Если КэшДанных.Свойство("НастройкиСвязей") Тогда
			
			НастройкиСвязей = КэшДанных.НастройкиСвязей;
			
		Иначе
						
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РегистрСведений.СтатьяБюджетов,
			|	РегистрСведений.СвязанныйПоказательБюджетов КАК ПоказательБюджетов,
			|	РегистрСведений.Коэффициент,
			|	РегистрСведений.Расход,
			|	РегистрСведений.Аналитика1,
			|	РегистрСведений.Аналитика2,
			|	РегистрСведений.Аналитика3,
			|	РегистрСведений.Аналитика4,
			|	РегистрСведений.Аналитика5,
			|	РегистрСведений.Аналитика6,
			|	РегистрСведений.ТранслироватьАналитику1,
			|	РегистрСведений.ТранслироватьАналитику2,
			|	РегистрСведений.ТранслироватьАналитику3,
			|	РегистрСведений.ТранслироватьАналитику4,
			|	РегистрСведений.ТранслироватьАналитику5,
			|	РегистрСведений.ТранслироватьАналитику6,
			|	РегистрСведений.АдресТрансляцииАналитики1,
			|	РегистрСведений.АдресТрансляцииАналитики2,
			|	РегистрСведений.АдресТрансляцииАналитики3,
			|	РегистрСведений.АдресТрансляцииАналитики4,
			|	РегистрСведений.АдресТрансляцииАналитики5,
			|	РегистрСведений.АдресТрансляцииАналитики6,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики1 КАК ПоказательВидАналитики1,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики2 КАК ПоказательВидАналитики2,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики3 КАК ПоказательВидАналитики3,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики4 КАК ПоказательВидАналитики4,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики5 КАК ПоказательВидАналитики5,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики6 КАК ПоказательВидАналитики6,
			|	РегистрСведений.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик КАК ПоказательКоличествоИспользуемыхАналитик,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоВалюте КАК УчитыватьПоВалюте,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ИсточникЗаполненияВалюты,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству КАК ПоказательУчитыватьПоКоличеству,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК ПоказательЕдиницаИзмеренияОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиКоличество КАК ПоказательАдресАналитикиКоличество,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК ПоказательИсточникЗаполнениеЕдиницыИзмерения,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмерения КАК ПоказательЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.СвязиПоказателейБюджетов КАК РегистрСведений";
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			НастройкиСвязей = РезультатЗапроса.Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			КэшДанных.Вставить("НастройкиСвязей", НастройкиСвязей);
			
		КонецЕсли;
		
		Если КэшДанных.Свойство("КэшПараметровСтатей") Тогда
			
			КэшПараметровСтатей = КэшДанных.КэшПараметровСтатей;
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатьиБюджетов.Ссылка КАК СтатьяБюджетов,
			|	СтатьиБюджетов.КоличествоИспользуемыхАналитик,
			|	СтатьиБюджетов.ВидАналитики1,
			|	СтатьиБюджетов.ВидАналитики2,
			|	СтатьиБюджетов.ВидАналитики3,
			|	СтатьиБюджетов.ВидАналитики4,
			|	СтатьиБюджетов.ВидАналитики5,
			|	СтатьиБюджетов.ВидАналитики6,
			|	СтатьиБюджетов.УчитыватьПоКоличеству КАК СтатьяУчитыватьПоКоличеству,
			|	СтатьиБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК СтатьяЕдиницаИзмеренияОпределяетсяАналитикой,
			|	СтатьиБюджетов.АдресАналитикиКоличество КАК СтатьяАдресАналитикиКоличество,
			|	СтатьиБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СтатьяИсточникЗаполнениеЕдиницыИзмерения,
			|	СтатьиБюджетов.ЕдиницаИзмерения КАК СтатьяЕдиницаИзмерения
			|ИЗ
			|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
			|	//%Отбор статей%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоказателиБюджетов.Ссылка,
			|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик,
			|	ПоказателиБюджетов.ВидАналитики1,
			|	ПоказателиБюджетов.ВидАналитики2,
			|	ПоказателиБюджетов.ВидАналитики3,
			|	ПоказателиБюджетов.ВидАналитики4,
			|	ПоказателиБюджетов.ВидАналитики5,
			|	ПоказателиБюджетов.ВидАналитики6,
			|	ПоказателиБюджетов.УчитыватьПоКоличеству,
			|	ПоказателиБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой,
			|	ПоказателиБюджетов.АдресАналитикиКоличество,
			|	ПоказателиБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения,
			|	ПоказателиБюджетов.ЕдиницаИзмерения
			|ИЗ
			|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
			|ГДЕ
			|	ТипПоказателя = &ТипПоказателя
			|	//%Отбор показателей%";
			
			СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
			СтатьиБюджета = СтруктураЯчеек.Скопировать(СтруктураПоиска).ВыгрузитьКолонку("СтатьяБюджетов");
			СтатьиБюджета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтатьиБюджета);
			
			ЕстьПустоеЗначение = Ложь;
			Для Каждого СтатьяБюджетов из СтатьиБюджета Цикл
				Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
					ЕстьПустоеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьПустоеЗначение Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Отбор статей%", "ГДЕ Ссылка В (&СписокСтатей)");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Отбор показателей%", "И Ссылка В (&СписокСтатей)");
				СписокСтатей = Новый СписокЗначений;
				СписокСтатей.ЗагрузитьЗначения(СтатьиБюджета);
				Запрос.УстановитьПараметр("СписокСтатей", СписокСтатей);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.ТипПоказателяБюджетов.Целевой);
			РезультатЗапроса = Запрос.Выполнить();
			КэшПараметровСтатей = РезультатЗапроса.Выгрузить();
			КэшДанных.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
		КонецЕсли;
		
		#КонецОбласти
		
		СтруктураДанныхДокумента = Новый Структура;
		Для Каждого КлючИЗначение из СКДДанныеДокумента Цикл
			
			Если КэшДанных.Свойство(КлючИЗначение.Ключ) Тогда
				
				МакетКомпоновки = КэшДанных[КлючИЗначение.Ключ];
				
			Иначе
				
				Компоновщик = ФинОтчеты.КомпоновщикСхемы(КлючИЗначение.Значение);
				
				ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
				
				Для Каждого Параметр из СКДДанных.Параметры Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				Значение = Неопределено;
				Если ПараметрыДанных.Свойство("Организация", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Организация", Значение);
				КонецЕсли;
				Если ПараметрыДанных.Свойство("Подразделение", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Подразделение", Значение);
				КонецЕсли;
				Для Каждого ВычисляемоеПоле из ПараметрыДанных.ДополнительныеФильтрыПоАналитикам Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_" + ВычисляемоеПоле.Ключ, ПараметрыДанных[ВычисляемоеПоле.Ключ]);
				КонецЦикла;
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Валюта", 		ПараметрыДанных.Валюта);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Сценарий", 	ПараметрыДанных.Сценарий);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", 		НачалоПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", 		КонецПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", 	ГраницаФактДанных);
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", 		ВалютаРеглУчета);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", 	КэшЗначенийАналитик);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", 	КэшПлановыхКурсов);
				
				МакетКомпоновки = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(КлючИЗначение.Значение, Компоновщик);
				
				// Если после выполнения компоновщика набора количество наборов уменьшилось, то
				// считаем, что нет доступа к одному из наборов схемы компоновки.
				Если КлючИЗначение.Значение.НаборыДанных.Количество() > МакетКомпоновки.НаборыДанных.Количество() Тогда
					ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'"); 
				КонецЕсли;
				
				КэшДанных.Вставить(КлючИЗначение.Ключ, МакетКомпоновки);
				
			КонецЕсли;
			
			ВнешниеНаборыДокумента = Новый Структура;
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Аналитика", ПараметрыДанных.АналитикаСтатейБюджетов);
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Суммы", ПараметрыДанных.ОборотыПоСтатьямБюджетов);
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Значения", ПараметрыДанных.АналитикаЗначений);
			ВнешниеНаборыДокумента.Вставить("НастройкиСвязей", НастройкиСвязей);
			ВнешниеНаборыДокумента.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
			ДанныеТаблицыДокумента = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДокумента);
			ДанныеТаблицыДокумента.Колонки.Добавить("ФлагВыводитьВсегда", ОбщегоНазначения.ОписаниеТипаЧисло(1));
			ДанныеТаблицыДокумента.ЗаполнитьЗначения(1, "ФлагВыводитьВсегда");
			ВнешниеНаборы.Вставить(КлючИЗначение.Ключ, ДанныеТаблицыДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("ФактическиеДанные") Тогда
		ФактическиеДанные = КэшДанных.ФактическиеДанные;
	Иначе
		Если ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ИначеЕсли ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета Тогда
			Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		Иначе
			Валюта = ПараметрыДанных.ВалютаСценария;
		КонецЕсли;
		РежимПолученияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "РежимПолученияДанных");
		Если Не ЗначениеЗаполнено(РежимПолученияДанных) Тогда
			РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные;
		КонецЕсли;
		ФактическиеДанные = БюджетированиеСервер.ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, Валюта, РежимПолученияДанных);
		КэшДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	Если КэшДанных.Свойство("ХранимыеФактическиеДанные") Тогда
		
		ХранимыеФактическиеДанные = КэшДанных.ХранимыеФактическиеДанные;
		
	ИначеЕсли СКДДанных.Свойство("СКДФактическиеДанные", СКДФактическиеДанные) И 
		СКДФактическиеДанные.НаборыДанных[0].Элементы.Количество() Тогда
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДФактическиеДанные);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаУпрУчета", ВалютаУпрУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВариантСумм", ПараметрыДанных.ВариантСумм);
		
		ХранимыеФактическиеДанные = ФинОтчеты.ВыгрузитьРезультатСКД(СКДФактическиеДанные, Компоновщик);
		
		Если ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария Тогда
			Если ПараметрыДанных.ВалютаСценария <> ВалютаРеглУчета
				И ПараметрыДанных.ВалютаСценария <> ВалютаУпрУчета Тогда
				Параметры = БюджетированиеСервер.ШаблонПараметровПолученияФакта();
				Параметры.ВалютаОтчета = ПараметрыДанных.ВалютаСценария;
				БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ХранимыеФактическиеДанные, Параметры);
			КонецЕсли;
		КонецЕсли;
		
		КэшДанных.Вставить("ХранимыеФактическиеДанные", ХранимыеФактическиеДанные);
		
	Иначе
		
		ХранимыеФактическиеДанные = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ХранимыеФактическиеДанные", ХранимыеФактическиеДанные);
	
	// Хранимые фактические данные привилегированно
	
	Если КэшДанных.Свойство("ХранимыеФактическиеДанныеПривилегированно") Тогда
		
		ХранимыеФактическиеДанныеПривилегированно = КэшДанных.ХранимыеФактическиеДанныеПривилегированно;
		
	ИначеЕсли СКДДанных.Свойство("СКДФактическиеДанныеПривилегированно", СКДФактическиеДанныеПривилегированно) 
		И СКДФактическиеДанныеПривилегированно.НаборыДанных[0].Элементы.Количество() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДФактическиеДанныеПривилегированно);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаРеглУчета", ВалютаРеглУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВалютаУпрУчета", ВалютаУпрУчета);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ВариантСумм", ПараметрыДанных.ВариантСумм);
		
		ХранимыеФактическиеДанныеПривилегированно = ФинОтчеты.ВыгрузитьРезультатСКД(СКДФактическиеДанныеПривилегированно, Компоновщик);
		
		Если ПараметрыДанных.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария Тогда
			Если ПараметрыДанных.ВалютаСценария <> ВалютаРеглУчета
				И ПараметрыДанных.ВалютаСценария <> ВалютаУпрУчета Тогда
				Параметры = БюджетированиеСервер.ШаблонПараметровПолученияФакта();
				Параметры.ВалютаОтчета = ПараметрыДанных.ВалютаСценария;
				БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ХранимыеФактическиеДанныеПривилегированно, Параметры);
			КонецЕсли;
		КонецЕсли;
		
		КэшДанных.Вставить("ХранимыеФактическиеДанныеПривилегированно", ХранимыеФактическиеДанныеПривилегированно);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ХранимыеФактическиеДанныеПривилегированно = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ХранимыеФактическиеДанныеПривилегированно", ХранимыеФактическиеДанныеПривилегированно);
	
	Если КэшДанных.Свойство("МакетПредварительнойСКД") Тогда
		МакетПредварительнойСКД = КэшДанных.МакетПредварительнойСКД;
	Иначе
		СКДПредварительная = СКДДанных.СКДПредварительныйРасчет;
		Если СКДПредварительная <> Неопределено Тогда
			Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПредварительная);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
			МакетПредварительнойСКД = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПредварительная, Компоновщик);
			
			// Если после выполнения компоновщика набора количество наборов уменьшилось, то
			// считаем, что нет доступа к одному из наборов схемы компоновки.
			Если СКДПредварительная.НаборыДанных.Количество() > МакетПредварительнойСКД.НаборыДанных.Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'"); 
			КонецЕсли;
				
			КэшДанных.Вставить("МакетПредварительнойСКД", МакетПредварительнойСКД);
		КонецЕсли;
	КонецЕсли;
	
	Если МакетПредварительнойСКД <> Неопределено Тогда
		ТаблицаПредварительныхИтогов = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетПредварительнойСКД, ВнешниеНаборы);
		ВнешниеНаборы.Вставить("ПредварительныйРасчет", ТаблицаПредварительныхИтогов);
	КонецЕсли;
	
	Если КэшДанных.Свойство("МакетСКДИтоговой") Тогда
		МакетСКДИтоговой = КэшДанных.МакетСКДИтоговой;
	Иначе
		СКДИтоговая = СКДДанных.СКДИтоговая;
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДИтоговая);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		МакетСКДИтоговой = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДИтоговая, Компоновщик);
		
		// Если после выполнения компоновщика набора количество наборов уменьшилось, то
		// считаем, что нет доступа к одному из наборов схемы компоновки.
		Если СКДИтоговая.НаборыДанных.Количество() > МакетСКДИтоговой.НаборыДанных.Количество() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'"); 
		КонецЕсли;
				
		КэшДанных.Вставить("МакетСКДИтоговой", МакетСКДИтоговой);
	КонецЕсли;
	
	ТаблицаРезультат = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетСКДИтоговой, ВнешниеНаборы);
	Если ТаблицаРезультат.Колонки.Найти("РедактируемоеЗначение") = Неопределено Тогда
		//для совместимости
		ТаблицаРезультат.Колонки.Добавить("РедактируемоеЗначение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область РасчетДанныхСтруктурыЯчеек

// Функция возвращает массив периодов
//
// Параметры:
//  НачалоПериода  - Дата - начало периода
//  КонецПериода  - Дата - окончание периода
//  Периодичность  - ПеречислениеСсылка.Периодичность - периодичность шага
//
// Возвращаемое значение:
//   Массив - массив периодов
//
Функция ПолучитьМассивПериодов(Знач НачалоПериода, Знач КонецПериода, Периодичность) Экспорт
	
	Результат = Новый Массив;
	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(НачалоПериода, Периодичность);
	Пока НачалоПериода <= КонецПериода Цикл
		Результат.Добавить(НачалоПериода);
		НачалоПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(НачалоПериода, Периодичность, 1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу значений с колонками ПериодNNN,
// где NNN - название стандартного периода (год, квартал и т.д).
// В строках таблицы содержаться даты начала всех периодов с учетом периодичности соответствующей колонки
//
// Параметры:
//   Периодичности - Массив - значения периодичностей, которые планируется добавить в таблицу
//   НачалоПериода - Дата - начало периода
//   КонецПериода - Дата - конец периода
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ТаблицаПериодов(Периодичности, НачалоПериода, КонецПериода) Экспорт
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	Для Каждого Измерение из Периодичности Цикл
		ТаблицаПериодов.Колонки.Добавить("Период" + Измерение, Новый ОписаниеТипов("Дата"));
	КонецЦикла;
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	МассивПериодов = ПолучитьМассивПериодов(НачалоПериода, КонецПериода, МинимальнаяПериодичность);
	
	Для Каждого Период из МассивПериодов Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		Для Каждого Периодичность из Периодичности Цикл
			НоваяСтрока["Период" + Периодичность] = БюджетированиеКлиентСервер.ДатаНачалаПериода(Период, Периодичность);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Функция ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета, ИсточникиПериодовГруппировок, НачалоПериода, КонецПериода, ГраницаФактДанных, ТекстПериодов)
	
	Периодичности = ОписаниеОтчета.Периодичности;
	ТаблицаПериодов = ТаблицаПериодов(Периодичности, НачалоПериода, КонецПериода);
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ПериодыПервогоЗапроса = СокрЛП(СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодов"));
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|
	|" + Лев(ПериодыПервогоЗапроса, СтрДлина(ПериодыПервогоЗапроса) - 1) + "
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов; ";
	
	//Сформируем для каждого источника свою таблицу периодов, если она отличается от ТаблицаПериодов
	ТаблицыПериодовИсточников = Новый Соответствие();

	Если ИсточникиПериодовГруппировок.Количество() > 0 Тогда
				
		Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст = "Выбрать " +  
				СтрЗаменить(Источник.ВыражениеНачалоПериодаГруппировки, "ЛеваяТаблицаПериодов.Период" + МинимальнаяПериодичность,
					"&НачалоПериода") + " КАК НачалоПериода, " +  
				СтрЗаменить(Источник.ВыражениеКонецПериодаГруппировки, "ЛеваяТаблицаПериодов.Период" + МинимальнаяПериодичность,
					"&КонецПериода") + " КАК КонецПериода ";
					
			Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
			Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если Выборка.НачалоПериода = НачалоПериода И Выборка.КонецПериода = КонецПериода Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаПериодовИсточника = ТаблицаПериодов(Периодичности, Выборка.НачалоПериода, Выборка.КонецПериода);
				ТаблицыПериодовИсточников.Вставить(Источник.Идентификатор, ТаблицаПериодовИсточника);
				
				ПериодыПервогоЗапроса = СокрЛП(СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодовИсточника" + Источник.Идентификатор));
				ТекстЗапроса = ТекстЗапроса + " 
				|ВЫБРАТЬ
				|
				|" + Лев(ПериодыПервогоЗапроса, СтрДлина(ПериодыПервогоЗапроса) - 1) + "
				|
				|ПОМЕСТИТЬ ТаблицаПериодовИсточника"+Источник.Идентификатор+ "
				|
				|ИЗ &ТаблицаПериодовИсточника" + Источник.Идентификатор + " КАК ТаблицаПериодовИсточника" + Источник.Идентификатор + ";";

				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ВЫБРАТЬ
	|
	|";
		
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		| ТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Отчет,
		| ТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Соединение,";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	"""" КАК ИД_ИсточникаПериодовГруппировки
	|
	|	ИЗ ТаблицаПериодов
	|";
		
	Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|";
		
		Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
			ТекстЗапроса = ТекстЗапроса + "
			| ЛеваяТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Отчет,";
			ТекстЗапроса = ТекстЗапроса + "
			| ПраваяТаблицаПериодов.Период" + Периодичность + " КАК Период" + Периодичность + "Соединение,";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|""" + Источник.Идентификатор + """ КАК ИД_ИсточникаПериодовГруппировки
		|
		|ИЗ ТаблицаПериодов КАК ЛеваяТаблицаПериодов
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ 
		?(ТаблицыПериодовИсточников.Получить(Источник.Идентификатор) = Неопределено,
			"ТаблицаПериодов","ТаблицаПериодовИсточника"+Источник.Идентификатор) + " КАК ПраваяТаблицаПериодов
		|ПО ПраваяТаблицаПериодов.Период" + МинимальнаяПериодичность + 
			" МЕЖДУ " + Источник.ВыражениеНачалоПериодаГруппировки + " И " + Источник.ВыражениеКонецПериодаГруппировки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
	Для Каждого Стр Из ТаблицыПериодовИсточников Цикл
		Запрос.УстановитьПараметр("ТаблицаПериодовИсточника" + Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВспомогательныеДанныеРасчетаДанныхЯчеек(ПараметрыДанных, ОписаниеОтчета, 
												НастройкиСтруктурыЯчеек, КэшДанных, РежимФормирования)
	Перем ВспомогательныеДанныеРасчетаЯчеек, СтрокиОснования;
	
	НачалоПериода 		= ПараметрыДанных.НачалоПериода;
	КонецПериода 		= ПараметрыДанных.КонецПериода;
	ГраницаФактДанных 	= ПараметрыДанных.ГраницаФактДанных;
	
	ПостфиксКэша = "";
	
	Если ПараметрыДанных.Свойство("СтрокиОснования", СтрокиОснования) И ЗначениеЗаполнено(СтрокиОснования) Тогда
		ПостфиксКэша = "_ФильтрНаСтроки";
	КонецЕсли;
	
	ТолькоРасчетные = ПараметрыДанных.Свойство("ТолькоРасчетные");
	Если ТолькоРасчетные Тогда
		ПостфиксКэша = ПостфиксКэша + "_ТолькоРасчетные";
	КонецЕсли;
	
	Если КэшДанных.Свойство("ВспомогательныеДанныеСоединенияСтруктурыСДанными" + ПостфиксКэша, ВспомогательныеДанныеРасчетаЯчеек) Тогда
		Возврат ВспомогательныеДанныеРасчетаЯчеек;
	КонецЕсли;
	
	ОсновныеЭлементы = 
	"<ИмяТаблицы>.ИндексСтроки,
	|<ИмяТаблицы>.ОсновнойЭлемент,
	|<ИмяТаблицы>.Строка,
	|<ИмяТаблицы>.Колонка,
	|<ИмяТаблицы>.ПорядокРасчетаОперанда,
	|<ИмяТаблицы>.ВидЭлемента,
	|<ИмяТаблицы>.РасчетЗаполнение,
	|<ИмяТаблицы>.ВидОперанда,
	|<ИмяТаблицы>.СтатьяБюджетов,
	|<ИмяТаблицы>.ПоказательБюджетов,
	|<ИмяТаблицы>.НефинансовыйПоказатель,
	|<ИмяТаблицы>.РедактируемоеЗначение,";
	
	ОсновныеФлаги = 
	"<ИмяТаблицы>.ФлагСтатьяБюджетов,
	|<ИмяТаблицы>.ФлагПоказательБюджетов,
	|<ИмяТаблицы>.ФлагНефинансовыйПоказатель,
	|<ИмяТаблицы>.ФлагРедактируемоеЗначение,";
	
	ТекстИзмерений = "";
	ТекстФлагиИзмерений = "";
	
	ВсеИзмерения = Новый Массив;
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		ТекстИзмерений = ТекстИзмерений + "
		|" + "<ИмяТаблицы>." + Измерение + " КАК " + Измерение + ",
		|";
		ТекстФлагиИзмерений = ТекстФлагиИзмерений + "
		|" + "<ИмяТаблицы>.Флаг" + Измерение + " КАК Флаг" + Измерение + ",
		|";
		Если Измерение <> "Валюта" Тогда //служебное измерение
			ВсеИзмерения.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстАналитики = "";
	ТекстФлагиАналитики = "";
	ТекстРодителиАналитик = "";
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстАналитики = ТекстАналитики + "
		|" + "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля + ",
		|";
		ТекстФлагиАналитики = ТекстФлагиАналитики + "
		|" + "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля + ",
		|";
		ТекстРодителиАналитик = ТекстРодителиАналитик + "<ИмяТаблицы>.Родитель" + ИмяПоля + " КАК Родитель" + ИмяПоля + ",
		|";
		ВсеИзмерения.Добавить(ИмяПоля);
	КонецЦикла;
	
	ТекстПериодов = "";
	ТекстПериодовСоединение = "";
	ТекстФлагиПериодов = "";
	ТекстВыраженияПериодов = "";
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстПериодов = ТекстПериодов + "
		|" + "<ИмяТаблицы>.Период" + Измерение + " КАК Период" + Измерение + ",
		|";
		ТекстПериодовСоединение = ТекстПериодовСоединение + "
		|" + "<ИмяТаблицы>.Период" + Измерение + "Соединение КАК Период" + Измерение + "Соединение,
		|";
		ТекстФлагиПериодов = ТекстФлагиПериодов + "
		|" + "<ИмяТаблицы>.ФлагПериод" + Измерение + " КАК ФлагПериод" + Измерение + ",
		|";
		ТекстВыраженияПериодов = ТекстВыраженияПериодов + "
		|" + "<ИмяТаблицы>.ВыражениеПериода" + Измерение + " КАК ВыражениеПериода" + Измерение + ",
		|";
	КонецЦикла;
	
	ЕстьПериодичность = ОписаниеОтчета.Периодичности.Количество();
	ИсточникиПериодовГруппировок = НастройкиСтруктурыЯчеек.ИсточникиПериодовГруппировок;
	
	ТаблицаПериодов = Неопределено;
	Если ЕстьПериодичность Тогда
		
		ТаблицаПериодов = ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета, ИсточникиПериодовГруппировок, 
																НачалоПериода, КонецПериода, ГраницаФактДанных, ТекстПериодов);
		
	КонецЕсли;
	
	ТаблицаИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель");
	ТаблицаИзмеренийНФП.Колонки.Добавить("ИмяИзмерения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НефинансовыеПоказателиБюджетов.Ссылка КАК НефинансовыйПоказатель,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики1,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики2,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики3,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики4,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики5,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики6
		|ИЗ
		|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
		|ГДЕ Ссылка В (&МассивОбъектов)";
		
	СтруктураЯчеек = НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	СписокОбъектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураЯчеек.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	Запрос.УстановитьПараметр("МассивОбъектов", СписокОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Сч = 1 по 6 Цикл
			ВидАналитики = Выборка["ВидАналитики" + Сч];
			Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			НоваяСтрока = ТаблицаИзмеренийНФП.Добавить();
			НоваяСтрока.НефинансовыйПоказатель = Выборка.НефинансовыйПоказатель;
			НоваяСтрока.ИмяИзмерения = ИмяПоля;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаИзмеренийНФП.Индексы.Добавить("НефинансовыйПоказатель, ИмяИзмерения");
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("ОсновныеЭлементы", 			ОсновныеЭлементы);
	ВспомогательныеДанные.Вставить("ОсновныеФлаги", 			ОсновныеФлаги);
	ВспомогательныеДанные.Вставить("ТекстИзмерений", 			ТекстИзмерений);
	ВспомогательныеДанные.Вставить("ТекстФлагиИзмерений", 		ТекстФлагиИзмерений);
	ВспомогательныеДанные.Вставить("ТекстАналитики", 			ТекстАналитики);
	ВспомогательныеДанные.Вставить("ТекстФлагиАналитики", 		ТекстФлагиАналитики);
	ВспомогательныеДанные.Вставить("ТекстРодителиАналитик", 	ТекстРодителиАналитик);
	ВспомогательныеДанные.Вставить("ТекстПериодов", 			ТекстПериодов);
	ВспомогательныеДанные.Вставить("ТекстПериодовСоединение", 	ТекстПериодовСоединение);
	ВспомогательныеДанные.Вставить("ТекстФлагиПериодов", 		ТекстФлагиПериодов);
	ВспомогательныеДанные.Вставить("ТекстВыраженияПериодов", 	ТекстВыраженияПериодов);
	ВспомогательныеДанные.Вставить("РежимФормирования", 		РежимФормирования);
	ВспомогательныеДанные.Вставить("ВсеИзмерения", 				ВсеИзмерения);
	ВспомогательныеДанные.Вставить("ТаблицаИзмеренийНФП", 		ТаблицаИзмеренийНФП);
	ВспомогательныеДанные.Вставить("ПараметрыЗапроса",			Новый Структура);
	ВспомогательныеДанные.Вставить("ТаблицаПериодов",			ТаблицаПериодов);
	
	СтруктураЯчеек 						= НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	ПоляИсточников 						= НастройкиСтруктурыЯчеек.ПоляИсточников;
	ИсточникиЗначенийИзмерений 			= НастройкиСтруктурыЯчеек.ИсточникиЗначенийИзмерений;
	ЗаполнениеОтсутствующихИзмеренийНФП = НастройкиСтруктурыЯчеек.ЗаполнениеОтсутствующихИзмеренийНФП;
	ОтборИзмеренийНФП 					= НастройкиСтруктурыЯчеек.ОтборИзмеренийНФП;
	НужныеРесурсы 						= ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь));
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ 
	|" + 	СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстВыраженияПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") + "
	|	СтруктураЯчеек.ИД_ИсточникаПериодов, СтруктураЯчеек.ИД_Источника
	|
	|ПОМЕСТИТЬ СтруктураЯчеек
	|
	|ИЗ &СтруктураЯчеек КАК СтруктураЯчеек
	|
	|";
	
	Если ЗначениеЗаполнено(СтрокиОснования) ИЛИ ТолькоРасчетные Тогда
		ТекстЗапроса = ТекстЗапроса + " ГДЕ ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокиОснования) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|СтруктураЯчеек.Строка в (&СтрокиОснования)
		|" + ?(ТолькоРасчетные, " ИЛИ ", "");
	КонецЕсли;
	
	Если ТолькоРасчетные Тогда
		ТекстЗапроса = ТекстЗапроса + "
		| (РасчетЗаполнение = ""итог"")";
	КонецЕсли;
		
	Если Не ОписаниеОтчета.Периодичности.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка
		|
		|;
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО ИД_ИсточникаПериодов
		|
		|;
		|";
	КонецЕсли;
	
	//Подготовка таблицы данных
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|	ВЫРАЗИТЬ(ТаблицаДанных.РедактируемоеЗначение КАК Строка(150)) КАК РедактируемоеЗначение,
	|" + 	СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
	Для Каждого ПолеРесурса из НужныеРесурсы Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ТаблицаДанных.ИндексНФП,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание
	|
	|ПОМЕСТИТЬ ТаблицаДанных
	|
	|ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|
	|//%ТекстИндексов%
	|;
	|";
	
	//Подготовка таблицы данных
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточников.ИД_Источника,
	|	ТаблицаИсточников.Строка,
	|	ТаблицаИсточников.Колонка
	|
	|ПОМЕСТИТЬ ТаблицаИсточниковИзмерений
	|
	|ИЗ &ТаблицаПоИзмерениям КАК ТаблицаИсточников
	|
	|ГДЕ
	|	ТаблицаИсточников.ИД_Источника <> ""ВсеЭлементы""
	|
	|ИНДЕКСИРОВАТЬ ПО Строка, Колонка
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаИсточников.ИД_Источника,
	|	ТаблицаИсточников.Измерение,
	|	ТаблицаИсточников.СтатьяБюджетов,
	|	ТаблицаИсточников.ПоказательБюджетов,
	|	ТаблицаИсточников.НефинансовыйПоказатель,
	|	ТаблицаИсточников.РедактируемоеЗначение,
	|	ТаблицаИсточников.Строка,
	|	ТаблицаИсточников.Колонка
	|
	|ПОМЕСТИТЬ ТаблицаИсточниковИзмеренийСИменемИзмерения
	|
	|ИЗ &ТаблицаПоИзмерениям КАК ТаблицаИсточников
	|
	|ИНДЕКСИРОВАТЬ ПО Измерение
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанных";
	ИмяТаблицы = "СтруктураЯчеек";
	
	ДобавитьВЗапросОтборЗаписейПоНФП(ТекстЗапроса, ВспомогательныеДанные, СтруктураЯчеек, ОтборИзмеренийНФП, НужныеРесурсы, ИмяТаблицыДанных);
	
	ДополнитьНедостающуюАналитикуВНФП(ТекстЗапроса, ВспомогательныеДанные, ЗаполнениеОтсутствующихИзмеренийНФП, ИсточникиЗначенийИзмерений, НужныеРесурсы, ИмяТаблицыДанных);
	
	РазбитьЯчейкиПоПериодам(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы);
	
	ПараметрыПрочихСоединений = ПодготовитьТаблицуЗначенийИзмеренийПоРодителям(ТекстЗапроса, СтруктураЯчеек, ВспомогательныеДанные);
	
	ПроверкаВозможностиЗаполненияИзмеренийВСтруктуреЯчеек(ОписаниеОтчета, ИсточникиЗначенийИзмерений);
	
	ИмяТаблицыСИзмерениями = ИмяТаблицы;
	
	ПараметрыЗаполненияИзмерений = Новый Структура;
	ПараметрыЗаполненияИзмерений.Вставить("ОписаниеОтчета", ОписаниеОтчета);
	ПараметрыЗаполненияИзмерений.Вставить("ВспомогательныеДанные", ВспомогательныеДанные);
	ПараметрыЗаполненияИзмерений.Вставить("ИмяТаблицыДанных", ИмяТаблицыДанных);
	ПараметрыЗаполненияИзмерений.Вставить("ИсточникиЗначенийИзмерений", ИсточникиЗначенийИзмерений);
	ПараметрыЗаполненияИзмерений.Вставить("ПараметрыПрочихСоединений", ПараметрыПрочихСоединений);
	ПараметрыЗаполненияИзмерений.Вставить("РежимФормирования", РежимФормирования);
	ЗаполнитьИзмеренияВСтруктуреЯчеекПоИсточникам(ТекстЗапроса, ПараметрыЗаполненияИзмерений, ИмяТаблицыСИзмерениями);
	
	ДобавитьИсточникВСтруктуруЯчеек(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ИмяТаблицыСИзмерениями);
	
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Неопределено;
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		СтатьиИПоказателиБюджетов = Новый Структура();
		СтатьиИПоказателиБюджетов.Вставить("СтатьиБюджетов", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("СтатьяБюджетов"));
		СтатьиИПоказателиБюджетов.Вставить("ПоказателиБюджетов", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("ПоказательБюджетов"));
		СтатьиИПоказателиБюджетов.Вставить("НефинансовыеПоказатели", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("НефинансовыйПоказатель"));
		СоответствиеВидовАналитикСтатьямИПоказателямБюджета = 
			ПодготовитьСоответствиеВидовАналитикСтатьямИПоказателямБюджета(ОписаниеОтчета.ВидыАналитик, СтатьиИПоказателиБюджетов);
	КонецЕсли;
	
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ИсточникиЗначенийИзмерений",							 ИсточникиЗначенийИзмерений);
	ВспомогательныеПараметры.Вставить("ИмяТаблицыДанных", 		 							 ИмяТаблицыДанных);
	ВспомогательныеПараметры.Вставить("ПоляИсточников", 			  						 ПоляИсточников);
	ВспомогательныеПараметры.Вставить("ПараметрыПрочихСоединений", 							 ПараметрыПрочихСоединений);
	ВспомогательныеПараметры.Вставить("СоответствиеВидовАналитикСтатьямИПоказателямБюджета", СоответствиеВидовАналитикСтатьямИПоказателямБюджета);

	ВыполнитьСоединениеСтруктурыСДанными(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ВспомогательныеПараметры, РежимФормирования);
		
	ВыполнитьФильтрИзмеренийПоИсточникамЗначений(ТекстЗапроса, ИсточникиЗначенийИзмерений, ИмяТаблицы, ИмяТаблицыДанных);
	
	ВспомогательныеДанныеРасчетаЯчеек = Новый Структура;
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ТекстЗапроса", ТекстЗапроса);
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ПараметрыЗапроса", ВспомогательныеДанные.ПараметрыЗапроса);
	
	КэшДанных.Вставить("ВспомогательныеДанныеСоединенияСтруктурыСДанными" + ПостфиксКэша, ВспомогательныеДанныеРасчетаЯчеек);
	
	Возврат ВспомогательныеДанныеРасчетаЯчеек;
	
КонецФункции

Процедура РазбитьЯчейкиПоПериодам(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы)
	
	Если Не ОписаниеОтчета.Периодичности.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений 	= ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики 	= ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик 	= ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТаблицаПериодов 		= ВспомогательныеДанные.ТаблицаПериодов;

	ТекстПолей = СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодов");
	
	ТекстПериодичностей = "";
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстПериодичностей = ТекстПериодичностей + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить"" ТОГДА
		|		ТаблицаПериодов.Период" + Измерение + "Отчет
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Период" + Измерение + ",
		|";
		ТекстПериодичностей = ТекстПериодичностей + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить"" ТОГДА
		|		ТаблицаПериодов.Период" + Измерение + "Соединение
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Период" + Измерение + "Соединение,
		|";
		ТекстПериодичностей = ТекстПериодичностей + "
		|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПериод" + Измерение + " = ""заполнить"" ТОГДА
		|		""отобрать""
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК ФлагПериод" + Измерение + ",
		|";
	КонецЦикла;
	
	ТекстСоединенияПериодичностей = "";
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстСоединенияПериодичностей = ТекстСоединенияПериодичностей + "
		|	И ( СтруктураЯчеек.ФлагПериод" + Измерение + " = """"
		|			ИЛИ
		|			СтруктураЯчеек.ВыражениеПериода" + Измерение + " = -1
		|			ИЛИ
		|			(СтруктураЯчеек.ВыражениеПериода" + Измерение + " > -1
		|				И ДобавитьКДате(&НачалоПериода, " + Измерение + ", СтруктураЯчеек.ВыражениеПериода" + Измерение + ") = 
		|					ТаблицаПериодов.Период" + Измерение + "Отчет)
		|		)";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ 
	|
	|";
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаПериодов.Период" + Периодичность + "Отчет,
		|	ТаблицаПериодов.Период" + Периодичность + "Соединение,";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО ИД_ИсточникаПериодовГруппировки
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|
	|	СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка, СтруктураЯчеек.ИД_ИсточникаПериодов
	|
	|ПОМЕСТИТЬ ИсточникиПериодаСУчетомПодчиненных 
	|ИЗ СтруктураЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|" + СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		ТекстПериодичностей + 
		СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		"СтруктураЯчеек.ИД_Источника
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСПериодами
	|
	|ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиПериодаСУчетомПодчиненных
	|	
	|ПО СтруктураЯчеек.Строка = ИсточникиПериодаСУчетомПодчиненных.Строка
	|И СтруктураЯчеек.Колонка = ИсточникиПериодаСУчетомПодчиненных.Колонка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов
	|	
	|ПО ИсточникиПериодаСУчетомПодчиненных.ИД_ИсточникаПериодов = ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	| " + ТекстСоединенияПериодичностей + " 
	|
	|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
	|	СтруктураЯчеек.ВидЭлемента В
	|		(	
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|" + СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") + 
		ТекстПериодичностей + 
		СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
		"СтруктураЯчеек.ИД_Источника
	|
	|ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов
	|	
	|ПО СтруктураЯчеек.ИД_ИсточникаПериодов = ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	| " + ТекстСоединенияПериодичностей + " 
	|
	|ГДЕ (СтруктураЯчеек.ОсновнойЭлемент
	|			И НЕ СтруктураЯчеек.ВидЭлемента В
	|			(	
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|			)
	|	)
	|	ИЛИ Не СтруктураЯчеек.ОсновнойЭлемент
	|
	|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка
	|
	|; ";
	
	ИмяТаблицы = "СтруктураЯчеекСПериодами";
	
КонецПроцедуры

Процедура ДобавитьВЗапросОтборЗаписейПоНФП(ТекстЗапроса, ВспомогательныеДанные, СтруктураЯчеек, ОтборИзмеренийНФП, НужныеРесурсы, ИмяТаблицыДанных)
	
	Если ОтборИзмеренийНФП = Неопределено
		ИЛИ Не ОтборИзмеренийНФП.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	
	ТекстИндексов = "ИНДЕКСИРОВАТЬ ПО НефинансовыйПоказатель";
	
	//Первичный фильтр значений измерений
	ИменаИсточники = ОтборИзмеренийНФП.Скопировать(,"ИмяИзмерения");
	ИменаИсточники.Свернуть("ИмяИзмерения");
	Для Каждого СтрокаИмени из ИменаИсточники Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ " + СтрокаИмени.ИмяИзмерения + " ПОМЕСТИТЬ Список" + СтрокаИмени.ИмяИзмерения + " 
		|ИЗ ТаблицаДанных ГДЕ ИД_Источника В (&СписокИсточников" + СтрокаИмени.ИмяИзмерения + ")
		|
		|;";
		
		НайденныеСтроки = ОтборИзмеренийНФП.НайтиСтроки(Новый Структура("ИмяИзмерения", СтрокаИмени.ИмяИзмерения));
		Список = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если Список.НайтиПоЗначению(НайденнаяСтрока.АдресОтбораЗаполненияЗначений) = Неопределено Тогда
				Список.Добавить(НайденнаяСтрока.АдресОтбораЗаполненияЗначений);
			КонецЕсли;
		КонецЦикла;
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить("СписокИсточников" + СтрокаИмени.ИмяИзмерения, Список);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.РедактируемоеЗначение,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|" + 	СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
	Для Каждого ПолеРесурса из НужныеРесурсы Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ТаблицаДанных.ИндексНФП,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание
	|
	|ПОМЕСТИТЬ ТаблицаДанныхБезЛишнихАналитик
	|
	|ИЗ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
	|
	|ГДЕ ТаблицаДанных.НефинансовыйПоказатель В (&НефинансовыеПоказателиБезОтбораИПустой)
	|
	|";
	
	ИменаИсточники = ОтборИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель");
	ИменаИсточники.Свернуть("НефинансовыйПоказатель");
	
	НефинансовыеПоказатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураЯчеек.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	НефинансовыеПоказатели = ОбщегоНазначенияКлиентСервер.СократитьМассив(НефинансовыеПоказатели, ИменаИсточники.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	
	ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НефинансовыеПоказателиБезОтбораИПустой", НефинансовыеПоказатели);
	
	ИменаИзмерений = ОтборИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель, ИмяИзмерения");
	ИменаИзмерений.Свернуть("НефинансовыйПоказатель, ИмяИзмерения");
	
	Для Каждого СтрокаИмени из ИменаИсточники Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанных.ИД_Источника,
		|	ТаблицаДанных.СтатьяБюджетов,
		|	ТаблицаДанных.ПоказательБюджетов,
		|	ТаблицаДанных.РедактируемоеЗначение,
		|	ТаблицаДанных.НефинансовыйПоказатель,
		|" + 	СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
		СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
		СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
		Для Каждого ПолеРесурса из НужныеРесурсы Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
			|";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|	ТаблицаДанных.ИндексНФП,
		|	ТаблицаДанных.НомерПоПорядку,
		|	ТаблицаДанных.Примечание
		|
		|ИЗ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
		|
		|ГДЕ ТаблицаДанных.НефинансовыйПоказатель = &НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель) + "
		|";
		
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель), СтрокаИмени.НефинансовыйПоказатель);
		Записи = ИменаИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		
		Для Каждого Запись из Записи Цикл
			ТекстЗапроса = ТекстЗапроса + " И ТаблицаДанных." + Запись.ИмяИзмерения + 
			" В (ВЫБРАТЬ " + Запись.ИмяИзмерения + " ИЗ Список" + Запись.ИмяИзмерения + ")
			|";
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|//%ТекстИндексов%
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанныхБезЛишнихАналитик";
	
КонецПроцедуры

Процедура ДополнитьНедостающуюАналитикуВНФП(ТекстЗапроса, ВспомогательныеДанные, ЗаполнениеОтсутствующихИзмеренийНФП, 
																		ИсточникиЗначенийИзмерений, НужныеРесурсы, ИмяТаблицыДанных)
	
	Если ЗаполнениеОтсутствующихИзмеренийНФП = Неопределено
		ИЛИ Не ЗаполнениеОтсутствующихИзмеренийНФП.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзмерений 		= ВспомогательныеДанные.ТекстИзмерений;
	ТекстАналитики 		= ВспомогательныеДанные.ТекстАналитики;
	ТекстПериодов 		= ВспомогательныеДанные.ТекстПериодов;
	ТаблицаИзмеренийНФП = ВспомогательныеДанные.ТаблицаИзмеренийНФП;
	
	ТекстИндексов = "ИНДЕКСИРОВАТЬ ПО НефинансовыйПоказатель";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ТекстИндексов%", ТекстИндексов);
	
	ИменаИсточники = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель");
	ИменаИсточники.Свернуть("НефинансовыйПоказатель");
	ИменаИсточники.Колонки.Добавить("ИмяТаблицыЗаполненияДанных");
	ИменаИсточники.Колонки.Добавить("ИзмеренияТаблицы");
	
	ИменаИзмерений = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель, ИмяИзмерения");
	ИменаИзмерений.Свернуть("НефинансовыйПоказатель, ИмяИзмерения");
	
	КэшТаблиц = Новый Соответствие;
	
	Для Каждого СтрокаИмени из ИменаИсточники Цикл
		
		ВсеИзмерения = ВспомогательныеДанные.ВсеИзмерения;
		МассивИзмерений = Новый Массив;
		
		Для Каждого Измерение из ВсеИзмерения Цикл
			//Если это измерение заполняемое - то в соединении не участвует
			НайденныеСтроки = ЗаполнениеОтсутствующихИзмеренийНФП.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение));
			Требуется = Истина;
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НефинансовыйПоказатель = СтрокаИмени.НефинансовыйПоказатель Тогда
					Требуется = Истина;
					Прервать;
				КонецЕсли;
				Если НайденнаяСтрока.НефинансовыйПоказатель <> СтрокаИмени.НефинансовыйПоказатель Тогда
					Требуется = Ложь;
				КонецЕсли;
			КонецЦикла;
			//Если НФП может быть поставщиком значений измерения - то используем все значения НФП
			Если Требуется И ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель, Измерение", 
																		СтрокаИмени.НефинансовыйПоказатель, Измерение)).Количество() Тогда
				Требуется = Ложь;
			КонецЕсли;
			Если Не Требуется Тогда
				Продолжить;
			КонецЕсли;
			МассивИзмерений.Добавить(Измерение);
		КонецЦикла;
		
		СтрокаИменаИзмерений = СтрСоединить(МассивИзмерений, ",");
		АдресИсточников = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		НужныеИсточники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АдресИсточников.ВыгрузитьКолонку("АдресИсточникаЗаполненияЗначений"));
		
		КлючПоиска = СтрокаИменаИзмерений + СтрСоединить(НужныеИсточники, ",");
		
		ПараметрыТаблицы = КэшТаблиц[КлючПоиска];
		Если ПараметрыТаблицы = Неопределено Тогда
			
			ИмяПараметра = "Список" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить(ИмяПараметра, НужныеИсточники);
			
			ИмяТаблицы = "ТаблицаОтобранныхИзмерений" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ " + СтрокаИменаИзмерений + " ПОМЕСТИТЬ " + ИмяТаблицы + "
			|ИЗ " + ИмяТаблицыДанных + " ГДЕ ИД_Источника В (&" + ИмяПараметра + ")
			|;";
			
			ПараметрыТаблицы = Новый Структура("ИмяТаблицы, МассивИзмерений", ИмяТаблицы, МассивИзмерений);
			КэшТаблиц.Вставить(КлючПоиска, ПараметрыТаблицы);
			
		КонецЕсли;
		
		СтрокаИмени.ИмяТаблицыЗаполненияДанных = ПараметрыТаблицы.ИмяТаблицы;
		СтрокаИмени.ИзмеренияТаблицы = ПараметрыТаблицы.МассивИзмерений;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.РедактируемоеЗначение,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|	ТаблицаДанных.ИндексНФП, 
	|" + 	СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
	Для Каждого ПолеРесурса из НужныеРесурсы Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание
	|
	|ПОМЕСТИТЬ ТаблицаДанныхСЗаполненнымиАналитиками
	|
	|ИЗ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
	|
	|ГДЕ ТаблицаДанных.НефинансовыйПоказатель = Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)
	|
	|";
	
	Для Каждого СтрокаИмени из ИменаИсточники Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанных.ИД_Источника,
		|	ТаблицаДанных.СтатьяБюджетов,
		|	ТаблицаДанных.ПоказательБюджетов,
		|	ТаблицаДанных.РедактируемоеЗначение,
		|	ТаблицаДанных.НефинансовыйПоказатель,
		|	ТаблицаДанных.ИндексНФП, 
		|";
		
		ИзмеренияЗаполнения = 
		СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных") +
		СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных") +
		СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
		МассивИзмерений = Новый Массив;
		ЗаполняемыеИмена = ИменаИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		Для Каждого СтрокаЗаполнения из ЗаполняемыеИмена Цикл
			ИзмеренияЗаполнения = СтрЗаменить(ИзмеренияЗаполнения, 
							"ТаблицаДанных." + СтрокаЗаполнения.ИмяИзмерения, "ТаблицаЗаполнения." + СтрокаЗаполнения.ИмяИзмерения);
			МассивИзмерений.Добавить(СтрокаЗаполнения.ИмяИзмерения);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ИзмеренияЗаполнения;
		Для Каждого ПолеРесурса из НужныеРесурсы Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ",
			|";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|	ТаблицаДанных.НомерПоПорядку,
		|	ТаблицаДанных.Примечание
		|
		|ИЗ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + СтрокаИмени.ИмяТаблицыЗаполненияДанных + " КАК ТаблицаЗаполнения 
		|ПО ";
		
		ОставшиесяИзмерения = ОбщегоНазначенияКлиентСервер.СократитьМассив(СтрокаИмени.ИзмеренияТаблицы, МассивИзмерений);
		Если НЕ ОставшиесяИзмерения.Количество() Тогда
			ТекстЗапроса = ТекстЗапроса + " ИСТИНА ";
		Иначе
			Первый = Истина;
			Для Каждого Измерение из ОставшиесяИзмерения Цикл
				Если Не Первый Тогда
					ТекстЗапроса = ТекстЗапроса + " И ";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + " ТаблицаДанных." + Измерение + " = ТаблицаЗаполнения." + Измерение + "
				|";
				Первый = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ГДЕ ТаблицаДанных.НефинансовыйПоказатель = &НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель) + "
		|";
		
		ИмяНФП = "НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить(ИмяНФП, СтрокаИмени.НефинансовыйПоказатель);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|//%ТекстИндексов%
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанныхСЗаполненнымиАналитиками";
	
КонецПроцедуры

Функция Подключаемый_ТаблицаИзМенеджера(Запрос, ИмяТаблицы, Порядок = "МинимумНомерПоПорядку, ПорядокРасчетаОперанда") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ * ИЗ " + ИмяТаблицы;
	
	Если Порядок <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО 
		|	" + Порядок;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьИсточникВСтруктуруЯчеек(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ИмяТаблицыСИзмерениями)
	
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений 	= ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики 	= ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик 	= ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстПериодовСоединение = ВспомогательныеДанные.ТекстПериодовСоединение;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ВЫБРАТЬ 
	|" + 	СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодовСоединение, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") + "
	|	ТаблицаИсточниковИзмерений.ИД_Источника КАК ИД_Источника
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСИсточниками
	|
	|ИЗ " + ИмяТаблицыСИзмерениями + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсточниковИзмерений
	|
	|ПО СтруктураЯчеек.Строка = ТаблицаИсточниковИзмерений.Строка
	|	И СтруктураЯчеек.Колонка = ТаблицаИсточниковИзмерений.Колонка
	|
	|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
	|	СтруктураЯчеек.ВидЭлемента В
	|		(	
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|" + 	СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
			СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстПериодовСоединение, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек") +
			СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") + "
	|	СтруктураЯчеек.ИД_Источника
	|
	|ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ГДЕ (СтруктураЯчеек.ОсновнойЭлемент
	|			И НЕ СтруктураЯчеек.ВидЭлемента В
	|			(	
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|			)
	|	)
	|	ИЛИ Не СтруктураЯчеек.ОсновнойЭлемент
	|
	|ИНДЕКСИРОВАТЬ ПО ИД_Источника
	|
	|;
	|";
	
	ИмяТаблицы = "СтруктураЯчеекСИсточниками";
	
КонецПроцедуры

Функция ПодготовитьТаблицуЗначенийИзмеренийПоРодителям(ТекстЗапроса, СтруктураЯчеек, ВспомогательныеДанные)
	
	ПараметрыПрочихСоединений = Новый Структура("Документ, Прочие", Новый Массив, Новый Массив);
	Для Каждого Колонка из ВспомогательныеДанные.ВсеИзмерения Цикл
		
		Если СтруктураЯчеек.Найти("прочие", "Флаг" + Колонка) <> Неопределено Тогда
			ПараметрыПрочихСоединений.Прочие.Добавить(Колонка);
		КонецЕсли;
		
		Если СтруктураЯчеек.Найти("документ", "Флаг" + Колонка) <> Неопределено Тогда
			ПараметрыПрочихСоединений.Документ.Добавить(Колонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыПрочихСоединений.Прочие.Количество()
		И Не  ПараметрыПрочихСоединений.Документ.Количество() Тогда
		Возврат ПараметрыПрочихСоединений;
	КонецЕсли;
	
	Первый = Истина;
	Для Каждого Измерение из ПараметрыПрочихСоединений.Прочие Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Родитель" + Измерение + " КАК Родитель, " + Измерение + " КАК Значение
		|" + ?(Первый, "ПОМЕСТИТЬ ТаблицаЗначенийПоРодителям", "") + "
		|
		|ИЗ СтруктураЯчеек
		|
		|ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|
		|" + ?(ПараметрыПрочихСоединений.Документ.Найти("Измерение") <> Неопределено, "
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ СтруктураЯчеек.Родитель" + Измерение + ", ТаблицаДанных." + Измерение + " ИЗ
		|
		| СтруктураЯчеек
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных ПО СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
		|
		| ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.ИД_Источника = ""документ"" И СтруктураЯчеек.Флаг" + Измерение + " = ""документ""
		|
		|", "");
		
		Первый = Ложь;
		
	КонецЦикла;
	
	Если Не Первый Тогда
		ТекстЗапроса = ТекстЗапроса + " ИНДЕКСИРОВАТЬ ПО Родитель
		|;";
	КонецЕсли;
	
	Первый = Истина;
	Для Каждого Измерение из ПараметрыПрочихСоединений.Документ Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Родитель" + Измерение + " КАК Родитель, " + Измерение + " КАК Значение
		|" + ?(Первый, "ПОМЕСТИТЬ ТаблицаЗначенийПоРодителямДокумент", "") + "
		|
		|ИЗ СтруктураЯчеек
		|
		|ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|
		|";
		
		Первый = Ложь;
		
	КонецЦикла;
	
	Если Не Первый Тогда
		ТекстЗапроса = ТекстЗапроса + " ИНДЕКСИРОВАТЬ ПО Родитель
		|;";
	КонецЕсли;
	
	Возврат ПараметрыПрочихСоединений;
	
КонецФункции

Функция ПодготовитьСоответствиеВидовАналитикСтатьямИПоказателямБюджета(ВидыАналитик, СтатьиИПоказателиБюджетов = Неопределено)
	
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Новый Соответствие();
		
	СтатьиБюджетов = Неопределено;
	ПоказателиБюджетов = Неопределено;
	НефинансовыеПоказатели = Неопределено;
		
	Если Не СтатьиИПоказателиБюджетов = Неопределено Тогда
		СтатьиИПоказателиБюджетов.Свойство("СтатьиБюджетов", СтатьиБюджетов);
		СтатьиИПоказателиБюджетов.Свойство("ПоказателиБюджетов", ПоказателиБюджетов);
		СтатьиИПоказателиБюджетов.Свойство("НефинансовыеПоказатели", НефинансовыеПоказатели);
	КонецЕсли;
			
	Запрос = Новый Запрос;
	ШаблонЗапросаПоСтатьям = "ВЫБРАТЬ
	                         |	СтатьиБюджетов.Ссылка КАК СтатьяБюджетов,
	                         |	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики,
	                         |	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК ПоказательБюджетов,
	                         |	ЗНАЧЕНИЕ(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка) КАК НефинансовыйПоказательБюджетов
	                         |ИЗ
	                         |	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	                         |ГДЕ
	                         |	СтатьиБюджетов.Ссылка В(&СтатьиБюджетов)
	                         |	И СтатьиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) " 
							 
							 + ?(СтатьиБюджетов = Неопределено, "", " И СтатьиБюджетов.ВидАналитики1 В(&ВидыАналитик)");
				   
	ШаблонЗапросаПоПоказателям = "ВЫБРАТЬ
	                             |	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК Поле1,
	                             |	ПоказателиБюджетов.ВидАналитики1,
	                             |	ПоказателиБюджетов.Ссылка,
	                             |	ЗНАЧЕНИЕ(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка) КАК Поле2
	                             |ИЗ
	                             |	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	                             |ГДЕ
	                             |	ПоказателиБюджетов.Ссылка В(&ПоказателиБюджетов)
	                             |	И ПоказателиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) "
								 
	                             + ?(ПоказателиБюджетов = Неопределено, "", " И ПоказателиБюджетов.ВидАналитики1 В(&ВидыАналитик)");
				   
	ШаблонЗапросаПоНФП = "ВЫБРАТЬ
	                     |	ЗНАЧЕНИЕ(Справочник.СтатьиБюджетов.ПустаяСсылка) КАК Поле1,
	                     |	НефинансовыеПоказателиБюджетов.ВидАналитики1,
	                     |	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК Поле2,
	                     |	НефинансовыеПоказателиБюджетов.Ссылка
	                     |ИЗ
	                     |	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
	                     |ГДЕ
	                     |	НефинансовыеПоказателиБюджетов.Ссылка В(&НефинансовыеПоказателиБюджетов)
	                     |	И НефинансовыеПоказателиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) "
						 
	                     + ?(НефинансовыеПоказатели = Неопределено, "", " И НефинансовыеПоказателиБюджетов.ВидАналитики1 В(&ВидыАналитик)");							 
						 					   
	ТекстЗапроса = "";
	Для Сч=1 По 6 Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоСтатьям, "ВидАналитики1", "ВидАналитики" + Сч) + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Для Сч=1 По 6 Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоПоказателям, "ВидАналитики1", "ВидАналитики" + Сч) + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Для Сч=1 По 6 Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоНФП, "ВидАналитики1", "ВидАналитики" + Сч) + ?(Сч = 6, "", " ОБЪЕДИНИТЬ ВСЕ ");
	КонецЦикла;
			   
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СтатьиБюджетов", СтатьиБюджетов);
	Запрос.УстановитьПараметр("ПоказателиБюджетов", ПоказателиБюджетов);
	Запрос.УстановитьПараметр("НефинансовыеПоказателиБюджетов", НефинансовыеПоказатели);
	Запрос.УстановитьПараметр("ВидыАналитик" , ВидыАналитик);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВидАналитики Из ВидыАналитик Цикл
		МассивСтатейБюджетов = Новый Массив();
		МассивПоказателейБюджетов = Новый Массив();
		МассивНФП = Новый Массив();
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ВидАналитики",ВидАналитики);
		Строки = Результат.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() > 0 Тогда	
			Для Каждого Стр Из Строки Цикл
				Если ЗначениеЗаполнено(Стр.СтатьяБюджетов) Тогда
					МассивСтатейБюджетов.Добавить(Стр.СтатьяБюджетов);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.ПоказательБюджетов) Тогда
					МассивПоказателейБюджетов.Добавить(Стр.ПоказательБюджетов);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.НефинансовыйПоказательБюджетов) Тогда
					МассивНФП.Добавить(Стр.НефинансовыйПоказательБюджетов);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияСтатейПоказателей = Новый Структура();
		ЗначенияСтатейПоказателей.Вставить("СтатьиБюджетов", МассивСтатейБюджетов);
		ЗначенияСтатейПоказателей.Вставить("ПоказателиБюджетов", МассивПоказателейБюджетов);
		ЗначенияСтатейПоказателей.Вставить("НефинансовыеПоказатели", МассивПоказателейБюджетов);
		
		СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Вставить(ВидАналитики, ЗначенияСтатейПоказателей);
	КонецЦикла;
					
	Возврат СоответствиеВидовАналитикСтатьямИПоказателямБюджета;
	
КонецФункции

Процедура ВыполнитьСоединениеСтруктурыСДанными(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ВспомогательныеПараметры, РежимФормирования)
	
	ИсточникиЗначенийИзмерений 							= ВспомогательныеПараметры.ИсточникиЗначенийИзмерений;
	ИмяТаблицыДанных 									= ВспомогательныеПараметры.ИмяТаблицыДанных;
	ПоляИсточников 										= ВспомогательныеПараметры.ПоляИсточников;
	ПараметрыПрочихСоединений 							= ВспомогательныеПараметры.ПараметрыПрочихСоединений;
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = ВспомогательныеПараметры.СоответствиеВидовАналитикСтатьямИПоказателямБюджета;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ТекстИндексов%", "ИНДЕКСИРОВАТЬ ПО ИД_Источника");
	ТекстПериодов = ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов = ВспомогательныеДанные.ТекстФлагиПериодов;
	
	//Подготовка структуры ячеек с данными
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ КАК СтатьяБюджетов,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ КАК ПоказательБюджетов,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.НефинансовыйПоказатель,
	|	СтруктураЯчеек.РедактируемоеЗначение,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.РасчетЗаполнение,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|";
	
	ТекстВалюта = "";
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
			|			ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения)
			|		) > 1 ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ 
			|		МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения))
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|";
		ИначеЕсли Измерение = "Валюта" Тогда
			ТекстВалюта = "
			|ВЫБОР 
			|	КОГДА СтруктураЯчеек.Валюта = Значение(Справочник.Валюты.ПустаяСсылка) И
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
			|			ВЫБОР 
			|				КОГДА ЕстьNULL(ТаблицаДанных.ИД_Источника, """") = ""документ""
			|						ИЛИ (СтруктураЯчеек.ФлагВалюта = ""заполнить"" И НЕ ТаблицаДанных.Валюта ЕСТЬ NULL)
			|				ТОГДА ТаблицаДанных.Валюта 
			|			КОНЕЦ
			|		) = 1 ТОГДА 
			|			МАКСИМУМ(ВЫБОР 
			|				КОГДА ЕстьNULL(ТаблицаДанных.ИД_Источника, """") = ""документ""
			|						ИЛИ (СтруктураЯчеек.ФлагВалюта = ""заполнить"" И НЕ ТаблицаДанных.Валюта ЕСТЬ NULL)
			|				ТОГДА ТаблицаДанных.Валюта 
			|			КОНЕЦ)
			|	ИНАЧЕ
			|		СтруктураЯчеек.Валюта
			|	КОНЕЦ
			|
			|";
			ТекстЗапроса = ТекстЗапроса + ТекстВалюта + " КАК Валюта,
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить"")
			|			И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ КАК " + Измерение + ",
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек");
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
		|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ КАК " + ИмяПоля + ",
		|";
	КонецЦикла;
	
	Для Каждого ПолеРесурса из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		Если СтрНайти(ПолеРесурса.ИмяРесурса, "Сумма") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ЕстьNULL(ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ", 0)) КАК " + ПолеРесурса.ИмяРесурса + ",
			|";
		ИначеЕсли СтрНайти(ПолеРесурса.ИмяРесурса, "Количество") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктураЯчеек.ЕдиницаИзмерения) = 1 ТОГДА
			|		СУММА(ЕстьNULL(ТаблицаДанных." + ПолеРесурса.ИмяРесурса + ", 0)) ИНАЧЕ 0 КОНЕЦ КАК " + ПолеРесурса.ИмяРесурса + ",
			|";
		ИначеЕсли СтрНайти(ПолеРесурса.ИмяРесурса, "ЗначениеПоказателя") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент ТОГДА
			|		ВЫБОР
			|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.ИндексНФП) <= 1 ТОГДА
			|				МАКСИМУМ(ЕстьNULL(ТаблицаДанных.ЗначениеПоказателя, 0))
			|			ИНАЧЕ
			|				""#Знач"" 
			|		КОНЕЦ
			|	ИНАЧЕ
			|		МАКСИМУМ(ЕстьNULL(ТаблицаДанных.ЗначениеПоказателя, 0))
			|	КОНЕЦ КАК ЗначениеПоказателя,
			|
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	МИНИМУМ(ТаблицаДанных.НомерПоПорядку) КАК МинимумНомерПоПорядку,
	|	МАКСИМУМ(ТаблицаДанных.Примечание),
	|	Ложь КАК РассчитанСумма,
	|	Ложь КАК РассчитанСуммаВал,
	|	Ложь КАК РассчитанКоличество,
	|	Ложь КАК РассчитанЗначение,
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаДанных.ИД_Источника ЕСТЬ NULL ТОГДА 
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ) КАК СтрокаДанныхСопоставлена
	|
	|" + ?(ИсточникиЗначенийИзмерений.Количество(), 
				"ПОМЕСТИТЬ СтруктураЯчеекСДанными", "") + "
	|
	|	ИЗ " + ИмяТаблицы + " КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
	|
	|	ПО СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
	|";
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	(СтруктураЯчеек.ФлагПериод" + Измерение + " = ""отобрать""
		|			И СтруктураЯчеек.Период" + Измерение + "Соединение = ТаблицаДанных.Период" + Измерение + ")
		|		ИЛИ
		|		(СтруктураЯчеек.ФлагПериод" + Измерение + " <> ""отобрать""
		|			И ТаблицаДанных.Период" + Измерение + " = НЕОПРЕДЕЛЕНО)	)
		|";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	И (НЕ СтруктураЯчеек.ФлагСтатьяБюджетов = ""отобрать""
	|		ИЛИ СтруктураЯчеек.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов)
	|
	|	И (НЕ СтруктураЯчеек.ФлагПоказательБюджетов = ""отобрать""
	|		ИЛИ СтруктураЯчеек.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов)
	|	
	|	И (НЕ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
	|		ИЛИ СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель)
	|
	|	И (НЕ СтруктураЯчеек.ФлагРедактируемоеЗначение = ""отобрать""
	|		ИЛИ СтруктураЯчеек.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение)
	|	";
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Измерение = "Сценарий" 
			И РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		ИЛИ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать"" И СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
			|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	И (	СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""";
		Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		ИЛИ	(СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ""
			|				И НЕ ТаблицаДанных." + ИмяПоля + " В 
			|							(ВЫБРАТЬ ТаблицаЗначенийПоРодителямДокумент.Значение ИЗ ТаблицаЗначенийПоРодителямДокумент
			|							ГДЕ ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель" + ИмяПоля + ")
			|	)	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЛИ (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""отобрать"" И
		|				(СтруктураЯчеек." + ИмяПоля + " = ТаблицаДанных." + ИмяПоля + 
			?(РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение, " ИЛИ (СтруктураЯчеек.РасчетЗаполнение = ""Заполнение""" 
				+ " И НЕ ТаблицаДанных.СтатьяБюджетов В (&СтатьиБюджетовПо_" + ИмяПоля + " ) "
				+ " И НЕ ТаблицаДанных.ПоказательБюджетов В (&ПоказателиБюджетовПо_" + ИмяПоля + " ) " 
				+ " И НЕ ТаблицаДанных.НефинансовыйПоказатель В (&НФППо_" + ИмяПоля + " ))))", "))" );			
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение 
			И Не СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Неопределено Тогда
			
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("СтатьиБюджетовПо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["СтатьиБюджетов"]);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("ПоказателиБюджетовПо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["ПоказателиБюджетов"]);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НФППо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["НефинансовыеПоказатели"]);
		КонецЕсли;
		Если ПараметрыПрочихСоединений.Прочие.Найти(ИмяПоля) <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		ИЛИ ( СтруктураЯчеек.Флаг" + ИмяПоля + " = ""прочие"" 
			|				И НЕ ТаблицаДанных." + ИмяПоля + " В 
			|							(ВЫБРАТЬ ТаблицаЗначенийПоРодителям.Значение 
			|							 ИЗ ТаблицаЗначенийПоРодителям 
			|							 ГДЕ ТаблицаЗначенийПоРодителям.Родитель = СтруктураЯчеек.Родитель" + ИмяПоля + ")
			|			)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = """")
		|";
	КонецЦикла;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		МассивСтрокДобавляемыхУсловий = Новый Массив;
		ШаблонТекстаУсловийНаСкрытиеПустыхАналитик = " 
		|ГДЕ 
		|	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент И ТаблицаДанных.ИД_Источника ЕСТЬ NULL 
		|	ТОГДА %ДобавляемыеУсловия%
		|	ИНАЧЕ ИСТИНА 
		|	КОНЕЦ";
		
		Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			ДобавляемоеУсловие = "(НЕ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить"" ИЛИ СтруктураЯчеек." + ИмяПоля + " <> %ПустоеЗначение%)";
				
			ПустоеЗначение = Измерение.ТипЗначения.ПривестиЗначение(Неопределено);
			ПустоеЗначениеСтрока = "Неопределено";
			Если ПустоеЗначение <> Неопределено Тогда
				ПустоеЗначениеСтрока = "ЗНАЧЕНИЕ("+ОбщегоНазначения.ИмяТаблицыПоСсылке(ПустоеЗначение)+".ПустаяСсылка)";
			КонецЕсли;
			
			ДобавляемоеУсловие = СтрЗаменить(ДобавляемоеУсловие, "%ПустоеЗначение%", ПустоеЗначениеСтрока);
			МассивСтрокДобавляемыхУсловий.Добавить(ДобавляемоеУсловие);
		КонецЦикла;
		
		Если МассивСтрокДобавляемыхУсловий.Количество() > 0 Тогда
			СтрокаДобавляемыхУсловий = СтрСоединить(МассивСтрокДобавляемыхУсловий, Символы.ПС + "И ");
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонТекстаУсловийНаСкрытиеПустыхАналитик, "%ДобавляемыеУсловия%", СтрокаДобавляемыхУсловий);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ,
	|	СтруктураЯчеек.НефинансовыйПоказатель,
	|	СтруктураЯчеек.РедактируемоеЗначение,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.РасчетЗаполнение,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда," + ?(ПоляИсточников.Найти("ЗначениеПоказателя") <> Неопределено, "
	|	ВЫБОР КОГДА НЕ СтруктураЯчеек.ОсновнойЭлемент
	|		И СтруктураЯчеек.ВидОперанда = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель) ТОГДА
	|		ТаблицаДанных.ИндексНФП
	|	КОНЕЦ,", "");
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		ИначеЕсли Измерение = "Валюта" Тогда
			ТекстЗапроса = ТекстЗапроса + "СтруктураЯчеек.Валюта, ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ,
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
		|		И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ,
		|";
	КонецЦикла;
	
	Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = "Период" + Периодичность;
		ТекстЗапроса = ТекстЗапроса + "
		|	СтруктураЯчеек." + ИмяПериода + ",";
	КонецЦикла;
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Если ИсточникиЗначенийИзмерений.Количество() Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		| ИНДЕКСИРОВАТЬ ПО Строка, Колонка" + ?(ВспомогательныеДанные.ВсеИзмерения.Количество(), ", ", "") + 
			СтрСоединить(ВспомогательныеДанные.ВсеИзмерения, ",");
			
		ИмяТаблицы = "СтруктураЯчеекСДанными";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО ИндексСтроки";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьФильтрИзмеренийПоИсточникамЗначений(ТекстЗапроса, ИсточникиЗначенийИзмерений, ИмяТаблицы, ИмяТаблицыДанных)
	
	Если Не ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстФинальногоЗапроса = 
	"ВЫБРАТЬ * ИЗ " + ИмяТаблицы + "
	| ГДЕ ОсновнойЭлемент = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ * ИЗ " + ИмяТаблицы + "
	| ГДЕ ОсновнойЭлемент = ИСТИНА
	|	И (НЕ СтрокаДанныхСопоставлена ИЛИ РедактируемоеЗначение <> """" ИЛИ (
	|		ИСТИНА
	|";
	
	МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("Измерение"));
	Первый = Истина;
	Для Каждого Измерение из МассивИзмерений Цикл
		
		Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", Измерение)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ?(Первый, ";
		|", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Строка, Колонка, " + Измерение + " КАК Значение 
		|" + ?(Первый, "ПОМЕСТИТЬ ТаблицаФильтраИзмерений", "") + "
		|ИЗ ТаблицаИсточниковИзмеренийСИменемИзмерения КАК ТаблицаИсточников
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыДанных + " КАК ТаблицаДанных
		|ПО ТаблицаИсточников.ИД_Источника = ТаблицаДанных.ИД_Источника
		|И ТаблицаИсточников.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов
		|И (ТаблицаИсточников.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов
		|   ИЛИ ТаблицаИсточников.ПоказательБюджетов <> ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
		|И ТаблицаИсточников.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
		|И ТаблицаИсточников.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение
		|
		|ГДЕ ТаблицаИсточников.Измерение = """ + Измерение + """
		|
		|";
		
		ТекстФинальногоЗапроса = ТекстФинальногоЗапроса + " И (
		|НЕ (Строка, Колонка, """ + Измерение + """) В (ВЫБРАТЬ Строка, Колонка, Измерение ИЗ ТаблицаИсточниковИзмеренийСИменемИзмерения)
		|ИЛИ (Строка, Колонка, " + Измерение + ") В (ВЫБРАТЬ Строка, Колонка, Значение ИЗ ТаблицаФильтраИзмерений)
		| ) ";
		
		Первый = Ложь;
	КонецЦикла;
	
	Если Первый Тогда
		ТекстЗапроса = ТекстЗапроса + ";
		|" + ТекстФинальногоЗапроса + ") )";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка, Значение ;
		|" + ТекстФинальногоЗапроса + ") )";
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруЯчеекСДанными(ОписаниеОтчета, ПараметрыДанных,
										НастройкиСтруктурыЯчеек, ДанныеИсточников,
										РежимФормирования, КэшДанных)
	
	НачалоПериода 		= ПараметрыДанных.НачалоПериода;
	КонецПериода 		= ПараметрыДанных.КонецПериода;
	ГраницаФактДанных 	= ПараметрыДанных.ГраницаФактДанных;
	
	ВспомогательныеДанные = ВспомогательныеДанныеРасчетаДанныхЯчеек(ПараметрыДанных,
																	ОписаниеОтчета, НастройкиСтруктурыЯчеек, 
																	КэшДанных, РежимФормирования);
	
	ИсточникиЗначенийИзмерений 	= НастройкиСтруктурыЯчеек.ИсточникиЗначенийИзмерений;
	СтруктураЯчеек 				= НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	ТаблицаПериодов				= ВспомогательныеДанные.ТаблицаПериодов;
	ПараметрыЗапроса			= ВспомогательныеДанные.ПараметрыЗапроса;
	ТекстЗапроса				= ВспомогательныеДанные.ТекстЗапроса;
	
	Запрос = Новый Запрос();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек);
	Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеИсточников);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("ТаблицаПоИзмерениям", ИсточникиЗначенийИзмерений);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
	Если ПараметрыДанных.Свойство("СтрокиОснования") Тогда
		Запрос.УстановитьПараметр("СтрокиОснования", ПараметрыДанных.СтрокиОснования);
	КонецЕсли;
	Для Каждого КлючИЗначение из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("СуммаВал");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Значение");
	
	Таблица.Колонки.Добавить("ИмяОбластиСумма");
	Таблица.Колонки.Добавить("ИмяОбластиКоличество");
	Таблица.Колонки.Добавить("ИмяОбластиЗначение");
	
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент, ВидОперанда");
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	Таблица.Колонки.Добавить("ОтборЯчейки");
	
	Для Каждого Индекс из НастройкиСтруктурыЯчеек.ИндексыСтруктурыЯчеек Цикл
		Таблица.Индексы.Добавить(Индекс + ", Строка, Колонка, ОсновнойЭлемент");
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ВыводДанныхВОтчет

Функция ПлановыйКурсПоТаблицеКурсов(ТаблицаКурсов, Валюта, ВалютаРеглУчета, Период, Сценарий)
	
	Если Валюта = ВалютаРеглУчета Тогда
		
		Возврат 1;
		
	Иначе
		
		Если Период = Неопределено Тогда
			СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
		Иначе
			СтруктураПоиска = Новый Структура("Валюта, Сценарий, Период", Валюта, Сценарий, Период);
		КонецЕсли;
		
		Курсы = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
		
		Если Не Курсы.Количество() И Период = Неопределено Тогда
			Возврат 0;
		ИначеЕсли Не Курсы.Количество() Тогда
			
			СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
			НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				Возврат 0;
			КонецЕсли;
			
			Для Сч = 1 по НайденныеСтроки.Количество() Цикл
				ИндексСтроки = НайденныеСтроки.Количество() - Сч;
				Если НайденныеСтроки[ИндексСтроки].Период < Период Тогда
					Возврат НайденныеСтроки[ИндексСтроки].Курс;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Возврат Курсы[0].Курс;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция Подключаемый_ПересчитатьПоКурсу(Сумма, Период, ВалютаХранения, Сценарий,
										ВалютаРеглУчета, КэшПлановыхКурсов, 
										КэшЗначенийАналитик, ЗначениеАналитики, АдресВАналитике) Экспорт
	
	Валюта = Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик, ЗначениеАналитики, АдресВАналитике, ВалютаХранения);
	
	Если Валюта = ВалютаХранения Тогда
		Возврат Сумма;
	КонецЕсли;
	
	КурсВалютыХранения = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, ВалютаХранения, ВалютаРеглУчета, Период, Сценарий);
	КурсВалюты = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, Валюта, ВалютаРеглУчета, Период, Сценарий);
	
	Если КурсВалюты = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сумма * КурсВалютыХранения / КурсВалюты;
	
КонецФункции

Функция Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик, ЗначениеАналитики, 
											АдресВАналитике, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеАналитики)
		ИЛИ ТипЗнч(ЗначениеАналитики) = Тип("Строка") Тогда
		
		Возврат ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
	СтруктураРеквизитов = КэшЗначенийАналитик[ЗначениеАналитики];
	Если СтруктураРеквизитов = Неопределено Тогда
		Попытка
			//если изменят порядок следования или состав аналитик в статье
			//в данных может быть ссылка на элемент типа справочника
			//не имеющий заданного поля
			ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		Исключение
			
			Возврат ЗначениеПоУмолчанию;
			
		КонецПопытки;
		СтруктураРеквизитов = Новый Соответствие;
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
		КэшЗначенийАналитик.Вставить(ЗначениеАналитики, СтруктураРеквизитов);
		Возврат ЗначениеРезультат;
	КонецЕсли;
	
	ЗначениеРезультат = СтруктураРеквизитов[АдресВАналитике];
	Если ЗначениеРезультат = Неопределено Тогда
		ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
	КонецЕсли;
	
	Возврат ЗначениеРезультат;
	
КонецФункции

Процедура УстановитьПараметрыВНаименованииДляПечати(НаименованиеДляПечати, ЗначенияПодстановки)
	
	Для Каждого ТекСтрока Из ЗначенияПодстановки Цикл
		НаименованиеДляПечати = СтрЗаменить(НаименованиеДляПечати, ТекСтрока.ЧтоМенять, Строка(ТекСтрока.НаЧтоМенять));
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, ОписаниеОтчета) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	РасчетПредставлений = ФинОтчеты.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(РасчетПредставлений, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеЯчеек");
	Набор.ИмяОбъекта = "ДанныеЯчеек";
	
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	
	ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, "Строка");
	ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, "Колонка");
	
	ПройденныеПоля = Новый Соответствие;
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,,, БюджетнаяОтчетностьРасчетКэшаСервер.ТипКолонкиСтруктурыЯчеек(Измерение));
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение);
	
		ФинОтчеты.НовоеВычисляемоеПоле(РасчетПредставлений, Измерение + "Представление", "Представление(" + Измерение + ")");
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение + "Представление");
		
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит из НайденнаяСтрока.ДополнительныеПоля Цикл
				ИмяДопРеквизита = Измерение + "." + ДопРеквизит.Реквизит;
				Если ПройденныеПоля[ИмяДопРеквизита] = Истина Тогда
					Продолжить;
				КонецЕсли;
				ПройденныеПоля.Вставить(ИмяДопРеквизита, Истина);
				ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, ИмяДопРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ВидАналитики из ОписаниеОтчета.ВидыАналитик Цикл
		Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения"));
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение);
	
		ФинОтчеты.НовоеВычисляемоеПоле(РасчетПредставлений, Измерение + "Представление", "Представление(" + Измерение + ")");
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение + "Представление");
		
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит из НайденнаяСтрока.ДополнительныеПоля Цикл
				ИмяДопРеквизита = Измерение + "." + ДопРеквизит.Реквизит;
				Если ПройденныеПоля[ИмяДопРеквизита] = Истина Тогда
					Продолжить;
				КонецЕсли;
				ПройденныеПоля.Вставить(ИмяДопРеквизита, Истина);
				ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, ИмяДопРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Группировка = ФинОтчеты.НоваяГруппировка(РасчетПредставлений.НастройкиПоУмолчанию.Структура);
	Группировка.ПоляГруппировки.Элементы.Очистить();
	
	Компонощик = ФинОтчеты.КомпоновщикСхемы(РасчетПредставлений);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(РасчетПредставлений, Компонощик, Новый Структура("ДанныеЯчеек", ДанныеЯчеек));
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьНачало, ЭтоОбъединеннаяАналитика=Ложь)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	МестоДобавления = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	
	НоваяСтрока = МестоДобавления.Строки.Добавить();
	НоваяСтрока.Строка 					 = СтрокаОтчета.ЭлементОтчета;
	НоваяСтрока.Представление 			 = ТекстГруппировки;
	НоваяСтрока.Картинка 				 = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(
																	СтрокаОтчета.ВидЭлемента);
	НоваяСтрока.Уровень 				 = НоваяСтрока.Уровень();
	Если Не ОбластьНачало.Расшифровка = Неопределено Тогда
		НоваяСтрока.ИДГруппировки 		 = ПараметрыВывода.ДанныеРасшифровки[ОбластьНачало.Расшифровка].ИДГруппировки;
	Иначе
		Возврат;
	КонецЕсли;
	НоваяСтрока.ИДТаблицы 				 = МестоДобавления.ИДТаблицы;
	НоваяСтрока.Расшифровка              = ОбластьНачало.Расшифровка;
	НоваяСтрока.ЭтоОбъединеннаяАналитика = ЭтоОбъединеннаяАналитика;
	НоваяСтрока.ФиксированноеЗначение 	 = Значение;
	НоваяСтрока.ИмяИзмерения 			 = СтрокаОтчета.ИмяИзмерения;
	Если ЗначениеЗаполнено(Значение) Тогда
		НоваяСтрока.ЭтоАналитикаПрочее   = Ложь;
	Иначе
		НоваяСтрока.ЭтоАналитикаПрочее   = СтрокаОтчета.ЭтоАналитикаПрочее;
	КонецЕсли;
	НоваяСтрока.РедактируемыеЗначения	 = СтрокаОтчета.РедактируемыеЗначения;
	
	СтруктураСтиля = Новый Структура("Шрифт, ЦветФона", ОбластьНачало.Шрифт, ОбластьНачало.ЦветФона);
	КэшСтилей = ПараметрыВывода.СтильУровней[МестоДобавления.ИДТаблицы];
	Если КэшСтилей = Неопределено Тогда
		КэшСтилей = Новый Соответствие;
	КонецЕсли;
	КэшСтилей.Вставить(НоваяСтрока.Уровень, СтруктураСтиля);
	ПараметрыВывода.СтильУровней.Вставить(МестоДобавления.ИДТаблицы, КэшСтилей);
	
	ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", НоваяСтрока);
	
КонецПроцедуры

Процедура УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВыводимая = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	Если Не ЗначениеЗаполнено(СтрокаВыводимая.Родитель) Тогда
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Владелец());
	Иначе
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, ДеревоВывода, 
										ДеревоРезультат = Неопределено, НакопленныйОтбор = Неопределено) Экспорт
	
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ПодчиненныеЭлементыВидаБюджета = ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета;
	
	Если ДеревоРезультат = Неопределено Тогда
		ДеревоРезультат = Новый ДеревоЗначений;
		ДеревоРезультат.Колонки.Добавить("ЭлементОтчета");
		ДеревоРезультат.Колонки.Добавить("НаименованиеДляПечати");
		ДеревоРезультат.Колонки.Добавить("ИмяИзмерения");
		ДеревоРезультат.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоРезультат.Колонки.Добавить("ВидЭлемента");
		ДеревоРезультат.Колонки.Добавить("ТипЗначения");
	КонецЕсли;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	Для Каждого Колонка из ДеревоВывода.Строки Цикл
		
		ЭтоКолонкаПоказателя = СтрНайти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка = 
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы 
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если ЗначениеЗаполнено(Колонка.ФиксированноеЗначение)
			ИЛИ ЭтоКолонкаПоказателя
			ИЛИ ЭтоФиксКолонка Тогда
			
			НоваяСтрока = ДеревоРезультат.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
			
			НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Колонка.ФиксированноеЗначение, Колонка, ПараметрыВывода, Истина);
			
			ДобавленОтбор = Ложь;
			Если Не ЭтоФиксКолонка
				И Не ЭтоКолонкаПоказателя Тогда
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока, НакопленныйОтбор);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
			КонецЕсли;
			
		Иначе
			
			СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(Колонка.ЭлементОтчета, ПодчиненныеЭлементыВидаБюджета);
			Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, Колонка.ИмяИзмерения, НакопленныйОтбор, Истина, 
				СписокЭлементовСПодчиненными, , ИндексыПоискаИзмерений);
			Для Каждого Выборка из Результат Цикл
				
				Значение = Выборка[Колонка.ИмяИзмерения];
				Если Значение = NULL Тогда
					Продолжить; //null группировки не отображаем
				КонецЕсли;
				
				Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Колонка.ИмяИзмерения, "Период") И Не ЗначениеЗаполнено(Значение) Тогда
					Продолжить; 			
				КонецЕсли;
				
				НоваяСтрока = ДеревоРезультат.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
				НоваяСтрока.ФиксированноеЗначение = Значение;
				НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Значение, Колонка, ПараметрыВывода, Истина);
				
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Значение);
				ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока, НакопленныйОтбор);
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоРезультат;
	
КонецФункции

Функция НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Колонка, Строка, НакопленныйОтбор, ИндексыПоиска, СтруктураОтбора = Неопределено)
	
	СтруктураОтбора = Новый Структура();
	
	ПоляОтбора = "";
	
	Если Колонка <> Неопределено
		И ЗначениеЗаполнено(Колонка) Тогда
		
		СтруктураОтбора.Вставить("Колонка", Колонка);
		ПоляОтбора = "Колонка";
		
	КонецЕсли;
	
	Если Строка <> Неопределено Тогда
		
		СтруктураОтбора.Вставить("Строка", Строка);
		ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "Строка";
		
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ОсновнойЭлемент", Истина);
	ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "ОсновнойЭлемент";
	
	Для Каждого КлючИЗначение из НакопленныйОтбор Цикл
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + КлючИЗначение.Ключ;
	КонецЦикла;
	
	Если ИндексыПоиска <> Неопределено Тогда
		Если ИндексыПоиска[ПоляОтбора] <> Истина Тогда
			ИндексыПоиска.Вставить(ПоляОтбора, Истина);
			ДанныеЯчеек.Индексы.Добавить(ПоляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЯчеек.НайтиСтроки(СтруктураОтбора);
	
КонецФункции

Функция ОтборЯчейкиПоСтруктуреПоиска(СтруктураОтбора, ОтборЯчейки = "")
	
	Для Каждого КлючИЗначение из СтруктураОтбора Цикл
		ОтборЯчейки = ОтборЯчейки + ?(ПустаяСтрока(ОтборЯчейки), "", ",") + КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат ОтборЯчейки;
	
КонецФункции

Функция ГлубинаДерева(Строки, Знач Глубина = 0, ГлубинаВсего = 0) Экспорт
	
	Если Строки.Количество() Тогда
		ГлубинаВсего = Макс(ГлубинаВсего, Глубина);
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя из Строки Цикл
		
		ГлубинаДерева(СтрокаПоказателя.Строки, Глубина + 1, ГлубинаВсего);
		
	КонецЦикла;
	
	Возврат ГлубинаВсего
	
КонецФункции

Процедура РаспределитьЭлементыПоУровням(Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая = 0) Экспорт
	
	Если ГлубинаТекущая > ГлубинаВсего Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСтрокУровням[ГлубинаТекущая + 1];
	Если СписокСтрок = Неопределено Тогда
		СписокСтрок = Новый Массив;
	КонецЕсли;
	СоответствиеСтрокУровням.Вставить(ГлубинаТекущая + 1, СписокСтрок);
	
	Если Строки = Неопределено ИЛИ Не Строки.Количество() Тогда
		
		СписокСтрок.Добавить(Неопределено);
		РаспределитьЭлементыПоУровням(Неопределено, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
		
	Иначе
		
		Для Каждого СтрокаПоказателя из Строки Цикл
			
			СписокСтрок.Добавить(СтрокаПоказателя);
			РаспределитьЭлементыПоУровням(СтрокаПоказателя.Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЛистьевДерева(ЭлементУровня, Количество = 0)
	
	Для Каждого Элемент из ЭлементУровня.Строки Цикл
		Если Не Элемент.Строки.Количество() Тогда
			Количество = Количество + 1;
		Иначе
			ПолучитьКоличествоЛистьевДерева(Элемент, Количество);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макс(1, Количество);
	
КонецФункции

Процедура ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, СтрокаТаблицы, НомерТаблицы)
	
	СоответствиеЭлементовПоУровням = Новый Соответствие;
	КоличествоУровней = ГлубинаДерева(СтруктураКолонок.Строки) + 1;
	РаспределитьЭлементыПоУровням(СтруктураКолонок.Строки, КоличествоУровней, СоответствиеЭлементовПоУровням);
	СПримечанием = ?(ПараметрыВывода.ВыводитьПримечания, "СПримечанием", "");
	
	Постфикс = "";
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		Постфикс = "НумерацияСтрок";
	КонецЕсли;
	
	Если ПараметрыВывода.ВыводитьПримечания И ПараметрыВывода.ВыводитьНомераТаблиц Тогда
		СтрНомерТаблицы = НСтр("ru = 'Таблица %1'");
		СтрНомерТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрНомерТаблицы, НомерТаблицы);
		ОбластьНомерТаблицы = СтруктураОбластей["НомерТаблицы"];
		ОбластьНомерТаблицы.Параметры.Текст = СтрНомерТаблицы;
		ДокументРезультат.Вывести(ОбластьНомерТаблицы, 0);
	КонецЕсли;
	
	НачалоВывода = Неопределено;
	СчетчикКолонок = 1;
	Для Сч = 1 по КоличествоУровней Цикл
		
		ВыведеннаяОбласть = ДокументРезультат.Вывести(СтруктураОбластей["ШапкаНачалоТаблицы" + Постфикс], 0);
		ВыведеннаяОбласть.Расшифровка = Неопределено;
		Если НачалоВывода = Неопределено Тогда
			НачалоВывода = ВыведеннаяОбласть;
		КонецЕсли;
		
		ДополнительнаяОбласть = СтруктураОбластей["ШапкаДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 по СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		
		Если СоответствиеЭлементовПоУровням.Количество() Тогда // проверка на наличие значений колонок
			
			ЭлементыУровня = СоответствиеЭлементовПоУровням[Сч];
			Для Каждого ЭлементУровня из ЭлементыУровня Цикл
				Секция = СтруктураОбластей["ШапкаГруппировкаКолонок" + Мин(Сч, 3) + СПримечанием];
				
				Если ЭлементУровня = Неопределено Тогда
					Секция.Параметры.Группировка = "";
				ИначеЕсли ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Группировка = ЭлементУровня.НаименованиеДляПечати;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				Иначе
					Секция.Параметры.Группировка = ЭлементУровня.ФиксированноеЗначение;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				КонецЕсли;
				
				ВыведеннаяОбласть = ДокументРезультат.Присоединить(Секция);
				
				Если ЭлементУровня = Неопределено Тогда
					Если Сч > 1 Тогда // объединяем с предыдущим уровнем, если предыдущий уровень есть
						СтрокаНачалаОбъединения = ДокументРезультат.Область(ВыведеннаяОбласть.Верх - 1,
															ВыведеннаяОбласть.Лево).Верх;
						
						Область = ДокументРезультат.Область(СтрокаНачалаОбъединения,
															ВыведеннаяОбласть.Лево,
															ВыведеннаяОбласть.Верх,
															ВыведеннаяОбласть.Право);
						Область.Объединить();
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				ПодчиненныхЭлементов = ПолучитьКоличествоЛистьевДерева(ЭлементУровня);
				Если ПодчиненныхЭлементов > 1 Тогда
					Для НомерСекции = 1 по ПодчиненныхЭлементов - 1 Цикл
						ДокументРезультат.Присоединить(Секция);
					КонецЦикла;
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево,
														ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Право + (ПодчиненныхЭлементов - 1)*Секция.ШиринаТаблицы);
					Область.Объединить();
					ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, Неопределено, НомерТаблицы);
				ИначеЕсли Сч < КоличествоУровней Тогда
					ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, Неопределено, НомерТаблицы);
				КонецЕсли;
				
				Если Сч = КоличествоУровней Тогда
					СчетчикКолонок = СчетчикКолонок + 1;
					ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
									Неопределено, ЭлементУровня.ЭлементОтчета, Неопределено, 0, СчетчикКолонок, НомерТаблицы);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											1, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											1);
		Область.Объединить();
		
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1, НомерТаблицы);
									
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											2, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1, НомерТаблицы);
		ОбластьТекста = Область;
		
	Иначе
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
											1, 
											НачалоВывода.Верх + (КоличествоУровней - 1), 
											2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(),
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1, НомерТаблицы);
		ОбластьТекста = Область;
		
	КонецЕсли;
	
	ВыводитьЗаголовокГруппировки = ПараметрыВывода.ПараметрыТаблицы.Свойство("ВыводитьЗаголовокГруппировки")
									И ПараметрыВывода.ПараметрыТаблицы.ВыводитьЗаголовокГруппировки = Истина;
	
	Если Не ВыводитьЗаголовокГруппировки Тогда
	
		Текст = "";
		Если СтрокаТаблицы.Строки.Найти("ПоказательБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
			Текст = НСтр("ru = 'Показатель бюджетов'");
		КонецЕсли;
		
		Если СтрокаТаблицы.Строки.Найти("СтатьяБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("ru = 'Статья бюджетов'");
		КонецЕсли;
		
		Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("ru = 'Аналитика'");
		
	Иначе
		
		Текст = ПараметрыВывода.ПараметрыТаблицы.ЗаголовокГруппировки;
		
	КонецЕсли;
	
	ОбластьТекста.Текст = Текст;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюКолонок Тогда
		НачалоВывода = ДокументРезультат.Вывести(СтруктураОбластей["НумерацияКолонокНачалоТаблицы" + Постфикс], 0);
		
		ДобавитьОбластьОформления(ПараметрыВывода, НачалоВывода, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1, НомерТаблицы);
		
		ДополнительнаяОбласть = СтруктураОбластей["НумерацияКолонокДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 по СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх, 
												2, 
												НачалоВывода.Верх, 
												2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		Иначе
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх, 
												1, 
												НачалоВывода.Верх, 
												2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		КонецЕсли;
		ДобавитьОбластьОформления(ПараметрыВывода, Область, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), Неопределено, 0, 1, НомерТаблицы);
		ЭлементыОтчета = СоответствиеЭлементовПоУровням[КоличествоУровней];
		Для Сч = 1 По ЭлементыОтчета.Количество() Цикл
			Область = СтруктураОбластей["НумерацияКолонокГруппировкаКолонок" + Мин(КоличествоУровней, 3) + СПримечанием];
			Область.Параметры.НомерКолонки = 1 + Сч;
			ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
			ОформляемыйЭлемент = ?(ЭлементыОтчета[Сч-1] = Неопределено, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), ЭлементыОтчета[Сч-1].ЭлементОтчета);
			ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, 
					Неопределено, ОформляемыйЭлемент, Неопределено, 0, СчетчикКолонок, НомерТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, Префикс, Постфикс, 
											РасчетИзменений, ВидЭлемента = Неопределено, ЛогРасчета = Неопределено)
	
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = СтрокаДанных.ВидЭлемента;
	КонецЕсли;
	
	Если РасчетИзменений
		И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		
		Если ЗначениеЗаполнено(ПараметрыЯчейки.Формула) Тогда
			
			ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтрокаДанных["Рассчитан" + Префикс + Постфикс] Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		ОбратныйЗнак = ПараметрыЯчейки.ОбратныйЗнак;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ЗначениеВСтрокеДанных = СтрокаДанных[Префикс + Постфикс + ПараметрыЯчейки.ПолеИсточника];
			Если ТипЗнч(ЗначениеВСтрокеДанных) = Тип("Число") Тогда
				СтрокаДанных[Префикс + Постфикс] = ?(ОбратныйЗнак, -1, 1) * ЗначениеВСтрокеДанных;
			Иначе
				СтрокаДанных[Префикс + Постфикс] = ЗначениеВСтрокеДанных;
			КонецЕсли;
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			
			СтрокаДанных[Префикс + Постфикс] = СтрокаДанных.ЗначениеПоказателя;
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			Формула = ПараметрыЯчейки.Формула;
			МассивЗначений = Новый Массив;
			
			//Показатели и статьи
			СтруктураПоиска = Новый Структура(ПараметрыЯчейки.ОбщиеИзмерения);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
			РасчетПоКолонке = Ложь;
			ВидЭлементаСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Строка, "ВидЭлемента");
			Если ВидЭлементаСтроки = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
				ВидЭлементаКолонки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Колонка, "ВидЭлемента");
				Если ВидЭлементаКолонки = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					РасчетПоКолонке = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Не РасчетПоКолонке Тогда
				СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
			КонецЕсли;
			СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			СписокОперандов = ПараметрыЯчейки.СписокОперандов;
			
			СоответствиеПройденныхОперандов = Новый Соответствие;
			
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
					Продолжить; //ячейки обрабатываются отдельно
				КонецЕсли;
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
				
				Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы'");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.НефинансовыйПоказатель) Тогда
					ПрефиксСсылки = Префикс;
					ПостФиксСсылки = Постфикс;
					
				//в операндах производного показателя
				//может быть выбрано только количество или сумма
				ИначеЕсли ПараметрыЯчейки.ФлагКоличество Тогда
					ПрефиксСсылки = "Количество";
					ПостФиксСсылки = "";
				Иначе
					ПрефиксСсылки = "Сумма";
					ПостФиксСсылки = ПостФикс;
				КонецЕсли;
				
				Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, НайденнаяСтрока, ПрефиксСсылки, 
																			ПостФиксСсылки, РасчетИзменений, НайденнаяСтрока.ВидОперанда);
				
				ИмяОперанда = "[" + ПараметрыЯчейки.ИмяОперанда + "]";
				СписокОперандов = СтрЗаменить(СписокОперандов, ИмяОперанда, "");
				
				ПройденноеЗначение = СоответствиеПройденныхОперандов[ИмяОперанда];
				Если ПройденноеЗначение <> Неопределено Тогда
					МассивЛокальныхЗначений = ПройденноеЗначение.Значение;
					Если ТипЗнч(МассивЛокальныхЗначений) <> Тип("Массив") Тогда
						МассивЛокальныхЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивЛокальныхЗначений);
					КонецЕсли;
					МассивЛокальныхЗначений.Добавить(Значение);
					Значение = МассивЛокальныхЗначений;
					МассивЗначений[ПройденноеЗначение.Индекс] = МассивЛокальныхЗначений;
				Иначе
					МассивЗначений.Добавить(Значение);
				КонецЕсли;
				
				Формула = СтрЗаменить(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				СоответствиеПройденныхОперандов.Вставить(ИмяОперанда, Новый Структура("Значение, Индекс", Значение, МассивЗначений.ВГраница()));
				
				Если ЛогРасчета <> Неопределено Тогда
					ЗначениеДляЛога = Новый Структура();
					ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
					ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидОперанда);
					ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
					ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
					ЗначениеДляЛога.Вставить("Значение", Значение);
					ЛогРасчета.Добавить(ЗначениеДляЛога);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
			СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
			СтруктураПоиска.Вставить("ВидОперанда", Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			
			ПредыдущаяЕдиницаИзмерения = Неопределено; 
			ЕстьОшибкиВЕдиницах = Ложь;
			
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
				
				Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы'");
				КонецЕсли;
				
				ИмяОперанда = "[" + ПараметрыЯчейки.ИмяОперанда + "]";
				
				Если Не ЕстьОшибкиВЕдиницах Тогда
					
					СтруктураПоиска = Новый Структура(ПараметрыЯчейки.ОбщиеИзмерения);
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
					СтруктураПоиска.Вставить("Строка", ПараметрыЯчейки.ОперандСтрока);
					СтруктураПоиска.Вставить("Колонка", ПараметрыЯчейки.ОперандКолонка);
					СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
					
					СтрокиСсылки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
					
					МассивЛокальныхЗначений = Новый Массив;
					
					Если СтрокиСсылки.Количество() Тогда
						
						Для Каждого СтрокаСсылки из СтрокиСсылки Цикл
							
							ПараметрыСсылки = ПараметрыЯчеек.Найти(СтрокаСсылки.ИндексСтроки, "ИндексСтроки");
							
							//в сложной таблице из ячеек выбираем первое,
							//что заполнено - количество или сумма
							Если ПараметрыСсылки.СложнаяТаблица Тогда
								Если ПараметрыСсылки.ФлагКоличество Тогда
									ПрефиксСсылки = "Количество";
									ПостФиксСсылки = "";
								ИначеЕсли ПараметрыСсылки.ФлагЗначение Тогда
									ПрефиксСсылки = "Значение";
									ПостФиксСсылки = "";
								Иначе
									ПрефиксСсылки = "Сумма";
									ПостФиксСсылки = ПостФикс;
								КонецЕсли;
							Иначе
								ПрефиксСсылки = Префикс;
								ПостФиксСсылки = ПостФикс;
								Если ПрефиксСсылки = "Количество" Тогда
									Если ПредыдущаяЕдиницаИзмерения = Неопределено Тогда
										ПредыдущаяЕдиницаИзмерения = СтрокаСсылки.ЕдиницаИзмерения;
									КонецЕсли;
									ПропуститьПроверкуЕдиницИзмерения = (СтрокаСсылки.РасчетЗаполнение = "итог")
									                                  И (СтрокаСсылки.Количество = 0);
									Если ПредыдущаяЕдиницаИзмерения <> СтрокаСсылки.ЕдиницаИзмерения И НЕ ПропуститьПроверкуЕдиницИзмерения Тогда
										Для Сч = 0 по МассивЗначений.ВГраница() Цикл
											МассивЗначений[Сч] = 0;
										КонецЦикла;
										ЕстьОшибкиВЕдиницах = Истина;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							РезультатПодчиненнойСсылки = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаСсылки, 
																									ПрефиксСсылки, ПостФиксСсылки, РасчетИзменений);
							Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
								МассивЗначений.Добавить(РезультатПодчиненнойСсылки);
							КонецЕсли;
							МассивЛокальныхЗначений.Добавить(РезультатПодчиненнойСсылки);
							Если ЛогРасчета <> Неопределено Тогда
								ПредставлениеЯчейки = ИмяОперанда;
								РазмерМассива = МассивЛокальныхЗначений.Количество();
								Если РазмерМассива > 1 Тогда
									ПредставлениеЯчейки = ПредставлениеЯчейки + " #" + РазмерМассива;
								КонецЕсли;
								ЗначениеДляЛога = Новый Структура();
								ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
								ЗначениеДляЛога.Вставить("ВидЭлемента", СтрокаСсылки.ВидЭлемента);
								ЗначениеДляЛога.Вставить("ИмяОперанда", ПредставлениеЯчейки);
								ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(СтрокаСсылки));
								ЗначениеДляЛога.Вставить("Значение", РезультатПодчиненнойСсылки);
								ЛогРасчета.Добавить(ЗначениеДляЛога);
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						Если ЛогРасчета <> Неопределено Тогда
							ЗначениеДляЛога = Новый Структура();
							ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
							ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
							ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
							ЗначениеДляЛога.Вставить("Значение", 0);
							ЛогРасчета.Добавить(ЗначениеДляЛога);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
					ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
					Если ЛогРасчета <> Неопределено Тогда
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидЭлемента);
						ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
						ЗначениеДляЛога.Вставить("Значение", МассивЛокальныхЗначений);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
					
					СписокОперандов = СтрЗаменить(СписокОперандов, ИмяОперанда, "");
					Если МассивЛокальныхЗначений.Количество() = 1 Тогда
						МассивЛокальныхЗначений = МассивЛокальныхЗначений[0];
					ИначеЕсли МассивЛокальныхЗначений.Количество() = 0 Тогда
						МассивЛокальныхЗначений = 0;
					КонецЕсли;
					МассивЗначений.Добавить(МассивЛокальныхЗначений);
					Формула = СтрЗаменить(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(СписокОперандов) Тогда
				СписокНеНайденныхОперандов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокОперандов, " ", Истина);
				Для Каждого ИмяОперанда из СписокНеНайденныхОперандов Цикл
					Формула = СтрЗаменить(Формула, ИмяОперанда, "0");
					Если ЛогРасчета <> Неопределено Тогда
						Если Лев(ИмяОперанда, 1) = "[" Тогда
							ИмяОперанда = Сред(ИмяОперанда, 2);
						КонецЕсли;
						Если Прав(ИмяОперанда, 1) = "]" Тогда
							ИмяОперанда = Лев(ИмяОперанда, СтрДлина(ИмяОперанда) - 1);
						КонецЕсли;
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ИмяОперанда", ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
						ЗначениеДляЛога.Вставить("Значение", 0);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрНайти(ВРег(Формула), ВРег("РАЗНОСТЬДАТ")) Тогда
				НачалоПериода = ПараметрыПериодов.НачалоПериода;
				КонецПериода = ПараметрыПериодов.КонецПериода;
				ГраницаФактДанных = ПараметрыПериодов.ГраницаФактДанных;
				ПериодГруппировки = Неопределено;
				Для Каждого ИмяПериода из ПараметрыПериодов.УпорядоченныеПериодичностиОтчета Цикл
					Если ЗначениеЗаполнено(СтрокаДанных[ИмяПериода]) Тогда
						ПериодГруппировки = СтрокаДанных[ИмяПериода];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				Если МассивЗначений.Найти("#Знач") <> Неопределено Тогда
					Возврат "#Знач";
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ДанныеЯчеек",       ДанныеЯчеек);
				ДополнительныеПараметры.Вставить("ПараметрыЯчеек", 	  ПараметрыЯчеек);
				ДополнительныеПараметры.Вставить("ПараметрыПериодов", ПараметрыПериодов);
				ДополнительныеПараметры.Вставить("Префикс", 		  Префикс);  
				ДополнительныеПараметры.Вставить("Постфикс",		  Постфикс);
				ДополнительныеПараметры.Вставить("СтрокаДанных", 	  СтрокаДанных);
				ДополнительныеПараметры.Вставить("ЛогРасчета", 		  ЛогРасчета);
				ДополнительныеПараметры.Вставить("НачалоПериода", 	  НачалоПериода);
				ДополнительныеПараметры.Вставить("КонецПериода", 	  КонецПериода);
				
				РезультатВычисления = ВычислитьФормулуВБезопасномРежиме(Формула, МассивЗначений, ДополнительныеПараметры);
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
								
				Если ТипЗнч(РезультатВычисления) = Тип("Массив") Тогда
					Если ОбратныйЗнак Тогда
						Для Каждого ЭлементМассива Из РезультатВычисления Цикл
							ЭлементМассива = -ЭлементМассива;
						КонецЦикла;
					КонецЕсли;
							
					Если РезультатВычисления.Количество() = 1 Тогда
						РезультатВычисления = РезультатВычисления[0];
					Иначе
						РезультатВычисления = СтрСоединить(РезультатВычисления, ";");
					КонецЕсли;
				Иначе
					Если ОбратныйЗнак Тогда 
						РезультатВычисления = -РезультатВычисления;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДанных[Префикс + Постфикс] = РезультатВычисления;
			Исключение
				Возврат "#Знач";
			КонецПопытки;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный вид элемента показателя'");
		
		КонецЕсли;
		
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Истина;
		
	КонецЕсли;
	
	Возврат СтрокаДанных[Префикс + Постфикс];
	
КонецФункции

Функция РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, 
									Префикс, РасчетИзменений = Ложь, ЛогРасчета = Неопределено) Экспорт
	
	Если Префикс = "Сумма" Тогда
		Постфикс = ?(ЗначениеЗаполнено(СтрокаДанных.Валюта), "Вал", "");
	Иначе
		ПостФикс = "";
	КонецЕсли;
	
	Если ЛогРасчета <> Неопределено Тогда
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Ложь;
	КонецЕсли;
	
	Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, 
											Префикс, Постфикс, РасчетИзменений, , ЛогРасчета);
	Возврат Значение;
	
КонецФункции

Функция ПолучитьРасшифровку(ПараметрыВывода, НакопленныйОтбор, СтрокаЯчейки, СтрокаПараметров, ИмяПоказателя, ИндексСтрокиДанных, ДляРедактирования) Экспорт
	
	ДанныеРасшифровки = ПараметрыВывода.ДанныеРасшифровки;
	
	Расшифровка = Новый Структура;
	Если ДляРедактирования Тогда
		
		Расшифровка.Вставить("Строка", СтрокаЯчейки.Строка);
		Расшифровка.Вставить("Колонка", СтрокаЯчейки.Колонка);
		
		Если ЗначениеЗаполнено(СтрокаЯчейки.Валюта) Тогда
			Расшифровка.Вставить("Валюта", СтрокаЯчейки.Валюта);
		Иначе
			СтруктураПоиска = Новый Структура("Строка, Колонка, ВалютаОпределяетсяАналитикой", СтрокаЯчейки.Строка, СтрокаЯчейки.Колонка, Истина);
			НайденныеСтроки = ПараметрыВывода.КэшПараметровВалют.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				
				КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(НайденныеСтроки[0].АналитикаВалюты);
				ЗначениеАналитикиВалюты = Неопределено;
				
				Если НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитикиВалюты) Тогда
					ВалютаВывода = Подключаемый_ЗначениеИзАналитики(ПараметрыВывода.КэшЗначенийАналитик, 
											ЗначениеАналитикиВалюты, НайденныеСтроки[0].ЗаполнениеЕдиницыИзмерения);
					
					Если ЗначениеЗаполнено(ВалютаВывода) Тогда
						Расшифровка.Вставить("Валюта", ВалютаВывода);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЯчейки.СтатьяБюджетов) Тогда
			Расшифровка.Вставить("СтатьяБюджетов", СтрокаЯчейки.СтатьяБюджетов);
		ИначеЕсли ЗначениеЗаполнено(СтрокаЯчейки.РедактируемоеЗначение) Тогда
			Расшифровка.Вставить("РедактируемоеЗначение", СтрокаЯчейки.РедактируемоеЗначение);
		КонецЕсли;
		
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого ВидАналитики из ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Значение = Неопределено;
			НакопленныйОтбор.Свойство(КлючИмени, Значение);
			ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(КлючИмени, ВидАналитики);
			Значение = ТипЗначения.ПривестиЗначение(Значение);
			СоответствиеЗначенийАналитик.Вставить(ВидАналитики, Значение);
		КонецЦикла;
		
		Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
		
		Для Каждого КлючИЗначение из НакопленныйОтбор Цикл
			Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(КлючИЗначение.Ключ, "Период") Тогда
				Расшифровка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Расшифровка.Вставить("ИмяПоказателя", ИмяПоказателя);
	Если ИмяПоказателя = "Сумма" Тогда
		Постфикс = ?(ЗначениеЗаполнено(СтрокаЯчейки.Валюта), "Вал", "");
	Иначе
		ПостФикс = "";
	КонецЕсли;
	Если ИндексСтрокиДанных = Неопределено Тогда
		Расшифровка.Вставить("Значение", Неопределено);
	Иначе
		Расшифровка.Вставить("Значение", СтрокаЯчейки[ИмяПоказателя + Постфикс]);
		Расшифровка.Вставить("ИндексСтрокиДанных", ИндексСтрокиДанных);
	КонецЕсли;
	
	УИДРасшифровки = ДанныеРасшифровки.Количество() + 1;
	ДанныеРасшифровки.Вставить(УИДРасшифровки, Расшифровка);
	
	Возврат УИДРасшифровки;
	
КонецФункции

Функция ПолучитьРасшифровкуГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор = Неопределено, Группировка = Неопределено)
	Перем Расшифровка;
	
	ДанныеРасшифровки = ПараметрыВывода.ДанныеРасшифровки;
	
	Расшифровка = Новый Структура;
	
	Если Группировка <> Неопределено Тогда
		Расшифровка.Вставить("Строка", Группировка.ЭлементОтчета);
	КонецЕсли;
	
	Расшифровка.Вставить("Значение", Значение);
	
	Если НакопленныйОтбор <> Неопределено Тогда
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого ВидАналитики из ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			ЗначениеАналитики = Неопределено;
			НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитики);
			СоответствиеЗначенийАналитик.Вставить(ВидАналитики, ЗначениеАналитики);
		КонецЦикла;
	КонецЕсли;
	
	Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
	Расшифровка.Вставить("ИДГруппировки", Новый УникальныйИдентификатор);
	
	УИДРасшифровки = ДанныеРасшифровки.Количество() + 1;
	
	Если Расшифровка.Количество() Тогда
		ДанныеРасшифровки.Вставить(УИДРасшифровки, Расшифровка);
	Иначе
		ДанныеРасшифровки.Вставить(УИДРасшифровки, Неопределено);
	КонецЕсли;
	
	Возврат УИДРасшифровки;
	
КонецФункции

Процедура ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, СчетчикКолонок = 1) Экспорт
	
	ДокументРезультат 	= ПараметрыВывода.ДокументРезультат;
	ДанныеЯчеек 		= ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска 		= ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования 	= ПараметрыВывода.ДляРедактирования;
	ПараметрыЯчеек 		= ПараметрыВывода.ПараметрыЯчеек;
	СтруктураЯчеек 		= ПараметрыВывода.СтруктураЯчеек;
	СложнаяТаблица 		= ПараметрыВывода.СложнаяТаблица;
	ПараметрыПериодов 	= ПараметрыВывода.ПараметрыПериодов;
	СчетчикСтрок 		= ПараметрыВывода.СчетчикСтрок;
	
	Для Каждого Колонка из СтруктураКолонок.Строки Цикл
		
		ДобавленОтбор = Ложь;
		ЭтоПоказатель = СтрНайти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка = 
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы 
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если Не ЭтоФиксКолонка
			И Не ЭтоПоказатель Тогда
			НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
			ДобавленОтбор = Истина;
		КонецЕсли;
		
		Если Колонка.Строки.Количество() Тогда
			ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, Колонка, НакопленныйОтбор, СчетчикКолонок);
		Иначе
			
			СчетчикКолонок = СчетчикКолонок + 1;
			ВыводитьЗначение = Истина;
			Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если СтрокаОтчета.Строки.Количество()
					И СтрокаОтчета.Строки[0].ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					ВыводитьЗначение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КолонкаФильтра = Колонка;
			Если НЕ СложнаяТаблица Тогда
				Если ЭтоПоказатель Тогда
					ИмяПоказателя = СтрЗаменить(Колонка.ИмяИзмерения, "#Показатель_", "");
					КолонкаФильтра = КолонкаФильтра.Родитель;
				Иначе
					ИмяПоказателя = "Сумма";
				КонецЕсли;
			КонецЕсли;
			
			Если КолонкаФильтра <> Неопределено Тогда
				КолонкаФильтра = КолонкаФильтра.ЭлементОтчета;
			КонецЕсли;
				
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаОтчета.ЭлементОтчета);
			Если ЗначениеЗаполнено(КолонкаФильтра) Тогда
				СтруктураПоиска.Вставить("Колонка", КолонкаФильтра);
			КонецЕсли;
			
			СтрокиСтруктуры = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСтруктуры.Количество() Тогда
				ЯчейкаОтчета = СтрокиСтруктуры[0];
			Иначе
				ВыводитьЗначение = Ложь;
			КонецЕсли;
			
			Если Не ВыводитьЗначение Тогда
				ОбластьЗначение.Параметры.Значение = Неопределено;
				ОбластьЗначение.Параметры.Расшифровка = Неопределено;
				Область = ДокументРезультат.Присоединить(ОбластьЗначение);
				Если ДляРедактирования И
					НЕ СтрокаОтчета.Строки.Количество() Тогда
					Область.ЦветФона = Новый Цвет(237, 237, 237);
				КонецЕсли;
			Иначе
				
				Строки = ПолучитьВыборкуЯчеек(ДанныеЯчеек, , НакопленныйОтбор, Ложь, 
					КолонкаФильтра, СтрокаОтчета.ЭлементОтчета, ИндексыПоиска);
				
				Если Строки.Количество() > 1 Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Ошибка расчета структуры ячеек'");
				Иначе
					
					Значение = Неопределено;
					Расшифровка = Неопределено;
					Примечание = Неопределено;
					
					ПараметрыФлагов = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
					
					// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы.
					Если СложнаяТаблица Тогда
						ВыводитьЗначение = Истина;
						ВсегоФлагов = Число(ПараметрыФлагов.ФлагКоличество) + 
										Число(ПараметрыФлагов.ФлагСумма) + 
										Число(ПараметрыФлагов.ФлагЗначение);
						Если ВсегоФлагов > 1 Тогда
							ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Ошибка формирования структуры ячеек'");
						ИначеЕсли ПараметрыФлагов.ФлагКоличество Тогда
							ИмяПоказателя = "Количество";
						ИначеЕсли ПараметрыФлагов.ФлагЗначение Тогда
							ИмяПоказателя = "Значение";
						ИначеЕсли ПараметрыФлагов.ФлагСумма Тогда
							ИмяПоказателя = "Сумма";
						Иначе
							ВыводитьЗначение = Ложь;
						КонецЕсли;
					Иначе
						ВыводитьЗначение = Ложь;
						Если ПараметрыФлагов.ФлагКоличество Тогда
							ВыводитьЗначение = ИмяПоказателя = "Количество";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагЗначение Тогда
							ВыводитьЗначение = ИмяПоказателя = "Значение";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагСумма Тогда
							ВыводитьЗначение = ИмяПоказателя = "Сумма";
						КонецЕсли;
					КонецЕсли;
					
					Если Не Строки.Количество() Тогда
						НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, ЯчейкаОтчета, НакопленныйОтбор, КолонкаФильтра);
						Строки.Добавить(НоваяСтрока);
					КонецЕсли;
					
					ИмяОбласти = "ИмяОбласти" + ИмяПоказателя; ВалютаВводаОтличаетсяОтВалюты = Ложь;
					Если ВыводитьЗначение Тогда
						
						//Проверка на совпадение валют
						СтруктураПоиска = Новый Структура("Строка, Колонка, ВалютаОпределяетсяАналитикой", Строки[0].Строка, Строки[0].Колонка, Истина);
						НайденныеСтроки = ПараметрыВывода.КэшПараметровВалют.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() Тогда
							
							КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(НайденныеСтроки[0].АналитикаВалюты);
							ЗначениеАналитикиВалюты = Неопределено;
							
							Если НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитикиВалюты) Тогда
								ВалютаВывода = Подключаемый_ЗначениеИзАналитики(ПараметрыВывода.КэшЗначенийАналитик, 
												ЗначениеАналитикиВалюты, НайденныеСтроки[0].ЗаполнениеЕдиницыИзмерения);
												
								Если ЗначениеЗаполнено(ВалютаВывода) Тогда
									Если Не ЗначениеЗаполнено(Строки[0].Валюта) Тогда
										Строки[0].Валюта = ВалютаВывода;
									Иначе
										Если ВалютаВывода <> Строки[0].Валюта Тогда
											ВалютаВводаОтличаетсяОтВалюты = Истина;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						Значение = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Строки[0], ИмяПоказателя);
						Расшифровка = ПолучитьРасшифровку(ПараметрыВывода, НакопленныйОтбор, Строки[0], 
														ПараметрыФлагов, ИмяПоказателя,
														ДанныеЯчеек.Индекс(Строки[0]), ДляРедактирования);
						Значение = ?(ЗначениеЗаполнено(Значение), Значение, Неопределено);
						
					КонецЕсли;
					
					Примечание = Строки[0].Примечание;
					
					Если ИмяПоказателя = "Значение" Тогда
						Если СтрокаОтчета.Строки.Количество() Тогда
							// По нефинансовым показателям значения 
							// выводим на нижнем уровне бюджета.
							Значение = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
					ОбластьЗначение.Параметры.Значение = Значение;
					ОбластьЗначение.Параметры.Расшифровка = Расшифровка;
					
					Область = ДокументРезультат.Присоединить(ОбластьЗначение);
					
					СтрокаОформления = ДобавитьОбластьОформления(ПараметрыВывода, Область, 
											СтрокаОтчета.ЭлементОтчета, КолонкаФильтра, НакопленныйОтбор, СчетчикСтрок, СчетчикКолонок, СчетчикТаблиц);
					Если СтрокаОформления <> Неопределено Тогда
						СтрокаОформления[ИмяПоказателя] = Значение;
						СтрокаОформления["Флаг" + ИмяПоказателя] = Истина;
					КонецЕсли;
					
					Если Не ПараметрыВывода.Свойство("НеНазначатьИменаОбластям") Или Не ЗначениеЗаполнено(Строки[0][ИмяОбласти]) Тогда
						Строки[0][ИмяОбласти] = Область.Имя;
					КонецЕсли;
					
					МожноРедактировать = Ложь;
					Если (ПараметрыВывода.ДляРедактирования 
						ИЛИ ПараметрыВывода.ВыводитьПримечания) Тогда
						
						Если ЯчейкаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
							Если ЯчейкаОтчета.ИД_Источника = "Документ" Тогда
								МожноРедактировать = ПараметрыФлагов["Флаг" + ИмяПоказателя];
							КонецЕсли;
							
						ИначеЕсли ЯчейкаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
							Если ЯчейкаОтчета.ИД_Источника = "Документ_Значения" Тогда
								МожноРедактировать = ПараметрыФлагов["Флаг" + ИмяПоказателя];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыВывода.ДляРедактирования Тогда
						
						Если МожноРедактировать и Не ВалютаВводаОтличаетсяОтВалюты Тогда
							
							Если Не СтрокаОтчета.Строки.Количество() Тогда
								Если ПараметрыФлагов.ОбратныйЗнак Тогда // для ввода изменим знак
									Область.ЦветТекста = WebЦвета.Красный;
									Если ТипЗнч(Значение) = Тип("Число") Тогда
										Значение = -Значение;
									КонецЕсли;
								КонецЕсли;
								Область.СодержитЗначение = Истина;
								Если Строки[0].ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение
									И ПараметрыФлагов.ТипРедактируемогоЗначения <> "Число" Тогда
									Если ПараметрыФлагов.ТипРедактируемогоЗначения = "Строка" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("Строка");
										Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
									ИначеЕсли ПараметрыФлагов.ТипРедактируемогоЗначения = "Булево" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("Булево");
									КонецЕсли;
								Иначе
									Область.ТипЗначения = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2);
								КонецЕсли;
								Область.Значение = Значение;
								Область.Защита = Ложь;
								
								Область.Примечание.Текст = Примечание;
							КонецЕсли;
							
						ИначеЕсли НЕ СтрокаОтчета.Строки.Количество() Тогда
							
							Область.ЦветФона = Новый Цвет(237, 237, 237);
							
						КонецЕсли;
						
					ИначеЕсли ПараметрыВывода.ВыводитьПримечания 
						И МожноРедактировать
						И НЕ СтрокаОтчета.Строки.Количество()
						И НЕ ПустаяСтрока(Примечание) Тогда
						
						Если Строки[0].ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
							
							ТекущийНомерТаблицы = ПараметрыВывода.Примечания.НомерТаблицы;
														
							ТекущийНомерПримечания = ПараметрыВывода.Примечания.НомерПримечания + 1;
							ПараметрыВывода.Примечания.НомерПримечания = ТекущийНомерПримечания;
							
							Область.Разъединить();
							
							ЯчейкаПримечания = ДокументРезультат.Область(Область.Верх,Область.Право, Область.Верх, Область.Право);
															
							ОбластьПримечание.Параметры.Текст = Формат(ТекущийНомерПримечания, "ЧГ=");
							
							ДокументРезультат.ВставитьОбласть(ОбластьПримечание.Область(),ЯчейкаПримечания,,Истина);
							
							НоваяСтрокаДанных = ПараметрыВывода.Примечания.ТаблицаДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Строки[0]);
							НоваяСтрокаДанных.НомерТаблицы = ТекущийНомерТаблицы;
							НоваяСтрокаДанных.НомерПримечания = ТекущийНомерПримечания;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленОтбор Тогда
			НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстГруппировки(Значение, СтрокаОтчета, ПараметрыВывода, ЭтоКолонки = Ложь)
	
	Представление = СтрокаОтчета.НаименованиеДляПечати;
	ВидАналитики = СтрокаОтчета.ВидАналитики;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Возврат Представление;
		КонецЕсли;
		Возврат "<" + СокрЛП("прочие " + НРег(ВидАналитики)) + ">";
	КонецЕсли;
	
	ВидЭлемента = СтрокаОтчета.ВидЭлемента;
	ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
	ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение И СтрНайти(ИмяИзмерения, "Период") Тогда
		
		Периодичность = Перечисления.Периодичность[СтрЗаменить(ИмяИзмерения, "Период", "")];
		Возврат БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Значение, Периодичность);
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение Тогда
		
		ИмяИндекса = "";
		СтруктураПоиска = Новый Структура();
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
			ИмяИндекса = "Колонка";
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
			ИмяИндекса = "Строка";
		КонецЕсли;
		СтруктураПоиска.Вставить(ИмяИзмерения, Значение);
		ИмяИндекса = ИмяИндекса + "," + ИмяИзмерения;
		
		Если ПараметрыВывода.ИндексыПоискаИзмерений[ИмяИндекса] = Неопределено Тогда
			ПараметрыВывода.ПредставленияИзмерений.Индексы.Добавить(ИмяИндекса);
			ПараметрыВывода.ИндексыПоискаИзмерений.Вставить(ИмяИндекса, Истина);
		КонецЕсли;
		
		СтрокиДанных = ПараметрыВывода.ПредставленияИзмерений.НайтиСтроки(СтруктураПоиска);
		
		Если Не СтрокиДанных.Количество() Тогда //если ссылочный тип в колонках не на последнем уровне
			НаименованиеГруппировки = Строка(Значение);
		Иначе
			СтрокаПредставления = СтрокиДанных[0];
			НаименованиеГруппировки = СтрокаПредставления[ИмяИзмерения + "Представление"];
			Для Каждого ДополнительныйРеквизит из СтрокаОтчета.ДополнительныеПоля Цикл
				Если ДополнительныйРеквизит.ВОтдельнойКолонке Тогда
					Продолжить;
				КонецЕсли;
				НаименованиеГруппировки = НаименованиеГруппировки + ", ";
				Если Не ПустаяСтрока(ДополнительныйРеквизит.Заголовок) Тогда
					НаименованиеГруппировки = НаименованиеГруппировки + ДополнительныйРеквизит.Заголовок + ": ";
				КонецЕсли;
				НаименованиеГруппировки = НаименованиеГруппировки + СтрокаПредставления[ИмяИзмерения + ДополнительныйРеквизит.ИмяРеквизита];
			КонецЦикла;
		КонецЕсли;
	
	Иначе
		
		Если ЗначениеЗаполнено(Представление) Тогда
			НаименованиеГруппировки = Представление;
		Иначе
			НаименованиеГруппировки = Строка(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.СтатьяБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ПоказательБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.НефинансовыйПоказатель Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ОбъектУчета", Значение);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Ложь);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = ПараметрыВыводаЕдиницы[0].ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ВидАналитики) Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Истина);
		СтруктураПоиска.Вставить("АналитикаЕдиницыИзмерения", ВидАналитики);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = Подключаемый_ЗначениеИзАналитики(
															ПараметрыВывода.КэшЗначенийАналитик, Значение, 
															ПараметрыВыводаЕдиницы[0].ЗаполнениеЕдиницыИзмерения);
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаименованиеГруппировки;
	
КонецФункции

Функция ДобавитьОбластьОформления(ПараметрыВывода, ВыведеннаяОбласть, Строка, Колонка, 
											НакопленныйОтбор, НомерСтроки, НомерКолонки, НомерТаблицы)
	
	ДанныеОтчетаДляОформления = ПараметрыВывода.ДанныеОтчетаДляОформления;
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрокаОформления = ДанныеОтчетаДляОформления.Добавить();
	НоваяСтрокаОформления.ИмяОбласти = ВыведеннаяОбласть.Имя;
	НоваяСтрокаОформления.Строка = Строка;
	НоваяСтрокаОформления.Колонка = Колонка;
	НоваяСтрокаОформления.НомерСтроки = НомерСтроки;
	НоваяСтрокаОформления.НомерКолонки = НомерКолонки;
	НоваяСтрокаОформления.НомерТаблицы = НомерТаблицы;
	
	Если НакопленныйОтбор <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОформления, НакопленныйОтбор);
	КонецЕсли;
	
	Возврат НоваяСтрокаОформления;
	
КонецФункции

Процедура ОбъединитьНеиспользуемыеЯчейки(ПараметрыВывода, ТекущийОтбор, ДокументРезультат, 
											ОбластьВывода, ОбластьДопСекция, Объединить, ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц)
	
	Если Не Объединить Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьДопСекция.Параметры.Группировка = Неопределено;
	ОбластьДопСекция.Параметры.Расшифровка = Неопределено;
	Для Сч = 1 по Объединить Цикл
		Пустышка = ДокументРезультат.Присоединить(ОбластьДопСекция);
		ДобавитьОбластьОформления(ПараметрыВывода, Пустышка, ЭлементОтчета
							, Неопределено, ТекущийОтбор, СчетчикСтрок, Неопределено, СчетчикТаблиц);
	КонецЦикла;
	Пустышка = ДокументРезультат.Область(ОбластьВывода.Верх, 
												ОбластьВывода.Лево + Число(ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок), 
												ОбластьВывода.Верх, 
												ОбластьВывода.Право + Объединить);
	Пустышка.Объединить();
	
КонецПроцедуры

Процедура ВывестиДополнительныеПоля(ПараметрыВывода, ОбластьВывода, Область, ТекущийОтбор, ДокументРезультат, 
											Значение, СтрокаОтчета, ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц)
											
	Если СтрокаОтчета.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(СтрокаОтчета.ИмяИзмерения, "Период") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаОтчета.ДополнительныеПоля.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
	ИмяИндекса = "Строка";
	СтруктураПоиска.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
	ИмяИндекса = ИмяИндекса + "," + СтрокаОтчета.ИмяИзмерения;
	ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	
	Если ПараметрыВывода.ИндексыПоискаИзмерений[ИмяИндекса] = Неопределено Тогда
		ПараметрыВывода.ПредставленияИзмерений.Индексы.Добавить(ИмяИндекса);
		ПараметрыВывода.ИндексыПоискаИзмерений.Вставить(ИмяИндекса, Истина);
	КонецЕсли;
	
	СтрокиДанных = ПараметрыВывода.ПредставленияИзмерений.НайтиСтроки(СтруктураПоиска);
	
	СтрокаПредставления = Неопределено;
	Если СтрокиДанных.Количество() Тогда
		СтрокаПредставления = СтрокиДанных[0];
	КонецЕсли;
	
	Для Каждого ДополнительныйРеквизит из СтрокаОтчета.ДополнительныеПоля Цикл
		Если Не ДополнительныйРеквизит.ВОтдельнойКолонке Тогда
			Продолжить;
		КонецЕсли;
		НаименованиеГруппировки = "";
		Если СтрокаПредставления <> Неопределено Тогда
			Если Не ПустаяСтрока(ДополнительныйРеквизит.Заголовок) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ДополнительныйРеквизит.Заголовок + ": ";
			КонецЕсли;
			НаименованиеГруппировки = НаименованиеГруппировки + СтрокаПредставления[ИмяИзмерения + ДополнительныйРеквизит.ИмяРеквизита];
		КонецЕсли;
		Область.Параметры.Группировка = НаименованиеГруппировки;
		Область.Параметры.Расшифровка = ОбластьВывода.Расшифровка;
		ОбластьВывода = ДокументРезультат.Присоединить(Область);
		ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, 
					ЭлементОтчета, Неопределено, ТекущийОтбор, СчетчикСтрок, Неопределено, СчетчикТаблиц);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета, СчетчикТаблиц, НакопленныйОтбор = Неопределено, Уровень = 1, СчетчикСтрок = 0) Экспорт
	
	ДокументРезультат 	= ПараметрыВывода.ДокументРезультат;
	СтруктураОбластей 	= ПараметрыВывода.СтруктураОбластей;
	СтруктураКолонок 	= ПараметрыВывода.СтруктураКолонок;
	ДанныеЯчеек 		= ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска 		= ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования 	= ПараметрыВывода.ДляРедактирования;
	ПараметрыТаблицы 	= ПараметрыВывода.ПараметрыТаблицы;
	ПодчиненныеЭлементыВидаБюджета = ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	ОтрабатываетсяУровней = 8;
	
	УровеньГруппировок = Мин(Уровень, ОтрабатываетсяУровней);
	ПрефиксОбласти = "Группировка" + УровеньГруппировок;
	
	ОтображатьНумерациюСтрок = ПараметрыТаблицы.ОтображатьНумерациюСтрок;
	
	Для Каждого СтрокаОтчета из СтрокиОтчета.Строки Цикл
		
		ИмяОбластиМакета = ПрефиксОбласти;
		Если УровеньГруппировок = ОтрабатываетсяУровней 
			ИЛИ Не СтрокаОтчета.Строки.Количество() Тогда
			ИмяОбластиМакета = ИмяОбластиМакета + "Финал";
		КонецЕсли;
		
		ОбластьНачало = СтруктураОбластей[ИмяОбластиМакета + "НачалоТаблицы" + ?(ОтображатьНумерациюСтрок, "НумерацияСтрок", "")];
		ОбластьЗначение = СтруктураОбластей[ИмяОбластиМакета + "Значение"];
		ОбластьДопСекция = СтруктураОбластей[ИмяОбластиМакета + "ДополнительнаяСекция"];
		ОбластьПримечание = ?(ПараметрыВывода.ВыводитьПримечания,
									СтруктураОбластей[ИмяОбластиМакета + "Примечание"], Неопределено);
		
		Если СтрокаОтчета.ВыводитьВместеСПодчиненным Тогда
			
			ДобавленОтбор = Ложь;
			Если ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение) Тогда
				НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень, СчетчикСтрок);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
			КонецЕсли;
			
		ИначеЕсли СтрокаОтчета.ВыводитьВместеСРодительским Тогда
			
			МассивИзмерений = Новый Массив;
			СписокКВыводу = Новый Массив;
			
			СтрокаДляРасчетаОбъединения = СтрокаОтчета;
			
			Соединенных = -1;
			
			СоответствиеТипов = Новый Соответствие;
			
			ПерваяИтерация = Истина;
			Пока ПерваяИтерация ИЛИ СтрокаДляРасчетаОбъединения.ВыводитьВместеСПодчиненным Цикл
				
				МассивИзмерений.Добавить(СтрокаДляРасчетаОбъединения.ИмяИзмерения);
				
				Если СтрНачинаетсяС(СтрокаДляРасчетаОбъединения.ИмяИзмерения, "Период") Тогда
					ТипЗначенияВидаАналитики = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
				Иначе
					ТипЗначенияВидаАналитики = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
																СтрокаДляРасчетаОбъединения.ИмяИзмерения,
																СтрокаДляРасчетаОбъединения.ВидАналитики);
				КонецЕсли;
				
				СоответствиеТипов.Вставить(СтрокаДляРасчетаОбъединения.ИмяИзмерения, ТипЗначенияВидаАналитики);
				СписокКВыводу.Вставить(0, СтрокаДляРасчетаОбъединения);
				Соединенных = Соединенных + 1 + 	
						БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДляРасчетаОбъединения);
				СтрокаДляРасчетаОбъединения = СтрокаДляРасчетаОбъединения.Родитель;
				
				ПерваяИтерация = Ложь;
				
			КонецЦикла;
			Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - Соединенных;
			
			МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИзмерений);
			
			СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, 
																								ПодчиненныеЭлементыВидаБюджета);
			Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, МассивИзмерений, НакопленныйОтбор, Истина, , СписокЭлементовСПодчиненными, ИндексыПоиска);
			
			Если ДляРедактирования Тогда
				ВГруппировкеЕстьРедактируемые = Ложь;
				Для Каждого Измерение из СписокКВыводу Цикл
					Если Измерение.РедактируемыеЗначения Тогда
						ВГруппировкеЕстьРедактируемые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВГруппировкеЕстьРедактируемые Тогда
					ЕстьСтрокаСПустымиЗначениями = Ложь;
					Для Каждого СтрокаРезультата из Результат Цикл
						ВСтрокеЕстьЗаполненные = Ложь;
						Для Каждого Измерение из СписокКВыводу Цикл
							Если Не Измерение.РедактируемыеЗначения Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаРезультата[Измерение.ИмяИзмерения]) Тогда
								ВСтрокеЕстьЗаполненные = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ВСтрокеЕстьЗаполненные Тогда
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьСтрокаСПустымиЗначениями Тогда
						НоваяСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НакопленныйОтбор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			Если Не Результат.Количество() Тогда
				Результат.Добавить();
			КонецЕсли;
			
			Для Каждого Выборка из Результат Цикл
				
				ТекущийОтбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НакопленныйОтбор);
				Для Каждого Измерение из МассивИзмерений Цикл
					Значение = Выборка[Измерение];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Значение = СоответствиеТипов[Измерение].ПривестиЗначение(Значение);
					КонецЕсли;
					ТекущийОтбор.Вставить(Измерение, Значение);
				КонецЦикла;
				
				ПервыйЭлемент = Истина;
				СчетчикСтрок = СчетчикСтрок + 1;
				ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);				
				НакопленныйТекстГруппировки = "";
				
				Для Каждого ВыводимаяСтрока из СписокКВыводу Цикл
					
					Если ПервыйЭлемент Тогда
						Область = ОбластьНачало;
					Иначе
						Область = ОбластьДопСекция;
					КонецЕсли;
					
					Значение = Выборка[ВыводимаяСтрока.ИмяИзмерения];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Значение = СоответствиеТипов[ВыводимаяСтрока.ИмяИзмерения].ПривестиЗначение(Значение);
					КонецЕсли;
					
					ТекстГруппировки = ТекстГруппировки(Значение,
													ВыводимаяСтрока,
													ПараметрыВывода);
													
					НакопленныйТекстГруппировки = НакопленныйТекстГруппировки + ?(ПервыйЭлемент,"",";") + ТекстГруппировки;
					
					Область.Параметры.Группировка = ТекстГруппировки;
					
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода,
											Значение, ТекущийОтбор, СтрокаОтчета);
											
					Если ПервыйЭлемент Тогда
						ИДПервойГруппировки = ПараметрыВывода.ДанныеРасшифровки[Расшифровка].ИДГруппировки;
					Иначе
						ПараметрыВывода.ДанныеРасшифровки[Расшифровка].Вставить("ИДГруппировки", ИДПервойГруппировки);
					КонецЕсли;
					
					Область.Параметры.Расшифровка = Расшифровка;
					
					Если ПервыйЭлемент Тогда
						Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
							Область.Параметры.НомерСтроки = СчетчикСтрок;
						КонецЕсли;
						ОбластьВывода = ДокументРезультат.Вывести(Область, Уровень - 1);
					Иначе
						ОбластьВывода = ДокументРезультат.Присоединить(Область, Уровень - 1);
					КонецЕсли;
					
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, 
								СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, Неопределено, ТекущийОтбор, СчетчикСтрок, Неопределено, СчетчикТаблиц);
					
					ВывестиДополнительныеПоля(ПараметрыВывода, ОбластьВывода, ОбластьДопСекция, ТекущийОтбор, ДокументРезультат, 
												Значение, ВыводимаяСтрока, СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
					
					ПервыйЭлемент = Ложь;
					
				КонецЦикла;
				
				ОбъединитьНеиспользуемыеЯчейки(ПараметрыВывода, ТекущийОтбор, ДокументРезультат, ОбластьВывода, 
										ОбластьДопСекция, Объединить, СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
				
				ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, ТекущийОтбор);
				ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, НакопленныйТекстГруппировки, ПараметрыВывода, ОбластьВывода,
					?(СписокКВыводу.Количество() > 1, Истина, Ложь));
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, ТекущийОтбор, Уровень + 1, СчетчикСтрок);
				УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				
			КонецЦикла;
			
		Иначе
		
			ЗначениеПредопределено = Ложь;
			Если СтрокаОтчета.РедактируемыеЗначения = Ложь Тогда
			
				ЭтоФиксКолонка = 
					СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
					
					ЗначениеПредопределено = СтрокаОтчета.ЭтоАналитикаПрочее
									ИЛИ ЭтоФиксКолонка ИЛИ ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение);
			КонецЕсли;
				
			// Вывод области.
			Если ЗначениеПредопределено Тогда
				
				ДобавленОтбор = Ложь;
				Если Не ЭтоФиксКолонка Тогда
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
					ДобавленОтбор = Истина;
				КонецЕсли;
				
				ВыводитьВОтчет = Истина;
				// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы.
				Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					Если СтрокаОтчета.Родитель.Строки[0] = СтрокаОтчета Тогда
						ВыводитьВОтчет = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					
					ТекстГруппировки = ТекстГруппировки(СтрокаОтчета.ФиксированноеЗначение,
																СтрокаОтчета,
																ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода,
													СтрокаОтчета.ФиксированноеЗначение, НакопленныйОтбор, СтрокаОтчета);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры.НомерСтроки = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, СтрокаОтчета.ЭлементОтчета, 
													Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено, СчетчикТаблиц);
					
					ВывестиДополнительныеПоля(ПараметрыВывода, ОбластьВывода, ОбластьДопСекция, ТекущийОтбор, ДокументРезультат, 
												СтрокаОтчета.ФиксированноеЗначение, СтрокаОтчета, СтрокаОтчета.ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - 
									БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаОтчета);
					ОбъединитьНеиспользуемыеЯчейки(ПараметрыВывода, ТекущийОтбор, ДокументРезультат, ОбластьВывода, 
											ОбластьДопСекция, Объединить, СтрокаОтчета.ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор);
					ДобавитьСтрокуДереваСпискаРедактирования(СтрокаОтчета.ФиксированноеЗначение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
					
				КонецЕсли;
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень + 1, СчетчикСтрок);
				
				Если ВыводитьВОтчет Тогда
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				КонецЕсли;
				
				Если ДобавленОтбор Тогда
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
				КонецЕсли;
				
			Иначе
				
				СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СтрокаОтчета.ЭлементОтчета, ПодчиненныеЭлементыВидаБюджета);
				Результат = ПолучитьВыборкуЯчеек(ДанныеЯчеек, СтрокаОтчета.ИмяИзмерения, НакопленныйОтбор, Истина, , СписокЭлементовСПодчиненными, ИндексыПоиска);
				
				Если ДляРедактирования Тогда
					Если СтрокаОтчета.РедактируемыеЗначения Тогда
						ЕстьСтрокаСПустымиЗначениями = Ложь;
						Для Каждого СтрокаРезультата из Результат Цикл
							Если ЗначениеЗаполнено(СтрокаРезультата[СтрокаОтчета.ИмяИзмерения]) Тогда
								Продолжить;
							КонецЕсли;
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЦикла;
						Если Не ЕстьСтрокаСПустымиЗначениями Тогда
							Результат.Добавить();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			
				Если Не Результат.Количество() Тогда
					Результат.Добавить();
				КонецЕсли;
				
				Для Каждого Выборка из Результат Цикл
					
					Значение = Выборка[СтрокаОтчета.ИмяИзмерения];
					
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(СтрокаОтчета.ИмяИзмерения, "Период") Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "ПоказательБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "СтатьяБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
													СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ВидАналитики);
						Значение = ТипЗначения.ПривестиЗначение(Значение);
					КонецЕсли;
					
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
					
					ТекстГруппировки = ТекстГруппировки(Значение,
															СтрокаОтчета,
															ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор, СтрокаОтчета);
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры.НомерСтроки = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					ДобавитьОбластьОформления(ПараметрыВывода, ОбластьВывода, СтрокаОтчета.ЭлементОтчета, 
							Неопределено, НакопленныйОтбор, СчетчикСтрок, Неопределено, СчетчикТаблиц);
					
					ВывестиДополнительныеПоля(ПараметрыВывода, ОбластьВывода, ОбластьДопСекция, ТекущийОтбор, ДокументРезультат, 
												Значение, СтрокаОтчета, СтрокаОтчета.ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - 
							БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаОтчета);
					
					ОбъединитьНеиспользуемыеЯчейки(ПараметрыВывода, ТекущийОтбор, ДокументРезультат, ОбластьВывода, 
											ОбластьДопСекция, Объединить, СтрокаОтчета.ЭлементОтчета, СчетчикСтрок, СчетчикТаблиц);
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор);
					ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
						
					ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень + 1, СчетчикСтрок);
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
					
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
					
				КонецЦикла;
				
			КонецЕсли; // ЗначениеПредопределено Тогда
			
		КонецЕсли;// Если ВыводитьВместеСПодчиненным
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыДанных,
										ИмяОбласти, РезультатОтражения, ВсеСтроки = Ложь, ЕстьИзмененияВСвязанныхЯчейках = Ложь) Экспорт
										
	Если ТипЗнч(ПараметрыВыводаВидаБюджета) = Тип("Строка") Тогда
		ПараметрыВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Иначе
		ПараметрыВидаБюджета = ПараметрыВыводаВидаБюджета;
	КонецЕсли;
	
	Если ТипЗнч(АдресДанныхЯчеек) = Тип("Строка") Тогда
		ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	Иначе
		ДанныеЯчеек = АдресДанныхЯчеек;
	КонецЕсли;
	
	СтруктураОписанияОтчета = ПараметрыВидаБюджета.СтруктураОписанияОтчета;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	СтруктураКолонок = ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных;
	ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных, ПараметрыДанных);
	
	Если ВсеСтроки = Истина Тогда
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
		НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		
		СтрокиКРасчету = Новый Массив;
		Для Каждого СтрокаТаблицы из НайденныеСтроки Цикл
			
			Если ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки").РасчетЗаполнение <> "пересчет" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.РассчитанСумма = Ложь;
			СтрокаТаблицы.РассчитанКоличество = Ложь;
			СтрокаТаблицы.РассчитанСуммаВал = Ложь;
			СтрокиКРасчету.Добавить(СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ИмяОбласти) = Тип("Строка") Тогда
					
			СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиСумма");			
			Если СтрокаРасчета <> Неопределено Тогда
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");
				ПрефиксВалюты = ?(ЗначениеЗаполнено(СтрокаРасчета.Валюта), "Вал", "");
				СтрокаРасчета["Сумма" + ПрефиксВалюты + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.СуммаВВалюте;
				СтрокаРасчета["Сумма" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Сумма;	
				Если ТипЗнч(РезультатОтражения.Сумма) = Тип("Число") Тогда
					СтрокаРасчета.Сумма = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Сумма;
				Иначе
					СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
				КонецЕсли;
				Если ТипЗнч(РезультатОтражения.СуммаВВалюте) = Тип("Число") Тогда
					СтрокаРасчета.СуммаВал = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.СуммаВВалюте;
				Иначе
					СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаРасчета = Неопределено Тогда
				СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиКоличество");
				Если СтрокаРасчета <> Неопределено Тогда
					ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");
					СтрокаРасчета["Количество" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Количество;
					Если ТипЗнч(РезультатОтражения.Количество) = Тип("Число") Тогда
						СтрокаРасчета.Количество = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Количество;
					Иначе
						СтрокаРасчета.Количество = РезультатОтражения.Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаРасчета = Неопределено Тогда
				СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиЗначение");
				Если СтрокаРасчета <> Неопределено Тогда
					СтрокаРасчета.Значение = РезультатОтражения.Значение;
				КонецЕсли;
			КонецЕсли;
						
		ИначеЕсли ТипЗнч(ИмяОбласти) = Тип("Структура") Тогда
			
			ИмяПоказателя = Неопределено;
			Если ИмяОбласти.Свойство("ИмяПоказателя", ИмяПоказателя) Тогда
				ИмяОбласти.Удалить("ИмяПоказателя");
			Иначе
				ИмяПоказателя = "Сумма";
			КонецЕсли;
			
			СтрокиОснования = Неопределено;
			Если ИмяОбласти.Свойство("СтрокиОснования", СтрокиОснования) Тогда
				ИмяОбласти.Удалить("СтрокиОснования");
			Иначе
				Если ТипЗнч(ИмяОбласти.Строка) = Тип("Массив") Тогда
					СтрокиОснования = ИмяОбласти.Строка;
				Иначе
					СтрокиОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбласти.Строка);
				КонецЕсли;
				ИмяОбласти.Удалить("Строка");
			КонецЕсли;
			
			ИмяОбласти.Вставить("ОсновнойЭлемент", Истина);
			Для Каждого Строка из СтрокиОснования Цикл
				ИмяОбласти.Вставить("Строка", Строка);
				СтрокиРасчета = ДанныеЯчеек.НайтиСтроки(ИмяОбласти);
				Если Не СтрокиРасчета.Количество() Тогда
					СтруктураПоискаЯчейки = Новый Структура("Строка, Колонка, ОсновнойЭлемент", Строка, ИмяОбласти.Колонка, Истина);
					СтрокаСтруктурыЯчеек = ПараметрыВидаБюджета.СтруктураОписанияОтчета.СтруктураЯчеек.НайтиСтроки(СтруктураПоискаЯчейки);
					СтруктураЗаполнения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИмяОбласти);
					НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, СтрокаСтруктурыЯчеек[0], СтруктураЗаполнения, ИмяОбласти.Колонка);
					СтрокиРасчета.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПоискСтроки из СтрокиРасчета Цикл
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(ПоискСтроки.ИндексСтроки, "ИндексСтроки");
				Если ПараметрыЯчейки.ФлагСумма И ИмяПоказателя = "Сумма" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				ИначеЕсли ПараметрыЯчейки.ФлагКоличество И ИмяПоказателя = "Количество" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				ИначеЕсли ПараметрыЯчейки.ФлагЗначение И ИмяПоказателя = "Значение" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");

			Если ИмяПоказателя = "Сумма" Тогда
				ПрефиксВалюты = ?(ЗначениеЗаполнено(СтрокаРасчета.Валюта), "Вал", "");
				СтрокаРасчета["Сумма" + ПрефиксВалюты + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.СуммаВВалюте;
				СтрокаРасчета["Сумма" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Сумма;
				Если ТипЗнч(РезультатОтражения.Сумма) = Тип("Число") Тогда
					СтрокаРасчета.Сумма = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Сумма;
				Иначе
					СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
				КонецЕсли;
				Если ТипЗнч(РезультатОтражения.СуммаВВалюте) = Тип("Число") Тогда
					СтрокаРасчета.СуммаВал = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.СуммаВВалюте;
				Иначе
					СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
				КонецЕсли;
				СтрокаРасчета.РассчитанСумма = Истина;
			КонецЕсли;
			Если ИмяПоказателя = "Количество" Тогда
				СтрокаРасчета["Количество" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Количество;
				Если ТипЗнч(РезультатОтражения.Количество) = Тип("Число") Тогда
					СтрокаРасчета.Количество = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Количество;
				Иначе
					СтрокаРасчета.Количество = РезультатОтражения.Количество;
				КонецЕсли;
				СтрокаРасчета.РассчитанКоличество = Истина;
			КонецЕсли;
			Если ИмяПоказателя = "Значение" Тогда
				СтрокаРасчета.Значение = РезультатОтражения.Значение;
				СтрокаРасчета.РассчитанЗначение = Истина;
			КонецЕсли;
			
			Если СтрокаРасчета = Неопределено Тогда
				//случай, когда строки нет в данных ячеек
				//например, когда это - добавленная через список строка
				Возврат Неопределено;
			КонецЕсли;
		
		КонецЕсли;
								
		// только связанные с текущей
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, СтрокаРасчета.Строка, СтрокаРасчета.Колонка);
		СтрокаСтруктурыЯчеек = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска)[0];
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаСтруктурыЯчеек.ИндексСтроки, "ИндексСтроки");
		
		СтрокиКРасчету = Новый Массив;

		Для Каждого СвязаннаяЯчейка из ПараметрыЯчейки.СвязанныеЯчейки Цикл
			
			СтруктураПоиска = Новый Структура(СвязаннаяЯчейка.ОбщиеИзмерения);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасчета);
			СтруктураПоиска.Вставить("Строка", СвязаннаяЯчейка.Строка);
			СтруктураПоиска.Вставить("Колонка", СвязаннаяЯчейка.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			Если Не НайденныеСтроки.Количество() Тогда
				СтруктураПоискаЯчейки = Новый Структура("Строка, Колонка, ОсновнойЭлемент", СтруктураПоиска.Строка, СтруктураПоиска.Колонка, Истина);
				СтрокаСтруктурыЯчеек = ПараметрыВидаБюджета.СтруктураОписанияОтчета.СтруктураЯчеек.НайтиСтроки(СтруктураПоискаЯчейки);
				НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, СтрокаСтруктурыЯчеек[0], СтруктураПоиска, СвязаннаяЯчейка.Колонка);
				СтрокиКРасчету.Добавить(НоваяСтрока);
			Иначе
				Для Каждого СтрокаТаблицы из НайденныеСтроки Цикл
					СтрокаТаблицы.РассчитанСумма = Ложь;
					СтрокаТаблицы.РассчитанКоличество = Ложь;
					СтрокаТаблицы.РассчитанСуммаВал = Ложь;
					СтрокиКРасчету.Добавить(СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	ТаблицаИзменений.Колонки.Добавить("Расшифровка");
	
	ЕстьВалюта = СтруктураЯчеек.Колонки.Найти("Валюта") <> Неопределено;
	
	Для Каждого СтрокаТаблицы из СтрокиКРасчету Цикл
		
		ЕстьИзмененияВСвязанныхЯчейках = Истина;
		
		Расшифровка = Новый Структура;
		Для Каждого Периодичность из СтруктураКолонок.Периодичности Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы["Период" + Периодичность]) Тогда
				Расшифровка.Вставить("Период" + Периодичность, СтрокаТаблицы["Период" + Периодичность]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение из СтруктураКолонок.Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого Поле из СтруктураКолонок.ВидыАналитик Цикл
			Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Поле);
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				СоответствиеЗначенийАналитик.Вставить(Поле, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
			Расшифровка.Вставить("Валюта", СтрокаТаблицы.Валюта);
		КонецЕсли;
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаТаблицы.СтатьяБюджетов);
		
		РасшифровкаСумма = Расшифровка;
		РасшифровкаКоличество = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасшифровкаСумма);
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.ОбратныйЗнак = Неопределено Тогда
			ПараметрыЯчейки.ОбратныйЗнак = Ложь;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			РасшифровкаКоличество.Вставить("ИмяПоказателя", "Количество");
			Количество = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаТаблицы, "Количество", Истина);
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиКоличество;
			//в данные документа для ввода значение связанной ячейки должно попасть
			//с положительным знаком
			Если Количество = "#Знач" Тогда
				НовоеИзменение.Значение = Количество;
			Иначе
				Если ТипЗнч(Количество) <> Тип("Число") Тогда
					НовоеИзменение.Значение = "#Знач";
				Иначе
					НовоеИзменение.Значение = Количество * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
				КонецЕсли;
			КонецЕсли;
			НовоеИзменение.Расшифровка = РасшифровкаКоличество;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			РасшифровкаСумма.Вставить("ИмяПоказателя", "Сумма");
			Сумма = РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаТаблицы, "Сумма", Истина);
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиСумма;
			//в данные документа для ввода значение связанной ячейки должно попасть
			//с положительным знаком
			Если Сумма = "#Знач" Тогда
				НовоеИзменение.Значение = Сумма;
			Иначе
				Если ТипЗнч(Сумма) <> Тип("Число") Тогда
					НовоеИзменение.Значение = "#Знач";
				Иначе
					НовоеИзменение.Значение = Сумма * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
				КонецЕсли;
			КонецЕсли;
			НовоеИзменение.Расшифровка = РасшифровкаСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("Результат, ПараметрыВыводаВидаБюджета, ДанныеЯчеек", ТаблицаИзменений, ПараметрыВидаБюджета, ДанныеЯчеек);
	Возврат Результат;
	
КонецФункции

Функция РассчитатьИзмененияВОтчете(ПараметрыЯчеек, ПредыдущиеДанныеЯчеек, НовыеДанныеЯчеек, 
											СтрокиКРасчету, МассивКПересчету, ПараметрыПериодов, ИндексыПоиска)
											
	ТаблицаИзменений = Новый Соответствие;
	
	Для Каждого Индекс из ИндексыПоиска Цикл
		НовыеДанныеЯчеек.Индексы.Добавить(Индекс.Ключ);
	КонецЦикла;
	
	//пересчитаем строки
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
	НайденныеСтроки = НовыеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаНовыхДанных из СтрокиКРасчету Цикл
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаНовыхДанных.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.ФлагСумма Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Сумма");
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Количество");
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагЗначение Тогда
			РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Значение");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
	НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	
	//Итерация = 1 - расчет итоговых ячеек, 
	//Итерация = 2 - расчет связанных ячеек
	Итерация = 1;
	МассивКПересчетуИзменения = Новый Массив();
	СвязанныеСтрокиКПересчету = Новый Массив();
	ИзмененияСвязанныхЯчеек = Новый Массив();
	
	Пока Итерация <= 2 Цикл
		
		Если Итерация = 1 Тогда
			СтрокиКПересчету = МассивКПересчету;
		Иначе
			СтрокиКПересчету = СвязанныеСтрокиКПересчету;
		КонецЕсли;
	
		Для Каждого ЯчейкаОтчета из СтрокиКПересчету Цикл
			
			Если ЯчейкаОтчета.ОтборЯчейки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЯчейкаОтчета.ОтборЯчейки);
			ОтборЯчейки = Новый Структура;
			Для Каждого Измерение из МассивОтбора Цикл
				ОтборЯчейки.Вставить(Измерение, ЯчейкаОтчета[Измерение]);
			КонецЦикла;
			
			НайденныеНовыеСтроки = НовыеДанныеЯчеек.НайтиСтроки(ОтборЯчейки);
			Если Не НайденныеНовыеСтроки.Количество() Тогда
				НоваяСтрока = НовыеДанныеЯчеек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЯчейкаОтчета,, "Значение, Сумма, СуммаВал, Количество");
				СтрокаНовыхДанных = НоваяСтрока;
			Иначе
				СтрокаНовыхДанных = НайденныеНовыеСтроки[0];
			КонецЕсли;
			
			СтрокаНовыхДанных.РассчитанСумма = Ложь;
			СтрокаНовыхДанных.РассчитанКоличество = Ложь;
			СтрокаНовыхДанных.РассчитанЗначение = Ложь;
			СтрокаНовыхДанных.РассчитанСуммаВал = Ложь;
			
			ЗаполняемыеПоля = "ОтборЯчейки, ИмяОбластиЗначение, ИмяОбластиКоличество, ИмяОбластиСумма";
			ЗаполнитьЗначенияСвойств(СтрокаНовыхДанных, ЯчейкаОтчета, ЗаполняемыеПоля);
			Если ЗначениеЗаполнено(ЯчейкаОтчета.Валюта) 
				И Не ЗначениеЗаполнено(СтрокаНовыхДанных.Валюта) Тогда
				СтрокаНовыхДанных.Валюта = ЯчейкаОтчета.Валюта;
			КонецЕсли;
			
			ПараметрыЯчейки = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
			
			Если Итерация = 1 И ПараметрыЯчейки.РасчетЗаполнение <> "итог" Тогда
				Продолжить;
			ИначеЕсли Итерация = 2 И ПараметрыЯчейки.РасчетЗаполнение <> "пересчет" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагКоличество
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиКоличество) Тогда
				
				НовоеКоличество = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Количество", Истина);
				СтароеКоличество = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Количество", Истина);
				
				Если НовоеКоличество <> СтароеКоличество Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиКоличество, НовоеКоличество);
					Если Итерация = 1 И МассивКПересчетуИзменения.Найти(ЯчейкаОтчета) = Неопределено Тогда
						МассивКПересчетуИзменения.Добавить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 И ИзмененияСвязанныхЯчеек.Найти(СтрокаНовыхДанных) = Неопределено Тогда
						ИзмененияСвязанныхЯчеек.Добавить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагСумма
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиСумма) Тогда
				
				НоваяСумма = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Сумма", Истина);
				СтараяСумма = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Сумма", Истина);
				
				Если НоваяСумма <> СтараяСумма Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиСумма, НоваяСумма);
					Если Итерация = 1 И МассивКПересчетуИзменения.Найти(ЯчейкаОтчета) = Неопределено Тогда
						МассивКПересчетуИзменения.Добавить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 И ИзмененияСвязанныхЯчеек.Найти(СтрокаНовыхДанных) = Неопределено Тогда
						ИзмененияСвязанныхЯчеек.Добавить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагЗначение
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиЗначение) Тогда
				
				НовоеЗначение = РассчитатьЗначениеЯчейки(НовыеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаНовыхДанных, "Значение", Истина);
				СтароеЗначение = РассчитатьЗначениеЯчейки(ПредыдущиеДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ЯчейкаОтчета, "Значение", Истина);
				
				Если НовоеЗначение <> СтароеЗначение Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиЗначение, НовоеЗначение);
					Если Итерация = 1 И МассивКПересчетуИзменения.Найти(ЯчейкаОтчета) = Неопределено Тогда
						МассивКПересчетуИзменения.Добавить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 И ИзмененияСвязанныхЯчеек.Найти(СтрокаНовыхДанных) = Неопределено Тогда
						ИзмененияСвязанныхЯчеек.Добавить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Итерация = 1 Тогда 
			Для Каждого СтрокаКПересчету Из МассивКПересчетуИзменения Цикл
				
				Если Не СтрокаКПересчету.РасчетЗаполнение = "итог" Тогда
					Продолжить;
				КонецЕсли;
				
				// только связанные с текущей
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаКПересчету.ИндексСтроки, "ИндексСтроки");
				
				Если Не ПараметрыЯчейки = Неопределено И Не ПараметрыЯчейки.СвязанныеЯчейки = Неопределено Тогда
					Для Каждого СвязаннаяЯчейка из ПараметрыЯчейки.СвязанныеЯчейки Цикл
						
						СтруктураПоиска = Новый Структура(СвязаннаяЯчейка.ОбщиеИзмерения);
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКПересчету);
						СтруктураПоиска.Вставить("Строка", СвязаннаяЯчейка.Строка);
						СтруктураПоиска.Вставить("Колонка", СвязаннаяЯчейка.Колонка);
						СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
						
						НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() Тогда
							Для Каждого СтрокаТаблицы из НайденныеСтроки Цикл
								Если Не СтрокаТаблицы.РасчетЗаполнение = "пересчет" Тогда
									Продолжить;
								КонецЕсли;
								Если СвязанныеСтрокиКПересчету.Найти(СтрокаТаблицы) = Неопределено Тогда
									СвязанныеСтрокиКПересчету.Добавить(СтрокаТаблицы);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Итерация = Итерация + 1;
		
	КонецЦикла;
	
	Результат = Новый Структура("ТаблицаИзменений, ИзмененияСвязанныхЯчеек", ТаблицаИзменений, ИзмененияСвязанныхЯчеек);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиДанныеВОтчет(ПараметрыВывода)
	
	ДеревоВывода 		= ПараметрыВывода.ДеревоВывода;
	ВидБюджета 			= ПараметрыВывода.ВидБюджета;
	НачалоПериода 		= ПараметрыВывода.НачалоПериода;
	КонецПериода 		= ПараметрыВывода.КонецПериода;
	ДляРедактирования 	= ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	
	ДокументРезультат 	= Новый ТабличныйДокумент;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	КоличествоТаблиц = 0;
	КоличествоСтрокСверху = 0;
	
	СтруктураОбластей = СтруктураОбластейМакета(ПараметрыВывода);
	
	ПараметрыВывода.Вставить("ДокументРезультат", ДокументРезультат);
	ПараметрыВывода.Вставить("СтруктураОбластей", СтруктураОбластей);
	ПараметрыВывода.Вставить("ДляРедактирования", ДляРедактирования);
	
	ПредыдущееИмяИзмерения = "";
	ПредыдущийЗаголовок = "";
	ПараметрыТаблицы = Неопределено;
	
	Для Каждого ЭлементВывода из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "ТекстовыйБлок" Тогда
			
			ВыводитьЗаголовок = НЕ (ЭлементВывода.ТолькоДляПечати
										И ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
					
			Если ВыводитьЗаголовок Тогда
				УстановитьПараметрыВНаименованииДляПечати(ЭлементВывода.НаименованиеДляПечати, ПараметрыВывода.ЗначенияПодстановки);
				ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
				Если КоличествоТаблиц = 0 Тогда
					КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
				КонецЕсли;
				ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			КонецЕсли;
			
		ИначеЕсли ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			
			Если ЭлементВывода.ВыводитьЗаголовокВОтчет = Истина Тогда
				ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
				ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			ИначеЕсли ПредыдущееИмяИзмерения = "Таблица" Тогда
				ДокументРезультат.Вывести(СтруктураОбластей.ПустаяСтрока, 0);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 1;
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
			
			СтруктураКолонок = ПолучитьДеревоГруппировокКолонок(ПараметрыВывода, ПараметрыВывода.ИндексыПоискаИзмерений, 
																ЭлементВывода.Строки.Найти("Колонки"));
			КоличествоСтрокСверху = КоличествоСтрокСверху + ГлубинаДерева(СтруктураКолонок.Строки) + 1;
			
			СтрокиОтчета = ЭлементВывода.Строки.Найти("Строки");
			СложнаяТаблица = ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
			ПараметрыТаблицы = ЭлементВывода.ПараметрыТаблицы;
			
			ПараметрыВывода.Вставить("СложнаяТаблица", СложнаяТаблица);
			ПараметрыВывода.Вставить("СтруктураКолонок", СтруктураКолонок);
			ПараметрыВывода.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
			Если ПараметрыТаблицы.Свойство("ДанныеОтчетаДляОформления") Тогда
				СуществующаяТаблица = Неопределено;
				Если ПараметрыВывода.Свойство("ДанныеОтчетаДляОформления", СуществующаяТаблица)
						И СуществующаяТаблица <> Неопределено Тогда
					Для Каждого Колонка из ПараметрыТаблицы.ДанныеОтчетаДляОформления.Колонки Цикл
						Если СуществующаяТаблица.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
							СуществующаяТаблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
						КонецЕсли;
					КонецЦикла;
					ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", СуществующаяТаблица);
				Иначе
					ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", ПараметрыТаблицы.ДанныеОтчетаДляОформления.СкопироватьКолонки());
				КонецЕсли;
			Иначе
				ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", Неопределено);
			КонецЕсли;
			
			ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, ЭлементВывода, КоличествоТаблиц);
			
			Если ДляРедактирования
					ИЛИ ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
					
				КорневаяСтрока = ПараметрыВывода.ДеревоСтрокСпискаРедактирования.Строки.Добавить();
				Если ПустаяСтрока(ПредыдущийЗаголовок) Тогда
					КорневаяСтрока.Представление = НСтр("ru = 'Статьи бюджета'");
				Иначе
					КорневаяСтрока.Представление = ПредыдущийЗаголовок;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементВывода.ВидЭлемента) Тогда
					КорневаяСтрока.Картинка = 9;
				Иначе
					КорневаяСтрока.Картинка = 21;
				КонецЕсли;
				КорневаяСтрока.Уровень = 1;
				КорневаяСтрока.ИДТаблицы = Новый УникальныйИдентификатор;
				ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", КорневаяСтрока);
				КолонкиТаблиц = Неопределено;
				Если Не ПараметрыВывода.Свойство("КолонкиТаблиц", КолонкиТаблиц) Тогда
					КолонкиТаблиц = Новый Соответствие;
				КонецЕсли;
				КолонкиТаблиц.Вставить(КорневаяСтрока.ИДТаблицы, СтруктураКолонок);
				ПараметрыВывода.Вставить("КолонкиТаблиц", КолонкиТаблиц);
				
				Если ПараметрыВывода.ВыводитьПримечания Тогда
					ПараметрыВывода.Примечания.НомерТаблицы = ?(ПараметрыВывода.ВыводитьНомераТаблиц, КоличествоТаблиц, 0);
					ПараметрыВывода.Примечания.НомерПримечания = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета, КоличествоТаблиц);
			
			ПредыдущийЗаголовок = "";
			
		КонецЕсли;
		ПредыдущееИмяИзмерения = ЭлементВывода.ИмяИзмерения;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	Если КоличествоТаблиц = 1 Тогда
		ДокументРезультат.ФиксацияСверху = КоличествоСтрокСверху;
		ДокументРезультат.ФиксацияСлева = 2 + ПараметрыТаблицы.КоличествоДополнительныхКолонок;
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода)
	
	Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета Тогда
		Область = СтруктураОбластей["ЗаголовокОтчета"];
		Область.Параметры.ЗаголовокОтчета = ЭлементВывода.НаименованиеДляПечати;
	ИначеЕсли ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
		Область = СтруктураОбластей["ЗаголовокТаблицы"];
		Область.Параметры.ЗаголовокТаблицы = ЭлементВывода.НаименованиеДляПечати;
	Иначе
		Область = СтруктураОбластей["Текст"];
		Область.Параметры.Текст  = ЭлементВывода.НаименованиеДляПечати;
	КонецЕсли;
	
	ДокументРезультат.Вывести(Область, 0);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеБюджета

Процедура ОформитьОбластиПоРезультатамКомпоновки(ДокументРезультат, ПараметрыВывода, ТаблицаОформления, ЭлементыОформления)
	
	Для Каждого СтрокаОформления ИЗ ТаблицаОформления Цикл
		
		НайденнаяСтрока = ЭлементыОформления.Найти(СтрокаОформления.КлючЭлементаОформления, "КлючЭлементаОформления");
		Области = СтрокаОформления.ИмяОбласти;
		Оформление = НайденнаяСтрока.Оформление.Получить();
		
		Для Каждого ИмяОбласти из Области Цикл
			Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДокумента = ДокументРезультат.Область(ИмяОбласти);
			Для Каждого ЭлементОформления из Оформление Цикл
				Если ЭлементОформления.Параметр = НСтр("ru = 'Цвет фона'") Тогда
					ОбластьДокумента.ЦветФона = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Цвет текста'") Тогда
					ОбластьДокумента.ЦветТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Цвет границы'") Тогда
					ОбластьДокумента.ЦветРамки = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Шрифт'") Тогда
					ОбластьДокумента.Шрифт = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Горизонтальное положение'") Тогда
					ОбластьДокумента.ГоризонтальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Вертикальное положение'") Тогда
					ОбластьДокумента.ВертикальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Ориентация текста'") Тогда
					ОбластьДокумента.ОриентацияТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = НСтр("ru = 'Формат'") Тогда
					Если Не ОбластьДокумента.СодержитЗначение Тогда
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Расшифровка = ОбластьДокумента.Расшифровка;
						Расшифровка = ПараметрыВывода.ДанныеРасшифровки[Расшифровка];
						Если ТипЗнч(Расшифровка) = Тип("Структура")
							И Расшифровка.Свойство("Значение") Тогда
							ОбластьДокумента.Текст = Формат(Расшифровка.Значение, ЭлементОформления.Оформление);
						КонецЕсли;
					Иначе
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Начало = СтрНайти(ВРег(ОбластьДокумента.Формат), "ЧС");
						Если Начало Тогда
							ОстатокСтроки = Сред(ОбластьДокумента.Формат, Начало);
							Разделитель = СтрНайти(ОстатокСтроки, ";");
							Если Разделитель Тогда
								ОстатокСтроки = Лев(ОстатокСтроки, Разделитель);
							КонецЕсли;
							ОбластьДокумента.Формат = СтрЗаменить(ОбластьДокумента.Формат, ОстатокСтроки, "");
							ОстатокСтроки = Сред(ОстатокСтроки, СтрНайти(ОстатокСтроки, "=")+1);
							ОстатокСтроки = СтрЗаменить(ОстатокСтроки, "'", "");
							ОстатокСтроки = СокрЛП(ОстатокСтроки);
							Если Лев(ОстатокСтроки, 1) = "-" Тогда
								Знак = -1;
								ОстатокСтроки = Сред(ОстатокСтроки, 2);
							Иначе
								Знак = 1;
							КонецЕсли;
							Если Не ПустаяСтрока(ОстатокСтроки) И 
								СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОстатокСтроки, Ложь, Ложь) Тогда
								
								ОстатокСтроки = Знак * Число(ОстатокСтроки);
								ПараметрыВывода.ДанныеРасшифровки[ОбластьДокумента.Расшифровка].Вставить("СокращенныеРазряды", ОстатокСтроки);
								ОбластьДокумента.Значение = ОбластьДокумента.Значение / Pow(10, ОстатокСтроки);
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбластиОформленияИзТаблицы(Таблица, КлючЭлементаОформления) Экспорт
	
	Массив = Новый Массив;
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("КлючЭлементаОформления", КлючЭлементаОформления));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Массив.Добавить(НайденнаяСтрока.ИмяОбласти);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления()
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ЯчейкиПоКлючам = ФинансоваяОтчетностьСервер.НоваяСхема();
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭлементыОформления");
	Набор.ИмяОбъекта = "ЭлементыОформления";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеСтроки");
	Набор.ИмяОбъекта = "ОформляемыеСтроки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Набор = ФинОтчеты.НовыйНабор(ЯчейкиПоКлючам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеКолонки");
	Набор.ИмяОбъекта = "ОформляемыеКолонки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Колонка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеСтроки", "КлючЭлементаОформления");
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеКолонки", "КлючЭлементаОформления");
	
	Группировка = ЯчейкиПоКлючам.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Строка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Колонка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "НомерТаблицы");
	
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
																			
	Возврат ЯчейкиПоКлючам;
																			
КонецФункции

Функция ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, ТипОформляемойОбласти, ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	Для Каждого Колонка из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	ВычисляемоеПоле = ФинОтчеты.НовоеВычисляемоеПоле(КомпоновкаПоЯчейкам, "ЗначениеЯчейки", "
																			|ВЫБОР 
																			|	КОГДА ФлагЗначение = ИСТИНА ТОГДА Значение
																			|	КОГДА ФлагСумма = ИСТИНА ТОГДА Сумма
																			|	КОГДА ФлагКоличество = ИСТИНА ТОГДА Количество
																			|КОНЕЦ");
	
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЯчейкиПоКлючам");
	Набор.ИмяОбъекта = "ЯчейкиПоКлючам";
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка", "СтрокаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка", "КолонкаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "ТипОформляемойОбласти", ТипОформляемойОбласти);
	
	ГруппаИЛИ = КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления из ТаблицаЭлементов Цикл
		ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ФинОтчеты.НовыйОтбор(ГруппаИ, "КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления);
		ФинОтчеты.СкопироватьОтбор(ЭлементОформления.Условие.Получить().Отбор, ГруппаИ, Истина);
	КонецЦикла;
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	Для Каждого Колонка из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	Набор = ФинОтчеты.НовыйНабор(КомпоновкаПоЯчейкам, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДоступныеКлючи");
	Набор.ИмяОбъекта = "ДоступныеКлючи";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ТипОформляемойОбласти, ЭлементыОформления, 
							ДанныеОтчетаДляОформления, РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
															ТипОформляемойОбласти, ДанныеОтчетаДляОформления);
	
	ПолеСоединенияФинальныхНаборов = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Строка", "Колонка");
	ФинОтчеты.НовоеПолеГруппировки(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура[0], ПолеСоединенияФинальныхНаборов);
	ФинОтчеты.НовоеПолеГруппировки(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура[0], "НомерТаблицы");
	
	ПолеСоединения = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Строка", "Колонка");
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", ПолеСоединения + "Ячеек", ПолеСоединения);
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления из ТаблицаЭлементов Цикл
		
		ЭлементыЗамены = РасшифровкаПолейОтбораЭО.НайтиСтроки(Новый Структура("КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления));
		
		Для Каждого ЭлементЗамены из ЭлементыЗамены Цикл
			
			Если КомпоновкаПоЯчейкам.ВычисляемыеПоля.Найти("[" + ЭлементЗамены.ИмяПоляОтбора + "]") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТипаЭлемента = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Колонка", "Строка");
			ИмяПараметраФильтра = ИмяТипаЭлемента + "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(КомпоновкаПоЯчейкам, ЭлементЗамены.ИмяПоляОтбора, 
													"ВЫБОР КОГДА " + ИмяТипаЭлемента + " = &" + ИмяПараметраФильтра + " ТОГДА
													|				" + ЭлементЗамены.ИмяРесурса + " ИНАЧЕ NULL КОНЕЦ");
			
			ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, ЭлементЗамены.ИмяПоляОтбора);
			Параметр = КомпоновкаПоЯчейкам.Параметры.Добавить();
			Параметр.Имя = ИмяПараметраФильтра;
			Параметр.Значение = ЭлементЗамены.ЭлементОтчета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Для Каждого Параметр из КомпоновкаПоЯчейкам.Параметры Цикл
		ФинОтчеты.УстановитьПараметр(КомпоновщикНастроек.Настройки.ПараметрыДанных, Параметр.Имя, Параметр.Значение, Истина);
	КонецЦикла;
	ДоступныеКлючи = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ДоступныеКлючи", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ДоступныеКлючи", "ТаблицаДанных", ПолеСоединенияФинальныхНаборов);
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ДоступныеКлючи", ДоступныеКлючи);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	Возврат Результат;
	
КонецФункции

Процедура ОформитьБюджет(ТабличныйДокументРезультат, ПараметрыВывода, ДеревоВывода) Экспорт
	
	ДанныеОтчетаДляОформления = ПараметрыВывода.ДанныеОтчетаДляОформления;
	
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		//Измерения и показатели без таблицы
		Возврат;
	КонецЕсли;
	
	ТаблицаОформления = Неопределено;
	
	ЭлементыОформления = Новый ТаблицаЗначений;
	ЭлементыОформления.Колонки.Добавить("ПорядковыйНомер");
	ЭлементыОформления.Колонки.Добавить("Оформление");
	ЭлементыОформления.Колонки.Добавить("Условие");
	ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
	ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
	ЭлементыОформления.Колонки.Добавить("НомерТаблицы");
	
	ОформляемыеСтроки = Новый ТаблицаЗначений;
	ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
	
	ОформляемыеКолонки = Новый ТаблицаЗначений;
	ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
	
	РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
	
	СтруктураТаблиц = Новый Структура("ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
	
	СтрокиТаблиц = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", "Таблица"));
	НомерТаблицы = 1;
	Для Каждого СтрокаТаблицы из СтрокиТаблиц Цикл
		
		Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
			Таблица = Неопределено;
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			
			Если СтрокаТаблицы.ПараметрыТаблицы.Свойство(ИмяТаблицы, Таблица) Тогда
				Если ИмяТаблицы = "ЭлементыОформления" Тогда
					Если Таблица.Колонки.Найти("НомерТаблицы") = Неопределено Тогда
						Таблица.Колонки.Добавить("НомерТаблицы");	
					КонецЕсли;
					Таблица.ЗаполнитьЗначения(НомерТаблицы, "НомерТаблицы");
				КонецЕсли;
				
				Если ИмяТаблицы = "ЭлементыОформления" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ЭлементыОформления);
				ИначеЕсли ИмяТаблицы = "ОформляемыеСтроки" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ОформляемыеСтроки);
				ИначеЕсли ИмяТаблицы = "ОформляемыеКолонки" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ОформляемыеКолонки);
				ИначеЕсли ИмяТаблицы = "РасшифровкаПолейОтбораЭО" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, РасшифровкаПолейОтбораЭО);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НомерТаблицы = НомерТаблицы + 1;
	КонецЦикла;
	
	Если Не ЭлементыОформления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из ЭлементыОформления Цикл
		Строка.ПорядковыйНомер = ЭлементыОформления.Индекс(Строка);
	КонецЦикла;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	СхемаЯчеекПоКлючам = ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления();
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЭлементыОформления", ЭлементыОформления);
	ВнешниеНаборы.Вставить("ОформляемыеСтроки", ОформляемыеСтроки);
	ВнешниеНаборы.Вставить("ОформляемыеКолонки", ОформляемыеКолонки);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(СхемаЯчеекПоКлючам);
	ЯчейкиПоКлючам = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаЯчеекПоКлючам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ТаблицаОформления = Новый ТаблицаЗначений;
	ТаблицаОформления.Колонки.Добавить("КлючЭлементаОформления");
	ТаблицаОформления.Колонки.Добавить("ИмяОбласти");
	ТаблицаОформления.Колонки.Добавить("ПорядковыйНомер");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	//Получение областей для оформления. Ячейки
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЯчейкиНаПересеченииСтрокИКолонок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, ОформляемыйТип, ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
			
		//Получение областей для оформления. Строки
		Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ОформляемыйТип, ЭлементыОформления, ДанныеОтчетаДляОформления, 
																						РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяКолонка;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
				
		//Получение областей для оформления. Колонки
		
		Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ОформляемыйТип, ЭлементыОформления, ДанныеОтчетаДляОформления, 
																						РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиСтрок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		//Получение областей для оформления. ЗаголовкиСтрок
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
														ОформляемыйТип, ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Колонка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиКолонок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		//Получение областей для оформления. ЗаголовкиКолонок
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
															ОформляемыйТип, ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Строка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяТаблица;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
	
		//Получение областей для оформления. ВсяТаблица
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, 
															ОформляемыйТип, ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	КонецЕсли;
	
	ТаблицаОформления.Сортировать("ПорядковыйНомер");
	
	ОформитьОбластиПоРезультатамКомпоновки(ТабличныйДокументРезультат, ПараметрыВывода, ТаблицаОформления, ЭлементыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииФормулБюджетныхОтчетов

Функция ПроверитьАргументФункции(Аргумент) Экспорт
	
	Если Аргумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Аргумент = Число(Аргумент);
	Исключение
		Аргумент = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция Максимум(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = Неопределено;
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Если Результат = Неопределено Тогда
							 Результат = Значение;
						 Иначе
							 Результат = Макс(Результат, Значение);
						 КонецЕсли;
					 КонецЦикла;
					 
				 КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Минимум(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = Неопределено;
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Если Результат = Неопределено Тогда
							 Результат = Значение;
						 Иначе
							 Результат = Мин(Результат, Значение);
						 КонецЕсли;
						 
					 КонецЦикла;
				 КонецЦикла;
				 
	Возврат Результат;
				 
КонецФункции

Функция Сумма(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = Неопределено;
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Если Результат = Неопределено Тогда
							 Результат = Значение;
						 Иначе
							 Результат = Результат + Значение;
						 КонецЕсли;
						 
					 КонецЦикла;
					 
				 КонецЦикла;
				 
	//если не было значений для вычислений - возвращаем 0
	Возврат ?(Результат = Неопределено, 0, Результат);
				 
КонецФункции

Функция Среднее(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = Неопределено;
				 Всего = 0;
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Всего = Всего + 1;
						 Если Результат = Неопределено Тогда
							 Результат = Значение;
						 Иначе
							 Результат = Результат + Значение;
						 КонецЕсли;
						 
					 КонецЦикла;
					 
				 КонецЦикла;
				 
				 Если Всего = 0 Тогда
					 Возврат "#Знач";
				 КонецЕсли;
				 
	Возврат Результат / Всего;
	
КонецФункции

Функция РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
				 МассивЗначений = Новый Массив;
				 МассивЗначений.Добавить(Значение1);
				 МассивЗначений.Добавить(Значение2);
				 МассивЗначений.Добавить(Значение3);
				 МассивЗначений.Добавить(Значение4);
				 МассивЗначений.Добавить(Значение5);
				 МассивЗначений.Добавить(Значение6);
				 МассивЗначений.Добавить(Значение7);
				 МассивЗначений.Добавить(Значение8);
				 МассивЗначений.Добавить(Значение9);
				 МассивЗначений.Добавить(Значение10);
				 МассивЗначений.Добавить(Значение11);
				 МассивЗначений.Добавить(Значение12);
				 МассивЗначений.Добавить(Значение13);
				 МассивЗначений.Добавить(Значение14);
				 МассивЗначений.Добавить(Значение15);
				 МассивЗначений.Добавить(Значение16);
				 МассивЗначений.Добавить(Значение17);
				 МассивЗначений.Добавить(Значение18);
				 МассивЗначений.Добавить(Значение19);
				 МассивЗначений.Добавить(Значение20);
				 
				 Результат = 0;
				 ФлагВедущееЗначение = Истина;
				 ВедущееЗначение = 0;
				 
				 Для Каждого ЗначениеФункции из МассивЗначений Цикл
					 
					 СчВлож = 0;
					 ОбошлиВсе = Ложь;
					 Пока Не ОбошлиВсе Цикл
						 Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
							 Если СчВлож = ЗначениеФункции.Количество() Тогда
								 ОбошлиВсе = Истина;
								 Продолжить;
							 КонецЕсли;
							 Значение = ЗначениеФункции[СчВлож];
							 СчВлож = СчВлож + 1;
						 Иначе
							 Значение = ЗначениеФункции;
							 ОбошлиВсе = Истина;
						 КонецЕсли;
						 
						 Если ФлагВедущееЗначение Тогда
							 ФлагВедущееЗначение = Ложь;
							 Если ПроверитьАргументФункции(Значение) Тогда
								 ВедущееЗначение = Значение;
							 КонецЕсли;
							 Продолжить;
						КонецЕсли;
						 
						 Если Не ПроверитьАргументФункции(Значение) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Результат = Результат + Значение;
						 
					 КонецЦикла;
					 
				 КонецЦикла;
	
	Возврат Новый Структура("Результат, ВедущееЗначение", Результат, ВедущееЗначение);
				 
КонецФункции

Функция Отклонение(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
				 Значение5, Значение6, Значение7, Значение8,
				 Значение9, Значение10, Значение11, Значение12,
				 Значение13, Значение14, Значение15, Значение16,
				 Значение17, Значение18, Значение19, Значение20);
				 
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
				 
	Возврат Результат - ВедущееЗначение;
	
КонецФункции

Функция ПроцентОтклонения(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
				 Значение5, Значение6, Значение7, Значение8,
				 Значение9, Значение10, Значение11, Значение12,
				 Значение13, Значение14, Значение15, Значение16,
				 Значение17, Значение18, Значение19, Значение20);
				 
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
				 
	Если Результат = 0 и ВедущееЗначение <> 0 Тогда
		Возврат 100;
	ИначеЕсли Результат = 0 и ВедущееЗначение = 0 Тогда
		Возврат 0;
	ИначеЕсли ВедущееЗначение = 0 Тогда
		Возврат 100;
	КонецЕсли;
	
	Возврат Окр(100 * (Результат - ВедущееЗначение) / ВедущееЗначение, 2)
	
КонецФункции

Функция ПроцентВыполнения(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
				 Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
				 Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
				 Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
				 Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
				 
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
				 Значение5, Значение6, Значение7, Значение8,
				 Значение9, Значение10, Значение11, Значение12,
				 Значение13, Значение14, Значение15, Значение16,
				 Значение17, Значение18, Значение19, Значение20);
				 
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
	
	Если ВедущееЗначение = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр(100 * Результат / ВедущееЗначение, 2)
	
КонецФункции

Функция Округлить(Значение, ЧислоЗнаков) Экспорт
	
	Возврат Окр(Значение, ЧислоЗнаков)
	
КонецФункции

Функция Итог(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Префикс, 
			Постфикс, СтрокаДанных, ЛогРасчета, ИмяОперанда, ИменаИзмерений = "") Экспорт
				
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
	МассивЗначений = Новый Массив;
	
	МассивОбщихИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ПараметрыЯчейки.ОбщиеИзмерения));
	МассивНечитываемых = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ИменаИзмерений),,Истина, Истина);
	МассивОбщихИзмерений = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОбщихИзмерений, МассивНечитываемых);
	ОбщиеИзмерения = СтрСоединить(МассивОбщихИзмерений, ",");
	
	//Показатели и статьи
	СтруктураПоиска = Новый Структура(ОбщиеИзмерения);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
	СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
	СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
	СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
	
	НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	СписокОперандов = ПараметрыЯчейки.СписокОперандов;
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			Продолжить; //ячейки обрабатываются отдельно
		КонецЕсли;
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
		
		Если ВРег(ПараметрыЯчейки.ИмяОперанда) <> ВРег(ИмяОперанда) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.НефинансовыйПоказатель) Тогда
			ПрефиксСсылки = Префикс;
			ПостФиксСсылки = Постфикс;
			
			//в операндах производного показателя
			//может быть выбрано только количество или сумма
		ИначеЕсли ПараметрыЯчейки.ФлагКоличество Тогда
			ПрефиксСсылки = "Количество";
			ПостФиксСсылки = "";
		Иначе
			ПрефиксСсылки = "Сумма";
			ПостФиксСсылки = ПостФикс;
		КонецЕсли;
		
		Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, НайденнаяСтрока, ПрефиксСсылки, 
												ПостФиксСсылки, Ложь, НайденнаяСтрока.ВидОперанда);
		
		Если ЛогРасчета <> Неопределено Тогда
				
			ЗначениеДляЛога = Новый Структура();
			ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
			ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидОперанда);
			ЗначениеДляЛога.Вставить("ИмяОперанда", СтрЗаменить(ПараметрыЯчейки.ИмяОперанда, "_", " "));
			ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
			ЗначениеДляЛога.Вставить("Значение", Значение);
			ЛогРасчета.Добавить(ЗначениеДляЛога);
			
		КонецЕсли;
		
		МассивЗначений.Добавить(Значение);
		
	КонецЦикла;
	
	Если Не МассивЗначений.Количество() Тогда
		Если ЛогРасчета <> Неопределено Тогда
				
			ЗначениеДляЛога = Новый Структура();
			ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
			ЗначениеДляЛога.Вставить("ВидЭлемента", "");
			ЗначениеДляЛога.Вставить("ИмяОперанда", СтрЗаменить(ИмяОперанда, "_", " "));
			ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
			ЗначениеДляЛога.Вставить("Значение", 0);
			ЛогРасчета.Добавить(ЗначениеДляЛога);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма(МассивЗначений);
	
КонецФункции

Функция РазностьДат(ПараметрыПериодов, НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	КэшДобавленияПериодов = ПараметрыПериодов.КэшДобавленияПериодов;
	КэшРазностейДат = ПараметрыПериодов.КэшРазностейДат;
	
	КлючРазностей = Новый Структура("НачалоПериода, КонецПериода, Периодичность", НачалоПериода, КонецПериода, Периодичность);
	НайденныеСтроки = КэшРазностейДат.НайтиСтроки(КлючРазностей);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0].ВсегоПериодов;
	КонецЕсли;
	
	ВсегоПериодов = 0;
	ТекущийКонецПериода = НачалоПериода;
	Попытка
		ПериодичностьИнтервала = Перечисления.Периодичность[Периодичность];
	Исключение
		Возврат "#Знач";
	КонецПопытки;
	
	Пока ТекущийКонецПериода <= КонецПериода Цикл
		ТекущийКонецПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(ТекущийКонецПериода, ПериодичностьИнтервала, 1, КэшДобавленияПериодов);
		ВсегоПериодов = ВсегоПериодов + 1;
	КонецЦикла;
	
	НоваяЗаписьКэша = КэшРазностейДат.Добавить();
	НоваяЗаписьКэша.НачалоПериода = НачалоПериода;
	НоваяЗаписьКэша.КонецПериода = КонецПериода;
	НоваяЗаписьКэша.Периодичность = Периодичность;
	НоваяЗаписьКэша.ВсегоПериодов = ВсегоПериодов;
	
	Возврат ВсегоПериодов;
	
КонецФункции

Функция ВычислитьФормулуВБезопасномРежиме(Знач Формула, Знач МассивЗначений, Знач ДополнительныеПараметры = Неопределено)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивЗначений", МассивЗначений);
	Если Не ДополнительныеПараметры = Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
			Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Формула = Врег(Формула);

	Для Каждого КлючЗначение Из Параметры Цикл
		Формула = СтрЗаменить(Формула, Врег(КлючЗначение.Ключ), "Параметры." + КлючЗначение.Ключ);
	КонецЦикла;
	
	ИмяОбщегоМодуля = "БюджетнаяОтчетностьВыводСервер";
	ФункцииФормул = Новый Структура();
	ФункцииФормул.Вставить("ПроверитьАргументФункции", ИмяОбщегоМодуля + "." + "ПроверитьАргументФункции");
	ФункцииФормул.Вставить("Максимум", ИмяОбщегоМодуля + "." + "Максимум");
	ФункцииФормул.Вставить("Минимум", ИмяОбщегоМодуля + "." + "Минимум");
	ФункцииФормул.Вставить("Сумма", ИмяОбщегоМодуля + "." + "Сумма");
	ФункцииФормул.Вставить("Среднее", ИмяОбщегоМодуля + "." + "Среднее");
	ФункцииФормул.Вставить("РассчитатьЗначениеПервойИПоследующихКолонок", ИмяОбщегоМодуля + "." + "РассчитатьЗначениеПервойИПоследующихКолонок");
	ФункцииФормул.Вставить("Отклонение", ИмяОбщегоМодуля + "." + "Отклонение");
	ФункцииФормул.Вставить("ПроцентОтклонения", ИмяОбщегоМодуля + "." + "ПроцентОтклонения");
	ФункцииФормул.Вставить("ПроцентВыполнения", ИмяОбщегоМодуля + "." + "ПроцентВыполнения");
	ФункцииФормул.Вставить("Округлить", ИмяОбщегоМодуля + "." + "Округлить");
	ФункцииФормул.Вставить("Итог", ИмяОбщегоМодуля + "." + "Итог");
	ФункцииФормул.Вставить("РазностьДат", ИмяОбщегоМодуля + "." + "РазностьДат");
	
	Для Каждого КлючЗначение Из ФункцииФормул Цикл
		Формула = СтрЗаменить(Формула, Врег(КлючЗначение.Ключ) + "(", КлючЗначение.Значение + "(");
	КонецЦикла;
	
	Формула = СтрЗаменить(Формула, """" + ИмяОбщегоМодуля + ".", """");
		
	РезультатВычисления = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(Формула, Параметры);

    Возврат РезультатВычисления;
		
КонецФункции

#КонецОбласти

#Область Прочие

Процедура СброситьФлагРасчетаУСвязанныхЯчеек(ДанныеЯчеек, НовыеДанныеЯчеек, ПараметрыЯчеек, Строка, Колонка, МассивКПересчету)
	
	СтруктураПоиска = Новый Структура("ОперандСтрока, ОперандКолонка", Строка, Колонка);
	НайденныеСтроки = ПараметрыЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаПараметров из НайденныеСтроки Цикл
		СтруктураПоиска = Новый Структура("ИндексСтроки", СтрокаПараметров.ИндексСтроки);
		СтрокиДанныхЯчеек = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока из СтрокиДанныхЯчеек Цикл
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, НайденнаяСтрока.Строка, НайденнаяСтрока.Колонка);
			СтрокиОсновногоЭлемента = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОсновнойЭлемент из СтрокиОсновногоЭлемента Цикл
				ИндексСтроки = ДанныеЯчеек.Индекс(СтрокаОсновнойЭлемент);
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанСумма 		= Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанКоличество 	= Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанЗначение 	= Ложь;
				МассивКПересчету.Добавить(СтрокаОсновнойЭлемент);
				СброситьФлагРасчетаУСвязанныхЯчеек(ДанныеЯчеек, НовыеДанныеЯчеек, ПараметрыЯчеек, 
					СтрокаОсновнойЭлемент.Строка, СтрокаОсновнойЭлемент.Колонка, МассивКПересчету);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, МассивКПересчету)
	
	НайденныеСтроки = НовыеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		НовыеДанныеЯчеек.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		МассивКПересчету.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных) Экспорт
	
	Результат = Новый Структура("ГраницаФактДанных, НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыДанных);
	Результат.Вставить("УпорядоченныеПериодичностиОтчета", Новый Массив);
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	Для Каждого Периодичность из УпорядоченныеПериодичности Цикл
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Результат.УпорядоченныеПериодичностиОтчета.Добавить("Период" + Периодичность);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("КэшДобавленияПериодов", Новый Соответствие);
	
	КэшДобавления = Новый ТаблицаЗначений;
	КэшДобавления.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("Строка"));
	КэшДобавления.Колонки.Добавить("ВсегоПериодов", Новый ОписаниеТипов("Число"));
	КэшДобавления.Индексы.Добавить("НачалоПериода, КонецПериода, Периодичность");
	
	Результат.Вставить("КэшРазностейДат", КэшДобавления);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, ПараметрыЯчеек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ДанныеЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	&ДанныеЯчеек КАК ДанныеЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеек.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ СтатьиПоказатели
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО ДанныеЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка КАК ОбъектУчета,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)) КАК ЗаполнениеЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.СтатьяБюджетов
	|			И (СтатьиПоказатели.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)),
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения)
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.ПоказательБюджетов
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)),
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения)
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.НефинансовыйПоказатель
	|ГДЕ
	|	Справочник.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Количественный)
	|	И СтатьиПоказатели.ФлагЗначение");
	
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек);
	ТаблицаКоличественногоУчета = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаКоличественногоУчета;
	
КонецФункции

Функция ПолучитьКэшПараметровВалют(ДанныеЯчеек, ПараметрыЯчеек, ТаблицаПодчиненностиЭлементов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ДанныеЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	&ДанныеЯчеек КАК ДанныеЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагСумма,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПодчиненностиЭлементов.Ссылка,
	|	ТаблицаПодчиненностиЭлементов.Родитель
	|ПОМЕСТИТЬ ТаблицаПодчиненностиЭлементов
	|ИЗ
	|	&ТаблицаПодчиненностиЭлементов КАК ТаблицаПодчиненностиЭлементов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаПодчиненностиЭлементов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеек.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ПараметрыЯчеек.ФлагСумма,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ СтатьиПоказатели
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО ДанныеЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка КАК ОбъектУчета,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000)) КАК ЗаполнениеЕдиницыИзмерения
	|ПОМЕСТИТЬ ДанныеПоСтрокам
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.СтатьяБюджетов
	|			И (СтатьиПоказатели.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
	|ГДЕ
	|	Справочник.УчитыватьПоВалюте
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагСумма
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000))
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.ПоказательБюджетов
	|ГДЕ
	|	Справочник.УчитыватьПоВалюте
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагСумма
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000))
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.НефинансовыйПоказатель
	|ГДЕ
	|	Справочник.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Денежный)
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненностиЭлементов.Ссылка,
	|	ТаблицаПодчиненностиЭлементов.Родитель
	|ПОМЕСТИТЬ РодителиСтрок
	|ИЗ
	|	ТаблицаПодчиненностиЭлементов КАК ТаблицаПодчиненностиЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|		ПО ТаблицаПодчиненностиЭлементов.Родитель = ДанныеПоСтрокам.Строка
	|ГДЕ
	|	ДанныеПоСтрокам.Строка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоСтрокам.ОбъектУчета,
	|	ДанныеПоСтрокам.Строка,
	|	ДанныеПоСтрокам.Колонка,
	|	ДанныеПоСтрокам.АналитикаВалюты,
	|	ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой,
	|	ДанныеПоСтрокам.ЗаполнениеЕдиницыИзмерения
	|ИЗ
	|	ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено,
	|	РодителиСтрок.Родитель,
	|	ДанныеПоСтрокам.Колонка,
	|	МАКСИМУМ(ДанныеПоСтрокам.АналитикаВалюты),
	|	МАКСИМУМ(ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой),
	|	МАКСИМУМ(ДанныеПоСтрокам.ЗаполнениеЕдиницыИзмерения)
	|ИЗ
	|	ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодителиСтрок КАК РодителиСтрок
	|		ПО ДанныеПоСтрокам.Строка = РодителиСтрок.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоСтрокам.Колонка,
	|	РодителиСтрок.Родитель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоСтрокам.АналитикаВалюты) = 1 И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой) = 1");
	
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек);
	Запрос.УстановитьПараметр("ТаблицаПодчиненностиЭлементов", ТаблицаПодчиненностиЭлементов);
	
	ТаблицаКоличественногоУчета = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, Колонка, ВалютаОпределяетсяАналитикой");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаКоличественногоУчета;
	
КонецФункции

Функция СписокПодчиненныхЭлементов(ЭлементОтчета, ТаблицаПодчиненных) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	НайденныеСтроки = ТаблицаПодчиненных.НайтиСтроки(Новый Структура("Родитель", ЭлементОтчета));
	Для Каждого СтрокаЭлементов из НайденныеСтроки Цикл
		СписокЗначений.Добавить(СтрокаЭлементов.Ссылка);
	КонецЦикла;
	СписокЗначений.Добавить(ЭлементОтчета);
	Возврат СписокЗначений;
	
КонецФункции

Функция ПолучитьЗначенияПодстановкиПоПараметрамДанных(РежимФормирования, ПараметрыДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПодстановки = Новый ТаблицаЗначений;
	ЗначенияПодстановки.Колонки.Добавить("ЧтоМенять");
	ЗначенияПодстановки.Колонки.Добавить("НаЧтоМенять");
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Вид отчета]";
	НоваяСтрока.НаЧтоМенять = Параметрыданных.ВидБюджета;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Текущая дата и время]";
	НоваяСтрока.НаЧтоМенять = Формат(ТекущаяДата(), "ДЛФ=DT");;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Период отчетности]";
	НоваяСтрока.НаЧтоМенять = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Конечная дата периода отчета]";
	НоваяСтрока.НаЧтоМенять = Формат(ПараметрыДанных.КонецПериода, "ДЛФ=DD");;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Организация]";
	ПараметрыДанных.Свойство("Организация", НоваяСтрока.НаЧтоМенять);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Подразделение]";
	ПараметрыДанных.Свойство("Подразделение", НоваяСтрока.НаЧтоМенять);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Статус документа]";
	Если ПараметрыДанных.Свойство("Документ") Тогда
		НоваяСтрока.НаЧтоМенять = ПараметрыДанных.Документ.Статус;
	Иначе
		НоваяСтрока.НаЧтоМенять = Строка(ПараметрыДанных.Статус);
	КонецЕсли;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Сценарий]";
	ПараметрыДанных.Свойство("Сценарий", НоваяСтрока.НаЧтоМенять);
		
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Ответственный]";
	Если ПараметрыДанных.Свойство("Документ") Тогда
		НоваяСтрока.НаЧтоМенять = ПараметрыДанных.Документ.Ответственный;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ?(ПараметрыДанных.Свойство("Документ"), ПараметрыДанных.Документ, Неопределено));
	Запрос.УстановитьПараметр("ВидБюджета", Параметрыданных.ВидБюджета);
	
	//++ НЕ УТКА
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	ВЫРАЗИТЬ(БюджетнаяЗадача.СписокДокументов.Документ КАК Документ.ЭкземплярБюджета) = &Ссылка
	|	И НЕ БюджетнаяЗадача.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка,
	|	ЭтапыПодготовкиБюджетов.НастройкаДействия,
	|	ЭтапыПодготовкиБюджетов.Ответственный.Представление КАК Ответственный
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Действие = &ТипДействия
	|	И НЕ ЭтапыПодготовкиБюджетов.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ТипДействия", Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ШагЭтаповПодготовкиБюджетов = РезультатЗапроса[0].Выбрать();
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять	= "[Утверждающий]";
	Если ШагЭтаповПодготовкиБюджетов.Следующий() Тогда
		ПараметрОтбора = Новый Структура("Имя, Значение", "УтверждаемыеЭтапыПодготовкиБюджетов", ШагЭтаповПодготовкиБюджетов.Ссылка);
		ВсеШагиЭтаповПодготовкиБюджетов = РезультатЗапроса[1].Выбрать();
		Пока ВсеШагиЭтаповПодготовкиБюджетов.Следующий() Цикл
			Настройки = ВсеШагиЭтаповПодготовкиБюджетов.НастройкаДействия.Получить();
			СтрокаНастроек = Настройки.Найти("УтверждаемыеЭтапыПодготовкиБюджетов", "Имя");
			Если СтрокаНастроек <> Неопределено Тогда
				УтверждаемыеШаги = СтрокаНастроек.Значение;
				Если УтверждаемыеШаги.НайтиПоЗначению(ШагЭтаповПодготовкиБюджетов.Ссылка) <> Неопределено Тогда
					НоваяСтрока.НаЧтоМенять = ВсеШагиЭтаповПодготовкиБюджетов.Ответственный;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыБюджетовАналитикиШапки.ВидАналитики КАК Ссылка,
	|	ВидыБюджетовАналитикиШапки.НомерСтроки КАК НомерСтроки,
	|	ВидыБюджетовАналитикиШапки.ВидАналитики.Представление КАК Представление
	|ИЗ
	|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
	|ГДЕ
	|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
		
	ВыборкаПредставленийАналитик = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПредставленийАналитик.Следующий() Цикл
		НоваяСтрока = ЗначенияПодстановки.Добавить();
		НоваяСтрока.ЧтоМенять	= "[" + ВыборкаПредставленийАналитик.Представление + "]";
		Если ПараметрыДанных.Свойство("Документ") И ЗначениеЗаполнено(ПараметрыДанных.Документ) Тогда
			НоваяСтрока.НаЧтоМенять = ПараметрыДанных.Документ["Аналитика"+ВыборкаПредставленийАналитик.НомерСтроки];
		Иначе
			ФильтрыОтчетаПоАналитикам = ПараметрыДанных.ДополнительныеФильтрыПоАналитикам;
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВыборкаПредставленийАналитик.Ссылка);
			ПараметрыДанных.Свойство(ИмяАналитики, НоваяСтрока.НаЧтоМенять);
		КонецЕсли;
	КонецЦикла;
			
	Возврат ЗначенияПодстановки;
	
КонецФункции

Функция ПолучитьПараметрыВыводаПримечаний(СтруктураКолонокТаблицыДанных, ДанныеЯчеек, ДеревоВывода)
	
	Результат = Новый Структура;
	
	Для Каждого ТекСтрока Из ДанныеЯчеек Цикл
		Если Не ПустаяСтрока(ТекСтрока.Примечание) Тогда
			Результат.Вставить("ВыводитьПримечания", Истина);
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Результат.Вставить("ВыводитьНомераТаблиц", 
		ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения","Таблица")).Количество() > 1);
	
	СписокКолонок = "СтатьяБюджетов";
	Для Каждого Периодичность Из СтруктураКолонокТаблицыДанных.Периодичности Цикл
		СписокКолонок = СписокКолонок + ",Период" + Периодичность;
	КонецЦикла;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		СписокКолонок = СписокКолонок + "," + Измерение;
	КонецЦикла;
	
	Для Каждого ВидАналитики Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		СписокКолонок = СписокКолонок + "," + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
	КонецЦикла;
	СписокКолонок = СписокКолонок + ",Сумма,СуммаВал,Примечание";
	
	ТаблицаДанных = ДанныеЯчеек.СкопироватьКолонки(СписокКолонок);
	ТаблицаДанных.Колонки.Добавить("НомерТаблицы",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3)));
	ТаблицаДанных.Колонки.Добавить("НомерПримечания",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5)));
	
	Результат.Вставить("Примечания",
				Новый Структура("НомерТаблицы, НомерПримечания, ТаблицаДанных", 0, 0, ТаблицаДанных));
				
	Возврат Результат;
	
КонецФункции

Функция ПроверитьФормулу(Знач Формула, Операнды, Отказ) Экспорт
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	ОграничениеДлиныФормулы = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула.ТипЗначения.КвалификаторыСтроки.Длина;
	Если СтрДлина(Формула) > ОграничениеДлиныФормулы Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Превышена максимальная длина формулы, введено %1 символов, доступно %2 символов.'"),СтрДлина(Формула),ОграничениеДлиныФормулы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДатаСеанса() - Дата(1, 1, 1));
	Для Каждого Операнд из Операнды Цикл
		
		Если Не ЗначениеЗаполнено(Операнд.Идентификатор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы'") );
		КонецЕсли;
		
		Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
		МассивЗначений.Добавить(Значение);
		
		Пока СтрНайти(ВРег(Формула), "ИТОГ(") Цикл
			ЧастьФормулы = БюджетнаяОтчетностьРасчетКэшаСервер.ЧастьФормулыСИтогомИОперандом(Формула, "[" + Операнд.Идентификатор + "]", НачалоФормулы, ОкончаниеФормулы);
			Если ЧастьФормулы = Неопределено Тогда
				//операнд с функцией итог не используется
				Прервать;
			КонецЕсли;
			ОкончаниеФормулы = БюджетнаяОтчетностьРасчетКэшаСервер.ОкончаниеФормулы(Формула, ОкончаниеФормулы) + ")";
			Формула = СтрЗаменить(Формула, ЧастьФормулы + ОкончаниеФормулы, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
			Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
			МассивЗначений.Добавить(Значение);
		КонецЦикла;
		
		Формула = СтрЗаменить(Формула, "[" + Операнд.Идентификатор + "]", "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
		
	КонецЦикла;
	
	Если СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
		БюджетнаяОтчетностьРасчетКэшаСервер.ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула);
	КонецЕсли;
	
	НачалоПериода = ТекущаяДата();
	КонецПериода = ТекущаяДата();
	ПериодГруппировки = ТекущаяДата();
	ГраницаФактДанных = ТекущаяДата();
	
	ТаблицаКэша = Новый ТаблицаЗначений;
	ТаблицаКэша.Колонки.Добавить("НачалоПериода");
	ТаблицаКэша.Колонки.Добавить("КонецПериода");
	ТаблицаКэша.Колонки.Добавить("Периодичность");
	ТаблицаКэша.Колонки.Добавить("ВсегоПериодов");
	
	ПараметрыПериодов = Новый Структура("КэшДобавленияПериодов, КэшРазностейДат", Новый Соответствие, ТаблицаКэша);
	
	Попытка
		Результат = ВычислитьФормулуВБезопасномРежиме(Формула, МассивЗначений);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'В формуле обнаружены ошибки!'") );
		Отказ = Истина;
	КонецПопытки;
	
КонецФункции

Функция ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, ЯчейкаОтчета, ЗначенияИзмерений, КолонкаОтчета) Экспорт
	
	НоваяСтрока = ДанныеЯчеек.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЯчейкаОтчета);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияИзмерений);
	
	НоваяСтрока.РассчитанСумма = Ложь;
	НоваяСтрока.РассчитанСуммаВал = Ложь;
	НоваяСтрока.РассчитанКоличество = Ложь;
	НоваяСтрока.РассчитанЗначение = Ложь;
	
	ОтборЯчейки = "Строка,";
	Если ЗначениеЗаполнено(КолонкаОтчета) Тогда
		ОтборЯчейки = ОтборЯчейки + "Колонка,";
	КонецЕсли;
	ОтборЯчейки = ОтборЯчейки + "ОсновнойЭлемент";
	НоваяСтрока.ОтборЯчейки = ОтборЯчейкиПоСтруктуреПоиска(ЗначенияИзмерений, ОтборЯчейки);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция СтруктураОбластейМакета(ПараметрыВывода) Экспорт
	
	МакетОформления 	= ПолучитьОбщийМакет("БюджетныйОтчет");
	СтруктураОбластей 	= Новый Структура;
	
	СтруктураОбластей.Вставить("ЗаголовокОтчета", 	МакетОформления.ПолучитьОбласть("ЗаголовокОтчета"));
	СтруктураОбластей.Вставить("Текст", 			МакетОформления.ПолучитьОбласть("Текст"));
	СтруктураОбластей.Вставить("ЗаголовокТаблицы", 	МакетОформления.ПолучитьОбласть("ЗаголовокТаблицы"));
	СтруктураОбластей.Вставить("ПустаяСтрока", 		МакетОформления.ПолучитьОбласть("ПустаяСтрока"));
	
	МассивВариантовСтрок = Новый Массив;
	МассивВариантовСтрок.Добавить("");
	МассивВариантовСтрок.Добавить("НумерацияСтрок");
	
	СтруктураВариантовКолонок = ?(ПараметрыВывода.ВыводитьПримечания,
										Новый Структура("НачалоТаблицы, ДополнительнаяСекция, ГруппировкаКолонок1СПримечанием,
														|ГруппировкаКолонок2СПримечанием, ГруппировкаКолонок3СПримечанием"),			
											Новый Структура("НачалоТаблицы, ДополнительнаяСекция, ГруппировкаКолонок1,
															|ГруппировкаКолонок2, ГруппировкаКолонок3"));
	
	ОтрабатываетсяУровней = 8;
	
	Для Каждого ВариантКолонки из СтруктураВариантовКолонок Цикл
	
		СтруктураОбластей.Вставить("Шапка" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("Шапка|" + ВариантКолонки.Ключ));
		
		СтруктураОбластей.Вставить("НумерацияКолонок" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("НумерацияКолонок|" + ВариантКолонки.Ключ));
	
	КонецЦикла;
		
	СтруктураОбластей.Вставить("ШапкаНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("ШапкаНумерацияСтрок|НачалоТаблицы"));
	
	СтруктураОбластей.Вставить("НумерацияКолонокНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("НумерацияКолонокНумерацияСтрок|НачалоТаблицы"));
	
	Для Каждого ВариантСтроки из МассивВариантовСтрок Цикл
		
		Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "НачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
		Для Сч = 1 по ОтрабатываетсяУровней Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналНачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал" + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней - 1 Цикл
		Если ПараметрыВывода.ВыводитьПримечания Тогда
			СтруктураОбластей.Вставить("Группировка" + Сч + "Значение",
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ГруппировкаКолонок1СПримечанием"));
			СтруктураОбластей.Вставить("Группировка" + Сч + "Примечание", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ПримечаниеКолонка"));
		Иначе
			СтруктураОбластей.Вставить("Группировка" + Сч + "Значение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ГруппировкаКолонок1"));
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 1 по ОтрабатываетсяУровней Цикл
		Если ПараметрыВывода.ВыводитьПримечания Тогда
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналЗначение",
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ГруппировкаКолонок1СПримечанием"));
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналПримечание", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ПримечаниеКолонка"));
		Иначе
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналЗначение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ГруппировкаКолонок1"));
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВывода.ВыводитьПримечания И ПараметрыВывода.ВыводитьНомераТаблиц Тогда
		СтруктураОбластей.Вставить("НомерТаблицы", МакетОформления.ПолучитьОбласть("НомерТаблицы"));
	КонецЕсли;
	
	Возврат СтруктураОбластей;
	
КонецФункции

Процедура ПроверкаВозможностиЗаполненияИзмеренийВСтруктуреЯчеек(ОписаниеОтчета, ИсточникиЗначенийИзмерений)
	
	Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника", "Документ")).Количество() = ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
			
	Сч = 1;	
	ТекстЗапроса = "";
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		
		ИсточникВсеЭлементы = Ложь;
		Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", ИмяПоля)).Количество() Тогда
			ИсточникВсеЭлементы = Истина;
			
			ТипАналитики = Измерение.ТипЗначения.Типы()[0];
			ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипАналитики);
			МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
			ПолноеИмя = МетаданныеАналитики.ПолноеИмя();
			ЕстьПометкаУдаления = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ПометкаУдаления");
			ЕстьЭтоГруппа = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ЭтоГруппа");
		КонецЕсли;
		
		Если Не ИсточникВсеЭлементы Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сч > 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	СУММА(1) КАК Количество
			|ИЗ
			|	" + ПолноеИмя + "  КАК Данные
			|ГДЕ ";
			
			Если ЕстьПометкаУдаления Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	НЕ Данные.ПометкаУдаления ";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " Истина";
			КонецЕсли;
			
			Если ЕстьЭтоГруппа Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ Данные.ЭтоГруппа ";
			КонецЕсли;
	
			Сч = Сч + 1;
	КонецЦикла;
		
	Если ТекстЗапроса = "" Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПроизведениеАналитик = 1;
	
	Для Каждого Стр ИЗ Результат Цикл
		ТекущееКоличество = ?(НЕ ЗначениеЗаполнено(Стр.Количество), 1, Стр.Количество);
		ПроизведениеАналитик = ПроизведениеАналитик * ТекущееКоличество;
	КонецЦикла;
	
	Если ПроизведениеАналитик > 1000 Тогда
		ВызватьИсключение НСтр("ru = 'Превышено максимальное количество строк для добавления аналитик. Обработка прервана.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИзмеренияВСтруктуреЯчеекПоИсточникам(ТекстЗапроса, ПараметрыЗаполненияИзмерений, ИмяТаблицыСИзмерениями)
	
	ОписаниеОтчета = ПараметрыЗаполненияИзмерений.ОписаниеОтчета;
	ВспомогательныеДанные = ПараметрыЗаполненияИзмерений.ВспомогательныеДанные;
	ИмяТаблицыДанных = ПараметрыЗаполненияИзмерений.ИмяТаблицыДанных;
	ИсточникиЗначенийИзмерений = ПараметрыЗаполненияИзмерений.ИсточникиЗначенийИзмерений;
	ПараметрыПрочихСоединений = ПараметрыЗаполненияИзмерений.ПараметрыПрочихСоединений;
	РежимФормирования = ПараметрыЗаполненияИзмерений.РежимФормирования;
	
	Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника", "Документ")).Количество() = ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	ОсновныеЭлементы 		= ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги 			= ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений 			= ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений 	= ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики 			= ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики 	= ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик 	= ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов 			= ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов 		= ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстПериодовСоединение = ВспомогательныеДанные.ТекстПериодовСоединение;
	
	Сч = 1;
	ТекущееИмяТаблицы = ИмяТаблицыСИзмерениями;
	ШаблонИмениТаблицыСИзмерениями = "СтруктураЯчеекЗаполнениеИзмерений";
	
	Для Каждого ВидАналитики из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ИсточникВсеЭлементы = Ложь;
		Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", ИмяПоля)).Количество() Тогда
			ИсточникВсеЭлементы = Истина;
			
			ТипАналитики = ВидАналитики.ТипЗначения.Типы()[0];
			ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипАналитики);
			МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
			ПолноеИмя = МетаданныеАналитики.ПолноеИмя();
			ЕстьПометкаУдаления = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ПометкаУдаления");
			ЕстьЭтоГруппа = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ЭтоГруппа");
		КонецЕсли;
	
		ИмяТаблицыСИзмерениями = ШаблонИмениТаблицыСИзмерениями + "_" + Сч;
		
		Если ИсточникВсеЭлементы Тогда
			ТекстАналитикиТекущий = СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля, 
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ВсеЗначенияАналитики.Ссылка ЕСТЬ NULL ТОГДА
				|		ВсеЗначенияАналитики.Ссылка
				|	ИНАЧЕ
				|		СтруктураЯчеек." + ИмяПоля + "
				|	КОНЕЦ КАК " + ИмяПоля);
				
			ТекстФлагиАналитикиТекущий = СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля,
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ВсеЗначенияАналитики.Ссылка ЕСТЬ NULL ТОГДА
				|		""отобрать""
				|	ИНАЧЕ
				|		СтруктураЯчеек.Флаг" + ИмяПоля + "
				|	КОНЕЦ КАК Флаг" + ИмяПоля);

		Иначе
			ТекстАналитикиТекущий = СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля, 
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
				|		ТаблицаДанных." + ИмяПоля + "
				|	ИНАЧЕ
				|		СтруктураЯчеек." + ИмяПоля + "
				|	КОНЕЦ КАК " + ИмяПоля);
				
			ТекстФлагиАналитикиТекущий = СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля,
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
				|		""отобрать""
				|	ИНАЧЕ
				|		СтруктураЯчеек.Флаг" + ИмяПоля + "
				|	КОНЕЦ КАК Флаг" + ИмяПоля);
		 КонецЕсли;

				
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|" + 	СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек") + 
				СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек") + 
				СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстАналитикиТекущий, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстПериодовСоединение, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстФлагиАналитикиТекущий, "<ИмяТаблицы>", "СтруктураЯчеек") +
				СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек") + "
		|	СтруктураЯчеек.ИД_Источника КАК ИД_Источника
		|
		|ПОМЕСТИТЬ " + ИмяТаблицыСИзмерениями + "
		|
		|ИЗ " + ТекущееИмяТаблицы + " КАК СтруктураЯчеек ";
		
		Если Не ИсточникВсеЭлементы Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			| ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсточниковИзмеренийСИменемИзмерения
			|
			| ПО СтруктураЯчеек.Строка = ТаблицаИсточниковИзмеренийСИменемИзмерения.Строка
			|	И СтруктураЯчеек.Колонка = ТаблицаИсточниковИзмеренийСИменемИзмерения.Колонка
			|   И (ТаблицаИсточниковИзмеренийСИменемИзмерения.Измерение = """+ИмяПоля+ """)";
		
			ТекстЗапроса = ТекстЗапроса + "
			|   И (СтруктураЯчеек.ОсновнойЭлемент)
			|	И (СтруктураЯчеек.ВидЭлемента В (ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)))";
		
			ТекстЗапроса = ТекстЗапроса + "
				| ЛЕВОЕ СОЕДИНЕНИЕ "  + ИмяТаблицыДанных + " КАК ТаблицаДанных
				| ПО (ЕСТЬNULL(ТаблицаИсточниковИзмеренийСИменемИзмерения.ИД_Источника, СтруктураЯчеек.ИД_Источника) = ТаблицаДанных.ИД_Источника)";
			
			Для Каждого Периодичность из ОписаниеОтчета.Периодичности Цикл
				ТекстЗапроса = ТекстЗапроса + "
				|	И (	(СтруктураЯчеек.ФлагПериод" + Периодичность + " = ""отобрать""
				|			И СтруктураЯчеек.Период" + Периодичность + "Соединение = ТаблицаДанных.Период" + Периодичность + ")
				|		ИЛИ
				|		(СтруктураЯчеек.ФлагПериод" + Периодичность + " <> ""отобрать""
				|			И ТаблицаДанных.Период" + Периодичность + " = НЕОПРЕДЕЛЕНО)	)
				|";
			КонецЦикла;

			ТекстЗапроса = ТекстЗапроса + "
			|			И (НЕ СтруктураЯчеек.ФлагСтатьяБюджетов = ""отобрать""
			|				ИЛИ СтруктураЯчеек.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов)
			|			И (НЕ СтруктураЯчеек.ФлагПоказательБюджетов = ""отобрать""
			|				ИЛИ СтруктураЯчеек.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов)
			|			И (НЕ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
			|				ИЛИ СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель)
			|			И (НЕ СтруктураЯчеек.ФлагРедактируемоеЗначение = ""отобрать""
			|				ИЛИ СтруктураЯчеек.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение)";
		
		
			Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
				Если Измерение = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Измерение = "Сценарий" 
					И РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
					|		ИЛИ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать"" И СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
					|";
				Иначе
					ТекстЗапроса = ТекстЗапроса + "
					|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
					|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
					|";
				КонецЕсли;
			КонецЦикла;
		
			ТекстЗапроса = ТекстЗапроса + "
				|			И (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""";
			
			Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
					|				ИЛИ СтруктураЯчеек.Флаг"+ИмяПоля+" = ""документ""
					|					И НЕ ТаблицаДанных."+ИмяПоля+" В
					|							(ВЫБРАТЬ
					|								ТаблицаЗначенийПоРодителямДокумент.Значение
					|							ИЗ
					|								ТаблицаЗначенийПоРодителямДокумент
					|							ГДЕ
					|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+"))";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ")";	
			КонецЕсли;
				
			// Уточним возможные совокупности аналитик по имеющимся данным
			Для Каждого ВидАналитикиУточняемый Из ОписаниеОтчета.ВидыАналитик Цикл
				Если ВидАналитикиУточняемый = ВидАналитики Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитикиУточняемый);
				
				ТекстЗапроса = ТекстЗапроса + "
					|			И СтруктураЯчеек." + ИмяПоляАналитики + " = ТаблицаДанных." + ИмяПоляАналитики;
			КонецЦикла;
				
		Иначе
				
			ТекстЗапроса = ТекстЗапроса + "
			| ЛЕВОЕ СОЕДИНЕНИЕ " + ПолноеИмя + " КАК ВсеЗначенияАналитики";
			
			Если ЕстьПометкаУдаления Тогда
				ТекстЗапроса = ТекстЗапроса + "
				| ПО ВсеЗначенияАналитики.ПометкаУдаления = Ложь";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				| ПО Истина";
			КонецЕсли;
			
			Если ЕстьЭтоГруппа Тогда
				ТекстЗапроса = ТекстЗапроса + "
				| И ВсеЗначенияАналитики.ЭтоГруппа = Ложь";
			КонецЕсли;	
		
			ТекстЗапроса = ТекстЗапроса + "
			|   И (СтруктураЯчеек.ОсновнойЭлемент)
			|	И (СтруктураЯчеек.ВидЭлемента В (ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)))";
			
			ТекстЗапроса = ТекстЗапроса + "
				|			И (СтруктураЯчеек.Флаг"+ИмяПоля+" = ""заполнить""";
				
			Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
					|				ИЛИ СтруктураЯчеек.Флаг"+ИмяПоля+" = ""документ""
					|					И НЕ ВсеЗначенияАналитики.Ссылка В
					|							(ВЫБРАТЬ
					|								ТаблицаЗначенийПоРодителямДокумент.Значение
					|							ИЗ
					|								ТаблицаЗначенийПоРодителямДокумент
					|							ГДЕ
					|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+"))";

			Иначе
				ТекстЗапроса = ТекстЗапроса + ")";	
			КонецЕсли;

		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
		|	СтруктураЯчеек.ВидЭлемента В
		|		(	
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
		|		)";
			
		Если Сч = ОписаниеОтчета.ВидыАналитик.Количество() Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка
				|
				|;
				|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ИНДЕКСИРОВАТЬ ПО ИД_Источника
				|
				|;
				|";
		КонецЕсли;
		
		ТекущееИмяТаблицы = ИмяТаблицыСИзмерениями;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
