////////////////////////////////////////////////////////////////////////////////
// УправлениеШтатнымРасписанием:
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет наборы записей регистров ИсторииИспользованияШтатногоРасписания, 
// ИсторияНачисленийПоШтатномуРасписанию, ИсторияПоказателейПоШтатномуРасписанию
// по регистратору
//
// Параметры:
//			Регистратор - ДокументОбъект
//			ДанныеПозиций - Структура, содержащая ключи с именами регистров и
//					выборками из запросов содержащих движения.
//
Процедура СформироватьДвиженияИсторииПозицийШтатногоРасписания(Регистратор, ДанныеПозиций) Экспорт
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияИспользованияШтатногоРасписания,
		ДанныеПозиций.ИсторииИспользованияШтатногоРасписания);
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияНачисленийПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияНачисленийПоШтатномуРасписанию);
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияПоказателейПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияПоказателейПоШтатномуРасписанию);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.СформироватьДвиженияИсторииПозицийШтатногоРасписания(Регистратор, ДанныеПозиций);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения видами специальностей по штатному расписанию
//		ИсторияСпециальностейПоШтатномуРасписанию.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДатаСобытия			- дата, на которые будут сделаны движения.
//	Специальности - таблица значений с полями:
//		ДатаСобытия
//		ПозицияШтатногоРасписания
//		Специальность
//
Процедура СформироватьДвиженияСпециальностейПоШтатномуРасписанию(Движения, ДатаСобытия, Специальности) Экспорт
	
	Движения.ИсторияСпециальностейПоШтатномуРасписанию.Записывать = Истина;
	Пока Специальности.Следующий() Цикл
		НоваяСтрока = Движения.ИсторияСпециальностейПоШтатномуРасписанию.Добавить();
		НоваяСтрока.Дата						= ДатаСобытия;
		НоваяСтрока.ПозицияШтатногоРасписания	= Специальности.ПозицияШтатногоРасписания;
		НоваяСтрока.Специальность				= Специальности.Специальность;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция НачисленияНадбавкаЗаВредность() Экспорт
	
	ВРНадбавкаЗаВредность = Неопределено;
	
	НачисленияВРНадбавкаЗаВредность = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	Если НачисленияВРНадбавкаЗаВредность.Количество() > 0 Тогда
		ВРНадбавкаЗаВредность = НачисленияВРНадбавкаЗаВредность[0];
	КонецЕсли;
	
	Возврат ВРНадбавкаЗаВредность;
	
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступа(ДокументОбъект, Таблица, УчитыватьПодразделенияНеСозданныхПозиций = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументОбъект.Организация КАК ЗначениеДоступа
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументОбъект.Позиция.Подразделение
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|	И НЕ ДокументОбъект.Позиция.Подразделение ЕСТЬ NULL ";
		
	Если УчитыватьПодразделенияНеСозданныхПозиций Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументОбъект.Подразделение
			|ИЗ
			|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументОбъект
			|ГДЕ
			|	ДокументОбъект.Ссылка = &Ссылка
			|	И ДокументОбъект.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|	И ДокументОбъект.Подразделение <> ЕСТЬNULL(ДокументОбъект.Позиция.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
		
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УтверждениеШтатногоРасписания", ИмяДокумента);
	КонецЕсли;
	
	ТЧПозиции = МетаданныеДокумента.ТабличныеЧасти.Найти("Позиции");
	Если ТЧПозиции.Реквизиты.Найти("Позиция") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Позиция", "ПозицияШтатногоРасписания");
	КонецЕсли; 
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Таблица);
	
КонецПроцедуры

// Процедуры и функции модулей объектов документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура ДокументыОбработкаПроверкиЗаполнения(Объект, Отказ, ДатаВступленияВСилу, ИмяЭлемента, ПроверятьВсеПозиции) Экспорт
	
	РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
		Объект.Ссылка, Объект.Позиции.ВыгрузитьКолонку("Позиция"), ДатаВступленияВСилу);
	
	МожноИзменятьШтатноеРасписание = РезультатПроверки.ИзмененияВозможны;
	
	Если НЕ МожноИзменятьШтатноеРасписание Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ.'");
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='См. %1, позиция - ""%2""'"),
			РезультатПроверки.РегистраторПредставление,
			РезультатПроверки.Позиция);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ИмяЭлемента, ,Отказ);
		Возврат;
		
	КонецЕсли;
	
	Подразделение = Неопределено;
	Если Объект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		Подразделение = Объект.Подразделение;
	КонецЕсли; 
	
	ДанныеДляПроверки = СформироватьЗапросДляПроверкиДокумента(Объект.Ссылка, Объект.Организация, Подразделение, Объект.Позиции, Объект.Начисления, Объект.Показатели, ДатаВступленияВСилу).Выбрать();
	
	Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Если ДанныеДляПроверки.ОшибкаНоваяПозиция Тогда	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Для создаваемой позиции в строке %1 установлено действие отличное от ""Создать новую"".'"), ДанныеДляПроверки.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания", , Ложь) Тогда
			
			Если ЗначениеЗаполнено(ДанныеДляПроверки.НачислениеНомерСтроки) Тогда
				
				Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("НачислениеНомерСтроки") Цикл	
					
					Если ДанныеДляПроверки.ОшибкаНачислениеДубль Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'У позиции в строке %1 начисление %2 присутствует в документе дважды.'"), ДанныеДляПроверки.НомерСтроки, ДанныеДляПроверки.НачислениеНаименование);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);	
					ИначеЕсли ДанныеДляПроверки.ОшибкаЗачетОтработанногоВремениДубль Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'У позиции в строке %1 присутствуют несколько начислений с зачетом отработанного времени.'"), ДанныеДляПроверки.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);	
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда 
						Если ДанныеДляПроверки.РазныеМинЗначенияПоказателя Тогда
							ТекстСообщения = Нстр("ru = 'У позиции показателю %1 назначены разные минимальные значения'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеМинЗначенияПоказателяПоказатель);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
						Если ДанныеДляПроверки.РазныеМаксЗначенияПоказателя Тогда
							ТекстСообщения = Нстр("ru = 'У позиции показателю %1 назначены разные максимальные значения'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеМаксЗначенияПоказателяПоказатель);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
					Иначе
						Если ДанныеДляПроверки.РазныеЗначенияПоказателя Тогда 
							ТекстСообщения = Нстр("ru = 'У позиции показателю %1 назначены разные значения'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеЗначенияПоказателяПоказатель);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеДляПроверки.ПоказательНомерСтроки) Тогда
						Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("ПоказательНомерСтроки") Цикл
							Если ДанныеДляПроверки.ОшибкаЗначения Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'У позиции в строке %1 для начисления %2 минимальное значение показателя %3 не может быть больше максимального.'"), ДанныеДляПроверки.НомерСтроки, ДанныеДляПроверки.НачислениеНаименование, ДанныеДляПроверки.ПоказательНаименование);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ПроверятьВсеПозиции Тогда
		
		ДанныеДляПроверки.Сбросить();
		Пока ДанныеДляПроверки.НайтиСледующий(Истина, "ОшибкаАктуальнаяПозиция") Цикл 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Нстр("ru = 'Актуальная позиция %1 не включена в данный документ.'"),
				ДанныеДляПроверки.ОшибкаАктуальностиПозицияНаименование);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеДляПроверки.ОшибкаАктуальностиПозиция, , , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляПроверки.Сбросить();
	Пока ДанныеДляПроверки.НайтиСледующий(Истина, "ОшибкаЗакрытаяПозиция") Цикл 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Ранее закрытая позиция %1 включена в данный документ.'"),
			ДанныеДляПроверки.ОшибкаАктуальностиПозицияНаименование);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеДляПроверки.ОшибкаАктуальностиПозиция, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыПередЗаписью(ДокументШтатногоРасписанияОбъект, Отказ, РежимЗаписи, РежимПроведения, СозданныеПозиции, ДатаВступленияВСилу, ИмяЭлемента) Экспорт
	
	СинхронизироватьРеквизитыПозиций(ДокументШтатногоРасписанияОбъект);
	
	СведенияОНаименованиях = Неопределено;
	ДокументШтатногоРасписанияОбъект.ДополнительныеСвойства.Свойство("СведенияОНаименованиях", СведенияОНаименованиях);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ДокументШтатногоРасписанияОбъект) Тогда
			ПроверитьВозможностьИзменитьШтатноеРасписание(
				ДокументШтатногоРасписанияОбъект.Позиции.ВыгрузитьКолонку("Позиция"),
				ДатаВступленияВСилу,
				ДокументШтатногоРасписанияОбъект.Ссылка,
				РежимЗаписи,
				Отказ,
				ИмяЭлемента);
		КонецЕсли;
		
		СтрокиСозданныхПозиций = Новый Массив;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ОбновитьШтатноеРасписаниеПоДаннымДокумента(
				ДокументШтатногоРасписанияОбъект.Организация,
				ДокументШтатногоРасписанияОбъект.Позиции,
				ДокументШтатногоРасписанияОбъект.Начисления,
				ДокументШтатногоРасписанияОбъект.Показатели,
				СтрокиСозданныхПозиций,
				СведенияОНаименованиях);
				
			СтатистикаПерсоналаРасширенный.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
				Модуль.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			КонецЕсли;

		КонецЕсли;
		
		СозданныеПозиции = СтрокиСозданныхПозиций;
		
		Для каждого СтрокаПозицииОбъекта Из ДокументШтатногоРасписанияОбъект.Позиции Цикл
			
			Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				НаборЗаписейКлассовУсловийТруда = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
				НаборЗаписейКлассовУсловийТруда.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
				НаборЗаписейКлассовУсловийТруда.Отбор.Должность.Установить(СтрокаПозицииОбъекта.Позиция);
				НаборЗаписейКлассовУсловийТруда.Отбор.Период.Установить(НачалоМесяца(ДатаВступленияВСилу));
				НаборЗаписейКлассовУсловийТруда.Записать();
			Иначе
				
				ДатаРегистрацииИзменений = ?(ЗначениеЗаполнено(СтрокаПозицииОбъекта.КлассУсловийТрудаДатаРегистрацииИзменений), 
					НачалоМесяца(СтрокаПозицииОбъекта.КлассУсловийТрудаДатаРегистрацииИзменений),
					НачалоМесяца(ДатаВступленияВСилу));
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Позиция", СтрокаПозицииОбъекта.Позиция);
				Запрос.УстановитьПараметр("Период", НачалоМесяца(ДатаВступленияВСилу));
				Запрос.УстановитьПараметр("КлассУсловийТруда", СтрокаПозицииОбъекта.КлассУсловийТруда);
				Запрос.УстановитьПараметр("ДатаРегистрацииИзменений", ДатаРегистрацииИзменений);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда
				|ИЗ
				|	РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&Период, Должность = &Позиция) КАК КлассыУсловийТрудаПоДолжностям
				|ГДЕ
				|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = &КлассУсловийТруда
				|	И КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений = &ДатаРегистрацииИзменений";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					// Данные не изменились
					Продолжить;
				КонецЕсли;
				
				ЗаписатьКлассыУсловийТруда = Истина;
				Если Не ЗначениеЗаполнено(СтрокаПозицииОбъекта.КлассУсловийТруда) Тогда
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Позиция", СтрокаПозицииОбъекта.Позиция);
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда
					|ИЗ
					|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
					|ГДЕ
					|	КлассыУсловийТрудаПоДолжностям.Должность = &Позиция
					|	И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда <> ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка)";
					РезультатЗапроса = Запрос.Выполнить();
					Если РезультатЗапроса.Пустой() Тогда
						ЗаписатьКлассыУсловийТруда = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьКлассыУсловийТруда Тогда
					НаборЗаписейКлассовУсловийТруда = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
					НаборЗаписейКлассовУсловийТруда.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
					НаборЗаписейКлассовУсловийТруда.Отбор.Должность.Установить(СтрокаПозицииОбъекта.Позиция);
					НаборЗаписейКлассовУсловийТруда.Отбор.Период.Установить(НачалоМесяца(ДатаВступленияВСилу));
					НоваяЗаписьНабораЗаписей = НаборЗаписейКлассовУсловийТруда.Добавить();
					НоваяЗаписьНабораЗаписей.Должность = СтрокаПозицииОбъекта.Позиция;
					НоваяЗаписьНабораЗаписей.КлассУсловийТруда = СтрокаПозицииОбъекта.КлассУсловийТруда;
					НоваяЗаписьНабораЗаписей.Период = НачалоМесяца(ДатаВступленияВСилу);
					НоваяЗаписьНабораЗаписей.ДатаРегистрацииИзменений = ДатаРегистрацииИзменений;
					НаборЗаписейКлассовУсловийТруда.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОтборПоОрганизациям = Новый Массив;
		ОтборПоОрганизациям.Добавить(ДокументШтатногоРасписанияОбъект.Организация);
		УчетСтраховыхВзносов.УстановитьФункциональныеОпцииИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ОтборПоОрганизациям);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие")
		И СведенияОНаименованиях.Количество() > 0 Тогда
		
		ПозицииКОбновлению = Новый Массив;
		СоответствиеПозицийИдентификаторам = Новый Соответствие;
		Для каждого СведениеОНаименовании Из СведенияОНаименованиях Цикл
			
			СтрокиПозиции = ДокументШтатногоРасписанияОбъект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СведениеОНаименовании.Ключ));
			Если СтрокиПозиции.Количество() > 0 Тогда
				ПозицииКОбновлению.Добавить(СтрокиПозиции[0].Позиция);
				СоответствиеПозицийИдентификаторам.Вставить(СведениеОНаименовании.Ключ, СтрокиПозиции[0].Позиция);
			КонецЕсли;
			
		КонецЦикла;
		
		НаименованияПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицииКОбновлению, "Наименование");
		Для каждого СведениеОНаименовании Из СведенияОНаименованиях Цикл
			
			Позиция = СоответствиеПозицийИдентификаторам.Получить(СведениеОНаименовании.Ключ);
			Если ЗначениеЗаполнено(Позиция) Тогда
				
				Если НаименованияПозиций.Получить(Позиция) <> СведениеОНаименовании.Значение Тогда
					
					ПозицияОбъект = Позиция.ПолучитьОбъект();
					
					Попытка 
						ПозицияОбъект.Заблокировать();
					Исключение
						
						ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось изменить наименование ""%1"".
							|Возможно, данные позиции редактируются другим пользователем'"),
							СведениеОНаименовании.Значение);
							
						ВызватьИсключение ТекстИсключенияЗаписи;
						
					КонецПопытки;
					
					ПозицияОбъект.Наименование = СведениеОНаименовании.Значение;
					ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
					ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
					
					ПозицияОбъект.Записать();
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДокументыОбработкаПроведения(ДокументШтатногоРасписанияОбъект, Отказ, РежимПроведения, СозданныеПозиции, ДатаВступленияВСилу) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументШтатногоРасписанияОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
	СформироватьДвиженияИсторииПозицийШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДанныеДляПроведения);
	
	ОстаткиОтпусков.СформироватьДвиженияЕжегодныхОтпусковПоШтатномуРасписанию(
		ДокументШтатногоРасписанияОбъект.Движения, ДатаВступленияВСилу, ДанныеДляПроведения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию);
		
	СформироватьДвиженияСпециальностейПоШтатномуРасписанию(
			ДокументШтатногоРасписанияОбъект.Движения, ДатаВступленияВСилу, ДанныеДляПроведения.ИсторияСпециальностейПоШтатномуРасписанию);
	
	Если Отказ Тогда
		ОчиститьСозданныеПозиции(СозданныеПозиции);
	КонецЕсли;
	
	Если СозданныеПозиции <> Неопределено И СозданныеПозиции.Количество() > 0 Тогда
		Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоПодразделениям();
	КонецЕсли; 
		
	СозданныеПозиции = Неопределено;
	
КонецПроцедуры

// Прочие процедуры модулей объектов документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура АвтозаполнениеТекущимиДаннымиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу, ПроверятьЗаполненностьПодразделения = Ложь) Экспорт
	
	Подразделение = Неопределено;
	Если ДокументШтатногоРасписанияОбъект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		
		Если Не ПроверятьЗаполненностьПодразделения Или ЗначениеЗаполнено(ДокументШтатногоРасписанияОбъект.Подразделение) Тогда
			Подразделение = ДокументШтатногоРасписанияОбъект.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапросаДанныхДляЗаполнения = СформироватьЗапросПоТекущемуСостояниюШтатногоРасписания(
		ДокументШтатногоРасписанияОбъект.Ссылка, 
		ДокументШтатногоРасписанияОбъект.Организация, 
		ДатаВступленияВСилу, 
		Подразделение);
	
	ДанныеДляЗаполнения = РезультатЗапросаДанныхДляЗаполнения.Выбрать();
	
	ИдентификаторСтрокиПозиции = МаксимальныйИдентификаторСтроки(ДокументШтатногоРасписанияОбъект.Позиции, "ИдентификаторСтрокиПозиции") + 1;
	ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификаторСтроки(ДокументШтатногоРасписанияОбъект.Начисления, "ИдентификаторСтрокиВидаРасчета") + 1;
	
	Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Позиция") Цикл
		
		СтруктураПоиска = Новый Структура("Позиция", ДанныеДляЗаполнения.Позиция);
		
		СтрокиПозиции = ДокументШтатногоРасписанияОбъект.Позиции.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПозиции.Количество() = 0 Тогда
			
			ПозицияШР = ДокументШтатногоРасписанияОбъект.Позиции.Добавить();
			
			ПозицияШР.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
			
			ЗаполнитьЗначенияСвойств(ПозицияШР, ДанныеДляЗаполнения);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.ДатаУтверждения) Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияШР = СтрокиПозиции[0];
			
		КонецЕсли;
		
		Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Начисление") Цикл
			
			НезависимыйПоказатель = Не ЗначениеЗаполнено(ДанныеДляЗаполнения.Начисление);
			
			Если Не НезависимыйПоказатель Тогда
				
				НачислениеПоШР = ДокументШтатногоРасписанияОбъект.Начисления.Добавить();
				
				НачислениеПоШР.ИдентификаторСтрокиПозиции = ПозицияШР.ИдентификаторСтрокиПозиции;
				ЗаполнитьЗначенияСвойств(НачислениеПоШР, ДанныеДляЗаполнения);
				НачислениеПоШР.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Показатель) Тогда 
				
				Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Показатель") Цикл
					
					ПоказательНачисления = ДокументШтатногоРасписанияОбъект.Показатели.Добавить();
					ПоказательНачисления.ИдентификаторСтрокиВидаРасчета = ?(НезависимыйПоказатель, 0, ИдентификаторСтрокиВидаРасчета);
					ПоказательНачисления.ИдентификаторСтрокиПозиции = ПозицияШР.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(ПоказательНачисления, ДанныеДляЗаполнения);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не НезависимыйПоказатель Тогда
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОстаткиОтпусков.ЗаполнитьЕжегоднымиОтпускамиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
	ЗаполнитьСпециальностямиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ЗаполнитьСпециальностямиШтатногоРасписания(Объект, ДатаВступленияВСилу)
	
	СпециальностиПозиций = СпециальностиПозицииШтатногоРасписания(Объект.Позиции.Выгрузить(, "Позиция"), ДатаВступленияВСилу, Объект.Ссылка);
	
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		
		СпециальностиПозиции = СпециальностиПозиций.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", СтрокаПозиции.Позиция));
		Для Каждого СтрокаСпециальностиПоПозиции Из СпециальностиПозиции Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции);
			СтруктураПоиска.Вставить("Специальность", СтрокаСпециальностиПоПозиции.Специальность);
			
			СтрокиСпециальностей = Объект.Специальности.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСпециальностей.Количество() = 0 Тогда
				
				СтрокаСпециальности = Объект.Специальности.Добавить();
				СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаПозиции.ИдентификаторСтрокиПозиции;
				СтрокаСпециальности.Специальность = СтрокаСпециальностиПоПозиции.Специальность;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейИстории(Регистратор, НаборЗаписей, ВыборкаДвижений) Экспорт
	
	Если ВыборкаДвижений.Количество() > 0  Тогда
		
		НаборЗаписей.Записывать = Истина;
		Пока ВыборкаДвижений.Следующий() Цикл
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ВыборкаДвижений);
			ЗаписьНабора.Регистратор = Регистратор;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПроведения(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу)
	
	ДанныеПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументШтатногоРасписанияОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументШтатногоРасписанияПозиции.*
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументШтатногоРасписанияПозиции
		|ГДЕ
		|	ДокументШтатногоРасписанияПозиции.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ИдентификаторСтрокиПозиции";
	
	ИмяТаблицы = ДокументШтатногоРасписанияОбъект.Метаданные().Имя;
	Если ИмяТаблицы <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".УтверждениеШтатногоРасписания.", "." + ИмяТаблицы + ".");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	Позиции.КоличествоСтавок КАК КоличествоСтавок,
		|	ВЫБОР
		|		КОГДА Позиции.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Позиции.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	Позиции.ФОТ КАК ФОТ,
		|	Позиции.ФОТМин КАК ФОТМин,
		|	Позиции.ФОТМакс КАК ФОТМакс,
		|	Позиции.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер,
		|	Позиции.НадбавкаЗаВредностьРазмерМин КАК НадбавкаЗаВредностьРазмерМин,
		|	Позиции.НадбавкаЗаВредностьРазмерМакс КАК НадбавкаЗаВредностьРазмерМакс,
		|	Позиции.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
		|	Позиции.РайонныйКоэффициентРазмерМин КАК РайонныйКоэффициентРазмерМин,
		|	Позиции.РайонныйКоэффициентРазмерМакс КАК РайонныйКоэффициентРазмерМакс,
		|	Позиции.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
		|	Позиции.СевернаяНадбавкаРазмерМин КАК СевернаяНадбавкаРазмерМин,
		|	Позиции.СевернаяНадбавкаРазмерМакс КАК СевернаяНадбавкаРазмерМакс,
		|	Позиции.УсловияПриема,
		|	Позиции.ОкладТариф КАК ОкладТариф,
		|	Позиции.ОкладТарифМин КАК ОкладТарифМин,
		|	Позиции.ОкладТарифМакс КАК ОкладТарифМакс,
		|	Позиции.ТарифнаяСетка КАК ТарифнаяСетка,
		|	Позиции.РазрядКатегория КАК РазрядКатегория,
		|	Позиции.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
		|	Позиции.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
		|	Позиции.СпособОтраженияЗарплатыВБухучете,
		|	Позиции.ОтношениеКЕНВД,
		|	Позиции.СтатьяФинансирования,
		|	Позиции.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	Позиции.ОснованиеДосрочногоНазначенияПенсии,
		|	Позиции.ОсобыеУсловияТрудаПФР,
		|	Позиции.КодПозицииСпискаПФР,
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияНачисления.Начисление,
		|	ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияНачисления.Размер КАК Размер,
		|	ДокументШтатногоРасписанияНачисления.РазмерМин КАК РазмерМин,
		|	ДокументШтатногоРасписанияНачисления.РазмерМакс КАК РазмерМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Начисления КАК ДокументШтатногоРасписанияНачисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияНачисления.Ссылка
		|			И (ДокументШтатногоРасписанияНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияПоказатели.Показатель,
		|	ДокументШтатногоРасписанияПоказатели.Значение,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМин,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Показатели КАК ДокументШтатногоРасписанияПоказатели
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияПоказатели.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ДокументШтатногоРасписанияЕжегодныеОтпуска.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
		|			ТОГДА ДокументШтатногоРасписанияЕжегодныеОтпуска.КоличествоДнейВГод
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоДнейВГод
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.ЕжегодныеОтпуска КАК ДокументШтатногоРасписанияЕжегодныеОтпуска
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияЕжегодныеОтпуска.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияСпециальности.Специальность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Специальности КАК ДокументШтатногоРасписанияСпециальности
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияСпециальности.Ссылка";
	
	ИмяТаблицы = ДокументШтатногоРасписанияОбъект.Метаданные().Имя;
	Если ИмяТаблицы <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".УтверждениеШтатногоРасписания.", "." + ИмяТаблицы + ".");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.Количество();
	
	ДанныеПроведения.Вставить("ИсторииИспользованияШтатногоРасписания", РезультатЗапроса[КоличествоРезультатов - 5].Выбрать());
	ДанныеПроведения.Вставить("ИсторияНачисленийПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 4].Выбрать());
	ДанныеПроведения.Вставить("ИсторияПоказателейПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 3].Выбрать());
	ДанныеПроведения.Вставить("ИсторияЕжегодныхОтпусковПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 2].Выбрать());
	ДанныеПроведения.Вставить("ИсторияСпециальностейПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 1].Выбрать());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьДанныеДляПроведения(Запрос.МенеджерВременныхТаблиц, ДатаВступленияВСилу, ДанныеПроведения, ИмяТаблицы);
	КонецЕсли;
	
	Возврат ДанныеПроведения;
	
КонецФункции

Процедура СинхронизироватьРеквизитыПозиций(Объект) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Для каждого СтрокаТЧПозиции Из Объект.Позиции Цикл
		СинхронизироватьРеквизитыПозиции(СтрокаТЧПозиции, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	КонецЦикла;
	
	СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	
КонецПроцедуры

Процедура ОчиститьСозданныеПозиции(СозданныеПозиции)
	Если СозданныеПозиции <> Неопределено Тогда
		Для Каждого СтрокаПозиция Из СозданныеПозиции Цикл
			СтрокаПозиция.Позиция = Справочники.ШтатноеРасписание.ПустаяСсылка()
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьВозможностьИзменитьШтатноеРасписание(Позиции, Дата, Регистратор, РежимЗаписи, Отказ, ИмяЭлемента) Экспорт
	
	РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
		Регистратор, Позиции, Дата);
	МожноИзменятьШтатноеРасписание = РезультатПроверки.ИзмененияВозможны;
	
	Если НЕ МожноИзменятьШтатноеРасписание Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ. Проведение невозможно.'");
				
		Иначе
			ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ. Отмена проведения невозможна.'");
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='См. %1, позиция - ""%2""'"),
			РезультатПроверки.РегистраторПредставление,
			РезультатПроверки.Позиция);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, ИмяЭлемента, ,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьШтатноеРасписаниеПоДаннымДокумента(Организация, Позиции, Начисления, Показатели, СтрокиСНовымиПозициями, СведенияОНаименованиях)
	
	ФОИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании =
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании");
	
	Для каждого СтрокаПозиции Из Позиции Цикл
		
		ПозицияШтатногоРасписанияОбъект = Неопределено;
		СозданаПозиция = Ложь;
		
		Наименование = Неопределено;
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда
			Наименование = СведенияОНаименованиях.Получить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПозиции.Позиция) Тогда
			
			Если Наименование = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияШтатногоРасписанияОбъект = СтрокаПозиции.Позиция.ПолучитьОбъект();
			
		КонецЕсли;
		
		Если ПозицияШтатногоРасписанияОбъект = Неопределено Тогда
			СозданаПозиция = Истина;
			ПозицияШтатногоРасписанияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
			ПозицияШтатногоРасписанияОбъект.Владелец = Организация;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПозицияШтатногоРасписанияОбъект, СтрокаПозиции);
		
		Если Наименование <> Неопределено Тогда
			
			ПозицияШтатногоРасписанияОбъект.Наименование = Наименование;
			СведенияОНаименованиях.Удалить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
			
		Иначе
			
			Если ФОИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании Тогда
				
				ДополнительныеПараметры = Новый Структура("РазрядКатегория", СтрокаПозиции.РазрядКатегория);
				
				ПозицияШтатногоРасписанияОбъект.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
					СтрокаПозиции.Подразделение,
					СтрокаПозиции.Должность,
					ДополнительныеПараметры);
				
			Иначе
				
				ПозицияШтатногоРасписанияОбъект.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
					СтрокаПозиции.Подразделение,
					СтрокаПозиции.Должность);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияШтатногоРасписанияОбъект);
		ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияШтатногоРасписанияОбъект);
		ПозицияШтатногоРасписанияОбъект.Записать();
		
		ПозицияШтатногоРасписания = ПозицияШтатногоРасписанияОбъект.Ссылка;
		
		СтрокаТЧПозиции = Позиции.Найти(СтрокаПозиции.НомерСтроки, "НомерСтроки");
		
		Если СтрокаТЧПозиции <> Неопределено Тогда
			СтрокаТЧПозиции.Позиция = ПозицияШтатногоРасписания.Ссылка;
		КонецЕсли;
		
		Если СозданаПозиция Тогда
			СтрокиСНовымиПозициями.Добавить(СтрокаТЧПозиции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЗапросПоТекущемуСостояниюШтатногоРасписания(Регистратор, Организация, Дата, Подразделение = Неопределено) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Отбор = Новый Массив;
	СтруктураОтбора = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Регистратор", "<>", Регистратор);
	Отбор.Добавить(СтруктураОтбора);
	
	СтруктураОтбора = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "ПозицияШтатногоРасписания.Владелец", "=", Организация);
	Отбор.Добавить(СтруктураОтбора);
	
	Если Подразделение <> Неопределено Тогда
		СтруктураОтбора = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "ПозицияШтатногоРасписания.Подразделение", "В ИЕРАРХИИ", Подразделение);
		Отбор.Добавить(СтруктураОтбора);
	КонецЕсли;
	
	ПараметрыПолученияПозиций = ПараметрыПолученияПозицийШтатногоРасписания();
	ПараметрыПолученияПозиций.ДатаАктуальности = Дата;
	ПараметрыПолученияПозиций.Отбор = Отбор;
	
	СоздатьВТПозицииШтатногоРасписания(Истина, Запрос.МенеджерВременныхТаблиц, "ВТАктуальныеПозицииШтатногоРасписания", ПараметрыПолученияПозиций);
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
		Запрос.МенеджерВременныхТаблиц,
		"ВТАктуальныеПозицииШтатногоРасписания");
	СоздатьВТНачисленияПозицийШтатногоРасписания(Истина, ОписательВременныхТаблиц, "ВТАктуальныеНачисленияПозиций");
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания,
		|	МАКСИМУМ(АктуальныеНачисленияПозиций.Значение) КАК ОкладТариф,
		|	МАКСИМУМ(АктуальныеНачисленияПозиций.ЗначениеМин) КАК ОкладТарифМин,
		|	МИНИМУМ(АктуальныеНачисленияПозиций.ЗначениеМакс) КАК ОкладТарифМакс
		|ПОМЕСТИТЬ ВТЗначенияТарифа
		|ИЗ
		|	ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачислениеПоказатели
		|		ПО АктуальныеНачисленияПозиций.Начисление = НачислениеПоказатели.Начисление
		|			И АктуальныеНачисленияПозиций.Показатель = НачислениеПоказатели.Показатель
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК Позиция,
		|	АктуальныеПозицииШтатногоРасписания.ДатаУтверждения,
		|	АктуальныеНачисленияПозиций.Начисление КАК Начисление,
		|	АктуальныеНачисленияПозиций.Показатель,
		|	АктуальныеНачисленияПозиций.Размер,
		|	АктуальныеНачисленияПозиций.РазмерМин,
		|	АктуальныеНачисленияПозиций.РазмерМакс,
		|	АктуальныеНачисленияПозиций.Значение КАК Значение,
		|	АктуальныеНачисленияПозиций.ЗначениеМин КАК ЗначениеМин,
		|	АктуальныеНачисленияПозиций.ЗначениеМакс КАК ЗначениеМакс,
		|	ЗначенияТарифа.ОкладТариф,
		|	ЗначенияТарифа.ОкладТарифМин,
		|	ЗначенияТарифа.ОкладТарифМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений,
		|	АктуальныеПозицииШтатногоРасписания.*
		|ИЗ
		|	ВТАктуальныеПозицииШтатногоРасписания КАК АктуальныеПозицииШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияТарифа КАК ЗначенияТарифа
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ЗначенияТарифа.ПозицияШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = КлассыУсловийТрудаПоДолжностям.Должность
		|ГДЕ
		|	АктуальныеПозицииШтатногоРасписания.Дата <> АктуальныеПозицииШтатногоРасписания.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция,
		|	Начисление"; 
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	ШтатноеРасписание.ДатаУтверждения,
		|	ШтатноеРасписание.Подразделение,
		|	ШтатноеРасписание.Должность,
		|	ШтатноеРасписание.ТарифнаяСетка,
		|	ШтатноеРасписание.РазрядКатегория,
		|	ШтатноеРасписание.ТарифнаяСеткаНадбавки,
		|	ШтатноеРасписание.РазрядКатегорияНадбавки,
		|	ШтатноеРасписание.КоличествоСтавок КАК КоличествоСтавок,
		|	ШтатноеРасписание.ОкладТариф КАК ОкладТариф,
		|	ШтатноеРасписание.ОкладТарифМин КАК ОкладТарифМин,
		|	ШтатноеРасписание.ОкладТарифМакс КАК ОкладТарифМакс,
		|	ШтатноеРасписание.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ШтатноеРасписание.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ШтатноеРасписание.ФОТ КАК ФОТ,
		|	ШтатноеРасписание.ФОТМин КАК ФОТМин,
		|	ШтатноеРасписание.ФОТМакс КАК ФОТМакс,
		|	ШтатноеРасписание.НадбавкаЗаВредностьРазмер,
		|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМин,
		|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс,
		|	ШтатноеРасписание.РайонныйКоэффициентРазмер,
		|	ШтатноеРасписание.РайонныйКоэффициентРазмерМин,
		|	ШтатноеРасписание.РайонныйКоэффициентРазмерМакс,
		|	ШтатноеРасписание.СевернаяНадбавкаРазмер,
		|	ШтатноеРасписание.СевернаяНадбавкаРазмерМин,
		|	ШтатноеРасписание.СевернаяНадбавкаРазмерМакс,
		|	ШтатноеРасписание.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	ШтатноеРасписание.ОснованиеДосрочногоНазначенияПенсии,
		|	ШтатноеРасписание.ОсобыеУсловияТрудаПФР,
		|	ШтатноеРасписание.КодПозицииСпискаПФР,
		|	ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность,
		|	ШтатноеРасписание.ПроцентНадбавкиЗаВредность
		|ПОМЕСТИТЬ ВТТекущиеПозицииШР
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Владелец = &Организация
		|	И НЕ ШтатноеРасписание.ЭтоГруппа
		|	И (&Подразделение = НЕОПРЕДЕЛЕНО
		|			ИЛИ ШтатноеРасписание.Подразделение = &Подразделение)
		|	И (НЕ ШтатноеРасписание.Закрыта
		|			ИЛИ ШтатноеРасписание.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ШтатноеРасписание.ДатаЗакрытия > &Дата)";
		
		Запрос.Выполнить();
		
		СоздатьВТМестоПозицииВСтруктуреПредприятия(Запрос.МенеджерВременныхТаблиц, "ВТТекущиеПозицииШР");
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеПозицииШР.Позиция КАК Позиция,
		|	ТекущиеПозицииШР.ДатаУтверждения,
		|	ТекущиеПозицииШР.Подразделение,
		|	ШтатноеРасписаниеНачисления.Начисление КАК Начисление,
		|	ТекущиеПозицииШР.Должность,
		|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия,
		|	ТекущиеПозицииШР.ТарифнаяСетка,
		|	ТекущиеПозицииШР.РазрядКатегория,
		|	ТекущиеПозицииШР.ТарифнаяСеткаНадбавки,
		|	ТекущиеПозицииШР.РазрядКатегорияНадбавки,
		|	ТекущиеПозицииШР.КоличествоСтавок КАК КоличествоСтавок,
		|	ТекущиеПозицииШР.ОкладТариф КАК ОкладТариф,
		|	ТекущиеПозицииШР.ОкладТарифМин КАК ОкладТарифМин,
		|	ТекущиеПозицииШР.ОкладТарифМакс КАК ОкладТарифМакс,
		|	ШтатноеРасписаниеПоказатели.Показатель КАК Показатель,
		|	ШтатноеРасписаниеПоказатели.Значение,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМин,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМакс,
		|	ТекущиеПозицииШР.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	ТекущиеПозицииШР.СпособОтраженияЗарплатыВБухучете,
		|	ТекущиеПозицииШР.ОтношениеКЕНВД,
		|	ТекущиеПозицииШР.СтатьяФинансирования,
		|	ТекущиеПозицииШР.ФОТ КАК ФОТ,
		|	ТекущиеПозицииШР.ФОТМин КАК ФОТМин,
		|	ТекущиеПозицииШР.ФОТМакс КАК ФОТМакс,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмер,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмерМин,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмерМакс,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмер,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмерМин,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмерМакс,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмер,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмерМин,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмерМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений,
		|	ТекущиеПозицииШР.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	ТекущиеПозицииШР.ОснованиеДосрочногоНазначенияПенсии,
		|	ТекущиеПозицииШР.ОсобыеУсловияТрудаПФР,
		|	ТекущиеПозицииШР.КодПозицииСпискаПФР,
		|	ТекущиеПозицииШР.ВыплачиваетсяНадбавкаЗаВредность,
		|	ТекущиеПозицииШР.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТТекущиеПозицииШР КАК ТекущиеПозицииШР
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
		|		ПО ТекущиеПозицииШР.Позиция = ШтатноеРасписаниеНачисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
		|		ПО (ШтатноеРасписаниеНачисления.Ссылка = ШтатноеРасписаниеПоказатели.Ссылка)
		|			И (ШтатноеРасписаниеНачисления.ИдентификаторСтрокиВидаРасчета = ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета)
		|			И (ШтатноеРасписаниеПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО ТекущиеПозицииШР.Позиция = КлассыУсловийТрудаПоДолжностям.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО ТекущиеПозицииШР.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТекущиеПозицииШР.Позиция,
		|	ТекущиеПозицииШР.ДатаУтверждения,
		|	ТекущиеПозицииШР.Подразделение,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка),
		|	ТекущиеПозицииШР.Должность,
		|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия,
		|	ТекущиеПозицииШР.ТарифнаяСетка,
		|	ТекущиеПозицииШР.РазрядКатегория,
		|	ТекущиеПозицииШР.ТарифнаяСеткаНадбавки,
		|	ТекущиеПозицииШР.РазрядКатегорияНадбавки,
		|	ТекущиеПозицииШР.КоличествоСтавок,
		|	ТекущиеПозицииШР.ОкладТариф,
		|	ТекущиеПозицииШР.ОкладТарифМин,
		|	ТекущиеПозицииШР.ОкладТарифМакс,
		|	ШтатноеРасписаниеПоказатели.Показатель,
		|	ШтатноеРасписаниеПоказатели.Значение,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМин,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМакс,
		|	ТекущиеПозицииШР.ГрафикРаботыСотрудников,
		|	ТекущиеПозицииШР.СпособОтраженияЗарплатыВБухучете,
		|	ТекущиеПозицииШР.ОтношениеКЕНВД,
		|	ТекущиеПозицииШР.СтатьяФинансирования,
		|	ТекущиеПозицииШР.ФОТ,
		|	ТекущиеПозицииШР.ФОТМин,
		|	ТекущиеПозицииШР.ФОТМакс,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмер,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмерМин,
		|	ТекущиеПозицииШР.НадбавкаЗаВредностьРазмерМакс,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмер,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмерМин,
		|	ТекущиеПозицииШР.РайонныйКоэффициентРазмерМакс,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмер,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмерМин,
		|	ТекущиеПозицииШР.СевернаяНадбавкаРазмерМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	ТекущиеПозицииШР.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	ТекущиеПозицииШР.ОснованиеДосрочногоНазначенияПенсии,
		|	ТекущиеПозицииШР.ОсобыеУсловияТрудаПФР,
		|	ТекущиеПозицииШР.КодПозицииСпискаПФР,
		|	ТекущиеПозицииШР.ВыплачиваетсяНадбавкаЗаВредность,
		|	ТекущиеПозицииШР.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТТекущиеПозицииШР КАК ТекущиеПозицииШР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
		|		ПО ТекущиеПозицииШР.Позиция = ШтатноеРасписаниеПоказатели.Ссылка
		|			И (ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета = 0)
		|			И (ШтатноеРасписаниеПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО ТекущиеПозицииШР.Позиция = КлассыУсловийТрудаПоДолжностям.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО ТекущиеПозицииШР.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция,
		|	Начисление,
		|	Показатель";
		
		Возврат Запрос.Выполнить();
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СформироватьЗапросДляПроверкиДокумента(Регистратор, Организация, Подразделение, Позиции, Начисления, Показатели, ДатаВступленияВСилу)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияПозиции.НомерСтроки,
		|	УтверждениеШтатногоРасписанияПозиции.Должность,
		|	УтверждениеШтатногоРасписанияПозиции.Подразделение,
		|	УтверждениеШтатногоРасписанияПозиции.Позиция,
		|	УтверждениеШтатногоРасписанияПозиции.Действие,
		|	УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	&Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияНачисления.НомерСтроки,
		|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	УтверждениеШтатногоРасписанияНачисления.Начисление,
		|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	УтверждениеШтатногоРасписанияНачисления.Действие КАК Действие
		|ПОМЕСТИТЬ ВТТаблицаНачисления
		|ИЗ
		|	&Начисления КАК УтверждениеШтатногоРасписанияНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета,
		|	ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияПоказатели.НомерСтроки,
		|	УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	УтверждениеШтатногоРасписанияПоказатели.Показатель,
		|	УтверждениеШтатногоРасписанияПоказатели.Значение,
		|	УтверждениеШтатногоРасписанияПоказатели.ЗначениеМин,
		|	УтверждениеШтатногоРасписанияПоказатели.ЗначениеМакс
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК УтверждениеШтатногоРасписанияПоказатели
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачисления.Начисление,
		|	ТаблицаНачисления.ИдентификаторСтрокиПозиции,
		|	ТаблицаНачисления.ИдентификаторСтрокиВидаРасчета,
		|	ТаблицаНачисления.НомерСтроки,
		|	ТаблицаНачисления.Действие,
		|	Начисления.Наименование,
		|	Начисления.ЗачетОтработанногоВремени,
		|	ОбозначенияВТабелеУчетаРабочегоВремени.Ссылка КАК ОбозначениеВТабелеУчетаРабочегоВремени
		|ПОМЕСТИТЬ ВТДанныеНачислений
		|ИЗ
		|	ВТТаблицаНачисления КАК ТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ТаблицаНачисления.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОбозначенияВТабелеУчетаРабочегоВремени
		|		ПО (ОбозначенияВТабелеУчетаРабочегоВремени.Ссылка = Начисления.ОбозначениеВТабелеУчетаРабочегоВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки
		|ПОМЕСТИТЬ ВТЗачетОтработанногоВремениДубль
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНачислений КАК НачисленияДубльЗачетВремени
		|		ПО (Начисления.ЗачетОтработанногоВремени)
		|			И (НачисленияДубльЗачетВремени.ЗачетОтработанногоВремени)
		|			И Начисления.НомерСтроки > НачисленияДубльЗачетВремени.НомерСтроки
		|			И Начисления.ИдентификаторСтрокиПозиции = НачисленияДубльЗачетВремени.ИдентификаторСтрокиПозиции
		|			И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = НачисленияДубльЗачетВремени.ОбозначениеВТабелеУчетаРабочегоВремени
		|			И (НачисленияДубльЗачетВремени.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияДубль
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНачислений КАК НачисленияДубль
		|		ПО Начисления.ИдентификаторСтрокиПозиции = НачисленияДубль.ИдентификаторСтрокиПозиции
		|			И Начисления.Начисление = НачисленияДубль.Начисление
		|			И Начисления.НомерСтроки > НачисленияДубль.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.НомерСтроки,
		|	ТаблицаНачисления.ИдентификаторСтрокиПозиции,
		|	ТаблицаНачисления.Начисление,
		|	Показатели.Показатель,
		|	Показатели.Значение,
		|	Показатели.ЗначениеМин,
		|	Показатели.ЗначениеМакс
		|ПОМЕСТИТЬ ВТНачисленияПоказатели
		|ИЗ
		|	ВТТаблицаНачисления КАК ТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО ТаблицаНачисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|ГДЕ
		|	ТаблицаНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоказатели.НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТОшибкиЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.Значение <> НачисленияПоказателиДубль.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоказатели.НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТОшибкиМинЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.ЗначениеМин <> НачисленияПоказателиДубль.ЗначениеМин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоказатели.НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТОшибкиМаксЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.ЗначениеМакс <> НачисленияПоказателиДубль.ЗначениеМакс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Начисление,
		|	Начисления.ИдентификаторСтрокиПозиции,
		|	Начисления.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЗачетОтработанногоВремениДубль.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаЗачетОтработанногоВремениДубль,
		|	ВЫБОР
		|		КОГДА НачисленияДубль.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНачислениеДубль,
		|	ВЫБОР
		|		КОГДА НЕ Показатели.Показатель ЕСТЬ NULL 
		|				И ЕСТЬNULL(Показатели.ЗначениеМакс, 0) <> 0
		|				И ЕСТЬNULL(Показатели.ЗначениеМин, 0) <> 0
		|				И ЕСТЬNULL(Показатели.ЗначениеМин, 0) > ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаЗначения,
		|	ВЫБОР
		|		КОГДА ОшибкиЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеЗначенияПоказателя,
		|	ОшибкиЗначенийПоказателей.Показатель КАК РазныеЗначенияПоказателяПоказатель,
		|	ВЫБОР
		|		КОГДА ОшибкиМинЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеМинЗначенияПоказателя,
		|	ОшибкиМинЗначенийПоказателей.Показатель КАК РазныеМинЗначенияПоказателяПоказатель,
		|	ВЫБОР
		|		КОГДА ОшибкиМаксЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеМаксЗначенияПоказателя,
		|	ОшибкиМаксЗначенийПоказателей.Показатель КАК РазныеМаксЗначенияПоказателяПоказатель,
		|	Начисления.Наименование КАК НачислениеНаименование,
		|	ДанныеПоказателей.Наименование КАК ПоказательНаименование,
		|	Начисления.НомерСтроки КАК НачислениеНомерСтроки,
		|	Показатели.НомерСтроки КАК ПоказательНомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоказателей
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ДанныеПоказателей
		|			ПО Показатели.Показатель = ДанныеПоказателей.Ссылка
		|		ПО Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗачетОтработанногоВремениДубль КАК ЗачетОтработанногоВремениДубль
		|		ПО Начисления.НомерСтроки = ЗачетОтработанногоВремениДубль.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДубль КАК НачисленияДубль
		|		ПО Начисления.НомерСтроки = НачисленияДубль.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиЗначенийПоказателей КАК ОшибкиЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиЗначенийПоказателей.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиМинЗначенийПоказателей КАК ОшибкиМинЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиМинЗначенийПоказателей.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиМаксЗначенийПоказателей КАК ОшибкиМаксЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиМаксЗначенийПоказателей.НомерСтроки
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА ЗачетОтработанногоВремениДубль.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА НачисленияДубль.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиМинЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиМаксЗначенийПоказателей.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА НЕ Показатели.Показатель ЕСТЬ NULL 
		|						И ЕСТЬNULL(Показатели.ЗначениеМакс, 0) <> 0
		|						И ЕСТЬNULL(Показатели.ЗначениеМин, 0) <> 0
		|						И ЕСТЬNULL(Показатели.ЗначениеМин, 0) > ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТШтатноеРасписаниеАктуальное
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация
		|	И ИсторияИспользованияШтатногоРасписания.Дата <= &ДатаВступленияВСилу
		|	И ИсторияИспользованияШтатногоРасписания.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК Позиция,
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Наименование,
		|	ИсторияИспользованияШтатногоРасписания.Используется
		|ПОМЕСТИТЬ ВТАктуальностьПозиций
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШтатноеРасписаниеАктуальное КАК ШтатноеРасписаниеАктуальное
		|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ШтатноеРасписаниеАктуальное.ПозицияШтатногоРасписания
		|			И ИсторияИспользованияШтатногоРасписания.Дата = ШтатноеРасписаниеАктуальное.Дата
		|ГДЕ
		|	(&НеОтбиратьПоПодразделению
		|			ИЛИ ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение = &Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Позиции.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|				И Позиции.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаНоваяПозиция,
		|	ОшибкиПоказателей.Начисление,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаЗачетОтработанногоВремениДубль, ЛОЖЬ) КАК ОшибкаЗачетОтработанногоВремениДубль,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаНачислениеДубль, ЛОЖЬ) КАК ОшибкаНачислениеДубль,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаЗначения, ЛОЖЬ) КАК ОшибкаЗначения,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеЗначенияПоказателя, ЛОЖЬ) КАК РазныеЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеЗначенияПоказателяПоказатель КАК РазныеЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеМинЗначенияПоказателя, ЛОЖЬ) КАК РазныеМинЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеМинЗначенияПоказателяПоказатель КАК РазныеМинЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеМаксЗначенияПоказателя, ЛОЖЬ) КАК РазныеМаксЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеМаксЗначенияПоказателяПоказатель КАК РазныеМаксЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.НачислениеНаименование, """") КАК НачислениеНаименование,
		|	ЕСТЬNULL(ОшибкиПоказателей.ПоказательНаименование, """") КАК ПоказательНаименование,
		|	Позиции.НомерСтроки КАК НомерСтроки,
		|	ОшибкиПоказателей.НачислениеНомерСтроки КАК НачислениеНомерСтроки,
		|	ОшибкиПоказателей.ПоказательНомерСтроки КАК ПоказательНомерСтроки,
		|	ЛОЖЬ КАК ОшибкаАктуальнаяПозиция,
		|	ЛОЖЬ КАК ОшибкаЗакрытаяПозиция,
		|	"""" КАК ОшибкаАктуальностиПозицияНаименование,
		|	NULL КАК ОшибкаАктуальностиПозиция
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПоказателей КАК ОшибкиПоказателей
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ОшибкиПоказателей.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА Позиции.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|						И Позиции.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА Позиции.НомерСтроки ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ОшибкиПоказателей.ОшибкаЗачетОтработанногоВремениДубль
		|			ИЛИ ОшибкиПоказателей.ОшибкаНачислениеДубль
		|			ИЛИ ОшибкиПоказателей.ОшибкаЗначения
		|			ИЛИ ОшибкиПоказателей.РазныеЗначенияПоказателя
		|			ИЛИ ОшибкиПоказателей.РазныеМинЗначенияПоказателя
		|			ИЛИ ОшибкиПоказателей.РазныеМаксЗначенияПоказателя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	"""",
		|	"""",
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Позиции.НомерСтроки ЕСТЬ NULL 
		|				И АктуальностьПозиций.Используется
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ Позиции.НомерСтроки ЕСТЬ NULL 
		|				И НЕ АктуальностьПозиций.Используется
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	АктуальностьПозиций.Позиция.Наименование,
		|	АктуальностьПозиций.Позиция
		|ИЗ
		|	ВТАктуальностьПозиций КАК АктуальностьПозиций
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
		|		ПО АктуальностьПозиций.Позиция = Позиции.Позиция
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Позиции.НомерСтроки ЕСТЬ NULL 
		|					И АктуальностьПозиций.Используется
		|				ТОГДА ИСТИНА
		|			КОГДА НЕ Позиции.НомерСтроки ЕСТЬ NULL 
		|					И НЕ АктуальностьПозиций.Используется
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОшибкаАктуальнаяПозиция,
		|	НомерСтроки,
		|	НачислениеНомерСтроки,
		|	ПоказательНомерСтроки";
	
	РезультатЗапроса =  Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Погашает настройку использования вилки ставок в штатном расписании если расчет зарплаты не используется.
//
// Параметры:
//	- ИспользоватьРасчетЗарплаты - булево, признак использования расчета зарплаты.
//
Процедура ЗаполнитьНастройкиШтатногоРасписания(ИспользоватьРасчетЗарплаты) Экспорт
	
	Настройка = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	Настройка.Прочитать();
	
	Если Не Настройка.Выбран() Тогда
		ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
		Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
			Настройка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплаты Тогда
		Настройка.НеИспользоватьВилкуСтавокВШтатномРасписании = Не Настройка.ИспользоватьВилкуСтавокВШтатномРасписании;
	Иначе
		Настройка.ИспользоватьВилкуСтавокВШтатномРасписании = Ложь;
		Настройка.НеИспользоватьВилкуСтавокВШтатномРасписании = Ложь;
	КонецЕсли;
	
	Настройка.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка описателей временных таблиц для получения данных позиции.

Функция ОписательВременныхТаблицДляСоздатьВТПозицииШтатногоРасписания(МенеджерВременныхТаблиц, ИмяВТОтбораПозицийШтатногоРасписания, ИменаРеквизитов = "ПозицияШтатногоРасписания,Дата") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТОтбораПозицийШтатногоРасписания", ИмяВТОтбораПозицийШтатногоРасписания);
	ОписательВременныхТаблиц.Вставить("ИменаРеквизитов", ИменаРеквизитовВТПозицииШтатногоРасписания(ИменаРеквизитов));
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

Функция ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(МенеджерВременныхТаблиц, ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписания", ИменаРеквизитов = "ПозицияШтатногоРасписания,Дата") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ОписательВременныхТаблиц.Вставить("ИменаРеквизитов", ИменаРеквизитовВТПозицииШтатногоРасписания(ИменаРеквизитов));
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

Функция ИменаРеквизитовВТПозицииШтатногоРасписания(ИменаРеквизитов = "ПозицияШтатногоРасписания,Дата") Экспорт
	
	СтруктураИменРеквизитов = Новый Структура("Позиция,Дата", "ПозицияШтатногоРасписания","Дата");
	
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов);
	Если МассивИмен.Количество() > 1 Тогда
		СтруктураИменРеквизитов.Позиция = МассивИмен[0];
		СтруктураИменРеквизитов.Дата = МассивИмен[1];
	КонецЕсли;
	
	Возврат СтруктураИменРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы по начислениям позиций штатного расписания.

Процедура СоздатьВТНачисленияПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТНачисленияПозицийШтатногоРасписания = "ВТНачисленияПозицийШтатногоРасписания", ПолноеОписаниеНачислений = Ложь) Экспорт
	
	Запрос = ЗапросВТНачисленияПозицийШтатногоРасписания(
		ТолькоРазрешенные, ОписательВременныхТаблиц.ИмяВТПозицииШтатногоРасписания, ИмяВТНачисленияПозицийШтатногоРасписания, ОписательВременныхТаблиц.ИменаРеквизитов, ПолноеОписаниеНачислений);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТНачисленияПозицийШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяВТНачисленияПозицийШтатногоРасписания, ИменаРеквизитов = Неопределено, ПолноеОписаниеНачислений = Ложь) Экспорт
	
	Если ИменаРеквизитов = Неопределено Тогда
		ИменаРеквизитов = ИменаРеквизитовВТПозицииШтатногоРасписания(ИменаРеквизитов);
	КонецЕсли;
	
	ФОИспользоватьНесколькоТарифныхСтавок = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок");
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.Период КАК Период,
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ИсторияНачисленийПоШтатномуРасписанию.Начисление КАК Начисление,
			|	ИсторияНачисленийПоШтатномуРасписанию.Размер КАК Размер,
			|	ИсторияНачисленийПоШтатномуРасписанию.РазмерМин КАК РазмерМин,
			|	ИсторияНачисленийПоШтатномуРасписанию.РазмерМакс КАК РазмерМакс,
			|	ЕСТЬNULL(Показатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
			|	ЕСТЬNULL(Показатели.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(Показатели.ЗначениеМин, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(Показатели.ЗначениеМакс, 0) КАК ЗначениеМакс,
			|	ИсторияНачисленийПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТНачисленияПозицийШтатногоРасписания
			|{ВЫБРАТЬ
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	Начисление.*,
			|	Размер,
			|	РазмерМин,
			|	РазмерМакс,
			|	Показатель.*,
			|	Значение,
			|	ЗначениеМин,
			|	ЗначениеМакс,
			|	ИдентификаторСтрокиВидаРасчета}
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНачисленийПоШтатномуРасписанию КАК ИсторияНачисленийПоШтатномуРасписанию
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию КАК Показатели
			|			ПО ИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания = Показатели.ПозицияШтатногоРасписания
			|				И ИсторияНачисленийПоШтатномуРасписанию.Дата = Показатели.Дата
			|				И ИсторияНачисленийПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Дата = ИсторияНачисленийПоШтатномуРасписанию.Дата";
						
		Если ФОИспользоватьНесколькоТарифныхСтавок Тогда
			
			ТекстЗапроса = ТекстЗапроса
				+	"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|"
				+	"ВЫБРАТЬ
					|	ПозицииШтатногоРасписания.Период КАК Период,
					|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
					|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Поле1,
					|	0 КАК Поле2,
					|	0 КАК Поле3,
					|	0 КАК Поле4,
					|	ИсторияПоказателейПоШтатномуРасписанию.Показатель,
					|	ИсторияПоказателейПоШтатномуРасписанию.Значение,
					|	ИсторияПоказателейПоШтатномуРасписанию.ЗначениеМин,
					|	ИсторияПоказателейПоШтатномуРасписанию.ЗначениеМакс,
					|	ИсторияПоказателейПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета
					|ИЗ
					|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию КАК ИсторияПоказателейПоШтатномуРасписанию
					|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания
					|			И ПозицииШтатногоРасписания.Дата = ИсторияПоказателейПоШтатномуРасписанию.Дата
					|			И (ИсторияПоказателейПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета = 0)
					|{ГДЕ
					|	ПозицииШтатногоРасписания.Организация КАК Организация,
					|	ПозицииШтатногоРасписания.Подразделение КАК Подразделение,
					|	ПозицииШтатногоРасписания.Должность КАК Должность,
					|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания}";
			
		КонецЕсли;
			
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.Период КАК Период,
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.Размер КАК Размер,
			|	Начисления.РазмерМин КАК РазмерМин,
			|	Начисления.РазмерМакс КАК РазмерМакс,
			|	ЕСТЬNULL(Показатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
			|	ЕСТЬNULL(Показатели.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(Показатели.ЗначениеМин, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(Показатели.ЗначениеМакс, 0) КАК ЗначениеМакс,
			|	Начисления.ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТНачисленияПозицийШтатногоРасписания
			|{ВЫБРАТЬ
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	Начисление.*,
			|	Размер,
			|	РазмерМин,
			|	РазмерМакс,
			|	Показатель.*,
			|	Значение,
			|	ЗначениеМин,
			|	ЗначениеМакс,
			|	ИдентификаторСтрокиВидаРасчета}
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Начисления КАК Начисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК Показатели
			|			ПО Начисления.Ссылка = Показатели.Ссылка
			|				И Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = Начисления.Ссылка";
						
		Если ФОИспользоватьНесколькоТарифныхСтавок Тогда
			
			ТекстЗапроса = ТекстЗапроса
				+ 	"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|"
				+	"ВЫБРАТЬ
					|	ПозицииШтатногоРасписания.Период КАК Период,
					|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
					|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка),
					|	0,
					|	0,
					|	0,
					|	Показатели.Показатель,
					|	Показатели.Значение,
					|	Показатели.ЗначениеМин,
					|	Показатели.ЗначениеМакс,
					|	Показатели.ИдентификаторСтрокиВидаРасчета
					|ИЗ
					|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК Показатели
					|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = Показатели.Ссылка
					|			И (Показатели.ИдентификаторСтрокиВидаРасчета = 0)
					|{ГДЕ
					|	Показатели.Ссылка.Владелец.* КАК Организация,
					|	Показатели.Ссылка.Подразделение.*,
					|	Показатели.Ссылка.Должность.*,
					|	Показатели.Ссылка.* КАК ПозицияШтатногоРасписания}";
				
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПолноеОписаниеНачислений Тогда
		
		ТекстЗапроса = 
			ТекстЗапроса 
			+	"
				|ОБЪЕДИНИТЬ ВСЕ
				|"
			+	"ВЫБРАТЬ
				|	ПозицииШтатногоРасписания.Период КАК Период,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	&НачислениеНадбавкаЗаВредность КАК Начисление,
				|	ПозицииШтатногоРасписания.НадбавкаЗаВредностьРазмер КАК Размер,
				|	ПозицииШтатногоРасписания.НадбавкаЗаВредностьРазмерМин КАК РазмерМин,
				|	ПозицииШтатногоРасписания.НадбавкаЗаВредностьРазмерМакс КАК РазмерМакс,
				|	&ПоказательПроцентНадбавкиЗаВредность КАК Показатель,
				|	ПозицииШтатногоРасписания.ПроцентНадбавкиЗаВредность КАК Значение,
				|	ПозицииШтатногоРасписания.ПроцентНадбавкиЗаВредность КАК ЗначениеМин,
				|	ПозицииШтатногоРасписания.ПроцентНадбавкиЗаВредность КАК ЗначениеМакс,
				|	99997 КАК ИдентификаторСтрокиВидаРасчета
				|ИЗ
				|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|ГДЕ
				|	ПозицииШтатногоРасписания.ВыплачиваетсяНадбавкаЗаВредность
				|	И &НачислениеНадбавкаЗаВредность <> НЕОПРЕДЕЛЕНО
				|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПозицииШтатногоРасписания.Период КАК Период,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	&НачислениеРайонныйКоэффициент КАК Начисление,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициентРазмер КАК Размер,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициентРазмерМин КАК РазмерМин,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициентРазмерМакс КАК РазмерМакс,
				|	&ПоказательРайонныйКоэффициент КАК Показатель,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициент КАК Значение,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициент КАК ЗначениеМин,
				|	ПозицииШтатногоРасписания.РайонныйКоэффициент КАК ЗначениеМакс,
				|	99999 КАК ИдентификаторСтрокиВидаРасчета
				|ИЗ
				|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|ГДЕ
				|	ПозицииШтатногоРасписания.РайонныйКоэффициент > 1
				|	И &НачислениеРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
				|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПозицииШтатногоРасписания.Период,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	&НачислениеСевернаяНадбавка,
				|	ПозицииШтатногоРасписания.СевернаяНадбавкаРазмер,
				|	ПозицииШтатногоРасписания.СевернаяНадбавкаРазмерМин,
				|	ПозицииШтатногоРасписания.СевернаяНадбавкаРазмерМакс,
				|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка),
				|	0,
				|	0,
				|	0,
				|	99998
				|ИЗ
				|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|ГДЕ
				|	ПозицииШтатногоРасписания.ПрименятьСевернуюНадбавку
				|	И &НачислениеСевернаяНадбавка <> НЕОПРЕДЕЛЕНО";
				
		НачислениеНадбавкаЗаВредность = НачисленияНадбавкаЗаВредность();
		ПоказательПроцентНадбавкиЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
				
		Запрос.УстановитьПараметр("НачислениеНадбавкаЗаВредность", НачислениеНадбавкаЗаВредность);
		Запрос.УстановитьПараметр("ПоказательПроцентНадбавкиЗаВредность", ПоказательПроцентНадбавкиЗаВредность);
		
		Запрос.УстановитьПараметр("НачислениеРайонныйКоэффициент", РасчетЗарплаты.НачислениеРайонныйКоэффициент());
		Запрос.УстановитьПараметр("ПоказательРайонныйКоэффициент", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
		Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", РасчетЗарплаты.НачислениеСевернаяНадбавка());

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ПозицияШтатногоРасписания";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Позиция);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.Дата", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Дата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНачисленияПозицийШтатногоРасписания", ИмяВТНачисленияПозицийШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст), "", Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()) + ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы по ежегодным отпускам позиций штатного расписания.

Процедура СоздатьВТЕжегодныеОтпускаПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания = "ВТЕжегодныеОтпускаПозицийШтатногоРасписания")
	
	Запрос = ЗапросВТЕжегодныеОтпускаПозицийШтатногоРасписания(
		ТолькоРазрешенные, ОписательВременныхТаблиц.ИмяВТПозицииШтатногоРасписания, ОписательВременныхТаблиц.ИменаРеквизитов, ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТЕжегодныеОтпускаПозицийШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИменаРеквизитов, ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания)
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Дата >= ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТЕжегодныеОтпускаПозицийШтатногоРасписания
			|ИЗ
			|	ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Дата = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод <> 0
			|{ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Должность.* КАК Должность,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.*}
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТЕжегодныеОтпускаПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ЕжегодныеОтпуска.Ссылка
		|{ГДЕ
		|	ЕжегодныеОтпуска.Ссылка.Владелец.* КАК Организация,
		|	ЕжегодныеОтпуска.Ссылка.Подразделение.*,
		|	ЕжегодныеОтпуска.Ссылка.Должность.*,
		|	ЕжегодныеОтпуска.Ссылка.Ссылка.* КАК ПозицияШтатногоРасписания}";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Позиция);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.Дата", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Дата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЕжегодныеОтпускаПозицийШтатногоРасписания", ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы к позициям штатного расписания.

Функция ПараметрыПолученияПозицийШтатногоРасписания() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаАктуальности", '00010101');
	СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	СтруктураПараметров.Вставить("ПозицииШтатногоРасписания", Неопределено);
	СтруктураПараметров.Вставить("Отбор", Новый Массив);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СоздатьВТПозицииШтатногоРасписания(ТолькоРазрешенные, МенеджерВременныхТаблиц, ИмяВТПозицииШтатногоРасписания, ПараметрыПолученияПозиций) Экспорт
	
	Запрос = ЗапросВТПозицииШтатногоРасписанияПоПараметрам(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ПараметрыПолученияПозиций);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПозицииШтатногоРасписанияПоПараметрам(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ПараметрыПолученияПозиций) Экспорт
	
	Запрос = Новый Запрос;
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	Организация = ПараметрыПолученияПозиций.Организация;
	Подразделение = ПараметрыПолученияПозиций.Подразделение;
	Позиции = ПараметрыПолученияПозиций.ПозицииШтатногоРасписания;
	ДатаАктуальности = ПараметрыПолученияПозиций.ДатаАктуальности;
	Отбор = ПараметрыПолученияПозиций.Отбор;
	
	ОтборПоПостояннымДанным= Новый Массив;
	
	УсловияЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		СтруктураОтбора = Новый Структура;

		Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			ЛевоеЗначение = "ПозицияШтатногоРасписания.Владелец";
		Иначе
			ЛевоеЗначение = "Владелец";
		КонецЕсли;
		СтруктураОтбора.Вставить("ЛевоеЗначение", ЛевоеЗначение);
		
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ВидСравненияОтбора = "=";
			ПравоеЗначение = Организация;
		Иначе
			ВидСравненияОтбора = "В";
			Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
				ПравоеЗначение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
			Иначе
				ПравоеЗначение = Организация;
			КонецЕсли;
		КонецЕсли;
		СтруктураОтбора.Вставить("ВидСравнения", ВидСравненияОтбора);
		СтруктураОтбора.Вставить("ПравоеЗначение", ПравоеЗначение);
		
		ОтборПоПостояннымДанным.Добавить(СтруктураОтбора);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		СтруктураОтбора = Новый Структура;

		Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			ЛевоеЗначение = "ПозицияШтатногоРасписания.Подразделение";
		Иначе
			ЛевоеЗначение = "Подразделение";
		КонецЕсли;
		СтруктураОтбора.Вставить("ЛевоеЗначение", ЛевоеЗначение);
		
		Если ТипЗнч(Подразделение) = Тип("Строка") Тогда
			ВидСравненияОтбора = "=";
			ПравоеЗначение = Подразделение;
		Иначе
			ВидСравненияОтбора = "В ИЕРАРХИИ";
			Если ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				ПравоеЗначение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
			Иначе
				ПравоеЗначение = Подразделение;
			КонецЕсли;
		КонецЕсли;
		СтруктураОтбора.Вставить("ВидСравнения", ВидСравненияОтбора);
		СтруктураОтбора.Вставить("ПравоеЗначение", ПравоеЗначение);
		
		ОтборПоПостояннымДанным.Добавить(СтруктураОтбора);
		
	КонецЕсли; 
	
	Если Позиции <> Неопределено Тогда
		
		Если ТипЗнч(Позиции) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Позиции);
		Иначе
			СписокПозиций = Позиции;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокПозиций", СписокПозиций);
		Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			УсловияЗапроса.Добавить("(ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания В (&СписокПозиций))");
		Иначе
			УсловияЗапроса.Добавить("(Ссылка В (&СписокПозиций))");
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		
		Если ТипЗнч(ДатаАктуальности) <> Тип("Строка") Тогда
			Запрос.УстановитьПараметр("ДатаАктуальностиПозиций", ДатаАктуальности);
		КонецЕсли;
		
		Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			УсловияЗапроса.Добавить("(ИсторияИспользованияШтатногоРасписания.Дата <= &ДатаАктуальностиПозиций)");
		Иначе
			УсловияЗапроса.Добавить("(ШтатноеРасписание.ДатаУтверждения <= &ДатаАктуальностиПозиций
				|И (НЕ ШтатноеРасписание.Закрыта ИЛИ ШтатноеРасписание.ДатаЗакрытия  > &ДатаАктуальностиПозиций))");
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальностиПозиций", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания
		И Отбор <> Неопределено Тогда
		
		Для каждого ОписаниеЭлементаОтбора Из Отбор Цикл
			
			Если ВРег(ОписаниеЭлементаОтбора.ЛевоеЗначение) = ВРег("Регистратор") Тогда
				
				ОтборПоПостояннымДанным.Добавить(ОписаниеЭлементаОтбора);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстУсловий = ТекстУсловийЗапросаСОтборами(Запрос, ОтборПоПостояннымДанным, ФОИспользоватьИсториюИзмененияШтатногоРасписания, УсловияЗапроса);
	
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&ДатаАктуальностиПозиций КАК Период,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	МИНИМУМ(ИсторияИспользованияШтатногоРасписанияСледующие.Дата) КАК СледующаяДата
			|ПОМЕСТИТЬ ВТВсеПозицииНаДатуАктуальности
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияСледующие
			|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияСледующие.ПозицияШтатногоРасписания
			|			И ИсторияИспользованияШтатногоРасписания.Дата < ИсторияИспользованияШтатногоРасписанияСледующие.Дата
			|ГДЕ
			|	&ТекстУсловийЗапроса
			|{ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность.* КАК Должность,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Ссылка.* КАК ПозицияШтатногоРасписания}
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	Дата";
			
		Если Отбор <> Неопределено
			И Отбор.Количество() > 0 Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеПозицииНаДатуАктуальности", "ВТПромежуточнаяВсеПозицииНаДатуАктуальности");
			
			ТекстЗапроса = ТекстЗапроса
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				  |	ПромежуточнаяВсеПозицииНаДатуАктуальности.Период КАК Период,
				  |	ПромежуточнаяВсеПозицииНаДатуАктуальности.Дата КАК Дата,
				  |	ПромежуточнаяВсеПозицииНаДатуАктуальности.СледующаяДата КАК СледующаяДата,
				  |	ПромежуточнаяВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
				  |ПОМЕСТИТЬ ВТВсеПозицииНаДатуАктуальности
				  |ИЗ
				  |	ВТПромежуточнаяВсеПозицииНаДатуАктуальности КАК ПромежуточнаяВсеПозицииНаДатуАктуальности
				  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
				  |		ПО ПромежуточнаяВсеПозицииНаДатуАктуальности.Дата = ИсторияИспользованияШтатногоРасписания.Дата
				  |			И ПромежуточнаяВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
				  |			И (&ТекстУсловийСвязи)
				  |ГДЕ
				  |	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания ЕСТЬ НЕ NULL ";
				  
			ТекстУсловийСвязи = ТекстУсловийЗапросаСОтборами(Запрос, Отбор, ФОИспользоватьИсториюИзмененияШтатногоРасписания);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийСвязи", ТекстУсловийСвязи);
			
		КонецЕсли;
			
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&ДатаАктуальностиПозиций КАК Период,
			|	ШтатноеРасписание.ДатаУтверждения КАК Дата,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК СледующаяДата,
			|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТВсеПозицииНаДатуАктуальности
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|ГДЕ
			|	&ТекстУсловийЗапроса
			|{ГДЕ
			|	ШтатноеРасписание.Владелец.* КАК Организация,
			|	ШтатноеРасписание.Подразделение.*,
			|	ШтатноеРасписание.Должность.*,
			|	ШтатноеРасписание.Ссылка.* КАК ПозицияШтатногоРасписания}
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	Период";
			
		Если Отбор <> Неопределено
			И Отбор.Количество() > 0 Тогда
			ТекстУсловий = ТекстУсловий + Символы.ПС + "	И "	+ ТекстУсловийЗапросаСОтборами(Запрос, Отбор, ФОИспользоватьИсториюИзмененияШтатногоРасписания);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловийЗапроса", ТекстУсловий);
	
	Если ЗначениеЗаполнено(ДатаАктуальности) И ТипЗнч(ДатаАктуальности) = Тип("Строка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаАктуальностиПозиций", ДатаАктуальности);
	КонецЕсли;
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗапросВтПозиции = ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, "ВТВсеПозицииНаДатуАктуальности", Ложь);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВтПозиции);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТВсеПозицииНаДатуАктуальности");
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТПозицииШтатногоРасписания) Экспорт
	
	Запрос = ЗапросВТПозицииШтатногоРасписания(
		ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ОписательВременныхТаблиц.ИмяВТОтбораПозицийШтатногоРасписания, Истина, ОписательВременныхТаблиц.ИменаРеквизитов);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры
	
Функция ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяВТОтбораПозицийШтатногоРасписания, ПодобратьПоДатеАктуальности, ИменаРеквизитов = Неопределено) Экспорт
	
	Если ИменаРеквизитов = Неопределено
		Или ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		
		ИменаРеквизитов = ИменаРеквизитовВТПозицииШтатногоРасписания(ИменаРеквизитов);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	Если ПодобратьПоДатеАктуальности Тогда
		
		ИменаРеквизитовТаблицыОтбора = ИменаРеквизитовВТПозицииШтатногоРасписания();
		ИмяВТОтбораПозиций = "ВТВсеОтобранныеПозицииНаДатуАктуальности";
		
		Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(ОтборПозицийШтатногоРасписания.Дата, ДЕНЬ) КАК Период,
				|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
				|	МИНИМУМ(ИсторияИспользованияШтатногоРасписанияСледующие.Дата) КАК СледующаяДата,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение КАК Подразделение
				|ПОМЕСТИТЬ ВТВсеОтобранныеПозицииНаДатуАктуальности
				|ИЗ
				|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбораПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания
				|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания
				|			И ИсторияИспользованияШтатногоРасписания.Дата <= ОтборПозицийШтатногоРасписания.Дата
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияСледующие
				|		ПО (ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияСледующие.ПозицияШтатногоРасписания)
				|			И (ОтборПозицийШтатногоРасписания.Дата < ИсторияИспользованияШтатногоРасписанияСледующие.Дата)
				|{ГДЕ
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность.* КАК Должность,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Ссылка.* КАК ПозицияШтатногоРасписания}
				|
				|СГРУППИРОВАТЬ ПО
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания,
				|	ОтборПозицийШтатногоРасписания.Дата,
				|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ПозицияШтатногоРасписания,
				|	Дата";
				
		Иначе
			
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(ОтборПозицийШтатногоРасписания.Дата, ДЕНЬ) КАК Период,
				|	ШтатноеРасписание.ДатаУтверждения КАК Дата,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК СледующаяДата,
				|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
				|	ШтатноеРасписание.Подразделение КАК Подразделение
				|ПОМЕСТИТЬ ВТВсеОтобранныеПозицииНаДатуАктуальности
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбораПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания
				|		ПО ШтатноеРасписание.Ссылка = ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания
				|ГДЕ
				|	ШтатноеРасписание.ДатаУтверждения <= ОтборПозицийШтатногоРасписания.Дата
				|	И (НЕ ШтатноеРасписание.Закрыта
				|			ИЛИ ШтатноеРасписание.ДатаЗакрытия > ОтборПозицийШтатногоРасписания.Дата)
				|{ГДЕ
				|	ШтатноеРасписание.Владелец.* КАК Организация,
				|	ШтатноеРасписание.Подразделение.*,
				|	ШтатноеРасписание.Должность.*,
				|	ШтатноеРасписание.Ссылка.* КАК ПозицияШтатногоРасписания}
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ПозицияШтатногоРасписания,
				|	Период";
				
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеОтобранныеПозицииНаДатуАктуальности", ИмяВТОтбораПозиций);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборПозицийШтатногоРасписания.Дата", "ОтборПозицийШтатногоРасписания." + ИменаРеквизитов.Дата);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания", "ОтборПозицийШтатногоРасписания." + ИменаРеквизитов.Позиция);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтбораПозицийШтатногоРасписания", ИмяВТОтбораПозицийШтатногоРасписания);
		
		ТекстЗапроса = ТекстЗапроса + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
		
	Иначе
		ИменаРеквизитовТаблицыОтбора = ИменаРеквизитов;
		ИмяВТОтбораПозиций = ИмяВТОтбораПозицийШтатногоРасписания;
		ТекстЗапроса = "";
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТВсеПозицииНаДатуАктуальности", "СтруктурнаяЕдиница");
	Если ПодобратьПоДатеАктуальности Тогда
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("СтруктурнаяЕдиница", "ПозицияШтатногоРасписания.Подразделение");
	Иначе
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("СтруктурнаяЕдиница", ИменаРеквизитовТаблицыОтбора.Позиция + ".Подразделение");
	КонецЕсли;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ТерриториальныеУсловияПФР",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		Истина);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТВсеПозицииНаДатуАктуальности", "Должность");
	Если ПодобратьПоДатеАктуальности Тогда
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Должность", "ПозицияШтатногоРасписания");
	Иначе
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Должность", ИменаРеквизитовТаблицыОтбора.Позиция);
	КонецЕсли;
	
	ЗапросВТКлассыУсловийТрудаПоДолжностямСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КлассыУсловийТрудаПоДолжностям",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКлассыУсловийТрудаПоДолжностямСрез);
	
	ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
	Запрос.УстановитьПараметр("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты", ИспользоватьТарифныеСеткиПриРасчетеЗарплаты);
	
	Запрос.УстановитьПараметр("ИспользоватьНадбавкуЗаВредность", ПолучитьФункциональнуюОпцию("ИспользоватьНадбавкуЗаВредность"));
	
	Запрос.УстановитьПараметр("ИспользоватьРазрядыКатегорииКлассыДолжностей", 
		ИспользоватьТарифныеСеткиПриРасчетеЗарплаты ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании"));
	
	Запрос.УстановитьПараметр("ИспользоватьКвалификационнуюНадбавку", ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку"));
	
	ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия = ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия(Запрос);
	ТекстЗапросаВТКатегорииПерсоналаПоПозициям = СтатистикаПерсоналаРасширенный.ТекстЗапросаВТКатегорииПерсоналаПоПозициям();
	
	ТекстЗапроса = 
		?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса)
		+ ЗапросВТИмяРегистраСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТКлассыУсловийТрудаПоДолжностямСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаВТКатегорииПерсоналаПоПозициям
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ТекстЗапроса = ТекстЗапроса
			+	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 	|	ВсеПозицииНаДатуАктуальности.Период КАК Период,
			 	|	ИсторияИспользованияШтатногоРасписания.Регистратор,
			 	|	ИсторияИспользованияШтатногоРасписания.Дата КАК Дата,
			 	|	ВсеПозицииНаДатуАктуальности.СледующаяДата КАК СледующаяДата,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.ДатаУтверждения КАК ДатаУтверждения,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.ДатаЗакрытия КАК ДатаЗакрытия,
			 	|	ВЫРАЗИТЬ(ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК Справочник.ШтатноеРасписание).Наименование КАК Наименование,
			 	|	ИсторияИспользованияШтатногоРасписания.КоличествоСтавок,
			 	|	ИсторияИспользованияШтатногоРасписания.ГрафикРаботыСотрудников,
			 	|	ИсторияИспользованияШтатногоРасписания.УсловияПриема,
			 	|	ИсторияИспользованияШтатногоРасписания.СпособОтраженияЗарплатыВБухучете,
			 	|	ИсторияИспользованияШтатногоРасписания.ОтношениеКЕНВД,
			 	|	ИсторияИспользованияШтатногоРасписания.СтатьяФинансирования,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ИСТИНА
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.ТарифнаяСетка
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ИсторияИспользованияШтатногоРасписания.ТарифнаяСетка ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК ТарифнаяСетка,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ИСТИНА
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.ТарифнаяСеткаНадбавки
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ИсторияИспользованияШтатногоРасписания.ТарифнаяСеткаНадбавки ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК ТарифнаяСеткаНадбавки,
			 	|	ИсторияИспользованияШтатногоРасписания.ФОТ,
			 	|	ИсторияИспользованияШтатногоРасписания.ФОТМин,
			 	|	ИсторияИспользованияШтатногоРасписания.ФОТМакс,
			 	|	ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмер,
			 	|	ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмерМин,
			 	|	ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмерМакс,
			 	|	ИсторияИспользованияШтатногоРасписания.РайонныйКоэффициентРазмер,
			 	|	ИсторияИспользованияШтатногоРасписания.РайонныйКоэффициентРазмерМин,
			 	|	ИсторияИспользованияШтатногоРасписания.РайонныйКоэффициентРазмерМакс,
			 	|	ИсторияИспользованияШтатногоРасписания.СевернаяНадбавкаРазмер,
			 	|	ИсторияИспользованияШтатногоРасписания.СевернаяНадбавкаРазмерМин,
			 	|	ИсторияИспользованияШтатногоРасписания.СевернаяНадбавкаРазмерМакс,
			 	|	ИсторияИспользованияШтатногоРасписания.ОкладТариф,
			 	|	ИсторияИспользованияШтатногоРасписания.ОкладТарифМин,
			 	|	ИсторияИспользованияШтатногоРасписания.ОкладТарифМакс,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение КАК Подразделение,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность КАК Должность,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностей = ИСТИНА
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.РазрядКатегория
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК РазрядКатегория,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьКвалификационнуюНадбавку
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.РазрядКатегорияНадбавки
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК РазрядКатегорияНадбавки,
			 	|	ВЫБОР
			 	|		КОГДА ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
			 	|			ТОГДА ИСТИНА
			 	|		ИНАЧЕ ЛОЖЬ
			 	|	КОНЕЦ КАК ПрименятьСевернуюНадбавку,
			 	|	ВЫБОР
			 	|		КОГДА ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.ПроцентСевернойНадбавки
			 	|		ИНАЧЕ 0
			 	|	КОНЕЦ КАК ПроцентСевернойНадбавки,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.РайонныйКоэффициент КАК РайонныйКоэффициент,
			 	|	ВЫБОР
			 	|		КОГДА НЕ &ИспользоватьНадбавкуЗаВредность
			 	|			ТОГДА ЛОЖЬ
			 	|		ИНАЧЕ ИсторияИспользованияШтатногоРасписания.ВыплачиваетсяНадбавкаЗаВредность
			 	|	КОНЕЦ КАК ВыплачиваетсяНадбавкаЗаВредность,
			 	|	ВЫБОР
			 	|		КОГДА ИсторияИспользованияШтатногоРасписания.ВыплачиваетсяНадбавкаЗаВредность
			 	|			ТОГДА ИсторияИспользованияШтатногоРасписания.ПроцентНадбавкиЗаВредность
			 	|		ИНАЧЕ 0
			 	|	КОНЕЦ КАК ПроцентНадбавкиЗаВредность,
			 	|	ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
			 	|	ИсторияИспользованияШтатногоРасписания.ОснованиеДосрочногоНазначенияПенсии,
			 	|	ИсторияИспользованияШтатногоРасписания.ОсобыеУсловияТрудаПФР,
			 	|	ИсторияИспользованияШтатногоРасписания.КодПозицииСпискаПФР,
			 	|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия,
				|	КатегорииПерсоналаПоПозициям.КатегорияПерсонала КАК КатегорияПерсонала,
			 	|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
			 	|	КлассыУсловийТрудаПоДолжностям.ПериодЗаписи КАК КлассУсловийТрудаПериод,
			 	|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений
			 	|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
			 	|ИЗ
			 	|	ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
			 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			 	|		ПО ВсеПозицииНаДатуАктуальности.Дата = ИсторияИспользованияШтатногоРасписания.Дата
			 	|			И ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			 	|			И (ИсторияИспользованияШтатногоРасписания.Используется)
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
			 	|		ПО ВсеПозицииНаДатуАктуальности.Период = ТерриториальныеУсловия.Период
			 	|			И (ВЫРАЗИТЬ(ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания КАК Справочник.ШтатноеРасписание).Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница)
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних КАК КлассыУсловийТрудаПоДолжностям
			 	|		ПО ВсеПозицииНаДатуАктуальности.Период = КлассыУсловийТрудаПоДолжностям.Период
			 	|			И ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = КлассыУсловийТрудаПоДолжностям.Должность
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
			 	|		ПО ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = МестоПозицииВСтруктуреПредприятия.Позиция
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииПерсоналаПоПозициям КАК КатегорииПерсоналаПоПозициям
			 	|		ПО ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = КатегорииПерсоналаПоПозициям.Позиция
			 	|{ГДЕ
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность.* КАК Должность,
			 	|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.*}
			 	|
			 	|ИНДЕКСИРОВАТЬ ПО
			 	|	Период,
			 	|	ПозицияШтатногоРасписания
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТТерриториальныеУсловияПФРСрезПоследних
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТМестоПозицииВСтруктуреПредприятия
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТКатегорииПерсоналаПоПозициям";
	Иначе
		
		ТекстЗапроса = ТекстЗапроса
			+	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 	|	ВсеПозицииНаДатуАктуальности.Период КАК Период,
			 	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
			 	|	ШтатноеРасписание.ДатаУтверждения КАК Дата,
			 	|	ВсеПозицииНаДатуАктуальности.СледующаяДата КАК СледующаяДата,
			 	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
			 	|	ШтатноеРасписание.ДатаУтверждения,
			 	|	ШтатноеРасписание.ДатаЗакрытия,
			 	|	ШтатноеРасписание.Наименование КАК Наименование,
			 	|	ШтатноеРасписание.КоличествоСтавок,
			 	|	ШтатноеРасписание.ГрафикРаботыСотрудников,
			 	|	ШтатноеРасписание.УсловияПриема,
			 	|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете,
			 	|	ШтатноеРасписание.ОтношениеКЕНВД,
			 	|	ШтатноеРасписание.СтатьяФинансирования,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ИСТИНА
			 	|			ТОГДА ШтатноеРасписание.ТарифнаяСетка
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ШтатноеРасписание.ТарифнаяСетка ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК ТарифнаяСетка,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = ИСТИНА
			 	|			ТОГДА ШтатноеРасписание.ТарифнаяСеткаНадбавки
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ШтатноеРасписание.ТарифнаяСеткаНадбавки ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК ТарифнаяСеткаНадбавки,
			 	|	ШтатноеРасписание.ФОТ,
			 	|	ШтатноеРасписание.ФОТМин,
			 	|	ШтатноеРасписание.ФОТМакс,
			 	|	ШтатноеРасписание.НадбавкаЗаВредностьРазмер,
			 	|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМин,
			 	|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс,
			 	|	ШтатноеРасписание.РайонныйКоэффициентРазмер,
			 	|	ШтатноеРасписание.РайонныйКоэффициентРазмерМин,
			 	|	ШтатноеРасписание.РайонныйКоэффициентРазмерМакс,
			 	|	ШтатноеРасписание.СевернаяНадбавкаРазмер,
			 	|	ШтатноеРасписание.СевернаяНадбавкаРазмерМин,
			 	|	ШтатноеРасписание.СевернаяНадбавкаРазмерМакс,
			 	|	ШтатноеРасписание.ОкладТариф,
			 	|	ШтатноеРасписание.ОкладТарифМин,
			 	|	ШтатноеРасписание.ОкладТарифМакс,
			 	|	ШтатноеРасписание.Владелец КАК Организация,
			 	|	ШтатноеРасписание.Подразделение КАК Подразделение,
			 	|	ШтатноеРасписание.Должность КАК Должность,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностей = ИСТИНА
			 	|			ТОГДА ШтатноеРасписание.РазрядКатегория
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ШтатноеРасписание.РазрядКатегория ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК РазрядКатегория,
			 	|	ВЫБОР
			 	|		КОГДА &ИспользоватьКвалификационнуюНадбавку
			 	|			ТОГДА ШтатноеРасписание.РазрядКатегорияНадбавки
			 	|		ИНАЧЕ ВЫБОР
			 	|				КОГДА ШтатноеРасписание.РазрядКатегорияНадбавки ЕСТЬ NULL 
			 	|					ТОГДА NULL
			 	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			 	|			КОНЕЦ
			 	|	КОНЕЦ КАК РазрядКатегорияНадбавки,
			 	|	ВЫБОР
			 	|		КОГДА ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
			 	|			ТОГДА ИСТИНА
			 	|		ИНАЧЕ ЛОЖЬ
			 	|	КОНЕЦ КАК ПрименятьСевернуюНадбавку,
			 	|	ВЫБОР
			 	|		КОГДА ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
			 	|			ТОГДА ШтатноеРасписание.Подразделение.ПроцентСевернойНадбавки
			 	|		ИНАЧЕ 0
			 	|	КОНЕЦ КАК ПроцентСевернойНадбавки,
			 	|	ШтатноеРасписание.Подразделение.РайонныйКоэффициент КАК РайонныйКоэффициент,
			 	|	ВЫБОР
			 	|		КОГДА НЕ &ИспользоватьНадбавкуЗаВредность
			 	|			ТОГДА ЛОЖЬ
			 	|		ИНАЧЕ ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность
			 	|	КОНЕЦ КАК ВыплачиваетсяНадбавкаЗаВредность,
			 	|	ВЫБОР
			 	|		КОГДА ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность
			 	|			ТОГДА ШтатноеРасписание.ПроцентНадбавкиЗаВредность
			 	|		ИНАЧЕ 0
			 	|	КОНЕЦ КАК ПроцентНадбавкиЗаВредность,
			 	|	ШтатноеРасписание.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
			 	|	ШтатноеРасписание.ОснованиеДосрочногоНазначенияПенсии,
			 	|	ШтатноеРасписание.ОсобыеУсловияТрудаПФР,
			 	|	ШтатноеРасписание.КодПозицииСпискаПФР,
			 	|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия,
				|	КатегорииПерсоналаПоПозициям.КатегорияПерсонала КАК КатегорияПерсонала,
			 	|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
			 	|	КлассыУсловийТрудаПоДолжностям.ПериодЗаписи КАК КлассУсловийТрудаПериод,
			 	|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений
			 	|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
			 	|ИЗ
			 	|	ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
			 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			 	|		ПО ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = ШтатноеРасписание.Ссылка
			 	|			И (ШтатноеРасписание.Утверждена)
			 	|			И ВсеПозицииНаДатуАктуальности.Период >= ШтатноеРасписание.ДатаУтверждения
			 	|			И (НЕ ШтатноеРасписание.Закрыта
			 	|				ИЛИ ВсеПозицииНаДатуАктуальности.Период < ШтатноеРасписание.ДатаЗакрытия)
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
			 	|		ПО ВсеПозицииНаДатуАктуальности.Период = ТерриториальныеУсловия.Период
			 	|			И (ВЫРАЗИТЬ(ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания КАК Справочник.ШтатноеРасписание).Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница)
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних КАК КлассыУсловийТрудаПоДолжностям
			 	|		ПО ВсеПозицииНаДатуАктуальности.Период = КлассыУсловийТрудаПоДолжностям.Период
			 	|			И ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = КлассыУсловийТрудаПоДолжностям.Должность
			 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
			 	|		ПО ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = МестоПозицииВСтруктуреПредприятия.Позиция
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииПерсоналаПоПозициям КАК КатегорииПерсоналаПоПозициям
			 	|		ПО ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания = КатегорииПерсоналаПоПозициям.Позиция
			 	|{ГДЕ
			 	|	ШтатноеРасписание.Владелец.* КАК Организация,
			 	|	ШтатноеРасписание.Подразделение.*,
			 	|	ШтатноеРасписание.Должность.*,
			 	|	ШтатноеРасписание.Ссылка.* КАК ПозицияШтатногоРасписания}
			 	|
			 	|ИНДЕКСИРОВАТЬ ПО
			 	|	Период,
			 	|	ПозицияШтатногоРасписания
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТТерриториальныеУсловияПФРСрезПоследних
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТМестоПозицииВСтруктуреПредприятия
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|УНИЧТОЖИТЬ ВТКатегорииПерсоналаПоПозициям";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеПозицииНаДатуАктуальности", ИмяВТОтбораПозиций);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВсеПозицииНаДатуАктуальности.Дата", "ВсеПозицииНаДатуАктуальности." + ИменаРеквизитовТаблицыОтбора.Дата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВсеПозицииНаДатуАктуальности.ПозицияШтатногоРасписания", "ВсеПозицииНаДатуАктуальности." + ИменаРеквизитовТаблицыОтбора.Позиция);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Если ПодобратьПоДатеАктуальности Тогда
		
		ТекстЗапроса =
			ТекстЗапроса
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "УНИЧТОЖИТЬ " + ИмяВТОтбораПозиций;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьЗапросВТПозицииШтатногоРасписания(Запрос, ИмяВТПозицииШтатногоРасписания, ИмяВТОтбораПозиций, ИменаРеквизитовТаблицыОтбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		Модуль.ДополнитьЗапросВТПозицииШтатногоРасписания(Запрос, ИмяВТПозицииШтатногоРасписания, ИменаРеквизитовТаблицыОтбора);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных позиции штатного расписания.

Функция ОписаниеПозицииШтатногоРасписания() Экспорт
	
	ДанныеПозиции = Новый Структура();
	ДанныеПозиции.Вставить("Дата", '00010101');
	ДанныеПозиции.Вставить("ДатаУтверждения", '00010101');
	ДанныеПозиции.Вставить("ДатаЗакрытия", '00010101');
	ДанныеПозиции.Вставить("СледующаяДата", '00010101');
	ДанныеПозиции.Вставить("ПозицияШтатногоРасписания");
	ДанныеПозиции.Вставить("Наименование", "");
	ДанныеПозиции.Вставить("Организация");
	ДанныеПозиции.Вставить("Подразделение");
	ДанныеПозиции.Вставить("МестоВСтруктуреПредприятия");
	ДанныеПозиции.Вставить("Должность");
	ДанныеПозиции.Вставить("РазрядКатегория");
	ДанныеПозиции.Вставить("РазрядКатегорияНадбавки");
	ДанныеПозиции.Вставить("ГрафикРаботыСотрудников");
	ДанныеПозиции.Вставить("КоличествоСтавок", 0);
	ДанныеПозиции.Вставить("ОкладТариф", 0);
	ДанныеПозиции.Вставить("ОкладТарифМин", 0);
	ДанныеПозиции.Вставить("ОкладТарифМакс", 0);
	ДанныеПозиции.Вставить("ФОТ", 0);
	ДанныеПозиции.Вставить("ФОТМин", 0);
	ДанныеПозиции.Вставить("ФОТМакс", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмер", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмерМин", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмерМакс", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмер", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмерМин", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмерМакс", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмер", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмерМин", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмерМакс", 0);
	ДанныеПозиции.Вставить("УсловияПриема", "");
	ДанныеПозиции.Вставить("Начисления", Новый Массив);
	ДанныеПозиции.Вставить("НезависимыеПоказатели", Новый Массив);
	ДанныеПозиции.Вставить("ЕжегодныеОтпуска", Новый Массив);
	ДанныеПозиции.Вставить("Специальности", Новый Массив);
	ДанныеПозиции.Вставить("ПрименятьСевернуюНадбавку", Ложь);
	ДанныеПозиции.Вставить("ПроцентСевернойНадбавки", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициент", 1);
	ДанныеПозиции.Вставить("СпособОтраженияЗарплатыВБухучете");
	ДанныеПозиции.Вставить("ОтношениеКЕНВД");
	ДанныеПозиции.Вставить("СтатьяФинансирования");
	ДанныеПозиции.Вставить("ТарифнаяСетка");
	ДанныеПозиции.Вставить("ТарифнаяСеткаНадбавки");
	ДанныеПозиции.Вставить("ВыплачиваетсяНадбавкаЗаВредность", Ложь);
	ДанныеПозиции.Вставить("ПроцентНадбавкиЗаВредность", 0);
	ДанныеПозиции.Вставить("ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
	ДанныеПозиции.Вставить("ОснованиеДосрочногоНазначенияПенсии");
	ДанныеПозиции.Вставить("ОсобыеУсловияТрудаПФР");
	ДанныеПозиции.Вставить("КодПозицииСпискаПФР");
	ДанныеПозиции.Вставить("КлассУсловийТруда");
	ДанныеПозиции.Вставить("КлассУсловийТрудаПериод");
	ДанныеПозиции.Вставить("КлассУсловийТрудаДатаРегистрацииИзменений");
	ДанныеПозиции.Вставить("КатегорияПерсонала");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		Модуль.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Возврат ДанныеПозиции;
	
КонецФункции

Функция ОписаниеНачисленияПозицииШтатногоРасписания() Экспорт
	
	СтруктураНачисления = Новый Структура;
	СтруктураНачисления.Вставить("ИдентификаторСтрокиВидаРасчета", 0);
	СтруктураНачисления.Вставить("Размер", 0);
	СтруктураНачисления.Вставить("РазмерМин", 0);
	СтруктураНачисления.Вставить("РазмерМакс", 0);
	СтруктураНачисления.Вставить("Начисление", ПланыВидовРасчета.Начисления.ПустаяСсылка());
	СтруктураНачисления.Вставить("Показатели", Новый Массив);
	Возврат СтруктураНачисления;
	
КонецФункции

Функция ОписаниеПоказателяШтатногоРасписания() Экспорт
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("ИдентификаторСтрокиВидаРасчета", 0);
	СтруктураПоказателя.Вставить("Значение", 0);
	СтруктураПоказателя.Вставить("ЗначениеМин", 0);
	СтруктураПоказателя.Вставить("ЗначениеМакс", 0);
	СтруктураПоказателя.Вставить("Показатель", Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка());
	Возврат СтруктураПоказателя;
	
КонецФункции

Функция ОписаниеЕжегодногоОтпускаПозицииШтатногоРасписания()
	
	СтруктураОтпуска = Новый Структура("КоличествоДнейВГод", 0);
	СтруктураОтпуска.Вставить("ВидЕжегодногоОтпуска", Справочники.ВидыОтпусков.ПустаяСсылка());
	Возврат СтруктураОтпуска;
	
КонецФункции

Функция ОписаниеСпециальностиПозицииШтатногоРасписания()
	
	СтруктураСпециальности = Новый Структура("Специальность", Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка());
	
	Возврат СтруктураСпециальности;

КонецФункции

Функция ДанныеПозицииШтатногоРасписания(Позиция, ДатаПозиции = '00010101', ЗаполнятьОписаниеНачислений = Истина, ПолноеОписаниеНачислений = Истина) Экспорт
	
	ДанныеПозиций = ДанныеПозицийШтатногоРасписания(Истина, Позиция, ДатаПозиции, ЗаполнятьОписаниеНачислений, ПолноеОписаниеНачислений);
	ДанныеПозиции = ДанныеПозиций.Получить(Позиция);
	
	Если ДанныеПозиции = Неопределено Тогда
		
		ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
		
		СвойстваПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Позиция, "Владелец,Подразделение,Должность,Наименование");
		
		ДанныеПозиции.ПозицияШтатногоРасписания = Позиция;
		ДанныеПозиции.Организация = СвойстваПозиции.Владелец;
		ДанныеПозиции.Подразделение = СвойстваПозиции.Подразделение;
		ДанныеПозиции.Должность = СвойстваПозиции.Должность;
		ДанныеПозиции.Наименование = СвойстваПозиции.Наименование;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			ДанныеПозиции.МестоВСтруктуреПредприятия = Модуль.МестоПозицииВСтруктуреПредприятия(Позиция);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПозиции;
	
КонецФункции

Функция ДанныеПозицийШтатногоРасписания(ТолькоРазрешенные, Позиции = Неопределено, ДатаАктуальности = '00010101', ЗаполнятьОписаниеНачислений = Истина, ПолноеОписаниеНачислений = Истина) Экспорт
	
	СоответствиеДанныхПозициям = Новый Соответствие;
	
	Если ТипЗнч(Позиции) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Позиции);
	Иначе
		СписокПозиций = Позиции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияПозиций = ПараметрыПолученияПозицийШтатногоРасписания();
	ПараметрыПолученияПозиций.ПозицииШтатногоРасписания = Позиции;
	ПараметрыПолученияПозиций.ДатаАктуальности = ДатаАктуальности;
	
	СоздатьВТПозицииШтатногоРасписания(ТолькоРазрешенные, Запрос.МенеджерВременныхТаблиц, "ВТПозицииШтатногоРасписания", ПараметрыПолученияПозиций);
	
	Запрос.Текст =
		"ВЫБРАТЬ Т.* ИЗ ВТПозицииШтатногоРасписания КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
		ЗаполнитьЗначенияСвойств(ДанныеПозиции, Выборка);
		СоответствиеДанныхПозициям.Вставить(Выборка.ПозицияШтатногоРасписания, ДанныеПозиции);
	КонецЦикла;
	
	Если СписокПозиций <> Неопределено Тогда
		
		ПозицииБезДанных = Новый Массив;
		Для каждого Позиция Из СписокПозиций Цикл
			
			Если СоответствиеДанныхПозициям.Получить(Позиция) = Неопределено Тогда
				ПозицииБезДанных.Добавить(Позиция);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПозицииБезДанных.Количество() > 0 Тогда
			
			СвойстваПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииБезДанных, "Владелец,Подразделение,Должность,Наименование");
			Для каждого Позиция Из ПозицииБезДанных Цикл
				
				ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
				
				СвойстваПозиции = СвойстваПозиций.Получить(Позиция);
				
				ДанныеПозиции.ПозицияШтатногоРасписания = Позиция;
				ДанныеПозиции.Организация = СвойстваПозиции.Владелец;
				ДанныеПозиции.Подразделение = СвойстваПозиции.Подразделение;
				ДанныеПозиции.Должность = СвойстваПозиции.Должность;
				ДанныеПозиции.Наименование = СвойстваПозиции.Наименование;
				
				СоответствиеДанныхПозициям.Вставить(Позиция, ДанныеПозиции);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьОписаниеНачислений Тогда
	
		ОписательВременныхТаблиц = ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
			Запрос.МенеджерВременныхТаблиц,
			"ВТПозицииШтатногоРасписания");
		
		// Начисления позиций
		
		СоздатьВТНачисленияПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц, "ВТНачисленияПозицийШтатногоРасписания", ПолноеОписаниеНачислений);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	НачисленияПозицийШтатногоРасписания.Размер КАК Размер,
			|	НачисленияПозицийШтатногоРасписания.РазмерМин КАК РазмерМин,
			|	НачисленияПозицийШтатногоРасписания.РазмерМакс КАК РазмерМакс,
			|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
			|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс,
			|	НачисленияПозицийШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания
			|ИТОГИ
			|	МАКСИМУМ(Размер),
			|	МАКСИМУМ(РазмерМин),
			|	МАКСИМУМ(РазмерМакс),
			|	МАКСИМУМ(ИдентификаторСтрокиВидаРасчета)
			|ПО
			|	ПозицияШтатногоРасписания,
			|	Начисление";
		
		ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
			
			ВыборкаПоНачислениям = ВыборкаПоПозициям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				СтруктураНачисления = ОписаниеНачисленияПозицииШтатногоРасписания();
				ЗаполнитьЗначенияСвойств(СтруктураНачисления, ВыборкаПоНачислениям);
				
				ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВыборкаПоНачислениям.Начисление);
				
				ВыборкаПоПоказателям = ВыборкаПоНачислениям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						
						ДобавитьПоказатель = Ложь;
						Для каждого СтруктураПоказателя Из ИнформацияОНачислении.Показатели Цикл
							
							Если СтруктураПоказателя.Показатель = ВыборкаПоПоказателям.Показатель Тогда
								ДобавитьПоказатель = СтруктураПоказателя.ЗапрашиватьПриВводе;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если НЕ ДобавитьПоказатель Тогда
							Продолжить;
						КонецЕсли;
						
						СтруктураПоказателя = ОписаниеПоказателяШтатногоРасписания();
						ЗаполнитьЗначенияСвойств(СтруктураПоказателя, ВыборкаПоПоказателям);
						СтруктураНачисления.Показатели.Добавить(СтруктураПоказателя);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеПозиции.Начисления.Добавить(СтруктураНачисления);
				
			КонецЦикла;
			
			СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
			
		КонецЦикла;
		
		// Независимые показатели позиций.
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
			|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс,
			|	НачисленияПозицийШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.Начисление = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
			|ИТОГИ ПО
			|	ПозицияШтатногоРасписания";
		
		ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
			
			ВыборкаПоПоказателям = ВыборкаПоПозициям.Выбрать();
			Пока ВыборкаПоПоказателям.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
					
					СтруктураПоказателя = ОписаниеПоказателяШтатногоРасписания();
					ЗаполнитьЗначенияСвойств(СтруктураПоказателя, ВыборкаПоПоказателям);
					ДанныеПозиции.НезависимыеПоказатели.Добавить(СтруктураПоказателя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
			
		КонецЦикла;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ДанныеУправленческихНачисленийПозицийШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ВТПозицииШтатногоРасписания", СоответствиеДанныхПозициям);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
		Запрос.МенеджерВременныхТаблиц,
		"ВТПозицииШтатногоРасписания");
	
	// Ежегодные отпуска позиций
	
	СоздатьВТЕжегодныеОтпускаПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.КоличествоДнейВГод КАК КоличествоДнейВГод
		|ИЗ
		|	ВТЕжегодныеОтпускаПозицийШтатногоРасписания КАК ЕжегодныеОтпускаПозицийШтатногоРасписания
		|ИТОГИ ПО
		|	ПозицияШтатногоРасписания";
	
	ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПозициям.Следующий() Цикл
		
		ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
		
		ВыборкаПоОтпускам = ВыборкаПоПозициям.Выбрать();
		Пока ВыборкаПоОтпускам.Следующий() Цикл
			
			СтруктураОтпуска = ОписаниеЕжегодногоОтпускаПозицииШтатногоРасписания();
			ЗаполнитьЗначенияСвойств(СтруктураОтпуска, ВыборкаПоОтпускам);
			ДанныеПозиции.ЕжегодныеОтпуска.Добавить(СтруктураОтпуска);
			
		КонецЦикла;
		
		СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
		
	КонецЦикла;
	
	// Специальности
	
	СоздатьВТСпециальностиПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпециальностиПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	СпециальностиПозицийШтатногоРасписания.Специальность КАК Специальность
		|ИЗ
		|	ВТСпециальностиПозицийШтатногоРасписания КАК СпециальностиПозицийШтатногоРасписания
		|ИТОГИ ПО
		|	ПозицияШтатногоРасписания";
	
	ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПозициям.Следующий() Цикл
		
		ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
		
		ВыборкаПоСпециальностям = ВыборкаПоПозициям.Выбрать();
		Пока ВыборкаПоСпециальностям.Следующий() Цикл
			
			СтруктураСпециальности = ОписаниеСпециальностиПозицииШтатногоРасписания();
			ЗаполнитьЗначенияСвойств(СтруктураСпециальности, ВыборкаПоСпециальностям);
			ДанныеПозиции.Специальности.Добавить(СтруктураСпециальности);
			
		КонецЦикла;
		
		СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
		
	КонецЦикла;
	
	Возврат СоответствиеДанныхПозициям;
	
КонецФункции

Функция ЗапросПредставленияШтатноеРасписание(ТолькоРазрешенные, ДатаАктуальности, ИмяВТПредставления_ШтатноеРасписание = "Представления_ШтатноеРасписание", ВключатьНачисления = Истина, ИмяВТОтбораПозицийШтатногоРасписания = "") Экспорт
	
	Если ВключатьНачисления Тогда
		ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписания";
	Иначе
		ИмяВТПозицииШтатногоРасписания = ИмяВТПредставления_ШтатноеРасписание;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяВТОтбораПозицийШтатногоРасписания) Тогда
		Запрос = ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяВТОтбораПозицийШтатногоРасписания, Истина);
	Иначе
		
		ПараметрыПолученияПозиций = УправлениеШтатнымРасписанием.ПараметрыПолученияПозицийШтатногоРасписания();
		ПараметрыПолученияПозиций.ДатаАктуальности = ДатаАктуальности;
		
		Запрос = УправлениеШтатнымРасписанием.ЗапросВТПозицииШтатногоРасписанияПоПараметрам(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ПараметрыПолученияПозиций);
		
	КонецЕсли;
	
	Если ВключатьНачисления Тогда
		
		ЗапросПоНачислениям = УправлениеШтатнымРасписанием.ЗапросВТНачисленияПозицийШтатногоРасписания(
			ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, "ВТНачисленияПозицийШтатногоРасписания", , Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросПоНачислениям);
		
		ТекстСводногоЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	ВЫБОР
			|		КОГДА НачисленияПозицийШтатногоРасписания.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТарифнаяСтавка
			|ПОМЕСТИТЬ ВТНачисленияСПризнакомТарифнойСтавки
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	МАКСИМУМ(ПоказателиЗависящиеОтСтажа.Показатель) КАК Показатель,
			|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
			|ПОМЕСТИТЬ ВТНачисленияСПоказателямиЗависящимиОтСтажа
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиЗависящиеОтСтажа
			|		ПО НачисленияПозицийШтатногоРасписания.Начисление = ПоказателиЗависящиеОтСтажа.Ссылка
			|			И (ПоказателиЗависящиеОтСтажа.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
			|		ПО (ПоказателиЗависящиеОтСтажа.Показатель = ШкалаОценкиСтажа.Ссылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПозицийШтатногоРасписания.Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	МИНИМУМ(ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания) КАК ЗначениеРеквизитаДопУпорядочивания
			|ПОМЕСТИТЬ ВТПорядокОсновныхНачислений
			|ИЗ
			|	ВТНачисленияСПризнакомТарифнойСтавки КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.ЭтоТарифнаяСтавка
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПозицийШтатногоРасписания.Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	ЗначениеРеквизитаДопУпорядочивания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияСПризнакомТарифнойСтавки.Период,
			|	НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияСПризнакомТарифнойСтавки.Начисление,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияСПризнакомТарифнойСтавки.ЭтоТарифнаяСтавка, ЛОЖЬ)
			|				И ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания = ПорядокОсновныхНачислений.ЗначениеРеквизитаДопУпорядочивания
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТарифнаяСтавка,
			|	ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.Показатель, НачисленияСПризнакомТарифнойСтавки.Начисление) КАК Показатель,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПокзатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.Размер
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК Размер,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПокзатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.РазмерМин
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК РазмерМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПокзатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.РазмерМакс
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК РазмерМакс,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL 
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК Значение,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL 
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.ЗначениеМин
			|		КОНЕЦ, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL 
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.ЗначениеМакс
			|		КОНЕЦ, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТНачисленияСПоказателями
			|ИЗ
			|	ВТНачисленияСПризнакомТарифнойСтавки КАК НачисленияСПризнакомТарифнойСтавки
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПокзатели
			|			ПО НачисленияПозицийШтатногоРасписания.Начисление = НачисленияПокзатели.Ссылка
			|				И (ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) = ЕСТЬNULL(НачисленияПокзатели.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)))
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = НачисленияПозицийШтатногоРасписания.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания
			|			И НачисленияСПризнакомТарифнойСтавки.Начисление = НачисленияПозицийШтатногоРасписания.Начисление}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокОсновныхНачислений КАК ПорядокОсновныхНачислений
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = ПорядокОсновныхНачислений.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = ПорядокОсновныхНачислений.ПозицияШтатногоРасписания
			|			И (ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания = ПорядокОсновныхНачислений.ЗначениеРеквизитаДопУпорядочивания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ПО НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиЗависящимиОтСтажа КАК НачисленияСПоказателямиЗависящимиОтСтажа
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = НачисленияСПоказателямиЗависящимиОтСтажа.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = НачисленияСПоказателямиЗависящимиОтСтажа.ПозицияШтатногоРасписания
			|			И НачисленияСПризнакомТарифнойСтавки.Начисление = НачисленияСПоказателямиЗависящимиОтСтажа.Начисление}
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.Период КАК Период,
			|	ПозицииШтатногоРасписания.Организация КАК Организация,
			|	ПозицииШтатногоРасписания.Подразделение КАК Подразделение,
			|	ПозицииШтатногоРасписания.Должность КАК Должность,
			|	ПозицииШтатногоРасписания.ТарифнаяСетка,
			|	ПозицииШтатногоРасписания.РазрядКатегория,
			|	ПозицииШтатногоРасписания.ТарифнаяСеткаНадбавки,
			|	ПозицииШтатногоРасписания.РазрядКатегорияНадбавки,
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ПозицииШтатногоРасписания.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
			|	ПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
			|	ПозицииШтатногоРасписания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	ПозицииШтатногоРасписания.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	ПозицииШтатногоРасписания.СтатьяФинансирования КАК СтатьяФинансирования,
			|	ЕСТЬNULL(НачисленияСПоказателями.Размер, 0) КАК ФОТ,
			|	ЕСТЬNULL(НачисленияСПоказателями.РазмерМин, 0) КАК ФОТМин,
			|	ЕСТЬNULL(НачисленияСПоказателями.РазмерМакс, 0) КАК ФОТМакс,
			|	ПозицииШтатногоРасписания.ОкладТариф КАК ОкладТариф,
			|	ПозицииШтатногоРасписания.ОкладТарифМин КАК ОкладТарифМин,
			|	ПозицииШтатногоРасписания.ОкладТарифМакс КАК ОкладТарифМакс,
			|	ПозицииШтатногоРасписания.ФОТ КАК ФОТПозиции,
			|	ПозицииШтатногоРасписания.ФОТМин КАК ФОТПозицииМин,
			|	ПозицииШтатногоРасписания.ФОТМакс КАК ФОТПозицииМакс,
			|	ПозицииШтатногоРасписания.РайонныйКоэффициент КАК РайонныйКоэффициент,
			|	ВЫБОР
			|		КОГДА ПозицииШтатногоРасписания.РайонныйКоэффициент > 1
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПрименятьРайонныйКоэффициент,
			|	ЕСТЬNULL(НачисленияСПоказателями.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК Начисление,
			|	ЕСТЬNULL(НачисленияСПоказателями.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЭтоТарифнаяСтавка, ЛОЖЬ) КАК ЭтоТарифнаяСтавка,
			|	ЕСТЬNULL(НачисленияСПоказателями.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЗначениеМин, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЗначениеМакс, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ Представления_ШтатноеРасписание
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателями КАК НачисленияСПоказателями
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = НачисленияСПоказателями.ПозицияШтатногоРасписания}
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПризнакомТарифнойСтавки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПоказателямиЗависящимиОтСтажа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПорядокОсновныхНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПоказателями";
		
		ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
		ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "Представления_ШтатноеРасписание", ИмяВТПредставления_ШтатноеРасписание);
		
		Если НЕ ТолькоРазрешенные Тогда
			ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли; 
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстСводногоЗапроса);
		
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками штатного расписания.

// Предназначена для получения настроек системы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиШтатногоРасписания() Экспорт
	
	НастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	НастройкиШтатногоРасписания.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиШтатногоРасписания, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания);
	
	Если НастройкиШтатногоРасписания.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	
	ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Записывает настройки штатного расписания и применяет к базе данных их изменение.
//
// Параметры:
//			Настройки - РегистрыСведений.НастройкиШтатногоРасписания.МенеджерЗаписи
//
Процедура ЗаписатьНастройкиШтатногоРасписания(Настройки) Экспорт
	
	ТекущиеНастройки = НастройкиШтатногоРасписания();
	
	ВключениеИспользованияШтатногоРасписания =
		Настройки.ИспользоватьШтатноеРасписание
		И ТекущиеНастройки.ИспользоватьШтатноеРасписание <> Настройки.ИспользоватьШтатноеРасписание;
		
	ВключениеИспользованияИсторииШтатногоРасписания =
		Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания
		И ТекущиеНастройки.ИспользоватьИсториюИзмененияШтатногоРасписания <> Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания;
		
	ОтключениеИспользованияИсторииШтатногоРасписания =
		НЕ Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания
		И ТекущиеНастройки.ИспользоватьИсториюИзмененияШтатногоРасписания <> Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания;
		
	Попытка
		
		Если ОтключениеИспользованияИсторииШтатногоРасписания Тогда
			ПеренестиСведенияОПозицияхВСправочник();
			Настройки.Записать();
		Иначе
			Настройки.Записать();
			ПрименитьИзменениеНастроекШтатногоРасписания(ВключениеИспользованияШтатногоРасписания, ВключениеИспользованияИсторииШтатногоРасписания);
		КонецЕсли;
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстИсключения = НСтр("ru = 'Не удалось применить изменение настроек использования штатного расписания.'") + " " + ОписаниеОшибки.Описание;
		
		ЗаполнитьЗначенияСвойств(Настройки, ТекущиеНастройки);
		Настройки.Записать();
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

Функция НастройкиШтатногоРасписанияПоУмолчанию() Экспорт 

	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьШтатноеРасписание", Истина);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьШтатноеРасписание", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьИсториюИзмененияШтатногоРасписания", Ложь);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьИсториюИзмененияШтатногоРасписания", Истина);
	ЗначенияПоУмолчанию.Вставить("ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьВилкуСтавокВШтатномРасписании", Ложь);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьВилкуСтавокВШтатномРасписании", Истина);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", Ложь);
	ЗначенияПоУмолчанию.Вставить("ПредставлениеТарифовИНадбавок", Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРублях);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьБронированиеПозиций", Истина);
	ЗначенияПоУмолчанию.Вставить("ДнейСохраненияБрони", 14);
	
	Возврат ЗначенияПоУмолчанию;

КонецФункции

Процедура ПрименитьИзменениеНастроекШтатногоРасписания(ВключениеИспользованияШтатногоРасписания, ВключениеИспользованияИсторииШтатногоРасписания)
	
	Если ВключениеИспользованияШтатногоРасписания Тогда
		
		// Создание недостающих позиций.
		СоздатьПозицииШтатногоРасписания(ВключениеИспользованияИсторииШтатногоРасписания);
		
		// Заполнение позиций в кадровых приказах.
		ЗаполнитьПозицииВКадровыхПриказах();
		
		// Заполнение движений регистров.
		ЗаполнитьПозицииВДвиженияхРегистров();
		
		// Обновление структуры справочника ШтатноеРасписание.
		Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоПодразделениям();

	КонецЕсли;
		
	Если ВключениеИспользованияИсторииШтатногоРасписания Тогда
		СоздатьУтверждениеШтатногоРасписания();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПозицииШтатногоРасписания(ВключениеИспользованияИстории)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчетРасширенный.СоздатьВТТекущаяКадроваяРасстановка(Запрос.МенеджерВременныхТаблиц);
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	МАКСИМУМ(КадроваяИсторияСотрудниковПредыдущиеСобытия.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПериодыПредыдущихСобытий
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПредыдущиеСобытия
		|		ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковПредыдущиеСобытия.Сотрудник
		|			И КадроваяИсторияСотрудников.Период > КадроваяИсторияСотрудниковПредыдущиеСобытия.Период
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность,
		|	КадроваяИсторияСотрудников.ВидЗанятости,
		|	КадроваяИсторияСотрудников.Период
		|ПОМЕСТИТЬ ВТСтавкиОсвобожденныеПеремещениями
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПредыдущихСобытий КАК ПериодыПредыдущихСобытий
		|		ПО КадроваяИсторияСотрудников.Период = ПериодыПредыдущихСобытий.ПериодПредыдущий
		|			И КадроваяИсторияСотрудников.Сотрудник = ПериодыПредыдущихСобытий.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА -КадроваяИсторияСотрудников.КоличествоСтавок
		|		ИНАЧЕ КадроваяИсторияСотрудников.КоличествоСтавок
		|	КОНЕЦ КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность,
		|	КадроваяИсторияСотрудников.ВидЗанятости,
		|	КадроваяИсторияСотрудников.Период
		|ПОМЕСТИТЬ ВТТаблицаКадровойИстории
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтавкиОсвобожденныеПеремещениями.Регистратор,
		|	СтавкиОсвобожденныеПеремещениями.Организация,
		|	СтавкиОсвобожденныеПеремещениями.Подразделение,
		|	СтавкиОсвобожденныеПеремещениями.ВидСобытия,
		|	СтавкиОсвобожденныеПеремещениями.ДолжностьПоШтатномуРасписанию,
		|	-СтавкиОсвобожденныеПеремещениями.КоличествоСтавок,
		|	СтавкиОсвобожденныеПеремещениями.Должность,
		|	СтавкиОсвобожденныеПеремещениями.ВидЗанятости,
		|	СтавкиОсвобожденныеПеремещениями.Период
		|ИЗ
		|	ВТСтавкиОсвобожденныеПеремещениями КАК СтавкиОсвобожденныеПеремещениями";
		
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКадровойИстории.Подразделение,
		|	ТаблицаКадровойИстории.Должность
		|ПОМЕСТИТЬ ВТНедостающиеПозицииПоПодразделениямИДолжностям
		|ИЗ
		|	ВТТаблицаКадровойИстории КАК ТаблицаКадровойИстории
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаКадровойИстории.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаКадровойИстории.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаКадровойИстории.Должность = ШтатноеРасписание.Должность
		|ГДЕ
		|	ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКадровойИстории.Организация КАК Организация,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Должность,
		|	СУММА(ТаблицаКадровойИстории.КоличествоСтавок) КАК КоличествоСтавок,
		|	ИСТИНА КАК Утверждена,
		|	МИНИМУМ(ТаблицаКадровойИстории.Период) КАК ДатаУтверждения,
		|	ВЫБОР
		|		КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Закрыта,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL 
		|				ТОГДА ТаблицаКадровойИстории.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаЗакрытия,
		|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) КАК ГрафикРаботыСотрудников,
		|	МИНИМУМ(ЕСТЬNULL(ШтатноеРасписание.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))) КАК Позиция
		|ПОМЕСТИТЬ ВТСоздаваемыеПозицииПредварительно
		|ИЗ
		|	ВТНедостающиеПозицииПоПодразделениямИДолжностям КАК НедостающиеПозицииПоПодразделениямИДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаКадровойИстории КАК ТаблицаКадровойИстории
		|		ПО НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение = ТаблицаКадровойИстории.Подразделение
		|			И НедостающиеПозицииПоПодразделениямИДолжностям.Должность = ТаблицаКадровойИстории.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущаяКадроваяРасстановка КАК ТекущаяКадроваяРасстановка
		|		ПО НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение = ТекущаяКадроваяРасстановка.Подразделение
		|			И НедостающиеПозицииПоПодразделениямИДолжностям.Должность = ТекущаяКадроваяРасстановка.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение = ШтатноеРасписание.Подразделение
		|			И НедостающиеПозицииПоПодразделениямИДолжностям.Должность = ШтатноеРасписание.Должность
		|
		|СГРУППИРОВАТЬ ПО
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Должность,
		|	ТаблицаКадровойИстории.Организация,
		|	ВЫБОР
		|		КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоздаваемыеПозицииПредварительно.Организация КАК Организация,
		|	СоздаваемыеПозицииПредварительно.Подразделение,
		|	СоздаваемыеПозицииПредварительно.Должность,
		|	Должности.ТарифнаяСетка КАК ТарифнаяСетка,
		|	Должности.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
		|	Должности.РазрядКатегория КАК РазрядКатегория,
		|	Должности.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
		|	Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией КАК ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	Должности.ОснованиеДосрочногоНазначенияПенсии КАК ОснованиеДосрочногоНазначенияПенсии,
		|	Должности.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР,
		|	Должности.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность,
		|	Должности.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
		|	Должности.КоличествоДнейДополнительногоОтпускаВГод КАК КоличествоДнейДополнительногоОтпускаВГод,
		|	Должности.КодПозицииСпискаПФР КАК КодПозицииСпискаПФР,
		|	СоздаваемыеПозицииПредварительно.КоличествоСтавок КАК КоличествоСтавок,
		|	СоздаваемыеПозицииПредварительно.Утверждена,
		|	СоздаваемыеПозицииПредварительно.ДатаУтверждения,
		|	СоздаваемыеПозицииПредварительно.Закрыта,
		|	СоздаваемыеПозицииПредварительно.ДатаЗакрытия,
		|	СоздаваемыеПозицииПредварительно.ГрафикРаботыСотрудников,
		|	СоздаваемыеПозицииПредварительно.Позиция
		|ИЗ
		|	ВТСоздаваемыеПозицииПредварительно КАК СоздаваемыеПозицииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|		ПО СоздаваемыеПозицииПредварительно.Должность = Должности.Ссылка
		|ГДЕ
		|	СоздаваемыеПозицииПредварительно.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|	И СоздаваемыеПозицииПредварительно.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СоздаваемыеПозицииПредварительно.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И СоздаваемыеПозицииПредварительно.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|ИТОГИ ПО
		|	Организация";
	
	СоответствиеПозицийОрганизациям = Новый Соответствие;
	ДолжностиПозицийШтатногоРасписания = Новый Соответствие;
	
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		СозданныеПозиции = Новый Массив;
		
		Выборка = ВыборкаПоОрганизациям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
			ПозицияОбъект.Владелец = Выборка.Организация;
			ПозицияОбъект.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				Выборка.Подразделение, Выборка.Должность);
			ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
			ПозицияОбъект.Записать();
			
			ДолжностиПозиций = ДолжностиПозицийШтатногоРасписания.Получить(ПозицияОбъект.Должность);
			Если ДолжностиПозиций = Неопределено Тогда
				
				ДолжностиПозиций = Новый Массив;
				ДолжностиПозицийШтатногоРасписания.Вставить(ПозицияОбъект.Должность, ДолжностиПозиций);
				
			КонецЕсли;
			
			ДолжностиПозиций.Добавить(ПозицияОбъект.Ссылка);
			
			Если НЕ ПозицияОбъект.Закрыта Тогда
				СозданныеПозиции.Добавить(ПозицияОбъект.Ссылка);
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если СозданныеПозиции.Количество() > 0 Тогда
			СоответствиеПозицийОрганизациям.Вставить(ВыборкаПоОрганизациям.Организация, СозданныеПозиции);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ВключениеИспользованияИстории Тогда
		
		Для каждого СоответствиеПозицийОрганизации Из СоответствиеПозицийОрганизациям Цикл
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Позиции", СоответствиеПозицийОрганизации.Значение);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ДанныеДляЗаполнения.Подразделение,
				|	ДанныеДляЗаполнения.Должность,
				|	ДанныеДляЗаполнения.Ссылка КАК ИдентификаторСтрокиПозиции
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ДанныеДляЗаполнения
				|ГДЕ
				|	ДанныеДляЗаполнения.Ссылка В(&Позиции)";
			
			ДанныеДляПолученияКадровыхДанных = Запрос.Выполнить().Выгрузить();
			
			ДанныеДляЗаполнения = ТекущиеКадровыеДанныеПозиций(
				СоответствиеПозицийОрганизации.Ключ, ДанныеДляПолученияКадровыхДанных, ТекущаяДатаСеанса());
			
			Для каждого ДанныеПозиции Из ДанныеДляЗаполнения Цикл
				
				ПозицияОбъект = ДанныеПозиции.Ключ.ПолучитьОбъект();
				ИдентификаторСтрокиВидаРасчета = 1;
				
				Для каждого ДанныеНачисления Из ДанныеПозиции.Значение.Начисления Цикл
					
					СтрокаНовогоНачисления = ПозицияОбъект.Начисления.Добавить();
					СтрокаНовогоНачисления.Начисление = ДанныеНачисления.Начисление;
					СтрокаНовогоНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Для каждого ДанныеПоказателя Из ДанныеНачисления.Показатели Цикл
						
						СтрокаНовогоПоказателя = ПозицияОбъект.Показатели.Добавить();
						СтрокаНовогоПоказателя.Показатель = ДанныеПоказателя.Показатель;
						
						Если ДанныеПоказателя.Свойство("Значение") Тогда
							СтрокаНовогоПоказателя.Значение = ДанныеПоказателя.Значение;
						КонецЕсли; 
						
						Если ДанныеПоказателя.Свойство("МинимальноеЗначение") Тогда
							СтрокаНовогоПоказателя.ЗначениеМин = ДанныеПоказателя.МинимальноеЗначение;
						КонецЕсли; 
						
						Если ДанныеПоказателя.Свойство("МаксимальноеЗначение") Тогда
							СтрокаНовогоПоказателя.ЗначениеМакс = ДанныеПоказателя.МаксимальноеЗначение;
						КонецЕсли; 
						
						СтрокаНовогоПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
						
					КонецЦикла;
					
					ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
					
				КонецЦикла;
				
				Для каждого ДанныеОтпуска Из ДанныеПозиции.Значение.ЕжегодныеОтпуска Цикл
					
					НоваяСтрокаОтпуска = ПозицияОбъект.ЕжегодныеОтпуска.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтпуска, ДанныеОтпуска);
					
				КонецЦикла;
				
				Для каждого ДанныеСпециальности Из ДанныеПозиции.Значение.Специальности Цикл
					
					НоваяСтрокаСпециальности = ПозицияОбъект.Специальности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, ДанныеСпециальности);
					
				КонецЦикла;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
				ПозицияОбъект.Записать();
				
			КонецЦикла;
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	НЕОПРЕДЕЛЕНО КАК Действие,
				|	ШтатноеРасписание.Ссылка КАК Позиция,
				|	ШтатноеРасписание.Владелец КАК Организация,
				|	ШтатноеРасписание.Подразделение,
				|	ШтатноеРасписание.Должность,
				|	ШтатноеРасписание.ГрафикРаботыСотрудников,
				|	ШтатноеРасписание.ОкладТариф,
				|	ШтатноеРасписание.ОкладТарифМин,
				|	ШтатноеРасписание.ОкладТарифМакс,
				|	ШтатноеРасписание.ФОТ,
				|	ШтатноеРасписание.ФОТМин,
				|	ШтатноеРасписание.ФОТМакс,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмер,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМин,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмер,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмерМин,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмерМакс,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмер,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмерМин,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмерМакс,
				|	ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность,
				|	ШтатноеРасписание.ПроцентНадбавкиЗаВредность
				|ПОМЕСТИТЬ ВТПозицииПредварительно
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|ГДЕ
				|	ШтатноеРасписание.Ссылка В(&РассчитываемыеСсылки)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПозицииПредварительноМеньшие.Позиция) КАК ИдентификаторСтрокиПозиции,
				|	ПозицииПредварительно.Действие,
				|	ПозицииПредварительно.Позиция,
				|	ПозицииПредварительно.Организация,
				|	ПозицииПредварительно.Подразделение,
				|	ПозицииПредварительно.Должность,
				|	ПозицииПредварительно.ГрафикРаботыСотрудников,
				|	ПозицииПредварительно.ОкладТариф,
				|	ПозицииПредварительно.ОкладТарифМин,
				|	ПозицииПредварительно.ОкладТарифМакс,
				|	ПозицииПредварительно.ФОТ,
				|	ПозицииПредварительно.ФОТМин,
				|	ПозицииПредварительно.ФОТМакс,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмер,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМин,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМакс,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмер,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМин,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМакс,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмер,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМин,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМакс,
				|	ПозицииПредварительно.ВыплачиваетсяНадбавкаЗаВредность,
				|	ПозицииПредварительно.ПроцентНадбавкиЗаВредность
				|ПОМЕСТИТЬ ВТПозиции
				|ИЗ
				|	ВТПозицииПредварительно КАК ПозицииПредварительно
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииПредварительно КАК ПозицииПредварительноМеньшие
				|		ПО ПозицииПредварительно.Позиция > ПозицииПредварительноМеньшие.Позиция
				|
				|СГРУППИРОВАТЬ ПО
				|	ПозицииПредварительно.Действие,
				|	ПозицииПредварительно.Позиция,
				|	ПозицииПредварительно.Организация,
				|	ПозицииПредварительно.Подразделение,
				|	ПозицииПредварительно.Должность,
				|	ПозицииПредварительно.ГрафикРаботыСотрудников,
				|	ПозицииПредварительно.ОкладТариф,
				|	ПозицииПредварительно.ОкладТарифМин,
				|	ПозицииПредварительно.ОкладТарифМакс,
				|	ПозицииПредварительно.ФОТ,
				|	ПозицииПредварительно.ФОТМин,
				|	ПозицииПредварительно.ФОТМакс,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмер,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМин,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМакс,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмер,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМин,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМакс,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмер,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМин,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМакс,
				|	ПозицииПредварительно.ВыплачиваетсяНадбавкаЗаВредность,
				|	ПозицииПредварительно.ПроцентНадбавкиЗаВредность
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции,
				|	Позиции.Действие,
				|	Позиции.Позиция,
				|	Позиции.Организация,
				|	Позиции.Подразделение,
				|	Позиции.Должность,
				|	Позиции.ГрафикРаботыСотрудников,
				|	Позиции.ОкладТариф,
				|	Позиции.ОкладТарифМин,
				|	Позиции.ОкладТарифМакс,
				|	Позиции.ФОТ,
				|	Позиции.ФОТМин,
				|	Позиции.ФОТМакс,
				|	Позиции.НадбавкаЗаВредностьРазмер,
				|	Позиции.НадбавкаЗаВредностьРазмерМин,
				|	Позиции.НадбавкаЗаВредностьРазмерМакс,
				|	Позиции.РайонныйКоэффициентРазмер,
				|	Позиции.РайонныйКоэффициентРазмерМин,
				|	Позиции.РайонныйКоэффициентРазмерМакс,
				|	Позиции.СевернаяНадбавкаРазмер,
				|	Позиции.СевернаяНадбавкаРазмерМин,
				|	Позиции.СевернаяНадбавкаРазмерМакс,
				|	Позиции.ВыплачиваетсяНадбавкаЗаВредность,
				|	Позиции.ПроцентНадбавкиЗаВредность
				|ИЗ
				|	ВТПозиции КАК Позиции
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
				|	ШтатноеРасписаниеНачисления.Начисление,
				|	ШтатноеРасписаниеНачисления.ИдентификаторСтрокиВидаРасчета,
				|	НЕОПРЕДЕЛЕНО КАК Действие,
				|	ШтатноеРасписаниеНачисления.Размер,
				|	ШтатноеРасписаниеНачисления.РазмерМин,
				|	ШтатноеРасписаниеНачисления.РазмерМакс
				|ИЗ
				|	Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
				|		ПО ШтатноеРасписаниеНачисления.Ссылка = Позиции.Позиция
				|ГДЕ
				|	ШтатноеРасписаниеНачисления.Ссылка В(&РассчитываемыеСсылки)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
				|	ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета,
				|	ШтатноеРасписаниеПоказатели.Показатель,
				|	ШтатноеРасписаниеПоказатели.Значение,
				|	ШтатноеРасписаниеПоказатели.ЗначениеМин,
				|	ШтатноеРасписаниеПоказатели.ЗначениеМакс
				|ИЗ
				|	Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
				|		ПО ШтатноеРасписаниеПоказатели.Ссылка = Позиции.Позиция
				|ГДЕ
				|	ШтатноеРасписаниеПоказатели.Ссылка В(&РассчитываемыеСсылки)";
			
			Запрос.УстановитьПараметр("РассчитываемыеСсылки", ДанныеДляПолученияКадровыхДанных.ВыгрузитьКолонку("ИдентификаторСтрокиПозиции"));
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ОписаниеПозиций = Новый Структура;
			ОписаниеПозиций.Вставить("Организация", СоответствиеПозицийОрганизации.Ключ);
			ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ТекущаяДатаСеанса());
			ОписаниеПозиций.Вставить("Позиции", РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выгрузить());
			ОписаниеПозиций.Вставить("Начисления", РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить());
			ОписаниеПозиций.Вставить("Показатели", РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить());
			
			РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
			
			Для каждого СтруктураПозиции Из ОписаниеПозиций.Позиции Цикл
				
				ПозицияОбъект = СтруктураПозиции.Позиция.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ПозицияОбъект, СтруктураПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
				
				СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтруктураПозиции.ИдентификаторСтрокиПозиции));
				Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
					СтрокиПозиции = ПозицияОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", СтрокаНачислений.Начисление));
					Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
						ЗаполнитьЗначенияСвойств(СтрокаПозиции, СтрокаНачислений, "Размер,РазмерМин,РазмерМакс");
					КонецЦикла;
				КонецЦикла;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
				ПозицияОбъект.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДолжностиПозицийШтатногоРасписания.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СписокДолжностей", ОбщегоНазначения.ВыгрузитьКолонку(ДолжностиПозицийШтатногоРасписания, "Ключ"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
			|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность,
			|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
			|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений
			|ИЗ
			|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
			|ГДЕ
			|	КлассыУсловийТрудаПоДолжностям.Должность В(&СписокДолжностей)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Должность,
			|	Период";
		
		ВыборкаРегистра = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРегистра.СледующийПоЗначениюПоля("Должность") Цикл
			
			ТаблицаРегистра = Новый ТаблицаЗначений;
			ТаблицаРегистра.Колонки.Добавить("Период");
			ТаблицаРегистра.Колонки.Добавить("Должность");
			ТаблицаРегистра.Колонки.Добавить("КлассУсловийТруда");
			ТаблицаРегистра.Колонки.Добавить("ДатаРегистрацииИзменений");
			
			Пока ВыборкаРегистра.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаРегистра.Добавить(), ВыборкаРегистра);
			КонецЦикла;
			
			Если ТаблицаРегистра.Количество() > 0 Тогда
				
				ПозицииДолжности = ДолжностиПозицийШтатногоРасписания.Получить(ВыборкаРегистра.Должность);
				Для каждого ПозицияДолжности Из ПозицииДолжности Цикл
					
					НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Должность.Установить(ПозицияДолжности);
					
					Для каждого СтрокаТаблицыРегистра Из ТаблицаРегистра Цикл
						
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыРегистра);
						Запись.Должность = ПозицияДолжности;
						
					КонецЦикла;
					
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВКадровыхПриказах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Документы.Ссылка,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка) КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	Документ.ИзменениеПлановыхНачислений КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаИзменения >= ШтатноеРасписание.ДатаУтверждения
		|			И (ШтатноеРасписание.Утверждена)
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.КадровыйПеревод КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
		|			И (ШтатноеРасписание.Утверждена)
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.ПереводКДругомуРаботодателю КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|			И (ШтатноеРасписание.Утверждена)
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.ПриемНаРаботу КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|			И (ШтатноеРасписание.Утверждена)
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка";

		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		
		Запрос.Текст = 	Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" 
			+ "ВЫБРАТЬ
			|	Документы.Ссылка,
			|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
			|ИЗ
			|	Документ.НазначениеПодработки КАК Документы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО Документы.Организация = ШтатноеРасписание.Владелец
			|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
			|			И Документы.Должность = ШтатноеРасписание.Должность
			|			И Документы.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
			|			И (ШтатноеРасписание.Утверждена)
			|ГДЕ
			|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	Документы.Ссылка";
		
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДолжностьПоШтатномуРасписанию = Выборка.ДолжностьПоШтатномуРасписанию;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При заполнении позиций в кадровых приказах не удалось записать %1, этот документ необходимо обработать в ручном режиме.'"),
					ДокументОбъект.Ссылка);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект.Ссылка);
					
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.НомерСтроки,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка) КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.Ссылка.Месяц >= ШтатноеРасписание.ДатаУтверждения
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка,
		|	Документы.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.НомерСтроки,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Ссылка.ОрганизацияНовая = ШтатноеРасписание.Владелец
		|			И Документы.Ссылка.ПодразделениеНовое = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.Ссылка.ДатаПеремещения >= ШтатноеРасписание.ДатаУтверждения
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка,
		|	Документы.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.НомерСтроки,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка,
		|	Документы.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.НомерСтроки,
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка)
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Документы.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И Документы.Подразделение = ШтатноеРасписание.Подразделение
		|			И Документы.Должность = ШтатноеРасписание.Должность
		|			И Документы.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
		|ГДЕ
		|	Документы.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы.Ссылка,
		|	Документы.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			
			ВыборкаПоНомерамСтрок = ВыборкаПоДокументам.Выбрать();
			Пока ВыборкаПоНомерамСтрок.Следующий() Цикл
				
				СтрокаДокумента = ДокументОбъект.Сотрудники.Найти(ВыборкаПоНомерамСтрок.НомерСТроки, "НомерСтроки");
				Если СтрокаДокумента <> Неопределено Тогда
					СтрокаДокумента.ДолжностьПоШтатномуРасписанию = ВыборкаПоНомерамСтрок.ДолжностьПоШтатномуРасписанию;
				КонецЕсли;
			
			КонецЦикла;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При заполнении позиций в кадровых приказах не удалось записать %1, этот документ необходимо обработать в ручном режиме.'"),
					ДокументОбъект.Ссылка);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект.Ссылка);
					
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ЗаполнитьПозицииВКадровыхПриказах(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВДвиженияхРегистров()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Восстановление движений по регистру сведений КадроваяИсторияСотрудников.
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|	И КадроваяИсторияСотрудников.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(Позиции.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))
		|			ИНАЧЕ КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
		|		КОНЕЦ) КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность,
		|	КадроваяИсторияСотрудников.ВидЗанятости,
		|	КадроваяИсторияСотрудников.ДействуетДо,
		|	КадроваяИсторияСотрудников.ВидДоговора,
		|	КадроваяИсторияСотрудников.ГоловнойСотрудник,
		|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК Позиции
		|		ПО КадроваяИсторияСотрудников.Подразделение = Позиции.Подразделение
		|			И КадроваяИсторияСотрудников.Должность = Позиции.Должность
		|			И КадроваяИсторияСотрудников.Период >= Позиции.ДатаУтверждения
		|			И (НЕ Позиции.ЭтоГруппа)
		|			И (Позиции.Утверждена)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИсторияСотрудников.Регистратор = Регистраторы.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность,
		|	КадроваяИсторияСотрудников.ВидЗанятости,
		|	КадроваяИсторияСотрудников.ДействуетДо,
		|	КадроваяИсторияСотрудников.ВидДоговора,
		|	КадроваяИсторияСотрудников.ГоловнойСотрудник,
		|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|ИТОГИ ПО
		|	Регистратор";
		
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
		Пока ВыборкаПоЗаписям.Следующий() Цикл
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоЗаписям);
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Восстановление движений по интервальному регистру КадроваяИсторияСотрудников 
	ЗарплатаКадрыПериодическиеРегистры.ОбновитьРесурсыИнтервальногоРегистра("КадроваяИсторияСотрудников");
	
	// Заполнение текущей должности по штатному расписанию.
	ЗаполнитьТекущуюДолжностьПоШтатномуРасписанию();
	
	// Заполнение данных для подбора сотрудников
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников();
	
	// Восстановление движений по регистру накопления ЗанятыеПозицииШтатногоРасписания.
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИстория.Период,
		|	КадроваяИстория.Сотрудник,
		|	МАКСИМУМ(КадроваяИсторияПредыдущая.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТМаксимальныеПредыдущиеПериоды
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИстория
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияПредыдущая
		|		ПО КадроваяИстория.Сотрудник = КадроваяИсторияПредыдущая.Сотрудник
		|			И КадроваяИстория.Период > КадроваяИсторияПредыдущая.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИстория.Регистратор = Регистраторы.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИстория.Период,
		|	КадроваяИстория.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИстория.Регистратор КАК Регистратор,
		|	КадроваяИстория.Период КАК ДатаСобытия,
		|	КадроваяИстория.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадроваяИстория.ВидСобытия,
		|	КадроваяИстория.КоличествоСтавок,
		|	КадроваяИстория.Сотрудник,
		|	КадроваяИстория.ДействуетДо,
		|	КадроваяИсторияПредыдущая.ДолжностьПоШтатномуРасписанию КАК ТекущаяПозиция,
		|	КадроваяИсторияПредыдущая.КоличествоСтавок КАК ТекущееКоличествоСтавок
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИстория
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальныеПредыдущиеПериоды КАК МаксимальныеПредыдущиеПериоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияПредыдущая
		|			ПО МаксимальныеПредыдущиеПериоды.ПериодПредыдущий = КадроваяИсторияПредыдущая.Период
		|				И МаксимальныеПредыдущиеПериоды.Сотрудник = КадроваяИсторияПредыдущая.Сотрудник
		|		ПО КадроваяИстория.Период = МаксимальныеПредыдущиеПериоды.Период
		|			И КадроваяИстория.Сотрудник = МаксимальныеПредыдущиеПериоды.Сотрудник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИстория.Регистратор = Регистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|ИТОГИ ПО
		|	Регистратор";
		
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		ДокументОбъект = ВыборкаПоРегистраторам.Регистратор.ПолучитьОбъект();
		ДвиженияПоРегистру = ДокументОбъект.Движения.Найти("ЗанятыеПозицииШтатногоРасписания");
		
		Если ДвиженияПоРегистру <> Неопределено Тогда
			
			Выборка = ВыборкаПоРегистраторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				КадровыйУчетРасширенный.ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(ДокументОбъект.Движения, Выборка, Истина);
			КонецЦикла;
			
			ДвиженияПоРегистру.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДвиженияПоРегистру.ОбменДанными.Загрузка = Истина;
			ДвиженияПоРегистру.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьУтверждениеШтатногоРасписания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания КАК УтверждениеШтатногоРасписания
		|		ПО Организации.Ссылка = УтверждениеШтатногоРасписания.Организация
		|			И (УтверждениеШтатногоРасписания.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания КАК ИзменениеШтатногоРасписания
		|		ПО Организации.Ссылка = ИзменениеШтатногоРасписания.Организация
		|			И (ИзменениеШтатногоРасписания.Проведен)
		|ГДЕ
		|	УтверждениеШтатногоРасписания.Ссылка ЕСТЬ NULL 
		|	И ИзменениеШтатногоРасписания.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Организация,
		|	МИНИМУМ(ШтатноеРасписание.ДатаУтверждения) КАК ДатаУтверждения
		|ПОМЕСТИТЬ ВТОрганизацииПериоды
		|ИЗ
		|	ВТОрганизации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Организации.Организация = ШтатноеРасписание.Владелец
		|			И (НЕ ШтатноеРасписание.Закрыта)
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииПериоды.Организация,
		|	НАЧАЛОПЕРИОДА(ОрганизацииПериоды.ДатаУтверждения, МЕСЯЦ) КАК МесяцВступленияВСилу
		|ИЗ
		|	ВТОрганизацииПериоды КАК ОрганизацииПериоды";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументУтверждение = Документы.УтверждениеШтатногоРасписания.СоздатьДокумент();
		ДокументУтверждение.Организация = Выборка.Организация;
		ДокументУтверждение.Ответственный = Пользователи.ТекущийПользователь();
		
		ЗаполнитьПодписантовДокумента(ДокументУтверждение,
			?(ЗначениеЗаполнено(Выборка.МесяцВступленияВСилу), Выборка.МесяцВступленияВСилу, КонецМесяца(ТекущаяДатаСеанса()) + 1));
		
		ПараметрыВыполнения = Новый Структура("Организация,Подразделение,ДатаВступленияВСилу");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ДокументУтверждение);
		ПараметрыВыполнения.ДатаВступленияВСилу = ТекущаяДатаСеанса();
		
		ДокументУтверждение.АвтозаполнениеТекущимиДаннымиШР();
		
		ПараметрыВыполнения.Вставить("Позиции", ДокументУтверждение.Позиции.Выгрузить());
		ПараметрыВыполнения.Вставить("Начисления", ДокументУтверждение.Начисления.Выгрузить());
		ПараметрыВыполнения.Вставить("Показатели", ДокументУтверждение.Показатели.Выгрузить());
		ПараметрыВыполнения.Вставить("ЕжегодныеОтпуска", ДокументУтверждение.ЕжегодныеОтпуска.Выгрузить());
		ПараметрыВыполнения.Вставить("Специальности", ДокументУтверждение.Специальности.Выгрузить());
		
		ДанныеЗаполнения = РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения);
		
		ЗаполнитьДокументПоДаннымЗаполнения(ДокументУтверждение, ДанныеЗаполнения);
		
		Если НЕ ЗначениеЗаполнено(Выборка.МесяцВступленияВСилу) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	КадроваяИсторияСотрудников.Период КАК Период
				|ИЗ
				|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
				|ГДЕ
				|	КадроваяИсторияСотрудников.Организация = &Организация
				|	И КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию В(&ДолжностьПоШтатномуРасписанию)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период";
				
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
			Запрос.УстановитьПараметр("ДолжностьПоШтатномуРасписанию", ДокументУтверждение.Позиции);
			
			ВыборкаПоРаннимДатам = Запрос.Выполнить().Выбрать();
			Если ВыборкаПоРаннимДатам.Следующий() Тогда
				ДокументУтверждение.МесяцВступленияВСилу = НачалоМесяца(ВыборкаПоРаннимДатам.Период);
			Иначе
				ДокументУтверждение.МесяцВступленияВСилу = НачалоМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
			
		Иначе
			ДокументУтверждение.МесяцВступленияВСилу = Выборка.МесяцВступленияВСилу;
		КонецЕсли; 
		
		ДокументУтверждение.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ДокументУтверждение.Дата = ДокументУтверждение.МесяцВступленияВСилу;
		
		Если ДокументУтверждение.Позиции.Количество() > 0 Тогда
			ДокументУтверждение.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПеренестиСведенияОПозицияхВСправочник()
	
	ДанныеПозиций = ДанныеПозицийШтатногоРасписания(Ложь, , ТекущаяДатаСеанса(), , Ложь);
	
	Для каждого ОписаниеПозиции Из ДанныеПозиций Цикл
		
		ПозицияОбъект = ОписаниеПозиции.Ключ.ПолучитьОбъект();
		
		ЗаполнитьОбъектСправочникаСведениямиОПозиции(ПозицияОбъект, ОписаниеПозиции);
		
		ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
		ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
		ПозицияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектСправочникаСведениямиОПозиции(ПозицияОбъект, ОписанияПозиции)
	
	ЗаполнитьЗначенияСвойств(ПозицияОбъект, ОписанияПозиции.Значение, , "Подразделение,Должность,Начисления,ЕжегодныеОтпуска,Специальности");
	
	// Сведения о начислениях
	Начисления = ПозицияОбъект.Начисления;
	Начисления.Очистить();
	
	Показатели = ПозицияОбъект.Показатели;
	Показатели.Очистить();
	
	Для каждого ОписаниеНачисления Из ОписанияПозиции.Значение.Начисления Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), ОписаниеНачисления);
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
			ЗаполнитьЗначенияСвойств(Показатели.Добавить(), ОписаниеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	// Сведения о независимых показателях.
	Для каждого ОписаниеПоказателя Из ОписанияПозиции.Значение.НезависимыеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Показатели.Добавить(), ОписаниеПоказателя);
	КонецЦикла;
	
	// Ежегодные отпуска
	ЕжегодныеОтпуска = ПозицияОбъект.ЕжегодныеОтпуска;
	ЕжегодныеОтпуска.Очистить();
	Для каждого ОписаниеОтпуска Из ОписанияПозиции.Значение.ЕжегодныеОтпуска Цикл
		ЗаполнитьЗначенияСвойств(ЕжегодныеОтпуска.Добавить(), ОписаниеОтпуска);
	КонецЦикла;
	
	// Специальности
	Специальности = ПозицияОбъект.Специальности;
	Специальности.Очистить();
	Для каждого ОписаниеСпециальности Из ОписанияПозиции.Значение.Специальности Цикл
		ЗаполнитьЗначенияСвойств(Специальности.Добавить(), ОписаниеСпециальности);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьОтчетовПоШтатномуРасписанию(Настройки) Экспорт
	
	// Варианты отчетов для функциональной опции "ИспользоватьВилкуСтавокВШтатномРасписании".
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписание, "АнализШтатногоРасписанияИспользуетсяВилкаСтавок");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "ШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "НачисленияПозицийШтатногоРасписанияИспользуетсяВилкаСтавок");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьВилкуСтавокВШтатномРасписании");

	// Варианты отчетов для функциональной опции "НеИспользоватьВилкуСтавокВШтатномРасписании".
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписание, "АнализШтатногоРасписания");
	Вариант.ФункциональныеОпции.Добавить("НеИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "ШтатноеРасписаниеКроссТаблица");
	Вариант.ФункциональныеОпции.Добавить("НеИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "НачисленияПозицийШтатногоРасписания");
	Вариант.ФункциональныеОпции.Добавить("НеИспользоватьВилкуСтавокВШтатномРасписании");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчета ФОТ позиций штатного расписания.

Процедура РассчитатьФОТВФормеСОднойПозицией(Форма, ДанныеПозиции, Знач Организация, Знач ДатаРасчета, Знач ОписаниеТаблицыВидовРасчета, СохранитьИтоговыеЗначения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаРасчета) Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	ПересчетТолькоЗависимыхНачислений = Ложь;
	Если Форма.НачисленияФиксРасчет <> Неопределено Тогда
		
		СоответствиеФиксРасчет = Новый Соответствие(Форма.НачисленияФиксРасчет);
		ПересчетТолькоЗависимыхНачислений = СоответствиеФиксРасчет.Количество() > 0;
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(КоллекцияПозиций.Добавить(), ДанныеПозиции);
	
	// Начисления с показателями
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеНачислений, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	Для каждого СтрокаНачислений Из ДанныеНачислений Цикл
		
		Если СтрокаНачислений.Свойство("Действие")
			И СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
			Если Модуль.НачислениеДополняетФОТРегламентированныхНачислений(Форма, СтрокаНачислений.Начисление) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		
		Если ИнфоОВидеРасчета.Рассчитывается Тогда
			Размер = СтрокаНачислений.Размер;
			РазмерМин = СтрокаНачислений.РазмерМин;
			РазмерМакс = СтрокаНачислений.РазмерМакс;
		Иначе
			Если СтрокаНачислений.Свойство("Значение1") Тогда
				Размер = СтрокаНачислений.Значение1;
				РазмерМин = СтрокаНачислений.Значение1;
				РазмерМакс = СтрокаНачислений.Значение1;
			ИначеЕсли СтрокаНачислений.Свойство("МинимальноеЗначение1") И СтрокаНачислений.Свойство("МаксимальноеЗначение1") Тогда 
				Размер = СтрокаНачислений.МаксимальноеЗначение1;
				РазмерМин = СтрокаНачислений.МинимальноеЗначение1;
				РазмерМакс = СтрокаНачислений.МаксимальноеЗначение1;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеНачисления = КоллекцияНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеНачисления, СтрокаНачислений);
		
		ОписаниеНачисления.Размер = Размер;
		ОписаниеНачисления.РазмерМин = РазмерМин;
		ОписаниеНачисления.РазмерМакс = РазмерМакс;
		
		Если ПересчетТолькоЗависимыхНачислений
			И (СоответствиеФиксРасчет.Получить(СтрокаНачислений.Начисление) = Истина
				ИЛИ Не ИнфоОВидеРасчета.ТребуетсяРасчетБазы) Тогда
				
			ОписаниеНачисления.ФиксРасчет = Истина;
			
		КонецЕсли; 
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
			Если НЕ ЗначениеЗаполнено(Показатель) Тогда
				Прервать;
			КонецЕсли; 
			
			ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
			ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = ОписаниеНачисления.ИдентификаторСтрокиВидаРасчета;
			ОписаниеПоказателя.Показатель = Показатель;
			
			ПутьКЗначению = "Значение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.Значение = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
			ПутьКЗначению = "МинимальноеЗначение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.ЗначениеМин = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
			ПутьКЗначению = "МаксимальноеЗначение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.ЗначениеМакс = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Доп. тарифы коэффициенты
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей);
	СтрокиДопПоказателей = ДанныеПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	Для каждого СтрокаПоказателя Из СтрокиДопПоказателей Цикл
		
		ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
		ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = 0;
		ОписаниеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			
		ПутьКЗначению = "Значение";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.Значение = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли; 
		
		ПутьКЗначению = "ЗначениеМин";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.ЗначениеМин = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли; 
		
		ПутьКЗначению = "ЗначениеМакс";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.ЗначениеМакс = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаРасчета);
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Если СохранитьИтоговыеЗначения Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПозиции, ОписаниеПозиций.Позиции[0], СвойстваПозицииСРезультатамиРасчетаФОТ());
	КонецЕсли;
	
	Для каждого РассчитанноеНачисление Из ОписаниеПозиций.Начисления Цикл
		
		СтрокиНачислений = ДанныеНачислений.НайтиСтроки(Новый Структура("Начисление", РассчитанноеНачисление.Начисление));
		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, РассчитанноеНачисление, "Размер,РазмерМин,РазмерМакс");
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.НачисленияФиксРасчет = Неопределено;
	
КонецПроцедуры

Процедура РассчитатьФОТНесколькихПозиций(ОписаниеПозиций) Экспорт
	
	Организация = ОписаниеПозиций.Организация;
	ДатаРасчета = ОписаниеПозиций.ДатаВступленияВСилу;
	
	ТаблицаПозиций = ОписаниеПозиций.Позиции.Скопировать();
	ТаблицаПозиций.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("СотрудникМин", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("СотрудникМакс", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	СоответствиеПозицийСотрудникам = Новый Соответствие;
	СоответствиеПозицийСотрудникамМин = Новый Соответствие;
	СоответствиеПозицийСотрудникамМакс = Новый Соответствие;
	
	Для каждого СтрокаТаблицаПозиций Из ТаблицаПозиций Цикл
		
		СтрокаТаблицаПозиций.Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
		СтрокаТаблицаПозиций.СотрудникМин = Справочники.Сотрудники.ПолучитьСсылку();
		СтрокаТаблицаПозиций.СотрудникМакс = Справочники.Сотрудники.ПолучитьСсылку();
		
		СтрокаТаблицаПозиций.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
		СоответствиеПозицийСотрудникам.Вставить(СтрокаТаблицаПозиций.Сотрудник, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		СоответствиеПозицийСотрудникамМин.Вставить(СтрокаТаблицаПозиций.СотрудникМин, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		СоответствиеПозицийСотрудникамМакс.Вставить(СтрокаТаблицаПозиций.СотрудникМакс, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("Позиции", ТаблицаПозиций);
	
	ТаблицаНачислений = ОписаниеПозиций.Начисления.Скопировать();
	Если ТаблицаНачислений.Колонки.Найти("ФиксРасчет") = Неопределено Тогда
		ТаблицаНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачислений);
	
	Запрос.УстановитьПараметр("Показатели", ОписаниеПозиций.Показатели.Скопировать());
	
	Запрос.УстановитьПараметр("ИспользоватьВилкуСтавокВШтатномРасписании", ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании"));
	
	ВРНадбавкаЗаВредность = НачисленияНадбавкаЗаВредность();
	Запрос.УстановитьПараметр("ВРНадбавкаЗаВредность", ВРНадбавкаЗаВредность);
	Запрос.УстановитьПараметр("ПоказательПроцентНадбавкиЗаВредность", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
	
	ВРРайонныйКоэффициент = Неопределено;
	НачисленияВРРайонныйКоэффициент = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Если НачисленияВРРайонныйКоэффициент.Количество() > 0 Тогда
		ВРРайонныйКоэффициент = НачисленияВРРайонныйКоэффициент[0];
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВРРайонныйКоэффициент", ВРРайонныйКоэффициент);
	Запрос.УстановитьПараметр("ПоказательРайонныйКоэффициент", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	
	ВРСевернаяНабавка = РасчетЗарплаты.НачислениеСевернаяНадбавка();
	Запрос.УстановитьПараметр("ВРСевернаяНадбавка", ВРСевернаяНабавка);
	Запрос.УстановитьПараметр("ПоказательПроцентСевернойНадбавки", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("НормаДнейПоГрафикуПолногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));

	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("НормаЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	
	Запрос.УстановитьПараметр("НачисленияВходящиеВФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаРасчета КАК Период,
		|	ПозицииДокумента.Позиция,
		|	ПозицииДокумента.ИдентификаторСтрокиПозиции,
		|	&Организация КАК Организация,
		|	ПозицииДокумента.Должность,
		|	ПозицииДокумента.Подразделение КАК СтруктурнаяЕдиница,
		|	ВЫРАЗИТЬ(ПозицииДокумента.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	ПозицииДокумента.ГрафикРаботыСотрудников КАК ГрафикРаботы,
		|	ПозицииДокумента.ОкладТариф,
		|	ПозицииДокумента.ОкладТарифМин,
		|	ПозицииДокумента.ОкладТарифМакс,
		|	ПозицииДокумента.ФОТ,
		|	ПозицииДокумента.ФОТМин,
		|	ПозицииДокумента.ФОТМакс,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмер,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмерМин,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмерМакс,
		|	ПозицииДокумента.РайонныйКоэффициентРазмер,
		|	ПозицииДокумента.РайонныйКоэффициентРазмерМин,
		|	ПозицииДокумента.РайонныйКоэффициентРазмерМакс,
		|	ПозицииДокумента.СевернаяНадбавкаРазмер,
		|	ПозицииДокумента.СевернаяНадбавкаРазмерМин,
		|	ПозицииДокумента.СевернаяНадбавкаРазмерМакс,
		|	ПозицииДокумента.ВыплачиваетсяНадбавкаЗаВредность,
		|	ПозицииДокумента.ПроцентНадбавкиЗаВредность,
		|	ПозицииДокумента.Сотрудник,
		|	ПозицииДокумента.СотрудникМин,
		|	ПозицииДокумента.СотрудникМакс,
		|	ПозицииДокумента.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПозицииПредварительно
		|ИЗ
		|	&Позиции КАК ПозицииДокумента";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"СтруктурнаяЕдиница"));
			
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"Организация"),
		,
		"ВТЗначенияПериодическихПоказателейОрганизаций");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"Подразделение"),
		,
		"ВТЗначенияПериодическихПоказателейПодразделений");
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Позиции.Период,
		|	Позиции.Позиция,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.Организация,
		|	Позиции.Должность,
		|	Позиции.Подразделение,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТариф,
		|	Позиции.ОкладТарифМин,
		|	Позиции.ОкладТарифМакс,
		|	Позиции.ФОТ,
		|	Позиции.ФОТМин,
		|	Позиции.ФОТМакс,
		|	Позиции.НадбавкаЗаВредностьРазмер,
		|	Позиции.НадбавкаЗаВредностьРазмерМин,
		|	Позиции.НадбавкаЗаВредностьРазмерМакс,
		|	Позиции.РайонныйКоэффициентРазмер,
		|	Позиции.РайонныйКоэффициентРазмерМин,
		|	Позиции.РайонныйКоэффициентРазмерМакс,
		|	Позиции.СевернаяНадбавкаРазмер,
		|	Позиции.СевернаяНадбавкаРазмерМин,
		|	Позиции.СевернаяНадбавкаРазмерМакс,
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность,
		|	Позиции.Сотрудник,
		|	Позиции.СотрудникМин,
		|	Позиции.СотрудникМакс,
		|	Позиции.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Позиции.Подразделение.РайонныйКоэффициент > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПрименятьРайонныйКоэффициент,
		|	ВЫБОР
		|		КОГДА ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПрименятьСевернуюНадбавку
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	ВТПозицииПредварительно КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
		|		ПО Позиции.Период = ТерриториальныеУсловия.Период
		|			И Позиции.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов) КАК СреднемесячноеЧислоЧасов,
		|	ЕСТЬNULL(СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней) КАК СреднемесячноеЧислоДней,
		|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНорма,
		|	ВЫБОР
		|		КОГДА НЕ ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели ЕСТЬ NULL 
		|				И НЕ ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели ЕСТЬ NULL 
		|			ТОГДА ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ДоляНеполногоРабочегоВремени
		|ПОМЕСТИТЬ ВТСреднемесячныеЗначенияНормыВремени
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = ГОД(&ДатаРасчета))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников
		|		ПО (ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.ГрафикРаботыСотрудников)
		|			И (СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.Год = ГОД(&ДатаРасчета))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПозиций.ИдентификаторСтрокиПозиции,
		|	НачисленияПозиций.ИдентификаторСтрокиВидаРасчета,
		|	ВЫРАЗИТЬ(НачисленияПозиций.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	НачисленияПозиций.Размер,
		|	НачисленияПозиций.РазмерМин,
		|	НачисленияПозиций.РазмерМакс,
		|	НачисленияПозиций.ФиксРасчет
		|ПОМЕСТИТЬ ВТНачисленияПредварительно
		|ИЗ
		|	&Начисления КАК НачисленияПозиций
		|ГДЕ
		|	НачисленияПозиций.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|	И НачисленияПозиций.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПозиций.ИдентификаторСтрокиПозиции,
		|	НачисленияПозиций.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПозиций.Начисление,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Размер,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.РазмерМин
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерМин,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.РазмерМакс
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерМакс,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.ФиксРасчет
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФиксРасчет,
		|	ЕСТЬNULL(НачисленияСПоказателямиТарифныхСтавок.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательТарифнойСтавки
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПредварительно КАК НачисленияПозиций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияСПоказателямиТарифныхСтавок
		|		ПО НачисленияПозиций.Начисление = НачисленияСПоказателямиТарифныхСтавок.Начисление
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100002,
		|	&ВРНадбавкаЗаВредность,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ВРНадбавкаЗаВредность <> НЕОПРЕДЕЛЕНО
		|	И &ВРНадбавкаЗаВредность В (&НачисленияВходящиеВФОТ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100000,
		|	&ВРРайонныйКоэффициент,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ВРРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|	И &ВРРайонныйКоэффициент В (&НачисленияВходящиеВФОТ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100001,
		|	&ВРСевернаяНадбавка,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ВРСевернаяНадбавка <> НЕОПРЕДЕЛЕНО
		|	И &ВРСевернаяНадбавка В (&НачисленияВходящиеВФОТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиНачислений.ИдентификаторСтрокиПозиции,
		|	ПоказателиНачислений.ИдентификаторСтрокиВидаРасчета,
		|	ПоказателиНачислений.Показатель,
		|	ПоказателиНачислений.Значение,
		|	ПоказателиНачислений.ЗначениеМин,
		|	ПоказателиНачислений.ЗначениеМакс
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК ПоказателиНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка КАК Показатель,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
		|ПОМЕСТИТЬ ВТПоказателиЗависящиеОтСтажа
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
		|ГДЕ
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Позиции.Позиция КАК Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация,
		|	Позиции.Подразделение,
		|	Позиции.Сотрудник,
		|	Позиции.ФизическоеЛицо,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТариф,
		|	Позиции.ФОТ,
		|	Позиции.РайонныйКоэффициентРазмер,
		|	Позиции.СевернаяНадбавкаРазмер,
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	Начисления.Размер,
		|	Начисления.ФиксРасчет,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоМакс,
		|	Начисления.ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмер
		|ПОМЕСТИТЬ ВТПолныйСписокПозицийСНачислениями
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация,
		|	Позиции.Подразделение,
		|	Позиции.СотрудникМин,
		|	Позиции.ФизическоеЛицо,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТарифМин,
		|	Позиции.ФОТМин,
		|	Позиции.РайонныйКоэффициентРазмерМин,
		|	Позиции.СевернаяНадбавкаРазмерМин,
		|	Начисления.Начисление,
		|	Начисления.РазмерМин,
		|	Начисления.ФиксРасчет,
		|	ЛОЖЬ,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмерМин
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация,
		|	Позиции.Подразделение,
		|	Позиции.СотрудникМакс,
		|	Позиции.ФизическоеЛицо,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТарифМакс,
		|	Позиции.ФОТМакс,
		|	Позиции.РайонныйКоэффициентРазмерМакс,
		|	Позиции.СевернаяНадбавкаРазмерМакс,
		|	Начисления.Начисление,
		|	Начисления.РазмерМакс,
		|	Начисления.ФиксРасчет,
		|	ИСТИНА,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмерМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПолныйСписокПозицийСНачислениями.Сотрудник,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПолныйСписокПозицийСНачислениями.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|				ТОГДА ПолныйСписокПозицийСНачислениями.Начисление.РеквизитДопУпорядочивания
		|			ИНАЧЕ 99999
		|		КОНЕЦ) КАК Порядок,
		|	ПолныйСписокПозицийСНачислениями.РасчетПоМакс,
		|	ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТМинимальныйПорядокОсновныхНачислений
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|
		|СГРУППИРОВАТЬ ПО
		|	ПолныйСписокПозицийСНачислениями.Сотрудник,
		|	ПолныйСписокПозицийСНачислениями.РасчетПоМакс,
		|	ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолныйСписокПозицийСНачислениями.Сотрудник КАК Сотрудник,
		|	Показатели.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ПолныйСписокПозицийСНачислениями.РасчетПоМакс = ИСТИНА
		|			ТОГДА Показатели.ЗначениеМакс
		|		КОГДА ПолныйСписокПозицийСНачислениями.РасчетПоМакс = ЛОЖЬ
		|			ТОГДА Показатели.ЗначениеМин
		|		ИНАЧЕ Показатели.Значение
		|	КОНЕЦ КАК Значение
		|ПОМЕСТИТЬ ВТВсеПоказатели
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции = Показатели.ИдентификаторСтрокиПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНорма, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНорма, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНорма, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЕСТЬNULL(Показатели.Значение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТариф,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = ИСТИНА
		|				ТОГДА ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТарифМакс,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = ЛОЖЬ
		|				ТОГДА ЕСТЬNULL(Показатели.ЗначениеМин, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТарифМин
		|ИЗ
		|	ВТМинимальныйПорядокОсновныхНачислений КАК МинимальныйПорядокОсновныхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|			ПО Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|				И Начисления.ИдентификаторСтрокиПозиции = Показатели.ИдентификаторСтрокиПозиции
		|				И Начисления.ПоказательТарифнойСтавки = Показатели.Показатель
		|		ПО МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|			И МинимальныйПорядокОсновныхНачислений.Порядок = Начисления.Начисление.РеквизитДопУпорядочивания
		|
		|СГРУППИРОВАТЬ ПО
		|	МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПоказатели.Сотрудник,
		|	ВсеПоказатели.Показатель,
		|	ВсеПоказатели.Значение
		|ИЗ
		|	ВТВсеПоказатели КАК ВсеПоказатели
		|ГДЕ
		|	ВсеПоказатели.Показатель <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ВсеПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеПоказатели.Сотрудник,
		|	ВсеПоказатели.Показатель,
		|	ВсеПоказатели.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолныйСписокПозицийСНачислениями.Организация,
		|	ПолныйСписокПозицийСНачислениями.Подразделение,
		|	ПолныйСписокПозицийСНачислениями.Сотрудник КАК Сотрудник,
		|	ПолныйСписокПозицийСНачислениями.ФизическоеЛицо,
		|	ПолныйСписокПозицийСНачислениями.ГрафикРаботы,
		|	ПолныйСписокПозицийСНачислениями.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРНадбавкаЗаВредность
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРРайонныйКоэффициент
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРСевернаяНадбавка
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ ПолныйСписокПозицийСНачислениями.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА ИСТИНА
		|		КОГДА ПолныйСписокПозицийСНачислениями.Размер = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ПолныйСписокПозицийСНачислениями.ФиксРасчет
		|	КОНЕЦ КАК ФиксРасчет,
		|	ИСТИНА КАК ФиксРасчетВремени,
		|	0 КАК ИдентификаторСтрокиВидаРасчета,
		|	0 КАК Значение1,
		|	ПолныйСписокПозицийСНачислениями.Размер КАК Результат,
		|	НАЧАЛОПЕРИОДА(&ДатаРасчета, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ) КАК ДатаОкончания,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК НормаДнейПоГрафикуПолногоРабочегоВремени
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ПолныйСписокПозицийСНачислениями.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Начисление";
	
	ТекстЗапросовПоказателей = "";
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ТекстЗапросовПоказателей = ТекстЗапросовПоказателей + Символы.ПС + "0 КАК Значение" + НомерПоказателя + ",";
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК Значение1,", СокрЛП(ТекстЗапросовПоказателей));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОкладов = РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выгрузить();
	Для каждого СтрокаТаблицаОкладов Из ТаблицаОкладов Цикл
		НайденныеСтрокиПозиций = ОписаниеПозиций.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаТаблицаОкладов.ИдентификаторСтрокиПозиции));
		Для каждого НайденнаяСтрока Из НайденныеСтрокиПозиций Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицаОкладов, "ОкладТариф,ОкладТарифМакс,ОкладТарифМин");
		КонецЦикла;
	КонецЦикла;
	
	ИзвестныеЗначенияПоказателей = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
	
	// Получение таблицы начислений со всеми показателями.
	РассчитываемаяТаблица = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	Выборка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РассчитываемаяТаблица.Добавить(), Выборка);
	КонецЦикла;
	
	// Заполним результат не рассчитываемых начислений.
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ОписаниеПозиций.Начисления, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	ЗначенияРеквизитаРассчитывается = Новый Соответствие;
	Если МассивНачислений.Количество() > 0 Тогда 
		ЗначенияРеквизитаРассчитывается = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНачислений, "Рассчитывается");
	КонецЕсли;
	
	Для Каждого РассчитаннаяСтрока Из РассчитываемаяТаблица Цикл
		
		НачислениеРассчитывается = ЗначенияРеквизитаРассчитывается[РассчитаннаяСтрока.Начисление];
		Если НачислениеРассчитывается = Ложь Тогда 
			
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(РассчитаннаяСтрока.Начисление);
			
			Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].Размер;
					КонецЕсли;
				КонецЕсли;
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникамМин.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].РазмерМин;
					КонецЕсли;
				КонецЕсли;
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникамМакс.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].РазмерМакс;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Расчет ФОТ
	ДанныеПлановыхНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ИзвестныеПоказатели = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	Для Каждого СтрокаТаблицаПозиций Из ТаблицаПозиций Цикл

		СтрокаКадровыеДанные = КадровыеДанные.Добавить();   		
		СтрокаКадровыеДанные.Период = ДатаРасчета;
		СтрокаКадровыеДанные.Сотрудник = СтрокаТаблицаПозиций.Сотрудник;
		СтрокаКадровыеДанные.Организация = Организация;
		СтрокаКадровыеДанные.Подразделение = СтрокаТаблицаПозиций.Подразделение;
		СтрокаКадровыеДанные.ГрафикРаботы = СтрокаТаблицаПозиций.ГрафикРаботыСотрудников;  
								
	КонецЦикла;
	
	Для Каждого СтрокаНачисления Из РассчитываемаяТаблица Цикл
			
		СтрокаДанныеПлановыхНачислений = ДанныеПлановыхНачислений.Добавить();
		СтрокаДанныеПлановыхНачислений.Период = ДатаРасчета;
		СтрокаДанныеПлановыхНачислений.Сотрудник = СтрокаНачисления.Сотрудник;
		СтрокаДанныеПлановыхНачислений.ГоловнаяОрганизация = Организация;
		СтрокаДанныеПлановыхНачислений.Начисление = СтрокаНачисления.Начисление;
		СтрокаДанныеПлановыхНачислений.Размер = СтрокаНачисления.Результат;
	
	КонецЦикла;  

	Для Каждого СтрокаПоказатели Из ИзвестныеЗначенияПоказателей Цикл
		
		СтрокаИзвестныеПоказатели = ИзвестныеПоказатели.Добавить();
		СтрокаИзвестныеПоказатели.Период = ДатаРасчета;
		СтрокаИзвестныеПоказатели.Сотрудник = СтрокаПоказатели.Сотрудник;
		СтрокаИзвестныеПоказатели.ГоловнаяОрганизация = Организация;
		СтрокаИзвестныеПоказатели.Показатель = СтрокаПоказатели.Показатель;
		СтрокаИзвестныеПоказатели.Значение = СтрокаПоказатели.Значение;
		
	КонецЦикла;		

	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ДанныеПлановыхНачислений, ИзвестныеПоказатели, КадровыеДанные);
			
	УстановитьПривилегированныйРежим(Ложь);
	
	СоответствиеФОТПозиции = Новый Соответствие;
	СоответствиеФОТПозицииМин = Новый Соответствие;
	СоответствиеФОТПозицииМакс = Новый Соответствие;
	
	Для каждого СтрокаРассчитываемаяТаблица Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "Размер", СоответствиеПозицийСотрудникам, СоответствиеФОТПозиции);
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "РазмерМин", СоответствиеПозицийСотрудникамМин, СоответствиеФОТПозицииМин);
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "РазмерМакс", СоответствиеПозицийСотрудникамМакс, СоответствиеФОТПозицииМакс);
		
	КонецЦикла;
	
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозиции, "ФОТ");
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозицииМин, "ФОТМин");
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозицииМакс, "ФОТМакс");
	
	СтрокиНадбавкиЗаВредность = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРНадбавкаЗаВредность));
	Для каждого СтрокаНадбавкиЗаВредность Из СтрокиНадбавкиЗаВредность Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникам, "НадбавкаЗаВредностьРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникамМин, "НадбавкаЗаВредностьРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникамМакс, "НадбавкаЗаВредностьРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
	СтрокиРайонногоКоэффициента = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРРайонныйКоэффициент));
	Для каждого СтрокаСРайоннымКоэффициентом Из СтрокиРайонногоКоэффициента Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникам, "РайонныйКоэффициентРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникамМин, "РайонныйКоэффициентРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникамМакс, "РайонныйКоэффициентРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
	СтрокиСевернойНадбавки = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРСевернаяНабавка));
	Для каждого СтрокаСевернойНадбавкой Из СтрокиСевернойНадбавки Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникам, "СевернаяНадбавкаРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникамМин, "СевернаяНадбавкаРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникамМакс, "СевернаяНадбавкаРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(ТЧПозиции, СтрокаСНачислением, СоответствиеПозицийСотрудникам, ИдентификаторКолонкиРазмер, ИдентификаторКолонкиФОТ, ПерезаполнитьРазмер = Истина)
	
	ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(СтрокаСНачислением.Сотрудник);
	СтрокиПозиции = ТЧПозиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции));
	Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
		Если ПерезаполнитьРазмер Тогда
			СтрокаПозиции[ИдентификаторКолонкиРазмер] = СтрокаСНачислением.ВкладВФОТ;
		КонецЕсли; 
		СтрокаПозиции[ИдентификаторКолонкиФОТ] = СтрокаПозиции[ИдентификаторКолонкиФОТ] + СтрокаПозиции[ИдентификаторКолонкиРазмер];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРазмерСтрокНачислений(ТЧНачисления, РассчитаннаяСтрока, ИдентификаторКолонкиРазмер, СоответствиеПозицийСотрудникам, СоответствиеФОТПозиции)
	
	ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(РассчитаннаяСтрока.Сотрудник);
	Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
		СтрокиНачислений = ТЧНачисления.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрокаНачислений Из СтрокиНачислений Цикл
			
			НайденнаяСтрокаНачислений[ИдентификаторКолонкиРазмер] = РассчитаннаяСтрока.ВкладВФОТ;
			
			ЗначениеФОТ = СоответствиеФОТПозиции.Получить(ИдентификаторСтрокиПозиции);
			Если ЗначениеФОТ = Неопределено Тогда
				ЗначениеФОТ = 0;
			КонецЕсли; 
			
			СоответствиеФОТПозиции.Вставить(ИдентификаторСтрокиПозиции, ЗначениеФОТ + НайденнаяСтрокаНачислений[ИдентификаторКолонкиРазмер]);
			
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьФОТНесколькихПозиций(ТЧПозиции, СоответствиеФОТПозиции, ИдентификаторКолонкиФОТ)
	
	Для каждого ЭлементСоответствия Из СоответствиеФОТПозиции Цикл
		
		СтрокиПозиции = ТЧПозиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ЭлементСоответствия.Ключ));
		Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
			СтрокаПозиции[ИдентификаторКолонкиФОТ] = ЭлементСоответствия.Значение;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ИтогФОТПоРеквизиту(ТаблицаНачислений, ИмяРеквизита)
	
	ИтогФОТ = 0;
	
	Для каждого СтрокаТаблицаНачислений Из ТаблицаНачислений Цикл
		
		Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаНачислений.Колонки.Найти("Действие") <> Неопределено
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицаНачислений.Свойство("Действие")
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицаНачислений.Начисление);
		Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
			ИтогФОТ = ИтогФОТ + СтрокаТаблицаНачислений[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтогФОТ;
	
КонецФункции

Процедура РассчитатьИтогиФОТПоПозиции(Форма, ДанныеТекущейПозиции, ТаблицаНачислений, ОписаниеТаблицыНачислений) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		ДанныеТекущейПозиции.ФОТМин =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМин")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМин
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМин
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМин;
		
		ДанныеТекущейПозиции.ФОТМакс =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМакс")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМакс
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМакс
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМакс;
		
		ДанныеТекущейПозиции.ФОТ = ДанныеТекущейПозиции.ФОТМакс;
		
	Иначе
		
		ДанныеТекущейПозиции.ФОТ =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "Размер")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмер
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмер
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмер;
		
		ДанныеТекущейПозиции.ФОТМин = ДанныеТекущейПозиции.ФОТ;
		ДанныеТекущейПозиции.ФОТМакс = ДанныеТекущейПозиции.ФОТ;
		
	КонецЕсли;

	Для каждого СтрокаТаблицаНачислений Из ТаблицаНачислений Цикл
		
		Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаНачислений.Колонки.Найти("Действие") <> Неопределено
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицаНачислений.Свойство("Действие")
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		ИнформацияОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицаНачислений.Начисление);
		Если (ИнформацияОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы
			ИЛИ ИнформацияОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)
			И ИнформацияОВидеРасчета.ЗачетНормыВремени Тогда
			
			Для каждого ОписаниеПоказателя Из ИнформацияОВидеРасчета.Показатели Цикл
				
				Если ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка
					Или ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка
					Или ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
					
					ПоказательНайден = Ложь;
					Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений,, 0) Цикл
						Если СтрокаТаблицаНачислений["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель Тогда
							ПоказательНайден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не ПоказательНайден Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
						ЕстьРеквизитЗначение = ТаблицаНачислений.Колонки.Найти("Значение" + НомерПоказателя) <> Неопределено;
						ЕстьРеквизитМинимальноеЗначение = ТаблицаНачислений.Колонки.Найти("МинимальноеЗначение" + НомерПоказателя) <> Неопределено;
						ЕстьРеквизитМаксимальноеЗначение = ТаблицаНачислений.Колонки.Найти("МаксимальноеЗначение" + НомерПоказателя) <> Неопределено;
					Иначе
						ЕстьРеквизитЗначение = СтрокаТаблицаНачислений.Свойство("Значение" + НомерПоказателя);
						ЕстьРеквизитМинимальноеЗначение = СтрокаТаблицаНачислений.Свойство("МинимальноеЗначение" + НомерПоказателя);
						ЕстьРеквизитМаксимальноеЗначение = СтрокаТаблицаНачислений.Свойство("МаксимальноеЗначение" + НомерПоказателя);
					КонецЕсли;
					
					Если ЕстьРеквизитЗначение Тогда
						ДанныеТекущейПозиции.ОкладТариф = СтрокаТаблицаНачислений["Значение" + НомерПоказателя];
					КонецЕсли;
					
					Если ЕстьРеквизитМинимальноеЗначение Тогда
						ДанныеТекущейПозиции.ОкладТарифМин = СтрокаТаблицаНачислений["МинимальноеЗначение" + НомерПоказателя];
					КонецЕсли;
					
					Если ЕстьРеквизитМаксимальноеЗначение Тогда
						ДанныеТекущейПозиции.ОкладТарифМакс = СтрокаТаблицаНачислений["МаксимальноеЗначение" + НомерПоказателя];
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеТекущейПозиции.Свойство("Комментарий") Тогда
		
		ДанныеТекущейПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			ДанныеТекущейПозиции, Форма.ДоступноЧтениеНачисленийШтатногоРасписания);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьФОТПозицийВДокументеИзмененияШтатногоРасписания(ДокументОбъект, ДатаВступленияВСилу, СписокПозиций = Неопределено) Экспорт
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", ДокументОбъект.Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	Если СписокПозиций = Неопределено Тогда
		ПересчитываемыеПозиции = ДокументОбъект.Позиции.ВыгрузитьКолонку("Позиция");
	Иначе
		ПересчитываемыеПозиции = СписокПозиций;
	КонецЕсли;
	
	Для каждого ПересчитываемаяПозиция Из ПересчитываемыеПозиции Цикл
		
		СтрокиПозиции = ДокументОбъект.Позиции.Выгрузить(Новый Структура("Позиция", ПересчитываемаяПозиция));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПозиции, КоллекцияПозиций);
		
		Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
			
			СтрокиНачислений = ДокументОбъект.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, КоллекцияНачислений);
			
			СтрокиПоказателей = ДокументОбъект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПоказателей, КоллекцияПоказателей);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	УправлениеШтатнымРасписанием.РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Для каждого СтрокаПозиции Из КоллекцияПозиций Цикл
		
		СтрокаПозицииДокумента = ДокументОбъект.Позиции.Найти(СтрокаПозиции.Позиция, "Позиция");
		Если СтрокаПозицииДокумента <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, СтрокаПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
			
			РассчитанныеСтрокиНачислений = КоллекцияНачислений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для каждого РассчитаннаяСтрока Из РассчитанныеСтрокиНачислений Цикл
				
				СтрокиНачисленийДокумента = ДокументОбъект.Начисления.НайтиСтроки(
					Новый Структура("ИдентификаторСтрокиПозиции,Начисление", РассчитаннаяСтрока.ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление));
					
				Для каждого СтрокаНачисленийДокумента Из СтрокиНачисленийДокумента Цикл
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, РассчитаннаяСтрока, "Размер,РазмерМин,РазмерМакс");
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьФОТПозицийСправочника(Организация, ДатаРасчета, ПозицииОбъекты) Экспорт
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаРасчета);
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	СоответствиеСсылокОбъектам = Новый Соответствие;
	
	ИдентификаторСтрокиПозиции = 1;
	Для каждого ПозицияОбъект Из ПозицииОбъекты Цикл
		
		СоответствиеСсылокОбъектам.Вставить(ПозицияОбъект.Ссылка, ПозицияОбъект);
		
		СтрокаПозиции = КоллекцияПозиций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПозиции, ПозицияОбъект);
		СтрокаПозиции.Позиция = ПозицияОбъект.Ссылка;
		СтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
		
		Для каждого НачислениеПозиции Из ПозицияОбъект.Начисления Цикл
			
			СтрокаНачислений = КоллекцияНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, НачислениеПозиции);
			СтрокаНачислений.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
		Для каждого ПоказательПозиции Из ПозицияОбъект.Показатели Цикл
			
			СтрокаПоказателя = КоллекцияПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ПоказательПозиции);
			СтрокаПоказателя.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
		ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
		
	КонецЦикла;
	
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	УправлениеШтатнымРасписанием.РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Для каждого СтрокаПозиции Из КоллекцияПозиций Цикл
		
		ПозицияОбъект = СоответствиеСсылокОбъектам.Получить(СтрокаПозиции.Позиция);
		Если ПозицияОбъект <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ПозицияОбъект, СтрокаПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
			
			РассчитанныеСтрокиНачислений = КоллекцияНачислений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для каждого РассчитаннаяСтрока Из РассчитанныеСтрокиНачислений Цикл
				
				СтрокиНачисленийПозиции = ПозицияОбъект.Начисления.НайтиСтроки(
					Новый Структура("Начисление", РассчитаннаяСтрока.Начисление));
					
				Для каждого СтрокаНачисленийПозиции Из СтрокиНачисленийПозиции Цикл
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийПозиции, РассчитаннаяСтрока, "Размер,РазмерМин,РазмерМакс");
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ() Экспорт
	
	КоллекцияПозиций = Новый ТаблицаЗначений;
	КоллекцияПозиций.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	КоллекцияПозиций.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КоллекцияПозиций.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КоллекцияПозиций.Колонки.Добавить("ГрафикРаботыСотрудников", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	КоллекцияПозиций.Колонки.Добавить("ТарифнаяСетка", Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТариф", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТарифМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТарифМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТ", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ВыплачиваетсяНадбавкаЗаВредность", Новый ОписаниеТипов("Булево"));
	КоллекцияПозиций.Колонки.Добавить("ПроцентНадбавкиЗаВредность", Новый ОписаниеТипов("Число"));
	
	Возврат КоллекцияПозиций;
	
КонецФункции

Функция ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ() Экспорт
	
	КоллекцияНачислений = Новый ТаблицаЗначений;
	КоллекцияНачислений.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	КоллекцияНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	КоллекцияНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("РазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("РазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	Возврат КоллекцияНачислений;
	
КонецФункции

Функция ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ()  Экспорт
	
	КоллекцияПоказателей = Новый ТаблицаЗначений;
	КоллекцияПоказателей.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	КоллекцияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ЗначениеМин", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ЗначениеМакс", Новый ОписаниеТипов("Число"));
	
	Возврат КоллекцияПоказателей;
	
КонецФункции

Функция СвойстваПозицииСРезультатамиРасчетаФОТ()
	
	Возврат
		"ОкладТариф,
		|ОкладТарифМин,
		|ОкладТарифМакс,
		|ФОТ,
		|ФОТМин,
		|ФОТМакс,
		|НадбавкаЗаВредностьРазмер,
		|НадбавкаЗаВредностьРазмерМин,
		|НадбавкаЗаВредностьРазмерМакс,
		|РайонныйКоэффициентРазмер,
		|РайонныйКоэффициентРазмерМин,
		|РайонныйКоэффициентРазмерМакс,
		|СевернаяНадбавкаРазмер,
		|СевернаяНадбавкаРазмерМин,
		|СевернаяНадбавкаРазмерМакс";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТекстУсловийЗапросаСОтборами(Запрос, Отбор, ФОИспользоватьИсториюИзмененияШтатногоРасписания, УсловияЗапроса = Неопределено)
	
	Если УсловияЗапроса = Неопределено Тогда
		УсловияЗапроса = Новый Массив;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		
		Для каждого ОписаниеЭлементаОтбора Из Отбор Цикл
			
			Если ТипЗнч(ОписаниеЭлементаОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ПравоеЗначение = ОписаниеЭлементаОтбора.ПравоеЗначение;
			ИначеЕсли ТипЗнч(ОписаниеЭлементаОтбора.ПравоеЗначение) = Тип("Число") Тогда
				ПравоеЗначение = Формат(ОписаниеЭлементаОтбора.ПравоеЗначение, "ЧГ=");
			ИначеЕсли ТипЗнч(ОписаниеЭлементаОтбора.ПравоеЗначение) = Тип("Дата") Тогда
				ПравоеЗначение = "ДАТАВРЕМЯ(" + Формат(ОписаниеЭлементаОтбора.ПравоеЗначение, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			ИначеЕсли ТипЗнч(ОписаниеЭлементаОтбора.ПравоеЗначение) = Тип("Булево") Тогда
				Если ОписаниеЭлементаОтбора.ПравоеЗначение Тогда
					ПравоеЗначение = "(ИСТИНА)";
				Иначе
					ПравоеЗначение = "(ЛОЖЬ)";
				КонецЕсли;
			Иначе
				НомерПараметра = Запрос.Параметры.Количество();
				ИмяПараметра = "ПозицииШтатногоРасписанияПараметр" + Формат(НомерПараметра, "ЧГ=");
				ПравоеЗначение = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, ОписаниеЭлементаОтбора.ПравоеЗначение)
			КонецЕсли; 
			
			Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
				
				Если ВРег(ОписаниеЭлементаОтбора.ЛевоеЗначение) = ВРег("Подразделение")
					Или ВРег(ОписаниеЭлементаОтбора.ЛевоеЗначение) = ВРег("Владелец") Тогда
					ПолеПозицияСТочкой = "ПозицияШтатногоРасписания.";
				Иначе
					ПолеПозицияСТочкой = "";
				КонецЕсли;
				
				УсловияЗапроса.Добавить(
					"(ИсторияИспользованияШтатногоРасписания." + ПолеПозицияСТочкой + ОписаниеЭлементаОтбора.ЛевоеЗначение + " " + ОписаниеЭлементаОтбора.ВидСравнения
					+ " (" + ПравоеЗначение + "))");
				
			Иначе
				Если ВРег(ОписаниеЭлементаОтбора.ЛевоеЗначение) <> ВРег("Регистратор") Тогда
					УсловияЗапроса.Добавить(
						"(ШтатноеРасписание." + ОписаниеЭлементаОтбора.ЛевоеЗначение + " " + ОписаниеЭлементаОтбора.ВидСравнения
						+ " (" + ПравоеЗначение + "))");
				КонецЕсли; 
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если УсловияЗапроса.Количество() = 0 Тогда
		ТекстУсловий = "(ИСТИНА)";
	Иначе
		
		ТекстУсловий = "";
		Для каждого УсловиеЗапроса Из УсловияЗапроса Цикл
			ТекстУсловий = ?(ПустаяСтрока(ТекстУсловий), "", ТекстУсловий + Символы.ПС + " И ") + УсловиеЗапроса;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстУсловий;
	
КонецФункции

Функция ФорматКоличестваСтавок() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаботуНаНеполнуюСтавку") Тогда
		Возврат "ЧДЦ=2";
	Иначе
		Возврат "ЧДЦ=0";
	КонецЕсли;
	
КонецФункции

Функция РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения) Экспорт
	
	Позиции = ПараметрыВыполнения.Позиции; 
	Начисления = ПараметрыВыполнения.Начисления; 
	Показатели = ПараметрыВыполнения.Показатели;
	ЕжегодныеОтпуска = ПараметрыВыполнения.ЕжегодныеОтпуска;
	Специальности = ПараметрыВыполнения.Специальности;
		
	Если Показатели.Колонки.Найти("ИдентификаторСтрокиПозиции") = Неопределено Тогда
		
		Показатели.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
		СоответствиеИдентификаторов = Новый Соответствие;
		
		Для каждого СтрокаПоказателя Из Показатели Цикл
			
			ИдентификаторСтрокиВидаРасчета = СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета;
			
			ИдентификаторСтрокиПозиции = СоответствиеИдентификаторов.Получить(ИдентификаторСтрокиВидаРасчета);
			Если ИдентификаторСтрокиПозиции = Неопределено Тогда
				
				НайденныеСтроки = Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИдентификаторСтрокиПозиции = НайденныеСтроки[0].ИдентификаторСтрокиПозиции;
					СоответствиеИдентификаторов.Вставить(ИдентификаторСтрокиВидаРасчета, ИдентификаторСтрокиПозиции);
				КонецЕсли; 
			
			КонецЕсли; 
			
			Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
				СтрокаПоказателя.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КолонкаНомерСтроки = Позиции.Колонки.Найти("LineNumber");
	Если КолонкаНомерСтроки <> Неопределено Тогда
		КолонкаНомерСтроки.Имя = "НомерСтроки";
	КонецЕсли; 
	
	РезультатЗапросаПоДаннымЗаполнения = СформироватьЗапросПоОтклонениюШтатногоРасписания(
		ПараметрыВыполнения.Организация,
		ПараметрыВыполнения.ДатаВступленияВСилу,
		Позиции.Скопировать(),
		ПараметрыВыполнения.Подразделение);
		
	ДанныеЗаполнения = РезультатЗапросаПоДаннымЗаполнения.Выбрать(); 
	
	МассивСтрокДляЗаполненияНачислений = Новый Массив;
	ИзмененныеПозиции = Новый Массив;
	
	ИдентификаторСтрокиПозицииМакс = МаксимальныйИдентификаторСтроки(Позиции, "ИдентификаторСтрокиПозиции");
	Пока ДанныеЗаполнения.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Позиция) Тогда
			СтруктураПоиска.Вставить("Позиция", ДанныеЗаполнения.Позиция);
		Иначе
			СтруктураПоиска.Вставить("Подразделение", ДанныеЗаполнения.Подразделение);
			СтруктураПоиска.Вставить("Должность", ДанныеЗаполнения.Должность);
		КонецЕсли;
		
		НайденныеСтроки = Позиции.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаПозиция = Позиции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПозиция, ДанныеЗаполнения);
			
			Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Позиция) Тогда
				СтрокаПозиция.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
			Иначе
				ИзмененныеПозиции.Добавить(ДанныеЗаполнения.Позиция);
			КонецЕсли; 
			
			ИдентификаторСтрокиПозицииМакс = ИдентификаторСтрокиПозицииМакс + 1;
			СтрокаПозиция.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозицииМакс;
			
			МассивСтрокДляЗаполненияНачислений.Добавить(СтрокаПозиция);
			
		Иначе
			СтрокаПозиция = НайденныеСтроки[0];
			СтрокаПозиция.КоличествоСтавок = ДанныеЗаполнения.КоличествоСтавок;
		КонецЕсли;
		
	КонецЦикла;	
	
	ИдентификаторСтрокиВидаРасчетаМакс = МаксимальныйИдентификаторСтроки(Начисления, "ИдентификаторСтрокиВидаРасчета");
	Если МассивСтрокДляЗаполненияНачислений.Количество() > 0 Тогда
		
		ДанныеДляПолученияКадровыхДанных = Позиции.Скопировать(МассивСтрокДляЗаполненияНачислений, "Подразделение,Должность,ИдентификаторСтрокиПозиции");
		ТекущиеДанныеПозиций = ТекущиеКадровыеДанныеПозиций(ПараметрыВыполнения.Организация, ДанныеДляПолученияКадровыхДанных, ПараметрыВыполнения.ДатаВступленияВСилу);
		ДанныеИзмененныхПозиций = ДанныеПозицийШтатногоРасписания(Истина, ИзмененныеПозиции, ПараметрыВыполнения.ДатаВступленияВСилу);
		
		Для каждого СтрокаДляЗаполнения Из МассивСтрокДляЗаполненияНачислений Цикл
			
			Если ЗначениеЗаполнено(СтрокаДляЗаполнения.Позиция) И СтрокаДляЗаполнения.Позиция.Утверждена Тогда
				ДанныеПоСтроке = ДанныеИзмененныхПозиций.Получить(СтрокаДляЗаполнения.Позиция);
			Иначе
				ДанныеПоСтроке = ТекущиеДанныеПозиций.Получить(СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции);
			КонецЕсли;
			
			Если ДанныеПоСтроке <> Неопределено Тогда
				
				Для каждого ДанныеНачисления Из ДанныеПоСтроке.Начисления Цикл
					
					ИдентификаторСтрокиВидаРасчетаМакс = ИдентификаторСтрокиВидаРасчетаМакс + 1;
					
					СтрокаНачислений = Начисления.Добавить();
					СтрокаНачислений.Начисление = ДанныеНачисления.Начисление;
					СтрокаНачислений.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчетаМакс;
					СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
					
					Для каждого ДанныеПоказателя Из ДанныеНачисления.Показатели Цикл
						
						Если ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда
							
							СтрокаПоказателей = Показатели.Добавить();
							СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчетаМакс;
							СтрокаПоказателей.ИдентификаторСтрокиПозиции = СтрокаНачислений.ИдентификаторСтрокиПозиции;
							СтрокаПоказателей.Показатель = ДанныеПоказателя.Показатель;
							
							Если ДанныеПоказателя.Свойство("Значение") Тогда
								СтрокаПоказателей.Значение = ДанныеПоказателя.Значение;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("МинимальноеЗначение") Тогда
								СтрокаПоказателей.ЗначениеМин = ДанныеПоказателя.МинимальноеЗначение;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("МаксимальноеЗначение") Тогда
								СтрокаПоказателей.ЗначениеМакс = ДанныеПоказателя.МаксимальноеЗначение;
							КонецЕсли;
						
							Если ДанныеПоказателя.Свойство("ЗначениеМин") Тогда
								СтрокаПоказателей.ЗначениеМин = ДанныеПоказателя.ЗначениеМин;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("ЗначениеМакс") Тогда
								СтрокаПоказателей.ЗначениеМакс = ДанныеПоказателя.ЗначениеМакс;
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого ДанныеПоОтпускам Из ДанныеПоСтроке.ЕжегодныеОтпуска Цикл
					
					СтрокаОтпусков = ЕжегодныеОтпуска.Добавить();
					СтрокаОтпусков.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(СтрокаОтпусков, ДанныеПоОтпускам);
					
					СтрокаОтпусков.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
					
				КонецЦикла;
				
				Для каждого ДанныеПоСпециальностям Из ДанныеПоСтроке.Специальности Цикл
					
					СтрокаСпециальности = Специальности.Добавить();
					СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(СтрокаСпециальности, ДанныеПоСпециальностям);
					
				КонецЦикла;
		
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	УпорядочитьСписокПозиций(Позиции);
	
	РезультатСозданияПозиций = Новый Структура("Организация,ДатаВступленияВСилу");
	ЗаполнитьЗначенияСвойств(РезультатСозданияПозиций, ПараметрыВыполнения);
	
	РезультатСозданияПозиций.Вставить("Позиции", Позиции);
	РезультатСозданияПозиций.Вставить("Начисления", Начисления);
	РезультатСозданияПозиций.Вставить("Показатели", Показатели);
	РезультатСозданияПозиций.Вставить("ЕжегодныеОтпуска", ЕжегодныеОтпуска);
	РезультатСозданияПозиций.Вставить("Специальности", Специальности);
	
	РассчитатьФОТНесколькихПозиций(РезультатСозданияПозиций);

	Возврат РезультатСозданияПозиций;
	
КонецФункции

Процедура ЗаполнитьДокументПоДаннымЗаполнения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("Позиции") Тогда
		ДокументОбъект.Позиции.Загрузить(ДанныеЗаполнения.Позиции);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Начисления") Тогда
		ДокументОбъект.Начисления.Загрузить(ДанныеЗаполнения.Начисления);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Показатели") Тогда
		ДокументОбъект.Показатели.Загрузить(ДанныеЗаполнения.Показатели);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("ЕжегодныеОтпуска") Тогда
		ДокументОбъект.ЕжегодныеОтпуска.Загрузить(ДанныеЗаполнения.ЕжегодныеОтпуска);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Специальности") Тогда
		ДокументОбъект.Специальности.Загрузить(ДанныеЗаполнения.Специальности);
	КонецЕсли; 

КонецПроцедуры

Процедура УпорядочитьСписокПозиций(Позиции) Экспорт
	
	Если ТипЗнч(Позиции) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПозиций = Позиции.Скопировать();
	Иначе
		ТаблицаПозиций = Позиции.Выгрузить();
	КонецЕсли;
	
	ЕстьРазрядКатегория = Ложь;
	Для каждого Колонка Из ТаблицаПозиций.Колонки Цикл
		Если НЕ ЕстьРазрядКатегория И ВРег(Колонка.Имя) = ВРег("РазрядКатегория") Тогда
			ЕстьРазрядКатегория = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозиций.Колонки.Добавить("ПодразделениеРеквизитДопУпорядочивания");
	ДанныеПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("Подразделение"), "РеквизитДопУпорядочиванияИерархического");
	ТаблицаПозиций.Колонки.Добавить("ДолжностьРеквизитДопУпорядочивания");
	ДанныеДолжностей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("Должность"), "РеквизитДопУпорядочивания");
	СтрокаСортировки = "ПодразделениеРеквизитДопУпорядочивания, ДолжностьРеквизитДопУпорядочивания";
	Если ЕстьРазрядКатегория Тогда
		ТаблицаПозиций.Колонки.Добавить("РазрядКатегорияРеквизитДопУпорядочивания");
		ДанныеРазрядовКатегорий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("РазрядКатегория"), "РеквизитДопУпорядочивания");
		СтрокаСортировки = СтрокаСортировки + ", РазрядКатегорияРеквизитДопУпорядочивания";
	КонецЕсли;
	
	Для каждого СтрокаТаблицыПозиций Из ТаблицаПозиций Цикл
		ДанныеПодразделения = ДанныеПодразделений.Получить(СтрокаТаблицыПозиций.Подразделение);
		Если ДанныеПодразделения <> Неопределено Тогда
			СтрокаТаблицыПозиций.ПодразделениеРеквизитДопУпорядочивания = ДанныеПодразделения.РеквизитДопУпорядочиванияИерархического;
		КонецЕсли;
		ДанныеДолжности = ДанныеДолжностей.Получить(СтрокаТаблицыПозиций.Должность);
		Если ДанныеДолжности <> Неопределено Тогда
			СтрокаТаблицыПозиций.ДолжностьРеквизитДопУпорядочивания = ДанныеДолжности.РеквизитДопУпорядочивания;
		КонецЕсли;
		Если ЕстьРазрядКатегория Тогда
			ДанныеРазрядаКатегорий = ДанныеРазрядовКатегорий.Получить(СтрокаТаблицыПозиций.Должность);
			Если ДанныеРазрядаКатегорий <> Неопределено Тогда
				СтрокаТаблицыПозиций.РазрядКатегорияРеквизитДопУпорядочивания = ДанныеРазрядаКатегорий.РеквизитДопУпорядочивания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозиций.Сортировать(СтрокаСортировки);
	ТаблицаПозиций.Колонки.Удалить("ПодразделениеРеквизитДопУпорядочивания");
	ТаблицаПозиций.Колонки.Удалить("ДолжностьРеквизитДопУпорядочивания");
	ТаблицаПозиций.Колонки.Удалить("РазрядКатегорияРеквизитДопУпорядочивания");
	
	Если ТипЗнч(Позиции) = Тип("ТаблицаЗначений") Тогда
		Позиции = ТаблицаПозиций.Скопировать();
	Иначе
		Позиции.Загрузить(ТаблицаПозиций);
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйИдентификаторСтроки(КоллекцияСтрокПозиций, ИдентификаторРеквизита) Экспорт
	
	ИдентификаторСтрокиМакс = 0;	
	
	Для Каждого СтрокаПозиции Из КоллекцияСтрокПозиций Цикл
		Если СтрокаПозиции[ИдентификаторРеквизита] > ИдентификаторСтрокиМакс Тогда
			ИдентификаторСтрокиМакс = СтрокаПозиции[ИдентификаторРеквизита];
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ИдентификаторСтрокиМакс;
	
КонецФункции

Функция ПараметрыВыбораКатегорииНачислений() Экспорт
	
	МассивКатегорийНачислений = КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений();
	Возврат МассивКатегорийНачислений;
	
КонецФункции

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат Модуль.ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуСодержанию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат Модуль.ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуДовольствию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

Процедура СинхронизироватьРеквизитыПозиции(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании, СинхронизироватьНачисления = Ложь) Экспорт
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		Объект.ОкладТариф = Объект.ОкладТарифМакс;
		Объект.ФОТ = Объект.ФОТМакс;
		Объект.НадбавкаЗаВредностьРазмер = Объект.НадбавкаЗаВредностьРазмерМакс;
		Объект.РайонныйКоэффициентРазмер = Объект.РайонныйКоэффициентРазмерМакс;
		Объект.СевернаяНадбавкаРазмер = Объект.СевернаяНадбавкаРазмерМакс;
			
	Иначе
			
		Объект.ОкладТарифМин = Объект.ОкладТариф;
		Объект.ФОТМин = Объект.ФОТ;
		Объект.НадбавкаЗаВредностьРазмерМин = Объект.НадбавкаЗаВредностьРазмер;
		Объект.РайонныйКоэффициентРазмерМин = Объект.РайонныйКоэффициентРазмер;
		Объект.СевернаяНадбавкаРазмерМин = Объект.СевернаяНадбавкаРазмер;
		
		Объект.ОкладТарифМакс = Объект.ОкладТариф;
		Объект.ФОТМакс = Объект.ФОТ;
		Объект.НадбавкаЗаВредностьРазмерМакс = Объект.НадбавкаЗаВредностьРазмер;
		Объект.РайонныйКоэффициентРазмерМакс = Объект.РайонныйКоэффициентРазмер;
		Объект.СевернаяНадбавкаРазмерМакс = Объект.СевернаяНадбавкаРазмер;
		
	КонецЕсли;
	
	Если СинхронизироватьНачисления Тогда
		СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании)
	
	Для каждого СтрокаТЧНачисления Из Объект.Начисления Цикл
		
		Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаТЧНачисления.Размер = СтрокаТЧНачисления.РазмерМакс;
		Иначе
			СтрокаТЧНачисления.РазмерМин = СтрокаТЧНачисления.Размер;
			СтрокаТЧНачисления.РазмерМакс = СтрокаТЧНачисления.Размер;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧПоказатели Из Объект.Показатели Цикл
		
		Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаТЧПоказатели.Значение = СтрокаТЧПоказатели.ЗначениеМакс;
		Иначе
			СтрокаТЧПоказатели.ЗначениеМин = СтрокаТЧПоказатели.Значение;
			СтрокаТЧПоказатели.ЗначениеМакс = СтрокаТЧПоказатели.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПриЗаписи, инициирует обновление структуры списка справочника ШтатноеРасписание.
//
Процедура ОбновитьСтруктуруШтатногоРасписанияПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание")
		И Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеСтруктурыШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли; 
	
	Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоПодразделениям();
	
КонецПроцедуры

Процедура ОтключитьОбновлениеСтруктурыШтатногоРасписания(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыШтатногоРасписания", Истина);
	
КонецПроцедуры

Процедура ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
	
КонецПроцедуры

Функция ТекущиеКадровыеДанныеПозиций(Организация, ДанныеДляПолученияКадровыхДанных, ДатаДанных) Экспорт
	
	СтруктураПараметров = Новый Структура("Организация,Период", Организация, ДатаДанных);
	
	ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассы = 
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", СтруктураПараметров);
		
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
		
	ДанныеПозиций = Новый Соответствие;
	Для каждого ИсходныеДанные Из ДанныеДляПолученияКадровыхДанных Цикл
		ДанныеПозиций.Вставить(ИсходныеДанные.ИдентификаторСтрокиПозиции, Новый Структура("Начисления,ЕжегодныеОтпуска,Специальности", Новый Массив, Новый Массив, Новый Массив));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДанныеДляПолученияКадровыхДанных", ДанныеДляПолученияКадровыхДанных);

	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаДанных;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение,Должность,ДолжностьПоШтатномуРасписанию";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляЗаполнения.Подразделение,
		|	ДанныеДляЗаполнения.Должность,
		|	ДанныеДляЗаполнения.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТДанныеДляЗаполнения
		|ИЗ
		|	&ДанныеДляПолученияКадровыхДанных КАК ДанныеДляЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизации.Период,
		|	СотрудникиОрганизации.Сотрудник,
		|	ДанныеДляЗаполнения.ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТСотрудникиСИдентификаторами
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляЗаполнения КАК ДанныеДляЗаполнения
		|		ПО СотрудникиОрганизации.Подразделение = ДанныеДляЗаполнения.Подразделение
		|			И СотрудникиОрганизации.Должность = ДанныеДляЗаполнения.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСотрудникиСИдентификаторами.Сотрудник,
		|	ВТСотрудникиСИдентификаторами.Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиСИдентификаторами КАК ВТСотрудникиСИдентификаторами";
		
	Запрос.Выполнить();
		
	// Заполнение начислений
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудники", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,
		"Начисление.СпособВыполненияНачисления",
		"=",
		"ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
			
	Запрос.УстановитьПараметр("КатегорииНачисленияИлиНеоплаченногоВремени", ПараметрыВыбораКатегорииНачислений());
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияСПоказателями.Начисление,
		|	ВТНачисленияСПоказателями.Показатель,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение, 0) КАК Значение,
		|	ВТСотрудникиСИдентификаторами.ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТИдентификаторыСтрокСНачислениями
		|ИЗ
		|	ВТНачисленияСПоказателями КАК ВТНачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник = ВТНачисленияСПоказателями.Сотрудник)
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель = ВТНачисленияСПоказателями.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСИдентификаторами КАК ВТСотрудникиСИдентификаторами
		|		ПО ВТНачисленияСПоказателями.Сотрудник = ВТСотрудникиСИдентификаторами.Сотрудник
		|ГДЕ
		|	ВТНачисленияСПоказателями.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленияИлиНеоплаченногоВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИдентификаторыСтрокСНачислениями.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	ВТИдентификаторыСтрокСНачислениями.Начисление КАК Начисление,
		|	ВТИдентификаторыСтрокСНачислениями.Показатель,
		|	МИНИМУМ(ВТИдентификаторыСтрокСНачислениями.Значение) КАК МинимальноеЗначение,
		|	МАКСИМУМ(ВТИдентификаторыСтрокСНачислениями.Значение) КАК МаксимальноеЗначение
		|ИЗ
		|	ВТИдентификаторыСтрокСНачислениями КАК ВТИдентификаторыСтрокСНачислениями
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИдентификаторыСтрокСНачислениями.Начисление,
		|	ВТИдентификаторыСтрокСНачислениями.Показатель,
		|	ВТИдентификаторыСтрокСНачислениями.ИдентификаторСтрокиПозиции
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ВТИдентификаторыСтрокСНачислениями.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	ИдентификаторСтрокиПозиции,
		|	Начисление";
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторСтрокиПозиции");
		Пока Выборка.Следующий() Цикл
			
			ДанныеПозиции = ДанныеПозиций.Получить(Выборка.ИдентификаторСтрокиПозиции);
			
			СтрокиНачислений = ДанныеПозиции.Начисления;
			
			ВыборкаПоНачислениям = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Начисление");
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				СтруктураНачисления = Новый Структура("Начисление,Показатели");
				СтруктураНачисления.Вставить("Начисление", ВыборкаПоНачислениям.Начисление);
				СтруктураНачисления.Вставить("Показатели", Новый Массив);
				
				ВыборкаПоПоказателям = ВыборкаПоНачислениям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						
						СтруктураПоказателя = Новый Структура;
						СтруктураПоказателя.Вставить("Показатель", ВыборкаПоПоказателям.Показатель);
						
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							СтруктураПоказателя.Вставить("МинимальноеЗначение", ВыборкаПоПоказателям.МинимальноеЗначение);
							СтруктураПоказателя.Вставить("МаксимальноеЗначение", ВыборкаПоПоказателям.МаксимальноеЗначение);
						Иначе
							СтруктураПоказателя.Вставить("Значение", ВыборкаПоПоказателям.МаксимальноеЗначение);
						КонецЕсли;
						
						СтруктураНачисления.Показатели.Добавить(СтруктураПоказателя);
						
					КонецЕсли; 
					
				КонецЦикла;
				
				СтрокиНачислений.Добавить(СтруктураНачисления);
					
			КонецЦикла;
				
		КонецЦикла;
			
	КонецЕсли; 
	
	// Заполнение дополнительных отпусков.
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ПоложенныеВидыЕжегодныхОтпусков",
	Запрос.МенеджерВременныхТаблиц,
	Истина,
	ОписаниеФильтра);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	СотрудникиСИдентификаторами.ИдентификаторСтрокиПозиции
	|ПОМЕСТИТЬ ВТИдентификаторыПозицийСОтпусками
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних КАК ПоложенныеВидыЕжегодныхОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСИдентификаторами КАК СотрудникиСИдентификаторами
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СотрудникиСИдентификаторами.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПозицийСОтпусками.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ИдентификаторыПозицийСОтпусками.КоличествоДнейВГод) КАК КоличествоДнейВГод,
	|	ИдентификаторыПозицийСОтпусками.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
	|ИЗ
	|	ВТИдентификаторыПозицийСОтпусками КАК ИдентификаторыПозицийСОтпусками
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыПозицийСОтпусками.ВидЕжегодногоОтпуска,
	|	ИдентификаторыПозицийСОтпусками.ИдентификаторСтрокиПозиции
	|ИТОГИ ПО
	|	ИдентификаторСтрокиПозиции";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоПозициям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторСтрокиПозиции");
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = ДанныеПозиций.Получить(ВыборкаПоПозициям.ИдентификаторСтрокиПозиции);
			
			СтрокиОтпусков = ДанныеПозиции.ЕжегодныеОтпуска;
			
			ВыборкаПоОтпускам = ВыборкаПоПозициям.Выбрать();
			Пока ВыборкаПоОтпускам.Следующий() Цикл
				
				СтруктураОтпуска = Новый Структура;
				СтруктураОтпуска.Вставить("ВидЕжегодногоОтпуска", ВыборкаПоОтпускам.ВидЕжегодногоОтпуска);
				СтруктураОтпуска.Вставить("КоличествоДнейВГод", ВыборкаПоОтпускам.КоличествоДнейВГод);
				
				СтрокиОтпусков.Добавить(СтруктураОтпуска);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ДанныеПозиций;
	
КонецФункции

Функция СформироватьЗапросПоОтклонениюШтатногоРасписания(Организация, Дата, ТекущиеПозиции, Подразделение = Неопределено)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущиеПозиции", ТекущиеПозиции);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	
	Запрос.УстановитьПараметр("ИспользоватьРазрядыКатегорииКлассыДолжностей",
		ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании"));
	
	КадровыйУчетРасширенный.СоздатьВТТекущаяКадроваяРасстановка(Запрос.МенеджерВременныхТаблиц, Организация, Дата);
	
	ПараметрыПолученияПозиций = ПараметрыПолученияПозицийШтатногоРасписания();
	ПараметрыПолученияПозиций.ДатаАктуальности = Дата;
	ПараметрыПолученияПозиций.Организация = Организация;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрыПолученияПозиций.Подразделение = Подразделение;
	КонецЕсли;
	
	СоздатьВТПозицииШтатногоРасписания(Истина, Запрос.МенеджерВременныхТаблиц, "ВТПозицииШтатногоРасписания", ПараметрыПолученияПозиций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеПозиции.Должность КАК Должность,
	|	ТекущиеПозиции.Подразделение КАК Подразделение,
	|	ТекущиеПозиции.КоличествоСтавок КАК КоличествоСтавок,
	|	ТекущиеПозиции.Позиция КАК Позиция,
	|	ТекущиеПозиции.НомерСтроки
	|ПОМЕСТИТЬ ВТТекущиеПозиции
	|ИЗ
	|	&ТекущиеПозиции КАК ТекущиеПозиции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Позиция,
	|	Подразделение,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеПозиции.Должность, ПозицииШтатногоРасписания.Должность) КАК Должность,
	|	ЕСТЬNULL(ТекущиеПозиции.Подразделение, ПозицииШтатногоРасписания.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ТекущиеПозиции.Позиция, ПозицииШтатногоРасписания.ПозицияШтатногоРасписания) КАК Позиция,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, ПозицииШтатногоРасписания.КоличествоСтавок) КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТТекущиеПозицииСгруппированныеДанные
	|ИЗ
	|	ВТТекущиеПозиции КАК ТекущиеПозиции
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
	|		ПО ТекущиеПозиции.Позиция = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Позиция,
	|	Подразделение,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL 
	|			ТОГДА ТекущаяКадроваяРасстановка.Подразделение
	|		ИНАЧЕ ТекущиеПозиции.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Должность ЕСТЬ NULL 
	|			ТОГДА ТекущаяКадроваяРасстановка.Должность
	|		ИНАЧЕ ТекущиеПозиции.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТекущиеПозиции.Позиция, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
	|			ТОГДА ШтатноеРасписание.Ссылка
	|		ИНАЧЕ ТекущиеПозиции.Позиция
	|	КОНЕЦ КАК ПозицияШтатногоРасписания,
	|	ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0) КАК ШтатноеРасписаниеКоличествоСтавок,
	|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.КоличествоСтавок, 0) КАК НовоеКоличествоСтавок
	|ПОМЕСТИТЬ ВТИзмененияШтатногоРасписания
	|ИЗ
	|	ВТТекущаяКадроваяРасстановка КАК ТекущаяКадроваяРасстановка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеПозицииСгруппированныеДанные КАК ТекущиеПозиции
	|		ПО ТекущаяКадроваяРасстановка.Подразделение = ТекущиеПозиции.Подразделение
	|			И ТекущаяКадроваяРасстановка.Должность = ТекущиеПозиции.Должность
	|			И ТекущаяКадроваяРасстановка.ДолжностьПоШтатномуРасписанию = ТекущиеПозиции.Позиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО ТекущаяКадроваяРасстановка.Подразделение = ШтатноеРасписание.Подразделение
	|			И ТекущаяКадроваяРасстановка.Должность = ШтатноеРасписание.Должность
	|			И ТекущаяКадроваяРасстановка.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
	|			И (НЕ ШтатноеРасписание.Закрыта)
	|ГДЕ
	|	ТекущаяКадроваяРасстановка.КоличествоСтавок > ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0)
	|	И (&НеОтбиратьПоПодразделению
	|			ИЛИ ВЫБОР
	|				КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL 
	|					ТОГДА ТекущаяКадроваяРасстановка.Подразделение
	|				ИНАЧЕ ТекущиеПозиции.Подразделение
	|			КОНЕЦ = &Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Должность ЕСТЬ NULL 
	|			ТОГДА ИзмененияШтатногоРасписания.Должность
	|		ИНАЧЕ ТекущиеПозиции.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL 
	|			ТОГДА ИзмененияШтатногоРасписания.Подразделение
	|		ИНАЧЕ ТекущиеПозиции.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ИзмененияШтатногоРасписания.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0) + ЕСТЬNULL(ИзмененияШтатногоРасписания.НовоеКоличествоСтавок, 0) КАК КоличествоСтавок,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Позиция ЕСТЬ NULL 
	|			ТОГДА ИзмененияШтатногоРасписания.ПозицияШтатногоРасписания
	|		ИНАЧЕ ТекущиеПозиции.Позиция
	|	КОНЕЦ КАК Позиция,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяСтрока,
	|	ЕСТЬNULL(ТекущиеПозиции.НомерСтроки, 9999999) КАК НомерСтрокиПорядок
	|ИЗ
	|	ВТТекущиеПозиции КАК ТекущиеПозиции
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТИзмененияШтатногоРасписания КАК ИзмененияШтатногоРасписания
	|		ПО ТекущиеПозиции.Подразделение = ИзмененияШтатногоРасписания.Подразделение
	|			И ТекущиеПозиции.Должность = ИзмененияШтатногоРасписания.Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПорядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ГрафикРаботыПоУмолчанию(ОбъектВладелец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектВладелец", ОбъектВладелец);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ОбъектВладелец
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.ГрафикРаботыСотрудников
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка = &ОбъектВладелец
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтатноеРасписание.ГрафикРаботыСотрудников
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Ссылка = &ОбъектВладелец";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ГрафикРаботыПоУмолчанию = Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ГрафикРаботыПоУмолчанию = Выборка.ГрафикРаботыСотрудников;
		
	КонецЕсли;
		
	Возврат ГрафикРаботыПоУмолчанию;
	
КонецФункции

Процедура ЗаполнитьПодписантовДокумента(ДокументОбъект, Знач ДатаСведений, Знач ВключаяГлавногоБухгалтера = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", ДокументОбъект.Организация);
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя");
	
	ЗаполняемыеПоля = "Руководитель,ДолжностьРуководителя,РуководительКадровойСлужбы,ДолжностьРуководителяКадровойСлужбы";
	
	Если ВключаяГлавногоБухгалтера Тогда
		ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер");
		ЗаполняемыеПоля = ЗаполняемыеПоля + ",ГлавныйБухгалтер";
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения.Вставить("РуководительКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителяКадровойСлужбы");
	
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения, ДатаСведений);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗапрашиваемыеЗначения, ЗаполняемыеПоля);
	
КонецПроцедуры

Функция ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия(Запрос, ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания")
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ТекстЗапроса = Модуль.ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия(ИмяВТ, ИмяПоляПозиция);
		
	Иначе 
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
		               |	NULL КАК Позиция,
		               |	NULL КАК МестоВСтруктуреПредприятия
		               |ПОМЕСТИТЬ ВТМестоПозицииВСтруктуреПредприятия";
					   
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СоздатьВТМестоПозицииВСтруктуреПредприятия(МенеджерВременныхТаблиц, ИмяВТ, ИмяПоляПозиция = "Позиция")
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия(Запрос, ИмяВТ, ИмяПоляПозиция);
	
	Запрос.Выполнить();
	
КонецПроцедуры


#Область ЗапросыПоСпециальностямПозицийШтатногоРасписания

// Функция возвращает список специальностей, действующих на дату события для указанного списка позиций штатного
// расписания.
//
Функция СпециальностиПозицииШтатногоРасписания(СписокПозиций, ДатаСобытия, Регистратор = Неопределено) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций",	СписокПозиций);
	Запрос.УстановитьПараметр("ДатаСобытия",	ДатаСобытия);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТСрезПоследних
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания В(&СписокПозиций)
		|	И ИсторияИспользованияШтатногоРасписания.Дата < &ДатаСобытия
		|	И ИсторияИспользованияШтатногоРасписания.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ИсторияСпециальностейПоШтатномуРасписанию.Специальность КАК Специальность
		|ИЗ
		|	РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию КАК ИсторияСпециальностейПоШтатномуРасписанию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
		|		ПО ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания = СрезПоследних.ПозицияШтатногоРасписания
		|			И ИсторияСпециальностейПоШтатномуРасписанию.Дата = СрезПоследних.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Специальность";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписаниеСпециальности.Ссылка КАК ПозицияШтатногоРасписания,
		|	ШтатноеРасписаниеСпециальности.Специальность КАК Специальность
		|ИЗ
		|	Справочник.ШтатноеРасписание.Специальности КАК ШтатноеРасписаниеСпециальности
		|ГДЕ
		|	ШтатноеРасписаниеСпециальности.Ссылка В(&СписокПозиций)
		|	И НЕ ШтатноеРасписаниеСпециальности.Ссылка.ЭтоГруппа
		|	И ШтатноеРасписаниеСпециальности.Ссылка.Утверждена
		|	И ШтатноеРасписаниеСпециальности.Ссылка.ДатаУтверждения <= &ДатаСобытия
		|	И (ШтатноеРасписаниеСпециальности.Ссылка.ДатаЗакрытия >= &ДатаСобытия
		|			ИЛИ ШтатноеРасписаниеСпециальности.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Специальность";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТСпециальностиПозицийШтатногоРасписания(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТСпециальностиПозицийШтатногоРасписания = "ВТСпециальностиПозицийШтатногоРасписания")
	
	Запрос = ЗапросВТСпециальностиПозицийШтатногоРасписания(
		ТолькоРазрешенные, ОписательВременныхТаблиц.ИмяВТПозицииШтатногоРасписания, ОписательВременныхТаблиц.ИменаРеквизитов, ИмяВТСпециальностиПозицийШтатногоРасписания);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТСпециальностиПозицийШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИменаРеквизитов, ИмяВТСпециальностиПозицийШтатногоРасписания)
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	ИсторияСпециальностейПоШтатномуРасписанию.Специальность КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальностиПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию КАК ИсторияСпециальностейПоШтатномуРасписанию
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания
		|			И ПозицииШтатногоРасписания.Дата = ИсторияСпециальностейПоШтатномуРасписанию.Дата
		|{ГДЕ
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Должность.* КАК Должность,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.*}";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	Специальности.Специальность КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальностиПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Специальности КАК Специальности
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = Специальности.Ссылка
		|{ГДЕ
		|	Специальности.Ссылка.Владелец.* КАК Организация,
		|	Специальности.Ссылка.Подразделение.*,
		|	Специальности.Ссылка.Должность.*,
		|	Специальности.Ссылка.Ссылка.* КАК ПозицияШтатногоРасписания}";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Позиция);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.Дата", "ПозицииШтатногоРасписания." + ИменаРеквизитов.Дата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСпециальностиПозицийШтатногоРасписания", ИмяВТСпециальностиПозицийШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.14";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.СинхронизироватьИспользованиеШтатногоРасписания";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.9";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ПеренестиНастройкуИспользоватьВилкуСтавокВШтатномРасписании";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.15";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьЗначенияПоказателейПриНеиспользованииВилкиСтавок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.17";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьИсториюПоказателейПоШтатномуРасписанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.4";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.УстановитьСформированностьРодителейПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.6";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.УстановитьПредставлениеТарифовИНадбавок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.18";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьТекущуюДолжностьПоШтатномуРасписанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.16";
	Обработчик.Процедура = "Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоПодразделениям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.54";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ПеренестиРазрядыВРегистрИсторияИспользованияШтатногоРасписания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ОбновитьЗакрытостьПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.128";
	Обработчик.Процедура = "Справочники.ШтатноеРасписание.ЗаполнитьКлассыУсловийТруда";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.22";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ОбновитьТекущиеДанныеПозиций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.78";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ПеренестиПараметрыУчетаДосрочнойПенсииИзДолжностейВПозиции";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.2";
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ПеренестиПроцентыНадбавкиЗаВредностьИзДолжностейВПозиции";
	
КонецПроцедуры

Процедура СинхронизироватьИспользованиеШтатногоРасписания() Экспорт
	
	НастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	НастройкиШтатногоРасписания.Прочитать();
	
	ЗаписыватьНастройки = Ложь;
	Если НастройкиШтатногоРасписания.Выбран() Тогда
	
		Если НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание Тогда
			НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание = Не НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		Если НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания = НастройкиШтатногоРасписания.НеИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НастройкиШтатногоРасписания.НеИспользоватьИсториюИзмененияШтатногоРасписания = Не НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		Если НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании Тогда
			НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании = Не НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		
	Иначе
		
		ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
		Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
			НастройкиШтатногоРасписания[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		ЗаписыватьНастройки = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьНастройки Тогда
		НастройкиШтатногоРасписания.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиНастройкуИспользоватьВилкуСтавокВШтатномРасписании() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиОрганизаций.УдалитьИспользоватьВилкуСтавокВШтатномРасписании) КАК УдалитьИспользоватьВилкуСтавокВШтатномРасписании
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиОрганизаций";
	
	Результат = Запрос.Выполнить();
	
	НастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	НастройкиШтатногоРасписания.Прочитать();
	
	ЗаписыватьНастройки = Ложь;
	
	Если Результат.Пустой() Тогда
		
		Если НастройкиШтатногоРасписания.Выбран() Тогда
			
			Если НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании Тогда
				НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании = Не НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании;
				ЗаписыватьНастройки = Истина;
			КонецЕсли;
			
		Иначе
			
			ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
			Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
				НастройкиШтатногоРасписания[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла;
			ЗаписыватьНастройки = Истина;
			
		КонецЕсли;
				
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если НастройкиШтатногоРасписания.Выбран() Тогда
			
			Если НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании <> Выборка.УдалитьИспользоватьВилкуСтавокВШтатномРасписании Тогда
				НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = Выборка.УдалитьИспользоватьВилкуСтавокВШтатномРасписании;
				ЗаписыватьНастройки = Истина;
			КонецЕсли;
			
		Иначе
			
			ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
			Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
				НастройкиШтатногоРасписания[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла;
			НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = Выборка.УдалитьИспользоватьВилкуСтавокВШтатномРасписании;
			ЗаписыватьНастройки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании = НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании Тогда
		НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании = Не НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании;
		ЗаписыватьНастройки = Истина;
	КонецЕсли;
	
	Если ЗаписыватьНастройки Тогда
		НастройкиШтатногоРасписания.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПриНеиспользованииВилкиСтавок() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПозицииКОбновлению
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.ОкладТариф <> ШтатноеРасписание.ОкладТарифМакс
		|	И ШтатноеРасписание.ФОТ <> ШтатноеРасписание.ФОТМакс
		|	И ШтатноеРасписание.НадбавкаЗаВредностьРазмер <> ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс
		|	И ШтатноеРасписание.РайонныйКоэффициентРазмер <> ШтатноеРасписание.РайонныйКоэффициентРазмерМакс
		|	И ШтатноеРасписание.СевернаяНадбавкаРазмер <> ШтатноеРасписание.СевернаяНадбавкаРазмерМакс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтатноеРасписаниеНачисления.Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
		|ГДЕ
		|	ШтатноеРасписаниеНачисления.Размер <> ШтатноеРасписаниеНачисления.РазмерМакс
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтатноеРасписаниеПоказатели.Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
		|ГДЕ
		|	ШтатноеРасписаниеПоказатели.Значение <> ШтатноеРасписаниеПоказатели.ЗначениеМакс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТПозицииКОбновлению.Ссылка
		|ИЗ
		|	ВТПозицииКОбновлению КАК ВТПозицииКОбновлению";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПозицияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПозицияОбъект.ОкладТариф = ПозицияОбъект.ОкладТарифМакс;
			ПозицияОбъект.ФОТ = ПозицияОбъект.ФОТМакс;
			ПозицияОбъект.РайонныйКоэффициентРазмер = ПозицияОбъект.РайонныйКоэффициентРазмерМакс;
			ПозицияОбъект.СевернаяНадбавкаРазмер = ПозицияОбъект.СевернаяНадбавкаРазмер;
			
			Для каждого СтрокаНачислений Из ПозицияОбъект.Начисления Цикл
				СтрокаНачислений.Размер = СтрокаНачислений.РазмерМакс;
			КонецЦикла;
			
			Для каждого СтрокаПоказателей Из ПозицияОбъект.Показатели Цикл
				СтрокаПоказателей.Значение = СтрокаПоказателей.ЗначениеМакс;
			КонецЦикла;
			
			ПозицияОбъект.ОбменДанными.Загрузка = Истина;
			ПозицияОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияИспользованияШтатногоРасписания.Регистратор
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ФОТ <> ИсторияИспользованияШтатногоРасписания.ФОТМакс
		|	И ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмер <> ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмерМакс
		|	И ИсторияИспользованияШтатногоРасписания.РайонныйКоэффициентРазмер <> ИсторияИспользованияШтатногоРасписания.РайонныйКоэффициентРазмерМакс
		|	И ИсторияИспользованияШтатногоРасписания.СевернаяНадбавкаРазмер <> ИсторияИспользованияШтатногоРасписания.СевернаяНадбавкаРазмерМакс
		|	И ИсторияИспользованияШтатногоРасписания.ОкладТариф <> ИсторияИспользованияШтатногоРасписания.ОкладТарифМакс";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				
				Запись.ОкладТариф = Запись.ОкладТарифМакс;
				Запись.ФОТ = Запись.ФОТМакс;
				Запись.НадбавкаЗаВредностьРазмер = Запись.НадбавкаЗаВредностьРазмерМакс;
				Запись.РайонныйКоэффициентРазмер = Запись.РайонныйКоэффициентРазмерМакс;
				Запись.СевернаяНадбавкаРазмер = Запись.СевернаяНадбавкаРазмерМакс;
				
			КонецЦикла;
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияНачисленийПоШтатномуРасписанию.Регистратор
		|ИЗ
		|	РегистрСведений.УдалитьИсторияНачисленийПоШтатномуРасписанию КАК ИсторияНачисленийПоШтатномуРасписанию
		|ГДЕ
		|	ИсторияНачисленийПоШтатномуРасписанию.Значение <> ИсторияНачисленийПоШтатномуРасписанию.ЗначениеМакс
		|	И ИсторияНачисленийПоШтатномуРасписанию.Размер <> ИсторияНачисленийПоШтатномуРасписанию.РазмерМакс";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.УдалитьИсторияНачисленийПоШтатномуРасписанию.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				
				Запись.Значение = Запись.ЗначениеМакс;
				Запись.Размер = Запись.РазмерМакс;
				
			КонецЦикла;
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВосстановитьИдентификаторыСтрокПозиций()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УтверждениеШтатногоРасписанияПозиции.Ссылка
		|ПОМЕСТИТЬ ВТДокументыС0ИД
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|ГДЕ
		|	УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеШтатногоРасписанияПозиции.Ссылка
		|ИЗ
		|	Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
		|ГДЕ
		|	ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыС0ИД.Ссылка
		|ИЗ
		|	ВТДокументыС0ИД КАК ДокументыС0ИД";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УтверждениеШтатногоРасписанияПозиции.Ссылка,
			|	УтверждениеШтатногоРасписанияПозиции.Позиция,
			|	УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозицииСтарый,
			|	УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции + 1 КАК ИдентификаторСтрокиПозиции
			|ПОМЕСТИТЬ ВТПозицииСНовымиИдентификаторами
			|ИЗ
			|	Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыС0ИД КАК ДокументыС0ИД
			|		ПО УтверждениеШтатногоРасписанияПозиции.Ссылка = ДокументыС0ИД.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИзменениеШтатногоРасписанияПозиции.Ссылка,
			|	NULL,
			|	ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции,
			|	ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции + 1
			|ИЗ
			|	Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыС0ИД КАК ДокументыС0ИД
			|		ПО ИзменениеШтатногоРасписанияПозиции.Ссылка = ДокументыС0ИД.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УтверждениеШтатногоРасписанияНачисления.Ссылка,
			|	УтверждениеШтатногоРасписанияНачисления.Начисление,
			|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозицииСтарый,
			|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
			|ПОМЕСТИТЬ ВТНачисленияСНовымиИдентификаторами
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Начисления КАК УтверждениеШтатногоРасписанияНачисления
			|		ПО ПозицииСНовымиИдентификаторами.Ссылка = УтверждениеШтатногоРасписанияНачисления.Ссылка
			|			И ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИзменениеШтатногоРасписанияНачисления.Ссылка,
			|	NULL,
			|	ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции,
			|	ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Начисления КАК ИзменениеШтатногоРасписанияНачисления
			|		ПО ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции
			|			И ПозицииСНовымиИдентификаторами.Ссылка = ИзменениеШтатногоРасписанияНачисления.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыС0ИД.Ссылка КАК Ссылка
			|ИЗ
			|	ВТДокументыС0ИД КАК ДокументыС0ИД
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПозицииСНовымиИдентификаторами.Ссылка КАК Ссылка,
			|	ПозицииСНовымиИдентификаторами.Позиция,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый КАК ИдентификаторСтрокиПозицииСтарый,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ИдентификаторСтрокиПозицииСтарый УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачисленияСНовымиИдентификаторами.Ссылка КАК Ссылка,
			|	НачисленияСНовымиИдентификаторами.Начисление,
			|	НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый КАК ИдентификаторСтрокиПозицииСтарый,
			|	НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиВидаРасчета,
			|	НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТНачисленияСНовымиИдентификаторами КАК НачисленияСНовымиИдентификаторами
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ИдентификаторСтрокиПозицииСтарый УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УтверждениеШтатногоРасписанияПоказатели.Ссылка КАК Ссылка,
			|	УтверждениеШтатногоРасписанияПоказатели.Показатель,
			|	УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозицииСтарый,
			|	УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета,
			|	ВЫБОР
			|		КОГДА УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета = 0
			|			ТОГДА ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|		ИНАЧЕ НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|	КОНЕЦ КАК ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТДокументыС0ИД КАК ДокументыС0ИД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Показатели КАК УтверждениеШтатногоРасписанияПоказатели
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|			ПО УтверждениеШтатногоРасписанияПоказатели.Ссылка = ПозицииСНовымиИдентификаторами.Ссылка
			|				И УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции = ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСНовымиИдентификаторами КАК НачисленияСНовымиИдентификаторами
			|			ПО УтверждениеШтатногоРасписанияПоказатели.Ссылка = НачисленияСНовымиИдентификаторами.Ссылка
			|				И УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета = НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиВидаРасчета
			|		ПО ДокументыС0ИД.Ссылка = УтверждениеШтатногоРасписанияПоказатели.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИзменениеШтатногоРасписанияПоказатели.Ссылка,
			|	ИзменениеШтатногоРасписанияПоказатели.Показатель,
			|	ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции,
			|	ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета,
			|	ВЫБОР
			|		КОГДА ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета = 0
			|			ТОГДА ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|		ИНАЧЕ НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|	КОНЕЦ
			|ИЗ
			|	ВТДокументыС0ИД КАК ДокументыС0ИД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Показатели КАК ИзменениеШтатногоРасписанияПоказатели
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|			ПО ИзменениеШтатногоРасписанияПоказатели.Ссылка = ПозицииСНовымиИдентификаторами.Ссылка
			|				И ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции = ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСНовымиИдентификаторами КАК НачисленияСНовымиИдентификаторами
			|			ПО ИзменениеШтатногоРасписанияПоказатели.Ссылка = НачисленияСНовымиИдентификаторами.Ссылка
			|				И ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета = НачисленияСНовымиИдентификаторами.ИдентификаторСтрокиВидаРасчета
			|		ПО ДокументыС0ИД.Ссылка = ИзменениеШтатногоРасписанияПоказатели.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ИдентификаторСтрокиПозицииСтарый УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка КАК Ссылка,
			|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
			|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозицииСтарый,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.ЕжегодныеОтпуска КАК УтверждениеШтатногоРасписанияЕжегодныеОтпуска
			|		ПО ПозицииСНовымиИдентификаторами.Ссылка = УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка
			|			И ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = УтверждениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка,
			|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
			|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.ЕжегодныеОтпуска КАК ИзменениеШтатногоРасписанияЕжегодныеОтпуска
			|		ПО ПозицииСНовымиИдентификаторами.Ссылка = ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка
			|			И ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = ИзменениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ИдентификаторСтрокиПозицииСтарый УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УтверждениеШтатногоРасписанияСпециальности.Ссылка КАК Ссылка,
			|	УтверждениеШтатногоРасписанияСпециальности.Специальность,
			|	УтверждениеШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозицииСтарый,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Специальности КАК УтверждениеШтатногоРасписанияСпециальности
			|		ПО ПозицииСНовымиИдентификаторами.Ссылка = УтверждениеШтатногоРасписанияСпециальности.Ссылка
			|			И ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = УтверждениеШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИзменениеШтатногоРасписанияСпециальности.Ссылка,
			|	ИзменениеШтатногоРасписанияСпециальности.Специальность,
			|	ИзменениеШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции,
			|	ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозиции
			|ИЗ
			|	ВТПозицииСНовымиИдентификаторами КАК ПозицииСНовымиИдентификаторами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Специальности КАК ИзменениеШтатногоРасписанияСпециальности
			|		ПО ПозицииСНовымиИдентификаторами.Ссылка = ИзменениеШтатногоРасписанияСпециальности.Ссылка
			|			И ПозицииСНовымиИдентификаторами.ИдентификаторСтрокиПозицииСтарый = ИзменениеШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ИдентификаторСтрокиПозицииСтарый УБЫВ";
			
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		КоличествоРезультатов = РезультатЗапроса.Количество();
		ВыборкаПоСсылкам = РезультатЗапроса[КоличествоРезультатов - 6].Выбрать();
		ВыборкаПоПозициям = РезультатЗапроса[КоличествоРезультатов - 5].Выбрать();
		ВыборкаПоНачислениям = РезультатЗапроса[КоличествоРезультатов - 4].Выбрать();
		ВыборкаПоПоказателям = РезультатЗапроса[КоличествоРезультатов - 3].Выбрать();
		ВыборкаПоОтпускам = РезультатЗапроса[КоличествоРезультатов - 2].Выбрать();
		ВыборкаПоСпециальностям = РезультатЗапроса[КоличествоРезультатов - 1].Выбрать();
		
		Пока ВыборкаПоСсылкам.Следующий() Цикл
			
			ДокументОбъект = ВыборкаПоСсылкам.Ссылка.ПолучитьОбъект();
			
			ВыборкаПоПозициям.Сбросить();
			ВыборкаПоНачислениям.Сбросить();
			ВыборкаПоПоказателям.Сбросить();
			ВыборкаПоОтпускам.Сбросить();
			
			Пока ВыборкаПоПозициям.НайтиСледующий(ВыборкаПоСсылкам.Ссылка, "Ссылка") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Позиция", ВыборкаПоПозициям.Позиция);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", ВыборкаПоПозициям.ИдентификаторСтрокиПозицииСтарый);
				
				СтрокиСИдентификатором = ДокументОбъект.Позиции.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаСИдентификатором Из СтрокиСИдентификатором Цикл
					СтрокаСИдентификатором.ИдентификаторСтрокиПозиции = ВыборкаПоПозициям.ИдентификаторСтрокиПозиции;
				КонецЦикла;
				
			КонецЦикла; 
			
			Пока ВыборкаПоНачислениям.НайтиСледующий(ВыборкаПоСсылкам.Ссылка, "Ссылка") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Начисление", ВыборкаПоНачислениям.Начисление);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", ВыборкаПоНачислениям.ИдентификаторСтрокиПозицииСтарый);
				
				СтрокиСИдентификатором = ДокументОбъект.Начисления.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаСИдентификатором Из СтрокиСИдентификатором Цикл
					СтрокаСИдентификатором.ИдентификаторСтрокиПозиции = ВыборкаПоНачислениям.ИдентификаторСтрокиПозиции;
				КонецЦикла;
				
			КонецЦикла; 
			
			Пока ВыборкаПоПоказателям.НайтиСледующий(ВыборкаПоСсылкам.Ссылка, "Ссылка") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Показатель", ВыборкаПоПоказателям.Показатель);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", ВыборкаПоПоказателям.ИдентификаторСтрокиПозицииСтарый);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиВидаРасчета", ВыборкаПоПоказателям.ИдентификаторСтрокиВидаРасчета);
				
				СтрокиСИдентификатором = ДокументОбъект.Показатели.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаСИдентификатором Из СтрокиСИдентификатором Цикл
					СтрокаСИдентификатором.ИдентификаторСтрокиПозиции = ВыборкаПоПоказателям.ИдентификаторСтрокиПозиции;
				КонецЦикла;
				
			КонецЦикла; 
			
			Пока ВыборкаПоОтпускам.НайтиСледующий(ВыборкаПоСсылкам.Ссылка, "Ссылка") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ВидЕжегодногоОтпуска", ВыборкаПоОтпускам.ВидЕжегодногоОтпуска);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", ВыборкаПоОтпускам.ИдентификаторСтрокиПозицииСтарый);
				
				СтрокиСИдентификатором = ДокументОбъект.ЕжегодныеОтпуска.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаСИдентификатором Из СтрокиСИдентификатором Цикл
					СтрокаСИдентификатором.ИдентификаторСтрокиПозиции = ВыборкаПоОтпускам.ИдентификаторСтрокиПозиции;
				КонецЦикла;
				
			КонецЦикла; 
			
			Пока ВыборкаПоСпециальностям.НайтиСледующий(ВыборкаПоСсылкам.Ссылка, "Ссылка") Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Специальность", ВыборкаПоОтпускам.Специальность);
				СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", ВыборкаПоОтпускам.ИдентификаторСтрокиПозицииСтарый);
				
				СтрокиСИдентификатором = ДокументОбъект.Специальности.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаСИдентификатором Из СтрокиСИдентификатором Цикл
					СтрокаСИдентификатором.ИдентификаторСтрокиПозиции = ВыборкаПоСпециальностям.ИдентификаторСтрокиПозиции;
				КонецЦикла;
				
			КонецЦикла; 
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьИсториюПоказателейПоШтатномуРасписанию() Экспорт
	
	ВосстановитьИдентификаторыСтрокПозиций();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияПоказателейПоШтатномуРасписанию.Регистратор
		|ИЗ
		|	РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию КАК ИсторияПоказателейПоШтатномуРасписанию";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИзменениеШтатногоРасписанияНачисления.Ссылка,
			|	ИзменениеШтатногоРасписанияПозиции.Позиция,
			|	ИзменениеШтатногоРасписанияНачисления.Начисление,
			|	ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции,
			|	ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТИдентификаторыСтрокРегистраторов
			|ИЗ
			|	Документ.ИзменениеШтатногоРасписания.Начисления КАК ИзменениеШтатногоРасписанияНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
			|		ПО ИзменениеШтатногоРасписанияНачисления.Ссылка = ИзменениеШтатногоРасписанияПозиции.Ссылка
			|			И ИзменениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции = ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УтверждениеШтатногоРасписанияНачисления.Ссылка,
			|	УтверждениеШтатногоРасписанияПозиции.Позиция,
			|	УтверждениеШтатногоРасписанияНачисления.Начисление,
			|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции,
			|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	Документ.УтверждениеШтатногоРасписания.Начисления КАК УтверждениеШтатногоРасписанияНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
			|		ПО УтверждениеШтатногоРасписанияНачисления.Ссылка = УтверждениеШтатногоРасписанияПозиции.Ссылка
			|			И УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции = УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Дата,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Начисление,
			|	ИдентификаторыСтрокРегистраторов.ИдентификаторСтрокиПозиции,
			|	ИдентификаторыСтрокРегистраторов.ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТИдентификаторыНачислений
			|ИЗ
			|	РегистрСведений.УдалитьИсторияНачисленийПоШтатномуРасписанию КАК УдалитьИсторияНачисленийПоШтатномуРасписанию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИдентификаторыСтрокРегистраторов КАК ИдентификаторыСтрокРегистраторов
			|		ПО УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор = ИдентификаторыСтрокРегистраторов.Ссылка
			|			И УдалитьИсторияНачисленийПоШтатномуРасписанию.Начисление = ИдентификаторыСтрокРегистраторов.Начисление
			|			И УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания = ИдентификаторыСтрокРегистраторов.Позиция
			|ГДЕ
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор КАК Регистратор,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Дата,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания,
			|	ЕСТЬNULL(ИдентификаторыНачислений.ИдентификаторСтрокиВидаРасчета, 0) КАК ИдентификаторСтрокиВидаРасчета,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Показатель,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.Значение) КАК Значение,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.ЗначениеМин) КАК ЗначениеМин,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.ЗначениеМакс) КАК ЗначениеМакс
			|ИЗ
			|	РегистрСведений.УдалитьИсторияНачисленийПоШтатномуРасписанию КАК УдалитьИсторияНачисленийПоШтатномуРасписанию
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИдентификаторыНачислений КАК ИдентификаторыНачислений
			|		ПО УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор = ИдентификаторыНачислений.Регистратор
			|			И УдалитьИсторияНачисленийПоШтатномуРасписанию.Дата = ИдентификаторыНачислений.Дата
			|			И УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания = ИдентификаторыНачислений.ПозицияШтатногоРасписания
			|			И УдалитьИсторияНачисленийПоШтатномуРасписанию.Начисление = ИдентификаторыНачислений.Начисление
			|ГДЕ
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Дата,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания,
			|	УдалитьИсторияНачисленийПоШтатномуРасписанию.Показатель,
			|	ЕСТЬNULL(ИдентификаторыНачислений.ИдентификаторСтрокиВидаРасчета, 0)
			|ИТОГИ ПО
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИдентификаторыНачислений.Регистратор КАК Регистратор,
			|	ИдентификаторыНачислений.Дата,
			|	ИдентификаторыНачислений.ПозицияШтатногоРасписания,
			|	ИдентификаторыНачислений.Начисление,
			|	ИдентификаторыНачислений.ИдентификаторСтрокиВидаРасчета,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.Размер) КАК Размер,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.РазмерМин) КАК РазмерМин,
			|	МАКСИМУМ(УдалитьИсторияНачисленийПоШтатномуРасписанию.РазмерМакс) КАК РазмерМакс
			|ИЗ
			|	ВТИдентификаторыНачислений КАК ИдентификаторыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьИсторияНачисленийПоШтатномуРасписанию КАК УдалитьИсторияНачисленийПоШтатномуРасписанию
			|		ПО ИдентификаторыНачислений.Регистратор = УдалитьИсторияНачисленийПоШтатномуРасписанию.Регистратор
			|			И ИдентификаторыНачислений.Дата = УдалитьИсторияНачисленийПоШтатномуРасписанию.Дата
			|			И ИдентификаторыНачислений.ПозицияШтатногоРасписания = УдалитьИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ИдентификаторыНачислений.Начисление = УдалитьИсторияНачисленийПоШтатномуРасписанию.Начисление
			|
			|СГРУППИРОВАТЬ ПО
			|	ИдентификаторыНачислений.Регистратор,
			|	ИдентификаторыНачислений.Дата,
			|	ИдентификаторыНачислений.ПозицияШтатногоРасписания,
			|	ИдентификаторыНачислений.Начисление,
			|	ИдентификаторыНачислений.ИдентификаторСтрокиВидаРасчета
			|ИТОГИ ПО
			|	Регистратор";
			
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПоНачислениям = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			Набор = РегистрыСведений.ИсторияНачисленийПоШтатномуРасписанию.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаПоНачислениям.Регистратор);
			
			Выборка = ВыборкаПоНачислениям.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			КонецЦикла; 
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
		ВыборкаПоПоказателям = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			
			Набор = РегистрыСведений.ИсторияПоказателейПоШтатномуРасписанию.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаПоПоказателям.Регистратор);
			
			Выборка = ВыборкаПоПоказателям.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			КонецЦикла; 
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСформированностьРодителейПодразделений() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияИспользованияПодразделений.Регистратор КАК Регистратор,
		|	ИсторияИспользованияПодразделений.Период,
		|	ИсторияИспользованияПодразделений.Регистратор КАК Регистратор1,
		|	ИсторияИспользованияПодразделений.НомерСтроки,
		|	ИсторияИспользованияПодразделений.Активность,
		|	ИсторияИспользованияПодразделений.Подразделение,
		|	ИсторияИспользованияПодразделений.Используется
		|ИЗ
		|	РегистрСведений.УдалитьИсторияИспользованияПодразделений КАК ИсторияИспользованияПодразделений
		|ИТОГИ ПО
		|	Регистратор";
		
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.УдалитьИсторияИспользованияПодразделений.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
		Пока ВыборкаПоЗаписям.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаПоЗаписям);
		КонецЦикла;
		
		КоличествоТекущегоНабора = Набор.Количество();
		
		РегистрыСведений.УдалитьИсторияИспользованияПодразделений.ДополнитьНаборИспользованиемВИерархии(Набор);
		Если КоличествоТекущегоНабора <> Набор.Количество() Тогда
			
			РегистрыСведений.УдалитьИсторияИспользованияПодразделений.СохранитьИзменениеИспользованияПодразделений(Набор);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьПредставлениеТарифовИНадбавок() Экспорт
	
	НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания();
	Если НЕ ЗначениеЗаполнено(НастройкиШтатногоРасписания.ПредставлениеТарифовИНадбавок) Тогда
		
		Набор = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьНаборЗаписей();
		
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Набор[0].ПредставлениеТарифовИНадбавок = Перечисления.ПредставлениеТарифовИНадбавок.ТарифыКоэффициенты;
		КонецЕсли; 
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТекущуюДолжностьПоШтатномуРасписанию() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ДАТАВРЕМЯ(1,1,1) КАК Период,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиСНеЗаполненнойДолжностью
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСНеЗаполненнойДолжностью.Сотрудник
		|ИЗ
		|	ВТСотрудникиСНеЗаполненнойДолжностью КАК СотрудникиСНеЗаполненнойДолжностью";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		МассивСотрудниковДляОбновления = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", МассивСотрудниковДляОбновления);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиСНеЗаполненнойДолжностью", "Сотрудник");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра);
		
		// Получим таблицу событий прием и увольнения.
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		
		// Сформируем отбор по события прием и увольнение.
		СобытияПриемУвольнение = Новый Массив;
		СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
		СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Увольнение);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия","В", СобытияПриемУвольнение);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		КадровыйУчетВнутренний.ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиРазрядыВРегистрИсторияИспользованияШтатногоРасписания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	ШтатноеРасписание.РазрядКатегория
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.РазрядКатегория <> ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияИспользованияШтатногоРасписания.Регистратор КАК Регистратор,
		|	Позиции.Позиция,
		|	Позиции.РазрядКатегория
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|		ПО Позиции.Позиция = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|			И (ИсторияИспользованияШтатногоРасписания.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				
				НайденныеСтроки = ТаблицаДвижений.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", Выборка.Позиция));
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.РазрядКатегория = Выборка.РазрядКатегория;
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗакрытостьПодразделений() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ПОМЕСТИТЬ ВТРасформированныеПодразделения
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Расформировано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ШтатноеРасписание.Ссылка) КАК Ссылка
		|ИЗ
		|	ВТРасформированныеПодразделения КАК РасформированныеПодразделения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО РасформированныеПодразделения.Ссылка = ШтатноеРасписание.Подразделение
		|			И (НЕ ШтатноеРасписание.ЭтоГруппа)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПозицииКОбновлению = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ОбновитьСведенияПодразделений(ПозицииКОбновлению);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьТекущиеДанныеПозиций() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ОбновитьТекущиеСведенияПозицииШтатногоРасписания(
			РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПозицияШтатногоРасписания"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиПараметрыУчетаДосрочнойПенсииИзДолжностейВПозиции() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	(ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией <> ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
			|			ИЛИ ИсторияИспользованияШтатногоРасписания.ОснованиеДосрочногоНазначенияПенсии <> ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
			|			ИЛИ ИсторияИспользованияШтатногоРасписания.ОсобыеУсловияТрудаПФР <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
			|			ИЛИ ИсторияИспользованияШтатногоРасписания.КодПозицииСпискаПФР <> ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка))";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШтатноеРасписание.Ссылка
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|ГДЕ
			|	(ШтатноеРасписание.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией <> ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
			|			ИЛИ ШтатноеРасписание.ОснованиеДосрочногоНазначенияПенсии <> ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
			|			ИЛИ ШтатноеРасписание.ОсобыеУсловияТрудаПФР <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
			|			ИЛИ ШтатноеРасписание.КодПозицииСпискаПФР <> ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка))";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Должности.Ссылка КАК Должность,
			|	Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
			|	Должности.ОснованиеДосрочногоНазначенияПенсии,
			|	Должности.ОсобыеУсловияТрудаПФР,
			|	Должности.КодПозицииСпискаПФР
			|ПОМЕСТИТЬ ВТДолжности
			|ИЗ
			|	Справочник.Должности КАК Должности
			|ГДЕ
			|	(Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией <> ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
			|			ИЛИ Должности.ОснованиеДосрочногоНазначенияПенсии <> ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
			|			ИЛИ Должности.ОсобыеУсловияТрудаПФР <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
			|			ИЛИ Должности.КодПозицииСпискаПФР <> ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Должности.Должность
			|ИЗ
			|	ВТДолжности КАК Должности";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ШтатноеРасписание.Ссылка,
				|	Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
				|	Должности.ОснованиеДосрочногоНазначенияПенсии,
				|	Должности.ОсобыеУсловияТрудаПФР,
				|	Должности.КодПозицииСпискаПФР
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
				|		ПО ШтатноеРасписание.Должность = Должности.Должность";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПозицияОбъект = Выборка.Ссылка.получитьОбъект();
				ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка,
					"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР");
				
				ПозицияОбъект.ОбменДанными.Загрузка = Истина;
				ПозицияОбъект.Записать();
				
			КонецЦикла;
			
			Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ИсторияИспользованияШтатногоРасписания.Регистратор КАК Регистратор,
					|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
					|	Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
					|	Должности.ОснованиеДосрочногоНазначенияПенсии,
					|	Должности.ОсобыеУсловияТрудаПФР,
					|	Должности.КодПозицииСпискаПФР
					|ИЗ
					|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
					|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность = Должности.Должность
					|
					|УПОРЯДОЧИТЬ ПО
					|	Регистратор,
					|	ПозицияШтатногоРасписания";
					
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
					
					ОбновитьДанныеРегистратора = (ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ИзменениеШтатногоРасписания")
						Или ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.УтверждениеШтатногоРасписания"));
					
					Если ОбновитьДанныеРегистратора Тогда
						РегистраторОбъект = Выборка.Регистратор.ПолучитьОбъект();
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					
					НаборЗаписей.Прочитать();
					
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					Пока Выборка.СледующийПоЗначениюПоля("ПозицияШтатногоРасписания") Цикл
						
						СтрокиПозиций = ТаблицаНабора.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", Выборка.ПозицияШтатногоРасписания));
						Для каждого СтрокаПозиции Из СтрокиПозиций Цикл
							
							ЗаполнитьЗначенияСвойств(СтрокаПозиции, Выборка,
								"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР");
							
						КонецЦикла;
						
						Если ОбновитьДанныеРегистратора Тогда
							
							СтрокаРегистратора = РегистраторОбъект.Позиции.Найти(Выборка.ПозицияШтатногоРасписания, "Позиция");
							Если СтрокаРегистратора <> Неопределено Тогда
								
								ЗаполнитьЗначенияСвойств(СтрокаРегистратора, Выборка,
									"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР");
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НаборЗаписей.Загрузить(ТаблицаНабора);
					
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					НаборЗаписей.Записать();
					
					Если ОбновитьДанныеРегистратора Тогда
						
						РегистраторОбъект.ОбменДанными.Загрузка = Истина;
						РегистраторОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
						РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиПроцентыНадбавкиЗаВредностьИзДолжностейВПозиции() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНадбавкуЗаВредность")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Должности.Ссылка КАК Должность,
		|	Должности.ПроцентНадбавкиЗаВредность
		|ПОМЕСТИТЬ ВТДолжности
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.ВыплачиваетсяНадбавкаЗаВредность";
	
	Запрос.Выполнить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсторияИспользованияШтатногоРасписания.Регистратор,
			|	ИсторияИспользованияШтатногоРасписания.Дата,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность КАК Должность,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность
			|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	(ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмер > 0
			|			ИЛИ ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмерМин > 0
			|			ИЛИ ИсторияИспользованияШтатногоРасписания.НадбавкаЗаВредностьРазмерМакс > 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВТПозицииШтатногоРасписания.ПозицияШтатногоРасписания
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ВТПозицииШтатногоРасписания
			|ГДЕ
			|	ВТПозицииШтатногоРасписания.ВыплачиваетсяНадбавкаЗаВредность";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПозицииШтатногоРасписания.Регистратор КАК Регистратор,
				|	ПозицииШтатногоРасписания.Дата,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	Должности.ПроцентНадбавкиЗаВредность
				|ИЗ
				|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
				|		ПО ПозицииШтатногоРасписания.Должность = Должности.Должность
				|
				|УПОРЯДОЧИТЬ ПО
				|	Регистратор";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
				
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ИзменениеШтатногоРасписания")
					Или ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.УтверждениеШтатногоРасписания") Тогда
					
					ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
					
				Иначе
					ДокументОбъект = Неопределено;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				
				НаборЗаписей.Прочитать();
				ТаблицаРегистра = НаборЗаписей.Выгрузить();
				
				Пока Выборка.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Дата,ПозицияШтатногоРасписания");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					СтрокиРегистра = ТаблицаРегистра.НайтиСтроки(СтруктураПоиска);
					Если СтрокиРегистра.Количество() > 0 Тогда
						СтрокиРегистра[0].ВыплачиваетсяНадбавкаЗаВредность = Истина;
						СтрокиРегистра[0].ПроцентНадбавкиЗаВредность = Выборка.ПроцентНадбавкиЗаВредность;
					КонецЕсли;
					
					Если ДокументОбъект <> Неопределено Тогда
						
						СтруктураПоиска = Новый Структура("Позиция", Выборка.ПозицияШтатногоРасписания);
						СтрокиПозиций = ДокументОбъект.Позиции.НайтиСтроки(СтруктураПоиска);
						Если СтрокиПозиций.Количество() > 0 Тогда
							СтрокиПозиций[0].ВыплачиваетсяНадбавкаЗаВредность = Истина;
							СтрокиПозиций[0].ПроцентНадбавкиЗаВредность = Выборка.ПроцентНадбавкиЗаВредность;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаРегистра);
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборЗаписей.Записать();
				
				Если ДокументОбъект <> Неопределено Тогда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	Должности.ПроцентНадбавкиЗаВредность
				|ИЗ
				|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
				|		ПО ПозицииШтатногоРасписания.Должность = Должности.Должность";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ШтатноеРасписаниеОбъект = Выборка.ПозицияШтатногоРасписания.ПолучитьОбъект();
				
				ШтатноеРасписаниеОбъект.ВыплачиваетсяНадбавкаЗаВредность = Истина;
				ШтатноеРасписаниеОбъект.ПроцентНадбавкиЗаВредность = Выборка.ПроцентНадбавкиЗаВредность;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ШтатноеРасписаниеОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ШтатноеРасписаниеОбъект);
				
				ШтатноеРасписаниеОбъект.ОбменДанными.Загрузка = Истина;
				ШтатноеРасписаниеОбъект.Записать();
				
			КонецЦикла; 
			
		КонецЕсли
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШтатноеРасписание.Ссылка,
			|	ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность
			|ПОМЕСТИТЬ ВТПозиции
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|ГДЕ
			|	(ШтатноеРасписание.НадбавкаЗаВредностьРазмер > 0
			|			ИЛИ ШтатноеРасписание.НадбавкаЗаВредностьРазмерМин > 0
			|			ИЛИ ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс > 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Позиции.Ссылка
			|ИЗ
			|	ВТПозиции КАК Позиции
			|ГДЕ
			|	Позиции.ВыплачиваетсяНадбавкаЗаВредность";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Позиции.Ссылка,
				|	Должности.ПроцентНадбавкиЗаВредность
				|ИЗ
				|	ВТПозиции КАК Позиции
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
				|		ПО Позиции.Ссылка.Должность = Должности.Должность";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ШтатноеРасписаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				ШтатноеРасписаниеОбъект.ВыплачиваетсяНадбавкаЗаВредность = Истина;
				ШтатноеРасписаниеОбъект.ПроцентНадбавкиЗаВредность = Выборка.ПроцентНадбавкиЗаВредность;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ШтатноеРасписаниеОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ШтатноеРасписаниеОбъект);
				
				ШтатноеРасписаниеОбъект.ОбменДанными.Загрузка = Истина;
				ШтатноеРасписаниеОбъект.Записать();
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти