
#Область ПрограммныйИнтерфейс

// Получает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
// 	КомпоновщикНастроекГруппировка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек 
//		или настройка/группировка СКД.
//  ИмяПараметра - Строка - Имя параметра СКД.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Возвращает элемент структуры настроек компоновки данных содержащий поле группировки с указанным именем.
// Поиск осуществляется по указанной структуре и все ее подчиненным структурам.
// В случае неудачи возвращает Неопределено.
//
// Параметры:
//   Структура - ГруппировкаТаблицыКомпоновкиДанных или ГруппировкаКомпоновкиДанных,
//               КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных), Элемент структуры компоновки данных.
//   ИмяПоля - Строка - Имя поля группировки.
//
// Возвращаемое значение:
//   ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных, Неопределено.
//
Функция НайтиГруппировку(Структура, ИмяПоля) Экспорт
	
	Для каждого Элемент Из Структура Цикл
		
		Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
			Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				Если Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
					Возврат Элемент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Элемент.Структура.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Группировка = НайтиГруппировку(Элемент.Структура, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
//	КомпоновщикНастроекГруппировка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек или настройка/группировка СКД.
//	ИмяПараметра - Строка - Имя параметра СКД.
//	Значение - Произвольный - Значение параметра вывода СКД.
//	Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//                     ОтборКомпоновкиДанных - Элемент структуры.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - Значение отбора.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно).
//	Использование - Булево - Признак использования отбора (по умолчанию: Истина).
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//	                   ВыбранныеПоляКомпоновкиДанных - Элемент структуры настройки отчета.
//	Поле - Строка - имя поля, которое нужно добавить в СКД.
//	Заголовок - Строка - Заголовок добавляемого поля.
// 
// Возвращаемое значение:
//	ВыбранноеПолеКомпоновкиДанных - Добавленное поле.
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

// Возвращает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - 
//              Настройки, в которых происходит поиск параметра. Не поддерживает тип ДанныеРасшифровкиКомпоновкиДанных.
//  Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Искомый параметр.
//	
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - Настройки, 
//              в которых происходит поиск параметра. 
//	Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно установить значение параметра.
//  Значение - Произвольный - Значение параметра.
//	Использование - Булево - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр, для которого установлено значение.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает строку с представлением периода.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода.
//	КонецПериода - Дата - Конец периода.
//	ТолькоДаты - Булево - Если Ложь, то возвращаемая строка включает предлог "за".
//
// Возвращаемое значение:
//  Строка - Текст представления периода.
//
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
				+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
			+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

// Возвращает имя объекта метаданных, которому принадлежит форма.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции

// Проверяет, является ли указанное значение простым типом данных.
//
// Параметры:
// 	Значение - Произвольный - Проверяемое значение.
//
// Возвращаемое значение:
//	Булево - Истина, если значение простого типа, иначе Ложь.
//
Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

// Возвращает дату начала периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить начало периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая началу периода.
//
Функция НачалоПериода(Период, Периодичность) Экспорт
	
	НачалоПериода = Период;
	Если Периодичность = 6 Тогда       //День
		НачалоПериода = НачалоДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		НачалоПериода = НачалоНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) <= 10 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 1);
		ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 11);
		Иначе
			НачалоПериода = Дата(Год(Период), Месяц(Период), 21);
		КонецЕсли;
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		НачалоПериода = НачалоМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		НачалоПериода = НачалоКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		НачалоПериода = ?(Месяц(Период) < 7, НачалоДня(Дата(Год(Период), 1, 1)), НачалоДня(Дата(Год(Период), 7, 1)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить конец периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая окончания периода.
//
Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает вид ближайшего периода между двумя датами.
//
// Параметры:
//	Периодичность - Число - Исходное значение периодичности.
//	НачалоПериода - ДатаВремя - Дата и время начала периода.
//	КонецПериода - ДатаВремя - Дата и время окончания периода.
//
// Возвращаемое значение:
//	Число - Вид периодичности.
//
Функция ПолучитьЗначениеПериодичности(Периодичность, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Периодичность;
	Если Периодичность = 0 Тогда
		Если ЗначениеЗаполнено(НачалоПериода)
			И ЗначениеЗаполнено(КонецПериода) Тогда
			Разность = КонецПериода - НачалоПериода;
			Если Разность / 86400 < 45 Тогда
				Результат = 6; // День.
			Иначе
				Результат = 9; // Месяц.
			КонецЕсли;
		Иначе
			Результат = 9; // Месяц.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименование фонового задания для выполнения отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//
// Возвращаемое значение:
//	Строка - Наименование фонового задания.
//
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	ИмяОтчета = ПолучитьИдентификаторОбъекта(Форма);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции

// Возвращает значение указанного свойства поля структуры.
//
// Параметры:
//	ЭлементСтруктура - КомпоновщикНастроекКомпоновкиДанных, Произвольный - Структура, в которой хранится поле.
//	Поле - Произвольный - Поле, для которого определяется значение свойства.
//	Свойство - Строка - Имя свойства, значение которого требуется получить.
//
// Возвращаемое значение:
//	Произвольный - Значение запрашиваемого свойства поля либо Неопределено.
//
Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = СтрНайти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Скрывает видимость элементов формы, связанных с настройками отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	ДополнительныеПараметры - Структура, Неопределено - Структура, содержащая ключи:
//		* СкрыватьНастройкиПриФормированииОтчета - Булево - Признак необходимости скрытия настроек.
//		* ИмяГруппаПанельНастроек - Строка - Имя панели с настройками на форме.
//		* ИмяКнопкаПанельНастроек - Строка - Имя кнопки вызова панели настроек (опционально).
//
Процедура СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		СкрыватьНастройкиПриФормированииОтчета = Форма.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы.ГруппаПанельНастроек;
		КнопкаПанельНастроек = Форма.Элементы.ПанельНастроек;
	Иначе
		СкрыватьНастройкиПриФормированииОтчета = ДополнительныеПараметры.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы[ДополнительныеПараметры.ИмяГруппаПанельНастроек];
		Если ДополнительныеПараметры.Свойство("ИмяКнопкаПанельНастроек") Тогда
			КнопкаПанельНастроек = Форма.Элементы[ДополнительныеПараметры.ИмяКнопкаПанельНастроек];
		Иначе
			КнопкаПанельНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СкрыватьНастройкиПриФормированииОтчета Тогда
		Если ПанельНастроек.Видимость Тогда
			Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПанельНастроекСкрытаАвтоматически", Истина);
		КонецЕсли;
		ПанельНастроек.Видимость = Ложь;
		Если КнопкаПанельНастроек <> Неопределено Тогда
			ИзменитьЗаголовокКнопкиПанельНастроек(КнопкаПанельНастроек, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает заголовок кнопки отображения / скрытия панели настроек отчета.
//
// Параметры:
//	Кнопка - КнопкаФормы - Кнопка отображения / скрытия панели настроек.
//	ВидимостьПанелиНастроек - Булево - Признак видимости кнопки.
//
Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Заголовок = НСтр("ru = 'Скрыть настройки'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Показать настройки'");
	КонецЕсли;
		
КонецПроцедуры

// Возвращает доступность показателя.
// Ищет показатель в доступных полях компоновщика данных (ДоступныеПоля) по имени (ИмяПоказателя).
//
// Параметры:
//	ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Коллекция доступных полей, в которой осуществляется поиск.
//	ИмяПоказателя - Строка - Имя искомого показателя.
//
// Возвращаемое значение:
//	Булево - Истина, если показатель есть среди доступных, в противном случае - Ложь.
//
Функция ПоказательДоступен(ДоступныеПоля, ИмяПоказателя) Экспорт
	
	Возврат ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоказателя)) <> Неопределено;
	
КонецФункции	

// Выполняет настройку формы отчета при изменении организации.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//
Процедура ОрганизацияПриИзменении(Форма) Экспорт 
	
	Отчет = Форма.Отчет;
	ТипыСвязанныеСОрганизацией = БухгалтерскиеОтчетыВызовСервера.ТипыСвязанныеСОрганизацией();
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					ЭлементОтбора.ПравоеЗначение = Отчет.Организация;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
				
				Отчет.ВключатьОбособленныеПодразделения = Ложь;
				
			ИначеЕсли ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры

// Выполняет настройку формы отчета при изменении подразделения.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//
Процедура ПодразделениеПриИзменении(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					ЭлементОтбора.ПравоеЗначение = Отчет.Подразделение;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

// Возвращает номер субконто по пути поля компоновки.
//
// Параметры:
//  Путь - Строка - Путь поля субконто.
// 
// Возвращаемое значение:
//  Число, Неопределено - номер субконто.
//
Функция НомерСубконто(Путь) Экспорт
	
	НомерСтрокой = СтрЗаменить(Путь, "Субконто", "");
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтрокой) Тогда
		
		НомерСубконто = Число(НомерСтрокой);
		
	Иначе
		
		НомерСубконто = Неопределено;
		
	КонецЕсли;

	Возврат НомерСубконто;
	
КонецФункции

// Удаляет служебные элементы отбора, которые не нужно показывать пользователю, и элементы,
// у которых снят флаг использования.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, отбор которого нужно обработать.
//
Процедура УдалитьНеиспользуемыйОтбор(КомпоновщикНастроек) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование ИЛИ ЭтоСлужебныйЭлементОтбора(ЭлементОтбора) Тогда
			
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыДляУдаления Цикл
		
		Отбор.Элементы.Удалить(Элемент);
		
	КонецЦикла;

КонецПроцедуры

// Конструктор настроек стандартных отчетов. При помощи этих настроек отчеты обмениваются настройками для расшифровки.
// При заполнении набора настроек не требуется учитывать специфику принимающего отчета.
// Для точной расшифровки в настройках нужно отразить контекст отчета и контекст расшифровываемой ячейки отчета.
// 
// Возвращаемое значение:
//  Структура - Пустая коллекция настроек.
//
Функция НовыйУниверсальныеНастройки() Экспорт
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("КлючВарианта",						Неопределено);
	Настройки.Вставить("Счет",								ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	Настройки.Вставить("НачалоПериода",						'00010101');
	Настройки.Вставить("КонецПериода",						'00010101');
	Настройки.Вставить("Организация",						ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Настройки.Вставить("ВключатьОбособленныеПодразделения",	Ложь);
	
	Настройки.Вставить("ПоказательБУ",						Истина);	// По умолчанию БУ включен
	Настройки.Вставить("ПоказательНУ",						Ложь);
	Настройки.Вставить("ПоказательПР",						Ложь);
	Настройки.Вставить("ПоказательВР",						Ложь);
	Настройки.Вставить("ПоказательСумма",					Истина);	// По умолчанию Сумма включена
	Настройки.Вставить("ПоказательКоличество",				Ложь);
	Настройки.Вставить("ПоказательВалютнаяСумма",			Ложь);
	Настройки.Вставить("ПоказательКонтроль",				Ложь);
	Настройки.Вставить("РазвернутоеСальдо",					Ложь);
	Настройки.Вставить("БухТипРесурса", 					""); 	// Указатель на сторону проводки, принимает строковые значения: "Дт" и "Кт"
	
	Настройки.Вставить("ВыводитьЗаголовок", 				Ложь);
	Настройки.Вставить("ВыводитьЕдиницуИзмерения", 			Ложь);
	Настройки.Вставить("ВыводитьПодвал", 					Ложь);
	
	Настройки.Вставить("СписокВидовСубконто",				Новый Массив);
	
	Настройки.Вставить("ПоСубсчетам",						Ложь);
	Настройки.Вставить("ПоСубсчетамКорСчетов",				Ложь);
	
	Настройки.Вставить("Периодичность",						0);	// За период отчета(0), По дням(6), По неделям(7), По декадам(8), По месяцам(9), По кварталам(10),
																// По полугодиям(11), По годам(12),
																// подробнее см. значения параметра "Периодичность" таблицы ОстаткиИОбороты регистра бухгалтерии.
																	
	Настройки.Вставить("РазмещениеДополнительныхПолей",		0);	// В одной колонке(0), В отдельных колонках(1).
	
	Настройки.Вставить("ТаблицаГруппировка",				НовыйГруппировка());
	Настройки.Вставить("ТаблицаДополнительныеПоля",			НовыйДополнительныеПоля());
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	Настройки.Вставить("НастройкиКомпоновки",				НастройкиКомпоновкиДанных);
	Настройки.Вставить("Отбор",								НастройкиКомпоновкиДанных.Отбор);
	Настройки.Вставить("УсловноеОформление",				НастройкиКомпоновкиДанных.УсловноеОформление);
	Настройки.Вставить("Порядок",							НастройкиКомпоновкиДанных.Порядок);
	
	Возврат Настройки;
	
КонецФункции

// Конструктор строки группировки универсальных настроек.
// Таблица группировки (см. НовыйГруппировка()) в коллекции настроек (см. НовыйУниверсальныеНастройки()) 
// представлена в виде массива структур.
// Ключи возвращаемой структуры соответствуют колонкам таблицы группировок стандартного отчета.
// 
// Возвращаемое значение:
// 	Структура - Описывает строку группировки отчета.
//
Функция НовыйСтрокаГруппировки() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Использование");
	Результат.Вставить("Представление");
	Результат.Вставить("Поле");
	Результат.Вставить("ТипГруппировки");

	Возврат Результат;
	
КонецФункции

// Конструктор строки дополнительных полей универсальных настроек.
// Таблица дополнительных полей (см. НовыйДополнительныеПоля) в коллекции настроек (см. НовыйУниверсальныеНастройки) 
// представлена в виде массива структур.
// Ключи возвращаемой структуры соответствуют колонкам таблицы дополнительных полей стандартного отчета.
//
// Возвращаемое значение:
//   Структура - Описывает строку дополнительных полей отчета.
//
Функция НовыйСтрокаДополнительныеПоля() Экспорт
	
	Возврат Новый Структура("Использование, Представление, Поле");
	
КонецФункции

// Проверяет поддерживает ли отчет обмен универсальными настройками (см. НовыйУниверсальныеНастройки).
//
// Параметры:
//  ИмяОтчета - Строка - Имя проверяемого отчета.
// 
// Возвращаемое значение:
//   Булево - Истина, если поддерживает, в противном случае - Ложь.
//
Функция ОтчетПоддерживаетУниверсальныеНастройки(ИмяОтчета) Экспорт
	
	СписокОтчетов = новый Массив;
	СписокОтчетов.Добавить("АнализСубконто");
	СписокОтчетов.Добавить("АнализСчета");
	СписокОтчетов.Добавить("КарточкаСубконто");
	СписокОтчетов.Добавить("КарточкаСчета");
	СписокОтчетов.Добавить("ОборотноСальдоваяВедомость");
	СписокОтчетов.Добавить("ОборотноСальдоваяВедомостьПоСчету");
	СписокОтчетов.Добавить("ОборотыМеждуСубконто");
	СписокОтчетов.Добавить("ОборотыСчета");
	СписокОтчетов.Добавить("ОтчетПоПроводкам");
	СписокОтчетов.Добавить("СводныеПроводки");
	СписокОтчетов.Добавить("ШахматнаяВедомость");
	
	Возврат СписокОтчетов.Найти(ИмяОтчета) <> Неопределено;
	
КонецФункции

// Конструктор параметров открытия формы стандартного отчета.
//
// Возвращаемое значение:
//	Структура - Содержит ключи с параметрами открытия формы.
//
Функция НовыйПараметрыФормыСтандартногоОтчета() Экспорт
	
	ПараметрыФормы= Новый Структура();
	
	ПараметрыФормы.Вставить("ОткрытьРасшифровку", Ложь);
	ПараметрыФормы.Вставить("АдресРасшифровки");
	ПараметрыФормы.Вставить("ИдентификаторРасшифровки");
	ПараметрыФормы.Вставить("ИмяОтчета");
	ПараметрыФормы.Вставить("ИмяИсходногоОтчета");
	ПараметрыФормы.Вставить("РеквизитыПравилРасшифровки");
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает имена разделов настроек стандартного отчета.
// 
// Возвращаемое значение:
//  Структура - Ключ - имя раздела настроек стандартного отчета, значение - флаг заполнения настроек по умолчанию.
//
Функция РазделыНастроекСтандартногоОтчета() Экспорт
	
	РазделыНастроек = Новый Структура();
	
	РазделыНастроек.Вставить("Группировка", 		Ложь);
	РазделыНастроек.Вставить("Отбор", 				Ложь);
	РазделыНастроек.Вставить("Показатели", 			Ложь);
	РазделыНастроек.Вставить("ДополнительныеПоля", 	Ложь);
	РазделыНастроек.Вставить("УсловноеОформление", 	Ложь);
	
	Возврат РазделыНастроек;
	
КонецФункции

//-- НЕ УТ

// Устанавливает период отчета в настройках (см. НовыйУниверсальныеНастройки())
// исходя их переданного значения начала периода и периодичности отчета,
// периодичность при этом будет сброшена.
//
// Параметры:
//  Настройки - Структура - настройки отчета, см. НовыйУниверсальныеНастройки().
//  НачалоПериода - Дата - Дата начала периода.
//
Процедура ПреобразоватьПериодичностьОтчетаВПериод(Настройки, НачалоПериода) Экспорт
	
	Настройки.НачалоПериода = НачалоПериода;
	
	Если Настройки.Периодичность = 6 Тогда // По дням.
		
		Настройки.КонецПериода = КонецДня(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 7 Тогда // По неделям.
		
		Настройки.КонецПериода = КонецНедели(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 8 Тогда // По декадам.
		
		Настройки.КонецПериода = Мин(КонецМесяца(Настройки.НачалоПериода), КонецДня(Настройки.НачалоПериода + 9*60*60*24));
		
	ИначеЕсли Настройки.Периодичность = 9 Тогда // По месяцам.
		
		Настройки.КонецПериода = КонецМесяца(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 10 Тогда // По кварталам.
		
		Настройки.КонецПериода = КонецКвартала(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 11 Тогда // По полугодиям.
		
		Если ДеньГода(Настройки.НачалоПериода) = 1 Тогда
			Настройки.КонецПериода = Дата(Год(Настройки.НачалоПериода), 6, 30,23,59,59);
		Иначе
			Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		КонецЕсли;
		
	ИначеЕсли Настройки.Периодичность = 12 Тогда // По годам.
		
		Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		
	КонецЕсли;

	Настройки.Периодичность = 0; // За период отчета.
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

// Конструктор таблицы группировок универсальных настроек.
// Для того чтобы универсальные настройки (см. НовыйУниверсальныеНастройки) можно было создать на клиенте,
// таблица значений Группировка описывается в виде массива структур (см. НовыйСтрокаГруппировки).
//
// Возвращаемое значение:
//   Массив.
//
Функция НовыйГруппировка()
	
	Возврат Новый Массив();
	
КонецФункции

// Конструктор таблицы Дополнительные поля универсальных настроек.
// Для того чтобы универсальные настройки (см. НовыйУниверсальныеНастройки) можно было создать на клиенте, 
// таблица значений Дополнительные поля описывается в виде массива структур (см. НовыйСтрокаДополнительныеПоля).
// 
// Возвращаемое значение:
//   Массив.
//
Функция НовыйДополнительныеПоля()
	
	Возврат Новый Массив();
	
КонецФункции

Функция ЭтоСлужебныйЭлементОтбора(Знач ЭлементОтбора)
	
	Возврат СтрНачинаетсяС(ЭлементОтбора.Представление, "###");

КонецФункции

//-- НЕ УТ

#КонецОбласти
