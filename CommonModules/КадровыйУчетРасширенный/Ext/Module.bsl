////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенный: Процедуры и функции подсистемы Кадровый учет.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получает сотрудников, работающих в указанной организации по списку физических лиц.
// Соответствие между сотрудниками и физическими лицами не устанавливается.
//
// Параметры:
//	- ФизическиеЛица - массив,
//	- Организация
//	- ОтбиратьПоГоловнойОрганизации (необязательный) по умолчанию Истина, 
//		см. комментарий к методу КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//
// Возвращаемое значение - массив сотрудников.
//
Функция СотрудникиФизическихЛиц(ФизическиеЛица, Организация, ОтбиратьПоГоловнойОрганизации = Истина, РаботникиПоДоговорамГПХ = Неопределено, ВключатьПодработки = Ложь) Экспорт
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	ПараметрыЗапроса.ПодработкиРаботниковПоТрудовымДоговорам = ВключатьПодработки;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник", Истина);
	
КонецФункции

// Возвращает основного сотрудника физического лица в организации.
//
// Параметры:
//		ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//		Организация			- СправочникСсылка.Организации
//		ДатаСведений		- Дата
//		ВыводитьСообщения	- Булево
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники, Неопределено если сотрудника нет.
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо, Организация, ДатаСведений, ВыводитьСообщения = Истина) Экспорт
	
	ПодобранныйСотрудник = Неопределено;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), Истина, Организация, ДатаСведений);
			
		Если Не ОсновныеСотрудники.Количество() > 0 Тогда
				
			Если ВыводитьСообщения Тогда
				ТекстСообщения = Нстр("ru='%1 не работает в организации на %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФизическоеЛицо, Формат(ДатаСведений,"ДЛФ=D"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Сотрудник");
			КонецЕсли;
			
		Иначе
			ПодобранныйСотрудник = ОсновныеСотрудники[0].Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодобранныйСотрудник;
	
КонецФункции

// Получает всех сотрудников физического лица, исключая указанного.
//
Функция ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, Организация, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	ДругиеСотрудники = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
		|	И Сотрудники.Ссылка <> &Сотрудник
		|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПараметрыСоздания = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыСоздания.Организация = Организация;
		ПараметрыСоздания.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыСоздания.НачалоПериода = ДатаНачала;
		ПараметрыСоздания.ОкончаниеПериода = ДатаОкончания;
		ПараметрыСоздания.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		
		СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыСоздания);
		
		Для Каждого СтрокаТаблицы Из СотрудникиОрганизации Цикл
			Если СтрокаТаблицы.Сотрудник <> Сотрудник Тогда
				ДругиеСотрудники.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДругиеСотрудники;
	
КонецФункции

// Создает элемент справочника Сотрудники, подчиненный головному.
//
// Параметры:
//		ГоловнойСотрудник		- СправочникСсылка.Сотрудники
//		УточнениеНаименования	- Строка
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники
//
Функция СоздатьПодработкуСотрудника(ГоловнойСотрудник, УточнениеНаименования) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, ГоловнойСотрудник, "ГоловнойСотрудник,ТабельныйНомер,ГоловнаяОрганизация,Фамилия,Имя,Отчество");
		
	Если КадровыеДанные.Количество() = 0
			Или ГоловнойСотрудник <> КадровыеДанные[0].ГоловнойСотрудник Тогда
			
		ВызватьИсключение НСтр("ru='Не верно указан основной сотрудник'");
		
	КонецЕсли; 
	
	КадровыеДанныеСотрудника = КадровыеДанные[0];
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СотрудникОбъект, КадровыеДанныеСотрудника, "ФизическоеЛицо,ГоловнаяОрганизация");
	СотрудникОбъект.Код = КадровыеДанныеСотрудника.ТабельныйНомер;
	
	СотрудникОбъект.ГоловнойСотрудник = ГоловнойСотрудник;
	СотрудникОбъект.УточнениеНаименования = УточнениеНаименования;
	
	СотрудникОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		КадровыеДанныеСотрудника.Фамилия,
		КадровыеДанныеСотрудника.Имя,
		КадровыеДанныеСотрудника.Отчество,
		,
		СотрудникОбъект.УточнениеНаименования);
	
	СотрудникОбъект.Записать();
	
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции

Функция ДоговорыФизическихЛиц(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговора", 		Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговораГПХ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("Номер", 				Новый ОписаниеТипов("Строка"));
	ТаблицаДоговоров.Колонки.Добавить("Дата", 				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДоговоров.Колонки.Добавить("Начало",				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Окончание",			Новый ОписаниеТипов("Дата"));
	
	ТаблицаГоловныхОрганизаций = ТаблицаФизическихЛиц.Скопировать(, "ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	ТаблицаГоловныхОрганизаций.Свернуть("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	
	Для каждого СтрокаГоловнойОрганизации Из ТаблицаГоловныхОрганизаций Цикл
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", СтрокаГоловнойОрганизации.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", СтрокаГоловнойОрганизации.ОкончаниеПериода);
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация = СтрокаГоловнойОрганизации.ГоловнаяОрганизация;
		ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыПолученияСотрудников.НачалоПериода		= СтрокаГоловнойОрганизации.НачалоПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= СтрокаГоловнойОрганизации.ОкончаниеПериода;
		ПараметрыПолученияСотрудников.КадровыеДанные	= "ТрудовойДоговорНомер,ТрудовойДоговорДата,ДатаПриема,ДатаУвольнения,ПриказОПриемеДатаЗавершенияТрудовогоДоговора";
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		СписокФизическихЛиц = ТаблицаФизическихЛиц.Скопировать(Новый Структура("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода",
			СтрокаГоловнойОрганизации.ГоловнаяОрганизация, СтрокаГоловнойОрганизации.НачалоПериода, СтрокаГоловнойОрганизации.ОкончаниеПериода),
			"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Сотрудник,
			|	&НачалоПериода КАК НачалоПериода,
			|	&ОкончаниеПериода КАК ОкончаниеПериода
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
			
		Запрос.Выполнить();
		
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
		ПараметрыПолученияРабочихМест.РаботникиПоДоговорамГПХ = Истина;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМестаСотрудников.Период,
			|	РабочиеМестаСотрудников.Сотрудник,
			|	РабочиеМестаСотрудников.ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВидДоговора,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорРаботыУслуги)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорАвторскогоЗаказа)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидДоговораГПХ,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА СотрудникиОрганизации.ТрудовойДоговорНомер
			|		ИНАЧЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Номер
			|	КОНЕЦ КАК Номер,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ТрудовойДоговорДата, ДЕНЬ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Дата, ДЕНЬ)
			|	КОНЕЦ КАК Дата,
			|	РабочиеМестаСотрудников.Организация,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаПриема, ДЕНЬ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала, ДЕНЬ)
			|	КОНЕЦ КАК Начало,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА ВЫБОР
			|					КОГДА ВЫБОР
			|							КОГДА СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ПриказОПриемеДатаЗавершенияТрудовогоДоговора, ДЕНЬ)
			|							ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, ДЕНЬ)
			|						КОНЕЦ МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|						ТОГДА ВЫБОР
			|								КОГДА СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|									ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ПриказОПриемеДатаЗавершенияТрудовогоДоговора, ДЕНЬ)
			|								ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, ДЕНЬ)
			|							КОНЕЦ
			|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ) МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|					ТОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ)
			|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|			КОНЕЦ
			|	КОНЕЦ КАК Окончание
			|ПОМЕСТИТЬ ВТДоговорыПредварительно
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник
			|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ПО РабочиеМестаСотрудников.ДокументОснование = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
			|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))";
			
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДоговорыДругаяОрганизация.Период, ДЕНЬ)) КАК СледующийПериод
			|ПОМЕСТИТЬ ВТДоговорыСОкончанием
			|ИЗ
			|	ВТДоговорыПредварительно КАК Договоры
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыПредварительно КАК ДоговорыДругаяОрганизация
			|		ПО Договоры.Сотрудник = ДоговорыДругаяОрганизация.Сотрудник
			|			И Договоры.Организация <> ДоговорыДругаяОрганизация.Организация
			|			И Договоры.Период < ДоговорыДругаяОрганизация.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыСОкончанием.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоговорыСОкончанием.ВидДоговора КАК ВидДоговора,
			|	ДоговорыСОкончанием.ВидДоговораГПХ КАК ВидДоговораГПХ,
			|	ДоговорыСОкончанием.Номер КАК Номер,
			|	ДоговорыСОкончанием.Дата КАК Дата,
			|	ДоговорыСОкончанием.Организация КАК Организация,
			|	ЕСТЬNULL(ДоговорыСНовымНачалом.СледующийПериод, ДоговорыСОкончанием.Начало) КАК Начало,
			|	ВЫБОР
			|		КОГДА ДоговорыСОкончанием.СледующийПериод <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(ДоговорыСОкончанием.СледующийПериод, ДЕНЬ, -1)
			|		ИНАЧЕ ДоговорыСОкончанием.Окончание
			|	КОНЕЦ КАК Окончание
			|ИЗ
			|	ВТДоговорыСОкончанием КАК ДоговорыСОкончанием
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыСОкончанием КАК ДоговорыСНовымНачалом
			|		ПО ДоговорыСОкончанием.Сотрудник = ДоговорыСНовымНачалом.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ДоговорыСОкончанием.Период, ДЕНЬ) = ДоговорыСНовымНачалом.СледующийПериод)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организация,
			|	ФизическоеЛицо,
			|	ВидДоговора УБЫВ,
			|	Начало";
			
		ТаблицаДоговоровГоловнойОрганизации = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТаблицаДоговоровГоловнойОрганизации Из ТаблицаДоговоровГоловнойОрганизации Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДоговоров.Добавить(), СтрокаТаблицаДоговоровГоловнойОрганизации);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДоговоров;
	
КонецФункции

// Возвращает массив подработок сотрудников.
//
// Параметры:
//		ТолькоРазрешенные				- Булево
//		ПараметрыПолученияРабочихМест 	- Структура, см. КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников
//		ВключатьГоловныхСотрудников		- Булево, если значение параметра Ложь, из возвращаемого списка будут
//											исключены головные сотрудники.
//
// Возвращаемое значение:
//		Массив - СправочникСсылка.Сотрудники
//
Функция ПодработкиСотрудников(ТолькоРазрешенные, ПараметрыПолученияРабочихМест, ВключатьГоловныхСотрудников = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияПодработок, ПараметрыПолученияРабочихМест);
	
	ПараметрыПолученияПодработок.РаботникиПоТрудовымДоговорам = ВключатьГоловныхСотрудников;
	ПараметрыПолученияПодработок.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияПодработок.РаботникиПоДоговорамГПХ = Неопределено;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияПодработок);

	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Возвращает Учебное заведение, найденное по наименованию.
// Если не найдено, то возвращает СправочникСсылка.УчебныеЗаведения.ПустаяСсылка().
// Параметры:
//		НаименованиеУчебногоЗаведения	- Строка.
//
// Возвращаемое значение:
//		УчебноеЗаведение - СправочникСсылка.УчебныеЗаведения.
//
Функция УчебноеЗаведениеПоНаименованию(НаименованиеУчебногоЗаведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчебныеЗаведения.Ссылка
	|ИЗ
	|	Справочник.УчебныеЗаведения КАК УчебныеЗаведения
	|ГДЕ
	|	УчебныеЗаведения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеУчебногоЗаведения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.УчебныеЗаведения.ПустаяСсылка();
	КонецЕсли; 
					
КонецФункции

// Возвращает Специальность, найденную по наименованию.
// Если не найдено, то возвращает СправочникСсылка.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка().
// Параметры:
//		НаименованиеСпециальности	- Строка.
//
// Возвращаемое значение:
//		Специальность - СправочникСсылка.КлассификаторСпециальностейПоОбразованию.
//
Функция СпециальностьПоНаименованию(НаименованиеСпециальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторСпециальностейПоОбразованию.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСпециальностейПоОбразованию КАК КлассификаторСпециальностейПоОбразованию
	|ГДЕ
	|	КлассификаторСпециальностейПоОбразованию.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеСпециальности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка();
	КонецЕсли; 
					
КонецФункции

// Возвращает Язык, найденный по наименованию.
// Если не найдено, то возвращает СправочникСсылка.ЯзыкиНародовМира.ПустаяСсылка().
// Параметры:
//		НаименованиеЯзыка	- Строка.
//
// Возвращаемое значение:
//		Язык - СправочникСсылка.ЯзыкиНародовМира.
//
Функция ЯзыкПоНаименованию(НаименованиеЯзыка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯзыкиНародовМира.Ссылка
	|ИЗ
	|	Справочник.ЯзыкиНародовМира КАК ЯзыкиНародовМира
	|ГДЕ
	|	ЯзыкиНародовМира.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЯзыка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ЯзыкиНародовМира.ПустаяСсылка();
	КонецЕсли; 
					
КонецФункции

// См. КадровыйУчет.ПравоНаРазделУчета.
Функция ПравоНаРазделУчета(Право, ВидУчета) Экспорт
	
	Если ВидУчета = "ПлановыеНачисления" Тогда
		ОбъектМетаданных = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	Иначе
		Возврат КадровыйУчетБазовый.ПравоНаРазделУчета(Право, ВидУчета);
	КонецЕсли;
	
	Возврат ПравоДоступа(Право, ОбъектМетаданных);
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПолучениеРабочихМестСотрудниковОрганизации

Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников() Экспорт
	
	ПараметрыДляЗапроса = КадровыйУчетБазовый.ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	ПараметрыДляЗапроса.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыДляЗапроса.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыДляЗапроса.Вставить("РаботникиПоДоговорамГПХ", Ложь);
	
	ПараметрыДляЗапроса.Вставить("ВключатьПодработкиГоловныхСотрудниковОтбора", Истина);
	
	Возврат ПараметрыДляЗапроса;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	ИменаВТКУничтожению = Новый Массив;
	
	Запрос = Новый Запрос;
	
	РаботникиПоТрудовымДоговорам = Ложь;
	ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	РаботникиПоДоговорамГПХ = Ложь;
	
	Если Параметры.Свойство("РаботникиПоТрудовымДоговорам")
		И Параметры.РаботникиПоТрудовымДоговорам = Истина Тогда
		
		РаботникиПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки")
		И Параметры.Свойство("ПодработкиРаботниковПоТрудовымДоговорам")
		И Параметры.ПодработкиРаботниковПоТрудовымДоговорам = Истина Тогда
		
		ПодработкиРаботниковПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
		И Параметры.Свойство("РаботникиПоДоговорамГПХ")
		И Параметры.РаботникиПоДоговорамГПХ = Истина Тогда
		
		РаботникиПоДоговорамГПХ = Истина;
		
	КонецЕсли;
	
	Если Не РаботникиПоТрудовымДоговорам
		И Не ПодработкиРаботниковПоТрудовымДоговорам
		И Не РаботникиПоДоговорамГПХ Тогда
		
		РаботникиПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам
		Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
		
		Если РаботникиПоДоговорамГПХ Тогда
			
			ИмяВТРабочиеМестаПоТрудовымДоговорам = "ВТРабочиеМестаПоТрудовымДоговорам";
			ИменаВТКУничтожению.Добавить(ИмяВТРабочиеМестаПоТрудовымДоговорам);
			
		Иначе
			ИмяВТРабочиеМестаПоТрудовымДоговорам = ИмяВТРабочиеМестаСотрудников;
		КонецЕсли;
		
		ПараметрыБазовые = Параметры;
		
		Если ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			Если Не ПустаяСтрока(Параметры.ИмяПоляСотрудник) И Параметры.ВключатьПодработкиГоловныхСотрудниковОтбора Тогда
				
				ТекстЗапросаОтбораСотрудников =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Сотрудники.Ссылка КАК Сотрудник,
					|	СотрудникиПериоды.ДатаНачала КАК НачалоПериода,
					|	СотрудникиПериоды.ДатаОкончания КАК ОкончаниеПериода
					|ПОМЕСТИТЬ ВТСотрудникиПодработкиПериоды
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
					|		ПО Сотрудники.ГоловнойСотрудник = СотрудникиПериоды.Сотрудник
					|			И (Сотрудники.ГоловнойСотрудник <> Сотрудники.Ссылка)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК ПодработкиПериоды
					|		ПО Сотрудники.Ссылка = ПодработкиПериоды.Сотрудник
					|ГДЕ
					|	ПодработкиПериоды.Сотрудник ЕСТЬ NULL 
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	СотрудникиПериоды.Сотрудник,
					|	СотрудникиПериоды.ДатаНачала,
					|	СотрудникиПериоды.ДатаОкончания
					|ИЗ
					|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
				
				ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаОтбораСотрудников, ТолькоРазрешенные);
				
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
				
				ПараметрыБазовые = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
				ЗаполнитьЗначенияСвойств(ПараметрыБазовые, Параметры, , "ИмяВТСотрудникиПериоды,ИмяПоляСотрудник,ИмяПоляНачалоПериода,ИмяПоляОкончаниеПериода");
				ПараметрыБазовые.ИмяВТСотрудникиПериоды = "ВТСотрудникиПодработкиПериоды";
				
				ИменаВТКУничтожению.Добавить("ВТСотрудникиПодработкиПериоды");
				
				Если СоздаватьПромежуточныеТаблицы Тогда
					
					ЗапросВТСотрудникиПодработкиПериоды = Новый Запрос;
					ЗапросВТСотрудникиПодработкиПериоды.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
					
					ЗапросВТСотрудникиПодработкиПериоды.Текст = ТекстЗапросаОтбораСотрудников;
					ЗапросВТСотрудникиПодработкиПериоды.Выполнить();
					
				Иначе
					ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаОтбораСотрудников);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не РаботникиПоТрудовымДоговорам Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыБазовые.Отборы,
					"ЭтоГоловнойСотрудник", "=", Ложь);
				
			КонецЕсли;
			
		Иначе
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыБазовые.Отборы,
				"ЭтоГоловнойСотрудник", "=", Истина);
			
		КонецЕсли;
		
		ЗапросРабочихМест = КадровыйУчетБазовый.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, ПараметрыБазовые, МенеджерВременныхТаблиц);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросРабочихМест);
		
	КонецЕсли;
	
	Если РаботникиПоДоговорамГПХ Тогда
		
		ТекстыЗапросаРабочиеМеста = Новый Массив;
		Если РаботникиПоТрудовымДоговорам
			Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			ТекстЗапросаРабочиеМеста =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РабочиеМестаПоТрудовымДоговорам.Период,
				|	РабочиеМестаПоТрудовымДоговорам.ПериодЗаписи,
				|	РабочиеМестаПоТрудовымДоговорам.ГоловнаяОрганизация,
				|	РабочиеМестаПоТрудовымДоговорам.Организация,
				|	РабочиеМестаПоТрудовымДоговорам.Сотрудник,
				|	РабочиеМестаПоТрудовымДоговорам.ГоловнойСотрудник,
				|	РабочиеМестаПоТрудовымДоговорам.ФизическоеЛицо,
				|	РабочиеМестаПоТрудовымДоговорам.Подразделение,
				|	РабочиеМестаПоТрудовымДоговорам.Должность,
				|	РабочиеМестаПоТрудовымДоговорам.ДолжностьПоШтатномуРасписанию,
				|	РабочиеМестаПоТрудовымДоговорам.КоличествоСтавок,
				|	РабочиеМестаПоТрудовымДоговорам.ВидЗанятости,
				|	РабочиеМестаПоТрудовымДоговорам.ВидСобытия,
				|	РабочиеМестаПоТрудовымДоговорам.ВидДоговора,
				|	РабочиеМестаПоТрудовымДоговорам.РольСотрудника,
				|	РабочиеМестаПоТрудовымДоговорам.ДокументОснование
				|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
				|ИЗ
				|	ВТРабочиеМестаПоТрудовымДоговорам КАК РабочиеМестаПоТрудовымДоговорам";
				
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаПоТрудовымДоговорам", ИмяВТРабочиеМестаПоТрудовымДоговорам);
			
			ТекстыЗапросаРабочиеМеста.Добавить(ТекстЗапросаРабочиеМеста);
			
		КонецЕсли;
		
		УсловияОтбора = "";
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			
			ПараметрыОрганизации = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
			
			УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация В (&ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация)";
			ТекущиеКадровыеДанныеСотрудниковОрганизация = ПараметрыОрганизации.ГоловныеОрганизации;
			
			Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация В (&ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация)";
				ТекущиеКадровыеДанныеСотрудниковОрганизация = ПараметрыОрганизации.Организации;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация", ТекущиеКадровыеДанныеСотрудниковОрганизация);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			
			УсловияОтбора = ?(ПустаяСтрока(УсловияОтбора), "", УсловияОтбора + Символы.ПС + "	И ")
				+ "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение В ИЕРАРХИИ (&ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение)";
			
			Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение", Параметры.Подразделение);
			
		КонецЕсли;
		
		ТекстыЗапросаПоДоговорамГПХ = Новый Массив;
		ТекстыЗапросаПоДоговорамГПХ.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|			ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|	КОНЕЦ КАК Период,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|			ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|	КОНЕЦ КАК ПериодЗаписи,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение,
			|	NULL КАК Должность,
			|	NULL КАК ДолжностьПоШтатномуРасписанию,
			|	NULL КАК КоличествоСтавок,
			|	NULL КАК ВидЗанятости,
			|	NULL КАК ВидСобытия,
			|	NULL КАК ВидДоговора,
			|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник) КАК РольСотрудника,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
			|ПОМЕСТИТЬ ВТРабочиеМестаПоДоговорамГПХ
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ПО (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала < ВЫБОР
			|				КОГДА СотрудникиПериоды.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ СотрудникиПериоды.ОкончаниеПериода
			|			КОНЕЦ)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= СотрудникиПериоды.НачалоПериода
			|			И (ВЫБОР
			|				КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|					ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|				ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|			КОНЕЦ <> ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник");
		
		Если Не ПустаяСтрока(УсловияОтбора) Тогда
			
			ТекстыЗапросаПоДоговорамГПХ.Добавить("ГДЕ");
			ТекстыЗапросаПоДоговорамГПХ.Добавить(УсловияОтбора);
			
		КонецЕсли;
		
		ТекстыЗапросаПоДоговорамГПХ.Добавить("ОБЪЕДИНИТЬ ВСЕ");
		ТекстыЗапросаПоДоговорамГПХ.Добавить(
			"ВЫБРАТЬ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания1,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнойСотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение,
			|	NULL КАК Должность,
			|	NULL КАК ДолжностьПоШтатномуРасписанию,
			|	NULL КАК КоличествоСтавок,
			|	NULL КАК ВидЗанятости,
			|	NULL КАК ВидСобытия,
			|	NULL КАК ВидДоговора,
			|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник) КАК РольСотрудника,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= СотрудникиПериоды.НачалоПериода
			|			И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания <= ВЫБОР
			|				КОГДА СотрудникиПериоды.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ СотрудникиПериоды.ОкончаниеПериода
			|			КОНЕЦ)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник");
		
		Если Не ПустаяСтрока(УсловияОтбора) Тогда
			
			ТекстыЗапросаПоДоговорамГПХ.Добавить("ГДЕ");
			ТекстыЗапросаПоДоговорамГПХ.Добавить(УсловияОтбора);
			
		КонецЕсли;
		
		ТекстЗапросаПоДоговорамГПХ = СтрСоединить(ТекстыЗапросаПоДоговорамГПХ, Символы.ПС);
		
		Если ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
			
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ,
				"И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник", "");
			
		КонецЕсли;
		
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
		
		Если РаботникиПоТрудовымДоговорам
			Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ПОМЕСТИТЬ ВТРабочиеМестаПоДоговорамГПХ", "");
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ", "ВЫБРАТЬ");
			
			ТекстыЗапросаРабочиеМеста.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			
		Иначе
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТРабочиеМестаПоДоговорамГПХ", ИмяВТРабочиеМестаСотрудников);
		КонецЕсли;
		
		ТекстыЗапросаРабочиеМеста.Добавить(ТекстЗапросаПоДоговорамГПХ);
		ТекстЗапросаРабочиеМеста = СтрСоединить(ТекстыЗапросаРабочиеМеста, Символы.ПС);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаРабочиеМеста, ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаРабочиеМеста);
		
	КонецЕсли;
	
	Если ИменаВТКУничтожению.Количество() > 0
		И Не ПустаяСтрока(ИмяВТРабочиеМестаСотрудников) Тогда
		
		Для каждого ИмяТаблицы Из ИменаВТКУничтожению Цикл
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ИмяТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	ПоляВТРабочиеМеста = КадровыйУчетБазовый.ПоляВТРабочиеМестаСотрудников();
	ПоляВТРабочиеМеста.Вставить("ГоловнойСотрудник", "КадроваяИсторияСотрудников.ГоловнойСотрудник");
	ПоляВТРабочиеМеста.Вставить("КоличествоСтавок");
	ПоляВТРабочиеМеста.Вставить("РольСотрудника", "ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)");
	ПоляВТРабочиеМеста.Вставить("ДолжностьПоШтатномуРасписанию");
	ПоляВТРабочиеМеста.Вставить("ВидДоговора");
	
	Возврат ПоляВТРабочиеМеста;
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРегламентированнойОтчетности

// см. КадровыйУчет.СреднесписочнаяЧисленностьРаботающих
//
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	
	ДанныеЧисленности = СтатистикаПерсонала.ДанныеОЧисленности();
	СтатистикаПерсоналаРасширенный.СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ДанныеЧисленности);
	
	Возврат ДанныеЧисленности;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеФизическихЛиц

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхФизическихЛиц";
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ИсточникиДанных, "ВТКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник, Ложь);
			
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеФизическихЛиц", ИмяВТКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, ИменаКадровыхДанных, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "ВТОтборовРазличныхФизическихЛиц";
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляСотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляПериод") Тогда
				ОписательВТОтборов.Вставить("ИмяПоляПериод", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			КонецЕсли;
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборов";
		
		Если Не ТаблицаОтборовСодержитПолеПериод Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период КАК Период,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
		КонецЕсли;
		
		Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
		ИначеЕсли Не ФормироватьТаблицуРазличных Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеПериод Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период КАК Период,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляПериод);
			КонецЕсли;
			
			Если Не ТаблицаОтборовСодержитПолеСотрудник Тогда
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник КАК Сотрудник,", "");
			Иначе
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВТОтборов.ИмяПоляСотрудник);
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = "";
		
		Запрос = КадровыйУчетБазовый.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ИсточникиДанных, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, Ложь);
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
	ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ИменаКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФизическихЛиц = "ВТОбразованияФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаОбразование.Владелец КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.Ссылка,
		|	ФизическиеЛицаОбразование.ВидОбразования,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.Основание
		|ПОМЕСТИТЬ ВТОбразованияФизическихЛиц
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ФизическиеЛицаОбразование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО ФизическиеЛицаОбразование.Владелец = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	НЕ ФизическиеЛицаОбразование.ПометкаУдаления
		|{ГДЕ
		|	ФизическиеЛицаОбразование.Владелец.* КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.ВидОбразования.*,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования.*,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения.*,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение.*,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность.*,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента.*,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.Основание}";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОбразованияФизическихЛиц", ИмяВТОбразованияФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТТрудоваяДеятельностьФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТТрудоваяДеятельностьФизическихЛиц = "ВТТрудоваяДеятельностьФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТрудоваяДеятельностьФизическихЛиц.Организация,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаНачала,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания,
		|	ТрудоваяДеятельностьФизическихЛиц.Должность
		|ПОМЕСТИТЬ ВТТрудоваяДеятельностьФизическихЛиц
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельностьФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТТрудоваяДеятельностьФизическихЛиц", ИмяВТТрудоваяДеятельностьФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальностиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальностиФизическихЛиц = "ВТСпециальностиФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СпециальностиФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСпециальностиФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПолучатьБудущиеЗначенияСтажей = Ложь, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц", ИмяПоляВидСтажа = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	МАКСИМУМ(СтажиФизическихЛиц.Период) КАК ПериодСтажа
		|ПОМЕСТИТЬ ВТМаксимальныеПериодыСтажейФизическихЛиц
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = ТаблицаОтборовФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛиц.ВидСтажа = ТаблицаОтборовФизическихЛиц.ВидСтажа
		|			И СтажиФизическихЛиц.Период <= ТаблицаОтборовФизическихЛиц.Период
		|ГДЕ
		|	ТаблицаОтборовФизическихЛиц.Период >= СтажиФизическихЛиц.ДатаОтсчета
		|{ГДЕ
		|	СтажиФизическихЛиц.ФизическоеЛицо.*,
		|	СтажиФизическихЛиц.ВидСтажа.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборовФизическихЛиц.Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ВидСтажа,
		|	ПериодСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛиц.Период КАК Период,
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ПериодСтажа КАК ПериодСтажа,
		|	МИНИМУМ(СтажиФизическихЛицСледующие.Период) КАК СледующийПериодСтажа
		|ПОМЕСТИТЬ ВТПериодыСтажейФизическихЛиц
		|ИЗ
		|	ВТМаксимальныеПериодыСтажейФизическихЛиц КАК СтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛицСледующие
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицСледующие.ФизическоеЛицо
		|			И СтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛицСледующие.ВидСтажа
		|			И СтажиФизическихЛиц.ПериодСтажа < СтажиФизическихЛицСледующие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СтажиФизическихЛиц.Период,
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ПериодСтажа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ВидСтажа,
		|	ПериодСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеПериодыСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыСтажейФизическихЛиц.Период КАК Период,
		|	ПериодыСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.Период КАК ПериодИзменения,
		|	ПериодыСтажейФизическихЛиц.СледующийПериодСтажа КАК СледующийПериодИзменения,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	ВЫБОР
		|		КОГДА ГОД(ПериодыСтажейФизическихЛиц.Период) - ГОД(СтажиФизическихЛиц.ДатаОтсчета) > 0
		|			ТОГДА ГОД(ПериодыСтажейФизическихЛиц.Период) - ГОД(СтажиФизическихЛиц.ДатаОтсчета) - ВЫБОР
		|					КОГДА МЕСЯЦ(СтажиФизическихЛиц.ДатаОтсчета) > МЕСЯЦ(ПериодыСтажейФизическихЛиц.Период)
		|						ТОГДА 1
		|					КОГДА МЕСЯЦ(СтажиФизическихЛиц.ДатаОтсчета) = МЕСЯЦ(ПериодыСтажейФизическихЛиц.Период)
		|							И ДЕНЬ(СтажиФизическихЛиц.ДатаОтсчета) > ДЕНЬ(ПериодыСтажейФизическихЛиц.Период)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Лет
		|ПОМЕСТИТЬ ВТГодыСтажейФизическихЛиц
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыСтажейФизическихЛиц КАК ПериодыСтажейФизическихЛиц
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = ПериодыСтажейФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛиц.ВидСтажа = ПериодыСтажейФизическихЛиц.ВидСтажа
		|			И СтажиФизическихЛиц.Период = ПериодыСтажейФизическихЛиц.ПериодСтажа
		|{ГДЕ
		|	СтажиФизическихЛиц.ФизическоеЛицо.*,
		|	СтажиФизическихЛиц.ВидСтажа.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГодыСтажейФизическихЛиц.Период КАК Период,
		|	ГодыСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ГодыСтажейФизическихЛиц.ПериодИзменения КАК ПериодИзменения,
		|	ГодыСтажейФизическихЛиц.СледующийПериодИзменения КАК СледующийПериодИзменения,
		|	ГодыСтажейФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ГодыСтажейФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	ГодыСтажейФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	ГодыСтажейФизическихЛиц.РазмерДней КАК РазмерДней,
		|	ГодыСтажейФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	ГодыСтажейФизическихЛиц.Лет КАК Лет,
		|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ГодыСтажейФизическихЛиц.ДатаОтсчета, МЕСЯЦ, ГодыСтажейФизическихЛиц.Лет * 12), ГодыСтажейФизическихЛиц.Период, МЕСЯЦ) - ВЫБОР
		|		КОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(ГодыСтажейФизическихЛиц.ДатаОтсчета, МЕСЯЦ, ГодыСтажейФизическихЛиц.Лет * 12)) > ДЕНЬ(ГодыСтажейФизическихЛиц.Период)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Месяцев,
		|	ДОБАВИТЬКДАТЕ(ГодыСтажейФизическихЛиц.ДатаОтсчета, МЕСЯЦ, ГодыСтажейФизическихЛиц.Лет * 12) КАК ДатаОтсчетаСГодами
		|ПОМЕСТИТЬ ВТМесяцыСтажейФизическихЛиц
		|ИЗ
		|	ВТГодыСтажейФизическихЛиц КАК ГодыСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МесяцыСтажейФизическихЛиц.Период КАК Период,
		|	МесяцыСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МесяцыСтажейФизическихЛиц.ПериодИзменения КАК ПериодИзменения,
		|	МесяцыСтажейФизическихЛиц.СледующийПериодИзменения КАК СледующийПериодИзменения,
		|	МесяцыСтажейФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	МесяцыСтажейФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	МесяцыСтажейФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	МесяцыСтажейФизическихЛиц.РазмерДней КАК РазмерДней,
		|	МесяцыСтажейФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	МесяцыСтажейФизическихЛиц.Лет КАК Лет,
		|	МесяцыСтажейФизическихЛиц.Месяцев КАК Месяцев,
		|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(МесяцыСтажейФизическихЛиц.ДатаОтсчетаСГодами, МЕСЯЦ, МесяцыСтажейФизическихЛиц.Месяцев), МесяцыСтажейФизическихЛиц.Период, ДЕНЬ) КАК Дней,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(МесяцыСтажейФизическихЛиц.Период, МЕСЯЦ)) КАК ДнейТекущегоМесяца,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МесяцыСтажейФизическихЛиц.Период, МЕСЯЦ, -1), МЕСЯЦ)) КАК ДнейПредыдущегоМесяца,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МесяцыСтажейФизическихЛиц.Период, МЕСЯЦ, 1), МЕСЯЦ)) КАК ДнейСледующегоМесяца,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(МесяцыСтажейФизическихЛиц.Период, МЕСЯЦ)) - ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МесяцыСтажейФизическихЛиц.Период, МЕСЯЦ, -1), МЕСЯЦ)) КАК РазницаДней,
		|	ДЕНЬ(МесяцыСтажейФизическихЛиц.Период) КАК ДеньПериода
		|ПОМЕСТИТЬ ВТДниСтажейФизическихЛиц
		|ИЗ
		|	ВТМесяцыСтажейФизическихЛиц КАК МесяцыСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДниСтажейФизическихЛиц.Период КАК Период,
		|	ДниСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДниСтажейФизическихЛиц.ПериодИзменения КАК ПериодИзменения,
		|	ДниСтажейФизическихЛиц.СледующийПериодИзменения КАК СледующийПериодИзменения,
		|	ДниСтажейФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ДниСтажейФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	ДниСтажейФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	ДниСтажейФизическихЛиц.РазмерДней КАК РазмерДней,
		|	ДниСтажейФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	ДниСтажейФизическихЛиц.Лет КАК Лет,
		|	ДниСтажейФизическихЛиц.Месяцев + ДниСтажейФизическихЛиц.РазмерМесяцев КАК Месяцев,
		|	ДниСтажейФизическихЛиц.Дней + ДниСтажейФизическихЛиц.РазмерДней КАК Дней,
		|	ВЫБОР
		|		КОГДА ДниСтажейФизическихЛиц.Дней < ДниСтажейФизическихЛиц.ДеньПериода
		|			ТОГДА ДниСтажейФизическихЛиц.ДнейТекущегоМесяца - ВЫБОР
		|					КОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) > ДниСтажейФизическихЛиц.ДнейСледующегоМесяца
		|						ТОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) - ДниСтажейФизическихЛиц.ДнейСледующегоМесяца
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ДниСтажейФизическихЛиц.ДнейПредыдущегоМесяца + ВЫБОР
		|				КОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) > ДниСтажейФизическихЛиц.ДнейПредыдущегоМесяца
		|					ТОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) - ДниСтажейФизическихЛиц.ДнейПредыдущегоМесяца
		|				ИНАЧЕ 0
		|			КОНЕЦ - ВЫБОР
		|				КОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) > ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|					ТОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) - ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ДнейТекущегоМесяца,
		|	ДниСтажейФизическихЛиц.ДеньПериода,
		|	ДниСтажейФизическихЛиц.Дней КАК ДнейПериода
		|ПОМЕСТИТЬ ВТПредварительноСуммаСтажейФизическихЛиц
		|ИЗ
		|	ВТДниСтажейФизическихЛиц КАК ДниСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДниСтажейФизическихЛиц.Период КАК Период,
		|	ДниСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДниСтажейФизическихЛиц.ПериодИзменения КАК ПериодИзменения,
		|	ДниСтажейФизическихЛиц.СледующийПериодИзменения КАК СледующийПериодИзменения,
		|	ДниСтажейФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ДниСтажейФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	ДниСтажейФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	ДниСтажейФизическихЛиц.РазмерДней КАК РазмерДней,
		|	ДниСтажейФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	ДниСтажейФизическихЛиц.Лет КАК Лет,
		|	ДниСтажейФизическихЛиц.Месяцев + ВЫБОР
		|		КОГДА ДниСтажейФизическихЛиц.Дней >= ВЫБОР
		|				КОГДА ДниСтажейФизическихЛиц.ДнейТекущегоМесяца < 30
		|					ТОГДА ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|				ИНАЧЕ 30
		|			КОНЕЦ
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Месяцев,
		|	ДниСтажейФизическихЛиц.Дней - ВЫБОР
		|		КОГДА ДниСтажейФизическихЛиц.Дней = 30
		|				И ДниСтажейФизическихЛиц.ДнейТекущегоМесяца > 30
		|			ТОГДА 30
		|		КОГДА ДниСтажейФизическихЛиц.Дней >= ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|			ТОГДА ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|		КОГДА ДЕНЬ(ДниСтажейФизическихЛиц.ДатаОтсчета) >= ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|				И ДниСтажейФизическихЛиц.ДеньПериода = ДниСтажейФизическихЛиц.ДнейТекущегоМесяца
		|			ТОГДА ДниСтажейФизическихЛиц.ДнейПериода
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Дней,
		|	ДниСтажейФизическихЛиц.ДнейТекущегоМесяца,
		|	ДниСтажейФизическихЛиц.ДеньПериода,
		|	ДниСтажейФизическихЛиц.ДнейПериода
		|ПОМЕСТИТЬ ВТПредварительноСтажиФизическихЛиц
		|ИЗ
		|	ВТПредварительноСуммаСтажейФизическихЛиц КАК ДниСтажейФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.Период КАК Период,
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ПериодИзменения КАК ПериодИзменения,
		|	СтажиФизическихЛиц.СледующийПериодИзменения КАК СледующийПериодИзменения,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ПериодРегистрации,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема КАК ИсчисляетсяСДатыПриема,
		|	СтажиФизическихЛиц.Лет + (ВЫРАЗИТЬ(СтажиФизическихЛиц.Месяцев / 12 КАК ЧИСЛО(4, 0))) - ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(СтажиФизическихЛиц.Месяцев / 12 КАК ЧИСЛО(4, 0))) > СтажиФизическихЛиц.Месяцев / 12
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Лет,
		|	СтажиФизическихЛиц.Месяцев - ((ВЫРАЗИТЬ(СтажиФизическихЛиц.Месяцев / 12 КАК ЧИСЛО(4, 0))) - ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(СтажиФизическихЛиц.Месяцев / 12 КАК ЧИСЛО(4, 0))) > СтажиФизическихЛиц.Месяцев / 12
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) * 12 КАК Месяцев,
		|	СтажиФизическихЛиц.Дней КАК Дней,
		|	СтажиФизическихЛиц.ДнейПериода КАК ДнейПериода,
		|	СтажиФизическихЛиц.Месяцев + СтажиФизическихЛиц.Лет * 12 КАК ВсегоМесяцев
		|ПОМЕСТИТЬ ВТСтажиФизическихЛиц
		|ИЗ
		|	ВТПредварительноСтажиФизическихЛиц КАК СтажиФизическихЛиц";
	
	Если ПолучатьБудущиеЗначенияСтажей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.Период >= СтажиФизическихЛиц.ДатаОтсчета", "(ИСТИНА)");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Если ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицаОтборовФизическихЛиц.ВидСтажа = СтажиФизическихЛицСледующие.ВидСтажа", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтажиФизическихЛиц.ВидСтажа = ТаблицаОтборовФизическихЛиц.ВидСтажа", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ВидСтажа", "ТаблицаОтборовФизическихЛиц." + ИмяПоляВидСтажа);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСтажиФизическихЛиц", ИмяВТСтажиФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если Не ПустаяСтрока(ИмяВТСтажиФизическихЛиц) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТГодыСтажейФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТМесяцыСтажейФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДниСтажейФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПредварительноСуммаСтажейФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПредварительноСтажиФизическихЛиц";
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянияхВБракеФизическихЛиц = "ВТСведенияОСостоянияхВБракеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияВБракеФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СостоянияВБракеФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСостоянияхВБракеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВоинскомУчетеФизическихЛиц = "ВТСведенияОВоинскомУчетеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ВоинскийУчет", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ВоинскийУчет", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОВоинскомУчетеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОБронированииСотрудников = "ВТСведенияОБронированииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БронированиеСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БронированиеСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОБронированииСотрудников);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа = "ВТСведенияОПараметрахИсчисленияСеверногоСтажа") Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц) Тогда
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
		
		Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПроцентыСевернойНадбавкиФизическихЛиц",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	NULL КАК Период,
			|	NULL КАК ФизическоеЛицо,
			|	NULL КАК ПроцентСевернойНадбавки
			|ПОМЕСТИТЬ ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних";
		
	КонецЕсли;
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(Запрос.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗапросВТМаксимальныеПроцентыПорядковНачисления = ЗарплатаКадрыРасширенный.ЗапросВТМаксимальныеПроцентыПорядковНачисленияСевернойНадбавки("ВТМаксимальныеПроцентыПорядковНачисления");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТМаксимальныеПроцентыПорядковНачисления);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.Период КАК Период,
		|	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|			ТОГДА ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, 0)
		|		ИНАЧЕ ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
		|	КОНЕЦ КАК ПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА МаксимальныеПроцентыПорядковНачисления.ПорядокНачисленияСеверныхНадбавок ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВЫБОР
		|				КОГДА ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|					ТОГДА ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, 0)
		|				ИНАЧЕ ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
		|			КОНЕЦ >= МаксимальныеПроцентыПорядковНачисления.МаксимальноеЗначение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДостигнутМаксимальныйПроцент,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПорядокИсчисленияПроцентаСевернойНадбавки,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|ПОМЕСТИТЬ ВТСведенияОПараметрахИсчисленияСеверногоСтажа
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальныеПроцентыПорядковНачисления КАК МаксимальныеПроцентыПорядковНачисления
		|			ПО ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПорядокИсчисленияПроцентаСевернойНадбавки = МаксимальныеПроцентыПорядковНачисления.ПорядокНачисленияСеверныхНадбавок
		|		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних КАК ПроцентыСевернойНадбавкиФизическихЛиц
		|		ПО ФизическиеЛицаПериоды.Период = ПроцентыСевернойНадбавкиФизическихЛиц.Период
		|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеПроцентыПорядковНачисления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, "ФизическиеЛицаПериоды.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Период", "ФизическиеЛицаПериоды." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник")
		И ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник <> Неопределено 
		И НЕ ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,", "");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТСведенияОПараметрахИсчисленияСеверногоСтажа", ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
		Запрос.Текст, ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	НеобходимыПостоянныеКадровыеДанные = КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбОбразованияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПрофессияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля)
		Или НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСтроковыеСведенияФизическихЛиц(ИмяПоля);
		
	Если Не НеобходимыПостоянныеКадровыеДанные
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		НеобходимыПостоянныеКадровыеДанные =
			Модуль.НеобходимыСведенияОГосударственныхСлужащих(ИмяПоля)
			Или Модуль.НеобходимыСведенияРеестраГосслужащих(ИмяПоля);
			
	КонецЕсли; 
	
	Возврат НеобходимыПостоянныеКадровыеДанные;
	
КонецФункции

Функция НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТелефонМобильный")
		Или ИмяПоля = ВРег("ТелефонМобильныйПредставление")
		Или КадровыйУчетБазовый.НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимаКонтактнаяИнформацияФизическогоЛица(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяКритерия = "Справочник.ФизическиеЛица.КонтактнаяИнформация";
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТелефонМобильный") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильный";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонМобильныйПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильныйПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ДополнительноеУсловие = Новый Структура;
		ДополнительноеУсловие.Вставить("ЛевоеЗначение", "Вид");
		ДополнительноеУсловие.Вставить("ВидСравнения", "=");
		ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
		ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Если Не КритерийДобавлен Тогда
		КритерийДобавлен = КадровыйУчетБазовый.ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска);
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы) Экспорт
	
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ЕстьПодсистемаОрганизационнаяСтруктура = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
	КонецЕсли;
	
	ЕстьПодсистемаГрейды = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	Если ЕстьПодсистемаГрейды Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	ТекстыОписанияПолей = Новый Массив;
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОГрафикахРаботы(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОРазрядахКатегориях(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПКУ(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСостоянииСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГрейды
				И МодульГрейды.ДобавитьПолеСведенийОГрейдах(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСвойствДолжностейГосударственнойСлужбы(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОПринадлежностиДолжностиКВоеннослужащим(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаОрганизационнаяСтруктура
				И МодульОрганизационнаяСтруктура.ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ОстаткиОтпусков.ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			Продолжить;
			
		Иначе
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", ИмяКадровыхДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеСотрудников");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		Если ФормироватьТаблицуРазличных Тогда
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "ВТОтборовРазличныхСотрудников";
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборов.Период КАК Период,
			|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
			|ИЗ
			|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборов.Период КАК Период,
				|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
				|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
				|ИЗ
				|	ВТОтборовСотрудников КАК ТаблицаОтборов";
			
			Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо Тогда
				
				ТекстЗапросаПолученияРазличныхЗаписей = ТекстЗапросаПолученияРазличныхЗаписей + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
					|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка";
				
				ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
					"ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо", "Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо");
				
			КонецЕсли;
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПолученияРазличныхЗаписей, ТолькоРазрешенные);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
		Иначе
			
			Если Не ТаблицаОтборовСодержитПолеФизическоеЛицо Тогда
				
				Запрос.Текст = Запрос.Текст + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
					|		ПО ТаблицаОтборов.Сотрудник = Сотрудники.Ссылка";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаОтборов.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
				
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, "ВТКадровыеДанныеСотрудников", ТаблицаОтборовСодержитПолеФизическоеЛицо, Ложь);
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
		ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ " + ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		Если ПозицияПоместить > 0 Тогда
			ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";", , ПозицияПоместить);
		Иначе
			ПозицияТочкиЗапятой = 0;
		КонецЕсли;
		
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	ОписательВТОтборов.ПолучатьСведенияНаПериодНачалаУчета = ОписательВременнойТаблицыОтборов.ПолучатьСведенияНаПериодНачалаУчета;
	ОписательВТОтборов.ИменаСозданныхВременныхТаблиц = ОписательВременнойТаблицыОтборов.ИменаСозданныхВременныхТаблиц;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТКадровыеДанныеСотрудников);
	
	ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ОстаткиОтпусков.ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГрейды Тогда
		МодульГрейды.ДобавитьТекстЗапросаВТСведенияОГрейдах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстыЗапросовВТСвойстваДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура.ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Если УничтожитьВспомогательныеТаблицы Тогда
		КадровыйУчет.ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОТерриторияхСотрудников = "ВТСведенияОТерриторияхСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ТерриторииСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ТерриторииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОТерриторияхСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГрафикахРаботы = "ВТСведенияОГрафикахРаботы") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГрафикРаботыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВсеЗаписи = Истина;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрафикРаботыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОГрафикахРаботы);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОРазрядахКатегориях") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("РазрядыКатегорииСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"РазрядыКатегорииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОПКУ") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПКУСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПКУСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянииСотрудников = "ВТСведенияОСостоянииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	Запрос = СостоянияСотрудников.ЗапросВТСостоянияСотрудниковНаДаты(ТолькоРазрешенные, ОписаниеФильтра, ИмяВТСведенияОСостоянииСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияКонтрактаДоговораСотрудника = "ВТСведенияКонтрактаДоговораСотрудника") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СведенияКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СведенияКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияКонтрактаДоговораСотрудника);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников = "ВТОсновныеДанныеКонтрактовДоговоровСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ОсновныеДанныеКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ОсновныеДанныеКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСовокупныхТарифныхСтавках = "ВТСведенияОСовокупныхТарифныхСтавках") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияСовокупныхТарифныхСтавокСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыйФОТИтоги", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСовокупныхТарифныхСтавках);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени = "ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Экспорт
	
	Возврат НеобходимыСведенияОТекущихТерриториях(ИмяПоля)
		Или КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля);
	
КонецФункции

// Формирует временную таблицу ВТСтажиСотрудников и помещает ее в менеджер временных таблиц.
// Список сотрудников, видов стажей и дат, по которым необходимо получить данные, берутся из
// временной таблицы ВТИсходныеДанные в менеджере временных таблиц, переданном в качестве параметра.
// Временная таблица обязательно должна содержать колонки Сотрудник,ВидСтажа и Дата.
//
// Параметры:
//		МенеджерВременныхТаблиц
//
// Формируемая временная таблица имеет колонки Сотрудник, ВидСтажа, Дата, ДатаОтсчета(на которую введен стаж),
// РазмерМесяцев, РазмерМесяцевНаДатуОтсчета.
//
Процедура СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные = Истина, ИмяВТИсходныеДанные = "ВТИсходныеДанные", ИмяВТСтажиСотрудников = "ВТСтажиСотрудников") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходныеДанные.Дата КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицамиДляВТСтажи
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсходныеДанные.Сотрудник = Сотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Период,
		|	СотрудникиСФизическимиЛицами.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛицДляВТСтажи
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицамиДляВТСтажи КАК СотрудникиСФизическимиЛицами";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные", ИмяВТИсходныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ВТТаблицаОтборовФизическихЛицДляВТСтажи", , "ВТСтажиФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СотрудникиСФизическимиЛицами.Период КАК Дата,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев КАК РазмерМесяцев
		|ПОМЕСТИТЬ ВТСтажиСотрудников
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицамиДляВТСтажи КАК СотрудникиСФизическимиЛицами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтажиФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиСФизическимиЛицамиДляВТСтажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаОтборовФизическихЛицДляВТСтажи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиСотрудников", ИмяВТСтажиСотрудников);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура создает временную таблицу с датами изменения стажей сотрудников в месяцах
// за указанные интервалы.
// В итоговую таблицу попадают только сотрудники, для которых определены данные стажа.
// 
// Параметры:
//		МенеджерВременныхТаблиц		- менеджер ВТ, в котором должна быть таблица с полями.
//			* Сотрудник, 
//			* Период,
//			* ДатаОкончания
//		ИмяВТСотрудникиПериоды		- Строка
//		ИмяВТПериодыИзмененияСтажа	- Строка
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 		* Сотрудник,
// 		* ВидСтажа,
// 		* ДатаСтажа - дата изменения значения стажа в заданном интервале,
// 		* ЗначениеСтажа - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПериодыИзмененияСтажа(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа", ИмяПоляСотрудник = "Сотрудник",  ИмяПоляВидСтажа = "") Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ВидСтажа КАК ВидСтажа,
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.ДатаОкончания,
		|	Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100 КАК НомерМесяца
		|ПОМЕСТИТЬ ВТНомераМесяцевСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Единицы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Десятки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Сотни
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100 <= РАЗНОСТЬДАТ(СотрудникиПериоды.Период, СотрудникиПериоды.ДатаОкончания, МЕСЯЦ) + 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛиц.Период,
		|	ВЫБОР
		|		КОГДА СотрудникиПериоды.НомерМесяца = 0
		|			ТОГДА СтажиФизическихЛиц.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.Период, МЕСЯЦ, СотрудникиПериоды.НомерМесяца), ДЕНЬ, -(СтажиФизическихЛиц.Дней + ВЫБОР
		|					КОГДА СтажиФизическихЛиц.Дней = 0
		|						ТОГДА 0
		|					ИНАЧЕ ДЕНЬ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.Период, МЕСЯЦ, СотрудникиПериоды.НомерМесяца - 1), МЕСЯЦ)) - 30
		|				КОНЕЦ))
		|	КОНЕЦ КАК ДатаРасчетная,
		|	СотрудникиПериоды.Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев + СотрудникиПериоды.НомерМесяца КАК ЗначениеСтажа,
		|	СтажиФизическихЛиц.ПериодИзменения,
		|	СтажиФизическихЛиц.СледующийПериодИзменения
		|ПОМЕСТИТЬ ВТПредварительноПериодыИзмененияСтажаСДатой
		|ИЗ
		|	ВТНомераМесяцевСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Период <= СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И (ВЫРАЗИТЬ(СотрудникиПериоды.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо)
		|			И (СтажиФизическихЛиц.ПериодИзменения <= СотрудникиПериоды.ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СтажиФизическихЛиц.ДатаРасчетная < СотрудникиПериоды.Период
		|			ТОГДА СотрудникиПериоды.Период
		|		ИНАЧЕ СтажиФизическихЛиц.ДатаРасчетная
		|	КОНЕЦ КАК ДатаСтажа,
		|	СотрудникиПериоды.Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ЗначениеСтажа,
		|	СтажиФизическихЛиц.ПериодИзменения
		|ПОМЕСТИТЬ ВТПредварительноПериодыИзмененияСтажа
		|ИЗ
		|	ВТНомераМесяцевСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредварительноПериодыИзмененияСтажаСДатой КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Период <= СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И СотрудникиПериоды.Сотрудник = СтажиФизическихЛиц.Сотрудник
		|			И (СтажиФизическихЛиц.ПериодИзменения <= СотрудникиПериоды.ДатаОкончания)
		|			И (ВЫБОР
		|				КОГДА ЕСТЬNULL(СтажиФизическихЛиц.СледующийПериодИзменения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ИСТИНА
		|				КОГДА СтажиФизическихЛиц.СледующийПериодИзменения = НЕОПРЕДЕЛЕНО
		|					ТОГДА ИСТИНА
		|				КОГДА ВЫБОР
		|						КОГДА СтажиФизическихЛиц.ДатаРасчетная < СотрудникиПериоды.Период
		|							ТОГДА СотрудникиПериоды.Период
		|						ИНАЧЕ СтажиФизическихЛиц.ДатаРасчетная
		|					КОНЕЦ < СтажиФизическихЛиц.СледующийПериодИзменения
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ГДЕ
		|	СтажиФизическихЛиц.ДатаРасчетная <> ДОБАВИТЬКДАТЕ(СотрудникиПериоды.Период, МЕСЯЦ, -1)
		|	И ВЫБОР
		|			КОГДА СтажиФизическихЛиц.ДатаРасчетная < СотрудникиПериоды.Период
		|				ТОГДА СотрудникиПериоды.Период
		|			ИНАЧЕ СтажиФизическихЛиц.ДатаРасчетная
		|		КОНЕЦ <= СотрудникиПериоды.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПериодыИзмененияСтажа.ДатаСтажа < ПериодыИзмененияСтажа.ПериодИзменения
		|			ТОГДА ПериодыИзмененияСтажа.ПериодИзменения
		|		ИНАЧЕ ПериодыИзмененияСтажа.ДатаСтажа
		|	КОНЕЦ КАК ДатаСтажа,
		|	ПериодыИзмененияСтажа.Сотрудник,
		|	ПериодыИзмененияСтажа.ВидСтажа,
		|	ПериодыИзмененияСтажа.ЗначениеСтажа
		|ПОМЕСТИТЬ ВТПериодыИзмененияСтажа
		|ИЗ
		|	ВТПредварительноПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Если ВРег(ИмяПоляСотрудник) <> ВРег("Сотрудник") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Сотрудник", "." + ИмяПоляСотрудник);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиПериоды.ВидСтажа КАК ВидСтажа,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиПериоды.ВидСтажа", "СотрудникиПериоды." + ИмяПоляВидСтажа);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиПериоды.ВидСтажа,
		|	СотрудникиПериоды.Период
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериодыСтажей
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник.ФизическоеЛицо,
		|	СотрудникиПериоды.ВидСтажа,
		|	СтажиФизическихЛиц.Период
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Сотрудник.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И СотрудникиПериоды.Период < СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ДатаОкончания >= СтажиФизическихЛиц.Период";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Если Не ЗначениеЗаполнено(ИмяПоляВидСтажа) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ВидСтажа,", "");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписательОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц("ВТФизическиеЛицаПериодыСтажей");
	
	ЗапросСтажей = ЗапросВТСтажиФизическихЛиц(Ложь, ОписательОтборов, , "ВТСтажиФизическихЛиц", ИмяПоляВидСтажа);
	ЗапросСтажей.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросСтажей.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст = "";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТЦифры");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТНомераМесяцевСотрудникиПериоды");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТПредварительноПериодыИзмененияСтажаСДатой");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТПредварительноПериодыИзмененияСтажа");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТСтажиФизическихЛиц");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТФизическиеЛицаПериодыСтажей");
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура создает временную таблицу процентов северной надбавки физических лиц
// на указанные даты.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТФизическиеЛицаПериоды с полями 
//		- ФизическоеЛицо, 
//		- Период
//	ИмяТаблицыФизическиеЛицаПериоды - можно передать имя временной таблицы в которой хранятся физические лица и периоды.
//
// В менеджере временных таблиц создается таблица ВТПроцентСевернойНадбавкиФизическихЛиц
// 	- ФизическоеЛицо,
// 	- ПроцентСевернойНадбавки - процент северной надбавки определенный для физического лица.
//
Процедура СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды") Экспорт
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяТаблицыФизическиеЛицаПериоды);
	Запрос = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(Истина, ОписательВременнойТаблицыОтборов, , "ВТПроцентСевернойНадбавкиФизическихЛиц");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников = "ВТСотрудникиПериоды", ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтбораСотрудников", ИмяВТОтбораСотрудников);
	ОписательТаблиц.Вставить("ИмяВТПроцентСевернойНадбавкиСотрудников", ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Возврат ОписательТаблиц;
	
КонецФункции

// Процедура создает временную таблицу с процентом северной надбавки сотрудников 
// на указанную дату.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТСотрудникиПериоды с полями.
//		- Сотрудник, 
//		- Период,
//	ИмяТаблицыСотрудникиПериоды - можно передать имя временной таблицы в которой хранятся сотрудники и периоды.
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 	- Сотрудник,
// 	- Период - период получения процента северной надбавки,
// 	- ПроцентСевернойНадбавки - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательВременныхТаблиц) Экспорт
	
	ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды" +  ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита(); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Период КАК Период,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиПериоды.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ #ИмяТаблицыФизическиеЛицаПериоды#
	|ИЗ
	|	#ИмяТаблицыСотрудникиПериоды# КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = СотрудникиПериоды.Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыФизическиеЛицаПериоды#", ИмяТаблицыФизическиеЛицаПериоды);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыСотрудникиПериоды#"	, ОписательВременныхТаблиц.ИмяВТОтбораСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(ОписательВременныхТаблиц.МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
	|	ФизическиеЛицаПериоды.Период КАК Период,
	|	ПроцентСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
	|	ПроцентСевернойНадбавкиФизическихЛиц.ДостигнутМаксимальныйПроцент КАК ДостигнутоМаксимальноеЗначение
	|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудников
	|ИЗ
	|	#ИмяТаблицыФизическиеЛицаПериоды# КАК ФизическиеЛицаПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиФизическихЛиц КАК ПроцентСевернойНадбавкиФизическихЛиц
	|		ПО ФизическиеЛицаПериоды.Период = ПроцентСевернойНадбавкиФизическихЛиц.Период
	|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиФизическихЛиц";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПроцентСевернойНадбавкиСотрудников", ОписательВременныхТаблиц.ИмяВТПроцентСевернойНадбавкиСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыФизическиеЛицаПериоды#", ИмяТаблицыФизическиеЛицаПериоды);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТекущаяКадроваяРасстановка(ТолькоРазрешенные, Организация, Дата, ИмяВТТекущаяКадроваяРасстановка = "ВТТекущаяКадроваяРасстановка") Экспорт
	
	Запрос = Новый Запрос;
	ИмяПараметраОрганизация = "";
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&Дата КАК Период,
		|	Организации.Ссылка.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОтборПоГоловнойОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстУсловия =
			"ГДЕ
			|	Организации.Ссылка = &Организация";
		
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Организация", Организация);
		Иначе
			ИмяПараметраОрганизация = "ПараметрОрганизацияВТТекущаяКадроваяРасстановка";
			Запрос.УстановитьПараметр("&Организация", "&" + ИмяПараметраОрганизация);
			Запрос.УстановитьПараметр(ИмяПараметраОрганизация, Организация);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстУсловия;
		
	КонецЕсли;
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", Дата);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПоГоловнойОрганизации", "ГоловнаяОрганизация");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", " В ", Организация);
	КонецЕсли; 
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория КАК РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ШтатноеРасписание.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И &ОтборПоОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.ОтношениеКЕНВД,
		|	ШтатноеРасписание.СтатьяФинансирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтборПоГоловнойОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудниковСрезПоследних";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТТекущаяКадроваяРасстановка, ТолькоРазрешенные);
	
	ТекстУсловияОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстУсловияОтбора = "	И (КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация)";
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", Организация);
		Иначе
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", "&" + ИмяПараметраОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "И &ОтборПоОрганизация", ТекстУсловияОтбора);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "ВТТекущаяКадроваяРасстановка", ИмяВТТекущаяКадроваяРасстановка);
	
	Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
		ТекстЗапроса,
		ЗапросВТИмяРегистраСрез.Текст,
		ТекстЗапросаВТТекущаяКадроваяРасстановка);
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТТекущаяКадроваяРасстановка(МенеджерВременныхТаблиц, Организация = Неопределено, Дата = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ТаблицаФильтр.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаФильтр.Добавить();
	СтрокаТаблицы.Период = Дата;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтр));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.Период,
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
	Запрос.УстановитьПараметр("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании",
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ КАК РазрядКатегория,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок,
		|	МАКСИМУМ(ГрафикиРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботыСотрудников
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикиРаботыСотрудников
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должность,
		|	Подразделение";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.Период,
			|	NULL КАК ПоказательТарифнойСтавки,
			|	0 КАК ТарифнаяСтавка,
			|	0 КАК РазмерТарифнойСтавки,
			|	0 КАК Оклад,
			|	0 КАК Надбавка,
			|	0 КАК ФОТ,
			|	NULL КАК ОсновноеНачисление,
			|	NULL КАК ПериодЗаписиНачислений,
			|	NULL КАК Регистратор
			|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
	Иначе
		
		ВТКУничтожению = Новый Массив;
		ВТКУничтожению.Добавить("ВТПлановыйФОТИтогиСрезПоследних ");
				
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ПлановыйФОТИтоги", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
				
		ЗапросВТПлановыйФОТИтогиСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыйФОТИтоги", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыйФОТИтогиСрезПоследних);
		
		ТекстЗапросаВТТарифнаяСтавкаСотрудников =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Период КАК Период,
		|	ПлановыйФОТИтоги.Период КАК ПериодЗаписиНачислений,
		|	ПлановыйФОТИтоги.РегистраторСобытия КАК Регистратор,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ПоказательТарифнойСтавки, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательТарифнойСтавки,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ТарифнаяСтавка, 0) КАК РазмерТарифнойСтавки,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ФОТ, 0) КАК Оклад,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.Надбавка, 0) КАК Надбавка,
		|	ЕСТЬNULL(ПлановыйФОТИтоги.ФОТ, 0) КАК ФОТ,
		|	ПлановыйФОТИтоги.ОсновноеНачисление КАК ОсновноеНачисление
		|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
		|{ВЫБРАТЬ
		|	Сотрудник,
		|	Период,
		|	ПоказательТарифнойСтавки.*,
		|	ТарифнаяСтавка,
		|	РазмерТарифнойСтавки,
		|	Оклад,
		|	Надбавка,
		|	ФОТ,
		|	ОсновноеНачисление}
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТИтогиСрезПоследних КАК ПлановыйФОТИтоги 
		|		ПО СотрудникиПериоды.Сотрудник = ПлановыйФОТИтоги.Сотрудник
		|			И СотрудникиПериоды.Период = ПлановыйФОТИтоги.Период}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
		
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
		ТекстЗапроса = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ЗапросВТПлановыйФОТИтогиСрезПоследних.Текст,
			ТекстЗапросаВТТарифнаяСтавкаСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ТекстЗапроса, ВТКУничтожению);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеУдержанияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеУдержанияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,ДатаНачала,ДатаОкончания", ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляОтбораСотрудников, ",", , Истина);
		ПоляОтбораСотрудников = Новый Структура("Сотрудник,ДатаНачала,ДатаОкончания", МассивПолей[0], МассивПолей[1], МассивПолей[2]);
	КонецЕсли; 
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеУдержания", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ВТКУничтожению = Новый Массив;
	ВТКУничтожению.Добавить("ВТВсеПлановыеУдержания");
	ВТКУничтожению.Добавить("ВТПлановыеУдержанияСОсновнымПоказателем");
	ВТКУничтожению.Добавить("ВТЗначенияПериодическихПоказателейУдержаний");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "ФизическоеЛицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.ДатаНачала);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗапросВсеПлановыеУдержания = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ПлановыеУдержания",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТВсеПлановыеУдержания");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВсеПлановыеУдержания);
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВсеПлановыеУдержания.Текст, "ИзмеренияДаты", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
	
	ТекстЗапросаОтбораУдержаний =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеПлановыеУдержания.Период,
		|	ВсеПлановыеУдержания.ФизическоеЛицо,
		|	ВсеПлановыеУдержания.Организация,
		|	ВсеПлановыеУдержания.Регистратор,
		|	ВсеПлановыеУдержания.Удержание,
		|	ВсеПлановыеУдержания.ДокументОснование,
		|	УдержанияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСОсновнымПоказателем
		|ИЗ
		|	ВТВсеПлановыеУдержания КАК ВсеПлановыеУдержания
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		|		ПО ВсеПлановыеУдержания.Удержание = УдержанияПоказатели.Ссылка
		|			И (УдержанияПоказатели.ОсновнойПоказатель)}
		|ГДЕ
		|	ВсеПлановыеУдержания.Используется";
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПлановыеУдержанияСОсновнымПоказателем", "Показатель,ФизическоеЛицо,Организация,ДокументОснование");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		"ВТЗначенияПериодическихПоказателейУдержаний");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборСотрудников.ДатаОкончания КАК Период,
		|	МАКСИМУМ(ОтборСотрудников.Сотрудник) КАК Сотрудник,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель КАК ОсновнойПоказатель,
		|	ПолучателиУдержаний.Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ КАК Значение,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0) КАК Предел
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСотрудников
		|ИЗ
		|	ВТОтборСотрудников КАК ОтборСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСОсновнымПоказателем КАК ПлановыеУдержанияСОсновнымПоказателем
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.Удержание = ПолучателиУдержаний.Удержание
		|				И ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
		|				И ПлановыеУдержанияСОсновнымПоказателем.Организация = ПолучателиУдержаний.Организация
		|				И ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование = ПолучателиУдержаний.ДокументОснование}
		|			{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейУдержаний КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо
		|				И ПлановыеУдержанияСОсновнымПоказателем.Организация = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация
		|				И ПлановыеУдержанияСОсновнымПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|				И ПлановыеУдержанияСОсновнымПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|				И ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование}
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.Регистратор = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент}
		|		ПО (ВЫРАЗИТЬ(ОтборСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо)
		|			И (ОтборСотрудников.Сотрудник.ГоловнаяОрганизация = ВЫРАЗИТЬ(ПлановыеУдержанияСОсновнымПоказателем.Организация КАК Справочник.Организации).ГоловнаяОрганизация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборСотрудников.ДатаОкончания,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель,
		|	ПолучателиУдержаний.Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеУдержанияСотрудников", ИмяВТПлановыеУдержанияСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.Сотрудник", "ОтборСотрудников." + ПоляОтбораСотрудников.Сотрудник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.ДатаОкончания", "ОтборСотрудников." + ПоляОтбораСотрудников.ДатаОкончания);
	
	Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
		ЗапросВсеПлановыеУдержания.Текст,
		ТекстЗапросаОтбораУдержаний,
		ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Текст,
		ТекстЗапроса);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ВТКУничтожению);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,Период", ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников(ПоляОтбораСотрудников);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	NULL КАК Период,
			|	NULL КАК ПериодЗаписи,
			|	NULL КАК Регистратор,
			|	NULL КАК Сотрудник,
			|	NULL КАК Начисление,
			|	NULL КАК Размер,
			|	NULL КАК ОсновнойПоказатель,
			|	NULL КАК ЗначениеОсновногоПоказателя,
			|	NULL КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно
			|ГДЕ
			|	ЛОЖЬ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
	Иначе
		
		ВТКУничтожению = Новый Массив;
		ВТКУничтожению.Добавить("ВТПлановыеНачисленияСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТЗначенияПоказателейСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТПлановыйФОТСотрудниковСрезПоследних");
		ВТКУничтожению.Добавить("ВТПлановыеНачисленияСотрудниковПредварительно");
		ВТКУничтожению.Добавить("ВТПорядокОсновныхНачислений");
		ВТКУничтожению.Добавить("ВТОсновныеНачисленияСотрудников");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.Период);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.УточнитьПараметрыПостроенияСрезаНачислений(ПараметрыПостроения);
		КонецЕсли;
		
		ЗапросВТПлановыеНачисленияСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыеНачисления", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТПлановыеНачисленияСотрудниковСрезПоследних");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ПараметрыПостроения.Отборы = ПоляОтбора;
		
		ЗапросВТЗначенияПоказателей = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТЗначенияПоказателейСотрудниковСрезПоследних");
		
		Если ПоляОтбора <> Неопределено Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.Отборы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПоляОтбора);
			ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
			
			Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
				
				Если ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор") Тогда
					ОписаниеОтбора.ЛевоеЗначение = "РегистраторСобытия";
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗапросВТПлановыйФОТСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыйФОТ", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			"ВТПлановыйФОТСотрудниковСрезПоследних");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыеНачисленияСрезПоследних);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПоказателей);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыйФОТСрезПоследних);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
			|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи КАК ПериодЗаписи,
			|	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
			|	ПлановыеНачисленияСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
			|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL 
			|			ТОГДА ПлановыеНачисленияСрезПоследних.Размер
			|		ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	Начисления.РеквизитДопУпорядочивания КАК Порядок,
			|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ОсновнойПоказатель,
			|	Начисления.ВидВремени
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковПредварительно
			|{ВЫБРАТЬ
			|	Период,
			|	Сотрудник,
			|	Начисление,
			|	ДокументОснование,
			|	Размер}
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковСрезПоследних КАК ПлановыеНачисленияСрезПоследних
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСотрудниковСрезПоследних КАК ПлановыйФОТСрезПоследних
			|		ПО ПлановыеНачисленияСрезПоследних.Период = ПлановыйФОТСрезПоследних.Период
			|			И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
			|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
			|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|			{ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|			ПО Начисления.Ссылка = НачисленияПоказатели.Ссылка
			|				И (НачисленияПоказатели.ОсновнойПоказатель)}
			|		ПО ПлановыеНачисленияСрезПоследних.Начисление = Начисления.Ссылка}
			|ГДЕ
			|	ПлановыеНачисленияСрезПоследних.Используется
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Порядок) КАК Порядок
			|ПОМЕСТИТЬ ВТПорядокОсновныхНачислений
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Начисление) КАК Начисление,
			|	ПорядокОсновногоНачисления.Порядок КАК Порядок
			|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокОсновныхНачислений КАК ПорядокОсновногоНачисления
			|		ПО ПлановыеНачисленияСотрудников.Период = ПорядокОсновногоНачисления.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ПорядокОсновногоНачисления.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Порядок = ПорядокОсновногоНачисления.Порядок
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПорядокОсновногоНачисления.Порядок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.ПериодЗаписи,
			|	ПлановыеНачисленияСотрудников.Регистратор,
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер,
			|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель,
			|	ЗначенияПоказателей.Значение КАК ЗначениеОсновногоПоказателя,
			|	ВЫБОР
			|		КОГДА ОсновныеНачисленияСотрудников.Начисление ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
			|		ПО ПлановыеНачисленияСотрудников.Период = ОсновныеНачисленияСотрудников.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Начисление = ОсновныеНачисленияСотрудников.Начисление
			|			И ПлановыеНачисленияСотрудников.Порядок = ОсновныеНачисленияСотрудников.Порядок}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|		ПО ПлановыеНачисленияСотрудников.Период = ЗначенияПоказателей.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ЗначенияПоказателей.Сотрудник
			|			И ПлановыеНачисленияСотрудников.ОсновнойПоказатель = ЗначенияПоказателей.Показатель
			|			И ПлановыеНачисленияСотрудников.ГоловнаяОрганизация = ЗначенияПоказателей.Организация.ГоловнаяОрганизация}";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
		
		ТекстЗапроса = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(
			ЗапросВТПлановыеНачисленияСрезПоследних.Текст,
			ЗапросВТЗначенияПоказателей.Текст,
			ЗапросВТПлановыйФОТСрезПоследних.Текст,
			ТекстЗапроса);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ТекстЗапроса, ВТКУничтожению);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Позиция (не обязательно)
//		Подразделение (не обязательно).
//		Должность (не обязательно)
// 		КоличествоСтавок (не обязательно).
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать) Экспорт
	
	Если Не ТолькоБронированиеПозиции Тогда
		КадровыйУчетБазовый.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать, Ложь);
	КонецЕсли;
	
	Регистратор = Движения.КадроваяИсторияСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидЗанятостиЕсть = (КадровыеДвижения.Колонки.Найти("ВидЗанятости") <> НеОпределено);
	ВидДоговораЕсть = (КадровыеДвижения.Колонки.Найти("ВидДоговора") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор, ВремяРегистрацииДокумента);
	
	// Получим подразделения по позиции, если требуется.
	Если ПозицияЕсть Тогда
		
		ПозицииМассив = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
		ПодразделенияДолжностиПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииМассив, "Подразделение,Должность");
		
	КонецЕсли;
	
	ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Сотрудник", Истина), "ГоловнойСотрудник");
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		Если КоличествоСтавокЕсть И СтрокаДанных.КоличествоСтавок = 0 И СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			СтрокаДанных.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
		КонецЕсли;
		
		Если Не ТолькоБронированиеПозиции Тогда
			
			// Движение по КадроваяИсторияСотрудников.
			НоваяСтрока = Движения.КадроваяИсторияСотрудников.Добавить();
			НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
			НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
			НоваяСтрока.Организация = СтрокаДанных.Организация;
			
			НоваяСтрока.ГоловнойСотрудник = ГоловныеСотрудники.Получить(НоваяСтрока.Сотрудник);
			НоваяСтрока.ЭтоГоловнойСотрудник = (НоваяСтрока.Сотрудник = НоваяСтрока.ГоловнойСотрудник);
			
			Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущееПодразделение) Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
				ИначеЕсли ПодразделениеЕсть Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяПозиция) Тогда
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
				ИначеЕсли ПозицияЕсть Тогда
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущаяДолжность) Тогда
					НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
				ИначеЕсли ДолжностьЕсть Тогда
					НоваяСтрока.Должность = СтрокаДанных.Должность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущееКоличествоСтавок) Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
				ИначеЕсли КоличествоСтавокЕсть Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущийВидЗанятости) Тогда
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
				ИначеЕсли ВидЗанятостиЕсть Тогда
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ВидЗанятости;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекущийВидДоговора) Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
				ИначеЕсли ВидДоговораЕсть Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
				КонецЕсли;
				
			Иначе
				
				Если ПодразделениеЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
				Иначе
					НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
				КонецЕсли;
				
				Если ДолжностьЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Должность = СтрокаДанных.Должность;
				Иначе
					НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
				КонецЕсли;
				
				Если ПозицияЕсть Тогда
					
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
					
					// Если есть позиция, то подразделение и должность берем из нее.
					Если ЗначениеЗаполнено(СтрокаДанных.Позиция) Тогда
						НоваяСтрока.Подразделение = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Подразделение;
						НоваяСтрока.Должность = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Должность;
					КонецЕсли;
					
				Иначе
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
				КонецЕсли;
				
				Если КоличествоСтавокЕсть Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
				Иначе
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
				КонецЕсли;
				
				Если ВидЗанятостиЕсть Тогда
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ВидЗанятости;
				Иначе
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
				КонецЕсли;
				
				Если ВидДоговораЕсть Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
				Иначе
					НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
			
			Если ДействуетДоЕсть Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передана позиция - проводим по регистру ЗанятыеПозицииШтатногоРасписания.
		Если ПозицияЕсть И КоличествоСтавокЕсть Тогда
			
			Если ТипЗнч(Движения) = Тип("Структура") Тогда
				ЕстьЗанятыеПозицииШтатногоРасписания = Движения.Свойство("ЗанятыеПозицииШтатногоРасписания");
			Иначе
				ЕстьЗанятыеПозицииШтатногоРасписания = Движения.Найти("ЗанятыеПозицииШтатногоРасписания") <> Неопределено;
			КонецЕсли;
			
			Если ЕстьЗанятыеПозицииШтатногоРасписания Тогда
				ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаДанных, ДействуетДоЕсть, ТолькоБронированиеПозиции);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При бронировании позиции предоставляем платформе самой решать в каком порядке записывать движения кадровой истории.
	Если Записывать
		И Движения.КадроваяИсторияСотрудников.Записывать 
		И Не ТолькоБронированиеПозиции Тогда
		
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет кадровые движения документа
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	ПериодыОсвобожденияСтавки - таблица значений с полями:
//		Сотрудник
//		ДатаЗанятияСтавки - дата освобождения ставки.
//		ДатаОсвобождения - Дата условного движения, которое необходимо нейтрализовать
//
Процедура ЗанятьСтавку(Движения, ЗанятыеСтавки) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗанятыеСтавки", ЗанятыеСтавки);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятыеСтавки.Сотрудник КАК Сотрудник,
		|	ЗанятыеСтавки.ДатаЗанятияСтавки КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ЗанятыеСтавки КАК ЗанятыеСтавки";
	
	Запрос.Выполнить();
	
	ПоляОтбора = Новый Структура("КадроваяИсторияСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПоляОтбора.КадроваяИсторияСотрудников, "Регистратор", "<>", Движения.ЗанятыеПозицииШтатногоРасписания.Отбор.Регистратор.Значение);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию, КоличествоСтавок", ПоляОтбора);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Период КАК ДатаЗанятияСтавки,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ПО КадровыеДанныеСотрудников.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
		|			И КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания
		|			И КадровыеДанныеСотрудников.КоличествоСтавок = ЗанятыеПозицииШтатногоРасписания.УсловноеКоличествоСтавок
		|			И КадровыеДанныеСотрудников.Период < ЗанятыеПозицииШтатногоРасписания.Период
		|			И (ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение)";
	
	ВыборкаКадровыхДанных = Запрос.Выполнить().Выбрать();
	
	СтрокаКадровыхДвижений = Новый Структура;
	СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Прием);
	
	Для каждого ЗанятаяСтавка Из ЗанятыеСтавки Цикл
		
		ВыборкаКадровыхДанных.Сбросить();
		Если ВыборкаКадровыхДанных.НайтиСледующий(Новый Структура("Сотрудник, ДатаЗанятияСтавки", ЗанятаяСтавка.Сотрудник, ЗанятаяСтавка.ДатаЗанятияСтавки)) Тогда
			
			СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ВыборкаКадровыхДанных.Позиция);
			СтрокаКадровыхДвижений.Вставить("Позиция", ВыборкаКадровыхДанных.Позиция);
			СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ЗанятаяСтавка.ДатаЗанятияСтавки);
			СтрокаКадровыхДвижений.Вставить("Сотрудник", ЗанятаяСтавка.Сотрудник);
			СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
			СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
			
			ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет кадровые движения документа
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	ПериодыОсвобожденияСтавки - таблица значений с полями:
//		Сотрудник
//		ДатаОсвобождения - дата освобождения ставки.
//		ДатаВозврата     - дата с которой ставка опять занята.
//		
Процедура ОсвободитьСтавкуВременно(Движения, ПериодыОсвобожденияСтавки) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодыОсвобожденияСтавки", ПериодыОсвобожденияСтавки);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыОсвобожденияСтавки.Сотрудник КАК Сотрудник,
		|	ПериодыОсвобожденияСтавки.ДатаОсвобождения КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ПериодыОсвобожденияСтавки КАК ПериодыОсвобожденияСтавки";
	
	Запрос.Выполнить();
	
	ПоляОтбора = Новый Структура("КадроваяИсторияСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПоляОтбора.КадроваяИсторияСотрудников, "Регистратор", "<>", Движения.ЗанятыеПозицииШтатногоРасписания.Отбор.Регистратор.Значение);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию, КоличествоСтавок", ПоляОтбора);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Период КАК ДатаОсвобождения,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ВыборкаКадровыхДанных = Запрос.Выполнить().Выбрать();
	
	СтрокаКадровыхДвижений = Новый Структура;
	СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
	СтрокаКадровыхДвижений.Вставить("ДействуетДо", '00010101');
	
	ЕстьКолонкаСторно = ПериодыОсвобожденияСтавки.Колонки.Найти("Сторно") <> Неопределено;
	ЕстьКолонкаДатаВозврата = ПериодыОсвобожденияСтавки.Колонки.Найти("ДатаВозврата") <> Неопределено;
	
	Для каждого ПериодОсвобожденияСтавки Из ПериодыОсвобожденияСтавки Цикл
		
		ВыборкаКадровыхДанных.Сбросить();
		ВыборкаКадровыхДанных.НайтиСледующий(Новый Структура("Сотрудник, ДатаОсвобождения", ПериодОсвобожденияСтавки.Сотрудник, ПериодОсвобожденияСтавки.ДатаОсвобождения));
		
		Если ЕстьКолонкаСторно Тогда
			
			Если ПериодОсвобожденияСтавки.Сторно Тогда
				СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Прием);
			Иначе 
				СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("Позиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ПериодОсвобожденияСтавки.ДатаОсвобождения);
		СтрокаКадровыхДвижений.Вставить("Сотрудник", ПериодОсвобожденияСтавки.Сотрудник);
		СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		
		Если ЕстьКолонкаДатаВозврата Тогда
			СтрокаКадровыхДвижений.Вставить("ДействуетДо", ПериодОсвобожденияСтавки.ДатаВозврата); 
		КонецЕсли;
		
		ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсвободитьСтавкиПриКадровыхПереводовСВременноОсвобожденныхСтавок(Движения, ПериодыОсвобожденияСтавки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеЗанятыхСтавок Из ПериодыОсвобожденияСтавки Цикл
		
		СтрокаКадровыхДвижений = Новый Структура;
		СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
		СтрокаКадровыхДвижений.Вставить("ДействуетДо", ДанныеЗанятыхСтавок.ДатаОсвобождения);
		СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ДанныеЗанятыхСтавок.ДолжностьПоШтатномуРасписанию);
		СтрокаКадровыхДвижений.Вставить("Позиция", ДанныеЗанятыхСтавок.ДолжностьПоШтатномуРасписанию);
		СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ДанныеЗанятыхСтавок.ДатаЗанятияСтавки);
		СтрокаКадровыхДвижений.Вставить("Сотрудник", ДанныеЗанятыхСтавок.Сотрудник);
		СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ДанныеЗанятыхСтавок.КоличествоСтавок);
		СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ДанныеЗанятыхСтавок.КоличествоСтавок);
		
		ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу для проведения документа по регистру
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Сотрудник 			- массив сотрудников.
//	ДатаОсвобождения 	- дата освобождения ставки.
//	ДатаВозврата     	- дата с которой ставка опять занята.
// 		
Процедура ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, Сотрудники, ДатаОсвобождения, ДатаВозврата, Сторно = Ложь) Экспорт 
	
	Если ДанныеДляПроведения.Свойство("ПериодыОсвобожденияСтавки") Тогда
		ПериодыОсвобожденияСтавки = ДанныеДляПроведения.ПериодыОсвобожденияСтавки;
	Иначе	
		ПериодыОсвобожденияСтавки = Новый ТаблицаЗначений;
		ПериодыОсвобожденияСтавки.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("ДатаОсвобождения", 	Новый ОписаниеТипов("Дата"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("ДатаВозврата", 		Новый ОписаниеТипов("Дата"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("Сторно", 			Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Для каждого Сотрудник Из Сотрудники Цикл
			ПериодОсвобождения = ПериодыОсвобожденияСтавки.Добавить();
			ПериодОсвобождения.Сотрудник 		= Сотрудник;
			ПериодОсвобождения.ДатаОсвобождения = ДатаОсвобождения;
			ПериодОсвобождения.ДатаВозврата 	= ДатаВозврата;
			ПериодОсвобождения.Сторно 			= Сторно;
		КонецЦикла; 
	КонецЕсли;  
	
	ДанныеДляПроведения.Вставить("ПериодыОсвобожденияСтавки", ПериодыОсвобожденияСтавки);
	
КонецПроцедуры

Процедура ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, ДействуетДоЕсть, ТолькоБронированиеПозиции = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.Позиция)
		Или ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция) Тогда
		
		Движения.ЗанятыеПозицииШтатногоРасписания.Записывать = Истина;
		
		Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.Позиция)
			Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение
				И ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция) Тогда
			
			// основная запись
			НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
			
			Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение 
				Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
				
			ИначеЕсли СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
				
			КонецЕсли;
			
			НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
			НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
			
			Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
				НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
			Иначе
				НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
				НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
			КонецЕсли;
			
			// Если есть дата обратного события - вводим "условное" движение.
			Если ДействуетДоЕсть Тогда
				
				Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
					
					НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
					
					НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
					
					Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
						Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
						
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
						
					Иначе
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					КонецЕсли;
					
					НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
					НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
					
					Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
						НоваяСтрока.ВременноеДвижение = Истина;
						НоваяСтрока.КоличествоСтавок = 0;
					Иначе						
						НоваяСтрока.УсловноеДвижение = Истина;
						НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
					КонецЕсли;
					
					НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
					НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
					НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если это - перемещение - "спишем" ставку с текущей позиции.
		Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция)
			И СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
			И Не ТолькоБронированиеПозиции Тогда
			
			НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
			
			НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
			НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
			НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
			НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
			
			// Если есть дата обратного события - вводим "условное"
			// движение с возвратом ставки на прежнюю позицию.
			Если ДействуетДоЕсть Тогда
				
				Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
					
					НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
					
					НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
					НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
					НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.УсловноеДвижение = Истина;
					НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
					НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет историю изменения графиков работы.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения по графикам работы.
//	ДвиженияГрафиков - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГрафикРаботы
//		ДействуетДо (не обязательно).
// 		
Процедура СформироватьИсториюИзмененияГрафиков(Движения, ДвиженияГрафиков) Экспорт
	
	Регистратор = Движения.ГрафикРаботыСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДвиженияГрафиков.Колонки.Найти("ДействуетДо") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ГрафикРаботыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДвиженияГрафиков Цикл
		Движения.ГрафикРаботыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ГрафикРаботыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ТекущийГрафик;
		Иначе
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ГрафикРаботы;
		КонецЕсли;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть
			И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.ГрафикРаботыСотрудников.Записывать Тогда
		Движения.ГрафикРаботыСотрудников.Записать();
		Движения.ГрафикРаботыСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает процент северной надбавки физического лица или сотрудника.
//
// Параметры:
//		Объект - СправочникСсылка.Сотрудники, СправочникСсылка.ФизическиеЛица
//		ДатаПолученияДанных
//
// ВозвращаемоеЗначение: Число
//
Функция ПроцентСевернойНадбавки(Объект, ДатаПолученияДанных) Экспорт
	
	Если ТипЗнч(Объект) = ТипЗнч(Справочники.Сотрудники.ПустаяСсылка()) Тогда
		ФизическоеЛицо  = Объект.ФизическоеЛицо;
	ИначеЕсли ТипЗнч(Объект) = ТипЗнч(Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
		ФизическоеЛицо  = Объект;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	ПроцентСевернойНадбавки = 0;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	&Сотрудник КАК ФизическоеЛицо,
	|	&ДатаПолученияДанных КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды";
	Запрос.УстановитьПараметр("Сотрудник",ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаПолученияДанных",ДатаПолученияДанных);
	Запрос.Выполнить();
	СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТПроцентСевернойНадбавкиФизическихЛиц.ФизическоеЛицо,
	|	ВТПроцентСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
	|ИЗ
	|	ВТПроцентСевернойНадбавкиФизическихЛиц КАК ВТПроцентСевернойНадбавкиФизическихЛиц";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПроцентСевернойНадбавки = Выборка.ПроцентСевернойНадбавки;	
	КонецЕсли;
	
	Возврат ПроцентСевернойНадбавки;
	
КонецФункции

Функция МассивСотрудников(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
	МассивФизическихЛиц = Новый Массив();
	МассивФизическихЛиц.Добавить(ФизическоеЛицо);
	
	ТаблицаСотрудников = ТаблицаСотрудниковОрганизации(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ, ПодработкиРаботниковПоТрудовымДоговорам, ОтбиратьПоГоловнойОрганизации);
	
	Возврат ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ТаблицаСотрудниковОрганизации(МассивФизическихЛиц, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь, КадровыеДанные = "") Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= МассивФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации	= ОтбиратьПоГоловнойОрганизации;
	Если Не ВключаяРанееУволенных Тогда
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= Период;
	КонецЕсли; 
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= Период;
	
	ПараметрыПолученияСотрудниковОрганизаций.ПодработкиРаботниковПоТрудовымДоговорам = ПодработкиРаботниковПоТрудовымДоговорам;
	
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = КадровыеДанные;
	
	Если РаботникиПоДоговорамГПХ <> Неопределено
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	КонецЕсли;
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест физического лица в организации.
//
// Параметры:
//		ФизическоеЛицо
//		Организация
//		Период
//		ВключаяРанееУволенных					- Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//		РаботникиПоДоговорамГПХ					- Булево
//		ПодработкиРаботниковПоТрудовымДоговорам - Булево
//		ОтбиратьПоГоловнойОрганизации			- Булево, если Истина, то отбор по головной организации
//
// Возвращаемое значение:
//		Таблица значений, сформированная методом ОписаниеРабочихМестСотрудников.
//
Функция РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено, ПодработкиРаботниковПоТрудовымДоговорам = Ложь, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КадровыеДанные = "Подразделение,Должность,ВидЗанятости";
	
	Если ВключаяРанееУволенных Тогда
		КадровыеДанные = КадровыеДанные + ",ДатаПриема,ДатаЗавершенияРаботы";
	КонецЕсли;
	
	Если ИспользоватьШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные +",ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	ТаблицаСотрудников = ТаблицаСотрудниковОрганизации(
		ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ, ПодработкиРаботниковПоТрудовымДоговорам, ОтбиратьПоГоловнойОрганизации, КадровыеДанные);
	
	Возврат ОписаниеРабочихМестПоКадровымДаннымСотрудников(ТаблицаСотрудников, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест сотрудников.
//
// Параметры:
//			Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//			Период
//			ВключаяРанееУволенных - Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//
// Возвращаемое значение:
//		Таблица значений, содержащая колонки.
//			Сотрудник
//			ФизическоеЛицо
//			Подразделение
//			Должность						- если не используется штатное расписание.
//			ДолжностьПоШтатномуРасписанию	- если используется штатное расписание.
//			ДатаПриема						- если значение параметра ВключаяРанееУволенных равно Истина.
//			ДатаУвольнения					- если значение параметра ВключаяРанееУволенных равно Истина.
//			ПредставлениеРабочегоМеста		- Строка, сформированная методом ПредставлениеРабочегоМеста.
//
Функция ОписаниеРабочихМестСотрудников(Сотрудники, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КадровыеДанные = "Подразделение,Должность,ВидЗанятости";
	
	Если ВключаяРанееУволенных Тогда
		КадровыеДанные = КадровыеДанные + ",ДатаПриема,ДатаЗавершенияРаботы";
	КонецЕсли;
	
	Если ИспользоватьШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные +",ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанные, Период);
	
	Возврат ОписаниеРабочихМестПоКадровымДаннымСотрудников(КадровыеДанныеСотрудников, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);
	
КонецФункции

Функция ОписаниеРабочихМестПоКадровымДаннымСотрудников(ТаблицаОписанийРабочихМест, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ВключаяРанееУволенных Тогда
		ТаблицаОписанийРабочихМест.Сортировать("ДатаЗавершенияРаботы,ДатаПриема УБЫВ");
	КонецЕсли;
	
	ТаблицаОписанийРабочихМест.Колонки.Добавить("ПредставлениеРабочегоМеста", Новый ОписаниеТипов("Строка"));
	
	СписокДоговорниковГПХ = Новый Массив;
	СтрокиДоговорниковГПХ = Новый Соответствие;
	Для каждого СтрокаТаблицыОписанийРабочихМест Из ТаблицаОписанийРабочихМест Цикл
		
		Если РаботникиПоДоговорамГПХ = Истина
			И Не ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.Должность) Тогда
			СписокДоговорниковГПХ.Добавить(СтрокаТаблицыОписанийРабочихМест.Сотрудник);
			СтрокиДоговорниковГПХ.Вставить(СтрокаТаблицыОписанийРабочихМест.Сотрудник, СтрокаТаблицыОписанийРабочихМест);
		Иначе
			СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста =
				ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, ВключаяРанееУволенных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаботникиПоДоговорамГПХ = Истина И СписокДоговорниковГПХ.Количество() > 0 
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Сотрудники", СписокДоговорниковГПХ);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
			|ПОМЕСТИТЬ ВТДоговорыГПХСотрудников
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &Период
			|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаОкончания) КАК ДатаОкончания,
			|	ДоговорыГПХСотрудников.Сотрудник
			|ПОМЕСТИТЬ ВТПоследниеДатыОкончанияДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаНачала) КАК ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|ПОМЕСТИТЬ ВТПоследниеДатыНачалаДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыОкончанияДоговоров КАК ПоследниеДатыОкончанияДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыОкончанияДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыОкончанияДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДокументОснование) КАК Договор,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер КАК Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата КАК Дата
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыНачалаДоговоров КАК ПоследниеДатыНачалаДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыНачалаДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаНачала = ПоследниеДатыНачалаДоговоров.ДатаНачала
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыНачалаДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыОписанийРабочихМест = СтрокиДоговорниковГПХ.Получить(Выборка.Сотрудник);
			Если СтрокаТаблицыОписанийРабочихМест <> Неопределено Тогда
				
				Если ТипЗнч(Выборка.Договор) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Тогда
					ПредставлениеДоговора = НСтр("ru='Дог. авт. заказа'");
				Иначе
					ПредставлениеДоговора = НСтр("ru='Дог. (раб., услуги)'");
				КонецЕсли;
				
				СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста = ПредставлениеДоговора + " № "
					+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина)
					+ " " + НСтр("ru='от'") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yy")
					+ " ("  + Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yy") + ")";
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ТаблицаОписанийРабочихМест;
	
КонецФункции

// Возвращает представление рабочего места сотрудника.
// 
// Параметры:
//				СтрокаТаблицыОписанийРабочихМест - Строка таблицы значений
//				ИспользоватьШтатноеРасписание
//				УказатьПериодРаботы.
//
// Возвращаемое значение:
//			Строка - Представление позиции штатного расписания, если используется штатное расписание,
//					представление рабочего места вида "Должность /Подразделение/", если штатное расписание не ведется
//					дополняется периодом работы "по дата увольнения", для уволенных сотрудников и "с дата приема" для работающих.
//
Функция ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, УказатьПериодРаботы)
	
	Если СтрокаТаблицыОписанийРабочихМест = Неопределено Тогда
		ПредставлениеРабочегоМеста = "";
	Иначе
		
		Если ИспользоватьШтатноеРасписание Тогда
			ПредставлениеРабочегоМеста = Строка(СтрокаТаблицыОписанийРабочихМест.ДолжностьПоШтатномуРасписанию);
		Иначе
			ПредставлениеРабочегоМеста =
				Строка(СтрокаТаблицыОписанийРабочихМест.Должность) +" /"+Строка(СтрокаТаблицыОписанийРабочихМест.Подразделение)+"/";
		КонецЕсли;
		
		Если УказатьПериодРаботы Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаЗавершенияРаботы) Тогда
				
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru='по'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаЗавершенияРаботы, "ДЛФ=DD") + ")";
					
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаПриема) Тогда
					
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru='с'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаПриема, "ДЛФ=DD") + ")";
					
			КонецЕсли;
				
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеРабочегоМеста;
	
КонецФункции

// Возвращает описание параметров для метода СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Параметры:
//		ИмяВТФизическиеЛицаДоговорники 	- Строка
//		Организация 					- СправочникСсылка.Организации
//		НачалоПериода 					- Дата
//		ОкончаниеПериода				- Дата
//
// Возвращаемое значение:
//		Структура:
//			* ИмяВТФизическиеЛицаДоговорники 	- Строка.
//			* Организация						- СправочникСсылка.Организации, если не указывать таблица
//													сформируется по всем доступным организациям.
//			* НачалоПериода						- Дата, по умолчанию пустая дата.
//			* ОкончаниеПериода					- Дата, по умолчанию пустая дата.
//			* ИмяВТДоговорыГПХФизическихЛиц		- Строка, содержит имя создаваемой таблицы
//													по умолчанию - "ВТДоговорыГПХФизическихЛиц".
//
Функция ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(ИмяВТФизическиеЛицаДоговорники, Организация = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяВТФизическиеЛицаДоговорники", ИмяВТФизическиеЛицаДоговорники);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Параметры.Вставить("ИмяВТДоговорыГПХФизическихЛиц", "ВТДоговорыГПХФизическихЛиц");
	
	Возврат Параметры;
	
КонецФункции

// Создает в переданном менеджере временных таблиц, таблицу с договорами ГПХ физических лиц
// см. функцию ЗапросВТДоговорыГПХФизическихЛиц.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные		- Булево
//		Параметры				- Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
Процедура СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, формирующий временную таблицу с договорами ГПХ физических лиц
// по переданным параметрам. Временная таблица содержит поля:
//		* Организация		- СправочникСсылка.Организации
//		* Договор			- ДокументСсылка.ДоговорАвторскогоЗаказа
//							- ДокументСсылка.ДоговорРаботыУслуги
//		* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		* ДатаНачала		- Дата
//		* ДатаОкончания		- Дата
//
// Параметры:
//		ТолькоРазрешенные	- Булево
//		Параметры			-Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК Организация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор КАК Договор,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТДоговорыГПХФизическихЛиц
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаДоговорники КАК ФизическиеЛицаДоговорники
		|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛицаДоговорники.ФизическоеЛицо
		|ГДЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ДатаНачала
		|	И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &ДатаОкончания
		|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
	Иначе
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаДоговорники", Параметры.ИмяВТФизическиеЛицаДоговорники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДоговорыГПХФизическихЛиц", Параметры.ИмяВТДоговорыГПХФизическихЛиц);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает таблицу значений, содержащую права сотрудников на специальные отпуска.
//
// Параметры:
//		Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//
// Возвращаемое значение:
//		ТаблицаЗначений
//			* Сотрудник			- СправочникСсылка.Сотрудники
//			* ВидОтпуска		- СправочникСсылка.ВидыОтпусков
//			* КоличествоДней	- Число
//
Функция ПраваНаСпециальныеОтпускаСотрудника(Сотрудники) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "КоличествоДнейОтпускаЧАЭС");
	КадровыеДанные.Колонки.КоличествоДнейОтпускаЧАЭС.Имя = "КоличествоДней";
	КадровыеДанные.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	КадровыеДанные.Колонки.Удалить("Период");
	КадровыеДанные.Колонки.Удалить("ФизическоеЛицо");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для каждого СтрокаДанных Из КадровыеДанные Цикл
		Если СтрокаДанных.КоличествоДней = NULL Или Не ЗначениеЗаполнено(СтрокаДанных.КоличествоДней) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
		Иначе
			СтрокаДанных.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		КадровыеДанные.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат КадровыеДанные;
	
КонецФункции

Процедура СформироватьДвиженияПоТерриториям(Движения, ДанныеДляПроведения, Организация, ФормированиеНачальныхСведений = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории",
		Новый Структура("Организация", Организация)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Регистратор = Движения.ТерриторииСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = ДанныеДляПроведения.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Если Не ФормированиеНачальныхСведений Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Сотрудники", ДанныеДляПроведения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Период,
			|	Сотрудники.Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиДляДвиженийПоТерриториям
			|ИЗ
			|	&Сотрудники КАК Сотрудники";
		
		Запрос.Выполнить();
		
		ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляДвиженийПоТерриториям");
		
		МассивОтборов = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(МассивОтборов, "Регистратор", "<>", Регистратор);
		
		ПоляОтбора = Новый Структура("ТерриторииСотрудников", МассивОтборов);
			
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
			ОписательТаблиц, Истина, "Территория", ПоляОтбора);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Период,
			|	Сотрудники.Сотрудник,
			|	Сотрудники.Территория
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК Сотрудники";
		
		ДанныеТерриторий = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для каждого СтрокаДанныхДляПроведения Из ДанныеДляПроведения Цикл
		
		ТерриторияПрежняя = Неопределено;
		
		Если Не ФормированиеНачальныхСведений Тогда
			
			ДанныеСотрудника = ДанныеТерриторий.НайтиСтроки(
				Новый Структура("Период,Сотрудник", СтрокаДанныхДляПроведения.Период, СтрокаДанныхДляПроведения.Сотрудник));
				
			Если ДанныеСотрудника.Количество() > 0  Тогда
				ТерриторияПрежняя = ДанныеСотрудника[0].Территория;
			КонецЕсли;
			
			Если СтрокаДанныхДляПроведения.Территория = ТерриторияПрежняя И Не ДействуетДоЕсть Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений = Движения.ТерриторииСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанныхДляПроведения);
		
		Если ДействуетДоЕсть Тогда
			СтрокаДвижений.ТерриторияПоОкончании = ТерриторияПрежняя;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.ТерриторииСотрудников.Количество() > 0 Тогда
		Движения.ТерриторииСотрудников.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияДоговоровГПХ(Движения, ДанныеДляПроведенияДоговоровГПХ) Экспорт
	
	Для каждого ДанныеПроведения Из ДанныеДляПроведенияДоговоровГПХ Цикл
		
		Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Записывать = Истина;
		ЗаполнитьЗначенияСвойств(Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Добавить(), ДанныеПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТОсновныеСотрудникиФизическихЛицВПериодах(МенеджерВременныхТаблиц, ТолькоРазрешенные, ГоловнаяОрганизация, ИмяВТФизическиеЛицаПериоды, ИмяВТОсновныеСотрудникиФизическихЛицВПериодах) Экспорт
	
	ФОИспользоватьНачисленияПоДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
	Если ФОИспользоватьНачисленияПоДоговорам Тогда
		ИмяВТОсновныеСотрудники = "ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц";
	Иначе
		ИмяВТОсновныеСотрудники = ИмяВТОсновныеСотрудникиФизическихЛицВПериодах;
	КонецЕсли;
	
	КадровыйУчетБазовый.СоздатьВТОсновныеСотрудникиФизическихЛицВПериодах(МенеджерВременныхТаблиц, ТолькоРазрешенные, ГоловнаяОрганизация, ИмяВТФизическиеЛицаПериоды, ИмяВТОсновныеСотрудники);
	
	Если ФОИспользоватьНачисленияПоДоговорам Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(ГоловнаяОрганизация));
		
		ТекстыЗапросов = Новый Массив;
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛицаПериоды.Период,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
			|ПОМЕСТИТЬ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = ОсновныеСотрудникиФизическихЛиц.Сотрудник
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= ОсновныеСотрудникиФизическихЛиц.Период
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= ОсновныеСотрудникиФизическихЛиц.Период
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= ФизическиеЛицаПериоды.Период
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= ФизическиеЛицаПериоды.Период
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Период ЕСТЬ NULL 
			|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛицаПериоды", ИмяВТФизическиеЛицаПериоды);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|ИЗ
			|	ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Организация) КАК Организация
			|ПОМЕСТИТЬ ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц
			|ИЗ
			|	ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ПО СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОсновныеСотрудникиФизическихЛиц.Период,
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник,
			|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо,
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация,
			|	ОсновныеСотрудникиФизическихЛиц.Организация,
			|	ОсновныеСотрудникиФизическихЛиц.Подразделение,
			|	ОсновныеСотрудникиФизическихЛиц.Должность,
			|	ОсновныеСотрудникиФизическихЛиц.ДолжностьПоШтатномуРасписанию,
			|	ОсновныеСотрудникиФизическихЛиц.КоличествоСтавок,
			|	ОсновныеСотрудникиФизическихЛиц.ВидЗанятости,
			|	ОсновныеСотрудникиФизическихЛиц.ВидДоговора,
			|	ОсновныеСотрудникиФизическихЛиц.РольСотрудника КАК РольСотрудника
			|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛицВПериодах
			|ИЗ
			|	ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация.ГоловнаяОрганизация,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Подразделение),
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
			|ИЗ
			|	ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц КАК СотрудникиФизическихЛицДоговорникиГПХ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ПО СотрудникиФизическихЛицДоговорникиГПХ.Период = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период
			|			И СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник
			|			И СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|			И СотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания
			|			И СотрудникиФизическихЛицДоговорникиГПХ.Организация = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация.ГоловнаяОрганизация,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОсновныеСотрудникиФизическихЛицВПериодах", ИмяВТОсновныеСотрудникиФизическихЛицВПериодах);
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Создает ВТ со списком документов-отсутствий по сотрудникам в указанном периоде.
// Получаются все отсутствия период которых пересекается с указанным периодом
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  Сотрудники				 - массив - сотрудники, отсутствия которых надо получить
//  НачалоПериода			 - дата - начало периода получения отсутствий
//  ОкончаниеПериода		 - дата - окончания периода получения отсутствий 
//  ТолькоРазрешенные		 - булево - по умолчанию ИСТИНА
//
Процедура СоздатьВТОтсутствияСотрудниковВПериоде(МенеджерВременныхТаблиц, Сотрудники, НачалоПериода, ОкончаниеПериода, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Командировка.Ссылка,
		|	Командировка.Организация,
		|	Командировка.Сотрудник,
		|	Командировка.ДатаНачала,
		|	Командировка.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериодеПредварительно
		|ИЗ
		|	Документ.Командировка КАК Командировка
		|ГДЕ
		|	Командировка.Сотрудник В(&Сотрудники)
		|	И (Командировка.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Командировка.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.Организация,
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаПериодаОтсутствия,
		|	Отпуск.ДатаОкончанияПериодаОтсутствия
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Сотрудник В(&Сотрудники)
		|	И (Отпуск.ДатаНачалаПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Отпуск.ДатаОкончанияПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.Сотрудник,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала,
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплатыСписком.Сотрудники КАК ОтпускБезСохраненияОплатыСпискомСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплатыСписком КАК ОтпускБезСохраненияОплаты
		|		ПО ОтпускБезСохраненияОплатыСпискомСотрудники.Ссылка = ОтпускБезСохраненияОплаты.Ссылка
		|ГДЕ
		|	ОтпускБезСохраненияОплатыСпискомСотрудники.Сотрудник В(&Сотрудники)
		|	И (ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала И ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаНачала И ОтпускБезСохраненияОплатыСпискомСотрудники.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Сотрудник В(&Сотрудники)
		|	И (ОтпускБезСохраненияОплаты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ОтпускБезСохраненияОплаты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТОтсутствияСотрудниковВПериодеПредварительно", "Сотрудник,ДатаНачала");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, ТолькоРазрешенные, "Должность,ДолжностьПоШтатномуРасписанию");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтсутствияСотрудниковВПериодеПредварительно.Ссылка,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Организация,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериоде
		|ИЗ
		|	ВТОтсутствияСотрудниковВПериодеПредварительно КАК ОтсутствияСотрудниковВПериодеПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала = КадровыеДанныеСотрудников.Период
		|			И ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.Должность", "КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выбирает из переданной ВТ периоды в которых сотрудник либо вообще не работал, либо работал не весь период.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  ИмяВТСотрудникиПериоды	 - имя временной таблицы в менеджере временных таблиц, содержащей сотрудников и проверяемые периоды
//  						Сотрудник	 
//  						ДатаНачала - начало проверяемого периода
//  						ДатаОкончания - окончание проверяемого периода
//
Процедура СоздатьВТПериодыВКоторыхСотрудникНеРаботал(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВТСотрудникиПериоды);
	
	ЗапросКадровыхДанных = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
	Истина,
	ОписательТаблиц,
	"ДатаПриема,ДатаЗавершенияРаботы,ТекущийВидЗанятости",
	,
	"ВТКадровыеДанныеСотрудников");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросКадровыхДанных.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыВКоторыхСотрудникНеРаботал
	|ИЗ
	|	ИмяВТСотрудникиПериоды КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (КадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
	|			И (ДанныеДокумента.ДатаНачала < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ ДанныеДокумента.ДатаОкончания < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (ДанныеДокумента.ДатаНачала > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы
	|						ИЛИ ДанныеДокумента.ДатаОкончания > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает массив физических лиц с которыми заключено более одного
// договора (трудового или ГПХ).
//
// Параметры:
//	Организация						- СправочникСсылка.Организации
//	НачалоПериода					- Дата
//	ОкончаниеПериода				- Дата
//	СписокФизическихЛиц				- Массив элементов СправочникСсылка.ФизическиеЛица
//	РаботникиПоДоговорамГПХ			- Булево, в результате будут учтены действующие договоры ГПХ
//	ОтбиратьПоГоловнойОрганизации	- Булево, поиск договоров будет осуществляться в рамках головной организации
//
// Возвращаемое значение:
//	Массив элементов СправочникСсылка.ФизическиеЛица
//
Функция ФизическиеЛицаСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода = '00010101', СписокФизическихЛиц = Неопределено, РаботникиПоДоговорамГПХ = Истина, ОтбиратьПоГоловнойОрганизации = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ?(ОкончаниеПериода = '00010101', НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	СотрудникиОрганизации.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизации.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СотрудникиОрганизации.Сотрудник) > 1";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

Функция НомерСледующегоТрудовогоДоговора(Организация, НомераДоговоровТекущегоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта) КАК НомерДоговораКонтракта
		|ИЗ
		|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ГДЕ
		|			ОсновныеДанныеКонтрактаДоговораСотрудника.Организация = &Организация И ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта <> """") КАК ПоследниеПериоды
		|		ПО ОсновныеДанныеКонтрактаДоговораСотрудника.Период = ПоследниеПериоды.Период
		|ГДЕ
		|	ОсновныеДанныеКонтрактаДоговораСотрудника.Организация = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НомерДоговораКонтракта = "";
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерДоговораКонтракта = Выборка.НомерДоговораКонтракта;
		Если Не ЗначениеЗаполнено(НомерДоговораКонтракта) Тогда
			НомерДоговораКонтракта = "";
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НомераДоговоровТекущегоДокумента <> Неопределено Тогда
		
		Для каждого НомерДоговораДокумента Из НомераДоговоровТекущегоДокумента Цикл
			
			Если НомерДоговораКонтракта < НомерДоговораДокумента Тогда
				НомерДоговораКонтракта = НомерДоговораДокумента;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Префикс = "";
	Суффикс = "";
	Если ПустаяСтрока(НомерДоговораКонтракта) Тогда
		Номер = "00000";
	Иначе
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерДоговораКонтракта) Тогда
			
			Номер = "";
			
			ДлинаНомера = СтрДлина(НомерДоговораКонтракта);
			
			ЧастиНомера = Новый Массив;
			
			СимволНомера = Сред(НомерДоговораКонтракта, 1, 1);
			ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
			
			ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
			ЧастиНомера.Добавить(ОписаниеЧастиНомера);
			
			Для НомерСимвола = 2 По ДлинаНомера Цикл
				
				СимволНомера = Сред(НомерДоговораКонтракта, НомерСимвола, 1);
				ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
				Если ОписаниеЧастиНомера.ЧисловаяЧасть <> ЧисловаяЧасть Тогда
					ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
					ЧастиНомера.Добавить(ОписаниеЧастиНомера);
				Иначе
					ОписаниеЧастиНомера.ЧастьНомера = ОписаниеЧастиНомера.ЧастьНомера + СимволНомера;
				КонецЕсли;
				
			КонецЦикла;
			
			ИндексСамойДлиннойЧисловойЧасти = Неопределено;
			ДлинаСамойДлиннойЧасти = 0;
			Для ИндексЧастиНомера = 0 По ЧастиНомера.Количество() - 1 Цикл
				
				ОписаниеЧастиНомера = ЧастиНомера[ИндексЧастиНомера];
				Если ОписаниеЧастиНомера.ЧисловаяЧасть Тогда
					
					ДлинаЧастиНомера = СтрДлина(ОписаниеЧастиНомера.ЧастьНомера);
					Если ИндексСамойДлиннойЧисловойЧасти = Неопределено
						Или ДлинаСамойДлиннойЧасти <= ДлинаЧастиНомера Тогда
						
						ИндексСамойДлиннойЧисловойЧасти = ИндексЧастиНомера;
						ДлинаСамойДлиннойЧасти = ДлинаЧастиНомера;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ИндексСамойДлиннойЧисловойЧасти = Неопределено Тогда
				Префикс = НомерДоговораКонтракта;
				Номер = "";
			Иначе
				
				Для ИндексЧастиНомера = 0 По ИндексСамойДлиннойЧисловойЧасти - 1 Цикл
					Префикс = Префикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
				Номер = ЧастиНомера[ИндексСамойДлиннойЧисловойЧасти].ЧастьНомера;
				
				Для ИндексЧастиНомера = ИндексСамойДлиннойЧисловойЧасти + 1 По ЧастиНомера.Количество() - 1 Цикл
					Суффикс = Суффикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Номер = НомерДоговораКонтракта;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(Номер) > 0 И Лев(Номер, 1) = "0" Тогда
		ФорматнаяСтрока = "ЧЦ=" + СтрДлина(Номер) + "; ЧВН=; ЧГ=";
	Иначе
		ФорматнаяСтрока = "ЧГ=";
	КонецЕсли; 
	
	Возврат Префикс + Формат(Число(Номер) + 1, ФорматнаяСтрока) + Суффикс;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.КонтролироватьУникальностьТабельныхНомеров
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПроверитьУникальность = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи().КонтролироватьУникальностьТабельныхНомеров;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПроверитьУникальность = Выборка.КонтролироватьУникальностьТабельныхНомеров;
		
	КонецЕсли;
	
	Если ПроверитьУникальность Тогда
		КадровыйУчетБазовый.ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПустаяТаблицаКадровыхСобытийПриУвольнении() Экспорт
	
	КадровыеСобытия = Новый ТаблицаЗначений;
	КадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	КадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеСобытия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КадровыеСобытия.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеСобытия.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	КадровыеСобытия.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		КадровыеСобытия.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
		КадровыеСобытия.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ОсновныеСотрудникиВнутреннихСовместителей(Организация, ПроверяемыеДаты) Экспорт
	
	ОсновныеСотрудникиСовместителей = ПустаяТаблицаКадровыхСобытийПриУвольнении();
	
	СотрудникиДокумента = Новый Массив;
	Для каждого ОписаниеДаты Из ПроверяемыеДаты Цикл
		
		Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиДокумента.Добавить(ОписаниеДаты.Значение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОписаниеДаты.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СотрудникиДокумента.Количество() > 0 Тогда
		
		Для каждого ОписаниеПроверяемойДаты Из ПроверяемыеДаты Цикл
			
			ДатаУвольнения = ОписаниеПроверяемойДаты.Ключ;
			Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
				Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеДаты.Значение);
			Иначе
				Сотрудники = ОписаниеПроверяемойДаты.Значение;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаУвольнения", ДатаУвольнения);
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
				|ИЗ
				|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
				|			И (Сотрудники.Ссылка В (&Сотрудники))
				|			И ТекущиеКадровыеДанныеСотрудников.Сотрудник <> Сотрудники.Ссылка
				|ГДЕ
				|	(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
				|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &ДатаУвольнения)";
			
			ФизическиеЛицаСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
			Если ФизическиеЛицаСотрудников.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				ПараметрыПолученияСотрудников.Организация = Организация;
				ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
				ПараметрыПолученияСотрудников.НачалоПериода = ДатаУвольнения - 1;
				ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаУвольнения - 1;
				ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛицаСотрудников;
				ПараметрыПолученияСотрудников.КадровыеДанные = "ДолжностьПоШтатномуРасписанию,ВидЗанятости,ВидДоговора,КоличествоСтавок,ДатаПриема";
				
				КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
				
				Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СотрудникиОрганизации.Сотрудник,
					|	СотрудникиОрганизации.ФизическоеЛицо
					|ПОМЕСТИТЬ ВТУвольняемыеОсновныеСотрудники
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|ГДЕ
					|	СотрудникиОрганизации.Сотрудник В(&СотрудникиДокумента)
					|	И СотрудникиОрганизации.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СотрудникиОрганизации.Сотрудник,
					|	СотрудникиОрганизации.ФизическоеЛицо
					|ПОМЕСТИТЬ ВТДругиеОсновныеСотрудники
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|ГДЕ
					|	НЕ СотрудникиОрганизации.Сотрудник В (&СотрудникиДокумента)
					|	И СотрудникиОрганизации.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СотрудникиОрганизации.Сотрудник,
					|	СотрудникиОрганизации.КоличествоСтавок,
					|	СотрудникиОрганизации.ФизическоеЛицо,
					|	СотрудникиОрганизации.ДатаПриема
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиОсновныхСотрудников
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУвольняемыеОсновныеСотрудники КАК УвольняемыеОсновныеСотрудники
					|		ПО СотрудникиОрганизации.ФизическоеЛицо = УвольняемыеОсновныеСотрудники.ФизическоеЛицо
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДругиеОсновныеСотрудники КАК ДругиеОсновныеСотрудники
					|		ПО СотрудникиОрганизации.ФизическоеЛицо = ДругиеОсновныеСотрудники.ФизическоеЛицо
					|ГДЕ
					|	НЕ СотрудникиОрганизации.Сотрудник В (&СотрудникиДокумента)
					|	И ДругиеОсновныеСотрудники.Сотрудник ЕСТЬ NULL 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВнутренниеСовместители.ФизическоеЛицо,
					|	МАКСИМУМ(ВнутренниеСовместители.КоличествоСтавок) КАК КоличествоСтавок
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиСМаксимальнымКоличествомСтавок
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВнутренниеСовместители.ФизическоеЛицо,
					|	ВнутренниеСовместители.КоличествоСтавок,
					|	МИНИМУМ(ВнутренниеСовместители.ДатаПриема) КАК ДатаПриема
					|ПОМЕСТИТЬ ВТВнутренниеСовместителиСДатойПриема
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВнутренниеСовместителиСМаксимальнымКоличествомСтавок КАК ВнутренниеСовместителиСМаксимальнымКоличествомСтавок
					|		ПО ВнутренниеСовместители.ФизическоеЛицо = ВнутренниеСовместителиСМаксимальнымКоличествомСтавок.ФизическоеЛицо
					|			И ВнутренниеСовместители.КоличествоСтавок = ВнутренниеСовместителиСМаксимальнымКоличествомСтавок.КоличествоСтавок
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо,
					|	ВнутренниеСовместители.КоличествоСтавок
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МАКСИМУМ(ВнутренниеСовместители.Сотрудник) КАК Сотрудник,
					|	ВнутренниеСовместители.ФизическоеЛицо
					|ПОМЕСТИТЬ ВТОсновныеСотрудникиВнутреннихСовместителей
					|ИЗ
					|	ВТВнутренниеСовместителиОсновныхСотрудников КАК ВнутренниеСовместители
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВнутренниеСовместителиСДатойПриема КАК ВнутренниеСовместителиСДатойПриема
					|		ПО ВнутренниеСовместители.ФизическоеЛицо = ВнутренниеСовместителиСДатойПриема.ФизическоеЛицо
					|			И ВнутренниеСовместители.КоличествоСтавок = ВнутренниеСовместителиСДатойПриема.КоличествоСтавок
					|			И ВнутренниеСовместители.ДатаПриема = ВнутренниеСовместителиСДатойПриема.ДатаПриема
					|
					|СГРУППИРОВАТЬ ПО
					|	ВнутренниеСовместители.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	НЕ МАКСИМУМ(ВнутренниеСовместители.Сотрудник) ЕСТЬ NULL 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОсновныеСотрудникиВнутреннихСовместителей.Сотрудник,
					|	СотрудникиОрганизации.ФизическоеЛицо,
					|	СотрудникиОрганизации.ВидДоговора,
					|	СотрудникиОрганизации.КоличествоСтавок,
					|	СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию КАК Позиция
					|ИЗ
					|	ВТОсновныеСотрудникиВнутреннихСовместителей КАК ОсновныеСотрудникиВнутреннихСовместителей
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|		ПО ОсновныеСотрудникиВнутреннихСовместителей.Сотрудник = СотрудникиОрганизации.Сотрудник";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					ДатаСобытия = КонецДня(ДатаУвольнения) + 1;
					
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						НоваСтрокаОсновныеСотрудникиСовместителей = ОсновныеСотрудникиСовместителей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваСтрокаОсновныеСотрудникиСовместителей, Выборка);
						
						НоваСтрокаОсновныеСотрудникиСовместителей.ДатаСобытия = ДатаСобытия;
						НоваСтрокаОсновныеСотрудникиСовместителей.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение;
						НоваСтрокаОсновныеСотрудникиСовместителей.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОсновныеСотрудникиСовместителей;
	
КонецФункции

Процедура СформироватьКадровыеДвиженияПриУвольнении(Регистратор, Движения, КадровыеСобытия, ПеремещаемыеСовместители) Экспорт
	
	ВремяРегистрацииУвольняемых = ВремяРегистрацииУвольняемыхСотрудников(Регистратор, КадровыеСобытия);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПеремещаемыеСовместители, КадровыеСобытия);
	
	Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Вставить("НеСдвигатьПериодЗаписей", Истина);
	КадровыйУчет.СформироватьКадровыеДвижения(Регистратор, Движения, КадровыеСобытия, , Ложь);
	
	Если Движения.КадроваяИсторияСотрудников.Записывать Тогда
		
		Для Каждого Запись Из Движения.КадроваяИсторияСотрудников Цикл
			
			Если Запись.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				ВремяРегистрацииСотрудников = ВремяРегистрацииУвольняемых.Получить(Запись.Период);
			Иначе
				ВремяРегистрацииСотрудников = Неопределено;
			КонецЕсли;
			
			ВремяРегистрации = Неопределено;
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Запись.Сотрудник);
			КонецЕсли;
			
			Если ВремяРегистрации <> Неопределено Тогда
				Запись.Период = ВремяРегистрации;
			Иначе
				Запись.Период = НачалоДня(Запись.Период) + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВремяРегистрацииУвольняемыхСотрудников(Ссылка, КадровыеСобытия)
	
	Возврат ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Ссылка, КадровыеСобытия);
	
КонецФункции

Функция ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ПолныеПрава", , Ложь);
	
КонецФункции

Процедура ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Если Не ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для создания'");
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники() Экспорт
	
	ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники = НастройкиКадровогоУчета().ПравилоФормированияПредставленияЭлементовСправочникаСотрудники;
	
КонецПроцедуры

Функция НастройкиКадровогоУчета() Экспорт
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.НастройкиКадровогоУчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.*
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Выборка);
		
	КонецЕсли; 
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ЗарегистрироватьВРеестреКадровыхПриказов(Движения, ДанныеРеестраКадровыхПриказов, Отказ) Экспорт
	
	Если ДанныеРеестраКадровыхПриказов.Количество() > 0 Тогда
		Движения.РеестрКадровыхПриказов.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ДанныеРеестраКадровыхПриказов Цикл
		
		НоваяСтрока = Движения.РеестрКадровыхПриказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеРеестраОтпусков, Отказ) Экспорт
	
	Если ДанныеРеестраОтпусков.Количество() > 0 Тогда
		Движения.РеестрОтпусков.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ДанныеРеестраОтпусков Цикл
		
		НоваяСтрока = Движения.РеестрОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачисленийПоСотруднику, Показатели, ЭтоПеремещение = Ложь) Экспорт
	
	ДобавитьЗапятуюОклад = Ложь;
	ДобавитьЗапятуюНадбавки = Ложь;
	
	ОкладТариф = 0;
	СтрокаОклад = "";
	СтрокаНадбавки = "";
	
	ТочностьОклада = 0;
	
	Для каждого СтрокаНачисления Из СтрокиНачисленийПоСотруднику Цикл
		
		Если ЭтоПеремещение И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			
			ОсновнойОПоказатель = Неопределено;
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
			Для каждого ПоказательНачисления Из ИнфоОВидеРасчета.Показатели Цикл
				
				Если ПоказательНачисления.ОсновнойПоказатель Тогда
					ОсновнойОПоказатель = ПоказательНачисления;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета);
			Если ОсновнойОПоказатель <> Неопределено Тогда
				СтруктураПоиска.Вставить("Показатель", ОсновнойОПоказатель.Показатель);
			КонецЕсли;
			СтрокиПоказателей = Показатели.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоказателей.Количество() > 0 Тогда
				Значение = СтрокиПоказателей[0].Значение;
			Иначе
				Значение = Неопределено;
			КонецЕсли;      
			
			Если ИнфоОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы
				Или ИнфоОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы Тогда
			
			    Если ДобавитьЗапятуюОклад Тогда
					СтрокаОклад = СтрокаОклад + ", ";
				Иначе
					ДобавитьЗапятуюОклад = Истина;
				КонецЕсли;
				
				ТочностьОклада = 0;
				Если ОсновнойОПоказатель <> Неопределено Тогда
					ТочностьОклада = ОсновнойОПоказатель.Точность;
					СтрокаОклад = СтрокаОклад + ?(ЗначениеЗаполнено(ОсновнойОПоказатель), ОсновнойОПоказатель.КраткоеНаименование,  
						СтрокаНачисления.Начисление)+ ?(ЗначениеЗаполнено(Значение), ": " + Формат(Значение, "ЧДЦ=" + ТочностьОклада + "; ЧН="), "");
				КонецЕсли;
									
				Если ЗначениеЗаполнено(Значение) Тогда
					ОкладТариф = Значение;
				КонецЕсли;
				
			Иначе
				
				Если ДобавитьЗапятуюНадбавки Тогда
					СтрокаНадбавки = СтрокаНадбавки + "; ";
				Иначе
					ДобавитьЗапятуюНадбавки = Истина;
				КонецЕсли;
				
				Если ОсновнойОПоказатель <> Неопределено Тогда
					Точность = ОсновнойОПоказатель.Точность;
				Иначе
					Точность = 0;
				КонецЕсли;
					
				СтрокаНадбавки = СтрокаНадбавки + ?(ЗначениеЗаполнено(ОсновнойОПоказатель), ОсновнойОПоказатель.КраткоеНаименование,  
					СтрокаНачисления.Начисление) + ?(ЗначениеЗаполнено(Значение), ": " + Формат(Значение, "ЧДЦ=" + Точность + "; ЧН="), "");
				
			КонецЕсли;
									
		КонецЕсли; 
		
	КонецЦикла;    
	
	Если ПустаяСтрока(СтрокаОклад) Тогда
		Возврат СтрокаНадбавки;
	ИначеЕсли ПустаяСтрока(СтрокаНадбавки) Тогда
		Возврат Формат(ОкладТариф, "ЧДЦ=" + ТочностьОклада + "; ЧН=");
	Иначе
		Возврат СтрокаОклад + ", " + СтрокаНадбавки;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаРеестраКадровыхПриказов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник");
	Таблица.Колонки.Добавить("ФизическоеЛицо");
	Таблица.Колонки.Добавить("Организация");
	Таблица.Колонки.Добавить("ДокументОснование");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("Дата");
	Таблица.Колонки.Добавить("Подразделение");
	Таблица.Колонки.Добавить("Должность");
	Таблица.Колонки.Добавить("Разряд");
	Таблица.Колонки.Добавить("ТарифнаяСтавкаНадбавка");
	Таблица.Колонки.Добавить("ВидДоговора");
	Таблица.Колонки.Добавить("ВидСобытия");
	Таблица.Колонки.Добавить("НомерПриказа");
	Таблица.Колонки.Добавить("ДатаПриказа");
	Таблица.Колонки.Добавить("Основание");   
	
	Возврат Таблица;	
	
КонецФункции

Функция ТаблицаРеестраОтпусков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник");
	Таблица.Колонки.Добавить("ФизическоеЛицо");
	Таблица.Колонки.Добавить("ДокументОснование");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("ВидОтпуска");
	Таблица.Колонки.Добавить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КоличествоДнейОтпуска");
	Таблица.Колонки.Добавить("ДатаНачалаПериодаОтсутствия");
	Таблица.Колонки.Добавить("ДатаОкончанияПериодаОтсутствия");
	Таблица.Колонки.Добавить("ВидДоговора");
	Таблица.Колонки.Добавить("Основание");   
	
	Возврат Таблица;	
	
КонецФункции

Процедура ДополнитьТаблицуВозвратнымиДанными(ДокументСсылка, Сотрудник, ДатаОкончания, ДанныеРеестраКадровыхПриказов, Номер, Основание = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	РеестрКадровыхПриказов.ФизическоеЛицо,
	|	РеестрКадровыхПриказов.Организация
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Сотрудник = &Сотрудник
	|	И РеестрКадровыхПриказов.Регистратор <> &Ссылка
	|	И РеестрКадровыхПриказов.Дата < &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрКадровыхПриказов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДокументОснование = ДокументСсылка;
		НоваяСтрока.Номер = Номер;
		НоваяСтрока.Дата = КонецДня(ДатаОкончания) + 1;
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Номер");
		НоваяСтрока.НомерПриказа = СтруктураРеквизитов.Номер;
		НоваяСтрока.ДатаПриказа = СтруктураРеквизитов.Дата;
		
		Если Основание <> Неопределено Тогда
			НоваяСтрока.Основание = Основание;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЕсли;     	
	
КонецПроцедуры

Функция ОснованиеДляРеестра(ДатаПриказа, НомерПриказа) Экспорт 
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		НомерПриказаНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПриказа, Истина, Истина);
	Иначе
		НомерПриказаНаПечать = НомерПриказа;
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='Пр. № %1 от %2'"), НомерПриказаНаПечать, Формат(ДатаПриказа, "ДЛФ=D"));
		
КонецФункции

Процедура ЗаписатьДанныеОбОбразовании(ОбъектФизическоеЛицо, Образование) Экспорт
	
	Если Не ЗначениеЗаполнено(Образование)
		Или Образование.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	КлассификаторСпециальностей = Новый ТаблицаЗначений;
	
	Для Каждого СтрокаОбразование Из Образование Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведениеСсылка)
			И ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведение) Тогда
			
			СтрокаОбразование.УчебноеЗаведениеСсылка = УчебноеЗаведениеПоНаименованию(СтрокаОбразование.УчебноеЗаведение);
			Если Не ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведениеСсылка) Тогда
				СтрокаОбразование.УчебноеЗаведениеСсылка = НовоеУчебноеЗаведение(СтрокаОбразование.УчебноеЗаведение);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаОбразование.СпециальностьСсылка)
			И ЗначениеЗаполнено(СтрокаОбразование.Специальность) Тогда
			
			СтрокаОбразование.СпециальностьСсылка = СпециальностьПоНаименованию(СтрокаОбразование.Специальность);
			Если Не ЗначениеЗаполнено(СтрокаОбразование.СпециальностьСсылка) Тогда
				СтрокаОбразование.СпециальностьСсылка = НоваяСпециальность(СтрокаОбразование.Специальность, КлассификаторСпециальностей);
			КонецЕсли;
			
		КонецЕсли;  
		
		Если Не ЕстьОбразование(ОбъектФизическоеЛицо.Ссылка, СтрокаОбразование.УчебноеЗаведениеСсылка, СтрокаОбразование.СпециальностьСсылка) Тогда
		
			ОбразованиеФизическихЛиц = Справочники.ОбразованиеФизическихЛиц.СоздатьЭлемент();
			
			ОбразованиеФизическихЛиц.Владелец = ОбъектФизическоеЛицо.Ссылка;
			ОбразованиеФизическихЛиц.ВидОбразования = СтрокаОбразование.ВидОбразования;
			ОбразованиеФизическихЛиц.УчебноеЗаведение = СтрокаОбразование.УчебноеЗаведениеСсылка;
			ОбразованиеФизическихЛиц.Специальность = СтрокаОбразование.СпециальностьСсылка;
			ОбразованиеФизическихЛиц.Окончание = СтрокаОбразование.Окончание;     
			
			ОбразованиеФизическихЛиц.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаписатьДанныеОЗнанииЯзыков(ОбъектФизическоеЛицо, ЗнаниеЯзыков) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗнаниеЯзыков)
		Или ЗнаниеЯзыков.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	КлассификаторЯзыков = Новый ТаблицаЗначений;
	
	Для Каждого СтрокаЗнаниеЯзыков Из ЗнаниеЯзыков Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.Язык)
			И ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.ЯзыкСтрока) Тогда
			
			СтрокаЗнаниеЯзыков.Язык = ЯзыкПоНаименованию(СтрокаЗнаниеЯзыков.ЯзыкСтрока);
			Если Не ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.Язык) Тогда
				СтрокаЗнаниеЯзыков.Язык = НовыйЯзык(СтрокаЗнаниеЯзыков.ЯзыкСтрока, КлассификаторЯзыков);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗнаниеЯзыков.ФизическоеЛицо = ОбъектФизическоеЛицо.Ссылка;
		
	КонецЦикла;	
	
	ЗнаниеЯзыковНаборЗаписей = ДанныеФормыВЗначение(ЗнаниеЯзыков, Тип("РегистрСведенийНаборЗаписей.ЗнаниеЯзыковФизическихЛиц"));
	ЗнаниеЯзыковНаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОбъектФизическоеЛицо.Ссылка);
	ЗнаниеЯзыковНаборЗаписей.Записать(); 
	
КонецПроцедуры

Процедура ЗаписатьФотографию(ФизическоеЛицо, АдресФотографии) Экспорт 
	
	Если Не ЗначениеЗаполнено(АдресФотографии) Тогда
		Возврат;
	КонецЕсли;
	
	ФотографииФизическихЛицМенеджерЗаписи = РегистрыСведений.ФотографииФизическихЛиц.СоздатьМенеджерЗаписи();
	ФотографииФизическихЛицМенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	ФотографииФизическихЛицМенеджерЗаписи.Фотография = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФотографии));
	ФотографииФизическихЛицМенеджерЗаписи.Записать(); 
	
КонецПроцедуры   

Функция АдресФотографииФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФотографииФизическихЛиц.ФизическоеЛицо,
	|	ФотографииФизическихЛиц.Фотография
	|ИЗ
	|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
	|ГДЕ
	|	ФотографииФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ПоместитьВоВременноеХранилище(Выборка.Фотография.Получить(), ФизическоеЛицо.УникальныйИдентификатор());		
	Иначе
		Возврат "";		
	КонецЕсли;
	
КонецФункции

Функция НовоеУчебноеЗаведение(НаименованиеУчебногоЗаведения) 
	
	УстановитьПривилегированныйРежим(Истина);

	УчебноеЗаведение = Справочники.УчебныеЗаведения.СоздатьЭлемент();
	УчебноеЗаведение.Наименование = НаименованиеУчебногоЗаведения;
	УчебноеЗаведение.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УчебноеЗаведение.Ссылка;
	
КонецФункции

Функция НоваяСпециальность(НаименованиеСпециальности, КлассификаторСпециальностей)
	
	Если КлассификаторСпециальностей.Количество() = 0 Тогда
		ЗагрузитьКлассификатор(КлассификаторСпециальностей, Справочники.КлассификаторСпециальностейПоОбразованию.ПолучитьМакет("КлассификаторСпециальностейПоОбразованию"), "Level");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СпециальностьСтроки = КлассификаторСпециальностей.НайтиСтроки(Новый Структура("NameEdit, Level", ВРег(СокрЛП(НаименованиеСпециальности)), "2")); 
	Если СпециальностьСтроки.Количество() > 0 Тогда
		Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.СоздатьЭлемент();
		Специальность.Наименование = СпециальностьСтроки[0].Name;
		Специальность.Код = СпециальностьСтроки[0].Code;
		Специальность.Записать();		
	Иначе
		Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.СоздатьЭлемент();
		Специальность.Наименование = НаименованиеСпециальности;
		Специальность.УстановитьНовыйКод();
		Специальность.Записать();	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Специальность.Ссылка;
	
КонецФункции

Функция НовыйЯзык(НаименованиеЯзыка, КлассификаторЯзыков)
	
	Если КлассификаторЯзыков.Количество() = 0 Тогда
		ЗагрузитьКлассификатор(КлассификаторЯзыков, Справочники.ЯзыкиНародовМира.ПолучитьМакет("КлассификаторЯзыковНародовМира"));
	КонецЕсли;
	
	ЯзыкСтроки = КлассификаторЯзыков.НайтиСтроки(Новый Структура("NameEdit", ВРег(СокрЛП(НаименованиеЯзыка)))); 
	Если ЯзыкСтроки.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Язык = Справочники.ЯзыкиНародовМира.СоздатьЭлемент();
		Язык.Наименование = ЯзыкСтроки[0].Name;
		Язык.Код = ЯзыкСтроки[0].Code;
		Язык.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
		Язык.ОбменДанными.Загрузка = Истина;
		Язык.Записать();	
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Язык.Ссылка;
	Иначе 
		Возврат Справочники.ЯзыкиНародовМира.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьКлассификатор(Классификатор, Макет, ДопИндекс = "")
		
	Классификатор = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	Классификатор.Колонки.Добавить("NameEdit");	
	Для Каждого СтрокаКлассификатора Из Классификатор Цикл
		СтрокаКлассификатора.NameEdit = ВРег(СокрЛП(СтрокаКлассификатора.Name));
	КонецЦикла;		
	
	Классификатор.Индексы.Добавить("NameEdit");
	Если ЗначениеЗаполнено(ДопИндекс) Тогда
		Классификатор.Индексы.Добавить(ДопИндекс);
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьОбразование(ФизическоеЛицо, УчебноеЗаведение, Специальность) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбразованиеФизическихЛиц.Ссылка
	|ИЗ
	|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
	|ГДЕ
	|	ОбразованиеФизическихЛиц.Владелец = &Владелец
	|	И ОбразованиеФизическихЛиц.УчебноеЗаведение = &УчебноеЗаведение
	|	И ОбразованиеФизическихЛиц.Специальность = &Специальность";
	
	Запрос.УстановитьПараметр("Владелец", ФизическоеЛицо);
	Запрос.УстановитьПараметр("УчебноеЗаведение", УчебноеЗаведение);
	Запрос.УстановитьПараметр("Специальность", Специальность);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ПроверитьРаботающихСотрудников(ДокументОбъект, Отказ, ИмяТабличнойЧастиСотрудники = "Сотрудники", ИмяРеквизитаДатаНачала = "ДатаНачала") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", ДокументОбъект[ИмяТабличнойЧастиСотрудники].Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.НомерСтроки,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала КАК ДатаНачала
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&Сотрудники КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ДатаНачала", "Сотрудники." + ИмяРеквизитаДатаНачала);
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТСотрудникиПериоды");
	ЗапросКадровыхДанных = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
		Истина,
		ОписательТаблиц,
		"ДатаПриема,ДатаЗавершенияРаботы,ТекущийВидЗанятости",
		,
		"ВТКадровыеДанныеСотрудников");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросКадровыхДанных.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Сотрудник,
		|	ДанныеДокумента.ДатаНачала
		|ПОМЕСТИТЬ ВТПериодыВКоторыхСотрудникНеРаботал
		|ИЗ
		|	ВТСотрудникиПериоды КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (ДанныеДокумента.ДатаНачала < КадровыеДанныеСотрудников.ДатаПриема
		|				ИЛИ КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|					И КадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|				ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ДанныеДокумента.ДатаНачала > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы)";
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.НомерСтроки КАК НомерСтроки,
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыВКоторыхСотрудникНеРаботал КАК Периоды
		|		ПО СотрудникиПериоды.Сотрудник = Периоды.Сотрудник
		|			И СотрудникиПериоды.ДатаНачала = Периоды.ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1 не работает в организации  %2г.'"),
				Выборка.Сотрудник,
				Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, ИмяТабличнойЧастиСотрудники + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=") + "].Сотрудник", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ДатаПриемаФизическогоЛица(ФизическоеЛицо, ДатаСведений) Экспорт
	
	ДатаПриема = Неопределено;
	
	// Определение минимальной даты приема
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаСведений;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаСведений;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаПриема";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
				ДатаПриема = ДанныеСотрудника.ДатаПриема;
			Иначе
				ДатаПриема = Мин(ДатаПриема, ДанныеСотрудника.ДатаПриема);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаПриема;
	
КонецФункции

Функция УчитыватьЗаработокПредыдущихСтрахователей(ФизическоеЛицо, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъединениеДокументов.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей
	|ИЗ
	|	(ВЫБРАТЬ
	|		БольничныйЛист.Дата КАК Дата,
	|		БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей КАК УчитыватьЗаработокПредыдущихСтрахователей
	|	ИЗ
	|		Документ.БольничныйЛист КАК БольничныйЛист
	|	ГДЕ
	|		БольничныйЛист.Организация = &Организация
	|		И БольничныйЛист.ФизическоеЛицо = &ФизическоеЛицо
	|		И БольничныйЛист.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтпускПоУходуЗаРебенком.Дата,
	|		ОтпускПоУходуЗаРебенком.УчитыватьЗаработокПредыдущихСтрахователей
	|	ИЗ
	|		Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|	ГДЕ
	|		ОтпускПоУходуЗаРебенком.Организация = &Организация
	|		И ОтпускПоУходуЗаРебенком.Сотрудник = &ФизическоеЛицо
	|		И ОтпускПоУходуЗаРебенком.Проведен) КАК ОбъединениеДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъединениеДокументов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчитыватьЗаработокПредыдущихСтрахователей;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область ИтогиПодсчетаСтажаТрудовойДеятельностиОтчетыПоСотрудникамТрудоваяДеятельность

Функция ДнейМесяцаПриПодсчетеСтажа(Знач Дней) Экспорт
	
	Возврат Дней - ЦелыхМесяцевВДняхСтажа(Дней) * 30;
	
КонецФункции

Функция МесяцевГодаПриПодсчетеСтажа(Знач Месяцев, Знач Дней) Экспорт
	
	Месяцев = Месяцев + ЦелыхМесяцевВДняхСтажа(Дней);
	Возврат Месяцев - ЦелыхЛетВМесяцахСтажа(Месяцев) * 12;
	
КонецФункции

Функция ЛетПриПодсчетеСтажа(Знач Лет, Знач Месяцев, Знач Дней) Экспорт
	
	Возврат Лет + ЦелыхЛетВМесяцахСтажа(Месяцев + ЦелыхМесяцевВДняхСтажа(Дней));
	
КонецФункции

Функция ЦелыхМесяцевВДняхСтажа(Знач Дней)
	
	Возврат Цел(Дней / 30);
	
КонецФункции

Функция ЦелыхЛетВМесяцахСтажа(Знач Месяцев)
	
	Возврат Цел(Месяцев / 12);
	
КонецФункции

#КонецОбласти


#Область ФормированиеПредставленийЭлементовСправочникаСотрудники

Процедура ОбработкаПолученияПолейПредставленияСотрудников(Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("УточнениеНаименования");
	Поля.Добавить("ФизическоеЛицо");
	Поля.Добавить("Ссылка");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставленияСотрудника(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	ПравилоФормированияПредставления = ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники;
	Если ЗначениеЗаполнено(ПравилоФормированияПредставления)
		И ПравилоФормированияПредставления <> Перечисления.ВариантыПравилФормированияПредставленияЭлементовСправочникаСотрудники.ФамилияИмяОтчествоДополнение Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеДляФормированияПредставления = Новый Структура;
		ДанныеДляФормированияПредставления.Вставить("ПравилоФормированияПредставления", ПравилоФормированияПредставления);
		
		Если ЗначениеЗаполнено(Данные.ФизическоеЛицо)
			И ПравилоФормированияПредставления = Перечисления.ВариантыПравилФормированияПредставленияЭлементовСправочникаСотрудники.ФамилияИОДополнение Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.ФизическоеЛицо, "ФИО,Фамилия,Имя,Отчество,УточнениеНаименования");
			ФИО = Новый Структура("Фамилия,Имя,Отчество");
			ЗаполнитьЗначенияСвойств(ФИО, ЗначенияРеквизитов);
			
			ДанныеДляФормированияПредставления.Вставить("ФИО", ФИО);
			ДанныеДляФормированияПредставления.Вставить("ФИОПолные", ЗначенияРеквизитов.ФИО);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияФизическогоЛица", ЗначенияРеквизитов.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияСотрудника", Данные.УточнениеНаименования);
			
			Представление = КадровыйУчетВнутреннийКлиентСервер.ПредставлениеЭлементаСправочникаСотрудники(ДанныеДляФормированияПредставления);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", Данные.Ссылка);
			Запрос.УстановитьПараметр("ФизическоеЛицо", Данные.ФизическоеЛицо);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).ФИО КАК ФИОПолные,
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).Фамилия КАК Фамилия,
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).Имя КАК Имя,
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).Отчество КАК Отчество,
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).УточнениеНаименования КАК УточнениеНаименования,
				|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
				|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
				|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация
				|ИЗ
				|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|ГДЕ
				|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
				|	И ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ФИО = Новый Структура("Фамилия,Имя,Отчество");
			ЗаполнитьЗначенияСвойств(ФИО, Выборка);
			
			ДанныеДляФормированияПредставления.Вставить("ФИО", ФИО);
			ДанныеДляФормированияПредставления.Вставить("ФИОПолные", ?(ЗначениеЗаполнено(Выборка.ФИОПолные), Выборка.ФИОПолные, Данные.Наименование));
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияФизическогоЛица", Выборка.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияСотрудника", Данные.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("Организация", Выборка.Организация);
			ДанныеДляФормированияПредставления.Вставить("ВидЗанятости", Выборка.ВидЗанятости);
			ДанныеДляФормированияПредставления.Вставить("ДатаУвольнения", Выборка.ДатаУвольнения);
			
			Представление = КадровыйУчетВнутреннийКлиентСервер.ПредставлениеЭлементаСправочникаСотрудники(ДанныеДляФормированияПредставления);
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Представление) Тогда
			Представление = Данные.Наименование;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеФизическихЛиц

// Сведения об образовании

Функция ДобавитьПолеСведенийОбОбразованииФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	ВидОбразования = Неопределено;
	
	Если НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОбОбразовании";
		
	ИначеЕсли НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОВысшемОбразовании";
		
	ИначеЕсли НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОПослевузовскомОбразовании";
		
	КонецЕсли;
	
	Если ДобавленоПолеСведений Тогда
		
		СведенияОбОбразованииФизическихЛиц = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
		Если СведенияОбОбразованииФизическихЛиц = Неопределено Тогда
			СведенияОбОбразованииФизическихЛиц = Новый Соответствие;
		КонецЕсли; 
		
		СведенияОбОбразованииФизическихЛиц.Вставить(ВидОбразования, Истина);
		ИсточникиДанных.Вставить("СведенияОбОбразованииФизическихЛиц", СведенияОбОбразованииФизическихЛиц);
		
		ПутьКДанным = ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли; 
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбОбразованииФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ВидыОбразований = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
	Если ВидыОбразований = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ИндексЗапросаОбразований = 0;
	
	ВТКУничтожению = Новый Массив;
	ВТКУничтожению.Добавить("ВТОбразованияФизическихЛиц");
	
	ЗапросВТ = ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, "ВТОбразованияФизическихЛиц");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗапросВТ.Текст);
	ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
	
	ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
	
	Если ВидыОбразований.Получить("СведенияОбОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТОбразованияФизическихЛицПервые");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетВидаОбразования");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетГОдаОкончания");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетНомераСтроки");
		
		ВТКУничтожению.Добавить("ВТОбразованияФизическихЛицВторые");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетВидаОбразования");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетГОдаОкончания");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетНомераСтроки");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованияФЛ.Ссылка,
			|	ОбразованияФЛ.ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ОбразованияФЛ.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			|	ОбразованияФЛ.ВидПослевузовскогоОбразования,
			|	ОбразованияФЛ.ВидДополнительногоОбучения,
			|	ОбразованияФЛ.УчебноеЗаведение,
			|	ОбразованияФЛ.Начало,
			|	ОбразованияФЛ.Окончание,
			|	ОбразованияФЛ.Специальность,
			|	ОбразованияФЛ.Квалификация,
			|	ОбразованияФЛ.НаименованиеКурса,
			|	ОбразованияФЛ.КоличествоЧасов,
			|	ОбразованияФЛ.ВидДокумента,
			|	ОбразованияФЛ.Серия,
			|	ОбразованияФЛ.Номер,
			|	ОбразованияФЛ.ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованияФизическихЛицПервые
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованияФЛ
			|ГДЕ
			|	ОбразованияФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетКодаВидаОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			|	Образования.ВидОбразования.Код КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетВидаОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетКодаВидаОбразования КАК Образование1ПриоритетКодаВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетКодаВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования.Код = Образование1ПриоритетКодаВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования.Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования КАК ВидОбразования,
			|	МАКСИМУМ(Образования.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетГОдаОкончания
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетВидаОбразования КАК Образование1ПриоритетВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетВидаОбразования.ВидОбразования
			|			И Образования.ВидОбразования.Код = Образование1ПриоритетВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание,
			|	МИНИМУМ(Образования.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетНомераСтроки
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетГОдаОкончания КАК Образование1ПриоритетГОдаОкончания
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетГОдаОкончания.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетГОдаОкончания.ВидОбразования
			|			И Образования.Окончание = Образование1ПриоритетГОдаОкончания.Окончание
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование1ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования КАК Образование1ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения КАК Образование1ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение КАК Образование1УчебноеЗаведение,
			|	Образования.Начало КАК Образование1Начало,
			|	Образования.Окончание КАК Образование1Окончание,
			|	Образования.Специальность КАК Образование1Специальность,
			|	Образования.Квалификация КАК Образование1Квалификация,
			|	Образования.НаименованиеКурса КАК Образование1НаименованиеКурса,
			|	Образования.КоличествоЧасов КАК Образование1КоличествоЧасов,
			|	Образования.ВидДокумента КАК Образование1ВидДокумента,
			|	Образования.Серия КАК Образование1Серия,
			|	Образования.Номер КАК Образование1Номер,
			|	Образования.ДатаВыдачи КАК Образование1ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованиеПервое
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетНомераСтроки.ВидОбразования
			|			И Образования.Окончание = Образование1ПриоритетНомераСтроки.Окончание
			|			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение,
			|	Образования.Начало,
			|	Образования.Окончание,
			|	Образования.Специальность,
			|	Образования.Квалификация,
			|	Образования.НаименованиеКурса,
			|	Образования.КоличествоЧасов,
			|	Образования.ВидДокумента,
			|	Образования.Серия,
			|	Образования.Номер,
			|	Образования.ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованияФизическихЛицВторые
			|ИЗ
			|	ВТОбразованияФизическихЛицПервые КАК Образования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			|ГДЕ
			|	Образование1ПриоритетНомераСтроки.Ссылка ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетКодаВидаОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛицВторые КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			|	Образования.ВидОбразования.Код КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетВидаОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛицВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетКодаВидаОбразования КАК Образование2ПриоритетКодаВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетКодаВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования.Код = Образование2ПриоритетКодаВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования.Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования КАК ВидОбразования,
			|	МАКСИМУМ(Образования.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетГОдаОкончания
			|ИЗ
			|	ВТОбразованияФизическихЛицВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетВидаОбразования КАК Образование2ПриоритетВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетВидаОбразования.ВидОбразования
			|			И Образования.ВидОбразования.Код = Образование2ПриоритетВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание,
			|	МИНИМУМ(Образования.УчебноеЗаведение) КАК УчебноеЗаведение
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетНомераСтроки
			|ИЗ
			|	ВТОбразованияФизическихЛицВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетГОдаОкончания КАК Образование2ПриоритетГОдаОкончания
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетГОдаОкончания.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетГОдаОкончания.ВидОбразования
			|			И Образования.Окончание = Образование2ПриоритетГОдаОкончания.Окончание
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование2ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования КАК Образование2ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения КАК Образование2ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение КАК Образование2УчебноеЗаведение,
			|	Образования.Начало КАК Образование2Начало,
			|	Образования.Окончание КАК Образование2Окончание,
			|	Образования.Специальность КАК Образование2Специальность,
			|	Образования.Квалификация КАК Образование2Квалификация,
			|	Образования.НаименованиеКурса КАК Образование2НаименованиеКурса,
			|	Образования.КоличествоЧасов КАК Образование2КоличествоЧасов,
			|	Образования.ВидДокумента КАК Образование2ВидДокумента,
			|	Образования.Серия КАК Образование2Серия,
			|	Образования.Номер КАК Образование2Номер,
			|	Образования.ДатаВыдачи КАК Образование2ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованиеВторое
			|ИЗ
			|	ВТОбразованияФизическихЛицВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетНомераСтроки КАК Образование2ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетНомераСтроки.ВидОбразования
			|			И Образования.Окончание = Образование2ПриоритетНомераСтроки.Окончание
			|			И Образования.УчебноеЗаведение = Образование2ПриоритетНомераСтроки.УчебноеЗаведение";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеПервое КАК Образование1
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование1.ФизическоеЛицо}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеВторое КАК Образование2
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование2.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразованиеПервое");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразованиеВторое");
	
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОВысшемОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТВысшиеОбразованияФизическихЛиц");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ОбразованиеФЛ.Начало,
			|	ОбразованиеФЛ.Окончание,
			|	ОбразованиеФЛ.ВидДокумента,
			|	ОбразованиеФЛ.Серия,
			|	ОбразованиеФЛ.Номер,
			|	ОбразованиеФЛ.ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбразованиеФЛПредыдущие.Окончание) КАК ПорядокПолучения
			|ПОМЕСТИТЬ ВТВысшиеОбразованияФизическихЛиц
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованияФизическихЛиц КАК ОбразованиеФЛПредыдущие
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ОбразованиеФЛПредыдущие.ФизическоеЛицо
			|			И ОбразованиеФЛ.ВидОбразования = ОбразованиеФЛПредыдущие.ВидОбразования
			|			И (ОбразованиеФЛ.Окончание > ОбразованиеФЛПредыдущие.Окончание
			|				ИЛИ ОбразованиеФЛ.УчебноеЗаведение < ОбразованиеФЛПредыдущие.УчебноеЗаведение)
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ОбразованиеФЛ.Начало,
			|	ОбразованиеФЛ.Окончание,
			|	ОбразованиеФЛ.ВидДокумента,
			|	ОбразованиеФЛ.Серия,
			|	ОбразованиеФЛ.Номер,
			|	ОбразованиеФЛ.ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВысшиеОбразованияФЛ.ФизическоеЛицо,
			|	ВысшиеОбразованияФЛ.УчебноеЗаведение КАК ВысшееОбразованиеУчебноеЗаведение,
			|	ВысшиеОбразованияФЛ.Специальность КАК ВысшееОбразованиеСпециальность,
			|	ВысшиеОбразованияФЛ.Начало КАК ВысшееОбразованиеНачало,
			|	ВысшиеОбразованияФЛ.Окончание КАК ВысшееОбразованиеОкончание,
			|	ВысшиеОбразованияФЛ.ВидДокумента КАК ВысшееОбразованиеВидДокумента,
			|	ВысшиеОбразованияФЛ.Серия КАК ВысшееОбразованиеСерия,
			|	ВысшиеОбразованияФЛ.Номер КАК ВысшееОбразованиеНомер,
			|	ВысшиеОбразованияФЛ.ДатаВыдачи КАК ВысшееОбразованиеДатаВыдачи,
			|	ВысшиеОбразованияФЛ.Квалификация КАК ВысшееОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТВысшееОбразование
			|ИЗ
			|	ВТВысшиеОбразованияФизическихЛиц КАК ВысшиеОбразованияФЛ
			|ГДЕ
			|	ВысшиеОбразованияФЛ.ПорядокПолучения = 0";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТВысшееОбразование КАК ВысшееОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВысшееОбразование.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТВысшееОбразование");
		
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОПослевузовскомОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТПериодыПослевузовскогоОбразования");
		ВТКУничтожению.Добавить("ВТНомераСтрокПослевузовскогоОбразования");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	МАКСИМУМ(ОбразованиеФЛ.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТПериодыПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание,
			|	МАКСИМУМ(ОбразованиеФЛ.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ВТНомераСтрокПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПослевузовскогоОбразования КАК ПериодыПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ПериодыПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = ПериодыПослевузовскогоОбразования.Окончание
			|			И (ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОбразованиеФЛ.ВидОбразования КАК ПослевузовскоеОбразованиеВидОбразования,
			|	ОбразованиеФЛ.ВидПослевузовскогоОбразования КАК ПослевузовскоеОбразованиеВидПослевузовскогоОбразования,
			|	ОбразованиеФЛ.УчебноеЗаведение КАК ПослевузовскоеОбразованиеУчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность КАК ПослевузовскоеОбразованиеСпециальность,
			|	ОбразованиеФЛ.ВидДокумента КАК ПослевузовскоеОбразованиеВидДокумента,
			|	ОбразованиеФЛ.Начало КАК ПослевузовскоеОбразованиеНачало,
			|	ОбразованиеФЛ.Окончание КАК ПослевузовскоеОбразованиеОкончание,
			|	ОбразованиеФЛ.Серия КАК ПослевузовскоеОбразованиеСерия,
			|	ОбразованиеФЛ.Номер КАК ПослевузовскоеОбразованиеНомер,
			|	ОбразованиеФЛ.ДатаВыдачи КАК ПослевузовскоеОбразованиеДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация КАК ПослевузовскоеОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТПослевузовскоеОбразование
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокПослевузовскогоОбразования КАК НомераСтрокПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = НомераСтрокПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = НомераСтрокПослевузовскогоОбразования.Окончание
			|			И ОбразованиеФЛ.Ссылка = НомераСтрокПослевузовскогоОбразования.Ссылка";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПослевузовскоеОбразование КАК ПослевузовскоеОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПослевузовскоеОбразование.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПослевузовскоеОбразование");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ЗапросВТ.Текст, ВТКУничтожению);
	
КонецПроцедуры

Функция НеобходимыСведенияОбОбразованияхФизическихЛиц(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Образование1УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование1ВидОбразования")
		Или ИмяПоля = ВРег("Образование1Специальность")
		Или ИмяПоля = ВРег("Образование1Начало")
		Или ИмяПоля = ВРег("Образование1Окончание")
		Или ИмяПоля = ВРег("Образование1ВидДокумента")
		Или ИмяПоля = ВРег("Образование1Серия")
		Или ИмяПоля = ВРег("Образование1Номер")
		Или ИмяПоля = ВРег("Образование1ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование1Квалификация")
		Или ИмяПоля = ВРег("Образование2УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование2ВидОбразования")
		Или ИмяПоля = ВРег("Образование2Специальность")
		Или ИмяПоля = ВРег("Образование2Начало")
		Или ИмяПоля = ВРег("Образование2Окончание")
		Или ИмяПоля = ВРег("Образование2ВидДокумента")
		Или ИмяПоля = ВРег("Образование2Серия")
		Или ИмяПоля = ВРег("Образование2Номер")
		Или ИмяПоля = ВРег("Образование2ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование2Квалификация");
		
КонецФункции

Функция НеобходимыСведенияОВысшемОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВысшееОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНачало")
		Или ИмяПоля = ВРег("ВысшееОбразованиеОкончание")
		Или ИмяПоля = ВРег("ВысшееОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСерия")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНомер")
		Или ИмяПоля = ВРег("ВысшееОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ВысшееОбразованиеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПослевузовскоеОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидПослевузовскогоОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНачало")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеОкончание")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСерия")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНомер")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеКвалификация");
		
	КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбОбразованииФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	НеобходимыСведенияОбОбразовании = ИмяПоля = Врег("ВидОбразования")
		Или ИмяПоля = Врег("ВидПослевузовскогоОбразования")
		Или ИмяПоля = Врег("УчебноеЗаведение")
		Или ИмяПоля = Врег("Специальность")
		Или ИмяПоля = Врег("ВидДокумента")
		Или ИмяПоля = Врег("Серия")
		Или ИмяПоля = Врег("Номер")
		Или ИмяПоля = Врег("ДатаВыдачи")
		Или ИмяПоля = Врег("Квалификация")
		Или ИмяПоля = Врег("Начало")
		Или ИмяПоля = Врег("Окончание")
		Или ИмяПоля = Врег("НаименованиеКурса")
		Или ИмяПоля = Врег("КоличествоЧасов")
		Или ИмяПоля = Врег("ВидДополнительногоОбучения")
		Или ИмяПоля = Врег("ДокументОснование");
		
	Если НеобходимыСведенияОбОбразовании Тогда
		
		Если УсловиеПоиска.ОтносительныйПуть
			И ИмяПоля = Врег("ВидОбразования")
			И ТипЗнч(УсловиеПоиска.ПравоеЗначение) = Тип("СправочникСсылка.ВидыОбразованияФизическихЛиц") Тогда
			
			УсловиеВидаСравнения = СокрЛП(УсловиеПоиска.ВидСравнения);
			Если УсловиеВидаСравнения = "<"
				Или УсловиеВидаСравнения = "<="
				Или УсловиеВидаСравнения = ">"
				Или УсловиеВидаСравнения = ">=" Тогда
				
				ВидыОбразованийПоВажности = Новый Массив;
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование);
				
				ИндексТекущегоВида = ВидыОбразованийПоВажности.Найти(УсловиеПоиска.ПравоеЗначение);
				Если ИндексТекущегоВида <> Неопределено Тогда
					
					Если ИндексТекущегоВида = 0 И УсловиеВидаСравнения = ">=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = 0 И УсловиеВидаСравнения = "<" Тогда
						ПравоеЗначение = Новый Массив;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = "<=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = ">" Тогда
						ПравоеЗначение = Новый Массив;
					Иначе
						
						ПравоеЗначение = Новый Массив;
						
						Если УсловиеВидаСравнения = ">" Тогда
							НачальноеЗначение = ИндексТекущегоВида + 1;
						ИначеЕсли УсловиеВидаСравнения = ">=" Тогда
							НачальноеЗначение = ИндексТекущегоВида;
						Иначе
							НачальноеЗначение = 0;
						КонецЕсли; 
						
						Если УсловиеВидаСравнения = "<" Тогда
							КонечноеЗначение = ИндексТекущегоВида - 1;
						ИначеЕсли УсловиеВидаСравнения = "<=" Тогда
							КонечноеЗначение = ИндексТекущегоВида;
						Иначе
							КонечноеЗначение = ВидыОбразованийПоВажности.Количество() - 1;
						КонецЕсли;
						
						Для ИндексЭлемента = НачальноеЗначение По КонечноеЗначение Цикл
							ПравоеЗначение.Добавить(ВидыОбразованийПоВажности.Получить(ИндексЭлемента));
						КонецЦикла;
						
					КонецЕсли;
					
					УсловиеПоиска.ПравоеЗначение = ПравоеЗначение;
					УсловиеПоиска.ВидСравнения = "В";
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.ОбразованиеФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование1")) > 0 Тогда
		ПутьКДанным = "Образование1." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование2")) > 0 Тогда
		ПутьКДанным = "Образование2." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ВысшееОбразование")) > 0 Тогда
		ПутьКДанным = "ВысшееОбразование." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ПослевузовскоеОбразование")) > 0 Тогда
		ПутьКДанным = "ПослевузовскоеОбразование." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения об ученых степенях.

Функция ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхСтепеняхФизическихЛиц", Истина);
		
		ПутьКДанным = "	УченыеСтепени." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхСтепеняхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени) КАК ДатаПрисужденияУченойСтепени
	|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
	|ИЗ
	|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО ТаблицаОтборов.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|{ГДЕ
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо.* КАК ФизическоеЛицо}
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.НомерПоПорядку) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрокУченыхСтепеней
	|ИЗ
	|	ВТМаксимальныеДатыПрисужденияУченыхСтепеней КАК МаксимальныеДатыПрисужденияУченыхСтепеней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
	|			И МаксимальныеДатыПрисужденияУченыхСтепеней.ДатаПрисужденияУченойСтепени = ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомераСтрокУченыхСтепеней.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.Родитель <> ЗНАЧЕНИЕ(Справочник.УченыеСтепени.ПустаяСсылка)
	|			ТОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.Родитель
	|		ИНАЧЕ ФизическиеЛицаУченыеСтепени.УченаяСтепень
	|	КОНЕЦ КАК УченаяСтепень,
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК УченаяСтепеньДатаПрисуждения,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.ОтрасльНауки <> ЗНАЧЕНИЕ(Справочник.ОтраслиНауки.ПустаяСсылка)
	|			ТОГДА ФизическиеЛицаУченыеСтепени.УченаяСтепень.ОтрасльНауки
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОтраслиНауки.ПустаяСсылка)
	|	КОНЕЦ КАК УченаяСтепеньОтрасльНауки,
	|	ФизическиеЛицаУченыеСтепени.ДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
	|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
	|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК УченаяСтепеньОрганизация
	|ПОМЕСТИТЬ ВТПредварительноУченыеСтепени
	|ИЗ
	|	ВТНомераСтрокУченыхСтепеней КАК НомераСтрокУченыхСтепеней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
	|		ПО (ФизическиеЛицаУченыеСтепени.ФизическоеЛицо = НомераСтрокУченыхСтепеней.ФизическоеЛицо)
	|			И (ФизическиеЛицаУченыеСтепени.НомерПоПорядку = НомераСтрокУченыхСтепеней.НомерСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УченыеСтепени.УченаяСтепень КАК УченаяСтепень,
	|	УченыеСтепени.УченаяСтепеньДатаПрисуждения КАК УченаяСтепеньДатаПрисуждения,
	|	УченыеСтепени.УченаяСтепеньОтрасльНауки КАК УченаяСтепеньОтрасльНауки,
	|	УченыеСтепени.УченаяСтепеньДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
	|	УченыеСтепени.УченаяСтепеньДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
	|	УченыеСтепени.УченаяСтепеньОрганизация КАК УченаяСтепеньОрганизация
	|ПОМЕСТИТЬ ВТУченыеСтепениФизическихЛиц
	|ИЗ
	|	ВТПредварительноУченыеСтепени КАК УченыеСтепени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНомераСтрокУченыхСтепеней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредварительноУченыеСтепени";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТУченыеСтепениФизическихЛиц КАК УченыеСтепени
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеСтепени.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТУченыеСтепениФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченаяСтепень")
		Или ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки")
		Или ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения")
		Или ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет")
		Или ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер")
		Или ИмяПоля = ВРег("УченаяСтепеньОрганизация");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ОтрасльНауки";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисужденияУченойСтепени";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДиссертационныйСовет";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломСерияНомер";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломВыданОрганизация";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеСтепениФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения об ученых званиях

Функция ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = "	УченыеЗвания." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания) КАК ДатаПрисвоенияУченогоЗвания
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо)
		|{ГДЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.НомерПоПорядку) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНомераСтрокУченыхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияУченогоЗвания КАК МаксимальныеДатыПрисвоенияУченогоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо = ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияУченогоЗвания.ДатаПрисвоенияУченогоЗвания = ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомераСтрокУченыхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаУченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания КАК УченоеЗваниеДатаПрисвоения,
		|	ФизическиеЛицаУченыеЗвания.АттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	ФизическиеЛицаУченыеЗвания.АттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация КАК УченоеЗваниеОрганизация,
		|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТПредварительноУченыеЗвания
		|ИЗ
		|	ВТНомераСтрокУченыхЗваний КАК НомераСтрокУченыхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = НомераСтрокУченыхЗваний.ФизическоеЛицо)
		|			И (ФизическиеЛицаУченыеЗвания.НомерПоПорядку = НомераСтрокУченыхЗваний.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	УченыеЗвания.УченоеЗваниеДатаПрисвоения КАК УченоеЗваниеДатаПрисвоения,
		|	УченыеЗвания.УченоеЗваниеАттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	УченыеЗвания.УченоеЗваниеАттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	УченыеЗвания.УченоеЗваниеОрганизация КАК УченоеЗваниеОрганизация,
		|	УченыеЗвания.УченоеЗваниеСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТУченыеЗванияФизическихЛиц
		|ИЗ
		|	ВТПредварительноУченыеЗвания КАК УченыеЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНомераСтрокУченыхЗваний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПредварительноУченыеЗвания";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТУченыеЗванияФизическихЛиц КАК УченыеЗвания
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеЗвания.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТУченыеЗванияФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченоеЗвание")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатСерия")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатНомер")
		Или ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения")
		Или ИмяПоля = ВРег("УченоеЗваниеОрганизация")
		Или ИмяПоля = ВРег("УченоеЗваниеСпециальность");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченоеЗваниеАттестатСерия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатСерия";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеАттестатНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатНомер";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисвоенияУченогоЗвания";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатВыданОрганизация";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеСпециальность") Тогда
			УсловиеПоиска.ЛевоеЗначение = "НаучнаяСпециальность";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеЗванияФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о составах семей

Функция ДобавитьПолеСведенийОСоставеСемейФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСоставеСемейФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСоставеСемейФизическихЛиц", Истина);
		
		ПутьКДанным = "	СоставыСемей." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСоставеСемейФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСоставеСемейФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка) КАК КоличествоРодственников,
		|	NULL КАК КоличествоИждивенцев,
		|	NULL КАК КоличествоДетей
		|ПОМЕСТИТЬ ВТСведенияОСоставеСемейФизическихЛицПредварительно
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	NULL,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка),
		|	NULL
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РодственникиФизическихЛиц.НаИждивении)
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	NULL,
		|	NULL,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РодственникиФизическихЛиц.Ссылка)
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтепениРодстваФизическихЛиц КАК СтепениРодстваФизическихЛиц
		|			ПО РодственникиФизическихЛиц.СтепеньРодства = СтепениРодстваФизическихЛиц.Ссылка
		|		ПО (РодственникиФизическихЛиц.Владелец = ФизическиеЛицаПериоды.ФизическоеЛицо)
		|			И (РАЗНОСТЬДАТ(РодственникиФизическихЛиц.ДатаРождения, ФизическиеЛицаПериоды.Период, ГОД) < 18)
		|ГДЕ
		|	ЕСТЬNULL(СтепениРодстваФизическихЛиц.Код, """") В (""05"", ""06"", ""42"", ""43"")
		|{ГДЕ
		|	РодственникиФизическихЛиц.Владелец.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаПериоды.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОСоставеСемейФизическихЛицПредварительно.Период,
		|	СведенияОСоставеСемейФизическихЛицПредварительно.ФизическоеЛицо,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоРодственников) КАК КоличествоРодственников,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоИждивенцев) КАК КоличествоИждивенцев,
		|	СУММА(СведенияОСоставеСемейФизическихЛицПредварительно.КоличествоДетей) КАК КоличествоДетей
		|ПОМЕСТИТЬ ВТСведенияОСоставеСемейФизическихЛиц
		|ИЗ
		|	ВТСведенияОСоставеСемейФизическихЛицПредварительно КАК СведенияОСоставеСемейФизическихЛицПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОСоставеСемейФизическихЛицПредварительно.Период,
		|	СведенияОСоставеСемейФизическихЛицПредварительно.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСведенияОСоставеСемейФизическихЛицПредварительно";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ФизическиеЛицаПериоды.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ФизическиеЛицаПериоды.Период", "ФизическиеЛицаПериоды." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);

	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСоставеСемейФизическихЛиц КАК СоставыСемей
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СоставыСемей.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СоставыСемей.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСоставеСемейФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОСоставеСемейФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КоличествоДетей")
		Или ИмяПоля = ВРег("КоличествоИждивенцев")
		Или ИмяПоля = ВРег("КоличествоРодственников");
		
КонецФункции

// Сведения о почетных званиях.

Функция ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПочетныхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = "	ПочетныеЗванияФизическихЛиц." + ИмяПоля;
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПочетныхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.ДатаПриказа) КАК ДатаПриказа
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияПочетногоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо.*,
		|	НаградыФизическихЛиц.Награда.*,
		|	НаградыФизическихЛиц.ДатаПриказа}
		|
		|СГРУППИРОВАТЬ ПО
		|	НаградыФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.Награда) КАК Награда
		|ПОМЕСТИТЬ ВТСсылкиПочетныхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияПочетногоЗвания КАК МаксимальныеДатыПрисвоенияПочетногоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияПочетногоЗвания.ДатаПриказа = НаградыФизическихЛиц.ДатаПриказа
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СсылкиПочетныхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НаградыФизическихЛиц.Награда КАК ПочетноеЗвание
		|ПОМЕСТИТЬ ВТПочетныеЗванияФизическихЛиц
		|ИЗ
		|	ВТСсылкиПочетныхЗваний КАК СсылкиПочетныхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО СсылкиПочетныхЗваний.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И СсылкиПочетныхЗваний.Награда = НаградыФизическихЛиц.Награда
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеДатыПрисвоенияПочетногоЗвания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСсылкиПочетныхЗваний";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПочетныеЗванияФизическихЛиц КАК ПочетныеЗванияФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПочетныеЗванияФизическихЛиц.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПочетныеЗванияФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПочетноеЗвание");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПочетноеЗвание") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Награда";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.НаградыФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о стажах

Функция ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	НеобходимыСведенияОСтажах = Ложь;
	КатегорияСтажа = Неопределено;
	
	Если НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Общий;
		
	ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Северный;
		
	ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный;
		
	ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет;
		
	ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
		
	ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический;
		
	ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой;
		
	ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
		
	ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе;
		
	КонецЕсли;
	
	Если НеобходимыСведенияОСтажах Тогда
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СведенияОСтажах", КатегорияСтажа);
		
		ПутьКДанным = "	" + ПутьКДаннымСведенийОСтаже(ИмяПоля, ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа));
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат НеобходимыСведенияОСтажах;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	КатегорииСтажей = ИсточникиДанных.Получить("СведенияОСтажах");
	Если КатегорииСтажей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, , "ВТСтажиФизическихЛицРезультирующая");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Для каждого КатегорияСтажа Из КатегорииСтажей Цикл
		
		ИмяТаблицы = ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа);
		ИмяПараметра = ИмяТаблицы + "ПараметрЗапроса";
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛицРезультирующая КАК " + ИмяТаблицы + "
			|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = " + ИмяТаблицы + ".ФизическоеЛицо
			|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = " + ИмяТаблицы + ".Период
			|		И ВЫРАЗИТЬ(" + ИмяТаблицы + ".ВидСтажа КАК Справочник.ВидыСтажа).КатегорияСтажа = &" + ИмяПараметра + "}");
		
		Запрос.УстановитьПараметр(ИмяПараметра, КатегорияСтажа);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтажиФизическихЛицРезультирующая");
	
КонецПроцедуры

Функция НеобходимыСведенияОСтажахФизическихЛиц(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОбОбщемСтаже(ИмяПоля)
		Или НеобходимыСведенияОСеверномСтаже(ИмяПоля)
		Или НеобходимыСведенияОНепрерывномСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля)
		Или НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля)
		Или НеобходимыСведенияОПедагогическомСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОПрочемСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбщемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСеверномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или	ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или	ИмяПоля = ВРег("СеверныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОНепрерывномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или	ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или	ИмяПоля = ВРег("НепрерывныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтажеНаНадбавку(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет");
		
КонецФункции

Функция НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПедагогическомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или	ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("СтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОРасширенномСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПрочемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПрочийСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней")
		Или	ИмяПоля = ВРег("ПрочийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПрочийСтажЛет");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля) Тогда
		
		ИмяКритерия = "РегистрСведений.СтажиФизическихЛиц";
		КритерийДобавлен = Истина;
		
		Если НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Общий;
			ИмяКритерия = ИмяКритерия + ".Общий";
			
		ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Северный;
			ИмяКритерия = ИмяКритерия + ".Северный";
			
		ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Непрерывный;
			ИмяКритерия = ИмяКритерия + ".Непрерывный";
			
		ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.ВыслугаЛет;
			ИмяКритерия = ИмяКритерия + ".ВыслугаЛет";
			
		ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
			ИмяКритерия = ИмяКритерия + ".ОбщийНаучноПедагогический";
			
		ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Педагогический;
			ИмяКритерия = ИмяКритерия + ".Педагогический";
			
		ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Страховой;
			ИмяКритерия = ИмяКритерия + ".Страховой";
			
		ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
			ИмяКритерия = ИмяКритерия + ".РасширенныйСтраховой";
			
		ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Прочее;
			ИмяКритерия = ИмяКритерия + ".Прочее";
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
			
			ОписаниеСтажа = ОбщегоНазначения.ОбщийМодуль("Медицина").ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников();
			
			ПравоеЗначение = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
			
			ОписаниеСтажа = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников();
			
			ПравоеЗначение = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		КонецЕсли;
		
		ОтносительныйПуть = УсловиеПоиска.ОтносительныйПуть;
		Если Прав(ИмяПоля, 17) = ВРег("ПериодРегистрации") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета";
			
		ИначеЕсли Прав(ИмяПоля, 7) = ВРег("Месяцев") Тогда
			
			ОтносительныйПуть = Ложь;
			
			ДатаОтсчетаСтажа = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РегистрСведений.ДатаОтсчета, МЕСЯЦ, -РегистрСведений.РазмерМесяцев), ДЕНЬ, -РегистрСведений.РазмерДней)";
			УсловиеПоиска.ЛевоеЗначение = "
				|	РАЗНОСТЬДАТ(РегистрСведений.ДатаОтсчета, РегистрСведений.Период, МЕСЯЦ) - ВЫБОР
				|		КОГДА ДЕНЬ(РегистрСведений.ДатаОтсчета) > ДЕНЬ(РегистрСведений.Период)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ";
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "РегистрСведений.ДатаОтсчета", ДатаОтсчетаСтажа);
			
		КонецЕсли;
		УсловиеПоиска.ОтносительныйПуть = ОтносительныйПуть;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ОтборПоКатегорииВидаСтажаУстановлен = Ложь;
		УсловияПоиска = КритерииПоиска.Получить(ИмяКритерия);
		Для каждого УсловиеПоиска Из УсловияПоиска Цикл
			
			Если УсловиеПоиска.ЛевоеЗначение = "ВидСтажа.КатегорияСтажа" Тогда
				ОтборПоКатегорииВидаСтажаУстановлен = Истина;
				УсловиеПоиска.ЛевоеЗначение = "РегистрСведений.ВидСтажа.КатегорияСтажа";
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Не ОтборПоКатегорииВидаСтажаУстановлен Тогда
			
			ДополнительноеУсловие = Новый Структура;
			ДополнительноеУсловие.Вставить("ЛевоеЗначение", "РегистрСведений.ВидСтажа.КатегорияСтажа");
			ДополнительноеУсловие.Вставить("ВидСравнения", "=");
			ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
			ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
			КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
			
		КонецЕсли; 
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска)
	
	Для каждого КритерийПоиска Из КритерииПоиска Цикл
		
		Если СтрНайти(ВРег(КритерийПоиска.Ключ), ВРег("РегистрСведений.СтажиФизическихЛиц")) = 1 Тогда
			
			ПравоеЗначениеУсловияПоПериоду = ТекущаяДатаСеанса();
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета" Тогда
					ПравоеЗначениеУсловияПоПериоду = УсловиеПоиска.ПравоеЗначение;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипЗнч(ПравоеЗначениеУсловияПоПериоду) = Тип("Дата") Тогда
				ТекстУсловия = "ДАТАВРЕМЯ(" + Формат(ПравоеЗначениеУсловияПоПериоду, "ДФ='гггг, ММ, дд'; ДП=") + ")";
			Иначе
				ТекстУсловия = ПравоеЗначениеУсловияПоПериоду;
			КонецЕсли;
			
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если Не УсловиеПоиска.ОтносительныйПуть Тогда
					УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "Т.Период", ТекстУсловия);
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа) Экспорт
	
	ИмяТаблицы = "";
	
	Если КатегорияСтажа = Перечисления.КатегорииСтажа.Общий Тогда
		ИмяТаблицы = "ОбщиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Северный Тогда
		ИмяТаблицы = "СеверныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный Тогда
		ИмяТаблицы = "НепрерывныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет Тогда
		ИмяТаблицы = "СтажиНаВыслугаЛет";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический Тогда
		ИмяТаблицы = "ОбщиеНаучноПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический Тогда
		ИмяТаблицы = "ПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой Тогда
		ИмяТаблицы = "СтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой Тогда
		ИмяТаблицы = "РасширенныеСтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее Тогда
		ИмяТаблицы = "ПрочиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский Тогда
		ИмяТаблицы = "МедицинскиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе Тогда
		ИмяТаблицы = "ВыслугаЛетНаГосударственнойСлужбе";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПутьКДаннымСведенийОСтаже(Знач ИмяПоля, ИмяТаблицы)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажВид") Тогда
		
		Возврат ИмяТаблицы + ".ВидСтажа";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации") Тогда
		
		Возврат ИмяТаблицы + ".ПериодРегистрации";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".РазмерМесяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней") Тогда
		
		Возврат ИмяТаблицы + ".РазмерДней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней") Тогда
		
		Возврат ИмяТаблицы + ".Дней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажМесяцев") 
		Или ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажМесяцев") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".Месяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажЛет") 
		Или ИмяПоля = ВРег("СеверныйСтажЛет")
		Или ИмяПоля = ВРег("НепрерывныйСтажЛет")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет")
		Или ИмяПоля = ВРег("ПедагогическийСтажЛет") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет")
		Или ИмяПоля = ВРег("СтраховойСтажЛет")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет")
		Или ИмяПоля = ВРег("ПрочийСтажЛет") Тогда
		
		Возврат ИмяТаблицы + ".Лет";
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
		И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("Медицина").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
		И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сведения о знании языков

Функция ДобавитьПолеСведенийОЗнанияхЯзыковФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЗнанияхЯзыковФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЗнанияхЯзыковФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЗнанияхЯзыковФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТЗнаниеЯзыков
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ФизическиеЛицаЗнаниеЯзыков
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо
		|{ГДЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо.*,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык.*,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка1 КАК КодСтепениЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка1.СтепеньЗнанияЯзыкаКод
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка2 КАК КодСтепениЗнанияЯзыка2
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка2.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка2.СтепеньЗнанияЯзыкаКод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗнаниеЯзыков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСтепениЗнанияЯзыка1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСтепениЗнанияЯзыка2";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка1.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка2 КАК СтепеньЗнанияЯзыка2
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка2.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтепеньЗнанияЯзыка1");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтепеньЗнанияЯзыка2");
	
КонецПроцедуры

Функция НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладеемыйЯзык1")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык1СтепеньЗнания")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык2")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык2СтепеньЗнания");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОЗнанииЯзыковФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("ВладеемыйЯзык") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Язык";
	ИначеЕсли ИмяПоля = ВРег("СтепеньЗнанияЯзыка") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "СтепеньЗнанияЯзыка";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЗнаниеЯзыковФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.СтепеньЗнанияЯзыка";
	КонецЕсли;
		
	Возврат ПутьКДанным;
		
КонецФункции

// Сведения о профессиях

Функция ДобавитьПолеСведенийОПрофессияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПрофессияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПрофессияхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПрофессияхФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПрофессияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПрофессияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрофессииФизическихЛиц.Профессия
		|ПОМЕСТИТЬ ВТПрофессии
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрофессииФизическихЛиц КАК ПрофессииФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ПрофессииФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо.*,
		|	ПрофессииФизическихЛиц.Профессия.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия1Код
		|ПОМЕСТИТЬ ВТКодПрофессии1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия) КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессия1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии1 КАК КодПрофессии1
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии1.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии1.Профессия1Код
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия2Код
		|ПОМЕСТИТЬ ВТКодПрофессии2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	Профессии.Профессия
		|ПОМЕСТИТЬ ВТПрофессия2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии2 КАК КодПрофессии2
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии2.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии2.Профессия2Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрофессии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодПрофессии1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодПрофессии2";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия1.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия2 КАК Профессия2
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия2.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПрофессия1");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПрофессия2");
	
КонецПроцедуры

Функция НеобходимыСведенияОПрофессияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Профессия1")
		Или	ИмяПоля = ВРег("Профессия2");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПрофессияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("Профессия") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Профессия";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПрофессииФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПрофессияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Профессия1") Тогда
		ПутьКДанным = "	Профессия1.Профессия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Профессия2") Тогда
		ПутьКДанным = "	Профессия2.Профессия";
	КонецЕсли;
		
	Возврат ПутьКДанным;
		
КонецФункции

// Сведения о состояниях в браке.

Функция ДобавитьПолеСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянияхВБракеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСостоянияхВБракеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСостоянияхВБракеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСостоянияхВБракеФизическихЛиц КАК СостоянияВБракеФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СостоянияВБракеФизическихЛиц.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СостоянияВБракеФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСостоянияхВБракеФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации")
		Или ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке");
	
КонецФункции

Функция ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.СостояниеВБраке";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о воинском учете

Функция ДобавитьПолеСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОВоинскомУчетеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОВоинскомУчетеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОВоинскомУчетеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОВоинскомУчетеФизическихЛиц КАК ВоинскийУчет
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВоинскийУчет.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ВоинскийУчет.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОВоинскомУчетеФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОВоинскомУчетеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации")
		Или ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса")
		Или ИмяПоля = ВРег("ВоинскийУчетЗвание")
		Или	ИмяПоля = ВРег("ВоинскийУчетСостав")
		Или	ИмяПоля = ВРег("ВоинскийУчетВУС")
		Или	ИмяПоля = ВРег("ВоинскийУчетГодность")
		Или	ИмяПоля = ВРег("ВоинскийУчетВоенкомат")
		Или	ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии")
		Или	ИмяПоля = ВРег("ВоинскийУчетПунктПеречня")
		Или	ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОВоинскомУчетеФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		Иначе
			
			УсловиеПоиска.ЛевоеЗначение = Сред(ИмяПоля, СтрДлина("ВоинскийУчет") + 1);
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ВоинскийУчет", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса") Тогда
		ПутьКДанным = "	ВоинскийУчет.КатегорияЗапаса";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗвание") Тогда
		ПутьКДанным = "	ВоинскийУчет.Звание";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетСостав") Тогда
		ПутьКДанным = "	ВоинскийУчет.Состав";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВУС") Тогда
		ПутьКДанным = "	ВоинскийУчет.ВУС";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетГодность") Тогда
		ПутьКДанным = "	ВоинскийУчет.Годность";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВоенкомат") Тогда
		ПутьКДанным = "	ВоинскийУчет.Военкомат";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии") Тогда
		ПутьКДанным = "	ВоинскийУчет.НомерКомандыПартии";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетПунктПеречня") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПунктПеречня";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания") Тогда
		ПутьКДанным = "	ВоинскийУчет.НаличиеМобпредписания";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскойОбязанности";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскомуУчету";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения об исчислении северного стажа

Функция ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПараметрахИсчисленияСеверногоСтажа", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавкиИзменяется")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавки");
	
КонецФункции

Функция ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПорядокИсчисленияПроцентаСевернойНадбавки";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавкиИзменяется") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавкиИзменяется";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПараметрахИсчисленияСеверногоСтажа") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПараметрахИсчисленияСеверногоСтажа КАК ПараметрыИсчисленияПроцентаСевернойНадбавки
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.ФизическоеЛицо");
	
	Если ОписательВременнойТаблицыОтборов.Свойство("ИмяПоляСотрудник")
		И ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник <> Неопределено 
		И НЕ ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник) Тогда
		
		ЧастиЗапроса.Добавить(
			"		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.Сотрудник");
		
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(
		"	И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПараметрахИсчисленияСеверногоСтажа");
	
КонецПроцедуры

// Сведения о бронировании

Функция ДобавитьПолеСведенийОБронированииСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОБронированииСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОБронированииСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОБронированииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОБронированииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = ЗапросВТСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБронированииСотрудников КАК БронированиеСотрудников
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = БронированиеСотрудников.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БронированиеСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОБронированииСотрудников");
	
КонецПроцедуры

Функция НеобходимыСведенияОБронированииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизацией")
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОБронированииГражданОрганизациями(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Организация";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БронированиеСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОБронированииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
		ПутьКДанным = "	БронированиеСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Регистратор";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Организация";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения о льготах граждан подвергшихся воздействию радиации.

Функция ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС", Истина);
		
		ПутьКДанным = "	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска";
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

Функция НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("КоличествоДнейОтпускаЧАЭС")
	
КонецФункции

// Строковые сведения физических лиц.

Функция ДобавитьПолеСтроковыхСведенийФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСтроковыеСведенияФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СтроковыеСведенияФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСтроковыхСведенийФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСтроковыеСведенияФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПолученныеОбразования")
		Или	ИмяПоля = ВРег("ПовышениеКвалификации")
		Или	ИмяПоля = ВРег("Переподготовка")
		Или	ИмяПоля = ВРег("Награды")
		Или	ИмяПоля = ВРег("Документы")
		Или	ИмяПоля = ВРег("ЗнанияЯзыков")
		Или	ИмяПоля = ВРег("Профессии")
		Или	ИмяПоля = ВРег("Специальности")
		Или	ИмяПоля = ВРег("ТрудоваяДеятельность")
		Или	ИмяПоля = ВРег("СоставСемьи");
		
КонецФункции

Функция ПутьКДаннымСтроковыхСведенийФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ПолученныеОбразования") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Образование";
	ИначеЕсли ИмяПоля = ВРег("ПовышениеКвалификации") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ПовышениеКвалификации";
	ИначеЕсли ИмяПоля = ВРег("Переподготовка") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Переподготовка";
	ИначеЕсли ИмяПоля = ВРег("Награды") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Награды";
	ИначеЕсли ИмяПоля = ВРег("Документы") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Документы";
	ИначеЕсли ИмяПоля = ВРег("ЗнанияЯзыков") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ЗнаниеЯзыков";
	ИначеЕсли ИмяПоля = ВРег("Профессии") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Профессии";
	ИначеЕсли ИмяПоля = ВРег("Специальности") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Специальности";
	ИначеЕсли ИмяПоля = ВРег("ТрудоваяДеятельность") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ТрудоваяДеятельность";
	ИначеЕсли ИмяПоля = ВРег("СоставСемьи") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.СоставСемьи";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСтроковыеСведенияФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СтроковыеСведенияФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтроковыеСведенияФизическихЛиц.ФизическоеЛицо,
		|	СтроковыеСведенияФизическихЛиц.Документы,
		|	СтроковыеСведенияФизическихЛиц.ЗнаниеЯзыков,
		|	СтроковыеСведенияФизическихЛиц.Награды,
		|	СтроковыеСведенияФизическихЛиц.Образование,
		|	СтроковыеСведенияФизическихЛиц.ПовышениеКвалификации,
		|	СтроковыеСведенияФизическихЛиц.Переподготовка,
		|	СтроковыеСведенияФизическихЛиц.Профессии,
		|	СтроковыеСведенияФизическихЛиц.СоставСемьи,
		|	СтроковыеСведенияФизическихЛиц.Специальности,
		|	СтроковыеСведенияФизическихЛиц.ТрудоваяДеятельность
		|ПОМЕСТИТЬ ВТСтроковыеСведенияФизическихЛиц
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтроковыеСведенияФизическихЛиц КАК СтроковыеСведенияФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = СтроковыеСведенияФизическихЛиц.ФизическоеЛицо";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтроковыеСведенияФизическихЛиц КАК СтроковыеСведенияФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтроковыеСведенияФизическихЛиц.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтроковыеСведенияФизическихЛиц");
	
КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеСотрудников

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудниковДляОбновления,"ДатаЗавершенияРаботы");
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	// Подготовка таблицы отбора сотрудников.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаЗавершенияРаботы КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтбораСотрудников", "Сотрудник"));
	
	// Подготовка сведений о плановых начислениях сотрудника.
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период");
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановыеНачисления.Начисление.ВключатьВФОТ
		|				ТОГДА ПлановыеНачисления.Размер
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ТекущийФОТ,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановыеНачисления.НачислениеТарифнойСтавки
		|				ТОГДА 0
		|			ИНАЧЕ ПлановыеНачисления.Размер
		|		КОНЕЦ) КАК ТекущаяНадбавка
		|ПОМЕСТИТЬ ВТТекущиеДанныеНачислений
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Начисление";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.УточнитьПараметрыПостроенияСрезаЗначенийПоказателей(ПараметрыПостроения);
	КонецЕсли;
	
	// Подготовка сведений о текущей тарифной ставке.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников",
			"Сотрудник,Показатель"),
		ПараметрыПостроения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи) КАК ПериодЗаписи
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыЗначенияПериодическихПоказателей
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация) КАК Организация,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение) КАК Значение
	|ПОМЕСТИТЬ ВТПоследниеЗначениеПоказателей
	|ИЗ
	|	ВТМаксимальныеПериодыЗначенияПериодическихПоказателей КАК МаксимальныеПериодыЗначенияПериодическихПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|		ПО МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
	|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи = МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник,
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Значение, 0) КАК ТекущаяТарифнаяСтавка,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущийФОТ, 0) КАК ТекущийФОТ,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущаяНадбавка, 0) КАК ТекущаяНадбавка
	|ПОМЕСТИТЬ ВТЗначениеПоказателя
	|ИЗ
	|	ВТОтбораСотрудников КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеЗначениеПоказателей КАК ПоследниеЗначениеПоказателей
	|		ПО Сотрудники.Сотрудник = ПоследниеЗначениеПоказателей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеНачислений КАК ТекущиеДанныеНачислений
	|		ПО Сотрудники.Сотрудник = ТекущиеДанныеНачислений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначениеПоказателя.Сотрудник,
	|	ЗначениеПоказателя.ФизическоеЛицо,
	|	ЗначениеПоказателя.ГоловнаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяТарифнаяСтавка,
	|	ЗначениеПоказателя.ТекущийФОТ,
	|	ЗначениеПоказателя.ТекущаяНадбавка,
	|	ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАванса,
	|	ЕСТЬNULL(ПлановыеАвансы.Аванс, 0) КАК ТекущийАванс
	|ИЗ
	|	ВТЗначениеПоказателя КАК ЗначениеПоказателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
	|		ПО ЗначениеПоказателя.Сотрудник = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
	|			И ЗначениеПоказателя.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
	|		ПО ЗначениеПоказателя.Сотрудник = ПлановыеАвансы.Сотрудник
	|ГДЕ
	|	(ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) <> ЗначениеПоказателя.ТекущаяТарифнаяСтавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0) <> ЗначениеПоказателя.ТекущийФОТ
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0) <> ЗначениеПоказателя.ТекущаяНадбавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) <> ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0) <> ЕСТЬNULL(ПлановыеАвансы.Аванс, 0))";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияСевернойНадбавки(МенеджерВременныхТаблиц, ИмяВТДатыИзмененияСевернойНадбавки = "ВТДатыИзмененияСевернойНадбавки") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ПроцентыСевернойНадбавкиФизическихЛиц.Период КАК Дата
		|ПОМЕСТИТЬ ВТДатыИзмененияСевернойНадбавки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
		|			И (Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
		|		ПО (Сотрудники.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо)
		|			И (ПроцентыСевернойНадбавкиФизическихЛиц.Период МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыИзмененияСевернойНадбавки", ИмяВТДатыИзмененияСевернойНадбавки);
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция СведенияОСтажахСотрудников(СотрудникиДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник,
		|	СотрудникиДаты.Период
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиДаты.Период КАК Период,
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицами
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиДаты.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Период,
		|	СотрудникиСФизическимиЛицами.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами";
		
	Запрос.Выполнить();
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ВТТаблицаОтборовФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Лет, 0) КАК Лет,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Месяцев, 0) КАК Месяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Дней, 0) КАК Дней
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	Сотрудник";
		
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиСотрудников = Новый Соответствие;
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				СведенияОСтаже = Новый Структура("Лет,Месяцев,Дней", 0, 0, 0);
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
			КонецЕсли; 
			
		КонецЦикла;
		
		СтажиСотрудников.Вставить(ВыборкаПоСотрудникам.Сотрудник, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиСотрудников;
	
КонецФункции

Функция СведенияОСтажахФизическихЛиц(ФизическиеЛицаДаты, ПолучатьБудущиеЗначенияСтажей = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическиеЛицаДаты", ФизическиеЛицаДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛицаДаты.Период,
		|	ФизическиеЛицаДаты.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаДаты
		|ИЗ
		|	&ФизическиеЛицаДаты КАК ФизическиеЛицаДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТФизическиеЛицаДаты.Период,
		|	ВТФизическиеЛицаДаты.ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТФизическиеЛицаСВидамиСтажей
		|ИЗ
		|	ВТФизическиеЛицаДаты КАК ВТФизическиеЛицаДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.Период,
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей";
		
	Запрос.Выполнить();
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ВТТаблицаОтборовФизическихЛиц", ПолучатьБудущиеЗначенияСтажей);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаСВидамиСтажей.ВидСтажа КАК ВидСтажа,
		|	ЕСТЬNULL(СтажиФизическихЛиц.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерМесяцев, 0) КАК РазмерМесяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерДней, 0) КАК РазмерДней,
		|	ЕСТЬNULL(СтажиФизическихЛиц.ИсчисляетсяСДатыПриема, ЛОЖЬ) КАК ИсчисляетсяСДатыПриема,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Лет, 0) КАК Лет,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Месяцев, 0) КАК Месяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Дней, 0) КАК Дней
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И ФизическиеЛицаСВидамиСтажей.Период = СтажиФизическихЛиц.Период
		|			И ФизическиеЛицаСВидамиСтажей.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	ФизическоеЛицо";
		
	ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиФизическихЛиц = Новый Соответствие;
	Пока ВыборкаПоФизическимЛицам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоФизическимЛицам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				
				СведенияОСтаже = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
			КонецЕсли; 
			
		КонецЦикла;
		
		СтажиФизическихЛиц.Вставить(ВыборкаПоФизическимЛицам.ФизическоеЛицо, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиФизическихЛиц;
		
КонецФункции

Функция ТекущиеНачисленияСотрудника(Сотрудник, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Возврат ТекущиеНачисленияСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), ДатаСведений, ИсключаемыйРегистратор, ФормироватьСПериодичностьДень).Получить(Сотрудник);
	
КонецФункции

Функция ТекущиеНачисленияСотрудников(Сотрудники, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ДатаСведений КАК Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Запрос.Выполнить();
	
	Отборы = Новый Массив;
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Регистратор", "<>", ИсключаемыйРегистратор));
		
	КонецЕсли;
	
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Отборы));
	
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(
		Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений, ФормироватьСПериодичностьДень);
	
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеНачисленияСотрудников.Период,
		|	ПлановыеНачисленияСотрудников.Сотрудник,
		|	ПлановыеНачисленияСотрудников.Начисление,
		|	ПлановыеНачисленияСотрудников.ДокументОснование,
		|	ПлановыеНачисленияСотрудников.Размер,
		|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель,
		|	ПлановыеНачисленияСотрудников.НачислениеТарифнойСтавки,
		|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ПлановыеНачисленияСотрудников.ОсновнойПоказатель) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСотрудниковСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отборы;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Сотрудник,Показатель,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник КАК Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Начисление КАК Начисление,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование КАК ДокументОснование,
		|	НачисленияСотрудниковСПоказателями.Размер КАК Размер,
		|	НачисленияСотрудниковСПоказателями.ОсновнойПоказатель КАК ОсновнойПоказатель,
		|	НачисленияСотрудниковСПоказателями.НачислениеТарифнойСтавки КАК НачислениеТарифнойСтавки,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСотрудниковСПоказателями.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|			И НачисленияСотрудниковСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСотрудниковСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И НачисленияСотрудниковСПоказателями.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)
		|ИТОГИ
		|	МАКСИМУМ(Размер),
		|	МАКСИМУМ(ОсновнойПоказатель),
		|	МАКСИМУМ(НачислениеТарифнойСтавки)
		|ПО
		|	Сотрудник,
		|	Начисление,
		|	ДокументОснование";
		
	ПлановыеНачисленияСоответствие = Новый Соответствие;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		НачисленияСотрудников = Новый Соответствие;
		ВыборкаПоНачислениям = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			ОписанияНачислений = Новый ТаблицаЗначений;
			ОписанияНачислений.Колонки.Добавить("Начисление");
			ОписанияНачислений.Колонки.Добавить("ДокументОснование");
			ОписанияНачислений.Колонки.Добавить("Размер");
			ОписанияНачислений.Колонки.Добавить("ОсновнойПоказатель");
			ОписанияНачислений.Колонки.Добавить("НачислениеТарифнойСтавки");
			ОписанияНачислений.Колонки.Добавить("Показатели");
			ОписанияНачислений.Индексы.Добавить("ДокументОснование");
			
			ВыборкаПоОснованиям = ВыборкаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОснованиям.Следующий() Цикл
				
				ОписаниеНачисления = ОписанияНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеНачисления, ВыборкаПоОснованиям);
				
				ОписаниеПоказателей = Новый Соответствие;
				ВыборкаПоПоказателям = ВыборкаПоОснованиям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						ОписаниеПоказателей.Вставить(ВыборкаПоПоказателям.Показатель, ВыборкаПоПоказателям.Значение);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеНачисления.Показатели = ОписаниеПоказателей;
				
			КонецЦикла;
			
			НачисленияСотрудников.Вставить(ВыборкаПоНачислениям.Начисление, ОписанияНачислений);
			
		КонецЦикла; 
		
		ПлановыеНачисленияСоответствие.Вставить(ВыборкаПоСотрудникам.Сотрудник, НачисленияСотрудников);
		
	КонецЦикла;
	
	Возврат ПлановыеНачисленияСоответствие; 
	
КонецФункции

Процедура ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная,ДобавлениеИзменениеОтпусков,ЧтениеОтпусков", , Ложь) Тогда
		КадровыйУчет.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(Сотрудники) Экспорт
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		ОбновляемыеСотрудники = Сотрудники;
	КонецЕсли;
	
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", ОбновляемыеСотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОбновляемыеЛюди
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбновляемыеСотрудники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьРабочееМестоПоТрудовомуДоговору,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЭтоСотрудникПоТрудовомуДоговору
		|ПОМЕСТИТЬ ВТСотрудникиКОбновлению
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеЛюди КАК ОбновляемыеЛюди
		|		ПО Сотрудники.ФизическоеЛицо = ОбновляемыеЛюди.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОбновляемыеЛюди.ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация,
		|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПоздниеДатыОкончанияДоговоров
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО СотрудникиКОбновлению.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|			И (НЕ СотрудникиКОбновлению.ЭтоСотрудникПоТрудовомуДоговору)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор) КАК Регистратор
		|ПОМЕСТИТЬ ВТПоследниеДоговоры
		|ИЗ
		|	ВТПоздниеДатыОкончанияДоговоров КАК ПоздниеДатыОкончанияДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО ПоздниеДатыОкончанияДоговоров.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|			И ПоздниеДатыОкончанияДоговоров.ДатаОкончания = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ПоследниеДоговоры.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПоздниеДатыОкончанияДоговоровФизическихЛиц
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация,
		|	МАКСИМУМ(ПоследниеДоговоры.Сотрудник) КАК Сотрудник
		|ПОМЕСТИТЬ ВТОсновныеДоговорникиФизическихЛиц
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоздниеДатыОкончанияДоговоровФизическихЛиц КАК ПоздниеДатыОкончанияДоговоровФизическихЛиц
		|		ПО ПоследниеДоговоры.ФизическоеЛицо = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ФизическоеЛицо
		|			И ПоследниеДоговоры.ГоловнаяОрганизация = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ГоловнаяОрганизация
		|			И ПоследниеДоговоры.ДатаОкончания = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК ТекущаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК ТекущееПодразделение,
		|	ВЫБОР
		|		КОГДА НЕ ОсновныеДоговорникиФизическихЛиц.Сотрудник ЕСТЬ NULL 
		|				И НЕ ЕСТЬNULL(СотрудникиКОбновлению.ЕстьРабочееМестоПоТрудовомуДоговору, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновноеРабочееМестоВОрганизации
		|ПОМЕСТИТЬ ВТЗаписиКОбновлению
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО ПоследниеДоговоры.Регистратор = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ПО ПоследниеДоговоры.Сотрудник = СотрудникиКОбновлению.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДоговорникиФизическихЛиц КАК ОсновныеДоговорникиФизическихЛиц
		|		ПО ПоследниеДоговоры.Сотрудник = ОсновныеДоговорникиФизическихЛиц.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ЛОЖЬ
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ПО СотрудникиКОбновлению.Сотрудник = ПоследниеДоговоры.Сотрудник
		|ГДЕ
		|	НЕ СотрудникиКОбновлению.ЭтоСотрудникПоТрудовомуДоговору
		|	И ПоследниеДоговоры.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписиКОбновлению.Сотрудник,
		|	ЗаписиКОбновлению.ФизическоеЛицо,
		|	ЗаписиКОбновлению.ГоловнаяОрганизация,
		|	ЗаписиКОбновлению.ТекущаяОрганизация,
		|	ЗаписиКОбновлению.ТекущееПодразделение,
		|	ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации
		|ИЗ
		|	ВТЗаписиКОбновлению КАК ЗаписиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ЗаписиКОбновлению.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	(ЗаписиКОбновлению.ГоловнаяОрганизация <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ТекущаяОрганизация <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ТекущееПодразделение <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации, НЕ ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации))";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
	РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники);
	
КонецПроцедуры

Функция НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Экспорт
	
	НеобходимыКадровыеДанные =  КадровыйУчетБазовый.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля)
		Или НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОВоинскомУчетеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОБронированииСотрудников(ИмяПоля)
		Или НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(ИмяПоля)
		Или НеобходимыСведенияОСоставеСемейФизическихЛиц(ИмяПоля);
	
	Если Не НеобходимыКадровыеДанные
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		НеобходимыКадровыеДанные =
			Модуль.НеобходимыСведенияОКлассныхЧинахРангах(ИмяПоля)
			Или Модуль.НеобходимыСведенияОВоинскихСпециальныхЗваниях(ИмяПоля);
			
	КонецЕсли; 
	
	Возврат НеобходимыКадровыеДанные;
	
КонецФункции

Функция ИсточникИнформацииОКлассахУсловийТруда() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат "ДолжностьПоШтатномуРасписанию";
	Иначе
		Возврат КадровыйУчетБазовый.ИсточникИнформацииОКлассахУсловийТруда();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения настроек подсистемы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиВоинскогоУчета() Экспорт
	
	НастройкиВоинскогоУчета = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	НастройкиВоинскогоУчета.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиВоинскогоУчета, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
	
	Если НастройкиВоинскогоУчета.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьВоинскийУчет", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьМобилизационныеПредписания", Ложь);
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти


#Область ПолучениеСотрудниковОрганизации

// Различаются следующие подмножества сотрудников:
// 		* Сотрудники принятые только по трудовым договорам (1).
//		* Сотрудники с которыми только заключен договор ГПХ (2).
//		* Сотрудники принятые по трудовым договорам и с которыми заключены договоры ГПХ (3).
//
// Для получения сотрудников используются параметры:
//		* РаботникиПоТрудовымДоговорам.
//		* РаботникиПоДоговорамГПХ.
//
//
// Различаются следующие сочетания параметров:
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Ложь
//			В выборку войдет только 1 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Неопределено
//			В выборку войдут 1 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 1,2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдет только 2 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Ложь
//			Сформирует пустую таблицу.
//	
// При другом сочетании параметров будет вызвано исключение.
//
//
// Параметр ПодработкиСотрудниковПоТрудовымДоговорам расширяет подмножества
// возможностей выбора сотрудников оформленных по трудовым договорам.
//
// Различаются следующие сочетания:
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Ложь
//			В выборку попадут только головные сотрудники.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут как головные сотрудники, так и подработки.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут только подработки.
//
// При значении параметра РаботникиПоТрудовымДоговорам = Ложь, значение параметра
// ПодработкиСотрудниковПоТрудовымДоговорам игнорируется. Т.е. в выборку не попадут
// ни головные сотрудники ни подработки. 
//
// При отборе подработок учитываются те же параметры отбора по периоду, организации
// и подразделению, что применяются для отбора головных сотрудников.
//
// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   	Структура - Содержит дополнительные ключи:
//				* РаботникиПоТрудовымДоговорам 				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам 	- Булево.
//				* РаботникиПоДоговорамГПХ 					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолученияСотрудников = КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   	Структура - Содержит дополнительные ключи:
//				* РаботникиПоТрудовымДоговорам 				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам 	- Булево.
//				* РаботникиПоДоговорамГПХ 					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт

	ПараметрыПолученияСотрудников =  КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

Процедура ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников)
	
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолученияСотрудников.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоДоговорамГПХ", Неопределено);
	
КонецПроцедуры

Функция ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды) Экспорт
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	// При отключенных функциональных опциях запрос формируется со значениями "по умолчанию"
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		РаботникиПоДоговорамГПХ = Неопределено;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	// Запрос подработок формируется если формируется запрос по работником на трудовых договорах
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
		
	Иначе
		
		Если (РаботникиПоТрудовымДоговорам = Неопределено И ПодработкиРаботниковПоТрудовымДоговорам <> Истина И РаботникиПоДоговорамГПХ = Ложь)
			Или (РаботникиПоТрудовымДоговорам = Ложь И РаботникиПоДоговорамГПХ = Неопределено)
			Или (РаботникиПоТрудовымДоговорам = Неопределено И ПодработкиРаботниковПоТрудовымДоговорам <> Истина И РаботникиПоДоговорамГПХ = Неопределено) Тогда
			
			ВызватьИсключение НСтр("ru='Не верно заданы параметры получения сотрудников организации'");
			
		КонецЕсли;
		
		Если РаботникиПоТрудовымДоговорам = Неопределено
			И ПодработкиРаботниковПоТрудовымДоговорам = Истина
			И РаботникиПоДоговорамГПХ = Ложь Тогда
			
			Запрос = КадровыйУчетБазовый.ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
			
		Иначе
			
			Если Параметры.Свойство("СписокФизическихЛиц") Тогда
				ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			Иначе
				ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПолучения, Параметры);
			ПараметрыПолучения.РаботникиПоДоговорамГПХ = Ложь;
			
			Запрос = КадровыйУчетБазовый.ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	Перем ИмяВТФизическиеЛица;
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	// При отключенных функциональных опциях запрос формируется со значениями "по умолчанию"
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		РаботникиПоДоговорамГПХ = Неопределено;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	// Запрос подработок формируется если формируется запрос по работником на трудовых договорах
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ГДЕ
			|	ЛОЖЬ";
		
		Если Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
			
			ПоляКадровыхДанных = "";
			
			МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные, ",", Истина, Истина);
			Для каждого ИмяПоля Из МассивИменПолей Цикл
				
				ИмяПоляВРег = ВРег(ИмяПоля);
				Если ИмяПоляВРег = ВРег("Период")
					Или ИмяПоляВРег = ВРег("Сотрудник")
					Или ИмяПоляВРег = ВРег("ФизическоеЛицо")Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПоляКадровыхДанных = ПоляКадровыхДанных + "," + Символы.ПС + "	NULL КАК " + ИмяПоля;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(ПоляКадровыхДанных) Тогда
				ПоляКадровыхДанных = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо" + ПоляКадровыхДанных;
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", ПоляКадровыхДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
		
	Иначе
		
		Если РаботникиПоДоговорамГПХ = Неопределено Тогда
			
			Запрос = КадровыйУчетБазовый.ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц);
			
		Иначе
			
			Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
				ТекстДатаОкончания = Параметры.ОкончаниеПериода;
			ИначеЕсли Параметры.ОкончаниеПериода = Неопределено Тогда
				ТекстДатаОкончания = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			КонецЕсли;
			
			ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации";
			
			ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
				ИмяВТСотрудникиПериоды, , "ДатаНачала", "ДатаОкончания");
			
			ЗаполнитьЗначенияСвойств(ПараметрыПолученияРабочихМест, Параметры);
			Если Параметры.Свойство("СписокФизическихЛиц")
				И ЗначениеЗаполнено(Параметры.СписокФизическихЛиц) Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					ПараметрыПолученияРабочихМест.Отборы, "ФизическоеЛицо", "В", Параметры.СписокФизическихЛиц);
				
			ИначеЕсли Параметры.Отборы = Неопределено
				И ИмяВТФизическиеЛица = Неопределено Тогда
				
				ПараметрыПолученияРабочихМест.ИмяПоляСотрудник = "";
				
			КонецЕсли;
			
			Если Параметры.РаботникиПоТрудовымДоговорам = Ложь Тогда
				ПараметрыПолученияРабочихМест.РаботникиПоТрудовымДоговорам = Истина;
			КонецЕсли;
			
			ПараметрыПолученияРабочихМест.РаботникиПоДоговорамГПХ = Истина;
			
			Запрос = КадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, ПараметрыПолученияРабочихМест, МенеджерВременныхТаблиц);
			
			Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
				ИмяВТСотрудникиОрганизацииДляКадровойИстории = "ВТСотрудникиОрганизацииБезКадровыхДанных";
			Иначе
				ИмяВТСотрудникиОрганизацииДляКадровойИстории = ИмяВТСотрудникиОрганизации;
			КонецЕсли;
			
			Если РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Истина Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ВЫБОР
					|		КОГДА МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)) = ИСТИНА
					|			ТОГДА МАКСИМУМ(ВЫБОР
					|						КОГДА РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)
					|							ТОГДА РабочиеМестаСотрудников.ПериодЗаписи
					|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|					КОНЕЦ)
					|		ИНАЧЕ МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи)
					|	КОНЕЦ КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Ложь Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)) = ЛОЖЬ
					|	И МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)) = ИСТИНА";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Ложь Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)) = ЛОЖЬ";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Неопределено Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо";
				
			КонецЕсли;
			
			ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
				СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "&ДатаОкончания", ТекстДатаОкончания);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "ВТСотрудникиОрганизацииДляКадровойИстории", ИмяВТСотрудникиОрганизацииДляКадровойИстории);
			
			Если СоздаватьПромежуточныеТаблицы 
				И Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
				
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Выполнить();
				
				Запрос.Текст = ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории;
				
			Иначе
				ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории);
			КонецЕсли;
			
			Если РаботникиПоТрудовымДоговорам <> Ложь Тогда
				
				Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра = ИмяВТРабочиеМестаСотрудников;
				Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ИмяВТСотрудникиОрганизацииДляКадровойИстории;
				
			КонецЕсли;
			
			КадровыйУчетБазовый.ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
				Запрос,
				ТолькоРазрешенные,
				ИмяВТСотрудникиОрганизации,
				ИмяВТСотрудникиОрганизацииДляКадровойИстории,
				Параметры.КадровыеДанные,
				Параметры.ИменаТаблицСКадровойИсториейСотрудников,
				МенеджерВременныхТаблиц);
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(Запрос.Текст);
			
			Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
				ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ ВТСотрудникиОрганизацииБезКадровыхДанных");
			КонецЕсли;
			
			ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации");
			
			Запрос.Текст = СтрСоединить(ЧастиЗапроса, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ПараметрыПолученияСотрудников.Подразделение = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Другие методы получения сотрудников.

Функция ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	ПараметрыПолучения = КадровыйУчетБазовый.ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли; 
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения =  КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице() Экспорт
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Процедура СоздатьВТСтажиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяВТТаблицаОтборовФизическихЛиц, ПолучатьБудущиеЗначенияСтажей = Ложь, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц")
	
	ПоляОтбораФизическихЛиц = КадровыйУчет.ПоляОтбораФизическихЛиц();
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ИмяВТТаблицаОтборовФизическихЛиц,
		ПоляОтбораФизическихЛиц.ФизическоеЛицо,
		ПоляОтбораФизическихЛиц.Период);
	
	Запрос = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПолучатьБудущиеЗначенияСтажей, ИмяВТСтажиФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	КритерииПоиска = Новый Соответствие;
	ОтборыБазовыхКадровыхДанных = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли; 
	
	Для каждого УсловиеПоиска Из Отборы Цикл
		
		Если ТипЗнч(УсловиеПоиска) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из УсловиеПоиска Цикл
				КритерииПоиска.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Продолжить;
			
		ИначеЕсли ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОВоинскомУчетеФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОБронированииГражданОрганизациями(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОЗнанииЯзыковФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПрофессияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбОбразованииФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОКлассныхЧинахРангахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОВоинскихСпециальныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямРеестраГосслужащих(КритерииПоиска, УсловиеПоиска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборыБазовыхКадровыхДанных.Добавить(УсловиеПоиска);
		
	КонецЦикла;
	
	КадровыйУчет.УдалитьПустыеКритерииПоиска(КритерииПоиска);
	
	УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска);
	
	Если ОтборыБазовыхКадровыхДанных.Количество() > 0 Тогда
		
		КритерииПоискаБазовыхКадровыхДанных = КадровыйУчетБазовый.КритерииПоискаСотрудниковПоКоллекцииОтборов(ОтборыБазовыхКадровыхДанных);
		Для каждого КритерийПоиска Из КритерииПоискаБазовыхКадровыхДанных Цикл
			
			ОписаниеКритерия = КритерииПоиска.Получить(КритерийПоиска.Ключ);
			Если ОписаниеКритерия = Неопределено Тогда
				КритерииПоиска.Вставить(КритерийПоиска.Ключ, КритерийПоиска.Значение);
			Иначе
				КритерииПоиска.Вставить(КритерийПоиска.Ключ + ".БазовыеКадровыеДанные", КритерийПоиска.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КритерииПоиска;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПолученияДанныхДляОтчетов

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания, ИспользоватьКраткиеПредставления, ВыводитьДенежныеПоказателиСВалютой) Экспорт
	
	ОписанияНачисленийПоПериодам = Новый Соответствие;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		Возврат ОписанияНачисленийПоПериодам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияПоказателей = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.УточнитьПараметрыПостроенияСрезаНачислений(ПараметрыПостроения);
		Модуль.УточнитьПараметрыПостроенияСрезаЗначенийПоказателей(ПараметрыПостроенияПоказателей);
	КонецЕсли;
	
	ВременныеТаблицыКУничтожению = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияСрезПоследних");
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыйФОТСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	МИНИМУМ(ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	МИНИМУМ(НачисленияПоказатели.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНачислениеСПоказателемТарифнойСтавки
		|ИЗ
		|	ВТПлановыеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Начисление
		|
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(НачисленияПоказатели.НомерСтроки) ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачислениеСПоказателем
		|ИЗ
		|	ВТНачислениеСПоказателемТарифнойСтавки КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И Начисления.НомерСтроки = НачисленияПоказатели.НомерСтроки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	НачисленияПоказатели.Показатель
		|ИЗ
		|	ВТПлановыеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ОсновнойПоказатель)";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисления");
	ВременныеТаблицыКУничтожению.Добавить("ВТОсновныеНачисленияСотрудников");
	ВременныеТаблицыКУничтожению.Добавить("ВТНачислениеСПоказателемТарифнойСтавки");
	ВременныеТаблицыКУничтожению.Добавить("ВТНачислениеСПоказателем");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	НачислениеСПоказателем.Показатель,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСПоказателем
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеСПоказателем КАК НачислениеСПоказателем
		|		ПО ПлановыеНачисления.Начисление = НачислениеСПоказателем.Начисление";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПериоды + " КАК СотрудникиПериоды
			|	ПО ПлановыеНачисления.Период = СотрудникиПериоды." + ИмяПоляПериод + "
			|		И ПлановыеНачисления.Сотрудник = СотрудникиПериоды." + ИмяПоляСотрудник;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,",
			"СотрудникиПериоды." + ИмяПоляДатаОкончания + " КАК ДатаОкончания,");
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСПоказателем.Период,
		|	НачисленияСПоказателем.Показатель,
		|	НачисленияСПоказателем.Сотрудник,
		|	НачисленияСПоказателем.ДокументОснование
		|ПОМЕСТИТЬ ВТОтборПоказателей
		|ИЗ
		|	ВТПлановыеНачисленияСПоказателем КАК НачисленияСПоказателем";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияСПоказателем");
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборПоказателей");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПоказателей", "Сотрудник,Показатель,ДокументОснование");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроенияПоказателей);
	
	ВременныеТаблицыКУничтожению.Добавить("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.Выполнить();
	
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборВозвратныхСобытийПлановыеНачисления");
	ВременныеТаблицыКУничтожению.Добавить("ВТОтборВозвратныхСобытийЗначенияПоказателей");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
		ПараметрыПостроения,
		"ВТПлановыеНачисленияВозвратные");
	
	ВременныеТаблицыКУничтожению.Добавить("ВТПлановыеНачисленияВозвратные");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСПоказателем.Период КАК Период,
		|	ПлановыеНачисленияСПоказателем.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСПоказателем.Начисление,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).Наименование КАК НачислениеНаименование,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование = """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование
		|	КОНЕЦ КАК НачислениеКраткоеНаименование,
		|	ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания * ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК РеквизитДопУпорядочивания,
		|	ПлановыеНачисленияСПоказателем.Размер,
		|	ПлановыеНачисленияСПоказателем.Используется КАК Используется,
		|	ПлановыеНачисленияСПоказателем.Показатель КАК Показатель,
		|	ПлановыеНачисленияСПоказателем.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДенежныйПоказатель,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Наименование КАК ПоказательНаименование,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Наименование
		|	КОНЕЦ КАК ПоказательКраткоеНаименование,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Точность КАК Точность,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение, 0) КАК Значение,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОкладТариф,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
		|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании
		|ИЗ
		|	ВТПлановыеНачисленияСПоказателем КАК ПлановыеНачисленияСПоказателем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|		ПО ПлановыеНачисленияСПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
		|		ПО ПлановыеНачисленияСПоказателем.Период = ОсновныеНачисленияСотрудников.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ОсновныеНачисленияСотрудников.ДокументОснование
		|			И ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания = ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
		|		ПО ПлановыеНачисленияСПоказателем.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.Начисление = ПлановыеНачисленияВозвратные.Начисление
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
		|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТВозвратный
		|		ПО (ПлановыеНачисленияВозвратные.Сотрудник = ПлановыйФОТВозвратный.Сотрудник)
		|			И (ПлановыеНачисленияВозвратные.Начисление = ПлановыйФОТВозвратный.Начисление)
		|			И (ПлановыеНачисленияВозвратные.ДокументОснование = ПлановыйФОТВозвратный.ДокументОснование)
		|ГДЕ
		|	(ПлановыеНачисленияСПоказателем.Используется
		|			ИЛИ ПлановыеНачисленияВозвратные.Используется)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Сотрудник,
		|	РеквизитДопУпорядочивания,
		|	Показатель
		|ИТОГИ ПО
		|	Сотрудник,
		|	Период";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияСПоказателем.Период КАК Период,",
			"ПлановыеНачисленияСПоказателем.Период КАК Период,
			|	ПлановыеНачисленияСПоказателем.ДатаОкончания,");
		
	КонецЕсли;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		ОписанияНачислений = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ВыведенныеПоказатели = Новый Соответствие;
			ОписаниеОкладаЗаполнялось = Ложь;
			
			ОписаниеСоставаНачислений = КадровыйУчетБазовый.ОписаниеСоставаНачислений();
			Выборка = ВыборкаПоПериодам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Значение) И ВыведенныеПоказатели.Получить(Выборка.Показатель) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ОписаниеОкладаЗаполнялось И Выборка.ОкладТариф И Выборка.Используется Тогда
					
					ОписаниеСоставаНачислений.Вставить("ПоказательОкладТариф", Выборка.Показатель);
					ОписаниеСоставаНачислений.Вставить("ОкладТариф", Выборка.Значение);
					
					Если ЗначениеЗаполнено(Выборка.Значение) Тогда
						ВыведенныеПоказатели.Вставить(Выборка.Показатель, Истина);
					КонецЕсли;
					
					Если ИспользоватьКраткиеПредставления Тогда
						ПредставлениеТарифнойСтавки = ?(ПустаяСтрока(Выборка.ПоказательКраткоеНаименование), Строка(Выборка.НачислениеКраткоеНаименование), Строка(Выборка.ПоказательКраткоеНаименование))
					Иначе
						
						Если Выборка.Значение = 0 Тогда
							ПредставлениеТарифнойСтавки = Выборка.НачислениеНаименование;
						Иначе
							ПредставлениеТарифнойСтавки = ?(ПустаяСтрока(Выборка.ПоказательНаименование), Выборка.НачислениеНаименование, Выборка.ПоказательНаименование)
						КонецЕсли;
						
					КонецЕсли;
					
					Если Выборка.Значение > 0 Тогда
						
						ПредставлениеТарифнойСтавки =
							ПредставлениеТарифнойСтавки + ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ=");
						
						Если ВыводитьДенежныеПоказателиСВалютой И Выборка.ДенежныйПоказатель Тогда
							
							ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='руб.'");
							
							Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
								ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='за час'");
							ИначеЕсли Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
								ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='за день'");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОписаниеСоставаНачислений.Вставить("ОписаниеОклада", ПредставлениеТарифнойСтавки);
					
					ОписаниеОкладаЗаполнялось = Истина;
					
				Иначе
					
					Если Выборка.ОкладТариф
						И Не Выборка.Используется Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если Выборка.Используется Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						
						Если ИспользоватьКраткиеПредставления Тогда
							ПредставлениеПоказателя = ?(ПустаяСтрока(Выборка.ПоказательКраткоеНаименование), Выборка.НачислениеКраткоеНаименование, Выборка.ПоказательКраткоеНаименование);
						Иначе
							
							Если Выборка.Значение = 0 Тогда
								ПредставлениеПоказателя = Выборка.НачислениеНаименование;
							Иначе
								ПредставлениеПоказателя = ?(ПустаяСтрока(Выборка.ПоказательНаименование), Выборка.НачислениеНаименование, Выборка.ПоказательНаименование);
							КонецЕсли;
							
						КонецЕсли;
						
						ОписаниеНадбавок = ?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ") + ПредставлениеПоказателя;
						
						Если Выборка.Значение > 0 Тогда
							
							ОписаниеНадбавок = ОписаниеНадбавок + ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ=");
						
							Если ВыводитьДенежныеПоказателиСВалютой И Выборка.ДенежныйПоказатель Тогда
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='руб.'");
							КонецЕсли;
						
						КонецЕсли;
						
						Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
							
							Если ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления)
								И Выборка.ДатаОкончанияНачисления < Выборка.ДатаОкончания
								И Не Выборка.ИспользуетсяПоОкончании Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='по'") + " " + Формат(Выборка.ДатаОкончанияНачисления, "ДЛФ=D");
								
							ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончания)
								И ЗначениеЗаполнено(Выборка.Значение) Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='по'") + " " + Формат(Выборка.ДатаОкончания, "ДЛФ=D");
								
							КонецЕсли;
						
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Выборка.Значение) Тогда
							ВыведенныеПоказатели.Вставить(Выборка.Показатель, Истина);
						КонецЕсли;
					
					ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления) Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						ОписаниеНадбавок = 
							?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ")
							+ ?(ПустаяСтрока(Выборка.Показатель), Выборка.Начисление, Выборка.Показатель)
							+ ?(Выборка.Значение = 0, "", ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ="))
							+ " " + НСтр("ru='с'") + " " + Формат(КонецДня(Выборка.ДатаОкончанияНачисления) + 1, "ДЛФ=D");
							
					КонецЕсли;
					
					ОписаниеСоставаНачислений.Вставить("ОписаниеНадбавок", ОписаниеНадбавок);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОписанияНачислений.Вставить(ВыборкаПоПериодам.Период, ОписаниеСоставаНачислений);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(ВыборкаПоСотрудникам.Сотрудник, ОписанияНачислений);
		
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ВременныеТаблицыКУничтожению, Истина);
	
	Возврат ОписанияНачисленийПоПериодам;
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенком.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ОтпускПоУходуЗаРебенком.Ссылка
		|ПОМЕСТИТЬ ВТОтпускаПоУходу
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ОтпускПоУходуЗаРебенком.Ссылка";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтпускаПоУходу.Организация
		|ИЗ
		|	ВТОтпускаПоУходу КАК ОтпускаПоУходу";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
		|	ФизическиеЛицаПериоды.ДатаНачала КАК Период
		|ИЗ
		|	ВТОтпускаПоУходу КАК ФизическиеЛицаПериоды";
	
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, СписокФизическихЛиц, СписокОрганизаций, '00010101');
	
	ТаблицаОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТОсновныеСотрудникиФизическихЛиц");
	ЗапросПостоянныеКадровыеДанные = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(Истина, ТаблицаОтборов, "ДатаНачалаУчета");
	ЗапросПостоянныеКадровыеДанные.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПостоянныеКадровыеДанные.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСотрудники.Сотрудник КАК Сотрудник,
		|	ОтпускаПоУходу.Сотрудник КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ДанныеСотрудников.ДатаНачалаУчета > ОтпускаПоУходу.ДатаНачала
		|			ТОГДА ДанныеСотрудников.ДатаНачалаУчета
		|		ИНАЧЕ ОтпускаПоУходу.ДатаНачала
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТОсновныеСотрудникиПериоды
		|ИЗ
		|	ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПостоянныеКадровыеДанныеСотрудников КАК ДанныеСотрудников
		|			ПО ОсновныеСотрудники.Сотрудник = ДанныеСотрудников.Сотрудник
		|		ПО ОтпускаПоУходу.Сотрудник = ОсновныеСотрудники.ФизическоеЛицо
		|			И ОтпускаПоУходу.Организация.ГоловнаяОрганизация = ОсновныеСотрудники.ГоловнаяОрганизация";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТОсновныеСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация, ФизическоеЛицо");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	ВТКадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТОтпускаПоУходу КАК ВТФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
		|		ПО ВТФизическиеЛицаПериоды.Сотрудник = ВТКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И ВТФизическиеЛицаПериоды.Организация = ВТКадровыеДанныеСотрудников.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ВТФизическиеЛицаПериоды.Сотрудник = Сотрудники.ФизическоеЛицо
		|			И ВТФизическиеЛицаПериоды.Организация.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка,
		|	ВТКадровыеДанныеСотрудников.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала";
	
	НастройкиУчета = НастройкиКадровогоУчета();
	Если НастройкиУчета.ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|"
			+ "ВЫБРАТЬ
			  |	Сотрудники.Ссылка КАК Сотрудник,
			  |	БольничныйЛист.ДатаНачала
			  |ИЗ
			  |	Документ.БольничныйЛист КАК БольничныйЛист
			  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			  |		ПО БольничныйЛист.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
			  |			И БольничныйЛист.Организация.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
			  |ГДЕ
			  |	БольничныйЛист.Ссылка В(&МассивОбъектов)
			  |	И БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Сотрудники.Ссылка,
			  |	БольничныйЛист.ДатаНачала";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,РазрядКатегория,ДатаНачалаУчета,ДатаУвольнения");
	
	// Получение продолжительности дней отпусков
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ВидРасчетаОсновногоОтпуска КАК ВидРасчета,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВидыРасчетаОтпусков
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидРасчета,
		|	ОтпускДополнительныеОтпуска.ДатаНачала,
		|	ОтпускДополнительныеОтпуска.ДатаОкончания
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска,
		|	Отпуск.ДатаНачалаОсновногоОтпуска,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидРасчетаКомпенсации,
		|	ОтпускДополнительныеОтпуска.ДатаНачала,
		|	ОтпускДополнительныеОтпуска.ДатаОкончания
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРасчетаОтпусков.Ссылка,
		|	ВидыРасчетаОтпусков.ВидРасчета,
		|	ВидыРасчетаОтпусков.ДатаНачала,
		|	ВидыРасчетаОтпусков.ДатаОкончания,
		|	ОтпускНачисления.ОплаченоДней
		|ПОМЕСТИТЬ ВТПродолжительностьОтпусков
		|ИЗ
		|	ВТВидыРасчетаОтпусков КАК ВидыРасчетаОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК ОтпускНачисления
		|		ПО ВидыРасчетаОтпусков.Ссылка = ОтпускНачисления.Ссылка
		|			И ВидыРасчетаОтпусков.ВидРасчета = ОтпускНачисления.Начисление
		|			И ВидыРасчетаОтпусков.ДатаНачала = ОтпускНачисления.ДатаНачала
		|			И ВидыРасчетаОтпусков.ДатаОкончания = ОтпускНачисления.ДатаОкончания";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ОтпускаПоУходу.ДатаНачала ЕСТЬ NULL 
		|				И ОтпускаПоУходу.ДатаНачала < КадровыеДанныеСотрудников.ДатаНачалаУчета
		|			ТОГДА ОтпускаПоУходу.ДатаНачала
		|		ИНАЧЕ КадровыеДанныеСотрудников.Период
		|	КОНЕЦ КАК Период,
		|	КадровыеДанныеСотрудников.ДатаНачалаУчета,
		|	КадровыеДанныеСотрудников.ДатаУвольнения,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей) КАК РазрядКатегория
		|ПОМЕСТИТЬ ВТДанныеДляПечати
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ПО КадровыеДанныеСотрудников.ФизическоеЛицо = ОтпускаПоУходу.Сотрудник
		|			И КадровыеДанныеСотрудников.Организация = ОтпускаПоУходу.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	Отпуск.Организация КАК Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL 
		|			ТОГДА Отпуск.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ КАК НомерДок,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL 
		|			ТОГДА Отпуск.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ КАК ДатаДок,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """") КАК РазрядКатегория,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА Отпуск.ДатаНачалаОсновногоОтпуска
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА Отпуск.ДатаОкончанияОсновногоОтпуска
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск
		|			ТОГДА ЕСТЬNULL(ПродолжительностьОтпусков.ОплаченоДней, Отпуск.КоличествоДнейОсновногоОтпуска)
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
		|			ТОГДА ЕСТЬNULL(ПродолжительностьОтпусковКомпенсация.ОплаченоДней, Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Продолжительность,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
		|	ИСТИНА КАК ЭтоОсновнойОтпуск,
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ КАК ПолноеНаименованиеОтпуска,
		|	Отпуск.Основание,
		|	Отпуск.Дата КАК Дата,
		|	Отпуск.Руководитель КАК Руководитель,
		|	Отпуск.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Отпуск.Бухгалтер КАК Бухгалтер,
		|	Отпуск.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Отпуск.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусков
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусков.Ссылка
		|				И Отпуск.ВидРасчетаОсновногоОтпуска = ПродолжительностьОтпусков.ВидРасчета
		|				И Отпуск.ДатаНачалаОсновногоОтпуска = ПродолжительностьОтпусков.ДатаНачала
		|				И Отпуск.ДатаОкончанияОсновногоОтпуска = ПродолжительностьОтпусков.ДатаОкончания
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусковКомпенсация
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусковКомпенсация.Ссылка
		|				И Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска = ПродолжительностьОтпусковКомпенсация.ВидРасчета
		|				И (Отпуск.ДатаНачалаОсновногоОтпуска = ПродолжительностьОтпусков.ДатаНачала)
		|				И (Отпуск.ДатаОкончанияОсновногоОтпуска = ПродолжительностьОтпусков.ДатаОкончания)
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И (Отпуск.ПредоставитьОсновнойОтпуск
		|			ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускДокумент.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL 
		|			ТОГДА Отпуск.Ссылка.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL 
		|			ТОГДА Отпуск.Ссылка.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА Отпуск.КоличествоДней > 0
		|			ТОГДА Отпуск.ДатаНачала
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Отпуск.КоличествоДней > 0
		|			ТОГДА Отпуск.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ЕСТЬNULL(ПродолжительностьОтпусков.ОплаченоДней, Отпуск.КоличествоДней) + ЕСТЬNULL(ПродолжительностьОтпусковКомпенсация.ОплаченоДней, Отпуск.КоличествоДнейКомпенсации),
		|	Отпуск.ВидОтпуска,
		|	ЛОЖЬ,
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка.ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	Отпуск.Основание,
		|	Отпуск.Ссылка.Дата,
		|	Отпуск.Ссылка.Руководитель,
		|	Отпуск.Ссылка.ДолжностьРуководителя,
		|	Отпуск.Ссылка.Бухгалтер,
		|	Отпуск.Ссылка.РаботникКадровойСлужбы,
		|	Отпуск.Ссылка.ДолжностьРаботникаКадровойСлужбы
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК Отпуск
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО Отпуск.ВидОтпуска = ВидыОтпусков.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ОтпускДокумент
		|			ПО Отпуск.Ссылка = ОтпускДокумент.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусков
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусков.Ссылка
		|				И Отпуск.ВидРасчета = ПродолжительностьОтпусков.ВидРасчета
		|				И Отпуск.ДатаНачала = ПродолжительностьОтпусков.ДатаНачала
		|				И Отпуск.ДатаОкончания = ПродолжительностьОтпусков.ДатаОкончания
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьОтпусков КАК ПродолжительностьОтпусковКомпенсация
		|			ПО Отпуск.Ссылка = ПродолжительностьОтпусковКомпенсация.Ссылка
		|				И Отпуск.ВидРасчетаКомпенсации = ПродолжительностьОтпусковКомпенсация.ВидРасчета
		|				И (Отпуск.ДатаНачала = ПродолжительностьОтпусков.ДатаНачала)
		|				И (Отпуск.ДатаОкончания = ПродолжительностьОтпусков.ДатаОкончания)
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Ссылка.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.Ссылка.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.Ссылка.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И ОтпускДокумент.ПредоставитьДополнительныйОтпуск
		|	И Отпуск.КоличествоДней + Отпуск.КоличествоДнейКомпенсации > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL 
		|			ТОГДА ОтпускБезСохраненияОплаты.Ссылка.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL 
		|			ТОГДА ОтпускБезСохраненияОплаты.Ссылка.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	ОтпускБезСохраненияОплаты.Основание,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ОтпускБезСохраненияОплаты.Руководитель,
		|	ОтпускБезСохраненияОплаты.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ОтпускБезСохраненияОплаты.ВидОтпуска)
		|		ПО ДанныеДляПечати.Сотрудник = ОтпускБезСохраненияОплаты.Сотрудник
		|			И ДанныеДляПечати.Период = ОтпускБезСохраненияОплаты.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (ОтпускБезСохраненияОплаты.Ссылка.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ДанныеДляПечати.Организация.КодПоОКПО,
		|	ДанныеДляПечати.Работник,
		|	ОтпускПоУходуЗаРебенком.Номер,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	&НаименованиеОтпускаПоУходуЗаРебенком,
		|	NULL,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ОтпускПоУходуЗаРебенком.Руководитель,
		|	ОтпускПоУходуЗаРебенком.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ПО ДанныеДляПечати.ФизическоеЛицо = ОтпускПоУходуЗаРебенком.Сотрудник
		|			И ДанныеДляПечати.Организация = ОтпускПоУходуЗаРебенком.Организация
		|			И ДанныеДляПечати.Период = ОтпускПоУходуЗаРебенком.ДатаНачала
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДанныеДляПечати.ДатаНачалаУчета, ДЕНЬ) <= ОтпускПоУходуЗаРебенком.ДатаНачала
		|	И (ДанныеДляПечати.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПечати.ДатаУвольнения > ДанныеДляПечати.Период)";
	
	Если НастройкиУчета.ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|"
			+ "ВЫБРАТЬ
			  |	ДанныеДляПечати.Сотрудник,
			  |	БольничныйЛист.Организация,
			  |	ДанныеДляПечати.Организация.КодПоОКПО КАК КодПоОКПО,
			  |	ДанныеДляПечати.Работник,
			  |	БольничныйЛист.Номер КАК НомерДок,
			  |	БольничныйЛист.Дата КАК ДатаДок,
			  |	ДанныеДляПечати.ТабельныйНомер,
			  |	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
			  |	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
			  |	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """") КАК РазрядКатегория,
			  |	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			  |	ДАТАВРЕМЯ(1, 1, 1) КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			  |	БольничныйЛист.ДатаНачала,
			  |	БольничныйЛист.ДатаОкончания,
			  |	РАЗНОСТЬДАТ(БольничныйЛист.ДатаНачала, БольничныйЛист.ДатаОкончания, ДЕНЬ) + 1 КАК Продолжительность,
			  |	NULL КАК ВидОтпуска,
			  |	ЛОЖЬ КАК ЭтоОсновнойОтпуск,
			  |	БольничныйЛист.Ссылка,
			  |	БольничныйЛист.ДатаНачалаСобытия,
			  |	&НаименованиеОтпускаПоБеременностиИРодам КАК ПолноеНаименованиеОтпуска,
			  |	NULL КАК Основание,
			  |	БольничныйЛист.Дата,
			  |	БольничныйЛист.Руководитель,
			  |	БольничныйЛист.ДолжностьРуководителя,
			  |	NULL КАК Бухгалтер,
			  |	NULL КАК РаботникКадровойСлужбы,
			  |	NULL КАК ДолжностьРаботникаКадровойСлужбы
			  |ИЗ
			  |	ВТДанныеДляПечати КАК ДанныеДляПечати
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
			  |		ПО ДанныеДляПечати.ФизическоеЛицо = БольничныйЛист.ФизическоеЛицо
			  |			И ДанныеДляПечати.Сотрудник.ГоловнаяОрганизация = БольничныйЛист.Организация.ГоловнаяОрганизация
			  |			И ДанныеДляПечати.Период = БольничныйЛист.ДатаНачала
			  |			И (БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))
			  |ГДЕ
			  |	НАЧАЛОПЕРИОДА(ДанныеДляПечати.ДатаНачалаУчета, ДЕНЬ) <= БольничныйЛист.ДатаНачала
			  |	И (ДанныеДляПечати.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			  |			ИЛИ ДанныеДляПечати.ДатаУвольнения > ДанныеДляПечати.Период)";
		
		Запрос.УстановитьПараметр("НаименованиеОтпускаПоБеременностиИРодам", НСтр("ru='Отпуск по беременности и родам'"));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаименованиеОтпускаПоУходуЗаРебенком", НСтр("ru='Отпуск по уходу за ребенком'"));
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("Бухгалтер");
	ИменаПолей.Добавить("РаботникКадровойСлужбы");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеПолное КАК НазваниеОрганизации,
		|	ДанныеДокументов.КодПоОКПО,
		|	ДанныеДокументов.Работник,
		|	ДанныеДокументов.НомерДок,
		|	ДанныеДокументов.ДатаДок,
		|	ДанныеДокументов.ТабельныйНомер,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.Должность,
		|	ДанныеДокументов.РазрядКатегория,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыОтпусков.ОтпускЯвляетсяЕжегодным, ИСТИНА)
		|			ТОГДА ДанныеДокументов.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыОтпусков.ОтпускЯвляетсяЕжегодным, ИСТИНА)
		|			ТОГДА ДанныеДокументов.КонецПериодаЗаКоторыйПредоставляетсяОтпуск
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ДатаОкончания,
		|	ДанныеДокументов.Продолжительность,
		|	ДанныеДокументов.ВидОтпуска,
		|	ДанныеДокументов.ЭтоОсновнойОтпуск,
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.ДатаНачалаСобытия,
		|	ДанныеДокументов.ПолноеНаименованиеОтпуска,
		|	ДанныеДокументов.Основание,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ДанныеДокументов.ДолжностьРаботникаКадровойСлужбы,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОКадровика.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Дата = ФИОБухгалтера.Дата
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКадровика
		|		ПО ДанныеДокументов.Дата = ФИОКадровика.Дата
		|			И ДанныеДокументов.Ссылка = ФИОКадровика.Ссылка
		|			И ДанныеДокументов.РаботникКадровойСлужбы = ФИОКадровика.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ДанныеДокументов.ВидОтпуска = ВидыОтпусков.Ссылка
		|ИТОГИ ПО
		|	Ссылка,
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СформироватьЗапросДляТ60(МассивОбъектов) Экспорт
	
	Результаты = Новый Структура("КадровыеОтпуска, Начисления, Удержания, НДФЛ");
	Результаты.Вставить("КадровыеОтпуска", СформироватьЗапросДляТ6(МассивОбъектов));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, "Отпуск", "ВТИсправленныеДокументыОтпусков");	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсправленныеДокументыОтпусков.Ссылка,
		|	ИсправленныеДокументыОтпусков.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаОтпусков
		|ИЗ
		|	ВТИсправленныеДокументыОтпусков КАК ИсправленныеДокументыОтпусков
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ПериодРегистрации КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаОтпуска,
		|	НачисленияОтпуска.ДатаНачала,
		|	СУММА(НачисленияОтпуска.ОплаченоДней) КАК ОплаченоДней,
		|	СУММА(НачисленияОтпуска.Результат) КАК Результат
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК НачисленияОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетов
		|			ПО НачисленияОтпуска.Начисление = ВидыРасчетов.Ссылка
		|		ПО Отпуск.Ссылка = НачисленияОтпуска.Ссылка
		|ГДЕ
		|	НачисленияОтпуска.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НачисленияОтпуска.ДатаНачала,
		|	Отпуск.ПериодРегистрации
		|ИТОГИ
		|	МИНИМУМ(ПериодРегистрации),
		|	СУММА(Результат)
		|ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	УдержанияОтпуска.Удержание,
		|	СУММА(УдержанияОтпуска.Результат) КАК Результат
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Удержания КАК УдержанияОтпуска
		|		ПО Отпуск.Ссылка = УдержанияОтпуска.Ссылка
		|ГДЕ
		|	УдержанияОтпуска.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка,
		|	УдержанияОтпуска.Удержание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускПогашениеЗаймов.Ссылка,
		|	""Погашение займов"",
		|	ОтпускПогашениеЗаймов.ПогашениеЗайма + ОтпускПогашениеЗаймов.ПогашениеПроцентов + ОтпускПогашениеЗаймов.НалогНаМатериальнуюВыгоду
		|ИЗ
		|	Документ.Отпуск.ПогашениеЗаймов КАК ОтпускПогашениеЗаймов
		|ГДЕ
		|	ОтпускПогашениеЗаймов.Ссылка В(&МассивОбъектов)
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отпуск.Ссылка КАК Ссылка,
		|	СУММА(НДФЛОтпуска.Налог) КАК Налог
		|ИЗ
		|	ВТЦепочкаОтпусков КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.НДФЛ КАК НДФЛОтпуска
		|		ПО Отпуск.ДокументЦепочки = НДФЛОтпуска.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка
		|ИТОГИ ПО
		|	Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();

	Результаты.Вставить("Начисления", 	МассивРезультатов[0]);
	Результаты.Вставить("Удержания", 	МассивРезультатов[1]);
	Результаты.Вставить("НДФЛ", 		МассивРезультатов[2]);
	
	Возврат Результаты;
	
КонецФункции

Функция СформироватьЗапросДляТ61(МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДанныеДокументов.МесяцНачисления, МЕСЯЦ)) КАК НачалоПериода,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(ДанныеДокументов.МесяцНачисления, МЕСЯЦ)) КАК КонецПериода
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Запрос.УстановитьПараметр("НачалоПериода", Выборка.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", Выборка.КонецПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", '00010101');
		Запрос.УстановитьПараметр("КонецПериода", '00010101');
	КонецЕсли;
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		"ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,ТарифнаяСтавка,ДатаПриема,ДатаУвольнения,ФизическоеЛицо,РазрядКатегория,Пол,ТрудовойДоговорДата,ТрудовойДоговорНомер");
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("РаботникКадровойСлужбы");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.Увольнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.УвольнениеСписком";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка"), "Увольнение", "ВТИсправленныеДокументыУвольнений");	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"), "УвольнениеСписком", "ВТИсправленныеДокументыУвольненийСписком");	
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации) КАК ДнейКомпенсации,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания) КАК ДнейУдержания
		|ПОМЕСТИТЬ ВТДнейКомпенсацииУдержанияОтпуска
		|ИЗ
		|	(ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка КАК Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник КАК Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейКомпенсации,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейУдержания
		|	ИЗ
		|		Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.Увольнение КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеСотрудники.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|			ПО УвольнениеДополнительныеОтпуска.Ссылка = УвольнениеСотрудники.Ссылка
		|				И УвольнениеДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеСотрудники.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник) КАК ДнейКомпенсацииУдержанияОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(УвольнениеНачисления.Результат) КАК ВсегоВыплат,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоКомпенсации,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ) КАК ВсеДругиеНачисления
		|ПОМЕСТИТЬ ВТНачисленияПредварительно
		|ИЗ
		|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНачисления.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ НачисленияУдержанияПоСотрудникам.Сумма
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО НачисленияУдержанияПоСотрудникам.НачислениеУдержание = Начисления.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (НачисленияУдержанияПоСотрудникам.Период = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Начисления.Ссылка) КАК Ссылка,
		|	Начисления.Сотрудник,
		|	СУММА(Начисления.ВсегоВыплат) КАК ВсегоВыплат,
		|	СУММА(Начисления.НачисленоКомпенсации) КАК НачисленоКомпенсации,
		|	СУММА(Начисления.НачисленоВыходноеПособиеСохраняемыйЗаработок) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	СУММА(Начисления.ВсеДругиеНачисления) КАК ВсеДругиеНачисления
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПредварительно КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаУвольнений
		|ИЗ
		|	ВТИсправленныеДокументыУвольнений КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаУвольненийСписком
		|ИЗ
		|	ВТИсправленныеДокументыУвольненийСписком КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(УвольнениеНДФЛ.Налог) КАК СуммаНДФЛ
		|ПОМЕСТИТЬ ВТНДФЛПредварительно
		|ИЗ
		|	ВТЦепочкаУвольнений КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.НДФЛ КАК УвольнениеНДФЛ
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеНДФЛ.Налог)
		|ИЗ
		|	ВТЦепочкаУвольненийСписком КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.НДФЛ КАК УвольнениеНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|			ПО УвольнениеНДФЛ.Ссылка = УвольнениеСотрудники.Ссылка
		|				И УвольнениеНДФЛ.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (НачисленияУдержанияПоСотрудникам.Период = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|	И НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(НДФЛПредварительно.Ссылка) КАК Ссылка,
		|	НДФЛПредварительно.Сотрудник,
		|	СУММА(НДФЛПредварительно.СуммаНДФЛ) КАК СуммаНДФЛ
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	ВТНДФЛПредварительно КАК НДФЛПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛПредварительно.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник.ГоловнойСотрудник КАК Сотрудник,
		|	СУММА(УвольнениеУдержания.Результат) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержанияПредварительно
		|ИЗ
		|	Документ.Увольнение.Удержания КАК УвольнениеУдержания
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(УвольнениеУдержания.Результат)
		|ИЗ
		|	Документ.УвольнениеСписком.Удержания КАК УвольнениеУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО УвольнениеУдержания.Ссылка = УвольнениеСотрудники.Ссылка
		|			И УвольнениеУдержания.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.Ссылка = УвольнениеСотрудники.Ссылка
		|			И Увольнение.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.Ссылка = УвольнениеСотрудники.Ссылка
		|			И Увольнение.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник,
		|	СУММА(Увольнение.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСотрудники
		|		ПО Увольнение.Ссылка = УвольнениеСотрудники.Ссылка
		|			И Увольнение.ИдентификаторСтрокиСотрудника = УвольнениеСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеСотрудники.Сотрудник.ГоловнойСотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (НачисленияУдержанияПоСотрудникам.Период = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|	И НЕ НачисленияУдержанияПоСотрудникам.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Регистратор,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ГоловнойСотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Удержания.Ссылка) КАК Ссылка,
		|	Удержания.Сотрудник КАК Сотрудник,
		|	СУММА(Удержания.ПрочиеУдержания) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТУдержанияПредварительно КАК Удержания
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыССотрудникамиОбороты.Сотрудник КАК Сотрудник,
		|	СУММА(ВзаиморасчетыССотрудникамиОбороты.СуммаВзаиморасчетовПриход - ВзаиморасчетыССотрудникамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаВзаиморасчетовРегистратора
		|ПОМЕСТИТЬ ВТДвиженияВзаиморасчетовРегистратора
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Т.Сотрудник
		|				ИЗ
		|					ВТДанныеДокументов КАК Т)) КАК ВзаиморасчетыССотрудникамиОбороты
		|ГДЕ
		|	ВзаиморасчетыССотрудникамиОбороты.Регистратор В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудникамиОбороты.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетовКонечныйОстаток - ЕСТЬNULL(ДвиженияВзаиморасчетовРегистратора.СуммаВзаиморасчетовРегистратора, 0) КАК ОстатокВзаиморасчетов,
		|	ВзаиморасчетыССотрудниками.Период КАК Период
		|ПОМЕСТИТЬ ВТОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Месяц,
		|			,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Т.Сотрудник
		|				ИЗ
		|					ВТДанныеДокументов КАК Т)) КАК ВзаиморасчетыССотрудниками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияВзаиморасчетовРегистратора КАК ДвиженияВзаиморасчетовРегистратора
		|		ПО ВзаиморасчетыССотрудниками.Сотрудник = ДвиженияВзаиморасчетовРегистратора.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК Период,
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовАвансы,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТДвиженияВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ВзаиморасчетыССотрудниками.Сотрудник В
		|			(ВЫБРАТЬ
		|				Т.Сотрудник
		|			ИЗ
		|				ВТДанныеДокументов КАК Т)
		|	И НЕ ВзаиморасчетыССотрудниками.Регистратор В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудниками.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 0
		|			ИНАЧЕ -1
		|		КОНЕЦ * ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.РазрядКатегория КАК РазрядКатегория,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ФИОРуководителя.РасшифровкаПодписи КАК ФИОРуководителя,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОРаботникаКадровойСлужбы.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи,
		|	&ДанныеДокументов КАК ДанныеДокументов,
		|	ЕСТЬNULL(Начисления.ВсегоВыплат, 0) КАК ВсегоВыплат,
		|	ЕСТЬNULL(Начисления.НачисленоКомпенсации, 0) КАК НачисленоКомпенсации,
		|	ЕСТЬNULL(Начисления.НачисленоВыходноеПособиеСохраняемыйЗаработок, 0) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	ЕСТЬNULL(Начисления.ВсеДругиеНачисления, 0) КАК ВсеДругиеНачисления,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) КАК СуммаНДФЛ,
		|	ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) КАК ПрочиеУдержания,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) КАК ВсегоУдержано,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0) > 0
		|			ТОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгЗаОрганизацией,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0) < 0
		|			ТОГДА -(ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолгЗаРаботником,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Начисления.ВсегоВыплат, 0) - (ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0)) + (ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0)) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(Начисления.ВсегоВыплат, 0) - (ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) + ЕСТЬNULL(-ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0)) + (ЕСТЬNULL(ОстаткиВзаиморасчетов.ОстатокВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетов, 0) - ЕСТЬNULL(ДвиженияВзаиморасчетов.СуммаВзаиморасчетовАвансы, 0))
		|	КОНЕЦ КАК КВыплате,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации, 0) КАК ДнейКомпенсации,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания, 0) КАК ДнейУдержания,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументов.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.Ссылка = Начисления.Ссылка
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛ КАК НДФЛ
		|		ПО ДанныеДокументов.Ссылка = НДФЛ.Ссылка
		|			И ДанныеДокументов.Сотрудник = НДФЛ.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержания КАК Удержания
		|		ПО ДанныеДокументов.Ссылка = Удержания.Ссылка
		|			И ДанныеДокументов.Сотрудник = Удержания.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДнейКомпенсацииУдержанияОтпуска КАК ДнейКомпенсацииУдержанияОтпуска
		|		ПО ДанныеДокументов.Ссылка = ДнейКомпенсацииУдержанияОтпуска.Ссылка
		|			И ДанныеДокументов.Сотрудник = ДнейКомпенсацииУдержанияОтпуска.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|		ПО (НАЧАЛОПЕРИОДА(ДанныеДокументов.Период, МЕСЯЦ) = ОстаткиВзаиморасчетов.Период)
		|			И ДанныеДокументов.Сотрудник = ОстаткиВзаиморасчетов.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияВзаиморасчетов КАК ДвиженияВзаиморасчетов
		|		ПО (НАЧАЛОПЕРИОДА(ДанныеДокументов.Период, МЕСЯЦ) = ДвиженияВзаиморасчетов.Период)
		|			И ДанныеДокументов.Сотрудник = ДвиженияВзаиморасчетов.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов КАК ДанныеДокументов", "ДанныеДокументов.*");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.УстановитьПараметр("МассивСотрудников", МассивОбъектов);
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		
		Для каждого Сотрудник Из МассивОбъектов Цикл
			ИзмеренияДаты.Добавить().Сотрудник = Сотрудник;
		КонецЦикла;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Перемещение);
		
		ЗапросКадровыхПереводов = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"КадроваяИсторияСотрудников",
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения,
			Истина,
			"");
		
		Запрос.Параметры.Вставить("МассивОбъектов", ЗапросКадровыхПереводов.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
	Иначе
		Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания КАК ДатаОкончания,
		|	КадровыйПеревод.Номер КАК НомерДок,
		|	КадровыйПеревод.Дата КАК ДатаДок,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода,
		|	0 КАК Надбавка
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Проведен
		|	И КадровыйПеревод.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Номер,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Руководитель,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДолжностьРуководителя,
		|	ВЫРАЗИТЬ(ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ОснованиеПеревода,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ПричинаПеревода,
		|	0
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Проведен
		|	И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПереводСпискомСотрудники.Ссылка,
		|	КадровыйПереводСпискомСотрудники.ДатаНачала,
		|	КадровыйПереводСпискомСотрудники.Сотрудник,
		|	КадровыйПереводСпискомСотрудники.ДатаНачала,
		|	КадровыйПереводСпискомСотрудники.ДатаОкончания,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Номер,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Дата,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Руководитель,
		|	КадровыйПереводСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	КадровыйПереводСпискомСотрудники.ФизическоеЛицо,
		|	КадровыйПереводСпискомСотрудники.ОснованиеПеревода,
		|	КадровыйПереводСпискомСотрудники.ПричинаПеревода,
		|	0
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
		|ГДЕ
		|	КадровыйПереводСпискомСотрудники.Ссылка.Проведен
		|	И КадровыйПереводСпискомСотрудники.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники",
			"Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			| 	ПО ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник = Сотрудники.Ссылка
			| 		И Сотрудники.Ссылка В (&МассивСотрудников)");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)",
			"И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)
			|		И НЕ Сотрудники.Ссылка ЕСТЬ NULL");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК Надбавка,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Проведен
		|	И ПриемНаРаботу.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСпискомСотрудники.УсловияПриема,
		|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора,
		|	0,
		|	ПриемНаРаботуСпискомСотрудники.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаРаботу,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаПроживание,
		|	ПриемНаРаботуСпискомСотрудники.УсловияОказанияМедпомощи
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|ГДЕ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Проведен
		|	И ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)";
		
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Ссылка В(&МассивОбъектов)", "ПриемНаРаботу.Сотрудник В(&МассивОбъектов)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)", "ПриемНаРаботуСпискомСотрудники.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	Увольнение.Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы,
		|	Увольнение.ПериодРегистрации КАК МесяцНачисления,
		|	Увольнение.ГлавныйБухгалтер
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Ссылка,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения,
		|	УвольнениеСпискомСотрудники.Ссылка.Номер,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.СтатьяТКРФ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ УвольнениеСпискомСотрудники.СтатьяТКРФ.ТекстОснования
		|	КОНЕЦ,
		|	УвольнениеСпискомСотрудники.Ссылка.Руководитель,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.РабочийГодС,
		|	УвольнениеСпискомСотрудники.РабочийГодПо,
		|	УвольнениеСпискомСотрудники.Ссылка.Бухгалтер,
		|	УвольнениеСпискомСотрудники.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации,
		|	УвольнениеСпискомСотрудники.Ссылка.ГлавныйБухгалтер
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО УвольнениеСпискомСотрудники.СтатьяТКРФ = Представления.Объект
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка.Проведен
		|	И УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Увольнение.Ссылка В(&МассивОбъектов)", "Увольнение.Сотрудник В(&МассивОбъектов)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)", "УвольнениеСпискомСотрудники.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат КадровыйУчетБазовый.КадровыеДанныеДляПечатиКадровыхПриказов() + ",ТрудовойДоговорНомер,ТрудовойДоговорДата,РазрядКатегория";
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Если Не Запрос.Параметры.Свойство("СохранитьДатыПриема") Тогда
		Запрос.УстановитьПараметр("СохранитьДатыПриема", Ложь);
	КонецЕсли;
	
	// Подготовим таблицу ИзмеренияДаты для получения среза последних.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из Запрос.Параметры.МассивСотрудниковДляОбновления Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Получим последние значения территории сотрудников
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриторииСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделение,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) КАК ТекущаяДолжностьПоШтатномуРасписанию,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
		|			КОГДА &СохранитьДатыПриема = ИСТИНА
		|				ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|		КОНЕЦ) КАК ДатаПриема,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ТекущийВидДоговора,
		|	ЕСТЬNULL(ТерриторииСотрудниковСрезПоследних.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТекущаяТерритория,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ГоловнаяОрганизацияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) КАК ТекущаяДолжностьПоШтатномуРасписаниюПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятостиПредыдущий,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговораПредыдущий,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяТерритория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияПредыдущая
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
		|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
		|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудниковСрезПоследних КАК ТерриторииСотрудниковСрезПоследних
		|		ПО Сотрудники.Ссылка = ТерриторииСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущееПодразделение,
		|	НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписанию,
		|	НовыеКадровыеДанные.ТекущаяДолжность,
		|	НовыеКадровыеДанные.ДатаПриема,
		|	НовыеКадровыеДанные.ДатаУвольнения,
		|	НовыеКадровыеДанные.ТекущийВидЗанятости,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ТекущийВидДоговора КАК ТекущийВидДоговора,
		|	НовыеКадровыеДанные.ТекущаяТерритория КАК ТекущаяТерритория
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	(НовыеКадровыеДанные.ГоловнаяОрганизация <> НовыеКадровыеДанные.ГоловнаяОрганизацияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
		|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписанию <> НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписаниюПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий
		|			ИЛИ НовыеКадровыеДанные.ТекущийВидДоговора <> НовыеКадровыеДанные.ВидДоговораПредыдущий
		|			ИЛИ НовыеКадровыеДанные.ТекущаяТерритория <> НовыеКадровыеДанные.ТерриторияПредыдущая)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СотрудникиНеПринятые = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
				СотрудникиНеПринятые.Добавить(Выборка.Сотрудник);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("УстановитьОсновноеРабочееМесто", Истина);
			
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Если СотрудникиНеПринятые.Количество() > 0 Тогда
			ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиНеПринятые);
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник КАК Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НовыеКадровыеДанные.ТекущаяОрганизация КАК Организация,
		|	НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая КАК ОрганизацияПредыдущая,
		|	ВЫБОР
		|		КОГДА НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РольРаботник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанные.Сотрудник) КАК КоличествоДругихРабочихМест
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
		|		ПО НовыеКадровыеДанные.Сотрудник = РолиСотрудников.Сотрудник
		|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
		|		ПО НовыеКадровыеДанные.Сотрудник <> ТекущиеКадровыеДанные.Сотрудник
		|			И НовыеКадровыеДанные.ФизическоеЛицо = ТекущиеКадровыеДанные.ФизическоеЛицо
		|			И НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая = ТекущиеКадровыеДанные.ТекущаяОрганизация
		|ГДЕ
		|	(РолиСотрудников.РольСотрудника ЕСТЬ NULL 
		|				И НовыеКадровыеДанные.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ИЛИ НЕ РолиСотрудников.РольСотрудника ЕСТЬ NULL 
		|				И НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая,
		|	ВЫБОР
		|		КОГДА НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			НаборЗаписей.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Работник, Истина); 
			Если Выборка.РольРаботник Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Сотрудник = Выборка.Сотрудник;
				Запись.РольСотрудника = Перечисления.РолиСотрудников.Работник;
			КонецЕсли; 
			НаборЗаписей.Записать();
			
			Если Выборка.РольРаботник Тогда
				РегистрыСведений.РолиФизическихЛиц.УстановитьРольФизическогоЛица(
					Выборка.ФизическоеЛицо, Выборка.Организация, Перечисления.РолиФизическихЛиц.Сотрудник, Истина);
			КонецЕсли;
				
			Если Выборка.КоличествоДругихРабочихМест = 0 Тогда
				РегистрыСведений.РолиФизическихЛиц.УстановитьРольФизическогоЛица(
					Выборка.ФизическоеЛицо, Выборка.ОрганизацияПредыдущая, Перечисления.РолиФизическихЛиц.Сотрудник, Ложь);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Проверка списка начислений кадровых документов вызывается при обработке проверки заполнения.
// Проверяется состав начислений на предмет наличия взаимоисключающих начислений и заполненность
// показателей начислений.
//
// Параметры:
//		ДокументОбъект				- ДокументОбъект
//		ДатаСобытия					- Дата
//		ИмяТабличнойЧастиНачисления	- Строка
//		ИмяТабличнойЧастиПоказатели	- Строка
//		Отказ						- Булево
//		СодержитПолеДействие		- Булево
//		ИмяРеквизитаРабочееМесто	- Строка
//
Процедура ПроверкаСпискаНачисленийКадровогоДокумента(ДокументОбъект, ДатаСобытия, ИмяТабличнойЧастиНачисления, ИмяТабличнойЧастиПоказатели, Отказ, СодержитПолеДействие = Ложь, ИмяРеквизитаРабочееМесто = "", ИмяРеквизитаНачисление = "Начисление", ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		Или Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Не проводится проверка если начислений нет
	Начисления = ДокументОбъект[ИмяТабличнойЧастиНачисления].Выгрузить();
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Не проводится проверка если все начисления отменены
	Если СодержитПолеДействие Тогда
		
		Если Начисления.Количество() = Начисления.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить)).Количество() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		ТаблицаРабочихМест = Неопределено;
	Иначе
		ТаблицаРабочихМест = ОписаниеРабочихМестСотрудников(Начисления.ВыгрузитьКолонку(ИмяРеквизитаРабочееМесто), ДатаСобытия);
	КонецЕсли;
	
	Начисления.Колонки[ИмяРеквизитаНачисление].Имя = "Начисление";
	
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("Показатели", ДокументОбъект[ИмяТабличнойЧастиПоказатели].Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.Действие КАК Действие,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.Значение КАК Значение,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК Показатели";
	
	ПредварительнаяВыборка = Ложь;
	Если Не СодержитПолеДействие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Действие КАК Действие,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТНачисления", "ПОМЕСТИТЬ ВТНачисленияПредварительно");
		ПредварительнаяВыборка = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто", "Начисления." + ИмяРеквизитаРабочееМесто);
	КонецЕсли;
	
	Если ПредварительнаяВыборка Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК НомерСтроки,
			|	Начисления.РабочееМесто КАК РабочееМесто,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТНачисленияПредварительно КАК Начисления
			|ГДЕ
			|	Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)";
		
		Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверка наличия взаимоисключаемых начислений.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование КАК Наименование,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК НачисленияДругие
		|		ПО Начисления.Начисление <> НачисленияДругие.Начисление
		|			И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени)
		|ГДЕ
		|	НЕ НачисленияДругие.НомерСтроки ЕСТЬ NULL 
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование,
		|	Начисления.РабочееМесто,
		|	Начисления.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.РабочееМесто,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Введено несколько взаимоисключающих начислений (%1)'"), Выборка.Наименование);
				
			Иначе
				
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, введено несколько взаимоисключающих начислений (%2)'"),
					РабочееМестоПредставление,
					Выборка.Наименование);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, ИмяТабличнойЧастиНачисления + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "]." + ИмяРеквизитаНачисление, ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка заполнения значений показателей.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтрокиПоказателя
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
		|			ПО НачисленияПоказатели.Показатель = Показатели.Ссылка
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|			И (Показатели.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное))
		|			И (НЕ Показатели.ДопускаетсяНулевоеЗначение)
		|			И (НЕ Показатели.ЗначениеРассчитываетсяАвтоматически)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.НомерСтроки КАК НомерСтроки,
		|	НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,
		|	ВЫБОР
		|		КОГДА НачисленияСПоказателями.Показатель.КраткоеНаименование = """"
		|			ТОГДА НачисленияСПоказателями.Показатель.Наименование
		|		ИНАЧЕ НачисленияСПоказателями.Показатель.КраткоеНаименование
		|	КОНЕЦ КАК Показатель
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО НачисленияСПоказателями.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|			И НачисленияСПоказателями.Показатель = Показатели.Показатель
		|ГДЕ
		|	ЕСТЬNULL(Показатели.Значение, 0) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСПоказателями.РабочееМесто,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не задано значение ""%1""'"), Выборка.Показатель);
				
			Иначе
				
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, не задано значение ""%2""'"),
					РабочееМестоПредставление,
					Выборка.Показатель);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, ИмяТабличнойЧастиНачисления + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "].Показатель1", ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает или удаляет роль сотрудника Договорник.
//
// Параметры:
//		СотрудникСсылка
//		Установить - Булево, истина установить роль, ложь - удалить.
//
Процедура УстановитьРольДоговорникСотруднику(СотрудникСсылка, Установить = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО Сотрудники.Ссылка = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|ГДЕ
	|	Сотрудники.Ссылка = &СотрудникСсылка
	|	И ВЫБОР
	|			КОГДА &Установить
	|				ТОГДА РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|			ИНАЧЕ НЕ РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	Запрос.УстановитьПараметр("Установить", Установить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(СотрудникСсылка);
		Набор.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Договорник);
		
		Если Установить Тогда
			Запись = Набор.Добавить();
			Запись.Сотрудник = СотрудникСсылка;
			Запись.РольСотрудника = Перечисления.РолиСотрудников.Договорник;
		КонецЕсли; 
		
		Набор.Записать();
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НомерКадровогоПриказа(Знач НомерПриказа) Экспорт
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПриказа, Истина, Истина);
	КонецЕсли;
	
	Возврат НомерПриказа;
	
КонецФункции

Процедура ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(Организация, ТабличнаяЧастьСотрудники, Отказ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	СписокСотрудников = ТабличнаяЧастьСотрудники.ВыгрузитьКолонку("Сотрудник");
	
	ГоловныеОрганизацииСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ГоловнаяОрганизация");
	Для каждого СтрокаСотрудника Из ТабличнаяЧастьСотрудники Цикл
		
		ГоловнаяОрганизацияСотрудника = ГоловныеОрганизацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1 не соответствует организации %2.'"),
				СтрокаСотрудника.Сотрудник,
				Организация);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "].Сотрудник",
				,
				Отказ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры


#Область ПроцедурыИФункцииФормированияОтчетов

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	ДополнительныеСведения = ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ДатаОтчета, КлючВарианта);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
		НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.РабочееМестоСотрудник;
		НоваяСтрокаТаблицыСотрудников.ФизическоеЛицо = СтрокаСотрудника.ЛичныеДанныеФизическоеЛицо;
		НоваяСтрокаТаблицыСотрудников.Период = СтрокаСотрудника.ПараметрыДанныхПериод;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСотрудников.Период КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериода,
		|	ТаблицаСотрудников.Период КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОписательОтборов = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляФизическоеЛицо", "ВТСотрудникиПериоды", "ФизическоеЛицо");
	ЗапросКОбразованиям = ЗапросВТОбразованияФизическихЛиц(Истина, ОписательОтборов);
	ЗапросКОбразованиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросКОбразованиям.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("ВидПовышенияКвалификации", НСтр("ru='Обучение на курсах'"));
			СтруктураСтроки.Вставить("УчебноеЗаведениеАдрес", Выборка.УчебноеЗаведение);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПовышенияКвалификаций", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Специальность", Выборка.Специальность);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПрофессиональныхПереподготовок", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РодственникиФизическихЛиц.Владелец КАК ФизическоеЛицо,
		|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
		|	РодственникиФизическихЛиц.Наименование КАК ФИОРодственника,
		|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРожденияРодственника
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|ГДЕ
		|	РодственникиФизическихЛиц.Владелец В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	РодственникиФизическихЛиц.ДатаРождения УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НаградыФизическихЛиц.Награда КАК Награда,
		|	НаградыФизическихЛиц.НомерПриказа КАК НомерПриказа,
		|	НаградыФизическихЛиц.ДатаПриказа КАК ДатаПриказа,
		|	НаградыФизическихЛиц.НаименованиеПриказа КАК Приказ,
		|	НаградыФизическихЛиц.НомерПоПорядку
		|ИЗ
		|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	НаградыФизическихЛиц.НомерПоПорядку";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", СтрокиДанных.ВыгрузитьКолонку("ЛичныеДанныеФизическоеЛицо"));
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоСоставуСемьи = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаПоСоставуСемьи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоСоставуСемьи.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтепеньРодства", ВыборкаПоСоставуСемьи.СтепеньРодства);
			СтруктураСтроки.Вставить("ФИОРодственника", ВыборкаПоСоставуСемьи.ФИОРодственника);
			СтруктураСтроки.Вставить("ГодРожденияРодственника", Формат(ВыборкаПоСоставуСемьи.ДатаРожденияРодственника, "ДФ=гггг"));
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоСоставуСемьи.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСоставСемьи", ДанныеЗаполнения);
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоНаградам = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПоНаградам.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоНаградам.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Награда", ВыборкаПоНаградам.Награда);
			СтруктураСтроки.Вставить("Приказ", ВыборкаПоНаградам.Приказ);
			СтруктураСтроки.Вставить("НомерПриказа", ВыборкаПоНаградам.НомерПриказа);
			СтруктураСтроки.Вставить("ДатаПриказа", ВыборкаПоНаградам.ДатаПриказа);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоНаградам.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияНаграды", ДанныеЗаполнения);
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		"ВТСотрудникиПериоды",
		"Сотрудник.ФизическоеЛицо",
		"Период");
	
	ЗапросВТСтажи = ЗапросВТСтажиФизическихЛиц(Истина, ОписательВременнойТаблицыОтборов, , "");
	ЗапросВТСтажи.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросВТСтажи.Текст = ЗапросВТСтажи.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ВидСтажа.Код";
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаСтажи = ЗапросВТСтажи.Выполнить().Выбрать();
	Пока ВыборкаСтажи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоФизическомуЛицу = Новый Массив;
		Пока ВыборкаСтажи.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтажВид", ВыборкаСтажи.ВидСтажа);
			СтруктураСтроки.Вставить("СтажДней", ВыборкаСтажи.Дней);
			СтруктураСтроки.Вставить("СтажМесяцев", ВыборкаСтажи.Месяцев);
			СтруктураСтроки.Вставить("СтажЛет", ВыборкаСтажи.Лет);
			
			ДанныеЗаполненияПоФизическомуЛицу.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		ДанныеЗаполнения.Вставить(ВыборкаСтажи.ФизическоеЛицо, ДанныеЗаполненияПоФизическомуЛицу);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСтажи", ДанныеЗаполнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета);
	КонецЕсли;
	
	// В самом конце дополним сведения по государственным служащим
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта);
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ДатаОтчета, КлючВарианта)
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	Если КлючВарианта = "Т2ГСМС" Тогда
		УсловиеДоговора = " В ";
	Иначе
		УсловиеДоговора = " НЕ В ";
	КонецЕсли;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеестрКадровыхПриказов.Дата КАК Период,
	|	РеестрКадровыхПриказов.Сотрудник КАК Сотрудник,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ДатаПриказа,
	|	РеестрКадровыхПриказов.НомерПриказа,
	|	РеестрКадровыхПриказов.Основание
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Сотрудник В(&МассивСотрудников)
	|	И РеестрКадровыхПриказов.Дата <= &ДатаОтчета
	|	И РеестрКадровыхПриказов.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|	И РеестрКадровыхПриказов.ВидДоговора " + УсловиеДоговора + " 
	|   (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период";
	
	МассивСотрудников = Новый Массив;
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		МассивСотрудников.Добавить(СтрокаСотрудника.РабочееМестоСотрудник);	
	КонецЦикла;

	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
			
		Пока ВыборкаКадроваяИстория.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаКадроваяИстория.Подразделение) И ТипЗнч(ВыборкаКадроваяИстория.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение.ПолноеНаименование());
			Иначе
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
			КонецЕсли; 
			СтруктураСтроки.Вставить("ДолжностьПеревода", Строка(ВыборкаКадроваяИстория.Должность) + ?(ЗначениеЗаполнено(ВыборкаКадроваяИстория.Разряд), ", " + Строка(ВыборкаКадроваяИстория.Разряд), ""));
			
			СтруктураСтроки.Вставить("ТарифнаяСтавка", ВыборкаКадроваяИстория.ТарифнаяСтавкаНадбавка);
			
			Основание = ОснованиеДляРеестра(ВыборкаКадроваяИстория.ДатаПриказа, ВыборкаКадроваяИстория.НомерПриказа);
			
			СтруктураСтроки.Вставить("ОснованиеПеревода", Основание);
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
		
	КонецЦикла;
		
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	
	// Отпуска
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрОтпусков.Сотрудник КАК Сотрудник,
		|	РеестрОтпусков.ВидОтпуска,
		|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	РеестрОтпусков.КоличествоДнейОтпуска КАК ДнейОтпуска,
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия КАК ДатаС,
		|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия КАК ДатаПо,
		|	РеестрОтпусков.Основание,
		|	ВЫБОР
		|		КОГДА РеестрОтпусков.ДатаНачалаПериодаОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЭтоКомпенсацияОтпуска
		|ИЗ
		|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
		|ГДЕ
		|	РеестрОтпусков.Сотрудник В(&Сотрудники)
		|	И РеестрОтпусков.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего))
		|	И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.БольничныйЛист
		|	И РеестрОтпусков.ДатаНачалаПериодаОтсутствия <= &ДатаОтчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ЭтоКомпенсацияОтпуска,
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеестрОтпусков.ВидДоговора В", "РеестрОтпусков.ВидДоговора " + УсловиеДоговора);
	
	Если НастройкиКадровогоУчета().ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.БольничныйЛист", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаОтпуска = РезультатЗапроса.Выбрать();
		Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияПоСотруднику = Новый Массив;
			Пока ВыборкаОтпуска.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ВидОтпуска", ВыборкаОтпуска.ВидОтпуска);
				СтруктураСтроки.Вставить("ДатаС", ВыборкаОтпуска.ДатаС);
				СтруктураСтроки.Вставить("ДатаПо", ВыборкаОтпуска.ДатаПо);
				СтруктураСтроки.Вставить("ДнейОтпуска", ВыборкаОтпуска.ДнейОтпуска);
				СтруктураСтроки.Вставить("РабочийГодС", ВыборкаОтпуска.РабочийГодС);
				СтруктураСтроки.Вставить("РабочийГодПо", ВыборкаОтпуска.РабочийГодПо);
				СтруктураСтроки.Вставить("ОснованиеОтпуска", ВыборкаОтпуска.Основание);
				
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполнения.Вставить(ВыборкаОтпуска.Сотрудник, ДанныеЗаполненияПоСотруднику);
			
		КонецЦикла;
		
		ДополнительныеСведения.Вставить("ДанныеЗаполненияОтпуска", ДанныеЗаполнения);
		
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция ОтчетВидаКарточкаСотрудника(КлючВарианта) Экспорт
	
	Если КлючВарианта = "Т4"
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ЭтоВариантОтчетаТ2ГСМС(КлючВарианта) Тогда
			
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиМакетыОтчетовПоСотрудникам(Отчет, КлючВарианта, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) Экспорт
	
	Если КлючВарианта = "Т4" Тогда
		
		ДокументРезультат.АвтоМасштаб = Истина;
		ВывестиМакетыСГруппировкамиТ4(Отчет, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей, , РаботникКадровойСлужбыРасшифровкаПодписи);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ФормированиеКарточкиНаучногоРаботникаТ4

Процедура ВывестиМакетыСГруппировкамиТ4(Отчет, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень = 0, РаботникКадровойСлужбыРасшифровкаПодписи = "")
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуТ4(Отчет, ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень, Группировки);
			ВывестиМакетыСГруппировкамиТ4(ДокументРезультат, СтрокаДанных, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень + 1, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуТ4(Отчет, ДокументРезультат, СтрокаДанных, Поле, Уровень, Группировки)
	
	МакетТ4 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т4");
	ОбластьГруппировки = МакетТ4.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));
	
	ОбластьГруппировки.Параметры.НазваниеПараметра = ДоступноеПоле.Заголовок;
	ОбластьГруппировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГруппировки, Уровень);
	
КонецПроцедуры 

Процедура ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) 
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	МакетТ4 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т4");
	Макет = МакетТ4.ПолучитьОбласть("Т4");
	
	Макет.Параметры.Заполнить(СтрокаДанных);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макет, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеУчебноеЗаведение) Тогда
		Макет.Параметры.ВысшееОбразование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, %2'"),
			СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеУчебноеЗаведение,
			Формат(СтрокаДанных.ЛичныеДанныеОбразованияВысшееОбразованиеОкончание, "ДФ=гггг"));
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней)
		И СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней
			+ СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажМесяцев
			+ СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажЛет > 0 Тогда
		
		Макет.Параметры.НаучноПедагогическийСтаж = ПредставлениеСтажа(
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажДней, 
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажМесяцев, 
			СтрокаДанных.ЛичныеДанныеСтажиОбщийНаучноПедагогическийСтажЛет);
		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней)
		И СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней
			+ СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажМесяцев
			+ СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажЛет > 0 Тогда
		
		Макет.Параметры.ПедагогическийСтаж = ПредставлениеСтажа(
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажДней, 
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажМесяцев, 
			СтрокаДанных.ЛичныеДанныеСтажиПедагогическийСтажЛет);
		
	КонецЕсли; 	
		
	Если СтрокаДанных.ЛичныеДанныеИмеетИзобретения Тогда
		Макет.Область("ИзобретенияНеИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	Иначе
		Макет.Область("ИзобретенияИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	КонецЕсли; 
	
	Если СтрокаДанных.ЛичныеДанныеИмеетНаучныеТруды Тогда
		Макет.Область("НаучныеТрудыНеИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	Иначе
		Макет.Область("НаучныеТрудыИмеет").Шрифт = Новый Шрифт(,,,,, Истина);
	КонецЕсли; 
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПодразделение) Тогда
		Макет.Параметры.РабочееМестоПодразделение = СтрокаДанных.РабочееМестоПодразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макет, Уровень+1);
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМетодыДляПолученияКадровыхДанных

Функция ПредставлениеСтажа(Дней, Месяцев, Лет) Экспорт
	
	Возврат ?(Дней = 0, "", Формат(Дней, "ЧЦ=2") + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='день'"), НСтр("ru='дня'"), НСтр("ru='дней'"), Дней))
		+ ?(Месяцев = 0, "", ?(Дней = 0, "", " ") + Формат(Месяцев, "ЧЦ=2") + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='месяц'"), НСтр("ru='месяца'"), НСтр("ru='месяцев'"), Месяцев))
		+ ?(Лет = 0, "", ?(Дней = 0 И Месяцев = 0, "", " ") + Формат(Лет, "ЧЦ=3") + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='год'"), НСтр("ru='года'"), НСтр("ru='лет'"), Лет));
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормКадровыхДокументов

Процедура УстановитьПараметрыВыбораНачисленийПоКатегории(Форма, ОписаниеТаблицыНачислений, МассивКатегорийНачислений) Экспорт
	
	ИмяЭлемента = ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета;
	УстановитьПараметрыВыбораНачисленийПоКатегорииЭлементуФормы(Форма, ИмяЭлемента, МассивКатегорийНачислений);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоКатегорииЭлементуФормы(Форма, ИмяЭлемента, МассивКатегорийНачислений) Экспорт
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ЕстьСвояНастройкаПараметра = Ложь;
		
		ПараметрыВыбораНачислений = Новый Массив;
		
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			
			Если ПараметрВыбора.Имя = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени" Тогда
				ЕстьСвояНастройкаПараметра = Истина;
				Прервать;
			КонецЕсли;
			
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
			
		КонецЦикла;
		
		Если Не ЕстьСвояНастройкаПараметра Тогда
			
			ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Новый ФиксированныйМассив(МассивКатегорийНачислений));
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
			ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыбораКатегорииНачислений(ПолныйСписокКатегорий = Ложь) Экспорт
	
	МассивКатегорийНачислений = Новый Массив;
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее);
	
	Если ПолныйСписокКатегорий Тогда
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	КонецЕсли;
	
	Возврат МассивКатегорийНачислений;
	
КонецФункции

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат Модуль.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

// Выполняет проверку соответствия штатному расписанию переданных кадровых движений.
// Параметры: 
//	ДанныеОЗанятыхПозициях это коллекция элементов с полями.
//		Период, 
//		ПозицияШтатногоРасписания, 
//		Сотрудник,
//		КоличествоСтавок
//	ПроверяемыйРегистратор - ссылка на проверяемый регистратор (движения 
//		которого необходимо исключить из рассмотрения).
//	СохранитьНаСервере - булево. Если Истина, то результаты проверки необходимо 
//		сохранить во временном хранилище.
//	РезультатПроверки - в этот параметр возвращается результат проверки - 
//		адрес временного хранилища со структурой.
//		Структура может содержать два поля.
//			* ПроблемыТекущегоДокумента.
//			* ПроблемыДругихДокументов.
//		Каждое из полей - таблица значений с колонками.
//			- Документ - ссылка на документ, который не будет соответствовать штатному расписанию.
//			- ДокументПредставление - ...его представление.
//			- ДатаДокумента - ...его дата.
//			- Период - дата движения, которое не будет соответствовать штатному расписанию.
//			- Сотрудник
//			- КоличествоСтавок
//			- ПозицияШтатногоРасписания
//			- ПозицияШтатногоРасписанияПредставление
//	ИсправленныйДокумент - ссылка на документ, который будет исправлен документом ПроверяемыйРегистратор.
//		Не обязательный
//			
//	Возвращаемое значение:
//	Истина, если данные соответствуют штатному расписанию и Ложь в противном случае.
Функция ПроверкаСоответствияШтатномуРасписанию(Знач ДанныеОЗанятыхПозициях, ПроверяемыйРегистратор, СохранитьНаСервере, РезультатПроверки, ИсправленныйДокумент = НеОпределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеОЗанятыхПозициях) = Тип("Строка") Тогда
		ДанныеОЗанятыхПозициях = ПолучитьИзВременногоХранилища(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	ДанныеПроверки = Новый Структура();
	
	ПроблемыТекущегоДокумента = Новый ТаблицаЗначений;
	ПроблемыТекущегоДокумента.Колонки.Добавить("Документ");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДокументПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДатаДокумента");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Период");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Сотрудник");
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавокНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("СвободноеКоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСНачислениями", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("РасшифровкаНачислений");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписанияПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдом", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдомПредставление", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ИсключитьНачисленияПедагогическихДолжностейИзПроверкиШтатногоРасписания(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Возврат Модуль.ПроверкаНаСоответствиеГрейдамПередЗаписьюДокумента(РезультатПроверки, ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
	КонецЕсли;
	
	ПроблемыДругихДокументов = ПроблемыТекущегоДокумента.СкопироватьКолонки("Документ,ДокументПредставление,ДатаДокумента,Период,Сотрудник,КоличествоСтавок,ПозицияШтатногоРасписания,ПозицияШтатногоРасписанияПредставление");

	МассивПозицийШтатногоРасписания = Новый Массив;
	ДвиженияПроверяемогоДокумента = Новый ТаблицаЗначений();
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	
	ДвиженияНачисленийПроверяемогоДокумента = Новый ТаблицаЗначений;
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементДанных Из ДанныеОЗанятыхПозициях Цикл
		Если Не ЗначениеЗаполнено(ЭлементДанных.ПозицияШтатногоРасписания) Тогда
			НоваяСтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
			НоваяСтрокаПроблемыТекущегоДокумента.Период = ЭлементДанных.Период;
			НоваяСтрокаПроблемыТекущегоДокумента.Сотрудник = ЭлементДанных.Сотрудник;
			Продолжить;
		ИначеЕсли МассивПозицийШтатногоРасписания.Найти(ЭлементДанных.ПозицияШтатногоРасписания) = Неопределено Тогда
			МассивПозицийШтатногоРасписания.Добавить(ЭлементДанных.ПозицияШтатногоРасписания);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДвиженияПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Если ЭлементДанных.ДанныеОНачислениях = Неопределено Или ЭлементДанных.ДанныеОНачислениях.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ДвиженияНачисленийПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Иначе
			Для каждого ДанноеНачисления Из ЭлементДанных.ДанныеОНачислениях Цикл
				СтрокаДвиженияНачисленийПроверяемогоДокумента = ДвиженияНачисленийПроверяемогоДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ЭлементДанных);
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ДанноеНачисления);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокумента.Период КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокументаПредварительно
	|ИЗ
	|	&ДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеПозицииШтатногоРасписания.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|			ИНАЧЕ -ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|		КОНЕЦ) КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТРанееЗанятыеСтавки
	|ИЗ
	|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
	|		ПО ДвиженияПроверяемогоДокументаПредварительно.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
	|			И ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|			И ДвиженияПроверяемогоДокументаПредварительно.Период > ЗанятыеПозицииШтатногоРасписания.Период
	|			И (НЕ ЗанятыеПозицииШтатногоРасписания.Регистратор В (&ИсключаемыеПриПроверке))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания,
	|	ДвиженияПроверяемогоДокументаПредварительно.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.КоличествоСтавок - ЕСТЬNULL(РанееЗанятыеСтавки.КоличествоСтавок, 0) КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокумента
	|ИЗ
	|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗанятыеСтавки КАК РанееЗанятыеСтавки
	|		ПО ДвиженияПроверяемогоДокументаПредварительно.Сотрудник = РанееЗанятыеСтавки.Сотрудник
	|			И ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = РанееЗанятыеСтавки.ПозицияШтатногоРасписания
	|			И ДвиженияПроверяемогоДокументаПредварительно.Период = РанееЗанятыеСтавки.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПроверяемогоДокумента.Период КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТПериодыПроверяемогоДокумента
	|ИЗ
	|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(ПериодыПроверяемогоДокумента.Период) КАК Период,
	|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТРанниеПериодыПроверяемогоДокумента
	|ИЗ
	|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПроверяемыйРегистратор КАК Документ,
	|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
	|	КОНЕЦПЕРИОДА(ДвиженияПроверяемогоДокумента.Период, ДЕНЬ) КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
	|	ИСТИНА КАК ЭтоПроверяемыйДокумент
	|ПОМЕСТИТЬ ВТЗанятыеПозицииШтатногоРасписания
	|ИЗ
	|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗанятыеПозиции.Регистратор,
	|	ЗанятыеПозиции.Регистратор.Дата,
	|	ВЫБОР
	|		КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА КОНЕЦПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ЗанятыеПозиции.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЗанятыеПозиции.КоличествоСтавок
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗанятыеПозиции.ВременноеДвижение
	|						И ЗанятыеПозиции.Период > &ТекущаяДата
	|					ТОГДА -ЗанятыеПозиции.УсловноеКоличествоСтавок
	|				ИНАЧЕ -ЗанятыеПозиции.КоличествоСтавок
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозиции.Регистратор),
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
	|		ПО ЗанятыеПозиции.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|			И (ЗанятыеПозиции.Период >= НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
	|ГДЕ
	|	НЕ ЗанятыеПозиции.Регистратор В (&ИсключаемыеПриПроверке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПроверяемыйРегистратор,
	|	&ДатаПроверяемогоРегистратора,
	|	НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ),
	|	NULL,
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗанятыеПозиции.КоличествоСтавок
	|			ИНАЧЕ -ЗанятыеПозиции.КоличествоСтавок
	|		КОНЕЦ),
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор),
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
	|		ПО ЗанятыеПозиции.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|			И (ЗанятыеПозиции.Период < НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
	|ГДЕ
	|	НЕ ЗанятыеПозиции.Регистратор В (&ИсключаемыеПриПроверке)
	|
	|СГРУППИРОВАТЬ ПО
	|	РанниеПериодыПроверяемогоДокумента.Период,
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания";
		
	Запрос.УстановитьПараметр("ДвиженияПроверяемогоДокумента", ДвиженияПроверяемогоДокумента);
	Запрос.УстановитьПараметр("ПроверяемыйРегистратор", ПроверяемыйРегистратор);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ИсключаемыеПриПроверке = Новый Массив;
	ИсключаемыеПриПроверке.Добавить(ПроверяемыйРегистратор);
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ИсключаемыеПриПроверке.Добавить(ИсправленныйДокумент);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИсключаемыеПриПроверке", ИсключаемыеПриПроверке);
	
	Запрос.УстановитьПараметр("ДатаПроверяемогоРегистратора", ПроверяемыйРегистратор.Дата);
	Запрос.Выполнить();
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляСоздатьВТПозицииШтатногоРасписания(
		Запрос.МенеджерВременныхТаблиц, "ВТЗанятыеПозицииШтатногоРасписания", "ПозицияШтатногоРасписания,Период");
	УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(Истина, ОписательВременныхТаблиц, "ВТКоличествоСтавокПозиций");	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗанятыеПозицииШтатногоРасписания.ДатаДокумента КАК ДатаДокумента,
		|	ЗанятыеПозицииШтатногоРасписания.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозицииШтатногоРасписания.Документ) КАК ДокументПредставление,
		|	НАЧАЛОПЕРИОДА(ЗанятыеПозицииШтатногоРасписания.Период, ДЕНЬ) КАК Период,
		|	ЗанятыеПозицииШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
		|	ЗанятыеПозицииШтатногоРасписания.ЭтоПроверяемыйДокумент КАК ЭтоПроверяемыйДокумент,
		|	ЕСТЬNULL(КоличествоСтавокПозиций.КоличествоСтавок, 0) КАК СвободноеКоличествоСтавок
		|ИЗ
		|	ВТЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтавокПозиций КАК КоличествоСтавокПозиций
		|		ПО ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = КоличествоСтавокПозиций.ПозицияШтатногоРасписания
		|			И (НАЧАЛОПЕРИОДА(ЗанятыеПозицииШтатногоРасписания.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(КоличествоСтавокПозиций.Период, ДЕНЬ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Период,
		|	ВЫБОР
		|		КОГДА ЗанятыеПозицииШтатногоРасписания.Сотрудник ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	КоличествоСтавок,
		|	Сотрудник";
	
	РезультатЗапросаПоПозициям = Запрос.Выполнить();
	
	Если Не РезультатЗапросаПоПозициям.Пустой() Тогда
		
		Выборка = РезультатЗапросаПоПозициям.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ПозицияШтатногоРасписания") Цикл
			
			КоличествоСтавок = 0;
			
			Пока Выборка.Следующий() Цикл
				
				РанееЗанятоеКоличествоСтавок = КоличествоСтавок;
				СвободноеКоличествоСтавок = Выборка.СвободноеКоличествоСтавок - РанееЗанятоеКоличествоСтавок;
				Если Выборка.КоличествоСтавок > СвободноеКоличествоСтавок Тогда
					
					Если Выборка.ЭтоПроверяемыйДокумент = Истина И ЗначениеЗаполнено(Выборка.Сотрудник) Тогда 
						НоваяСтрока = ПроблемыТекущегоДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.СвободноеКоличествоСтавок = СвободноеКоличествоСтавок;
						НоваяСтрока.КоличествоСтавокНеСоответствуетПозиции = Истина;
						НоваяСтрока.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
						НоваяСтрока.РасшифровкаНачислений = Новый Массив;
					ИначеЕсли Выборка.ЭтоПроверяемыйДокумент = ЛОЖЬ Тогда
						НоваяСтрока = ПроблемыДругихДокументов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					КонецЕсли;
					
				КонецЕсли;
				
				КоличествоСтавок = КоличествоСтавок + Выборка.КоличествоСтавок;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
			Запрос.МенеджерВременныхТаблиц,
			"ВТКоличествоСтавокПозиций");
		УправлениеШтатнымРасписанием.СоздатьВТНачисленияПозицийШтатногоРасписания(Истина, ОписательВременныхТаблиц, "ВТНачисленияШтатногоРасписанияПредварительно", Истина);
		
		Запрос.УстановитьПараметр("ДвиженияНачисленийПроверяемогоДокумента", ДвиженияНачисленийПроверяемогоДокумента);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДвиженияНачисленийПроверяемогоДокумента.Период КАК Период,
			|	ДвиженияНачисленийПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
			|	ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ДвиженияНачисленийПроверяемогоДокумента.Начисление КАК Начисление,
			|	ДвиженияНачисленийПроверяемогоДокумента.Показатель КАК Показатель,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Значение = НЕОПРЕДЕЛЕНО
			|			ТОГДА 0
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Значение
			|	КОНЕЦ КАК Значение
			|ПОМЕСТИТЬ ВТДвиженияНачисленийПроверяемогоДокумента
			|ИЗ
			|	&ДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|ГДЕ
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ) КАК Период,
			|	ПериодыПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияШтатногоРасписания.Начисление КАК Начисление,
			|	НачисленияШтатногоРасписания.Показатель,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.Значение
			|		ИНАЧЕ НачисленияШтатногоРасписания.Размер
			|	КОНЕЦ КАК Значение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМин
			|	КОНЕЦ КАК ЗначениеМин,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМакс
			|	КОНЕЦ КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТНачисленияШтатногоРасписания
			|ИЗ
			|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписанияПредварительно КАК НачисленияШтатногоРасписания
			|		ПО (ПериодыПроверяемогоДокумента.Период >= НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ))
			|			И ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	НачисленияШтатногоРасписания.Показатель";
			
		Запрос.Выполнить();
			
		Запрос.УстановитьПараметр("ИспользоватьВилкуСтавокВШтатномРасписании", ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании"));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Период ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.Период
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ)
			|	КОНЕЦ КАК Период,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Сотрудник ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.Сотрудник
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Сотрудник
			|	КОНЕЦ КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания
			|	КОНЕЦ КАК ПозицияШтатногоРасписания,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеСотрудника,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательСотрудника,
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|			ТОГДА ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоэффициентПересчета,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеПозиции,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательПозиции,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТСводНачислений
			|ИЗ
			|	ВТДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
			|		ПО (НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ) = НачисленияШтатногоРасписания.Период)
			|			И ДвиженияНачисленийПроверяемогоДокумента.Сотрудник = НачисленияШтатногоРасписания.Сотрудник
			|			И ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|			И ДвиженияНачисленийПроверяемогоДокумента.Начисление = НачисленияШтатногоРасписания.Начисление
			|			И ДвиженияНачисленийПроверяемогоДокумента.Показатель = НачисленияШтатногоРасписания.Показатель
			|ГДЕ
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок > 0";
		Запрос.Выполнить();
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СводНачислений.Период,
			|	СводНачислений.Сотрудник,
			|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
			|	&ПроверяемыйРегистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
			|	СводНачислений.ПозицияШтатногоРасписания,
			|	ПРЕДСТАВЛЕНИЕ(СводНачислений.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
			|	СводНачислений.НачислениеСотрудника КАК Начисление,
			|	СводНачислений.ПоказательСотрудника КАК Показатель,
			|	СводНачислений.НачислениеПозиции,
			|	СводНачислений.ПоказательПозиции,
			|	СводНачислений.Значение,
			|	СводНачислений.ЗначениеМин,
			|	СводНачислений.ЗначениеМакс,
			|	ВЫБОР
			|		КОГДА СводНачислений.НачислениеСотрудника = СводНачислений.НачислениеПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.ПоказательСотрудника = СводНачислений.ПоказательПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПоказательНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.Значение >= СводНачислений.ЗначениеМин
			|				И СводНачислений.Значение <= СводНачислений.ЗначениеМакс
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЗначениеНеСоответствуетПозиции
			|ИЗ
			|	ВТСводНачислений КАК СводНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НачисленияПоказатели.Ссылка КАК Ссылка,
			|			МАКСИМУМ(НачисленияПоказатели.Показатель) КАК Показатель
			|		ИЗ
			|			ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ГДЕ
			|			НачисленияПоказатели.Показатель = &ДоляНеполногоРабочегоВремени
			|			И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НачисленияПоказатели.Ссылка) КАК НачисленияПоказатели
			|		ПО СводНачислений.НачислениеСотрудника = НачисленияПоказатели.Ссылка
			|ГДЕ
			|	(СводНачислений.НачислениеСотрудника <> СводНачислений.НачислениеПозиции
			|			ИЛИ СводНачислений.ПоказательСотрудника <> СводНачислений.ПоказательПозиции
			|			ИЛИ СводНачислений.Значение < (ВЫРАЗИТЬ(СводНачислений.ЗначениеМин * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 3)))
			|			ИЛИ СводНачислений.Значение > (ВЫРАЗИТЬ(СводНачислений.ЗначениеМакс * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 3))))";
		
		Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
		РезультатЗапросаПоНачислениям = Запрос.Выполнить();
		
		Если Не РезультатЗапросаПоНачислениям.Пустой() Тогда
			ТаблицаПроблемныхНачислений = РезультатЗапросаПоНачислениям.Выгрузить();
			ТаблицаПроблемныхНачисленийПоСотрудникам = ТаблицаПроблемныхНачислений.Скопировать(, "Период,Сотрудник,ПозицияШтатногоРасписания");
			ТаблицаПроблемныхНачисленийПоСотрудникам.Свернуть("Период,Сотрудник,ПозицияШтатногоРасписания");
			Для каждого СтрокаТаблицы Из ТаблицаПроблемныхНачисленийПоСотрудникам Цикл
				СтруктураПоиска = Новый Структура("Период,Сотрудник,ПозицияШтатногоРасписания");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
				СтрокиПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.НайтиСтроки(СтруктураПоиска);
				НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
				Если СтрокиПроблемыТекущегоДокумента.Количество() = 0 Тогда
					СтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
					НеобходимоЗаполнитьСтрокуОписанияПроблемы = Истина;
				Иначе
					СтрокаПроблемыТекущегоДокумента = СтрокиПроблемыТекущегоДокумента[0];
				КонецЕсли;
				РасшифровкаНачислений = ТаблицаПроблемныхНачислений.СкопироватьКолонки("Начисление,Показатель,НачислениеПозиции,ПоказательПозиции,Значение,ЗначениеМин,ЗначениеМакс,НачислениеНеСоответствуетПозиции,ПоказательНеСоответствуетПозиции,ЗначениеНеСоответствуетПозиции");
				СтрокиНачислений = ТаблицаПроблемныхНачислений.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
					Если НеобходимоЗаполнитьСтрокуОписанияПроблемы Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПроблемыТекущегоДокумента, СтрокаНачислений);
						НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(РасшифровкаНачислений.Добавить(), СтрокаНачислений);
				КонецЦикла;
				СтрокаПроблемыТекущегоДокумента.ПроблемыСНачислениями = Истина;
				СтрокаПроблемыТекущегоДокумента.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
				СтрокаПроблемыТекущегоДокумента.РасшифровкаНачислений = ОбщегоНазначения.ТаблицаЗначенийВМассив(РасшифровкаНачислений);
			КонецЦикла;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Модуль.ПроверитьНачисленияНаСоответствиеГрейдам(ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПроблемыТекущегоДокумента.Количество() + ПроблемыДругихДокументов.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		
		Если ПроблемыТекущегоДокумента.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыТекущегоДокумента", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыТекущегоДокумента));
		КонецЕсли;	
		
		Если ПроблемыДругихДокументов.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыДругихДокументов", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыДругихДокументов));
		КонецЕсли;	
		
		РезультатПроверки = ПоместитьВоВременноеХранилище(ДанныеПроверки, Новый УникальныйИдентификатор);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Дополняет переданную коллекцию колонками.
//		Организация
//		ГоловнаяОрганизация
//		ТекущаяОрганизация
//		ТекущаяПозиция
//		ТекущееПодразделение
//		ТекущаяДолжность
//  	ТекущееКоличествоСтавок
// Колонки Текущая... заполняются только для записей перемещения и увольнения.
// Колонки Организация, ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ГоловнаяОрганизацияЕсть = (КадровыеДвижения.Колонки.Найти("ГоловнаяОрганизация") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидЗанятостиЕсть = (КадровыеДвижения.Колонки.Найти("ВидЗанятости") <> НеОпределено);
	ВидДоговораЕсть = (КадровыеДвижения.Колонки.Найти("ВидДоговора") <> НеОпределено);
	
	ПолучатьКадровыеДанные = Не (ПодразделениеЕсть
		И ПозицияЕсть
		И ДолжностьЕсть
		И КоличествоСтавокЕсть
		И ВидЗанятостиЕсть
		И ВидДоговораЕсть);
	
	Если Не ПолучатьКадровыеДанные И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл
			
			Если СтрокаДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				
				ПолучатьКадровыеДанные = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КадровыеДвижения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если Не ГоловнаяОрганизацияЕсть Тогда
		КадровыеДвижения.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяПозиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КадровыеДвижения.Колонки.Добавить("ТекущееКоличествоСтавок", Новый ОписаниеТипов("Число"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	
	ОрганизацииПозиций = Неопределено;
	ОрганизацииПодразделений = Неопределено;
	
	// Если есть Позиция или Подразделение, то можно определить Организацию.
	Если ПозицияЕсть Или ПодразделениеЕсть Тогда
		
		Если ПозицияЕсть Тогда
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
			ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Позиции, "Владелец");
			
		КонецЕсли;
		
		Если ПодразделениеЕсть Тогда
			
			Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Подразделение", Истина);
			ОрганизацииПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Владелец");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение времени регистрации движений
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, КадровыеДвижения);
	КонецЕсли;
	
	// Таблица с измерениями для получения кадровых данных
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЭтоУвольнение = ТипЗнч(Регистратор) = Тип("ДокументСсылка.Увольнение")
		Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.УвольнениеСписком");
	
	Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл 
		
		// Заполнение организаций
		Если ПозицияЕсть И ЗначениеЗаполнено(СтрокаДвижений.Позиция) Тогда
			
			СтрокаДвижений.Организация = ОрганизацииПозиций[СтрокаДвижений.Позиция];
			
		ИначеЕсли ПодразделениеЕсть И ЗначениеЗаполнено(СтрокаДвижений.Подразделение) Тогда
			
			СтрокаДвижений.Организация = ОрганизацииПодразделений[СтрокаДвижений.Подразделение];
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДвижений.Организация) Тогда
			СтрокаДвижений.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(СтрокаДвижений.Организация);
		КонецЕсли;
		
		// Формирование таблицы измерений для получения кадровых данных
		Если ПолучатьКадровыеДанные Тогда
			
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				
				НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
				Если ЭтоУвольнение Тогда
					НоваяСтрока.Период = НачалоДня(НоваяСтрока.Период) - 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмеренияДаты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИзмеренияДаты.Сотрудник,
			|	ИзмеренияДаты.Период
			|ПОМЕСТИТЬ ВТСотрудникиПериод
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
		Запрос.Выполнить();
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Регистратор));
		
		Отборы = Новый Структура;
		Отборы.Вставить("КадроваяИсторияСотрудников", Отбор);
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСотрудникиПериод");
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ГоловнаяОрганизация,Организация,Подразделение,Должность,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидЗанятости,ВидДоговора", Отборы);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.Сотрудник,
			|	НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
			|	КадровыеДанныеСотрудников.Организация КАК ТекущаяОрганизация,
			|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ТекущаяГоловнаяОрганизация,
			|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ТекущаяПозиция,
			|	КадровыеДанныеСотрудников.Подразделение КАК ТекущееПодразделение,
			|	КадровыеДанныеСотрудников.Должность КАК ТекущаяДолжность,
			|	КадровыеДанныеСотрудников.КоличествоСтавок КАК ТекущееКоличествоСтавок,
			|	КадровыеДанныеСотрудников.ВидЗанятости КАК ТекущийВидЗанятости,
			|	КадровыеДанныеСотрудников.ВидДоговора КАК ТекущийВидДоговора
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Если ЭтоУвольнение Тогда
				СтруктураПоиска.ДатаСобытия = КонецДня(СтруктураПоиска.ДатаСобытия) + 1;
			КонецЕсли;
			
			НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, 
					"ТекущаяОрганизация,
					|ТекущаяПозиция,
					|ТекущееПодразделение,
					|ТекущаяДолжность,
					|ТекущееКоличествоСтавок,
					|ТекущийВидЗанятости,
					|ТекущийВидДоговора");
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
					НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.ГоловнаяОрганизация) Тогда
					НайденнаяСтрока.ГоловнаяОрганизация = Выборка.ТекущаяГоловнаяОрганизация;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет переданную коллекцию колонками
//		ГоловнаяОрганизация
//		ТекущийГрафик.
// Колонки ТекущийГрафик заполняются только для записей перемещения и увольнения.
// Колонка ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ГоловнаяОрганизацияЕсть = (ДвиженияГрафиков.Колонки.Найти("ГоловнаяОрганизация") <> НеОпределено);
	Если Не ГоловнаяОрганизацияЕсть Тогда
		ДвиженияГрафиков.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ДвиженияГрафиков);
	КонецЕсли;
	
	// Сотрудники для которых необходимо получить головную организацию
	МассивСотрудников = Новый Массив;
	
	// Сотрудники для которых необходимо получить головную организацию и текущий график работы
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из ДвиженияГрафиков Цикл
		
		Если Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			
			НоваяСтрока = СотрудникиДаты.Добавить();
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(Строка.ДатаСобытия);
			
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(Строка.Сотрудник);
			КонецЕсли;
			
		Иначе
			МассивСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение текущих графиков работы и головных организаций
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		ДвиженияГрафиков.Колонки.Добавить("ТекущийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ГрафикРаботыСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
			ПараметрыПостроения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГрафикРаботыСотрудников.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
			|	НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
			|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ТекущийГрафик
			|ИЗ
			|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудников";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СтрокиГрафика = ДвиженияГрафиков.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
				ЗаполнитьЗначенияСвойств(СтрокаГрафика, Выборка, "ГоловнаяОрганизация,ТекущийГрафик");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение головных организаций
	Если МассивСотрудников.Количество() > 0 Тогда
		
		ГоловныеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнаяОрганизация");
		Для каждого СтрокаДвижений Из ДвиженияГрафиков Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДвижений.ГоловнаяОрганизация) Тогда
				
				ГоловнаяОрганизация = ГоловныеОрганизации.Получить(СтрокаДвижений.Сотрудник);
				Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
					СтрокаДвижений.ГоловнаяОрганизация = ГоловнаяОрганизация;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаНачисленийСотрудников(ИзмеренияДаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", КатегорииНачисленийПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
				
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСрезПоследних.Начисление КАК ПланВидовРасчета.Начисления).Рассчитывается КАК Рассчитывается,
		|	ПлановыеНачисленияСрезПоследних.Размер КАК Размер,
		|	РасчетыПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК РасчетыПоказатели
		|		ПО ПлановыеНачисленияСрезПоследних.Начисление = РасчетыПоказатели.Ссылка
		|			И (РасчетыПоказатели.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.Период,
		|	НачисленияСПоказателями.Сотрудник,
		|	НачисленияСПоказателями.Начисление,
		|	НачисленияСПоказателями.Рассчитывается,
		|	НачисленияСПоказателями.Размер,
		|	НачисленияСПоказателями.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаФОТСотрудников(ИзмеренияДаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL 
	|				ТОГДА ПлановыеНачисленияСрезПоследних.Размер
	|			ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
	|		КОНЕЦ) КАК ФОТ
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
	|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
	|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
	|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисленияСрезПоследних.Используется
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеОТекущихНачисленияхСотрудника(Сотрудник, Период) Экспорт
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(Новый Структура("Сотрудник,Период", Сотрудник, Период));
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктур);
	Возврат ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты);
КонецФункции

Функция ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачисленийСотрудников = Неопределено)
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ &ТаблицаСотрудников КАК ТаблицаСотрудников
	|";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ИзмеренияДаты);
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию,Должность,КоличествоСтавок");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Период КАК Период,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
	|ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|";
	
	ТаблицаКадровыхДанных = Запрос.Выполнить().Выгрузить();
	
	ДоступноЧтениеДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны(
		"ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
		
	Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
		Если ТаблицаНачисленийСотрудников = Неопределено Тогда
			ТаблицаНачисленийСотрудников = ТаблицаНачисленийСотрудников(ИзмеренияДаты);
			ТаблицаФОТСотрудников = ТаблицаФОТСотрудников(ИзмеренияДаты);
		Иначе
			ТаблицаФОТСотрудников = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Для каждого СтрокаТаблицаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ТекущаяДатаСеанса());
		СтруктураВозврата.Период = СтрокаТаблицаКадровыхДанных.Период;
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаТаблицаКадровыхДанных);
		
		Если Не ИспользуетсяШтатноеРасписание Тогда
			СтруктураВозврата.ПозицияШтатногоРасписания = СтрокаТаблицаКадровыхДанных.Должность;
		КонецЕсли;
		
		Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
			ДанныеОНачислениях = Новый Массив;
			СтрокиНачислений = ТаблицаНачисленийСотрудников.НайтиСтроки(Новый Структура("Период,Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				ЗначениеПоказателя = ?(СтрокаНачислений.Рассчитывается, СтрокаНачислений.Значение, СтрокаНачислений.Размер);
				ДанныеОНачислениях.Добавить(Новый Структура("Начисление,Показатель,Значение", СтрокаНачислений.Начисление, СтрокаНачислений.Показатель, ЗначениеПоказателя));
			КонецЦикла;
			
			Если ТаблицаФОТСотрудников <> Неопределено Тогда
				СтрокиФОТ = ТаблицаФОТСотрудников.НайтиСтроки(Новый Структура("Период, Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
				СтруктураВозврата.ФОТ = ?(СтрокиФОТ.Количество() > 0, СтрокиФОТ[0].ФОТ, 0);
			КонецЕсли; 
			
		Иначе
			ДанныеОНачислениях = Неопределено;
		КонецЕсли;
		
		СтруктураВозврата.ДанныеОНачислениях = ДанныеОНачислениях;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

Функция ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников)
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для Каждого СтруктураСотрудника Из МассивСтруктурСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СтруктураСотрудника.Сотрудник;
		НоваяСтрокаИзмеренияДаты.Период = СтруктураСотрудника.Период;
	КонецЦикла;
	Возврат ИзмеренияДаты;
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудников(МассивСтруктурСотрудников) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты), Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриВозвратеНаРаботу(МассивСтруктурСотрудников, ТаблицаНачислений = Неопределено) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	ДанныеОЗанятыхПозициях = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачислений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмеренияДаты.Период,
		|	ИзмеренияДаты.Сотрудник
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	&ИзмеренияДаты КАК ИзмеренияДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(УсловияОплатыОтпускаПоУходуЗаРебенком.Период) КАК Период,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор
		|ПОМЕСТИТЬ ВТМаксимальныеДаты
		|ИЗ
		|	ВТИзмеренияДаты КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
		|		ПО ИзмеренияДаты.Период > УсловияОплатыОтпускаПоУходуЗаРебенком.Период
		|			И ИзмеренияДаты.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
		|ГДЕ
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеДаты.Период КАК Период,
		|	МаксимальныеДаты.Сотрудник,
		|	ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	-ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТМаксимальныеДаты КАК МаксимальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ПО МаксимальныеДаты.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
		|			И МаксимальныеДаты.Регистратор = ЗанятыеПозицииШтатногоРасписания.Регистратор
		|			И (ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(Выборка.Период);
		СтруктураВозврата.Сотрудник = Выборка.Сотрудник;
		СтруктураВозврата.ПозицияШтатногоРасписания = Выборка.ПозицияШтатногоРасписания;
		СтруктураВозврата.КоличествоСтавок = Выборка.КоличествоСтавок;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозициях, Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников) Экспорт
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для каждого СоответствиеСотрудника Из СоответствиеСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СоответствиеСотрудника.Ключ;
		НоваяСтрокаИзмеренияДаты.Период = СоответствиеСотрудника.Значение.Период;
	КонецЦикла;
	
	ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты);
	
	Для каждого СтруктураДанных Из ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников Цикл
		СтруктураДанных.ПозицияШтатногоРасписания = СоответствиеСотрудников.Получить(СтруктураДанных.Сотрудник).ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников, Новый УникальныйИдентификатор);
	
КонецФункции

Функция ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДатаСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("Сотрудник");
	ПараметрыЗаполнения.Вставить("РазрядКатегорияНадбавки");
	ПараметрыЗаполнения.Вставить("ОписаниеТаблицыНачислений");
	ПараметрыЗаполнения.Вставить("СохранятьТекущиеЗначения", Ложь);
	ПараметрыЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ТекущаяДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ПКУ");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения) Экспорт
	
	ДатаСобытия = ПараметрыЗаполнения.ДатаСобытия;
	
	// Определении даты на которую получаются сведения позиций штатного расписания
	ДатаУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения");
	Если ДатаСобытия < ДатаУтверждения Тогда
		ДатаСведений = ДатаУтверждения;
	Иначе
		ДатаСведений = ДатаСобытия;
	КонецЕсли;
	
	ДанныеПозиций = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ДанныеДолжности");
	Если ДанныеПозиций = Неопределено Тогда
		
		СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию) Тогда
			СписокПозиций.Добавить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
		КонецЕсли;
		
		ДанныеПозиций = УправлениеШтатнымРасписанием.ДанныеПозицийШтатногоРасписания(
			Истина, СписокПозиций, ДатаСведений);
		
	КонецЕсли;
	
	ДанныеПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
	ДанныеТекущейПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
	
	ФОРаботаВБюджетномУчреждении = Форма.ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении");
	Если ФОРаботаВБюджетномУчреждении Тогда
		
		Если ДанныеПозиции.Свойство("СпособОтраженияЗарплатыВБухучете")
			И Форма.Объект.Свойство("СпособОтраженияЗарплатыВБухучете") Тогда
			
			Форма.Объект.СпособОтраженияЗарплатыВБухучете = ДанныеПозиции.СпособОтраженияЗарплатыВБухучете;
			
		КонецЕсли;
		
		Если ДанныеПозиции.Свойство("ОтношениеКЕНВД")
			И Форма.Объект.Свойство("ОтношениеКЕНВД") Тогда
			
			Форма.Объект.ОтношениеКЕНВД = ДанныеПозиции.ОтношениеКЕНВД;
			
		КонецЕсли;
		
		Если ДанныеПозиции.Свойство("СтатьяФинансирования")
			И Форма.Объект.Свойство("СтатьяФинансирования") Тогда
			
			Форма.Объект.СтатьяФинансирования = ДанныеПозиции.СтатьяФинансирования;
			
		КонецЕсли;
	
	КонецЕсли; 
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Сотрудник = ПараметрыЗаполнения.Сотрудник;
	РазрядКатегорияНадбавки = ПараметрыЗаполнения.РазрядКатегорияНадбавки;
	СохранятьТекущиеЗначения = ПараметрыЗаполнения.СохранятьТекущиеЗначения;
	ОписаниеТаблицыНачислений = ПараметрыЗаполнения.ОписаниеТаблицыНачислений;
	
	СодержитПолеДействие = ОписаниеТаблицыНачислений.Свойство("СодержитПолеДействие")
		И ОписаниеТаблицыНачислений.СодержитПолеДействие = Истина;
	
	НачисленияПозиции = ДанныеПозиции.Начисления;
	НачисленияТекущейПозиции = Новый Соответствие;
	Если НачисленияПозиции <> Неопределено Тогда
		
		Если ДанныеТекущейПозиции <> Неопределено Тогда
			
			Для каждого ОписаниеНачисления Из ДанныеТекущейПозиции.Начисления Цикл
				НачисленияТекущейПозиции.Вставить(ОписаниеНачисления.Начисление, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
		
		// Запомним текущее состояние табличной части Начисления.
		ТЧНачисленияПредыдущие = ДанныеНачислений.Выгрузить();
		
		// При заполнении из перемещения необходимо сохранить текущий состав начислений.
		НачисленияИзменяемыхСтрок = Новый Соответствие;
		
		// Получение данных тарифной сетки
		ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		Если ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
			
			ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйПовтИсп.ДанныеТарифныхСеток(
				ДанныеПозиции.ТарифнаяСетка, ДанныеПозиции.РазрядКатегория, ДанныеПозиции.ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, Ложь, ПараметрыЗаполнения.ПКУ);
			
		Иначе
			ДанныеТарифныхСеток = Неопределено;
		КонецЕсли; 
		
		Для Каждого ОписаниеНачисления Из НачисленияПозиции Цикл
			
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыНачислений) Тогда
				
				Если (ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
					
					Если ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли; 
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", ОписаниеНачисления.Размер);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			// Определение строки начисления или создание новой, если строки с начислением еще нет.
			НайденныеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНачислений = НайденныеСтроки[0];
			Иначе
				
				СтрокаНачислений = ДанныеНачислений.Добавить();
				СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета] = ОписаниеНачисления.Начисление;
				Если СодержитПолеДействие Тогда
					СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаНачислений.Свойство("ХарактерНачисления") Тогда
				СтрокаНачислений.ХарактерНачисления = ПредопределенноеЗначение("Перечисление.ХарактерПлановогоНачисления.Штатное");
			КонецЕсли;
			
			ПоказателиСтрокиНачислений = Новый ТаблицаЗначений;
			ПоказателиСтрокиНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
			// Подготовка значений показателей из предыдущего состава строк.
			НайденныеСтроки = ТЧНачисленияПредыдущие.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаПредыдущихНачислений = НайденныеСтроки[0];
				Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
					
					Если ЗначениеЗаполнено(СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей]) Тогда
						
						НоваяСтрокаПоказателей = ПоказателиСтрокиНачислений.Добавить();
						НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						НоваяСтрокаПоказателей.Показатель = СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей];
						НоваяСтрокаПоказателей.Значение = СтрокаПредыдущихНачислений["Значение" + СчетчикПоказателей];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Подготовка значений показателей по данным начисления штатного расписания.
			// Значение показателя остается неизменным, если его значение попадает в диапазон
			// между минимальным и максимальным значениями показателя штатного расписания.
			// Если значение не попадает в этот диапазон, выбирается ближайшее из значений
			// показателя начисления позиции штатного расписания.
			Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
				
				Если СчетчикПоказателей <= ОписаниеНачисления.Показатели.Количество() Тогда
					
					ОписаниеПоказателя = ОписаниеНачисления.Показатели[СчетчикПоказателей - 1];
					
					НайденныеПоказатели = ПоказателиСтрокиНачислений.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель));
					Если НайденныеПоказатели.Количество() = 0 Тогда
						СтрокаПоказателя = ПоказателиСтрокиНачислений.Добавить();
						СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						СтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
					Иначе
						СтрокаПоказателя = НайденныеПоказатели[0];
					КонецЕсли;
					
					ЗначенияНазначеныПоДаннымТарифныхСеток = Ложь;
					Если ДанныеТарифныхСеток <> Неопределено Тогда
						Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейОклад.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							Иначе
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейКвалификационнаяНадбавка.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							Иначе
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение <> 0 Тогда
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначенияНазначеныПоДаннымТарифныхСеток Тогда
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							ЗначениеМин = ОписаниеПоказателя.ЗначениеМин;
							ЗначениеМакс = ОписаниеПоказателя.ЗначениеМакс;
						Иначе
							ЗначениеМин = ОписаниеПоказателя.Значение;
							ЗначениеМакс = ЗначениеМин;
						КонецЕсли;
					КонецЕсли;
					
					Если СохранятьТекущиеЗначения Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
							ЗначениеПоказателя = ЗначениеМакс;
						Иначе
							ЗначениеПоказателя = СтрокаПоказателя.Значение;
						КонецЕсли;
						
					Иначе
						ЗначениеПоказателя = ЗначениеМин;
					КонецЕсли;
					
					СтрокаПоказателя.Значение = ЗначениеПоказателя;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Размещение показателей в строке начисления.
			ЗарплатаКадрыРасширенный.ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(
				ИнфоОВидеРасчета, СтрокаНачислений, ПоказателиСтрокиНачислений, 1, , , , Сотрудник, ДатаСобытия);
			
			Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
				
				СтрокаНачислений.ФиксированнаяСумма = Истина;
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ЗначениеМин = ОписаниеНачисления.РазмерМин;
					ЗначениеМакс = ОписаниеНачисления.РазмерМакс;
				Иначе
					ЗначениеМин = ОписаниеНачисления.Размер;
					ЗначениеМакс = ЗначениеМин;
				КонецЕсли;
				
				Если СохранятьТекущиеЗначения Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаНачислений.Значение1) Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 <= ЗначениеМин Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 >= ЗначениеМакс Тогда
						ЗначениеПоказателя = ЗначениеМакс;
					Иначе
						ЗначениеПоказателя = СтрокаНачислений.Значение1;
					КонецЕсли;
					
				Иначе
					ЗначениеПоказателя = ЗначениеМин;
				КонецЕсли;
				
				СтрокаНачислений.Значение1 = ЗначениеПоказателя;
				
			КонецЕсли;
			
			НачисленияИзменяемыхСтрок.Вставить(СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета], Истина);
			
		КонецЦикла;
		
		// Дополнительная обработка строк начислений.
		// Необходимо упорядочить строки начислений по значению РеквизитДопУпорядочивания начисления.
		ТЧНачисления = ДанныеНачислений.Выгрузить();
		ТЧНачисления.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
		
		// Подготовка значений РеквизитДопУпорядочивания начислений.
		Начисления = ТЧНачисления.Скопировать();
		Начисления.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
		РеквизитыДопупорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета), "РеквизитДопУпорядочивания");

		// При заполнении из перемещения, необходимо обнулить показатели начислений прекращающих действие
		// и сформировать комментарии к строкам.
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаНачислений Из ТЧНачисления Цикл
			
			Начисление = СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета];
			СтрокаНачислений.РеквизитДопУпорядочивания = РеквизитыДопупорядочивания.Получить(Начисление);
			
			Если НачисленияТекущейПозиции.Получить(Начисление) = Истина Тогда
				
				Если СодержитПолеДействие Тогда
					
					Если НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
						СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
					КонецЕсли;
					
					СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНачислений);
					Если СтруктураСтроки.Свойство("Комментарий") Тогда
						
						ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтруктураСтроки,
							ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений), 1, ОписаниеТаблицыНачислений, ДатаСобытия);
							
						СтрокаНачислений.Комментарий = СтруктураСтроки.Комментарий;
						
					КонецЕсли;
					
				ИначеЕсли НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
					СтрокиКУдалению.Добавить(СтрокаНачислений);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТЧНачисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		ТЧНачисления.Сортировать("РеквизитДопУпорядочивания");
		ДанныеНачислений.Загрузить(ТЧНачисления);
	КонецЕсли;
	
	// Дополнительные показатели
	ДополнительныеПоказателиПозиции = ДанныеПозиции.НезависимыеПоказатели;
	
	ДополнительныеПоказателиПредыдущие = Форма.Объект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	
	УдаляемыеСтроки = Форма.Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Показатели.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// При заполнении из перемещения необходимо сохранить текущий состав дополнительных показателей.
	Если СодержитПолеДействие Тогда
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.Скопировать();
	Иначе
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.СкопироватьКолонки();
	КонецЕсли;
	
	МассивИзменяемыхСтрок = Новый Массив;
	Если ДополнительныеПоказателиПозиции <> Неопределено Тогда
		
		Для Каждого ДополнительныйПоказатель Из ДополнительныеПоказателиПозиции Цикл
			
			НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Показатель", ДополнительныйПоказатель.Показатель));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаПоказателя = НайденныеСтроки[0];
			Иначе 
				
				СтрокаПоказателя = ДополнительныеПоказатели.Добавить();
				СтрокаПоказателя.Показатель = ДополнительныйПоказатель.Показатель;
				Если СодержитПолеДействие Тогда
					СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
				ЗначениеМин = ДополнительныйПоказатель.ЗначениеМин;
				ЗначениеМакс = ДополнительныйПоказатель.ЗначениеМакс;
				
			Иначе
				
				ЗначениеМин = ДополнительныйПоказатель.Значение;
				ЗначениеМакс = ЗначениеМин;
				
			КонецЕсли;
			
			Если СохранятьТекущиеЗначения Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
					СтрокаПоказателя.Значение = ЗначениеМакс;
				КонецЕсли;
				
			Иначе
				СтрокаПоказателя.Значение = ЗначениеМин;
			КонецЕсли;
			
			МассивИзменяемыхСтрок.Добавить(СтрокаПоказателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка действия Отменить дополнительным показателям
	Если СодержитПолеДействие Тогда
		
		Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл 
			
			Если МассивИзменяемыхСтрок.Найти(СтрокаПоказателя) = Неопределено Тогда
				СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
			КонецЕсли;
			
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПоказателя));
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Перенос строк с дополнительными показателями в документ
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Форма.Объект.Показатели.Добавить(), СтрокаПоказателя);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения, ДанныеПозиций);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(СтрокаДокумента, СписокСотрудниковДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудниковДокумента", СписокСотрудниковДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаДокумента.Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникТекущий
		|		ПО Сотрудники.ФизическоеЛицо = СотрудникТекущий.ФизическоеЛицо
		|			И (СотрудникТекущий.Ссылка = &Сотрудник)
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудниковДокумента)";
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтрокаДокумента.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиПодписокНаСобытия

Процедура ПодразделенияОрганизацийОбработкаПроверкиЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не Источник.Сформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаСоздания");
	КонецЕсли; 
	
	Если Не Источник.Расформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаРасформирования");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Источник.ДатаРасформирования) И ЗначениеЗаполнено(Источник.ДатаСоздания) И Источник.ДатаСоздания > Источник.ДатаРасформирования Тогда
		ТекстСообщения = НСтр("ru = 'Дата создания подразделения не может быть больше даты расформирования"".'",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если (Не Источник.Расформировано) И Источник.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'У помеченного на удаление подразделения нельзя снять флаг ""Расформировано"".'",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если Источник.Расформировано Тогда
		ПроверкаИспользованияВШтатномРасписании(Отказ, Источник.Ссылка, Источник.ДатаРасформирования);
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверкаИспользованияВШтатномРасписании(Отказ, Ссылка, ДатаРасформирования)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	Запрос.УстановитьПараметр("ДатаРасформирования", ДатаРасформирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = &Подразделение
	|	И НЕ ПодразделенияОрганизаций.Расформировано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 есть действующие подчиненные подразделения:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'подразделение'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.НаименованиеПодразделения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Наименование КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Подразделение = &Подразделение
	|	И НЕ ШтатноеРасписание.ЭтоГруппа
	|	И НЕ(ШтатноеРасписание.Закрыта
	|				И ШтатноеРасписание.ДатаЗакрытия <= &ДатаРасформирования)";
	
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 оно используется в актуальных позициях штатного расписания:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'позиция'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.ПозицияШтатногоРасписания); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ПодразделенияОрганизацийПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Если Источник.ПометкаУдаления И Источник.Сформировано И (Не Источник.Расформировано)  Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя пометить на удаление действующее подразделение'",);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаписиДанныхФизическихЛицПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоПорядку = 1;
	Для каждого Запись Из Источник Цикл
		
		Запись.НомерПоПорядку = НомерПоПорядку;
		НомерПоПорядку = НомерПоПорядку + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапомнитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизацияПредыдущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
	Если Источник.ЭтоНовый()
		Или ГоловнаяОрганизацияПредыдущая <> Источник.ГоловнаяОрганизация Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ОбновитьДанныеДляПодбораНового", Истина);
		
	Иначе
		Источник.ДополнительныеСвойства.Вставить("НаименованиеПредыдущее", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Наименование"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НаименованиеПредыдущее")
		И Источник.Наименование <> Источник.ДополнительныеСвойства.НаименованиеПредыдущее Тогда
		
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьНаименованияСотрудника(Источник.Ссылка, Источник.Наименование);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьДанныеДляПодбораНового") Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ);	
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
		
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("СохранитьДатыПриема", Истина);
	КонецЕсли;
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	
	
КонецПроцедуры

Процедура ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных");
	
КонецПроцедуры

Функция ИспользуетсяОтложеннаяРегистрацияВторичныхКадровыхДанных(НаборЗаписей) Экспорт
	
	Используется = Ложь;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных") Тогда
		Используется = (НаборЗаписей.ДополнительныеСвойства.ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных = Истина);
	КонецЕсли;
	
	Возврат Используется;
	
КонецФункции

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписейКадровойИтории) Экспорт
	ИзменившиесяДанные = ЗарплатаКадрыПериодическиеРегистры.ТаблицаИзменившихсяДанныхНабора(НаборЗаписейКадровойИтории);
	
	Если ИзменившиесяДанные.Количество() > 0 Тогда
		ОбновитьРегистрТекущиеКадровыеДанныеПоИзменениямКадровойИстории(НаборЗаписейКадровойИтории, ИзменившиесяДанные);	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииОбновленияВторичныхДанныхВозвратногоРегистраСведений

// Находит значения возвратных ресурсов регистра сведений и обновляет их в соответствии с значениями записываемого
// набора записей.
// Может вызываться из процедур ПередЗаписью и ПриЗаписи модуля набора записей регистра сведений.
// Работает только для регистров сведений подчиненных регистратору.
// Параметры:
//		НовыйНабор - набор записей, влияние записей которого на будущие записи проверяется.
//
//		ПередЗаписью - булево значение. 
//			Показывает из какой процедуры вызвана текущая процедура ПередЗаписью или ПриЗаписи.
//
//		СтрокаЗаполняемыхВозвратныхРесурсов - Строка. 
//			Строка содержащая наименования заполняемых возвратных ресурсов через запятую. Наименования указываются без
//			постфикса "ПоОкончании".
//	
//
// Получает срез первых для каждого набора измерений(включая период) НабораЗаписей. Если такие записи есть, то к ним
// присоединяются данные среза последних на дату из записи из среза первых - 1 секунда. Если значения ресурсов среза
// последних отличаются от значений возвратных ресурсов среза первых, то значения в записях среза первых заполняются
// значениями из среза последних.
//
Процедура ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления) Экспорт
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	РегистрСведенийМетаданные = Метаданные.РегистрыСведений[ИмяРегистра];
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	// Создадим массив содержащий измерения нашего регистра + период.
	// Создадим строку описывающую измерения нашего регистра + период.
	
	Измерения = Новый Массив;
	СтрокаИзмерений = "Период";
	Измерения.Добавить(СтрокаИзмерений);
	Для Каждого Измерение Из РегистрСведенийМетаданные.Измерения Цикл
		Измерения.Добавить(Измерение.Имя);
		СтрокаИзмерений = СтрокаИзмерений + "," + Измерение.Имя;
	КонецЦикла;
	
	НаборЗаписейИзменен = Истина;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("НаборЗаписейИзменен", НаборЗаписейИзменен);
	Иначе
		НаборЗаписейИзменен = НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор);
		НаборЗаписей.ДополнительныеСвойства.Вставить("НаборЗаписейИзменен", НаборЗаписейИзменен);
	КонецЕсли;
	
	Если Не НаборЗаписейИзменен Тогда
		Возврат;
	КонецЕсли;
	
	// При записи в дополнительных свойствах набора содержится менеджер временных таблиц,
	// а в нем таблица содержащая наборы измерений которые не имеют записей в будущем.
	// Если Менеджера в свойствах нет, создадим новый.
	МенеджерВременныхТаблиц	= Неопределено;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;  
	
	Если ПараметрыОбновления.ПередЗаписью Тогда
		ЭтоВторичныйНабор = Ложь;
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор", ЭтоВторичныйНабор) Тогда
			Если ЭтоВторичныйНабор Тогда
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
				ТекстЗапроса = "ВЫБРАТЬ ";
				Для Каждого Измерение Из Измерения Цикл
					ТекстЗапроса = ТекстЗапроса + "
					|	NULL КАК " + Измерение + ",";
				КонецЦикла;
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
				ТекстЗапроса = ТекстЗапроса + "
				| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью";
				Запрос.Текст = ТекстЗапроса;
				Запрос.Выполнить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Создадим массив содержащий отборы из записываемого набора.
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЭлементОтбора.Имя, " = ", ЭлементОтбора.Значение));
	КонецЦикла;
	
	// Создадим в менеджере таблицу ВТИзмеренияДатыДляФормированияСрезаПервых и заполним ее данными из базы
	// с отбором таким же как в записываемом наборе записей.
	// Таблица будет содержать все наборы измерений по которым необходимо проверить записи в будущем.
	ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПараметрыОбновления.ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Получим в наш МенеджерВременныхТаблиц таблицу ВТ[ИмяРегистра]СрезПервых.
	Отбор.Очистить();
	ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Перед записью нам не нужны данные по текущему регистратору.
	Если ПараметрыОбновления.ПередЗаписью Тогда 
		Отбор.Очистить();
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Регистратор", " <> ", Регистратор));
	Иначе
		Отбор = Неопределено;
	КонецЕсли;	
	
	ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, Отбор);
	
КонецПроцедуры	

// Метод конструирует структуру с параметрами механизма обновления вторичных данных возвратных регистров.
Функция ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра() Экспорт
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = Новый Структура;
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", "");
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Истина);
	Возврат	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра;
КонецФункции

Процедура ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ";
	
	// Добавим отбор, по измерениям не имеющим записей в будущем, из таблицы которую создали ПередЗаписью.
	Если Не ПередЗаписью Тогда
		ТекстЗапроса =	ТекстЗапроса + " ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДатыПередЗаписью КАК ПередЗаписью
		|ПО "; 	
		Для Каждого Измерение Из Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	РегистрСведений." + Измерение + " = ПередЗаписью." + Измерение + " И ";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	КонецЕсли;
	
	Если Отбор.Количество() <> 0 Тогда
		СчПараметров = 1;
		ТекстОтбор = "
		|	ГДЕ (";
		Для Каждого СтруктураОтбора Из Отбор Цикл
			ТекстОтбор = ТекстОтбор + "
			|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + СтруктураОтбора.ВидСравнения + "(&Параметр" + СчПараметров + ") И";
			СчПараметров = СчПараметров + 1;
		КонецЦикла;	
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	КонецЕсли;
	
	Если Не ПередЗаписью Тогда
		Если Отбор.Количество() <> 0 Тогда
			ТекстЗапроса =	ТекстЗапроса + "
			|  И (ПередЗаписью.Период ЕСТЬ NULL)";		
		Иначе
			ТекстЗапроса =	ТекстЗапроса + "
			|	ГДЕ (ПередЗаписью.Период ЕСТЬ NULL)"; 	
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		СчПараметров = 1;
		Для Каждого СтруктураОтбора Из Отбор Цикл
			Запрос.УстановитьПараметр("Параметр" + СчПараметров, СтруктураОтбора.ПравоеЗначение);			
			СчПараметров = СчПараметров + 1;
		КонецЦикла;
	КонецЕсли;	
	
	Если Не ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса + ";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТИзмеренияДатыДляФормированияСрезаПервых",
		СтрокаИзмерений);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВключаяГраницу = Ложь;
	ПараметрыПостроения.Отборы = Отбор;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТИПЗНАЧЕНИЯ(РегистрСведений.Регистратор) = ТИП(Документ.Увольнение) ИЛИ ДействуетДо", " <> ", '00010101', Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		ИмяРегистра,
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления)
	// Для документа увольнение вторичные данные хранятся в "обычных" ресурсах.
	ОкончаниеРесурса = ?(ТипЗнч(ВыборкаСтрок.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) И ПараметрыОбновления.ПервичныеРесурсыДляУвольнения, "", "ПоОкончании");
	
	Для каждого Запись Из НаборДляЗаписи Цикл
		Если Запись.НомерСтроки = ВыборкаСтрок.НомерСтроки Тогда
			Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
				Запись[СокрЛП(Ресурс) + ОкончаниеРесурса] = ВыборкаСтрок[СокрЛП(Ресурс) + "ПоОкончании"]
			КонецЦикла;
			Прервать;	             
		КонецЕсли;	
	КонецЦикла	
КонецПроцедуры

Процедура ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, ОтборНеЭтотРегистратор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Необходимо заполнить ВТИзмеренияДатыПередЗаписью записями которые были в таблице ВТИзмеренияДаты, но 
	// которых нет в таблице ВТ[ИмяРегистра]СрезПервых
	// ВТИзмеренияДатыПередЗаписью будем использовать ПриЗаписи в процедуре
	// ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора  для отбора наборов измерений по которым нет записей в будущем.
	// Временные таблицы, которые больше не нужны - уничтожим.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью
	|ИЗ
	|	ВТИзмеренияДатыДляФормированияСрезаПервых КАК РегистрСведений 
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ВТ" + ИмяРегистра + "СрезПервых КАК СрезПервых
	|ПО"; 
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + " = СрезПервых." + Измерение + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	 СрезПервых.Период ЕСТЬ NULL;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	 * 
	|	 ПОМЕСТИТЬ ВТИзмеренияДатыДляПроверкиКоличества
	|ИЗ 
	|	 ВТИзмеренияДатыДляФормированияСрезаПервых;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляПроверкиКоличества;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых";
	
	Если Не ПараметрыОбновления.ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса+";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// В МассивРезультатов находятся результаты помещения данных во временные таблицы.
	ИзмеренияДаты 							= МассивРезультатов[1].Выбрать();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем 	= МассивРезультатов[0].Выбрать();
	
	ИзмеренияДаты.Следующий();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Следующий();
	
	// Если не по одному набору измерений, которой записывается нет записей в будущем - ничего делать не будем.
	// Таблица со срезом первых нам больше не нужна.
	Если Не (ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Количество < ИзмеренияДаты.Количество) Тогда
		ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
		Если ПараметрыОбновления.ПередЗаписью Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// По каждой записи из ВТ[ИмяРегистраСрезПервых необходимо:
	// 1. Получить  срез последних.
	// 2. Проверить надо ли изменять реквизиты ПоОкончании у следующей записи.
	// 3. Если надо, то создаем набор по регистратору следующей записи,
	//	 по номеру строки находим нашу и пишем в нее новые значения возвратных реквизитов.
	
	КоллекцииПолей = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, Измерения);
	
	// Строка для ограничения заполняемых ресурсов только возвратными,
	// если в параметре переданы конкретные ресурсы - заполняем и проверяем только их, 
	// иначе - заполняем и проверяем все.
	Если ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов = "" Тогда
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			СтрокаЗаполняемыхВозвратныхРесурсов = СтрокаЗаполняемыхВозвратныхРесурсов + Ресурс + ",";
		КонецЦикла;
		СтрокаЗаполняемыхВозвратныхРесурсов = Лев(СтрокаЗаполняемыхВозвратныхРесурсов, СтрДлина(СтрокаЗаполняемыхВозвратныхРесурсов) - 1);
	Иначе
		СтрокаЗаполняемыхВозвратныхРесурсов = ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов;
	КонецЕсли;
	
	МассивНеобходимыхВозвратныхРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗаполняемыхВозвратныхРесурсов, ",", Истина);
	
	// Подготовим ВТ для передачи в процедуру СоздатьПоВременнойТаблицеВТИмяРегистраСрезПоследних, в которую выберем
	// измерения из полученного ранее среза первых,  т.к. для остальных наборов измерений никаких действий выполнять не
	// требуется.
	// Необходимо заметить, что в качестве периода на который требуется получить срез последних указывается период записи
	// среза первых минус секунда.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведений.ПериодЗаписи, ДЕНЬ), СЕКУНДА, -1) КАК Период";
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Измерение;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТИзмеренияДатыИзСрезаПервых
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведений";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью данные текущего набора, записанные в БД, в срезе нам не нужны,
	// передадим в процедуру формирования Отбор с регистратором текущего набора.
	// Если же ПриЗаписи, то данные текущего набора нужны, отбора по регистратору нет. 
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ПараметрыПостроения.Отборы = ОтборНеЭтотРегистратор;
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		ИмяРегистра,
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыИзСрезаПервых",
			СтрокаИзмерений),
		ПараметрыПостроения);
			
	Запрос.Текст ="УНИЧТОЖИТЬ ВТИзмеренияДатыИзСрезаПервых";
	Запрос.Выполнить();
	
	// Сейчас МенеджерВременныхТаблиц содержит таблицы СрезаПервых и СрезаПоследних.
	// Необходимо соединить эти таблицы и найти строки по которым требуется обновление вторичных реквизитов.
	// В итоге должна получится таблица вида.
	// Измерение1
	// |....|ИзмерениеN|НовоеЗначениеОбновляемогоРесурса1|...|НовоеЗначениеОбновляемогоРесурса1|Регистратор|НомерСтроки|
	// Необходимо заметить, что в качестве периода для связи из таблицы среза первых берется поле ПериодИзСреза плюс
	// секунда, т.к. уменьшали период когда получали срез последних.
	ТекстЗапроса = 
	"ВЫБРАТЬ	";
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " КАК " + СокрЛП(Ресурс) + "ПоОкончании,";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведенийСрезПервых." + СтандартныйРеквизит;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведенийСрезПервых";
	ТекстЗапроса = ТекстЗапроса + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	 ВТ" + ИмяРегистра + "СрезПоследних КАК РегистрСведенийСрезПоследних
	|ПО НАЧАЛОПЕРИОДА(РегистрСведенийСрезПервых.ПериодЗаписи, ДЕНЬ) = ДОБАВИТЬКДАТЕ(РегистрСведенийСрезПоследних.Период, СЕКУНДА, 1)"; 
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + " И 
		|	РегистрСведенийСрезПервых." + Измерение + " = " + "РегистрСведенийСрезПоследних." + Измерение;
	КонецЦикла;
	
	// Будем выбирать только те записи, которые требуют обновления,
	// для этого проверим, что хотя бы один ресурс среза последних отличается от ресурса по окончании среза первых.
	// Проверяются только те ресурсы, которые необходимо заполнять.
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|	ВЫБОР КОГДА "; 
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РегистрСведенийСрезПервых.Регистратор) = ТИП(Документ.Увольнение) И &ПервичныеРесурсыДляУвольнения 
		|		ТОГДА РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "  
		|	ИНАЧЕ РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "ПоОкончании КОНЕЦ" +  " И ";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ = ИСТИНА"; 
	
	// Т.к. добавили стандартные реквизиты - поле регистратор точно будет.
	ТекстЗапроса = ТекстЗапроса + "
	|	ИТОГИ ПО
	|	РегистрСведенийСрезПервых.Регистратор";
	
	Запрос.УстановитьПараметр("ПервичныеРесурсыДляУвольнения", ПараметрыОбновления.ПервичныеРесурсыДляУвольнения);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПоследних; 
	|	УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
	Если ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
	КонецЕсли;

	// Может быть так, что ничего обновлять не придется.
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	// По каждому регистратору из результата запроса перезаполним записи требующие обновления.
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) 
			И Не ПараметрыОбновления.ОбновлятьУвольнение Тогда
		   Продолжить;
		КонецЕсли;
		
		НаборДляЗаписи	= РасчетЗарплатыРасширенный.СоздатьНаборЗаписейРегистратора(Метаданные.РегистрыСведений[ИмяРегистра], Выборка.Регистратор);
		НаборДляЗаписи.Прочитать();
		ВыборкаСтрок = Выборка.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления);
		КонецЦикла;
		НаборДляЗаписи.ДополнительныеСвойства.Вставить("ЭтоВторичныйНабор", Истина);
		НаборДляЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Функция НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор)

	ТЗИзНабораЗаписей = НаборЗаписей.Выгрузить();
	
	// Подготовим массив полей по которым будем сравнивать данные.
	МассивПолей = Новый Массив;
	Для каждого Колонка Из ТЗИзНабораЗаписей.Колонки Цикл
		// Колонка "Номер строки" с точки зрения нашего механизма не существенна.
		// Регистратор сравнивать тоже не будем - и в запросе, и в наборе по нему отбор.
		Если Колонка.Имя = "НомерСтроки"
			Или Колонка.Имя = "Регистратор" Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗИзНабораЗаписей",ТЗИзНабораЗаписей);
	Запрос.УстановитьПараметр("Регистратор",Регистратор);
	
	// Выберем все данные из базы и из записываемого набора, которые необходимо сравнить.
	// Соединим по всем полям данные из базы и из записываемого набора.
	ТекстЗапроса = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзНабораЗаписей ИЗ &ТЗИзНабораЗаписей КАК ТЗИзНабораЗаписей
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзРегистра ИЗ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ГДЕ РегистрСведений.Регистратор = &Регистратор
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	РегистрСведений.НомерСтроки КАК НомерСтроки,
	|	ВТИзНабораЗаписей.НомерСтроки КАК НомерСтрокиИзНабора 
	|ИЗ
	|	ВТИзРегистра КАК РегистрСведений
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	 ВТИзНабораЗаписей КАК ВТИзНабораЗаписей	
	|ПО  "; 
	Для Каждого Поле Из МассивПолей Цикл
		ТекстЗапроса = ТекстЗапроса + " 
		|	РегистрСведений." + Поле + " = " + "ВТИзНабораЗаписей." + Поле + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ РегистрСведений.НомерСтроки ЕСТЬ NULL ИЛИ ВТИзНабораЗаписей.НомерСтроки ЕСТЬ NULL"; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	// Если данные в базе и в записываемом наборе совпадают, результат будет пустой.
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
			
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
				
				ПутьКДанным =
					"	ВЫБОР 
					|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
					|			ТОГДА
					|				ВЫБОР
					|					КОГДА НЕ ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией ЕСТЬ NULL
					|						ТОГДА ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
					|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
					|				КОНЕЦ 
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
					|	КОНЕЦ";
				
			Иначе
				
				ПутьКДанным =
					"	ВЫБОР 
					|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
					|			ТОГДА ЕСТЬNULL(ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
					|	КОНЕЦ";
			
			КонецЕсли;
			
		Иначе
		
			ПутьКДанным =
				"	ВЫБОР 
				|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
				|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
				|	КОНЕЦ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ИмяФункциональнойОпцииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	ИмяФункциональнойОпции = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ИмяФункциональнойОпции = МодульГосударственнаяСлужба.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
	КонецЕсли;
	
	Возврат ИмяФункциональнойОпции;
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		И ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ИмяФункциональнойОпции = "ИспользуютсяРаботыСДосрочнойПенсией";
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ИсторияИспользованияШтатногоРасписания", "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
		
	Иначе
		ИмяФункциональнойОпции = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) Тогда
		ИмяФункциональнойОпции = КадровыйУчетБазовый.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
	КонецЕсли; 
	
	Возврат ИмяФункциональнойОпции;
	
КонецФункции

Процедура ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	
КонецПроцедуры

// Расширение базовых кадровых данных.

Функция ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеСотрудников";
	БазовыеКадровыеДанные = Новый Массив;
	
	Для каждого ИмяЗапрашиваемыхДанных Из КадровыеДанные Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеСведенийОТекущихТерриториях(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			БазовыеКадровыеДанные.Добавить(ИмяЗапрашиваемыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если БазовыеКадровыеДанные.Количество() > 0 Тогда
		
		ТекстыОписанияПолейБазовыхКадровыхДанных = КадровыйУчетБазовый.ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(БазовыеКадровыеДанные, ИсточникиДанных);
		Если ТекстыОписанияПолейБазовыхКадровыхДанных.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстыОписанияПолей, ТекстыОписанияПолейБазовыхКадровыхДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстыОписанияПолей;
	
КонецФункции

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных) Экспорт
	
	ДобавитьТекстЗапросаТекущихТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	
КонецПроцедуры

Функция ДобавитьПолеСведенийОТекущихТерриториях(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОТекущихТерриториях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ТекущиеТерриторииСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОТекущейТерритории(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОТекущихТерриториях(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ТекущаяТерритория");
	
КонецФункции

Функция ПутьКДаннымСведенийОТекущейТерритории(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяТерритория") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеТерриторииСотрудников.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ЧастиЗапроса = Новый Массив;
	
	Если ИсточникиДанных.Получить("ТекущиеТерриторииСотрудников") <> Неопределено Тогда
		
		СоедеинениеСТекущимиКадровымиДанными = 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТерриторииСотрудников.СрезПоследних(
			|			,
			|			Сотрудник В
			|				(ВЫБРАТЬ
			|					ТаблицаФильтра.Сотрудник
			|				ИЗ
			|					ВТТаблицаФильтр КАК ТаблицаФильтра)) КАК ТекущиеТерриторииСотрудников
			|	ПО ТаблицаОтборов.Сотрудник = ТекущиеТерриторииСотрудников.Сотрудник}";
		
		СоедеинениеСТекущимиКадровымиДанными = СтрЗаменить(СоедеинениеСТекущимиКадровымиДанными,
			"ВТТаблицаФильтр", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		СоедеинениеСТекущимиКадровымиДанными = СтрЗаменить(СоедеинениеСТекущимиКадровымиДанными,
			"ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ЧастиЗапроса.Добавить(СоедеинениеСТекущимиКадровымиДанными);
		
		ЧастиЗапроса.Вставить(0, Запрос.Текст);
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

// Расширение базовых кадровых данных.

Функция НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") 
		Или ИмяПоля = ВРег("ТекущийВидДоговора")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийВидДоговора") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))";
	Иначе
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущийФОТ")
		Или ИмяПоля = ВРег("ТекущаяНадбавка")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущийФОТ") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0)";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяНадбавка") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0)";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
		
	КонецЕсли;
		
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора")
		Или КадровыйУчетБазовый.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.СрочныйДоговор = ЛОЖЬ
			|		ТОГДА ДАТАВРЕМЯ(1,1,1)
			|		ИНАЧЕ ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора
			|	КОНЕЦ";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);

	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Номер,
		|	ПриемНаРаботу.Дата,
		|	ПриемНаРаботу.Организация,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.КоличествоСтавок,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.НачисленияУтверждены,
		|	ПриемНаРаботу.СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботу.ОтношениеКЕНВД,
		|	ПриемНаРаботу.СтатьяФинансирования,
		|	ПриемНаРаботу.ИсправленныйДокумент,
		|	ПриемНаРаботу.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботу.ВидТарифнойСтавки,
		|	ПриемНаРаботу.РазрядКатегория,
		|	ПриемНаРаботу.ВидДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.Грейд,
		|	ПриемНаРаботу.Территория,
		|	ПриемНаРаботу.БронированиеПозиции,
		|	ПриемНаРаботу.Ответственный,
		|	ПриемНаРаботу.Комментарий,
		|	ПриемНаРаботу.Проведен,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи
		|ПОМЕСТИТЬ ВТСведенийПриказовОПриеме
		|{ВЫБРАТЬ
		|	Подразделение.* КАК ПодразделениеПриПриеме,
		|	Организация.* КАК ОрганизацияПриПриеме,
		|	Должность.* КАК ДолжностьПриПриеме,
		|	ДолжностьПоШтатномуРасписанию.* КАК ДолжностьПоШтатномуРасписаниюПриПриеме,
		|	ГрафикРаботы.* КАК ГрафикРаботыПриПриеме}
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботу.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботу.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСписком.Ссылка,
		|	ПриемНаРаботуСписком.Ссылка.Номер,
		|	ПриемНаРаботуСписком.Ссылка.Дата,
		|	ПриемНаРаботуСписком.Ссылка.Организация,
		|	ПриемНаРаботуСписком.Подразделение,
		|	ПриемНаРаботуСписком.Сотрудник,
		|	ПриемНаРаботуСписком.ФизическоеЛицо,
		|	ПриемНаРаботуСписком.Должность,
		|	ПриемНаРаботуСписком.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботуСписком.ДатаПриема,
		|	ПриемНаРаботуСписком.КоличествоСтавок,
		|	ПриемНаРаботуСписком.ВидЗанятости,
		|	ПриемНаРаботуСписком.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботуСписком.ГрафикРаботы,
		|	ПриемНаРаботуСписком.СпособРасчетаАванса,
		|	ПриемНаРаботуСписком.Аванс,
		|	ПриемНаРаботуСписком.УсловияПриема,
		|	ПриемНаРаботуСписком.Ссылка.Руководитель,
		|	ПриемНаРаботуСписком.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСписком.Ссылка.НачисленияУтверждены,
		|	ПриемНаРаботуСписком.СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботуСписком.ОтношениеКЕНВД,
		|	ПриемНаРаботуСписком.СтатьяФинансирования,
		|	ПриемНаРаботуСписком.Ссылка.ИсправленныйДокумент,
		|	ПриемНаРаботуСписком.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботуСписком.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботуСписком.ВидТарифнойСтавки,
		|	ПриемНаРаботуСписком.РазрядКатегория,
		|	ПриемНаРаботуСписком.Ссылка.ВидДоговора,
		|	ПриемНаРаботуСписком.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСписком.ТрудовойДоговорДата,
		|	ПриемНаРаботуСписком.СрочныйДоговор,
		|	ПриемНаРаботуСписком.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСписком.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботуСписком.СрокЗаключенияДоговора,
		|	ПриемНаРаботуСписком.Ссылка.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботуСписком.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботуСписком.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботуСписком.ВидАктаГосоргана,
		|	ПриемНаРаботуСписком.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботуСписком.ИныеУсловияДоговора,
		|	ПриемНаРаботуСписком.Грейд,
		|	ПриемНаРаботуСписком.Территория,
		|	ПриемНаРаботуСписком.Ссылка.БронированиеПозиции,
		|	ПриемНаРаботуСписком.Ссылка.Ответственный,
		|	ПриемНаРаботуСписком.Ссылка.Комментарий,
		|	ПриемНаРаботуСписком.Ссылка.Проведен,
		|	ПриемНаРаботуСписком.РазрешениеНаРаботу,
		|	ПриемНаРаботуСписком.РазрешениеНаПроживание,
		|	ПриемНаРаботуСписком.УсловияОказанияМедпомощи
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботуСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботуСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОПриеме", ИмяВТСведенийПриказовОПриеме);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Номер,
		|	Увольнение.Дата,
		|	Увольнение.ПериодРегистрации,
		|	Увольнение.Организация,
		|	Увольнение.ДатаУвольнения,
		|	Увольнение.Сотрудник,
		|	Увольнение.ФизическоеЛицо,
		|	Увольнение.СтатьяТКРФ,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.ВыходноеПособие,
		|	Увольнение.ДнейЧасовВыходногоПособия,
		|	Увольнение.СуммированныйУчет,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска,
		|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска,
		|	Увольнение.ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Увольнение.ФиксПериодРасчетаСреднегоЗаработка,
		|	Увольнение.СреднийЗаработок,
		|	Увольнение.СреднийЗаработокПоРабочимДням,
		|	Увольнение.СреднийЗаработокВыходногоПособия,
		|	Увольнение.ПорядокВыплаты,
		|	Увольнение.ПланируемаяДатаВыплаты,
		|	Увольнение.ИсправленныйДокумент,
		|	Увольнение.ДокументРассчитан,
		|	Увольнение.Рассчитал,
		|	Увольнение.ПредставлениеПериода,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ГлавныйБухгалтер,
		|	Увольнение.Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы,
		|	Увольнение.Исполнитель,
		|	Увольнение.ДолжностьИсполнителя,
		|	Увольнение.РасчетДенежногоСодержания,
		|	Увольнение.СохраняемоеДенежноеСодержание,
		|	Увольнение.МесячноеДенежноеСодержание,
		|	Увольнение.КоличествоМесяцевВыплатыДенежногоСодержания,
		|	Увольнение.ВидРасчетаМесячноеДенежноеСодержание,
		|	Увольнение.ДолжностьЗамещаласьМенее12Месяцев,
		|	Увольнение.ВидДоговора,
		|	Увольнение.Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОбУвольнении
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО Увольнение.Сотрудник = КадроваяИстория.Сотрудник
		|			И Увольнение.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСписком.Ссылка,
		|	УвольнениеСписком.Ссылка.Номер,
		|	УвольнениеСписком.Ссылка.Дата,
		|	УвольнениеСписком.Ссылка.ПериодРегистрации,
		|	УвольнениеСписком.Ссылка.Организация,
		|	УвольнениеСписком.ДатаУвольнения,
		|	УвольнениеСписком.Сотрудник,
		|	УвольнениеСписком.ФизическоеЛицо,
		|	УвольнениеСписком.СтатьяТКРФ,
		|	УвольнениеСписком.ОснованиеУвольнения,
		|	УвольнениеСписком.ВыходноеПособие,
		|	УвольнениеСписком.ДнейЧасовВыходногоПособия,
		|	УвольнениеСписком.СуммированныйУчет,
		|	УвольнениеСписком.ДнейКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ПризнакКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.РабочийГодС,
		|	УвольнениеСписком.РабочийГодПо,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УвольнениеСписком.ФиксПериодРасчетаСреднегоЗаработка,
		|	УвольнениеСписком.СреднийЗаработок,
		|	УвольнениеСписком.СреднийЗаработокПоРабочимДням,
		|	УвольнениеСписком.СреднийЗаработокВыходногоПособия,
		|	УвольнениеСписком.Ссылка.ПорядокВыплаты,
		|	УвольнениеСписком.Ссылка.ПланируемаяДатаВыплаты,
		|	УвольнениеСписком.Ссылка.ИсправленныйДокумент,
		|	УвольнениеСписком.Ссылка.ДокументРассчитан,
		|	УвольнениеСписком.Ссылка.Рассчитал,
		|	УвольнениеСписком.Ссылка.ПредставлениеПериода,
		|	УвольнениеСписком.Ссылка.Руководитель,
		|	УвольнениеСписком.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСписком.Ссылка.ГлавныйБухгалтер,
		|	УвольнениеСписком.Ссылка.Бухгалтер,
		|	УвольнениеСписком.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.Исполнитель,
		|	УвольнениеСписком.Ссылка.ДолжностьИсполнителя,
		|	УвольнениеСписком.РасчетДенежногоСодержания,
		|	УвольнениеСписком.СохраняемоеДенежноеСодержание,
		|	УвольнениеСписком.МесячноеДенежноеСодержание,
		|	УвольнениеСписком.КоличествоМесяцевВыплатыДенежногоСодержания,
		|	УвольнениеСписком.ВидРасчетаМесячноеДенежноеСодержание,
		|	УвольнениеСписком.ДолжностьЗамещаласьМенее12Месяцев,
		|	УвольнениеСписком.Ссылка.ВидДоговора,
		|	УвольнениеСписком.Ссылка.Проведен
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО УвольнениеСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И УвольнениеСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОбУвольнении", ИмяВТСведенийПриказовОбУвольнении);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	НеобходимыСведения = ИмяПоля = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоля = ВРег("ТарифнаяСетка")
		Или ИмяПоля = ВРег("ТарифнаяСеткаНадбавки")
		Или ИмяПоля = ВРег("ВидДоговора")
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	Если Не НеобходимыСведения
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
		
		НеобходимыСведения = ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли; 
	
	Если Не НеобходимыСведения Тогда
		НеобходимыСведения = КадровыйУчетБазовый.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
	КонецЕсли; 
	
	Возврат НеобходимыСведения;
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоляВВерхнемРегистре = ВРег("ВидДоговора") Тогда
		
		ПутьКДанным = "	КадроваяИсторияСотрудников." + ИмяПоля;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСетка") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСеткаНадбавки") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании")
		И ПолеСведенийОРазрядахКатегориях(ИмяПоляВВерхнемРегистре) Тогда
			
		Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.ПериодЗаписи";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.Регистратор";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория";
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля) Тогда
			
		ПутьКДанным = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	ПоляДанных = ИсточникиДанных.Получить("КадроваяИсторияСотрудников");
	Если ПоляДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияКадровойИсторииСотрудников = "ВТСведенияКадровойИсторииСотрудников";
	КадровыйУчетБазовый.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТСведенияКадровойИсторииСотрудников);
	
	Если ИсточникиДанных.Получить("ИсторияИспользованияШтатногоРасписания") <> Неопределено Тогда
		
		ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписанияСотрудников";
		ЗапросВТ = УправлениеШтатнымРасписанием.ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяВТСведенияКадровойИсторииСотрудников, Истина, "ДолжностьПоШтатномуРасписанию,Период");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
		ТекстПоследнегоЗапроса = ТекстыЗапросов[ТекстыЗапросов.Количество() - 1];
		
		ТекстПоследнихЗапросов = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(ЗапросВТ.Текст, ТекстПоследнегоЗапроса);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, ТекстПоследнихЗапросов);
		
		ЧастиЗапроса = Новый Массив;
		ЧастиЗапроса.Добавить(Запрос.Текст);
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПозицииШтатногоРасписания + " КАК ИсторияИспользованияШтатногоРасписания
			|	ПО КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|		И КадроваяИсторияСотрудников.Период = ИсторияИспользованияШтатногоРасписания.Период}");
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТПозицииШтатногоРасписания);
		
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыСведенияОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОсновноеНачисление")
		Или ИмяПоля = ВРег("ПоказательТарифнойСтавки")
		Или КадровыйУчетБазовый.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОсновноеНачисление") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ОсновноеНачисление";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПоказательТарифнойСтавки") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ПоказательТарифнойСтавки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.Надбавка";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о территории

Функция ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОТерриторияхСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОТерриторияхСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТерриторияПериодЗаписи")
		Или ИмяПоля = ВРег("ТерриторияРегистратор")
		Или ИмяПоля = ВРег("Территория")
		Или ИмяПоля = Врег("ТерриторияВыполненияРаботВОрганизации");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТерриторияПериодЗаписи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ТерриторияРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТерриторииСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТерриторияПериодЗаписи") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТерриторияРегистратор") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Территория")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТерриторияВыполненияРаботВОрганизации") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Территория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОТерриторияхСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОТерриторияхСотрудников КАК СведенияОТерриторияхСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОТерриторияхСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОТерриторияхСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОТерриторияхСотрудников");
	
КонецПроцедуры

// Сведения о графиках работы

Функция ДобавитьПолеСведенийОГрафикахРаботы(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГрафикахРаботы(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации")
		Или ИмяПоля = ВРег("ГрафикРаботыРегистратор")
		Или ИмяПоля = ВРег("ГрафикРаботы")
		Или ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ГрафикРаботыРегистратор") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			ИначеЕсли ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ГрафикРаботы.СуммированныйУчетРабочегоВремени";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ГрафикРаботыСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыРегистратор") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботы") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ГрафикРаботы";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СуммированныйУчетРабочегоВремени") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).СуммированныйУчетРабочегоВремени";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОГрафикахРаботы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	ИмяВТСведенияОГрафикахРаботы = Неопределено;
	Если ОписательВременнойТаблицыОтборов.ПолучатьСведенияНаПериодНачалаУчета
		Или Не ОписательВременнойТаблицыОтборов.ИменаСозданныхВременныхТаблиц.Свойство("ВТСведенияОГрафикахРаботыДляКадровыхДанныхСотрудников", ИмяВТСведенияОГрафикахРаботы) Тогда
		
		ИмяВТСведенияОГрафикахРаботы = "ВТСведенияОГрафикахРаботыДляКадровыхДанныхСотрудников";
		ЗапросВТ = ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГрафикахРаботы);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
		ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОГрафикахРаботы + " КАК СведенияОГрафикахРаботы
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОГрафикахРаботы.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОГрафикахРаботы.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТСведенияОГрафикахРаботы);
	
КонецПроцедуры

// Сведения о доле неполного рабочего времени

Функция ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "КоличествоСтавок");
		
		ПутьКДанным = ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ДоляНеполногоРабочегоВремени");
		
КонецФункции

Функция ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДоляНеполногоРабочегоВремени") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели ЕСТЬ NULL
			|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
			|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
			|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
			|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
			|		ИНАЧЕ
			|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
			|				ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о разрядах, категориях сотрудников.

Функция ДобавитьПолеСведенийОРазрядахКатегориях(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОРазрядахКатегориях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОРазрядахКатегориях", Истина);
		
		ПутьКДанным = ПутьКСведениямОРазрядахКатегориях(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОРазрядахКатегориях(Знач ИмяПоля)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
		
		Возврат ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция ПолеСведенийОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации")
		Или ИмяПоля = ВРег("РазрядКатегорияРегистратор")
		Или ИмяПоля = ВРег("РазрядКатегория");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОРазрядахКатегориях(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("РазрядКатегорияРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.РазрядыКатегорииСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.РазрядКатегория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОРазрядахКатегориях") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, "ВТСведенияОРазрядахКатегорияхСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОРазрядахКатегорияхСотрудников КАК СведенияОРазрядахКатегориях
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОРазрядахКатегориях.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОРазрядахКатегориях.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОРазрядахКатегорияхСотрудников");
	
КонецПроцедуры

Функция ДобавитьПолеСведенийОПКУ(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПКУ(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПКУ", Истина);
		
		ПутьКДанным = ПутьКСведениямОПКУ(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПКУ(Знач ИмяПоля)
	
	Возврат ПолеСведенийОПКУ(ИмяПоля);
		
КонецФункции

Функция ПолеСведенийОПКУ(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПКУПериодРегистрации")
		Или ИмяПоля = ВРег("ПКУРегистратор")
		Или ИмяПоля = ВРег("ПКУ");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОПКУ(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПКУПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ПКУРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПКУСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОПКУ(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПКУПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУРегистратор") Тогда
		ПутьКДанным = "	СведенияОПКУ.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУ") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПКУ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПКУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, "ВТСведенияОПКУСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПКУСотрудников КАК СведенияОПКУ
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПКУ.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПКУ.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПКУСотрудников");
	
КонецПроцедуры

// Сведения о состоянии

Функция ДобавитьПолеСведенийОСостоянииСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянииСотрудников", Истина);
		
		ПутьКДанным = ПутьКСведениямОСостоянииСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СостояниеПериодРегистрации")
		Или ИмяПоля = ВРег("Состояние");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СостоянияСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СостояниеПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Состояние") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.Состояние";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСостоянииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСостоянииСотрудников КАК СведенияОСостоянииСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОСостоянииСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОСостоянииСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСостоянииСотрудников");
	
КонецПроцедуры

// Сведения о совокупных тарифных ставках

Функция ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСовокупныхТарифныхСтавках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСовокупныхТарифныхСтавках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаРегистратор")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавка")
		Или ИмяПоля = ВРег("ВидСовокупнойТарифнойСтавки");
		
КонецФункции

Функция ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаРегистратор") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.РегистраторСобытия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавка") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.СовокупнаяТарифнаяСтавка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидСовокупнойТарифнойСтавки") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОСовокупныхТарифныхСтавках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСовокупныхТарифныхСтавках КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОСовокупныхТарифныхСтавках");
	
КонецПроцедуры

// Сведения о порядке расчета стоимости единицы времени

Функция ДобавитьПолеСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПорядкеРасчетаСтоимостиЕдиницыВремени", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениПериодРегистрации")
		Или ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениРегистратор")
		Или ИмяПоля = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремени");
	
КонецФункции

Функция ПутьКДаннымСведенийОПорядкеРасчетаСтоимостиЕдиницыВремени(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениПериодРегистрации") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремениРегистратор") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПорядокРасчетаСтоимостиЕдиницыВремени") Тогда
		ПутьКДанным = "	ПорядкиРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОПорядкеРасчетаСтоимостиЕдиницыВремени");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени КАК ПорядкиРасчетаСтоимостиЕдиницыВремени
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПорядкиРасчетаСтоимостиЕдиницыВремени.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПорядкиРасчетаСтоимостиЕдиницыВремени.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПорядкеРасчетаСтоимостиЕдиницыВремени");
	
КонецПроцедуры

// Сведения о месте выплаты зарплаты.

Функция ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВыплатыЗарплаты(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВыплатыЗарплаты", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Организация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Подразделение");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущаяОрганизация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ТекущееПодразделение");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВыплатыЗарплаты(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладелецМестаВыплаты")
		Или ИмяПоля = ВРег("ВидМестаВыплаты")
		Или ИмяПоля = ВРег("МестоВыплаты");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладелецМестаВыплаты") Тогда
		ПутьКДанным = 
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Подразделение
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Сотрудник
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидМестаВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Вид
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Вид
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("МестоВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.МестоВыплаты
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
			|	КОНЕЦ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОМестеВыплатыЗарплаты");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросМестВыплаты =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Сотрудник,
		|	МестаВыплатыЗарплатыСотрудников.Вид,
		|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты
		|ПОМЕСТИТЬ ВТМестаВыплатыЗарплатыСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК ТаблицаОтборов
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|		ПО ТаблицаОтборов.Сотрудник = МестаВыплатыЗарплатыСотрудников.Сотрудник}";
		
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ВТСотрудникиПериоды", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ЗапросМестВыплаты, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросМестВыплаты);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|	ПО (ЕСТЬNULL(КадроваяИсторияСотрудников.Организация, ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация) = МестаВыплатыЗарплатыОрганизаций.Организация)}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
		|	ПО (ЕСТЬNULL(КадроваяИсторияСотрудников.Подразделение, ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение) = МестаВыплатыЗарплатыПодразделений.Подразделение)}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТМестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = МестаВыплатыЗарплатыСотрудников.Сотрудник}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТМестаВыплатыЗарплатыСотрудников");
	
КонецПроцедуры

// Сведения контракта, договора сотрудника.

Функция ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияКонтрактаДоговораСотрудника(ИмяПоля) Тогда
		
		Если ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ДатаПриема");
		КонецЕсли;
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийКонтрактаДоговораСотрудника(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПредставительНанимателя")
		Или ИмяПоля = ВРег("ДолжностьПредставителяНанимателя")
		Или ИмяПоля = ВРег("ОснованиеПредставителя")
		Или ИмяПоля = ВРег("ВидАктаГосоргана")
		Или ИмяПоля = ВРег("ДатаОкончания")
		Или ИмяПоля = ВРег("СрочныйДоговор")
		Или ИмяПоля = ВРег("СезонныйДоговор")
		Или ИмяПоля = ВРег("СрокЗаключенияДоговора")
		Или ИмяПоля = ВРег("ОборудованиеРабочегоМеста")
		Или ИмяПоля = ВРег("ИныеУсловияДоговора")
		Или ИмяПоля = ВРег("ОснованиеСрочногоДоговора")
		Или ИмяПоля = ВРег("КраткосрочныйТрудовойДоговор");
	
КонецФункции

Функция ПутьКДаннымСведенийКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОснованиеПредставителя") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ОснованиеПредставителяНанимателя";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КраткосрочныйТрудовойДоговор") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА СведенияКонтрактаДоговораСотрудника.СрочныйДоговор = ЛОЖЬ
			|			ТОГДА ЛОЖЬ
			|		КОГДА СведенияКонтрактаДоговораСотрудника.ДатаОкончания ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		КОГДА СведенияКонтрактаДоговораСотрудника.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ЛОЖЬ
			|		КОГДА РАЗНОСТЬДАТ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, СведенияКонтрактаДоговораСотрудника.ДатаОкончания, МЕСЯЦ) -
			|				ВЫБОР КОГДА ДЕНЬ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) > ДЕНЬ(СведенияКонтрактаДоговораСотрудника.ДатаОкончания)
			|					ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ < 2
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	Иначе
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияКонтрактаДоговораСотрудника.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияКонтрактаДоговораСотрудника.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияКонтрактаДоговораСотрудника");
	
КонецПроцедуры

// Основные данные контрактов, договоров сотрудников.

Функция ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ОсновныеДанныеКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоля = ВРег("НомерДоговораКонтракта")
		Или ИмяПоля = ВРег("ТрудовойДоговорДата")
		Или ИмяПоля = ВРег("ТрудовойДоговорНомер")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ПоступлениеНаСлужбуВпервые");
	
КонецФункции

Функция ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорДата") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.ДатаДоговораКонтракта";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("НомерДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорНомер") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.НомерДоговораКонтракта";
		
	Иначе
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("ОсновныеДанныеКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДанныеКонтрактовДоговоровСотрудников КАК ОсновныеДанныеКонтрактовДоговоровСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОсновныеДанныеКонтрактовДоговоровСотрудников");
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыСтажа.СоздатьВидыСтажаПоНастройкам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СостояниеВБраке) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.СостояниеВБраке.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СостояниеВБраке) 
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениЗнанияЯзыка)
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениРодстваФизическихЛиц)
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеЗвания)
		И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеСтепени) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.8";
		Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьКлассификаторы";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.Процедура = "КадровыйУчетРасширенный.НачальноеЗаполнениеВоинскихСоставовИЗваний";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.3";
	Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьФОИспользоватьКадровыйУчет";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.9";
	Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.9";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПеренестиДанныеФизическихЛицВРегистрыСведений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.Процедура = "Справочники.ВидыСтажа.ЗаполнитьКатегориюСтажа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.9";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбработатьСправочникВидыОбразованияФизическихЛиц";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ЯзыкиНародовМира) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.6.12";
		Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ЗаполнитьСправочникПоКлассификатору";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.6.16";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.7";
	Обработчик.Процедура = "СотрудникиФормы.ОбновитьРежимыРаботыФормы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.11";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьПолеОфицерскийСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.43";
	Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаменитьВидыОбразованияПредопределенными";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.53";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.3";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьТекущиеКадровыеДанныеНеОформленныхСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.9";
	Обработчик.Процедура = "РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера.СформироватьДвиженияПоПериодамДействияДоговоров";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.11";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДатуСобытияВДокументахРаботаСверхурочноРаботаВВыходныеИПраздничныеДни";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.10";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДатуСобытияВДокументахГрафикОтпусков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.2";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьФОТПлановыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.17";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьПризнакОсновногоРабочегоМеста";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.20";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьРеквизитДопУпорядочиванияРазрядовДолжностей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.15";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьНаименованияКраткиеДолжностей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.7";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьПоказателиДокументовНачальнаяШтатнаяРасстановка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.5";
	Обработчик.Процедура = "Справочники.ОбразованиеФизическихЛиц.ЗаполнитьОбразованияФизическихЛиц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.2";
	Обработчик.Процедура = "Справочники.ВидыСтажа.СоздатьВидСтажаМедицинский";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.4";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьОсновныхСотрудниковВДокументахПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.20";
	Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьОсновноеМестоРаботыДоговорниковГПХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.6";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьЗаписиРегистраСведенийТекущиеКадровыеДанныеПоДоговорникамГПХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.7";
	Обработчик.Процедура = "РегистрыСведений.СтроковыеСведенияФизическихЛиц.ОчиститьСтроковыеСведенияФизическихЛиц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.8";
	Обработчик.Процедура = "РегистрыСведений.СтроковыеСведенияФизическихЛиц.ПервоначальноеЗаполнениеСтроковыхСведенийФизическихЛиц";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор();
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый регистр сведений ""Строковые сведения физических лиц"", предназначенный для формирования отчетности.'");

	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.22.5";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаполнитьВидыОбразований";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.162";
	Обработчик.Процедура = "РегистрыСведений.РазрядыКатегорииСотрудников.ВосстановитьДатыВозвратныхСобытий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.68";
	Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьНастройкиКадровогоУчетаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.68";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ВключитьКонтрольУникальностиТабельныхНомеров";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.14";
	Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьПравилоФормированияПредставленияЭлементовСправочникаСотрудникиПоУмолчанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.18";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.28";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПеренестиСведенияОРодственникахИзРегистраВСправочник";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.32";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаполнитьВидыОбразований";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.34";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьРеестрКадровыхПриказов";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.34";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьРеестрОтпусков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.39";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьРеестрОтпусковПоБеременностиИРодам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.50";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьФизическоеЛицоВРеестрах";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ЯзыкиНародовМира) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.60";
		Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ОбновитьКлассификатор";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.61";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПересчитатьКоличествоДнейОтпускаПоУходуЗаРебенкомРеестрОтпусков";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.24.62";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаполнитьВидыОбразований";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.70";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДатуНомерПриказаВРеестреКадровыхПриказов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.84";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьРеестрОтпусковПоФактическимОтпускам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.103";
	Обработчик.Процедура = "РегистрыСведений.РолиФизическихЛиц.ЗаполнитьРольСотрудникФизическихЛиц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.6";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.25.7";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаполнитьВидыОбразований";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.15";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПрекратитьПлановыеНачисленияУволенныхСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.19";
	Обработчик.Процедура = "РегистрыСведений.РолиФизическихЛиц.ЗаполнитьИдентификаторыЗаписи";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.22";
	Обработчик.Процедура = "РегистрыСведений.ДанныеДляПодбораСотрудников.СформироватьПериодыДоНачалаРаботы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.30";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПерезаполнитьРеестрОтпусковСУчетомПеренесенныхКорректирующихЗаписей";  
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ЯзыкиНародовМира) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.26.12";
		Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ОбновитьСведенияОЯзыкеКашмири";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.19";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПеренестиФотографииВФизическиеЛицаПрисоединенныеФайлы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.25";
	Обработчик.Процедура = "КадровыйУчетРасширенный.СкорректироватьСтажиИсчисляемыеСДатыПриема";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.33";
	Обработчик.Процедура = "РегистрыСведений.ДанныеОбОплатеТрудаДляПодбораСотрудников.ПеренестиДанныеОбОплатеТруда";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.36";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.37";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПеренестиФайлыФизическихЛицВФизическиеЛицаПрисоединенныеФайлы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.39";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьОрганизациюВРеестреКадровыхПриказов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.42";
	Обработчик.Процедура = "Документы.ПриемНаРаботуСписком.ЗаполнитьИдентификаторыСтрокСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.42";
	Обработчик.Процедура = "Документы.КадровыйПереводСписком.ЗаполнитьИдентификаторыСтрокСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.42";
	Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьИдентификаторыСтрокСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.66";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьРеестрКадровыхПриказовПоПеремещениямВДругоеПодразделение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.18";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dbfda319-0946-4458-88a6-f764bc36db4c");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьГоловногоСотрудникаВКадроваяИсторияСотрудниковИспр";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Головной сотрудник"" регистра сведений ""Кадровая история сотрудников исправленный"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33685a16-1305-40b3-8a98-322a4cd511b0");
	Обработчик.Процедура = "ФизическиеЛицаЗарплатаКадрыРасширенный.ПеренестиФотографииФизическихЛицВРегистр";
	Обработчик.Комментарий = НСтр("ru = 'Перенос фотографий физических лиц из справочника в регистр.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.21";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПроверитьНеобходимостьВосстановленияФайловФизическихЛиц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.26";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ddef3af4-e468-433a-8c3c-803081d38bc7");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ПеренестиСостояниеПодработокВКадровуюИсториюСотрудников";
	Обработчик.Комментарий = НСтр("ru = 'Перенос подработок в регистр сведений ""Кадровая история сотрудников"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.41";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьПериодыСтажейФизическихЛицПоУмолчанию";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.55";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.ЗаполнитьВидыОбразований";
		Обработчик.ОбщиеДанные = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.55";
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.УдалитьДублиВидовДополнительногоОбразования";
		Обработчик.ОбщиеДанные = Истина;
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.55";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b5dc13df-e0fa-459f-9d78-dbce37cbdd4e");
	Обработчик.Процедура = "Справочники.ОбразованиеФизическихЛиц.ЗаполнитьВидОбразования";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Вид"" элементов справочника ""Образование физических лиц"" для дополнительного образования.
	|До завершения обработки рекомендуется воздержаться от формирования печатных форм со сведениями об образовании.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОтраслиНауки) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.56";
		Обработчик.Процедура = "Справочники.ОтраслиНауки.ОбновитьЭлементы";
		Обработчик.ОбщиеДанные = Истина;
		
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеСтепени) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.56";
		Обработчик.Процедура = "Справочники.УченыеСтепени.ОбновитьЭлементы";
		Обработчик.ОбщиеДанные = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.56";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("cabb2aea-dead-4a9c-a0dd-d6913566d5e2");
		Обработчик.Процедура = "РегистрыСведений.УченыеСтепениФизическихЛиц.ОбновитьРеквизитУченаяСтепень";
		Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Ученая степень"" регистра ""Ученые степени физических лиц"".
		|До завершения обработки рекомендуется воздержаться от формирования печатных форм со сведениями об образовании.'");
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.100";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2887372f-2b4e-4106-aaea-68781a4127f2");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьДатыПриемаУвольненияДляПодработок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.104";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a8f45d8f-8b02-4b7c-bdea-1c7df80da26c");
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьРолиВОрганизацииДляУволенныхСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.127";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("49e6a26d-9b11-4e76-9385-bb66fba08b9a");
	Обработчик.Процедура = "Документы.ОтпускБезСохраненияОплаты.ЗаполнитьДокументЗаполнения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2e99afd3-7f77-41cc-842f-5acfa79bd84a");
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ОбразованиеФизическихЛиц.УстановитьИспользованиеПараметровНаборовСвойств";
	
КонецПроцедуры

Процедура ЗаполнитьКлассификаторы() Экспорт
	
	Справочники.СостояниеВБраке.НачальноеЗаполнение();
	Справочники.СтепениЗнанияЯзыка.НачальноеЗаполнение();
	Справочники.СтепениРодстваФизическихЛиц.НачальноеЗаполнение();
	Справочники.УченыеЗвания.НачальноеЗаполнение();
	Справочники.ОтраслиНауки.НачальноеЗаполнение();
	Справочники.УченыеСтепени.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВоинскихСоставовИЗваний() Экспорт
	
	Справочники.СоставыВоеннослужащих.НачальноеЗаполнение();
	Справочники.ЗванияГражданскогоВоинскогоУчета.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура УстановитьФОИспользоватьКадровыйУчет() Экспорт
	
	Если Константы.ИспользоватьКадровыйУчет.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	
КонецПроцедуры

Процедура ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр() Экспорт
	
	Запрос = Новый Запрос;
	
	// Кадровые приказы
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|		ИНАЧЕ Сотрудники.УдалитьВидЗанятости
		|	КОНЕЦ КАК ВидЗанятости
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПриемНаРаботу.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ПриемНаРаботу.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|		ИНАЧЕ Сотрудники.УдалитьВидЗанятости
		|	КОНЕЦ
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО КадровыйПеревод.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	КадровыйПеревод.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидЗанятости = Выборка.ВидЗанятости;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Кадровая история сотрудников.
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КадроваяИсторияСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И КадроваяИсторияСотрудников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
			|	КадроваяИсторияСотрудников.Сотрудник,
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
			|	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация,
			|	КадроваяИсторияСотрудников.Подразделение,
			|	КадроваяИсторияСотрудников.ВидСобытия,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию,
			|	КадроваяИсторияСотрудников.КоличествоСтавок,
			|	КадроваяИсторияСотрудников.Должность,
			|	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
			|					ИНАЧЕ Сотрудники.УдалитьВидЗанятости
			|				КОНЕЦ
			|		ИНАЧЕ КадроваяИсторияСотрудников.ВидЗанятости
			|	КОНЕЦ КАК ВидЗанятости,
			|	КадроваяИсторияСотрудников.ДействуетДо,
			|	КадроваяИсторияСотрудников.ГоловнойСотрудник,
			|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник,
			|	КадроваяИсторияСотрудников.УдалитьОрганизацияПоОкончании,
			|	КадроваяИсторияСотрудников.УдалитьПодразделениеПоОкончании,
			|	КадроваяИсторияСотрудников.УдалитьДолжностьПоШтатномуРасписаниюПоОкончании,
			|	КадроваяИсторияСотрудников.УдалитьДолжностьПоОкончании,
			|	КадроваяИсторияСотрудников.УдалитьКоличествоСтавокПоОкончании,
			|	КадроваяИсторияСотрудников.УдалитьВидСобытияПоОкончании,
			|	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
			|				И КадроваяИсторияСотрудников.УдалитьВидЗанятостиПоОкончании = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
			|					ИНАЧЕ Сотрудники.УдалитьВидЗанятости
			|				КОНЕЦ
			|		ИНАЧЕ КадроваяИсторияСотрудников.УдалитьВидЗанятостиПоОкончании
			|	КОНЕЦ КАК УдалитьВидЗанятостиПоОкончании,
			|	КадроваяИсторияСотрудников.ПервичныйДокумент
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО КадроваяИсторияСотрудников.Сотрудник = Сотрудники.Ссылка
			|ИТОГИ ПО
			|	Регистратор";
			
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			ВыборкаЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗаписей.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаЗаписей);
			КонецЦикла;
				
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиДанныеФизическихЛицВРегистрыСведений() Экспорт
	
	// Награды
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НаградыФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьНаграды.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьНаграды.Награда,
			|	ФизическиеЛицаУдалитьНаграды.НомерПриказа,
			|	ФизическиеЛицаУдалитьНаграды.ДатаПриказа,
			|	ФизическиеЛицаУдалитьНаграды.ЧейПриказ КАК НаименованиеПриказа
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьНаграды КАК ФизическиеЛицаУдалитьНаграды";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.НаградыФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Состав семьи
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьСоставыСемейФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.УдалитьСоставыСемейФизическихЛиц КАК УдалитьСоставыСемейФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьСоставСемьи.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьСоставСемьи.СтепеньРодства,
			|	ФизическиеЛицаУдалитьСоставСемьи.Имя КАК ФИО,
			|	ФизическиеЛицаУдалитьСоставСемьи.ДатаРождения
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьСоставСемьи КАК ФизическиеЛицаУдалитьСоставСемьи";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.УдалитьСоставыСемейФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Трудовая деятельность
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельностьФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьТрудоваяДеятельность.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьТрудоваяДеятельность.Организация,
			|	ФизическиеЛицаУдалитьТрудоваяДеятельность.ДатаНачала,
			|	ФизическиеЛицаУдалитьТрудоваяДеятельность.ДатаОкончания,
			|	ФизическиеЛицаУдалитьТрудоваяДеятельность.Должность
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьТрудоваяДеятельность КАК ФизическиеЛицаУдалитьТрудоваяДеятельность";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Стажи
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтажиФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.УстановитьПараметр("ПериодУчетаСтажей", ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ПериодУчетаСтажей Как Период,
			|	ФизическиеЛицаУдалитьСтажи.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьСтажи.ВидСтажа,
			|	ФизическиеЛицаУдалитьСтажи.ДатаОтсчета,
			|	ФизическиеЛицаУдалитьСтажи.РазмерМесяцев,
			|	ФизическиеЛицаУдалитьСтажи.РазмерДней
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьСтажи КАК ФизическиеЛицаУдалитьСтажи";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Профессии
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофессииФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ПрофессииФизическихЛиц КАК ПрофессииФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаПрофессии.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаПрофессии.Профессия
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьПрофессии КАК ФизическиеЛицаПрофессии";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.ПрофессииФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Знание языков
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗнаниеЯзыковФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ЗнаниеЯзыковФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьЗнаниеЯзыков.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьЗнаниеЯзыков.Язык,
			|	ФизическиеЛицаУдалитьЗнаниеЯзыков.СтепеньЗнанияЯзыка
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьЗнаниеЯзыков КАК ФизическиеЛицаУдалитьЗнаниеЯзыков";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Образование
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбразованиеФЛ.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьОбразование.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьОбразование.ВидОбразования,
			|	ФизическиеЛицаУдалитьОбразование.УчебноеЗаведение,
			|	ФизическиеЛицаУдалитьОбразование.Специальность,
			|	ФизическиеЛицаУдалитьОбразование.Диплом,
			|	ФизическиеЛицаУдалитьОбразование.ГодОкончания,
			|	ФизическиеЛицаУдалитьОбразование.Квалификация
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьОбразование КАК ФизическиеЛицаУдалитьОбразование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.УдалитьОбразованиеФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Ученые степени
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УченыеСтепениФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.УченыеСтепениФизическихЛиц КАК УченыеСтепениФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьУченыеСтепени.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьУченыеСтепени.УченаяСтепень,
			|	ФизическиеЛицаУдалитьУченыеСтепени.ДатаПрисужденияУченойСтепени,
			|	ФизическиеЛицаУдалитьУченыеСтепени.ОтрасльНауки КАК УдалитьОтрасльНауки,
			|	ФизическиеЛицаУдалитьУченыеСтепени.ДиссертационныйСовет,
			|	ФизическиеЛицаУдалитьУченыеСтепени.ДипломСерияНомер,
			|	ФизическиеЛицаУдалитьУченыеСтепени.ДипломВыданОрганизация
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьУченыеСтепени КАК ФизическиеЛицаУдалитьУченыеСтепени";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.УченыеСтепениФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 

	// Ученые звания
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УченыеЗванияФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.УченыеЗванияФизическихЛиц КАК УченыеЗванияФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаУдалитьУченыеЗвания.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛицаУдалитьУченыеЗвания.УченоеЗвание,
			|	ФизическиеЛицаУдалитьУченыеЗвания.ДатаПрисвоенияУченогоЗвания,
			|	ФизическиеЛицаУдалитьУченыеЗвания.АттестатСерия,
			|	ФизическиеЛицаУдалитьУченыеЗвания.АттестатНомер,
			|	ФизическиеЛицаУдалитьУченыеЗвания.АттестатВыданОрганизация,
			|	ФизическиеЛицаУдалитьУченыеЗвания.НаучнаяСпециальность
			|ИЗ
			|	Справочник.ФизическиеЛица.УдалитьУченыеЗвания КАК ФизическиеЛицаУдалитьУченыеЗвания";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.УченыеЗванияФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Параметры исчисления процента северной надбавки.
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
			|	ФизическиеЛица.УдалитьПроцентСевернойНадбавкиФизическогоЛица КАК ПроцентСевернойНадбавки,
			|	ФизическиеЛица.УдалитьПроцентСевернойНадбавкиФизическогоЛицаИзменяется КАК ПроцентСевернойНадбавкиИзменяется,
			|	ФизическиеЛица.УдалитьПорядокИсчисленияПроцентаСевернойНадбавки КАК ПорядокИсчисленияПроцентаСевернойНадбавки
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Набор = РегистрыСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСправочникВидыОбразованияФизическихЛиц() Экспорт
	
	СписокВидовОбразования = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыОбразованияФизическихЛиц.Ссылка
		|ИЗ
		|	Справочник.ВидыОбразованияФизическихЛиц КАК ВидыОбразованияФизическихЛиц
		|ГДЕ
		|	ВидыОбразованияФизическихЛиц.Код = ""19""
		|	И НЕ ВидыОбразованияФизическихЛиц.Предопределенный";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСправочника.Код = "99";
			ОбъектСправочника.ПометкаУдаления = Истина;
			ОбъектСправочника.ОбменДанными.Загрузка = Истина;
			ОбъектСправочника.Записать();
			
			СписокВидовОбразования.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	СписокВидовОбразования.Добавить(Справочники.ВидыОбразованияФизическихЛиц.АспирантураОрдинатураАдъюнктура);
	СписокВидовОбразования.Добавить(Справочники.ВидыОбразованияФизическихЛиц.Докторантура);
	
	Запрос.УстановитьПараметр("СписокВидовОбразования", СписокВидовОбразования);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбразованиеФЛ.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ
		|ГДЕ
		|	ОбразованиеФЛ.ВидОбразования В(&СписокВидовОбразования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФЛ.НомерПоПорядку,
		|	ОбразованиеФЛ.ВидОбразования,
		|	ОбразованиеФЛ.УчебноеЗаведение,
		|	ОбразованиеФЛ.Специальность,
		|	ОбразованиеФЛ.Диплом,
		|	ОбразованиеФЛ.ГодОкончания,
		|	ОбразованиеФЛ.Квалификация
		|ИЗ
		|	ВТФизическиеЛица КАК ВТФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ
		|		ПО ВТФизическиеЛица.ФизическоеЛицо = ОбразованиеФЛ.ФизическоеЛицо
		|ИТОГИ ПО
		|	ФизическоеЛицо";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоФизлицам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоФизлицам.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.УдалитьОбразованиеФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВыборкаПоФизлицам.ФизическоеЛицо);
			
			ВыборкаПоОбразованиям = ВыборкаПоФизлицам.Выбрать();
			Пока ВыборкаПоОбразованиям.Следующий() Цикл
				
				Запись = НаборЗаписей.Добавить();
			
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоОбразованиям);
				
				Если СписокВидовОбразования.Найти(ВыборкаПоОбразованиям.ВидОбразования) <> Неопределено Тогда
					Запись.ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации;
					Запись.ВидПослевузовскогоОбразования = ВыборкаПоОбразованиям.ВидОбразования;
				КонецЕсли; 
			
				Запись.ФизическоеЛицо = ВыборкаПоОбразованиям.ФизическоеЛицо;
			
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистокСообщенияДляВоенкомата.Ссылка
		|ИЗ
		|	Документ.ЛистокСообщенияДляВоенкомата КАК ЛистокСообщенияДляВоенкомата
		|ГДЕ
		|	ЛистокСообщенияДляВоенкомата.Образование В(&СписокВидовОбразования)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДокумента.Образование = Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации;
			ОбъектДокумента.ОбменДанными.Загрузка = Истина;
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьПолеОфицерскийСостав() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставыВоеннослужащих.Ссылка
	               |ИЗ
	               |	Справочник.СоставыВоеннослужащих КАК СоставыВоеннослужащих
	               |ГДЕ
	               |	СоставыВоеннослужащих.Наименование ПОДОБНО ""%офицер%""
	               |	И НЕ СоставыВоеннослужащих.ОфицерскийСостав";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.Следующий() Цикл
		
		СоставОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СоставОбъект.ОфицерскийСостав = Истина;
		СоставОбъект.ОбменДанными.Загрузка = Истина;
		СоставОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТекущиеКадровыеДанныеНеОформленныхСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоговорникиГПХ
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорникиГПХ.Сотрудник
		|ИЗ
		|	ВТДоговорникиГПХ КАК ДоговорникиГПХ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ДоговорникиГПХ.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И ДоговорникиГПХ.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	// ТелефонМобильныйФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	КадровыйУчетБазовый.ОбновитьВидыКонтактнойИнформацииПоПорядку(2);
	КадровыйУчетБазовый.ОбновитьПорядкиКонтактнойИнформации();
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц) Экспорт
	
	КадровыйУчетБазовый.ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Плановые удержания
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПлановыеУдержания.*
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПлановыеУдержания.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
	// Применение плановых начислений.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПрименениеПлановыхНачислений.*
		|ИЗ
		|	РегистрСведений.ПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПрименениеПлановыхНачислений.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПрименениеПлановыхНачислений.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДатуСобытияВДокументахРаботаСверхурочноРаботаВВыходныеИПраздничныеДни() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботаСверхурочно.Ссылка,
	|	МИНИМУМ(ЕСТЬNULL(РаботаСверхурочноСотрудники.Дата, РаботаСверхурочно.ПериодРегистрации)) КАК ДатаНачалаСобытия
	|ИЗ
	|	Документ.РаботаСверхурочно КАК РаботаСверхурочно
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаботаСверхурочно.Сотрудники КАК РаботаСверхурочноСотрудники
	|		ПО (РаботаСверхурочноСотрудники.Ссылка = РаботаСверхурочно.Ссылка)
	|ГДЕ
	|	РаботаСверхурочно.ДатаНачалаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботаСверхурочно.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботаВВыходныеИПраздничныеДни.Ссылка,
	|	МИНИМУМ(ЕСТЬNULL(РаботаВВыходныеИПраздничныеДниСотрудники.Дата, РаботаВВыходныеИПраздничныеДни.ПериодРегистрации))
	|ИЗ
	|	Документ.РаботаВВыходныеИПраздничныеДни КАК РаботаВВыходныеИПраздничныеДни
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаботаВВыходныеИПраздничныеДни.Сотрудники КАК РаботаВВыходныеИПраздничныеДниСотрудники
	|		ПО (РаботаВВыходныеИПраздничныеДниСотрудники.Ссылка = РаботаВВыходныеИПраздничныеДни.Ссылка)
	|ГДЕ
	|	РаботаВВыходныеИПраздничныеДни.ДатаНачалаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботаВВыходныеИПраздничныеДни.Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДатуСобытияВДокументахГрафикОтпусков() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикОтпусков.Ссылка,
	|	ГрафикОтпусков.Дата КАК ДатаСобытия
	|ИЗ
	|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	|ГДЕ
	|	ГрафикОтпусков.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФОТПлановыхНачислений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Регистратор,
		|	СУММА(ПлановыеНачисления.Размер) КАК Размер
		|ПОМЕСТИТЬ ВТРегистраторыПлановыхНачислений
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	(ПлановыеНачисления.Регистратор ССЫЛКА Документ.ВозвратИзОтпускаПоУходуЗаРебенком
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.ИзменениеОплатыТруда
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.ИндексацияЗаработка
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.КадровыйПеревод
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
		|			ИЛИ ПлановыеНачисления.Регистратор ССЫЛКА Документ.ПриемНаРаботу)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистраторыПлановыхНачислений.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыПлановыхНачисленийСНезаполненнымФОТ
		|ИЗ
		|	ВТРегистраторыПлановыхНачислений КАК РегистраторыПлановыхНачислений
		|ГДЕ
		|	РегистраторыПлановыхНачислений.Размер = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистраторыПлановыхНачисленийСНезаполненнымФОТ.Регистратор
		|ИЗ
		|	ВТРегистраторыПлановыхНачисленийСНезаполненнымФОТ КАК РегистраторыПлановыхНачисленийСНезаполненнымФОТ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			ТипРегистратора = ТипЗнч(Выборка.Регистратор);
			Если ТипРегистратора = Тип("ДокументСсылка.ИндексацияЗаработка") Тогда
				
				РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(
					ДокументОбъект.Движения.ПлановыеНачисления,
					ДокументОбъект.НачисленияСотрудников,
					"Сотрудник");
					
			ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратИзОтпускаПоУходуЗаРебенком")
				Или ТипРегистратора = Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком")
				Или ТипРегистратора = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				
				РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(
					ДокументОбъект.Движения.ПлановыеНачисления,
					ДокументОбъект.Начисления,
					"РабочееМесто");
					
			Иначе
				
				РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(
					ДокументОбъект.Движения.ПлановыеНачисления,
					ДокументОбъект.Начисления);
					
			КонецЕсли;
				
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОсновногоРабочегоМеста() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации) КАК ОсновноеРабочееМестоВОрганизации
		|ПОМЕСТИТЬ ВТФизическиеЛицаСПризнакомОсновногоРабочегоМеста
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаСПризнакомОсновногоРабочегоМеста.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛицаСПризнакомОсновногоРабочегоМеста КАК ФизическиеЛицаСПризнакомОсновногоРабочегоМеста
		|ГДЕ
		|	ФизическиеЛицаСПризнакомОсновногоРабочегоМеста.ОсновноеРабочееМестоВОрганизации = ЛОЖЬ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			Набор.Прочитать();
			
			РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.УстановитьОсновноеРабочееМестоВОрганизации(Набор);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДопУпорядочиванияРазрядовДолжностей() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РазрядыКатегорииДолжностей.Ссылка
	               |ИЗ
	               |	Справочник.РазрядыКатегорииДолжностей КАК РазрядыКатегорииДолжностей
	               |ГДЕ
	               |	РазрядыКатегорииДолжностей.РеквизитДопУпорядочивания = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РазрядыКатегорииДолжностей.Наименование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(РазрядыКатегорииДолжностей.РеквизитДопУпорядочивания) КАК ТекущееМаксимальноеЗначение
	               |ИЗ
	               |	Справочник.РазрядыКатегорииДолжностей КАК РазрядыКатегорииДолжностей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ТекущееМаксимальноеЗначение = Выборка.ТекущееМаксимальноеЗначение;
	
	Сч = 1;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = ТекущееМаксимальноеЗначение + Сч;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиДокументовНачальнаяШтатнаяРасстановка() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановкаПоказатели.Ссылка
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Показатели КАК НачальнаяШтатнаяРасстановкаПоказатели
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаПоказатели.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для каждого СтрокаПоказателей Из ДокументОбъект.Показатели Цикл
				
				Если ЗначениеЗаполнено(СтрокаПоказателей.Сотрудник) Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокиНачислений = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета));
				Если СтрокиНачислений.Количество() > 0 Тогда
					СтрокаПоказателей.Сотрудник = СтрокиНачислений[0].Сотрудник;
				КонецЕсли; 
				
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьОсновныхСотрудниковВДокументахПоУходуЗаРебенком() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ОтпускПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаСведений
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник,
		|	ВЫБОР
		|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенком.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ОтпускПоУходуЗаРебенком.ПустаяСсылка)
		|			ТОГДА ВозвратИзОтпускаПоУходуЗаРебенком.ДокументОснование.ДатаНачала
		|		ИНАЧЕ ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ОсновнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Организация,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	ВЫБОР
		|		КОГДА ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ОтпускПоУходуЗаРебенком.ПустаяСсылка)
		|			ТОГДА ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДокументОснование.ДатаНачала
		|		ИНАЧЕ ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДатаИзменения
		|	КОНЕЦ
		|ИЗ
		|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ОсновнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Ссылка
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Регистраторы.Ссылка,
			|	Регистраторы.Организация КАК Организация,
			|	Регистраторы.ФизическоеЛицо,
			|	Регистраторы.ДатаСведений КАК ДатаСведений
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|ИТОГИ ПО
			|	Организация,
			|	ДатаСведений";
			
		ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОрганизациям.Следующий() Цикл
			
			ВыборкаПоДатам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДатам.Следующий() Цикл
				
				ФизическиеЛица = Новый Массив;
				Выборка = ВыборкаПоДатам.Выбрать();
				Пока Выборка.Следующий() Цикл
					ФизическиеЛица.Добавить(Выборка.ФизическоеЛицо);
				КонецЦикла;
				
				ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
					ФизическиеЛица,
					Ложь,
					ВыборкаПоДатам.Организация,
					ВыборкаПоДатам.ДатаСведений);
					
				ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				ПараметрыПолученияСотрудников.Организация = ВыборкаПоДатам.Организация;
				ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
				ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
				ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
				
				ВсеСотрудникиФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
					
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					
					СтрокиОсновныхСотрудников = ОсновныеСотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо));
					Если СтрокиОсновныхСотрудников.Количество() > 0 Тогда
						ОсновнойСотрудник = СтрокиОсновныхСотрудников[0].Сотрудник;
					Иначе
						СтрокиВсехСотрудников = ВсеСотрудникиФизическихЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо));
						Если СтрокиВсехСотрудников.Количество() > 0 Тогда
							ОсновнойСотрудник = СтрокиВсехСотрудников[0].Сотрудник;
						КонецЕсли;
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(ОсновнойСотрудник) Тогда
						
						ДокументОтпускаПоУходу = Выборка.Ссылка.ПолучитьОбъект();
						ДокументОтпускаПоУходу.ОсновнойСотрудник = ОсновнойСотрудник;
						
						ДокументОтпускаПоУходу.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
						ДокументОтпускаПоУходу.ОбменДанными.Загрузка = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОтпускаПоУходу);
						
					КонецЕсли; 
						
				КонецЦикла; 
				
			КонецЦикла; 

		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьОсновноеМестоРаботыДоговорниковГПХ() Экспорт
	
	// Сбор информации о всех работниках по договорам ГПХ.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновляемыеСотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(ОбновляемыеСотрудники);
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОбновитьЗаписиРегистраСведенийТекущиеКадровыеДанныеПоДоговорникамГПХ() Экспорт
	

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка
		|ПОМЕСТИТЬ ВТСотрудникиБезДоговоров
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоговоров.Ссылка
		|ИЗ
		|	ВТСотрудникиБезДоговоров КАК СотрудникиБезДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО СотрудникиБезДоговоров.Ссылка = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СотрудникиКОбновлению = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиКОбновлению);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПодбораСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрСведений.Сотрудник
		|ИЗ
		|	РегистрСведений.УдалитьДанныеДляПодбораСотрудников КАК РегистрСведений";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.УдалитьДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрСведений.Сотрудник
		|ИЗ
		|	РегистрСведений.УдалитьДанныеДляПодбораДоговорниковГПХ КАК РегистрСведений";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.УдалитьДанныеДляПодбораДоговорниковГПХ.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(Сотрудники, Истина);
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(Сотрудники, Истина);
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.Наименование,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ГоловнойСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|		ПО Сотрудники.Ссылка = ДанныеДляПодбораСотрудников.Сотрудник
		|			И (НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ)
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных = Новый Структура("Ссылка,Наименование,ФизическоеЛицо,ГоловнаяОрганизация,ГоловнойСотрудник");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(СтруктураДанных);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьКонтрольУникальностиТабельныхНомеров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.*
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Не Выборка.КонтролироватьУникальностьТабельныхНомеров Тогда
			
			НаборЗаписей = РегистрыСведений.НастройкиКадровогоУчета.СоздатьНаборЗаписей();
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.КонтролироватьУникальностьТабельныхНомеров = Истина;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиКадровогоУчетаПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.*
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запись = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		Запись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОтбораПоКатегорииСтажа(КатегорияСтажа) Экспорт 
	
	Если КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Общий") Тогда 
		Возврат "ОбщийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Северный") Тогда 
		Возврат "СеверныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛет") Тогда 
		Возврат "СтажНаНадбавкуЗаВыслугуЛетМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Непрерывный") Тогда 
		Возврат "НепрерывныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ОбщийНаучноПедагогический") Тогда 
		Возврат "ОбщийНаучноПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Педагогический") Тогда 
		Возврат "ПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Прочее") Тогда 
		Возврат "ПрочийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Страховой") Тогда 
		Возврат "СтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.РасширенныйСтраховой") Тогда 
		Возврат "РасширенныйСтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе") Тогда 
		Возврат "ВыслугаЛетНаГосударственнойСлужбеМесяцев";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Процедура УстановитьПравилоФормированияПредставленияЭлементовСправочникаСотрудникиПоУмолчанию() Экспорт
	
	НастройкиУчета = НастройкиКадровогоУчета();
	Если Не ЗначениеЗаполнено(НастройкиУчета.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники) Тогда
		
		НастройкиПоУмолчанию = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НастройкиУчета, НастройкиПоУмолчанию, "ПравилоФормированияПредставленияЭлементовСправочникаСотрудники");
		
		НаборЗаписей = РегистрыСведений.НастройкиКадровогоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, НастройкиУчета);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьРеестрКадровыхПриказов() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
	// Прием
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботу.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ПриемНаРаботу.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	ПриемНаРаботу.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ПриемНаРаботу.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	ПриемНаРаботу.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Ссылка КАК ДокументОснование,
	|	ПриемНаРаботу.Номер КАК НомерПриказа,
	|	ПриемНаРаботу.Дата КАК ДатаПриказа,
	|	ПриемНаРаботу.Подразделение,
	|	ПриемНаРаботу.Должность,
	|	ПриемНаРаботу.ВидДоговора,
	|	ПриемНаРаботу.ДатаПриема КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	|	ПриемНаРаботу.РазрядКатегория КАК Разряд,
	|	ПриемНаРаботу.Показатели.(
	|		Ссылка,
	|		НомерСтроки,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Показатель,
	|		Значение
	|	),
	|	ПриемНаРаботу.Начисления.(
	|		Ссылка,
	|		НомерСтроки,
	|		Начисление,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Размер
	|	)
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО ПриемНаРаботу.Ссылка = ДокументыКОбработке.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = 1;
		НоваяЗапись.ТарифнаяСтавкаНадбавка = ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить());
		
		НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуСписком.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ПриемНаРаботуСписком КАК ПриемНаРаботуСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ПриемНаРаботуСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	ПриемНаРаботуСписком.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботуСписком.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуСписком КАК ПриемНаРаботуСписком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ПриемНаРаботуСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	ПриемНаРаботуСписком.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Регистратор,
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Ссылка КАК ДокументОснование,
	|	ПриемНаРаботу.Подразделение,
	|	ПриемНаРаботу.Должность,
	|	ПриемНаРаботу.ДатаПриема КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
	|	ПриемНаРаботу.РазрядКатегория КАК Разряд,
	|	ПриемНаРаботу.Ссылка.Номер КАК НомерПриказа,
	|	ПриемНаРаботу.Ссылка.Дата КАК ДатаПриказа,
	|	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
	|	ПриемНаРаботу.НомерСтроки КАК Номер
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО ПриемНаРаботу.Ссылка = ДокументыКОбработке.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуСпискомНачисления.Ссылка КАК Регистратор,
	|	ПриемНаРаботуСпискомНачисления.НомерСтроки,
	|	ПриемНаРаботуСпискомСотрудники.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуСпискомНачисления.Начисление,
	|	ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиВидаРасчета,
	|	ПриемНаРаботуСпискомНачисления.Размер
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Начисления КАК ПриемНаРаботуСпискомНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
	|		ПО ПриемНаРаботуСпискомНачисления.Ссылка = ПриемНаРаботуСпискомСотрудники.Ссылка
	|			И ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиСотрудника = ПриемНаРаботуСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО ПриемНаРаботуСпискомНачисления.Ссылка = ВТДокументы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуСпискомПоказатели.Ссылка КАК Регистратор,
	|	ПриемНаРаботуСпискомПоказатели.НомерСтроки,
	|	ПриемНаРаботуСпискомСотрудники.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботуСпискомПоказатели.ИдентификаторСтрокиВидаРасчета,
	|	ПриемНаРаботуСпискомПоказатели.Показатель,
	|	ПриемНаРаботуСпискомПоказатели.Значение
	|ИЗ
	|	Документ.ПриемНаРаботуСписком.Показатели КАК ПриемНаРаботуСпискомПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
	|		ПО ПриемНаРаботуСпискомПоказатели.Ссылка = ПриемНаРаботуСпискомСотрудники.Ссылка
	|			И ПриемНаРаботуСпискомПоказатели.ИдентификаторСтрокиСотрудника = ПриемНаРаботуСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО ПриемНаРаботуСпискомПоказатели.Ссылка = ВТДокументы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Сотрудник";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Начисления = Результат[2].Выгрузить();
	Показатели = Результат[3].Выгрузить();
	
	Отбор = Новый Структура("Регистратор,Сотрудник");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
						
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Основание = Основание;
			
			Отбор.Регистратор = Выборка.Регистратор;
			Отбор.Сотрудник = Выборка.Сотрудник;
			
			СтрокиНачислений  = Начисления.Скопировать(Отбор);
			СтрокиПоказателей = Показатели.Скопировать(Отбор);
			
			НоваяЗапись.ТарифнаяСтавкаНадбавка = ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей);
			
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;

	// Перемещение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПеревод.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПеревод.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	КадровыйПеревод.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПеревод.Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПеревод.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	КадровыйПеревод.Проведен
	|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПеревод.Ссылка КАК Регистратор,
	|	КадровыйПеревод.Сотрудник,
	|	КадровыйПеревод.Ссылка КАК ДокументОснование,
	|	КадровыйПеревод.Номер КАК НомерПриказа,
	|	КадровыйПеревод.Дата КАК ДатаПриказа,
	|	КадровыйПеревод.Подразделение,
	|	КадровыйПеревод.Должность,
	|	КадровыйПеревод.ВидДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	КадровыйПеревод.ДатаНачала КАК Дата,
	|	КадровыйПеревод.РазрядКатегория КАК Разряд,
	|	КадровыйПеревод.СменаВидаДоговора,
	|	КадровыйПеревод.ДатаОкончания,
	|	КадровыйПеревод.Показатели.(
	|		Ссылка,
	|		НомерСтроки,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Показатель,
	|		Значение
	|	),
	|	КадровыйПеревод.Начисления.(
	|		Ссылка,
	|		НомерСтроки,
	|		Начисление,
	|		ИдентификаторСтрокиВидаРасчета,
	|		Размер,
	|		Действие
	|	)
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО КадровыйПеревод.Ссылка = ДокументыКОбработке.Ссылка";
	
	Номер = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СменаВидаДоговора Тогда

			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НоваяЗапись = НаборЗаписей.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;	  
			
			НоваяЗапись.Дата 		= НачалоДня(Выборка.Дата) - 1;
			
			НоваяЗапись.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Увольнение;
			
			НоваяЗапись.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			НоваяЗапись.Должность = Справочники.Должности.ПустаяСсылка();

			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.Дата);
            				
			Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
				НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			КонецЕсли;

			НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
						
			Номер = Номер + 1;

			НоваяЗапись = НаборЗаписей.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;	  
			
			НоваяЗапись.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Прием;
			
			НоваяЗапись.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить(), Истина);	
								
			НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
			
			Номер = Номер + 1;

			НаборЗаписей.Записать();
			НаборЗаписей.Очистить(); 					
			
		Иначе
			
			Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
			
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = 1;
			НоваяЗапись.Основание = Основание;
			НоваяЗапись.ТарифнаяСтавкаНадбавка = ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить(), Истина);
			  			
			Номер = Номер + 1;
			
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
					
				КадровыйУчетРасширенный.ДополнитьТаблицуВозвратнымиДанными(Выборка.Регистратор, Выборка.Сотрудник, Выборка.ДатаОкончания, НаборЗаписей, Номер, Основание);
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПереводСписком.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.КадровыйПереводСписком КАК КадровыйПереводСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПереводСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	КадровыйПереводСписком.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыйПереводСписком.Ссылка
	|ИЗ
	|	Документ.КадровыйПереводСписком КАК КадровыйПереводСписком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО КадровыйПереводСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	КадровыйПереводСписком.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПереводСпискомСотрудники.Ссылка КАК Регистратор,
	|	КадровыйПереводСпискомСотрудники.Сотрудник,
	|	КадровыйПереводСпискомСотрудники.Ссылка КАК ДокументОснование,
	|	КадровыйПереводСпискомСотрудники.Подразделение,
	|	КадровыйПереводСпискомСотрудники.Должность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	КадровыйПереводСпискомСотрудники.РазрядКатегория КАК Разряд,
	|	КадровыйПереводСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
	|	КадровыйПереводСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
	|	КадровыйПереводСпискомСотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
	|	КадровыйПереводСпискомСотрудники.НомерСтроки КАК Номер,
	|	КадровыйПереводСпискомСотрудники.ДатаНачала КАК Дата,
	|	КадровыйПереводСпискомСотрудники.СменаВидаДоговора,
	|	КадровыйПереводСпискомСотрудники.ДатаОкончания
	|ИЗ
	|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО КадровыйПереводСпискомСотрудники.Ссылка = ДокументыКОбработке.Ссылка
	|ГДЕ
	|	КадровыйПереводСпискомСотрудники.ИзменитьПодразделениеИДолжность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПереводСпискомНачисления.Ссылка КАК Регистратор,
	|	КадровыйПереводСпискомСотрудники.Сотрудник,
	|	КадровыйПереводСпискомНачисления.Действие,
	|	КадровыйПереводСпискомНачисления.Начисление,
	|	КадровыйПереводСпискомНачисления.ИдентификаторСтрокиВидаРасчета,
	|	КадровыйПереводСпискомНачисления.Размер
	|ИЗ
	|	Документ.КадровыйПереводСписком.Начисления КАК КадровыйПереводСпискомНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	|		ПО КадровыйПереводСпискомНачисления.Ссылка = КадровыйПереводСпискомСотрудники.Ссылка
	|			И КадровыйПереводСпискомНачисления.ИдентификаторСтрокиСотрудника = КадровыйПереводСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО КадровыйПереводСпискомНачисления.Ссылка = ВТДокументы.Ссылка
	|ГДЕ
	|	КадровыйПереводСпискомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПереводСпискомПоказатели.Ссылка КАК Регистратор,
	|	КадровыйПереводСпискомПоказатели.НомерСтроки,
	|	КадровыйПереводСпискомСотрудники.Сотрудник КАК Сотрудник,
	|	КадровыйПереводСпискомПоказатели.ИдентификаторСтрокиВидаРасчета,
	|	КадровыйПереводСпискомПоказатели.Показатель,
	|	КадровыйПереводСпискомПоказатели.Значение
	|ИЗ
	|	Документ.КадровыйПереводСписком.Показатели КАК КадровыйПереводСпискомПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	|		ПО КадровыйПереводСпискомПоказатели.Ссылка = КадровыйПереводСпискомСотрудники.Ссылка
	|			И КадровыйПереводСпискомПоказатели.ИдентификаторСтрокиСотрудника = КадровыйПереводСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО КадровыйПереводСпискомПоказатели.Ссылка = ВТДокументы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Сотрудник";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Начисления = Результат[2].Выгрузить();
	Показатели = Результат[3].Выгрузить();
	
	Отбор = Новый Структура("Регистратор,Сотрудник");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
						
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СменаВидаДоговора Тогда

				НоваяЗапись = НаборЗаписей.Добавить();
			
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.Основание = Основание;
				НоваяЗапись.Номер = Номер;	  
				
				НоваяЗапись.Дата 		= НачалоДня(Выборка.Дата) - 1;
				
				НоваяЗапись.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Увольнение;
				
				НоваяЗапись.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяЗапись.Должность = Справочники.Должности.ПустаяСсылка();

				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.Дата);
	            				
				Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
					НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
				КонецЕсли; 
								
				Номер = Номер + 1;

				НоваяЗапись = НаборЗаписей.Добавить();
			
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.Номер = Номер;	  
				
				НоваяЗапись.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Прием;
				
				СтрокиНачислений  = Начисления.Скопировать(Отбор);
				СтрокиПоказателей = Показатели.Скопировать(Отбор);

				НоваяЗапись.ТарифнаяСтавкаНадбавка = ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей, Истина); 
				
				НоваяЗапись.Основание = Основание;
				
				Номер = Номер + 1;
				
			Иначе
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.Номер = Номер;
				НоваяЗапись.Основание = Основание;
				
				Отбор.Регистратор = Выборка.Регистратор;
				Отбор.Сотрудник = Выборка.Сотрудник;
				
				СтрокиНачислений  = Начисления.Скопировать(Отбор);
				СтрокиПоказателей = Показатели.Скопировать(Отбор);

				НоваяЗапись.ТарифнаяСтавкаНадбавка = ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей, Истина); 
				
				Номер = Номер + 1;
				
				Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
						
					КадровыйУчетРасширенный.ДополнитьТаблицуВозвратнымиДанными(Выборка.Регистратор, Выборка.Сотрудник, Выборка.ДатаОкончания, НаборЗаписей, Номер, Основание);
					
				КонецЕсли;
						
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;

	// увольнение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Увольнение.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО Увольнение.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	Увольнение.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Увольнение.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО Увольнение.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	Увольнение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Увольнение.Ссылка КАК Регистратор,
	|	Увольнение.Сотрудник,
	|	Увольнение.Ссылка КАК ДокументОснование,
	|	Увольнение.Номер КАК НомерПриказа,
	|	Увольнение.Дата КАК ДатаПриказа,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	|	Увольнение.ДатаУвольнения КАК Дата
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО Увольнение.Ссылка = ДокументыКОбработке.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = 1;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
       		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.Дата);
        				
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
			НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
		
		НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УвольнениеСписком.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО УвольнениеСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|ГДЕ
	|	УвольнениеСписком.Проведен
	|	И РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УвольнениеСписком.Ссылка
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО УвольнениеСписком.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И (РеестрКадровыхПриказов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	УвольнениеСписком.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеСпискомСотрудники.Ссылка КАК Регистратор,
	|	УвольнениеСпискомСотрудники.Сотрудник,
	|	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	|	УвольнениеСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
	|	УвольнениеСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
	|	УвольнениеСпискомСотрудники.НомерСтроки КАК Номер,
	|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК Дата
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО УвольнениеСпискомСотрудники.Ссылка = ДокументыКОбработке.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
						
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Основание = Основание;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.Дата);
            				
			Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
				НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			КонецЕсли;
			
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ОбновитьРеестрКадровыхПриказов();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьРеестрОтпусков() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	// Отпуск
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отпуск.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО Отпуск.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	Отпуск.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отпуск.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО Отпуск.Ссылка = РеестрОтпусков.Регистратор
	|			И (РеестрОтпусков.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	Отпуск.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка КАК ДокументОснование,
	|	Отпуск.ВидРасчетаОсновногоОтпуска.ВидОтпуска КАК ВидОтпуска,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КоличествоДнейОсновногоОтпуска КАК КоличествоДнейОтпуска,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаПериодаОтсутствия,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияПериодаОтсутствия,
	|	Отпуск.Основание,
	|	Отпуск.Ссылка КАК Регистратор,
	|	Отпуск.Номер КАК НомерПриказа,
	|	Отпуск.Дата КАК ДатаПриказа
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО Отпуск.Ссылка = ДокументыКОбработке.Ссылка
	|ГДЕ
	|	Отпуск.ПредоставитьОсновнойОтпуск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.Ссылка.Сотрудник,
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КоличествоДней,
	|	ОтпускДополнительныеОтпуска.ДатаНачала,
	|	ОтпускДополнительныеОтпуска.ДатаОкончания,
	|	ОтпускДополнительныеОтпуска.Основание,
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	ОтпускДополнительныеОтпуска.Ссылка.Номер,
	|	ОтпускДополнительныеОтпуска.Ссылка.Дата
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО ОтпускДополнительныеОтпуска.Ссылка = ДокументыКОбработке.Ссылка
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
	|	И ОтпускДополнительныеОтпуска.КоличествоДней > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка,
	|	Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска.ВидОтпуска,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	Отпуск.Основание,
	|	Отпуск.Ссылка,
	|	Отпуск.Номер,
	|	Отпуск.Дата
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО Отпуск.Ссылка = ДокументыКОбработке.Ссылка
	|ГДЕ
	|	Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.Ссылка.Сотрудник,
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ОтпускДополнительныеОтпуска.Основание,
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	ОтпускДополнительныеОтпуска.Ссылка.Номер,
	|	ОтпускДополнительныеОтпуска.Ссылка.Дата
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ДокументыКОбработке
	|		ПО ОтпускДополнительныеОтпуска.Ссылка = ДокументыКОбработке.Ссылка
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
	|	И ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации > 0";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = 1;
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
				
			Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
				НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			КонецЕсли;
	
			НоваяЗапись.Основание = Основание + " " + Выборка.Основание;
			
			Номер = Номер + 1;
			
		КонецЦикла;
			
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	// Отпуск без сохранения оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускБезСохраненияОплаты.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО ОтпускБезСохраненияОплаты.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускБезСохраненияОплаты.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО ОтпускБезСохраненияОплаты.Ссылка = РеестрОтпусков.Регистратор
	|			И (РеестрОтпусков.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник,
	|	ОтпускБезСохраненияОплаты.Ссылка КАК ДокументОснование,
	|	ОтпускБезСохраненияОплаты.ВидОтпуска,
	|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	ОтпускБезСохраненияОплаты.Номер КАК НомерПриказа,
	|	ОтпускБезСохраненияОплаты.Дата КАК ДатаПриказа,
	|	ОтпускБезСохраненияОплаты.Ссылка КАК Регистратор
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ПО ВТДокументы.Ссылка = ОтпускБезСохраненияОплаты.Ссылка
	|ГДЕ
	|	НЕ ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = Номер;
		
		НоваяЗапись.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
    				
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
			НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
				
		НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = Номер + 1;
			
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
			
	КонецЦикла;
	
	// Отпуск по уходу за ребенком
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО ОтпускПоУходуЗаРебенком.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО ОтпускПоУходуЗаРебенком.Ссылка = РеестрОтпусков.Регистратор
	|			И (РеестрОтпусков.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник КАК Сотрудник,
	|	ОтпускПоУходуЗаРебенком.Ссылка КАК ДокументОснование,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	""Отпуск по уходу за ребенком"" КАК ВидОтпуска,
	|	ОтпускПоУходуЗаРебенком.Номер КАК НомерПриказа,
	|	ОтпускПоУходуЗаРебенком.Дата КАК ДатаПриказа,
	|	ОтпускПоУходуЗаРебенком.Ссылка КАК Регистратор
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ПО ВТДокументы.Ссылка = ОтпускПоУходуЗаРебенком.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = Номер;
		
		НоваяЗапись.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
    				
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
			НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
				
		НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = Номер + 1;
			
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
					
	КонецЦикла;
	
	// увольнение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Увольнение.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО Увольнение.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	Увольнение.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Увольнение.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО Увольнение.Ссылка = РеестрОтпусков.Регистратор
	|			И (РеестрОтпусков.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	Увольнение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Увольнение.Сотрудник,
	|	Увольнение.Ссылка КАК ДокументОснование,
	|	""Основной"" КАК ВидОтпуска,
	|	Увольнение.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Увольнение.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
	|	Увольнение.ДатаУвольнения КАК ДатаНачалаПериодаОтсутствия,
	|	Увольнение.ДатаУвольнения КАК ДатаОкончанияПериодаОтсутствия,
	|	Увольнение.ВидДоговора,
	|	Увольнение.Номер КАК НомерПриказа,
	|	Увольнение.Дата КАК ДатаПриказа,
	|	Увольнение.Ссылка КАК Регистратор,
	|	Увольнение.ОснованиеУвольнения
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
	|		ПО ВТДокументы.Ссылка = Увольнение.Ссылка
	|ГДЕ
	|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
	|	УвольнениеДополнительныеОтпуска.Ссылка,
	|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
	|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
	|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
	|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
	|	УвольнениеДополнительныеОтпуска.Ссылка.ВидДоговора,
	|	УвольнениеДополнительныеОтпуска.Ссылка.Номер,
	|	УвольнениеДополнительныеОтпуска.Ссылка.Дата,
	|	УвольнениеДополнительныеОтпуска.Ссылка,
	|	УвольнениеДополнительныеОтпуска.Ссылка.ОснованиеУвольнения
	|ИЗ
	|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО УвольнениеДополнительныеОтпуска.Ссылка = ВТДокументы.Ссылка
	|ГДЕ
	|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = 1;

		Пока Выборка.Следующий() Цикл

	        НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;
							
			НоваяЗапись.Основание = Основание + " " + Выборка.ОснованиеУвольнения;
		
			Номер = Номер + 1;
			
		КонецЦикла;
			
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		   		
	КонецЦикла;
	
	// увольнение списком
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УвольнениеСписком.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО УвольнениеСписком.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	УвольнениеСписком.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УвольнениеСписком.Ссылка
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО УвольнениеСписком.Ссылка = РеестрОтпусков.Регистратор
	|			И (РеестрОтпусков.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))
	|ГДЕ
	|	УвольнениеСписком.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеСпискомСотрудники.Сотрудник,
	|	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
	|	""Основной"" КАК ВидОтпуска,
	|	УвольнениеСпискомСотрудники.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеСпискомСотрудники.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеСпискомСотрудники.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
	|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК ДатаНачалаПериодаОтсутствия,
	|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК ДатаОкончанияПериодаОтсутствия,
	|	УвольнениеСпискомСотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
	|	УвольнениеСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
	|	УвольнениеСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
	|	УвольнениеСпискомСотрудники.Ссылка КАК Регистратор,
	|	УвольнениеСпискомСотрудники.ОснованиеУвольнения
	|ИЗ
	|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО УвольнениеСпискомСотрудники.Ссылка = ВТДокументы.Ссылка
	|ГДЕ
	|	УвольнениеСпискомСотрудники.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеСпискомСотрудники.Сотрудник,
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
	|	УвольнениеСпискомДополнительныеОтпуска.ВидОтпуска,
	|	УвольнениеСпискомДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеСпискомДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	УвольнениеСпискомДополнительныеОтпуска.ДнейКомпенсацииУдержания,
	|	УвольнениеСпискомСотрудники.ДатаУвольнения,
	|	УвольнениеСпискомСотрудники.ДатаУвольнения,
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.ВидДоговора,
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.Номер,
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.Дата,
	|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
	|	УвольнениеСпискомСотрудники.ОснованиеУвольнения
	|ИЗ
	|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеСпискомДополнительныеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
	|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = УвольнениеСпискомСотрудники.Ссылка
	|			И УвольнениеСпискомДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = ВТДокументы.Ссылка
	|ГДЕ
	|	УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = 1;
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;
			
			НоваяЗапись.Основание = Основание + " " + Выборка.ОснованиеУвольнения;
			
			Номер = Номер + 1;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСведенияОРодственникахИзРегистраВСправочник() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РодственникиФизическихЛиц.Владелец
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УдалитьСоставыСемейФизическихЛиц.ФизическоеЛицо КАК Владелец,
			|	УдалитьСоставыСемейФизическихЛиц.ФИО КАК Наименование,
			|	УдалитьСоставыСемейФизическихЛиц.СтепеньРодства,
			|	УдалитьСоставыСемейФизическихЛиц.ДатаРождения
			|ИЗ
			|	РегистрСведений.УдалитьСоставыСемейФизическихЛиц КАК УдалитьСоставыСемейФизическихЛиц
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	Наименование";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СправочникОбъект = Справочники.РодственникиФизическихЛиц.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, Выборка);
			
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьРеестрОтпусковПоБеременностиИРодам() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БольничныйЛист.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО БольничныйЛист.Ссылка = РеестрОтпусков.Регистратор
	|ГДЕ
	|	БольничныйЛист.Проведен
	|	И РеестрОтпусков.Номер ЕСТЬ NULL 
	|	И БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК ДокументОснование,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	""Отпуск по беременности и родам"" КАК ВидОтпуска,
	|	БольничныйЛист.Номер КАК НомерПриказа,
	|	БольничныйЛист.Дата КАК ДатаПриказа,
	|	БольничныйЛист.Ссылка КАК Регистратор,
	|	БольничныйЛист.Сотрудник
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТДокументы.Ссылка = БольничныйЛист.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Номер = Номер;
		
		НоваяЗапись.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
    				
		Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
			НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
		
		НоваяЗапись.Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Номер = Номер + 1;
			
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
							
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоВРеестрах() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Регистратор,
	|	РеестрКадровыхПриказов.НомерСтроки,
	|	РеестрКадровыхПриказов.Активность,
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.Основание,
	|	РеестрКадровыхПриказов.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрОтпусков.Регистратор,
	|	РеестрОтпусков.НомерСтроки,
	|	РеестрОтпусков.Активность,
	|	РеестрОтпусков.Сотрудник,
	|	РеестрОтпусков.ДокументОснование,
	|	РеестрОтпусков.Номер,
	|	РеестрОтпусков.ВидОтпуска,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КоличествоДнейОтпуска,
	|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
	|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия,
	|	РеестрОтпусков.ВидДоговора,
	|	РеестрОтпусков.Основание,
	|	РеестрОтпусков.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|ГДЕ
	|	РеестрОтпусков.ФизическоеЛицо = &ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.Основание,
	|	РеестрКадровыхПриказов.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеестрКадровыхПриказов.РегистраторИзмерение
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказовИспр КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.ФизическоеЛицо = &ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказовИспр.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
	КонецЦикла;
						
	НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
	НаборЗаписейРегистра.Записать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрОтпусков.Сотрудник,
	|	РеестрОтпусков.ДокументОснование,
	|	РеестрОтпусков.Номер,
	|	РеестрОтпусков.ВидОтпуска,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КоличествоДнейОтпуска,
	|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
	|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия,
	|	РеестрОтпусков.ВидДоговора,
	|	РеестрОтпусков.Основание,
	|	РеестрОтпусков.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеестрОтпусков.РегистраторИзмерение
	|ИЗ
	|	РегистрСведений.РеестрОтпусковИспр КАК РеестрОтпусков
	|ГДЕ
	|	РеестрОтпусков.ФизическоеЛицо = &ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусковИспр.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
	КонецЦикла;
						
	НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
	НаборЗаписейРегистра.Записать();  
	
КонецПроцедуры

Процедура ПересчитатьКоличествоДнейОтпускаПоУходуЗаРебенкомРеестрОтпусков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрОтпусков.Регистратор,
	|	РеестрОтпусков.НомерСтроки,
	|	РеестрОтпусков.Активность,
	|	РеестрОтпусков.Сотрудник,
	|	РеестрОтпусков.ФизическоеЛицо,
	|	РеестрОтпусков.ДокументОснование,
	|	РеестрОтпусков.Номер,
	|	РеестрОтпусков.ВидОтпуска,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
	|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия,
	|	РеестрОтпусков.ВидДоговора,
	|	РеестрОтпусков.Основание,
	|	РАЗНОСТЬДАТ(РеестрОтпусков.ДатаНачалаПериодаОтсутствия, РеестрОтпусков.ДатаОкончанияПериодаОтсутствия, ДЕНЬ) + 1 КАК КоличествоДнейОтпуска
	|ИЗ
	|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|ГДЕ
	|	РАЗНОСТЬДАТ(РеестрОтпусков.ДатаНачалаПериодаОтсутствия, РеестрОтпусков.ДатаОкончанияПериодаОтсутствия, ДЕНЬ) + 1 > 999";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);	
			
		КонецЦикла;		
		
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрОтпусков.РегистраторИзмерение,
	|	РеестрОтпусков.Сотрудник,
	|	РеестрОтпусков.ФизическоеЛицо,
	|	РеестрОтпусков.ДокументОснование,
	|	РеестрОтпусков.Номер,
	|	РеестрОтпусков.ВидОтпуска,
	|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия,
	|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия,
	|	РеестрОтпусков.ВидДоговора,
	|	РеестрОтпусков.Основание,
	|	РАЗНОСТЬДАТ(РеестрОтпусков.ДатаНачалаПериодаОтсутствия, РеестрОтпусков.ДатаОкончанияПериодаОтсутствия, ДЕНЬ) + 1 КАК КоличествоДнейОтпуска
	|ИЗ
	|	РегистрСведений.РеестрОтпусковИспр КАК РеестрОтпусков
	|ГДЕ
	|	РАЗНОСТЬДАТ(РеестрОтпусков.ДатаНачалаПериодаОтсутствия, РеестрОтпусков.ДатаОкончанияПериодаОтсутствия, ДЕНЬ) + 1 > 999";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусковИспр.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
	КонецЦикла;
						
	НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
	НаборЗаписейРегистра.Записать();  
	
КонецПроцедуры

Процедура ЗаполнитьДатуНомерПриказаВРеестреКадровыхПриказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Регистратор,
	|	РеестрКадровыхПриказов.НомерСтроки,
	|	РеестрКадровыхПриказов.Активность,
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ФизическоеЛицо,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.Основание,
	|	РеестрКадровыхПриказов.Регистратор.Дата КАК ДатаПриказа,
	|	РеестрКадровыхПриказов.Регистратор.Номер КАК НомерПриказа
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	(РеестрКадровыхПриказов.ДатаПриказа = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ (ВЫРАЗИТЬ(РеестрКадровыхПриказов.НомерПриказа КАК СТРОКА(1000))) = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПереносДанных") Тогда
				
				СтруктураДатаНомер = ДатаНомерПриказаПоОснованию(Выборка.Основание);
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДатаНомер);
			
			КонецЕсли;			
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.Основание,
	|	РеестрКадровыхПриказов.ФизическоеЛицо,
	|	РеестрКадровыхПриказов.ДокументОснование.Дата КАК ДатаПриказа,
	|	РеестрКадровыхПриказов.ДокументОснование.Номер КАК НомерПриказа,
	|	РеестрКадровыхПриказов.РегистраторИзмерение
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказовИспр КАК РеестрКадровыхПриказов
	|ГДЕ
	|	(РеестрКадровыхПриказов.ДатаПриказа = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ (ВЫРАЗИТЬ(РеестрКадровыхПриказов.НомерПриказа КАК СТРОКА(1000))) = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказовИспр.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);   
		
		Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ПереносДанных") Тогда
				
			СтруктураДатаНомер = ДатаНомерПриказаПоОснованию(Выборка.Основание);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДатаНомер);
		
		КонецЕсли;		
			
	КонецЦикла;
						
	НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
	НаборЗаписейРегистра.Записать();
		
КонецПроцедуры

Функция ДатаНомерПриказаПоОснованию(Знач Основание)
	
	СтруктураВозврата = Новый Структура("ДатаПриказа, НомерПриказа", Дата(1, 1, 1), "");
	
	ИндексСимволаНомерНачало = 0;
	ИндексСимволаНомерКонец = 0;
	ИндексСимволаНомерНачало = СтрНайти(Основание, "№");
	ИндексСимволаНомерКонец = СтрНайти(Основание, " от ");
	КоличествоСимволовНомер = ИндексСимволаНомерКонец - ИндексСимволаНомерНачало - 1;
	
	Номер = СокрЛП(Сред(Основание, ИндексСимволаНомерНачало + 1, КоличествоСимволовНомер));
	ДатаСтрока = СокрЛП(Сред(Основание, ИндексСимволаНомерКонец + 4, 10)); 
	
	Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСтрока);
	
	Если ЗначениеЗаполнено(Номер) И ЗначениеЗаполнено(Дата) Тогда
			
		СтруктураВозврата.НомерПриказа = Номер;
		СтруктураВозврата.ДатаПриказа = Дата;
		
	КонецЕсли;  
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьРеестрОтпусковПоФактическимОтпускам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФактическиеОтпуска.Регистратор КАК ДокументОснование,
	|	ФактическиеОтпуска.НомерСтроки КАК Номер,
	|	ФактическиеОтпуска.Период,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
	|	ФактическиеОтпуска.РабочийПериодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ФактическиеОтпуска.РабочийПериодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ФактическиеОтпуска.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	ФактическиеОтпуска.Основание,
	|	ФактическиеОтпуска.Регистратор
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ПО ФактическиеОтпуска.Сотрудник = РеестрОтпусков.Сотрудник
	|			И ФактическиеОтпуска.ДатаНачала = РеестрОтпусков.ДатаНачалаПериодаОтсутствия
	|			И ФактическиеОтпуска.ДатаОкончания = РеестрОтпусков.ДатаОкончанияПериодаОтсутствия
	|			И (ФактическиеОтпуска.ВидЕжегодногоОтпуска.Наименование = (ВЫРАЗИТЬ(РеестрОтпусков.ВидОтпуска КАК СТРОКА(100))))
	|ГДЕ
	|	ФактическиеОтпуска.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И РеестрОтпусков.Регистратор ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейРегистра.Прочитать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.ДатаНачалаПериодаОтсутствия);
            				
			Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
				НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			КонецЕсли;  		
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПрекратитьПлановыеНачисленияУволенныхСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Увольнение);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	КадроваяИсторияСотрудников.ПериодЗаписи,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.Регистратор
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.ПериодЗаписи КАК Период,
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Регистратор КАК Регистратор,
		|	ПлановыеНачисления.*
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Размер = 0;
				Запись.Используется = Ложь;
				
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьРеестрОтпусковСУчетомПеренесенныхКорректирующихЗаписей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрОтпусков.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ПО РеестрОтпусков.Регистратор = ФактическиеОтпуска.Регистратор
	|			И РеестрОтпусков.Сотрудник = ФактическиеОтпуска.Сотрудник
	|ГДЕ
	|	РеестрОтпусков.Регистратор ССЫЛКА Документ.ПереносДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(-1 * ФактическиеОтпуска.Количество) КАК Количество,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо
	|ПОМЕСТИТЬ ВТСторно
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Количество < 0
	|	И ФактическиеОтпуска.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(ФактическиеОтпуска.Количество) КАК Количество,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо
	|ПОМЕСТИТЬ ВТОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Количество > 0
	|	И ФактическиеОтпуска.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРегистраторы.Регистратор
	|ИЗ
	|	ВТРегистраторы КАК ВТРегистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОтпуска.Сотрудник КАК Сотрудник,
	|	ВТОтпуска.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТОтпуска.Регистратор КАК ДокументОснование,
	|	ВТОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска,
	|	ВТОтпуска.РабочийПериодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ВТОтпуска.РабочийПериодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ВТОтпуска.Количество - ЕСТЬNULL(ВТСторно.Количество, 0) КАК КоличествоДнейОтпуска,
	|	ВТОтпуска.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	ВТОтпуска.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ФактическиеОтпуска.Основание, """") КАК СТРОКА(255)) КАК Основание,
	|	ВТОтпуска.Регистратор КАК Регистратор
	|ИЗ
	|	ВТОтпуска КАК ВТОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторно КАК ВТСторно
	|		ПО ВТОтпуска.Сотрудник = ВТСторно.Сотрудник
	|			И ВТОтпуска.ВидЕжегодногоОтпуска = ВТСторно.ВидЕжегодногоОтпуска
	|			И ВТОтпуска.ДатаНачала = ВТСторно.ДатаНачала
	|			И ВТОтпуска.ДатаОкончания = ВТСторно.ДатаОкончания
	|			И ВТОтпуска.Регистратор = ВТСторно.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ПО ВТОтпуска.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И ВТОтпуска.Регистратор = ФактическиеОтпуска.Регистратор
	|			И ВТОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска
	|			И ВТОтпуска.ДатаНачала = ФактическиеОтпуска.ДатаНачала
	|			И ВТОтпуска.ДатаОкончания = ФактическиеОтпуска.ДатаОкончания
	|			И (ВТОтпуска.Количество - ЕСТЬNULL(ВТСторно.Количество, 0) = ФактическиеОтпуска.Количество)
	|			И (ФактическиеОтпуска.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТРегистраторы.Регистратор
	|				ИЗ
	|					ВТРегистраторы КАК ВТРегистраторы))
	|ГДЕ
	|	ВТОтпуска.Количество > 0
	|	И ВТОтпуска.Количество > ЕСТЬNULL(ВТСторно.Количество, 0)
	|	И ВТОтпуска.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;
	
	Выборка = Результаты[4].Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрОтпусков.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейРегистра.Прочитать();
		
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Номер = Номер;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяЗапись.ДатаНачалаПериодаОтсутствия);
            				
			Если КадровыеДанныеСотрудника.Количество() > 0 Тогда	
				НоваяЗапись.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			КонецЕсли;  
			
			Номер = Номер + 1;
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПеренестиФотографииВФизическиеЛицаПрисоединенныеФайлы() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.УдалитьФотография
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.УдалитьФотографияФайлом = ЗНАЧЕНИЕ(Справочник.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка)
	               |	И ФизическиеЛица.УдалитьФотография <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Попытка
			ДанныеФайлаИДвоичныеДанные = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Выборка.УдалитьФотография);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДанныеФайла;
		ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
		
		Если ДвоичныеДанные = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", ДанныеФайла.АвторТекущейВерсии);
		ПараметрыФайла.Вставить("ВладелецФайлов", Выборка.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ПолноеНаименованиеВерсии);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
		
		Попытка
			ПрисоединенныйФайлСсылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФизическоеЛицоОбъект.УдалитьФотографияФайлом = ПрисоединенныйФайлСсылка;
		ФизическоеЛицоОбъект.Записать();
		
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСтажиИсчисляемыеСДатыПриема() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК РазмерДней,
		|	СтажиФизическихЛиц.*
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|ГДЕ
		|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема
		|	И СтажиФизическихЛиц.РазмерМесяцев = 0
		|	И СтажиФизическихЛиц.РазмерДней = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Отбор.ВидСтажа.Установить(Выборка.ВидСтажа);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеестрКадровыхПриказовПоПеремещениямВДругоеПодразделение() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = РеестрКадровыхПриказов.Регистратор
	|			И ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник = РеестрКадровыхПриказов.Сотрудник
	|ГДЕ
	|	РеестрКадровыхПриказов.Номер ЕСТЬ NULL 
	|	И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = ВТДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудники.Сотрудник,
	|	МАКСИМУМ(РеестрКадровыхПриказов.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТСотрудникиМаксимальныеПериодыРеестра
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ВТСотрудники.Сотрудник = РеестрКадровыхПриказов.Сотрудник
	|			И ВТСотрудники.ДатаПеремещения > РеестрКадровыхПриказов.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка КАК СТРОКА(1000)) КАК ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.Разряд,
	|	ВТСотрудникиМаксимальныеПериодыРеестра.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиТарСтавкаВидДоговора
	|ИЗ
	|	ВТСотрудникиМаксимальныеПериодыРеестра КАК ВТСотрудникиМаксимальныеПериодыРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|		ПО ВТСотрудникиМаксимальныеПериодыРеестра.Сотрудник = РеестрКадровыхПриказов.Сотрудник
	|			И ВТСотрудникиМаксимальныеПериодыРеестра.Дата = РеестрКадровыхПриказов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТСотрудникиТарСтавкаВидДоговора.ТарифнаяСтавкаНадбавка) КАК ТарифнаяСтавкаНадбавка,
	|	МАКСИМУМ(ВТСотрудникиТарСтавкаВидДоговора.ВидДоговора) КАК ВидДоговора,
	|	МАКСИМУМ(ВТСотрудникиТарСтавкаВидДоговора.Разряд) КАК Разряд,
	|	ВТСотрудникиТарСтавкаВидДоговора.Сотрудник
	|ПОМЕСТИТЬ ВТДанныеСотрудникаСГруппировкой
	|ИЗ
	|	ВТСотрудникиТарСтавкаВидДоговора КАК ВТСотрудникиТарСтавкаВидДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСотрудникиТарСтавкаВидДоговора.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка КАК ДокументОснование,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Номер КАК НомерПриказа,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата КАК ДатаПриказа,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ПодразделениеНовое КАК Подразделение,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Должность,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	ВТДанныеСотрудникаСГруппировкой.ТарифнаяСтавкаНадбавка,
	|	ВТДанныеСотрудникаСГруппировкой.ВидДоговора,
	|	ВТДанныеСотрудникаСГруппировкой.Разряд,
	|	ПеремещениеВДругоеПодразделениеСотрудники.НомерСтроки КАК Номер,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
	|		ПО ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = ВТДокументы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСотрудникаСГруппировкой КАК ВТДанныеСотрудникаСГруппировкой
	|		ПО ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник = ВТДанныеСотрудникаСГруппировкой.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Очистить();
						
		Основание = ОснованиеДляРеестра(Выборка.ДатаПриказа, Выборка.НомерПриказа);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Основание = Основание;
									
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиФайлыФизическихЛицВФизическиеЛицаПрисоединенныеФайлы() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	               |	Файлы.Ссылка КАК Файл
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО ФизическиеЛица.Ссылка = Файлы.ВладелецФайла
	               |			И ФизическиеЛица.УдалитьФотография <> Файлы.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛицаПрисоединенныеФайлы КАК ФизическиеЛицаПрисоединенныеФайлы
	               |		ПО ФизическиеЛица.Ссылка = ФизическиеЛицаПрисоединенныеФайлы.ВладелецФайла
	               |			И ФизическиеЛица.УдалитьФотографияФайлом <> ФизическиеЛицаПрисоединенныеФайлы.Ссылка
	               |ГДЕ
	               |	ФизическиеЛицаПрисоединенныеФайлы.Ссылка ЕСТЬ NULL ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Попытка
			ДанныеФайлаИДвоичныеДанные = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Выборка.Файл);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ДанныеФайла = ДанныеФайлаИДвоичныеДанные.ДанныеФайла;
		ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
		
		Если ДвоичныеДанные = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", ДанныеФайла.АвторТекущейВерсии);
		ПараметрыФайла.Вставить("ВладелецФайлов", Выборка.ФизическоеЛицо);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ПолноеНаименованиеВерсии);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
		
		Попытка
			ПрисоединенныйФайлСсылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		Исключение
			Продолжить;
		КонецПопытки;
		
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюВРеестреКадровыхПриказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Регистратор КАК Регистратор,
	|	РеестрКадровыхПриказов.НомерСтроки,
	|	РеестрКадровыхПриказов.Активность,
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ФизическоеЛицо,
	|	РеестрКадровыхПриказов.Регистратор.Организация КАК Организация,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.ДатаПриказа,
	|	РеестрКадровыхПриказов.НомерПриказа,
	|	РеестрКадровыхПриказов.Основание
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказов.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.РегистраторИзмерение,
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.ФизическоеЛицо,
	|	РеестрКадровыхПриказов.ДокументОснование.Организация КАК Организация,
	|	РеестрКадровыхПриказов.ДокументОснование,
	|	РеестрКадровыхПриказов.Номер,
	|	РеестрКадровыхПриказов.Дата,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	РеестрКадровыхПриказов.ВидСобытия,
	|	РеестрКадровыхПриказов.ДатаПриказа,
	|	РеестрКадровыхПриказов.НомерПриказа,
	|	РеестрКадровыхПриказов.Основание
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказовИспр КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыСведений.РеестрКадровыхПриказовИспр.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
			
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);   
					
	КонецЦикла;
						
	НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
	НаборЗаписейРегистра.Записать();
		
КонецПроцедуры

Процедура ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСостоянияхВБракеФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОВоинскомУчетеФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОБронированииСотрудников(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОКлассномЧинеРанге(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОВоинскомСпециальномЗвании(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСоставеСемейФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
				
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц);
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных <> Неопределено Тогда
		КадровыйУчетБазовый.ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, ИменаБазовыхКадровыхДанных, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСостоянияхВБракеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОВоинскомУчетеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОБронированииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСоставеСемейФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОВоинскихСпециальныхЗваниях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстыОписанияПолей = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОбОбразованииФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЗнанияхЯзыковФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПрофессияхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСтроковыхСведенийФизическихЛиц(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОГосударственныхСлужащих(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеВключаетсяВРеестрГосслужащих(ИмяКадровыхДанных, ТекстыОписанияПолей, ИсточникиДанных) Тогда
			
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеПостоянныеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстыОписанияПолей, "ПОМЕСТИТЬ " + ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных <> Неопределено Тогда
		КадровыйУчетБазовый.ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ИменаБазовыхКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных) Экспорт
	
	КадровыйУчетБазовый.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТСведенияОбОбразованииФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОЗнанияхЯзыковФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПрофессияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСтроковыеСведенияФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОГосударственныхСлужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенийРеестраГосслужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПолученияСведенийНаПериодНачалаУчета(МенеджерВременныхТаблиц, ОписательВременнойТаблицыОтборов, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ИдентификаторТаблицы = "";
	
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		НеобходимыСведенияОГрафиках = НеобходимыСведенияОГрафикахРаботы(ИмяКадровыхДанных);
		Если Не НеобходимыСведенияОГрафиках Тогда
			
			НеобходимыСведенияКадровойИстории = КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяКадровыхДанных);
			
			Если НеобходимыСведенияКадровойИстории
				И КадровыйУчет.НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяКадровыхДанных) Тогда
				
				ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяКадровыхДанных, ИсточникиДанных);
				Если ПустаяСтрока(ИмяФО) Тогда
					ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяКадровыхДанных);
				КонецЕсли;
				
				Если ПустаяСтрока(ИмяФО) Или Не ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
					НеобходимыСведенияКадровойИстории = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыСведенияОГрафиках
			Или НеобходимыСведенияКадровойИстории Тогда
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборовСотрудников.Период КАК Период,
				|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
				|	СправочникСотрудники.ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
				|ИЗ
				|	ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
				|		ПО ТаблицаОтборовСотрудников.Сотрудник = СправочникСотрудники.Ссылка";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОтборовРазличныхСотрудников");
			
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = "ВТОтборовРазличныхСотрудников";
			ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник = "Сотрудник";
			ОписательВременнойТаблицыОтборов.ИмяПоляПериод = "Период";
			ОписательВременнойТаблицыОтборовРазличных = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
			
			Запрос.Выполнить();
			
			Если НеобходимыСведенияОГрафиках Тогда
				
				ИдентификаторТаблицы = "ВТСведенияОГрафикахРаботыДляКадровыхДанныхСотрудников";
				
				Запрос = ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборовРазличных, ПоляОтбораПериодическихДанных, ИдентификаторТаблицы);
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Выполнить();
				
				Прервать;
				
			ИначеЕсли НеобходимыСведенияКадровойИстории Тогда
				
				ИдентификаторТаблицы = "ВТСведенияКадровойИсторииСотрудников";
				
				Запрос = КадровыйУчетБазовый.ЗапросВТСведенияКадровойИсторииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборовРазличных, ПоляОтбораПериодическихДанных, ИдентификаторТаблицы);
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Выполнить();
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИдентификаторТаблицы) Тогда
		
		НеобходимоПроверятьПериодыНаНачалоУчета = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	1 КАК Поле1
			|ИЗ
			|	ВТПроверяемаяТаблица КАК ПроверяемаяТаблица
			|ГДЕ
			|	ПроверяемаяТаблица.ПериодЗаписи ЕСТЬ NULL ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПроверяемаяТаблица", ИдентификаторТаблицы);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	КадроваяИсторияСотрудников.Период
				|ИЗ
				|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
				|ГДЕ
				|	КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.НачальнаяШтатнаяРасстановка";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				НеобходимоПроверятьПериодыНаНачалоУчета = Истина;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если НеобходимоПроверятьПериодыНаНачалоУчета Тогда
			
			ОписательВременнойТаблицыОтборов.ПолучатьСведенияНаПериодНачалаУчета = Истина;
			
			Запрос.Текст = "УНИЧТОЖИТЬ " + ИдентификаторТаблицы;
			Запрос.Выполнить();
			
		Иначе
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИдентификаторТаблицы);
			ОписательВременнойТаблицыОтборов.ИменаСозданныхВременныхТаблиц.Вставить(ИдентификаторТаблицы, ИдентификаторТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиСостояниеПодработокВКадровуюИсториюСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРегистра.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.УдалитьСостоянияПодработок КАК ТаблицаРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаРегистра.Период = КадроваяИсторияСотрудников.Период
		|			И ТаблицаРегистра.Регистратор = КадроваяИсторияСотрудников.Регистратор
		|			И ТаблицаРегистра.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И ТаблицаРегистра.Организация = КадроваяИсторияСотрудников.Организация
		|			И ТаблицаРегистра.Подразделение = КадроваяИсторияСотрудников.Подразделение
		|			И ТаблицаРегистра.Должность = КадроваяИсторияСотрудников.Должность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистра.Регистратор
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистраторы.Регистратор) КАК КоличествоРегистраторов
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КоличествоРегистраторов > 0 Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Сотрудник.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	ТаблицаРегистра.*
			|ИЗ
			|	РегистрСведений.УдалитьСостоянияПодработок КАК ТаблицаРегистра
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ТаблицаРегистра.Регистратор = Регистраторы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления, "РегистрыСведений.КадроваяИсторияСотрудников.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписей.Прочитать();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено
		И ПараметрыОбновления.Свойство("ОбработкаЗавершена")
		И ПараметрыОбновления.ОбработкаЗавершена = Ложь Тогда
		
		Возврат;
		
	КонецЕсли;

	ПараметрыРесурсов = ЗарплатаКадрыПериодическиеРегистры.ПараметрыНаследованияРесурсов("КадроваяИсторияСотрудников");
	Для каждого КлючИЗначение Из ПараметрыРесурсов Цикл
	
		Ресурс = КлючИЗначение.Ключ;
		Наследование = КлючИЗначение.Значение;
		Если Ресурс = "ВидСобытия" Тогда
			
			Наследование.ПравилоНаследования = "Фиксированное";
			Наследование.Значение = Перечисления.ВидыКадровыхСобытий.Увольнение;
			
		Иначе
			Наследование.ПравилоНаследования = "Наследование";
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияИнтервальногоРегистра();
	ПараметрыПостроения.ОсновноеИзмерение = "Сотрудник";
	ПараметрыПостроения.ПараметрыРесурсов = ПараметрыРесурсов;
	ЗарплатаКадрыПериодическиеРегистры.ПеренестиВозвратныйРегистрВИнтервальныйРегистрСведений("КадроваяИсторияСотрудников", ПараметрыПостроения, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловногоСотрудникаВКадроваяИсторияСотрудниковИспр(ПараметрыОбновления = Неопределено) Экспорт 
	КадровыйУчет.ЗаполнитьГоловногоСотрудникаРегистрСведений(Метаданные.РегистрыСведений.КадроваяИсторияСотрудниковИспр.Имя, ПараметрыОбновления);
КонецПроцедуры	

Процедура ПроверитьНеобходимостьВосстановленияФайловФизическихЛиц() Экспорт 
	
	ВерсияБЗКР = ОбновлениеИнформационнойБазы.ВерсияИБ("БЗКР");
	
	Если ВерсияБЗКР < "3.1.1.0"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияБЗКР > "3.1.1.60" Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Файлы.Ссылка
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.ВладелецФайла = НЕОПРЕДЕЛЕНО";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсправлениеПроблемыСПрисоединеннымиФайлами", "ВосстановитьПрисоединенныеФайлы", Истина, , ИмяПользователя());
	
КонецПроцедуры

Процедура ЗаполнитьПериодыСтажейФизическихЛицПоУмолчанию(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа
		|ПОМЕСТИТЬ ВТСтажиКЗаполнению
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|ГДЕ
		|	СтажиФизическихЛиц.Период = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтажиКЗаполнению.ВидСтажа
		|ИЗ
		|	ВТСтажиКЗаполнению КАК СтажиКЗаполнению";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		Запрос.УстановитьПараметр("ДатаОтсчетаПериодическихСведений", ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
			|	ВЫБОР
			|		КОГДА СтажиФизическихЛиц.Период = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &ДатаОтсчетаПериодическихСведений
			|		ИНАЧЕ СтажиФизическихЛиц.Период
			|	КОНЕЦ КАК Период,
			|	СтажиФизическихЛиц.ДатаОтсчета,
			|	СтажиФизическихЛиц.РазмерМесяцев,
			|	СтажиФизическихЛиц.РазмерДней,
			|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема
			|ИЗ
			|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиКЗаполнению КАК СтажиКЗаполнению
			|		ПО СтажиФизическихЛиц.ФизическоеЛицо = СтажиКЗаполнению.ФизическоеЛицо
			|			И СтажиФизическихЛиц.ВидСтажа = СтажиКЗаполнению.ВидСтажа
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	ВидСтажа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СтажиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			Пока Выборка.СледующийПоЗначениюПоля("ВидСтажа") Цикл
				НаборЗаписей = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ВидСтажа.Установить(Выборка.ВидСтажа);
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЦикла;
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			КонецЦикла;
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


// Возвращает есть ли среди сотрудников организации такие, с которыми заключено более одного
// договора (трудового или ГПХ).
//
// Параметры:
//	Организация						- СправочникСсылка.Организации
//	НачалоПериода					- Дата
//	ОкончаниеПериода				- Дата
//	СписокФизическихЛиц				- Массив элементов СправочникСсылка.ФизическиеЛица
//	РаботникиПоДоговорамГПХ			- Булево, в результате будут учтены действующие договоры ГПХ
//	ОтбиратьПоГоловнойОрганизации	- Булево, поиск договоров будет осуществляться в рамках головной организации
//
// Возвращаемое значение:
//	Булево, Истина - есть сотрудники с несколькими трудовыми договорами
//
Функция ЕстьСотрудникиСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода = '00010101', СписокФизическихЛиц = Неопределено, РаботникиПоДоговорамГПХ = Истина, ОтбиратьПоГоловнойОрганизации = Истина) Экспорт
	
	МассивСотрудников = ФизическиеЛицаСНесколькимиДоговорами(Организация, НачалоПериода, ОкончаниеПериода, СписокФизическихЛиц, РаботникиПоДоговорамГПХ, ОтбиратьПоГоловнойОрганизации);
	Возврат МассивСотрудников.Количество() > 0;
	
КонецФункции

Функция РольСотрудникаРаботник() Экспорт 
	Возврат Перечисления.РолиСотрудников.Работник;	
КонецФункции

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт 
	
	ВосстановитьПрисоединенныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИсправлениеПроблемыСПрисоединеннымиФайлами", "ВосстановитьПрисоединенныеФайлы", Ложь, , ИмяПользователя());
	Параметры.Вставить("ВосстановитьПрисоединенныеФайлы", ВосстановитьПрисоединенныеФайлы);
	
	Если ВосстановитьПрисоединенныеФайлы Тогда 
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ИсправлениеПроблемыСПрисоединеннымиФайлами", "ВосстановитьПрисоединенныеФайлы", ИмяПользователя());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРегистрДанныеДляПодбораСотрудников(ТаблицаФильтр)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФильтр", ТаблицаФильтр);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФильтр.Сотрудник,
	|	ТаблицаФильтр.ДатаНачала,
	|	ТаблицаФильтр.ДатаОкончания
	|ПОМЕСТИТЬ ВТТаблицаФильтр
	|ИЗ
	|	&ТаблицаФильтр КАК ТаблицаФильтр";
	
	Запрос.Выполнить();
		
	ОписаниеФильта = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТаблицаФильтр", "Сотрудник");
	
	ЗапросИнтервальногоРегистра = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТПериодыИмяРегистра(
		Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя,
		Ложь,
		ОписаниеФильта);
		
	ЗапросИнтервальногоРегистра.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросИнтервальногоРегистра.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.МенеджерВременныхТаблиц = ЗапросИнтервальногоРегистра.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковПериоды.НачалоПериода КАК Начало,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковПериоды.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДанныеКадровойИстории,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковПериоды.КонецПериода ЕСТЬ NULL 
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ КадроваяИсторияСотрудниковПериоды.КонецПериода
	|	КОНЕЦ КАК Окончание,
	|	КадроваяИсторияСотрудниковПериоды.ВидСобытия,
	|	КадроваяИсторияСотрудниковПериоды.Подразделение,
	|	КадроваяИсторияСотрудниковПериоды.Организация КАК Филиал,
	|	КадроваяИсторияСотрудниковПериоды.Должность,
	|	КадроваяИсторияСотрудниковПериоды.ВидЗанятости,
	|	КадроваяИсторияСотрудниковПериоды.ЭтоГоловнойСотрудник,
	|	КадроваяИсторияСотрудниковПериоды.ДолжностьПоШтатномуРасписанию,
	|	КадроваяИсторияСотрудниковПериоды.КоличествоСтавок,
	|	КадроваяИсторияСотрудниковПериоды.ВидДоговора,
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники.Наименование,
	|	Сотрудники.ГоловнаяОрганизация КАК Организация,
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаФильтр.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковПериоды КАК КадроваяИсторияСотрудниковПериоды
	|		ПО (ТаблицаФильтр.Сотрудник = КадроваяИсторияСотрудниковПериоды.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Начало";
	
	ОбновленныеСотрудник = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Набор = РегистрыСведений.ДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		Набор.Отбор.ПоДоговоруГПХ.Установить(Ложь);
		
		ПерваяСтрокаНабора = Неопределено;
		Если Выборка.ЕстьДанныеКадровойИстории Тогда
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка, "Организация, ФизическоеЛицо, Наименование, Сотрудник");
			СтрокаНабора.Начало = '00010101';
			СтрокаНабора.ЭтоГоловнойСотрудник = Выборка.Сотрудник = Выборка.ГоловнойСотрудник;
			ПерваяСтрокаНабора = СтрокаНабора;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл			
			Если ПерваяСтрокаНабора <> Неопределено Тогда
				ПерваяСтрокаНабора.Окончание = НачалоДня(НачалоДня(Выборка.Начало) - 1);
				ПерваяСтрокаНабора = Неопределено;
			КонецЕсли;	
			
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			
			СтрокаНабора.ЭтоГоловнойСотрудник = Выборка.Сотрудник = Выборка.ГоловнойСотрудник;
			
			СтрокаНабора.ПоДоговоруГПХ = Ложь;
			СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;	
		КонецЦикла;	
		
		Набор.Записать();
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьРегистрТекущиеКадровыеДанныеПоИзменениямКадровойИстории(НаборЗаписей, ИзменившиесяДанныеКадровойИстории)	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФильтр.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));

	ИзменившиесяДанныеКадровойИстории.Сортировать("Сотрудник");          
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеКадровойИстории Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.Сотрудник <> СтрокаИзменений.Сотрудник Тогда
	
			СтрокаФильтра = ТаблицаФильтр.Добавить();
			СтрокаФильтра.Сотрудник = СтрокаИзменений.Сотрудник;
			СтрокаФильтра.ФизическоеЛицо = СтрокаИзменений.ФизическоеЛицо;
			СтрокаФильтра.Период = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			ПредыдущаяСтрока = СтрокаФильтра;
		КонецЕсли;		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаФильтр", ТаблицаФильтр);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФильтр.Сотрудник,
	|	ТаблицаФильтр.ФизическоеЛицо,
	|	ТаблицаФильтр.Период
	|ПОМЕСТИТЬ ВТТаблицаФильтр
	|ИЗ
	|	&ТаблицаФильтр КАК ТаблицаФильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФильтр.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаДляОбновления
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр";
	
	Запрос.Выполнить();
	
	ОписаниеФильта = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТаблицаФильтр", "Сотрудник");
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(
		Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя,    
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильта);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА &СохранитьДатыПриема = ИСТИНА
	|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОГДА ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ПериодЗаписи
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка)
	|				И ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ПериодПредыдущейЗаписи
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|	КОНЕЦ КАК ДатаПриема,
	|	ВЫБОР
	|		КОГДА ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковСрезПоследних.ДатаНачала, ДЕНЬ, -1)
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковСрезПоследних.ПериодЗаписи, ДЕНЬ, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриемаТекущееЗначениеРегисра,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольненияТекущееЗначениеРегисра,
	|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
	|	ВЫБОР
	|		КОГДА ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоИзмененныйСотрудник,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Организация
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
	|	КОНЕЦ КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ОрганизацияТекущееЗначениеРегисра,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Должность
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
	|	КОНЕЦ КАК ТекущаяДолжность,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.Подразделение
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
	|	КОНЕЦ КАК ТекущееПодразделение,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию
	|	КОНЕЦ КАК ТекущаяДолжностьПоШтатномуРасписанию,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидДоговора
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора
	|	КОНЕЦ КАК ТекущийВидДоговора,
	|	ВЫБОР
	|		КОГДА НЕ ИзмененныеСотрудники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
	|	КОНЕЦ КАК ТекущийВидЗанятости,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятостиТекущееЗначениеРегисра,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковСрезПоследних.Должность <> ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
	|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.Подразделение <> ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
	|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию <> ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию
	|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.ВидДоговора <> ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора
	|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости <> ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
	|				ИЛИ КадроваяИсторияСотрудниковСрезПоследних.Организация <> ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилисьКадровыеДанные
	|ИЗ
	|	ВТФизическиеЛицаДляОбновления КАК ФизическиеЛицаДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛицаДляОбновления.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаФильтр КАК ИзмененныеСотрудники
	|		ПО (Сотрудники.Ссылка = ИзмененныеСотрудники.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО (Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО (Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ГоловнаяОрганизация,
	|	ТекущаяОрганизация,
	|	ЭтоИзмененныйСотрудник,
	|	Сотрудник";
	
	СохранитьДатыПриема = НаборЗаписей.ДополнительныеСвойства.Свойство("СохранитьДатыПриема");
	Запрос.УстановитьПараметр("СохранитьДатыПриема", СохранитьДатыПриема);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СотрудникиДляОбновленияОсновныхРабочихМест = Новый Массив;
	
	РанееПринятыеФизическиеЛица = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл		
			НаборыТекущихКадровыхДанных = Новый Массив;			
			УстаноленПризнакОсновногоРабочегоМеста = Ложь;
			
			Пока Выборка.СледующийПоЗначениюПоля("ТекущаяОрганизация") Цикл
				ФизическоеЛицоРаботаетВОрганизации = Ложь;
				УстановленаРольСотрудника = Ложь;
				УдаленаРольСотрудника = Ложь;
				
				Пока Выборка.Следующий() Цикл														
					НаборТекущихКадровыхДанных = НаборТекущихКадровыеДанныеПоСотруднику(Выборка, Не УстаноленПризнакОсновногоРабочегоМеста); 
					
					Если НаборТекущихКадровыхДанных[0].ОсновноеРабочееМестоВОрганизации Тогда
						УстаноленПризнакОсновногоРабочегоМеста = Истина;
					КонецЕсли;	
					
					НаборыТекущихКадровыхДанных.Добавить(НаборТекущихКадровыхДанных);
																				
					УстановитьРольСотрудника(Выборка);
					
					Если ЗначениеЗаполнено(НаборТекущихКадровыхДанных[0].ТекущийВидЗанятости) Тогда
						ФизическоеЛицоРаботаетВОрганизации = Истина;
					КонецЕсли;	
					
					Если НеобходимоУстановитьРольРаботник(Выборка) Тогда
						УстановленаРольСотрудника = Истина;
					КонецЕсли;	
					
					Если НеобходимоУдалитьРольРаботник(Выборка) Тогда
						УдаленаРольСотрудника = Истина;
					КонецЕсли;
				КонецЦикла;	
				
				Если УстановленаРольСотрудника Тогда
					УстановитьРольФизическогоЛицаВОрганизации(Выборка.ФизическоеЛицо, Выборка.ТекущаяОрганизация, ФизическоеЛицоРаботаетВОрганизации);			
				ИначеЕсли УдаленаРольСотрудника Тогда
					УстановитьРольФизическогоЛицаВОрганизации(Выборка.ФизическоеЛицо, Выборка.ОрганизацияТекущееЗначениеРегисра, ФизическоеЛицоРаботаетВОрганизации);	
				КонецЕсли;	
							
			КонецЦикла;			
			
			ЗаписатьНаборыТекущихКадровыхДанных(НаборыТекущихКадровыхДанных, СотрудникиДляОбновленияОсновныхРабочихМест);				
		КонецЦикла;	
		
	КонецЦикла;	
	
	Если СотрудникиДляОбновленияОсновныхРабочихМест.Количество() > 0 Тогда
		ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиДляОбновленияОсновныхРабочихМест);
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаписатьНаборыТекущихКадровыхДанных(НаборыТекущихКадровыхДанных, СотрудникиДляОбновленияОсновныхРабочихМест)	
	УстаноленПризнакОсновногоРабочегоМеста =Ложь;
	
	СотрудникиСНеустановленнымВидомЗанятости = Новый Массив;
	
	Если НаборыТекущихКадровыхДанных.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(НаборыТекущихКадровыхДанных[0][0].ТекущийВидЗанятости) Тогда
			НаборыТекущихКадровыхДанных[0][0].ОсновноеРабочееМестоВОрганизации = Истина;
		КонецЕсли;
		
		УстаноленПризнакОсновногоРабочегоМеста = Истина;
	КонецЕсли;			
	
	НаборСМаксимальнойДатойУвольнения = Неопределено;
	Для Каждого Набор Из НаборыТекущихКадровыхДанных Цикл
		Если Набор[0].ОсновноеРабочееМестоВОрганизации Тогда
			УстаноленПризнакОсновногоРабочегоМеста = Истина;
		КонецЕсли;	
			
		Если (Набор[0].ТекущийВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
			Или Набор[0].ТекущийВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
			И ЗначениеЗаполнено(Набор[0].ДатаУвольнения) Тогда
			
			Если НаборСМаксимальнойДатойУвольнения = Неопределено Тогда
				НаборСМаксимальнойДатойУвольнения = Набор;
			ИначеЕсли Набор[0].ДатаУвольнения >= НаборСМаксимальнойДатойУвольнения[0].ДатаУвольнения Тогда
				НаборСМаксимальнойДатойУвольнения = Набор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Набор Из НаборыТекущихКадровыхДанных Цикл		
		Если Не ЗначениеЗаполнено(Набор[0].ТекущийВидЗанятости) Тогда
			Если Не ЗначениеЗаполнено(Набор[0].ДатаУвольнения) Тогда 
				СотрудникиСНеустановленнымВидомЗанятости.Добавить(Набор[0].Сотрудник);
			ИначеЕсли НаборСМаксимальнойДатойУвольнения = Неопределено Тогда
				СотрудникиСНеустановленнымВидомЗанятости.Добавить(Набор[0].Сотрудник);
			ИначеЕсли НаборСМаксимальнойДатойУвольнения[0].ДатаУвольнения < Набор[0].ДатаУвольнения Тогда	
				СотрудникиСНеустановленнымВидомЗанятости.Добавить(Набор[0].Сотрудник);	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если НаборСМаксимальнойДатойУвольнения <> Неопределено 
		И Не УстаноленПризнакОсновногоРабочегоМеста Тогда
		
		НаборСМаксимальнойДатойУвольнения[0].ОсновноеРабочееМестоВОрганизации = Истина;
		УстаноленПризнакОсновногоРабочегоМеста = Истина
	КонецЕсли;	
	
	Если Не УстаноленПризнакОсновногоРабочегоМеста Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДляОбновленияОсновныхРабочихМест, СотрудникиСНеустановленнымВидомЗанятости);
	КонецЕсли;
	
	Для Каждого Набор Из НаборыТекущихКадровыхДанных Цикл
		Если Набор.ДополнительныеСвойства.Записывать Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

Процедура УстановитьРольСотрудника(ВыборкаДанныхСотрудника)
	Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.Сотрудник.Установить(ВыборкаДанныхСотрудника.Сотрудник);
	Набор.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Работник);
	
	Если НеобходимоУдалитьРольРаботник(ВыборкаДанныхСотрудника)  Тогда 
		
		Набор.Записать();
	ИначеЕсли НеобходимоУстановитьРольРаботник(ВыборкаДанныхСотрудника) Тогда  	
		
		Запись = Набор.Добавить();
		Запись.Сотрудник = ВыборкаДанныхСотрудника.Сотрудник;
		Запись.РольСотрудника = Перечисления.РолиСотрудников.Работник;
		
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьРольФизическогоЛицаВОрганизации(ФизическоеЛицо, Организация, ФизическоеЛицоРаботаетВОрганизации)
	Набор = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Роль.Установить(Перечисления.РолиФизическихЛиц.Сотрудник);
	
	Если ФизическоеЛицоРаботаетВОрганизации  Тогда 
		Запись = Набор.Добавить();
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Запись.Организация = Организация;
		Запись.Роль = Перечисления.РолиФизическихЛиц.Сотрудник;
	
		Набор.Записать();
	Иначе  	
			
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры	
	
Функция НаборТекущихКадровыеДанныеПоСотруднику(ВыборкаДанныхСотрудника, УстанавливатьПризнакОсновногоРабочегоМеста)
	НаборТекущихКадровыхДанных = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	НаборТекущихКадровыхДанных.Отбор.Сотрудник.Установить(ВыборкаДанныхСотрудника.Сотрудник);
	СтрокаТекущихКадровыхДанных = НаборТекущихКадровыхДанных.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаТекущихКадровыхДанных, ВыборкаДанныхСотрудника);
			
	Если Не ЗначениеЗаполнено(СтрокаТекущихКадровыхДанных.ДатаУвольнения) 
		И УстанавливатьПризнакОсновногоРабочегоМеста
		И (СтрокаТекущихКадровыхДанных.ТекущийВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
		Или СтрокаТекущихКадровыхДанных.ТекущийВидЗанятости = Перечисления.ВидыЗанятости.Совместительство) Тогда
		
		СтрокаТекущихКадровыхДанных.ОсновноеРабочееМестоВОрганизации = Истина;
	Иначе
		СтрокаТекущихКадровыхДанных.ОсновноеРабочееМестоВОрганизации = Ложь;
	КонецЕсли;	
		
	Если СтрокаТекущихКадровыхДанных.ОсновноеРабочееМестоВОрганизации <> ВыборкаДанныхСотрудника.ОсновноеРабочееМестоВОрганизации
		Или СтрокаТекущихКадровыхДанных.ДатаУвольнения <> ВыборкаДанныхСотрудника.ДатаУвольненияТекущееЗначениеРегисра
		Или СтрокаТекущихКадровыхДанных.ДатаПриема <> ВыборкаДанныхСотрудника.ДатаПриемаТекущееЗначениеРегисра 
		Или (ВыборкаДанныхСотрудника.ЭтоИзмененныйСотрудник И ВыборкаДанныхСотрудника.ИзменилисьКадровыеДанные) Тогда
		
		НаборТекущихКадровыхДанных.ДополнительныеСвойства.Вставить("Записывать", Истина);
	Иначе
		НаборТекущихКадровыхДанных.ДополнительныеСвойства.Вставить("Записывать", Ложь);	
	КонецЕсли;					
	
	Возврат НаборТекущихКадровыхДанных;
КонецФункции	

Функция НеобходимоУстановитьРольРаботник(ВыборкаДанныхСотрудника)
	Если ЗначениеЗаполнено(ВыборкаДанныхСотрудника.ТекущийВидЗанятости)
		И Не ЗначениеЗаполнено(ВыборкаДанныхСотрудника.ВидЗанятостиТекущееЗначениеРегисра) Тогда 
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоУдалитьРольРаботник(ВыборкаДанныхСотрудника)
	
	Если ЗначениеЗаполнено(ВыборкаДанныхСотрудника.ВидЗанятостиТекущееЗначениеРегисра)
		И Не ЗначениеЗаполнено(ВыборкаДанныхСотрудника.ТекущийВидЗанятости) Тогда

		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

Процедура ОбновитьДанныеДляПодбораСотрудниковПриИзмененииКадровойИстории(НаборЗаписейКадровойИстории, Отказ, Замещение) Экспорт
	ИзменившиесяДанныеКадровойИстории = ЗарплатаКадрыПериодическиеРегистры.ТаблицаИзменившихсяДанныхНабора(НаборЗаписейКадровойИстории);
	
	Если ИзменившиесяДанныеКадровойИстории = Неопределено
		Или ИзменившиесяДанныеКадровойИстории.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;	
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ИзменившиесяДанныеКадровойИстории.Сортировать("Сотрудник");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеКадровойИстории Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.Сотрудник <> СтрокаИзменений.Сотрудник Тогда
	
			СтрокаФильтра = ТаблицаФильтр.Добавить();
			СтрокаФильтра.Сотрудник = СтрокаИзменений.Сотрудник;
			СтрокаФильтра.ДатаНачала = '00010101';
			СтрокаФильтра.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			ПредыдущаяСтрока = СтрокаФильтра;
		КонецЕсли;
			
	КонецЦикла;	

	ОбновитьРегистрДанныеДляПодбораСотрудников(ТаблицаФильтр);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаТекущихКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	ЧастиЗапроса = Новый Массив;
	
	Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеСотрудниковСоединениеУстановлено", Истина);
		
		СоедеинениеСТекущимиКадровымиДанными = 
			"		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник}";
		
		СоедеинениеСТекущимиКадровымиДанными = СтрЗаменить(СоедеинениеСТекущимиКадровымиДанными, "ВТТаблицаФильтр", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);	
		
		ЧастиЗапроса.Добавить(СоедеинениеСТекущимиКадровымиДанными);
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеГоловныхСотрудниковСоединениеУстановлено") <> Истина
		И ИсточникиДанных.Получить("ТекущиеКадровыеДанныеГоловныхСотрудников") <> Неопределено Тогда
		
		ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеГоловныхСотрудниковСоединениеУстановлено", Истина);
		
		ЧастиЗапроса.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеГоловныхСотрудников
			|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ГоловнойСотрудник = ТекущиеКадровыеДанныеГоловныхСотрудников.Сотрудник}");
		
	КонецЕсли;
	
	Если ЧастиЗапроса.Количество() > 0 Тогда
		
		ЧастиЗапроса.Вставить(0, Запрос.Текст);
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КадровыеДанныеДляТрудовогоДоговора() Экспорт
	
	КадровыеДанные = КадровыйУчетБазовый.КадровыеДанныеДляТрудовогоДоговора();
	
	КадровыеДанные = КадровыеДанные + ",
		|ДатаДоговораКонтракта,
		|НомерДоговораКонтракта,
		|СрочныйДоговор,
		|ДатаОкончания,
		|ОснованиеСрочногоДоговора,
		|ОснованиеПредставителя,
		|КоличествоДнейОсновногоОтпуска,
		|КоличествоДнейОтпускаЗаВредность,
		|КоличествоДнейСеверногоОтпуска,
		|ГрафикРаботы";
	
	Возврат КадровыеДанные;
	
КонецФункции

Функция ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(ОписаниеТарифнойСтавки) Экспорт
	
	ПредставлениеТарифнойСтавки = "";
	
	Если ЗначениеЗаполнено(ОписаниеТарифнойСтавки.ЗначениеОсновногоПоказателя) Тогда
		
		Если ЗначениеЗаполнено(ОписаниеТарифнойСтавки.ОсновнойПоказатель) Тогда
			
			ПредставлениеТарифнойСтавки = Строка(ОписаниеТарифнойСтавки.ОсновнойПоказатель);
			РеквизитыПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеТарифнойСтавки.ОсновнойПоказатель, "Точность,ТипПоказателя,ВидТарифнойСтавки");
			
			Точность = РеквизитыПоказателя.Точность;
			Денежный = (РеквизитыПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный);
			ВидТарифнойСтавки = РеквизитыПоказателя.ВидТарифнойСтавки;
			
		Иначе
			
			ПредставлениеТарифнойСтавки = Строка(ОписаниеТарифнойСтавки.Начисление);
			
			Точность = 2;
			Денежный = Истина;
			ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
			
		КонецЕсли;
		
		ПредставлениеТарифнойСтавки =
			ПредставлениеТарифнойСтавки + ": " + Формат(ОписаниеТарифнойСтавки.ЗначениеОсновногоПоказателя, "ЧДЦ=" + Точность + "; ЧГ=");
		
		Если Денежный Тогда
			
			ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='руб.'");
			
			Если ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='за час'");
			ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru='за день'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПредставлениеТарифнойСтавки = КадровыйУчетБазовый.ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(ОписаниеТарифнойСтавки);
	КонецЕсли;
	
	Возврат ПредставлениеТарифнойСтавки;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеТрудовогоДоговора(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников) Экспорт
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеДляТрудовогоДоговора();
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОснованиеПредставителя", НСтр("ru='Устава'"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ГрафикРаботы,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.СокращеннаяРабочаяНеделя КАК СокращеннаяРабочаяНеделя,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.НеполноеРабочееВремя КАК НеполноеРабочееВремя,
		|	СУММА(ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.ДеньВключенВГрафик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ОписаниеДлительностиРабочейНеделиВДнях,
		|	МАКСИМУМ(ДанныеОРабочихЧасах.Часов) КАК ПродолжительностьРабочегоДня
		|ПОМЕСТИТЬ ВТДанныеГрафиковРаботы
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников.ШаблонЗаполнения КАК ГрафикиРаботыСотрудников
		|		ПО КадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|			И (ГрафикиРаботыСотрудников.Ссылка.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафикаРаботы.ПоНеделям))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка КАК Ссылка,
		|			ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.НомерДняЦикла КАК НомерДняЦикла,
		|			СУММА(ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Часов) КАК Часов
		|		ИЗ
		|			Справочник.ГрафикиРаботыСотрудников.ДанныеОРабочихЧасах КАК ГрафикиРаботыСотрудниковДанныеОРабочихЧасах
		|		ГДЕ
		|			ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.ВидВремени.РабочееВремя
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка,
		|			ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.НомерДняЦикла) КАК ДанныеОРабочихЧасах
		|		ПО КадровыеДанныеСотрудников.ГрафикРаботы = ДанныеОРабочихЧасах.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КадровыеДанныеСотрудников.ГрафикРаботы,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.ДлительностьРабочейНедели,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.СокращеннаяРабочаяНеделя,
		|	КадровыеДанныеСотрудников.ГрафикРаботы.НеполноеРабочееВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафиковРаботы.ДлительностьРабочейНедели,
		|	ДанныеГрафиковРаботы.ОписаниеДлительностиРабочейНеделиВДнях,
		|	ДанныеГрафиковРаботы.СокращеннаяРабочаяНеделя,
		|	ДанныеГрафиковРаботы.НеполноеРабочееВремя,
		|	ДанныеГрафиковРаботы.ПродолжительностьРабочегоДня,
		|	КадровыеДанныеСотрудников.*
		|ПОМЕСТИТЬ ВТКадровыеДанныеТрудовогоДоговора
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиковРаботы КАК ДанныеГрафиковРаботы
		|		ПО КадровыеДанныеСотрудников.ГрафикРаботы = ДанныеГрафиковРаботы.ГрафикРаботы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Функция СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОСреднемЗаработке = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ПриказОбУвольнении,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ, -1), МЕСЯЦ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыРаботыСотрудниковПредварительно
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРаботы.Сотрудник,
		|	ПериодыРаботы.ПриказОбУвольнении,
		|	ПериодыРаботы.ДатаПриема,
		|	ПериодыРаботы.ДатаУвольнения,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) КАК НачалоТрехмесячногоПериода,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) > ПериодыРаботы.ДатаПриема
		|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботы.ДатаПриема
		|	КОНЕЦ КАК НачалоПериода,
		|	ПериодыРаботы.ОкончаниеПериода,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ) > ПериодыРаботы.ДатаПриема
		|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ, -2), МЕСЯЦ)
		|			ИНАЧЕ ПериодыРаботы.ДатаПриема
		|		КОНЕЦ, ПериодыРаботы.ОкончаниеПериода, МЕСЯЦ) + 1 КАК Месяцев
		|ПОМЕСТИТЬ ВТПериодыРаботыСотрудников
		|ИЗ
		|	ВТПериодыРаботыСотрудниковПредварительно КАК ПериодыРаботы";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыРаботыСотрудников.Сотрудник,
		|	ПериодыРаботыСотрудников.НачалоТрехмесячногоПериода КАК ДатаНачалаПериода,
		|	ПериодыРаботыСотрудников.ОкончаниеПериода КАК ДатаОкончанияПериода
		|ИЗ
		|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	УчетРабочегоВремениРасширенный.СоздатьВТВремяПоГрафикамСотрудников(ТаблицаСотрудников, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыРаботыСотрудников.Сотрудник,
		|	ПериодыРаботыСотрудников.НачалоТрехмесячногоПериода,
		|	ПериодыРаботыСотрудников.ОкончаниеПериода,
		|	ВремяПоГрафикамСотрудников.НормаДней,
		|	ВремяПоГрафикамСотрудников.НормаЧасов
		|ИЗ
		|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикамСотрудников КАК ВремяПоГрафикамСотрудников
		|		ПО ПериодыРаботыСотрудников.Сотрудник = ВремяПоГрафикамСотрудников.Сотрудник";
	
	ДанныеОПлановомВремени = Запрос.Выполнить().Выгрузить();
	
	СписокДокументов = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДанныеСотрудников, "ПриказОбУвольнении");
	Если СписокДокументов.Количество() = 0 Тогда
		ИмяДокумента = "Увольнение";
	Иначе
		ИмяДокумента = СписокДокументов[0].Метаданные().Имя;
	КонецЕсли;
	
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке(ИмяДокумента, СписокДокументов);
	
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеОНачислениях    = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		ДанныеОВремени        = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		ДанныеОбИндексации    = УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], "Ссылка", ДанныеСотрудника.ПриказОбУвольнении);
		
		ДанныеОПлановомВремениСотрудника = ДанныеОПлановомВремени.Найти(ДанныеСотрудника.Сотрудник, "Сотрудник");
		
		Если ДанныеОПлановомВремениСотрудника <> Неопределено Тогда
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
			ДополнительныеПараметры.ДатаНачалаСобытия = ДанныеСотрудника.ДатаУвольнения;
			ДополнительныеПараметры.НачалоПериода = ДанныеОПлановомВремениСотрудника.НачалоТрехмесячногоПериода;
			ДополнительныеПараметры.ОкончаниеПериода = ДанныеОПлановомВремениСотрудника.ОкончаниеПериода;
			
			ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
			УчтеноВремени = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено"); 
			УчтеноЗаработок = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено");
			
			Если УчтеноВремени = 0 Тогда
				
				ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
				ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
				ДополнительныеПараметры.ДатаНачалаСобытия = ДанныеСотрудника.ДатаУвольнения;
				ДополнительныеПараметры.НачалоПериода = НачалоМесяца(ДанныеСотрудника.ДатаУвольнения);
				ДополнительныеПараметры.ОкончаниеПериода = ДанныеСотрудника.ДатаУвольнения;
				
				ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
				УчтеноВремени = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.ОтработанноеВремя, "Учтено"); 
				УчтеноЗаработок = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднего.Заработок, "Учтено");
				
			КонецЕсли;
			
			Если УчтеноВремени > 0 Тогда
				СведенияОСреднемЗаработке.Вставить(ДанныеСотрудника.Сотрудник, УчтеноЗаработок / УчтеноВремени * ДанныеОПлановомВремениСотрудника.НормаДней / 3);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СведенияОСреднемЗаработке;
	
КонецФункции

Функция СведенияОГрафикахРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОГрафикахРаботы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.ДатаПриема > ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|			ТОГДА КадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|	КОНЕЦ КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТСотрудникиДаты", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы,
		|	МИНИМУМ(ГрафикРаботыСотрудниковПоследующие.Период) КАК ПериодПоследующий
		|ПОМЕСТИТЬ ВТГрафикиРабоотыСПоследующимиПериодами
		|ИЗ
		|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудниковПоследующие
		|		ПО ГрафикРаботыСотрудников.Сотрудник = ГрафикРаботыСотрудниковПоследующие.Сотрудник
		|			И ГрафикРаботыСотрудников.Период < ГрафикРаботыСотрудниковПоследующие.Период
		|			И ГрафикРаботыСотрудников.ГрафикРаботы <> ГрафикРаботыСотрудниковПоследующие.ГрафикРаботы
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРабоотыСПоследующимиПериодами.Сотрудник КАК Сотрудник,
		|	ГрафикиРабоотыСПоследующимиПериодами.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
		|				И НЕ ГрафикиРаботыСотрудников.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПериодРаботыСПолнымРабочимДнем,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыСотрудников.РабочихДнейВНеделе <> 0
		|			ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНедели / ГрафикиРаботыСотрудников.РабочихДнейВНеделе
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Часов,
		|	ГрафикиРаботыСотрудников.РабочихДнейВНеделе КАК Дней,
		|	МИНИМУМ(ГрафикиРабоотыСПоследующимиПериодами.Период) КАК НачалоПериода,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ГрафикиРабоотыСПоследующимиПериодами.ПериодПоследующий, ДЕНЬ, -1), КадровыеДанныеСотрудников.ДатаУвольнения) КАК ОкончаниеПериода
		|ИЗ
		|	ВТГрафикиРабоотыСПоследующимиПериодами КАК ГрафикиРабоотыСПоследующимиПериодами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ГрафикиРабоотыСПоследующимиПериодами.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ГрафикиРабоотыСПоследующимиПериодами.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРабоотыСПоследующимиПериодами.Сотрудник,
		|	ГрафикиРабоотыСПоследующимиПериодами.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НЕ ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
		|				И НЕ ГрафикиРаботыСотрудников.НеполноеРабочееВремя
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели,
		|	ГрафикиРаботыСотрудников.РабочихДнейВНеделе,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ГрафикиРабоотыСПоследующимиПериодами.ПериодПоследующий, ДЕНЬ, -1), КадровыеДанныеСотрудников.ДатаУвольнения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НачалоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ГрафикиСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СведенияОГрафике = Новый Структура("Часов,Дней,НачалоПериода,ОкончаниеПериода,ПериодРаботыСПолнымРабочимДнем");
			ЗаполнитьЗначенияСвойств(СведенияОГрафике, Выборка);
			ГрафикиСотрудника.Добавить(СведенияОГрафике);
			
		КонецЦикла;
		
		СведенияОГрафикахРаботы.Вставить(Выборка.Сотрудник, ГрафикиСотрудника);
		
	КонецЦикла;
	
	Возврат СведенияОГрафикахРаботы;
	
КонецФункции

Функция СведенияОПериодахНеРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников) Экспорт
	
	СведенияОПериодахНеРаботы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.ДатаПриема > ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|			ТОГДА КадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаУвольнения, ГОД, -1)
		|	КОНЕЦ КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос.Выполнить();
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыСостоянийСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА СотрудникиПериоды.ДатаНачала > ПериодыСостоянийСотрудников.Начало
		|			ТОГДА СотрудникиПериоды.ДатаНачала
		|		ИНАЧЕ ПериодыСостоянийСотрудников.Начало
		|	КОНЕЦ КАК НачалоПериода,
		|	ПериодыСостоянийСотрудников.Окончание КАК ОкончаниеПериода,
		|	ПериодыСостоянийСотрудников.Состояние КАК ПричинаОтсутствия
		|ИЗ
		|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО ПериодыСостоянийСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник
		|ГДЕ
		|	НЕ ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа), ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НачалоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыНеработы = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ПериодНеРаботы = Новый Структура("НачалоПериода,ОкончаниеПериода,ПричинаОтсутствия");
			ЗаполнитьЗначенияСвойств(ПериодНеРаботы, Выборка);
			ПериодыНеработы.Добавить(ПериодНеРаботы);
			
		КонецЦикла;
		
		СведенияОПериодахНеРаботы.Вставить(Выборка.Сотрудник, ПериодыНеработы);
		
	КонецЦикла;
	
	Возврат СведенияОПериодахНеРаботы;
	
КонецФункции

Процедура ЗаполнитьДатыПриемаУвольненияДляПодработок(ПараметрыОбновления = НеОпределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник,
	|	НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) КАК ДатаПриема,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудников.ДействуетДо, ДЕНЬ, -1), ДЕНЬ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДатыСобытийПодработок
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|	И КадроваяИсторияСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка)
	|	И КадроваяИсторияСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСобытийПодработок.Сотрудник,
	|	ДатыСобытийПодработок.ДатаПриема,
	|	ДатыСобытийПодработок.ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
	|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию,
	|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости,
	|	ТекущиеКадровыеДанныеСотрудников.УдалитьТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяТерритория
	|ИЗ
	|	ВТДатыСобытийПодработок КАК ДатыСобытийПодработок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ДатыСобытийПодработок.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|			И (ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДатыСобытийПодработок.ДатаПриема
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДатыСобытийПодработок.ДатаУвольнения)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ТекущиеКадровыеДанныеСотрудников", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		
		Набор.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьРолиВОрганизацииДляУволенныхСотрудников(ПараметрыОбновления = НеОпределено) Экспорт
	ВидыЗанятости = Новый Массив;
	ВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	ВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЗанятости", ВидыЗанятости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
	|	НЕ РолиСотрудников.РольСотрудника ЕСТЬ NULL  КАК УстановленаРольСотрудника,
	|	НЕ РолиФизическихЛиц.Роль ЕСТЬ NULL  КАК УстановленаРольФизическогоЛица
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
	|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РолиФизическихЛиц.ФизическоеЛицо
	|			И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = РолиФизическихЛиц.Организация
	|			И (РолиФизическихЛиц.Роль = ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.Сотрудник))
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости В(&ВидыЗанятости)
	|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (РолиСотрудников.РольСотрудника ЕСТЬ NULL 
	|			ИЛИ РолиФизическихЛиц.Роль ЕСТЬ NULL )";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);	
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.УстановленаРольСотрудника Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РолиСотрудников", "Сотрудник", Выборка.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;

			НаборПоСотруднику = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
			НаборПоСотруднику.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборПоСотруднику.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Работник);
			НаборПоСотруднику.ОбменДанными.Загрузка = Истина;
			
			СтрокаНабора = НаборПоСотруднику.Добавить();
			СтрокаНабора.Сотрудник = Выборка.Сотрудник;
			СтрокаНабора.РольСотрудника = Перечисления.РолиСотрудников.Работник;
			
			НаборПоСотруднику.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;	
	КонецЦикла;	
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.УстановленаРольФизическогоЛица Тогда
			Если НЕ ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РолиФизическихЛиц", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;

			НаборПоФизическомуЛицу = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
			НаборПоФизическомуЛицу.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборПоФизическомуЛицу.Отбор.Роль.Установить(Перечисления.РолиФизическихЛиц.Сотрудник);
			НаборПоФизическомуЛицу.Отбор.Организация.Установить(Выборка.ТекущаяОрганизация);
			НаборПоФизическомуЛицу.ОбменДанными.Загрузка = Истина;
			
			СтрокаНабора = НаборПоФизическомуЛицу.Добавить();
			СтрокаНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			СтрокаНабора.Организация = Выборка.ТекущаяОрганизация;
			СтрокаНабора.Роль = Перечисления.РолиФизическихЛиц.Сотрудник;
			СтрокаНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			
			НаборПоФизическомуЛицу.Записать();
		КонецЕсли;	
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений) Экспорт
	
	// сначала просто удалим дубли
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник, ФлагИзменений");
	
	// теперь определим организации которые были добавлены в наборы и которые были удалены	
	ТаблицаАнализаИзменений.Свернуть("Организация, Сотрудник", "ФлагИзменений");
	
	СтруткураПоиска = Новый Структура("ФлагИзменений");
	
	СтруткураПоиска.ФлагИзменений = 1;
	ДобавляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруткураПоиска), "Организация, Сотрудник");
	
	Для Каждого ОрганизацияСотрудника Из ДобавляемыеОрганизацииСотрудников Цикл
		
		Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(ОрганизацияСотрудника.Организация);
		Набор.Отбор.Сотрудник.Установить(ОрганизацияСотрудника.Сотрудник);
		
		СтрокаНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ОрганизацияСотрудника);
		Набор.Записать();
		
	КонецЦикла;
	
	СтруткураПоиска.ФлагИзменений = -1;
	УдаляемыеОрганизацииСотрудников = ТаблицаАнализаИзменений.Скопировать(ТаблицаАнализаИзменений.НайтиСтроки(СтруткураПоиска), "Организация, Сотрудник");
	
	Если УдаляемыеОрганизацииСотрудников.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УдаляемыеОрганизацииСотрудников", УдаляемыеОрганизацииСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|	УдаляемыеОрганизацииСотрудников.Организация КАК Организация
			|ПОМЕСТИТЬ ВТУдаляемыеОрганизацииСотрудников
			|ИЗ
			|	&УдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
			|	ВложенныйЗапрос.Организация КАК Организация
			|ИЗ
			|	(ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник КАК Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация КАК Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|					ГДЕ
			|						КадроваяИсторияСотрудников.Сотрудник = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И КадроваяИсторияСотрудников.Организация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК Удалять
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|					ГДЕ
			|						ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		УдаляемыеОрганизацииСотрудников.Сотрудник,
			|		УдаляемыеОрганизацииСотрудников.Организация,
			|		ВЫБОР
			|			КОГДА 1 В
			|					(ВЫБРАТЬ
			|						1 КАК Поле1
			|					ИЗ
			|						Справочник.Сотрудники КАК Сотрудники
			|					ГДЕ
			|						Сотрудники.Ссылка = УдаляемыеОрганизацииСотрудников.Сотрудник
			|						И Сотрудники.ГоловнаяОрганизация = УдаляемыеОрганизацииСотрудников.Организация)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|	ИЗ
			|		ВТУдаляемыеОрганизацииСотрудников КАК УдаляемыеОрганизацииСотрудников) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Сотрудник,
			|	ВложенныйЗапрос.Организация
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВложенныйЗапрос.Удалять) = ИСТИНА";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииСотрудников(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииВКоторыхРаботалиСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники КАК ОрганизацииВКоторыхРаботалиСотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Ссылка,
			|	Сотрудники.ГоловнаяОрганизация
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники", "", "");
		
		Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

#КонецОбласти
