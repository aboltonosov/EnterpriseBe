////////////////////////////////////////////////////////////////////////////////
// РаспределенноеВыполнениеКоманд: управление выполнением команд внещних
// (дополнительных) обработок в прикладных информационных базах.
////////////////////////////////////////////////////////////////////////////////

// Экспортные процедуры и функции для вызова из других модулей
// 
#Область ПрограммныйИнтерфейс

// Вызывает команду указанной дополнительной обработки и передает в нее параметры,
// регистрирует сообщение для МС с результатами выполнения.
// Важно! Вызывается как фоновое задание.
//
// Параметры:
//
Процедура ВыполнитьКомандуДополнительнойОбработки(ИдентификаторОбработки, ИдентификаторКоманды, ИдентификаторОперации) Экспорт
	
	ОшибкаВыполнения = Ложь;
	РезультатВыполнения = "";
	
	// Ищем версию дополнительной обработки.
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПоставляемыеДополнительныеОтчетыИОбработки.Ссылка КАК ПоставляемаяОбработка,
	|	ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.ИспользуемаяОбработка КАК Ссылка
	|ИЗ
	|	Справочник.ПоставляемыеДополнительныеОтчетыИОбработки КАК ПоставляемыеДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных КАК ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных
	|		ПО ПоставляемыеДополнительныеОтчетыИОбработки.Ссылка = ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.ПоставляемаяОбработка
	|ГДЕ
	|	ПоставляемыеДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ
	|	И ПоставляемыеДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", Строка(ИдентификаторОбработки));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Событие = ИмяСобытияЖурналаРегистрации() + ".";
	Событие = Событие + НСтр("ru = 'Начало выполнения команды'"); 
	Комментарий = "Начинаем выполнение команды %1 (обработка %2, вызов %3).";
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ИдентификаторКоманды, 
																	ИдентификаторОбработки, ИдентификаторОперации);
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Информация,,, Комментарий);
	
	Если Выборка.Следующий() Тогда
		
		ПараметрыВыполнения = Новый Структура();
		ПараметрыВыполнения.Вставить("ДополнительнаяОбработкаСсылка", Выборка.Ссылка);
		ПараметрыВыполнения.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
		
		Попытка
			
			РезультатОбработки = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыВыполнения);
			РезультатВыполнения = "Команда выполнена успешно.";
			
			Событие = ИмяСобытияЖурналаРегистрации() + ".";
			Событие = Событие + НСтр("ru = 'Завершение выполнения команды'"); 
			Комментарий = "Выполнение команды %1 (обработка %2, вызов %3) завершено.";
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ИдентификаторКоманды, 
			ИдентификаторОбработки, ИдентификаторОперации);
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Информация,,, Комментарий);	
			
		Исключение
			ОшибкаВыполнения = Истина;
			Событие = НСтр("ru = 'Ошибка выполнения команды'"); 
			Комментарий = НСтр("ru = 'При выполнении команды возникла ошибка'"); 
			ТекстОшибки = ОписаниеОшибки();
			СделатьЗаписьОбОшибке(Событие, Комментарий, ТекстОшибки);
			РезультатВыполнения = Комментарий + ": " + ТекстОшибки;
		КонецПопытки; 
	Иначе
		ОшибкаВыполнения = Истина;
		Событие = НСтр("ru = 'Обработка не найдена'"); 
		Комментарий = НСтр("ru = 'Не удалось найти внешнюю обработку по идентификатору'"); 
		ТекстОшибки = Строка(ИдентификаторОбработки);
		СделатьЗаписьОбОшибке(Событие, Комментарий, ТекстОшибки);
		РезультатВыполнения = Комментарий + ": " + ТекстОшибки;
	КонецЕсли; 
	
	ТипСообщения = СообщенияРаспределенноеВыполнениеКомандИнтерфейс.ТипОбратныйВызов();
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
	Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Сообщение.Body.Call_ID = ИдентификаторОперации;
	Сообщение.Body.Error = ОшибкаВыполнения;
	Сообщение.Body.ResultInfo = РезультатВыполнения;
	
	// Сообщаем результат выполнения Менеджеру Сервиса.
	
	НачатьТранзакцию();
	
	Получатель = РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса();
	СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, Получатель, Истина);	
	
    ЗафиксироватьТранзакцию();

КонецПроцедуры // ВыполнитьКомандуДополнительнойОбработки() 

#КонецОбласти  

// Экспортные процедуры и функции для вызова из других модулей подсистемы.

// Важно! Служебный программный интерфейс может существенно изменяться со временем.
// 
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает адрес временного хранилища для передачи с сервера на клиент
// информации о последней возникшей ошибки.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка   - сформированный адрес
//
Функция АдресТекущейОшибки() Экспорт

	Возврат Новый УникальныйИдентификатор("e4c776e8-25a2-4958-98b3-0401533c63cb");

КонецФункции // АдресТекущейОшибки() 

// Возвращает ключ, который используется для хранения настроек обработки в "безопасном хранилище".
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка   - ключ для записи/чтения в "безопасном хранилище"
//
Функция КлючБезопасногоХранилища() Экспорт

	Возврат "ПараметрыПакетногоВызова";

КонецФункции // КлючБезопасногоХранилища() 

// Возвращает старшее имя события для записей в ЖР
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка   - имя события
//
Функция ИмяСобытияЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Пакетное выполнение команд'"); 

КонецФункции // ИмяСобытияЖурналаРегистрации() 

// Записывает в журнал регистрации информацию об ошибке
//
// Параметры:
//	ИмяСобытия - Строка - Младшее имя события в ЖР 
//	Комментарий - Строка - Информация о типе ошибки 
//	ТекстОшибки - Строка - Техническая информация, полученная в Исключении 
//	Данные - Произвольный - Для записи в одноименное поле журнала 
//
Процедура СделатьЗаписьОбОшибке(ИмяСобытия, Комментарий, ТекстОшибки, Данные = Неопределено) Экспорт

	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий + ": %1", ТекстОшибки);
	Событие = ИмяСобытияЖурналаРегистрации() + "." + ИмяСобытия;
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	
	ЗаписьЖурналаРегистрации(Событие, Уровень,, Данные, Комментарий);
	ПоместитьВоВременноеХранилище(Комментарий, АдресТекущейОшибки()); 

КонецПроцедуры // СделатьЗаписьОбОшибке() 

#КонецОбласти 
