
#Область ПрограммныйИнтерфейс

// Возвращает истину в том случае, если есть активное фоновое задание
// закрытия месяца.
//
// Возвращаемое значение:
//	Булево - Истина, если задание активно, ложь - в противном случае.
Функция ФоновоеЗаданиеЗакрытияМесяцаАктивно() Экспорт
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", ИмяФоновогоЗадания());
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	ЕстьАктивноеЗадание = ?(АктивныеЗадания.Количество() > 0, Истина, Ложь);
	Возврат ЕстьАктивноеЗадание;
КонецФункции

// Выполняет закрытие месяца в фоновом задании.
//
// Параметры:
//	ПараметрыЗадания - Структура - Параметры расчета в фоне.
//
// Возвращаемое значение:
//	Булево - Признак успешного запуска задания.
Функция РассчитатьВФоновомЗадании(ПараметрыЗадания) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется закрытие месяца'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗадания);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("ЗакрытиеМесяцаУТВызовСервера.РассчитатьЭтапы");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = ИмяФоновогоЗадания();
	
	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
	ЗапускУспешен = Истина;
	Возврат ЗапускУспешен;
КонецФункции

// Производит расчет этапов закрытия месяца на сервере.
// Выполняется в фоновом задании. Вызывается из метода РассчитатьВФоновомЗадании().
//
//	Параметры:
//		ПараметрыРасчета - Структура - Содержит в себе имена этапов к расчету и параметры расчета.
Процедура РассчитатьЭтапы(ПараметрыРасчета) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	НачалоРасчета = ТекущаяДата();
	СостоянияЭтапов = Неопределено;
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ЭтапыКРасчету = ПолучитьЭтапыКРасчету(ПараметрыРасчета);
	Если НЕ ПараметрыРасчета.Свойство("СписокПодразделений") Тогда
		ПараметрыРасчета.Вставить("СписокПодразделений", СписокПодразделений());
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("СостоянияЭтапов", СостоянияЭтапов) Тогда
		СостоянияЭтапов = СостоянияЭтапов(ПараметрыРасчета);
	КонецЕсли;
	
	Счетчик = 1;
	Граница = ЭтапыКРасчету.Количество();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		// если это первый этап, то его финальный статус уже известен
		Если Счетчик > 1 Тогда
			Состояние = ОперацииЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап);
			СостоянияЭтапов.Вставить(Этап, Состояние);
		КонецЕсли;
		Если Счетчик = Граница ИЛИ ( // конечный этап рассчитывается в любом случае.
				СостоянияЭтапов[Этап] <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
				И СостоянияЭтапов[Этап] <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
				И СостоянияЭтапов[Этап] <> Неопределено // этап уже рассчитан, повторный пересчет не нужен.
			)
		Тогда
			РассчитатьЭтап(Этап, ПараметрыРасчета, Отказ);
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	КонецРасчета = ТекущаяДата();
	
	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("РасчитанЭтап", Этап);
	РезультатРасчета.Вставить("Отказ", Отказ);
	РезультатРасчета.Вставить("НачалоРасчета", НачалоРасчета);
	РезультатРасчета.Вставить("КонецРасчета", КонецРасчета);
	
	ПараметрыРасчета.Вставить("Отказ", Отказ);
	ПоместитьВоВременноеХранилище(РезультатРасчета, ПараметрыРасчета.АдресХранилища);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Функция формирует текст запроса для определения состояния отражения документов в регл.учете.
//
// Параметры:
// УчитыватьНДС - Булево - признак проверки необходимости отразить движения по НДС
//
// Возвращаемое значение:
//	Строка - Содержит текст запроса для определения состояния отражения документов.
//
Функция ТекстЗапросаСостояниеОтраженияДокументов(УчитыватьНДС = Истина) Экспорт
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	(
	//++ НЕ УТ
	|	ВЫБРАТЬ
	|		ДанныеРегистра.ДатаОтражения КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		&ИспользоватьРеглУчет
	|		И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|		И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|		И ДанныеРегистра.ДатаОтражения <= &ДатаОкончания
	|		И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//-- НЕ УТ
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный КАК ДанныеРегистра
	|	ГДЕ
	|		&УчитыватьНДС
	|		И ДанныеРегистра.РегламентнаяОперация
	|		И ДанныеРегистра.Период <= &ДатаОкончания
	|		И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	) КАК ДанныеРегистра
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	(
	//++ НЕ УТ
	|	ВЫБРАТЬ
	|		ДанныеРегистра.ДатаОтражения КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		&ИспользоватьРеглУчет
	|		И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|		И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|		И ДанныеРегистра.ДатаОтражения <= &ДатаОкончания
	|		И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//-- НЕ УТ
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Месяц КАК Период,
	|		ДанныеРегистра.СчетФактура КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.Месяц <= &ДатаОкончания
	|		И &УчитыватьНДС
	|		И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	) КАК ДанныеРегистра
	|	
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаВеденияРеглУчета КАК ДатаНачалаВеденияРеглУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&ИспользоватьРеглУчет
	|	И ДанныеРегистра.ДатаОтражения >= ДатаНачалаВеденияРеглУчета.Значение
	|	И ДанныеРегистра.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|	И ДанныеРегистра.ДатаОтражения <= &ДатаОкончания
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) > 0
	//-- НЕ УТ
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИспользоватьРеглУчет", ?(ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"), "ИСТИНА", "ЛОЖЬ"));
	Возврат СтрЗаменить(ТекстЗапроса, "&УчитыватьНДС", ?(УчитыватьНДС, "ИСТИНА", "ЛОЖЬ"));
	
КонецФункции

// Проверяет статус указанного фонового задания.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ фонового задания.
// Возвращаемое значение: 
//  Структура - Содержит статусы проверяемого фонового задания
Функция ПроверитьФоновоеЗадание(Знач КлючЗадания) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ОтмененоИлиНеНайдено", Ложь);
	Результат.Вставить("УспешноВыполнено", Ложь);
	Результат.Вставить("ЕщеВыполняется", Ложь);
	Результат.Вставить("ВыполненоСОшибками", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Начало", "");
	Результат.Вставить("Конец", "");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.ЕщеВыполняется = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.УспешноВыполнено = Истина;
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ВыполненоСОшибками = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(АктивныеЗадания[0].ИнформацияОбОшибке);
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает статус фонового задания по закрытию месяца
//
// Возвращаемое значение:
//	Структура - см. метод ЗакрытиеМесяцаУТВызовСервера.ПроверитьФоновоеЗадание()
Функция СостояниеЗаданияЗакрытияМесяца() Экспорт
	ИмяФоновогоЗадания = ИмяФоновогоЗадания();
	Возврат ПроверитьФоновоеЗадание(ИмяФоновогоЗадания);
КонецФункции

// Возвращает признак активности фонового задания закрытия месяца.
//	ВозвращаемоеЗначение: 
//		Булево - Истина/Ложь в зависимости от того, активно фоновое задание закрытие месяца или нет.
Функция АктивноЗаданиеЗакрытияМесяца() Экспорт
	Результат = ЗакрытиеМесяцаУТВызовСервера.СостояниеЗаданияЗакрытияМесяца();
	Возврат ?(Результат.ЕщеВыполняется = Истина, Истина, Ложь);
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач КлючЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(КлючЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() = 0
		ИЛИ АктивныеЗадания[0].Состояние <> СостояниеФоновогоЗадания.Активно
	Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(АктивныеЗадания[0].УникальныйИдентификатор);
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗакрытиеМесяца.Отмена выполнения фонового задания'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ЗакрытиеМесяцаУТВызовСервера,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	ОперацияРасчета - Перечисление.ТипыОперацийЗакрытияМесяца - Имя операции.
//	КонецРасчета - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	НомерЗадания - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//							Записи выбираются только те, которые <= указанного номера задания.
//	СписокОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, СписокОрганизаций = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)
	|");
	
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", ОперацияРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(СписокОрганизаций));
	Если Не ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
КонецФункции

// Функция формирует тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных: РегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//
// Возвращаемое значение:
//	Структура
//		- ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//			Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//		- ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//			Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистраНакопления(МетаданныеРегистра) Экспорт
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	Записи.Период КАК Период,
	|	Записи.Регистратор КАК Регистратор,
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	Записи.Регистратор = &Регистратор";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период,
	|	Таблица.Регистратор,
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеЗаписи.Период КАК Период,
	|		НачальныеЗаписи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Записи.Период КАК Период,
	|		Записи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		Записи.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Регистратор";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	
	Для каждого ИзмерениеРегистра из МетаданныеРегистра.Измерения Цикл
		
		ТекстПоля = "." + ИзмерениеРегистра.Имя + " КАК " + ИзмерениеРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + ИзмерениеРегистра.Имя);
		
	КонецЦикла;
	
	Для каждого РесурсРегистра из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстПоля = "." + РесурсРегистра.Имя + " КАК " + РесурсРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") КАК " + РесурсРегистра.Имя); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") <> 0");
		
	КонецЦикла;
	
	Для каждого РеквизитРегистра из МетаданныеРегистра.Реквизиты Цикл
		
		ТекстПоля = "." + РеквизитРегистра.Имя + " КАК " + РеквизитРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + РеквизитРегистра.Имя);
		
	КонецЦикла;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", "ТаблицаИзменений"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + "," + Символы.ПС + Символы.Таб + ТекстВыборкиПолейГруппировки;
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	
	Возврат Новый Структура("ТекстВыборкиНачальныхДанных, ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиНачальныхЗаписей, ТекстЗапросаВыборкиИзменений);
	
КонецФункции

// Возвращает имя уникального фонового задания закрытия месяца
//
// Возвращаемое значение:
//	Строка - Имя фонового залания с разделителем сеанса.
Функция ИмяФоновогоЗадания() Экспорт
	Возврат "ЗакрытиеМесяца_" + РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
КонецФункции

#Область СостоянияЭтапов

// Определяет необходимость распределения в данном периоде для указанных организаций.
// Параметры:
//	СписокОрганизаций - Массив - Список организаций для контроля.
//	Период - Дата - Период контроля.
//
// ВозвращаемоеЗначение:
//	Перечисление.СостоянияОперацийЗакрытияМесяца - Значения: ВыполненоУспешно, НеВыполнено, НеТребуется.
Функция СостояниеРаспределениеНДС(СписокОрганизаций, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц = &Период
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ) = &Период 
	|	И РаспределениеНДС.Проведен
	|	И (РаспределениеНДС.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|";
	
	Запрос.УстановитьПараметр("Период",             Период);
	Запрос.УстановитьПараметр("Операция",           Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(СписокОрганизаций));
	
	Результат = Запрос.ВыполнитьПакет();
	ЕстьЗаданияКРасчету  = НЕ Результат[0].Пустой();
	ЕстьРаспределениеНДС = НЕ Результат[1].Пустой();
	
	Если ЕстьЗаданияКРасчету Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьРаспределениеНДС Тогда 
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

//++ НЕ УТ

// Метод рассчитывает доли списания косвенных расходов.
//
// Параметры:
//  СписокОрганизаций - Массив - Массив организаций к расчету.
//  Период - Дата - Месяц, в котором производится расчет.
//
// Возвращаемое значение:
//	Перечисления.СостоянияОперацийЗакрытияМесяца - Состояние этапа.
Функция СостояниеРасчетДолейСписанияКосвенныхРасходов(СписокОрганизаций, Период) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РегламентнаяОперация.ТекстРасчетаДолейСписанияКосвенныхРасходов();
	
	ТипыСубконто = Новый Массив;
	ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ТипыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	МассивОрганизаций = ?(ЗначениеЗаполнено(СписокОрганизаций), СписокОрганизаций, Справочники.Организации.ДоступныеОрганизации(Истина));
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТипыСубконто", ТипыСубконто);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[4].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли НЕ Результат[5].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции
//-- НЕ УТ
#КонецОбласти // СостоянияЭтапов

#Область ЗаданияКЗакрытиюМесяца

// Возвращает текущее значение константы "НомерЗаданияКЗакрытиюМесяца" в целях определения для какого номера задания будет производиться пересчет.
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущийНомерЗадания = Константы.НомерЗаданияКЗакрытиюМесяца.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТекущийНомерЗадания;
КонецФункции

// Увеличивает на 1 значение константы "НомерЗаданияКЗакрытиюМесяца". Вызывается, когда в информационной базе изменены расчетные данные и в регистр
//	"ЗаданияКЗакрытиюМесяца" записывается необходимость об актуализации какого-либо вида расчета.
//
// Параметры:
//	ТекущийНомер - Число - см. ТекущийНомерЗадания().
//
// Возвращаемое значение:
//	Число - Исходный номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	НомерДоРасчета = 0;
	Попытка
		
		НомерДоРасчета = ТекущийНомерЗадания();
		Константы.НомерЗаданияКЗакрытиюМесяца.Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = 'Значение константы'") + " = " + НомерДоРасчета;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗакрытиеМесяца'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ИнформацияОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НомерДоРасчета;
КонецФункции

// Считывает записи регистра "Задания к закрытию месяца" во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	ОкончаниеПериода - Период - Конец периода выборки данных.
//	Организации - Массив, СправочникСсылка.Организации - Фильтр по организации.
//	Операция - Перечисление.ТипыОперацийЗакрытияМесяца - Фильтр по типу операции.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации, Операция) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к закрытию месяца",
// если текущий документ изменяет записи в оперативных регистрах.
// Параметры:
//	Документ - Документ.Ссылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
Процедура ОтразитьЗаданияКЗакрытиюМесяца(Документ, ДополнительныеСвойства) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	КоллекцияКонтрольныхРегистров = КоллекцияКонтрольныхРегистров();
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Операция     КАК Операция,
	|	Таблица.Документ     КАК Документ
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстУничтожитьВт = "; ";
		
	Для Каждого КонтрольныйРегистр Из КоллекцияКонтрольныхРегистров Цикл
		ДополнитьТекстЗапросаЗаданий(КонтрольныйРегистр, ВременныеТаблицы.Таблицы, ШаблонЗапроса, ТекстВложенногоЗапроса, ТекстУничтожитьВт)
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		НомерЗадания = ТекущийНомерЗадания();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Фиксирует удачный пересчет данных. Вызывается когда выполнен пересчет данных для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода, за который был произведен пересчет;
//	ОкончаниеПериода - Дата - Конец периода, за который был произведен пересчет;
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//						запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ОперацияРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	ДанныеКРаспределению - Структура - Формируется в методе ЗакрытиеМесяцаУТВызовСервера.ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(НачалоПериода, ОкончаниеПериода, СледующийМесяц, НомерЗаданияДоРасчета, ОперацияРасчета, ДанныеКРаспределению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	Границы.Операция                  КАК Операция,
	|	Границы.Организация               КАК Организация,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.Операция = Задания.Операция
	|		И Границы.Организация = Задания.Организация
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Операция,
	|	Границы.Организация
	|");
	
	Запрос.МенеджерВременныхТаблиц = ДанныеКРаспределению.ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаданияКЗакрытиюМесяца

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьЭтапыКРасчету(ПараметрыРасчета)
	Если ПараметрыРасчета.Свойство("ЭтапыКРасчету") Тогда
		ЭтапыКРасчету = ПараметрыРасчета.ЭтапыКРасчету
	Иначе
		// это обработка тестирование и регламентное задание
		// получаем все этапы, которые можно рассчитать.
		ЭтапыКРасчету = ВсеАктивныеЭтапы();
	КонецЕсли;
	Возврат ЭтапыКРасчету;
КонецФункции

Функция ВсеАктивныеЭтапы()
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ВсеАктивныеЭтапы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОперацииЗакрытияМесяца.ЭтапыКРасчету(), ОперацииЗакрытияМесяца.ОтключенныеЭтапы());	
	Возврат ВсеАктивныеЭтапы;
КонецФункции

Функция СостоянияЭтапов(ПараметрыРасчета)
	СостоянияЭтапов = Новый Структура;
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ЭтапыКРасчету = ВсеАктивныеЭтапы();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		Состояние = ОперацииЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап);
		СостоянияЭтапов.Вставить(Этап, Состояние);
	КонецЦикла;
	Возврат СостоянияЭтапов;
КонецФункции

Процедура РассчитатьЭтап(ИмяЭтапаРасчета, ПараметрыРасчета, Отказ = Ложь)
	Если ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		РасчетыСПартнерами(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		АннулированиеПодарочныхСертификатов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		РасчетПартийТоваров(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		РасчетСебестоимости(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеНДС" Тогда
		РаспределениеНДС(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		ПереоценкаДенежныхСредств(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		РаспределениеДоходовИРасходовПоНаправлениям(Отказ, ПараметрыРасчета)
	//++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "РасходыНаПродукцию" Тогда
		РасходыНаПродукцию(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРасходов" Тогда
		НастройкаРаспределенияРасходов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМА" Тогда
		АмортизацияОСиНМА(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПогашениеСтоимостиТМЦ" Тогда
		ПогашениеСтоимостиТМЦ(Отказ, ПараметрыРасчета);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМАМеждународный" Тогда
		АмортизацияОСиНМАМеждународный(Отказ, ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "НалогНаИмущество" Тогда
		РасчетНалогаНаИмущество(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ТранспортныйНалог" Тогда
		РасчетТранспортногоНалога(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ЗемельныйНалог" Тогда
		РасчетЗемельногоНалога(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ТорговыйСбор" Тогда
		РасчетТорговогоСбора(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеКосвенныхРасходов" Тогда
		СписатьКосвенныеРасходы(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РезервыПоДолгам" Тогда
		СписатьРезервыПоДолгам(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ФинансовыйРезультат" Тогда
		СформироватьФинансовыйРезультат(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетКурсовыхРазницРегл" Тогда
		РасчетКурсовыхРазницРегл(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ДолиСписанияКосвенныхРасходов" Тогда
		ДолиСписанияКосвенныхРасходов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "НачислениеОО" Тогда
		НачислениеОО(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "ОтражениеЗарплаты" Тогда
		ОтражениеЗарплаты(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "ПризнаниеВНУЛизинговыхПлатежей" Тогда
		ПризнаниеВНУЛизинговыхПлатежей(Отказ, ПараметрыРасчета)
	//-- НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "РеглУчет" Тогда
		РеглУчет(Отказ, ПараметрыРасчета)
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиЭтапов

Процедура РасчетыСПартнерами(Отказ, ПараметрыРасчета)
	Попытка
		АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.Организация;
		РаспределениеВзаиморасчетов.РассчитатьВсе(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);

	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОтложенноеПроведениеПоРасчетам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.РаспределениеВзаиморасчетов,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура АннулированиеПодарочныхСертификатов(Отказ, ПараметрыРасчета)
	Попытка
		Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'АннулированиеПодарочныхСертификатов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.АннулированиеПодарочныхСертификатов,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

//++ НЕ УТ

Процедура РасчетНалогаНаИмущество(Отказ, ПараметрыРасчета)
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(
		Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество, 
		Отказ, 
		ПараметрыРасчета, 
		Перечисления.Периодичность.Квартал);
		
КонецПроцедуры

Процедура РасчетТранспортногоНалога(Отказ, ПараметрыРасчета)
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетТранспортногоНалога"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(
		Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога, 
		Отказ, 
		ПараметрыРасчета, 
		Перечисления.Периодичность.Квартал);
	
КонецПроцедуры

Процедура РасчетЗемельногоНалога(Отказ, ПараметрыРасчета)
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетЗемельногоНалога"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(
		Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога, 
		Отказ, 
		ПараметрыРасчета, 
		Перечисления.Периодичность.Квартал);
	
КонецПроцедуры

Процедура РасчетТорговогоСбора(Отказ, ПараметрыРасчета)
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетТорговогоСбора"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура СписатьКосвенныеРасходы(Отказ, ПараметрыРасчета)
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура СписатьРезервыПоДолгам(Отказ, ПараметрыРасчета)
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура СформироватьФинансовыйРезультат(Отказ, ПараметрыРасчета)
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата"));
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль"));
	Если КонецМесяца(ПараметрыРасчета.Период) = КонецГода(ПараметрыРасчета.Период) Тогда
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ЗакрытиеГода"));
	КонецЕсли;
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура РасчетКурсовыхРазницРегл(Отказ, ПараметрыРасчета)
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ПереоценкаВалютныхСредств"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура ДолиСписанияКосвенныхРасходов(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.Свойство("РучнойЗапуск") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета);
КонецПроцедуры

Процедура РасчетРегламентныхОперацийНачинаяСПервогоЗадания(Операция, Отказ, ПараметрыРасчета, Периодичность, ПроводитьДокументы = Истина)

	Организация = ПараметрыРасчета.Организация;
	
	ПараметрыРасчетаКопия = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыРасчета);
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	НачалоРасчета = НачалоРасчета(Операция, КонецРасчета, Неопределено, Организация);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		Если Периодичность = Перечисления.Периодичность.Месяц Тогда
			ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			ОкончаниеПериода = КонецКвартала(НачалоРасчета);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка вызова процедуры ЗакрытиеМесяцаУТВызовСервера.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(): неверный параметр ""Периодичность"". Обратитесь к администратору'");
		КонецЕсли;
		
		НомерЗадания = УвеличитьНомерЗадания();
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, Операция);
			ДанныеКРасчетуЗаМесяц = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Операция);
			ЗафиксироватьТранзакцию();
		Иначе
			ДанныеКРасчетуЗаМесяц = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Операция);
		КонецЕсли;
		
		Если ДанныеКРасчетуЗаМесяц.Организация.Количество() <> 0 Тогда
			ПараметрыРасчетаКопия.Период = НачалоРасчета;
			РасчетРегламентныхОпераций(ЕстьОшибки, ПараметрыРасчетаКопия, ПроводитьДокументы);
			
			Если ЕстьОшибки Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Периодичность = Перечисления.Периодичность.Месяц Тогда
			СледующийМесяц = ДобавитьМесяц(НачалоРасчета, 1);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			СледующийМесяц = ДобавитьМесяц(НачалоРасчета, 3);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка вызова процедуры ЗакрытиеМесяцаУТВызовСервера.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(): неверный параметр ""Периодичность"". Обратитесь к администратору'");
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			ЗаблокироватьРегистрЗаданий(НомерЗадания, ПараметрыРасчета.Организация, Операция);
			ЗафиксироватьРасчет(НачалоРасчета, ОкончаниеПериода, Неопределено, НомерЗадания, Операция, ДанныеКРасчетуЗаМесяц);
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(ДанныеКРасчетуЗаМесяц, СледующийМесяц);
			ЗафиксироватьТранзакцию();
		Иначе
			ЗафиксироватьРасчет(НачалоРасчета, ОкончаниеПериода, Неопределено, НомерЗадания, Операция, ДанныеКРасчетуЗаМесяц);
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(ДанныеКРасчетуЗаМесяц, СледующийМесяц);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			НачалоРасчета = КонецРасчета + 1; // выход из цикла
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета, ПроводитьДокументы = Истина)
	
	Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(ПараметрыРасчета.Период,
		ПараметрыРасчета.МассивОпераций,
		ПараметрыРасчета.Организация,
		Отказ,
		Ложь,
		ПроводитьДокументы);
		
КонецПроцедуры

Процедура ПризнаниеВНУЛизинговыхПлатежей(Отказ, ПараметрыРасчета)
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей"));
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	
	РасчетРегламентныхОперацийНачинаяСПервогоЗадания(
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНУЛизинговыхПлатежей, 
		Отказ, 
		ПараметрыРасчета, 
		Перечисления.Периодичность.Месяц);
	
КонецПроцедуры

//-- НЕ УТ

Процедура РасчетПартийТоваров(Отказ, ПараметрыРасчета)
	//++ НЕ УТ
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов);
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета, Ложь);
	//-- НЕ УТ
	
	// Для перезапуска расчета, завершившегося с ошибками, необходимо задание к расчету.
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
		ПараметрыРасчета.Период,
		Неопределено,
		ПараметрыРасчета.Организация);
	
	Попытка
		ПартионныйУчет.РассчитатьВсе(КонецМесяца(ПараметрыРасчета.Период), ПараметрыРасчета.Организация);
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Партионный учет.Операции закрытия месяца.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ПартионныйУчет,
			,
			ОписаниеОшибки);
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Процедура РаспределениеНДС(Отказ, ПараметрыРасчета)
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.Период);
	ОкончаниеПериода = КонецМесяца(ПараметрыРасчета.Период);
	Операция = Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС;
	
	НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		НачатьТранзакцию();
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
		ДанныеКРаспределению = ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
		ЗафиксироватьТранзакцию();
	Иначе
		ДанныеКРаспределению = ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
	КонецЕсли;
	
	РезультатРаспределенияНДС = Документы.РаспределениеНДС.РаспределитьНДС(
		ПараметрыРасчета.Период, 
		ДанныеКРаспределению.Организация,
		НСтр("ru = 'Закрытие месяца.Распределение НДС.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если РезультатРаспределенияНДС.РассчитанныеОрганизации.Количество() > 0 Тогда
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
			ЗафиксироватьРасчет(НачалоПериода, ОкончаниеПериода, Неопределено, НомерЗаданияДоРасчета, Операция, ДанныеКРаспределению);
			ЗафиксироватьТранзакцию();
		Иначе
			ЗафиксироватьРасчет(НачалоПериода, ОкончаниеПериода, Неопределено, НомерЗаданияДоРасчета, Операция, ДанныеКРаспределению);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатРаспределенияНДС.ТекстОшибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
Процедура РасходыНаПродукцию(Отказ, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.Свойство("РучнойЗапуск") Тогда
		Возврат;
	КонецЕсли;

	КонецПериода = КонецМесяца(ПараметрыРасчета.Период);
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоМесяца(КонецПериода)) Тогда
		
		ПараметрыЗапускаРасчетаСебестоимости = Новый Структура();
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("Дата", КонецПериода);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("ПредварительныйРасчет", Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МассивОрганизаций", Неопределено);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("РегламентноеЗадание", Ложь);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МестоВызоваРасчета", "ЗакрытиеМесяцаУТВызовСервера.РасходыНаПродукцию");
		
		СебестоимостьРассчитана = РасчетСебестоимости.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапускаРасчетаСебестоимости);
		
		Если НЕ СебестоимостьРассчитана Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПараметрыРасчета.Период)) Тогда
			Отказ = Истина;
			ТекстОшибки = НСтр("ru='Для партионного учета версии 2.2 распределение расходов на себестоимость продукции не выполняется отдельно от расчета партий.'");
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Закрытие месяца.Распределение расходов на продукцию.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ПартионныйУчет,
				,
				ТекстОшибки);
		Иначе
			ПартионныйУчет.РаспределитьПрочиеРасходыПоБазе(НачалоМесяца(ПараметрыРасчета.Период), КонецПериода, ПараметрыРасчета.Организация);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца.Распределение расходов на продукцию.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ПартионныйУчет,
			,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры
//-- НЕ УТ

Процедура РасчетСебестоимости(Отказ, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.Свойство("РучнойЗапуск") Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов);
	ПараметрыРасчета.Вставить("МассивОпераций", МассивОпераций);
	РасчетРегламентныхОпераций(Отказ, ПараметрыРасчета, Ложь);
	//-- НЕ УТ
	
	ПараметрыЗапускаРасчетаСебестоимости = Новый Структура();
	ПараметрыЗапускаРасчетаСебестоимости.Вставить("Дата", КонецМесяца(ПараметрыРасчета.Период));
	ПараметрыЗапускаРасчетаСебестоимости.Вставить("ПредварительныйРасчет", Ложь);
	ПараметрыЗапускаРасчетаСебестоимости.Вставить("МассивОрганизаций", ПараметрыРасчета.Организация);
	ПараметрыЗапускаРасчетаСебестоимости.Вставить("РегламентноеЗадание", Ложь);
	ПараметрыЗапускаРасчетаСебестоимости.Вставить("МестоВызоваРасчета", "ЗакрытиеМесяцаУТВызовСервера.РасчетСебестоимости");
	
	СебестоимостьРассчитана = РасчетСебестоимости.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапускаРасчетаСебестоимости);
	
	Если НЕ СебестоимостьРассчитана Тогда
		Отказ = Истина;
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СледующийМесяцКРасчетуДенежныхСредств(ПериодРасчета, Организации)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	МИНИМУМ(ДенежныеСредства.Месяц) КАК МесяцКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И (ДенежныеСредства.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И (ДенежныеСредства.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И (ДенежныеСредства.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И (ДенежныеСредства.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И (ДенежныеСредства.Организация В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|
	|	) КАК ДенежныеСредства
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(ДенежныеСредства.Месяц) ЕСТЬ NULL)
	|");
	
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ОбработанныйМесяц", КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("СледующийМесяц", КонецМесяца(ПериодРасчета) + 1);
	Запрос.УстановитьПараметр("НаКонецРассчитанногоМесяца", Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(Организации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.МесяцКРасчету, Дата(1, 1, 1));
	
КонецФункции

Процедура ПереоценкаДенежныхСредств(Отказ, ПараметрыРасчета)
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	Операция = Перечисления.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств;
	НачалоРасчета = НачалоРасчета(Операция, КонецРасчета, Неопределено, ПараметрыРасчета.Организация);
	
	ПервыйПроход = Истина;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		Если ПервыйПроход Тогда
			НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
			ПервыйПроход = Ложь;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
			ДанныеКПереоценкеЗаМесяц = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
			ЗафиксироватьТранзакцию();
		Иначе
			ДанныеКПереоценкеЗаМесяц = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
		КонецЕсли;
		
		Попытка
			Документы.ПереоценкаВалютныхСредств.ПереоценитьДенежныеСредства(
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переоценка денежных средств'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПереоценкаВалютныхСредств,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			Документы.ПереоценкаВалютныхСредств.ПереоценитьКредитыДепозитыЗаймы(
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переоценка кредитов, депозитов, займов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.документы.ПереоценкаВалютныхСредств,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		СледующийМесяц = СледующийМесяцКРасчетуДенежныхСредств(НачалоРасчета, ПараметрыРасчета.Организация);
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.Организация, Операция);
			ЗафиксироватьРасчет(НачалоРасчета, ОкончаниеПериода, СледующийМесяц, НомерЗаданияДоРасчета, Операция, ДанныеКПереоценкеЗаМесяц);
			ЗафиксироватьТранзакцию();
		Иначе
			ЗафиксироватьРасчет(НачалоРасчета, ОкончаниеПериода, СледующийМесяц, НомерЗаданияДоРасчета, Операция, ДанныеКПереоценкеЗаМесяц);
		КонецЕсли;
		Если ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			НачалоРасчета = КонецРасчета + 1; // выход из цикла
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределениеДоходовИРасходовПоНаправлениям(Отказ, ПараметрыРасчета)
	Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.СоздатьДокументыЗаПериод(ПараметрыРасчета.Период,
		ПараметрыРасчета.Организация,
		Отказ);
КонецПроцедуры

Процедура РеглУчет(Отказ, ПараметрыРасчета)
	
	ДанныеПоОтражениюВУчете = Новый Структура("Отражено", 0);
	//++ НЕ УТ
	ДанныеПоОтражениюВУчете = РеглУчетПроведениеСервер.ИнициализироватьДанныеПоОтражениюВУчете();
	//-- НЕ УТ
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	УчетНДСУТ.СформироватьЗаписиКнигиПокупокПродаж( 
		КонецМесяца(ПараметрыРасчета.Период),
		ПараметрыРасчета.СписокОрганизаций);
		
//++ НЕ УТ
	РеглУчетПроведениеСервер.ОтразитьВсе(
		КонецМесяца(ПараметрыРасчета.Период), 
		ПараметрыРасчета.Организация, ДанныеПоОтражениюВУчете);
//-- НЕ УТ

	Замер = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	Комментарий = НСтр("ru = 'Отражено %КолвоСтрок% док. за %Замер% сек.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Комментарий = СтрЗаменить(Комментарий, "%КолвоСтрок%", ДанныеПоОтражениюВУчете.Отражено);
	Комментарий = СтрЗаменить(Комментарий, "%Замер%", Формат(Замер/1000., "ЧДЦ=3; ЧН=; ЧГ="));
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отражение документов в регл.учете'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,, Комментарий);

КонецПроцедуры

//++ НЕ УТ
Процедура АмортизацияОСиНМА(Отказ, ПараметрыРасчета) Экспорт
	
	Организация = ПараметрыРасчета.Организация;
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	НачалоРасчетаОС = НачалоРасчета(Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС, 
										КонецРасчета, 
										Неопределено, 
										ПараметрыРасчета.Организация);
										
	НачалоРасчетаНМА = НачалоРасчета(Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА, 
										КонецРасчета, 
										Неопределено, 
										ПараметрыРасчета.Организация);
	
	НачалоРасчета = Мин(НачалоРасчетаОС, НачалоРасчетаНМА);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		НомерЗадания = УвеличитьНомерЗадания();
		
		ТребуетсяРасчетАмортизацииОС  = (НачалоРасчета >= НачалоРасчетаОС);
		ТребуетсяРасчетАмортизацииНМА = (НачалоРасчета >= НачалоРасчетаНМА);
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			Если ТребуетсяРасчетАмортизацииОС Тогда
				ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС);
			КонецЕсли; 
			Если ТребуетсяРасчетАмортизацииНМА Тогда
				ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА);
			КонецЕсли;
			Если ТребуетсяРасчетАмортизацииОС Тогда
				ЗаданияКРасчетуОС  = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС);
			КонецЕсли;
			Если ТребуетсяРасчетАмортизацииНМА Тогда
				ЗаданияКРасчетуНМА = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА);
			КонецЕсли; 
			ЗафиксироватьТранзакцию();
		Иначе
			Если ТребуетсяРасчетАмортизацииОС Тогда
				ЗаданияКРасчетуОС  = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС);
			КонецЕсли;
			Если ТребуетсяРасчетАмортизацииНМА Тогда
				ЗаданияКРасчетуНМА = ЗаданияКРасчетуЗаМесяц(НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация, Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			
			Если ТребуетсяРасчетАмортизацииОС Тогда
				Документы.АмортизацияОС.СоздатьДокументыАмортизацииОС(НачалоРасчета, Организация, ЕстьОшибки);
			КонецЕсли;
			Если НачалоРасчета >= НачалоРасчетаНМА Тогда
				Документы.АмортизацияНМА.СоздатьДокументыАмортизацииНМА(НачалоРасчета, Организация, ЕстьОшибки);
			КонецЕсли;
			
		Исключение
			
			ЕстьОшибки = Истина;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Закрытие месяца.Начисление амортизации ОС и НМА'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.АмортизацияОС,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
		Если ТребуетсяРасчетАмортизацииОС Тогда
			ЗаданияНаСледующийПериод = УчетОСВызовСервера.ЗаданияКРасчетуАмортизацииОСНаСледующийПериод(Организация, НачалоРасчета);
			ОперацияРасчета = Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС;
			Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				НачатьТранзакцию();
				ЗакрытиеМесяцаУТВызовСервера.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, ОперацияРасчета);
				УчетОСВызовСервера.ЗафиксироватьРасчетАмортизации(ЗаданияКРасчетуОС, ЗаданияНаСледующийПериод);
				ЗафиксироватьТранзакцию();
			Иначе
				УчетОСВызовСервера.ЗафиксироватьРасчетАмортизации(ЗаданияКРасчетуОС, ЗаданияНаСледующийПериод);
			КонецЕсли;
		КонецЕсли; 
		
		Если ТребуетсяРасчетАмортизацииНМА Тогда
			ЗаданияНаСледующийПериод = УчетОСВызовСервера.ЗаданияКРасчетуАмортизацииНМАНаСледующийПериод(Организация, НачалоРасчета);
			ОперацияРасчета = Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА;
			Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				НачатьТранзакцию();
				ЗакрытиеМесяцаУТВызовСервера.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация, ОперацияРасчета);
				УчетОСВызовСервера.ЗафиксироватьРасчетАмортизации(ЗаданияКРасчетуНМА, ЗаданияНаСледующийПериод);
				ЗафиксироватьТранзакцию();
			Иначе
				УчетОСВызовСервера.ЗафиксироватьРасчетАмортизации(ЗаданияКРасчетуНМА, ЗаданияНаСледующийПериод);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПогашениеСтоимостиТМЦ(Отказ, ПараметрыРасчета) Экспорт
	
	Организация = ПараметрыРасчета.Организация;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	НачалоРасчета = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НачалоРасчета(КонецРасчета, Организация);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьПакетыПогашенияСтоимостиТМЦ(НачалоРасчета, Организация, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		НомерЗадания = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.УвеличитьНомерЗадания();
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			НачатьТранзакцию();
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация);
				
			ЗаданияКРасчету = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация);
				
			ЗафиксироватьТранзакцию();
			
		Иначе
			ЗаданияКРасчету = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета, ОкончаниеПериода, НомерЗадания, Организация);
		КонецЕсли;
		
		Если ЗаданияКРасчету.Организация.Количество() <> 0 Тогда
			
			Попытка
				
				Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьДокументы(НачалоРасчета, Организация, ЕстьОшибки);
				
			Исключение
				
				Отказ = Истина;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Закрытие месяца.Погашение стоимости ТМЦ в эксплуатации'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ПогашениеСтоимостиТМЦВЭксплуатации,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			КонецПопытки;
			
			Если ЕстьОшибки Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЕсли; 
		
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НачатьТранзакцию();
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация); 
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗафиксироватьРасчет(Организация, НачалоРасчета, ЗаданияКРасчету);
			ЗафиксироватьТранзакцию();
		Иначе
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗафиксироватьРасчет(Организация, НачалоРасчета, ЗаданияКРасчету);
		КонецЕсли;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТКА
Процедура АмортизацияОСиНМАМеждународный(Отказ, ПараметрыРасчета) Экспорт
	Попытка
		Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.НачислитьАмортизациюОС(ПараметрыРасчета.Период, ПараметрыРасчета.Организация);
		Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.НачислитьАмортизациюНМА(ПараметрыРасчета.Период, ПараметрыРасчета.Организация);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца.Начисление амортизации ОС и НМА (международный учет)'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры
//-- НЕ УТКА
//++ НЕ УТ
Процедура НастройкаРаспределенияРасходов(Отказ, ПараметрыРасчета)
	
	Состояние = Неопределено;
	Если НЕ ПараметрыРасчета.Свойство("Состояние", Состояние) Тогда
		Состояние = Перечисления.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения;
	КонецЕсли;

	СтатьиКРаспределению = Документы.РаспределениеПрочихЗатрат.СтатьиКРаспределению(
		ПараметрыРасчета.Период,
		ПараметрыРасчета.СписокОрганизаций,
		ПараметрыРасчета.СписокПодразделений,
		Состояние);
		
	Если СтатьиКРаспределению.Количество() = 0 Тогда // нет данных для распределения
		Возврат;
	КонецЕсли;
	
	КРаспределению = Новый Структура();
	КРаспределению.Вставить("Дата", КонецМесяца(ПараметрыРасчета.Период));
	КРаспределению.Вставить("ВариантРаспределения");
	КРаспределению.Вставить("ПравилоРаспределенияПоЭтапам");
	КРаспределению.Вставить("ПравилоРаспределенияПоПодразделениям");
	КРаспределению.Вставить("СтатьяКалькуляции");
	
	Для Каждого Колонка Из СтатьиКРаспределению.Колонки Цикл
		КРаспределению.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Статья Из СтатьиКРаспределению Цикл
		Если ЗначениеЗаполнено(Статья.Документ) Тогда
			Продолжить;
		КонецЕсли;
		ПоляСтатьиРасходов = Документы.РаспределениеПрочихЗатрат.ПоляСтатьиРасходов(Статья.СтатьяРасходов);
		ЗаполнитьЗначенияСвойств(КРаспределению, Статья);
		ЗаполнитьЗначенияСвойств(КРаспределению, ПоляСтатьиРасходов);
		
		НастройкиРаспределенияСтатьиРасходов = Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатьиРасходов(Статья.СтатьяРасходов);
		КРаспределению.Вставить("ВариантРаспределения",                 НастройкиРаспределенияСтатьиРасходов[0]);
		КРаспределению.Вставить("ПравилоРаспределенияПоЭтапам",         НастройкиРаспределенияСтатьиРасходов[1]);
		КРаспределению.Вставить("ПравилоРаспределенияПоПодразделениям", НастройкиРаспределенияСтатьиРасходов[2]);
		КРаспределению.Вставить("БазаРаспределенияПоПодразделениям",    НастройкиРаспределенияСтатьиРасходов[3]);
		КРаспределению.Вставить("БазаРаспределенияПоЭтапам",            НастройкиРаспределенияСтатьиРасходов[4]);
		КРаспределению.Вставить("НаправлениеРаспределения",             НастройкиРаспределенияСтатьиРасходов[5]);
		КРаспределению.Вставить("СтатьяКалькуляции",                    НастройкиРаспределенияСтатьиРасходов[6]);
		КРаспределению.Вставить("ОтборПоПодразделениям",                НастройкиРаспределенияСтатьиРасходов[7]);
		КРаспределению.Вставить("ОтборПоМатериалам",                    НастройкиРаспределенияСтатьиРасходов[8]);
		КРаспределению.Вставить("ОтборПоВидамРабот",                    НастройкиРаспределенияСтатьиРасходов[9]);
		КРаспределению.Вставить("ОтборПоГруппамПродукции",              НастройкиРаспределенияСтатьиРасходов[10]);
		
		Попытка
			Документы.РаспределениеПрочихЗатрат.СформироватьДокумент(КРаспределению);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Закрытие месяца.Настройка распределения расходов.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.РаспределениеПрочихЗатрат,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура НачислениеОО(Отказ, ПараметрыРасчета)
	Попытка
		ОтражениеЗарплатыВФинансовомУчетеУП.НачислениеООПриЗакрытииМесяца(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'НачислениеООПриЗакрытииМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОтражениеЗарплатыВФинансовомУчетеУП,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ОтражениеЗарплаты(Отказ, ПараметрыРасчета)
	Попытка
		Документы.ОтражениеЗарплатыВФинансовомУчете.ОтражениеЗарплатыПриЗакрытииМесяца(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОтражениеЗарплатыПриЗакрытииМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные - Соответствие
//		Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//		Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Подробнее см. в Журнале регистрации.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
		    |Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		//Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработаные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетодыРегистраЗаданий

Функция КоллекцияКонтрольныхРегистров()
	
	Коллекция = Новый Массив();
	Коллекция.Добавить("НДССостояниеРеализации0ЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияНМАОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияОСОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ВыручкаИСебестоимостьПродажЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДенежныеСредстваДоходыРасходыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДоходыРасходыПрочиеАктивыПассивыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеДокументыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваБезналичныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВКассахККМЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВПутиЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваНаличныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваУПодотчетныхЛицЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("КнигаУчетаДоходовИРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПартииПрочихРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНМатериалыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНОСиНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНТоварыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасчетыПоДоговорамКредитовИДепозитовЗаданияКЗакрытиюМесяца");
	
	Возврат Коллекция;
КонецФункции

Процедура ДополнитьТекстЗапросаЗаданий(ИмяТаблицы, Таблицы, ШаблонЗапроса, ТекстЗапроса, ТекстУничтожитьВт)
	Если Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", ИмяТаблицы);
		ТекстУничтожитьВт = ТекстУничтожитьВт + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
	КонецЕсли;
КонецПроцедуры

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция - ПеречислениеСсылка.ТипыОперацийЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, Операция) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ЭлементБлокировки.УстановитьЗначение("Операция", Операция);
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
КонецПроцедуры

#КонецОбласти

#КонецОбласти


