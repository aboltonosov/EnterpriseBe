#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Снимает/устанавливает активность проводок документа (бух. учет).
//
// Параметры:
//	Документ - ДокументСсылка.* - Ссылка на документ, для которого меняется активность проводок.
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.ОбменДанными.Загрузка = Истина;
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//	Счет         - Счет, к которому относится субконто.
//  Субконто     - набор субконто.
//	ИмяСубконто  - Номер, имя или вид устанавливаемого субконто.
//  ЗначениеСубконто - значение устанавливаемого субконто.
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда // номер субконто

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе // имя или вид субконто

		ВидСубконто = ?(ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"),
						ИмяСубконто,
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто]);
		
		// Проверка, что указанный вид субконто есть на счете.
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто2 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда

			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям.
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение.
//      Подразделение - <ссылка на справочник подразделений> - устанавливаемое подразделение.
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту.
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям.
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения.
//      ПодразделениеДт - <ссылка на справочник подразделений> - устанавливаемое подразделение по дебету.
//      ПодразделениеКт - <ссылка на справочник подразделений> - устанавливаемое подразделение по кредиту.
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

// Возвращает максимальное количество субконто на счете.
//
// Возвращаемое значение:
//	Число - Максимальное количество субконто.
//
Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

#КонецОбласти

