
#Область ПрограммныйИнтерфейс

// Получить адреса схемы компоновки данных во временном хранилище
//
// Параметры:
//  Форма - УправляемаяФорма - Форма
//  Имя - Строка - Имя схемы
// 
// Возвращаемое значение:
//  Структура - адреса схемы компоновки данных во временном хранилище
//
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Форма, Имя) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		Если Имя = "КомпоновщикНастроекОтборПоНоменклатуре" Тогда
			ИмяМакета = "ОтборСтрокНоменклатура";
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
				ИмяМакета = "ОтборСтрокДополнительныеУсловия";
			Иначе
				ИмяМакета = "ОтборСтрокДополнительныеУсловияБезХарактеристик";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		ИмяМакета = "ОтборУсловияПредоставленияСуммаКоличество";
	КонецЕсли;
	
	Адреса = Новый Структура;
	
	Макет = Справочники.СкидкиНаценки.ПолучитьМакет(ИмяМакета);
	Набор = Макет.НаборыДанных.Найти("НаборДанных");
	Поля = "СвободныеОстаткиОстатки.Номенклатура,СвободныеОстаткиОстатки.Характеристика,СвободныеОстаткиОстатки.Склад";
	Набор.Запрос = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Набор.Запрос, "ПодстановкаТоварногоОграничения", Поля);
	
	Адреса.Вставить("СхемаКомпоновкиДанных", ПоместитьВоВременноеХранилище(Макет, Форма.УникальныйИдентификатор));
	Адреса.Вставить("НастройкиКомпоновкиДанных",
		ПоместитьВоВременноеХранилище(
			Форма[Имя].ПолучитьНастройки(), Форма.УникальныйИдентификатор));
	
	Возврат Адреса;
	
КонецФункции

// Описание действия внешней обработки
//
// Параметры:
//  ВнешняяОбработка - ВнешняяОбработкаОбъект - Объект подключенной обработки.
//  АдресНастроекВнешнейОбработки - Строка - Адрес настроек во временном хранилище
// 
// Возвращаемое значение:
//  Строка - Описание действия внешней обработки
//
Функция ОписаниеДействияВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки) Экспорт
	
	ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
	
	Если ЗначениеЗаполнено(АдресНастроекВнешнейОбработки) Тогда
		Параметры = ПолучитьИзВременногоХранилища(АдресНастроекВнешнейОбработки);
	Иначе
		Параметры = Неопределено;
	КонецЕсли;
	
	УстановитьБезопасныйРежим(Истина);
	Описание = ВнешнийОбъект.ОписаниеДействия(Параметры);
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат Описание;
	
КонецФункции

// Автонаименование внешней обработки
//
// Параметры:
//  ВнешняяОбработка - ВнешняяОбработкаОбъект - Объект подключенной обработки.
//  АдресНастроекВнешнейОбработки - Строка - Адрес настроек во временном хранилище
// 
// Возвращаемое значение:
//  Строка - Наименование
//
Функция АвтонаименованиеВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки) Экспорт
	
	ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
	
	Если ЗначениеЗаполнено(АдресНастроекВнешнейОбработки) Тогда
		Параметры = ПолучитьИзВременногоХранилища(АдресНастроекВнешнейОбработки);
	Иначе
		Параметры = Неопределено;
	КонецЕсли;
	
	УстановитьБезопасныйРежим(Истина);
	Автонаименование = ВнешнийОбъект.Автонаименование(Параметры);
	УстановитьБезопасныйРежим(Ложь);
	
	Возврат Автонаименование;
	
КонецФункции

// Имя формы настроек внешней обработки
//
// Параметры:
//  ВнешняяОбработка - ВнешняяОбработкаОбъект - Объект подключенной обработки.
//  АдресНастроекВнешнейОбработки - Строка - Адрес настроек во временном хранилище
// 
// Возвращаемое значение:
//  Строка - Имя формы настроек внешней обработки
//
Функция ИмяФормыНастроекВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки) Экспорт
	
	ИмяОбработки = СкидкиНаценкиПовтИсп.ПодключитьВнешнююОбработку(ВнешняяОбработка);
	ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
	
	УстановитьБезопасныйРежим(Истина);
	Попытка
		ИмяФормыНастроек = ВнешнийОбъект.ИмяФормыНастроек();
		Если ТипЗнч(ИмяФормыНастроек) <> Тип("Строка") Тогда
			ИмяФормыНастроек = "";
		КонецЕсли;
	Исключение
		ИмяФормыНастроек = "";
	КонецПопытки;
	УстановитьБезопасныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ИмяФормыНастроек) Тогда
		Возврат "ВнешняяОбработка."+ ИмяОбработки +".Форма."+ИмяФормыНастроек;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Описание внешней обработки
//
// Параметры:
//  ВнешняяОбработка - ВнешняяОбработкаОбъект - Объект подключенной обработки.
//  АдресНастроекВнешнейОбработки - Строка - Адрес настроек во временном хранилище
// 
// Возвращаемое значение:
//  Структура - Описание внешней обработки
//
Функция ОписаниеВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяФормыНастроек", ИмяФормыНастроекВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки));
	ВозвращаемоеЗначение.Вставить("Автонаименование", АвтонаименованиеВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки));
	ВозвращаемоеЗначение.Вставить("ОписаниеДействия", ОписаниеДействияВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Данные для представления списка товаров
//
// Параметры:
//  Ссылка - СправочникСсылка.СкидкиНаценки - Скидка (наценка)
// 
// Возвращаемое значение:
//  Структура - Данные для представления списка товаров
//
Функция ДанныеДляПредставленияСпискаТоваров(Ссылка) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 3
	|	Т.Номенклатура.Представление КАК НоменклатураНаименование,
	|	Т.Характеристика.Представление КАК ХарактеристикаНаименование
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре.СрезПоследних(&ТекущаяДата, Источник = &Источник) КАК Т
	|ГДЕ
	|	Т.Статус = &Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК КоличествоПозиций
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре.СрезПоследних(&ТекущаяДата, Источник = &Источник) КАК Т
	|ГДЕ
	|	Т.Статус = &Статус
	|");
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("Источник", Ссылка);
	Запрос.Параметры.Вставить("Статус", Перечисления.СтатусыДействияСкидок.Действует);
	
	ПервыеПозиции = Новый Массив;
	
	Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименование,
				Выборка.ХарактеристикаНаименование);
		ПервыеПозиции.Добавить(Наименование);
	КонецЦикла;
	
	Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
	Выборка.Следующий();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПервыеПозиции", ПервыеПозиции);
	ВозвращаемоеЗначение.Вставить("ВсегоПозиций", Выборка.КоличествоПозиций);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// 4D:ERP для Беларуси, Екатерина, 16.02.2016 11:40:31 
// Расчет скидки к цене, №10910
// {
Функция ПолучитьСпособПримененияСкидки() Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене");
	Возврат Результат;
	
КонецФункции // ПолучитьСпособПримененияСкидки()

//Добавляет на форму реквизит "Цена со скидкой"
//Параметры:
//Элементы - коллекция элементов
//ИмяТабЧасти - имя табличной части, в которую добавляется реквизит
//ИмяЭлемента - имя элемента, перед которым добавляется реквизит
Процедура ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, ИмяТабЧасти, ИмяЭлемента)

	Если Форма.Элементы.Найти(ИмяТабЧасти + "ЦенаСоСкидкой") = Неопределено Тогда
		Элемент = Элементы.Вставить(ИмяТабЧасти + "ЦенаСоСкидкой", Тип("ПолеФормы"), Элементы[ИмяТабЧасти], Элементы[ИмяЭлемента]);
		Элемент.ПутьКДанным = "Объект." + ИмяТабЧасти + ".ЦенаСоСкидкой";
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = "Цена со скидкой";
		Элемент.УстановитьДействие("ПриИзменении", ИмяТабЧасти + "ЦенаСоСкидкойПриИзменении");
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииФормыДокументаРеализацияТоваровУслуг(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Товары", "ТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаСоСкидкой.Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаАвтоматическойСкидки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаРучнойСкидки", "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыДокументаЗаданиеТорговомуПредставителю(Форма) Экспорт

	Элементы = Форма.Элементы;

	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Товары", "ТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаСоСкидкой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаРучнойСкидки", "Видимость", Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииФормыДокументаЗаявкаНаВозвратТоваровОтКлиента(Форма) Экспорт 

	Элементы = Форма.Элементы;

	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "ЗаменяющиеТовары", "ЗаменяющиеТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменяющиеТоварыЦенаСоСкидкой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаменяющиеТовары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

Процедура ПриСозданииФормыДокументаКоммерческоеПредложениеКлиенту(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Товары", "ТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаСоСкидкой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаАвтоматическойСкидки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаРучнойСкидки", "Видимость", Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииФормыДокументаЗаказКлиентаФормаДокумента(Форма) Экспорт 

	Элементы = Форма.Элементы;
	
	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Товары", "ТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаСоСкидкой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаАвтоматическойСкидки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаРучнойСкидки", "Видимость", Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииФормыДокументаАктВыполненныхРаботФормаДокумента(Форма) Экспорт 

	Элементы = Форма.Элементы;
	
	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Услуги", "УслугиСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиЦенаСоСкидкой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиСуммаАвтоматическойСкидки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиСуммаРучнойСкидки", "Видимость", Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПриСозданииФормыОбработкиПомощникПродажФорма(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	//Добавление колонки "ЦенаСоСкидкой" 
	ДобавитьЦенуСоСкидкойВТабличнуюЧасть(Форма, Элементы, "Товары", "ТоварыСумма");
	
	//доступность реквизита Цена со скидкой
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаСоСкидкой.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	
	Если ПолучитьФункциональнуюОпцию("ПрименятьСкидкиКЦене") Тогда 
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаАвтоматическойСкидки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСуммаРучнойСкидки", "Видимость", Ложь);
		
	КонецЕсли;

КонецПроцедуры
// }
// 4D

#КонецОбласти