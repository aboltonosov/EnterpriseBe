////////////////////////////////////////////////////////////////////////////////
// Загрузка курсов валют

// Процедура для загрузки курсов валют по определенному периоду с помощью веб-сервисов НБ РБ.
//
// Параметры
// Валюты		- Любая коллекция - со следующими полями:
//					КодВалюты - числовой код валюты
//					Валюта - ссылка на валюту
// НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов
// ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов
//
// Возвращаемое значение:
// Массив состояния загрузки  - каждый элемент - структура с полями
//		Валюта - загружаемая валюта
//		СтатусОперации - завершилась ли загрузка успешно
//		Сообщение - пояснение о загрузке (текст сообщения об ошибке или поясняющее сообщение)
//
Функция ЗагрузитьКурсыВалютВебСервис(знач Валюты,
										знач НачалоПериодаЗагрузки,
										знач ОкончаниеПериодаЗагрузки,
										ПриЗагрузкеВозниклиОшибки = Ложь) Экспорт
										
	СтатусОперации = Истина;
	
	ОдинДень = 0;
	Пока (НачалоДня(НачалоПериодаЗагрузки)+ОдинДень) <= НачалоДня(ОкончаниеПериодаЗагрузки) Цикл
		
		ДатаКурсов = НачалоДня(НачалоПериодаЗагрузки)+ОдинДень;
		
		Прокси = WSСсылки.WSСсылкаНБРБ.СоздатьWSПрокси("http://www.nbrb.by/", "ExRates","ExRatesSoap");
		
		ТипПер =Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.nbrb.by/").Получить("ExRatesDaily");
		Парам = Прокси.ФабрикаXDTO.Создать(ТипПер);
		Парам.onDate = ДатаКурсов; 	
		
		Попытка
			Результат = Прокси.ExRatesDaily(Парам);
		Исключение
			Результат = Неопределено;
		КонецПопытки;  
		
		Если Результат <> Неопределено Тогда
			Ответ = Результат.ExRatesDailyResult;	
			
			XDTO = Ответ.diffgram.NewDataSet;
			Список = XDTO.DailyExRatesOnDate;
			
			ОбработатьСписокСКурсамиВалютВебСервис(Список, НачалоПериодаЗагрузки, ОдинДень, Валюты);
			ПриЗагрузкеВозниклиОшибки = Ложь;
		Иначе
			ПриЗагрузкеВозниклиОшибки = Истина;
			СтатусОперации = Ложь;
			СообщениеОбОшибке= НСтр("ru = 'Ошибка при получении курсов валют (%1 - %2):'")
								  + Символы.ПС + "%3";
			СообщениеОбОшибке = 
				 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									   СообщениеОбОшибке,
									   "",
									   "",
									   "Проверьте подключение к интернету.");
		КонецЕсли;
		// увеличим счетчик
		ОдинДень = ОдинДень + 60*60*24;						   
	КонецЦикла;
	
	Возврат СтатусОперации;
	
КонецФункции
          
Функция ОбработатьСписокСКурсамиВалютВебСервис(Список, НачДата, ОдинДень, Валюты)
	
	ТаблицаКурсы = Новый ТаблицаЗначений;
	ТаблицаКурсы.Колонки.Добавить("Период"   , ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаКурсы.Колонки.Добавить("Валюта");
	ТаблицаКурсы.Колонки.Добавить("Кратность", ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаКурсы.Колонки.Добавить("Курс"     , ПолучитьОписаниеТиповЧисла(10,4));
	
	ПустаяВалюта = Справочники.Валюты.ПустаяСсылка();
	
	// читаем файл
	ВсегоЭлементов=Список.Количество();
	
	Для а=0 По ВсегоЭлементов-1 Цикл
		ТекЭлемент = Список.Получить(а);
						
		Код = ТекЭлемент.Cur_Code;
		Валюта = Справочники.Валюты.НайтиПоКоду(Код);
		
		Если Валюта <> ПустаяВалюта И Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета Тогда
			ПараметрыОтбора = Новый Структура("КодВалюты", Код);
			МассивВалют = Валюты.НайтиСтроки(ПараметрыОтбора);
			Если МассивВалют.Количество() > 0 Тогда
				НоваяСтрока = ТаблицаКурсы.Добавить();
				НоваяСтрока.Период = (НачалоДня(НачДата)+ОдинДень);
				НоваяСтрока.Валюта = Валюта;
				НоваяСтрока.Кратность = ТекЭлемент.Cur_Scale;
				НоваяСтрока.Курс = ТекЭлемент.Cur_OfficialRate;
			КонецЕсли;                    			
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКурсы Цикл
		// запись курсов
		
			ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
			
			ЗаписьКурсовВалют.Валюта    = СтрокаТаблицы.Валюта;
			ЗаписьКурсовВалют.Период    = СтрокаТаблицы.Период;
			ЗаписьКурсовВалют.Курс      = СтрокаТаблицы.Курс;
			ЗаписьКурсовВалют.Кратность = СтрокаТаблицы.Кратность;
			ЗаписьКурсовВалют.Записать();
	КонецЦикла;

	Если ТаблицаКурсы.Количество() > 0 Тогда
		Сообщить("Загружены курсы валют за "+Формат((НачалоДня(НачДата)+ОдинДень), "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
КонецФункции

Функция ОбработатьФайлСКурсамиВалют(знач ИмяВходящегоФайла, НачДата, ОдинДень) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяВходящегоФайла) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИмяВходящегоФайла);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ИмяВходящегоФайла;
	КонецЕсли;
	
	ТаблицаКурсы = Новый ТаблицаЗначений;
	ТаблицаКурсы.Колонки.Добавить("Период"   , ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаКурсы.Колонки.Добавить("Валюта");
	ТаблицаКурсы.Колонки.Добавить("Кратность", ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаКурсы.Колонки.Добавить("Курс"     , ПолучитьОписаниеТиповЧисла(10,4));
	
	ПустаяВалюта = Справочники.Валюты.ПустаяСсылка();
	
	ВходящийФайл = Новый Файл(ИмяФайла);
	Если НЕ ВходящийФайл.Существует() Тогда
		//Предупреждение("Не удалось получить данные. Курсы валют не будут загружены",10, "Предупрежедние"); 
		Возврат Истина;
	КонецЕсли;
	
	// читаем файл
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	
	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДом = ПостроительДОМ.Прочитать(ЧтениеХМЛ);
	
	ЧтениеХМЛ.Закрыть();
	
	КорневойДОМ = ДокументДом.ЭлементДокумента;
	// читаем узлы Currency
	ЭтотУзел = "";
	Для Каждого Узел Из КорневойДОМ.ДочерниеУзлы Цикл
		Для Каждого УзелВалюта Из Узел.ДочерниеУзлы Цикл
			Если УзелВалюта.ТипУзла = ТипУзлаDOM.Элемент Тогда
				Если УзелВалюта.ИмяЭлемента = "NumCode" Тогда
					Код = УзелВалюта.ТекстовоеСодержимое;
					Валюта = Справочники.Валюты.НайтиПоКоду(Код);
					Если Валюта <> ПустаяВалюта И Валюта.ЗагружаетсяИзИнтернета Тогда
						НоваяСтрока = ТаблицаКурсы.Добавить();
						НоваяСтрока.Период = (НачалоДня(НачДата)+ОдинДень);
						НоваяСтрока.Валюта = Валюта;
						ЭтотУзел = Узел.ТекстовоеСодержимое;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли УзелВалюта.ИмяЭлемента = "Scale" И Узел.ТекстовоеСодержимое = ЭтотУзел Тогда
					НоваяСтрока.Кратность = Число(УзелВалюта.ТекстовоеСодержимое);
				ИначеЕсли УзелВалюта.ИмяЭлемента = "Rate" И Узел.ТекстовоеСодержимое = ЭтотУзел Тогда
					НоваяСтрока.Курс = Число(УзелВалюта.ТекстовоеСодержимое);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РегистрКурсыВалют = РегистрыСведений.КурсыВалют;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКурсы Цикл
		// запись курсов
		
			ЗаписьКурсовВалют = РегистрКурсыВалют.СоздатьМенеджерЗаписи();
			
			ЗаписьКурсовВалют.Валюта    = СтрокаТаблицы.Валюта;
			ЗаписьКурсовВалют.Период    = СтрокаТаблицы.Период;
			ЗаписьКурсовВалют.Курс      = СтрокаТаблицы.Курс;
			ЗаписьКурсовВалют.Кратность = СтрокаТаблицы.Кратность;
			ЗаписьКурсовВалют.Записать();
	КонецЦикла;

	Если ТаблицаКурсы.Количество() > 0 Тогда
		Сообщить("Загружены курсы валют за "+Формат((НачалоДня(НачДата)+ОдинДень), "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти) Экспорт

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции // ПолучитьОписаниеТиповДаты()
