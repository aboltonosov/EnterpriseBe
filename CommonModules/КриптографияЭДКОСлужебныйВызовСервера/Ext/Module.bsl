////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭкспортироватьСертификатВBase64(Сертификат) Экспорт
	
	ДанныеСертификата = КриптографияЭДКО.НайтиСертификат(Сертификат);
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат "";
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДанныеСертификата.Сертификат;
	
	Возврат Base64Строка(ДвоичныеДанныеСертификата);
	
КонецФункции

Функция ПроверитьСертификат(Сертификат, ПроверятьСрокДействия = Истина) Экспорт
	
	Возврат СервисКриптографии.ПроверитьСертификат(Сертификат);
		
КонецФункции

Процедура СохранитьНайденныеСертификаты(Сертификаты) Экспорт
	
	СертификатыДляСохранения = ПолучитьСохраненныеСертификаты();
	
	Для Каждого Сертификат Из Сертификаты Цикл
		СертификатыДляСохранения.Вставить(
			"Отпечаток_" + Сертификат.Отпечаток,
			Новый Структура("СерийныйНомер, Поставщик", Сертификат.СерийныйНомер, Сертификат.Поставщик));
	КонецЦикла;	
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКО/Криптография", "Сертификаты", СертификатыДляСохранения);
	
КонецПроцедуры

Функция ПолучитьСохраненныеСертификаты() Экспорт
	
	Сертификаты =  ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКО/Криптография", "Сертификаты");
	Если Не ЗначениеЗаполнено(Сертификаты) Тогда
		Сертификаты = Новый Структура;
	КонецЕсли;
	
	Возврат Сертификаты;
	
КонецФункции

Функция НайтиСертификатыВЗащищенномХранилищеНаСервере(Сертификаты, ВыполнятьПроверку) Экспорт
	
	НайденныеСертификаты = Новый Массив;
	НенайденныеСертификаты = Новый Массив;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		НайденныйСертификат = КриптографияЭДКО.НайтиСертификат(Сертификат, ВыполнятьПроверку);
		Если НайденныйСертификат = Неопределено Тогда
			НенайденныеСертификаты.Добавить(Сертификат);
		Иначе
			НайденныеСертификаты.Добавить(НайденныйСертификат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Сертификаты,НенайденныеСертификаты", НайденныеСертификаты, НенайденныеСертификаты);
	
КонецФункции

Функция ПолучитьСертификаты(Хранилище) Экспорт
	
	ПолученныеСертификаты = Новый Массив;
	Если ТипЗнч(Хранилище) = Тип("Массив") Тогда
		Для Каждого ЗначениеХранилища Из Хранилище Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ПолученныеСертификаты, 
				ХранилищеСертификатов.Получить(ПривестиКЕдиномуТипуХранилища(ЗначениеХранилища)));
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПолученныеСертификаты, 
			ХранилищеСертификатов.Получить(ПривестиКЕдиномуТипуХранилища(ЗначениеХранилища)));
	КонецЕсли;
	
	Сертификаты = Новый Массив;
	Для Каждого ПолученныйСертификат Из ПолученныеСертификаты Цикл
		Сертификат = Новый Структура;
		Сертификат.Вставить("Наименование", ПолученныйСертификат.Наименование);
		Сертификат.Вставить("Версия", ПолученныйСертификат.Версия);
		Сертификат.Вставить("СерийныйНомер", НРег(ПолученныйСертификат.СерийныйНомер));
		Сертификат.Вставить("Поставщик", ПреобразоватьВСтроку(ПолученныйСертификат.Издатель));
		Сертификат.Вставить("Владелец", ПреобразоватьВСтроку(ПолученныйСертификат.Субъект));
		Сертификат.Вставить("Отпечаток", СтрЗаменить(НРег(ПолученныйСертификат.Отпечаток), " ", ""));
		Сертификат.Вставить("ИспользоватьДляПодписи", ПолученныйСертификат.ИспользоватьДляПодписи);
		Сертификат.Вставить("ИспользоватьДляШифрования", ПолученныйСертификат.ИспользоватьДляШифрования);
		Сертификат.Вставить("ДействителенС", ПолученныйСертификат.ДатаНачала);
		Сертификат.Вставить("ДействителенПо", ПолученныйСертификат.ДатаОкончания);
		Сертификаты.Добавить(Новый ФиксированнаяСтруктура(Сертификат));
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

Функция ИзвлечьИнформациюОКриптопровайдереПоСертификату(Знач Сертификаты) Экспорт
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Сертификат.Вставить("Криптопровайдер", ИзвлечьКриптопровайдер(Сертификат.Сертификат));
		Сертификат.Удалить("Сертификат");
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

// Выполняет проверку подписи.
//
// Параметры:
//	Подпись             - ДвоичныеДанные, Строка - подпись, 
//                                которую необходимо проверить, или ее адрес во временном хранилище.
//	ИсходныеДанные      - ДвоичныеДанные, Строка - данные или адрес во временном хранилище.
//	Сертификаты         - Неопределено - извлечь сертификаты из подписи и поместить в параметр,
//                        проверка подписи в этом случае выполняется согласно извлекаемым подписантам.
//                      - Массив - массив двоичных данных сертификатов.
//	Подписанты          - Массив - возвращаемые подписанты при извлечении сертификатов из подписи.
//                        * СерийныйНомер  - Строка - серийный номер сертификата.
//                        * Поставщик      - Строка - издатель сертификата.
//                        * Отпечаток      - Строка - отпечаток сертификата.
//                        * Выполнено      - Булево - если Истина, то проверка подписи была выполнена для подписанта.
//                        * ПодписьВалидна - Булево - результат проверки подписи для подписанта.
//	КомментарийПоОшибке - Строка - может возвращаться причина неудачи проверки подписи.
//
// Возвращаемое значение:
//	Булево - Истина - подпись соответствует владельцам всех сертификатов.
//
Функция ПроверитьПодписьPKCS7(Подпись, ИсходныеДанные, Сертификаты = Неопределено, Подписанты = Неопределено, КомментарийПоОшибке = "") Экспорт
	
	Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеПодписи = Подпись;
	Иначе
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(Подпись);
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеИсходныхДанных = ИсходныеДанные;
	Иначе
		ДвоичныеДанныеИсходныхДанных = ПолучитьИзВременногоХранилища(ИсходныеДанные);
	КонецЕсли;
	
	Если Сертификаты = Неопределено Тогда
		СвойстваКриптосообщения = СервисКриптографии.ПолучитьСвойстваКриптосообщения(ДвоичныеДанныеПодписи);
		
		Сертификаты = ?(СвойстваКриптосообщения.Свойство("Сертификаты"), СвойстваКриптосообщения.Сертификаты, Новый Массив);
		СвойстваСертификатов = Новый Массив;
		Для каждого Сертификат Из Сертификаты Цикл
			СвойстваСертификата = СервисКриптографии.ПолучитьСвойстваСертификата(Сертификат);
			СвойстваСертификатов.Добавить(СвойстваСертификата);
		КонецЦикла;
		
		Подписанты = ?(СвойстваКриптосообщения.Свойство("Подписанты"),
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СвойстваКриптосообщения.Подписанты), Новый Массив);
		Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
			Подписанты[ИндексПодписанта] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Подписанты[ИндексПодписанта]);
			Подписанты[ИндексПодписанта].Вставить("Отпечаток", "");
			Подписанты[ИндексПодписанта].Вставить("Выполнено", Ложь);
			Подписанты[ИндексПодписанта].Вставить("ПодписьВалидна", Ложь);
			Подписанты[ИндексПодписанта].Вставить("Сертификат", Неопределено);
			ИздательСтрокой = ПреобразоватьВСтроку(Подписанты[ИндексПодписанта].Издатель);
			Подписанты[ИндексПодписанта].Вставить("Поставщик", ИздательСтрокой); // для совместимости
			
			Для ИндексСертификата = 0 По Сертификаты.Количество() - 1 Цикл
				Если СвойстваСертификатов[ИндексСертификата] <> Неопределено
					И СокрЛП(Подписанты[ИндексПодписанта].СерийныйНомер) = СокрЛП(СвойстваСертификатов[ИндексСертификата].СерийныйНомер)
					И ИздателиИлиСубъектыОдинаковые(Подписанты[ИндексПодписанта].Издатель,
					СвойстваСертификатов[ИндексСертификата].Издатель) Тогда
					
					Подписанты[ИндексПодписанта].Отпечаток = СтрЗаменить(СвойстваСертификатов[ИндексСертификата].Отпечаток, " ", "");
					Подписанты[ИндексПодписанта].Отпечаток = нрег(Подписанты[ИндексПодписанта].Отпечаток);
					Подписанты[ИндексПодписанта].Сертификат = Сертификаты[ИндексСертификата];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// дополнительный поиск на случай отличий написания издателя
		Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
			Если НЕ ЗначениеЗаполнено(Подписанты[ИндексПодписанта].Отпечаток) Тогда
				Для ИндексСертификата = 0 По Сертификаты.Количество() - 1 Цикл
					Если СокрЛП(Подписанты[ИндексПодписанта].СерийныйНомер) = СокрЛП(СвойстваСертификатов[ИндексСертификата].СерийныйНомер) Тогда
						Подписанты[ИндексПодписанта].Издатель = СвойстваСертификатов[ИндексСертификата].Издатель;
						Подписанты[ИндексПодписанта].Поставщик = ПреобразоватьВСтроку(Подписанты[ИндексПодписанта].Издатель);
						Подписанты[ИндексПодписанта].Отпечаток = СтрЗаменить(СвойстваСертификатов[ИндексСертификата].Отпечаток, " ", "");
						Подписанты[ИндексПодписанта].Отпечаток = нрег(Подписанты[ИндексПодписанта].Отпечаток);
						Подписанты[ИндексПодписанта].Сертификат = Сертификаты[ИндексСертификата];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ПодписантыДляПоискаВХранилище = Новый Массив;
		Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
			ПодписантыДляПоискаВХранилище.Добавить(Подписанты[ИндексПодписанта]);
		КонецЦикла;
		
		Если ПодписантыДляПоискаВХранилище.Количество() > 0 Тогда
			РезультатыПоиска = НайтиСертификатыВЗащищенномХранилищеНаСервере(ПодписантыДляПоискаВХранилище, Ложь);
			
			Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
				Если НЕ ЗначениеЗаполнено(Подписанты[ИндексПодписанта].Отпечаток) Тогда
					Для каждого НайденныйСертификат Из РезультатыПоиска.Сертификаты Цикл
						Если СокрЛП(Подписанты[ИндексПодписанта].СерийныйНомер) = СокрЛП(НайденныйСертификат.СерийныйНомер)
							И ИздателиИлиСубъектыОдинаковые(Подписанты[ИндексПодписанта].Издатель, НайденныйСертификат.Издатель) Тогда
							
							Подписанты[ИндексПодписанта].Отпечаток = СокрЛП(НайденныйСертификат.Отпечаток);
							Подписанты[ИндексПодписанта].Сертификат = НайденныйСертификат.Сертификат;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого НенайденныйСертификат Из РезультатыПоиска.НенайденныеСертификаты Цикл
				Если ЗначениеЗаполнено(НенайденныйСертификат.Отпечаток) И ЗначениеЗаполнено(НенайденныйСертификат.Сертификат)
					И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ХранилищеСертификатов) Тогда
					
					ХранилищеСертификатов.Добавить(НенайденныйСертификат.Сертификат, Перечисления.ТипХранилищаСертификатов.СертификатыПолучателей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
			Если НЕ ЗначениеЗаполнено(Подписанты[ИндексПодписанта].Отпечаток) Тогда
				ТекстСообщения = НСтр("ru = 'При проверке подписи не найден сертификат поставщика ""%1"" с серийным номером ""%2"".'");
				КомментарийПоОшибке = СтрШаблон(
					ТекстСообщения,
					Подписанты[ИндексПодписанта].Поставщик,
					Подписанты[ИндексПодписанта].СерийныйНомер);
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Подписанты = Новый Массив;
		Для ИндексСертификата = 0 По Сертификаты.Количество() - 1 Цикл
			ПодписантПоСертификату = Новый Структура;
			ПодписантПоСертификату.Вставить("Выполнено", Ложь);
			ПодписантПоСертификату.Вставить("ПодписьВалидна", Ложь);
			ПодписантПоСертификату.Вставить("Сертификат", Сертификаты[ИндексСертификата]);
			Подписанты.Добавить(ПодписантПоСертификату);
		КонецЦикла;
	КонецЕсли;
	
	Если Подписанты.Количество() = 0 Тогда
		КомментарийПоОшибке = НСтр("ru = 'Отсутствует информация о подписантах, проверка подписи невозможна.'");
		Возврат Ложь;
	КонецЕсли;
	
	ПодписьВалидна = Истина;
	Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
		ПараметрыПодписания = Новый Структура("ОтсоединеннаяПодпись, Сертификат", Истина, Подписанты[ИндексПодписанта].Сертификат);
		Подписанты[ИндексПодписанта].ПодписьВалидна =
			СервисКриптографии.ПроверитьПодпись(ДвоичныеДанныеПодписи, ДвоичныеДанныеИсходныхДанных, "CMS", ПараметрыПодписания);
		
		Если Подписанты[ИндексПодписанта].ПодписьВалидна
			И Подписанты[ИндексПодписанта].Свойство("СерийныйНомер")
			И Подписанты[ИндексПодписанта].Свойство("Поставщик")
			И НЕ ПроверитьСертификат(Подписанты[ИндексПодписанта].Сертификат, Ложь) Тогда
			
			КомментарийПоОшибке = СтрШаблон(
				НСтр("ru = 'Невалидный сертификат поставщика ""%1"" с серийным номером ""%2"" при проверке подписи.'"),
				Подписанты[ИндексПодписанта].Поставщик,
				Подписанты[ИндексПодписанта].СерийныйНомер);
			Возврат Ложь;
		КонецЕсли;
		
		Подписанты[ИндексПодписанта].Выполнено = Истина;
		Если НЕ Подписанты[ИндексПодписанта].ПодписьВалидна Тогда
			ПодписьВалидна = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодписьВалидна;
	
КонецФункции

Функция ИзвлечьИнформациюОПодписантахИзJSON(ПодписантыJSON) Экспорт
	
	ЧтениеПодписантовJSON = Новый ЧтениеJSON;
	ЧтениеПодписантовJSON.УстановитьСтроку(ПодписантыJSON);
	
	Подписанты = ПрочитатьJSON(ЧтениеПодписантовJSON);
	Если Подписанты <> Неопределено Тогда
		Если ТипЗнч(Подписанты) = Тип("Структура") Тогда
			Подписанты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подписанты); // создаем массив, помещаем туда подписанта
		КонецЕсли;
		
		Для ИндексПодписанта = 0 По Подписанты.Количество() - 1 Цикл
			Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура("СерийныйНомер, Поставщик",
				Подписанты[ИндексПодписанта].serial_number, Подписанты[ИндексПодписанта].issuer);
		КонецЦикла;
		Подписанты = Новый ФиксированныйМассив(Подписанты);
	КонецЕсли;
	
	Возврат Подписанты;
	
КонецФункции

Функция ПреобразоватьВСтроку(Издатель) Экспорт
	
	СтрокаИздателя = "";
	
	Для Каждого Тег Из Издатель Цикл 
		СтрокаИздателя = СтрокаИздателя + ?(СтрокаИздателя = "", "", ",") + Тег.Ключ + "=" + Тег.Значение;
	КонецЦикла;
	
	Возврат СтрокаИздателя;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьКриптопровайдер(Сертификат)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("cer");
	Сертификат.Записать(ИмяВременногоФайла);
	
	Байты = ПрочитатьФайлВМассив(ИмяВременногоФайла);
	
	БайтыСигнатурыПоиска = Новый Массив; // Ищем OID 1.2.643.100.111
	БайтыСигнатурыПоиска.Добавить(6);
	БайтыСигнатурыПоиска.Добавить(5);
	БайтыСигнатурыПоиска.Добавить(42);
	БайтыСигнатурыПоиска.Добавить(133);
	БайтыСигнатурыПоиска.Добавить(3);
	БайтыСигнатурыПоиска.Добавить(100);
	БайтыСигнатурыПоиска.Добавить(111);
	
	Индекс = 0;
	ИндексНачалаСигнатуры = 0;
	СигнатураНайдена = Ложь;
	Для Каждого Байт Из Байты Цикл
		Если Байт = БайтыСигнатурыПоиска[0] Тогда
			СигнатураНайдена = Истина;
			Для Индекс2 = 1 По 6 Цикл
				Если Байты[Индекс2 + Индекс] <> БайтыСигнатурыПоиска[Индекс2] Тогда
					СигнатураНайдена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СигнатураНайдена Тогда
				ИндексНачалаСигнатуры = Индекс;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Криптопровайдер = "";
	Если СигнатураНайдена Тогда
		КоличествоБайтПодТекст = Байты[ИндексНачалаСигнатуры + БайтыСигнатурыПоиска.Количество() + 1];
		НачалоТекста = ИндексНачалаСигнатуры + БайтыСигнатурыПоиска.Количество() + 4;
		
		БайтыДляЗаписи = Новый Массив;
		Для Индекс = НачалоТекста По НачалоТекста + КоличествоБайтПодТекст - 3 Цикл
			БайтыДляЗаписи.Добавить(Байты[Индекс]);
		КонецЦикла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ЗаписатьФайлИзМассива(ИмяФайла, БайтыДляЗаписи);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "utf-8");
		Криптопровайдер = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	КонецЕсли;
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Если СтрНайти(НРег(Криптопровайдер), "cryptopro") ИЛИ СтрНайти(НРег(Криптопровайдер), "криптопро") Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
	ИначеЕсли СтрНайти(НРег(Криптопровайдер), "vipnet") ИЛИ СтрНайти(НРег(Криптопровайдер), "випнет") Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
	Иначе
		Криптопровайдер = Неопределено;
	КонецЕсли;
			
	Возврат Криптопровайдер;
	
КонецФункции

Функция ПрочитатьФайлВМассив(ИмяФайла)
	
	Результат = Новый Массив;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "ISO-8859-1", Символы.ПС, Символы.ПС);
	
	Пока Истина Цикл
		СимволТекста = ЧтениеТекста.Прочитать(1);
		Если СимволТекста = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КодСимволаТекста = КодСимвола(СимволТекста);
		
		Результат.Добавить(КодСимволаТекста);
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьФайлИзМассива(ИмяФайла, Массив)
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "ISO-8859-1", Символы.ПС,, Символы.ПС);
	
	Для ИндексВМассиве = 0 По Массив.ВГраница() Цикл
		СимволИзМассива = Символ(Массив[ИндексВМассиве]);
		ЗаписьТекста.Записать(СимволИзМассива);
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурнал(Имя, Уровень = "Ошибка", Комментарий) Экспорт
	
	Уровни = Новый Соответствие;
	Уровни.Вставить("Информация", 		УровеньЖурналаРегистрации.Информация);
	Уровни.Вставить("Ошибка", 			УровеньЖурналаРегистрации.Ошибка);
	Уровни.Вставить("Предупреждение", 	УровеньЖурналаРегистрации.Предупреждение);
	Уровни.Вставить("Примечание", 		УровеньЖурналаРегистрации.Примечание);
	
	УровеньЖР = Уровни.Получить(Уровень);
	
	ЗаписьЖурналаРегистрации(Имя, УровеньЖР,,, Комментарий);
	
КонецПроцедуры

Функция ПривестиКЕдиномуТипуХранилища(Знач ТипХранилища)
	
	СоответствиеТиповХранилищ = Новый Соответствие;
	СоответствиеТиповХранилищ.Вставить("MY", Перечисления.ТипХранилищаСертификатов.ПерсональныеСертификаты);
	СоответствиеТиповХранилищ.Вставить("ADDRESSBOOK", Перечисления.ТипХранилищаСертификатов.СертификатыПолучателей);
	СоответствиеТиповХранилищ.Вставить("CA", Перечисления.ТипХранилищаСертификатов.СертификатыУдостоверяющихЦентров);
	СоответствиеТиповХранилищ.Вставить("ROOT", Перечисления.ТипХранилищаСертификатов.КорневыеСертификаты);
	
	Если ТипЗнч(ТипХранилища) = Тип("Строка") Тогда		
		Возврат СоответствиеТиповХранилищ.Получить(ВРег(ТипХранилища));
	ИначеЕсли ТипЗнч(ТипХранилища) = Тип("ПеречислениеСсылка.ТипХранилищаСертификатов") Тогда
		Возврат ТипХранилища;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТипХранилища;
	
КонецФункции

Функция ИздателиИлиСубъектыОдинаковые(ИздательИлиСубъект1, ИздательИлиСубъект2)
	
	Для каждого ЭлементИздателяИлиСубъекта1 Из ИздательИлиСубъект1 Цикл
		ЗначениеЭлементаИздателяИлиСубъекта2 = Неопределено;
		Если ЗначениеЗаполнено(ЭлементИздателяИлиСубъекта1.Значение)
			И ИздательИлиСубъект2.Свойство(ЭлементИздателяИлиСубъекта1.Ключ, ЗначениеЭлементаИздателяИлиСубъекта2)
			И ЗначениеЗаполнено(ЗначениеЭлементаИздателяИлиСубъекта2)
			И СокрЛП(ЭлементИздателяИлиСубъекта1.Значение) <> СокрЛП(ЗначениеЭлементаИздателяИлиСубъекта2) Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти