
#Область ПрограмныйИнтерфейс

// Контроль лимитов при проведении заявки на расходование ДС
// 
// Параметры:
//	ЗаявкаОбъект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый документ
//	Отказ - Булево - признак отказа в проведении документа
//
Процедура ВыполнитьКонтрольРезультатовПроведения(ЗаявкаОбъект, Отказ) Экспорт
	Перем Ошибки;
	
	СверхЛимита              = ЗаявкаОбъект.СверхЛимита;
	КонтролироватьПревышение = ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств");
	
	Если СверхЛимита Или Не КонтролироватьПревышение Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЗаявку         = ЗаявкаОбъект.Ссылка;
	ДополнительныеСвойства = ЗаявкаОбъект.ДополнительныеСвойства;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияПользователю = Новый Массив;
	
	Если ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		Возврат;
	КонецЕсли;
	
	НарушеныТолькоИнформационныеЛимиты = Ложь;
	ИспользоватьБюджетирование = Ложь;
	//++НЕ УТ
	ИспользоватьБюджетирование = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование");
	
	Если ИспользоватьБюджетирование Тогда
		ЗаявкаПроходитПоЛимитамБюджетирования(ЗаявкаОбъект, Ошибки, НарушеныТолькоИнформационныеЛимиты);
						
	Иначе
	//--НЕ УТ
	
		ЗаявкаПроходитПоОперативнымЛимитам(СсылкаНаЗаявку, Ошибки, ДополнительныеСвойства);
		
	//++НЕ УТ
	КонецЕсли;
	//--НЕ УТ
	
	Если КонтролироватьПревышение И Не СверхЛимита Тогда
		Если ИспользоватьБюджетирование И НарушеныТолькоИнформационныеЛимиты Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//++НЕ УТ

// Вызывается из Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования.МодульОбъекта
// Плановое и фактическое состояние по лимитам на расходование ДС 
// 
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов
//	Документ (опционально) - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - документ, для которого формируются временные движения по регистрам ДС
//	ВалютаЗаявки (опционально) - СправочникСсылка.Валюты - валюта, в которой нужно получить план-факт
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о плановом и фактическом состоянии лимитов на расходование ДС
// 
Функция ПланФактЛимитов(Дата, Знач Документ = Неопределено, Знач ВалютаЗаявки = Неопределено, Знач ПланПриОстутствииФакта = Ложь) Экспорт
	Перем ЗаписыватьНаборы;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПроверки = Дата;
	ИсточникиСДвижениями = Неопределено;
	
	Если Не Документ = Неопределено И Документ.Проведен Тогда
		ЗаявкаОбъект = Документ.ПолучитьОбъект();
		СсылкаНаЗаявку = ЗаявкаОбъект.Ссылка;
		ВалютаЗаявки = ЗаявкаОбъект.Валюта;
		
		ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения, Истина);
		
		// Уточним регистры, в которых есть движения
		ИсточникиСДвижениями = Новый Массив;
		Для Каждого ИмяРегистра Из ИменаРегистровНепустыхНаборов Цикл 
			Если ЕстьДвиженияПоРегистру(СсылкаНаЗаявку, ИмяРегистра) Тогда
				ИсточникиСДвижениями.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//1. Статьи, факт имеет отношения к документу
	ПараметрыПланФактЛимитовЭтап1 = ПараметрыПланФактЛимитов(ДатаПроверки);
	ПараметрыПланФактЛимитовЭтап1.СсылкаНаЗаявку = СсылкаНаЗаявку; 
	ПараметрыПланФактЛимитовЭтап1.ОтборИсточниковПоИменамРегистров = ИсточникиСДвижениями;
	
	ПараметрыПолученияФакта = ПараметрыПолученияФакта(ПараметрыПланФактЛимитовЭтап1);
	
	ИмяПоляИдентификатора = "ПравилоФакта";
	ПараметрыПолученияФакта.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	ПараметрыПолученияФакта.ДополнительныеДанные.ИмяПоляИдентификатора = ИмяПоляИдентификатора;
	ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов = Истина;
	ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных = ДанныеДополнительныхПолей(ИмяПоляИдентификатора, ПараметрыПланФактЛимитовЭтап1, ПараметрыПолученияФакта, ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов);
	
	ПрименяемыеПравилаЛимитов = ПрименяемыеПравилаЛимитов(ПараметрыПланФактЛимитовЭтап1, ПараметрыПолученияФакта);
	
	ПараметрыПланФактЛимитовЭтап1 = Неопределено;
	
	//2. Факт по статьям
	ПараметрыПланФактЛимитовЭтап2 = ПараметрыПланФактЛимитов(ДатаПроверки, ПрименяемыеПравилаЛимитов.Отбор);
	
	ПараметрыПолученияФакта = ПараметрыПолученияФакта(ПараметрыПланФактЛимитовЭтап2);
	
	ИмяПоляИдентификатора = "ПравилоФакта";
	ПараметрыПолученияФакта.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	ПараметрыПолученияФакта.ДополнительныеДанные.ИмяПоляИдентификатора = ИмяПоляИдентификатора;
	ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов = Истина;
	ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных = ДанныеДополнительныхПолей(ИмяПоляИдентификатора, ПараметрыПланФактЛимитовЭтап2, ПараметрыПолученияФакта, ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов);
	
	ФактическиеДанные = ФактПоПравиламЛимитирования(ПараметрыПланФактЛимитовЭтап2, ПараметрыПолученияФакта, ПрименяемыеПравилаЛимитов.Реквизиты);
	ФактическиеДанные.Колонки.СуммаВВалюте.Имя = "СуммаФакт";
	
	// В режиме получения ВСЕХ данных по план-факту - из отчета при нулевом факте
	Если ПланПриОстутствииФакта И ФактическиеДанные.Количество() = 0 Тогда
		ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных.Колонки.ПравилоЛимита.Имя = "Правило";
		ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных, ФактическиеДанные);
			
		ЗначенияПоУмолчаниюПриПустомФакте = Новый Структура;
		ЗначенияПоУмолчаниюПриПустомФакте.Вставить("Сценарий", Неопределено);
		ЗначенияПоУмолчаниюПриПустомФакте.Вставить("Организация", Неопределено);
		ЗначенияПоУмолчаниюПриПустомФакте.Вставить("Подразделение", Неопределено);
		ЗначенияПоУмолчаниюПриПустомФакте.Вставить("СуммаФакт", 0);
		
		Для Каждого СтрокаФакта Из ФактическиеДанные Цикл 
			ЗаполнитьЗначенияСвойств(СтрокаФакта, ЗначенияПоУмолчаниюПриПустомФакте);
		КонецЦикла;
	Иначе
		ПланПриОстутствииФакта = Ложь;
	КонецЕсли;
	
	//3. Сбор запроса для план-факт анализа
 	ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ФактическиеДанные, ВалютаЗаявки, ДатаПроверки, ПланПриОстутствииФакта);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПланФактПоПравилам;
	
КонецФункции

// Возвращает действующие на указанную дату правила лимитов по данным бюджетирования
// 
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов
//	ОтборПоПравиламЛимитирования - Массив, СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - ограничение использования правил лимитов по бюджетам
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица лимитов в разрезе сценария, статьи, периодичности, типа лимита и используемых аналитик
// 
Функция ПравилаЛимитовНаДату(ДатаЛимитов, ОтборПоПравиламЛимитирования = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МоделиБюджетирования.Ссылка
		|ПОМЕСТИТЬ МоделиБюджетирования
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.НачалоДействия <= &ДатаЛимитов
		|	И (&ДатаЛимитов <= МоделиБюджетирования.КонецДействия
		|			ИЛИ МоделиБюджетирования.КонецДействия = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
		|ПОМЕСТИТЬ СтатьиСДействующимиПравиламиПолученияФакта
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|ГДЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетС <= &ДатаЛимитов
		|	И (&ДатаЛимитов <= ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо
		|			ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка,
		|	ПравилаЛимитовПоДаннымБюджетирования.Наименование,
		|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета,
		|	ПравилаЛимитовПоДаннымБюджетирования.Сценарий,
		|	ПравилаЛимитовПоДаннымБюджетирования.Периодичность,
		|	ПравилаЛимитовПоДаннымБюджетирования.ТипЛимита,
		|	ИСТИНА КАК ПрочиеЗначенияАналитик,
		|	ПравилаЛимитовПоДаннымБюджетирования.ИспользуемыеАналитики.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВидАналитики,
		|		ИмяИзмерения
		|	),
		|	НЕОПРЕДЕЛЕНО КАК ДополнительныйОтбор
		|ИЗ
		|	МоделиБюджетирования КАК МоделиБюджетирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиСДействующимиПравиламиПолученияФакта КАК СтатьиСДействующимиПравиламиПолученияФакта
		|			ПО ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета = СтатьиСДействующимиПравиламиПолученияФакта.СтатьяБюджетов
		|		ПО МоделиБюджетирования.Ссылка = ПравилаЛимитовПоДаннымБюджетирования.Владелец
		|ГДЕ
		|	НЕ ПравилаЛимитовПоДаннымБюджетирования.ЭтоГруппа
		|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ДатаЛимитов", ДатаЛимитов);
	
	Если ЗначениеЗаполнено(ОтборПоПравиламЛимитирования) Тогда
		Если ТипЗнч(ОтборПоПравиламЛимитирования) = Тип("СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования") Тогда
			МассивПравил = Новый Массив;
			МассивПравил.Добавить(ОтборПоПравиламЛимитирования);
		ИначеЕсли ТипЗнч(ОтборПоПравиламЛимитирования) = Тип("Массив") Тогда 
			МассивПравил = ОтборПоПравиламЛимитирования;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И ПравилаЛимитовПоДаннымБюджетирования.Ссылка В (&МассивПравил)";
		Запрос.УстановитьПараметр("МассивПравил", МассивПравил);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

//--НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтрольОперативныхЛимитов

Процедура СообщитьОбОшибкахПроведенияПоРегиструЛимитыРасходаДенежныхСредств(Ошибки, РезультатЗапроса)
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Превышен лимит расхода по статье %1 на сумму %2 %3'"),
				Строка(Выборка.СтатьяДвиженияДенежныхСредств),
				Строка(Выборка.ПервышениеЛимита),
				Строка(ВалютаУправленческогоУчета));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаявкаПроходитПоОперативнымЛимитам(СсылкаНаЗаявку, Ошибки, ДополнительныеСвойства)
	Перем ЕстьИзменения;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ЕстьИзменения = СтруктураВременныеТаблицы.Свойство("ДвиженияЛимитыРасходаДенежныхСредствИзменение", ЕстьИзменения) И ЕстьИзменения;
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыРасхода.Ссылка.МоментВремени КАК МоментВремени,
	|	ЛимитыРасхода.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЛимитыРасхода.ЕстьЛимит КАК ЕстьЛимит
	|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДС
	|ИЗ
	|	Документ.ЛимитыРасходаДенежныхСредств.Лимиты КАК ЛимитыРасхода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
	|		ПО (ЛимитыРасхода.Ссылка.Организация = Таблица.Организация
	|				ИЛИ НЕ &ЛимитыПоОрганизациям)
	|			И (ЛимитыРасхода.Ссылка.Подразделение = Таблица.Подразделение
	|				ИЛИ НЕ &ЛимитыПоПодразделениям)
	|			И ЛимитыРасхода.СтатьяДвиженияДенежныхСредств = Таблица.СтатьяДвиженияДенежныхСредств
	|ГДЕ
	|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
	|	И НЕ Таблица.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ЛимитыРасхода.Ссылка.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|	И ЛимитыРасхода.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен
	|ИЗ
	|	ВременнаяТаблицаСтатьиДДС КАК ВременнаяТаблицаСтатьиДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДС КАК Отбор
	|		ПО ВременнаяТаблицаСтатьиДДС.СтатьяДвиженияДенежныхСредств = Отбор.СтатьяДвиженияДенежныхСредств
	|			И ВременнаяТаблицаСтатьиДДС.МоментВремени < Отбор.МоментВремени
	|ГДЕ
	|	Отбор.МоментВремени ЕСТЬ NULL
	|	И НЕ ВременнаяТаблицаСтатьиДДС.ЕстьЛимит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СтатьяДвиженияДенежныхСредств,
	|	Таблица.Организация,
	|	Таблица.Подразделение
	|ПОМЕСТИТЬ ИзмененияЛимитов
	|ИЗ
	|	ДвиженияЛимитыРасходаДенежныхСредствИзменение КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСтатьиДДСЛимитНеОграничен КАК СтатьиДДСЛимитНеОграничен
	|		ПО Таблица.СтатьяДвиженияДенежныхСредств = СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДДСЛимитНеОграничен.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
	|	И Таблица.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОборотов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаОборотов.Организация КАК Организация,
	|	ТаблицаОборотов.Подразделение КАК Подразделение,
	|	ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот КАК ПервышениеЛимита
	|ИЗ
	|	РегистрНакопления.ЛимитыРасходаДенежныхСредств.Обороты(
	|			НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
	|			,
	|			(СтатьяДвиженияДенежныхСредств, Организация, Подразделение) В
	|				(ВЫБРАТЬ
	|					ИзмененияЛимитов.СтатьяДвиженияДенежныхСредств,
	|					ИзмененияЛимитов.Организация,
	|					ИзмененияЛимитов.Подразделение
	|				ИЗ
	|					ИзмененияЛимитов)) КАК ТаблицаОборотов
	|ГДЕ
	|	&КонтролироватьПревышениеЛимитовРасходаДенежныхСредств
	|	И ТаблицаОборотов.РасходВПределахЛимитаОборот - ТаблицаОборотов.ЛимитОборот > 0";
	
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЗаявку, "ДатаПлатежа, ЖелательнаяДатаПлатежа, Дата");
	Если ЗначениеЗаполнено(РеквизитыЗаявки.ДатаПлатежа) Тогда
		Период = РеквизитыЗаявки.ДатаПлатежа;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыЗаявки.ЖелательнаяДатаПлатежа) Тогда
		Период = РеквизитыЗаявки.ЖелательнаяДатаПлатежа;
	Иначе
		Период = РеквизитыЗаявки.Дата;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ЛимитыПоОрганизациям",
		ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям"));
	Запрос.УстановитьПараметр("ЛимитыПоПодразделениям",
		ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям"));
	Запрос.УстановитьПараметр("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств",
		ПолучитьФункциональнуюОпцию("КонтролироватьПревышениеЛимитовРасходаДенежныхСредств"));
	
	СообщитьОбОшибкахПроведенияПоРегиструЛимитыРасходаДенежныхСредств(Ошибки, Запрос.Выполнить());
	
КонецПроцедуры

#КонецОбласти

//++НЕ УТ

#Область КонтрольЛимитовПоДаннымБюджетирования

Процедура ЗаявкаПроходитПоЛимитамБюджетирования(ЗаявкаОбъект, Ошибки, НарушеныТолькоИнформационныеЛимиты)
	
	ДатаПроверки = ЗаявкаОбъект.ЖелательнаяДатаПлатежа;
	СсылкаНаЗаявку = ЗаявкаОбъект.Ссылка;
	ВалютаЗаявки = ЗаявкаОбъект.Валюта;
	
	РазрешающийЛимитНайден = Ложь;
	ПродолжитьРасчет = Истина;
	
	ИменаРегистровНепустыхНаборов = ИменаРегистровНепустыхНаборов(ЗаявкаОбъект.Движения);
	Если ИменаРегистровНепустыхНаборов.Количество() = 0 Тогда
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	//1. Статьи, факт которых будет изменен после проведения заявки
	Если ПродолжитьРасчет Тогда
		
		ПараметрыПланФактЛимитовЭтап1 = ПараметрыПланФактЛимитов(ДатаПроверки);
		ПараметрыПланФактЛимитовЭтап1.СсылкаНаЗаявку = СсылкаНаЗаявку; 
		ПараметрыПланФактЛимитовЭтап1.ОтборИсточниковПоИменамРегистров = ИменаРегистровНепустыхНаборов;
		
		ПараметрыПолученияФакта = ПараметрыПолученияФакта(ПараметрыПланФактЛимитовЭтап1);
		
		ИмяПоляИдентификатора = "ПравилоФакта";
		ПараметрыПолученияФакта.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
		ПараметрыПолученияФакта.ДополнительныеДанные.ИмяПоляИдентификатора = ИмяПоляИдентификатора;
		ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов = Истина;
		ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных = ДанныеДополнительныхПолей(ИмяПоляИдентификатора, ПараметрыПланФактЛимитовЭтап1, ПараметрыПолученияФакта, ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов);
		
		Если ПараметрыПланФактЛимитовЭтап1.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		
		ПрименяемыеПравилаЛимитов = ПрименяемыеПравилаЛимитов(ПараметрыПланФактЛимитовЭтап1, ПараметрыПолученияФакта);
		
		ПараметрыПланФактЛимитовЭтап1 = Неопределено;
	
		Если ПрименяемыеПравилаЛимитов.Реквизиты.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		
		//2. Фактические данные в разрезе правил лимитирования
		ПараметрыПланФактЛимитовЭтап2 = ПараметрыПланФактЛимитов(ДатаПроверки, ПрименяемыеПравилаЛимитов.Отбор);
		
		ПараметрыПолученияФакта = ПараметрыПолученияФакта(ПараметрыПланФактЛимитовЭтап2);
		
		ИмяПоляИдентификатора = "ПравилоФакта";
		ПараметрыПолученияФакта.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
		ПараметрыПолученияФакта.ДополнительныеДанные.ИмяПоляИдентификатора = ИмяПоляИдентификатора;
		ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов = Истина;
		ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных = ДанныеДополнительныхПолей(ИмяПоляИдентификатора, ПараметрыПланФактЛимитовЭтап2, ПараметрыПолученияФакта, ПараметрыПолученияФакта.ДополнительныеДанные.НумерацияИдентификаторов);
		
		ФактическиеДанные = ФактПоПравиламЛимитирования(ПараметрыПланФактЛимитовЭтап2, ПараметрыПолученияФакта, ПрименяемыеПравилаЛимитов.Реквизиты, РазрешающийЛимитНайден);
		ФактическиеДанные.Колонки.СуммаВВалюте.Имя = "СуммаФакт";
		
		//3. Сбор запроса для план-факт анализа
	 	ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ФактическиеДанные, ВалютаЗаявки, ДатаПроверки);
		
		НарушеныТолькоИнформационныеЛимиты = Истина;
		
		//4. План-факт анализ
		Для Каждого СтрокаПланФакта из ПланФактПоПравилам Цикл
			Если СтрокаПланФакта.СуммаПревышения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(
				ПланФактПоПравилам.Колонки, 
				СтрокаПланФакта, 
				ДатаПроверки);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			Если СтрокаПланФакта.ТипЛимита <> Перечисления.ТипыЛимитовРасходованияДС.Информационный Тогда
				НарушеныТолькоИнформационныеЛимиты = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//5. Анализ, что заявка попала в один из "разрешающих лимитов"
	Если Не РазрешающийЛимитНайден Тогда
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно ""Разрешающее"" правило лимитирования. 
									|Заявка может быть только сверх-лимитной.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(КолонкиТаблицыПланФакта, СтрокаПланФакта, ДатаПроверки)
	
	ПрименяемоеПравилоЛимита = СтрокаПланФакта.Правило;
	
	ПравоИспользованияОтчета = ПравоДоступа("Использование", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования);
	
	ПредставлениеАналитикЛимита = ПредставлениеЛимита(КолонкиТаблицыПланФакта, СтрокаПланФакта);
	
	ПериодПравила = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(ДатаПроверки, ПрименяемоеПравилоЛимита.Периодичность);
		
	ЧастиПредставленияЛимита = Новый Массив;
	ЧастиПредставленияЛимита.Добавить(ПрименяемоеПравилоЛимита.Наименование);
	Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
		ЧастиПредставленияЛимита.Добавить(НСтр("ru= 'по'") );
		ЧастиПредставленияЛимита.Добавить(ПредставлениеАналитикЛимита);
	КонецЕсли;
	
	Если ПравоИспользованияОтчета Тогда
		ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %3 лимита ""%4"".'")
			+ Символы.ПС
			+ НСтр("ru = 'Всего лимит в периоде %5 - %2 %3.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%4"" за период %5.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		СтрокаПланФакта.СуммаПревышения,
		СтрокаПланФакта.СуммаПланПоУсловиямКонтроля,
		СтрокаПланФакта.Валюта,
		СтрСоединить(ЧастиПредставленияЛимита, Символы.НПП),
		ПериодПравила);
		
	Возврат ТекстСообщения;

КонецФункции

Функция ДанныеДополнительныхПолей(ИмяПоляИдентификатора, ПараметрыПроверки, ПараметрыПолученияФакта, КоррекцияУникальногоИдентификатора = Ложь)
	ДатаПроверки = ПараметрыПроверки.ДатаПроверки;
	ЛимитыДействующиеНаДату = ПараметрыПроверки.ЛимитыДействующиеНаДату;
	ТаблицаПравилСтатей = ПараметрыПроверки.ТаблицаПравилСтатей;
	МаксимальныйНомерАналитики = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ДанныеДополнительныхПолей = Новый ТаблицаЗначений;
	ДанныеДополнительныхПолей.Колонки.Добавить("УникальныйИдентификатор");
	ДанныеДополнительныхПолей.Колонки.Добавить("НачалоПериода");
	ДанныеДополнительныхПолей.Колонки.Добавить("КонецПериода");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПравилоЛимита");
	ДанныеДополнительныхПолей.Колонки.Добавить("ТипЛимита");
	ДанныеДополнительныхПолей.Колонки.Добавить("СтатьяБюджета");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПравилоФакта");
	
	ДанныеДополнительныхПолей.Колонки.Добавить("ИспользуемыеАналитики");
	
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоОрганизациям");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоПодразделениям");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПрочиеЗначенияАналитик");
		
	ДанныеДополнительныхПолей.Колонки.Добавить("ОрганизацияПустоеЗначение");
	ДанныеДополнительныхПолей.Колонки.Добавить("ПодразделениеПустоеЗначение");
	
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоСценариям");
	ДанныеДополнительныхПолей.Колонки.Добавить("Сценарий");
	ДанныеДополнительныхПолей.Колонки.Добавить("СценарийПустоеЗначение");
	
	ПустойСценарий = Справочники.Сценарии.ПустаяСсылка();
	
	ВидыАналитикПравила = Новый Структура; 
	
	Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл
		Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДополнительныхПолей.Колонки.Добавить("ВидАналитики" + НомерАналитики);
		ДанныеДополнительныхПолей.Колонки.Добавить("Аналитика" + НомерАналитики + "ПустоеЗначение");
		
		ВидыАналитикПравила.Вставить("ВидАналитики" + НомерАналитики);
	КонецЦикла;
	
	Если КоррекцияУникальногоИдентификатора Тогда
		НумераторыПолейИД = Новый Соответствие; // Ключ - значение поля идентификатора, Значение - количество повторений
	КонецЕсли;
	
	Для Каждого ДействующийЛимит из ЛимитыДействующиеНаДату Цикл
		СтрокиПравилПолученияФакта = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("СтатьяБюджетов", ДействующийЛимит.СтатьяБюджета));
		
		// Периоды с одинаковой периодичностью будут свернуты до получения факта
		ПериодПравила = Новый СтандартныйПериод(
			БюджетированиеКлиентСервер.ДатаНачалаПериода(ДатаПроверки, ДействующийЛимит.Периодичность),
			БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаПроверки,  ДействующийЛимит.Периодичность));
			
		#Область КэшированиеНастроекПравила
		
		НайденныеСтроки = ДействующийЛимит.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ИмяИзмерения", "Организация"));
		ПоОрганизациям = НайденныеСтроки.Количество() > 0;
		
		НайденныеСтроки = ДействующийЛимит.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ИмяИзмерения", "Подразделение"));
		ПоПодразделениям = НайденныеСтроки.Количество() > 0;
		
		ПоСценариям = ЗначениеЗаполнено(ДействующийЛимит.Сценарий);
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;

			ВидАналитики = ДействующийЛимит.СтатьяБюджета["ВидАналитики" + НомерАналитики];
			НайденныеСтроки = ДействующийЛимит.ИспользуемыеАналитики.НайтиСтроки(Новый Структура("ВидАналитики", ВидАналитики));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = ВидАналитики;
			Иначе
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти 
			
		Для Каждого СтрокаПравилаПолученияФакта Из СтрокиПравилПолученияФакта Цикл
			СтрокаДопДанных = ДанныеДополнительныхПолей.Добавить();
			
			СтрокаДопДанных.НачалоПериода          = ПериодПравила.ДатаНачала;
			СтрокаДопДанных.КонецПериода           = ПериодПравила.ДатаОкончания;
			СтрокаДопДанных.ПравилоЛимита          = ДействующийЛимит.Ссылка;
			СтрокаДопДанных.ТипЛимита              = ДействующийЛимит.ТипЛимита;
			СтрокаДопДанных.СтатьяБюджета          = ДействующийЛимит.СтатьяБюджета;
			СтрокаДопДанных.ПравилоФакта           = СтрокаПравилаПолученияФакта.Правило;
			СтрокаДопДанных.ПоОрганизациям         = ПоОрганизациям;
			СтрокаДопДанных.ПоПодразделениям       = ПоПодразделениям;
			СтрокаДопДанных.ПрочиеЗначенияАналитик = ДействующийЛимит.ПрочиеЗначенияАналитик;
			СтрокаДопДанных.ИспользуемыеАналитики  = ДействующийЛимит.ИспользуемыеАналитики;
			
			СтрокаДопДанных.ПоСценариям            = ПоСценариям;
			СтрокаДопДанных.Сценарий               = ДействующийЛимит.Сценарий;
			СтрокаДопДанных.СценарийПустоеЗначение = ПустойСценарий;
			
			ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ВидыАналитикПравила);
			
			Если ЗначениеЗаполнено(ИмяПоляИдентификатора) Тогда
				ЗначениеПоля = СтрокаДопДанных[ИмяПоляИдентификатора];
				
				УникальныйИдентификатор = ЗначениеПоля.УникальныйИдентификатор();
				СтрокаДопДанных.УникальныйИдентификатор = МониторингЦелевыхПоказателей.УникальныйИденификаторВСтроку(УникальныйИдентификатор);
				
				// Посчитаем сколько раз встречаются строки, с одинаковыми значениями заданного поля идентификатора
				Если КоррекцияУникальногоИдентификатора Тогда
					Если НумераторыПолейИД[ЗначениеПоля] = Неопределено Тогда
						НумераторыПолейИД.Вставить(ЗначениеПоля, 1);
					Иначе
						НумераторыПолейИД[ЗначениеПоля] = НумераторыПолейИД[ЗначениеПоля] + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если КоррекцияУникальногоИдентификатора Тогда
		Для Каждого НумераторПоляИД Из НумераторыПолейИД Цикл 
			Если НумераторПоляИД.Значение = 1 Тогда // Поле-идентификатор является уникальным
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура(ИмяПоляИдентификатора, НумераторПоляИД.Ключ) ;
			НайденныеСтроки = ДанныеДополнительныхПолей.НайтиСтроки(Отбор);
			
			НомерСтроки = 1;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				НайденнаяСтрока.УникальныйИдентификатор = НайденнаяСтрока.УникальныйИдентификатор + "_" + НомерСтроки;
				
				НомерСтроки = НомерСтроки + 1; 
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДополнительныхПолей;
КонецФункции

Функция ЕстьДвиженияПоРегистру(Регистратор, ИмяРегистра)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.Регистратор
		|ИЗ
		|	&ТекстЗапросаИмяТаблицы КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &Регистратор
		|	И Регистр.Активность");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаИмяТаблицы", ИмяРегистра);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

Функция ИменаРегистровНепустыхНаборов(Знач ДвиженияДокумента, ПроверятьТолькоНаличиеВКоллекции = Ложь)
	
	Перем ОтборИсточниковПоИменамРегистров, МетаданныеРегистра, НаборЗаписейДокумента;
	
	ОтборИсточниковПоИменамРегистров = Новый Массив;
	Для Каждого НаборЗаписейДокумента Из ДвиженияДокумента Цикл
		Если НаборЗаписейДокумента.Количество() > 0 
			Или ПроверятьТолькоНаличиеВКоллекции Тогда
			
			МетаданныеРегистра = НаборЗаписейДокумента.Метаданные();
			ИмяРегистра = МетаданныеРегистра.Имя;
			
			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрНакопления." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрБухгалтерии." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрРасчета." + ИмяРегистра);
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеРегистра) Тогда
				ОтборИсточниковПоИменамРегистров.Добавить("РегистрСведений." + ИмяРегистра);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборИсточниковПоИменамРегистров;

КонецФункции

Функция ПредставлениеЛимита(ПоляТаблицы, НайденнаяСтрока)
	
	ЧастиПредставлениеЛимита = Новый Массив;
	
	// По измерениям
	ПоддерживаемыеИзмерения = Новый Массив;
	ПоддерживаемыеИзмерения.Добавить("Организация");
	ПоддерживаемыеИзмерения.Добавить("Подразделение");
	Для Каждого ПоддерживаемоеИзмерение Из ПоддерживаемыеИзмерения Цикл 
		Если ПоляТаблицы.Найти(ПоддерживаемоеИзмерение) <> Неопределено Тогда 
			ЗначениеИзмерения = НайденнаяСтрока[ПоддерживаемоеИзмерение];
			
			Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
				ЧастиПредставлениеЛимита.Добавить(Строка(ЗначениеИзмерения));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// По аналитикам
	Для НомерАналитики = 1 По 6 Цикл 
		ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики;
		Если ПоляТаблицы.Найти(ИмяПоляНумерованнойАналитики) <> Неопределено Тогда 
			ЗначениеНумерованнойАналитики = НайденнаяСтрока[ИмяПоляНумерованнойАналитики];
			
			Если ЗначениеЗаполнено(ЗначениеНумерованнойАналитики) Тогда
				ЧастиПредставлениеЛимита.Добавить(Строка(ЗначениеНумерованнойАналитики));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставлениеЛимита, ", ");
	
КонецФункции

Функция ПрименятьПравило(ПравилоФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил)
	
	Если ОтборИсточниковПоИменамРегистров = Неопределено Тогда
		ПрименятьПравило = Истина;
	Иначе
		НайденнаяСтрока = КэшПримененияПравил.Найти(ПравилоФакта.Правило, "Правило");
	
		Если НайденнаяСтрока = Неопределено Тогда
			ПрименятьПравило = ПрименятьПравилоСтатьи(ПравилоФакта, ОтборИсточниковПоИменамРегистров);
			
			НоваяСтрокаТаблицыКэша = КэшПримененияПравил.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыКэша, ПравилоФакта);
			НоваяСтрокаТаблицыКэша.ПрименятьВЗаявках = ПрименятьПравило;
		Иначе
			ПрименятьПравило = НайденнаяСтрока.ПрименятьВЗаявках;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрименятьПравило;
	
КонецФункции

Функция РассчитатьДополнительныйОтбор(ПараметрыПолученияФакта, ТаблицаДанных, ПравилоЛимита)
	
	НастройкиДополнительногоОтбора = Новый НастройкиКомпоновкиДанных;
	
	ТаблицаДанныхЛимита = ТаблицаДанных.Скопировать(ТаблицаДанных.НайтиСтроки(Новый Структура("ПравилоЛимита", ПравилоЛимита.Ссылка)));
	Для Каждого СтрокаИспользуемыхАналитик Из ПравилоЛимита.ИспользуемыеАналитики Цикл
		ВидАналитики = СтрокаИспользуемыхАналитик.ВидАналитики;
		
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ИначеЕсли ЗначениеЗаполнено(СтрокаИспользуемыхАналитик.ИмяИзмерения) Тогда
			ИмяПоля = СтрокаИспользуемыхАналитик.ИмяИзмерения;
		КонецЕсли;
		
		КомпоновкаДанныхСервер.ДобавитьОтборПоКолонкеТаблицыЗначений(НастройкиДополнительногоОтбора, ТаблицаДанныхЛимита, ИмяПоля);
	КонецЦикла;
	
	Возврат НастройкиДополнительногоОтбора;
	
КонецФункции

Функция ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ФактическиеДанные, ВалютаЗаявки, ДатаПроверки, ПланПриОстутствииФакта = Ложь)
	
	ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
	
	СхемаПланФакта      = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПланФактныйАнализЛимитов");
	КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПланФакта);
	ЛимитыСтатьиПериоды = ПараметрыПолученияФакта.ДополнительныеДанные.ТаблицаДанных;
	
	КолонкиПересчетаПлана = Новый Массив;
	КолонкиПересчетаПлана.Добавить("СуммаПлан");
	КолонкиПересчетаПлана.Добавить("СуммаПланПоКонтрольнойАналитике");
	КолонкиПересчетаПлана.Добавить("СуммаПланПоПрочейАналитике");
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Если ИспользоватьНесколькоВалют Тогда
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПланФакта, КомпоновщикНастроек, "План", ВалютаЗаявки, ДатаПроверки, "ВалютаПлан", КолонкиПересчетаПлана);
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПланФакта, КомпоновщикНастроек, "Факт", ВалютаЗаявки, ДатаПроверки, "ВалютаФакт", "СуммаФакт");
		
		ПолеРасчетнойВалюты = СхемаПланФакта.ВычисляемыеПоля.Найти("Валюта");
		ПолеРасчетнойВалюты.Выражение = СтрЗаменить(ПолеРасчетнойВалюты.Выражение, "ВалютаПлан", "&ЦелеваяВалютаПлан");
		ПолеРасчетнойВалюты.Выражение = СтрЗаменить(ПолеРасчетнойВалюты.Выражение, "ВалютаФакт", "&ЦелеваяВалютаФакт");
	КонецЕсли;

	ПоляФакта          = СхемаПланФакта.НаборыДанных.Факт.Поля;
	УдаляемыеПоляФакта = Новый Массив;
	КолонкиФакта       = ФактическиеДанные.Колонки;
	ПоляПлана          = СхемаПланФакта.НаборыДанных.План.Поля;
	УдаляемыеПоляПлана = Новый Массив;
	СвязиНаборов       = СхемаПланФакта.СвязиНаборовДанных;
	ВыраженияИсточникиКУдалению = Новый Массив;
	СвязиКУдалению     = Новый Массив;
	ВычисляемыеПоля          = СхемаПланФакта.ВычисляемыеПоля;
	ВычисляемыеПоляКУдалению = Новый Массив;
	
	Для Каждого ПолеФакта Из ПоляФакта Цикл
		ИмяКолонкиФакта = СтрЗаменить(ПолеФакта.ПутьКДанным, "Факт", "");
		
		Если ИмяКолонкиФакта = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолонкиФакта.Найти(ИмяКолонкиФакта) = Неопределено Тогда
			УдаляемыеПоляФакта.Добавить(ПолеФакта);
			
			ВыраженияИсточникиКУдалению.Добавить(ИмяКолонкиФакта);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеПолеФакта Из УдаляемыеПоляФакта Цикл 
		ПоляФакта.Удалить(УдаляемоеПолеФакта);
	КонецЦикла;
	
	Для Каждого ПолеПлана Из ПоляПлана Цикл
		ИмяКолонкиПлана = СтрЗаменить(ПолеПлана.ПутьКДанным, "План", "");
		
		Если ПланПриОстутствииФакта 
			И СтрЗаканчиваетсяНа(ПолеПлана.ПутьКДанным, "План")
			И Не КолонкиФакта.Найти(ИмяКолонкиПлана) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолонкиФакта.Найти(ИмяКолонкиПлана) = Неопределено Тогда
			УдаляемыеПоляПлана.Добавить(ПолеПлана);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеПолеПлана Из УдаляемыеПоляПлана Цикл 
		ПоляПлана.Удалить(УдаляемоеПолеПлана);
	КонецЦикла;
	
	Для Каждого СвязьНаборов Из СвязиНаборов Цикл 
		Если Не ВыраженияИсточникиКУдалению.Найти(СвязьНаборов.ВыражениеИсточник) = Неопределено Тогда
			СвязиКУдалению.Добавить(СвязьНаборов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СвязьКУдалению Из СвязиКУдалению Цикл 
		СвязиНаборов.Удалить(СвязьКУдалению);
	КонецЦикла;
	
	Для Каждого ВычисляемоеПоле Из ВычисляемыеПоля Цикл 
		Если Не ВыраженияИсточникиКУдалению.Найти(ВычисляемоеПоле.ПутьКДанным) = Неопределено Тогда
			ВычисляемыеПоляКУдалению.Добавить(ВычисляемоеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ВычисляемоеПолеКУдалению Из ВычисляемыеПоляКУдалению Цикл 
		ВычисляемыеПоля.Удалить(ВычисляемоеПолеКУдалению);
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроек);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПланФакта));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПланПриОстутствииФакта", ПланПриОстутствииФакта);
	
	ПланФактПоПравиламЛимитов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта, КомпоновщикНастроек, ВнешниеНаборыДанных);
	
	Если Не ИспользоватьНесколькоВалют Тогда
		ПланФактПоПравиламЛимитов.Колонки.Добавить("Валюта");
		ПланФактПоПравиламЛимитов.ЗаполнитьЗначения(Константы.ВалютаУправленческогоУчета.Получить(), "Валюта");
	КонецЕсли;
	
	Возврат ПланФактПоПравиламЛимитов;

КонецФункции

Функция ПрименятьПравилоСтатьи(ПравилоФакта, ОтборИсточниковПоИменамРегистров)
	
	СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПравилоФакта);
	
	Возврат КомпоновкаДанныхСервер.НаборыДанныхСсылаютсяВЗапросахНаТаблицы(СКД.НаборыДанных, ОтборИсточниковПоИменамРегистров);
	
КонецФункции

// Возвращает условия проверки заявки на соответствие лимитам бюджетирования
// При этом в таблице лимитов, действующих на дату досчитвается дополнительный отбор с учетом факта
//
// Параметры:
//	ПараметрыПроверки       - Структура - см. ПараметрыПланФактЛимитов()
//	ПараметрыПолученияФакта - Структура - См. ПараметрыПолученияФакта()
//
// Возвращаемое значение:
//	Структура - применяемые лимиты и их реквизиты
//		* Отбор - Массив - ссылки на правила получения фактических данных
//		* Реквизиты - СтрокаТаблицыЗначений, Структура - реквизиты правила
//
Функция ПрименяемыеПравилаЛимитов(ПараметрыПроверки, ПараметрыПолученияФакта)
	
	ПрименяемыеПравилаЛимитов = Новый Структура("Отбор, Реквизиты");
	
	ПараметрыПолученияФакта.ВозвращатьПравилоПолученияДанных = Истина;
	
	ФактПоЗаявкеВРазрезеПравил = БюджетированиеСервер.ФактСтатейПоПравилам(ПараметрыПолученияФакта);
	
	ПрименяемыеПравилаЛимитов.Отбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФактПоЗаявкеВРазрезеПравил.ВыгрузитьКолонку("ПравилоЛимита"));
	ПрименяемыеПравилаЛимитов.Реквизиты = Новый Массив;
	
	ЛимитыДействующиеНаДату = ПараметрыПроверки.ЛимитыДействующиеНаДату;
	
	Для Каждого ПравилоЛимита Из ПрименяемыеПравилаЛимитов.Отбор Цикл 
		ОтборПоЛимиту = Новый Структура("Ссылка", ПравилоЛимита);
		НайденныеСтроки = ЛимитыДействующиеНаДату.НайтиСтроки(ОтборПоЛимиту);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ДополнительныйОтбор = РассчитатьДополнительныйОтбор(ПараметрыПолученияФакта, ФактПоЗаявкеВРазрезеПравил, НайденнаяСтрока);
			
			ПрименяемыеПравилаЛимитов.Реквизиты.Добавить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПрименяемыеПравилаЛимитов;
	
КонецФункции

// Возвращает параметры получения факта для проверки документа на соответствие лимитам бюджетирования
//
// Параметры:
// 	ПараметрыПроверки - Структура - см. ПараметрыПланФактЛимитов()
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта()
//
Функция ПараметрыПолученияФакта(ПараметрыПроверки)
	
	СсылкаНаЗаявку					= ПараметрыПроверки.СсылкаНаЗаявку;
	ДатаПроверки 					= ПараметрыПроверки.ДатаПроверки;
	ОтборИсточниковПоИменамРегистров= ПараметрыПроверки.ОтборИсточниковПоИменамРегистров;
	
	ЛимитыДействующиеНаДату 		= ПараметрыПроверки.ЛимитыДействующиеНаДату;
	ТаблицаПравилСтатей 			= ПараметрыПроверки.ТаблицаПравилСтатей;
	КэшПримененияПравил		 		= ПараметрыПроверки.КэшПримененияПравил;
	
	// Инициализируем параметры получения факта
	ПараметрыПолученияФакта = ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта();
	
	// Подготовим вспомогательные данные
	ТаблицаАналитик = ПараметрыПолученияФакта.ТаблицаАналитик;
	ТаблицаПериодов = ПараметрыПолученияФакта.ТаблицаПериодов;
	
	ТаблицаПравилСтатей.Колонки.Добавить("УникальныйИдентификатор");
	
	СтрокиНеприменяемыхПравил  = Новый Массив;
	СтрокиНеприменяемыхЛимитов = Новый Массив;
	
	ВидыАналитик = Новый Массив; // Все используемые аналитики, для создания колонок "Ключ_ГУИДВида" в таблице факта 
	ВидыАналитикЛимита = Новый Массив;
	ИсключаемыеАналитики = Новый Массив;
	
	МаксимальныйНомерАналитики = 0;
	ИспользуемыеНумерованныеАналитики = Новый Структура;
	
	СтатьиБюджетовНеприменяемыхПравил = Новый Соответствие;
	
	Для Каждого ДействующийЛимит из ЛимитыДействующиеНаДату Цикл
		СтрокиПравилПолученияФакта = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("СтатьяБюджетов", ДействующийЛимит.СтатьяБюджета));
		
		Если Не СтатьиБюджетовНеприменяемыхПравил.Получить(ДействующийЛимит.СтатьяБюджета) = Неопределено Тогда
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
			
			Продолжить;
		КонецЕсли;
		
		ВидыАналитикЛимита.Очистить();
		ПоОрганизациям = Ложь;
		ПоПодразделениям = Ложь;
		
		ПериодПравила = Новый СтандартныйПериод(
			БюджетированиеКлиентСервер.ДатаНачалаПериода(ДатаПроверки, ДействующийЛимит.Периодичность),
			БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаПроверки,  ДействующийЛимит.Периодичность));
		
		Для Каждого ИспользуемаяАналитика Из ДействующийЛимит.ИспользуемыеАналитики Цикл
			Если ЗначениеЗаполнено(ИспользуемаяАналитика.ВидАналитики) Тогда
				ВидыАналитик.Добавить(ИспользуемаяАналитика.ВидАналитики);
				ВидыАналитикЛимита.Добавить(ИспользуемаяАналитика.ВидАналитики);
			КонецЕсли;
			
			Если ИспользуемаяАналитика.ИмяИзмерения = "Организация" Тогда
				ПоОрганизациям = Истина;
			КонецЕсли;
			
			Если ИспользуемаяАналитика.ИмяИзмерения = "Подразделение" Тогда
				ПоПодразделениям = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним параметры получения по периодам в разрезе правил
		КоличествоПрименяемыхПравилПоСтатье = 0;
		
		Для Каждого СтрокаПравилаПолученияФакта Из СтрокиПравилПолученияФакта Цикл
			// Проверим, что правило получения факта обращается хотя бы к одному регистру движений заявки
			Если Не ПрименятьПравило(СтрокаПравилаПолученияФакта, ОтборИсточниковПоИменамРегистров, КэшПримененияПравил) Тогда
				Если СтрокиНеприменяемыхПравил.Найти(СтрокаПравилаПолученияФакта) = Неопределено Тогда
					СтрокиНеприменяемыхПравил.Добавить(СтрокаПравилаПолученияФакта);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			КоличествоПрименяемыхПравилПоСтатье = КоличествоПрименяемыхПравилПоСтатье + 1;
			
			ПравилоФакта = СтрокаПравилаПолученияФакта.Правило;
			
			УникальныйИдентификатор = ПравилоФакта.УникальныйИдентификатор();
			СтрокаПравилаПолученияФакта.УникальныйИдентификатор = 
				МониторингЦелевыхПоказателей.УникальныйИденификаторВСтроку(УникальныйИдентификатор);
			
			// Периоды с одинаковой периодичностью будут свернуты до получения факта
			СтрокаПериода = ТаблицаПериодов.Добавить();
			СтрокаПериода.ПравилоФакта  = ПравилоФакта;
			СтрокаПериода.НачалоПериода = ПериодПравила.ДатаНачала;
			СтрокаПериода.КонецПериода  = ПериодПравила.ДатаОкончания;
			
			// Заполним параметры получения по аналитикам в разрезе правил
			СтрокаИспАналитики = ТаблицаАналитик.Добавить();
			СтрокаИспАналитики.Правило          = ПравилоФакта;
			СтрокаИспАналитики.ПоОрганизациям   = ПоОрганизациям;
			СтрокаИспАналитики.ПоПодразделениям = ПоПодразделениям;
			
			ИсключаемыеАналитики.Очистить();
			Для НомерАналитики = 1 По 6 Цикл 
				Если ВидыАналитикЛимита.Найти(СтрокаПравилаПолученияФакта["ВидАналитики" + НомерАналитики]) = Неопределено Тогда
					ИсключаемыеАналитики.Добавить("ВидАналитики" + НомерАналитики);
					ИсключаемыеАналитики.Добавить("ВыражениеЗаполненияАналитики" + НомерАналитики);
				Иначе
					ИспользуемыеНумерованныеАналитики.Вставить("Аналитика" + НомерАналитики);
					МаксимальныйНомерАналитики = ?(НомерАналитики > МаксимальныйНомерАналитики, НомерАналитики, МаксимальныйНомерАналитики);
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтрокаИспАналитики, СтрокаПравилаПолученияФакта, , СтрСоединить(ИсключаемыеАналитики, ","));
			
		КонецЦикла;
		
		Если КоличествоПрименяемыхПравилПоСтатье = 0 Тогда
			СтатьиБюджетовНеприменяемыхПравил.Вставить(ДействующийЛимит.СтатьяБюджета, Истина);
			
			СтрокиНеприменяемыхЛимитов.Добавить(ДействующийЛимит); // Удалим лимиты, которые заявка не затрагивает движениями
		КонецЕсли;
		
	КонецЦикла;
	
	// Уточним часть входных параметров
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату);
	Для Каждого СтрокаНеприменяемогоЛимита Из СтрокиНеприменяемыхЛимитов Цикл
		ЛимитыДействующиеНаДату.Удалить(СтрокаНеприменяемогоЛимита);
	КонецЦикла;
	ИндексыТаблицы = ПараметрыПроверки.ИндексыТаблиц.Получить("ЛимитыДействующиеНаДату");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ЛимитыДействующиеНаДату, ИндексыТаблицы);
	
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	Для Каждого СтрокаНеприменяемогоПравила Из СтрокиНеприменяемыхПравил Цикл
		ТаблицаПравилСтатей.Удалить(СтрокаНеприменяемогоПравила);
	КонецЦикла;
	ИндексыТаблицы = ПараметрыПроверки.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	// Сформируем выходные параметры
	ПараметрыПолученияФакта.ТаблицаПравилСтатей = ТаблицаПравилСтатей;
	
	ТаблицаПериодов.Свернуть("ПравилоФакта, НачалоПериода, КонецПериода");
	ПараметрыПолученияФакта.ТаблицаПериодов = ТаблицаПериодов;
	
	ТаблицаАналитик.Индексы.Добавить("Правило");
	ПараметрыПолученияФакта.ТаблицаАналитик = ТаблицаАналитик;
	
	ИндексируемыеТаблицы = Новый Соответствие; // Ключ - название таблицы, значение - массив строк индексов
	ИндексируемыеТаблицы.Вставить("ТаблицаАналитик",		ТаблицаАналитик);
	ИндексируемыеТаблицы.Вставить("ТаблицаПравилСтатей",	ТаблицаПравилСтатей);
	
	ПараметрыПолученияФакта.ИндексыТаблиц = ИсточникиДанныхСервер.ИменаТаблицИИндексы(ИндексируемыеТаблицы);
	
	ПараметрыПолученияФакта.ВидыАналитик = ВидыАналитик;
	ПараметрыПолученияФакта.МаксимальныйНомерАналитики = МаксимальныйНомерАналитики;
	ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики = ИспользуемыеНумерованныеАналитики;
	
	ОтборПризнакаОрганизации = Новый Структура("ПоОрганизациям", Истина);
	ПараметрыПолученияФакта.ПоОрганизациям = ТаблицаАналитик.НайтиСтроки(ОтборПризнакаОрганизации).Количество() > 0;
	
	ОтборПризнакаПодразделения = Новый Структура("ПоПодразделениям", Истина);
	ПараметрыПолученияФакта.ПоПодразделениям = ТаблицаАналитик.НайтиСтроки(ОтборПризнакаПодразделения).Количество() > 0;
	
	// Заполним дополнительные отборы в разрезе правил
	Если ЗначениеЗаполнено(СсылкаНаЗаявку) Тогда
		ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
		ФинансоваяОтчетностьСервер.УстановитьОтбор(ДополнительныйОтбор.Отбор, "Регистратор", СсылкаНаЗаявку);
		
		ПараметрыПолученияФакта.ДополнительныйОтбор = ДополнительныйОтбор;
	КонецЕсли;
			
	ПараметрыПолученияФакта.ВозвращатьПравилоПолученияДанных = Ложь;
	
	Возврат ПараметрыПолученияФакта;
	
КонецФункции

// Возвращает условия проверки заявки на соответствие лимитам бюджетирования
//
// Параметры:
//	Дата - Дата - дата, на которую проверяется состояние лимитов
//	ОтборПоПравиламЛимитирования - Массив, СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - ограничение использования правил лимитов по бюджетам
//
// Возвращаемое значение:
//	Структура - параметры проверки заявки на соответствие лимитам бюджетирования
//		* Дата                             - Дата - дата, на которую проверяется состояние лимитов
//		* СсылкаНаЗаявку                   - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый документ. 
//			Значение по умолчанию - пустая ссылка.
//		* ОтборИсточниковПоИменамРегистров - Массив - имена таблиц источников данных, которые требуется использовать. 
//			Значение по умолчанию - Неопределено, значит использовать все источники данных.
//		* ЛимитыДействующиеНаДату          - ТаблицаЗначений - см. подбробнее ПравилаЛимитовНаДату()
//		* ТаблицаПравилСтатей              - ТаблицаЗначений - правила получения факта и колонки с реквизитами. По умолчанию пустая таблица.
//			Состав колонок см. в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта
//		* КэшПримененияПравил              - ТаблицаЗначений - кэшированный признак применения правила.
//		* ИндексыТаблиц                    - Соответствие - имена таблиц значений параметров получения факта и массивы включеных в них индексах. См. ИсточникиДанныхСервер.ИменаТаблицИИндексы()
//			** Ключ - Строка - имя таблицы в параметрах получения факта
//			** Значение - Массив - массив строк, описывающих примененные индексы
//
Функция ПараметрыПланФактЛимитов(Дата, ОтборПоПравиламЛимитирования = Неопределено)
	
	ПараметрыПланФактЛимитов = Новый Структура;
	
	ЛимитыДействующиеНаДату = ЛимитыРасходованияДенежныхСредствСервер.ПравилаЛимитовНаДату(Дата, ОтборПоПравиламЛимитирования);
	ЛимитыДействующиеНаДату.Индексы.Добавить("Ссылка"); // Ссылка на СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования
	
	СтатьиБюджетов = ЛимитыДействующиеНаДату.ВыгрузитьКолонку("СтатьяБюджета");
	
	СхемаКомпоновкиДанныхПравил = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника("ПравилаПолученияФактаПоСтатьямБюджетов", "ПравилаПолученияФакта");
	СКДПравил = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СхемаКомпоновкиДанныхПравил);
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПравил);
	
	СписокТиповПравил = Новый СписокЗначений;
	СписокТиповПравил.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	СписокТиповПравил.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ТипПравила", СписокТиповПравил, ВидСравненияКомпоновкиДанных.ВСписке);
	
	// Выберем только правила факта, которые используются для получения данных по статьям действующих правил лимитирования
	СтатьиДействующихЛимитов = Новый СписокЗначений;
	СтатьиДействующихЛимитов.ЗагрузитьЗначения(СтатьиБюджетов);
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "СтатьяБюджетов", СтатьиДействующихЛимитов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ГруппаИли = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИли.Использование = Истина;
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаИли, "ДействуетПо",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ГруппаИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИ.Использование = Истина;
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаИ, "ДействуетС", Дата, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаИ, "ДействуетПо", Дата, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	
	// Получим действующие правила в виде таблицы со значениями реквизитов
	ТаблицаПравилСтатей = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки);
	ТаблицаПравилСтатей.Индексы.Добавить("СтатьяБюджетов");
	ТаблицаПравилСтатей.Индексы.Добавить("Правило");
	
	КэшПримененияПравил = Новый ТаблицаЗначений;
	КэшПримененияПравил.Колонки.Добавить("Правило");
	КэшПримененияПравил.Колонки.Добавить("ПрименятьВЗаявках");
	
	ПараметрыПланФактЛимитов.Вставить("ДатаПроверки",						Дата);
	ПараметрыПланФактЛимитов.Вставить("СсылкаНаЗаявку",						Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка()); 
	ПараметрыПланФактЛимитов.Вставить("ОтборИсточниковПоИменамРегистров",	Неопределено);
	
	ПараметрыПланФактЛимитов.Вставить("ЛимитыДействующиеНаДату",	ЛимитыДействующиеНаДату);
	ПараметрыПланФактЛимитов.Вставить("ТаблицаПравилСтатей", 		ТаблицаПравилСтатей);
	ПараметрыПланФактЛимитов.Вставить("КэшПримененияПравил", 		КэшПримененияПравил);
	
	ИндексируемыеТаблицы = Новый Соответствие; // Ключ - название таблицы, значение - массив строк индексов
	ИндексируемыеТаблицы.Вставить("ЛимитыДействующиеНаДату",	ЛимитыДействующиеНаДату);
	ИндексируемыеТаблицы.Вставить("ТаблицаПравилСтатей",		ТаблицаПравилСтатей);
	ИндексируемыеТаблицы.Вставить("КэшПримененияПравил", 		КэшПримененияПравил);
	
	ПараметрыПланФактЛимитов.Вставить("ИндексыТаблиц", ИсточникиДанныхСервер.ИменаТаблицИИндексы(ИндексируемыеТаблицы));
	
	Возврат ПараметрыПланФактЛимитов;
	
КонецФункции

// Возвращает факт в разрезе правил для будущего сравнения с данными бюджетирования
//
// Параметры:
//	ПараметрыПроверки       - Структура - см. ПараметрыПланФактЛимитов()
//	ПараметрыПолученияФакта - Структура - См. ПараметрыПолученияФакта()
//	ПравилаЛимитирования    - Структура - См. ПараметрыПолученияФакта()
//	РазрешающийЛимитНайден  - Булево - изменяемый внутри метода параметр. Признак того, что среди всех лимитов был хотя бы один разрешающий
//
// Возвращаемое значение:
//	ТаблицаЗначений - факт в разрезе правил
//
Функция ФактПоПравиламЛимитирования(ПараметрыПроверки, ПараметрыПолученияФакта, ПравилаЛимитирования, РазрешающийЛимитНайден = Неопределено)
	
	СоответствиеФакта = Новый Соответствие;
	
	ПараметрыПолученияФакта.ВозвращатьПравилоПолученияДанных = Истина;
	
	// Уточним отборы правил получения факта по сработавшим правилам лимитирования
	ТаблицаПравилСтатей = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	
	Для Каждого ПравилоЛимитирования Из ПравилаЛимитирования Цикл
		НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("СтатьяБюджетов", ПравилоЛимитирования.СтатьяБюджета));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			ИсходныйКомпоновщик = НайденнаяСтрока.КомпоновщикНастроек.Получить();
			ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПравилоЛимитирования.ДополнительныйОтбор.Отбор, ИсходныйКомпоновщик.Отбор, Истина);
			НайденнаяСтрока.КомпоновщикНастроек = Новый ХранилищеЗначения(ИсходныйКомпоновщик);
		КонецЦикла;
	КонецЦикла;
	
	ФактПоЗаявкеВРазрезеПравил = БюджетированиеСервер.ФактСтатейПоПравилам(ПараметрыПолученияФакта);
	
	ФактПоЗаявкеВРазрезеПравил.Колонки.ПравилоЛимита.Имя = "Правило";
	ФактПоЗаявкеВРазрезеПравил.Колонки.Сумма.Имя = "СуммаВВалюте";
	ФактПоЗаявкеВРазрезеПравил.Индексы.Добавить("Правило");
	
	МаксимальныйНомерАналитики = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	ТаблицаПравилСтатей = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	
	Для Каждого СтрокаФакта Из ФактПоЗаявкеВРазрезеПравил Цикл 
		// Уточним данные факт в соответствии с требованиями правил лимитирования
		ПоискПравила = Новый Структура("СтатьяБюджетов", СтрокаФакта.СтатьяБюджета); 
		НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(ПоискПравила);
		ПрименяемоеПравило = НайденныеСтроки[0];
		
		ИспользуемыеАналитикиЛимита = СтрокаФакта.ИспользуемыеАналитики;
		СтатьяБюджета = СтрокаФакта.СтатьяБюджета;
		
		// Проверка по измерениям
		ПоддерживаемыеИзмерения = Новый Массив;
		ПоддерживаемыеИзмерения.Добавить("Организация");
		ПоддерживаемыеИзмерения.Добавить("Подразделение");
		ИспользуемыеИзмерения = ИспользуемыеАналитикиЛимита.ВыгрузитьКолонку("ИмяИзмерения");
		
		Для Каждого ПоддерживаемоеИзмерение Из ПоддерживаемыеИзмерения Цикл 
			ЗначениеПоУмолчаниюИзмерения = БюджетированиеСервер.ЗначениеПоУмолчаниюДляИзмерения(ПоддерживаемоеИзмерение);
			
			Если ФактПоЗаявкеВРазрезеПравил.Колонки.Найти(ПоддерживаемоеИзмерение) <> Неопределено
				И ИспользуемыеИзмерения.Найти(ПоддерживаемоеИзмерение) = Неопределено Тогда
				СтрокаФакта[ПоддерживаемоеИзмерение] = ЗначениеПоУмолчаниюИзмерения;
			КонецЕсли;
			СтрокаФакта[ПоддерживаемоеИзмерение + "ПустоеЗначение"] = ЗначениеПоУмолчаниюИзмерения;
		КонецЦикла;
		
		// Проверка по видам аналитик
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ПрименяемоеПравило["ВидАналитики" + НомерАналитики];
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
				ЗначениеПоУмолчаниюАналитики = БюджетированиеСервер.ЗначениеПоУмолчаниюНумерованнойАналитики(СтатьяБюджета, НомерАналитики);
			Иначе
				ЗначениеПоУмолчаниюАналитики = Неопределено;
			КонецЕсли;
			ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики;
			
			Если ЗначениеЗаполнено(ВидАналитики)
				И ФактПоЗаявкеВРазрезеПравил.Колонки.Найти(ИмяПоляАналитики) <> Неопределено Тогда
				
				Если (ИспользуемыеАналитикиЛимита.Найти(ВидАналитики, "ВидАналитики") = Неопределено) Тогда
					
					СтрокаФакта[ИмяПоляАналитики] = ЗначениеПоУмолчаниюАналитики;
					СтрокаФакта[ИмяПоляНумерованнойАналитики] = ЗначениеПоУмолчаниюАналитики;
				КонецЕсли;
				
				СтрокаФакта[ИмяПоляНумерованнойАналитики + "ПустоеЗначение"] = ЗначениеПоУмолчаниюАналитики;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаФакта.ТипЛимита = Перечисления.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита Тогда
			РазрешающийЛимитНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФактПоЗаявкеВРазрезеПравил;
	
КонецФункции

#КонецОбласти

//--НЕ УТ

#КонецОбласти 


