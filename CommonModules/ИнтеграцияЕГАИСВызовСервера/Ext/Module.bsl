
#Область СлужебныеПроцедурыИФункции

// Функция возвращает параметры запроса документа, который нужно выгрузить в ЕГАИС.
//
Функция ПодготовитьДанныеЗапросаВУТМ(ТранспортныйМодуль, ВидДокумента, Знач ВходныеПараметры, ТекстОшибки) Экспорт

	Результат = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("POST");
	
	РезультатПроверки = ПроверитьВозможностьВыгрузкиДокумента(ВидДокумента, ВходныеПараметры);
	Если НЕ РезультатПроверки.Результат Тогда
		ТекстОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ФорматОбмена = ТранспортныйМодуль.ФорматОбмена;
	Если НЕ ЗначениеЗаполнено(ФорматОбмена) Тогда
		ТекстОшибки = НСтр("ru='Не заполнен формат обмена в настройках обмена с ЕГАИС.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
		
		Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузополучатель");
		ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
			ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузоотправитель");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ФорматОбмена = ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		ТекстXML = ИнтеграцияЕГАИС.ТекстXMLВыгрузкиЧека(ВидДокумента, ВходныеПараметры[0], ВходныеПараметры[1], ТекстОшибки);
	Иначе
		ТекстXML = ИнтеграцияЕГАИС.ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ФорматОбмена, ВидДокумента, ВходныеПараметры, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВремГраница = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ТелоЗапроса = Новый ТекстовыйДокумент();
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница);
	ТелоЗапроса.ДобавитьСтроку("Content-Disposition: form-data; name=""xml_file""");
	ТелоЗапроса.ДобавитьСтроку("Content-Type: text/xml; charset=utf-8");
	ТелоЗапроса.ДобавитьСтроку("");
	ТелоЗапроса.ДобавитьСтроку(ТекстXML);
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница + "--");
	
	Результат.АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(ВидДокумента, ФорматОбмена, ТекстОшибки);
	Результат.ТелоЗапроса  = ТелоЗапроса.ПолучитьТекст();
	Результат.ТекстXML     = ТекстXML;
	
	Результат.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + ВремГраница);
	
	Возврат Результат;

КонецФункции

// Формирует запрос в ТМ ЕГАИС.
//
Функция СформироватьЗапросВУТМ(ТранспортныйМодуль, ВидДокумента, Знач ВходныеПараметры, ДокументОснование) Экспорт
	
	ТекстОшибки = "";
	ДанныеЗапроса = ПодготовитьДанныеЗапросаВУТМ(
		ТранспортныйМодуль,
		ВидДокумента,
		ВходныеПараметры,
		ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Новый Структура("Результат, ОписаниеОшибки", Ложь, ТекстОшибки);
	КонецЕсли;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ Результат.Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("ИдентификаторЗапроса", Результат.ИдентификаторЗапроса);
	
	ЗавершитьФормированиеИсходящегоЗапроса(ДанныеЗапроса, ВидДокумента, ДокументОснование);
	
	Возврат Результат;
	
КонецФункции

// Загружает новые документы из транспортного модуля.
//
Функция ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, Знач ДополнительныеПараметры) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СписокURL = ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(РезультатОперации.ОтветМодуляЕГАИС);
	
	МассивДокументов = Новый Массив;
	
	Для Каждого URLДокумента Из СписокURL Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДокумента.АдресURL);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLДокумента.АдресURL);
			Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
		СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
		СтруктураДокумента.АдресЗапроса = URLДокумента.АдресURL;
		СтруктураДокумента.ТекстXML = РезультатОперации.ОтветМодуляЕГАИС;
		
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, Ложь, ДополнительныеПараметры);
	
	Для Каждого URLДокумента Из Результат.ЗагруженныеДокументы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДокумента);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось удалить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLДокумента);
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает ответы из транспортного модуля.
//
Функция ОбработатьОтветыИзУТМ(ТранспортныйМодуль, ДополнительныеПараметры) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/in";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список исходящих запросов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеЗапросов = Новый Соответствие;
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, РезультатОперации.ОтветМодуляЕГАИС, "АдресЗапроса");
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список ответов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, РезультатОперации.ОтветМодуляЕГАИС, "АдресаОтветов");
	
	СписокURL = ПодготовитьСписокURLОтветовКЗагрузке(СоответствиеЗапросов);
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Ответ Из СписокURL Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Ответ.АдресURL);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить ответ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Ответ.АдресURL);
			Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
		СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
		СтруктураДокумента.ИдентификаторЗапроса = Ответ.ИдентификаторЗапроса;
		СтруктураДокумента.АдресЗапроса = Ответ.АдресURL;
		СтруктураДокумента.ТекстXML = РезультатОперации.ОтветМодуляЕГАИС;
		
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, Ложь, ДополнительныеПараметры);
	
	УдаленныеURL = Новый Массив;
	
	Для Каждого URLОтвета Из Результат.ЗагруженныеДокументы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLОтвета);
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось удалить ответ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", URLОтвета);
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецЕсли;
			
		Для Каждого КлючЗначение Из СоответствиеЗапросов Цикл
			Если КлючЗначение.Значение.АдресаОтветов.Найти(URLОтвета) <> Неопределено Тогда
				Если УдаленныеURL.Найти(КлючЗначение.Значение.АдресЗапроса) = Неопределено
					И НЕ ПустаяСтрока(КлючЗначение.Значение.АдресЗапроса) Тогда
					СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(КлючЗначение.Значение.АдресЗапроса);
		
					ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
					ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
					РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
					
					Если РезультатОперации.Результат Тогда
						УдаленныеURL.Добавить(КлючЗначение.Значение.АдресЗапроса);
					КонецЕсли;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверят использование механизма регистрации розничных продаж в ЕГАИС.
//
Функция ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Контрагент, ТорговыйОбъект, Знач ДатаПродажи = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПродажи) Тогда
		ДатаПродажи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторОрганизацийЕГАИС.Ссылка,
	|	КлассификаторОрганизацийЕГАИС.НаходитсяВСельскойМестности
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &ТорговыйОбъект
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации");
	
	Запрос.УстановитьПараметр("Контрагент",     Контрагент);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.НаходитсяВСельскойМестности Тогда
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить();
	Иначе
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Получить();
	КонецЕсли;
	
	Возврат ДатаПродажи >= ДатаНачалаРегистрации И ЗначениеЗаполнено(ДатаНачалаРегистрации);

КонецФункции

// Разбирает список входящих документов и подготавливает список URL-адресов документов к загрузке.
//
Функция ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС);
	
КонецФункции

// Разбирает список входящих документов и подготавливает массив URL-адресов ответов к загрузке.
//
Функция ПодготовитьСписокURLОтветовКЗагрузке(СоответствиеЗапросов) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого КлючЗначение Из СоответствиеЗапросов Цикл
		
		Если НЕ ЕстьИсходящийЗапрос(КлючЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого АдресОтвета Из КлючЗначение.Значение.АдресаОтветов Цикл
			Результат.Добавить(Новый Структура("ИдентификаторЗапроса, АдресURL", КлючЗначение.Ключ, АдресОтвета));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает соответствие между исходящим запросом и полученным ответом.
//
Процедура УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса) Экспорт
	
	ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса);
	
КонецПроцедуры

// Загружает список документов, полученных из УТМ.
//
Функция ОбработатьВходящиеДокументы(Знач ТранспортныйМодуль, Знач МассивДокументов, Знач ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияЕГАИС.ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры);
	
КонецФункции

// Проверяет возможность формирования XML-файла перед выгрузкой в УТМ.
//
Функция ПроверитьВозможностьВыгрузкиДокумента(ВидДокумента, ВходныеПараметры)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ТипЗнч(ВходныеПараметры) <> Тип("Структура") ИЛИ НЕ ВходныеПараметры.Свойство("ДокументСсылка") Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходныеПараметры.ДокументСсылка, "СтатусОбработки, Проведен");
	
	Если НЕ РеквизитыДокумента.Проведен Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Документ не проведен.'");
		Возврат Результат;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Акт отказа требует только отправленный в ЕГАИС документ.'");
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС) Тогда
			
			Если ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
				Результат.ОписаниеОшибки = НСтр("ru = 'Документ уже обработан грузополучателем. Отозвать документ нельзя.'");
			Иначе
				Результат.ОписаниеОшибки = НСтр("ru = 'Документ не требует подтверждения.'");
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Для документа не был принят акт расхождений.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятОтказОтАктаРасхождений
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не подтвержден.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеЗапросаНаОтменуПроведенияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтЗапросаНаОтменуПроведенияТТН Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеЗапросаНаОтменуПроведения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтЗапросаНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеЗапросаНаОтменуПроведения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтЗапросаНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятЗапросНаОтменуПроведения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияЗапросаНаОтменуПроведения
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Для документа не был получен запрос на отмену проведения.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не проведен в ЕГАИС.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданЗапросНаОтменуПроведения Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения) Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru='Документ не проведен в ЕГАИС.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2 Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2 Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков)Тогда
			
			Результат.ОписаниеОшибки = НСтр("ru = 'По документу уже были получены остатки.'");
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2 Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2 Тогда
		
		Если РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПередаетсяВЕГАИС Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПередаваемогоДокумента();
			Возврат Результат;
			
		ИначеЕсли НЕ (РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.Новый
			ИЛИ РеквизитыДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ОшибкаПередачиВЕГАИС) Тогда
			
			Результат.ОписаниеОшибки = ТекстОшибкиПереданногоДокумента();
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст ошибки, отображаемый пользователю в окне сообщений.
//
Функция ТекстОшибкиПередаваемогоДокумента()
	
	Возврат НСтр("ru='Документ передается в ЕГАИС, дождитесь уведомления о фиксации.'");
	
КонецФункции

// Возвращает текст ошибки, отображаемый пользователю в окне сообщений.
//
Функция ТекстОшибкиПереданногоДокумента()
	
	Возврат НСтр("ru='Документ уже передан в ЕГАИС.'");
	
КонецФункции

// Получает список доступных транспортных модулей ЕГАИС.
//
// Параметры:
//  Отбор - Структура, Массив - структура с ключами: Поле, Значение. Или массив таких структур.
//
// Возвращаемое значение:
//   Массив - список доступных модулей.
//
Функция ДоступныеТранспортныеМодули(Отбор = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);

КонецФункции

// Возвращает код организации ЕГАИС в ФСРАР для переданного документа обмена.
//
Функция КодФСРАРОрганизацииПоДокументу(ДокументСсылка) Экспорт
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузополучатель";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузоотправитель";
	Иначе
		ИмяРеквизита = "ОрганизацияЕГАИС";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаДокумента." + ИмяРеквизита + " = КлассификаторОрганизацийЕГАИС.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Код;
	
КонецФункции

// Проверяет возможность загрузки ответов из УТМ.
//
Функция ДоступнаОбработкаОтветов() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПротоколОбменаЕГАИС);
	
КонецФункции

// Проверяет, требуется ли запуск события на дату проверки.
//
Функция ПроверитьРасписание(Расписание, ДатаПроверки, ДатаПоследнегоЗапуска) Экспорт
	
	Возврат Расписание.ТребуетсяВыполнение(ДатаПроверки, ДатаПоследнегоЗапуска);
	
КонецФункции

// Проверяет наличие исходящего запроса по идентификатору.
//
Функция ЕстьИсходящийЗапрос(ИдентификаторЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.ПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ПротоколОбменаЕГАИС.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Разбирает ответ, полученный из УТМ.
//
Функция ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет);
	
КонецФункции

// См. описание функции ОбщегоНазначения.ЗначениеРеквизитаОбъекта().
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Изменяет статус обработки документа основания и делает запись в протокол обмена с УТМ.
//
Процедура ЗавершитьФормированиеИсходящегоЗапроса(ДанныеЗапроса, ВидДокумента, ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		НовыйСтатус = СтатусВыгруженногоДокумента(ВидДокумента, ДокументОснование);
		
		Если НЕ НовыйСтатус = Неопределено Тогда
			РезультатОперации = ИнтеграцияЕГАИС.ИзменитьСтатусОбработкиДокумента(ДокументОснование, НовыйСтатус);
			
			Если НЕ РезультатОперации.Результат Тогда
				ЗаписьЖурналаРегистрации(
					ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					ДокументОснование.Метаданные(),
					ДокументОснование,
					РезультатОперации.ОписаниеОшибки);
					
				ТекстСообщения = НСтр("ru = 'Не удалось изменить статус обработки документа %1.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(ДокументОснование));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокумента <> Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		ПараметрыСессии = ИнтеграцияЕГАИСКлиентСервер.ПараметрыСессииОбмена();
		ПараметрыСессии.ТипЗапроса = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
		ПараметрыСессии.ВидДокумента = ВидДокумента;
		ПараметрыСессии.ИдентификаторЗапроса = ДанныеЗапроса.ИдентификаторЗапроса;
		ПараметрыСессии.ДокументОснование = ДокументОснование;
		
		ЗаписатьСессиюОбменаСУТМ(ПараметрыСессии, ДанныеЗапроса.ТекстXML);
	КонецЕсли;
	
КонецПроцедуры

// Возвращет новый статус обработки документа в случае удачной выгрузки в УТМ.
//
Функция СтатусВыгруженногоДокумента(ВидДокумента, ДокументОснование)
	
	СоответствиеСтатусовВидам = Новый Соответствие;
	
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН,
		?(ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС"),
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа));
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПодтверждениеЗапросаНаОтменуПроведенияТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеЗапросаНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтказОтЗапросаНаОтменуПроведенияТТН,
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтЗапросаНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1,
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2,
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2,
		Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПередаетсяВЕГАИС);
		
	СоответствиеСтатусовВидам.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2,
		Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПередаетсяВЕГАИС);
		
	Возврат СоответствиеСтатусовВидам[ВидДокумента];
	
КонецФункции

// Записывает сессию обмена с УТМ.
//
// Параметры:
//  ПараметрыСессии - Структура - параметры сессии обмена,
//  ТекстXML - Строка - текст xml файла обмена.
//
Процедура ЗаписатьСессиюОбменаСУТМ(Знач ПараметрыСессии, Знач ТекстXML)
	
	ПараметрыСессии.ФайлОбмена = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	РегистрыСведений.ПротоколОбменаЕГАИС.ЗаписатьСессиюОбменаСУТМ(ПараметрыСессии);
	
КонецПроцедуры

// Устанавливает блокировку на регистр сведений для предотвращения одновременной загрузки данных из УТМ.
//
Функция ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента = Неопределено) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Истина, "");
	
	Если ИдентификаторКлиента = Неопределено Тогда
		ИдентификаторКлиента = ПараметрыСеанса.ИдентификаторСеансаЕГАИС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ТранспортныйМодуль.ИдентификаторФСРАР);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	НастройкиОбменаЕГАИС.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ИдентификаторФСРАР", Выборка.ИдентификаторФСРАР);
		СтруктураКлюча.Вставить("РабочееМесто", Выборка.РабочееМесто);
		
		КлючБлокировки = РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьКлючЗаписи(СтруктураКлюча);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючБлокировки,, ИдентификаторКлиента);
		Исключение
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтрокаПоиска = НСтр("ru = 'Объект уже заблокирован:'");
			Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
				ПозицияСимвола = СтрНайти(ОписаниеОшибки, СтрокаПоиска);
				Если ПозицияСимвола > 0 Тогда
					ДлинаСообщения = СтрДлина(ОписаниеОшибки);
					ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
					
					КонецСообщения = Прав(ОписаниеОшибки, ДлинаСообщения - ПозицияСимвола - ДлинаСтрокиПоиска);
					
					ОписаниеОшибки = НСтр("ru = 'Обмен с УТМ по адресу %1 уже выполняется:'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ТранспортныйМодуль.АдресУТМ);
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + КонецСообщения;
				КонецЕсли;
			КонецЕсли;
			
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Снимает блокировку с регистра сведений, установленную при начале обмена с УТМ.
//
Функция РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ТранспортныйМодуль.ИдентификаторФСРАР);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	НастройкиОбменаЕГАИС.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР = &ИдентификаторФСРАР";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ИдентификаторФСРАР", Выборка.ИдентификаторФСРАР);
		СтруктураКлюча.Вставить("РабочееМесто", Выборка.РабочееМесто);
		
		КлючБлокировки = РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьКлючЗаписи(СтруктураКлюча);
		
		Попытка
			РазблокироватьДанныеДляРедактирования(КлючБлокировки, ИдентификаторКлиента);
		Исключение
			Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормЕГАИСПереопределяемый.ПриПолученииФормыСправочника(
		ИмяСправочника,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормЕГАИСПереопределяемый.ПриПолученииФормыДокумента(
		ИмяДокумента,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормЕГАИСПереопределяемый.ПриПолученииФормыРегистраСведений(
		ИмяРегистра,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает формат обмена с УТМ организации ЕГАИС.
//
Функция ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС) Экспорт
	
	Результат = Перечисления.ФорматыОбменаЕГАИС.V1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
	|	И КлассификаторОрганизацийЕГАИС.ФорматОбмена <> ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ФорматОбмена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить документы по основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ВозвратИзРегистра2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС - Статус документа.
//   * ПередачаВРегистр2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС - Статус документа.
//
Функция ДокументыПоОснованию(ДокументОснование) Экспорт
	
	ИменаДокументов = Новый Массив;
	ИменаДокументов.Добавить("АктСписанияЕГАИС");
	ИменаДокументов.Добавить("АктПостановкиНаБалансЕГАИС");
	ИменаДокументов.Добавить("ТТНВходящаяЕГАИС");
	ИменаДокументов.Добавить("ТТНИсходящаяЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИСВозврат");
	ИменаДокументов.Добавить("ПередачаВРегистр2ЕГАИС");
	ИменаДокументов.Добавить("ВозвратИзРегистра2ЕГАИС");
	
	ВозвращаемоеЗначение = Новый Структура;
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		ВозвращаемоеЗначение.Вставить(ИмяДокумента, Новый Массив);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Таблица.Ссылка          КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Таблица.Ссылка          КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Таблица.Ссылка          КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка          КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Таблица.Ссылка          КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Таблица.СтатусОбработки КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ИмяДокумента Из ИменаДокументов Цикл
			Если ЗначениеЗаполнено(Выборка[ИмяДокумента]) Тогда
				
				Значение = Новый Структура;
				Значение.Вставить("Ссылка", Выборка[ИмяДокумента]);
				Значение.Вставить("Статус", Выборка.Статус);
				Значение.Вставить("Дата",   Выборка.Дата);
				
				ВозвращаемоеЗначение[ИмяДокумента].Добавить(Значение);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Дополнить соответствие статусами документов ЕГАИС.
//
// Параметры:
//  СоответствиеСтатусовДокументов - Соответствие - Соответствие документов ЕГАИС и их статусов.
// 
// Возвращаемое значение:
//  СоответствиеСтатусовДокументов - Соответствие - Соответствие документов ЕГАИС и их статусов.
//
Функция ПолучитьСтатусыДокументов(СоответствиеСтатусовДокументов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК Ссылка,
	|	АктПостановкиНаБалансЕГАИС.СтатусОбработки КАК СтатусОбработки,
	|	АктПостановкиНаБалансЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка,
	|	АктСписанияЕГАИС.СтатусОбработки,
	|	АктСписанияЕГАИС.ДокументОснование
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЕГАИС.Ссылка,
	|	ОстаткиЕГАИС.СтатусОбработки,
	|	Неопределено
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка,
	|	ТТНВходящаяЕГАИС.СтатусОбработки,
	|	ТТНВходящаяЕГАИС.ДокументОснование
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка,
	|	ТТНИсходящаяЕГАИС.СтатусОбработки,
	|	ТТНИсходящаяЕГАИС.ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаВРегистр2ЕГАИС.Ссылка,
	|	ПередачаВРегистр2ЕГАИС.СтатусОбработки,
	|	ПередачаВРегистр2ЕГАИС.ДокументОснование
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|ГДЕ
	|	ПередачаВРегистр2ЕГАИС.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратИзРегистра2ЕГАИС.Ссылка,
	|	ВозвратИзРегистра2ЕГАИС.СтатусОбработки,
	|	ВозвратИзРегистра2ЕГАИС.ДокументОснование
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
	|ГДЕ
	|	ВозвратИзРегистра2ЕГАИС.Ссылка В (&МассивДокументов)
	|");
	
	МассивДокументов = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеСтатусовДокументов Цикл
		МассивДокументов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Значения = Новый Структура;
		Значения.Вставить("Статус",            Выборка.СтатусОбработки);
		Значения.Вставить("Ссылка",            Выборка.Ссылка);
		Значения.Вставить("ДокументОснование", Выборка.ДокументОснование);
		
		СоответствиеСтатусовДокументов.Вставить(Выборка.Ссылка, Значения);
		
	КонецЦикла;
	
	Возврат СоответствиеСтатусовДокументов;
	
КонецФункции

// Получить данные для передачи в ЕГАИС
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, передаваемый в ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Данные для передачи в ЕГАИС
//
Функция ПараметрыПередачиДанныхЕГАИС(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
		
		Возврат Документы.ЧекЕГАИС.ПараметрыПередачиДанныхЕГАИС(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		Возврат Документы.ЧекЕГАИСВозврат.ПараметрыПередачиДанныхЕГАИС(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Изменить статус чека ЕГАИС
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС или ДокументСсылка.ЧекЕГАИСВозврат - Чек ЕГАИС
//  АдресЧекаЕГАИС - Строка - Адрес чека ЕГАИС
//  ПодписьЧекаЕГАИС - Строка - Подпись чека ЕГАИС
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус
// 
// Возвращаемое значение:
//  Структура - Результат записи
//
Функция ИзменитьСтатусЧекаЕГАИС(ДокументСсылка, АдресЧекаЕГАИС, ПодписьЧекаЕГАИС, НовыйСтатус) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументОснование", ДокументОбъект.ДокументОснование);
	ВозвращаемоеЗначение.Вставить("Результат", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ДокументОбъект.АдресЧекаЕГАИС   = АдресЧекаЕГАИС;
	ДокументОбъект.ПодписьЧекаЕГАИС = ПодписьЧекаЕГАИС;
	ДокументОбъект.СтатусОбработки  = НовыйСтатус;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		ВозвращаемоеЗначение.Результат = Истина;
		
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'При записи документа %1 произошла ошибка.'"), ДокументСсылка);
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает транспортный модуль
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент - Контрагент.
//  ТорговыйОбъект - СправочникСсылка.ТорговыйОбъектЕГАИС - Торговый объект.
// 
// Возвращаемое значение:
//  ТранспортныйМодуль - Настройки ЕГАИС
//
Функция ТранспортныйМодуль(Контрагент, ТорговыйОбъект) Экспорт
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Контрагент",     Контрагент));
	Отбор.Добавить(Новый Структура("Поле, Значение", "ТорговыйОбъект", ТорговыйОбъект));
	
	СписокУТМ = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);
	
	Возврат ?(СписокУТМ.Количество() >= 1, СписокУТМ[0], Неопределено);
	
КонецФункции

// Записывает данные при отказе ЕГАИС
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ
//  ИдентификаторЗапроса	 - Строка - Идентификатор строки
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ТоварноТранспортнаяНакладнаяЕГАИС) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ТоварноТранспортнаяНакладнаяЕГАИС);
	
КонецПроцедуры

// Проверяет наличие расхождений между товарами накладных и ТТН ЕГАИС.
// Вызывается перед выполнением дальнейшего действия ПодтвердитеПолучение с целью выявления наличия расхождений.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС
//
// Возвращаемое значение:
//  Структура со свойствами:
//   * ЕстьРасхожденияБольшеТТН - Булево - Признак наличия расхождений больше ТТН
//   * ЕстьРасхожденияМеньшеТТН - Булево - Признак наличия расхождений меньше ТТН
//
Функция ПроверитьРасхожденияТоваровПоступленияТТН_ЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС) Экспорт
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.ПроверитьРасхожденияТоваровПоступленияТТН_ЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС);
	
КонецФункции

// Проверка константы "Разрешать продажу алкогольной продукции без сопоставления ЕГАИС"
// 
// Возвращаемое значение:
//  Булево - возвращает значение константы
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС();
	
КонецФункции

// Заполняет фактическое количество во входящей ТТН при передаче акта расхождений.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  Расхождения - ТаблицаЗначений - таблица с фактически принятым количеством.
//
Процедура ЗаполнитьРасхожденияВДокументеТТНВходящая(ТоварноТранспортнаяНакладнаяЕГАИС, Расхождения) Экспорт
	
	ТаблицаРасхождений = Расхождения.Выгрузить();
	
	Попытка
		
		ДокументОбъект = ТоварноТранспортнаяНакладнаяЕГАИС.ПолучитьОбъект();
		ДокументОбъект.ЕстьРасхождения = Истина;
		Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
			НайденнаяСтрока = ТаблицаРасхождений.Найти(СтрокаТовары.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				СтрокаТовары.КоличествоФакт = НайденнаяСтрока.КоличествоФакт;
			Иначе
				СтрокаТовары.КоличествоФакт = СтрокаТовары.Количество;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать();
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает значение по умолчанию переданного определяемого типа.
//
Функция ПустоеЗначениеОпределяемогоТипа(ИмяТипа) Экспорт
	
	Возврат ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа(ИмяТипа);
	
КонецФункции

#КонецОбласти