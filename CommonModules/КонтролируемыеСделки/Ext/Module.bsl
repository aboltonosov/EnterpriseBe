#Область ПрограммныйИнтерфейс

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивУведомлений = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
			МассивУведомлений.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУведомлений.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивУведомлений", МассивУведомлений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка,
		|	УведомлениеОКонтролируемыхСделках.Дата КАК ДатаСоздания,
		|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(УведомлениеОКонтролируемыхСделках.ОтчетныйГод, ГОД) КАК ДатаОкончания,
		|	УведомлениеОКонтролируемыхСделках.ПометкаУдаления,
		|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Ссылка В(&МассивУведомлений)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Уведомление о контролируемых сделках'");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает уведомление оргнанизации в отчетном году
//Параметры
//Организация - Справочник Организации
//ОтчетныйГод - Число(4,0)
//ТипУведомления - Число(1,0)
//	0 - Уведомление
//	1 - Корректировка
//НомерКорректировки - Число(3,0)
//ТипПоиска - Строка
//	Последний 	- Искать корректировку с наибольшим номером
//	Следующий 	- Искать коректировку с номером "НомерКорректировки" или следующую
//	Предыдущий 	- Искать коректировку с номером "НомерКорректировки" или предидущую
//	Указанный 	- Искать только указанный номер корректировки 
//	(Возвращает неопределено если уведомление  не найдено)
Функция НайтиУведомлениеОрганизацииВОтчетномГоду(Организация, ОтчетныйГод, ТипУведомления = Неопределено, НомерКорректировки = Неопределено, ТипПоиска = "Последний") Экспорт
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ОтчетныйГод", Дата(ОтчетныйГод, 1, 1));
		Запрос.Параметры.Вставить("НомерКорректировки", ?(ТипУведомления = 0, 0, ?(НомерКорректировки = Неопределено,0,НомерКорректировки)));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.Организация,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ДатаФормированияСпискаСделок,
		|	УведомлениеОКонтролируемыхСделках.ДатаЗаполненияУведомления
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
		|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
		|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки
		|	И НЕ УведомлениеОКонтролируемыхСделках.ПометкаУдаления";
		
		Если ТипУведомления = Неопределено и ТипПоиска = "Последний" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки","");	
		КонецЕсли;
		
		Если ТипПоиска = "Последний" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
		ИначеЕсли ТипПоиска = "Следующий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки ВОЗР";
		ИначеЕсли ТипПоиска = "Предыдущий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки <= &НомерКорректировки");	
		ИначеЕсли ТипПоиска = "Указанный" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");	
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
			НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
			Возврат Результат.Уведомление;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

Функция РазложитьОКВЭДВСтроку(ИсходныйКодСТочками)
	
	Результат = "";
	ДлиннаИсходнойСтроки = СтрДлина(ИсходныйКодСТочками);
	ИндексПервойТочки = СтрНайти(ИсходныйКодСТочками, ".");
	Если ИндексПервойТочки = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ИндексВторойТочки = СтрНайти(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), ".");
	ПерваяПодстрока = Лев(ИсходныйКодСТочками, Мин(ИндексПервойТочки-1, 2));
	ВтораяПодстрока = ""; ТретьяПодстрока = "";
	
	Если ИндексВторойТочки = 0 Тогда
		ВтораяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), 2);
	Иначе
		ВтораяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки), Мин(ИндексВторойТочки - 1, 2));
		ТретьяПодстрока = Лев(Прав(ИсходныйКодСТочками, ДлиннаИсходнойСтроки - ИндексПервойТочки - ИндексВторойТочки), 2);
	КонецЕсли;
	
	Длинна = СтрДлина(ПерваяПодстрока);
	Если Длинна=0 Тогда
		ПерваяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ПерваяПодстрока = " " + ПерваяПодстрока;
	КонецЕсли;
	
	Длинна = СтрДлина(ВтораяПодстрока);
	Если Длинна=0 Тогда
		ВтораяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ВтораяПодстрока = " " + ВтораяПодстрока;
	КонецЕсли;
	
	Длинна = СтрДлина(ТретьяПодстрока);
	Если Длинна=0 Тогда
		ТретьяПодстрока = "  ";
	ИначеЕсли Длинна =1 Тогда
		ТретьяПодстрока = " " + ТретьяПодстрока;
	КонецЕсли;
	
	Возврат ПерваяПодстрока + ВтораяПодстрока + ТретьяПодстрока;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1А(Лист1А, НомерСтраницы, СведенияОбУведомлении) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Страница1А");
	Макет.Параметры.Сделка = Лист1А.Сделка;
	СтрокаВПараметрыМакета(СведенияОбУведомлении.КПП, "КПП", Макет.Параметры, 9);
	СтрокаВПараметрыМакета(СведенияОбУведомлении.ИНН, "ИНН", Макет.Параметры, 12);
	ЧислоВНомерСтраницы(НомерСтраницы,         "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Лист1А.НомерЛиста1А, "НомерЛиста1А_", Макет.Параметры, 6);
	
	Макет.Параметры.П100 = Лист1А.Строка100Взаимозависимость;
	
	Макет.Параметры.П121 = Лист1А.Строка121СтороныВзаимозависимыПоКодексу;
	Макет.Параметры.П122 = Лист1А.Строка122СделкаВОбластиВнешнейТорговли;
	Макет.Параметры.П123 = Лист1А.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением;
	Макет.Параметры.П124 = Лист1А.Строка124СделкаСНезависимымПосредником;
	
	Макет.Параметры.П131 = Лист1А.Строка131СуммаДоходовПоСделкамПревышаетПредел;
	Макет.Параметры.П132 = Лист1А.Строка132СделкаСПлательщикомНДПИ;
	Макет.Параметры.П133 = Лист1А.Строка133СделкаСКонтрагентомНаСпецрежимах;
	Макет.Параметры.П134 = Лист1А.Строка134СделкаСПлательщикомНалогаНаПрибыль;
	Макет.Параметры.П135 = Лист1А.Строка135СделкаСРезидентомОЭЗ;
	
	Макет.Параметры.П200 = "0";
	СтрокаВПараметрыМакета(Лист1А.Строка210КодНаименованияСделки, "П210_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1А.Строка211КодСтороныСделки, "П211_", Макет.Параметры, 3);
	Макет.Параметры.П220 = Лист1А.Строка220ПризнакОпределенияЦеныСделки;
	ВРег220 = ВРег(Лист1А.Строка220ПризнакОпределенияЦеныСделки);
	
	Макет.Параметры.П2201 = Лист1А.Строка220_1Комментарий;
	Макет.Параметры.П230 = Лист1А.Строка230КодОпределенияЦены;
	Макет.Параметры.П2301 = Лист1А.Строка230_1Комментарий;
	СтрокаВПараметрыМакета(Лист1А.Строка240КодМетодовЦенообразования, "П240_", Макет.Параметры, 2);
	Макет.Параметры.П2401 = Лист1А.Строка240_1Комментарий;
	
	Макет.Параметры.П251 = Лист1А.Строка251;
	Макет.Параметры.П252 = Лист1А.Строка252;
	Макет.Параметры.П253 = Лист1А.Строка253;
	Макет.Параметры.П254 = Лист1А.Строка254;
	Макет.Параметры.П255 = Лист1А.Строка255;
	Макет.Параметры.П256 = Лист1А.Строка256;
	Макет.Параметры.П257 = Лист1А.Строка257;
	Макет.Параметры.П258 = Лист1А.Строка258;
	Макет.Параметры.П259 = Лист1А.Строка259;
	
	ЧислоВПараметрыМакета(Лист1А.Строка260КоличествоУчастниковСделки, "П260_", Макет.Параметры, 3);
	Макет.Параметры.П2601 = Лист1А.Строка260_1Комментарий;
	
	ЧислоВПараметрыМакета(Лист1А.Строка300СуммаДоходов, "П300_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка301СуммаРегулируемыхДоходов, "П301_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка310СуммаРасходов, "П310_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1А.Строка311СуммаРегулируемыхРасходов, "П311_", Макет.Параметры, 15);
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1Б(Лист1Б, НомерСтраницы, СтруктураШапки) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Страница1Б");
	
	Макет.Параметры.Сделка = Лист1Б.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(НомерСтраницы,         "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Лист1Б.НомерЛиста1А, "НомерСделки1А_", Макет.Параметры, 6);
	
	Макет.Параметры.П020 = "" + Лист1Б.Строка020ТипПредмета;
	СтрокаВПараметрыМакета(Лист1Б.Строка030НаименованиеПредмета, "П030_", Макет.Параметры, 156);
	СтрокаВПараметрыМакета(Лист1Б.Строка040КодПоТНВЭД, "П040_", Макет.Параметры, 10);
	СтрокаВПараметрыМакета(Лист1Б.Строка043КодПоОКП, "П043_", Макет.Параметры, 6);
	СтрокаВПараметрыМакета(РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД), "П045_", Макет.Параметры, 6);
	
	ЧислоВПараметрыМакета(Лист1Б.Строка050НомерУчастникаСделки, "П050_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета(Лист1Б.Строка060НомерДоговора, "П060_", Макет.Параметры, 117);
	ДатаВПараметрыМакета(Лист1Б.Строка065ДатаДоговора, "П065_", Макет.Параметры);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка070КодСтраныПроисхождения, "П070_", Макет.Параметры, 3);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка080КодСтраныОтправки, "П080_С_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка080КодРегионаОтправки, "П080_Р_", Макет.Параметры, 2);
	СтрокаВПараметрыМакета(Лист1Б.Строка080ГородОтправки, "П080_Г_", Макет.Параметры, 31);
	СтрокаВПараметрыМакета(Лист1Б.Строка080НаселенныйПунктОтправки, "П080_Н_", Макет.Параметры, 31);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка090КодСтраныСовершенияСделки, "П090_С_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка090КодРегионаСовершенияСделки, "П090_Р_", Макет.Параметры, 2);
	СтрокаВПараметрыМакета(Лист1Б.Строка090ГородСовершенияСделки, "П090_Г_", Макет.Параметры, 31);
	СтрокаВПараметрыМакета(Лист1Б.Строка090НаселенныйПунктСовершенияСделки, "П090_Н_", Макет.Параметры, 31);
	
	СтрокаВПараметрыМакета(Лист1Б.Строка100КодУсловийПоставки, "П100_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(Лист1Б.Строка110КодЕдиницыИзмерения, "П110_", Макет.Параметры, 3);
	
	ЧислоВПараметрыМакета(Лист1Б.Строка120Количество, "П120_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1Б.Строка130Цена, "П130_", Макет.Параметры, 15);
	ЧислоВПараметрыМакета(Лист1Б.Строка140Стоимость, "П140_", Макет.Параметры, 15);
	ДатаВПараметрыМакета(Лист1Б.Строка150ДатаСовершения, "П150_", Макет.Параметры);
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляРаздела2(Раздел2, ДанныеРаздела2, НомерСтраницы, СтруктураШапки) Экспорт 
	
	СведенияОКонтрагенте = ДанныеРаздела2.Найти(Раздел2.Контрагент, "Контрагент");
	Если СведенияОКонтрагенте = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Раздел2");
	Макет.Параметры.Сделка = Раздел2.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(НомерСтраницы, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Раздел2.НомерЛиста1А, "П010_", Макет.Параметры, 6);
	ЧислоВПараметрыМакета(СведенияОКонтрагенте.НомерКонтрагента, "П015_", Макет.Параметры, 4);
	
	Макет.Параметры.П020 = "" + СведенияОКонтрагенте.Строка020ТипОрганизации;
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка030КакКодСтраныРегистрации, "П030_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка040Наименование, "П040_", Макет.Параметры, 160);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка050ИНН, "П050_", Макет.Параметры, 10);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка060КПП, "П060_", Макет.Параметры, 9);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка070РегНомерВСтрокеРегистрации, "П070_", Макет.Параметры, 50);
	СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка080КодНалогВСтранеРегистрации, "П080_", Макет.Параметры, 50);
	
	Если СведенияОКонтрагенте.Строка020ТипОрганизации = 2 Тогда
		СтрокаВПараметрыМакета(СведенияОКонтрагенте.Строка090АдресИностраннойОрганизации, "П090_", Макет.Параметры, 240);
	КонецЕсли;
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляРаздела3(Раздел3, ДанныеРаздела3, НомерСтраницы, СтруктураШапки) Экспорт 
	
	СведенияОФизическомЛице = ДанныеРаздела3.Найти(Раздел3.Контрагент, "Контрагент");
	Если СведенияОФизическомЛице = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Раздел3");
	Макет.Параметры.Сделка = Раздел3.Сделка;
	СтрокаВПараметрыМакета(СтруктураШапки.ИНН,  "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СтруктураШапки.КПП,  "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(НомерСтраницы,          "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(Раздел3.НомерЛиста1А, "НомерСделки_", Макет.Параметры, 6);
	ЧислоВПараметрыМакета(СведенияОФизическомЛице.НомерКонтрагента, "НомерУчастника_", Макет.Параметры, 4);
	
	Макет.Параметры.КодВидаДеятельности = СведенияОФизическомЛице.Строка020КодВидаДеятельности;
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Строка030ИНН, "ИННФизлица_", Макет.Параметры, 12);
	
	Контрагент = СведенияОФизическомЛице.Контрагент;
	ФизическоеЛицо = СведенияОФизическомЛице.ФизическоеЛицо;
	
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Фамилия, "Фамилия_", Макет.Параметры, 33);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Имя, "Имя_", Макет.Параметры, 33);
	СтрокаВПараметрыМакета(СведенияОФизическомЛице.Отчество, "Отчество_", Макет.Параметры, 33);
	
	Если НЕ ЗначениеЗаполнено(СведенияОФизическомЛице.Строка030ИНН) Тогда
		
		ДатаВПараметрыМакета(ФизическоеЛицо.ДатаРождения, "ДатаРождения_", Макет.Параметры);
		СтрокаВПараметрыМакета(ФизическоеЛицо.МестоРождения, "МестоРождения_", Макет.Параметры, 66);
		
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) Тогда
			Макет.Параметры.Гражданство = "1";
			СтрокаВПараметрыМакета(СведенияОФизическомЛице.ГражданствоФизЛицСтрана.Код, "КодОКСМ_", Макет.Параметры, 3);
		Иначе
			Макет.Параметры.Гражданство = "2";
		КонецЕсли;
		
		СтрокаВПараметрыМакета(КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(СведенияОФизическомЛице.ВидДокумента),
									"КодВидаДокумента_", Макет.Параметры, 2);
		
									
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументСерия) Или ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументНомер) Тогда 
			СтрокаВПараметрыМакета(СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер, "СерияНомер_", Макет.Параметры, 25);
		КонецЕсли;
		СтрокаВПараметрыМакета(СведенияОФизическомЛице.ДокументКемВыдан, "ОрганВыдвшийДокумент_", Макет.Параметры, 80);
		ДатаВПараметрыМакета(СведенияОФизическомЛице.ДокументДатаВыдачи, "ДатаВыдачи_", Макет.Параметры);
		
		Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана = Справочники.СтраныМира.Россия Тогда
			Макет.Параметры.МестоЖительства = "1";
		Иначе
			Макет.Параметры.МестоЖительства = "2";
		КонецЕсли;
		
		АдресСтруктурой = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(СведенияОФизическомЛице.КонтактнаяИнформацияЗначенияПолей);
		Если АдресСтруктурой.Свойство("Регион") Тогда
			АдресСтруктурой.Вставить("РегионКод", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
		КонецЕсли;
		
		ПоляАдреса = Новый Структура("Индекс, РегионКод, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
		Для Каждого ПолеАдреса Из ПоляАдреса Цикл
			Если АдресСтруктурой.Свойство(ПолеАдреса.Ключ) Тогда
				ПоляАдреса[ПолеАдреса.Ключ] = АдресСтруктурой[ПолеАдреса.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		СтрокаВПараметрыМакета(ПоляАдреса.Индекс, "Индекс_", Макет.Параметры, 6);
		СтрокаВПараметрыМакета(ПоляАдреса.РегионКод, "РегионКод_", Макет.Параметры, 2);
		СтрокаВПараметрыМакета(ПоляАдреса.Район, "Район_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ПоляАдреса.Город, "Город_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ПоляАдреса.НаселенныйПункт, "НаселенныйПункт_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ПоляАдреса.Улица, "Улица_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ПоляАдреса.Дом, "Дом_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(ПоляАдреса.Корпус, "Корпус_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(ПоляАдреса.Квартира, "Квартира_", Макет.Параметры, 8);
		
		Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.СтраныМира.Россия Тогда
			НаименованиеСтраны = СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФСтрана;
			Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
				НайденнаяСтрана = Справочники.СтраныМира.НайтиПоНаименованию(НаименованиеСтраны);
				Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.СтраныМира.Россия Тогда
					СтрокаВПараметрыМакета(НайденнаяСтрана.Код, "КодСтраныОКСМ_", Макет.Параметры, 3);
					СтрокаВПараметрыМакета(СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПредставление, "АдресЗаПределамиРФ_", Макет.Параметры, 160);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста1(СведенияОбУведомлении, НомерСтраницы) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Лист1");
	СтрокаВПараметрыМакета(СведенияОбУведомлении.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СведенияОбУведомлении.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(НомерСтраницы, "СчетчикСтраниц_", Макет.Параметры);
	ЧислоВПараметрыМакета(СведенияОбУведомлении.ВсегоЛистов, "СтраницВсего_", Макет.Параметры, 5);
	
	Если СведенияОбУведомлении.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И СведенияОбУведомлении.Свойство("ИндивидуальныйПредпринимательФИО") Тогда
		
		ИндексПервойБуквы = 1;
		СтрокаВПараметрыМакета(СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Фамилия, "Налогоплательщик_", Макет.Параметры, 160, ИндексПервойБуквы);
		
		ИндексПервойБуквы = ПолучитьИндексСледующейСтроки(ИндексПервойБуквы, СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Фамилия, 40);
		СтрокаВПараметрыМакета(СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Имя, "Налогоплательщик_", Макет.Параметры, 160, ИндексПервойБуквы);
		
		ИндексПервойБуквы = ПолучитьИндексСледующейСтроки(ИндексПервойБуквы, СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Имя, 40);
		СтрокаВПараметрыМакета(СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Имя, "Налогоплательщик_", Макет.Параметры, 160, ИндексПервойБуквы);
		
		СтрокаВПараметрыМакета(СведенияОбУведомлении.ИндивидуальныйПредпринимательФИО.Отчество, "Налогоплательщик_", Макет.Параметры, 160, ИндексПервойБуквы);
	Иначе
		СтрокаВПараметрыМакета(СведенияОбУведомлении.НаименованиеОрганизации, "Налогоплательщик_", Макет.Параметры, 160);
	КонецЕсли;
	
	ЧислоВПараметрыМакета(СведенияОбУведомлении.НомерКорректировки, "НомерКорректировки_", Макет.Параметры, 3);
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ОтчетГод, "ОтчетныйГод_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.Тлф, "НомерКонтактногоТелефона_", Макет.Параметры, 20);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ЭлПочта, "ЭлектроннаяПочта_", Макет.Параметры, 37);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.КодНО, "КодНО_", Макет.Параметры, 4);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ПоМесту, "КодМестаПредставления_", Макет.Параметры, 3);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ОКАТО, "КодПоОКАТО_", Макет.Параметры, 11);
	СтрокаВПараметрыМакета(РазложитьОКВЭДВСтроку(ОсновныеСведенияВыгрузки.ОКВЭД), "ОКВЭД_", Макет.Параметры, 6);
	
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ПрПодп, "ПрПодп_", Макет.Параметры, 1);
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпФамилия") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ПодпФамилия, "ОргПодписантФамилия_", Макет.Параметры, 20);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпИмя") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ПодпИмя, "ОргПодписантИмя_", Макет.Параметры, 20);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпОтчество") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ПодпОтчество, "ОргПодписантОтчество_", Макет.Параметры, 20);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимДокПодп") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НаимДокПодп, "ДокУпПред_", Макет.Параметры, 40);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НаимОргПодп, "ОргУп_", Макет.Параметры, 160);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ФормРеорг") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ФормРеорг, "ФормРеорг_", Макет.Параметры, 1);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.ИННЮЛРеорг, "ИННЮЛРеорг_", Макет.Параметры, 10);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.КППЮЛРеорг, "КППЮЛРеорг_", Макет.Параметры, 9);
	КонецЕсли;
	
	ДатаВПараметрыМакета(ТекущаяДатаСеанса(), "ДатаПодписи", Макет.Параметры);
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ВернутьЗаполненныйМакетДляЛиста2(СведенияОбУведомлении, НомерСтраницы) Экспорт 
	
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет("Лист2");
	СтрокаВПараметрыМакета(СведенияОбУведомлении.ИНН, "ИНН", Макет.Параметры, 12);
	СтрокаВПараметрыМакета(СведенияОбУведомлении.КПП, "КПП", Макет.Параметры, 9);
	ЧислоВНомерСтраницы(НомерСтраницы, "СчетчикСтраниц_", Макет.Параметры);
	
	ДатаОкончания = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОбУведомлении.Организация, "ИндивидуальныйПредприниматель");
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Возврат Макет;
	КонецЕсли;
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДатаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛДатаРожд, "ДатаРождения_", Макет.Параметры);
	СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛМестоРожд, "МестоРождения_", Макет.Параметры, 66);
	Макет.Параметры.Гражданство = ОсновныеСведенияВыгрузки.НПФЛНалГражд;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛОКСМ") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛОКСМ, "КодОКСМ_", Макет.Параметры, 3);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛКодВидДок") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛКодВидДок, "КодВидаДокумента_", Макет.Параметры, 2);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛСерНомДок, "СерияНомер_", Макет.Параметры, 25);
		ДатаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛДатаДок,     "ДатаВыдачи_", Макет.Параметры);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛВыдДок,    "ОрганВыдвшийДокумент_", Макет.Параметры, 80);
	КонецЕсли;
	
	Макет.Параметры.СтатусНалогоплательщика = ОсновныеСведенияВыгрузки.НПФЛСтатусНП;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛПрАдр") Тогда
		Макет.Параметры.МестоЖительства = ОсновныеСведенияВыгрузки.НПФЛПрАдр;
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛИндекс ,"Индекс_", Макет.Параметры, 6);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛКодРегион ,"РегионКод_", Макет.Параметры, 2);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛРайон ,"Район_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛГород ,"Город_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛНаселПункт ,"НаселенныйПункт_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛУлица ,"Улица_", Макет.Параметры, 30);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛДом ,"Дом_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛКорпус ,"Корпус_", Макет.Параметры, 8);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.НПФЛКварт ,"Квартира_", Макет.Параметры, 8);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("АдрИнКодСтраны") Тогда
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.АдрИнКодСтраны ,"КодСтраныОКСМ_", Макет.Параметры, 3);
		СтрокаВПараметрыМакета(ОсновныеСведенияВыгрузки.АдрИнТекст ,"АдресЗаПределамиРФ_", Макет.Параметры, 160);
	КонецЕсли;
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ПолучитьЛистыУведомления(Уведомление, Лист1АДляПечати = Неопределено) Экспорт
	
	Реквизиты = Новый Структура("ОтчетныйГод, ЮридическоеФизическоеЛицо, ИНН",
								"ОтчетныйГод", "Организация.ЮридическоеФизическоеЛицо", "Организация.ИНН");
	
	СведенияОбУведомлении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, Реквизиты);
	
	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УведомлениеОКонтролируемойСделке", Уведомление);
	Запрос.УстановитьПараметр("ДатаАктуальностиСведений", ДатаАктуальностиСведений);
	Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам();
	Если Лист1АДляПечати <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ КонтролируемаяСделка.ПометкаУдаления", "И НЕ КонтролируемаяСделка.ПометкаУдаления И КонтролируемаяСделка.Ссылка = &Лист1АДляПечати");
		Запрос.УстановитьПараметр("Лист1АДляПечати", Лист1АДляПечати);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Листы1А.*
	|ИЗ
	|	Листы1А КАК Листы1А
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Б.*
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Б.НомерЛиста1А, Листы1Б.НомерСтроки
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.*
	|ИЗ
	|	Раздел2 КАК Раздел2
	|УПОРЯДОЧИТЬ ПО
	|	Раздел2.Строка040Наименование
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел3.*
	|ИЗ
	|	Раздел3 КАК Раздел3
	|УПОРЯДОЧИТЬ ПО
	|	Раздел3.Фамилия, Раздел3.Имя, Раздел3.Отчество;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Контрагент
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Контрагент
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А";
	
	Результат = Запрос.ВыполнитьПакет();
	Листы1А = Результат[0].Выгрузить(); 
	Листы1Б = Результат[1].Выгрузить(); 
	Раздел2 = Результат[2].Выгрузить(); 
	Раздел3 = Результат[3].Выгрузить();
	Листы2 = Результат[4].Выгрузить(); 
	Листы3 = Результат[5].Выгрузить();

	Листы1А.Индексы.Добавить("Сделка");
	Листы1Б.Индексы.Добавить("Сделка");
	Раздел2.Индексы.Добавить("Контрагент");
	Раздел3.Индексы.Добавить("Контрагент");
	Листы2.Индексы.Добавить("Сделка");
	Листы3.Индексы.Добавить("Сделка");
	
	Раздел2.Колонки.Добавить("НомерКонтрагента", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(4,0)));
	Раздел3.Колонки.Добавить("НомерКонтрагента", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(4,0)));
	
	НомерКонтрагента = 1;
	Для Каждого Контрагент Из Раздел2 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел3 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;

	ТипНомераСтраницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	КоличествоЛистовРаздела = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	
	Листы1А.Колонки.Добавить("Количество1Б", КоличествоЛистовРаздела);
	
	Листы1Б.Колонки.Добавить("Строка050НомерУчастникаСделки", 
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Листы = Новый ТаблицаЗначений();
	Листы.Колонки.Добавить("Раздел",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Листы.Колонки.Добавить("НомерСтрокиРаздела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	ДобавитьЛистВУведомление(Листы, "ТитульныйЛист", 0);
	//Для организации физического-лица титульные листы содержат 2 листа
	Если СведенияОбУведомлении.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И СокрЛП(СведенияОбУведомлении.ИНН) = "" Тогда
		ДобавитьЛистВУведомление(Листы, "ТитульныйЛистФизическоеЛицо", 0);
	КонецЕсли;
	
	//нумерация листов раздела 1А и 1Б
	Для каждого Лист1А Из Листы1А Цикл
		
		ДобавитьЛистВУведомление(Листы, "Лист1А", Листы1А.Индекс(Лист1А));
		
		Отбор = Новый Структура("Сделка", Лист1А.Сделка);
		
		СписокЛистов1Б = Листы1Б.НайтиСтроки(Отбор);
		Лист1А.Количество1Б = СписокЛистов1Б.Количество();
		
		Для Каждого Лист1Б Из СписокЛистов1Б Цикл
			
			ДобавитьЛистВУведомление(Листы, "Лист1Б", Листы1Б.Индекс(Лист1Б));
			
			Если Лист1Б.ТипКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОКонтрагенте = Раздел3.Найти(Лист1Б.Контрагент, "Контрагент");
			Иначе
				СведенияОКонтрагенте = Раздел2.Найти(Лист1Б.Контрагент, "Контрагент");
			КонецЕсли;
			Если СведенияОКонтрагенте <> Неопределено Тогда
				Лист1Б.Строка050НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
		СписокЛистов2 = Листы2.НайтиСтроки(Отбор);
		Для Каждого Лист2 Из СписокЛистов2 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел2", Листы2.Индекс(Лист2));
		КонецЦикла;
		
		СписокЛистов3 = Листы3.НайтиСтроки(Отбор);
		Для Каждого Лист3 Из СписокЛистов3 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел3", Листы3.Индекс(Лист3));
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Листы", Листы);
	СтруктураВозврата.Вставить("ЛистыРаздела1А", Листы1А);
	СтруктураВозврата.Вставить("ЛистыРаздела1Б", Листы1Б);
	СтруктураВозврата.Вставить("ЛистыРаздела2", Листы2);
	СтруктураВозврата.Вставить("ЛистыРаздела3", Листы3);
	СтруктураВозврата.Вставить("ДанныеРаздела2", Раздел2);
	СтруктураВозврата.Вставить("ДанныеРаздела3", Раздел3);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДобавитьЛистВУведомление(Знач Листы, Знач Раздел, Знач НомерСтрокиРаздела)
	
	Лист = Листы.Добавить();
	Лист.Раздел = Раздел;
	Лист.НомерСтрокиРаздела = НомерСтрокиРаздела;
	
КонецПроцедуры

Функция ПечатьКонтролируемыхСделок(МассивСделок, ОбъектыПечати) Экспорт
	
	ТабличныйДокументЛисты1А = Новый ТабличныйДокумент;
	ТабличныйДокументЛисты1А.АвтоМасштаб         = Истина;
	ТабличныйДокументЛисты1А.ПолеСверху          = 5;
	ТабличныйДокументЛисты1А.ПолеСнизу           = 5;
	ТабличныйДокументЛисты1А.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокументЛисты1А.ИмяПараметровПечати = "Документ.УведомлениеОКонтролируемыхСделках";
	
	Если НЕ ЗначениеЗаполнено(МассивСделок) Тогда
		Возврат ТабличныйДокументЛисты1А;
	КонецЕсли;
	
	Для Каждого КонтролируемаяСделка ИЗ МассивСделок Цикл
		ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабличныйДокументЛисты1А, ОбъектыПечати);
	КонецЦикла;
	
	Возврат ТабличныйДокументЛисты1А;

КонецФункции

Процедура ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабДокумент, ОбъектыПечати)
	
	Если НЕ ЗначениеЗаполнено(КонтролируемаяСделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Уведомление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтролируемаяСделка, "УведомлениеОКонтролируемойСделке");
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(Уведомление, КонтролируемаяСделка);
	Листы = ЛистыУведомления.Листы;
	
	Если Листы.Количество()>1 
		И Листы[1].Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ПервыйЛист = 3;
	Иначе
		ПервыйЛист = 2;
	КонецЕсли;
	
	СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ЛистыУведомления.Листы.Количество(), ТабДокумент);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, КонтролируемаяСделка);
	
КонецПроцедуры

Процедура СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, ТабличныйДокумент) Экспорт
	
	Листы   = ЛистыУведомления.Листы;
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	ЛистыРаздела2 = ЛистыУведомления.ЛистыРаздела2;
	ЛистыРаздела3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		Лист = Листы[НомерЛиста - 1];
		
		Если Лист.Раздел = "ТитульныйЛист" Тогда
			Макет = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляЛиста1(СведенияОбУведомлении, НомерЛиста);
			ТабличныйДокумент.Вывести(Макет);
		ИначеЕсли Лист.Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
			Макет = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляЛиста2(СведенияОбУведомлении, НомерЛиста);
			ТабличныйДокумент.Вывести(Макет);
		ИначеЕсли Лист.Раздел = "Лист1А" Тогда
			Лист1А  = Листы1А[Лист.НомерСтрокиРаздела];
			Макет   = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляЛиста1А(Лист1А, НомерЛиста, СведенияОбУведомлении);
			ТабличныйДокумент.Вывести(Макет);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ИначеЕсли Лист.Раздел = "Лист1Б" Тогда
			Лист1Б   = Листы1Б[Лист.НомерСтрокиРаздела];
			Макет = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляЛиста1Б(Лист1Б, НомерЛиста, СведенияОбУведомлении);
			ТабличныйДокумент.Вывести(Макет);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ИначеЕсли Лист.Раздел = "Раздел2" Тогда
			Лист2 = ЛистыРаздела2[Лист.НомерСтрокиРаздела];
			Макет = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляРаздела2(Лист2, ДанныеРаздела2, НомерЛиста, СведенияОбУведомлении);
			ТабличныйДокумент.Вывести(Макет);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ИначеЕсли Лист.Раздел = "Раздел3" Тогда
			Лист3 = ЛистыРаздела3[Лист.НомерСтрокиРаздела];
			Макет = КонтролируемыеСделки.ВернутьЗаполненныйМакетДляРаздела3(Лист3, ДанныеРаздела3, НомерЛиста, СведенияОбУведомлении);
			ТабличныйДокумент.Вывести(Макет);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция СписокОфшоров() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК СтранаРегистрации
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтранаРегистрации");
	
КонецФункции

Функция СписокТоваровМировойБиржевойТорговли() Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", КонтролируемыеСделкиПовтИсп.ПереченьКодовТНВЭДМировойБиржевойТорговли());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ПредметСделки
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КлассификаторТНВЭД.Ссылка = Номенклатура.КодТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредметСделки");
	
КонецФункции

Функция ПредставлениеУведомления(Уведомление, ШаблонТекста) Экспорт
	
	Если Уведомление = ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "Организация, НомерКорректировки, ОтчетныйГод");
	
	Представление = ?(ПараметрыУведомления.НомерКорректировки > 0, 
		НСтр("ru = '%ШаблонТекста% корректировки №%НомерКорректировки% уведомления ""%Организация%"" за %Год%'"),
		НСтр("ru = '%ШаблонТекста% уведомления ""%Организация%"" за %Год%'"));
	Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПараметрыУведомления.НомерКорректировки);
	Представление = СтрЗаменить(Представление, "%Организация%", ПараметрыУведомления.Организация);
	Представление = СтрЗаменить(Представление, "%Год%", Формат(ПараметрыУведомления.ОтчетныйГод,"ДФ=yyyy"));
	Представление = СтрЗаменить(Представление, "%ШаблонТекста%", ШаблонТекста);
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьСписокОрганизацийИсключаяУказанную(ИсключающаясяОрганизация, ВключатьПомеченныеНаУдаление = Ложь, ВключатьУправленческуюОрганизацию = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.ПометкаУдаления = &ВключатьПомеченныеНаУдаление
	|	ИЛИ Не Организации.ПометкаУдаления)
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", ИсключающаясяОрганизация);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	ИспользоватьУпрОрганизацию = ?(ВключатьУправленческуюОрганизацию, Истина, ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ИспользоватьУпрОрганизацию);
	
	ОрганизацииДляВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ОрганизацииДляВыбора;
	
КонецФункции

#Область ФормированиеДвижений

Процедура СформироватьДвиженияКонтролируемыхСделокОрганизаций(КонтролируемыеСделкиОрганизаций, Движения, Отказ) Экспорт
	
	Движения.КонтролируемыеСделкиОрганизаций.Загрузить(КонтролируемыеСделкиОрганизаций);
	
	Движения.КонтролируемыеСделкиОрганизаций.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область НумерацияДокументов

Процедура ПеренумерацияКонтролируемыхСделокУведомления(Уведомление) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтролируемаяСделка.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	               |ГДЕ
	               |	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	               |	И НЕ КонтролируемаяСделка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтролируемаяСделка.Номер";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	
	Сч = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СчетчикТранзакции = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Номер <> Сч Тогда
			КонтролируемаяСделка = Выборка.Документ.ПолучитьОбъект();
			КонтролируемаяСделка.Номер = Сч;
			КонтролируемаяСделка.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция НомераКонтролируемыхСделокУведомленияКоректны(Уведомление) Экспорт
	
	НомераКорректны = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	КОЛИЧЕСТВО(КонтролируемаяСделка.Ссылка) КАК Количество,
					|	ЕстьNull(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК МаксимальныйНомер,
					|    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтролируемаяСделка.Номер) КАК КоличествоРазличных
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
				   				   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	РезультатПроверки = Запрос.Выполнить().Выбрать();			   
	
	Если РезультатПроверки.Следующий() Тогда
		
		НомераКорректны	= (РезультатПроверки.МаксимальныйНомер = РезультатПроверки.Количество 
							И РезультатПроверки.МаксимальныйНомер = РезультатПроверки.КоличествоРазличных);
		
	КонецЕсли;	
				   
	Возврат НомераКорректны;	
	
КонецФункции	

Функция ПолучитьСледующийНомерКонтролируемойСделкиУведомления(Уведомление) Экспорт
	
	Номер = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	ЕстьNull(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК Номер
					|ИЗ
					|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
					|ГДЕ
					|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
					|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
			   
				   
				   
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Результат = Запрос.Выполнить().Выбрать();			   
	
	Если Результат.Следующий() Тогда
		
		Номер = Результат.Номер;
		
	КонецЕсли;	
				   
	Возврат Номер + 1;	
	
	
КонецФункции	

Процедура ПолучитьЛистыУведомленияВФоне(ПараметрыОтчета, АдресХранилища) Экспорт 
	
	Результат = ПолучитьЛистыУведомления(ПараметрыОтчета);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСписокГоловныхОрганизаций(СписокОрганизаций) Экспорт
	
	СписокОрганизаций.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПравильностьЗаполненияКонтрагентаРегистра(Отказ, ТаблицаЗаписей, ОписаниеКлючаЗаписи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КлючиРегистра", ТаблицаЗаписей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КлючиРегистра
	|ИЗ
	|	&КлючиРегистра КАК КлючиРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистра КАК КлючиРегистра
	|		ПО Контрагенты.Ссылка = КлючиРегистра.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				КлючиРегистра.Контрагент
	|			ИЗ
	|				КлючиРегистра КАК КлючиРегистра)
	|	И Контрагенты.ОбособленноеПодразделение = ИСТИНА";
	
	ПоляКлюча = "";
	Для Каждого ОписаниеКлюча Из ОписаниеКлючаЗаписи Цикл
		ПоляКлюча = ПоляКлюча + ?(ПоляКлюча = "", "", ", ") + ОписаниеКлюча.Ключ + " КАК " + ОписаниеКлюча.Ключ;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КлючиРегистра.Контрагент КАК Контрагент", ПоляКлюча);
	
	Ошибка = Запрос.Выполнить().Выбрать();
	
	Пока Ошибка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Контрагент ""%1"" является обособленным подразделением. Можно выбирать только головного контрагента'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ошибка.Наименование);
		
		ЗаполнитьЗначенияСвойств(ОписаниеКлючаЗаписи, Ошибка);
		КлючЗаписи = РегистрыСведений.ВзаимозависимыеЛица.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючЗаписи, "Запись.Контрагент", , Отказ);
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляЗаполненияМакетов

Процедура СтрокаВПараметрыМакета(Строка, ПрефиксПараметра, ПараметрыМакета, ДлинаОбластиМакета, ИндексПервойБуквы = 1) Экспорт
	
	СтрокаПараметра = ВРЕГ(Строка);
	
	ДлинаСтроки = Мин(СтрДлина(СтрокаПараметра), ДлинаОбластиМакета - ИндексПервойБуквы + 1);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Формат(Индекс + ИндексПервойБуквы - 1, "ЧЦ=10; ЧГ=0");
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаПараметра, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВНомерСтраницы(Число, ПрефиксПараметра, ПараметрыМакета) Экспорт
	
	СтрокаЧисла = Формат(Число, "ЧЦ=5; ЧДЦ=0; ЧН=0; ЧВН=; ЧГ=0");
	Для Позиция = 1 По СтрДлина(СтрокаЧисла) Цикл
		ИмяПараметра = ПрефиксПараметра + Позиция;
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Позиция, 1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВПараметрыМакета(Число, ПрефиксПараметра, ПараметрыМакета, КоличествоЗнаков) Экспорт
	
	СтрокаЧисла = Формат(Число, "ЧЦ="+КоличествоЗнаков+"; ЧН=0; ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Индекс = 1;
	Пока Индекс <= ДлинаСтроки Цикл
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДатаВПараметрыМакета( Дата, ПрефиксПараметра, ПараметрыМакета) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "1"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "1"] = "" + Цел(День/10);
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "3"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + Месяц;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "3"] = "1";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ПараметрыМакета[ПрефиксПараметра + "5"] = "" + ГТ;
	ПараметрыМакета[ПрефиксПараметра + "6"] = "" + ГС;
	ПараметрыМакета[ПрефиксПараметра + "7"] = "" + ГД;
	ПараметрыМакета[ПрефиксПараметра + "8"] = "" + ГЕ;

КонецПроцедуры

Функция ПолучитьИндексСледующейСтроки(ИндексПервойБуквыСтроки, Строка, ДлинаСтрокиОтображения)
	
	ИндексПервойБуквы = ИндексПервойБуквыСтроки + ДлинаСтрокиОтображения;
	Пока ИндексПервойБуквы < СтрДлина(Строка) Цикл
		ИндексПервойБуквы = ИндексПервойБуквы + ДлинаСтрокиОтображения;
	КонецЦикла;
	
	Возврат ИндексПервойБуквы;
	
КонецФункции

Процедура ЗаполнитьШтрихкод(Штрихкод)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
		
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(Штрихкод.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        СтрЗаменить(Штрихкод.ПараметрРасшифровки, "Ш", ""));
	ПараметрыШтрихкода.Вставить("ТипКода",         0); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    12);
	
	Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецПроцедуры

Функция ЕстьШтрихкод(Рисунки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КартинкаШтрихкода", Новый УникальныйИдентификатор);
	СтароеЗначение = СтруктураПоиска.КартинкаШтрихкода;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Рисунки);
	
	Возврат Не СтруктураПоиска.КартинкаШтрихкода = СтароеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти