
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыИЭлементовШапки

// Вызывается из обработчика события ПриОткрытии формы отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Отказ - Булево - Признак отказа.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// Установка модифицированности пользовательских настроек
	// для их автоматического сохранения при закрытии формы.
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Попытка
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			Форма.ПолеОрганизация, Форма.Отчет.Организация, Форма.Отчет.ВключатьОбособленныеПодразделения);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Вызывается из обработчика события ПередЗакрытием формы отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Отказ - Булево - Признак отказа.
//	ЗавершениеРаботы - Булево - Признак завершение работы с программой.
//	ТекстПредупреждения - Строка - Текст предупреждения при закрытии.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости.
	Форма.ВариантМодифицирован = Ложь;
	
КонецПроцедуры

// Вызывается из обработчика события ПриЗакрытии формы отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	ЗавершениеРаботы - Булево - Признак завершения работы с программой.
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы = Истина) Экспорт
	
	ОтменяемыеЗадания = БухгалтерскийУчетКлиентПереопределяемый.ЗаданияОтменяемыеПриЗакрытииОтчета();
	
	ИдентификаторыОтменяемыхЗаданий = Новый Массив;
	Для каждого РеквизитФормы Из ОтменяемыеЗадания Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, РеквизитФормы)
		   И ЗначениеЗаполнено(Форма[РеквизитФормы]) Тогда
			ИдентификаторыОтменяемыхЗаданий.Добавить(Форма[РеквизитФормы]);
		КонецЕсли;
	КонецЦикла; 
	
	Если ИдентификаторыОтменяемыхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗавершениеРаботы Тогда
		БухгалтерскиеОтчетыВызовСервера.ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий);
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИдентификаторЗаданияАктуализации")
	   И ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
	   И Форма.Отчет.Свойство("Организация") Тогда
	   
		ПараметрыОповещения = Новый Структура("Организация", Форма.Отчет.Организация);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПриИзменении поля организации.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ПолеФормы - Поле организации.
//
Процедура ОрганизацияПриИзменении(Форма, Элемент) Экспорт 
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма);
	
КонецПроцедуры

// Вызывается из обработчика события ПриИзменении поля подразделения.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ПолеФормы - Поле подразделения.
//
Процедура ПодразделениеПриИзменении(Форма, Элемент) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область Группировка

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Группировка.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица группировок.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"          , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"  , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть Группировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.Группировка.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Группировка.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица группировок.
//	Отказ - Булево - Признак отказа.
//
Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ГруппировкаПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части Группировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
		Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
			НоваяСтрока = Элемент.ТекущиеДанные;
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
			НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
			
			Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отбор

// Вызывается из обработчика события ПриИзменении табличного поля Отбор формы отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	ЕстьРеквизитПодразделение - Булево - Признак наличия реквизита подразделение.
//
Процедура ОтборыПриИзменении(Форма, Элемент, ЕстьРеквизитПодразделение = Истина) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					
					Если Отчет.Организация <> ЭлементОтбора.ПравоеЗначение Тогда
						
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПолеОрганизация")
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СоответствиеОрганизаций")
							И ТипЗнч(Форма.СоответствиеОрганизаций) = Тип("Структура") Тогда
							
							Для Каждого ЭлементСоответствия Из Форма.СоответствиеОрганизаций Цикл
								Если ЭлементСоответствия.Значение.Организация = ЭлементОтбора.ПравоеЗначение Тогда
									Форма.ПолеОрганизация = ЭлементСоответствия.Ключ;
									Отчет.Организация = ЭлементОтбора.ПравоеЗначение;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							Отчет.Организация = ЭлементОтбора.ПравоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					Отчет.Организация = Неопределено;
				КонецЕсли; 
				
				Отчет.ВключатьОбособленныеПодразделения = Ложь;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьРеквизитПодразделение Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					Отчет.Подразделение = ЭлементОтбора.ПравоеЗначение;
				Иначе
					Отчет.Подразделение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Отбор.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

// Завершает добавление новой строки в табличную часть Отбор формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если Строка(ПараметрыВыбранногоПоля.Поле) = "Организация"
			И Форма.Отчет.Свойство("Организация") Тогда
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "Подразделение"
			И Форма.Отчет.Свойство("Подразделение") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Отбор.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (СтрНайти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

// Завершает изменение строки в табличной части Отбор формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда 
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора значения отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ПолеФормы - Поле со значением отбора, для которого осуществляется открытие формы.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	Значение - Произвольный - Значение отбора.
//	СписокПараметров - Структура - Содержит 
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//	ТипПоля - ОписаниеТипов - Содержит доступные типы для отбора.
//
Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля) Экспорт
	Перем ФормаВыбора;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	ТипЭлемента = ТипЗнч(Значение);
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() = 1 Тогда
		
		Если ?(ТипЭлемента = Неопределено, Истина, не ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		Если ?(ТипЭлемента = Неопределено, Истина, не ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			
			Если ТипПоля.СодержитТип(тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				
				ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
				
				Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
					НовыеПараметры = Новый Массив();
					НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор." + ИмяРеквизитаКонтрагент, СписокПараметров.Контрагент));
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
				Иначе
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не СписокПараметров.Свойство("ФормаВыбора", ФормаВыбора) Тогда
		ФормаВыбора = "ФормаВыбора";
	КонецЕсли;
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Организация);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
				ЗначенияОтборов.Вставить(ИмяРеквизитаОрганизации, СписокПараметров.Организация);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события НачалоВыбора для поля отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ПолеФормы - Поле в колонке табличной части Отбор, для которой вызван обработчик.
//	ДанныеВыбора - СписокЗначений - Список значений для выбора.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	СписокПараметров - Структура - Содержит 
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//
Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	Отчет    = Форма.Отчет;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		
		Поле               = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение           = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
		
		ЭтоКорСубконто = (СтрНайти(Строка(Поле), "КорСубконто") = 1);
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства или вхождения в группу.
		Если    Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
			
			Для Каждого СтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
					И ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					
					ДругоеПоле = СтрокаОтбора.ЛевоеЗначение;
					ДругоеЗначение = Неопределено;
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
						ДругоеЗначение = СтрокаОтбора.ПравоеЗначение;
					ИначеЕсли СтрокаОтбора.ПравоеЗначение.Количество() > 0 Тогда
						ДругоеЗначение = СтрокаОтбора.ПравоеЗначение[0].Значение;
					КонецЕсли;
					
					ДругойТипПоля   = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, ДругоеПоле, "Тип");
					
					Если ЭтоКорСубконто <> (СтрНайти(Строка(ДругоеПоле), "КорСубконто") = 1) Тогда
						// Параметр относится к другому отбору
						Продолжить;
					КонецЕсли;
					
					Если ДругойТипПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
						СписокПараметров.Вставить("Номенклатура", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Склад Тогда
						СписокПараметров.Вставить("Склад", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
						СписокПараметров.Вставить("Контрагент", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
						СписокПараметров.Вставить("ДоговорКонтрагента", ДругоеЗначение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
				Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
				СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбораГруппы");
			Иначе
				СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбора");
			КонецЕсли;
			
			ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоля

// Вызывается из обработчика события ПередНачаломДобавления табличного поля ДополнительныеПоля.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица ДополнительныеПоля.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть ДополнительныеПоля формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля ДополнительныеПоля.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДополнительныеПоляПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части ДополнительныеПоля формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сортировка

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Сортировка.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица Сортировка.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть Сортировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Сортировка.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура СортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "СортировкаПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Порядок");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Порядок"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части Сортировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличноеПолеПоСчетам

// Вызывается из обработчика события ПередНачаломДобавления табличного поля со счетами.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя элемента формы.
//	Элемент - ТаблицаФормы - Таблица формы.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ТабличноеПолеПоСчетамГруппировкаПередНачаломДобавления(ФормаОтчета, ИмяЭлемента, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Отказ = Истина;
	НоваяСтрока = ФормаОтчета.Отчет[ИмяЭлемента].Добавить();
	НоваяСтрока.Использование = Истина;
	
КонецПроцедуры

// Вызывается при изменении счета в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле ввода со счетом, значение которого было изменено.
//
Процедура ТабличноеПолеПоСчетамСчетПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам                 = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Счет) Тогда
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;

			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Если ИмяЭлемента = "ГруппировкаКор" Тогда 

				Если ДанныеСчета.УчетПоНаправлениямДеятельности
					И БухгалтерскиеОтчетыВызовСервера.ИспользоватьНаправленияДеятельности() Тогда
					СтрокаПоСубконто = СтрокаПоСубконто + "+" + "!";
					СтрокаПредставление = СтрокаПредставление + НСтр("ru = 'Направление деятельности'") + ", ";
				КонецЕсли;
			
				Если  ДанныеСчета.УчетПоПодразделениям
					И БухгалтерскиеОтчетыВызовСервера.ИспользоватьПодразделения() Тогда
					СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
					СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеСчета.КоличествоСубконто > 0 Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
					// Если одна номенклатурная группа, то не добавляем Номенклатурные группы в список субконто.
					Если ИспользоватьОднуНоменклатурнуюГруппу 
						И ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы") Тогда
						СтрокаПоСубконто    = СтрокаПоСубконто + "-" + Индекс;
					ИначеЕсли НЕ ВестиУчетПоДоговорам 
						И ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры") Тогда
						СтрокаПоСубконто    = СтрокаПоСубконто + "-" + Индекс;
					Иначе
						СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
						СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
					КонецЕсли;
					
				КонецЦикла;
				СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при изменении флажка "По субсчетам" в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с флажком.
//
Процедура ТабличноеПолеПоСчетамПоСубсчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПоСубсчетам Тогда
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, Ложь);
			КонецЕсли; 
		Иначе
			Если ПустаяСтрока(ТекущиеДанные.Представление) Тогда
				ТекущиеДанные.ПоСубсчетам = Истина;
				Возврат;
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрЗаменить(ТекущиеДанные.ПоСубконто, "-", "+");
			ТекущиеДанные.Представление = "";
			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Если ИмяЭлемента = "ГруппировкаКор" 
				И ДанныеСчета.УчетПоПодразделениям 
				И БухгалтерскиеОтчетыВызовСервера.ИспользоватьПодразделения() Тогда
				СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
				СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
			КонецЕсли;
			
			Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
				СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
				СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
			КонецЦикла;
			СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при начале выбора поля представления в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с представлением.
//	ДанныеВыбора - СписокЗначений - Список доступных значений для выбора.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтрокаПоСубконто = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто;
	Счет = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Счет;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	СписокВидовСубконто = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаПоСубконто) Тогда		
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
			СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Индекс], ДанныеСчета["ВидСубконто" + Индекс + "Наименование"]);
		КонецЦикла;
	Иначе
		КоличествоСубконто = СтрДлина(СтрокаПоСубконто) / 2;
		Для Индекс = 1 По КоличествоСубконто Цикл
			ИндексСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
			Если ИндексСубконто = "0" Тогда
				СписокВидовСубконто.Добавить("Подразделения", "Подразделения", ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			ИначеЕсли ИндексСубконто = "!" Тогда
				СписокВидовСубконто.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности'"), ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			Иначе
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкаПоСубконто", Новый Структура("СписокВидовСубконто", СписокВидовСубконто), Элемент);
	
КонецПроцедуры

// Вызывается при очистке поля представления в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с представлением.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто    = СтрЗаменить(ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто, "+", "-");
	ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Представление = "";
	
КонецПроцедуры

// Вызывается из обработчика события "ОбработкаВыбора" поля представления в строке табличного поля формы отчета.
//
// Параметры:
//	ФормаОтчета - УправляемаяФорма - Форма отчета.
//	ИмяЭлемента - Строка - Имя табличного поля формы.
//	Элемент - ПолеФормы - Поле с представлением.
//	ВыбранноеЗначение - Произвольный - Выбранное значение.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
		СтрокаПоСубконто = "";
		СтрокаПредставление = "";
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаПоСубконто    = СтрокаПоСубконто + "+";
				СтрокаПредставление = СтрокаПредставление + Строка(ЭлементСписка.Значение) + ", ";
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "-";
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл 
					Если ДанныеСчета["ВидСубконто" + Индекс] = ЭлементСписка.Значение Тогда
						СтрокаПоСубконто = СтрокаПоСубконто + Индекс;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ЭлементСписка.Значение = "НаправлениеДеятельности" Тогда
					СтрокаПоСубконто = СтрокаПоСубконто + "!";
				Иначе
					СтрокаПоСубконто = СтрокаПоСубконто + "0";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
		
		ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
		ТекущиеДанные.Представление = СтрокаПредставление;
		
		Если ПустаяСтрока(СтрокаПредставление) Тогда
			ТекущиеДанные.ПоСубсчетам = Истина;
		Иначе
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТекущиеДанные.ПоСубсчетам = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаСтандартныхОтчетов

// Обрабатывает вызов расшифровки стандартного отчета.
// Выполняется поиск возможных действий расшифровки и открывается их выбор.
//
// Параметры:
//  ФормаОтчета	- УправляемаяФорма - Форма отчета для которого была вызвана расшифровка.
//  Элемент	- ЭлементФормы - Элемент формы (Табличный документ) из события которого была вызвана расшифровка, 
//		элемент будет использован для отображения списка действий расшифровки.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровки связывает ячейку, 
//		для которой вызвана расшифровка, с элементом данных расшифровки отчета.
//
Процедура РасшифровкаСтандартногоОтчета(ФормаОтчета, Элемент, ИдентификаторРасшифровки) Экспорт
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);

	ВозможныеРасшифровки = БухгалтерскиеОтчетыВызовСервера.ВозможныеРасшифровки(ИмяОтчета, ФормаОтчета.ДанныеРасшифровки, ИдентификаторРасшифровки);
	
	Если ВозможныеРасшифровки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ВозможныеРасшифровки.Количество() = 1 Тогда
		ОткрытьРасшифровку(ВозможныеРасшифровки[0].Значение, ФормаОтчета.ДанныеРасшифровки, ИдентификаторРасшифровки, ИмяОтчета);
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторРасшифровки",	ИдентификаторРасшифровки);
		ДополнительныеПараметры.Вставить("ДанныеРасшифровки",			ФормаОтчета.ДанныеРасшифровки);
		ДополнительныеПараметры.Вставить("ИмяОтчета",					ИмяОтчета);
		
		Оповещение = Новый ОписаниеОповещения("РасшифровкаСтандартногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, ВозможныеРасшифровки, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывается выбор пункта действий расшифровки.
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений - Выбранный пункт из списка действий расшифровки.
//  ДополнительныеПараметры - Структура - Дополнительные параметры содержат:
//		* ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровки.
//  	* ДанныеРасшифровки - Произвольный - Данные расшифровки.
//		* ИмяОтчета - Строка - Имя отчета из которого была вызвана расшифровка.
//
Процедура РасшифровкаСтандартногоОтчетаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ОткрытьРасшифровку(ВыбранныйЭлемент.Значение,
			ДополнительныеПараметры.ДанныеРасшифровки,
			ДополнительныеПараметры.ИдентификаторРасшифровки,
			ДополнительныеПараметры.ИмяОтчета);
		
	КонецЕсли;
	
КонецПроцедуры 

// Производит анализ данных расшифровки, выдает список доступных действий и открывает форму отчета или объекта.
// Вызывается из события РезультатОбработкаРасшифровки табличного документа отчета.
//
// Параметры:
//  ФормаОтчета - УправляемаяФорма - Формат отчет из которого пришел запрос на расшифровку.
//  Элемент - ЭлементФормы - Элемент формы (Табличный документ) из события которого была вызвана расшифровка, 
//		элемент будет использован для отображения списка действий расшифровки.
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровки из ячейки,
//		для которой вызвана расшифровка.
//  СтандартнаяОбработка - Булево - Флаг стандартной обработки.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	СтандартнаяОбработка = Ложь;
	
	Если БухгалтерскиеОтчетыКлиентСервер.ОтчетПоддерживаетУниверсальныеНастройки(ИдентификаторОбъекта) Тогда
		
		РасшифровкаСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка);
		
	Иначе
		
		ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьПараметрыРасшифровкиОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
		
		Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполняемыеНастройки = Новый Структура;
		ЗаполняемыеНастройки.Вставить("Показатели",      Ложь);
		ЗаполняемыеНастройки.Вставить("Группировка",     Истина);
		ЗаполняемыеНастройки.Вставить("Отбор",           Ложь);
		ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Истина);
		
		Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
			ПоказатьЗначение( , ПараметрыРасшифровки.Значение);
		ИначеЕсли ПараметрыРасшифровки.Свойство("ОткрытьФорму") И ПараметрыРасшифровки.ОткрытьФорму Тогда
			ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы);		
		Иначе
			СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
			Если СписокПунктовМеню.Количество() = 1 Тогда
				ИДРасшифровки = СписокПунктовМеню[0].Значение;
				ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);

				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВидРасшифровки",          1);
				ПараметрыФормы.Вставить("АдресНастроек",           ФормаОтчета.ДанныеРасшифровки);
				ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
				ПараметрыФормы.Вставить("ИДРасшифровки",           ИДРасшифровки);
				ПараметрыФормы.Вставить("ЗаполняемыеНастройки",    ЗаполняемыеНастройки);

				ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
			ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
				ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
				Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Обрабатывается выбор из списка действий расшифровки,
// производится открытие формы отчета или объекта.
//
// Параметры:
//  Результат - ЭлементСпискаЗначений - Выбранный пункт действий расшифровки.
//  ДополнительныеПараметры	- Структура - Дополнительные параметры, содержат Форму расшифровываемого отчета ФормаОтчета
// 		и структуру ЗаполняемыеНастройки в которой указано какие настройки нужно заполнить по умолчанию.
//
Процедура ВыбратьИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Строка") Тогда
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(Результат.Значение);

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРасшифровки",          1);
			ПараметрыФормы.Вставить("АдресНастроек",           ДополнительныеПараметры.ФормаОтчета.ДанныеРасшифровки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("ИДРасшифровки",           Результат.Значение);
			ПараметрыФормы.Вставить("ЗаполняемыеНастройки",    ДополнительныеПараметры.ЗаполняемыеНастройки);

			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		Иначе
			ПоказатьЗначение( , Результат.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#Область ВспомогательныеПроцедурыИФункции

// Возвращает интервал начала формирования отчета после открытия формы.
//
// Возвращаемое значение:
//	Число - Интервал в секундах.
//
Функция ИнтервалЗапускаФормированияОтчетаПриОткрытии() Экспорт
	
	Возврат 0.1;
	
КонецФункции
//++ НЕ УТ

// Добавляет поля ресурсов в список запрещенных для выбора полей отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	СписокПолей - Массив - Массив имен полей, которые необходимо добавить к запрещенным.
//
Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей) Экспорт
	
	Попытка
		НаборПоказателей = Форма.НаборПоказателей;
	Исключение
		НаборПоказателей = Неопределено;
	КонецПопытки;
	
	Если НаборПоказателей = Неопределено Тогда
		Для Каждого ДоступноеПоле Из Форма.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяПоказателя Из Форма.НаборПоказателей Цикл
			Если Форма.Отчет["Показатель" + ИмяПоказателя] Тогда 
				ВидОстатка = "";
				Если Форма.Отчет.Свойство("РазвернутоеСальдо") Тогда
					Если ТипЗнч(Форма.Отчет.РазвернутоеСальдо) = Тип("Булево") Тогда
						Если Форма.Отчет.РазвернутоеСальдо Тогда
							ВидОстатка = "";
						Иначе
							ВидОстатка = "Развернутый";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокКт");
			Иначе
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

//-- НЕ УТ

// Вычисляет суммы выделенных ячеек табличного документа.
//
// Параметры:
//	ПолеСумма - Число - Сумма ячеек.
//	Результат - ТабличныйДокумент - Табличный документ с ячейками.
//	КэшВыделеннойОбласти - Структура - Содержит ранее рассчитанные значения ячеек.
//	НеобходимоВычислятьНаСервере - Булево - Признак того, что необходим вызов сервера.
//
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено.
			ИЛИ КэшВыделеннойОбласти.Свойство("T") Тогда // Выделен весь табличный документ (Ctrl+A).
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте.
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь)
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов.
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Вычислить("Число(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)))");
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше.
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере.
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// Не нашли нужную область в кэше, поэтому переинициализируем кэш.
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура;
				СтруктураАдресВыделеннойОбласти.Вставить("Верх",  ВыделеннаяОбласть.Верх);
				СтруктураАдресВыделеннойОбласти.Вставить("Низ",   ВыделеннаяОбласть.Низ);
				СтруктураАдресВыделеннойОбласти.Вставить("Лево",  ВыделеннаяОбласть.Лево);
				СтруктураАдресВыделеннойОбласти.Вставить("Право", ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//++ НЕ УТ

#Область РасшифровкаСтандартныхОтчетов

// Проверяет является ли выбранный пункт меню отчетом.
//
// Параметры:
//  Отчет	 - Структура, Объект, Неопределено	 - Значение, выбранное из списка действий расшифровки.
// 
// Возвращаемое значение:
//   Булево - Истина, если это пункт расшифровки отчет, Ложь - в противном случае.
//
Функция ЭтоОтчет(Отчет)
	
	Возврат ТипЗнч(Отчет) = Тип("Структура") И Отчет.Свойство("ИмяОтчета");
	
КонецФункции

// Открывает выбранный пункт расшифровки.
// Если выбран объект открывается форма объекта, если выбран отчет, он будет открыт в качестве расшифровки.
//
// Параметры:
//  ЗначениеРасшифровки		 - Структура, Объект						 - Выбранный пункт расшифровки.
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки расшифровываемого отчета.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных	 - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
//  ИмяИсходногоОтчета		 - Строка									 - Имя отчета из которого была вызвана расшифровка.
//
Процедура ОткрытьРасшифровку(ЗначениеРасшифровки, ДанныеРасшифровки, ИдентификаторРасшифровки, ИмяИсходногоОтчета)
	
	Если ЭтоОтчет(ЗначениеРасшифровки) Тогда
		
		ПараметрыФормы = БухгалтерскиеОтчетыКлиентСервер.НовыйПараметрыФормыСтандартногоОтчета();
		
		ПараметрыФормы.ОткрытьРасшифровку			 = Истина;
		ПараметрыФормы.АдресРасшифровки				 = ДанныеРасшифровки;
		ПараметрыФормы.ИдентификаторРасшифровки		 = ИдентификаторРасшифровки;
		ПараметрыФормы.ИмяОтчета					 = ЗначениеРасшифровки.ИмяОтчета;
		ПараметрыФормы.ИмяИсходногоОтчета			 = ИмяИсходногоОтчета;
		ПараметрыФормы.РеквизитыПравилРасшифровки	 = ЗначениеРасшифровки.Реквизиты;
		
		ОткрытьФорму("Отчет." + ЗначениеРасшифровки.ИмяОтчета + ".Форма", ПараметрыФормы, , Истина);
		
	Иначе
		
		ПоказатьЗначение( , ЗначениеРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет полный путь к форме отчета.
//
// Параметры:
//  ИДРасшифровки	 - Строка	 - Имя отчета, путь к форме которого нужно получить.
// 
// Возвращаемое значение:
//  Строка - Полный путь к форме указанного отчета.
//
Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Если ИДРасшифровки = "ОборотыСчетаПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчета";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#КонецОбласти
