
#Область ПрограммныйИнтерфейс

// Возвращает запрос на получение учетных остатков.
//
// Параметры:
//  ДатаОстатков - Дата - дата получения остатков,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - торговый объект для получения остатков,
//  КорректироватьОстаткиНемаркируемойПродукции - Булево - признак корректировки остатков немаркируемой продукции.
//
// Возвращаемое значение:
//   Запрос - запрос учетных остатков.
//
Функция ЗапросУчетныхОстатков(ДатаОстатков, Организация, ТорговыйОбъект, КорректироватьОстаткиНемаркируемойПродукции) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("КорректироватьОстаткиНемаркируемойПродукции", КорректироватьОстаткиНемаркируемойПродукции);
	
	УсловиеПоДате = ?(ЗначениеЗаполнено(ДатаОстатков), "&ДатаОстатков", "");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))) КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПродаетсяВРозлив,
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции, ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка))) КАК ТипПродукции,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладахОстатки.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
	|			ТОГДА ТоварыНаСкладахОстатки.ВНаличииОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокСкладБазЕд,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладахОстатки.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
	|			ТОГДА 0
	|		ИНАЧЕ ТоварыНаСкладахОстатки.ВНаличииОстаток
	|	КОНЕЦ КАК ОстатокТорговыйЗалБазЕд
	|ПОМЕСТИТЬ УчетныеОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			" + УсловиеПоДате + ",
	|			Склад = &ТорговыйОбъект
	|				И Номенклатура.АлкогольнаяПродукция
	|				И ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|						ТОГДА &КорректироватьОстаткиНемаркируемойПродукции
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура
	|			И ТоварыНаСкладахОстатки.Характеристика = КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
	|			И (КлассификаторАлкогольнойПродукцииЕГАИС.Сопоставлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладахОстатки.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
	|			ТОГДА ТоварыНаСкладахОстатки.ВНаличииОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладахОстатки.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
	|			ТОГДА 0
	|		ИНАЧЕ ТоварыНаСкладахОстатки.ВНаличииОстаток
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеОстатки.Номенклатура КАК Номенклатура,
	|	УчетныеОстатки.Характеристика,
	|	УчетныеОстатки.ПродаетсяВРозлив,
	|	УчетныеОстатки.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	УчетныеОстатки.АлкогольнаяПродукция,
	|	УчетныеОстатки.ТипПродукции,
	|	УчетныеОстатки.ОстатокСкладБазЕд,
	|	УчетныеОстатки.ОстатокСкладБазЕд * ВЫБОР
	|		КОГДА УчетныеОстатки.ПродаетсяВРозлив
	|			ТОГДА УчетныеОстатки.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОстатокСклад,
	|	УчетныеОстатки.ОстатокТорговыйЗалБазЕд,
	|	УчетныеОстатки.ОстатокТорговыйЗалБазЕд * ВЫБОР
	|		КОГДА УчетныеОстатки.ПродаетсяВРозлив
	|			ТОГДА УчетныеОстатки.Номенклатура.ОбъемДАЛ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОстатокТорговыйЗал
	|ИЗ
	|	УчетныеОстатки КАК УчетныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет в табличной части коэффициент пересчета в декалитры для базовой единицы измерения номенклатуры.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть, в которой нужно обновить коэффициент.
//
Процедура ЗаполнитьКоэффициентПересчетаВДАЛ(ТабличнаяЧасть) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТабличнаяЧасть.ОбъемДАЛ КАК КоэффициентПересчета,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Номенклатура.ОбъемДАЛ КАК КоэффициентПересчета,
	|	ИсходнаяТаблица.НомерСтроки
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.Номенклатура.ОбъемДАЛ <> ИсходнаяТаблица.КоэффициентПересчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1].ОбъемДАЛ = Выборка.КоэффициентПересчета;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно заполнить пустые значения из таблицы соответствий.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений - таблица для заполнения с колонками:
//      * Номенклатура          - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//      * Характеристика        - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику,
//      * Упаковка              - ОпределяемыйТип.Упаковка - ссылка на упаковку,
//      * АлкогольнаяПродукция  - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - ссылка на алкогольную продукцию,
//      * ИдентификаторУпаковки - Строка - наименование упаковки поставщика.
//
Процедура ЗаполнитьНесопоставленнуюПродукцию(ТаблицаСопоставления) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаСопоставления);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяУпаковка", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("Упаковка"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСопоставления.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаСопоставления.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция,
	|	ТаблицаСопоставления.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВЫРАЗИТЬ(ТаблицаСопоставления.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаСопоставления.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаСопоставления.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаСопоставления
	|ИЗ
	|	&ТаблицаСопоставления КАК ТаблицаСопоставления
	|ГДЕ
	|	(ТаблицаСопоставления.Номенклатура = &ПустаяНоменклатура
	|			ИЛИ ТаблицаСопоставления.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСопоставления.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Номенклатура
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Сопоставлено
	|			ТОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Номенклатура
	|		ИНАЧЕ &ПустаяНоменклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Характеристика
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Сопоставлено
	|			ТОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаСопоставления.Упаковка <> &ПустаяУпаковка
	|				ТОГДА ТаблицаСопоставления.Упаковка
	|			ИНАЧЕ ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка, &ПустаяУпаковка)
	|		КОНЕЦ) КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаСопоставления.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукция
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаСопоставления.Номенклатура = КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура
	|			И ТаблицаСопоставления.Характеристика = КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
	|			И (ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура)
	|			И (КлассификаторАлкогольнойПродукцииЕГАИС.Сопоставлено)
	|			И (ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
	|		ПО ТаблицаСопоставления.Номенклатура = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Номенклатура
	|			И ТаблицаСопоставления.Характеристика = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Характеристика
	|			И (КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Сопоставлено)
	|			И ТаблицаСопоставления.ИдентификаторУпаковки = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.ИдентификаторУпаковки
	|ГДЕ
	|	(НЕ КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL
	|			ИЛИ ТаблицаСопоставления.АлкогольнаяПродукция.Номенклатура <> &ПустаяНоменклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСопоставления.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Номенклатура
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Сопоставлено
	|			ТОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Номенклатура
	|		ИНАЧЕ &ПустаяНоменклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Характеристика
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Сопоставлено
	|			ТОГДА ТаблицаСопоставления.АлкогольнаяПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаСопоставления.АлкогольнаяПродукция
	|	КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаСопоставления.Найти(Выборка.НомерСтроки, "НомерСтроки");
		СтрокаТаблицы.Номенклатура = Выборка.Номенклатура;
		СтрокаТаблицы.Характеристика = Выборка.Характеристика;
		СтрокаТаблицы.Упаковка = Выборка.Упаковка;
		СтрокаТаблицы.АлкогольнаяПродукция = Выборка.АлкогольнаяПродукция;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо определить значения переменных ЭтоСклад и ЭтоТорговыйЗал в зависимости от типа торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на собственный торговый объект,
//  ЭтоСклад - Булево - признак того, что торговый объект является складским помещением. Выходной параметр,
//  ЭтоТорговыйЗал - Булево - признак того, что торговый объект является торговым залом. Выходной параметр.
//
Процедура ПриОпределенииТипаТорговогоОбъекта(ТорговыйОбъект, ЭтоСклад, ЭтоТорговыйЗал) Экспорт
	
	//++ НЕ ЕГАИС
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "ТипСклада");
	
	ЭтоСклад = ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	ЭтоТорговыйЗал = ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Проверяет наличие документа инвентаризации по складу.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на собственный торговый объект,
//  ТекстОшибкиСклад - Строка, ФорматированнаяСтрока - текст ошибки проверки инвентаризации на складе. Выходной параметр,
//  ТекстОшибкиТорговыйЗал - Строка, ФорматированнаяСтрока - текст ошибки проверки инвентаризации в торговом зале. Выходной параметр,
//  ОтчетПоРасхождениямСклад - Булево - если Истина, будет доступна ссылка на формирование отчета по излишкам/недостачам. Выходной параметр,
//  ОтчетПоРасхождениямТорговыйЗал - Булево - если Истина, будет доступна ссылка на формирование отчета по излишкам/недостачам. Выходной параметр.
//
Процедура ПроверитьНаличиеИнвентаризации(Организация, ТорговыйОбъект, ТекстОшибкиСклад, ТекстОшибкиТорговыйЗал, ОтчетПоРасхождениямСклад, ОтчетПоРасхождениямТорговыйЗал) Экспорт
	
	//++ НЕ ЕГАИС
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "ТипСклада");
	
	Если СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(ТорговыйОбъект) Тогда
		ЕстьРасхождения = Обработки.ПомощникОформленияСкладскихАктов.ПолучитьСписокТоваровКОформлениюСкладскихАктов(ТорговыйОбъект).Количество() > 0;
		
		ОтчетПоРасхождениямСклад = ЕстьРасхождения И ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
		ОтчетПоРасхождениямТорговыйЗал = ЕстьРасхождения И ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	Иначе
		ОтчетПоРасхождениямСклад = Ложь;
		ОтчетПоРасхождениямТорговыйЗал = Ложь;
	КонецЕсли;
	
	МассивСтроки = Новый Массив;
	МассивСтроки.Добавить(?(ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад, НСтр("ru='на складе'"), НСтр("ru='в торговом зале'")));
	МассивСтроки.Добавить(" ");
	МассивСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(ТорговыйОбъект),,,, ПолучитьНавигационнуюСсылку(ТорговыйОбъект)));
	
	ПредставлениеСклада = Новый ФорматированнаяСтрока(МассивСтроки);
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", ТорговыйОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Дата КАК Дата,
	|	ПересчетТоваров.Статус КАК Статус
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Проведен
	|	И ПересчетТоваров.Склад = &Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		МассивСтроки = Новый Массив;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, "ОткрытьСписокИнвентаризаций"));
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(ПредставлениеСклада);
		МассивСтроки.Добавить(" ");
		МассивСтроки.Добавить(НСтр("ru='не проводилась.'"));
		
		ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НачалоДня(Выборка.Дата) < НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)) Тогда
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, "ОткрытьСписокИнвентаризаций"));
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(ПредставлениеСклада);
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(НСтр("ru='проводилась больше месяца назад.'"));
			МассивСтроки.Добавить(Символы.ПС);
			МассивСтроки.Добавить(НСтр("ru='Рекомендуется провести повторную инвентаризацию.'"));
			
			ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
			
		ИначеЕсли Выборка.Статус <> Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инвентаризация товаров'"),,,, "ОткрытьСписокИнвентаризаций"));
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(ПредставлениеСклада);
			МассивСтроки.Добавить(" ");
			МассивСтроки.Добавить(НСтр("ru='не завершена.'"));
			МассивСтроки.Добавить(Символы.ПС);
			МассивСтроки.Добавить(НСтр("ru='Перед корректировкой остатков по регистрам ЕГАИС рекомендуется завершить инвентаризацию.'"));
			
			ТекстОшибки = Новый ФорматированнаяСтрока(МассивСтроки);
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Если ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
			ТекстОшибкиСклад = ТекстОшибки;
		Иначе
			ТекстОшибкиТорговыйЗал = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается после заполнения таблицы значений неподтвержденными документами.
//
// Параметры:
//  НеподтвержденныеДокументы - ТаблицаЗначений - таблица с найденными неподтвержденными документами,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - собственная организация по классификатору.
//
Процедура ПриПроверкеНеподтвержденныхДокументов(НеподтвержденныеДокументы, ОрганизацияЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящая.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваровУслуг.ТоварноТранспортнаяНакладнаяЕГАИС
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СписокСтатусов)
	|	И ПоступлениеТоваровУслуг.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = НеподтвержденныеДокументы.Найти(Выборка.ДокументСсылка, "ДокументСсылка");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = НеподтвержденныеДокументы.Добавить();
			СтрокаТаблицы.ДокументСсылка = Выборка.ДокументСсылка;
			СтрокаТаблицы.ТипЗначения = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается после заполнения таблицы значений документами, требующих оформления.
//
// Параметры:
//  НеоформленныеДокументы - ТаблицаЗначений - таблица с найденными документами,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - собственная организация по классификатору.
//
Процедура ПриПроверкеНеоформленныхДокументов(НеоформленныеДокументы, ОрганизацияЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящая.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ТТНВходящая.Ссылка = ПоступлениеТоваровУслуг.ТоварноТранспортнаяНакладнаяЕГАИС
	|			И (ПоступлениеТоваровУслуг.Проведен)
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И ТТНВходящая.СтатусОбработки В(&СписокСтатусов)
	|	И ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = НеоформленныеДокументы.Найти(Выборка.ДокументСсылка, "ДокументСсылка");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = НеоформленныеДокументы.Добавить();
			СтрокаТаблицы.ДокументСсылка = Выборка.ДокументСсылка;
			СтрокаТаблицы.ТипЗначения = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти