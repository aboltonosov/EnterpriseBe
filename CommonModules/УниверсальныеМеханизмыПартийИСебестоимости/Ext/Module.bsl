///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры, используемые механизмами
//	- партионного учета версии 2.2
//	- расчета себестоимости
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

// Перед началом расчета заполняет все общие параметры, используемые алгоритма расчета.
//
Процедура ИнициализироватьОбщиеПараметрыРасчета(ПараметрыИнициализации, ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт
	
	Если ПараметрыРасчета <> Неопределено Тогда
		Возврат; // ПараметрыРасчета уже инициализированы
	КонецЕсли;
	
	Дата 			  = ПараметрыИнициализации.Дата;
	МассивОрганизаций = ?(ЗначениеЗаполнено(ПараметрыИнициализации.МассивОрганизаций),
		ОбщегоНазначенияУТКлиентСервер.Массив(ПараметрыИнициализации.МассивОрганизаций),
		ВсеДоступныеОрганизации());
		
	СокращеннаяИнициализация = НЕ ПараметрыИнициализации.Свойство("ЗапущенРасчетПартий");
	
	Если НЕ СокращеннаяИнициализация Тогда
		ЗапущенРасчетПартий 					 = ПараметрыИнициализации.ЗапущенРасчетПартий;
		ТолькоПредварительныйРасчетСебестоимости = ПараметрыИнициализации.ТолькоПредварительныйРасчетСебестоимости;
		ЗапущеноРегламентнымЗаданием 			 = ПараметрыИнициализации.ЗапущеноРегламентнымЗаданием;
	Иначе
		// Вызов извне механизма расчета с параметрами по умолчанию.
		ЗапущенРасчетПартий 					 = Истина;
		ТолькоПредварительныйРасчетСебестоимости = Ложь;
		ЗапущеноРегламентнымЗаданием 			 = Ложь;
	КонецЕсли;
	
	// Создадим контейнер всех общих параметров, используемых механизмами расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОписаниеПараметров",				Новый Соответствие); // текстовое описание параметров расчета
	
	// Параметры старта и текущего состояния расчета
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", ЗапущенРасчетПартий); // запущен полный расчет (партии+себестоимость) или только расчет себестоимости?
	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, 	 НЕ ЗапущенРасчетПартий); // заполняет свойство ИдетРасчетПартий
	
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВСебестоимости", Ложь); // управляет логикой заполнения реквизита "РасчетПартий"
	ПараметрыРасчета.Вставить("ЗаполненыПартииВСебестоимости",   НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов себестоимости
	
	ПараметрыРасчета.Вставить("МестоВызоваРасчета",
		?(ЗначениеЗаполнено(ПараметрыОтладки) И ПараметрыОтладки.Свойство("МестоВызоваРасчета"),
			ПараметрыОтладки.МестоВызоваРасчета, НСтр("ru='Не указано'"))); // откуда вызвали расчет (для протокола)
	
	// Создаем описание данных для протоколирования расчета
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ИнициализироватьОбщиеПараметрыРасчета");
	
	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц",	   Новый МенеджерВременныхТаблиц);
	
	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", 		 		   НачалоМесяца(Дата));
	РасчетныйПериод.Вставить("КонецПериода",  		 		   Дата);
	РасчетныйПериод.Вставить("КонецПредыдущегоПериода", 	   РасчетныйПериод.НачалоПериода - 1);
	РасчетныйПериод.Вставить("НачалоСледующегоПериода", 	   КонецМесяца(Дата) + 1);
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", 		   Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода",  		   Новый Граница(РасчетныйПериод.КонецПериода, ВидГраницы.Включая));
	РасчетныйПериод.Вставить("ГраницаКонецПредыдущегоПериода", Новый Граница(РасчетныйПериод.КонецПредыдущегоПериода, ВидГраницы.Включая));
	
	ПараметрыРасчета.Вставить("РасчетныйПериод", 			   РасчетныйПериод);
	
	// Статистика изменения документов за расчетный период (причина пересчета периода).
	Если ПараметрыИнициализации.Свойство("ИзмененоДокументов") Тогда
		// Штатный вызов из механизма партионного учета версии 2.2.
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   ПараметрыИнициализации.ИзмененоДокументов);
	Иначе
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   Неопределено);
	КонецЕсли;
	
	// Вариант расчета
	Если ЗапущенРасчетПартий Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость);
	ИначеЕсли ЗапущеноРегламентнымЗаданием Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимостьРегламентноеЗадание);
	ИначеЕсли ТолькоПредварительныйРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимость);
	Иначе
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	КонецЕсли;
	
	// Прочие служебные свойства
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗ", 	 		   0); // общее количество выполненных фоновых заданий записи
	ПараметрыРасчета.Вставить("СтрокаСоединенияИБ",	 		   СтрокаСоединенияИнформационнойБазы());
	
	// Параметры расчета себестоимости
	ПараметрыРасчета.Вставить("РегламентноеЗадание",		   ЗапущеноРегламентнымЗаданием);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет",		   ТолькоПредварительныйРасчетСебестоимости);
	
	// Параметры решения СЛУ
	РешениеСЛУ = Новый Структура;
	РешениеСЛУ.Вставить("ТребуемаяТочность",                   0.000001); // точность решения СЛУ
	РешениеСЛУ.Вставить("МаксимальноеКоличествоИтераций",      200); // циклов решения СЛУ
	РешениеСЛУ.Вставить("ЗначениеПогрешностиСтоимость",        12); // какую сумму считать ошибкой округления
	РешениеСЛУ.Вставить("ЗначениеПогрешностиКоличество",       0.05); // какое количество считать ошибкой округления
	
	ПараметрыРасчета.Вставить("РешениеСЛУ",                    РешениеСЛУ);
	
	// ... описание параметров
	ПараметрыРасчета.ОписаниеПараметров.Вставить("РешениеСЛУ",
		НСтр("ru='Параметры, влияющие на результат решения системы линейных уравнений, с помощью которой выполняется расчет стоимости номенклатуры.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("РешениеСЛУ.ТребуемаяТочность",
		НСтр("ru='Точность решения системы линейных уравнений - максимальное значение разницы решений, полученных на итерациях n и (n+1).
		|Чем меньше данное значение, тем более точный получается результат решения СЛУ (стоимость номенклатуры),
		|но тем большее количество итераций решения СЛУ требуется, чтобы достигнуть этой точности.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("РешениеСЛУ.МаксимальноеКоличествоИтераций",
		НСтр("ru='Максимальное количество итераций, допустимое для поиска решения системы линейных уравнений.
		|Необходимо для того, чтобы принудительно закончить поиск подходящего решения СЛУ в случае, если не удается достичь требуемой точности решения СЛУ.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("РешениеСЛУ.ЗначениеПогрешностиСтоимость",
		НСтр("ru='Максимальное значение суммы, которую можно считать ошибкой округления, полученной в результате решения СЛУ.
		|Т.к. СЛУ не всегда решается с ""нулевой"" точностью, то при расчете накапливаются ошибки округления, которые, в свою очередь,
		|приводят к тому, что в регистрах могут появиться остатки номенклатуры с нулевым количеством, но ненулевой стоимостью
		|(так называемые ""зависшие копейки""). Эти ""зависшие копейки"" по окончании расчета просто списываются из регистра.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("РешениеСЛУ.ЗначениеПогрешностиКоличество",
		НСтр("ru='Максимальное значение количественного показателя, которое можно считать ошибкой округления, полученной в результате решения СЛУ.
		|Т.к. СЛУ не всегда решается с ""нулевой"" точностью, то при расчете накапливаются ошибки округления, которые, в свою очередь,
		|приводят к тому, что в регистрах могут появиться остатки (так называемые ""зависшие копейки"").
		|Эти ""зависшие копейки"" по окончании расчета просто списываются из регистра.'"));
	
	// Ограничения на размер различных структур данных
	ОграниченияВыборки = Новый Структура;
	ОграниченияВыборки.Вставить("КоличествоСтрокВТЗ", 		   100000); // макс. количество строк в таблице значений
	ОграниченияВыборки.Вставить("КоличествоЗаписейВНЗ",		   10000);  // макс. количество строк в наборе записей; 0 - запись данных в ИБ не выполняется
	ОграниченияВыборки.Вставить("ПорцияРасчетаПартий",		   10000);  // размер выборки узлов для расчета
	
	ПараметрыРасчета.Вставить("ОграниченияВыборки", 		   ОграниченияВыборки);
	
	// ... описание параметров
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияВыборки",
		НСтр("ru='Параметры, ограничивающие максимальный размер различных типов данных, используемых механизм расчета.
		|Необходимы для предотвращения ошибок нехватки памяти.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияВыборки.КоличествоСтрокВТЗ",
		НСтр("ru='Максимальное количество строк, которое может быть помещено в таблицу значений.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияВыборки.КоличествоЗаписейВНЗ",
		НСтр("ru='Максимальное количество строк, которое может быть помещено в набор записей регистра.
		|Если указать значение 0, то запись движений в ИБ после расчета выполняться не будет.
		|Не следует использовать эту возможность при расчете партий в первом месяце после перехода на партионный учет версии 2.2,
		|т.к. при этом в ИБ не будут записаны начальные остатки в разрезе партий и последующий расчет будет некорректным.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияВыборки.ПорцияРасчетаПартий",
		НСтр("ru='Размер порции выборки данных в механизме распределения партий.'"));
	
	// Параметры фоновых заданий (для многопоточной записи)
	// Стабильность многопоточной записи на разном железе зависит от сочетания нескольких факторов:
	// - количества активных фоновых заданий (чем больше заданий, тем больше надо памяти для сервера Предприятия)
	// - количества движений, записываемых одним заданием (чем больше движений - тем больше памяти надо этому заданию)
	// - одновременности выполнения записи одного регистра разными заданиями (чем больше заданий пишет один регистр,
	//		тем больше вероятность возникновения ошибок, например, "Lock request time out period exceeded")
	ОграниченияФЗ = Новый Структура;
	ОграниченияФЗ.Вставить("КоличествоДвиженийВФЗ",	   	   	   100000); // количество движений регистра, записываемое одним фоновым заданием
	ОграниченияФЗ.Вставить("МаксимальноеКоличествоФЗ",
		?(ПараметрыРасчета.РегламентноеЗадание
			ИЛИ ОбщегоНазначения.ИнформационнаяБазаФайловая(), 1, 5)); // максимальное количество одновременно выполняемых заданий записи
	ОграниченияФЗ.Вставить("ПоследовательнаяЗаписьРегистра", Истина); // надо ли порции записи ожидать окончания записи предыдущей порции этого регистра
	
	ТаблицаЗаданийЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ПредыдущееЗадание");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИмяРегистра");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоДвижений");
	ОграниченияФЗ.Вставить("ТаблицаЗаданийЗаписи", 		   	   ТаблицаЗаданийЗаписи); // описание каждого запущенного задания
	ОграниченияФЗ.Вставить("СтекЗаданийЗаписи", 		       Новый Массив); // стек вызовов фоновых заданий для записи движений
	
	ПараметрыРасчета.Вставить("ОграниченияФЗ", 		   		   ОграниченияФЗ);
	
	// ... описание параметров
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияФЗ",
		НСтр("ru='Параметры, накладывающие ограничения на фоновые задания, используемые для параллельной записи сформированных движений.
		|Необходимы для предотвращения ошибок нехватки памяти.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияФЗ.КоличествоДвиженийВФЗ",
		НСтр("ru='Размер порций, на которые разбиваются сформированные движения.
		|Каждая порция движений передается в отдельное фоновое задание для ее записи в ИБ, при этом соблюдается следующее условие:
		|все движения, принадлежащие регистратору Х, обязательно должны быть помещены в одну порцию
		|(в противном случае одно фоновое задание затрет движения этого регистратора, записанные другим фоновым заданием).
		|При этом, если количество движений какого-то регистратора Х превышает значение этого параметра, то движения этого регистратора Х
		|будут помещены в отдельную порцию, размер которой будет превышать значение этого параметра.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияФЗ.МаксимальноеКоличествоФЗ",
		НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий записи движений.
		|При достижении этого количества фоновых заданий новое задания не создается до тех пор, пока не будет завершено одно из уже запущенных заданий.
		|Если значение параметра равно 1 (по умолчанию - в файловых ИБ или при расчете предварительной себестоимости),
		|то для записи сформированных движений фоновые задания не используются - запись всех движений выполняется последовательно.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ОграниченияФЗ.ПоследовательнаяЗаписьРегистра",
		НСтр("ru='Влияет на параллельность записи движений в фоновых заданиях в пределах одного регистра.
		|- если параметр включен, то задание №n записи очередной порции движений регистра Х не начнет выполнение до тех пор,
		|пока не будет завершено задание №(n-1) для этого же регистра Х.
		|В то же время могут выполняться задания записи регистра Y - они никак не будут влиять на выполнение заданий записи регистра Х.
		|- если параметр выключен, то задания записи регистра Х не будут ожидать завершения других заданий по этому же регистру.
		|Это позволяет вести параллельную запись движений ""в пределах"" одного регистра, что может уменьшить общее время записи движений
		|Но в то же время, в зависимости от параметров системы, это может привести к возникновению конфликтов блокировок транзакций записи.
		|Если возникнет хоть одна такая ошибка, то весь расчет будет считаться завершенным аварийно и потребуется его повторный запуск.'"));
	
	// Параметры управления итогами регистров
	УправлениеИтогами = Новый Структура;
	УправлениеИтогами.Вставить("ОтключатьИтогиПередЗаписью", Истина); // выполнять запись движений с отключенными текущими итогами по регистру остатков
	
	ПараметрыРасчета.Вставить("УправлениеИтогами", УправлениеИтогами);
	
	// ... описание параметров
	ПараметрыРасчета.ОписаниеПараметров.Вставить("УправлениеИтогами",
		НСтр("ru='Параметры, влияющие на непосредственную запись в ИБ движений по регистрам, сформированным механизмом расчета.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("УправлениеИтогами.ОтключатьИтогиПередЗаписью",
		НСтр("ru='Влияет на управление текущими итогами регистра.
		|Если параметр установлен, то
		|- перед началом расчета запоминается состояние использования текущих итогов по всем обслуживаемым регистрам,
		|- при записи движений по каждому регистру его текущие итоги отключаются,
		|- при окончании записи всех движений состояние использования текущих итогов возвращается к первоначальному.
		|Т.о. данный параметр позволяет ускорить запись движений, но затем тратит некоторое время на включение текущих итогов.'"));
	
	// Значения анализируемых функциональных опций и констант (они также устанавливаются в качестве одноименных параметров запросов)
	ПараметрыРасчета.Вставить("ФО", Новый Структура);
	ИменаФО =
		"ИспользоватьПартионныйУчет,
		|ПартионныйУчетВерсии22,
		|ДатаПереходаНаПартионныйУчетВерсии22,
		|ИспользоватьУправлениеПроизводством2_2,
		|
		//++ НЕ УТ
		|АналитическийУчетПоГруппамПродукции,
		|ВидЦеныПлановойСтоимостиМатериаловРабот,
		//-- НЕ УТ
		|ИспользоватьУправленческуюОрганизацию,
		|ИспользоватьУчетПрочихДоходовРасходов,
		//++ НЕ УТ
		|ИспользоватьМеждународныйФинансовыйУчет,
		//-- НЕ УТ
		|УчитыватьСебестоимостьТоваровПоВидамЗапасов,
		|ФормироватьВидыЗапасовПоГруппамФинансовогоУчета,
		|ФормироватьФинансовыйРезультат,
		|ФормироватьУправленческийБаланс";
	
	Для Каждого КлючИЗначение Из Новый Структура(ИменаФО) Цикл
		
		Если Метаданные.ФункциональныеОпции.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ));
		ИначеЕсли Метаданные.Константы.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, Константы[КлючИЗначение.Ключ].Получить());
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдена функциональная опция или константа ""%1""'"),
				КлючИЗначение.Ключ);
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасчета.ФО.ДатаПереходаНаПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
	
	// ... описание параметров
	ПараметрыРасчета.ОписаниеПараметров.Вставить("ФО",
		НСтр("ru='Кэш значений функциональных опций ИБ, оказывающих влияние на алгоритм расчета.
		|Имена параметров этого кэша совпадают с именами функциональных опций конфигурации.
		|Рекомендуется изменять не эти кэшированные значения, а значения самих функциональных опций ИБ,
		|т.к. механизм расчета в некоторых случаях вызывает ""внешние"" по отношению к нему механизмы конфигурации,
		|в которых значения функциональных опций получаются напрямую из ИБ а не из этого кэша.'"));
	
	// Признак использования в рассчитываемом периоде партионного учета версии 2.2
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
		
	// Признак расчета первого месяца в партионном учете версии 2.2
	ПараметрыРасчета.Вставить("ФормироватьНачальныеОстаткиПартий22",
		ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.РасчетныйПериод.НачалоПериода = НачалоМесяца(ПараметрыРасчета.ФО.ДатаПереходаНаПартионныйУчетВерсии22));
			
	// Типы записей регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ТипыЗаписейПервичныхПартий",   ТипыЗаписейПервичныхПартий());
	ПараметрыРасчета.Вставить("НепересчитываемыеТипыЗаписей", НепересчитываемыеТипыЗаписей());
	
	// Правила заполнения поля ТипЗаписи регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ПравилаЗаполненияПоляТипЗаписи",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи());
	
	// Формирование начальных остатков партий в регистре себестоимости товаров
	ПараметрыРасчета.Вставить("НачальныеОстатки", Новый Структура);
	ПараметрыРасчета.НачальныеОстатки.Вставить("ВзятьОстаткиСебестоимостиИзРегистровПартий", Ложь);
	ПараметрыРасчета.НачальныеОстатки.Вставить("РаспределятьРасхожденияВСуммахПартийИСебестоимости", Истина); // имеет смысле если предыдущий параметр = Ложь
	
	ПараметрыРасчета.ОписаниеПараметров.Вставить("НачальныеОстатки",
		НСтр("ru='Параметры, влияющие на формирование начальных остатков партий в регистре ""Себестоимость товаров"".'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("НачальныеОстатки.ВзятьОстаткиСебестоимостиИзРегистровПартий",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 остатки регистра себестоимости подгоняются под остатки регистров партий:
		|- сначала выполняется сторнирование всех остатков себестоимости на начало этого месяца,
		|- потом выполняется приход партий по данным партионных регистров.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("НачальныеОстатки.РаспределятьРасхожденияВСуммахПартийИСебестоимости",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 разницы в суммах остатков себестоимости и остатков партий
		|распределяются на остатки партий пропорционально количеству в партии.'"));
	
	// Отладочные свойства
	ИнициализироватьПараметрыОтладки(ПараметрыРасчета, ПараметрыОтладки);
	
	// Организации и их учетные политики
	ПараметрыРасчета.Вставить("МассивОрганизаций", 					       МассивОрганизаций);
	ПараметрыРасчета.Вставить("КопияМассивОрганизаций", 			       ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСДвижениямиПоСебестоимости",     ОрганизацииСДвижениямиПоСебестоимости(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСФИФОСкользящая", 		   	   ОрганизацииСФИФОСкользящая(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСФИФОСкользящаяВПрошломПериоде", ОрганизацииСФИФОСкользящая(НачалоМесяца(Дата)-1, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииНаУСН",					       Новый Массив);
	ПараметрыРасчета.Вставить("МетодыОценкиСтоимости", 				       Новый Соответствие); // Организация - Метод оценки
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ТекущийМетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(Дата));
		
		ПараметрыРасчета.МетодыОценкиСтоимости.Вставить(ТекущаяОрганизация,	ТекущийМетодОценки);
		
		ТекущаяСистемаНалогообложения = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.СистемаНалогообложенияОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(Дата));
		
		Если ТекущаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ПараметрыРасчета.ОрганизацииНаУСН.Добавить(ТекущаяОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СокращеннаяИнициализация И ПараметрыРасчета.ФормироватьНачальныеОстаткиПартий22 Тогда
		// Для всех рассчитываемых организаций обязательно должны присутствовать документы расчета себестоимости,
		// т.к. по этим организациям будут формироваться остатки партий и записываться в движения этих документов.
		// Поэтому эти организации гарантировано должны быть в массиве ОрганизацииСДвижениямиПоСебестоимости.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости,
			ПараметрыРасчета.МассивОрганизаций,
			Истина);
	КонецЕсли;
	
	Если НЕ СокращеннаяИнициализация Тогда
		
		// Получим группы организаций, связанных по Интеркампани (для расчета себестоимости)
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости) Тогда
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани", Новый Массив);
		Иначе
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани",
				СвязиОрганизацийПоСхемеИнтеркампани(Дата, ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости, Истина));
		КонецЕсли;
		
		// Методы оценки стоимости для каждой из этих групп; сопоставляется с ГруппыОрганизацийПоИнтеркампани по индексу элемента
		ПараметрыРасчета.Вставить("МетодыОценкиПоГруппамОрганизаций", Новый Массив);
		
		Для Каждого ГруппаОрганизаций Из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани Цикл
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Добавить(
				ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, ГруппаОрганизаций));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыИнициализации.Свойство("ПолучениеСпискаПараметров") Тогда
		Возврат; // для вызова процедуры извне механизма с целью получения списка переопределяемых параметров расчета и отладки
	КонецЕсли;
		
	// Формирует общие временные таблицы для отбора данных в запросах.
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
	// Формирует вспомогательные временные таблицы.
	ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета);
	
	// Описание регистров
	ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	
	Если СокращеннаяИнициализация Тогда
		Возврат; // для вызова процедуры извне механизма с целью инициализации временных таблиц
	КонецЕсли;
	
	// Формирует в ИБ документы расчета себестоимости для рассчитываемых организаций.
	// Также формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ТолькоПредварительныйРасчетСебестоимости, ЗапущеноРегламентнымЗаданием);
	
КонецПроцедуры

Процедура ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, ИдетРасчетСебестоимости) Экспорт
	
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", НЕ ИдетРасчетСебестоимости); // в данный выполняется расчет партий или расчет себестоимости?
	
	Если ИдетРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимости.Имя);
	Иначе
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.ПартионныйУчет22.Имя);
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("МодульМеханизмаРасчета", ОбщегоНазначения.ОбщийМодуль(ПараметрыРасчета.ИмяМодуляМеханизмаРасчета));
	
КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета, ИдетЗаполнение) Экспорт
	
	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Ложь;   // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВСебестоимости   = Истина; // партии в себестоимости заполнены
	КонецЕсли;
	
КонецПроцедуры

	
// Заполняет параметры отладки.
//
Процедура ИнициализироватьПараметрыОтладки(ПараметрыРасчета, ПараметрыОтладки)
	
	ПараметрыРасчета.Вставить("Отладка", Новый Структура);
	
	//////////////////////////////////////////////////////////////////////////////
	// Общие параметры отладки
	
	// Данное свойство позволяет очистить все старые расчетные движения перед новым расчетом - эмулирует первый расчет периода.
	// Следует использовать только для отладки, т.к. очистка может выполняться достаточно долго.
	ПараметрыРасчета.Отладка.Вставить("ОчищатьСтарыеДвижения", Ложь);
	
	// Данное свойство позволяет пропустить проверку окончания обновления ИБ.
	ПараметрыРасчета.Отладка.Вставить("НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ", Ложь);
	
	// Если используется многопоточная запись движений, то должно соблюдаться условие:
	// движения одного регистратора по одному регистру должны делаться только одним фоновым заданием.
	// Иначе, в лучшем случае, фоновое задание упадет с ошибкой превышения времени ожидания блокировки,
	// а в худшем - сможет затереть движения другого задания по этому регистру и регистратору.
	ПараметрыРасчета.Отладка.Вставить("КонтролироватьРегистраторыВФЗ", Ложь);
	
	// Вспомогательная таблица для хранения информации о том, сколько раз в фоновое задание передавалось сочетание регистр/регистратор.
	// Если в итоге получится хоть одна строка с "Количество > 1" - это критичная ошибка.
	РегистраторыВФЗ = Новый ТаблицаЗначений;
	РегистраторыВФЗ.Колонки.Добавить("ИмяРегистра");
	РегистраторыВФЗ.Колонки.Добавить("Регистратор");
	РегистраторыВФЗ.Колонки.Добавить("Количество");
	
	ПараметрыРасчета.Отладка.Вставить("РегистраторыВФЗ", РегистраторыВФЗ);
	
	//////////////////////////////////////////////////////////////////////////////
	// Параметры отладки расчета партий
	
	// Данное свойство позволяет пропустить перепроведение документов с некорректными первичными движениями.
	ПараметрыРасчета.Отладка.Вставить("ИгнорироватьНекорректныеПервичныеДвижения", Ложь);
	
	// Данное свойство позволяет пропустить расчет предварительной и фактической себестоимости.
	ПараметрыРасчета.Отладка.Вставить("НеВыполнятьОптимизациюЦепочек", Ложь);
	
	// Данное свойство позволяет пропустить расчет предварительной и фактической себестоимости.
	ПараметрыРасчета.Отладка.Вставить("НеВыполнятьРасчетСебестоимости", Ложь);
	
	// Данное свойство позволяет пропустить изменение регистра сведений "Задания к расчету себестоимости".
	ПараметрыРасчета.Отладка.Вставить("НеСдвигатьПериодПоОкончанииРасчета", Ложь);
	
	// Данное свойство позволяет выполнить один из этапов расчета партий отдельно от других.
	ПараметрыРасчета.Отладка.Вставить("РасчетОдногоЭтапа", Ложь);
	
	//////////////////////////////////////////////////////////////////////////////
	// Параметры отладки расчета себестоимости
	
	// Если сформировано движение с пустым регистратором, то это свойство позволяет заполнить регистратор документом расчета себестоимости.
	// Движения с пустым регистратором говорят об ошибке в метаданных или в алгоритме расчета.
	// Данное свойство позволяет обойти такую ошибку - установить "неправильный" регистратор, который позволит записать движение.
	ПараметрыРасчета.Отладка.Вставить("ИсправлятьПустойРегистратор", Ложь); 
	
	// Для анализа решения СЛУ можно сохранить таблицы, используемые при решении СЛУ, в виде файлов mxl в указанный каталог.
	// Если имя каталога не заполнено, сохранение таблиц не выполняется.
	ПараметрыРасчета.Отладка.Вставить("КаталогДляСохраненияДанныхСЛУ", "");
	
	// Переопределение параметров расчета и отладки по данным, полученным извне
	ПереопределитьПараметрыРасчетаИОтладки(ПараметрыРасчета, ПараметрыОтладки);
	
	// Сформируем соответствие, из которого по ключу аналитики можно получить организацию
	Если ПараметрыРасчета.Отладка.ИсправлятьПустойРегистратор
	 И НЕ ПараметрыРасчета.Отладка.Свойство("ОрганизацияПоАналитикеПартнеров") Тогда
		
		Запрос = Новый Запрос;
		ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
		
		ОрганизацияПоАналитикеПартнеров = Новый Соответствие;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КлючАналитики,
		|	Т.Организация
		|ИЗ
		|	ВТОтборАналитикаПоПартнерам КАК Т
		|";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОрганизацияПоАналитикеПартнеров.Вставить(Выборка.КлючАналитики, Выборка.Организация);
		КонецЦикла;
	
		ПараметрыРасчета.Отладка.Вставить("ОрганизацияПоАналитикеПартнеров", ОрганизацияПоАналитикеПартнеров);
		
	КонецЕсли;
	
	// ... описание параметров отладки
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка",
		НСтр("ru='Параметры, используемые для отладки механизмов расчета.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.ИсправлятьПустойРегистратор",
		НСтр("ru='Используется в механизме расчета себестоимости:
		|если регистратор в каком-то наборе записей сформированных движений оказался не заполнен
		|(например, в качестве регистратора выбран документ, который не может иметь движений по данному регистру),
		|то в качестве регистратора этого набора устанавливается документ расчета себестоимости.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.КаталогДляСохраненияДанныхСЛУ",
		НСтр("ru='Используется в механизме расчета себестоимости:
		|в указанный каталог в формате mxl будут сохранены данные, используемые для составления СЛУ.
		|Каталог должен существовать - создание каталога не выполняется.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.КонтролироватьРегистраторыВФЗ",
		НСтр("ru='Используется при записи движений в фоновых заданиях:
		|проверяет, что все движения регистратора Х по регистру Y попали в одну порцию записи
		|(подробнее см. описание к параметру ОграниченияФЗ.КоличествоДвиженийВФЗ).
		|В случае обнаружения ошибки соответствующая информация будет выведена в протокол расчета.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.ИгнорироватьНекорректныеПервичныеДвижения",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|позволяет не выполнять перепроведение документов, имеющих ошибки в первичных движениях по регистрам.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.ОчищатьСтарыеДвижения",
		НСтр("ru='Перед запуском расчета сначала очищает все расчетные движения в рассчитываемом периоде, сформированные ранее -
		|т.е. выполняет эмуляцию первого запуска расчета в данном периоде.
		|Может выполняться продолжительное время при большом количестве документов.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ",
		НСтр("ru='Позволяет пропустить проверку окончания обновления ИБ.
		|Если это свойство не установлено и обновление входящих данных механизма расчета еще не завершено,
		|то расчет выполняться не будет, т.к. его входящие данные могут быть некорректны.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.НеВыполнятьОптимизациюЦепочек",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|позволяет пропустить этап оптимизации нумерации узлов графа перед расчетом партий по цепочкам.
		|Расчет цепочек будет выполняться как в партионном учете версии 2.1.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.НеВыполнятьРасчетСебестоимости",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|позволяет пропустить этапы расчета предварительной и фактической себестоимости.
		|Полезно при отладке этапов, не зависящих от результатов расчета предварительной себестоимости.
		|Фактическая себестоимость и так не оказывает влияния на другие этапы (внутри одного периода), т.к. рассчитывается в последнюю очередь.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.НеСдвигатьПериодПоОкончанииРасчета",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|позволяет не выполнять изменение регистра сведений ""Задания к расчету себестоимости"" по окончании расчета.
		|При этом расчет и запись движений будут выполнены, но факт выполнения расчета не будет зафиксирован в регистре заданий.
		|Полезно при отладке расчета какого-то конкретного периода - каждый раз не надо вручную возвращать задания к расчету.'"));
	ПараметрыРасчета.ОписаниеПараметров.Вставить("Отладка.РасчетОдногоЭтапа",
		НСтр("ru='Используется в механизме партионного учета версии 2.2:
		|позволяет выполнить один из этапов расчета партий отдельно от других.
		|Для этого расчетные кэши оборотов и остатков берут свои данные не из временной таблицы ВТКэш<имя регистра>
		|(куда были бы помещены данные предыдущих этапов при нормальном ходе расчета партий), а из данных ИБ.'"));
	
КонецПроцедуры

	
// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета)
	
	// Значения структур РегистрыСРасчетнымиОборотами и РегистрыСРасчетнымиОстатками определяет,
	// будет ли выполняться автообновления расчетных записей (оборотов)/остатков при кэшировании сформированных движений.
	// Если требуется отключить автообновление, то перед обращением к расчетным таблицам надо добавить вызов
	// ОбновитьРасчетныеОборотыРегистра() или ОбновитьРасчетныеОстаткиРегистра()
	// Сначала необходимо выполнять обновление расчетных записей, т.к. при расчете остатков используются эти данные.
	
	// К основным таблицам этих регистров обращаться нельзя, т.к. они содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОборотами", Новый Структура); // ВТКэшРасчетныеОбороты...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций.Имя, Истина);
	
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Эти регистры не используются при расчете себестоимости
		ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.Имя, Истина);
	КонецЕсли;
	//-- НЕ УТ
	
	// К "реальным" конечным остаткам этих регистров обращаться нельзя,
	// т.к. они некорректны - содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками", Новый Структура); // ВТКэшРасчетныеОстатки...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	//-- НЕ УТ
	
	// Инициализируем регистры, используемые механизмами расчета партий и себестоимости
	ОбслуживаемыеРегистры = Новый Соответствие;
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры);
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ПартионныйУчет22.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры); // дополним перечень регистров
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	Для Каждого КлючИЗначение Из ОбслуживаемыеРегистры Цикл
		ИнициализироватьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
	КонецЦикла;
	
	// При необходимости выполняется полная очистка всех движений, сформированных предыдущим расчетом
	Если ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения Тогда
		ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета);
		ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	
	// Для повторной инициализации надо уничтожить все временные таблицы, создаваемые в этой процедуре.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики 				КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация 				КАК Организация,
	|	АналитикаПоПартнерам.Контрагент					КАК Контрагент,
	|	АналитикаПоПартнерам.Партнер 					КАК Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности 	КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТОтборАналитикаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|";
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	Запрос.Выполнить();
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует вспомогательные временные таблицы.
//
Процедура ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("ПравилаЗаполненияПоляТипЗаписи", ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ПустоеЗначениеРегистратора КАК ПустоеЗначениеРегистратора,
	|	Т.ХозяйственнаяОперация 	 КАК ХозяйственнаяОперация,
	|	Т.ПоложительноеКоличество    КАК ПоложительноеКоличество,
	|	Т.ТипЗаписиПриход 			 КАК ТипЗаписиПриход,
	|	Т.ТипЗаписиРасход 			 КАК ТипЗаписиРасход,
	|	Т.КорПартияВРасходе 		 КАК КорПартияВРасходе
	|ПОМЕСТИТЬ ВТПравилаЗаполненияПоляТипЗаписи
	|ИЗ
	|	&ПравилаЗаполненияПоляТипЗаписи КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.ДокументДвижения				КАК ДокументДвижения,
	|	Т.Период						КАК Период,
	|
	|	Т.Организация					КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов					КАК ВидЗапасов,
	|	Т.РазделУчета					КАК РазделУчета,
	|	Т.Партия						КАК Партия,
	|	Т.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК Стоимость,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьЗабалансовая,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК Трудозатраты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеСНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК СтоимостьЗабалансоваяРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ВременнаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ДопРасходыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ТрудозатратыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (23, 10))	КАК ПостатейныеРегл
	|ПОМЕСТИТЬ ВТСтоимостьПартийТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т";
	
	Запрос.Выполнить();
	
	//++ НЕ УТ
	Запрос.Текст = ПартионныйУчет22.ТекстОписаниеДанныхДляРаспределенияДолейПроизводственныхРасходов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ДолиПроизводственныхРасходов");
	Запрос.Выполнить();
	
	Запрос.Текст = ПартионныйУчет22.ТекстОписаниеДанныхДляПартийОтнесенияРасходов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВоВременнуюТаблицу", "ПОМЕСТИТЬ ПартииДляОтнесенияРасходов");
	Запрос.Выполнить();
	//-- НЕ УТ
	
КонецПроцедуры


// Действия, выполняемые при окончании расчета.
//
Функция ОкончаниеРасчета(ПараметрыРасчета)
	
	Если ПротоколРасчетаПартийИСебестоимости.ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("МенеджерВременныхТаблиц") Тогда
		ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;
	
КонецФункции


// Возвращает перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных
//
Функция ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра = "") Экспорт
	
	ОписаниеДокументов = Новый Соответствие;
	
	Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг,     Значение); // операция РеализацияБезПереходаПраваСобственности
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров, Значение); // формирование остатков партий себестоимости на конец прошлого периода
			//++ НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по материалам и продукции формируются в разных периодах
			ОписаниеДокументов.Вставить(Метаданные.Документы.МаршрутныйЛистПроизводства, Значение);
			//-- НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.АвансовыйОтчет, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатков, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаПоступления, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаРеализации, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПоступлениеТоваровУслуг, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПоступлениеУслугПрочихАктивов, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПрочиеДоходыРасходы, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, Значение); // доп. расходы
			//++ НЕ УТ
			ОписаниеДокументов.Вставить(Метаданные.Документы.АмортизацияНМА, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.АмортизацияОС, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам, Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете, Значение); // доп. расходы
			//-- НЕ УТ
		КонецЕсли;
		
		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями, 			 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, 		 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, 		 Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПеремещениеТоваров, 						 Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение); // операция РеализацияБезПереходаПраваСобственности
			//++ НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по материалам и продукции формируются в разных периодах
			ОписаниеДокументов.Вставить(Метаданные.Документы.МаршрутныйЛистПроизводства, Значение);
			//-- НЕ УТКА
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизаций.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по материалам и продукции формируются в разных периодах
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по трудозатратам формируются в разных периодах
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по прочим расходам НЗП формируются в разных периодах
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.МаршрутныйЛистПроизводства, Значение); // при длительном производстве движения по материалам формируются в разных периодах
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя Тогда
		
		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПартииПрочихРасходов) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРегистра = ""
		ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		
		Если РазныеПериоды Тогда
			
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Этот тип документов не должен обрабатываться расчетными механизмами
	ОписаниеДокументов.Удалить(Метаданные.Документы.КорректировкаРегистров);
	
	Возврат ОписаниеДокументов;
	
КонецФункции

#Область ПереопределениеПараметровРасчета

// Переопределение свойств ПараметрыРасчета из свойств ПараметрыОтладки
//
Процедура ПереопределитьПараметрыРасчетаИОтладки(ПараметрыРасчета, ПараметрыОтладки)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтладки) Тогда
		Возврат;
	КонецЕсли;
	
	// Для целей отладки расчета переопределим требуемые параметры расчета - возьмем их значения из соответствующих свойств ПараметрыОтладки
	// Можно переопределить
	//	- все параметры структуры ПараметрыРасчета с примитивными типами, существующие к моменту выполнения этого кода
	// 	- параметры вложенных структур ПараметрыРасчета.ФО и ПараметрыРасчета.Отладка
	Для Каждого КлючИЗначение Из ПараметрыРасчета Цикл
		
		ИмяСвойства = КлючИЗначение.Ключ;
		
		Если НЕ ПараметрыОтладки.Свойство(ИмяСвойства) // не требуется переопределять
		 ИЛИ НЕ ПараметрРасчетаМожноПереопределить(ИмяСвойства, КлючИЗначение.Значение) Тогда // нельзя переопределять
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда // Вложенная структура с параметрами
			ЗаполнитьЗначенияСвойств(ПараметрыРасчета[ИмяСвойства], ПараметрыОтладки[ИмяСвойства]);
		Иначе // параметр
			ПараметрыРасчета[ИмяСвойства] = ПараметрыОтладки[ИмяСвойства];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Определяет, можно ли переопределить указанный параметр расчета.
//
Функция ПараметрРасчетаМожноПереопределить(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	// Служебные параметры расчета задаются или через параметры запуска, или извне, через ключевые ФО механизма расчета
	СлужебныеПараметры = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСтрокуКлючейВСоответствие(
		НРег("МестоВызоваРасчета, ЗапущенРасчетПартий, ИдетРасчетПартий, ИмяМодуляМеханизмаРасчета, ВариантРасчета,
		|ПредварительныйРасчет, РегламентноеЗадание, ПартионныйУчетВерсии22, ФормироватьНачальныеОстаткиПартий22,
		|ЗаполненыПартииВСебестоимости, ЗаполняютсяПартииВСебестоимости, ИзмененоДокументов, ОбщееКоличествоФЗ, СтрокаСоединенияИБ,
		|ФО.ДатаПереходаНаПартионныйУчетВерсии22, ФО.ИспользоватьПартионныйУчет, ФО.ПартионныйУчетВерсии22"));
	
	// Можно переопределять значений свойств только этих структур
	ПереопределяемыеСтруктуры = Новый Структура("ФО, Отладка, РешениеСЛУ, УправлениеИтогами, НачальныеОстатки, ОграниченияВыборки, ОграниченияФЗ");
	// Можно переопределять значения только этих типов
	ПереопределяемыеТипы 	  = Новый ОписаниеТипов("Число, Строка, Дата, Булево");
	
	ЭтоИмяВложенногоЭлемента = СтрНайти(ИмяПараметра, ".");
	
	МожноПереопределить =
		(СлужебныеПараметры.Получить(НРег(ИмяПараметра)) = Неопределено)
		И ((НЕ ЭтоИмяВложенногоЭлемента И ПереопределяемыеСтруктуры.Свойство(ИмяПараметра))
	 		ИЛИ ПереопределяемыеТипы.СодержитТип(ТипЗнч(ЗначениеПараметра)));
	
	Возврат МожноПереопределить;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаДанных

#Область ПроверкаИсходныхИИтоговыхДанных

Функция ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|ПОМЕСТИТЬ ЕстьВозвратныеОтходыДавальца
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Отходы
	|ГДЕ
	|	Отходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Отходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Отходы.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|	И Отходы.Количество < 0
	//++ НЕ УТКА
	|	И (Отходы.Регистратор ССЫЛКА Документ.ВыпускПродукции
	|		ИЛИ Отходы.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|		ИЛИ Отходы.Регистратор ССЫЛКА Документ.ПроизводствоБезЗаказа)
	//-- НЕ УТКА
	|	И Отходы.Организация В (&МассивОрганизаций)
	|	И Отходы.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ КПередачеНаНачалоПериода
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПредыдущегоПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроданныеТовары.ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроданныеТовары.ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец            КАК ОрганизацияПродавец,
	|	ВидыЗапасов.Организация 					   КАК ОрганизацияПолучатель,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0)) КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 										   КАК ВидЗапасовПродавца,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 										   КАК ВидЗапасовПолучателя
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительная КАК ПроданныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ПроданныеТовары.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ КПередачеНаНачалоПериода КАК НаНачалоПериода
	|		ПО НаНачалоПериода.ОрганизацияВладелец = ПроданныеТовары.ОрганизацияВладелец
	|		И НаНачалоПериода.ВидЗапасовПродавца = ПроданныеТовары.ВидЗапасовПродавца
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И (ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ВидыЗапасов.Организация,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПродавец КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПродавца КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтНетПередачТоваров
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПолучатель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.ВидЗапасов,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	СписанныеТовары.КоличествоСписаноОстаток
	|ПОМЕСТИТЬ ВтНетОтчетовОСписанииПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&ГраницаКонецПериода) КАК СписанныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	СписанныеТовары.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Организация 						КАК Организация,
	|	ВидыЗапасов.Комитент 							КАК Владелец,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СписанныеТовары.КоличествоСписаноОстаток) КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ 											КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтНетОтчетовОСписании
	|ИЗ
	|	ВтНетОтчетовОСписанииПредварительная КАК СписанныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО СписанныеТовары.ВидЗапасов = ВидыЗапасов.Ссылка
	|ГДЕ
	|	ВидыЗапасов.Организация В (&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Организация,
	|	ВидыЗапасов.Комитент,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВидыЗапасов.Ссылка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНетОтчетовОСписанииПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 		КАК Организация,
	|	Остатки.Номенклатура 		КАК Номенклатура,
	|	Остатки.Характеристика 		КАК Характеристика,
	|	Остатки.Серия 				КАК Серия,
	|	Остатки.Назначение 			КАК Назначение,
	|	Остатки.Подразделение 		КАК Подразделение,
	|	Остатки.КоличествоОстаток 	КАК Количество
	|ПОМЕСТИТЬ ВтРаботыОстатки
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	НЕ &ПартионныйУчетВерсии22
	|	И Остатки.КоличествоОстаток < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 	КАК Организация,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	Остатки.Количество 		КАК Количество
	|ПОМЕСТИТЬ ВтРаботы
	|ИЗ
	|	ВтРаботыОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Остатки.Номенклатура
	|		И Аналитика.Характеристика = Остатки.Характеристика
	|		И Аналитика.Серия = Остатки.Серия
	|		И Аналитика.Назначение = Остатки.Назначение
	|		И Аналитика.Склад = Остатки.Подразделение
	//++ НЕ УТ 
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	//-- НЕ УТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Остатки.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРаботыОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СебестоимостьТоваров"" КАК ИмяРегистра,
	|	Т.Организация,
	|	Т.Период
	|ПОМЕСТИТЬ НекорректныйПереносДанных
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Активность
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПереносДанных)
	|	И Т.Период <> ДОБАВИТЬКДАТЕ(&ДатаПереходаНаПартионныйУчетВерсии22, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ДетализацияПартийТоваровДляНДСиУСН"" КАК ИмяРегистра,
	|	Т.Организация,
	|	Т.Период
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Активность
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПереносДанных)
	|	И Т.Период <> ДОБАВИТЬКДАТЕ(&ДатаПереходаНаПартионныйУчетВерсии22, СЕКУНДА, -1)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.КоличествоОстаток
	|ПОМЕСТИТЬ СебестоимостьТоваровОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	""Остатки""			  КАК ВидПроверки,
	|	Таб.РазделУчета		  КАК РазделУчета,
	|	Таб.ВидЗапасов		  КАК ВидЗапасов,
	|	Таб.Организация		  КАК Организация,
	|	Таб.Организация		  КАК Владелец,
	|	Таб.Номенклатура      КАК Номенклатура,
	|	Таб.Характеристика    КАК Характеристика,
	|	Таб.Серия             КАК Серия,
	|	Таб.Склад             КАК Склад,
	|	Таб.Назначение        КАК Назначение,
	|	НЕОПРЕДЕЛЕНО		  КАК Регистратор,
	|	СУММА(Таб.Количество) КАК Количество
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		Т.РазделУчета 				 КАК РазделУчета,
	|		ВЫБОР КОГДА Аналитика.Склад ССЫЛКА Справочник.Партнеры
	|		 ИЛИ Аналитика.Склад ССЫЛКА Справочник.СтруктураПредприятия ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Т.ВидЗапасов
	|		КОНЕЦ 						 КАК ВидЗапасов,
	|		Т.Организация 				 КАК Организация,
	|		Аналитика.Номенклатура     	 КАК Номенклатура,
	|		Аналитика.Характеристика   	 КАК Характеристика,
	|		Аналитика.Серия            	 КАК Серия,
	|		Аналитика.Склад            	 КАК Склад,
	|		Аналитика.Назначение         КАК Назначение,
	|		Т.КоличествоОстаток 		 КАК Количество
	|	ИЗ
	|		СебестоимостьТоваровОстатки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходыДавальца КАК Отходы
	|			ПО Т.АналитикаУчетаНоменклатуры  = Отходы.АналитикаУчетаНоменклатуры
	|			И Т.РазделУчета 				 = Отходы.РазделУчета
	|			И Т.ВидЗапасов 				 	 = Отходы.ВидЗапасов
	|			И Т.Организация 				 = Отходы.Организация
	|	ГДЕ
	|		(Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ Аналитика.Склад ССЫЛКА Справочник.Склады)
	|		И Отходы.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.РазделУчета                КАК РазделУчета,
	|		Т.ВидЗапасов                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Аналитика.Номенклатура     	 КАК Номенклатура,
	|		Аналитика.Характеристика   	 КАК Характеристика,
	|		Аналитика.Серия            	 КАК Серия,
	|		Аналитика.Склад            	 КАК Склад,
	|		Аналитика.Назначение         КАК Назначение,
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				Т.Количество
	|			ИНАЧЕ
	|				-Т.Количество
	|		КОНЕЦ                        КАК Количество
	|	ИЗ
	|		ВтНетПередачТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|		НЕОПРЕДЕЛЕНО                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Аналитика.Номенклатура     	 КАК Номенклатура,
	|		Аналитика.Характеристика   	 КАК Характеристика,
	|		Аналитика.Серия            	 КАК Серия,
	|		Аналитика.Склад            	 КАК Склад,
	|		Аналитика.Назначение         КАК Назначение,
	|		Т.Количество                 КАК Количество
	|	ИЗ
	|		ВтНетОтчетовОСписании КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|		НЕОПРЕДЕЛЕНО                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Аналитика.Номенклатура     	 КАК Номенклатура,
	|		Аналитика.Характеристика   	 КАК Характеристика,
	|		Аналитика.Серия            	 КАК Серия,
	|		Аналитика.Склад            	 КАК Склад,
	|		Аналитика.Назначение         КАК Назначение,
	|		-Т.Количество                КАК Количество
	|	ИЗ
	|		ВтРаботы КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|	) КАК Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.РазделУчета,
	|	Таб.ВидЗапасов,
	|	Таб.Организация,
	|	Таб.Номенклатура,
	|	Таб.Характеристика,
	|	Таб.Серия,
	|	Таб.Склад,
	|	Таб.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Передачи"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.ОрганизацияПолучатель КАК Организация,
	|	Таб.ОрганизацияПродавец КАК Владелец,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	0 КАК Количество
	|ИЗ
	|	Товары КАК Таб
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		Таб.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.ОрганизацияПолучатель,
	|	Таб.ОрганизацияПродавец,
	|	АналитикаНоменклатуры.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Комиссия"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.Организация КАК Организация,
	|	Таб.Владелец КАК Владелец,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	0 КАК Количество
	|ИЗ
	|	ВтНетОтчетовОСписании КАК Таб
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Таб.Владелец
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Работы"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Владелец,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад,
	|	Аналитика.Назначение КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	СУММА(Таб.Количество) КАК Количество
	|ИЗ
	|	ВтРаботы КАК Таб
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = Таб.АналитикаУчетаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад,
	|	Аналитика.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЛишниеПередачи"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.ОрганизацияПолучатель КАК Организация,
	|	Таб.ОрганизацияПродавец КАК Владелец,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	АналитикаНоменклатуры.Серия,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	АналитикаНоменклатуры.Назначение КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	-СУММА(Таб.Количество) КАК Количество
	|ИЗ
	|	Товары КАК Таб
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Таб.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.ОрганизацияПолучатель,
	|	Таб.ОрганизацияПродавец,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	АналитикаНоменклатуры.Серия,
	|	АналитикаНоменклатуры.Склад,
	|	АналитикаНоменклатуры.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ПереносДанных"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО 	  КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО 	  КАК ВидЗапасов,
	|	Т.Организация     КАК Организация,
	|	НЕОПРЕДЕЛЕНО 	  КАК Владелец,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0 				  КАК Количество
	|ИЗ
	|	НекорректныйПереносДанных КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПроверки,
	|	Организация,
	|	РазделУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад,
	|	Назначение,
	|	ВидЗапасов
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.РазделУчета 								КАК РазделУчета,
	|	Т.ВидЗапасов 								КАК ВидЗапасов,
	|	Т.Организация 								КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры 				КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 									КАК Партия,
	|	Т.АналитикаУчетаПартий 						КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 				КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 						КАК ВидДеятельностиНДС,
	|
	|	СУММА(Т.Знак * Т.Количество) 				КАК Количество,
	|
	|	СУММА(Т.Знак * Т.Стоимость) 				КАК Стоимость,
	|	СУММА(Т.Знак * Т.СтоимостьБезНДС) 			КАК СтоимостьБезНДС,
	|	СУММА(Т.Знак * Т.СуммаДопРасходов) 			КАК СуммаДопРасходов,
	|	СУММА(Т.Знак * Т.СуммаДопРасходовБезНДС) 	КАК СуммаДопРасходовБезНДС,
	//++ НЕ УТ
	|	СУММА(Т.Знак * Т.ПостояннаяРазница) 		КАК ПостояннаяРазница,
	|	СУММА(Т.Знак * Т.ВременнаяРазница) 			КАК ВременнаяРазница,
	//-- НЕ УТ
	|	СУММА(Т.Знак * Т.СтоимостьРегл) 			КАК СтоимостьРегл,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансовая) 	КАК СтоимостьЗабалансовая,
	|	СУММА(Т.Знак * Т.Трудозатраты) 				КАК Трудозатраты,
	|	СУММА(Т.Знак * Т.ПостатейныеСНДС) 			КАК ПостатейныеСНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеБезНДС) 		КАК ПостатейныеБезНДС,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансоваяРегл)	КАК СтоимостьЗабалансоваяРегл,
	|	СУММА(Т.Знак * Т.ДопРасходыРегл) 			КАК ДопРасходыРегл,
	|	СУММА(Т.Знак * Т.ТрудозатратыРегл) 			КАК ТрудозатратыРегл,
	|	СУММА(Т.Знак * Т.ПостатейныеРегл) 			КАК ПостатейныеРегл
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.РазделУчета 						КАК РазделУчета,
	|		Т.ВидЗапасов 						КАК ВидЗапасов,
	|		Т.Организация 						КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 							КАК Партия,
	|		Т.АналитикаУчетаПартий 				КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|		
	|		1									КАК Знак,
	|		Т.КоличествоОстаток 				КАК Количество,
	|		
	|		Т.СтоимостьОстаток 					КАК Стоимость,
	|		Т.СтоимостьБезНДСОстаток 			КАК СтоимостьБезНДС,
	|		Т.СуммаДопРасходовОстаток 			КАК СуммаДопРасходов,
	|		Т.СуммаДопРасходовБезНДСОстаток 	КАК СуммаДопРасходовБезНДС,
	//++ НЕ УТ
	|		Т.ПостояннаяРазницаОстаток 			КАК ПостояннаяРазница,
	|		Т.ВременнаяРазницаОстаток 			КАК ВременнаяРазница,
	//-- НЕ УТ
	|		Т.СтоимостьРеглОстаток 				КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансоваяОстаток 		КАК СтоимостьЗабалансовая,
	|		Т.ТрудозатратыОстаток 				КАК Трудозатраты,
	|		Т.ПостатейныеСНДСОстаток 			КАК ПостатейныеСНДС,
	|		Т.ПостатейныеБезНДСОстаток 			КАК ПостатейныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРеглОстаток 	КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРеглОстаток 			КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРеглОстаток 			КАК ТрудозатратыРегл,
	|		Т.ПостатейныеРеглОстаток 			КАК ПостатейныеРегл
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Исключим из остатков на конец периода движения, формирующие начальные остатки для партионного учета версии 2.2
	|	ВЫБРАТЬ
	|		Т.РазделУчета 						КАК РазделУчета,
	|		Т.ВидЗапасов 						КАК ВидЗапасов,
	|		Т.Организация 						КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 							КАК Партия,
	|		Т.АналитикаУчетаПартий 				КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|		
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ								КАК Знак,
	|		Т.Количество 						КАК Количество,
	|		
	|		Т.Стоимость 						КАК Стоимость,
	|		Т.СтоимостьБезНДС 					КАК СтоимостьБезНДС,
	|		Т.СуммаДопРасходов 					КАК СуммаДопРасходов,
	|		Т.СуммаДопРасходовБезНДС 			КАК СуммаДопРасходовБезНДС,
	//++ НЕ УТ
	|		Т.ПостояннаяРазница 				КАК ПостояннаяРазница,
	|		Т.ВременнаяРазница 					КАК ВременнаяРазница,
	//-- НЕ УТ
	|		Т.СтоимостьРегл 					КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансовая 			КАК СтоимостьЗабалансовая,
	|		Т.Трудозатраты 						КАК Трудозатраты,
	|		Т.ПостатейныеСНДС 					КАК ПостатейныеСНДС,
	|		Т.ПостатейныеБезНДС 				КАК ПостатейныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРегл 		КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРегл 					КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРегл 					КАК ТрудозатратыРегл,
	|		Т.ПостатейныеРегл 					КАК ПостатейныеРегл
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ГДЕ
	|		НЕ &ПартионныйУчетВерсии22
	|		И &ДатаПереходаНаПартионныйУчетВерсии22 = &НачалоСледующегоПериода
	|		И Т.Период = &КонецПериода
	|		И Т.Организация В (&МассивОрганизаций)
	|		И Т.Активность
	|		И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПереносДанных)
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	АналитикаНоменклатуры.Номенклатура   	КАК Номенклатура,
	|	СправочникНоменклатуры.Код 				КАК КодНоменклатуры,
	|	АналитикаНоменклатуры.Характеристика 	КАК Характеристика,
	|	АналитикаНоменклатуры.Серия 			КАК Серия,
	|	АналитикаНоменклатуры.Склад 			КАК Склад,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР КОГДА Т.Количество = 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ 									КАК НулевоеКоличество,
	|	Т.Количество 							КАК Количество,
	|	Т.Стоимость 							КАК Стоимость,
	|	Т.СтоимостьБезНДС 						КАК СтоимостьБезНДС,
	|	Т.СуммаДопРасходов 						КАК СуммаДопРасходов,
	|	Т.СуммаДопРасходовБезНДС 				КАК СуммаДопРасходовБезНДС,
	//++ НЕ УТ
	|	Т.ПостояннаяРазница 					КАК ПостояннаяРазница,
	|	Т.ВременнаяРазница 						КАК ВременнаяРазница,
	//-- НЕ УТ
	|	Т.СтоимостьРегл 						КАК СтоимостьРегл,
	|	Т.СтоимостьЗабалансовая 				КАК СтоимостьЗабалансовая,
	|	Т.Трудозатраты 							КАК Трудозатраты,
	|	Т.ПостатейныеСНДС 						КАК ПостатейныеСНДС,
	|	Т.ПостатейныеБезНДС 					КАК ПостатейныеБезНДС,
	|	Т.СтоимостьЗабалансоваяРегл 			КАК СтоимостьЗабалансоваяРегл,
	|	Т.ДопРасходыРегл 						КАК ДопРасходыРегл,
	|	Т.ТрудозатратыРегл 						КАК ТрудозатратыРегл,
	|	Т.ПостатейныеРегл 						КАК ПостатейныеРегл,
	|
	|	Т.Стоимость + Т.СтоимостьЗабалансовая + Т.СуммаДопРасходов + Т.Трудозатраты + Т.ПостатейныеСНДС 			КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДС + Т.СуммаДопРасходовБезНДС + Т.ПостатейныеБезНДС											КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл + Т.ДопРасходыРегл + Т.ТрудозатратыРегл + Т.ПостатейныеРегл	КАК ПолнаяСтоимостьРегл
	|
	|ИЗ
	|	ВТОстатки КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|				ПО АналитикаНоменклатуры.Номенклатура = СправочникНоменклатуры.Ссылка
	|			ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|ГДЕ
	// Есть суммы без количества
	|	(Т.Количество = 0
	|	И НЕ (Т.Стоимость = 0
	|		И Т.СтоимостьБезНДС = 0
	|		И Т.СуммаДопРасходов = 0
	|		И Т.СуммаДопРасходовБезНДС = 0
	//++ НЕ УТ
	|		И Т.ПостояннаяРазница = 0
	|		И Т.ВременнаяРазница = 0
	//-- НЕ УТ
	|		И Т.СтоимостьРегл = 0
	|		И Т.СтоимостьЗабалансовая = 0
	|		И Т.Трудозатраты = 0
	|		И Т.ПостатейныеСНДС = 0
	|		И Т.ПостатейныеБезНДС = 0
	|		И Т.СтоимостьЗабалансоваяРегл = 0
	|		И Т.ДопРасходыРегл = 0
	|		И Т.ТрудозатратыРегл = 0
	|		И Т.ПостатейныеРегл = 0))
	|	ИЛИ
	// Отличается знак количества и стоимости
	|	(Т.Количество <> 0
	|	И НЕ (Т.Количество * (Т.Стоимость + Т.СтоимостьЗабалансовая + Т.СуммаДопРасходов + Т.Трудозатраты + Т.ПостатейныеСНДС) >= 0
	|		И Т.Количество * (Т.СтоимостьБезНДС + Т.СуммаДопРасходовБезНДС + Т.ПостатейныеБезНДС) >= 0
	|		И Т.Количество * (Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл + Т.ДопРасходыРегл + Т.ТрудозатратыРегл + Т.ПостатейныеРегл) >= 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	НулевоеКоличество,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад,
	|	Партия
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет проверку корректности остатков себестоимости, а также выполнение регламентных операций, предшествующих расчету.
//
Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета) Экспорт
	
	Если НЕ (ПараметрыРасчета.ИдетРасчетПартий
	  ИЛИ НЕ ПараметрыРасчета.ЗапущенРасчетПартий) Тогда
		Возврат; // нужно или в начале расчета партий, или в начале отдельного расчета себестоимости
	КонецЕсли;
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьИсходныхДанныхДоРасчета");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, Ложь);
	
	Запрос.Текст = ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета();

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ТекстОшибки = "";
		Если Выборка.ВидПроверки = "Остатки" Тогда
			ПредставлениеТовара = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"", склад ""%2"", организация ""%3"", раздел учета ""%4""'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,, Выборка.Серия, Выборка.Назначение),
				Выборка.Склад,
				Выборка.Организация,
				Выборка.РазделУчета);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура %1:
					|		обнаружен отрицательный остаток по количеству (%2 ед.) на конец периода %3 в регистре ""Себестоимость товаров""'"),
				ПредставлениеТовара,
				- Выборка.Количество,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета));
				
		ИначеЕсли Выборка.ВидПроверки = "Передачи" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не оформлены передачи товаров от отправителя ""%1"" на получателя ""%2"" по складу ""%3"" за %4'"),
				Выборка.Владелец,
				Выборка.Организация,
				Выборка.Склад,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета));
				
		ИначеЕсли Выборка.ВидПроверки = "ЛишниеПередачи" Тогда
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,, Выборка.Серия, Выборка.Назначение);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура ""%1"":
					|		за %2 от отправителя ""%3"" на получателя ""%4"" по складу ""%5"" передано больше, чем требуется на %6 ед.'"),
				ПредставлениеТовара,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета),
				Выборка.Владелец,
				Выборка.Организация,
				Выборка.Склад,
				Выборка.Количество);
		
		ИначеЕсли Выборка.ВидПроверки = "Комиссия" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не оформлены отчеты комитенту ""%1"" о списании по организации ""%2"" за %3'"),
				Выборка.Владелец,
				Выборка.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета));
				
		ИначеЕсли Выборка.ВидПроверки = "Работы" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура (работа) ""%1"":
					|		не отражено поступление %2 шт. в подразделение ""%3"" организации ""%4"" за %5'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,,, Выборка.Назначение),
				- Выборка.Количество,
				Выборка.Склад,
				Выборка.Организация,
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета));
				
		ИначеЕсли Выборка.ВидПроверки = "ПереносДанных" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обнаружены движения вида ""Перенос данных"" по организации ""%1"" в периодах, не соответствующих дате перехода на партионный учет версии 2.2'"),
				Выборка.Организация);
			
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обнаружены ошибки вида ""%1"" при проверке исходных данных для расчета, подробное описание ошибки отсутствует'"),
				Выборка.ВидПроверки);
			
		КонецЕсли;
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВИсходныхДанныхДляРасчета,
			ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие суммовых остатков без остатков по количеству
//
Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, Ложь);

	Запрос.Текст = ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия);
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'код'") + ": " + Выборка.КодНоменклатуры;
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'склад'") + ": " + Выборка.Склад
			+ ", " + НСтр("ru = 'организация'") + ": " + Выборка.Организация;
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'раздел учета'") + ": " + Выборка.РазделУчета;
		Если ЗначениеЗаполнено(Выборка.ВидЗапасов) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'вид запасов'") + ": " + Выборка.ВидЗапасов;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Партия) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'партия'") + ": " + Выборка.Партия;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.АналитикаУчетаПартий) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'аналитика учета партий'") + ": " + Выборка.АналитикаУчетаПартий;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.АналитикаФинансовогоУчета) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'аналитика фин. учета'") + ": " + Выборка.АналитикаФинансовогоУчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВидДеятельностиНДС) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'вид деятельности НДС'") + ": " + Выборка.ВидДеятельностиНДС;
		КонецЕсли;
		
		Если Выборка.НулевоеКоличество Тогда
			
			ПредставлениеНекорректногоОстатка =
				""
				+ ?(Выборка.Стоимость <> 0,					"Стоимость = " 				 	 + Выборка.Стоимость, "")
				+ ?(Выборка.СтоимостьБезНДС <> 0,			", СтоимостьБезНДС = " 			 + Выборка.СтоимостьБезНДС, "")
				+ ?(Выборка.СуммаДопРасходов <> 0,			", СуммаДопРасходов = " 		 + Выборка.СуммаДопРасходов, "")
				+ ?(Выборка.СуммаДопРасходовБезНДС <> 0,	", СуммаДопРасходовБезНДС = " 	 + Выборка.СуммаДопРасходовБезНДС, "")
				+ ?(Выборка.СтоимостьРегл <> 0,				", СтоимостьРегл = " 			 + Выборка.СтоимостьРегл, "")
				+ ?(Выборка.СтоимостьЗабалансовая <> 0,		", СтоимостьЗабалансовая = " 	 + Выборка.СтоимостьЗабалансовая, "")
				+ ?(Выборка.Трудозатраты <> 0,				", Трудозатраты = " 			 + Выборка.Трудозатраты, "")
				+ ?(Выборка.ПостатейныеСНДС <> 0,			", ПостатейныеСНДС = " 			 + Выборка.ПостатейныеСНДС, "")
				+ ?(Выборка.ПостатейныеБезНДС <> 0,			", ПостатейныеБезНДС = " 		 + Выборка.ПостатейныеБезНДС, "")
				+ ?(Выборка.СтоимостьЗабалансоваяРегл <> 0,	", СтоимостьЗабалансоваяРегл = " + Выборка.СтоимостьЗабалансоваяРегл, "")
				+ ?(Выборка.ДопРасходыРегл <> 0,			", ДопРасходыРегл = " 			 + Выборка.ДопРасходыРегл, "")
				+ ?(Выборка.ТрудозатратыРегл <> 0,			", ТрудозатратыРегл = " 		 + Выборка.ТрудозатратыРегл, "")
				+ ?(Выборка.ПостатейныеРегл <> 0,			", ПостатейныеРегл = " 			 + Выборка.ПостатейныеРегл, "")
				//++ НЕ УТ
				+ ?(Выборка.ПостояннаяРазница <> 0,			", ПостояннаяРазница = " 		 + Выборка.ПостояннаяРазница, "")
				+ ?(Выборка.ВременнаяРазница <> 0,			", ВременнаяРазница = " 		 + Выборка.ВременнаяРазница, "")
				//-- НЕ УТ
				+ "";
			
			ТекстОшибки =
				НСтр("ru = 'По номенклатуре %1
					|		обнаружен суммовой остаток при нулевом количестве на %2 в регистре ""Себестоимость товаров"": %3'");
			
		Иначе
			
			ПредставлениеНекорректногоОстатка =
				"Количество = " + Выборка.Количество
				+ ?(Выборка.ПолнаяСтоимость <> 0,			", " + НСтр("ru='Стоимость (полная)'") + " = "			+ Выборка.ПолнаяСтоимость, "")
				+ ?(Выборка.ПолнаяСтоимостьБезНДС <> 0,		", " + НСтр("ru='Стоимость без НДС (полная)'") + " = "	+ Выборка.ПолнаяСтоимостьБезНДС, "")
				+ ?(Выборка.ПолнаяСтоимостьРегл <> 0,		", " + НСтр("ru='Стоимость регл. (полная)'") + " = "	+ Выборка.ПолнаяСтоимостьРегл, "")
				+ "";
			
			ТекстОшибки =
				НСтр("ru = 'По номенклатуре %1
					|		обнаружено несоответствие знаков количественного и суммового остатков на %2 в регистре ""Себестоимость товаров"": %3'");
			
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			ПредставлениеТовара,
			Формат(КонецМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПериода), "ДЛФ=D"),
			ПредставлениеНекорректногоОстатка);
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВОстаткахПослеРасчета,
			ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСформированныхРасчетныхДанных

// Проверяет отсутствие ошибок в сформированных движениях.
//
Функция ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьСформированныхДвижений");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Проверяет корректность указания Организации в сформированных движениях:
	// - не должно быть движений по не рассчитываемым организациям
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор
			|ИЗ
			|	ВТКэш%1 КАК Т
			|ГДЕ
			|	%ОтборПоОрганизации
			|";
			
			ОтборПоОрганизации = "НЕ (Т.Организация В(&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				// Записи с незаполненной организаций в этом регистре не считаются ошибочными.
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);
			
		Иначе // ЕстьАналитикаПартнеров
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор
			|ИЗ
			|	ВТКэш%1 КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
			|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
			|ГДЕ
			|	АналитикаПартнеров.КлючАналитики ЕСТЬ NULL
			|";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ОписаниеРегистра.ИмяРегистра);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			РезультатЗапроса,
			НСтр("ru='Сформированы движения с некорректной организацией'"));
		
	КонецЦикла;
	
	// Проверки для партионного учета версии 2.2.
	Если ПараметрыРасчета.ПартионныйУчетВерсии22
	 И ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		
		// Проверим, что при расчете не было сформировано ошибочных движений по регистру "Себестоимость товаров":
		// - не сформировано новых движений с "непересчитываемыми" типами записи
		// - не различается количество в первичных и в сформированных (с заполненными полями партионной идентификации) записях
		ОписаниеРегистра = ПараметрыРасчета.Движения[Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя];
		
		// Проверяем корректность типа записи в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТДвиженияНепересчитываемыхТипов
		|ИЗ
		|	ВТКэшСебестоимостьТоваров КАК Т
		|ГДЕ
		|	Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)
		|	И НЕ Т.РасчетПартий
		|	И НЕ Т.РасчетСебестоимости
		|";
		
		Запрос.Выполнить();
		
		РезультатЗапроса = ВыбратьМоментыВремениРегистраторов(ПараметрыРасчета, "ВТДвиженияНепересчитываемыхТипов");
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			РезультатЗапроса,
			НСтр("ru='Сформированы движения по непересчитываемому типу записи'"));
		
		// Проверяем соответствие количества в первичных движениях в ИБ и в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТИзмененныеПервичныеДвижения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.РазделУчета КАК РазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация КАК Организация,
		|		Т.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
		|		Т.КорРазделУчета КАК КорРазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		Т.КорОрганизация КАК КорОрганизация,
		|		Т.ТипЗаписи КАК ТипЗаписи,
		|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.Организация В(&МассивОрганизаций)
		|		И Т.Активность
		|		И НЕ (Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей))
		|		И НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры,
		|		Т.РазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация,
		|		Т.КорАналитикаУчетаНоменклатуры,
		|		Т.КорРазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		Т.КорОрганизация,
		|		Т.ТипЗаписи,
		|		Т.ХозяйственнаяОперация,
		|		-Т.Количество
		|	ИЗ
		|		ВТКэшСебестоимостьТоваров КАК Т
		|	ГДЕ
		|		НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	Т.Регистратор
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|";
		
		ПроизводственныеДокументыБезВидаЗапасов = Новый Массив;
		//++ НЕ УТ
		// В движениях данных документов по себестоимости измерение "Вид запасов"
		// - не заполняется при проведении документов,
		// - подбирается при расчете партий (на этапе заполнения партий).
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"));
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"));
		//-- НЕ УТ
		
		Запрос.УстановитьПараметр("ПроизводственныеДокументыБезВидаЗапасов", ПроизводственныеДокументыБезВидаЗапасов);
		
		Запрос.Выполнить();
		
		РезультатЗапроса = ВыбратьМоментыВремениРегистраторов(ПараметрыРасчета, "ВТИзмененныеПервичныеДвижения");
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			РезультатЗапроса,
			НСтр("ru='Изменилось количество в первичных движениях'"));
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияНепересчитываемыхТипов, ВТИзмененныеПервичныеДвижения");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ФормированиеДвижений

Процедура СформироватьДвиженияПоРегиструПоДаннымЗапроса(ПараметрыРасчета, ИмяРегистра, Запрос) Экспорт

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Добавим движение в соответствии с логикой выполняемого сейчас механизма расчета.
		Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
			ПараметрыРасчета,
			ИмяРегистра,
			Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ОписаниеРегистра, ДанныеДвижения, КопируемыеПоля = Неопределено) Экспорт
	
	// При необходимости кэшируем сформированную порцию движений из таблицы значений во временную таблицу
	Если ОписаниеРегистра.Таблица.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра, Ложь);
	КонецЕсли;
	
	// Добавим новую строку в таблицу движений и заполним ее поля
	Запись = ОписаниеРегистра.Таблица.Добавить();
	
	Если ЗначениеЗаполнено(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля); // только требуемые поля
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения); // все поля
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

#КонецОбласти

#Область ЗаписьДвижений

// Записывает сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета = Неопределено) Экспорт
	
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий Тогда
		
		// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));
		
		// Восстановим временные таблицы с отборами по всем организациям
		ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			
			// Возврат в механизм расчета партий из расчета себестоимости
			ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);
			
			// Восстановим все расчетные кэши остатков и оборотов по всем организациям
			ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
			
			Возврат; // записывать движения нужно или в конце расчета партий, или в конце отдельного расчета себестоимости
			
		КонецЕсли;
		
		// Удалим данные регистров, которые использовались в расчете себестоимости только для чтения их кэшей.
		Для Каждого КлючИЗначение Из РасчетСебестоимости.ИспользуемыеКэшиРегистровПартионногоУчета() Цикл
			УничтожитьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяет отсутствие ошибок в сформированных движениях.
	ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета);
	
	// Записывает движения и формирует временную таблицу ВТИзмененныеДокументы
	НачалоЗаписиДвижений(ПараметрыРасчета);

	//++ НЕ УТ
	
	// Если движения пишутся фоновыми заданиями, то можно параллельно запустить отражение документов в учете.
	// (если движения пишутся без фоновых заданий, то к этому моменту они уже записаны)
	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ПредварительныйРасчет)
	 ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
		// Формирует движения по служебным регистрам регламентированного учета
		ЗарегистрироватьКОтражениюВРегламентированномУчете(ПараметрыРасчета);
		//++ НЕ УТКА
		Если ПараметрыРасчета.ФО.ИспользоватьМеждународныйФинансовыйУчет Тогда
			// Формирует движения по служебным регистрам международного учета
			ЗарегистрироватьКОтражениюВМеждународномУчете(ПараметрыРасчета);
		КонецЕсли;
		//-- НЕ УТКА
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИзмененныеДокументы");
	КонецЕсли;
	//-- НЕ УТ
	
	// Ожидает окончания заданий записи для последующей проверки корректности результатов расчета
	ЗавершениеЗаписиДвижений(ПараметрыРасчета);
	
	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ПредварительныйРасчет)
	 ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
	 	// Проверяет корректность остатков в конце отдельного фактического расчета себестоимости или в конце расчета партий
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	// Отметим в "регистрах-последовательностях" текущий период как рассчитанный
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда 
		
		Если НЕ ПараметрыРасчета.Отладка.НеСдвигатьПериодПоОкончанииРасчета
			И ПараметрыРасчета.Свойство("ИсходныеЗаданияКРасчетуСебестоимости") Тогда
			УвеличитьПериодРасчетаСебестоимости(
				ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ИсходныеЗаданияКРасчетуСебестоимости,
				ПараметрыРасчета);
		КонецЕсли;
		
		СформироватьЗаданияКРаспределениюНДС(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.МассивОрганизаций);
		
		СформироватьЗаданияКФормированиюЗаписейКнигиПокупокПродаж(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.МассивОрганизаций);
		
	КонецЕсли;
	
	Если ПротоколыРасчета <> Неопределено Тогда
		// Сохраним идентификатор протокола в массив протоколов
		ПротоколыРасчета.Добавить(ПротоколРасчетаПартийИСебестоимости.ИдентификаторПротокола(ПараметрыРасчета));
	КонецЕсли;
	
	ОкончаниеРасчета(ПараметрыРасчета);
	
КонецПроцедуры

// Запускает процесс записи новых движений.
//
Процедура НачалоЗаписиДвижений(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЗаписиДвижений(ПараметрыРасчета);
	
	ОбработаноРегистров = 0;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подсчитаем количество документов с измененными движениями
		КоличествоДокументов = РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы");
		
		ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(
			ПараметрыРасчета,
			КлючИЗначение.Ключ,
			КоличествоДокументов);
		
		Если КоличествоДокументов > 0 Тогда
			
			// Шаблоны для замены в тексте запроса
			ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
				|		Т."));
			ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
			
			ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
				|		Т."));
			ТекстПоляСортировки = "Т.Регистратор, Т.Период"
				+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
				+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
				+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
			
			Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
				НеВременныеЗаписиБаланса =
					"	И НЕ Т.ВидИсточника В (
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса),
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости))";
			Иначе
				НеВременныеЗаписиБаланса = "";
			КонецЕсли;
			
			// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
			СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Сформируем ВТКэшОчищаемыеДокументы
			СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Подготовим данные для очистки старых движений
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТКэшОчищаемыеДокументы КАК Т";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ < 2 Тогда
				
				// Запишем движения синхронно, без фоновых заданий.
				
				// Очистим старые движения у выбранных регистраторов
				ЗаписатьДвиженияПоРегистру(
					РезультатЗапроса,
					ОписаниеРегистра.МенеджерРегистра,
					ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа
				Запрос.Текст =
				"ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	%ПолноеИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	%ОтборПоОрганизации
				|	%ОтборПоСлужебнымРеквизитам
				|	%НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляКэшаРегистра
				|ИЗ
				|	ВТКэш%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	%Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
				
				// Отбор - первичные движения
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", 	 НеВременныеЗаписиБаланса);
				
				// Выберем движения
				Выборка = Запрос.Выполнить().Выбрать();
				
				ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , Выборка.Количество());
				
				Попытка
					ЗаписатьДвиженияПоРегистру(
						Выборка,
						ОписаниеРегистра.МенеджерРегистра,
						ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
				Исключение
					
					// Информацию об ошибке добавим в протокол расчета.
					// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
					ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
						ПараметрыРасчета,
						Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
						ТекстДляПротокола);
					
				КонецПопытки;
				
			Иначе
					
				// Запишем движения асинхронно, в фоновых заданиях.
				
				Если ПараметрыРасчета.УправлениеИтогами.ОтключатьИтогиПередЗаписью Тогда
					Если ОписаниеРегистра.ЕстьСвойствоВидДвижения // это регистр остатков
				 	 И ОписаниеРегистра.МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда
						ОписаниеРегистра.МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Ложь); // отключим итоги
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Очистим старые движения движения у выбранных регистраторов.
					ЗапуститьЗаданиеЗаписи(
						ПараметрыРасчета,
						ОписаниеРегистра,
						РезультатЗапроса.Выгрузить(),
						НСтр("ru='Расчет партий и себестоимости, очистка старых движений.'"));
					
				КонецЕсли;
				
				// Деление регистраторов на порции для параллельной записи:
				// - размер порции будет примерно соответствовать ограничению на максимальный размер таблицы значений
				// - один документ не может присутствовать в нескольких порциях - иначе одно задание записи затрет результаты другого
				// - "большие" документы пишутся по одному документу на порцию - считаем, что движения документа всегда "поместятся" в таблицу значений
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор   		  	КАК Регистратор,
				|	СУММА(Т.КоличествоДвижений) КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТДвиженияДокументов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор   КАК Регистратор,
				|		СУММА(1) 						  КАК КоличествоДвижений
				|	ИЗ
				|		%ПолноеИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	ГДЕ
				|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|		%ОтборПоОрганизации
				|		%ОтборПоСлужебнымРеквизитам
				|		%НеВременныеЗаписиБаланса
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Т.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|	СГРУППИРОВАТЬ ПО
				|		Т.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэш%ИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	) КАК Т
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Регистратор
				|";

				// Отбор - первичные движения
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);
				
				Запрос.Выполнить();
				
				// Разделим регистраторы на порции для записи.
				ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
					ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗ,
					"КоличествоДвижений", "КоличествоДвижений УБЫВ, Регистратор",, "НомерПорции");
				
				МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТДвиженияДокументов");
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор КАК Регистратор
				|ПОМЕСТИТЬ ВТРегистраторыТекущейПорции
				|ИЗ
				|	ВТДвиженияДокументов КАК Т
				|ГДЕ
				|	Т.НомерПорции = &НомерПорции
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Регистратор
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	%ПолноеИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	%ОтборПоОрганизации
				|	%ОтборПоСлужебнымРеквизитам
				|	%НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляКэшаРегистра
				|ИЗ
				|	ВТКэш%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	%Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
				
				// Отбор - первичные движения
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НеВременныеЗаписиБаланса", 	 НеВременныеЗаписиБаланса);
					
				Для НомерПорции = 1 По МаксНомерПорции Цикл
					
					// Выберем очередную порцию движений.
					Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
					
					ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
					
					УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТРегистраторыТекущейПорции");
					
					Если ТаблицаДвижений.Количество() = 0 Тогда
						Продолжить; // в эту порцию ничего не попало
					КонецЕсли;
					
					ПротоколРасчетаПартийИСебестоимости.ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , ТаблицаДвижений.Количество());
					
					// Запишем новые движения.
					ЗапуститьЗаданиеЗаписи(
						ПараметрыРасчета,
						ОписаниеРегистра,
						ТаблицаДвижений,
						НСтр("ru='Расчет себестоимости, запись движений.'"));
					
				КонецЦикла;
				
				УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияДокументов");
				
			КонецЕсли; // пишем в фоновых заданиях
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
			
		КонецЕсли; // есть измененные документы
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
		//++ НЕ УТ
		// Добавим ВТКэшИзмененныеДокументыКОтражению текущего регистра в общую таблицу ВТИзмененныеДокументы 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор     КАК Регистратор,
		|	Т.Организация     КАК Организация,
		|	Т.Период     	  КАК Период,
		|	""%ИмяРегистра""  КАК ИмяРегистра,
		|	&ВлияетНаПроводки КАК ВлияетНаПроводки
		|ПОМЕСТИТЬ %ИмяВременнойТаблицы
		|ИЗ
		|	ВТКэшИзмененныеДокументыКОтражению КАК Т";
		
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		Запрос.УстановитьПараметр("ВлияетНаПроводки",
			ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя
			И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя);
		
		ОбработаноРегистров = ОбработаноРегистров + 1;
		
		Если ОбработаноРегистров = 1 Тогда
			
			// Создадим временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВременнойТаблицы", "ВТИзмененныеДокументы");
			Запрос.Выполнить();
			
		Иначе
			
			// Дополним временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВременнойТаблицы", "ВТНоваяПорцияИзмененныхДокументов");
			Запрос.Выполнить();
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				"ВТНоваяПорцияИзмененныхДокументов",
				"ВТИзмененныеДокументы",
				"%1Регистратор, %1Организация, %1Период, %1ИмяРегистра, %1ВлияетНаПроводки",
				"");
				
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНоваяПорцияИзмененныхДокументов");
			
		КонецЕсли;
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ
	КонецЦикла;
	
	Если ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ < 2 Тогда
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Завершает процесс многопоточной записи движений.
//
Процедура ЗавершениеЗаписиДвижений(ПараметрыРасчета)
	
	Если ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ < 2 Тогда
		// Запись уже закончена - выполнялась в один поток, без фоновых заданий
		Возврат;
	КонецЕсли;
	
	// Если движения пишутся фоновыми заданиями, то дождемся окончания всех заданий
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, Истина);
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ
	 ИЛИ ПараметрыРасчета.Отладка.РегистраторыВФЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Свернуть("ИмяРегистра, Регистратор", "Количество");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Сортировать("Количество Убыв, ИмяРегистра, Регистратор");
	
	Если ПараметрыРасчета.Отладка.РегистраторыВФЗ[0].Количество > 1 Тогда
		
		ТекстДляПротокола =	НСтр("ru = 'Некорректно выполнено разделение движений на порции для многопоточной записи.
			|Движения могут быть записаны некорректно.'");
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
	КонецЕсли;
	
КонецПроцедуры


// Выполняет запись движений документов по указанному регистру в фоновом задании.
//
// Параметры:
//	Таблица - ТаблицаЗначений - движения по регистру, упорядоченные по регистратору
//		Если в таблице есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	КоличествоЗаписейВНЗ - Число - количество записей в наборе, при достижении которого выполняется запись набора
//	ПредыдущееЗадание - УникальныйИдентификатор - идентификатор задания, записывающего предыдущую порцию движений по этому регистру
//		Если идентификатор указан, то перед записью этой порции надо дождаться окончания предыдущей.
//
Процедура ЗаписатьДвиженияПоРегиструФоновымЗаданием(Таблица, МенеджерРегистра, КоличествоЗаписейВНЗ, ПредыдущееЗадание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПредыдущееЗадание) Тогда
		// Подождем завершения предыдущего задания.
		// Даже если оно почему-то завершилось с ошибкой, все равно запишем текущую порцию.
		// Тогда, при перезапуске расчета, движения текущей порции уже будут в ИБ, перезаписывать их уже будет не надо.
		// Т.о. при перезапуске расчета будут только дописаны движения, которые "не смогли" дописать упавшие задания.
		// Результат завершения предыдущего задания будет обработан централизованно, в ОжидатьЗавершенияФоновогоЗадания()
		Попытка
			ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПредыдущееЗадание).ОжидатьЗавершения();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьДвиженияПоРегистру(Таблица, МенеджерРегистра, КоличествоЗаписейВНЗ, Истина);
	
КонецПроцедуры

// Выполняет запись движений документов по указанному регистру.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса или ТаблицаЗначений
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	КоличествоЗаписейВНЗ - Число - количество записей в наборе, при достижении которого выполняется запись набора
//	ВФоновомЗадании - Булево - признак того, что запись выполняется в фоновом задании
//
Процедура ЗаписатьДвиженияПоРегистру(ИсходныеДанные, МенеджерРегистра, КоличествоЗаписейВНЗ, ВФоновомЗадании = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоличествоЗаписейВНЗ) Тогда
		// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла
		Возврат; 
	КонецЕсли;
	
	// Приведем исходные данные к типу выборки из запроса или таблицы значений
	Если ТипЗнч(ИсходныеДанные) = Тип("Запрос") Тогда
		ИсточникДанных = ИсходныеДанные.Выполнить().Выбрать(); // выборка
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ИсточникДанных = ИсходныеДанные.Выбрать(); // выборка
	Иначе
		ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	КонецЕсли;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;
	
	// Если в источнике нет обязательных для регистра колонок, например, Период,
	// то считаем, что переданы регистраторы, у которых надо просто очистить движения.
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		ТолькоОчищатьЗаписи = (ИсточникДанных.Владелец().Колонки.Найти("Период") = Неопределено);
	Иначе // источник данных - это таблица значений
		ТолькоОчищатьЗаписи = (ИсточникДанных.Колонки.Найти("Период") = Неопределено);
	КонецЕсли;
	
	ОписаниеОшибокЗаписи = "";
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор    = Неопределено;
	НомерПорцииЗаписи     = 1;
	
	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл
		
		Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
			КонецЕсли;
			
			ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
		ИначеЕсли НЕ ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= КоличествоЗаписейВНЗ Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям
			ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если НЕ ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		ВызватьИсключение ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		
	КонецЕсли;
	
КонецПроцедуры

// Получает следующую порцию из выборки или следующую строку из таблицы значений.
//
Функция ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника)
	
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		
		Если ИсточникДанных.Следующий() Тогда
			ПорцияДанныхИсточника = ИсточникДанных; // данные хранятся в полях самой выборки
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	Иначе // источник данных - это таблица значений
		
		Если ПорцияДанныхИсточника = Неопределено Тогда
			ИндексСтроки = 0;
		Иначе
			ИндексСтроки = ИсточникДанных.Индекс(ПорцияДанныхИсточника) + 1;
		КонецЕсли;
		
		Если ИндексСтроки < ИсточникДанных.Количество() Тогда
			ПорцияДанныхИсточника = ИсточникДанных[ИндексСтроки]; // следующая строка
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина; // новая порция данных помещена в ПорцияДанныхИсточника
	
КонецФункции

// Выполняет запись переданного набора записей.
//
Процедура ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ОписаниеОшибокЗаписи)
	
	Попытка
		НаборЗаписей.Записать(Замещать);
	Исключение
		
		Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка записи движений документа ""%1"":
				|%2'"),
			СокрЛП(Регистратор),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если СтрЧислоСтрок(ОписаниеОшибокЗаписи) < 100 Тогда
			ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + ?(ПустаяСтрока(ОписаниеОшибокЗаписи), "
				|", "") + ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_МаркированныйСписок() + ОписаниеОшибки + "
				|";
		Иначе
			// Получается слишком большое сообщение об ошибке.
			// Скорее всего записи в нем будут однотипные - незачем выводить их все.
			Если СтрНайти(ОписаниеОшибокЗаписи, "...") = 0 Тогда
				ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + "
					|" + ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_МаркированныйСписок() + " ...";
			КонецЕсли;
		КонецЕсли;
		
	КонецПопытки;
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

// Проверяет необходимость записи сформированных движений регистра в зависимости от выполняемого варианта расчета.
//
Функция НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра)
	
	// При предварительном расчете себестоимости пересчитывается только стоимость товаров.
	// Движения по всем остальным регистрам остаются без изменений.
	Если НЕ ПараметрыРасчета.ЗапущенРасчетПартий И ПараметрыРасчета.ПредварительныйРасчет
	 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Формирует временную таблицу ВТКэшСтарыеДокументы - документы, у которых были "старые" расчетные движения
//
Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшСтарыеДокументы",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра);
		
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	%ОтборПоОрганизации
	|	%ОтборПоСлужебнымРеквизитам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	// Отбор - расчетные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшИзмененныеДокументы - документы, у которых изменились расчетные движения
//
Процедура СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшИзмененныеДокументы",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшСтарыеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра);
	
	// Шаблоны для замены в тексте запроса
	ТекстОтборНепустыхРесурсов 		 = "";
	ТекстГруппировкаПолей 	   		 = "";
	ТекстПоляОсновнойТаблицыРегистра = ""; // ресурсы с "минусом"
	ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
		|		Т.")); // ресурсы с "плюсом
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.РесурсыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляОсновнойТаблицыРегистра = ТекстПоляОсновнойТаблицыРегистра 
			+ ?(ТекстПоляОсновнойТаблицыРегистра = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	// Заменим значение поля ВидДвижения основной таблицы регистра на булево значение; ресурсы с "минусом"
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоляОсновнойТаблицыРегистра);
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
		
	// Выбор регистраторов, у которых есть хоть какие-то отличия в старых и новых движениях
	// Будут перезаписаны движения только этих регистраторов
	//++ НЕ УТ
	// и только эти регистраторы будут зарегистрированы для формирования проводок
	//-- НЕ УТ
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//++ НЕ УТ
	|	%ПолеОрганизации
	|	Т.Период КАК Период,
	//-- НЕ УТ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКэш%ИмяРегистра_МоментыВремени
	|ИЗ
	|	(ВЫБРАТЬ // новые расчетные движения, с плюсом
	|		%ПоляКэшаРегистра
	|	ИЗ
	|		ВТКэш%ИмяРегистра КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // старые расчетные движения, с минусом
	|		%ПоляОсновнойТаблицыРегистра
	|	ИЗ
	|		%ПолноеИмяРегистра КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|			ПО Т.Регистратор = СтарыеДокументы.Регистратор
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		%ОтборПоОрганизации
	|		%ОтборПоСлужебнымРеквизитам
	|	) КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|";
	
	//++ НЕ УТ
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ТекстПоляОрганизации = "Т.Организация КАК Организация,";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда 
		ТекстПоляОрганизации = "Т.АналитикаУчетаПоПартнерам.Организация КАК Организация,";	
	Иначе		
		ТекстПоляОрганизации = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,";	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолеОрганизации",		 	 ТекстПоляОрганизации);
	
	ТекстВТКэшИзмененныеДокументыКОтражению = "
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация 	КАК Организация,
	|	Т.Период 		КАК Период,
	|	Т.Регистратор 	КАК Регистратор
	|ПОМЕСТИТЬ ВТКэшИзмененныеДокументыКОтражению
	|ИЗ
	|	ВТКэш%ИмяРегистра_МоментыВремени КАК Т";
	
	Запрос.Текст = Запрос.Текст + ТекстВТКэшИзмененныеДокументыКОтражению;
	//-- НЕ УТ
	
	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",			 ТекстПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей",			 ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов",		 ТекстОтборНепустыхРесурсов);
	
	// Отбор - расчетные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	Если ОписаниеРегистра.ЕстьОрганизация И НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&МассивОрганизаций)", "(&МассивОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	СформироватьТаблицуМоментовВремени(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра + "_МоментыВремени",
		,
		"ВТКэшИзмененныеДокументы");
		
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеРегистра.ИмяРегистра + "_МоментыВремени");
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшДвиженияДругихПериодовИлиОрганизаций - движения измененных документов по
// периодам или организациям, не входящим в параметры расчета.
//
Процедура СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	МогутБытьДвиженияПоДругимПериодамИлиОрганизациям = 
		(ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Количество() > 0);
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшДвиженияДругихПериодовИлиОрганизаций",
		НСтр("ru='Регистр'") + ": " + ОписаниеРегистра.ИмяРегистра,
		?(МогутБытьДвиженияПоДругимПериодамИлиОрганизациям, "ВТКэшИзмененныеДокументы", ""));
	
	Если МогутБытьДвиженияПоДругимПериодамИлиОрганизациям Тогда
		
		// По этому регистру есть регистраторы с движениями по другим периодам и/или организациям.
		// Сохраним такие движения во временной таблице ВТКэшДвиженияДругихПериодовИлиОрганизаций.
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "ИЛИ (НЕ (Т.Организация В (&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			ОтборПоОрганизации = ОтборПоОрганизации + ")";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор))";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		ОтборПоТипамРегистраторов = "";
		Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов + ?(ОтборПоТипамРегистраторов = "", "", ", ")
				+ "ТИП(Документ." + КлючИЗначение.Ключ.Имя + ")";
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТОтборПоРегистраторам
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (%ОтборПоТипамРегистраторов)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоРегистраторам КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|	%ОтборПоОрганизации
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТОтборПоРегистраторам
		|";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   	   ОтборПоОрганизации);
		
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
	Иначе
		
		// По этому регистру не может быть регистраторов с движениями по другим периодам и/или организациям.
		// Создадим пустую временную таблицу с полями, идентичными полям регистра.
		
		Запрос.УстановитьПараметр("ПустаяТаблицаРегистра", ОписаниеРегистра.МенеджерРегистра.СоздатьНаборЗаписей().Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	&ПустаяТаблицаРегистра КАК Т";
		
	КонецЕсли;
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
		|		Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшОчищаемыеДокументы - документы, у которых не осталось расчетных движений
//
Процедура СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшОчищаемыеДокументы",
		НСтр("ru='Регистр'") + ": "  + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшИзмененныеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра + ", ВТКэшДвиженияДругихПериодовИлиОрганизаций");
	
	// Выберем регистраторы, у которых (по И)
	// - есть только старые движения расчета себестоимости (нет "первичных движений")
	// - нет новых движений расчета себестоимости
	// - нет движений по другим периодам и/или организациям
	// Для таких документов надо просто очистить их движения - записать пустой набор.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыСНовымиДвижениями
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ИЗ
	|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыБезНовыхДвижений
	|ИЗ
	|	ВТКэшИзмененныеДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСНовымиДвижениями КАК ДокументыСНовымиДвижениями
	|		ПО Т.Регистратор = ДокументыСНовымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСНовымиДвижениями.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыСПервичнымиДвижениями
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
	|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	%ОтборПоСлужебнымРеквизитам
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшОчищаемыеДокументы
	|ИЗ
	|	ВТДокументыБезНовыхДвижений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСПервичнымиДвижениями КАК ДокументыСПервичнымиДвижениями
	|		ПО Т.Регистратор = ДокументыСПервичнымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСПервичнымиДвижениями.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСНовымиДвижениями
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыБезНовыхДвижений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСПервичнымиДвижениями";
	
	// Отбор - первичные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, , Истина, Ложь, Ложь, );
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры


// Отладочная процедура - очистка всех движений, сформированных предыдущим расчетом.
// Может выполняться достаточно долго, поэтому рекомендуется только для целей отладки.
//
Процедура ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ОчиститьСтарыеДвиженияРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		//++ НЕ УТ
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ
		
		// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
		СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшОчищаемыеДокументы
		СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подготовим данные для очистки движений документов, не имеющих первичных движений
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТКэшОчищаемыеДокументы КАК Т";
		
		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
		
		// Шаблоны для замены в тексте запроса
		ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
			|		Т."));
		ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
			|		Т."));
		ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
		
		ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
			|		Т."));
		ТекстПоляСортировки = "Т.Регистратор, Т.Период"
			+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
			+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
			+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
		
		// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
		//	- "первичные" движения документа в периоде расчета
		//	- непересчитываемые движения документа
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	%ПолноеИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	%ОтборПоОрганизации
		|	%ОтборПоСлужебнымРеквизитам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	%Порядок";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", 					 ТекстПоляСортировки);
		
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
		
		ЗаписатьДвиженияПоРегистру(Запрос, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета,
			"ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы, ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры


// Запускает новое задание многопоточной записи движений.
//
Процедура ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, ТаблицаДвижений, ОписаниеЗадания = "") Экспорт
	
	// Если накопилось много незавершенных заданий записи движений, то подождем, пока хоть одно завершится.
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета);
	
	// Определим, должно ли новое задание ожидать завершения предыдущего
	ПредыдущееЗадание = Неопределено; // идентификатор задания записи предыдущей порции этого регистра
	
	Если ПараметрыРасчета.ОграниченияФЗ.ПоследовательнаяЗаписьРегистра
	 И ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи.Количество() > 0 Тогда
		ПоследняяСтрока = ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи[ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи.Количество() - 1];
		Если ПоследняяСтрока.ИмяРегистра = ОписаниеРегистра.ИмяРегистра Тогда
			ПредыдущееЗадание = ПоследняяСтрока.ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;

	// Подготовим и запустим новое задание записи.
	ПараметрыРасчета.ОбщееКоличествоФЗ = ПараметрыРасчета.ОбщееКоличествоФЗ + 1;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ТаблицаДвижений); // таблица первичных и расчетных движений
	ПараметрыОбработчикаЗадания.Добавить(ОписаниеРегистра.МенеджерРегистра); // менеджер регистра
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ); // порция записи
	ПараметрыОбработчикаЗадания.Добавить(ПредыдущееЗадание); // ожидать завершения этого задания
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ФЗ №%1 - %2 (%3)'"),
		СокрЛП(ПараметрыРасчета.ОбщееКоличествоФЗ),
		ОписаниеРегистра.ИмяРегистра,
		СокрЛП(Новый УникальныйИдентификатор));
		
	// Запустим задание и запомним его идентификатор в стеке и общей таблице заданий записи
	НовоеЗадание = ФоновыеЗадания.Выполнить(
		"УниверсальныеМеханизмыПартийИСебестоимости.ЗаписатьДвиженияПоРегиструФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		ОписаниеЗадания);
	
	ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи.Добавить(НовоеЗадание.УникальныйИдентификатор);
	
	ПоследняяСтрока = ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи.Добавить();
	ПоследняяСтрока.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	ПоследняяСтрока.ПредыдущееЗадание 	 = ПредыдущееЗадание;
	ПоследняяСтрока.ИмяРегистра 		 = ОписаниеРегистра.ИмяРегистра;
	ПоследняяСтрока.КоличествоДвижений	 = ТаблицаДвижений.Количество();
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРегистраторов = ТаблицаДвижений.Скопировать(, "Регистратор");
	ТаблицаРегистраторов.Свернуть("Регистратор", "");
	
	Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
		НовСтр = ПараметрыРасчета.Отладка.РегистраторыВФЗ.Добавить();
		НовСтр.ИмяРегистра = ОписаниеРегистра.ИмяРегистра;
		НовСтр.Регистратор = ТекСтр.Регистратор;
		НовСтр.Количество = 1;
	КонецЦикла;
	
КонецПроцедуры

// Ожидает завершения одного или всех заданий в очереди записи движений.
//
Процедура ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, ЗавершениеВсехЗаданий = Ложь)
	
	Если ЗавершениеВсехЗаданий
	 ИЛИ ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи.Количество() >= ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ Тогда
		
		// Если размер очереди заданий записи достиг максимума, то удалим из очереди завершенные задания
		НомерЗадания = 0;
		
		Пока НомерЗадания < ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи.Количество() Цикл
			
			Если НЕ ЗавершениеВсехЗаданий Тогда
				Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НомерЗадания = НомерЗадания + 1; // движения еще записываются
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания);
			
		КонецЦикла;
		
		Если ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи.Количество() >= ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ Тогда
			// Если в очереди нет завершенных заданий, то подождем пока освободится хотя бы одно место в очереди.
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, 0); // самое старое задание
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершениеВсехЗаданий Тогда
		// В случае, когда ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗ > 1
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Ожидает завершения указанного фонового задания.
//
Функция ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания)
	
	Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Попытка
			Задание.ОжидатьЗавершения();
		Исключение
			// Возвращается неинформативная ошибка "Выполнение одного или нескольких заданий завершилось с ошибкой"
		КонецПопытки;
		
		// Чтобы узнать статус завершенного задания надо получить его повторно
		Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
		
	КонецЕсли;
	
	Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда // запись движений не выполнилась
		
		Если Задание.Состояние = Неопределено Тогда
			
			// Задание не найдено в списке фоновых заданий.
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.'"),
				"""" + СокрЛП(Задание.Ключ) + """");
			
		Иначе
			
			// Состояние задания "ЗавершеноАварийно" или "Отменено".
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 %2:
				|%3'"),
				"""" + СокрЛП(Задание.Ключ) + """",
				?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru='отменено'"), НСтр("ru='завершено аварийно'")),
				?(Задание.ИнформацияОбОшибке = Неопределено,
					НСтр("ru='<Нет описания ошибки>'"),
					ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
			
		КонецЕсли;
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи.Удалить(НомерЗадания); // закончено
	
КонецФункции

// Получает фоновое задание по его номеру в очереди.
//
Функция ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания)
	
	Идентификатор = ПараметрыРасчета.ОграниченияФЗ.СтекЗаданийЗаписи[НомерЗадания];
	Задание 	  = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Если Задание = Неопределено Тогда
		
		СтрокаЗадания = ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи.Найти(Идентификатор, "ИдентификаторЗадания");
		
		Если СтрокаЗадания = Неопределено Тогда
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ФЗ №? (%1)'"),
				СокрЛП(Идентификатор));
			
		Иначе
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ФЗ №%1 - %2 (%3)'"),
				СокрЛП(ПараметрыРасчета.ОграниченияФЗ.ТаблицаЗаданийЗаписи.Индекс(СтрокаЗадания) + 1),
				СтрокаЗадания.ИмяРегистра,
				СокрЛП(Идентификатор));
			
		КонецЕсли;
		
		Задание = Новый Структура("Состояние, Ключ", Неопределено, КлючЗадания);
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

//++ НЕ УТ

// Регистрирует документы с изменившимися движениями к отражению в регламентированном учете.
//
Процедура ЗарегистрироватьКОтражениюВРегламентированномУчете(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ЗарегистрироватьКОтражениюВРегламентированномУчете");
	
	// Дополним перечень измененных документов документами внеоборотных активов
	// Для полученного перечня документов установим признак необходимости повторного отражения в учете
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизаций.АналитикаРасходов КАК Объект
	|ПОМЕСТИТЬ ВТВнеоборотныеАктивы
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТоварыОрганизаций.Активность
	|	И ТоварыОрганизаций.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	И ТоварыОрганизаций.Организация В(&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.АналитикаРасходов
	|ИЗ
	|	ВТКэшРасчетныеОборотыСебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.СтатьяРасходовСписания.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Ссылка 					  КАК Документ,
	|	ДокументыКОтражению.Организация 			  КАК Организация,
	|   НАЧАЛОПЕРИОДА(ДокументыКОтражению.Дата, ДЕНЬ) КАК ДатаОтражения
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК Ссылка,
	|		ДанныеДокумента.Ссылка.Дата КАК Дата,
	|		ДанныеДокумента.Ссылка.Организация КАК Организация
	|	ИЗ
	|		ВТВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС.ОС КАК ДанныеДокумента
	|			ПО ВнеоборотныеАктивы.Объект = ДанныеДокумента.ОсновноеСредство
	|	ГДЕ
	|		ДанныеДокумента.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДанныеДокумента.Ссылка.Проведен
	|		И ДанныеДокумента.Ссылка.Организация В(&МассивОрганизаций)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка,
	|		ДанныеДокумента.Ссылка.Дата,
	|		ДанныеДокумента.Ссылка.Организация
	|	ИЗ
	|		ВТВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МодернизацияОС.ОС КАК ДанныеДокумента
	|			ПО ВнеоборотныеАктивы.Объект = ДанныеДокумента.ОсновноеСредство
	|	ГДЕ
	|		ДанныеДокумента.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДанныеДокумента.Ссылка.Проведен
	|		И ДанныеДокумента.Ссылка.Организация В(&МассивОрганизаций)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка,
	|		ДанныеДокумента.Ссылка.Дата,
	|		ДанныеДокумента.Ссылка.Организация
	|	ИЗ
	|		ВТВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуНМА КАК ДанныеДокумента
	|			ПО ВнеоборотныеАктивы.Объект = ДанныеДокумента.НематериальныйАктив
	|	ГДЕ
	|		ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДанныеДокумента.Ссылка.Проведен
	|		И ДанныеДокумента.Ссылка.Организация В(&МассивОрганизаций)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИзмененныеДокументы.Регистратор,
	|		ИзмененныеДокументы.Период,
	|		ИзмененныеДокументы.Организация
	|	ИЗ
	|		ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО ИзмененныеДокументы.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
	|	ГДЕ
	|		ИзмененныеДокументы.ВлияетНаПроводки
	|		И ЕСТЬNULL(ДокументыРасчетаСебестоимости.Организация, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	) КАК ДокументыКОтражению
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|";
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ДокументыКОтражению");
	РезультатЗапроса = Запрос.Выполнить();
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ) Тогда
			// Для отладки - расчет без изменения данных ИБ
		Иначе
			// Передадим временную таблицу ДокументыКОтражению
			РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(Запрос.МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТВнеоборотныеАктивы, ДокументыКОтражению");
	
КонецПроцедуры

//-- НЕ УТ

//++ НЕ УТКА

// Регистрирует документы с изменившимися движениями к отражению в международном учете.
//
Процедура ЗарегистрироватьКОтражениюВМеждународномУчете(ПараметрыРасчета)
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ЗарегистрироватьКОтражениюВМеждународномУчете");
	
	// Дополним общую таблицу ВТИзмененныеДокументы документами внеоборотных активов
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятияКУчету.Организация КАК Организация,
	|	ПринятияКУчету.Дата КАК Период,
	|	ПринятияКУчету.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОтражению
	|ИЗ
	|	Документ.ПринятиеКУчетуНМАМеждународныйУчет КАК ПринятияКУчету
	|ГДЕ
	|	ПринятияКУчету.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПринятияКУчету.Проведен
	|	И ПринятияКУчету.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПринятияКУчету.Организация КАК Организация,
	|	ПринятияКУчету.Дата КАК Период,
	|	ПринятияКУчету.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуОСМеждународныйУчет КАК ПринятияКУчету
	|ГДЕ
	|	ПринятияКУчету.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПринятияКУчету.Проведен
	|	И ПринятияКУчету.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеДокументы.Организация КАК Организация,
	|	ИзмененныеДокументы.Период КАК Период,
	|	ИзмененныеДокументы.Регистратор
	|ИЗ
	|	ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|ГДЕ
	|	ИзмененныеДокументы.ВлияетНаПроводки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Период КАК Период,
	|	ИсходнаяТаблица.Регистратор КАК Регистратор,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ДанныеРегистра.Период, ВТДокументыКОтражению.Период) КАК Период,
	|		ВТДокументыКОтражению.Регистратор КАК Регистратор,
	|		ВТДокументыКОтражению.Организация КАК Организация,
	|		НАЧАЛОПЕРИОДА(ВТДокументыКОтражению.Период, ДЕНЬ) КАК ДатаОтражения
	|	ИЗ
	|		ВТДокументыКОтражению КАК ВТДокументыКОтражению
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|			ПО ВТДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|				И ВТДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|				И (ДанныеРегистра.Активность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияНоменклатураДоходыРасходы.Период КАК Период,
	|		ДвиженияНоменклатураДоходыРасходы.Регистратор,
	|		ДвиженияНоменклатураДоходыРасходы.Организация,
	|		НАЧАЛОПЕРИОДА(ДвиженияНоменклатураДоходыРасходы.Период, ДЕНЬ)
	|	ИЗ
	|		ВТКэшДвиженияНоменклатураДоходыРасходы КАК ДвиженияНоменклатураДоходыРасходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|			ПО ДвиженияНоменклатураДоходыРасходы.Регистратор = ИзмененныеДокументы.Регистратор
	|				И ДвиженияНоменклатураДоходыРасходы.Организация = ИзмененныеДокументы.Организация
	|				И ДвиженияНоменклатураДоходыРасходы.Период = ИзмененныеДокументы.Период
	|				И ИзмененныеДокументы.ИмяРегистра = ""ДвиженияНоменклатураДоходыРасходы""
	|				И (ДвиженияНоменклатураДоходыРасходы.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыОтПереоценкиТоваров),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров)))
	|
	|	) КАК ИсходнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходнаяТаблица.Период,
	|	ИсходнаяТаблица.Регистратор,
	|	ИсходнаяТаблица.Организация,
	|	ИсходнаяТаблица.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|";
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ДокументыКОтражению");
	РезультатЗапроса = Запрос.Выполнить();
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ) Тогда
			// Для отладки - расчет без изменения данных ИБ
		Иначе
			МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ПараметрыРасчета.МенеджерВременныхТаблиц);
		КонецЕсли;
		
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДокументыКОтражению, ДокументыКОтражению");
	
КонецПроцедуры

//-- НЕ УТКА

Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт
	Возврат "РасчетПартийИСебестоимости";
КонецФункции

#КонецОбласти

#Область ВосстановленияДвижений

// Перепроводит документы по нескольким регистрам накопления.
//
// Параметры:
//	ПараметрыРасчета - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, ИмяРегистра, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка
//		будут перепроведены по указанным регистрам накопления из поля ИмяРегистра.
//	РасшифровкаКодовОшибок - Соответствие - описание ошибок
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов
//
Процедура ПерепровестиДокументыПоОтдельнымРегистрамНакопления(ПараметрыРасчета, Запрос, РасшифровкаКодовОшибок, ПричинаПерепроведения) Экспорт
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьТаблицуМоментовВремени(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", "Ссылка"); // создает ВТМоментыВремени
	
	НовыйТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИмяРегистра 				 КАК ИмяРегистра,
	|	Т.Ссылка 	  				 КАК Ссылка,
	|	МоментыВремени.МоментВремени КАК МоментВремени
	|ИЗ
	|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
	|		ПО Т.Ссылка = МоментыВремени.Ссылка
	|ГДЕ
	|	НЕ (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров)
	|	ИЛИ (&ВключатьКорректировкиРегистров И (Т.Ссылка ССЫЛКА Документ.КорректировкаРегистров))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяРегистра,
	|	МоментВремени
	|
	|ИТОГИ ПО
	|	ИмяРегистра";
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = НовыйТекстЗапроса;
	
	// Если будем перепроводить документы, то корректировки регистров надо исключить, т.к. они не перепроводятся.
	Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров",
		ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если НЕ РезультатЗапроса.Пустой() И НЕ ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения Тогда
		
		// Обнаружены некорректные движения.
		ВыборкаРегистры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистры.Следующий() Цикл
			
			ОписаниеРегистра = ПараметрыРасчета.Движения[ВыборкаРегистры.ИмяРегистра];
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Обнаружены некорректные движения по регистру накопления ""%1"".
						|	  Причина: %2'"),
					ОписаниеРегистра.ИмяРегистра,
					ПричинаПерепроведения));
			
			// Перепроведем документы с некорректными движениями по текущему регистру.
			ВыборкаРегистраторы = ВыборкаРегистры.Выбрать();
			
			ВосстановитьДвиженияДокументовПоРегиструНакопления(
				ВыборкаРегистраторы,
				ОписаниеРегистра.ИмяРегистра,
				ПараметрыРасчета);
				
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Перепроведено документов: %1'"),
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеЗначения(ВыборкаРегистраторы.Количество())));
			
		КонецЦикла;
			
		УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями");
		
		// Повторно проанализируем движения после перепроведения документов - ожидаем, что теперь ошибок быть не должно.
		// Корректировки регистров включаем в результат - об их ошибках тоже надо сообщить.
		Запрос.УстановитьПараметр("ВключатьКорректировкиРегистров", Истина);
		
		ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями");
		
		Запрос.Текст =
			ИсходныйТекстЗапроса + "
			|;
			|" + НовыйТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		Если РезультатЗапроса.Пустой() Тогда // если остались ошибки - о них сообщим ниже, подробно
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				НСтр("ru='Все некорректные движения исправлены в результате перепроведения документов.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой()
	 ИЛИ РазмерВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями") > 0 Тогда
		
	 	// Остались некорректные записи, но выполнение расчета все равно продолжим.
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			ПротоколРасчетаПартийИСебестоимости.СлужебныйСимвол_БезНумерации()
				+ НСтр("ru='После перепроведения остались документы с некорректными движениями:'"));
		
		// Выведем детальную информацию об ошибках в движениях документов.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	МоментыВремени.МоментВремени КАК МоментВремени,
		|	Т.КодОшибки   				 КАК КодОшибки
		|ИЗ
		|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодОшибки,
		|	МоментВремени,
		|	ИмяРегистра
		|
		|ИТОГИ ПО
		|	КодОшибки";
		
		ВыборкаКодыОшибок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодыОшибок.Следующий() Цикл
			
			ТекстДляПротокола = РасшифровкаКодовОшибок[ВыборкаКодыОшибок.КодОшибки];
			
			Если НЕ ЗначениеЗаполнено(ТекстДляПротокола) Тогда
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='№%1, описание отсутствует'"),
					ВыборкаКодыОшибок.КодОшибки);
			КонецЕсли;
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
				"#- " + НСтр("ru='ошибка'")  + " """ + ТекстДляПротокола + """:");
			
			Выборка = ВыборкаКодыОшибок.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, регистр ""%2""'"),
					СокрЛП(Выборка.Ссылка),
					Выборка.ИмяРегистра);
				
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
					ТекстДляПротокола);
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	УничтожитьВременныеТаблицы(Запрос, "ВТРегистраторыСНекорректнымиДвижениями, ВТМоментыВремени");
	
КонецПроцедуры

// Перепроводит документы по одному регистру накопления.
//
// Параметры:
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//	ИмяРегистраНакопления - Строка - имя регистра накопления, по которому надо перепровести документы
//
Процедура ВосстановитьДвиженияДокументовПоРегиструНакопления(ВыборкаДокументов, ИмяРегистраНакопления, ПараметрыРасчета = Неопределено) Экспорт
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистраНакопления].СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ДополнительныеСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Регистратор = ВыборкаДокументов.Ссылка;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяРегистраНакопления + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			Блокировка.Заблокировать();
		
			ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(
				Регистратор,
				ДополнительныеСвойства,
				РежимПроведенияДокумента.Неоперативный);
				
			МетаданныеДокумента = ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента;
			
			Документы[МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(
				Регистратор,
				ДополнительныеСвойства,
				ИмяРегистраНакопления);
				
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Записывать = Истина;
			НаборЗаписей.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистраНакопления]);
			
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ ""%1"" по причине:
					|		%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ПараметрыРасчета = Неопределено Тогда
				ЗаписьЖурналаРегистрации(
					ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
					УровеньЖурналаРегистрации.Ошибка,
					Регистратор.Метаданные(),
					Регистратор,
					ТекстСообщения);
			Иначе
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
					ТекстСообщения,
					ТекстСообщения);
			КонецЕсли;
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КэшированиеДанныхРегистров

// Инициализирует данные общего параметра расчета, описывающие указанный регистр.
//
Процедура ИнициализироватьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	Если ПараметрыРасчета.Движения.Свойство(МетаданныеРегистра.Имя) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистр %1 уже инициализирован'"),
			МетаданныеРегистра.Имя);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
	
	// Создадим временную таблицу для кэширования всех новых движений регистра
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
		ОписаниеРегистра.Таблица,
		ОписаниеРегистра.ПоляКэшаРегистра);
		
	// Добавим описание регистра в параметры расчета
	ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);
	
	// Создадим временную таблицу для кэширования записей основной таблицы регистра
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	// Создадим временную таблицу для кэширования расчетных остатков
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Уничтожает данные из общего параметра расчета, описывающие указанный регистр.
//
Процедура УничтожитьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	ПараметрыРасчета.Движения.Удалить(МетаданныеРегистра.Имя);
	
КонецПроцедуры

// Формирует описание свойств и полей регистра, обслуживаемого механизмом расчета.
//
Функция СформироватьОписаниеРегистра(МетаданныеРегистра) Экспорт
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ИмяРегистра",          	  МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра",    	  МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления", 	  Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	
	ОписаниеРегистра.Вставить("ЕстьОрганизация", 		  МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ОрганизацияОбязательна",   ОписаниеРегистра.ЕстьОрганизация И МетаданныеРегистра.Измерения.Организация.ЗапрещатьНезаполненныеЗначения);
	ОписаниеРегистра.Вставить("ЕстьАналитикаПартнеров",   МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ЕстьТипЗаписи",		  	  МетаданныеРегистра.Реквизиты.Найти("ТипЗаписи") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетПартий",		  МетаданныеРегистра.Реквизиты.Найти("РасчетПартий") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетСебестоимости",  МетаданныеРегистра.Реквизиты.Найти("РасчетСебестоимости") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ИспользоватьВТКэш", 		  Истина); // при расчете кэша оборотов/остатков использовать ВТКэш
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	
	Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		МенеджерРегистра = РегистрыНакопления[ОписаниеРегистра.ИмяРегистра];
	Иначе
		МенеджерРегистра = РегистрыСведений[ОписаниеРегистра.ИмяРегистра];
	КонецЕсли;
	
	ОписаниеРегистра.Вставить("МетаданныеРегистра", 	  МетаданныеРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра", 		  МенеджерРегистра);
	ОписаниеРегистра.Вставить("ЕстьСвойствоВидДвижения",
		ОписаниеРегистра.ЭтоРегистрНакопления И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	
#Область РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях

	// В конфигурации есть документы, которые могут делать движения по регистру (и/или)
	//	- в разных расчетных периодах
	//	- по разным организациям
	// Для таких документов при расчете надо сохранять не только первичные движения в расчетном периоде,
	// но и все (первичные + расчетные) движения по другим периодам и организациям.
	
	ОписаниеРегистра.Вставить("РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях", Новый Соответствие);
	
	ДокументыССохраняемымиДвижениями = ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(Истина, Истина, ОписаниеРегистра.ИмяРегистра);
	
	Для Каждого КлючИЗначение Из ДокументыССохраняемымиДвижениями Цикл
		Если КлючИЗначение.Ключ.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти
	
#Область Таблица

	// Таблица для накапливания формируемых движений
	ОписаниеРегистра.Вставить(
		"Таблица", 
		МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки());
		
	// Колонку "Регистратор" поместим на первое место
	КолонкаРегистратор = ОписаниеРегистра.Таблица.Колонки.Найти("Регистратор");
	ОписаниеРегистра.Таблица.Колонки.Сдвинуть(
		КолонкаРегистратор,
		-ОписаниеРегистра.Таблица.Колонки.Индекс(КолонкаРегистратор));
		
	// Для остаточных регистров накопления создадим служебную колонку СлужебноеВидДвиженияПриход.
	// В ней будем хранить булево представление вида движения (обход ошибки Платформы 30025997)
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ОписаниеРегистра.Таблица.Колонки.Добавить("СлужебноеВидДвиженияПриход",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
#КонецОбласти
	
#Область ПоляРегистра

	// Список всех полей регистра, за исключением "техногенных"
	// Перед именем каждого поля стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ПоляОсновнойТаблицыРегистра = ""; // здесь поле "ВидДвижения"
	ПоляКэшаРегистра  			= ""; // здесь поле "СлужебноеВидДвиженияПриход"
	ИгнорируемыеПоля  			= Новый Структура("НомерСтроки, Активность, МоментВремени, ВидДвижения");
	
	Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Колонка.Имя = "СлужебноеВидДвиженияПриход" Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + "ВидДвижения";
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + "СлужебноеВидДвиженияПриход";
		ИначеЕсли НЕ ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
#КонецОбласти

#Область ИзмеренияРегистра

	// Список всех измерений регистра
	// Перед именем каждого измерения стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ИзмеренияРегистра = "";
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		ИзмеренияРегистра = ИзмеренияРегистра
			+ ?(ИзмеренияРегистра = "", "", ", ") + "%1" + Мета.Имя;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	
#КонецОбласти

#Область РесурсыРегистра

	// Список всех ресурсов регистра
	// Перед именем каждого ресурса стоят символы "%1" - для автоподстановки имен таблиц в запросах
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл
		РесурсыРегистра = РесурсыРегистра
			+ ?(РесурсыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом
			+ ?(РесурсыРегистраССуффиксом = "", "", ", ") + "%1" + Мета.Имя + "%2 КАК " + Мета.Имя;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РесурсыРегистра", 		   РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);
	
#КонецОбласти

	Возврат ОписаниеРегистра;
	
КонецФункции


// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	Если ОписаниеДвижений.РаспределениеНеТребуется Тогда // выполняется трансляция партий
		КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения);
		Возврат;
	КонецЕсли;
	
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	
	РасчетныеПартии 	 = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;
		
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		Для Каждого РасчетнаяПартия Из РасчетныеПартии Цикл
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
				ПараметрыРасчета,
				ИмяРегистра,
				РасчетнаяПартия);
			
		КонецЦикла;
		
		РасчетныеПартии.Очистить(); // закэшировали в движения
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		// Удалим незаписываемые строки
		ИндексСтроки = 0;
		
		Пока ИндексСтроки <= РасчетныеПартии.Количество() - 1 Цикл
			
			РасчетнаяПартия = РасчетныеПартии[ИндексСтроки];
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				РасчетныеПартии.Удалить(РасчетнаяПартия);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок	 = "";
		ИменаНеЧисловыхКолонок	 = "";
		
		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Если ВременнаяТаблицаСуществует Тогда 
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;
		
		Для Каждого Колонка Из ИсточникКолонок Цикл
			
			Если НЕ ВременнаяТаблицаСуществует
			 И (Колонка.Имя = ИмяКолонкиДляНумерацииПоУмолчанию()
			 	ИЛИ Колонка.Имя = "Приоритет"
			 	ИЛИ Колонка.Имя = ОписаниеДвижений.БазисПрихода
			 	ИЛИ Колонка.Имя = ОписаниеДвижений.БазисРасхода) Тогда
				// Из расчетных партий не берем служебные поля, из временной таблицы берем все поля.
				Продолжить;
			ИначеЕсли ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;
				
		КонецЦикла;
		
		ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
		
		// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра)
		Если НЕ ВременнаяТаблицаСуществует Тогда
			
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета,
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				ИменаКолонок);
			
		ИначеЕсли РасчетныеПартии.Количество() > 0 Тогда
			
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				"", // все колонки таблицы РасчетныеПартии
				ИменаКолонок,
				ИменаЧисловыхКолонок);
			
		КонецЕсли;
		
		РасчетныеПартии.Очистить(); // закэшировали во временную таблицу
		
	Иначе
		// С таблицей РасчетныеПартии ничего не делаем - она будет накапливать в себе записи до окончания распределения.
		// При этом для нее не действует ограничение на превышение максимального размера таблицы значений (КоличествоСтрокВТЗ).
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость сохранения указанной расчетной партии.
//
Функция РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные)
	
	Результат =
		(НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные И НЕ РасчетнаяПартия.РасчетЗавершен)
		ИЛИ НезаписываемыеДанные.НезаписываемыеТипыЗаписей[РасчетнаяПартия.ТипЗаписи] <> Неопределено
	 	ИЛИ НезаписываемыеДанные.НезаписываемыеРазделы[РасчетнаяПартия.РазделУчета] <> Неопределено
	 	ИЛИ (ЗначениеЗаполнено(РасчетнаяПартия.Регистратор) // если регистратор не заполнен, то эта ситуация будет обработана при добавлении движения
	  		 И НезаписываемыеДанные.НезаписываемыеРегистраторы[РасчетнаяПартия.Регистратор.Метаданные().Имя] <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли указанная колонка таблицы значений колонкой для суммирования или для группировки.
//
Функция ЭтоСуммируемаяКолонкаТаблицы(Колонка)
	
	СтруктураИсключения = Новый Структура("КодСтроки, КодСтрокиПродукция"); // числовые реквизиты, которые не нужно суммировать
	
	Возврат Колонка.ТипЗначения.СодержитТип(Тип("Число")) И НЕ СтруктураИсключения.Свойство(Колонка.Имя);
	
КонецФункции

// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений 	 = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ИмяТаблицыДанных  	 = "Данные";
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		Выборка = ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных);
		
		Пока Выборка.Следующий() Цикл
			
			// Добавим партию в движения и заполним его свойства
			Запись = ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
				ПараметрыРасчета,
				ИмяРегистра,
				Выборка);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		// Таблица расчетных партий пустая, нужна только для формирования структуры временной таблицы-приемника.
		РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки();
		
		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок	 = "";
		ИменаНеЧисловыхКолонок	 = "";
		
		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Если ВременнаяТаблицаСуществует Тогда 
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;
		
		Для Каждого Колонка Из ИсточникКолонок Цикл
			
			Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;
				
		КонецЦикла;
		
		ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
		
		// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра)
		Если НЕ ВременнаяТаблицаСуществует Тогда
			
			// Создадим пустую временную таблицу требуемой структуры.
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета,
				ИмяВременнойТаблицы,
				РасчетныеПартии,
				ИменаКолонок);
			
		КонецЕсли;
		
		Если РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных) > 0 Тогда
			
			ДобавитьНедостающиеКолонкиВременнойТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыДанных,
				ИмяВременнойТаблицы);
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыДанных,
				ИмяВременнойТаблицы,
				ИменаКолонок,
				ИменаЧисловыхКолонок);
			
		КонецЕсли;
		
	Иначе
		// Не указана таблица-приемник, ничего не делаем.
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;
	
КонецПроцедуры

// Переносит новые движения регистра из таблицы значений во временную таблицу.
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра = Неопределено, ОкончаниеЭтапа = Истина) Экспорт
	
	Если ОкончаниеЭтапа Тогда
		// При окончании этапа таблицу распределения партий надо перенести в таблицу движений регистра
		// или во временную таблицу, в зависимости от настроек распределения.
		КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеЭтапа);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ИмяРегистра <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ИмяРегистра) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш
			
			ЭтоРегистрСебестоимости = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
			
			// Заполним служебное поле РасчетСебестоимости
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(НЕ ПараметрыРасчета.ИдетРасчетПартий, "РасчетСебестоимости");
			КонецЕсли;
			
			// Заполним служебное поле РасчетПартий
			// (для этапа заполнения партий в себестоимости этот признак устанавливается в функции ДобавитьЗаписьВТаблицуДвижений)
			Если ОписаниеРегистра.ЕстьРасчетПартий
			 И НЕ (ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости) Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(ПараметрыРасчета.ИдетРасчетПартий, "РасчетПартий");
			КонецЕсли;
			
			Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
				
				Для Каждого Запись Из ОписаниеРегистра.Таблица Цикл
					
					// Дозаполним поле СлужебноеВидДвиженияПриход
					Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
						Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Добавим информацию в протокол 
			ПротоколРасчетаПартийИСебестоимости.КэшированиеСформированныхДвижений(
				ПараметрыРасчета,
				КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица.Количество());
			
			// Добавим данные из таблицы во временную таблицу
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				"ВТКэш" + КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица,
				ОписаниеРегистра.ПоляКэшаРегистра,
				ОписаниеРегистра.ПоляКэшаРегистра,
				ОписаниеРегистра.РесурсыРегистра);
				
			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу
			ОписаниеРегистра.Таблица.Очистить();
			
			// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			 И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда       // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			 И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда      // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Для регистров, к основным таблицам которых есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОбороты<ИмяРегистра> - в ней будет расчетные обороты регистра
// Т.о. на любом этапе расчета будет готовая таблица записей регистра за период,
// которую надо использовать вместо основной таблицы РегистрНакопления.<ИмяРегистра>
// и вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Обороты(<период расчета>)
Процедура ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОбороты" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Если не нужно использовать временную таблицу ВТКэш, то все данные будут взяты из ИБ.
	// В противном случае из ИБ будут взяты только первичные движения и просуммированы с расчетными движениями из ВТКэш.
	Запрос.УстановитьПараметр("ИспользоватьКэш", ОписаниеРегистра.ИспользоватьВТКэш И НЕ ПараметрыРасчета.Отладка.РасчетОдногоЭтапа);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистра
	|ПОМЕСТИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
	|ИЗ
	|	%ПолноеИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Активность
	|	%ОтборПоОрганизации
	|	И (ИСТИНА
	|	   %ОтборПоСлужебнымРеквизитам
	|		  ИЛИ НЕ &ИспользоватьКэш)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%ПоляКэшаРегистра
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|ГДЕ
	|	&ИспользоватьКэш
	|	%ОтборПоОрганизации
	|";
	
	ПоляКэшаРегистра 			= СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, 			"%1", "Т.");
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ПоляКэшаРегистра 			= ПоляКэшаРегистра + ",";
		ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
		КонецЦикла;
		
		ПоляКэшаРегистра 			= Лев(ПоляКэшаРегистра, СтрДлина(ПоляКэшаРегистра) - 1);
		ПоляОсновнойТаблицыРегистра	= Лев(ПоляОсновнойТаблицыРегистра, СтрДлина(ПоляОсновнойТаблицыРегистра) - 1);
		
	КонецЕсли;
	
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
	Если ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости ИЛИ ПараметрыРасчета.ЗаполненыПартииВСебестоимости
	 ИЛИ ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		// Отбор - первичные движения (с непересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
	Иначе
		// Отбор - первичные движения (все, в т.ч. с пересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь,);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Для регистров, к остаткам которых на конец периода есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОстатки<ИмяРегистра> - в ней будет расчетная сумма конечных остатков регистра
// Т.о. на любом этапе расчета будет готовая таблица расчетных остатков,
// которую надо использовать вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Остатки(<конец периода>)
Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		// На постоянной основе ВТКэшРасчетныеОбороты не нужна, но для расчета остатков надо ее сформировать, а потом уничтожить.
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	ПротоколРасчетаПартийИСебестоимости.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОстатки" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ИзмеренияРегистра,
	|	%РесурсыРегистраСумма
	|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		%ИзмеренияРегистраПодзапрос,
	|		%РесурсыРегистраОстатки
	|	ИЗ
	|		%ПолноеИмяРегистра.Остатки(&ГраницаНачалоПериода, %ОтборПоОрганизацииОстатки) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		%ИзмеренияРегистраПодзапрос,
	|		%РесурсыРегистраОбороты
	|	ИЗ
	|		ВТКэшРасчетныеОбороты%ИмяРегистра КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	%ИзмеренияРегистра";
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТКэшРасчетныеОбороты%ИмяРегистра
		|";
	КонецЕсли;
	
	ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	ИзмеренияРегистраПодзапрос = ИзмеренияРегистра;
	
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(Т.",
		")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.",
		"");
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ИзмеренияРегистраПодзапрос = ИзмеренияРегистраПодзапрос + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ИзмеренияРегистраПодзапрос = СтрЗаменить(ИзмеренияРегистраПодзапрос,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
		КонецЦикла;
		
		ИзмеренияРегистраПодзапрос = Лев(ИзмеренияРегистраПодзапрос, СтрДлина(ИзмеренияРегистраПодзапрос) - 1);
		
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизацииОстатки = "Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизацииОстатки = "АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизацииОстатки = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистраПодзапрос", ИзмеренияРегистраПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", 			ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", 		РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки", 	РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты", 	РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизацииОстатки", 	ОтборПоОрганизацииОстатки);
	
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);
	
	Запрос.Выполнить();
	
	ПротоколРасчетаПартийИСебестоимости.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Выполняет обновление расчетных оборотов и остатков по всем регистрам.
//
Процедура ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета, ТолькоТребующиеОбновления = Ложь) Экспорт
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ ОписаниеРегистра.НадоОбновитьРасчетныйКэш И ТолькоТребующиеОбновления Тогда
			Продолжить;
		КонецЕсли;
			
		Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
			ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
		КонецЕсли;
		
		Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
			ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
		КонецЕсли;
		
		ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость формирования расчетных кэшей с пустыми полями партий (для расчета себестоимости по средней).
//
Функция НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра)
	
	Возврат ПараметрыРасчета.ПартионныйУчетВерсии22 И НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.РегламентноеЗадание
			И ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	
КонецФункции

#КонецОбласти

#Область ТекущиеИтогиРегистров

Функция СостояниеТекущихИтоговРегистров() Экспорт
	
	СостояниеИтоговРегистров = Новый Структура;
	
	ИсходящиеДанные = Новый Соответствие;
	ПартионныйУчет.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	ПартионныйУчет22.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	
	Для Каждого КлючИЗначение Из ИсходящиеДанные Цикл
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра)
		 И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			СостояниеИтоговРегистров.Вставить(
				МетаданныеРегистра.Имя,
				РегистрыНакопления[МетаданныеРегистра.Имя].ПолучитьИспользованиеТекущихИтогов());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СостояниеИтоговРегистров;
	
КонецФункции

Процедура ВернутьСостояниеТекущихИтоговРегистров(СостояниеИтоговДоРасчета) Экспорт
	
	ВключитьИтогиПоРегистрам = Новый Структура;
	
	Для Каждого КлючИЗначение Из СостояниеИтоговДоРасчета Цикл
		
		Если НЕ КлючИЗначение.Значение Тогда
			Продолжить; // у регистра итоги были выключены еще до расчета
		КонецЕсли;
		
		Если НЕ РегистрыНакопления[КлючИЗначение.Ключ].ПолучитьИспользованиеТекущихИтогов() Тогда
			ВключитьИтогиПоРегистрам.Вставить(КлючИЗначение.Ключ); // итоги регистра были отключены при расчете
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВключитьИтогиПоРегистрам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ВключитьИтогиПоРегистрам);

	ФоновыеЗадания.Выполнить(
		"УниверсальныеМеханизмыПартийИСебестоимости.ВключитьИтогиПоРегистрамФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		,
		НСтр("ru='Расчет партий и себестоимости, включение итогов.'"));
	
КонецПроцедуры

Процедура ВключитьИтогиПоРегистрамФоновымЗаданием(ВключитьИтогиПоРегистрам) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ВключитьИтогиПоРегистрам Цикл
		РегистрыНакопления[КлючИЗначение.Ключ].УстановитьИспользованиеТекущихИтогов(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Запросы

// Устанавливает общие параметры запроса из параметров расчета.
// Следует использовать для идентичности имен и значений параметров во всех запросах.
//
Процедура ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, ИспользоватьОбщийМенеджерВТ = Истина) Экспорт
	
	РасчетныйПериод = ПараметрыРасчета.РасчетныйПериод;
	
	// Общие параметры
	Запрос.УстановитьПараметр("НачалоПериода",				  				РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  				РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  				РасчетныйПериод.КонецПредыдущегоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  				РасчетныйПериод.НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  				РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  				РасчетныйПериод.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",				РасчетныйПериод.ГраницаКонецПредыдущегоПериода);
	
	Запрос.УстановитьПараметр("РегламентноеЗадание",   						ПараметрыРасчета.РегламентноеЗадание);
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  				ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящая", 				ПараметрыРасчета.ОрганизацииСФИФОСкользящая);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящаяВПрошломПериоде", 	ПараметрыРасчета.ОрганизацииСФИФОСкользящаяВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", 							ПараметрыРасчета.ОрганизацииНаУСН);
	
	// Типы записей регистра "Себестоимость товаров"
	Запрос.УстановитьПараметр("НепересчитываемыеТипыЗаписей", 				ПараметрыРасчета.НепересчитываемыеТипыЗаписей);
	Запрос.УстановитьПараметр("ТипыЗаписейПервичныхПартий",   				ПараметрыРасчета.ТипыЗаписейПервичныхПартий);
	
	// Значения функциональных опций
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ФО Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Переопределим значение ФО ПартионныйУчетВерсии22 - для проверки версии механизма партионного учета
	// надо учитывать еще значения опций ИспользоватьПартионныйУчет и ДатаПереходаНаПартионныйУчетВерсии22.
	// "Правильное" значение ПартионныйУчетВерсии22 хранится в одноименном параметре расчета.
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", ПараметрыРасчета.ПартионныйУчетВерсии22);
	
	Запрос.УстановитьПараметр("ИспользовалсяПартионныйУчетДоПереходаНаВерсию22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата(1,1,1)));
		
	// Менеджер временных таблиц
	Если ИспользоватьОбщийМенеджерВТ Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // используется в редких случаях
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ КАК ВидДвижения");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос,
		ПоОрганизации = Неопределено, ПоСлужебнымПоИ = Неопределено,
		ПоРасчетСебестоимости = Неопределено, ПоРасчетПартий = Неопределено, ПоНепересчитываемыйТипЗаписи = Неопределено)
	
	// Имя регистра
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",	   ОписаниеРегистра.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	
	// Отбор по организации
	Если ПоОрганизации <> Неопределено Тогда
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "И %НЕ Т.Организация В (&МассивОрганизаций)";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "И %НЕ Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		ОтборПоОрганизации = СтрЗаменить(ОтборПоОрганизации, "%НЕ ", ?(ПоОрганизации, "", "НЕ "));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);
		
	КонецЕсли;
	
	// Отборы по служебным реквизитам
	Если ПоСлужебнымПоИ <> Неопределено Тогда
		
		ОтборПоСлужебнымРеквизитам = "";
		
		Если ПоРасчетСебестоимости <> Неопределено Тогда
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "", "НЕ ") + "Т.РасчетСебестоимости";
			ИначеЕсли НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				// У регистра сведений СтоимостьТоваров нет ресурса РасчетСебестоимости.
				// Все его движения считаются расчетными.
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "ИСТИНА", "ЛОЖЬ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			Если ПоРасчетПартий <> Неопределено И ОписаниеРегистра.ЕстьРасчетПартий Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетПартий, "", "НЕ ") + "Т.РасчетПартий";
			КонецЕсли;
			Если ПоНепересчитываемыйТипЗаписи <> Неопределено И ОписаниеРегистра.ЕстьТипЗаписи Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(НЕ ПоНепересчитываемыйТипЗаписи, "", "НЕ ") + "Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтборПоСлужебнымРеквизитам) Тогда
			ОтборПоСлужебнымРеквизитам = "И (" + ОтборПоСлужебнымРеквизитам + ")";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСлужебнымРеквизитам", ОтборПоСлужебнымРеквизитам);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВременныеТаблицы

#Область ОперацииСВременнымиТаблицами

// Помещает таблицу значений в новую временную таблицу
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	&Таблица КАК Т";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет таблицу значений в существующую временную таблицу
//
Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицыЗначений, ПоляТаблицы, РесурсыТаблицы) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияТЗиВТ";
	
	Если ЗначениеЗаполнено(ПоляТаблицыЗначений) Тогда
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПоляТаблицыЗначений);
	Иначе
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПолучитьИменаКолонокСтрокой(Таблица));
	КонецЕсли;
	
	ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника);
	
	ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы);
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы);
	
КонецПроцедуры

// Переносит данные из одной временной таблицы в другую
//
Процедура ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияВТиВТ";
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра (всем полям, не являющимися ресурсами).
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ %ИмяВнутреннейТаблицы
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%Поля
	|ИЗ
	|	%ИмяПриемника КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%СгруппированныеПоля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	%ИмяВнутреннейТаблицы КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяВнутреннейТаблицы";
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПоляТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(РесурсыТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		Если МассивРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + ТекущееПоле;
			
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  			ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", 			ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 			ИмяПриемника);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СгруппированныеПоля", 	ТекстСгруппированныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей", 		ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", 	ТекстОтборНепустыхРесурсов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВнутреннейТаблицы", 	ИмяВнутреннейТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет во временную таблицу отсутствующие колонки.
//
Процедура ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяОбразца) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляДобавленияКолонокВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Составим перечень колонок, которые есть в таблице-образце, но отсутствуют в самой таблице.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяТаблицы);
	КолонкиТаблицы = Запрос.Выполнить().Колонки;
	
	Запрос.Текст   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяОбразца);
	КолонкиОбразца = Запрос.Выполнить().Колонки;
	
	НовыеКолонки = Новый Структура; // Имя колонки - пустое значение соответствующего ей типа
	
	Для Каждого ТекущаяКолонка Из КолонкиОбразца Цикл
		
		Если КолонкиТаблицы.Найти(ТекущаяКолонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияКолонки = Новый ОписаниеТипов(ТекущаяКолонка.ТипЗначения,, "Null");
		
		НовыеКолонки.Вставить(ТекущаяКолонка.Имя, ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
		
	КонецЦикла;
	
	Если НовыеКолонки.Количество() = 0 Тогда
		Возврат; // в таблице есть все колонки, присутствующие в таблице-образце
	КонецЕсли;
	
	// Составим список полей для текста запроса.
	ТекстПоляТаблицы = "";
	КоличествоПараметров = 0;
	
	Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	Для Каждого ТекущаяКолонка Из НовыеКолонки Цикл
		
		КоличествоПараметров = КоличествоПараметров + 1;
		ИмяПараметра = "ЗначениеНовогоПоля" + Формат(КоличествоПараметров, "ЧН=0; ЧГ=");
		
		Запрос.УстановитьПараметр(ИмяПараметра, ТекущаяКолонка.Значение);
		
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "&" + ИмяПараметра + " КАК " + ТекущаяКолонка.Ключ;
		
	КонецЦикла;
	
	// Выполним запрос, получающий исходную таблицу с полным списком полей.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1 КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%3
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%2 КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаЗапроса,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы,
		ТекстПоляТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Удаляет все записи из временной таблицы, при этом все ее поля остаются без изменения.
//
Процедура ОчиститьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяТаблицы) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОчисткиВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%2 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса 	= "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Если НЕ ВременнаяТаблицаСуществует(Запрос.МенеджерВременныхТаблиц, КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существование временной таблицы с указанным именем.
//
Функция ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") > 0 Тогда
		
		// Из-за ошибки Платформы №50006544 нельзя воспользоваться методом
		// МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы)
		// Поэтому будем искать временную таблицу перебором элементов коллекции.
		
		Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ИмяВременнойТаблицы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// В версиях платформы младше 8.3.8 нет платформенных средств для проверки существования временной таблицы.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ТаблицаСуществует
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяВременнойТаблицы);
	
	Попытка
		Запрос.Выполнить();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Получает из переданного контейнера-источника данных менеджер временных таблиц.
//
Функция ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ)
	
	Если ТипЗнч(КонтейнерМенеджераВТ) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ;
	Иначе // менеджер хранится в одноименном свойстве структуры или запроса
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область НумерацияИРазделениеНаПорцииСтрокВременнойТаблицы

// Возвращает имя колонки по умолчанию для нумерации строк временной таблицы.
//
Функция ИмяКолонкиДляНумерацииПоУмолчанию()
	Возврат "К";
КонецФункции

// Добавляет колонку для нумерации строк в таблицу значений.
//
Процедура ДобавитьКолонкуДляНумерацииСтрок(Таблица, ИмяПоляНомераСтроки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераСтроки);
	
КонецПроцедуры

// Формирует параметры нумерации строк временной таблицы.
//
Функция СформироватьПараметрыНумерацииСтрокВременнойТаблицы(ИмяПоляРазделителя = "",
			ИменаСуммируемыхПолей = "", ИменаПолейУпорядочивания = "", ИмяПоляНомераСтроки = "",
			ИменаПолейИндексирования = "", ИмяПоляНакопления = "", ПодбиратьРазделитель = Истина) Экспорт
	
	ПараметрыНумерации = Новый Структура;
	ПараметрыНумерации.Вставить("ИмяПоляРазделителя", 		ИмяПоляРазделителя);
	ПараметрыНумерации.Вставить("ОптимальныйРазделитель", 	?(ПодбиратьРазделитель, "", ИмяПоляРазделителя));
	ПараметрыНумерации.Вставить("ИменаСуммируемыхПолей", 	ИменаСуммируемыхПолей);
	ПараметрыНумерации.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляРазделителя, ИменаПолейУпорядочивания));
	ПараметрыНумерации.Вставить("ИмяПоляНомераСтроки", 		?(НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки), ИмяКолонкиДляНумерацииПоУмолчанию(), ИмяПоляНомераСтроки));
	ПараметрыНумерации.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаПолейИндексирования));
	ПараметрыНумерации.Вставить("ИмяПоляНакопления", 		ИмяПоляНакопления);
	
	Возврат ПараметрыНумерации;
	
КонецФункции

// Подбирает наиболее оптимальное поле-разделитель таблицы на порции.
// Решает проблему, когда указанное по умолчанию поле-разделитель является неподходящим - при этом порция выборки по этому полю
// получается слишком большой и возникает ошибка "Недостаточно памяти для получения результата запроса к базе данных".
//
Функция ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных)
	
	Если ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель) Тогда
		Возврат ПараметрыНумерации.ОптимальныйРазделитель; // уже определен
	ИначеЕсли РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы) <= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		Возврат ""; // не нужно делить на порции
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	// Соберем статистику по значениям колонок таблицы.
	ШаблонТекстаЗапроса =
	"%1
	|
	|ВЫБРАТЬ
	|	""%2"" КАК Разделитель,
	|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоРазделителей,
	|	МАКСИМУМ(Т.КоличествоСтрок) КАК КоличествоСтрок,
	|	%5 КАК ЭтоИсходныйРазделитель
	|%3
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.%2 КАК Разделитель,
	|		МАКСИМУМ(ВЫБОР КОГДА Т.%2 ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьЗначенияNULL,
	|		МАКСИМУМ(ВЫБОР КОГДА ВЫРАЗИТЬ(%6 КАК ЧИСЛО(23,3)) = %6 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) КАК ЕстьЧислаСБольшойТочностью,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
	|	ИЗ
	|		%4 КАК Т
	|	СГРУППИРОВАТЬ ПО
	|		Т.%2) КАК Т
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.ЕстьЗначенияNULL) = ЛОЖЬ
	|	И МАКСИМУМ(Т.ЕстьЧислаСБольшойТочностью) = ЛОЖЬ
	|
	|";
	
	ИменаКолонок = "";
	СтруктураИсключений = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
	
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключений.Свойство(ТекКолонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекКолонка.ТипЗначения.СодержитТип(Тип("ВидДвиженияНакопления"))
		 ИЛИ (ТекКолонка.ТипЗначения.Типы().Количество() > 1
		 		И ТекКолонка.ТипЗначения.СодержитТип(Тип("Строка"))) Тогда
			Продолжить; // для недопущения ошибки "Индексируемое поле не может иметь составной тип и тип неограниченной длины"
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаЗапроса,
				?(Запрос.Текст = "", "", "ОБЪЕДИНИТЬ ВСЕ"),
				ТекКолонка.Имя,
				?(Запрос.Текст = "", "ПОМЕСТИТЬ ВТРазделители", ""),
				ИмяТаблицы,
				?(НРег(ТекКолонка.Имя) = НРег(ПараметрыНумерации.ИмяПоляРазделителя), "ИСТИНА", "ЛОЖЬ"),
				?(ТекКолонка.ТипЗначения.СодержитТип(Тип("Число")), "Т." + ТекКолонка.Имя, "0"));
		
	КонецЦикла;
	
	Запрос.Выполнить();
	
	// Выберем наиболее подходящий разделитель строк.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Разделитель
	|ИЗ
	|	ВТРазделители КАК Т
	|ГДЕ
	|	Т.КоличествоСтрок <= &РазмерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.КоличествоРазделителей,
	|	Т.ЭтоИсходныйРазделитель УБЫВ,
	|	Т.Разделитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Разделитель КАК Разделитель
	|ИЗ
	|	ВТРазделители КАК Т
	|ГДЕ
	|	Т.КоличествоСтрок > &РазмерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.КоличествоСтрок,
	|	Т.КоличествоРазделителей,
	|	Т.ЭтоИсходныйРазделитель УБЫВ,
	|	Т.Разделитель";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыНумерации.ИмяПоляРазделителя);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать(); // найдем разделитель с размером порции меньше максимально допустимого
	
	Если НЕ Выборка.Следующий() Тогда
		
		Выборка = РезультатЗапроса[1].Выбрать(); // не нашли - найдем хотя бы разделитель с размером порции больше максимально допустимого
		
		Если НЕ Выборка.Следующий() Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось подобрать поле-разделитель для таблицы %1'"),
				ИмяТаблицы);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(Запрос, "ВТРазделители");
	
	Возврат Выборка.Разделитель; // нашли самый оптимальный разделитель
	
КонецФункции

// Заполняет номера строк временной таблицы.
//
Процедура ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ПустаяТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда
		
		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
		
		ТекстПоляТаблицы = "";
		ТекстПоляГруппировки  = "";
		
		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
			
			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстПоляГруппировки;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%1
		|ПОМЕСТИТЬ %2ДляГруппировки
		|ИЗ
		|	%2 КАК Т
		|%3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%2ДляГруппировки КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2ДляГруппировки
		|";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ТекстПоляГруппировки);
		Запрос.Выполнить();
		
	КонецЕсли;
		
	// Подберем наиболее подходящее поле-разделитель для разделения на порции.
	ПараметрыНумерации.ОптимальныйРазделитель =
		ПодобратьПодходящийРазделительДляНумерации(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ПустаяТаблицаДанных);
	
	ДелитьТаблицуНаПорции = ЗначениеЗаполнено(ПараметрыНумерации.ОптимальныйРазделитель);
	
	// Получим полный список полей для упорядочивания - одни и те же данные должны всегда сортироваться одинаково.
	// Добавим в список все остальные колонки, не указанные в списке полей упорядочивания.
	// По суммовым полям будем упорядочивать после несуммовых полей.
	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;
	
	ИменаВсехПолейУпорядочивания = СтрЗаменить(
		?(ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейУпорядочивания),
			ПараметрыНумерации.ИменаПолейУпорядочивания,
			ПараметрыНумерации.ОптимальныйРазделитель),
		"	",
		" ");
	
	СтруктураИсключаемыеПоля = Новый Структура(ПараметрыНумерации.ИмяПоляНомераСтроки + ", НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	СтруктураИменаПолей 	 = Новый Структура(
		СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочивания), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей);
	
	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя)  // служебное поле
		 ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСуммируемаяКолонкаТаблицы(КолонкаДанных) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей + ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
				+ ?(ИменаВсехПолейУпорядочивания = "", "", ", ") + КолонкаДанных.Имя;
		КонецЕсли;
		
		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);
		
	КонецЦикла;
	
	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей;
	
	// Получим перечень имен колонок таблицы.
	ДобавитьКолонкуДляНумерацииСтрок(ПустаяТаблицаДанных, ПараметрыНумерации.ИмяПоляНомераСтроки);
	
	ИменаКолонок = "";
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "Т." + ТекКолонка.Имя;
	КонецЦикла;
	
	Если ДелитьТаблицуНаПорции Тогда
		
		// Разделим строки на порции для того, чтобы не получить слишком большую выборку, которая вызовет ошибку нехватки памяти.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.%2 КАК Разделитель,
		|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(15,0))) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВТПорцииСтрок
		|ИЗ
		|	%1 КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.%2";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			ИмяТаблицы,
			ПараметрыНумерации.ОптимальныйРазделитель);
		
		Запрос.Выполнить();
		
		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
			ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ,
			"КоличествоСтрок", "Разделитель",, "Разделитель, НомерПорции");
		
		МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТПорцииСтрок");
		
	Иначе
		
		МаксНомерПорции = 1; // вся таблица это одна порция
		
	КонецЕсли;
	
	НомерСтроки = 0; // нумерация строк начинается с 0
	
	// Выберем данные исходной таблицы порциями.
	// Даже если исходная таблица не содержит строк цикл надо выполнить один раз, для формирования вспомогательных временных таблиц.
	Для НомерПорции = 1 По Макс(МаксНомерПорции, 1) Цикл
		
		Если МаксНомерПорции > 1 Тогда 
			
			Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.*
			|ИЗ
			|	%1 КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииСтрок КАК ПорцииСтрок
			|			ПО Т.%2 = ПорцииСтрок.Разделитель
			|			И ПорцииСтрок.НомерПорции = &НомерПорции
			|УПОРЯДОЧИТЬ ПО
			|	%3";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.*
			|ИЗ
			|	%1 КАК Т
			|УПОРЯДОЧИТЬ ПО
			|	%3";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяТаблицы,
			ПараметрыНумерации.ОптимальныйРазделитель, // нужен только для запроса с порциями
			ИменаВсехПолейУпорядочивания);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Добавим колонку номера строки если ее еще нет.
		ДобавитьКолонкуДляНумерацииСтрок(Таблица, ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		// Пронумеруем строки текущей порции (нумерация сквозная для всей исходной таблицы).
		// Если требуется, то при этом в специальной колонке накопим сумму значений этой колонки в предыдущих строках.
		НакопленноеЗначение = 0;
		
		Для Каждого ТекСтр Из Таблица Цикл
			
			ТекСтр[ПараметрыНумерации.ИмяПоляНомераСтроки] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			
			Если ЗначениеЗаполнено(ПараметрыНумерации.ИмяПоляНакопления) Тогда
				ТекущееЗначениеНакопления = ТекСтр[ПараметрыНумерации.ИмяПоляНакопления];
				ТекСтр[ПараметрыНумерации.ИмяПоляНакопления] = НакопленноеЗначение;
				НакопленноеЗначение = НакопленноеЗначение + ТекущееЗначениеНакопления;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерПорции = 1 Тогда // выбрана первая порция

			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	&Т КАК Т";
			
		Иначе // выбрана вторая или следующие порции
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации2
			|ИЗ
			|	&Т КАК Т
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации3
			|ИЗ
			|	%1ДляНумерации КАК Т
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	%2
			|ИЗ
			|	%1ДляНумерации2 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации2
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	%1ДляНумерации3 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации3";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИменаКолонок);
		
		Запрос.УстановитьПараметр("Т", Таблица);
		Запрос.Выполнить();
		
	КонецЦикла;
	
	// Поместим пронумерованные данные в итоговую временную таблицу.
	Запрос.Текст =
	"УНИЧТОЖИТЬ %1
	|;
	|///////////////////////////
	|ВЫБРАТЬ
	|	%3
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1ДляНумерации КАК Т
	|%4
	|;
	|///////////////////////////
	|УНИЧТОЖИТЬ %1ДляНумерации";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ИмяПронумерованнойТаблицы,
		ИменаКолонок,
		?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО " + ПараметрыНумерации.ИменаПолейИндексирования));
	
	Запрос.Выполнить();
	
	Если ДелитьТаблицуНаПорции Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТПорцииСтрок");
	КонецЕсли;
	
	// Проверим корректность новой нумерации.
	РазмерТаблицыДанных = РазмерВременнойТаблицы(Запрос, ИмяПронумерованнойТаблицы);
	
	Если РазмерТаблицыДанных > 0 Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Т.КоличествоНомеров) КАК КоличествоНомеров,
		|	СУММА(Т.МинимальныйНомер)  КАК МинимальныйНомер,
		|	СУММА(Т.МаксимальныйНомер) КАК МаксимальныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.%2) КАК КоличествоНомеров,
		|		0 КАК МинимальныйНомер,
		|		0 КАК МаксимальныйНомер
		|	ИЗ
		|		%1 КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		МИНИМУМ(Т.%2),
		|		МАКСИМУМ(Т.%2)
		|	ИЗ
		|		%1 КАК Т) КАК Т";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяПронумерованнойТаблицы,
			ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.КоличествоНомеров <> РазмерТаблицыДанных Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: не соблюдается уникальность нумерации.'");
		ИначеЕсли Выборка.МинимальныйНомер <> 0 Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: некорректный минимальный номер.'");
		ИначеЕсли Выборка.МаксимальныйНомер <> РазмерТаблицыДанных - 1 Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: некорректный максимальный номер.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Возвращает имя колонки по умолчанию для номеров порций временных таблиц.
//
Функция ИмяКолонкиДляНомераПорцииПоУмолчанию()
	Возврат "НомерПорции";
КонецФункции

// Добавляет колонку для номеров порций в таблицу значений.
//
Процедура ДобавитьКолонкуДляНомеровПорцийСтрок(Таблица, ИмяПоляНомераПорции = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции) Тогда
		ИмяПоляНомераПорции = ИмяКолонкиДляНомераПорцииПоУмолчанию();
	КонецЕсли;
	
	ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераПорции);
	
КонецПроцедуры

// Формирует параметры разделения временной таблицы на порции.
//
Функция СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции, ИмяПоляВесаСтроки,
			ИменаПолейУпорядочивания = "", ИмяПоляНомераПорции = "", ИменаПолейИндексирования = "") Экспорт
	
	ПараметрыРазделения = Новый Структура;
	ПараметрыРазделения.Вставить("РазмерПорции", 		 	 РазмерПорции);
	ПараметрыРазделения.Вставить("ИмяПоляВесаСтроки", 		 ИмяПоляВесаСтроки);
	ПараметрыРазделения.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляВесаСтроки + " " + "УБЫВ", ИменаПолейУпорядочивания));
	ПараметрыРазделения.Вставить("ИмяПоляНомераПорции", 	 ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции), ИмяКолонкиДляНомераПорцииПоУмолчанию(), ИмяПоляНомераПорции));
	ПараметрыРазделения.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыРазделения.ИмяПоляНомераПорции, ИменаПолейИндексирования));
	
	Возврат ПараметрыРазделения;
	
КонецФункции

// Разделяет временную таблицу на порции.
//
Функция РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, ИмяТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Получим пустую таблицу значений с полями, соответствующими полям временной таблицы.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Получим описание полей таблицы.
	ТекстПоляТаблицы = "";
	ШаблонПоляТаблицы = "";
		
	Для Каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя;
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ?(ШаблонПоляТаблицы = "", "", ", ") + "%1" + КолонкаДанных.Имя;
	КонецЦикла;
	
	// Добавим колонку для номера порции, к которой относится текущая строка таблицы.
	ДобавитьКолонкуДляНомеровПорцийСтрок(ТаблицаДанных, ПараметрыРазделения.ИмяПоляНомераПорции);
	
	ШаблонПоляТаблицы = ШаблонПоляТаблицы + ?(ШаблонПоляТаблицы = "", "", ", ") + "%1" + ИмяКолонкиДляНомераПорцииПоУмолчанию();
	
	// Создадим пустую временную таблицу, в которую будет помещена обработанная исходная таблица.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		ИмяТаблицы + "_Временная",
		ТаблицаДанных,
		ШаблонПоляТаблицы);
	
	// Поместим данные временной таблицы в таблицу значений, заполняя при этом номер порции для каждой строки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	%3";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ТекстПоляТаблицы,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейУпорядочивания);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерПорции = 1;
	РазмерТекущейПорции = 0;
	
	НомерСтрокиВыборки = 0;
	РазмерВыборки = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиВыборки = НомерСтрокиВыборки + 1;
		
		ТекущаяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
		ВесСтроки = ТекущаяСтрока[ПараметрыРазделения.ИмяПоляВесаСтроки];
		ВесСтроки = ?(ВесСтроки < 0, - ВесСтроки, ВесСтроки);
		
		Если РазмерТекущейПорции + ВесСтроки <= ПараметрыРазделения.РазмерПорции Тогда
			// Вес текущей строки "помещается" в текущую порцию.
			// Строка добавляется в текущую порцию.
		ИначеЕсли РазмерТекущейПорции > 0 Тогда
			// Вес текущей строки "выходит" за текущую порцию, в которой уже есть другие строки.
			// Строка добавляется первой в новую порцию.
			НомерПорции = НомерПорции + 1;
			РазмерТекущейПорции = 0;
		Иначе
			// Вес текущей строки "больше" возможного размера порции, при этом в текущей порции еще нет других строк.
			// Строка целиком помещается в отдельную порцию.
		КонецЕсли;
		
		ТекущаяСтрока[ПараметрыРазделения.ИмяПоляНомераПорции] = НомерПорции;
		
		РазмерТекущейПорции = РазмерТекущейПорции + ВесСтроки;
		
		Если НомерСтрокиВыборки = РазмерВыборки
		 ИЛИ ТаблицаДанных.Количество() = ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		 
			// Переместим данные из таблицы значений во временную таблицу.
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				ИмяТаблицы + "_Временная",
				ТаблицаДанных,
				"", // все колонки таблицы ТаблицаДанных
				ШаблонПоляТаблицы,
				"");
			
			ТаблицаДанных.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Уничтожим старую таблицу и поместим вместо нее новую, с заполненной колонкой номера порции.
	Запрос.Текст =
	"УНИЧТОЖИТЬ %1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	%1_Временная КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	%2
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %1_Временная";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейИндексирования);
	
	Запрос.Выполнить();
	
	Возврат ?(РазмерВыборки = 0, 0, НомерПорции);
	
КонецФункции


// Добавляет числовую колонку в таблицу значений.
//
Функция ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяКолонки)
	
	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РегистраторыИМоментыВремени

// Получает реквизит "Момент времени" для всех документов в указанной временной таблице.
//
Процедура СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПоляРегистратор = "Регистратор",
			ИмяПриемника = "ВТМоментыВремени", ДопустимыПустыеРегистраторы = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Выберем типы документов, для которых нужно получить момент времени.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор
	|ПОМЕСТИТЬ %ИмяПриемника_Регистраторы
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	%ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(Т.%ИмяПоляРегистратор) КАК ТипРегистратора
	|ИЗ
	|	%ИмяПриемника_Регистраторы КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", 		ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Составим текст поля для выбора момента времени документа в зависимости от типа документа.
	ТекстЗапроса = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипРегистратора = Тип("Неопределено")
		 ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(Выборка.ТипРегистратора) Тогда
			
			Если НЕ ДопустимыПустыеРегистраторы Тогда
				
				// В поле <ИмяПоляРегистратор> содержится не ссылка на документ.
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При обработке регистраторов из временной таблицы ""%1"" возникла ошибка:
						|некорректный тип регистратора ""%2""'"),
					ИмяИсточника,
					ПротоколРасчетаПартийИСебестоимости.ПредставлениеЗначения(Выборка.ТипРегистратора));
				
				ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
					КонтейнерМенеджераВТ,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
					ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;
				
			Иначе
				
				Продолжить; // в итоговую таблицу такой регистратор не включаем
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяТипаРегистратора = Метаданные.НайтиПоТипу(Выборка.ТипРегистратора).Имя;
		ЭтоПервыйПодзапрос  = НЕ ЗначениеЗаполнено(ТекстЗапроса);
		
		ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйПодзапрос, "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + "
		|ВЫБРАТЬ
		|	Т.%ИмяПоляРегистратор КАК %ИмяПоляРегистратор,
		|	ВЫРАЗИТЬ(Т.%ИмяПоляРегистратор КАК Документ.%ТипДокумента).МоментВремени КАК МоментВремени
		|" + ?(ЭтоПервыйПодзапрос, "ПОМЕСТИТЬ %ИмяПриемника", "") + "
		|ИЗ
		|	%ИмяПриемника_Регистраторы КАК Т
		|ГДЕ
		|	Т.%ИмяПоляРегистратор ССЫЛКА Документ.%ТипДокумента
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТипДокумента", ИмяТипаРегистратора);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК %ИмяПоляРегистратор,
		|	НЕОПРЕДЕЛЕНО КАК МоментВремени
		|ПОМЕСТИТЬ %ИмяПриемника
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	%ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника_Регистраторы";
	
	// Получим моменты времени документов.
	Запрос.Текст = СокрЛП(ТекстЗапроса);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выбирает документы из указанной временной таблицы, упорядоченные по их моменту времени.
//
Функция ВыбратьМоментыВремениРегистраторов(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор = "Регистратор") Экспорт
	
	ИмяПриемника = "ВТМоментыВремени";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор, ИмяПриемника);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.%ИмяПоляРегистратор,
	|	Т.МоментВремени
	|ИЗ
	|	%ИмяПриемника КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Т.МоментВремени
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляРегистратор", ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 		ИмяПриемника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяПриемника);
	
	Возврат РезультатЗапроса;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область КолонкиТаблиц

// Возвращает строку шаблона, содержащего имена всех колонок переданного объекта.
//
Функция ПолучитьИменаКолонокСтрокой(ИсточникКолонок) Экспорт
	
	Если ТипЗнч(ИсточникКолонок) = Тип("ТаблицаЗначений")
	 ИЛИ ТипЗнч(ИсточникКолонок) = Тип("РезультатЗапроса") Тогда
		Колонки = ИсточникКолонок.Колонки;
	Иначе
		Колонки = ИсточникКолонок;
	КонецЕсли;
	
	ИменаКолонок = "";
	
	Для Каждого Колонка Из Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "%1" + Колонка.Имя;
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Дополняет параметры обработки ЖурналРегистрации для просмотра ключевых событий расчета себестоимости.
// Параметры процедуры соответствуют аналогичным параметрам формы этой обработки.
//
// Параметры;
//	ОтборПоУровню  - СписокЗначений - отбор по уровням событий журнала регистрации
//	ОтборПоСобытию - Массив - отбор по событиям журнала регистрации
//
Процедура ДополнитьОтборыДляЖурналаРегистрации(ОтборПоУровню, ОтборПоСобытию) Экспорт
	
	Если ОтборПоУровню.НайтиПоЗначению("Ошибка") = Неопределено Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка"); // для ошибок расчета
	КонецЕсли;
	Если ОтборПоУровню.НайтиПоЗначению("Информация") = Неопределено Тогда
		ОтборПоУровню.Добавить("Информация", "Информация"); // для протокола расчета
	КонецЕсли;
	
	// Добавим имена событий механизмов расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Истина);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Ложь);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
КонецПроцедуры


// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, Уточнение) Экспорт
	
	Если НЕ ПараметрыРасчета = Неопределено
	 И ПараметрыРасчета.Свойство("ЗапущенРасчетПартий")
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ИмяСобытия = НСтр("ru = 'Расчет партий и себестоимости%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ИмяСобытия = НСтр("ru = 'Расчет себестоимости%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ИмяСобытия,
		?(Уточнение = "", "", "." + Уточнение));
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Ошибка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции

// Возвращает имя события журнала для записи протокола расчета.
//
Функция ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru='Протокол расчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции

// Обрабатывает run-time ошибки расчета - записывает протокол расчета и завершает расчет.
//
Функция ОбработатьИсключениеВызоваРассчитатьВсе(ПараметрыРасчета, ТекстОшибки, Отказ) Экспорт
	
	Отказ = Истина;
	
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.Свойство("КопияМассивОрганизаций") Тогда
		// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.КопияМассивОрганизаций));
	КонецЕсли;
	
	ТекстОшибкиФорматированный = ПротоколРасчетаПартийИСебестоимости.ПредставлениеТекстаОшибки(ТекстОшибки);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОшибкиФорматированный);
	
	Если ПротоколРасчетаПартийИСебестоимости.ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		
		// Если исключение вызвано сознательно, то в протокол уже добавлена информация об ошибке.
		Если СтрНайти(НРег(ТекстОшибки), НРег("ВызватьИсключение")) = 0
		   И СтрНайти(НРег(ТекстОшибки), НРег("Raise")) = 0 Тогда
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета возникла ошибка:
					|%1'"),
				ТекстОшибкиФорматированный);
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
				ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызыватьИсключение = НЕ (ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ИдетРасчетПартий);
	
	ОкончаниеРасчета(ПараметрыРасчета); // запишем протокол
	
	Если ВызыватьИсключение Тогда
		// Для ошибки расчета себестоимости партионного учета версии 2.2 расчет надо прервать
		// в Попытке-Исключение "верхнего уровня" - в модуле партионного учета.
		ВызватьИсключение ТекстОшибкиФорматированный;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Организации

// Возвращает строковое представление массива организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которых надо получить представление
//
// Возвращаемое значение:
//	Строка - строковое представление массива организаций
//
Функция ПредставлениеОрганизаций(МассивОрганизаций, Разделитель = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивОрганизаций = Неопределено Тогда
		Возврат НСтр("ru='<Все организации>'");
	КонецЕсли;
	
	ПредставлениеОрганизаций = "";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ВК;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеОрганизаций = ПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ПредставлениеОрганизаций), "", Разделитель)
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Возврат ПредставлениеОрганизаций;
	
КонецФункции

// Возвращает массив организаций, для которых необходимо выполнить расчет себестоимости.
//
Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Данные.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Данные
	|	ГДЕ
	|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Активность
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитики.Организация
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|			ПО Данные.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|				И (Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (Данные.Активность)
	|				И (Данные.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга))
	|				И (&ПоВсемОрганизациям
	|					ИЛИ КлючиАналитики.Организация В (&ОтборОрганизации))
	//++ НЕ УТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Данные.Организация
	|	ИЗ
	|		Документ.РаспределениеПрочихЗатрат КАК Данные
	|	ГДЕ
	|		Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Проведен
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	//-- НЕ УТ
	|	) КАК Данные";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", 	ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив организаций с методом оценки стоимости "ФИФО скользящая".
//
Функция ОрганизацииСФИФОСкользящая(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекущаяОрганизация Из ?(ЗначениеЗаполнено(МассивОрганизаций), МассивОрганизаций, ВсеДоступныеОрганизации()) Цикл
		
		ТекущийМетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			ТекущаяОрганизация,
			НачалоМесяца(ПериодРасчета));
		
		Если ТекущийМетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			Результат.Добавить(ТекущаяОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все доступные для расчета организации, имеющиеся в ИБ.
//
Функция ВсеДоступныеОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|		КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|				И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|			ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|	  КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Предопределенный";
	
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию",
		ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции


// Дополняет перечень организаций из ОтборОрганизации остальными организациями ИБ, связанными с ними по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - период расчета
//	ОтборОрганизации - СписокЗначений, Массив или СправочникСсылка.Организации - отбор по организациям
//	Группировать - Булево - возвращать сгруппированный результат, или в все найденные организации в виде обычного массива
//
// Возвращаемое значение:
//	Массив - если Группировать, то результат аналогичен возвращаемому значению ВсеСвязиОрганизацийПоСхемеИнтеркампани(),
//			 но возвращены будут только те группы (массивы) организаций, в которые входят организации из ОтборОрганизации
//			 Если НЕ Группировать - то эти же группы будут слиты в один массив.
//			 Т.е. по сути эта функция лишь отбор для ВсеСвязиОрганизацийПоСхемеИнтеркампани()
//			 с возможностью представления результат в "линейном" виде.
//
Функция СвязиОрганизацийПоСхемеИнтеркампани(Дата = Неопределено, ОтборОрганизации = Неопределено, Группировать = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтборПоОрганизациям = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	
	// Получим все организации ИБ, сгруппированные по связям схемы Интеркампани
	МассивГрупп = ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата);
	
	// Оставим такие группы организаций, в которых хоть одна организация группы
	// нуждается в пересчете (входит в требуемый ОтборПоОрганизациям)
	Результат = Новый Массив;
	
	Для Каждого ЭлементГруппа Из МассивГрупп Цикл
		Для Каждого Организация Из ЭлементГруппа Цикл
			
			Если НЕ ЗначениеЗаполнено(ОтборПоОрганизациям) ИЛИ ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда
				
				// Эту группу связанных организаций надо пересчитать
				Если Группировать Тогда
					// Результат в виде "массив из массивов"
					Результат.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЭлементГруппа));
				Иначе
					// Результат в виде "массив"
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЭлементГруппа);
				КонецЕсли;
				
				Прервать; // добавили всю группу - переходим к следующей
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Возвращает информацию о всех организациях ИБ, сгруппированную по их участию в схеме Интеркампани в указанном периоде.
//
// Параметры:
//	Дата - Дата - период расчета
//
// Возвращаемое значение:
//	Массив - элементами данного массива являются массивы организаций (СправочникСсылка.Организации),
//			 связанных между собой по схеме Интеркампани.
//	 	= если организация не связана с другими, то она будет в массиве одна.
//		= одна и та же организация может входить только в один массив - не может встречаться в результате функции несколько раз.
//
// Например,
//	- есть организации 1, 2, 3, 4, 5
//	- по Интеркампани товары перемещаются между организациями 1-3 и 3-5
//	- организация 2 в этом периоде работает "сама по себе", не связана с другими организациями
//	- по организации 4 в этом периоде не было движений по регистру СебестоимостьТоваров
// Возвращаемый функцией массив будет иметь следующий вид:
//	элемент(0) - массив (организация 1, организация 3, организация 5) - схема Интеркампани
//	элемент(1) - массив (организация 2) - "одиночная", несвязанная организация
//	элемент(2) - массив (организация 4) - несмотря на отсутствие по ней движений будет дополнена из справочника организаций
//
Функция ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата)

	МассивГрупп = Новый Массив; // результат функции - массив из массивов организаций
	УчтенныеОрганизации = Новый Массив; // связанные по Интеркампани - их не надо выбирать из справочника организаций
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация,
	|	ВЫБОР
	|		КОГДА СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РеализацияКлиентуРеглУчет
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Активность
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация,
	|	Организации.КорОрганизация КАК КорОрганизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Организация КАК Организация,
	|		Организации.КорОрганизация КАК КорОрганизация
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Организация,
	|		ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	ГДЕ
	|		Организации.РеализацияКлиентуРеглУчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КПередаче.ОрганизацияВладелец,
	|		КПередаче.ВидЗапасовПродавца.Организация
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|			ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КПередаче
	|	) КАК Организации
	|ГДЕ
	|	Организации.Организация <> Организации.КорОрганизация
	|	И Организации.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	КорОрганизация";
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  		 КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));

	РезультатЗапроса = Запрос.Выполнить();

	// Необходимо собрать в группы организации, которые участвовали в перепродажах или межфирменных перемещениях.
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			ГруппаОрганизации    = НайтиВМассивеГруппОрганизаций(Выборка.Организация,    МассивГрупп);
			ГруппаКорОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп);
			
			Если ГруппаОрганизации = Неопределено И ГруппаКорОрганизации = Неопределено Тогда
				
				// таких организаций еще не было в выборке - добавим обе организации в новую группу
				ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, Неопределено);
				ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, МассивГрупп.Количество() - 1);
				
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				
			ИначеЕсли ГруппаОрганизации <> Неопределено И ГруппаКорОрганизации <> Неопределено Тогда
				
				// обе организации уже были в выборке
				Если ГруппаОрганизации <> ГруппаКорОрганизации Тогда
					// перенесем все организации из группы кор.организации в группу организации
					ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ГруппаОрганизации, ГруппаКорОрганизации);
				КонецЕсли;
				
			Иначе
				// одной из организаций еще не было в выборке
				Если ГруппаОрганизации = Неопределено Тогда
					// добавим организацию в группу кор. организации
					ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, ГруппаКорОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				Иначе
					// добавим кор. организацию в группу организации
					ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, ГруппаОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Дополним остальными организациями из справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Предопределенный";
	
	Запрос.УстановитьПараметр("УчтенныеОрганизации",        		   УчтенныеОрганизации);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Новая группа - массив с одним элементом
		ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено); 
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции


Функция НайтиВМассивеГруппОрганизаций(Значение, МассивГрупп)

	Для СчетчикГрупп = 0 По МассивГрупп.Количество() - 1 Цикл
		Если МассивГрупп[СчетчикГрупп].Найти(Значение) <> Неопределено Тогда
			Возврат СчетчикГрупп;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ДобавитьВМассивГруппОрганизаций(Значение, МассивГрупп, ПозицияГруппы)

	Если ПозицияГруппы = Неопределено Тогда
		МассивГрупп.Добавить(Новый Массив);
		ПозицияГруппы = МассивГрупп.Количество() - 1;
	КонецЕсли;

	ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппы], Значение);

КонецПроцедуры

Процедура ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ПозицияГруппыКуда, ПозицияГруппыОткуда)

	Для Каждого Значение Из МассивГрупп[ПозицияГруппыОткуда] Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппыКуда], Значение);
	КонецЦикла;

	МассивГрупп.Удалить(ПозицияГруппыОткуда);

КонецПроцедуры

#КонецОбласти

#Область МетодыОценкиСтоимости

// По переданному массиву организаций определяет метод оценки стоимости.
//
// Параметры:
//	ПараметрыРасчета
//	МассивОрганизаций - Массив - организации
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости
//
Функция ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, МассивОрганизаций)
	
	МетодОценкиСтоимости   	   = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
	ОдинаковыйМетодОценки  	   = Истина;
	ЕстьФИФОВзвешеннаяОценка   = Ложь;
	ЕстьДругиеМетодыОценки     = Ложь;
	ТекстОшибки			   	   = "";
	
	Если ПараметрыРасчета.ПредварительныйРасчет Тогда
		
		МетодОценкиСтоимости = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
		
	Иначе
		
		Для Каждого Организация Из МассивОрганизаций Цикл

			МетодОценкиПоОрганизации = ПараметрыРасчета.МетодыОценкиСтоимости.Получить(Организация);

			Если ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда // проверка для партионного учета версии 2.2
				
				// В МетодОценкиСтоимости будет записано или ФИФОВзвешеннаяОценка, если такой метод используется у всех организаций
				// или пустая ссылка, означающая, что у организаций используется как метод СредняяЗаМесяц, так и ФИФОСкользящаяОценка.
				Если МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка Тогда
					ЕстьФИФОВзвешеннаяОценка = Истина;
					МетодОценкиСтоимости 	 = МетодОценкиПоОрганизации;
				Иначе
					ЕстьДругиеМетодыОценки   = Истина;
				КонецЕсли;
				
			Иначе // проверка для партионного учета версии 2.1
				
				// Разрешен только один общий для всех организаций метод оценки, который и будет записан в МетодОценкиСтоимости.
				Если МетодОценкиСтоимости <> МетодОценкиПоОрганизации Тогда
					Если НЕ ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда 
						МетодОценкиСтоимости = МетодОценкиПоОрганизации; // первый проход цикла
					Иначе
						ОдинаковыйМетодОценки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьФИФОВзвешеннаяОценка И ЕстьДругиеМетодыОценки Тогда // проверка для партионного учета версии 2.2
			ТекстОшибки = 
				НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
							|%Организации%.
							|Метод оценки ""ФИФО взвешенная оценка"" не может использоваться совместно с любыми другими методами оценки.
							|Настройку метода оценки стоимости можно сделать в учетной политике организаций.'");
		ИначеЕсли НЕ ОдинаковыйМетодОценки Тогда // проверка для партионного учета версии 2.1
			ТекстОшибки = 
				НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
							|%Организации%.
				            |Для всех организаций, работающих по схеме Интеркампани, должен использоваться одинаковый метод оценки.
							|Настройку метода оценки стоимости можно сделать в учетной политике организаций.'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			// Недопустимые методы оценки стоимости или их сочетание - расчет невозможен.
			ТекстОшибки = СтрЗаменить(
				ТекстОшибки,
				"%Организации%",
				ПредставлениеОрганизаций(МассивОрганизаций, ", "));
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВУчетныхПолитикахОрганизаций,
				ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МетодОценкиСтоимости;

КонецФункции

#КонецОбласти

#Область ТипыЗаписейПартий

Функция ТипыЗаписейПервичныхПартий() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Партия);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией);
	
	Возврат Результат;
	
КонецФункции

Функция НепересчитываемыеТипыЗаписей() Экспорт
	
	Результат = Новый Массив;
	
	// Типы записей первичных партий текущего периода.
	Для Каждого Элемент Из ТипыЗаписейПервичныхПартий() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// Типы записей партий прошлых периодов.
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Остаток);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПереносДанных);
	
	// Типы записей "не партий" (с нулевым количеством).
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыЗапасов

Функция СобственныеТипыЗапасов() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗапасов.Товар);
	Результат.Добавить(Перечисления.ТипыЗапасов.Услуга);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументыРасчетаСебестоимости

// Формирует документы расчета себестоимости для рассчитываемых организаций.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ПредварительныйРасчет, РегламентноеЗадание)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Запрос.УстановитьПараметр("ОрганизацииСДвижениямиПоСебестоимости", ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости);
	
	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Ссылка.Проведен КАК Проведен,
	|	Т.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Т.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НовыйФорматДокумента,
	|	ВЫБОР
	|		КОГДА Т.Организация В (&ОрганизацииСДвижениямиПоСебестоимости)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НетДанныхДляРасчета,
	|	Т.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК Т
	|ГДЕ
	|	Т.Ссылка.Дата МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
	|	И НЕ Т.Ссылка.ПометкаУдаления
	|	И Т.Организация В (&ТекущийОтборОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	НовыйФорматДокумента УБЫВ,
	|	Проведен УБЫВ,
	|	ПредварительныйРасчет,
	|	Т.Ссылка.Дата УБЫВ";
	
	// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	// Сохраним перечень документов расчета себестоимости.
	ДокументыРасчетаСебестоимости  = Новый Массив;
	// Сохраним перечень устаревших документов расчета себестоимости, которые нужно удалить.
	ДокументыКУдаления  		   = Новый Массив;
	// Сохраним все организации из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.
	МассивОрганизацийДляРасчета    = Новый Массив;
	
	НомерГруппы = 0;
	
	Пока НомерГруппы < ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Количество() Цикл
		
		ГруппаОрганизаций = ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани[НомерГруппы];
		
		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", ГруппаОрганизаций);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Индексы.Добавить("Организация, ПредварительныйРасчет");
		
		// Удалим все документы расчета себестоимости в "старом формате" - когда организации не было в шапке документа.
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов,
			Новый Структура("НовыйФорматДокумента", Ложь));
		
		// Удалим все документы расчета себестоимости по организациям, по которым нет данных для расчета.
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов,
			Новый Структура("НетДанныхДляРасчета", Истина));
		
		ВозможенРасчет = Истина;
		
		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
		Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
			
			МассивОрганизацийДляРасчета.Добавить(ТекущаяОрганизация);
			
			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(
				Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));
			
			Если СтрокиФакт.Количество() > 0 Тогда
				// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(
					ДокументыКУдаления,
					ТаблицаДокументов,
					Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;
			
			Если РегламентноеЗадание И СтрокиФакт.Количество() > 0 Тогда
				// Т.к. уже есть документы фактического расчета,
				// то предварительный расчет регламентным заданием по этой группе больше не выполняем.
				ВозможенРасчет = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(
				ДокументыКУдаления,
				ТаблицаДокументов,
				Новый Структура("Организация", ТекущаяОрганизация),
				Истина);
				
			ДокументыРасчетаПоОрганизациям.Вставить(ТекущаяОрганизация, ДокументРасчета);
			
		КонецЦикла;
		
		Если НЕ ВозможенРасчет Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчет предварительной себестоимости за %1 по %2 регламентным заданием не выполнялся,
					|т.к. уже выполнен расчет фактической себестоимости'"),
				ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(ПараметрыРасчета),
				?(ГруппаОрганизаций.Количество() > 1, "организациям", "организации")
					+ " """ + ПредставлениеОрганизаций(ГруппаОрганизаций) + """");
			
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
				ТекстОшибки,
				ТекстОшибки);
			
			Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
				ДокументыРасчетаПоОрганизациям.Удалить(ТекущаяОрганизация); // расчета по группе не будет, документы не обрабатываем
			КонецЦикла;
			
			ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Удалить(НомерГруппы);
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Удалить(НомерГруппы);
			
			Продолжить;
			
		КонецЕсли;
		
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	// Удалим ранее сформированные документы расчета себестоимости по организациям, по которым расчет проводить не нужно.
	МассивНеРассчитываемых = ОбщегоНазначенияКлиентСервер.СократитьМассив(
		ПараметрыРасчета.МассивОрганизаций,
		МассивОрганизацийДляРасчета);
	
	Если МассивНеРассчитываемых.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", МассивНеРассчитываемых);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Установим блокировку на изменяемые документы.
		ДокументыКБлокировке = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДокументыКУдаления);
		
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыКБлокировке.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументыКБлокировке.Количество() > 0 Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Документ
			|ИЗ
			|	Документ.РасчетСебестоимостиТоваров КАК Т
			|ГДЕ
			|	Т.Ссылка В (&ДокументыКБлокировке)";
			
			Запрос.УстановитьПараметр("ДокументыКБлокировке", ДокументыКБлокировке);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасчетСебестоимостиТоваров");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Документ");
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		// Удалим ненужные документы расчета себестоимости.
		Для Каждого ТекущийДокумент Из ДокументыКУдаления Цикл
			
			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			// Очистим задание к расчету, которое запишется из события в модуле набора записей.
			НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ТекущийДокумент);
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		ОшибкиДатЗапретаИзменения = "";
		
		// Создадим новые или обновим существующие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", 					ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", 			КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
			
			ДанныеЗаполненияДокумента.Вставить("МетодОценки",
				ПараметрыРасчета.МетодыОценкиСтоимости.Получить(ДанныеЗаполненияДокумента.Организация));
			
			// В шапке документа будет указана организация, по которой рассчитывается себестоимость.
			// Она же будет продублирована в табличной части документа.
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";
			
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, КлючИЗначение.Значение, ОписаниеОшибкиДаты) Тогда
				// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения + ?(ОшибкиДатЗапретаИзменения = "", "", "
					|") + ПротоколРасчетаПартийИСебестоимости.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;
				
			// Записываем документ проведенным, при этом его старые движения останутся до окончания расчета.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиДатЗапретаИзменения) Тогда
			 // Исключение будет отловлено ниже по коду, вместе с другими ошибками записи документов.
			ВызватьИсключение ОшибкиДатЗапретаИзменения;
		КонецЕсли;
		
		ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости",  ДокументыРасчетаСебестоимости);
		ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);
		
		// Сформируем временную таблицу ВТДокументыРасчетаСебестоимости
		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ссылка,
		|	Т.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК Т
		|ГДЕ
		|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		
		Запрос.Выполнить();
		
		// Документ расчета себестоимости больше не имеет движений по регистрам:
		//	- ВыручкаИСебестоимостьПродаж
		//	- Закупки
		//++ НЕ УТ
		//	- ПрочиеРасходыНезавершенногоПроизводства
		//-- НЕ УТ
		// Поэтому, если перепроводим старый документ расчета себестоимости, то его движения по этим регистрам надо очистить.
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|ГДЕ
		|	Т.Регистратор В (&ДокументыРасчетаСебестоимости)";
		
		СтруктураРегистров = Новый Структура("ВыручкаИСебестоимостьПродаж, Закупки");
		//++ НЕ УТ
		СтруктураРегистров.Вставить("ПрочиеРасходыНезавершенногоПроизводства");
		//-- НЕ УТ
		
		Для Каждого КлючИЗначение Из СтруктураРегистров Цикл
			
			ИмяРегистра = КлючИЗначение.Ключ;
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ИмяРегистра);
			
			ЗаписатьДвиженияПоРегистру(Запрос, РегистрыНакопления[ИмяРегистра],	ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось инициализировать документы расчета себестоимости по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
			ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление лишних документов расчета себестоимости из таблицы документов.
//
Функция УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Отбор = Неопределено, ОставитьПервый = Ложь)
	
	ОставленныйДокумент = Неопределено;
	
	Если Отбор = Неопределено Тогда
		СтрокиТаблицы = ТаблицаДокументов; // вся таблица
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор); // отобранные строки
	Иначе
		СтрокиТаблицы = Отбор; // уже готовый массив строк
	КонецЕсли;
	
	Индекс = 0;
	
	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл
		
		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;
		
		ДокументыКУдаления.Добавить(ТекущаяСтрока.Ссылка);
		
		ТаблицаДокументов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОставленныйДокумент;
	
КонецФункции

#КонецОбласти

#Область КонстантыЗаданийКРасчету

// Увеличивает значение указанной константы задания.
//
Функция УвеличитьНомерЗадания(ИмяКонстанты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйНомерЗадания = Константы[ИмяКонстанты].Получить() + 1;
	Константы[ИмяКонстанты].Установить(НовыйНомерЗадания);
	
	Возврат НовыйНомерЗадания;
	
КонецФункции

// Возвращает значение указанной константы задания.
//
Функция ПолучитьНомерЗадания(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

#КонецОбласти

#Область ПоследовательностиРасчета

// Возвращает фактическое требуемое начало периода расчета.
//
Функция НачалоПериодаРасчета(Дата, МассивОрганизаций) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	МИНИМУМ(Задания.Месяц) КАК Месяц
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|		ПО Организации.Ссылка = Задания.Организация
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Периоды.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	ВТПериоды КАК Периоды
	|ГДЕ
	|	Периоды.Месяц ЕСТЬ НЕ NULL 
	|	И Периоды.Месяц <= &Дата
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Периоды.Месяц) ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Дата", 			   Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = ?(ЗначениеЗаполнено(Выборка.НачалоПериодаРасчета), НачалоМесяца(Выборка.НачалоПериодаРасчета), Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = КонецМесяца(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о том, в каких периодах и по каким организациям необходимо пересчитать партии и себестоимость.
// Параметрами функции являются требуемые отборы по дате и организациям,
// а результат - это необходимые по факту (по данным ИБ) пересчеты.
// Например, может получится так, что
//	- пересчитать хочется только одну организацию в текущем месяце,
//  - но для этого надо пересчитать все организации начиная с прошлого года,
//	  т.к. по ним есть записи в регистре ЗаданияКРасчетуСебестоимости и организации связаны по схеме Интеркампани
//
// Параметры:
//	Дата - Дата - конец периода (месяца), в котором надо выполнить пересчет
//	ОтборОрганизации - СправочникСсылка.Организации, Массив - организации, по которым надо выполнить пересчет
//	РазделительВПредставлении - Строка - символ-разделитель в строковом представлении списка организаций
//	НомерЗадания - Число - Номер для фильтрация записей в регистре ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - схема выполнения пересчета партий и себестоимости
//		Дата - Дата - требуемый по факту период пересчета
//		Организации - Массив - массив организаций, по которым требуется пересчет.
//		ПредставлениеОрганизаций - Строка - представление массива организаций
// Таблица отсортирована по колонке Дата и содержит все периоды (без пропусков),
// начиная с самой ранней необходимой даты пересчета и до даты из параметра Дата.
// В таблице не будет строк если пересчет не требуется,
// т.е. если параметр Дата больше, чем даты в записях регистра ЗаданияКРасчетуСебестоимости.
//
Функция СхемаРасчетаПартий(Знач Дата = Неопределено, ОтборОрганизации = Неопределено, РазделительВПредставлении = Неопределено, НомерЗадания = 0)Экспорт
	
	Дата 			  		= КонецМесяца(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДатаСеанса(), Дата));
	МассивОрганизаций 		= ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	ПолныйМассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций);
	
	СхемаРасчета = Новый ТаблицаЗначений; // результат выполнения этой функции
	СхемаРасчета.Колонки.Добавить("Дата", 					  Новый ОписаниеТипов("Дата"));   // период пересчета
	СхемаРасчета.Колонки.Добавить("Организации", 			  Новый ОписаниеТипов("Массив")); // массив организаций, которые надо пересчитать в этом периоде
	СхемаРасчета.Колонки.Добавить("ПредставлениеОрганизаций", Новый ОписаниеТипов("Строка")); // строковое представление организаций
	СхемаРасчета.Колонки.Добавить("ИзмененоДокументов", 	  Новый ОписаниеТипов("Число"));  // для информации, количество измененных документов в этом периоде по этим организациям
	СхемаРасчета.Индексы.Добавить("Дата");
	
	ДатыПересчетаПоОрганизациям = Новый Соответствие; // Организация - Дата, с которой по ней необходим пересчет
	СамаяРанняяДатаПересчета    = КонецМесяца(КонецМесяца(Дата) + 1);
	
	ТребуетсяПересчетПоИсходнымОрганизациям = Ложь;
	
	// Запомним даты начала пересчета по каждой организации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	Задания.Месяц <= &Дата
	|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("ПоВсемНомерамЗаданий", НомерЗадания = 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолныйМассивОрганизаций.Найти(Выборка.Организация) <> Неопределено Тогда
			ТребуетсяПересчетПоИсходнымОрганизациям = Истина;
		КонецЕсли;
		
		ДатыПересчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Месяц);
		СамаяРанняяДатаПересчета = Мин(СамаяРанняяДатаПересчета, Выборка.Месяц);
		
	КонецЦикла;
	
	// Соберем статистику изменения документов - для понимания интенсивности изменения документов "задним числом".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ) КАК Месяц,
	|	Задания.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК ИзмененоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И Задания.Месяц <= &Дата
	|	И (Задания.НомерЗадания <= &НомерЗадания ИЛИ &ПоВсемНомерамЗаданий)
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ),
	|	Задания.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	ТаблицаИзмененныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаИзмененныхДокументов.Индексы.Добавить("Месяц, Организация");
	
	// Добавим в схему расчета строки для каждого периода, начиная с самого раннего и до рассчитываемого периода.
	ОбрабатываемаяДата = СамаяРанняяДатаПересчета;
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		НоваяСтрока = СхемаРасчета.Добавить();
		НоваяСтрока.Дата 		= ОбрабатываемаяДата;
		НоваяСтрока.Организации = ?(ОбрабатываемаяДата = Дата,
			ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПолныйМассивОрганизаций),
			Новый Массив);
		
		ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
		
	КонецЦикла;
	
	// Заполним итеративно организации для перерасчета.
	ОбрабатываемаяДата = Макс(СамаяРанняяДатаПересчета, Дата);
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ТекущаяСтрока    = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
		ПредыдущаяСтрока = СхемаРасчета.Найти(НачалоМесяца(ОбрабатываемаяДата) - 1, "Дата");
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			
			ПоявилисьИзмененияВМассивеОрганизаций = Ложь;
			
			// Организации, которые пересчитывались в прошлом периоде, надо пересчитать и в текущем.
			Для Каждого ПредыдущаяОрганизация Из ПредыдущаяСтрока.Организации Цикл
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТекущаяСтрока.Организации, ПредыдущаяОрганизация) Тогда
					ПоявилисьИзмененияВМассивеОрганизаций = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним массив рассчитываемых организаций связанными с ними организациями.
			Если ПоявилисьИзмененияВМассивеОрганизаций Тогда
				ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИзмененнаяОбрабатываемаяДата = ОбрабатываемаяДата;
		
		// Проверим необходимость пересчета организаций текущего периода в более ранних периодах.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			ДатаПересчетаПоОрганизации = ДатыПересчетаПоОрганизациям[ТекущаяОрганизация];
			
			Если ЗначениеЗаполнено(ДатаПересчетаПоОрганизации) И ДатаПересчетаПоОрганизации < ОбрабатываемаяДата Тогда
				
				СтрокаПоДатеОрганизации = СхемаРасчета.Найти(ДатаПересчетаПоОрганизации, "Дата");
				
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(СтрокаПоДатеОрганизации.Организации, ТекущаяОрганизация) Тогда
					// Такая организация в том периоде еще не была отобрана для пересчета.
					ИзмененнаяОбрабатываемаяДата = Мин(ИзмененнаяОбрабатываемаяДата, ДатаПересчетаПоОрганизации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененнаяОбрабатываемаяДата < ОбрабатываемаяДата Тогда
			
			// Следующий цикл начнем с самого раннего измененного прошлого периода.
			ОбрабатываемаяДата = ИзмененнаяОбрабатываемаяДата;
			
			// Дополним в нем массив рассчитываемых организаций связанными с ними организациями.
			ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
			ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			
		Иначе
			
			// В прошлых периодах ничего не поменялось - переходим к следующему периоду.
			ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СхемаРасчета.Количество() > 0 И СхемаРасчета[0].Организации.Количество() = 0 Цикл
		// Удалим строки ранних периодов, в которых нет организаций для пересчета.
		СхемаРасчета.Удалить(0);
	КонецЦикла;
	
	Если СхемаРасчета.Количество() > 0 И ЗначениеЗаполнено(МассивОрганизаций) Тогда
		
		// Если в составленную схему расчета (по И)
		// - не попала ни одна организация, не входящая исходный отбор (с учетом Интеркампани)
		// - по самим организациям, входящим с исходный отбор, пересчет не требуется
		// то выполнять расчет не требуется.
		ПересечениеМассивов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(
			ПолныйМассивОрганизаций,
			СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
		
		Если ПересечениеМассивов.Количество() = ПолныйМассивОрганизаций.Количество() // только организации из исходного отбора
		 И НЕ ТребуетсяПересчетПоИсходнымОрганизациям Тогда // пересчет по этим организациям не требуется
			
			СхемаРасчета.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из СхемаРасчета Цикл
		
		// Сформируем строковые представления пересчитываемых организаций.
		СписокОрганизаций.ЗагрузитьЗначения(ТекущаяСтрока.Организации);
		СписокОрганизаций.СортироватьПоЗначению();
		
		ТекущаяСтрока.Организации 			   = СписокОрганизаций.ВыгрузитьЗначения();
		ТекущаяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(ТекущаяСтрока.Организации, РазделительВПредставлении);
		ТекущаяСтрока.ИзмененоДокументов	   = 0;
		
		// Заполним статистику изменения документов за период по массиву организаций.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			СтрокиДокументов = ТаблицаИзмененныхДокументов.НайтиСтроки(
				Новый Структура("Месяц, Организация", ТекущаяСтрока.Дата, ТекущаяОрганизация));
				
			Если СтрокиДокументов.Количество() = 1 Тогда
				ТекущаяСтрока.ИзмененоДокументов = ТекущаяСтрока.ИзмененоДокументов + СтрокиДокументов[0].ИзмененоДокументов;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СхемаРасчета;
	
КонецФункции


// Возвращает увеличенный перед началом расчета номер задания к расчету.
//
Функция УвеличитьНомерЗаданияКРасчетуСебестоимости() Экспорт
	
	Возврат РегистрыСведений.ЗаданияКРасчетуСебестоимости.УвеличитьНомерЗадания();
	
КонецФункции

// Устанавливает признак окончания расчета партий в указанном периоде.
//
Процедура УвеличитьПериодРасчетаСебестоимости(РассчитанныйПериод, МассивОрганизаций, ВременныеТаблицы, ПараметрыРасчета = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоПериодаРасчета(РассчитанныйПериод, МассивОрганизаций) < НачалоМесяца(РассчитанныйПериод) Тогда
		Возврат; // есть более ранние нерассчитанные периоды
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ЗаданияКОчистке
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|ГДЕ
	|	ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СледующийМесяц КАК Месяц,
	|	МАКСИМУМ(ЗаданияКОчистке.НомерЗадания) КАК НомерЗадания,
	|	ЗаданияКОчистке.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ПОМЕСТИТЬ НовыеГраницы
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияКОчистке.Организация 
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗаданияВрем
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|	
	|ГДЕ
	|	НЕ (ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|;
	|////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	ИсходныеЗаданияВрем КАК ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКОчистке.Месяц,
	|	ЗаданияКОчистке.НомерЗадания,
	|	ЗаданияКОчистке.Организация,
	|	ЗаданияКОчистке.Документ
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|");
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("СледующийМесяц",    КонецМесяца(РассчитанныйПериод) + 1);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Очистим рассчитанные периоды.
		Выборка = Результаты[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Записать(Истина);
		КонецЦикла;
		
		// Сдвинем период расчета.
		Выборка = Результаты[6].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отметить период %1 как рассчитанный по причине:
				|		%2'"),
			ПротоколРасчетаПартийИСебестоимости.ПредставлениеПериодаРасчета(РассчитанныйПериод),	
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если ПараметрыРасчета = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		Иначе
			ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВыполненияРегламентныхОпераций,
				ТекстСообщения,
				ТекстСообщения);
		КонецЕсли;
		
	КонецПопытки;
	
	УничтожитьВременныеТаблицы(ВременныеТаблицы, "ЗаданияКОчистке, НовыеГраницы, ИсходныеЗаданияВрем");
	
КонецПроцедуры

// Устанавливает признак необходимости распределению НДС в указанном периоде.
//
Процедура СформироватьЗаданияКРаспределениюНДС(РассчитанныйПериод, МассивОрганизаций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация
	|ПОМЕСТИТЬ ПартииНаЭкспорт
	|ИЗ
	// Регистры, используемые только в партионном учете версии 2.1
	|	(ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Партии.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	// Регистры, используемые только в партионном учете версии 2.2
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация
	|	ИЗ 
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В (&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.КорВидДеятельностиНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров))
	|
	|	) КАК Партии
	|;
	|
	|//////////////////////////////////////////////////////////
	// Регистры, используемые во всех версиях партионного учета
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Период            КАК Период,
	|	Партии.Организация       КАК Организация,
	|	Партии.СтатьяРасходов    КАК СтатьяРасходов,
	|	Партии.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ПартииПрочихРасходов
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И Партии.Активность
	|	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов,
	|	Организация
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Месяц КАК Месяц,
	|	Задания.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(НДССостояниеРеализации0.ДатаПодтверждения, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		ПартииНаЭкспорт.Организация                КАК Организация
	|	ИЗ
	|		ПартииНаЭкспорт КАК ПартииНаЭкспорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|		ПО
	|			ПартииНаЭкспорт.Организация = НДССостояниеРеализации0.Организация
	|			И ПартииНаЭкспорт.Регистратор = НДССостояниеРеализации0.ДокументРеализации
	|	ГДЕ
	|		НДССостояниеРеализации0.Состояние В ( 
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0),
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		Таблица.Организация                        КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|	ГДЕ
	|		Таблица.СтатьяРасходов = НЕОПРЕДЕЛЕНО
	|		ИЛИ Таблица.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(
	|			КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), 
	|			МЕСЯЦ)                                 КАК Месяц,
	|		Таблица.Организация                        КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО
	|			Таблица.СтатьяРасходов = СтатьиРасходов.Ссылка
	|			И СтатьиРасходов.ВариантРаспределенияРасходов В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СостоянияОСОрганизаций.Период, МЕСЯЦ) КАК Месяц,
	|		Таблица.Организация                                 КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО
	|			Таблица.СтатьяРасходов = СтатьиРасходов.Ссылка
	|			И СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы) 
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО
	|			Таблица.АналитикаРасходов = СостоянияОСОрганизаций.ОсновноеСредство
	|			И Таблица.Организация = СостоянияОСОрганизаций.Организация
	|			И СостоянияОСОрганизаций.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
	|			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СостоянияНМАОрганизаций.Период, МЕСЯЦ) КАК Месяц,
	|		Таблица.Организация                                  КАК Организация
	|	ИЗ
	|		ПартииПрочихРасходов КАК Таблица
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО
	|			Таблица.СтатьяРасходов = СтатьиРасходов.Ссылка
	|			И СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО
	|			Таблица.АналитикаРасходов = СостоянияНМАОрганизаций.НематериальныйАктив
	|			И Таблица.Организация = СостоянияНМАОрганизаций.Организация
	|			И СостоянияНМАОрганизаций.Регистратор ССЫЛКА Документ.ПринятиеКУчетуНМА
	|			И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	//-- НЕ УТ
	|	) КАК Задания
	|ГДЕ
	|	Задания.Месяц >= &НачалоПериода
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

// Устанавливает признак необходимости формирования записей книги покупок/продаж в указанном периоде.
//
Процедура СформироватьЗаданияКФормированиюЗаписейКнигиПокупокПродаж(РассчитанныйПериод, МассивОрганизаций) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Месяц КАК Месяц,
	|	Партии.Организация КАК Организация,
	|	Партии.СчетФактура КАК СчетФактура
	|ИЗ
	// Регистры, используемые в партионном учете версии 2.1
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) КАК Месяц,
	|		Партии.Организация КАК Организация,
	|		Партии.ДокументПоступления КАК СчетФактура
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> КлючиАналитикиУчетаПартий.НалогообложениеНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	// Регистры, используемые в партионном учете версии 2.2
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступления
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И ((Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.ВидДеятельностиНДС <> Партии.КорВидДеятельностиНДС)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ),
	|		Партии.Организация,
	|		Партии.ДокументПоступленияРасходов
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитикиУчетаПартий
	|			ПО Партии.АналитикаУчетаПартий = КлючиАналитикиУчетаПартий.Ссылка
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.Активность
	|		И Партии.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ((Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			И Партии.НалогообложениеНДС <> Партии.ВидДеятельностиНДС)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			ИЛИ Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|
	// Партии, по которым ранее было зафиксировано изменение вида деятельности
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ),
	|		НДСПредъявленный.Организация,
	|		НДСПредъявленный.СчетФактура
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ГДЕ
	|		НДСПредъявленный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НДСПредъявленный.Организация В(&МассивОрганизаций)
	|		И НДСПредъявленный.Событие В (
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ИзменениеВидаДеятельностиНДС),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ИсключениеНДСИзСтоимости),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость),
	|				ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.РеализацияПоСтавке0))
	|		И НДСПредъявленный.Активность
	|		И НДСПредъявленный.РегламентнаяОперация
	|
	|) КАК Партии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация,
	|	СчетФактура
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияОбъектов

// Возвращает текст сообщений об ошибках, выданных при проверке заполнения объекта.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект - документ, для которого надо выполнить проверку заполнения.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений
//
Функция ПроверитьЗаполнениеОбъектаСПерехватомСообщений(ПроверяемыйОбъект, ПрефиксСообщения = "") Экспорт
	
	ТекстСообщенияПроверки = "";
	
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда 

		ВсеСообщения = ПолучитьСообщенияПользователю(Истина);
		
		// Сообщения, выведенные при проверке заполнения объекта, сохраним в ТекстСообщенияПроверки.
		Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекстСообщенияПроверки = ТекстСообщенияПроверки + ?(ТекстСообщенияПроверки = "", "", "
				|") + ПрефиксСообщения + ТекущееСообщение.Текст;
			
		КонецЦикла;
		
		// Вернем предыдущие сообщения в буфер сообщений.
		Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекущееСообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияПроверки;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область РегламентныеОперации

Функция ВыполнитьРегламентнуюОперацию(ПараметрыРасчета, ТипОперации, ПоГоловнымОрганизациям = Ложь) Экспорт
	
	ПротоколРасчетаПартийИСебестоимости.НачалоЭтапаРасчета(ПараметрыРасчета, "ВыполнитьРегламентнуюОперацию");
	
	Отказ = Ложь;
	
	РезультатВыполнения = Документы.РегламентнаяОперация.РассчитатьРегламентныеОперации(
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		?(ПоГоловнымОрганизациям,
			Справочники.Организации.ГоловныеОрганизации(ПараметрыРасчета.МассивОрганизаций),
			ПараметрыРасчета.МассивОрганизаций),
		Отказ,
		Истина);
	
	Если Отказ Тогда
		
		// Запишем информацию об ошибке в протокол и продолжим расчет
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регламентная операция ""Расчет долей списание косвенных расходов"" не была выполнена.
				|Причина ошибки:
				|%1'"),
			РезультатВыполнения.ТекстОшибки);
		
		ПротоколРасчетаПартийИСебестоимости.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВыполненияРегламентныхОпераций,
			ТекстДляПротокола);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РезультатВыполнения.МассивДокументов) Тогда
		
		// Обновим расчетные кэши в связи с изменением данных ИБ.
		ОбработанныеТипыДокументов = Новый Структура;
		
		Для Каждого ТекущийДокумент Из РезультатВыполнения.МассивДокументов Цикл
			
			ПротоколРасчетаПартийИСебестоимости.ДополнительнаяИнформация(
				ПараметрыРасчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Проведен документ ""%1""'"),
					СокрЛП(ТекущийДокумент)));
			
			МетаданныеДокумента = ТекущийДокумент.Метаданные();
			Если ОбработанныеТипыДокументов.Свойство(МетаданныеДокумента.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеТипыДокументов.Вставить(МетаданныеДокумента.Имя);
			
			Для Каждого МетаданныеДвижения Из МетаданныеДокумента.Движения Цикл
				
				ИмяРегистра = МетаданныеДвижения.Имя;
				
				Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ИмяРегистра)
				 Или ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ИмяРегистра) Тогда
				 
				 	// По данному регистру, для которого регистратором является этот тип документа,
					// ведутся расчетные кэши - их надо будет обновить.
					ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
					ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета, Истина);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ


#Область ПроцедурыВызываемыеИзРегистров

// Возвращает признак записи движений по регистру механизмом расчета партий и себестоимости.
//
// Параметры:
//	НаборЗаписей - набор записей регистра
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца
//
Функция ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей) Экспорт
	
	// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом партий и себестоимости.
// Такие движения имеют реквизит РасчетПартий = Истина или РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - НаборЗаписейРегистраНакопления - свойство ЭтотОбъект модуля набора записей
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью)
//
Процедура СохранитьДвиженияСформированныеРасчетомПартийИСебестоимости(НаборЗаписей, Замещение) Экспорт
	
	Если НЕ Замещение Тогда
		Возврат; // движения, сформированные расчетом партий и себестоимости, не затираются
	КонецЕсли;
	
	Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДатаРегистратора")
	 ИЛИ НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("РежимЗаписи")
	 ИЛИ НаборЗаписей.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат; // движения, сформированные расчетом партий и себестоимости, надо удалить
	КонецЕсли;
	
	// Готовим вспомогательные данные
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	Если ОписаниеРегистра.ЕстьРасчетСебестоимости И ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ТекстОтборРасчетныеДвижения = "И (Т.РасчетСебестоимости ИЛИ Т.РасчетПартий)";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
		ТекстОтборРасчетныеДвижения = "И Т.РасчетСебестоимости";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда
		Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
			// Для регистров партионного учета при использовании партионного учета ниже версии 2.2
			// сохранить оффлайновые движения не получится, т.к. у них не заполняется реквизит "РасчетПартий".
			Возврат;
		КонецЕсли;
		ТекстОтборРасчетныеДвижения = "И Т.РасчетПартий";
	Иначе
		// Регистр не обслуживается расчетом партий и себестоимости
		Возврат;
	КонецЕсли;
	
	ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И Т.Активность";
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И НЕ Т.ВидИсточника В (
		|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетСебестоимости),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковУправленческогоБаланса.РасчетБаланса))";
	КонецЕсли;
	
	ТекстПоляОсновнойТаблицыРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "
		|	Т.");
	
	// Определим периоды сохраняемых движений - это период самого документа плюс периоды его первичных движений.
	МассивПериодов = Новый Массив;
	МассивПериодов.Добавить(НачалоМесяца(НаборЗаписей.ДополнительныеСвойства.ДатаРегистратора));
	
	ПериодыДвижений = НаборЗаписей.Выгрузить(, "Период");
	ПериодыДвижений.Свернуть("Период", "");
	
	Для Каждого ТекСтр Из ПериодыДвижений Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивПериодов, НачалоМесяца(ТекСтр.Период));
	КонецЦикла;
	
	// Готовим запрос для выборки движений, сформированных расчетом партий и себестоимости
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", 	Регистратор);
	Запрос.УстановитьПараметр("МассивПериодов", МассивПериодов);
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода", НаборЗаписей.ДополнительныеСвойства.ДополнитьДвижениямиИзИБЗаПериод.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",  НаборЗаписей.ДополнительныеСвойства.ДополнитьДвижениямиИзИБЗаПериод.КонецПериода);
		
		Запрос.Текст =
		"ВЫБРАТЬ %1
		|ИЗ
		|	РегистрНакопления.%2 КАК Т
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	%3
		|";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ %1
		|ИЗ
		|	РегистрНакопления.%2 КАК Т
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	И НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) В (&МассивПериодов)
		|	%3
		|";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ТекстПоляОсновнойТаблицыРегистра,
		ОписаниеРегистра.ИмяРегистра,
		ТекстОтборРасчетныеДвижения);
	
	// Дополним набор записей документа движениями, сформированных расчетом партий и себестоимости
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзДокументов

// Устанавливает параметры запроса выборки данных для проведения по регистру СебестоимостьТоваров.
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты) Экспорт
	
	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Период") Тогда
		Период = Реквизиты.Период;
	Иначе
		Период = Реквизиты.Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоМесяца(Период)));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоМесяца(Период)));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Период)));
	
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация") Тогда
		
		МетодОценки = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(
			Реквизиты.Организация, НачалоМесяца(Период));
		
		Запрос.УстановитьПараметр("ФИФОСкользящаяОценка",
			(МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Сделка") Тогда
		Запрос.УстановитьПараметр("Сделка", Реквизиты.Сделка);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОбособленныйУчетТоваровПоСделке") Тогда
		Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке", Реквизиты.ОбособленныйУчетТоваровПоСделке);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ВариантОбособленногоУчетаТоваров") Тогда
		Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиИнициализированы", Истина);
	
КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на модифицированность не проверяются.
// 
// Параметры:
//	ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется)
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части
//
Функция ИзмененыТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей) Экспорт
	
	Результат = Новый Структура("ЕстьИзменения, Дата", Ложь, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаДокумент = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|%ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|ВЫБРАТЬ
	|%ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|(ВЫБРАТЬ
	|%ПоляТаблицы
	|ИЗ
	|	ВТТабличнаяЧасть КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|%ПоляСМинусом
	|ИЗ
	|	%ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|) КАК Т
	|%Группировка
	|%УсловиеОтбора
	|;
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(%Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		// Сформируем текст запроса и выполним запрос.
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		
		Запрос.Текст = ШаблонЗапроса;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", 	  СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", 	  СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", 	  СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", 	  ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + СтрокаИзмерения));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", 	  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", 			  СтрокаДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат <> Null Тогда // найдены отличия
			
			Результат.ЕстьИзменения = Истина;
			
			Если ТипЗнч(Выборка.Результат) = Тип("Дата") Тогда
				Результат.Дата = ?(Результат.Дата = Неопределено, Выборка.Результат, Мин(Результат.Дата, Выборка.Результат));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает в документе и его движениях признак того, что документ проводится при выполнении расчета партий/себестоимости.
//
Процедура УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументОбъект) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Движение.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на измененность не проверяются.
// 
// Параметры:
//	ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется)
//
// Возвращаемое значение:
//	Структура с ключами
//		ЕстьИзменения - Булево - признак наличия изменений в табличной части
//		Дата - Дата или Неопределено - минимальное значение реквизита даты в измененных строка табличной части
//
Функция ПериодыИзмененияТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей, Перезаполнить) Экспорт
	
	Результат = Новый Структура();
	ОбщийМинимальныйПериод = Неопределено;
	МинимальныйПериод = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаДокумент = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Перезаполнить", Перезаполнить);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|%ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|ВЫБРАТЬ
	|Т.Проведен,
	|Т.Перезаполнить,
	|%ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|(ВЫБРАТЬ
	|	Истина КАК Проведен,
	|	&Перезаполнить КАК Перезаполнить,
	|%ПоляТаблицы
	|ИЗ
	|	ВТТабличнаяЧасть КАК Т
	|//%ОтборДанныхОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка.Проведен КАК Проведен,
	|	ЛОЖЬ КАК Перезаполнить,
	|%ПоляСМинусом
	|ИЗ
	|	%ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	//%ОтборДанныхИБ
	|) КАК Т
	|%Группировка
	|%УсловиеОтбора
	|;
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(%Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	%Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
				Или МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		СтрокаПоляГруппировка = ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + "Т.Проведен, Т.Перезаполнить," + Символы.ПС + СтрокаИзмерения);
		
		// Сформируем текст запроса и выполним запрос.
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		
		Запрос.Текст = ШаблонЗапроса;
		
		Если КлючИЗначение.Ключ = "ОбеспечениеМатериаламиИРаботами" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", "
				|ГДЕ
				|	Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", "
				|	И Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))");
		ИначеЕсли КлючИЗначение.Ключ = "ВыходныеИзделия" Или КлючИЗначение.Ключ = "ПобочныеИзделия" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхОбъекта", "
			|ГДЕ
			|	Т.Произведено");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ОтборДанныхИБ", "
			|	И Т.Произведено");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляТаблицы", 	  СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСМинусом", 	  СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвернутые", 	  СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Группировка", 	  СтрокаПоляГруппировка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбора", 	  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Дата", 			  СтрокаДата);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат <> Null Тогда // найдены отличия
			
			Результат.Вставить(КлючИЗначение.Ключ, НачалоМесяца(Выборка.Результат));
			
			Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
				ОбщийМинимальныйПериод = Мин(ОбщийМинимальныйПериод, НачалоМесяца(Выборка.Результат));
			Иначе
				ОбщийМинимальныйПериод = НачалоМесяца(Выборка.Результат);
			КонецЕсли;
			
			Если КлючИЗначение.Значение.ВключитьВМинимум Тогда
				Если ЗначениеЗаполнено(МинимальныйПериод) Тогда
					МинимальныйПериод = Мин(МинимальныйПериод, НачалоМесяца(Выборка.Результат));
				Иначе
					МинимальныйПериод = НачалоМесяца(Выборка.Результат);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
		ОбщийМинимальныйПериод = НачалоМесяца(ОбщийМинимальныйПериод);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальныйПериод) Тогда
		МинимальныйПериод = НачалоМесяца(МинимальныйПериод);
	КонецЕсли;
	
	Результат.Вставить("ОбщийМинимальныйПериод", ОбщийМинимальныйПериод);
	Результат.Вставить("МинимальныйПериод", МинимальныйПериод);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВызываемыеИзОтчетов

// При формировании отчета проверяет актуальность расчета партий и при необходимости запускает расчет партий в фоновом задании.
// Также в шапку отчета выводится информация о текущем состоянии расчета партий.
// Параметры запуска расчета партий помещаются в КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.
//
// Параметры:
//	ДокументРезультат - ТабличныйДокумент - табличный документ отчета, вызывающего проверку
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку
//
Процедура АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРасчета = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ПараметрыРасчета.Вставить("РасчетПартийИСебестоимости", Ложь);
	ПараметрыРасчета.Вставить("НачалоПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("КонецПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("МассивОрганизаций", 			Неопределено);
	ПараметрыРасчета.Вставить("КоличествоДокументов", 		0);
	ПараметрыРасчета.Вставить("НомерЗадания", 				РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолучитьНомерЗадания());
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	ГраницаРасчета 		 = ?(ПараметрПериодОтчета.Использование, ПараметрПериодОтчета.Значение.ДатаОкончания, ТекущаяДатаСеанса());
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено
	 И Константы.АктуализироватьДанныеПриФормированииОтчетов.Получить()
	 И УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ГраницаРасчета)) Тогда
		
		ОперацииСравнения = Новый Массив;
		ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		
		ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, "Организация", ОперацииСравнения, Ложь);
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);
		
		СхемаРасчета = УниверсальныеМеханизмыПартийИСебестоимости.СхемаРасчетаПартий(ГраницаРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если СхемаРасчета.Количество() > 0 Тогда
			
			ПараметрыРасчета.НачалоПериодаРасчета 		= НачалоМесяца(СхемаРасчета[0].Дата);
			ПараметрыРасчета.КонецПериодаРасчета  		= КонецМесяца(ГраницаРасчета);
			
			ПараметрыРасчета.МассивОрганизаций 	  		= ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				СхемаРасчета[СхемаРасчета.Количество()-1].Организации); // в последней строке есть все организации, по которым будет выполнен расчет
			
			ПараметрыРасчета.КоличествоДокументов 		= КоличествоНеактуальныхДокументов(ПараметрыРасчета);
			
			ПараметрыРасчета.РасчетПартийИСебестоимости = ПартионныйУчет.РассчитатьФоновымЗаданием(
				ПараметрыРасчета.КонецПериодаРасчета,
				ПараметрыРасчета.МассивОрганизаций);
			
			ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что расчета партий, запущенный при формировании отчета, завершен.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры запуска расчета партий;
//		ключи структуры см. в АктуализироватьПартииДляОтчетов() и в ОтчетыУТКлиентПереопределяемый.ВосстановитьОффлайновыеРасчеты()
//
// Возвращаемое значение:
//	Булево - признак окончания расчета
//
Функция ПартииДляОтчетовАктуализированы(ПараметрыРасчета) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
	 ИЛИ НЕ ПараметрыРасчета.Свойство("КонецПериодаРасчета")
	 ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРасчета.КонецПериодаРасчета) Тогда
		Возврат Истина; // расчет не выполнялся
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МИНИМУМ(Очередь.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Очередь
	|ГДЕ
	|	Очередь.НомерЗадания <= &НомерЗадания
	|	И Очередь.Организация В (&МассивОрганизаций)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Очередь.Месяц) ЕСТЬ NULL)
	|	И МИНИМУМ(Очередь.Месяц) <= &КонецПериодаРасчета
	|";
	
	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	 ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", 		 ПараметрыРасчета.НомерЗадания);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции


// Возвращает количество документов, измененных после прошлого закрытия месяца.
//
Функция КоличествоНеактуальныхДокументов(ПараметрыРасчета)
	
	КоличествоДокументов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И Задания.Месяц <= &Период
	|	И (&ПоВсемОрганизациям ИЛИ Задания.Организация В (&МассивОрганизаций))";
	
	Запрос.УстановитьПараметр("Период", 	  		ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Выводит в табличный документ предупреждение, если отчет формируется по неактуальным данным.
//
Процедура ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета)
	
	ТекстПредупреждения = НСтр("ru ='Расчет партий выполнен до %ДатаАктуальности.'");
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,
		"%ДатаАктуальности",
		Формат(КонецМесяца(ПараметрыРасчета.НачалоПериодаРасчета - 1), "ДЛФ=D"));
	
	Если ПараметрыРасчета.РасчетПартийИСебестоимости Тогда
		
		ТекстПредупреждения = ТекстПредупреждения + "
			|" + НСтр("ru ='Запущено фоновое задание расчета партий до %ОписаниеРасчета
			|После окончания расчета Вам будет предложено переформировать отчет.'");
			
		Если ЗначениеЗаполнено(ПараметрыРасчета.КоличествоДокументов) Тогда
			ТекстКоличествоДокументов = " "
				+ СтрЗаменить(НСтр("ru ='(требуется распределить партии для %КоличествоДокументов)'"),
					"%КоличествоДокументов",
					ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КоличествоДокументов));
		Иначе
			ТекстКоличествоДокументов = "";
		КонецЕсли;
		
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,
			"%ОписаниеРасчета",
			Формат(ПараметрыРасчета.КонецПериодаРасчета, "ДЛФ=D") + ТекстКоличествоДокументов + ".");
	 	
	КонецЕсли;
	
	ТаблицаПредупреждение = Новый ТабличныйДокумент;
	ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
	
	ОбластьПредупреждение.Текст 	 = ТекстПредупреждения;
	ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	ДокументРезультат.ВставитьОбласть(
		ОбластьПредупреждение,
		ДокументРезультат.Область(1,1,1,1),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбменов

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//	ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена
//
// Возвращаемое значение:
//	Булево - признак того, что ПолученныеДанные - это данные, относящиеся к механизму расчета себестоимости
//
Функция ПриПолученииДанныхОтПодчиненного(ПолученныеДанные) Экспорт
	
	Попытка
		МетаданныеПолученныхДанных = ПолученныеДанные.Метаданные();
	Исключение
		Возврат Ложь; // у этого объекта нет метода для получения его метаданных - объект не нужно обрабатывать
	КонецПопытки;
	
	Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеПолученныхДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим описание входящих данных механизмов расчета
	ВходящиеДанные = Новый Соответствие;
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	КонецЕсли;
	
	Если ВходящиеДанные.Получить(МетаданныеПолученныхДанных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Только изменение регистра накопления, являющегося исходными данными для расчета,
	// приводит к необходимости перерасчета партий и себестоимости.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если МетаданныеПолученныхДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ОрганизацияВладелец") <> Неопределено Тогда
		ИмяПоляОрганизации = "ОрганизацияВладелец";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
		ИмяПоляОрганизации = "ВидЗапасов";
		ИмяКонтейнераОрганизации = "Справочник.ВидыЗапасов"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "Ссылка";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаУчетаПоПартнерам";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаУчетаПоПартнерам";  // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат Ложь; // невозможно определить организацию из данных регистра
	КонецЕсли;
	
	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации);
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);
	
	Запрос.УстановитьПараметр("Т",	    ТаблицаНабора);
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.%ИмяПоляОрганизации          КАК Организация
	|ПОМЕСТИТЬ ВТПолученныеДанные
	|ИЗ
	|	&Т КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации", ИмяПоляОрганизации);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Период,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПолученныеДанные КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.%ИмяПоляОрганизации          КАК Организация
	|ИЗ
	|	РегистрНакопления.%ИмяПолученныхДанных КАК Т
	|ГДЕ
	|	Т.Регистратор = &Ссылка
	|";
	
	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда
		
		// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период КАК Период,
		|	Контейнер.%ИмяПоляОрганизацииВКонтейнере КАК Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ") КАК Т
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяКонтейнераОрганизации КАК Контейнер
		|ПО Т.Организация = Контейнер.%ИмяПоляСвязиВКонтейнере
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Месяц,
	|	Т.Организация КАК Организация,
	|	&Ссылка 	  КАК Документ
	|ИЗ
	|	ВТПериоды КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
	|			ПО Т.Период = ЗаданияКРасчетуСебестоимости.Месяц
	|			 И Т.Организация = ЗаданияКРасчетуСебестоимости.Организация
	|			 И ЗаданияКРасчетуСебестоимости.Документ = &Ссылка
	|ГДЕ
	|	ЗаданияКРасчетуСебестоимости.НомерЗадания ЕСТЬ NULL
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПолученныхДанных", 			МетаданныеПолученныхДанных.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяКонтейнераОрганизации",  		ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляСвязиВКонтейнере",  		ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизацииВКонтейнере",  ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации",  			ИмяПоляОрганизации);
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
	Возврат Истина; // данные обработаны успешно
	
КонецФункции

#КонецОбласти


#Область ТекущееСостояниеРасчета

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - месяц расчета
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета
//
Функция СостояниеРасчетПартийТоваров(ПериодРасчета, ОтборОрганизации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Дополним связанными по Интеркампани организациями
	МассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(
		ПериодРасчета,
		ОтборОрганизации);
	
	Если НачалоПериодаРасчета(ПериодРасчета, МассивОрганизаций) <= ПериодРасчета Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено; // партии не актуальны
	КонецЕсли;		
	Если ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций) Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено; // период не рассчитывался в партионном учете версии 2.2
	КонецЕсли;		
	Если РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.БылиОшибкиПриРасчете(ПериодРасчета, МассивОрганизаций, Ложь) Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	СостояниеКорректировкиНДС = СостояниеКорректировкиНДС(ПериодРасчета, МассивОрганизаций);
	Если СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	
	НетДвиженийСебестоимости = НЕ ЕстьДвиженияПоРегиструНакопления(
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
		ПериодРасчета,
		МассивОрганизаций);
	
	НетПартийПрочихРасходов = НЕ ЕстьДвиженияПоРегиструНакопления(
		Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя,
		ПериодРасчета,
		МассивОрганизаций);
	
	Если НетПартийПрочихРасходов И НетДвиженийСебестоимости
 	 И СостояниеКорректировкиНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - месяц расчета
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета
//	ПроверятьСостояниеРасчетаПартий - Булево - сначала проверять состояние расчета партий
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета
//
Функция СостояниеРасчетаСебестоимости(ПериодРасчета, ОтборОрганизации, ПроверятьСостояниеРасчетаПартий = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьСостояниеРасчетаПартий Тогда
		
		Состояние = СостояниеРасчетПартийТоваров(ПериодРасчета, ОтборОрганизации);
		
		Если Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополним связанными по Интеркампани организациями.
	МассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(ПериодРасчета, ОтборОрганизации);
	
	Если МассивОрганизаций.Количество() = 0 Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	ОрганизацииСДокументамиРасчетаСебестоимости = ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, МассивОрганизаций);
	
	Если ОрганизацииСДокументамиРасчетаСебестоимости.Количество() = 0 Тогда
		// В указанном месяце нет движений по регистрам себестоимости.
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	Если РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.БылиОшибкиПриРасчете(ПериодРасчета, МассивОрганизаций, Истина) Тогда
		// Предыдущий расчет по этому периоду/организациям диагностировал ошибки - требуется пересчет.
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	ПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета));
	ДатаПереходаНаПартионныйУчетВерсии22 = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
	
	Если ПартионныйУчетВерсии22 И НачалоМесяца(ПериодРасчета) = ДатаПереходаНаПартионныйУчетВерсии22 Тогда
		// Для организаций, у которых на момент перехода на партионный учет версии 2.2 использовался методом оценки ФИФОСкользящая,
		// обязательно должны присутствовать документы расчета себестоимости,
		// т.к. по таким организациям будут формироваться остатки партий и записываться в движения этих документов.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ОрганизацииСДокументамиРасчетаСебестоимости,
			ОрганизацииСФИФОСкользящая(НачалоМесяца(ПериодРасчета) - 1, МассивОрганизаций),
			Истина);
	КонецЕсли;
	
	// Проверка состояние расчета себестоимости заключается в последовательном выполнении "проверочных" запросов.
	// Если хоть один из запросов вернет непустой результат, значит расчет выполнен с ошибками (не выполнен).
	СостояниеРасчета = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	
	ТекстЗапросаПроверкаНаличияРегламентныхДокументов =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РассчитанныеОрганизации
	|		ПО Организации.Ссылка = РассчитанныеОрганизации.Организация
	|			И (РассчитанныеОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РассчитанныеОрганизации.Ссылка.Проведен)
	|			И (НЕ РассчитанныеОрганизации.Ссылка.ПредварительныйРасчет)
	|ГДЕ
	|	Организации.Ссылка В(&ОрганизацииСДокументамиРасчетаСебестоимости)
	|	И РассчитанныеОрганизации.Организация ЕСТЬ NULL 
	|";
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаПроверкаНаличияРегламентныхДокументов);
	ТекстыЗапросов.Добавить(ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета());
	ТекстыЗапросов.Добавить(ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета());
	
	Запрос = Новый Запрос;
	
	// Установим параметры для всех "проверочных" запросов.
	Запрос.УстановитьПараметр("НачалоПериода", 			 					 НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  			 					 КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", 	 					 Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",				 Новый Граница(НачалоМесяца(ПериодРасчета) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", 					 КонецМесяца(ПериодРасчета) + 1);
	Запрос.УстановитьПараметр("МассивОрганизаций",   	 					 МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСДокументамиРасчетаСебестоимости", ОрганизацииСДокументамиРасчетаСебестоимости);
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",  					 ПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22", 		 ДатаПереходаНаПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			// Состояние НеВыполнено отдельно не диагностируем - оно будет отображено в форме закрытия месяца
			// в случае, если аналогичный статус установлен у этапа расчета партий.
			СостояниеРасчета = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СостояниеРасчета;	
	
КонецФункции


// Возвращает текущее состояние корректировки налогообложения НДС.
//
Функция СостояниеКорректировкиНДС(ПериодРасчета, МассивОрганизаций)
	
	НеТребуетсяКорректировкаНДС = Истина;
	ВыполненаКорректировкаНДС	= Истина;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ПериодРасчета))
	 И КонецКвартала(ПериодРасчета) = КонецМесяца(ПериодРасчета) Тогда
		
		НачалоСледНалПериода = КонецМесяца(ПериодРасчета) + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", 	   		 НачалоМесяца(ПериодРасчета));
		Запрос.УстановитьПараметр("КонецПериода",  	   		 КонецМесяца(ПериодРасчета));
		Запрос.УстановитьПараметр("МассивОрганизаций", 		 МассивОрганизаций);
		Запрос.УстановитьПараметр("ГраницаКонецПериода", 	 Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("НачалоПериодаМинус3Года", ДобавитьМесяц(НачалоСледНалПериода, -36));
		Запрос.УстановитьПараметр("КонецПериодаМинус3Года",  ДобавитьМесяц(КонецКвартала(НачалоСледНалПериода), -36));
		
		// Необходимость корректировки НДС проверяем по наборам аналитик
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Партии.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(Партии.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТПартии
		|ИЗ
		// Регистры, используемые только в партионном учете версии 2.1
		|	(ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		Остатки.КоличествоОстаток				КАК КоличествоОстаток,
		|		Остатки.КоличествоОстаток				КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровОрганизаций.Остатки(
		|				&ГраницаКонецПериода,
		|				АналитикаУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
		|					И (ДокументПоступления.Дата МЕЖДУ &НачалоПериодаМинус3Года И &КонецПериодаМинус3Года)
		|					И Организация В(&МассивОрганизаций)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		0										КАК КоличествоОстаток,
		|		Остатки.Количество						КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровОрганизаций КАК Остатки
		|	ГДЕ
		|		Остатки.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Остатки.Организация В(&МассивОрганизаций)
		|		И Остатки.Активность
		|		И Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Остатки.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Регистры, используемые только в партионном учете версии 2.2
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		Остатки.КоличествоОстаток				КАК КоличествоОстаток,
		|		Остатки.КоличествоОстаток				КАК Количество
		|	ИЗ
		|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН.Остатки(
		|				&ГраницаКонецПериода,
		|				АналитикаУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
		|					И (ДокументПоступления.Дата МЕЖДУ &НачалоПериодаМинус3Года И &КонецПериодаМинус3Года)
		|					И Организация В(&МассивОрганизаций)) КАК Остатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Организация						КАК Организация,
		|		Остатки.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		Остатки.ДокументПоступления				КАК ДокументПоступления,
		|		Остатки.ВидЗапасов						КАК ВидЗапасов,
		|		Остатки.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
		|		0										КАК КоличествоОстаток,
		|		Остатки.Количество						КАК Количество
		|	ИЗ
		|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Остатки
		|	ГДЕ
		|		Остатки.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Остатки.Организация В(&МассивОрганизаций)
		|		И Остатки.Активность
		|		И Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Остатки.Регистратор ССЫЛКА Документ.КорректировкаНалогообложенияНДСПартийТоваров
		|
		|	) КАК Партии
		|
		|СГРУППИРОВАТЬ ПО
		|	Партии.Организация,
		|	Партии.АналитикаУчетаНоменклатуры,
		|	Партии.ДокументПоступления,
		|	Партии.ВидЗапасов,
		|	Партии.АналитикаУчетаПартий
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Партии.КоличествоОстаток) КАК КоличествоОстаток,
		|	МАКСИМУМ(Партии.Количество) КАК Количество
		|ИЗ
		|	ВТПартии КАК Партии";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НеТребуетсяКорректировкаНДС = (Выборка.Количество = NULL ИЛИ Выборка.Количество <= 0);
		ВыполненаКорректировкаНДС   = НеТребуетсяКорректировкаНДС ИЛИ (Выборка.КоличествоОстаток <> NULL И Выборка.КоличествоОстаток > 0);
		
	КонецЕсли;
	
	Если НеТребуетсяКорректировкаНДС Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли ВыполненаКорректировкаНДС Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Проверяет наличие движений по указанному регистру в расчетном периоде по рассчитываемым организациям.
//
Функция ЕстьДвиженияПоРегиструНакопления(ИмяРегистра, ПериодРасчета, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.%1 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Активность
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяРегистра);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Проверяет наличие явных проблем в движениях по себестоимости товаров.
//
Функция ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций)
	
	Если НЕ УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета)) Тогда
		Возврат Ложь; // проверяем только движения партионного учета версии 2.2
	КонецЕсли;
	
	// В первичных движениях документов и в движениях, сформированных механизмом расчета партий, должен быть заполнен тип записи.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Активность
	|	И НЕ Т.РасчетСебестоимости
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

	
// Выполняет проверку окончания обновления входящих и исходящих данных запущенного механизма расчета.
//
Процедура ПроверитьБлокировкуДанныхПриОбновленииИБ(ВыполняетсяРасчетСебестоимости, ПартионныйУчетВерсии22 = Неопределено, ПараметрыОтладки = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыОтладки) = Тип("Структура")
	 И ПараметрыОтладки.Свойство("Отладка")
	 И ТипЗнч(ПараметрыОтладки.Отладка) = Тип("Структура")
	 И ПараметрыОтладки.Отладка.Свойство("НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ")
	 И ПараметрыОтладки.Отладка.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ Тогда
		Возврат; // при вызове механизма расчета указали, что окончание обновления ИБ ожидать не надо
	КонецЕсли;
	
	ПроверяемыеДанные = Новый Соответствие;
	ПроверяемыеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости, Истина);
	
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
	
	Если ВыполняетсяРасчетСебестоимости Тогда // выполняется механизм расчета себестоимости
		ПредставлениеОперации = РасчетСебестоимости.ТекущаяВерсияМеханизма();
	ИначеЕсли НЕ ПартионныйУчетВерсии22 Тогда // выполняется механизм партионного учета версии 2.1
		ПартионныйУчет.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПартионныйУчет.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = ПартионныйУчет.ТекущаяВерсияМеханизма();
	Иначе // выполняется механизм партионного учета версии 2.2
		ПартионныйУчет22.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПартионныйУчет22.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = ПартионныйУчет22.ТекущаяВерсияМеханизма();
	КонецЕсли;
	
	ЗакрытиеМесяцаУТВызовСервера.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		ПроверяемыеДанные,
		ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#Область Отладка

// Возвращает число строк во временной таблице.
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция РазмерВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСтрок;
	
КонецФункции

// Возвращает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
Функция ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	ВыгруженнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгруженнаяТаблица;
	
КонецФункции

// Выгружает в файл нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицуВФайл(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "C:\Temp\Таблица.mxl")
//
Функция ВыгрузитьВременнуюТаблицуВФайл(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ПолноеИмяФайла, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	ВыгруженнаяТаблица = ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок, ТекстСортировки);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ВыгруженнаяТаблица, ПолноеИмяФайла);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Выбирает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", 1)
//
Функция ВыбратьСтрокиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Подменяет текст переданного запроса на текст из указанного файла и возвращает результат запроса.
// Выполняет запрос с указанным текстом.
// 
// Параметры:
//	ИсточникДанных - Запрос, МенеджерВременныхТаблиц, Структура (в которой хранятся ПараметрыРасчета), Неопределено
//	ПутьКФайлуСТекстомЗапроса - Строка - полное имя текстового файла, содержащего текст запроса
//
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt")
//
Функция ВыполнитьЗапросСПроизвольнымТекстом(ИсточникДанных, ПутьКФайлуСТекстомЗапроса) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Файл = Новый ТекстовыйДокумент;
	
	Результат = Новый Структура;
	
	Попытка
		
		Если ТипЗнч(ИсточникДанных) = Тип("Запрос") Тогда
			Запрос = ИсточникДанных;
			Результат.Вставить("СтарыйТекстЗапроса", Запрос.Текст);
		Иначе
			Запрос = Новый Запрос;
			Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
				ИнициализироватьСвойстваЗапроса(Запрос, ИсточникДанных);
			КонецЕсли;
		КонецЕсли;
		
		Файл.Прочитать(ПутьКФайлуСТекстомЗапроса, КодировкаТекста.UTF8);
		
		Результат.Вставить("НовыйТекстЗапроса", Файл.ПолучитьТекст());
		Запрос.Текст = Результат.НовыйТекстЗапроса;
		
		Результат.Вставить("Результат", Запрос.Выполнить());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
	КонецПопытки;
	
	Если Результат.Свойство("СтарыйТекстЗапроса") Тогда // был передан запрос
		ИсточникДанных.Текст = Результат.СтарыйТекстЗапроса;
	КонецЕсли;
	
	Результат.Вставить("Время", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	
	Возврат Результат;
	
КонецФункции

// Метод блокирует записи в регистре ЗаданияКРасчетуСебестоимости в диапазоне номера заданий: 0 ... НомерЗаданияДоРасчета.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Верхняя граница диапазона блокировки.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
КонецПроцедуры

// Сохраняет в менеджер временных таблиц записи регистра Задания к расчету себестоимости.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Выбираются записи у которых номер задания <= НомерЗаданияДоРасчета.
//	ОрганизацииКРасчету - Массив - Перечень организаций, по которым сохраняются задания.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит в себе ВТ "ИсходныеЗадания".
//
Функция СформироватьВТЗаданияДоРасчета(НомерЗаданияДоРасчета, ОрганизацииКРасчету) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.Организация,
	|	Задания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Организация В (&МассивОрганизаций)
	|");
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОрганизацииКРасчету);
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
КонецФункции

#КонецОбласти

#КонецОбласти
