
#Область ПрограммныйИнтерфейс

// Возвращает таблицу с фактическими данными
// Состав колонок определяется параметрами получения факта
//
// Параметры:
//	ПараметрыПолученияФакта - Структура - параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта()
//
// Возвращаемое значение:
//	ТаблицаЗначений - фактические данные
//
Функция ФактСтатейПоПравилам(ПараметрыПолученияФакта) Экспорт
	
	#Область ИнициализацияПеременных
		
	// Параметры получения фактических данных
	ПоПравиламПолученияДанных         = ПараметрыПолученияФакта.ВозвращатьПравилоПолученияДанных;
	ПоОрганизациям                    = ПараметрыПолученияФакта.ПоОрганизациям;
	ПоПодразделениям                  = ПараметрыПолученияФакта.ПоПодразделениям;
	ПоРегистратору                    = ПараметрыПолученияФакта.РазворачиватьПоРегистратору;
	ПоПериодам                        = ПараметрыПолученияФакта.Периодичность <> Неопределено;
	Периодичность                     = ПараметрыПолученияФакта.Периодичность;
	ВозвращатьСуммуВВалюте            = ПараметрыПолученияФакта.ВозвращатьСуммуВВалюте;
	ВидыАналитик                      = ПараметрыПолученияФакта.ВидыАналитик;
	МаксимальныйНомерАналитики        = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ТаблицаПравилСтатей  = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	
	// Дополнительные данные
	ДополнительныеДанные     = ПараметрыПолученияФакта.ДополнительныеДанные;
	ВидДопДанных             = ДополнительныеДанные.Вид;
	ТаблицаДопДанных         = ДополнительныеДанные.ТаблицаДанных;
	ИмяПоляИдентификатора    = ДополнительныеДанные.ИмяПоляИдентификатора;
	
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор        = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	ИспользуемыеКолонкиДопДанных = Новый Массив;
		
	// Таблица периодов
	ТаблицаПериодов        = ПараметрыПолученияФакта.ТаблицаПериодов;
	КолонкиТаблицыПериодов = ТаблицаПериодов.Колонки;
	
	// Идентификация источников данных
	ПолученныеМакеты = Новый Соответствие;
	НаборыДанныхДляИдентификации = Новый Соответствие;
	
	ИмяПоляИдентификатора = "ИдентификаторИсточникаДанных";
	
	// Свертка данных
	КолонкиИдентификаторы = Новый Массив;
	КолонкиАгрегаты = Новый Массив;
	
	#КонецОбласти 
	
	#Область НастройкаНаборовДанных
	
	// Создать пустую схему
	СКДПолученияФакта = КомпоновкаДанныхСервер.ПустаяСхема();
	
	// Добавить НД таблицы периодов
	НДТаблицаПериодов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодов");
		
	Для Каждого Колонка Из ТаблицаПериодов.Колонки Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаПериодов, Колонка.Имя, Колонка.Имя, , Колонка.ТипЗначения);
	КонецЦикла;
	
	// Добавить НД объединения
	НДОбъединенныйФакт = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "ОбъединенныйФакт");
	
	// Для каждого уникального макета схемы добавить НД регистра и перенести настройки типов
	Для Каждого ПрименяемоеПравилоФакта Из ТаблицаПравилСтатей Цикл
		ИмяМакета = ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных;
		
		Если ПолученныеМакеты.Получить(ИмяМакета) = Неопределено Тогда
			Макет = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПрименяемоеПравилоФакта.Правило);
			
			ПолученныеМакеты.Вставить(ИмяМакета, Макет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолученныйМакет Из ПолученныеМакеты Цикл 
		ИмяНабораДанных = ПолученныйМакет.Ключ;
		ИсходныйМакет = ПолученныйМакет.Значение;
		
		// Перенесем все наборы данных источников в объединенный набор
		СкопированныеНаборыДанных = КомпоновкаДанныхСервер.СкопироватьНаборыДанных(НДОбъединенныйФакт, ИсходныйМакет, ИмяНабораДанных);
		
		ИскомаяКоллекцияНаборов = НаборыДанныхДляИдентификации[ИмяНабораДанных];
		Если ИскомаяКоллекцияНаборов = Неопределено Тогда
			
			НаборыДанныхДляИдентификации.Вставить(ИмяНабораДанных, СкопированныеНаборыДанных);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИскомаяКоллекцияНаборов, СкопированныеНаборыДанных);
			
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим макеты ДО переноса - добавим в них поле "ИдентификаторИсточника"
	// Добавим в каждый набор поле "ИдентификаторНабора"
	// Для поставляемых схем - это имя макета и источник данных настройки хозяйственной операции
	// Для произвольных данных - это строка вида "Ключ_ХешСхемы". 
	// Хеш используется для минимизации количества произвольных наборов данных. 
	// Если СКД в разных правилах идентичны, тогда в исполняемой схеме будет всего один набор данных
	Для Каждого НаборДанныхДляИдентификации Из НаборыДанныхДляИдентификации Цикл 
		ИдентификаторНабора    = НаборДанныхДляИдентификации.Ключ;
		НаборыПоИдентификатору = НаборДанныхДляИдентификации.Значение;
		
		Для Каждого НаборПоИдентификатору Из НаборыПоИдентификатору Цикл 
			ЗапросНабора          = НаборПоИдентификатору.Запрос;
				
			Если ТипЗнч(НаборПоИдентификатору) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				// Добавим поле в расширенные поля запроса компоновки и поля выборки запроса
				ЗапросНабора = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ЗапросНабора, """" + ИдентификаторНабора + """", ИмяПоляИдентификатора, , Истина);
				
				ЗапросНабора = СтрЗаменить(ЗапросНабора, """ИдентификаторИсточникаДанных""", """" + ИдентификаторНабора + """");
				
				НаборПоИдентификатору.Запрос = ЗапросНабора;
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
		
	#КонецОбласти 
	
	#Область НастройкаОсновныхПолейНаборовДанных
		
	// В текст запроса добавить поля-параметры для соединения с таблицей периодов
	НаборыФакта = НДОбъединенныйФакт.Элементы;
	
	Для Каждого КолонкаТаблицыПериодов Из КолонкиТаблицыПериодов Цикл 
		ИмяКолонки = КолонкаТаблицыПериодов.Имя;
		ТипКолонки = КолонкаТаблицыПериодов.ТипЗначения;
		
		Для Каждого НаборФакта Из НаборыФакта Цикл 
			Если ТипЗнч(НаборФакта) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				ВыражениеПоляВыборки = "&" + ИмяКолонки;
				
				НаборФакта.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(НаборФакта.Запрос, ВыражениеПоляВыборки, ИмяКолонки, , Истина);
			КонецЕсли;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборФакта, ИмяКолонки, ИмяКолонки, , ТипКолонки);
		КонецЦикла;
		
		// Добавим поля дочерних наборов в корневой, объединяющий факт
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДОбъединенныйФакт, ИмяКолонки, ИмяКолонки, , ТипКолонки);
	
		// Добавим связь НД периодов и НД объединения по параметрам периода
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта, 
			НДТаблицаПериодов, 
			НДОбъединенныйФакт, 
			ИмяКолонки, 
			ИмяКолонки, 
			ИмяКолонки);
	КонецЦикла;
		
	#КонецОбласти 
	
	#Область ПодключениеИсточникаДополнительныхДанных
		
	// Добавим дополнительные данные в расчетные поля
	КолонкиДопДанных = ТаблицаДопДанных.Колонки;
	Если ДопДанныеВычисляемыеПоля Тогда
		
		// Соберем коллекцию вычисляемых колонок
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			Если ИмяПоля = "УникальныйИдентификатор"
				Или ПоПравиламПолученияДанных 
					И (ИмяПоля = "ПравилоФакта" Или ИмяПоля = "НачалоПериода" Или ИмяПоля = "КонецПериода") Тогда
				
				Продолжить;
			КонецЕсли;
			ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
		КонецЦикла;
		
		Для Каждого СтрокаДопДанных Из ТаблицаДопДанных Цикл
			УникальныйИдентификатор = СтрокаДопДанных.УникальныйИдентификатор;
			
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл
				ИмяПоля = КолонкаДопДанных.Имя;
				ТипПоля = КолонкаДопДанных.ТипЗначения;
				ЗначениеПоля = СтрокаДопДанных[ИмяПоля];
				
				ИмяПоляВСхеме = ИмяПоля + "_" + УникальныйИдентификатор;
				
				// Добавим параметр со значением
				КомпоновкаДанныхСервер.ДобавитьПараметр(СКДПолученияФакта, ИмяПоляВСхеме, ТипПоля, ЗначениеПоля);
			
				// Расчитаем значение правила для группировок
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляВСхеме, "&" + ИмяПоляВСхеме);
				
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ДопДанныеДопНабор Тогда 
		НДДопДанныеДопНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДопДанных");
			
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			ТипПоля = КолонкаДопДанных.ТипЗначения;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДДопДанныеДопНабор, ИмяПоля, ИмяПоля, , ТипПоля);
			
			// Основной режим присоединения слева доп. данных - по всем доступным колонкам
			Если НДОбъединенныйФакт.Поля.Найти(ИмяПоля) = Неопределено Тогда
				// "Истинные" колонки доп. данных. Те по которым возможно соединение, уже есть в наборах данных
				ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
				
				Продолжить;
			КонецЕсли;
			
			// Добавим связь НД периодов и НД объединения по параметрам периода
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта, 
				НДОбъединенныйФакт, 
				НДДопДанныеДопНабор,
				ИмяПоля, 
				ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область НастройкаГруппировокИОтборов
		
	// Создадим и инициализируем компоновщик
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПолученияФакта);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	// Добавим общие для всех группировок поля в корень структуры
	КорневойЭлементСтруктуры = Настройки.Структура;
	
	// Установим общие параметры
	
	// Добавим общие отборы
	Если ПараметрыПолученияФакта.ДополнительныйОтбор <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПараметрыПолученияФакта.ДополнительныйОтбор.Отбор, Настройки.Отбор, Истина);
	КонецЕсли;
	
	// Добавим отборы предварительной фильтрации данных для каждого правила
	ГруппаДопОтборовВсехПравил = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаДопОтборовВсехПравил.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаДопОтборовВсехПравил.Использование = Истина;
	ГруппаДопОтборовВсехПравил.Представление = "ДопОтборВсехПравил";
	
	ПоляИтога = СКДПолученияФакта.ПоляИтога;
		
	Для Каждого ПериодИПравило Из ТаблицаПериодов Цикл 
		ПоискПравила = Новый Структура("Правило", ПериодИПравило.ПравилоФакта); 
		НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(ПоискПравила);
		ПрименяемоеПравило = НайденныеСтроки[0];
		
		Если ПоПравиламПолученияДанных Тогда
			ПоискПравилаИПериода = Новый Структура("ПравилоФакта, НачалоПериода, КонецПериода");
			ЗаполнитьЗначенияСвойств(ПоискПравилаИПериода, ПериодИПравило);

			НайденныеСтроки = ТаблицаДопДанных.НайтиСтроки(ПоискПравилаИПериода);
			ДопДанныеПравила = НайденныеСтроки[0];
		КонецЕсли;
		
		УникальныйИдентификатор = ПрименяемоеПравило.УникальныйИдентификатор;
		ИдентификаторМакета     = ПрименяемоеПравило.ИмяМакетаИсточникаДанных;
		НастройкиПравила        = ПрименяемоеПравило.КомпоновщикНастроек.Получить();
		ИмяРесурса              = ПрименяемоеПравило.ИсточникСуммыОперации;
		Коэффициент             = ПрименяемоеПравило.Коэффициент;
		
		РазделИсточникаДанных   = ПрименяемоеПравило.РазделИсточникаДанных;
		ИсточникДанных          = ПрименяемоеПравило.ИсточникДанных;
		ХозяйственнаяОперация   = ПрименяемоеПравило.ХозяйственнаяОперация;
		
		ГруппаДопОтбораПравила = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтборовВсехПравил,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДопОтбораПравила.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаДопОтбораПравила.Использование = Истина;
		ГруппаДопОтбораПравила.Представление = "ДопОтборПравила_" + УникальныйИдентификатор;
		
		НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтбораПравила, "ИдентификаторИсточникаДанных", ИдентификаторМакета, , ВидСравненияКомпоновкиДанных.Равно);
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппаДопОтбораПравила, Истина);
		
		// Для каждого правила (если требуется) добавить группировку, для формирования части таблицы факта
		// В группировке добавить отборы, нужные для получения порции данных правила
		// Добавить дополнительные отборы
		ГруппировкаПравила = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "НачалоПериода");
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "КонецПериода");
		КонецЕсли;
		
		Если ДопДанныеВычисляемыеПоля Тогда
			Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор"
					Или ПоПравиламПолученияДанных 
						И (ИмяКолонки = "ПравилоФакта" Или ИмяКолонки = "НачалоПериода" Или ИмяКолонки = "КонецПериода") Тогда
					Продолжить;
				КонецЕсли;
				
				КолонкиИдентификаторы.Добавить(ИмяКолонки);
		
				Если ПоПравиламПолученияДанных Тогда
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки + "_" + ДопДанныеПравила.УникальныйИдентификатор);
				Иначе
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки + "_" + УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДопДанныеДопНабор Тогда
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор" Тогда
					Продолжить;
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки);
			КонецЦикла;
		КонецЕсли;
		
		Если ПоОрганизациям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Организация");
		КонецЕсли;
		
		Если ПоПодразделениям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Подразделение");
		КонецЕсли;
		
		Если ПоРегистратору Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Регистратор");
		КонецЕсли;
		
		Если ПоПериодам Тогда
			ИмяПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
			
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Период" + ИмяПериода);
		КонецЕсли;
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ПрименяемоеПравило["ВидАналитики" + НомерАналитики];
			
			Если ЗначениеЗаполнено(ВидАналитики) 
				И Не ПараметрыПолученияФакта.ВидыАналитик.Найти(ВидАналитики) = Неопределено Тогда
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
				Если ПоПравиламПолученияДанных Тогда
					СуффиксПолей = ДопДанныеПравила.УникальныйИдентификатор;
				Иначе
					СуффиксПолей = УникальныйИдентификатор;
				КонецЕсли;
				
				ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики + "_" + СуффиксПолей;
				
				// Ожидается, что правила получения факта все выражения заполнены
				// Но бывают ситуации, когда аналитика используется, но выражение не заполнено. 
				// Например, после программного создания правил
				ВыражениеЗаполненияАналитики = ПрименяемоеПравило["ВыражениеЗаполненияАналитики" + НомерАналитики];
				Если Не ЗначениеЗаполнено(ВыражениеЗаполненияАналитики) Тогда
					ВыражениеЗаполненияАналитики = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляАналитики);
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляНумерованнойАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляНумерованнойАналитики);
			КонецЕсли;
		КонецЦикла;
		
		ИсточникиСуммыПравила = ИсточникиДанныхСервер.ИсточникиСуммыПравила(СКДПолученияФакта, ПрименяемоеПравило);
		
		// Сумма в валюте операции
		ИмяПоляВВалютеОперации = "";
		Если ВозвращатьСуммуВВалюте И ИсточникиСуммыПравила.Свойство("Валюта", ИмяПоляВВалютеОперации) Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Валюта");
			
			Если ПоляИтога.Найти(ИмяПоляВВалютеОперации) = Неопределено Тогда
				ПрефиксКоэффициента = ?(Коэффициент = 1, "", "(" + Коэффициент + ") * ");
				
				ФинансоваяОтчетностьСервер.НовыйРесурс(СКДПолученияФакта, ИмяПоляВВалютеОперации, ПрефиксКоэффициента + "Сумма");
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(ГруппировкаПравила, ИмяПоляВВалютеОперации);
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, ИмяПоляВВалютеОперации, , , ВидСравненияКомпоновкиДанных.Заполнено);
			
			КолонкиАгрегаты.Добавить(ИмяПоляВВалютеОперации);
		КонецЕсли;
		
		// Отборы отдельного правила на уровне группировки, включающей его
		// По сути - это дополнительная фильтрация данных, которые относятся к отдельному правилу
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ИдентификаторИсточникаДанных", ИдентификаторМакета, , ВидСравненияКомпоновкиДанных.Равно);
		
		Если РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ХозяйственнаяОперация", ХозяйственнаяОперация, , ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
			Или РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда

			НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "Счет", ИсточникДанных, , ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "НачалоПериода", ПериодИПравило.НачалоПериода, , ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "КонецПериода", ПериодИПравило.КонецПериода, , ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, "ПравилоФакта", ПериодИПравило.ПравилоФакта, , ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппировкаПравила.Отбор, Истина);
	
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеДанных
	
	// Инициализировать макет компоновки, который будет сохраняться в кэш и выполняться
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПолученияФакта, Настройки);
	
	// Выполнить процессор вывода в коллекцию значений
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	Если ДопДанныеДопНабор Тогда
		ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаДопДанных);
	КонецЕсли;
	ДанныеИсточниковПоПравилам = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	
	#КонецОбласти 
	
	#Область ПостобработкаДанных_СверткаПравилИСумм
	
	// "Свернуть" колонки-идентификаторы правила, в одну
	Если ПоПравиламПолученияДанных Тогда
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиИдентификаторы.Добавить("Аналитика" + НомерАналитики);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиИдентификаторы);
		
		СтрокаКолонкиИдентификаторы = СтрСоединить(КолонкиИдентификаторы, ", ");
		
		Идентификаторы = ТаблицаДопДанных.ВыгрузитьКолонку("УникальныйИдентификатор");
		КолонкиАгрегаты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиАгрегаты);
		ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(
			ДанныеИсточниковПоПравилам, 
			СтрокаКолонкиИдентификаторы, 
			Идентификаторы, "_", 
			КолонкиАгрегаты,
			Истина);
		
		Идентификаторы.Очистить();
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
			КолонкиИдентификаторыСуммы = "Сумма";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Сумма", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыСуммы, Идентификаторы);
		КонецЕсли;
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Количество") И Ложь Тогда
			КолонкиИдентификаторыКоличества = "Количество";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Количество", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыКоличества, Идентификаторы);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	// Вернуть таблицу факта
	ИндексыТаблицы = ПараметрыПолученияФакта.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	Возврат ДанныеИсточниковПоПравилам;
	
КонецФункции

// Возвращает пустое значение соответствующего измерению типа 
// 
// Параметры:
//	ИмяИзмерения - Строка - название измерения регистра РегистрНакопления.ОборотыБюджетов
//
// Возвращаемое значение:
//	Произвольный - пустое значение соответствующего типа
// 
Функция ЗначениеПоУмолчаниюДляИзмерения(ИмяИзмерения) Экспорт
	ЗначениеПоУмолчанию = Неопределено;
	
	Если ИмяИзмерения = "Организация" Тогда
		ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ИмяИзмерения = "Подразделение" Тогда
		ЗначениеПоУмолчанию = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Возвращает пустое значение соответствующего нумерованному виду аналитики типа 
// 
// Параметры:
//	СтатьяПоказатель - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - статья или показатель бюджетирования
//	НомерАналитики   - Число - порядковый номер аналитики статьи или показателя бюджетирования
//
// Возвращаемое значение:
//	Произвольный - пустое значение соответствующего типа
// 
Функция ЗначениеПоУмолчаниюНумерованнойАналитики(СтатьяПоказатель, НомерАналитики) Экспорт
	ЗначениеПоУмолчанию = Неопределено;
	
	РеквизитСтатьи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяПоказатель, "ВидАналитики" + НомерАналитики);
	Если РеквизитСтатьи.ТипЗначения <> Неопределено Тогда
		ЗначениеПоУмолчанию = РеквизитСтатьи.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Добавляет алгоритмы конвертации в существующую схему
// 
// Параметры:
//	Схема                   - СхемаКомпоновкиДанных - схема, в которой требуется конвертировать суммы.
//	КомпоновщикНастроек     - КомпоновщикНастроекКомпоновкиДанных - настройки
//	ИмяНабораДанныхИсточника- Строка - имя набора данных, который будет пересчитываться и содерржит поля сумм
//	ЦелеваяВалюта           - СправочникСсылка.Валюты - валюта, в которую требуется пересчитать суммы в таблице.
//	                        - Строка - имя поля с типом СправочникСсылка.Валюты, в котором содержатся значения целевой валюты для каждой строки.
//	                        - Неопределено - будет осуществлен поиск колонки с именем "ЦелеваяВалюта". Если колонка отсутствует, пересчет не будет производится.
//	ПериодКурса             - Дата - дата, на которую требуется произвести пересчет.
//	                        - Строка - имя колонки с типом Дата, в которой содержатся значения дат курсов для каждой строки.
//	                        - Неопределено -  будет осуществлен поиск колонки с именем "ПериодКурса". Если колонка отсутствует, то дата курса будет приравнена к сегодняшнему дню.
//	ИсходнаяВалюта          - СправочникСсылка.Валюты - валюта, из которой требуется пересчитать суммы в таблице.
//	                        - Строка - имя колонки с типом СправочникСсылка.Валюты, в которой содержатся значения исходной валюты для каждой строки.
//	                        - Неопределено - будет осуществлен поиск колонки с именем "ИсходнаяВалюта". Если колонка отсутствует, пересчет не будет производится.
//	КолонкиПересчета        - Массив - Массив имен колонок, содержащих исходные суммы.
//	                        - Строка - имя колонки для пересчета
//	                        - Неопределено - будет осуществлен поиск колонок с именами "Сумма", "СуммаПриход", "СуммаРасход", "СуммаВВалюте", "СуммаВалПриход", "СуммаВалРасход", "ЗначениеПоказателя"
Процедура ДобавитьПересчетДанныхВВалюту(Схема, КомпоновщикНастроек, ИмяНабораДанныхИсточника, ЦелеваяВалюта = Неопределено, ПериодКурса = Неопределено, ИсходнаяВалюта = Неопределено, КолонкиПересчета = Неопределено) Экспорт
	
	ИмяНабораДанныхКонвертации = "КоэффициентыКурсовВалют" + ИмяНабораДанныхИсточника;
	НаборДанныхИсточник = Схема.НаборыДанных[ИмяНабораДанныхИсточника];
	
	НаборДанныхКонвертации = Схема.НаборыДанных.Найти(ИмяНабораДанныхКонвертации);
	Если НаборДанныхКонвертации = Неопределено Тогда
		НаборДанныхКонвертации = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(Схема, , ИмяНабораДанныхКонвертации);
		
		ТекстЗапросаКонвертации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК ВалютаКурсовВалют" + ИмяНабораДанныхИсточника + ",
		|	&ИсходнаяВалюта" + ИмяНабораДанныхИсточника + " КАК ИсходнаяВалюта" + ИмяНабораДанныхИсточника + ",
		|	&ЦелеваяВалюта" + ИмяНабораДанныхИсточника + " КАК ЦелеваяВалюта" + ИмяНабораДанныхИсточника + ",
		|	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета" + ИмяНабораДанныхИсточника + "
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ПериодКурса" + ИмяНабораДанныхИсточника + ", Валюта = &ИсходнаяВалюта" + ИмяНабораДанныхИсточника + ") КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодКурса" + ИмяНабораДанныхИсточника + ", Валюта = &ЦелеваяВалюта" + ИмяНабораДанныхИсточника + ") КАК КурсВалютыОтчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.Кратность <> 0
		|	И КурсВалютыОтчета.Курс <> 0";
	
		НаборДанныхКонвертации.Запрос = ТекстЗапросаКонвертации;
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ВалютаКурсовВалют" + ИмяНабораДанныхИсточника, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ИсходнаяВалюта" + ИмяНабораДанныхИсточника, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "ЦелеваяВалюта" + ИмяНабораДанныхИсточника, , , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации, "КоэффициентПересчета" + ИмяНабораДанныхИсточника); // Не ограничиваем длину коэффициента
		
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточника, , ИсходнаяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточника, , ЦелеваяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ПериодКурса" + ИмяНабораДанныхИсточника, , ПериодКурса);
	
	КонецЕсли;
	
	// Уточним значения параметров данных для пересчета
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточника, ИсходнаяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточника,  ЦелеваяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ПериодКурса" + ИмяНабораДанныхИсточника,    ПериодКурса);
		
	ТипПараметраИсходнаяВалюта = ТипЗнч(ИсходнаяВалюта);
	Если ТипПараметраИсходнаяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсходнаяВалюта" + ИмяНабораДанныхИсточника, ИсходнаяВалюта); 
	ИначеЕсли ТипПараметраИсходнаяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ИсходнаяВалюта, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточника, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточника);
	ИначеЕсли ТипПараметраИсходнаяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточника, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточника, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточника);
	КонецЕсли;
	
	ТипПараметраЦелеваяВалюта = ТипЗнч(ЦелеваяВалюта);
	Если ТипПараметраЦелеваяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ЦелеваяВалюта" + ИмяНабораДанныхИсточника, ЦелеваяВалюта); 
	ИначеЕсли ТипПараметраЦелеваяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ЦелеваяВалюта, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточника, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточника);
	ИначеЕсли ТипПараметраЦелеваяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточника, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточника, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточника);
	КонецЕсли;
	
	ТипПараметраПериодКурса = ТипЗнч(ПериодКурса);
	Если ТипПараметраПериодКурса = Тип("Дата") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодКурса" + ИмяНабораДанныхИсточника, ПериодКурса); 
	ИначеЕсли ТипПараметраПериодКурса = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			ПериодКурса, 
			"ПериодКурса" + ИмяНабораДанныхИсточника, 
			"ПериодКурса" + ИмяНабораДанныхИсточника);
	ИначеЕсли ТипПараметраПериодКурса = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема, 
			ИмяНабораДанныхИсточника, 
			ИмяНабораДанныхКонвертации, 
			"ПериодКурса" + ИмяНабораДанныхИсточника, 
			"ПериодКурса" + ИмяНабораДанныхИсточника, 
			"ПериодКурса" + ИмяНабораДанныхИсточника);
	КонецЕсли;
	
	ТипПараметраКолонкиПересчета = ТипЗнч(КолонкиПересчета);
	Если ТипПараметраКолонкиПересчета = Тип("Массив") Тогда
		ПоляСуммыВВалюте = КолонкиПересчета;

	ИначеЕсли ТипПараметраКолонкиПересчета = Тип("Строка") Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить(КолонкиПересчета);
		
	ИначеЕсли ТипПараметраКолонкиПересчета = Неопределено Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить("Сумма");
		ПоляСуммыВВалюте.Добавить("СуммаПриход");
		ПоляСуммыВВалюте.Добавить("СуммаРасход");
		ПоляСуммыВВалюте.Добавить("СуммаВВалюте");
		ПоляСуммыВВалюте.Добавить("СуммаВалПриход");
		ПоляСуммыВВалюте.Добавить("СуммаВалРасход");
		ПоляСуммыВВалюте.Добавить("ЗначениеПоказателя");
	КонецЕсли;
	
	Для Каждого Поле Из ПоляСуммыВВалюте Цикл
		ИскомоеИсходноеПоле = НаборДанныхИсточник.Поля.Найти(Поле);
		
		Если ИскомоеИсходноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = "ОКР(" + Поле + " * КоэффициентПересчета" + ИмяНабораДанныхИсточника + ", 2)";
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(Схема, Поле, Выражение, ИскомоеИсходноеПоле.Заголовок , Истина);
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

// Процедура формирует бюджетные задачи.
//
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель бюджетирования.
// 	ПроцессПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - Этап подготовки бюджета.
//
Процедура ФормированиеБюджетныхЗадач(МодельБюджетирования = Неопределено, ПроцессПодготовкиБюджетов=Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Задачи.БюджетнаяЗадача.ФормированиеБюджетныхЗадач(МодельБюджетирования, ПроцессПодготовкиБюджетов);
	
КонецПроцедуры

// Регламентная процедура формирования оповещений по бюджетным задачам.
//
Процедура ФормированиеОповещенийПоБюджетнымЗадачам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Задачи.БюджетнаяЗадача.ФормированиеОповещенийПоБюджетнымЗадачам();
	
КонецПроцедуры

//-- НЕ УТКА

// Возвращает факт по статьям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета из валюты хранения в валюту статьи
// 	ДополнятьХранимымФактом - Булево - Признак необходимости дополнения фактических данных хранимыми данными
//
// Возвращаемое значение:
// 	ФактПоСтатьямБюджетов - ТаблицаЗначения - Фактические данные по статьям бюджетов
//
Функция ФактПоСтатьямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина, ДополнятьХранимымФактом = Истина) Экспорт
		
	// Подготовим таблицу факта
	ФактПоСтатьямБюджетов = ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	УстановитьПривилегированныйРежим(Истина);

	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, 
				"ПромежуточноеКэшированиеРезультатовРаботыПравил", Ложь, 
				ВидСравненияКомпоновкиДанных.Равно);
		
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соответствии с правилами
	Для Каждого Правило Из ТаблицаПравил Цикл
		ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ФактПоСтатьямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту статьи
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, Параметры, Истина);
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ДополнятьХранимымФактом Тогда
		ТаблицаХранимыйФакт = ФактСтатьиБюджетовХранимый(Параметры);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаХранимыйФакт, ФактПоСтатьямБюджетов);
	КонецЕсли;
	//-- НЕ УТКА
		
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

// Возвращает факт по показателям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета факта в валюту отчета
//
// Возвращаемое значение:
// 	ФактПоПоказателямБюджетов - ТаблицаЗначения - Фактические данные по показателям бюджетов
//
Функция ФактПоПоказателямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина) Экспорт
		
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Параметры.ОстаткиТолькоНаНачалоПериода Или Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, Параметры.Периодичность, Параметры.Период.ДатаНачала, Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	// Подготовим таблицу факта
	ФактПоПоказателямБюджетов = ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	МакетКомпоновкиДанных = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соотвествии с правилами
	Для каждого Правило Из ТаблицаПравил Цикл
		ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ФактПоПоказателямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту показателей бюджетов
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоПоказателямБюджетов, Параметры, Истина);
	КонецЕсли;
		
	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

// Возвращает параметры получения значений нефинансовых показателей по умолчанию
//
// Возвращаемое значение:
// 	 Параметры - Структура - Параметры получения значений нефинансовых показателей
//
Функция ПараметрыПолученияЗначенийНефинансовыхПоказателей() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина);
	
	// Валюты
	Параметры.Вставить("ВалютаУпр",        Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	//++ НЕ УТКА
	Параметры.Вставить("ВалютаМеждународ", Константы.ВалютаФункциональная.Получить());
	//-- НЕ УТКА
	
	Параметры.Вставить("РежимПолученияДанных", Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает значения нефинансовых показателей в соответствии с их настройками
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных
// 
// Возвращаемое значение:
// 	ЗначенияНефинансовыхПоказателей - ТаблицаЗначения - Значения нефинансовых показателей
//
Функция ЗначенияНефинансовыхПоказателей(НастройкиОтбора, Знач Параметры) Экспорт
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, 
			Параметры.Периодичность, 
			Параметры.Период.ДатаНачала, 
			Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	ТаблицаЗначений = ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры);
	
	НефинансовыеПоказатели = Справочники.НефинансовыеПоказателиБюджетов.НефинансовыеПоказателиСУчетомОтбора(НастройкиОтбора);
	Для каждого СтрокаПоказатель Из НефинансовыеПоказатели Цикл
		Если СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			Если ЗначениеЗаполнено(СтрокаПоказатель.СхемаКомпоновкиДанных) Тогда
				СхемаПолученияДанных = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(СтрокаПоказатель.СхемаКомпоновкиДанных, 
										?(Параметры.Свойство("РежимПолученияДанных"), Параметры.РежимПолученияДанных, Неопределено));
			Иначе
				СхемаПолученияДанных = СтрокаПоказатель.ХранилищеСхемыКомпоновкиДанных.Получить();
				Если ТипЗнч(СхемаПолученияДанных) = Тип("ХранилищеЗначения") Тогда
					СхемаПолученияДанных = СхемаПолученияДанных.Получить();
				КонецЕсли;
				Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
					Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
						Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
							Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НастройкиСхемыПолученияДанных = СтрокаПоказатель.ХранилищеНастроекКомпоновкиДанных.Получить();
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
		Если СтрокаПоказатель.ПоСценариям Или Не СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			СхемаПолученияДанных = РегистрыСведений.ЗначенияНефинансовыхПоказателей.ПолучитьМакет("СхемаКомпоновкиДанных");
			Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
				Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
					Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
						Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСхемыПолученияДанных = СхемаПолученияДанных.НастройкиПоУмолчанию;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				НастройкиСхемыПолученияДанных, 
				"НефинансовыйПоказатель", 
				СтрокаПоказатель.НефинансовыйПоказатель);
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			Правило.РасширеныйРежимНастройкиЗаполненияАналитики = Ложь;
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает факт по статьям и показателям бюджетов, а также значения нефинансовых показателей, входящих в структуру вида бюджета
// Ключевая операция: "Бюджетирование.ПолучениеФактаПоВидуБюджета"
//
// Параметры:
// 	ПараметрыДанных - Структура - Отборы, определенные на уровне бюджетного отчета
// 	ИсточникиДанных -  Массив - Источников данных вида бюджета
// 	ВалютаОтчета    - СправочникСсылка.Валюты - Валюта, в которой необходимо вернуть факт
//
// Возвращаемое значение:
// 	ФактПоВидуБюджета - ТаблицаЗначений
//
Функция ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных) Экспорт
	
	ОписаниеЗамера = Производительность.НачатьЗамерВремени("Бюджетирование.ПолучениеФактаПоВидуБюджета");
	
	ТаблицаДанныхПоВидуБюджета = РассчитатьФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	
	КоличествоДанных = ИсточникиДанных.Количество();
	
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

// Устанавливает в тексте запроса выражения заполнения аналитики в зависимости от доступных типов объекта
//
// Параметры:
// 	ТекстЗапроса - Строка - Текст запроса для обработки
// 	СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - Статья бюджетов, определяющая аналитику
// 	МенеджерОбъекта - ДокументМенеджер - Источник заполнения аналитики
//
Процедура УстановитьВЗапросеВыраженияЗаполненияАналитики(ДокументСсылка, ТекстЗапроса, СтатьяБюджетов, МенеджерОбъекта, ИмяТаблицы = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		
		КоличествоВидовАналитики = 6;
		Для Икс = 1 По КоличествоВидовАналитики Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Аналитика" + ИмяТаблицы + Икс, "НЕОПРЕДЕЛЕНО");
		КонецЦикла; 
		
		Возврат;
		
	КонецЕсли;
	
	ДоступныеТипы = МенеджерОбъекта.ДоступныеТипыАналитикБюджетирования(ДокументСсылка, ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерАналитики,
	|	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики
	|ПОМЕСТИТЬ ВидыАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СтатьиБюджетов.ВидАналитики2
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СтатьиБюджетов.ВидАналитики3
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	СтатьиБюджетов.ВидАналитики4
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	СтатьиБюджетов.ВидАналитики5
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	СтатьиБюджетов.ВидАналитики6
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАналитик.НомерАналитики КАК НомерАналитики,
	|	ВидыАналитик.ВидАналитики КАК ВидАналитики,
	|	АналитикиСтатейБюджетов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ВидыАналитик КАК ВидыАналитик
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|	ПО
	|		ВидыАналитик.ВидАналитики = АналитикиСтатейБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Выражение = "НЕОПРЕДЕЛЕНО";
		Если ЗначениеЗаполнено(Выборка.ВидАналитики) Тогда
			ПустоеЗначение = Выборка.ТипЗначения.ПривестиЗначение(Неопределено);
			Если ПустоеЗначение <> Неопределено Тогда
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПустоеЗначение)) Тогда
					Выражение = "ЗНАЧЕНИЕ(" + ПустоеЗначение.Метаданные().ПолноеИмя() + ".ПустаяСсылка)";
				КонецЕсли;
			КонецЕсли;
			Для каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
				Если ДоступныеТипы[Тип] <> Неопределено Тогда
					Выражение = ДоступныеТипы[Тип];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Аналитика" + ИмяТаблицы + Выборка.НомерАналитики, Выражение);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает в привелигированном режиме значение константы "Адрес публикации информационной базы в локальной сети".
//
// Возвращаемое значение:
//   Строка - значение константы.
//
Функция АдресПубликацииИнформационнойБазыВЛокальнойСети() Экспорт
	
	//++НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.АдресПубликацииИнформационнойБазыВЛокальнойСети.Получить();
	//--НЕ УТКА
	
	Возврат Неопределено; //Только для использования в УП
	
КонецФункции

// Получает в привелигированном режиме значение константы "Использовать международный финансовый учет".
// Только для ERP
//
// Возвращаемое значение:
//   Булево - значение константы.
//
Функция ИспользуетсяМеждународныйУчет() Экспорт
	
	//++ НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ИспользоватьМеждународныйФинансовыйУчет.Получить();
	
	//-- НЕ УТКА
	
	Возврат Ложь; //Только для использования в УП
	
КонецФункции

// Удаляет макеты бюджетов, сохраненные в присоединенных файлах экземпляра бюджета
// 
// Параметры:
//	Отбор - СправочникСсылка.ВидыБюджетов, ДокументСсылка.ЭкземплярБюджета - отбор, по которому будет определен экземпляр 
//																			бюджета для удаления присоединенных файлов
//
Процедура УдалитьСохраненныеМакетыБюджетов(Отбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = ЭкземплярБюджета.Ссылка
	|ГДЕ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла <> ЗНАЧЕНИЕ(Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета.ПустаяСсылка)
	|	И &ТекстОтбораЭкземпляраБюджета";
	
	Если ТипЗнч(Отбор) = Тип("СправочникСсылка.ВидыБюджетов")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.ВидБюджета = &Отбор");
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("ДокументСсылка.ЭкземплярБюджета")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.Ссылка = &Отбор");
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение НСтр("ru = 'УдалитьСохраненныеМакетыБюджетов: Неверные параметры вызова'");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает параметры получения факта по умолчанию
//
// Возвращаемое значение:
//	Параметры - Структура - Параметры получения факта по статьям и показателя бюджетов
//		* ВалютаОтчета                     - СправочникСсылка.Валюты - Валюта данных
//		* ВалютаУпр                        - СправочникСсылка.Валюты - Закешированное значение валюты упр. учета. См. Константы.ВалютаУправленческогоУчета
//		* ВалютаРегл                       - СправочникСсылка.Валюты - Закешированное значение валюты регл. учета. См. Константы.ВалютаРегламентированногоУчета
//		* ВалютаМеждународ                 - СправочникСсылка.Валюты - Закешированное значение функц. валюты МФУ. См. Константы.ВалютаФункциональная
//		* Период                           - СтандартныйПериод - Период выборки
//		* Периодичность                    - ПеречислениеСсылка.Периодичность, Неопределено - Периодичность детализации данных за период. Неопределено - без детализации.
//		* ОстаткиТолькоНаНачалоПериода     - Булево - Получать факт только на начало периода (для остатков),
//			в противном случае данные получаются на конец каждого из подпериодов.
//			Значение по умолчанию - Ложь.
//		* ВозвращатьСуммуВВалюте           - Булево - Вернуть сумму в валюте в соответствии с настройками статьи / показателя.
//			Значение по умолчанию - Истина.
//		* ВозвращатьУпрИРеглСуммы          - Булево - Вернуть суммы из регистров упр. и регл.
//			Значение по умолчанию - Ложь.
//		* ВозвращатьПравилоПолученияДанных - Булево - добавлять в таблицу данных колонку с примененным правилом
//			Значение по умолчанию - Ложь.
//		* Показатели                       - показатели, которые автоматически подбираются в выборку с учетом настроек набора данных источника
//			** Количество - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение количества
//			** Сумма      - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение суммы
//		* ВидыАналитик                     - Массив - Аналитика (Номенклатура, Контрагенты...), в разрезе которой необходимо получить факт.
//			** ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - значения массива
//		* ПоОрганизациям                   - Булево - Развернуть по организациям.
//			Значение по умолчанию - Ложь.
//		* ПоПодразделениям                 - Булево - Развернуть по подразделениям.
//			Значение по умолчанию - Ложь.
//		* РазворачиватьПоРегистратору      - Булево - Разверуть факт по регистратору (для оборотов).
//			Значение по умолчанию - Ложь.
//		* ДополнительныйОтбор              - Структура - Дополнительный (к основному отбору правила) отбор, который накладывается на данные источника.
//			** Ключ     - Произвольный - имя поля, по которому требуется применить доп. отбор
//			** Значение - Произвольный - значение доп. отбора
//
Функция ШаблонПараметровПолученияФакта() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода", Ложь);
	Параметры.Вставить("ВозвращатьСуммуВВалюте", Истина);
	Параметры.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
	Параметры.Вставить("ВозвращатьПравилоПолученияДанных", Ложь);
	Параметры.Вставить("ВозвращатьСтатьюПоказательБюджета", Ложь);
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	
	// Разрезы данных
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	Параметры.Вставить("РазворачиватьПоРегистратору", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	// Валюты
	Параметры.Вставить("ВалютаОтчета");
	Параметры.Вставить("ВалютаУпр",        Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл",       Константы.ВалютаРегламентированногоУчета.Получить());
	//++ НЕ УТКА
	Параметры.Вставить("ВалютаМеждународ", Константы.ВалютаФункциональная.Получить());
	//-- НЕ УТКА
	
	Параметры.Вставить("РежимПолученияДанных");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает пустую таблицу с типизированными колонками, в соответствии с заданными параметрами для статей
//
// Параметры:
// 	Параметры - Структура - см. ШаблонПараметровПолученияФакта()
//
// Возвращаемое значение:
// 	ТаблицаЗначений - пустая таблица с типизированными колонками
// 		* СтатьяБюджетов                              - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов
// 		* Сценарий                                    - СправочникСсылка.Сценарии - сценарий фактических данных. Предопределенные элементы "ИсполнениеБюджета" или "ФактическиеДанные"
// 		* РазделИсточникаДанных                       - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативные, регламентированный, международный учет или произвольные данные
// 		* ИсточникДанных                              - СправочникСсылка.НастройкиХозяйственныхОпераций - источник оперативных данных
//						                              - ПланСчетовСсылка.Хозрасчетный - источник данных регламентированного учета
//						                              - Строка - источник произвольных данных
//++ НЕ УТКА
//						                              - ПланСчетовСсылка.Международный - источник данных международного учета
//-- НЕ УТКА
// 		* КорСчет                                     - ПланСчетовСсылка.Хозрасчетный - кор. источник данных регламентированного учета
//++ НЕ УТКА
//				                                      - ПланСчетовСсылка.Международный - кор. источник данных международного учета
//-- НЕ УТКА
// 		* ИсточникСуммыОперации                       - ПеречислениеСсылка.ПоказателиАналитическихРегистров - указатель на имя определенного ресурса регистра источника данных
// 		* ТипИтога                                    - ПеречислениеСсылка.ТипыИтогов - итог в виде сальдо или оборота (свернутого и развернутого по Дт и Кт)
// 		* Отбор                                       - Строка - Описание
// 		* Правило                                     - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило, согласно которому извлекается факт
// 		* Период                                      - Дата - дата факта, приведенная к началу стандартного перирода. См. ПеречислениеСсылка.Периодичность
// 		* Регистратор                                 - ДокументСсылка - документ, движние которого в указанной строке. Только для оборотов. 
//														При условии, что включена детализация по регистратору. 
//														См. ШаблонПараметровПолученияФакта() свойство РазворачиватьПоРегистратору
// 		* Организация                                 - СправочникСсылка.Организации - Организация, к которой относится факт
//														При условии, что включена детализация по организациям. 
//														См. ШаблонПараметровПолученияФакта() свойство ПоОрганизациям
// 		* Подразделение                               - СправочникСсылка.СтруктураПредприятия - Подраделение, к которому относится факт
//														При условии, что включена детализация по подразделениям. 
//														См. ШаблонПараметровПолученияФакта() свойство ПоПодразделениям
// 		* Аналитика<1..6>                             - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики
// 		* Ключ_<УникальныйИдентификаторВидаАналитики> - ОписаниеТипов - тип аналитики
// 		* ЕдиницаИзмерения                            - СправочникСсылка.УпаковкиЕдиницыИзмерения - ед. измерения количественного показателя "Количество"
// 		* Количество                                  - Число - значение количественного показателя
// 		* ВалютаХранения                              - СправочникСсылка.Валюты - валюта суммового показателя "Сумма" (валюта факта)
// 		* ПериодКурса                                 - Дата - ближайшая дата примененного для конвертации курса валют
// 		* Сумма                                       - Число - значение суммового показателя в валюте факта
// 		* Валюта                                      - СправочникСсылка.Валюты - валюта суммового показателя "СуммаВВалюте"
// 		* СуммаВВалюте                                - Число - суммовой показатель "Сумма", приведенный к заданной валюте
// 		* СуммаУпр                                    - Число - суммовой показатель в валюте управленческого учета
// 		* СуммаРегл                                   - Число - суммовой показатель в валюте регламентированного учета
//
Функция ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры) Экспорт
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТипов));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ВозвращатьПравилоПолученияДанных Тогда
		
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
				"СправочникСсылка.НастройкиХозяйственныхОпераций,
				//++ НЕ УТКА
				|ПланСчетовСсылка.Международный,
				//-- НЕ УТКА
				|ПланСчетовСсылка.Хозрасчетный,
				|Строка");
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТипыКорСчетов = "ПланСчетовСсылка.Хозрасчетный";
		//++ НЕ УТКА
		ТипыКорСчетов = ТипыКорСчетов + ",ПланСчетовСсылка.Международный";
		//-- НЕ УТКА
		
		ОписаниеТиповКорСчет = Новый ОписаниеТипов(ТипыКорСчетов);
		
		ТаблицаФакта.Колонки.Добавить("КорСчет", ОписаниеТиповКорСчет);
		
		ТаблицаФакта.Колонки.Добавить("ИсточникСуммыОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", ТипЧисло);
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", ТипЧисло);
		КонецЕсли;
		Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
			ТаблицаФакта.Колонки.Добавить("СуммаУпр", ТипЧисло);
			ТаблицаФакта.Колонки.Добавить("СуммаРегл", ТипЧисло);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

// Возвращает настройки, созданные по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать
//
// Возвращаемое значение:
// НастройкиКомпоновкиДанных - настройки по умолчанию
//
Функция ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

// Возвращает компоновщик настроек, созданный по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать
//
// Возвращаемое значение:
// КомпоновщикНастроекКомпоновкиДанных - настройки по умолчанию
//
Функция ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Возвращает пустую типизированную структуру настроек для последующего заполнения
// Используется для интерактивного и неинтерактивного заполнения полей-источников из схемы-источника 
// для каждого вида аналитики правила получения фактических данных
//
// Возвращаемое значение:
//	Структура - параметры заполнения аналитик
//		* АдресСхемыКомпоновкиДанных   - Строка - адрес схемы-источника данных во временном хранилище
//		* КомпоновщикНастроек          - КомпоновщикНастроекКомпоновкиДанных - настройки на основе схемы-источника данных
//		* УникальныйИдентификатор      - УникальныйИдентификатор - иденитфикатор формы или элемента справочника, для которого формируются настройки
//		* НастройкиЗаполненияАналитики - ТаблицаЗначений - настройки каждой из 6 аналитик
//			** ВидАналитики                              - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов
//			** НомерАналитики                            - Число
//			** ВыражениеЗаполненияАналитики              - Строка
//			** ЗаполнятьУказаннымЗначением               - Булево
//			** ЗначениеАналитики                         - Произвольный
//			** ПредставлениеВыраженияЗаполненияАналитики - Строка
//			** НетВДоступныхПолях                        - Булево
//			** ДополнительноеСвойство                    - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//
Функция ШаблонПараметровЗаполненияАналитик() Экспорт
	ПараметрыЗаполненияАналитик = Новый Структура; 
	
	НастройкиЗаполненияАналитики = Новый ТаблицаЗначений;
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВидАналитики",                              Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НомерАналитики",                            ОбщегоНазначения.ОписаниеТипаЧисло(1));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВыражениеЗаполненияАналитики",              ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗаполнятьУказаннымЗначением",               ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗначениеАналитики",                         Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип);
	НастройкиЗаполненияАналитики.Колонки.Добавить("ПредставлениеВыраженияЗаполненияАналитики", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НетВДоступныхПолях",                        ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ДополнительноеСвойство",                    Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	ПараметрыЗаполненияАналитик.Вставить("НастройкиЗаполненияАналитики", НастройкиЗаполненияАналитики);
	ПараметрыЗаполненияАналитик.Вставить("АдресСхемыКомпоновкиДанных", "");
	ПараметрыЗаполненияАналитик.Вставить("КомпоновщикНастроек", Новый КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыЗаполненияАналитик.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Возврат ПараметрыЗаполненияАналитик;
КонецФункции

// Возвращает виды аналитик для переданного поддерживаемого справочника-источника данных
//
// Параметры:
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//		СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов - поддерживаемый справочник-источник данных
//
// Возвращаемое значение:
//	Структура - виды аналитик источника данных
//		* ВидАналитики1..6 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов
//
Функция ВидыАналитик(ИсточникДанных) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВидАналитики1");
	Реквизиты.Вставить("ВидАналитики2");
	Реквизиты.Вставить("ВидАналитики3");
	Реквизиты.Вставить("ВидАналитики4");
	Реквизиты.Вставить("ВидАналитики5");
	Реквизиты.Вставить("ВидАналитики6");
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.ПоказательБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.СтатьяБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ИсточникДанных);
		ВидыАналитик = Реквизиты;
	КонецЕсли;
	
	Возврат ВидыАналитик;
	
КонецФункции

// Добавляет для аналитических срезов в схему вычисляемые поля, а в настройки поля группировок
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//		СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов - поддерживаемый справочник-источник данных
//	Параметры - Структура - см. ШаблонПараметровПолученияФакта()
//
Процедура ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, ИсточникДанных, Параметры) Экспорт 
	
	ВидыАналитик = Новый ТаблицаЗначений;
	ВидыАналитик.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВидыАналитик.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	Для НомерАналитики = 1 По 6 Цикл
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.НомерАналитики = НомерАналитики;
		НоваяСтрока.ВидАналитики = ИсточникДанных["ВидАналитики" + НомерАналитики];
	КонецЦикла;
	
	Если ИсточникДанных.РасширеныйРежимНастройкиЗаполненияАналитики Тогда
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоПравилу(ИсточникДанных, ВидыАналитик, СхемаКомпоновкиДанных);
	Иначе
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
	КонецЕсли;
	
	ВычисляемыеПоля = СхемаКомпоновкиДанных.ВычисляемыеПоля;
	
	// Добавим аналитику "по номеру"
	Для НомерАналитики = 1 По 6 Цикл
		
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(НомерАналитики, "НомерАналитики");
		
		ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоНомеру;
		Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
			ТипЗначения = РезультатПоиска.ТипЗначения;
			Выражение   = РезультатПоиска.Выражение;
		Иначе
			ТипыПустогоЗначения = Новый Массив;
			ТипыПустогоЗначения.Добавить(Тип("Неопределено"));
			ТипыПустогоЗначения.Добавить(Тип("Null"));
			ТипЗначения = Новый ОписаниеТипов(ТипыПустогоЗначения);
			Выражение = ?(ЗначениеЗаполнено(РезультатПоиска.ВидАналитики), "НЕОПРЕДЕЛЕНО", "NULL")
		КонецЕсли;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
		
	КонецЦикла;
	
	// Добавим аналитику "по виду"
	ТипыВидовВидыАналитик = БюджетированиеПовтИсп.ТипыВидовВидыАналитик();
	
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Аналитики = ТипыВидовВидыАналитик.ВыгрузитьКолонку("Ссылка");
		
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	Для Каждого СтрокаТипыВидовВидыАналитик из ТипыВидовВидыАналитик Цикл
		ВидАналитики = СтрокаТипыВидовВидыАналитик.Ссылка;
		ТипЗначения  = СтрокаТипыВидовВидыАналитик.ТипЗначения;
		
		Если Аналитики.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоВиду = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		Выражение   = "NULL";
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(ВидАналитики, "ВидАналитики");
		Если РезультатПоиска <> Неопределено Тогда
			Выражение   = ?(ЗначениеЗаполнено(РезультатПоиска.Выражение), РезультатПоиска.Выражение, "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
		
		Если ПолеАналитикиПоВиду <> Выражение Тогда
			
			ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
			ВычисляемоеПоле.Выражение   = Выражение;
			ВычисляемоеПоле.ТипЗначения = ТипЗначения;
			
		КонецЕсли;
		
		Если Параметры.ВидыАналитик.Найти(ВидАналитики) <> Неопределено Тогда
			ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоВиду);
		КонецЕсли;
		
	КонецЦикла;
	
	// Аналитика Валюта
	Если Параметры.ВозвращатьСуммуВВалюте И ИсточникДанных.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		
		ВВалютеОтчета = Ложь;
		ВычисляемоеПолеВалюта = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеВалюта.ПутьКДанным = "Валюта";
		
		Если ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			
			ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиВалюта);
			
			ВычисляемоеПолеВалюта.Выражение = 
			"БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
			|	&КэшЗначенийАналитик, 
			|	" + ВыражениеАналитики.Выражение + ", 
			|	""" + ИсточникДанных.ПолеВалютыАналитики + """,
			|	&Валюта)";
			
			ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" Тогда 
			
			ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
			
			ВВалютеИсточника = Истина;
			Если ИсточникДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
				  И Не ИсточникДанных.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "&ВалютаРегл";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаРегл", Параметры.ВалютаРегл);
				ВВалютеИсточника = Ложь;
			//++ НЕ УТКА
			ИначеЕсли ИсточникДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
				  И Не ИсточникДанных.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "&ВалютаМеждународ";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаМеждународ", Параметры.ВалютаМеждународ);
				ВВалютеИсточника = Ложь;
			//-- НЕ УТКА
			КонецЕсли;
			
			Если ВВалютеИсточника Тогда
				Если ПоляНабора.Найти("Валюта") <> Неопределено Тогда
					ВычисляемоеПолеВалюта.Выражение = "Валюта";
				Иначе
					ВВалютеОтчета = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда 
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВычисляемоеПолеВалюта.Выражение = "&Валюта";
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Валюта");
		
	КонецЕсли;
	
	// Аналитика ЕдиницаИзмерения
	Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Если ПоляНабора.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			Выражение = "ЕдиницаИзмерения";
		Иначе
			Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
				ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиЕдиницаИзмерения);
				Выражение = 
					"БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
					|	&КэшЗначенийАналитик, " + ВыражениеАналитики.Выражение + ", """ + ИсточникДанных.ПолеЕдиницыИзмеренияАналитики + """)";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ИначеЕсли ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
				Выражение = "&ЕдиницаИзмерения";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ЕдиницаИзмерения", ИсточникДанных.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		ВычисляемоеПолеЕдИзмерения = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеЕдИзмерения.ПутьКДанным = "ЕдиницаИзмерения";
		ВычисляемоеПолеЕдИзмерения.Выражение = Выражение;
		ДобавитьПолеГруппировки(Настройки, "ЕдиницаИзмерения");
		
	КонецЕсли;

КонецПроцедуры

// Добавляет выражения вычисляемых полей для полей, используемых в отборах компоновки
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных
//
Процедура ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	ЭлементыОтоборов = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтоборов Цикл 
		Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных, 
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Строка(ЭлементОтбора.ЛевоеЗначение),,
				Неопределено);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных, 
				Строка(ЭлементОтбора.ПравоеЗначение),
				Строка(ЭлементОтбора.ПравоеЗначение),,
				Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Споставляет и заполняет имена полей наборов данных и требуемых показателей фактических данных
// 
// Параметры:
//	ИсточникиСуммы - Структура - сопоставленные показатели факта и поля источника данных
//		* Ключ     - Строка - имя показателя фактических данных
//		* Значение - Строка - имя поля в схеме-источнике данных
//	НаборДанных    - НаборДанныхЗапросСхемыКомпоновкиДанных, 
//		НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных - набор данных, поля которого анализируются
//
Процедура ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных) Экспорт
	
	ПоляНабораСхемы = НаборДанных.Поля;
	
	Если ПоляНабораСхемы.Найти("СуммаРегл") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Регл", "СуммаРегл");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаУпр") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Упр", "СуммаУпр");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаМеждународ") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Международ", "СуммаМеждународ");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаВВалюте") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Валюта", "СуммаВВалюте");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВспомогательныеРеквизитыПередЗаписью(СтатьяИлиПоказатель) Экспорт
	
	ВидыАналитик = Новый Структура("ВидАналитики1, ВидАналитики2, ВидАналитики3, ВидАналитики4, ВидАналитики5, ВидАналитики6");
	ЗаполнитьЗначенияСвойств(ВидыАналитик, СтатьяИлиПоказатель);
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("ИмяАналитики");
	ТаблицаАналитик.Колонки.Добавить("ЗначениеАналитики");
	Для Каждого КлючИЗначение из ВидыАналитик Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаАналитик.Найти(КлючИЗначение.Значение, "ЗначениеАналитики") = Неопределено Тогда
			НоваяСтрока = ТаблицаАналитик.Добавить();
			НоваяСтрока.ИмяАналитики = КлючИЗначение.Ключ;
			НоваяСтрока.ЗначениеАналитики = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	ТаблицаАналитик.Сортировать("ИмяАналитики");
	
	Для Сч = 0 по ТаблицаАналитик.Количество() - 1 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + (Сч + 1)] = ТаблицаАналитик[Сч].ЗначениеАналитики;
	КонецЦикла;
	
	Для ОставшиесяАналитики = ТаблицаАналитик.Количество() + 1 По 6 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + ОставшиесяАналитики] = Неопределено;
	КонецЦикла;
	
	СтатьяИлиПоказатель.КоличествоИспользуемыхАналитик = ТаблицаАналитик.Количество();
	
	АдресАналитикиВалюта = 0;
	Если СтатьяИлиПоказатель.ВалютаОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиВалюта = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиВалюта = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиВалюта = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиВалюта = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиВалюта = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиВалюта = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиВалюта = АдресАналитикиВалюта;
	
	АдресАналитикиКоличество = 0;
	Если СтатьяИлиПоказатель.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Если СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики1 Тогда
			АдресАналитикиКоличество = 1;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики2 Тогда
			АдресАналитикиКоличество = 2;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики3 Тогда
			АдресАналитикиКоличество = 3;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики4 Тогда
			АдресАналитикиКоличество = 4;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики5 Тогда
			АдресАналитикиКоличество = 5;
		ИначеЕсли СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель.ВидАналитики6 Тогда
			АдресАналитикиКоличество = 6;
		КонецЕсли;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиКоличество = АдресАналитикиКоличество;
	
КонецПроцедуры

#Область АналитическиеОтчеты

Процедура ДополнитьСхемуКомпоновкиДанныхАналитикойПоВиду(СхемаКомпоновкиДанных, ИсточникАналитики) Экспорт
	
	ВидыАналитик = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики.Ссылка);
		ВыражениеАналитики = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьТекстПоляВидаАналитики(ИмяПоляАналитики);
		
		ВыражениеАналитики = СтрЗаменить(ВыражениеАналитики, "СтатьяБюджетов", ИсточникАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
			СхемаКомпоновкиДанных, 
			ИмяПоляАналитики, 
			ВыражениеАналитики, 
			ВидАналитики.Представление);
		
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		НовыйПараметр.Имя = ИмяПоляАналитики;
		НовыйПараметр.Значение = ВидАналитики.Ссылка;
		НовыйПараметр.ОграничениеИспользования = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, ПользовательскиеНастройки) Экспорт
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаАктуальностиДанных");
	Если Параметр <> Неопределено Тогда
		ИдентификаторПользовательскойНастройки = Параметр.ИдентификаторПользовательскойНастройки;
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда
			ЭлементПользовательскойНастройки.Значение = Дата('00010101');
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПравилПолученияДанных

Функция ВыраженияЗаполненияАналитикиПоПравилу(Правило, ВидыАналитик, СхемаКомпоновкиДанных)
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[СтрокаВидАналитики.ВидАналитики];
		
		НомерАналитики = СтрокаВидАналитики.НомерАналитики;
		
		Если Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			ИмяПараметра = "ЗначениеАналитики" + НомерАналитики;
			ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Правило[ИмяПараметра]);
			Выражение = "&" + ИмяПараметра;
		Иначе
			Выражение = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		КонецЕсли;
		
		НоваяСтрока.Выражение = Выражение;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

Функция ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик) Экспорт
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	ВыраженияЗаполнения.Колонки.Добавить("Неоднозначно", Новый ОписаниеТипов("Булево"));
	
	ИсточникиЗаполненияАналитики = Новый Соответствие;
	ТипыИсточниковЗаполненияАналитик = Новый Соответствие;
	Если СхемаКомпоновкиДанных <> Неопределено 
		 И СхемаКомпоновкиДанных.НаборыДанных.Количество() <> 0 Тогда
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Для каждого ПолеНабора Из ПоляНабора Цикл
			Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеНабора.ТипЗначения) Тогда
				ИсточникиЗаполненияАналитики.Вставить(ПолеНабора.ПутьКДанным, ПолеНабора.ТипЗначения);
				ЗначениеДляСохранения = ТипыИсточниковЗаполненияАналитик.Получить(ПолеНабора.ТипЗначения);
				Если ЗначениеДляСохранения = Неопределено Тогда
					ЗначениеДляСохранения = Новый Массив;
				КонецЕсли;
				ЗначениеДляСохранения.Добавить(ПолеНабора.ПутьКДанным);
				ТипыИсточниковЗаполненияАналитик.Вставить(ПолеНабора.ТипЗначения, ЗначениеДляСохранения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		ВидАналитики = СтрокаВидАналитики.ВидАналитики;
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[ВидАналитики];
		
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоНомеру = "Аналитика" + СтрокаВидАналитики.НомерАналитики;
		
		ОднозначноПодходящееПоле = Новый Массив; // Поле, описание типов которого совпадает с описанием типов аналитики
		УсловноПодходящиеПоля = Новый Массив; // Поля, описание типов которых содержат типы аналитики
		
		Если ИсточникиЗаполненияАналитики[ПолеАналитикиПоНомеру] <> Неопределено Тогда
			ОднозначноПодходящееПоле.Добавить(ПолеАналитикиПоНомеру);
		Иначе
			// Попробуем подобрать поле заполнение аналитики "по типу"
			ОписаниеТиповАналитики = ОписаниеТиповАналитик[ВидАналитики];
			ИсточникЗаполненияАналитики = ТипыИсточниковЗаполненияАналитик.Получить(ОписаниеТиповАналитики);
			Если Не ИсточникЗаполненияАналитики = Неопределено Тогда
				ОднозначноПодходящееПоле = ИсточникЗаполненияАналитики;
			Иначе
				Для каждого ИсточникЗаполненияАналитики Из ИсточникиЗаполненияАналитики Цикл
					Для каждого Тип Из ИсточникЗаполненияАналитики.Значение.Типы() Цикл
						Если ОписаниеТиповАналитики.СодержитТип(Тип) Тогда
							УсловноПодходящиеПоля.Добавить(ИсточникЗаполненияАналитики.Ключ);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОднозначноПодходящееПоле.Количество() <> 0 Тогда
			НоваяСтрока.Выражение = ОднозначноПодходящееПоле[0];
			НоваяСтрока.Неоднозначно = ОднозначноПодходящееПоле.Количество() > 1;
		ИначеЕсли УсловноПодходящиеПоля.Количество() <> 0 Тогда
			НоваяСтрока.Выражение = УсловноПодходящиеПоля[0];
			НоваяСтрока.Неоднозначно = УсловноПодходящиеПоля.Количество() > 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

Процедура ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, ИмяТаблицы) Экспорт
	
	ВидыАналитики = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	
	ШаблонТекста = НСтр("ru = '<прочие %ВидАналитики>'");
	
	Для каждого ВидАналитики Из ВидыАналитики Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ВидАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = ВидАналитики.Ссылка;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ЗначениеАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбораДанных.Использование = Истина;
		
		Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		Оформление.Использование = Истина;
		Оформление.Значение = СтрЗаменить(ШаблонТекста, "%ВидАналитики", ВидАналитики.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ЗначениеАналитики");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроекПравила(Правило, ПараметрыЗаполненияАналитик, НастройкаКомпоновки) Экспорт
	
	Если Не ЗначениеЗаполнено(Правило.РазделИсточникаДанных) Или Не ЗначениеЗаполнено(Правило.ИсточникДанных) Тогда
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило);
		УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило);
		
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = 
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ПараметрыЗаполненияАналитик.УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных));
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение инициализации компоновщика настроек правила'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Если НастройкаКомпоновки = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Правило, ВидыАналитик) Экспорт
	
	ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Очистить();
	
	МассивВидовАналитик = Новый Массив;
	Для каждого ВидАналитки Из ВидыАналитик Цикл
		МассивВидовАналитик.Добавить(ВидАналитки.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовАналитик, "ДополнительноеСвойство");
	
	Для НомерАналитики = 1 По 6 Цикл
		
		ВидАналитики = ВидыАналитик["ВидАналитики" + НомерАналитики];
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Добавить();
		СтрокаНастройки.НомерАналитики               = НомерАналитики;
		СтрокаНастройки.ВидАналитики                 = ВидАналитики;
		СтрокаНастройки.ДополнительноеСвойство       = ДополнительныеСвойства[ВидАналитики];
		СтрокаНастройки.ЗаполнятьУказаннымЗначением  = Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики];
		СтрокаНастройки.ЗначениеАналитики            = Правило["ЗначениеАналитики" + НомерАналитики];
		СтрокаНастройки.ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиНастроекЗаполненияАналитики(НастройкиЗаполненияАналитики, Отказ, РежимНастройкиЗаполненияАналитики = Ложь) Экспорт
	
	Если Не РежимНастройкиЗаполненияАналитики Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Настройте заполнение аналитики ""%1""'");
	ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
	
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		
		Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаНастройки.НетВДоступныхПолях И СтрокаНастройки.ВыражениеЗаполненияАналитики <> "" Тогда
			Продолжить;
		КонецЕсли;
			
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле, , Отказ); 
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Правило) Экспорт
	
	Для НомерАналитики = 1 По 6 Цикл
		Правило["ЗначениеАналитики" + НомерАналитики]                    = Неопределено;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = Неопределено;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]              = Неопределено;
	КонецЦикла;
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		НомерАналитики = СтрокаНастройки.НомерАналитики;
		Правило["ЗначениеАналитики" + НомерАналитики]                    = СтрокаНастройки.ЗначениеАналитики;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = СтрокаНастройки.ЗаполнятьУказаннымЗначением;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики]         = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек, ОчищатьНедоступныеНастройки = Ложь)
	
	Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
		СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
	КонецЕсли;
	
	Если СтрокаНастройки.ВыражениеЗаполненияАналитики = "" Тогда
		СтрокаНастройки.НетВДоступныхПолях = Ложь;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = "";
		Возврат;
	КонецЕсли;
	
	СтрокаНастройки.НетВДоступныхПолях = Ложь;
	
	Поле = Новый ПолеКомпоновкиДанных(СтрокаНастройки.ВыражениеЗаполненияАналитики);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
	Если ДоступноеПоле = Неопределено Тогда
		Если ОчищатьНедоступныеНастройки Тогда
			СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
		Иначе
			СтрокаНастройки.НетВДоступныхПолях = Истина; 
		КонецЕсли;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	Иначе
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = ДоступноеПоле.Заголовок;  
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитикиПослеВыбора(ПараметрыЗаполненияАналитик, ИдентификаторСтроки) Экспорт 
	
	СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных));
	ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Правило, ОчищатьНедоступныеНастройки = Ложь) Экспорт
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек, ОчищатьНедоступныеНастройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик, ВыраженияЗаполненияАналитики = Неопределено) Экспорт
		
	Если ЭтоАдресВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		
		Если ВыраженияЗаполненияАналитики = Неопределено Тогда
			Если ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений") Тогда
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Скопировать(, "НомерАналитики, ВидАналитики");
			Иначе
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Выгрузить(, "НомерАналитики, ВидАналитики");
			КонецЕсли;

			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
			ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'В источнике есть несколько подходящих вариантов заполнения аналитики ""%1"". Требуется ручной выбор.'");
		ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
		КонтекстФормы = Не ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений");

		Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
			Отбор = Новый Структура("НомерАналитики, ВидАналитики");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНастройки);
			РезультатПоиска = ВыраженияЗаполненияАналитики.НайтиСтроки(Отбор)[0];
			
			Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
				Если РезультатПоиска.Неоднозначно Тогда
					СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				Иначе
					СтрокаНастройки.ВыражениеЗаполненияАналитики = РезультатПоиска.Выражение;
				КонецЕсли;
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Ложь;
			Иначе
				СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Истина;
			КонецЕсли;
			
			Если РезультатПоиска.Неоднозначно И КонтекстФормы Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
				Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле); 						
			КонецЕсли;
					
			ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, ПараметрыЗаполненияАналитик.КомпоновщикНастроек);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	Если СхемаКомпоновкиДанных = Неопределено 
		 Или СхемаКомпоновкиДанных.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
		Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		
		Счет = Правило.ИсточникДанных;
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ПолеГруппаСчет = ПоляНабораДанных.Найти("ГруппаСчет");
		Если ПолеГруппаСчет <> Неопределено Тогда
			РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
			ПолеГруппаСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
		КонецЕсли;
		
		ВидыКорСубконто = Неопределено;
		Если ТипЗнч(Правило.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов")
			И ЗначениеЗаполнено(Правило.КорСчет) Тогда
			
			ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
			ПолеГруппаКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет");
			Если ПолеГруппаКорСчет <> Неопределено Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.КорСчет, "Код, Наименование");
				ПолеГруппаКорСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
			КонецЕсли;
			
			ПолеКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет.КорСчет");
			Если ПолеКорСчет <> Неопределено Тогда
				ПолеКорСчет.ОграничениеИспользования.Условие = Истина;
				ПолеКорСчет.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто);
		
	КонецЕсли;
	
	Для каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл
		
		Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
			
		ЭтоПолеНедоступноеДляЗаполненияАналитики = Не ЗначениеЗаполнено(ПолеНабора.ТипЗначения);
		
		ПолеНабора.ОграничениеИспользования.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		
		Если ПолеНабора.Поле = "Регистратор" Тогда
			
			ПромежуточноеКэширование = Правило.ПромежуточноеКэшированиеРезультатовРаботыПравил;
					
			ПолеНабора.ОграничениеИспользования.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользования.Условие = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Условие = Не ПромежуточноеКэширование;
			
		ИначеЕсли ПолеНабора.Поле = "ИдентификаторИсточникаДанных" 
			Или ПолеНабора.Поле = "ХозяйственнаяОперация"
			Или ПолеНабора.Поле = "Счет" Тогда
			
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто = Неопределено)
	
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	Для НомерСубконто = 1 По 3 Цикл
		УстановитьСвойстваПоляСубконто(НомерСубконто, Ложь, ПоляНабораДанных, ВидыСубконто);
		Если ВидыКорСубконто <> Неопределено Тогда
			УстановитьСвойстваПоляСубконто(НомерСубконто, Истина, ПоляНабораДанных, ВидыКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПоляСубконто(НомерСубконто, КорСубконто, ПоляНабораДанных, ВидыСубконто)
	
	Если КорСубконто Тогда
		ИмяПоля = "КорСубконто" + НомерСубконто;
	Иначе
		ИмяПоля = "Субконто" + НомерСубконто;
	КонецЕсли;
	
	ОграниченияИспользования = Новый Массив;
	ОграниченияИспользования.Добавить("Поле");
	ОграниченияИспользования.Добавить("Условие");
	ОграниченияИспользования.Добавить("Группировка");
	ОграниченияИспользования.Добавить("Порядок");
	
	Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ПолеНабораДанных.Поле <> ИмяПоля Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидСубконто = ВидыСубконто.Найти(НомерСубконто, "НомерСубконто");
		Если СтрокаВидСубконто <> Неопределено Тогда
			ПолеНабораДанных.ТипЗначения = СтрокаВидСубконто.ТипЗначения;
			ПолеНабораДанных.Заголовок = Строка(СтрокаВидСубконто.ВидСубконто);
		Иначе
			Для каждого Ограничение Из ОграниченияИспользования Цикл
				ПолеНабораДанных.ОграничениеИспользования[Ограничение] = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов[Ограничение] = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеНастроекЗаполненияАналитики(УсловноеОформление) Экспорт
	
	ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, "НастройкиЗаполненияАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитики");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиНетВДоступныхПолях");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗначениеАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанным значением'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из источника данных'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаНастроекЗаполненияАналитики(Объект) Экспорт
	
	ПараметрыЗаполненияАналитик = ШаблонПараметровЗаполненияАналитик();
	ВидыАналитик                = ВидыАналитик(Объект);
	
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Объект.СхемаИсточникаДанных.Получить());
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроекПравила(Объект, ПараметрыЗаполненияАналитик, Неопределено); 
	ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Объект, ВидыАналитик);
	ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Объект);
	УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик);
	ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Объект);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыХешейНастроекИСхемы(Объект) Экспорт
	
	НастройкиКД = Неопределено;
	Если Не Объект.ДополнительныеСвойства.Свойство("НастройкиКД", НастройкиКД) Тогда
		НастройкиКД = Объект.КомпоновщикНастроек.Получить();
	КонецЕсли;
	Объект.ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСериализуемогоОбъекта(НастройкиКД, ХешФункция.MD5);

	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СхемаКД = Объект.СхемаИсточникаДанных.Получить();
		Объект.ХешСхемыКомпоновкиДанных = ОбщегоНазначенияУТ.ХешСуммаСериализуемогоОбъекта(СхемаКД, ХешФункция.MD5);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Процедура ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.ТипИсточника = "Обороты" Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, 
					"ПромежуточноеКэшированиеРезультатовРаботыПравил", Ложь, 
					ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		СтатьиБюджетов = Новый СписокЗначений;
		СтатьиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", СтатьиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	Если ИсточникДанных.ПредполагаетФактическиеДанные Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ИсточникДанных.ПредполагаетИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, ПараметрыПоИсточнику, , Ложь);
	
	Для каждого Строка Из ФактПоСтатьямБюджетов Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		НоваяСтрока.СуммаПриход = Строка.Сумма;
		НоваяСтрока.СуммаВалПриход = Строка.СуммаВВалюте;
		НоваяСтрока.КоличествоПриход = Строка.Количество;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		ПоказателиБюджетов = Новый СписокЗначений;
		ПоказателиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	Если ИсточникДанных.ПредполагаетФактическиеДанные Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ИсточникДанных.ПредполагаетИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоПоказателямБюджетов = ФактПоПоказателямБюджетов(ОтборПравил, ПараметрыПоИсточнику);
	
	Сценарии = Справочники.Сценарии.СценарииСУчетомОтбора(ПараметрыПоИсточнику.ДополнительныйОтбор);
	Если Сценарии.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определены сценарии источника данных'")
	КонецЕсли;
	
	СтрокиИсполнения = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ИсполнениеБюджета));
	СтрокиФактическихДанных = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ФактическиеДанные));
	
	Для каждого СтрокаСценарии Из Сценарии Цикл
		Если СтрокаСценарии.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
			ТаблицаДобавления = СтрокиИсполнения;
		Иначе
			ТаблицаДобавления = СтрокиФактическихДанных;
		КонецЕсли;
		Для каждого СтрокаФакт Из ТаблицаДобавления Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.Сценарий = СтрокаСценарии.Сценарий;
			НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
			НоваяСтрока.КоличествоНачальныйОстаток = СтрокаФакт.Количество;
			Если ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда //целевой показатель
				НоваяСтрока.СуммаПриход = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВалПриход = СтрокаФакт.СуммаВВалюте;
			Иначе
				НоваяСтрока.СуммаНачальныйОстаток = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВВалютеНачальныйОстаток = СтрокаФакт.СуммаВВалюте;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Сценарии.Найти(Справочники.Сценарии.ФактическиеДанные) <> Неопределено
		ИЛИ Сценарии.Найти(Справочники.Сценарии.ИсполнениеБюджета) <> Неопределено Тогда
		ФактПоСтатьямБюджетов = ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь, Ложь);
		Для каждого СтрокаФакт Из ФактПоСтатьямБюджетов Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		НефинансовыеПоказатели = Новый СписокЗначений;
		НефинансовыеПоказатели.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, 
			"НефинансовыйПоказатель", 
			НефинансовыеПоказатели, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ЗначенияНефинансовыхПоказателей = ЗначенияНефинансовыхПоказателей(ОтборПравил, ПараметрыПоИсточнику);
	
	КопияТаблицаДанныхПоВидуБюджета = ТаблицаДанныхПоВидуБюджета.СкопироватьКолонки();
	
	Для каждого Строка Из ЗначенияНефинансовыхПоказателей Цикл
		НоваяСтрока = КопияТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИД_Источника = ИсточникДанных.Идентификатор;
		Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
			НоваяСтрока.Период = Строка.ПериодУстановки;
		КонецЕсли;
		Если Строка.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный Тогда
			НоваяСтрока.ВалютаХранения = Строка.Валюта;
			НоваяСтрока.Валюта = ПараметрыПоИсточнику.ВалютаОтчета;
			НоваяСтрока.ПериодКурса = Строка.ПериодУстановки;
		КонецЕсли;
		НоваяСтрока.ИндексНФП = ТаблицаДанныхПоВидуБюджета.Индекс(НоваяСтрока);
	КонецЦикла;
	
	Если КопияТаблицаДанныхПоВидуБюджета.Количество() > 0 Тогда
		ПересчитатьТаблицуДанныхВВалюту(КопияТаблицаДанныхПоВидуБюджета, Параметры, Истина);
		
		Для каждого Строка Из КопияТаблицаДанныхПоВидуБюджета Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	ПараметрыПоИсточнику.Вставить("ВыражениеНачалоПериода",      ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеНачалоПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеКонецПериода",       ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеКонецПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеПериодаГруппировки", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеПериодаГруппировки));
	ПараметрыПоИсточнику.Вставить("ГраницаФактДанных",           ПараметрыДанных.ГраницаФактДанных);
	
	ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(ИсточникДанных.ДополнительныйОтбор.Отбор, 
												ДополнительныйОтбор.Отбор);
	Если ДополнительныйОтбор <> Неопределено И ПараметрыДанных <> Неопределено Тогда
		БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводом(ДополнительныйОтбор, ПараметрыДанных);
	КонецЕсли;
	ПараметрыПоИсточнику.ДополнительныйОтбор = ДополнительныйОтбор;
	
	Возврат ПараметрыПоИсточнику;
	
КонецФункции

Функция ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных)
	
	Параметры = ШаблонПараметровПолученияФакта();
	
	Параметры.ВалютаОтчета = ВалютаОтчета;
	Параметры.ВозвращатьСуммуВВалюте = Истина;
	Параметры.Период = Период; 
	Параметры.Периодичность = Периодичность;
	Если ВидыАналитик <> Неопределено Тогда
		Параметры.Вставить("ВидыАналитик", ВидыАналитик);
	КонецЕсли;
	Параметры.ПоОрганизациям = ПоОрганизациям;
	Параметры.ПоПодразделениям = ПоПодразделениям;
	Параметры.ОстаткиТолькоНаНачалоПериода = Истина;
	Параметры.РежимПолученияДанных = РежимПолученияДанных;
	
	Возврат Параметры;
	
КонецФункции

Функция ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры) Экспорт
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ВозвращатьПравилоПолученияДанных Тогда
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
				"ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, 
				//++ НЕ УТКА
				|ПланСчетовСсылка.Международный, 
				//-- НЕ УТКА
				|ПланСчетовСсылка.Хозрасчетный,
				|Строка");
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаЗначений.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНефинансовыхПоказателей"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаЗначений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаЗначений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаЗначений.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаЗначений.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаЗначений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаЗначений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	
	ТаблицаЗначений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("ПериодУстановки", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	ТаблицаЗначений.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ТаблицаДанныхПоВидуБюджета(Параметры)
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповАналитики = Новый ОписаниеТипов(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип, "NULL");
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЗначениеНефинансовогоПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)); 
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	ТаблицаФакта.Колонки.Добавить("ИндексНФП", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	ТаблицаФакта.Колонки.Добавить("ИД_Источника", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	МассивТиповСтатьи = Новый Массив;
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТиповСтатьи));
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Для НомерАналитики = 1 По 6 Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
	
	ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаФакта.Колонки.Добавить("КоличествоНачальныйОстаток", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаНачальныйОстаток", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВВалютеНачальныйОстаток", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоПриход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаПриход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалПриход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоРасход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаРасход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалРасход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЗначениеНефинансовогоПоказателя);
	ТаблицаФакта.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	Возврат ТаблицаФакта;
	
КонецФункции

//++ НЕ УТКА
Функция ФактСтатьиБюджетовХранимый(Параметры) 
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ХранимыеОборотыПоСтатьямБюджетов");
	Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
		Для Каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда 
				Набор.Запрос = СтрЗаменить(Набор.Запрос, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ ");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);

	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)");
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	ДобавитьПолеГруппировки(Настройки, "Правило");
	
	Для НомерАналитики = 1 По 6 Цикл
		
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
		
	КонецЦикла;
	
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода",  Параметры.Период.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода",   Параметры.Период.ДатаОкончания);
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
		ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
	КонецЕсли;
	Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
		ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
		ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
	КонецЕсли;
	
	Если Параметры.Периодичность <> Неопределено Тогда
		
		ИмяПоляПериод = "Период" + Параметры.Периодичность;
		ВыражениеПериод = ИмяПоляПериод;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "Период");
		
	КонецЕсли;
	
	Ресурсы = Новый Структура;
	НеобходимПересчетСуммыВВалютуОтчета = Ложь;
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		
		ВалютаОтчета = Параметры.ВалютаОтчета;
		
		Если ВалютаОтчета = Параметры.ВалютаРегл Тогда
			ВыражениеСуммы = "СуммаРегл";
		ИначеЕсли ВалютаОтчета = Параметры.ВалютаУпр Тогда
			ВыражениеСуммы = "СуммаУпр";
		Иначе
			ВыражениеСуммы = "СуммаВВалюте";
			НеобходимПересчетСуммыВВалютуОтчета = Истина;
			ДобавитьПолеГруппировки(Настройки, "ВалютаХранения");
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "ПериодДень");
			ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
		КонецЕсли;
		
		Ресурсы.Вставить("Сумма", ВыражениеСуммы);
		
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Ресурс Из Ресурсы Цикл
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Ресурс.Ключ, Ресурс.Значение, "Сумма");
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, Ресурс.Ключ);
	КонецЦикла;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	Факт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
	Если НеобходимПересчетСуммыВВалютуОтчета Тогда
		ПараметрыПересчета = ШаблонПараметровПолученияФакта();
		ПараметрыПересчета.ВалютаОтчета = ВалютаОтчета;
		ПересчитатьТаблицуДанныхВВалюту(Факт, ПараметрыПересчета, Истина);
	КонецЕсли;
	
	Возврат Факт;
	
КонецФункции
//-- НЕ УТКА

Процедура ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта, ДополнятьСценарийИсполнения = Истина) Экспорт
	
	СхемаКомпоновкиДанных = 
		Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.СхемаПолученияДанных(Правило, Параметры.РежимПолученияДанных);
		
	РегламентированныйИлиМеждународныйУчет = Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		  Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
		
	Если РегламентированныйИлиМеждународныйУчет Тогда
		 ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		 ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
		 УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто); 
	КонецЕсли;
	
	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)");
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета)");
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка)");
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода",  Параметры.Период.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода",   Параметры.Период.ДатаОкончания);
	Если Правило.РазделИсточникаДанных <> Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	КонецЕсли;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ХозяйственнаяОперация", Правило.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если РегламентированныйИлиМеждународныйУчет И ЗначениеЗаполнено(Правило.КорСчет) Тогда
		ПараметрКорСчет = СхемаКомпоновкиДанных.Параметры.Найти("КорСчет");
		ПараметрКорСчет.Значение = Правило.КорСчет;
		ПараметрКорСчет.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
		СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
		ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
	КонецЕсли;
	Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
		ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
		ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	ПараметрОборотПоАналитикеРасхода = СхемаКомпоновкиДанных.Параметры.Найти("ОборотПоАналитикеРасхода");
	Если ПараметрОборотПоАналитикеРасхода <> Неопределено Тогда
		ПараметрОборотПоАналитикеРасхода.Значение = Правило.ОборотПоАналитикеРасхода;
	КонецЕсли;
	
	Если Параметры.Периодичность <> Неопределено Тогда
		
		ИмяПоляПериод = "Период" + Параметры.Периодичность;
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НАЧАЛОПЕРИОДА(Период, ""%1"")", 
				Параметры.Периодичность); 
		Иначе
			ВызватьИсключение НСтр("ru = 'В схема источника данных отсутствует поле периода. 
										|Получение данных в разрезе периода невозможно.'");
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "Период");
		
	КонецЕсли;
	
	Если Параметры.РазворачиватьПоРегистратору Тогда
		ЕстьПолеРегистратор = (НаборДанных.Поля.Найти("Регистратор") <> Неопределено);
		Если Не ЕстьПолеРегистратор Тогда
			ВызватьИсключение НСтр("ru = 'В схема источника данных отсутствует поле регистратор. 
										|Получение данных в разрезе регистратора невозможно.'");
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
		
	КонецЕсли;
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
		Если Параметры.Показатели.Свойство("Сумма") Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * Правило.Коэффициент;
			Если Параметры.ВозвращатьСуммуВВалюте Тогда
				НоваяСтрока.СуммаВВалюте = НоваяСтрока.СуммаВВалюте * Правило.Коэффициент;
			КонецЕсли;
			Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
				НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаУпр * Правило.Коэффициент;
				НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл * Правило.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Показатели.Свойство("Количество") Тогда
			НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
		КонецЕсли;
		Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные Тогда
			НоваяСтрока.Сценарий = Справочники.Сценарии.ФактическиеДанные;
			Если ДополнятьСценарийИсполнения Тогда
				НоваяСтрокаИсполнение = ТаблицаФакта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнение, НоваяСтрока);
				НоваяСтрокаИсполнение.Сценарий = Справочники.Сценарии.ИсполнениеБюджета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта, Знач ПереопределеннаяСКД = Неопределено) Экспорт
	
	Если ПереопределеннаяСКД = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.СхемаПолученияДанных(Правило, Параметры.РежимПолученияДанных);
	Иначе
		СхемаКомпоновкиДанных = ПереопределеннаяСКД;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		 Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных); 
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто); 
	КонецЕсли;

	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодГраница");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодКурса");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "НачалоПериода");
	
	НастройкиОтбора = Правило.КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	// Инициализируем параметр, чтобы он появился в макете компоновки данных
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "СтатьяАктивовПассивов", Правило.ИсточникДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	ИспользоватьДатуНачала = Параметры.ОстаткиТолькоНаНачалоПериода И 
								Не Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Целевой;
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
		ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("ПериодГраница");
		Если ИспользоватьДатуНачала Тогда
			ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		Иначе
			ПараметрПериод.Выражение = "КомпоновкаДанныхСервер.ГраницаПериода(" + СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "&ПЕРИОД") + ", ""Включая"")";
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		
		ВыражениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"НАЧАЛОПЕРИОДА(&ПериодКурса, ""%1"")", Параметры.Периодичность);
								
		Если Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Расчетный Тогда
			ВыражениеСоединения = ВыражениеПериода;
		Иначе
			ВыражениеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									"КОНЕЦПЕРИОДА(&ПериодКурса, ""%1"")", Параметры.Периодичность);
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериода = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеСоединения);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "Период");
	КонецЕсли;
	
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)");
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета)");
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка)");
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры);
	
	Для каждого СтрокаПериод Из Параметры.ТаблицаПериодов Цикл
		Период = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, СтрокаПериод.ДатаОкончания);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "Период", Период, Истина);
		
		ПериодГраница = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, Новый Граница(Период, ВидГраницы.Включая));
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодГраница", ПериодГраница, Истина);
		
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодКурса", Период, Истина);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "НачалоПериода", Параметры.Период.ДатаНачала, Истина);
		
		РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
		Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
			НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
			Если Параметры.Показатели.Свойство("Сумма") Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма * Правило.Коэффициент;
				НоваяСтрока.СуммаВВалюте = НоваяСтрока.СуммаВВалюте * Правило.Коэффициент;
			КонецЕсли;
			Если Параметры.Показатели.Свойство("Количество") Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
			КонецЕсли;
		КонецЦикла;
		Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные Тогда
			НоваяСтрока.Сценарий = Справочники.Сценарии.ФактическиеДанные;
			НоваяСтрокаИсполнения = ТаблицаФакта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнения, НоваяСтрока);
			НоваяСтрокаИсполнения.Сценарий = Справочники.Сценарии.ИсполнениеБюджета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений) Экспорт
	
	СхемаКомпоновкиДанных = Правило.СхемаПолученияДанных;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Не определена схема компоновки данных для нефинансового показателя ""%НефинансовыйПоказатель""'");
		ВызватьИсключение СтрЗаменить(ШаблонСообщения, "%НефинансовыйПоказатель", Правило.НефинансовыйПоказатель);
	КонецЕсли;
	
	Если Не СхемаКомпоновкиДанных.НаборыДанных.Количество() Тогда
		ШаблонСообщения = НСтр("ru = 'Отсутствует набор данных в схеме заполнения для ""%НефинансовыйПоказатель""'");
		ВызватьИсключение СтрЗаменить(ШаблонСообщения, "%НефинансовыйПоказатель", Правило.НефинансовыйПоказатель);
	КонецЕсли;
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если ПоляНабора.Найти("ЗначениеПоказателя") = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%НефинансовыйПоказатель"" отсутствует поле ""ЗначениеПоказателя""'");
		ВызватьИсключение СтрЗаменить(ШаблонСообщения, "%НефинансовыйПоказатель", Правило.НефинансовыйПоказатель);
	КонецЕсли;
	
	Если ПоляНабора.Найти("Период") = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%НефинансовыйПоказатель"" отсутствует поле ""Период""'");
		ВызватьИсключение СтрЗаменить(ШаблонСообщения, "%НефинансовыйПоказатель", Правило.НефинансовыйПоказатель);
	КонецЕсли;
	
	Если Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" И ПоляНабора.Найти("Валюта") = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%НефинансовыйПоказатель"" отсутствует поле ""Валюта""'");
		ВызватьИсключение СтрЗаменить(ШаблонСообщения, "%НефинансовыйПоказатель", Правило.НефинансовыйПоказатель);
	КонецЕсли;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	Если Правило.НастройкиСхемыПолученияДанных <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(Настройки, Правило.НастройкиСхемыПолученияДанных); 
	КонецЕсли;
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ДобавитьПолеГруппировки(Настройки, "ЗначениеПоказателя");
	
	Если Правило.ПоОрганизациям 
		И ПоляНабора.Найти("Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Правило.ПоПодразделениям 
		И ПоляНабора.Найти("Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Период");
	
	Если Параметры.Свойство("ДополнительныйОтбор") И Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Не Правило.ПоСценариям Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Настройки.Отбор, "Сценарий");
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Правило.ПоПериодам И ПоляНабора.Найти("НомерПодпериода") <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки",
			"БюджетированиеКлиентСервер.ДобавитьИнтервал(
			|	НАЧАЛОПЕРИОДА(Период, """ + Строка(Правило.Периодичность) + """),
			|	&ПериодичностьПодпериодов,
			|	ВЫБОР КОГДА ЗначениеЗаполнено(НомерПодпериода) ТОГДА НомерПодпериода - 1 ИНАЧЕ 0 КОНЕЦ, 
			|	&Кэш)");
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Кэш", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодичностьПодпериодов", Правило.ПериодичностьПодпериодов);
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки", 
			"ПериодУстановки");
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "ПериодУстановки");
	
	Если ПоляНабора.Найти("Регистратор") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
	КонецЕсли;
	
	Если Правило.ПоСценариям Тогда
		Если ПоляНабора.Найти("Сценарий") = Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "&ФактическиеДанные");
			ДобавитьПараметр(СхемаКомпоновкиДанных, "ФактическиеДанные", Справочники.Сценарии.ФактическиеДанные);
		КонецЕсли;
		ДобавитьПолеГруппировки(Настройки, "Сценарий");
	КонецЕсли;
	
	Если Правило.ПоПериодам И ПоляНабора.Найти("НомерПодпериода") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "НомерПодпериода");
	КонецЕсли;
	
	Если Правило.ПоПериодам И ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "КонецПериодаГруппировки",
			"КонецПериода(Период, """ + Строка(Параметры.Периодичность) + """)");
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("Период"), ,ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("КонецПериодаГруппировки"), ,ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ДобавитьПолеГруппировки(Настройки, "КонецПериодаГруппировки");
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	ВнешниеНаборы = ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило);
	
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ЗначениеПоказателя", , , ВидСравненияКомпоновкиДанных.Заполнено);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
	
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаЗначений, СтрокаРезультат, Правило);
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилоПолученияЗначенийНефинансовогоПоказателя(РеквизитыПоказателя, СхемаПолученияДанных, НастройкиСхемыПолученияДанных = Неопределено) Экспорт
	
	Правило = Новый Структура();
	Правило.Вставить("НефинансовыйПоказатель");
	Правило.Вставить("ПоОрганизациям");
	Правило.Вставить("ПоПодразделениям");
	Правило.Вставить("ПоСценариям");
	Правило.Вставить("ПоПериодам");
	Правило.Вставить("УстанавливатьЗначениеНаКаждыйПериод");
	Правило.Вставить("Периодичность");
	Правило.Вставить("ПериодичностьПодпериодов");
	
	Правило.Вставить("РасширеныйРежимНастройкиЗаполненияАналитики");
	Для НомерАналитики = 1 По 6 Цикл
		Правило.Вставить("ВидАналитики" + НомерАналитики);
		Правило.Вставить("ВыражениеЗаполненияАналитики" + НомерАналитики);
		Правило.Вставить("ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики);
		Правило.Вставить("ЗначениеАналитики" + НомерАналитики);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Правило, РеквизитыПоказателя);
	
	Правило.Вставить("РазделИсточникаДанных", Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные);
	Правило.Вставить("СхемаПолученияДанных", СхемаПолученияДанных);
	Правило.Вставить("НастройкиСхемыПолученияДанных", НастройкиСхемыПолученияДанных);
	
	Правило.Вставить("ВидПоказателя", РеквизитыПоказателя.ВидПоказателя);
	
	ДенежныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный);
	Если Не ДенежныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеВалюты", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ВалютаОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиВалюта", РеквизитыПоказателя.АдресАналитикиВалюта);
		Правило.Вставить("ПолеВалютыАналитики", РеквизитыПоказателя.ПолеВалютыАналитики);
	Иначе 
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоИсточникуДанных");
	КонецЕсли;
	
	КоличественныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Количественный);
	Если Не КоличественныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиЕдиницаИзмерения", РеквизитыПоказателя.АдресАналитикиКоличество);
		Правило.Вставить("ПолеЕдиницыИзмеренияАналитики", РеквизитыПоказателя.ПолеЕдиницыИзмеренияАналитики);
	Иначе
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ФиксированноеЗначение");
		Правило.Вставить("ЕдиницаИзмерения", РеквизитыПоказателя.ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

Процедура ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанных, Параметры, СохранятьВалюту = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта,
	|	ТаблицаДанных.ПериодКурса
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДанных.ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.ПериодКурса КАК Период,
	|	ТаблицаДанных.ВалютаХранения КАК ВалютаХранения,
	|	//ВозвращатьСуммуВВалюте ТаблицаДанных.Валюта КАК Валюта,
	|	&ВалютаОтчета КАК ВалютаОтчета
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.ВалютаХранения <> &ВалютаОтчета
	|	//ВозвращатьСуммуВВалюте ИЛИ ТаблицаДанных.ВалютаХранения <> ТаблицаДанных.Валюта
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВалютаХранения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	Валюты КАК Валюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			Валюты.Период >= КурсыВалют.Период
	|			И  КурсыВалют.Валюта В (
	|					Валюты.ВалютаХранения, 
	|					//ВозвращатьСуммуВВалюте Валюты.Валюта,
	|					Валюты.ВалютаОтчета)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюты.Период,
	|	КурсыВалют.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.Период КАК Период,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО 
	|			ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ВалютаОтчета", Параметры.ВалютаОтчета);
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ВозвращатьСуммуВВалюте", "");
	КонецЕсли;
	
	КурсыВалют = Запрос.Выполнить();
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаОтчета", Параметры.ВалютаОтчета);
	
	НаборТаблицаФакт = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	НаборТаблицаФакт.ИмяОбъекта = "ТаблицаДанных";
	
	ПоляЗначенияНефинансовогоПоказателя = Новый Массив;
	ПоляЗначенияНефинансовогоПоказателя.Добавить("ЗначениеПоказателя");
	
	ПоляСуммы = Новый Массив;
	ПоляСуммыВВалюте = Новый Массив;
	ПоляКоличества = Новый Массив;
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаФакт.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		
		Если Параметры.Показатели.Свойство("Количество") 
			И СтрНачинаетсяС(ИмяПоля, "Количество") Тогда
			ПоляКоличества.Добавить(ИмяПоля);
		КонецЕсли;
	
		Если Параметры.Показатели.Свойство("Сумма") 
			И СтрНачинаетсяС(ИмяПоля, "Сумма") Тогда
			
			Если Параметры.ВозвращатьСуммуВВалюте И СтрНайти(ИмяПоля, "Вал") > 0 Тогда
				ПоляСуммыВВалюте.Добавить(ИмяПоля);
			Иначе
				ПоляСуммы.Добавить(ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	
		Если ПоляСуммы.Найти(ИмяПоля) = Неопределено 
			И ПоляСуммыВВалюте.Найти(ИмяПоля) = Неопределено 
			И ПоляКоличества.Найти(ИмяПоля) = Неопределено
			И ПоляЗначенияНефинансовогоПоказателя.Найти(ИмяПоля) = Неопределено
			И (СохранятьВалюту ИЛИ ИмяПоля <> "ВалютаХранения") Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	НаборыКурсовВалют = Новый Структура;
	НаборыКурсовВалют.Вставить("КурсыВалютыХранения", "ВалютаХранения");
	НаборыКурсовВалют.Вставить("КурсыВалютОтчета", "&ВалютаОтчета");
	НаборыКурсовВалют.Вставить("КурсыВалют", "Валюта");
	
	Для каждого Набор Из НаборыКурсовВалют Цикл
		
		ИмяНабора = Набор.Ключ;
		ПолеВалюты = Набор.Значение; 
		
		НаборКурсыВалют = ФинансоваяОтчетностьСервер.НовыйНабор(
			СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), ИмяНабора);
		НаборКурсыВалют.ИмяОбъекта = "КурсыВалют";
		Для каждого Колонка Из КурсыВалют.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			НовоеПоле = НаборКурсыВалют.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = ИмяПоля;
			НовоеПоле.ПутьКДанным = ИмяНабора + "_" + ИмяПоля;
			НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		КонецЦикла;
		
		// Связь с набором данных
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = "ПериодКурса";
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Период";
		
		Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ТаблицаДанных";
		Связь.ВыражениеИсточник = ПолеВалюты;
		Связь.НаборДанныхПриемник = ИмяНабора;
		Связь.ВыражениеПриемник = ИмяНабора + "_" + "Валюта";
		
	КонецЦикла;
	
	Для каждого Поле Из ПоляСуммы Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалютОтчета_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляЗначенияНефинансовогоПоказателя Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляСуммыВВалюте Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Выражение = Поле + " * ЕстьNULL(КурсыВалютыХранения_Курс, 1) / ЕстьNULL(КурсыВалют_Курс, 1)";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Поле, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	Для каждого Поле Из ПоляКоличества Цикл
		Если НаборТаблицаФакт.Поля.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаКомпоновкиДанных, Поле, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, Поле);
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ТаблицаДанных", ТаблицаДанных);
	ВнешниеНаборы.Вставить("КурсыВалют",   КурсыВалют);
	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборы);
	
КонецПроцедуры

Процедура ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте)
	
	ПоляСуммы = Новый Массив;
	ПоляСуммы.Добавить("Сумма");
	Если ВозвращатьСуммуВВалюте Тогда
		ПоляСуммы.Добавить("СуммаВВалюте");
	КонецЕсли;
	
	Для каждого ИмяПоля Из ПоляСуммы Цикл
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, ИмяПоля, Выражение, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ИмяПоля);
	КонецЦикла;
	
	ИмяПоляВалюта = "ВалютаХранения";
	Если ТипЗнч(Валюта) = Тип("Строка") Тогда
		ВыражениеВалюта = Валюта;
	Иначе                             
		ВыражениеВалюта = "&ВалютаХранения";
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаХранения", Валюта);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоляВалюта, ВыражениеВалюта);
	ДобавитьПолеГруппировки(Настройки, ИмяПоляВалюта);
	
КонецПроцедуры

Функция НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, ИмяПоля)
	
	Для Каждого ПолеНабора из ПоляНабора Цикл
		Если НРег(ПолеНабора.Поле) = НРег(ИмяПоля) Тогда
			Возврат ПолеНабора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если Параметры.ПоОрганизациям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Параметры.ПоПодразделениям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Функция ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ИмяНабораДанных = НаборДанных.Имя; // Имя набора данных соответсвует регистру операции
		ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(Правило.ИсточникСуммыОперации).Ресурсы;
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для источника суммы %1 хозяйственной операции %2 не найдены соотвествующие ресурсы в источнике данных.'"), 
				Правило.ИсточникСуммыОперации, 
				Правило.ИсточникДанных);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				//Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	Возврат ИсточникиСуммы
	
КонецФункции

Процедура ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	НуженПериодКурса = УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
		УстановитьНаиболееПодходящиеПоляЗаполненияСуммыРеглИУпр(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если НуженПериодКурса Тогда
		// Период курса
		ЕстьПолеПериодДень = (НаборДанных.Поля.Найти("ПериодДень") <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеПериодДень Тогда
			ВыражениеПоляПериодКурса = "ПериодДень";
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПоляПериодКурса = "Период";
		Иначе
			ВыражениеПоляПериодКурса = "&КонецПериода";
		КонецЕсли;
	Иначе
		ВыражениеПоляПериодКурса = "&КонецПериода";
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", ВыражениеПоляПериодКурса);
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "&Период");
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	ПолеКоличество = "Количество";
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ПолеКоличество = ПолеРесурсаБухгалтерии("Количество", Правило.ТипИтога)
	КонецЕсли;
	
	Если ПоляНабора.Найти(ПолеКоличество) <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", ПолеКоличество, "Сумма");
	Иначе
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", "NULL", "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Количество");
	
КонецПроцедуры

Процедура ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Значение = Неопределено)
	
	Если СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = ИмяПараметра;
	Параметр.ОграничениеИспользования = Истина;
	
	Если Значение <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.ВключатьВДоступныеПоля = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборНаЗначениеПоказателей(Настройки, Параметры)
	
	Если Параметры.Показатели.Свойство("Сумма") И Параметры.Показатели.Свойство("Количество") Тогда
		Отбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Настройки.Отбор.Элементы,
			"ГруппаОтбор",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
	Иначе
		Отбор = Настройки.Отбор;
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Сумма", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Отбор, "Количество", , ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, Параметры, РазворачиватьПериод = Ложь, ПересчитыватьВВалюту = Истина) Экспорт
	
	// Дополним отбором, обеспечивающим выбор только статей, влиящих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, Параметры, Ложь);
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	// Наборы данных схемы
	НаборСвязиПоказателейБюджетов = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "СвязиПоказателейБюджетов");
	НаборСвязиПоказателейБюджетов.Запрос = 
	"ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка КАК ПоказательБюджетов,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ПоказателиБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	СвязиПоказателейБюджетов.СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.Расход,
	|	СвязиПоказателейБюджетов.Коэффициент,
	|	СвязиПоказателейБюджетов.Аналитика1 КАК ЗначениеАналитика1,
	|	СвязиПоказателейБюджетов.Аналитика2 КАК ЗначениеАналитика2,
	|	СвязиПоказателейБюджетов.Аналитика3 КАК ЗначениеАналитика3,
	|	СвязиПоказателейБюджетов.Аналитика4 КАК ЗначениеАналитика4,
	|	СвязиПоказателейБюджетов.Аналитика5 КАК ЗначениеАналитика5,
	|	СвязиПоказателейБюджетов.Аналитика6 КАК ЗначениеАналитика6,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику1,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику2,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику3,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику4,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику5,
	|	СвязиПоказателейБюджетов.ТранслироватьАналитику6,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики1,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики2,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики3,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики4,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики5,
	|	СвязиПоказателейБюджетов.АдресТрансляцииАналитики6
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|	ПО
	|		СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = ПоказателиБюджетов.Ссылка";
	
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "ПоказательБюджетов"); 
	
	НаборФактПоСтатьямБюджетов = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактПоСтатьямБюджетов");
	НаборФактПоСтатьямБюджетов.ИмяОбъекта = "ФактПоСтатьямБюджетов";
	
	Ресурсы = Новый Структура;
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		Ресурсы.Вставить("Сумма", "Сумма");
		Если Параметры.ВозвращатьСуммуВВалюте Тогда
			Ресурсы.Вставить("СуммаВал", "СуммаВВалюте");
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Колонка Из ФактПоСтатьямБюджетов.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборФактПоСтатьямБюджетов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		НовоеПоле.ОграничениеИспользования.Условие = Истина;
		Если Не Ресурсы.Свойство(ИмяПоля) Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	// Связи наборов данных
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ФактПоСтатьямБюджетов";
	Связь.ВыражениеИсточник = "СтатьяБюджетов";
	Связь.НаборДанныхПриемник = "СвязиПоказателейБюджетов";
	Связь.ВыражениеПриемник = "СтатьяБюджетов";
	
	Если РазворачиватьПериод Тогда
		Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
			ЕстьПолеРегистратор = НаборФактПоСтатьямБюджетов.Поля.Найти("Регистратор") <> Неопределено;
			ЕстьПолеПериод = НаборФактПоСтатьямБюджетов.Поля.Найти("Период") <> Неопределено;
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Поле = "Регистратор";
				Если ЕстьПолеРегистратор Тогда
					Выражение = "Регистратор";
				Иначе
					Выражение = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
			Иначе
				Поле = "Период" + Периодичность;
				Если ЕстьПолеПериод Тогда 
					Выражение = СтрЗаменить("НАЧАЛОПЕРИОДА(Период, ""%Периодичность"")", "%Периодичность", Периодичность);
				Иначе
					Выражение = "ДАТАВРЕМЯ(1,1,1)";
				КонецЕсли;
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, Поле, Выражение);
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, Поле);
		КонецЦикла;
	КонецЕсли;
	
	// Вычисляемые поля аналитики
	ВыраженияАналитики = Новый Структура;
	ШаблонВыражения =
	"ВЫБОР
	|	КОГДА КоличествоИспользуемыхАналитик < %НомерАналитики
	|		ТОГДА NULL
	|	КОГДА НЕ ТранслироватьАналитику%НомерАналитики
	|		ТОГДА ЗначениеАналитика%НомерАналитики
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 1
	|		ТОГДА Аналитика1
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 2
	|		ТОГДА Аналитика2
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 3
	|		ТОГДА Аналитика3
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 4
	|		ТОГДА Аналитика4
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 5
	|		ТОГДА Аналитика5
	|	КОГДА АдресТрансляцииАналитики%НомерАналитики = 6
	|		ТОГДА Аналитика6
	|КОНЕЦ";
	Для НомерАналитики = 1 По 6 Цикл
		Выражение = СтрЗаменить(ШаблонВыражения, "%НомерАналитики", НомерАналитики);
		ИмяПоля = "Аналитика" + НомерАналитики;
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоля, Выражение);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля); 
		ВыраженияАналитики.Вставить(ИмяПоля, Выражение);
	КонецЦикла;
	
	Если Параметры.ВозвращатьСуммуВВалюте Тогда
		ВыражениеВалюта = 
		"ВЫБОР 
		|	КОГДА НЕ ВалютаОпределяетсяАналитикой 
		|		ТОГДА Валюта
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, 
		|			ВЫБОР 
		|				КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ВыраженияАналитики.Аналитика1 + "
		|				КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ВыраженияАналитики.Аналитика2 + "
		|				КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ВыраженияАналитики.Аналитика3 + "
		|				КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ВыраженияАналитики.Аналитика4 + "
		|				КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ВыраженияАналитики.Аналитика5 + "
		|				КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ВыраженияАналитики.Аналитика6 + "
		|			КОНЕЦ, 
		|			ПолеВалютыАналитики,
		|			Валюта)
		|	КОНЕЦ";
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Валюта", ВыражениеВалюта);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "Валюта");
		
		ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
	КонецЕсли;
	
	ВыражениеПриход = "ВЫБОР КОГДА Расход ТОГДА 0 ИНАЧЕ Коэффициент * %Поле КОНЕЦ";
	ВыражениеРасход = "ВЫБОР КОГДА Расход ТОГДА Коэффициент * %Поле ИНАЧЕ 0 КОНЕЦ";
	Для каждого Ресурс Из Ресурсы Цикл
		
		РесурсПриход = Ресурс.Ключ + "Приход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсПриход, 
			СтрЗаменить(ВыражениеПриход, "%Поле", Ресурс.Значение), 
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсПриход);
		
		РесурсРасход = Ресурс.Ключ + "Расход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсРасход, 
			СтрЗаменить(ВыражениеРасход, "%Поле", Ресурс.Значение),
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсРасход);
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ОтборПравил);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ФактПоСтатьямБюджетов", ФактПоСтатьямБюджетов);
	
	ТаблицаФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборыДанных);
	
	Если ПересчитыватьВВалюту И Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ТаблицаФакт, Параметры, Истина);
	КонецЕсли;
	
	Возврат ТаблицаФакт;
	
КонецФункции

Функция ПолеРесурсаБухгалтерии(ПолеСумма, ТипИтога) Экспорт
	
	Возврат СтрЗаменить(ПолеСумма + Строка(ТипИтога), " ","");
	
КонецФункции

Процедура ДобавитьПолеГруппировки(Настройки, Поле)
	
	Если Настройки.Структура.Количество() = 0 Тогда
		Группировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура);
	Иначе
		Группировка = Настройки.Структура[0];
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, Поле);
	
КонецПроцедуры

Функция ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, Строка, Правило)
	
	НоваяСтрока = ТаблицаФакта.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Правило);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
	Для НомерАналитики = 1 По 6 Цикл
		Если ЗначениеЗаполнено(Правило["ВидАналитики" + НомерАналитики])
			И Не ЗначениеЗаполнено(НоваяСтрока["Аналитика" + НомерАналитики]) Тогда
			НоваяСтрока["Аналитика" + НомерАналитики] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура УстановитьНаиболееПодходящиеПоляЗаполненияСуммыРеглИУпр(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	Выражение = Неопределено;
	
	Если ИсточникиСуммы.Свойство("Упр", Выражение) Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаУпр", Выражение, "Сумма");
	Иначе
		ВыражениеСуммы = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("Сумма").Выражение;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаУпр", ВыражениеСуммы, "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаУпр");
	
	Если ИсточникиСуммы.Свойство("Регл", Выражение) Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаРегл", Выражение, "Сумма");
	Иначе
		ВыражениеСуммы = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("Сумма").Выражение;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаРегл", ВыражениеСуммы, "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаРегл");
	
КонецПроцедуры

Функция ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило)
	
	ТаблицаПериодов = Параметры.ТаблицаПериодов;
	
	ТаблицаПериодовПоДатамУстановки = Новый ТаблицаЗначений;
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("Период");
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("ПериодУстановки");
	
	Если Не Правило.ПоПериодам Тогда
		Если Правило.УстанавливатьЗначениеНаКаждыйПериод Тогда
			Периодичность = Правило.Периодичность;
		Иначе
			Периодичность = Перечисления.Периодичность.День;
		КонецЕсли;
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
			ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
			Пока ПериодУстановки < СтрокаТаблицыПериодов.ДатаОкончания Цикл
				НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
				НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
				НоваяСтрока.ПериодУстановки = ПериодУстановки;
				ПериодУстановки = БюджетированиеКлиентСервер.ДобавитьИнтервал(ПериодУстановки, Правило.Периодичность, 1);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
			НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
			НоваяСтрока.ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
		КонецЦикла;
	КонецЕсли;
	
	НаборТаблицаПериодовПоДатамУстановки = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодовПоДатамУстановки");
	НаборТаблицаПериодовПоДатамУстановки.ИмяОбъекта = "ТаблицаПериодовПоДатамУстановки";
	
	Для каждого Колонка Из ТаблицаПериодовПоДатамУстановки.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаПериодовПоДатамУстановки.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
	КонецЦикла;
	
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ТаблицаПериодовПоДатамУстановки";
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		Связь.ВыражениеИсточник = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&НАЧАЛОПЕРИОДА", "ПЕРИОДУСТАНОВКИ");
	Иначе
		Связь.ВыражениеИсточник = "ПериодУстановки";
	КонецЕсли;
	Связь.НаборДанныхПриемник = СхемаКомпоновкиДанных.НаборыДанных[0].Имя;
	Связь.ВыражениеПриемник = "Период";
	Связь.Параметр = "Период";
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодовПоДатамУстановки", ТаблицаПериодовПоДатамУстановки);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Функция ПреобразоватьВВыражениеСКД(ВыражениеЯзыкаЗапросов) Экспорт
	
	ВыражениеСКД = ВРег(ВыражениеЯзыкаЗапросов); 
	
	Периоды = Новый Структура;
	Периоды.Вставить("ДЕНЬ",      """ДЕНЬ""");
	Периоды.Вставить("НЕДЕЛЯ",    """НЕДЕЛЯ""");
	Периоды.Вставить("ДЕКАДА",    """ДЕКАДА""");
	Периоды.Вставить("МЕСЯЦ",     """МЕСЯЦ""");
	Периоды.Вставить("КВАРТАЛ",   """КВАРТАЛ""");
	Периоды.Вставить("ПОЛУГОДИЕ", """ПОЛУГОДИЕ""");
	Периоды.Вставить("ГОД",       """ГОД""");
	
	Для каждого Период Из Периоды Цикл
		ВыражениеСКД = СтрЗаменить(ВыражениеСКД, Период.Ключ, Период.Значение);
	КонецЦикла;
	
	Возврат ВыражениеСКД;
	
КонецФункции

Функция ЗначениеНастройкиСКД(КомпоновщикНастроек, ИмяНастройки) Экспорт
	
	Для Каждого ПользовательскаяНастройка из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.Параметр) = "Период" Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ПользовательскаяНастройка из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.Параметр) = "Период" Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

Функция УстановитьНаиболееПодходящиеПоляЗаполненияСуммы(ИсточникиСуммы, СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ПолеЗаполненияСуммыУстановлено = Ложь;
	
	Выражение = Неопределено;
	ВозвращатьСуммуВВалюте = Параметры.ВозвращатьСуммуВВалюте;
	
	НуженПересчет = Истина;
	
	Если ИсточникиСуммы.Свойство("Валюта") Тогда
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		ПолеНабораДанныхВалюта = ПоляНабораДанных.Найти("Валюта");
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ТипЗначеничВалюты = Тип("СправочникСсылка.Валюты");
			Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
				Если ПолеНабораДанных.ТипЗначения.СодержитТип(ТипЗначеничВалюты) Тогда
					ПолеНабораДанныхВалюта = ПолеНабораДанных;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не определена валюта для получения валютной суммы.'");
		Иначе
			ПутьКДаннымВалюта = ПолеНабораДанныхВалюта.ПутьКДанным;
		КонецЕсли;
	КонецЕсли;
	
	// Подберем наиболее подходящее поле заполнения суммы
	Если ИсточникиСуммы.Свойство("Валюта", Выражение) 
		И (Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных"
			ИЛИ Правило.ЗаполнениеВалюты = "ОпределяетсяПоАналитике") Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаУпр 
		И ИсточникиСуммы.Свойство("Упр", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаУпр, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		НуженПересчет = Ложь;
		
	//++ НЕ УТКА
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаМеждународ 
		И ИсточникиСуммы.Свойство("Международ", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаМеждународ, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		НуженПересчет = Ложь;
		
	//-- НЕ УТКА
	ИначеЕсли Параметры.ВалютаОтчета = Параметры.ВалютаРегл
		И ИсточникиСуммы.Свойство("Регл", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Параметры.ВалютаРегл, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		НуженПересчет = Ложь;
		
	ИначеЕсли ИсточникиСуммы.Свойство("Валюта", Выражение) Тогда
		
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, ПутьКДаннымВалюта, ВозвращатьСуммуВВалюте);
		ПолеЗаполненияСуммыУстановлено = Истина;
		
	КонецЕсли;
	
	// Если не удалось подобрать наиболее подходящее поле - заполним из первого
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		Для каждого ИсточникСуммы Из ИсточникиСуммы Цикл
			Выражение = ИсточникСуммы.Значение;
			Если ИсточникСуммы.Ключ = "Регл" Тогда
				Валюта = Параметры.ВалютаРегл;
			ИначеЕсли ИсточникСуммы.Ключ = "Упр" Тогда
				Валюта = Параметры.ВалютаУпр;
			//++ НЕ УТКА
			ИначеЕсли ИсточникСуммы.Ключ = "Международ" Тогда
				Валюта = Параметры.ВалютаМеждународ;
			//-- НЕ УТКА
			КонецЕсли;
			
			ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, Выражение, Валюта, ВозвращатьСуммуВВалюте);
			ПолеЗаполненияСуммыУстановлено = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПолеЗаполненияСуммыУстановлено Тогда
		ДобавитьПоляСуммы(СхемаКомпоновкиДанных, Настройки, "NULL", Параметры.ВалютаОтчета, ВозвращатьСуммуВВалюте);
	КонецЕсли;
	
	Возврат НуженПересчет;
	
КонецФункции

#КонецОбласти

#Область ХранимыеМакетыБюджета

Функция ФайлыСохранногоМакета(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка,
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла
		|ИЗ
		|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета КАК ТипыСлужебныхФайловЭкземпляраБюджета
		|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла = ТипыСлужебныхФайловЭкземпляраБюджета.Ссылка
		|ГДЕ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭкземплярБюджетаПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Бюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет Тогда
			Результат.Вставить("ХранимыйБюджет", ВыборкаДетальныеЗаписи.Ссылка);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные Тогда
			Результат.Вставить("ВспомогательныеДанные", ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВосстановитьХранимыйМакет(СсылкаНаБюджет, ВидБюджета, ВерсияВидаБюджета) Экспорт
	
	Файлы = БюджетированиеСервер.ФайлыСохранногоМакета(СсылкаНаБюджет);
	Если Не Файлы.Свойство("ХранимыйБюджет")
		Или Не Файлы.Свойство("ВспомогательныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВспомогательныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Файлы.ВспомогательныеДанные);
	ИмяФайла = ПолучитьИмяВременногоФайла("dat");
	ВспомогательныеДанные.Записать(ИмяФайла);
	ВспомогательныеДанные = ЗначениеИзФайла(ИмяФайла);
	
	Если ТипЗнч(ВспомогательныеДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ВспомогательныеДанные.Свойство("ВидБюджета")
		ИЛИ Не ВспомогательныеДанные.Свойство("ВерсияВидаБюджета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВспомогательныеДанные.ВидБюджета <> ВидБюджета
		ИЛИ ВспомогательныеДанные.ВерсияВидаБюджета <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "ВерсияДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранимыйБюджет = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Файлы.ХранимыйБюджет);
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ХранимыйБюджет.Записать(ИмяФайла);
	ХранимыйБюджет = Новый ТабличныйДокумент;
	ХранимыйБюджет.Прочитать(ИмяФайла);
	
	РезультатВосстановления = ВспомогательныеДанные;
	РезультатВосстановления.Вставить("Результат", ХранимыйБюджет);
	
	ПараметрыВывода = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
							ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	ПараметрыВывода.Вставить("ИндексыТаблицыДанныхЯчеек", Новый Соответствие);
	РезультатВосстановления.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВывода);
	
	Возврат РезультатВосстановления;
	
КонецФункции

#КонецОбласти

#Область ПроведениеЭкземпляровБюджета

Функция ЗаполнитьКэшПараметровСтатей(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	ТаблицаСтатейИПоказателей = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(,"СтатьяБюджетов");
	ТаблицаСтатейИПоказателей.Свернуть("СтатьяБюджетов");
	
	СтатьиИЦелевыеПоказатели = ТаблицаСтатейИПоказателей.ВыгрузитьКолонку("СтатьяБюджетов");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Справочники.СтатьиБюджетов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Неопределено);
	
	СоответствиеСтатейПоказателей = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка,
	|	СтатьиБюджетов.ВидАналитики1,
	|	СтатьиБюджетов.ВидАналитики2,
	|	СтатьиБюджетов.ВидАналитики3,
	|	СтатьиБюджетов.ВидАналитики4,
	|	СтатьиБюджетов.ВидАналитики5,
	|	СтатьиБюджетов.ВидАналитики6,
	|	СтатьиБюджетов.ВидАналитики1.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики2.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики3.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики4.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики5.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики6.ТипЗначения,
	|	СтатьиБюджетов.ВидАналитики1.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики2.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики3.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики4.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики5.ЗаполнениеВалюты,
	|	СтатьиБюджетов.ВидАналитики6.ЗаполнениеВалюты,
	|	СтатьиБюджетов.УчитыватьПоВалюте,
	|	СтатьиБюджетов.ВалютаОпределяетсяАналитикой,
	|	СтатьиБюджетов.АдресАналитикиВалюта,
	|	СтатьиБюджетов.КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка,
	|	ПоказателиБюджетов.ВидАналитики1,
	|	ПоказателиБюджетов.ВидАналитики2,
	|	ПоказателиБюджетов.ВидАналитики3,
	|	ПоказателиБюджетов.ВидАналитики4,
	|	ПоказателиБюджетов.ВидАналитики5,
	|	ПоказателиБюджетов.ВидАналитики6,
	|	ПоказателиБюджетов.ВидАналитики1.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики2.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики3.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики4.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики5.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики6.ТипЗначения,
	|	ПоказателиБюджетов.ВидАналитики1.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики2.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики3.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики4.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики5.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.ВидАналитики6.ЗаполнениеВалюты,
	|	ПоказателиБюджетов.УчитыватьПоВалюте,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|ГДЕ
	|	ПоказателиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|";
	
	Запрос.УстановитьПараметр("СтатьиИЦелевыеПоказатели", СтатьиИЦелевыеПоказатели);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтатьяПоказательБюджетов из СтатьиИЦелевыеПоказатели Цикл
		
		РеквизитыСтатьи = Новый Структура;
		СтрокаТаблицыРеквизитов = ТаблицаРеквизитов.Найти(СтатьяПоказательБюджетов, "Ссылка");
		Для Каждого Колонка из ТаблицаРеквизитов.Колонки Цикл
			Если Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыСтатьи.Вставить(Колонка.Имя, СтрокаТаблицыРеквизитов[Колонка.Имя]);
		КонецЦикла;
		
		Если РеквизитыСтатьи.УчитыватьПоВалюте Тогда
			Если РеквизитыСтатьи.ВалютаОпределяетсяАналитикой Тогда
				ВидАналитикиВалюта = "ВидАналитики" + РеквизитыСтатьи.АдресАналитикиВалюта;
				ИмяРеквизита = РеквизитыСтатьи[ВидАналитикиВалюта + "ЗаполнениеВалюты"];
				РеквизитыСтатьи.Вставить("ПутьКАналитикеВалюта", ИмяРеквизита);
				РеквизитыСтатьи.Вставить("ИмяАналитикиВалюта", ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыСтатьи[ВидАналитикиВалюта]));
				РеквизитыСтатьи.Вставить("ВидАналитикиВалюта", РеквизитыСтатьи[ВидАналитикиВалюта]);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВидовАналитик = Новый Структура;
		Для Сч = 1 по РеквизитыСтатьи.КоличествоИспользуемыхАналитик Цикл
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			СтруктураВидовАналитик.Вставить(ИмяАналитики, ВидАналитики);
		КонецЦикла;
		
		СоответствиеСтатейПоказателей.Вставить(СтатьяПоказательБюджетов, РеквизитыСтатьи);
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеСтатейПоказателей);
	
КонецФункции

Процедура ПоставитьДокументВОчередьПроведения(Документ) Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
	
	Запись = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьМенеджерЗаписи();
	Запись.Документ = Документ;
	Запись.НомерЗадания = НомерЗадания;
	Запись.Записать();
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Отложенное проведение экземпляров бюджета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов(Ссылка=Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
	Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Установить(НомерЗадания + 1);
	
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Отложенное проведение экземпляров бюджета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания КАК НомерЗадания,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета КАК ВидБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета КАК СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.ВерсияДанных КАК ВерсияДанных,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.Сценарий.Валюта КАК Валюта,
		|	ЗаданияКОтражениюЭкземпляровБюджета.ДокументПроведенОжидаетПроверки
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюЭкземпляровБюджета КАК ЗаданияКОтражениюЭкземпляровБюджета
		|ГДЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания <= &НомерЗадания
		|	И (&Ссылка = НЕОПРЕДЕЛЕНО
		|			ИЛИ ЗаданияКОтражениюЭкземпляровБюджета.Документ = &Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗадания УБЫВ";
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеОбработанныхДокументов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если СоответствиеОбработанныхДокументов[Выборка.Документ] = Истина Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Ссылка = Неопределено Тогда
			Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Выборка.Документ.УникальныйИдентификатор());
		
			Отбор = Новый Структура();
			Отбор.Вставить("Ключ", Ключ);
			Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			
			АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если АктивныеЗадания.Количество() > 0 Тогда
				Для Каждого АктивноеЗадание из АктивныеЗадания Цикл
					АктивноеЗадание.Отменить();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НужнаДополнительнаяОбработкаОбъекта = Ложь;
				
		Ссылка = Выборка.Документ;
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		ДополнительныеСвойства = Новый Структура;
		Движения = Новый Структура("ОборотыБюджетов");
		Отказ = Ложь;
		
		Движения.ОборотыБюджетов = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		Движения.ОборотыБюджетов.Отбор.Регистратор.Установить(Ссылка);
		
		ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		ДополнительныеСвойства.Вставить("ОтложенноеПроведение", Истина);
		
		// Инициализация дополнительных свойств для проведения документа
		ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
		
		// Инициализация данных документа
		Документы.ЭкземплярБюджета.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Движения по регистрам
		РегистрыНакопления.ОборотыБюджетов.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
		
		Движения.ОборотыБюджетов.Записать(Истина);
		
		СоответствиеОбработанныхДокументов.Вставить(Выборка.Документ, Истина);
		
		Если НужнаДополнительнаяОбработкаОбъекта Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
			Для Каждого Запись из НаборЗаписей Цикл
				Запись.ДокументПроведенОжидаетПроверки = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьОтложенноеПроведениеФоновымЗаданием(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется отложенное проведение экземпляров бюджета'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("БюджетированиеСервер.ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Проверяет соджержимое табличных частей экземпляра бюджета и корректирует их
//
// Параметры:
// 	ДанныеОбъекта - ДокументОбъект.ЭкземплярБюджета - проверяемый и изменяемый объект
// 	ОбъектИПараметрыРасчета - Структура - параметры бюджета, в том числе копия объекта в виде ДанныеФормыСтруктура
// 	Бюджет - ТабличныйДокумент - табличная форма бюджета, по которой производится проверка использования аналитик с помощью значений расшифровок в ячейках
// 	ДанныеРасшифровки - ДанныеРасшифровки
//
Процедура ПроверитьИсправитьТЧЭкземпляраБюджета(ДанныеОбъекта, ОбъектИПараметрыРасчета, Бюджет, ДанныеРасшифровки) Экспорт
	
	// Привести типы колонок ТЧ АналитикаСтатейБюджета в соответствие к видам аналитик вида бюджета
	Если ДанныеОбъекта.АналитикаСтатейБюджетов.Количество() > 0 Тогда
		КэшПараметровСтатей = ОбъектИПараметрыРасчета.КэшПараметровСтатей;
					
		АналитикаСтатейБюджетов = ДанныеОбъекта.АналитикаСтатейБюджетов;
		Для Каждого СтрокаАналитикиСтатьейБюджетов Из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
			ПараметрыСтатьи = КэшПараметровСтатей.Получить(СтрокаАналитикиСтатьейБюджетов.СтатьяБюджетов);
			Если ПараметрыСтатьи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Сч = 1 По 6 Цикл
				// Если тип аналитики не используется в видах аналитик, то значение очистится
				// Например, в ситуации когда изменили состав аналитики вида бюджета
				ВидАналитики = ПараметрыСтатьи["ВидАналитики" + Сч];
				Если ЗначениеЗаполнено(ВидАналитики) Тогда
					Значение = ВидАналитики.ТипЗначения.ПривестиЗначение(СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч]);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
				СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч] = Значение;	
			КонецЦикла;
		КонецЦикла;
		
		ЗначениеВДанныеФормы(ДанныеОбъекта, ОбъектИПараметрыРасчета.Объект);
	КонецЕсли;
	
	// Привести ТЧ в соответствие табличному документу
	СоответствиеНайденныхИД = Новый Соответствие;
	Для КоординатаХ = 1 по Бюджет.ШиринаТаблицы Цикл
		Для КоординатаУ = 1 по Бюджет.ВысотаТаблицы Цикл
			Расшифровка = Бюджет.Область(КоординатаУ, КоординатаХ).Расшифровка;
			Расшифровка = ДанныеРасшифровки[Расшифровка];
			Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
				Расшифровка = БюджетнаяОтчетностьКлиентСервер.ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, Истина);
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСтроки = БюджетнаяОтчетностьКлиентСервер.ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, Расшифровка, Ложь);
				Если ИдентификаторСтроки <> Неопределено Тогда
					МассивПериодов = СоответствиеНайденныхИД[ИдентификаторСтроки];
					Если МассивПериодов = Неопределено Тогда
						МассивПериодов = Новый Массив;
						СоответствиеНайденныхИД.Вставить(ИдентификаторСтроки, МассивПериодов);
					КонецЕсли;
					МассивПериодов.Добавить(Расшифровка.ПериодПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаСтатейБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.АналитикаЗначений Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаЗначений", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.ОборотыПоСтатьямБюджетов Цикл
		МассивПериодов = СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки];
		Если МассивПериодов = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
			Продолжить;
		КонецЕсли;
		Если МассивПериодов.Найти(СтрокаТаблицы.ПериодПланирования) = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТаблицаИСтрока из МассивНаУдаление Цикл
		ДанныеОбъекта[ТаблицаИСтрока.Таблица].Удалить(ТаблицаИСтрока.Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьХранимыйМакет(МакетДляХранения, ВспомогательныеДанные, СсылкаНаБюджет) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	МакетДляХранения.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	ХранилищеМакета = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	
	ИмяФайла = ПолучитьИмяВременногоФайла("dat");
	ЗначениеВФайл(ИмяФайла, ВспомогательныеДанные);
	ХранилищеВспомогательныхДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	
	СохраненныеФайлы = ФайлыСохранногоМакета(СсылкаНаБюджет);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаБюджет);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);

	Файл = Неопределено;
	Если СохраненныеФайлы.Свойство("ХранимыйБюджет", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеМакета);
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Бюджет'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "mxl");
		Файл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ХранилищеМакета, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	Если СохраненныеФайлы.Свойство("ВспомогательныеДанные", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеВспомогательныхДанных);
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Вспомогательные данные бюджета'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "dat");
		Файл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ХранилищеВспомогательныхДанных, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные;
		ФайлОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Функция РассчитатьФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	КолонкиТаблицыДанныхВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ПараметрыДанных.ВидБюджета);
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичности = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, КолонкиТаблицыДанныхВидаБюджета.Периодичности);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЗначениеЗаполнено(ИсточникДанных.ПериодичностьСмещения)
		   И ЗначениеЗаполнено(ИсточникДанных.ПериодСмещения) Тогда
			Периодичности.Добавить(ИсточникДанных.ПериодичностьСмещения);
		КонецЕсли;
	КонецЦикла;
	Периодичности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Периодичности);
	Периодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ВидыАналитик = КолонкиТаблицыДанныхВидаБюджета.ВидыАналитик;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных);
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ТаблицаДанныхПоВидуБюджета = ТаблицаДанныхПоВидуБюджета(Параметры);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		
		Если Не ИсточникДанных.ЕстьОнЛайновыеПравила Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные 
										Или ИсточникДанных.ПредполагаетИсполнениеБюджета 
										Или СценарийОтчетаФактическиеДанные
										Или СценарийОтчетаИсполнениеБюджета;
										
			Если Не ИсточникДанных.ПривилегированныйРасчет = Неопределено И ИсточникДанных.ПривилегированныйРасчет Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
			
			Если ИсточникДанных.ТипИсточника = "Обороты" И ПолучатьФактическиеДанные Тогда
				ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
				Если ИсточникДанных.ЕстьЦелевыеПоказатели = Истина Тогда
					ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
				КонецЕсли;
			ИначеЕсли ИсточникДанных.ТипИсточника = "Остатки" И ПолучатьФактическиеДанные Тогда
				ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			ИначеЕсли ИсточникДанных.ТипИсточника = "Нефинансовый" Тогда
				ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			КонецЕсли;
			
			Если Не ИсточникДанных.ПривилегированныйРасчет = Неопределено И ИсточникДанных.ПривилегированныйРасчет Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИсточникДанных.ПривилегированныйРасчет = Неопределено И ИсточникДанных.ПривилегированныйРасчет Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	Если Не ИсточникДанных.ПривилегированныйРасчет = Неопределено И ИсточникДанных.ПривилегированныйРасчет Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	КолонкаВидаБюджета = ТаблицаДанныхПоВидуБюджета.Колонки.Найти("СуммаВВалютеНачальныйОстаток");
	Если КолонкаВидаБюджета <> Неопределено Тогда
		КолонкаВидаБюджета.Имя = "СуммаВалНачальныйОстаток";
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

#КонецОбласти

#КонецОбласти