
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ИнициализацияВнешнейОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	ИнформацияОВнешнейОбработке = НСтр("ru = 'Подключаемая обработка ""Клиент-банк. Загрузка / выгрузка платежных документов""'");
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Наименование = ИнформацияОВнешнейОбработке;
	ПараметрыРегистрации.Информация = ИнформацияОВнешнейОбработке;
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима();
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	Возврат ПараметрыРегистрации;
КонецФункции

Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ПрограммныйИнтерфейс

Функция ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк() Экспорт
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", "ФоноваяВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк");
	Если ЗначениеЗаполнено(ДопОбработкаСсылка) И ДопОбработкаСсылка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		Возврат ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ДопОбработкаСсылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокПоддерживаемыхПрограммКлиентБанка(ЭтоОбработка = Ложь) Экспорт
	Если Не ЭтоОбработка Тогда
		ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк();
		Если Не ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = Неопределено Тогда
			СписокПрограмм = ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк.ПолучитьСписокПоддерживаемыхПрограммКлиентБанка(Истина);
			Возврат СписокПрограмм;
		КонецЕсли;
	КонецЕсли;
	
	СписокПрограмм = Новый СписокЗначений;
	СписокПрограмм.Добавить("АЛЬФАБАНК", "АЛЬФАБАНК");
	СписокПрограмм.Добавить("БЕЛГАЗПРОМБАНК", "БЕЛГАЗПРОМБАНК");
	СписокПрограмм.Добавить("АБСОЛЮТБАНК", "АБСОЛЮТБАНК");
	СписокПрограмм.Добавить("ИДЕЯБАНК", "ИДЕЯБАНК");
	СписокПрограмм.Добавить("БЕЛВНЕШЭКОНОМБАНК", "БЕЛВНЕШЭКОНОМБАНК");
	СписокПрограмм.Добавить("БЕЛИНВЕСТБАНК", "БЕЛИНВЕСТБАНК");
	СписокПрограмм.Добавить("МОСКВА-МИНСК", "МОСКВА-МИНСК");
	СписокПрограмм.Добавить("БТАБАНК", "БТАБАНК");
	СписокПрограмм.Добавить("БСББАНК", "БСББАНК");
	
	// Для выгрузки
	СписокПрограмм.Добавить("ПРИОРБАНК", "ПРИОРБАНК");
	СписокПрограмм.Добавить("БЕЛАРУСБАНК", "БЕЛАРУСБАНК");
	СписокПрограмм.Добавить("БЕЛПРОМСТРОЙБАНК", "БЕЛПРОМСТРОЙБАНК");
	СписокПрограмм.Добавить("БЕЛАГРОПРОМБАНК", "БЕЛАГРОПРОМБАНК");
	СписокПрограмм.Добавить("ВТББАНК", "ВТББАНК");
	СписокПрограмм.Добавить("БЕЛСВИССБАНК", "БЕЛСВИССБАНК");
	СписокПрограмм.Добавить("БПСБАНК", "БПСБАНК");
	СписокПрограмм.Добавить("МТБАНК", "МТБАНК");
	СписокПрограмм.Добавить("ФРАНСАБАНК", "ФРАНСАБАНК");
	
	Возврат СписокПрограмм;
КонецФункции

// Возвращает данные файла выписки
//
// Параметры
// СтрокиВыписки - Массив - Массив строк файла выписки
// ЧитатьДокументы - Булево - Признак чтения всей выписки, включая документы
//
// Возвращаемое значение
// Структура - Данные выписки
//
Функция РазобратьФайлВыписки(СтрокиВыписки, ЧитатьДокументы = Истина, ПараметрыЗагрузки, ЭтоОбработка = Ложь) Экспорт
	Если Не ЭтоОбработка Тогда
		ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк();
		Если Не ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = Неопределено Тогда
			Результат = ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк.РазобратьФайлВыписки(СтрокиВыписки, ЧитатьДокументы, ПараметрыЗагрузки, Истина);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиВыписки) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрограммаБанк = ПараметрыЗагрузки.РасчетныйСчет.Программа;
	Если ПустаяСтрока(ПрограммаБанк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("ПрограммаБанк", ПрограммаБанк);
	
	ЗапросБС = Новый Запрос;
	ЗапросБС.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.НомерСчета
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Программа <> """"";
	ЗагружаемыеБанковскиеСчетаОрганизаций = ЗапросБС.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерСчета");
	ПараметрыЗагрузки.Вставить("ЗагружаемыеБанковскиеСчетаОрганизаций", ЗагружаемыеБанковскиеСчетаОрганизаций);
	
	Если ИдентификаторПрограммы(ПараметрыЗагрузки) = "MAILBANK" Тогда
		Если ПараметрыЗагрузки.РасчетныйСчет.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			ПараметрыЗагрузки.Вставить("ВалютныйСчет", Ложь);
		Иначе
			ПараметрыЗагрузки.Вставить("ВалютныйСчет", Истина);
		КонецЕсли;
		ПараметрыЗагрузки.Вставить("ЧисловыеИдентификаторыОбмена", ЧисловыеИдентификаторыОбмена());
		ПараметрыЗагрузки.Вставить("Организация", ПараметрыЗагрузки.РасчетныйСчет.Владелец);
		
		Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
		ЗаголовокВыписки = Новый Структура("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца");
		СписокСчетовВыписки = Новый Массив;
		РасчетныеСчетаВыписки = Новый Массив;
		ДокументыВыписки = Новый Массив;
		ОшибкиРазбора = Новый Массив;
		ДанныеРасчетногоСчета = Неопределено;
		
		ИдентификаторыФайлаОбмена = ПолучитьСоответствиеРеквизитовДокументаИВнутреннихТеговВыписки(ПараметрыЗагрузки);
		ПравилаЧтенияВыпискиБанка = ПравилаЧтенияВыписки(ПараметрыЗагрузки);
		КоличествоСтрок = СтрокиВыписки.Количество();
		ТекущаяСтрока = 1;
		
		Пока ТекущаяСтрока <= КоличествоСтрок Цикл
			Если ДанныеРасчетногоСчета = Неопределено Тогда
				ДанныеРасчетногоСчета = ЗагрузитьСекциюРасчетногоСчета(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, ПравилаЧтенияВыпискиБанка, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки, ЗаголовокВыписки); // ТекущаяСтрока++
				Продолжить;
			КонецЕсли;
			
			СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки); // ТекущаяСтрока++
			
			Значение = "";
			Тег = "";
			
			Если Не РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧитатьДокументы И Не ПравилаЧтенияВыпискиБанка.СекцияДокументНачало.Найти(Тег) = Неопределено Тогда
				ТекущаяСтрока = ТекущаяСтрока - 1;
				ДокументыВыписки = ЗагрузитьБанковскиеОперации(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, ПравилаЧтенияВыпискиБанка, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки); // ТекущаяСтрока++
				ЧитатьДокументы = Ложь;
			КонецЕсли;
			
			СписокКлючей = ПолучитьПараметрОбмена(ИдентификаторыФайлаОбмена, Тег);
			Для каждого ПараметрОбмена Из СписокКлючей Цикл
				Если ПустаяСтрока(ПараметрОбмена) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПараметрыЗагрузки.ЧисловыеИдентификаторыОбмена.Найти(ПараметрОбмена) = Неопределено Тогда
					ЗагрузитьСтрокуЗаголовка(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, СтрокаРазбора, ТекущаяСтрока, ЗаголовокВыписки);
				Иначе
					ДанныеРасчетногоСчета[ПараметрОбмена] = Строка(ПреобразоватьВЧисло(Значение, ПараметрыЗагрузки));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьКонечныйОстаток(ДанныеРасчетногоСчета, ПараметрыЗагрузки);
		
		РасчетныеСчетаВыписки.Добавить(ДанныеРасчетногоСчета);
		СписокСчетовВыписки.Добавить(ДанныеРасчетногоСчета.РасчСчет);
		
		Если ПустаяСтрока(ЗаголовокВыписки["Отправитель"]) Тогда
			ЗаголовокВыписки["Отправитель"] = ПрограммаБанк;
		КонецЕсли;
		
		Результат.Заголовок = ЗаголовокВыписки;
		Результат.СписокСчетов = СписокСчетовВыписки;
		Результат.РасчетныеСчета = РасчетныеСчетаВыписки;
		Результат.ОшибкиРазбора = ОшибкиРазбора;
		Результат.ДокументыВыписки = ДокументыВыписки;
		
		Возврат Результат;
	ИначеЕсли ИдентификаторПрограммы(ПараметрыЗагрузки) = "БТАБАНК_XML" Тогда
		Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
		РасчетныеСчетаВыпискиСтрока = Новый Структура("ВсегоПоступило, ВсегоСписано, ДатаКонца, ДатаНачала, КонечныйОстаток, НачальныйОстаток, РасчСчет");
		ЗаголовокВыписки = Новый Структура("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца");
		
		СписокСчетовВыписки = Новый Массив;
		РасчетныеСчетаВыписки = Новый Массив;
		ДокументыВыписки = Новый Массив;
		ОшибкиРазбора = Новый Массив;
		
		ЧтениеXML = Новый ЧтениеXML;
		
		ПутьНаСервере = ПолучитьИмяВременногоФайла("xml");
		ФайлВыписки = Новый ТекстовыйДокумент;
		Для каждого Стр Из СтрокиВыписки Цикл
			ФайлВыписки.ДобавитьСтроку(Стр);
		КонецЦикла;
		//Если ПараметрыЗагрузки.РасчетныйСчет.Кодировка = "Windows" Тогда
		ФайлВыписки.Записать(ПутьНаСервере, КодировкаТекста.UTF8);
		//Иначе
		//	ФайлВыписки.Записать(ПутьНаСервере, КодировкаТекста.UTF8);
		//КонецЕсли;
		
		ЧтениеXML.ОткрытьФайл(ПутьНаСервере);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		КоличествоОшибок = Число(ОбъектXDTO.StatementAnswer.ErrorCode);
		Если КоличествоОшибок = 0 Тогда
			СписокСчетовВыписки.Добавить(ОбъектXDTO.StatementAnswer.StatementBy.Account);
			
			ВсегоСписано = 0;
			СписанияДенежныхСредств = ОбъектXDTO.StatementAnswer.StatementBy.DebetDocuments;
			Для каждого Стр Из СписанияДенежныхСредств.DebetDocumentsRow Цикл
				ВсегоСписано = ВсегоСписано + Число(Стр.Amount);
			КонецЦикла;
			
			ВсегоПоступило = 0;
			ПоступленияДенежныхСредств = ОбъектXDTO.StatementAnswer.StatementBy.CreditDocuments;
			Для каждого Стр Из ПоступленияДенежныхСредств.CreditDocumentsRow Цикл
				ВсегоПоступило = ВсегоПоступило + Число(Стр.Amount);
			КонецЦикла;
			
			РасчетныеСчетаВыпискиСтрока.Вставить("РасчСчет", ОбъектXDTO.StatementAnswer.StatementBy.Account);
			РасчетныеСчетаВыпискиСтрока.Вставить("ДатаНачала", ПолучитьДатуИзСтрокиБТАБАНК(ОбъектXDTO.StatementAnswer.StatementBy.OpeningBalanceDate));
			РасчетныеСчетаВыпискиСтрока.Вставить("ДатаКонца", ПолучитьДатуИзСтрокиБТАБАНК(ОбъектXDTO.StatementAnswer.StatementBy.ClosingBalanceDate));
			РасчетныеСчетаВыпискиСтрока.Вставить("НачальныйОстаток", Число(ОбъектXDTO.StatementAnswer.StatementBy.OpeningBalance));
			РасчетныеСчетаВыпискиСтрока.Вставить("КонечныйОстаток", Число(ОбъектXDTO.StatementAnswer.StatementBy.ClosingBalance));
			РасчетныеСчетаВыпискиСтрока.Вставить("ВсегоПоступило", ВсегоПоступило);
			РасчетныеСчетаВыпискиСтрока.Вставить("ВсегоСписано", ВсегоСписано);
			РасчетныеСчетаВыписки.Добавить(РасчетныеСчетаВыпискиСтрока);
			
			ЗаголовокВыписки.Вставить("ДатаНачала", ПолучитьДатуИзСтрокиБТАБАНК(ОбъектXDTO.StatementAnswer.StatementBy.OpeningBalanceDate));
			ЗаголовокВыписки.Вставить("ДатаКонца", ПолучитьДатуИзСтрокиБТАБАНК(ОбъектXDTO.StatementAnswer.StatementBy.ClosingBalanceDate));
			ЗаголовокВыписки.Вставить("ДатаСоздания", ПолучитьДатуИзСтрокиБТАБАНК(ОбъектXDTO.StatementAnswer.StatementBy.StatementDateTime));
			ЗаголовокВыписки.Вставить("Отправитель", ВРег(ПараметрыЗагрузки.РасчетныйСчет.НаименованиеБанка));
			ЗаголовокВыписки.Вставить("Получатель", "");
			
			Если ЧитатьДокументы Тогда
				Для каждого Стр Из СписанияДенежныхСредств.DebetDocumentsRow Цикл
					ЗначСтрока = ТегиСтрокиДокумента();
					ЗначСтрока.Дата = ПолучитьДатуИзСтрокиБТАБАНК(Стр.DocumentDate);
					ЗначСтрока.ДатаПроведения = ПолучитьДатуИзСтрокиБТАБАНК(Стр.AcceptDate, Истина);
					ЗначСтрока.Исходящий = Истина;
					ЗначСтрока.НазначениеПлатежа = Стр.Ground;
					ЗначСтрока.Номер = Стр.DocumentNumber;
					ЗначСтрока.Плательщик = Стр.Payer;
					ЗначСтрока.ПлательщикСчет = Стр.PayerAccount;
					ЗначСтрока.Получатель = Стр.Beneficiar;
					ЗначСтрока.ПолучательБИК = Стр.BeneficiarBankBIC;
					ЗначСтрока.ПолучательИНН = Стр.BeneficiarUNP;
					ЗначСтрока.ПолучательСчет = Стр.BeneficiarAccount;
					ЗначСтрока.Сумма = Число(Стр.Amount);
					ДокументыВыписки.Добавить(ЗначСтрока);
				КонецЦикла;
				
				Для каждого Стр Из ПоступленияДенежныхСредств.CreditDocumentsRow Цикл
					ЗначСтрока = ТегиСтрокиДокумента();
					ЗначСтрока.Дата = ПолучитьДатуИзСтрокиБТАБАНК(Стр.DocumentDate);
					ЗначСтрока.ДатаПроведения = ПолучитьДатуИзСтрокиБТАБАНК(Стр.AcceptDate, Истина);
					ЗначСтрока.Исходящий = Ложь;
					ЗначСтрока.НазначениеПлатежа = Стр.Ground;
					ЗначСтрока.Номер = Стр.DocumentNumber;
					ЗначСтрока.Плательщик = Стр.Payer;
					ЗначСтрока.ПлательщикСчет = Стр.PayerAccount;
					ЗначСтрока.ПлательщикИНН = Стр.PayerUNP;
					ЗначСтрока.Получатель = Стр.Beneficiar;
					ЗначСтрока.ПолучательБИК = Стр.BeneficiarBankBIC;
					ЗначСтрока.ПолучательИНН = Стр.BeneficiarUNP;
					ЗначСтрока.ПолучательСчет = Стр.BeneficiarAccount;
					ЗначСтрока.Сумма = Число(Стр.Amount);
					ДокументыВыписки.Добавить(ЗначСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ПутьНаСервере);
		
		Результат.Заголовок = ЗаголовокВыписки;
		Результат.СписокСчетов = СписокСчетовВыписки;
		Результат.РасчетныеСчета = РасчетныеСчетаВыписки;
		Результат.ОшибкиРазбора = ОшибкиРазбора;
		Результат.ДокументыВыписки = ДокументыВыписки;
		
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Выгружает платежи в файл
//
// Параметры
// ПараметрыВыгрузки - Структура - Параметры выгрузки платежей
// АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, куда будут помещены данные выгрузки
//
Процедура Выгрузить(ПараметрыВыгрузки, АдресХранилища, ЭтоОбработка = Ложь) Экспорт
	Если Не ЭтоОбработка Тогда
		ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк();
		Если Не ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк = Неопределено Тогда
			ВнешняяОбработкаДополнительныйМодульЗагрузкаВыгрузкаКлиентБанк.Выгрузить(ПараметрыВыгрузки, АдресХранилища, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	КоличествоДокументов = ТаблицаДокументов.Количество();
	Если КоличествоДокументов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") И ТипЗнч(БанковскиеСчетаВыгрузки.Колонки.Найти("Ссылка")) = Тип("КолонкаТаблицыЗначений") И БанковскиеСчетаВыгрузки.Количество() > 0 Тогда
		ПараметрыВыгрузки.Вставить("РасчетныйСчет", БанковскиеСчетаВыгрузки[0].Ссылка);
	ИначеЕсли ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		ПараметрыВыгрузки.Вставить("РасчетныйСчет", БанковскиеСчетаВыгрузки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ПараметрыВыгрузки.РасчетныйСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") И ЗначениеЗаполнено(ПараметрыВыгрузки.РасчетныйСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ПрограммаБанк = ПараметрыВыгрузки.РасчетныйСчет.Программа;
	ПараметрыВыгрузки.Вставить("ПрограммаБанк", ПрограммаБанк);
	Если ПустаяСтрока(ПрограммаБанк) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("КонстантаВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Если ПараметрыВыгрузки.РасчетныйСчет.ВалютаДенежныхСредств = ПараметрыВыгрузки.КонстантаВалютаРегламентированногоУчета Тогда
		ПараметрыВыгрузки.Вставить("ВалютныйСчет", Ложь);
	Иначе
		ПараметрыВыгрузки.Вставить("ВалютныйСчет", Истина);
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов - 1].Дата;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент;
	
	Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
		Для каждого Колонка Из ТаблицаДокументов.Колонки Цикл
			Если Колонка.Имя = "Номер" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСекции[Колонка.Имя] = ПараметрЗнач(СтрокаСекции[Колонка.Имя]);
		КонецЦикла;
	КонецЦикла;
	
	Если ПараметрыВыгрузки.ПрограммаБанк = "МТБАНК" И ВРег(Прав(ПараметрыВыгрузки.НастройкаОбмена, 3)) = "XML" Тогда
		ПутьИмяФайлаСообщения = КаталогВременныхФайлов() + "\MTBANK_IMPORT_" + ТекущаяДатаСеанса() + ".XML";
		
		ЗаписьXML = СоздатьXMLЗаписьДляОбменаДанными(ПутьИмяФайлаСообщения, ПараметрыВыгрузки.Кодировка);
		Если Не ЗаписьXML = Неопределено Тогда
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Documents");
			
			Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
				Если Не ПараметрыВыгрузки.ВалютныйСчет Тогда
					// PAYDOCBY – платежные поручения в белорусских рублях
					ЗаписьXML.ЗаписатьНачалоЭлемента("PAYDOCBY");
					
					// NOM_PL – номер документа
					ЗаписьXML.ЗаписатьНачалоЭлемента("NOM_PL");
					ЗаписьXML.ЗаписатьТекст(ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// DAT_PL – дата документа (формат даты YYMMDD)
					ЗаписьXML.ЗаписатьНачалоЭлемента("DAT_PL");
					ЗаписьXML.ЗаписатьТекст(Формат(СтрокаСекции.Дата, "ДФ=yyMMdd"));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// STATUS – cимвол, определяющий срочность платежного поручения, может принимать значения: 1 – обычный, 2 – срочный
					ЗаписьXML.ЗаписатьНачалоЭлемента("STATUS");
					ЗаписьXML.ЗаписатьТекст(?(СтрокаСекции.ВидПлатежа = "СРОЧНО", "2", "1"));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// K_VAL - код валюты перевода (933 – белорусские рубли)
					ЗаписьXML.ЗаписатьНачалоЭлемента("K_VAL");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.ВалютаКод);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// SUM_C – сумма
					ЗаписьXML.ЗаписатьНачалоЭлемента("SUM_C");
					ЗаписьXML.ЗаписатьТекст(Формат(СтрокаСекции.Сумма, "ЧЦ=25; ЧДЦ=2; ЧРД=,; ЧГ=0"));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// N_PLAT – наименование плательщика (отправителя)
					ЗаписьXML.ЗаписатьНачалоЭлемента("N_PLAT");
					ЗаписьXML.ЗаписатьТекст(Лев(СтрокаСекции.ОрганизацияНаименованиеПолное, 105));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// SH_PLAT – счет плательщика (отправителя)
					ЗаписьXML.ЗаписатьНачалоЭлемента("SH_PLAT");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.ОрганизацияРасчСчет);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// UNN_P – УНП плательщика (отправителя)
					ЗаписьXML.ЗаписатьНачалоЭлемента("UNN_P");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.ОрганизацияИНН);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// K_B_O – код банка-плательщика (отправителя), состоит из 9 символов
					ЗаписьXML.ЗаписатьНачалоЭлемента("K_B_O");
					ЗаписьXML.ЗаписатьТекст(?(ПустаяСтрока(СтрокаСекции.ОрганизацияБанкСВИФТБИК), СтрокаСекции.ОрганизацияБанкКод, СтрокаСекции.ОрганизацияБанкСВИФТБИК));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// К_B_P – код банка-получателя (бенефициара), для РБ состоит из 9 символов
					ЗаписьXML.ЗаписатьНачалоЭлемента("К_B_P");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.КонтрагентБИКБанка);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// N_BEN – наименование получателя (бенефициара)
					ЗаписьXML.ЗаписатьНачалоЭлемента("N_BEN");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.КонтрагентБанк);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// SH_BEN – счет получателя (бенефициара)
					ЗаписьXML.ЗаписатьНачалоЭлемента("SH_BEN");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.КонтрагентРасчСчет);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// UNN_B – УНП получателя (бенефициара)
					ЗаписьXML.ЗаписатьНачалоЭлемента("UNN_B");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.КонтрагентИНН);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// NAZN_P – назначение платежа
					Содержание = СтрокаСекции.Комментарий + " " + СтрокаСекции.НазначениеПлатежа;
					Содержание = УдалитьЗапрещенныеСимволы(Содержание);
					ЗаписьXML.ЗаписатьНачалоЭлемента("NAZN_P");
					ЗаписьXML.ЗаписатьТекст(Содержание);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// OCH_PL – очередность платежа
					ЗаписьXML.ЗаписатьНачалоЭлемента("OCH_PL");
					ЗаписьXML.ЗаписатьТекст(Строка(СтрокаСекции.ОчередностьПлатежа));
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// KOD_KBP – код банка-корреспондента, состоит из 9 символов
					ЗаписьXML.ЗаписатьНачалоЭлемента("KOD_KBP");
					ЗаписьXML.ЗаписатьТекст("");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// SH_KBP - счет банка-корреспондента
					ЗаписьXML.ЗаписатьНачалоЭлемента("SH_KBP");
					ЗаписьXML.ЗаписатьТекст("");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// RAS_PER - символ, указывающий, за чей счет осуществляются расходы по переводу, может принимать значения:
					// 1 – со счета перевододателя, 2 – со счета бенефициара, 3 – наши расходы за наш счет, расходы бенефициара за счет бенефициара
					ЗаписьXML.ЗаписатьНачалоЭлемента("RAS_PER");
					ЗаписьXML.ЗаписатьТекст("1");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// UNN_P3 – УНП за кого
					ЗаписьXML.ЗаписатьНачалоЭлемента("UNN_P3");
					ЗаписьXML.ЗаписатьТекст("");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// K_PL – код платежа в бюджет, состоит из 5 цифр
					ЗаписьXML.ЗаписатьНачалоЭлемента("K_PL");
					ЗаписьXML.ЗаписатьТекст("0");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// BENEFICIARBANKCOUNTRYCODE – код страны банка-бенефициара
					ЗаписьXML.ЗаписатьНачалоЭлемента("BENEFICIARBANKCOUNTRYCODE");
					ЗаписьXML.ЗаписатьТекст(СтрокаСекции.КонтрагентСтранаРегистрацииКод);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// CORRESPBANKCOUNTRYCODE – код страны банка-корреспондента
					ЗаписьXML.ЗаписатьНачалоЭлемента("CORRESPBANKCOUNTRYCODE");
					ЗаписьXML.ЗаписатьТекст("");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					// ATTACHMENT – приложение
					ЗаписьXML.ЗаписатьНачалоЭлемента("ATTACHMENT");
					ЗаписьXML.ЗаписатьТекст("");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.Закрыть();
			
			ТекстXML = Новый ТекстовыйДокумент;
			ТекстXML.Прочитать(ПутьИмяФайлаСообщения);
			ТекстДляВыгрузки = ТекстXML.ПолучитьТекст();
			
			УдалитьФайлы(ПутьИмяФайлаСообщения);
			
			ПотокВыгрузки.ДобавитьСтроку(ТекстДляВыгрузки);
		КонецЕсли;
	Иначе
		Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
			Если ИдентификаторПрограммы(ПараметрыВыгрузки) = "MAILBANK" Тогда
				ПоместитьИнформациюПоДокументу(ПотокВыгрузки, СтрокаСекции, ПараметрыВыгрузки);
			ИначеЕсли ПараметрыВыгрузки.ПрограммаБанк = "БЕЛПРОМСТРОЙБАНК" Тогда
				ПотокВыгрузки.ДобавитьСтроку("#4|PAYDOCBY"); // Служебный заголовок документа и порядковый номер документа в файле
				ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Дата, "ДФ=dd/MM/yyyy")); // Дата документа
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.НомерВходящегоДокумента); // Номер документа
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ВалютаКод); // Код валюты
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ОрганизацияРасчСчет); // Номер счета
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентРасчСчет); // Расчетный счет контрагента
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентНаим); // Наименование контрагента
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентИНН); // УНП контрагента
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентСтранаРегистрацииКод);// Код старны регистрации контрагента
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБИКБанка); // БИК банка
				ПотокВыгрузки.ДобавитьСтроку(""); // Код страны банка
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБанк); // Наименование банка клиента
				ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Сумма, "ЧРД=.; ЧГ=0")); // Сумма
				ПотокВыгрузки.ДобавитьСтроку(Лев(СтрокаСекции.НазначениеПлатежа, 140)); // Код валюты
				ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ОчередностьПлатежа); // Очередность платежа
				ПотокВыгрузки.ДобавитьСтроку("0"); // резервный код
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку(";NestedTable");
				ПотокВыгрузки.ДобавитьСтроку(";EndNestedTable");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку("");
				ПотокВыгрузки.ДобавитьСтроку(";END");
			ИначеЕсли ПараметрыВыгрузки.ПрограммаБанк = "БЕЛАРУСБАНК" Тогда
				ПотокВыгрузки.ДобавитьСтроку("12" + СтрокаСекции.НомерВходящегоДокумента); // номер
				
				//Если СтрокаСекции.НеотложныеНужды Тогда
				//	ПотокВыгрузки.ДобавитьСтроку("31В СЧЕТ НЕОТЛОЖНЫХ НУЖД"); // надпись
				//КонецЕсли;
				
				Если СтрокаСекции.ВидПлатежа = "Срочный" Тогда
					ПотокВыгрузки.ДобавитьСтроку("410"); // вид платежа (0-обычный, 1-срочный)
				Иначе
					ПотокВыгрузки.ДобавитьСтроку("411");
				КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("51" + СтрокаСекции.ВалютаКод); // код валюты перевода
				ПотокВыгрузки.ДобавитьСтроку("52" + Формат(СтрокаСекции.Сумма, "ЧЦ=19; ЧДЦ=2; ЧГ=0")); // сумма перевода
				ПотокВыгрузки.ДобавитьСтроку("61" + СтрокаСекции.ОрганизацияРасчСчет); // номер счета плат
				
				// код банка-получателя
				ПотокВыгрузки.ДобавитьСтроку("81" + ?(ПустаяСтрока(СтрокаСекции.ОрганизацияБанкСВИФТБИК), СтрокаСекции.ОрганизацияБанкКод, СтрокаСекции.ОрганизацияБанкСВИФТБИК));
				
				НаимБанкаПолучателя = СтрокаСекции.КонтрагентБанк;
				
				Если СтрДлина(НаимБанкаПолучателя) < 36 Тогда // наим. банка-получателя
					ПотокВыгрузки.ДобавитьСтроку("82" + НаимБанкаПолучателя);
				ИначеЕсли СтрДлина(НаимБанкаПолучателя) < 71 Тогда
					ПотокВыгрузки.ДобавитьСтроку("82" + Сред(НаимБанкаПолучателя, 1, 35));
					ПотокВыгрузки.ДобавитьСтроку("82" + Сред(НаимБанкаПолучателя, 36, 35));
				Иначе
					ПотокВыгрузки.ДобавитьСтроку("82" + Сред(НаимБанкаПолучателя, 1, 35));
					ПотокВыгрузки.ДобавитьСтроку("82" + Сред(НаимБанкаПолучателя, 36, 35));
					ПотокВыгрузки.ДобавитьСтроку("82" + Сред(НаимБанкаПолучателя, 71, 35));
				КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("82" + Лев(НаимБанкаПолучателя, 105));
				ПотокВыгрузки.ДобавитьСтроку("91" + СтрокаСекции.КонтрагентРасчСчет); // номер счета
				
				Если СтрокаСекции.Ссылка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
					ПотокВыгрузки.ДобавитьСтроку("92" + СтрокаСекции.ОрганизацияИНН); // учетный номер бенефициара
					НаимКонтрагента = Лев(СтрокаСекции.ОрганизацияНаименованиеПолное, 105);
				Иначе
					ПотокВыгрузки.ДобавитьСтроку("92" + СтрокаСекции.КонтрагентИНН); // учетный номер бенефициара
					НаимКонтрагента = Лев(СтрокаСекции.КонтрагентНаименованиеПолное, 105);
				КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("93" + НаимКонтрагента);
				
				Содержание = СтрокаСекции.НазначениеПлатежа;
				Если СтрДлина(Содержание) < 141 Тогда
					ПотокВыгрузки.ДобавитьСтроку("A1" + Сред(Содержание, 1, 140));
				Иначе
					ПотокВыгрузки.ДобавитьСтроку("A1" + Сред(Содержание, 1, 140));
					ПотокВыгрузки.ДобавитьСтроку("A2" + Сред(Содержание, 141, 96));
				КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("A4" + СтрокаСекции.ОчередностьПлатежа); // очередность платежа
				
				Если ЗначениеЗаполнено(СтрокаСекции.КодБК) Тогда
					ПотокВыгрузки.ДобавитьСтроку("A5" + СтрокаСекции.КодБК); // код платежа в бюджет
					ПотокВыгрузки.ДобавитьСтроку("A6"); // код платежа в бюджет (ФСЗН)???
				КонецЕсли;
				
				// Расходы по переводу
				ПотокВыгрузки.ДобавитьСтроку("B1OUR");
				//Если СтрокаСекции.РасходыПоПереводу = Перечисления.ВидыРасходовПоПереводу.Плательщик Тогда // плательщика
				//	ПотокВыгрузки.ДобавитьСтроку("B1OUR");
				//ИначеЕсли СтрокаСекции.РасходыПоПереводу = Перечисления.ВидыРасходовПоПереводу.Бенефициар Тогда // бенефициара
				//	ПотокВыгрузки.ДобавитьСтроку("B1BEN");
				//ИначеЕсли СтрокаСекции.РасходыПоПереводу = Перечисления.ВидыРасходовПоПереводу.ПлательщикБенефициар Тогда // банка
				//	ПотокВыгрузки.ДобавитьСтроку("B1SHA");
				//Иначе // без расходов
				//	ПотокВыгрузки.ДобавитьСтроку("B1NOD");
				//КонецЕсли;
				
				//Если ЗначениеЗаполнено(СтрокаСекции.СчетКомиссии) Тогда
				//	ПотокВыгрузки.ДобавитьСтроку("Z1" + ВРег(СокрЛП(СтрокаСекции.СчетКомиссии.НомерСчета))); // счет комиссии
				//	ПотокВыгрузки.ДобавитьСтроку("Z2" + ВРег(СокрЛП(СтрокаСекции.СчетКомиссии.ВалютаДенежныхСредств.Наименование))); // код валюты комиссии
				//КонецЕсли;
				
				// 0-обычное ПП. 1-конверсия валюты. 2-покупка валюты. 3-продажа валюты.
				ПотокВыгрузки.ДобавитьСтроку("Z30"); // код валюты операции
				
				ПотокВыгрузки.ДобавитьСтроку("Z4" + СтрокаСекции.ВалютаКод); // код валюты операции
				//Если ЗначениеЗаполнено(СтрокаСекции.СчетКонтрагента.Банк.ЦБУ) Тогда
				//	ПотокВыгрузки.ДобавитьСтроку("ZB" + ВРег(Лев(СтрокаСекции.СчетКонтрагента.Банк.ЦБУ, 3))); // Номер центра банковских услуг (ЦБУ) банка-получателя (число 3)
				//КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("~");
			ИначеЕсли ПараметрыВыгрузки.ПрограммаБанк = "БЕЛАГРОПРОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "ФРАНСАБАНК" Тогда
				ПотокВыгрузки.ДобавитьСтроку("^KT21");
				//ПотокВыгрузки.ДобавитьСтроку("^KT19");
				
				ПотокВыгрузки.ДобавитьСтроку("1" + ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер)); // номер длина 6
				ПотокВыгрузки.ДобавитьСтроку("2" + Формат(СтрокаСекции.Дата, "ДФ=гггг-ММ-дд"));
				ПотокВыгрузки.ДобавитьСтроку("3" + Лев(СтрокаСекции.ОрганизацияНаименованиеПолное, 105)); // длина 105 можно не указывать
				ПотокВыгрузки.ДобавитьСтроку("5" + СтрокаСекции.ВалютаКод); // код валюты (974 или BYR)
				ПотокВыгрузки.ДобавитьСтроку("6" + СтрокаСекции.ОрганизацияИНН); //Код УНН плательщика 9
				ПотокВыгрузки.ДобавитьСтроку("7" + Лев(СтрокаСекции.ОрганизацияБанк, 105)); //Наименование Банка плательщика(можно не указывать)
				
				//Код банка плательщика 9 (или 3 последних)
				ПотокВыгрузки.ДобавитьСтроку("8" + ?(ПустаяСтрока(СтрокаСекции.ОрганизацияБанкСВИФТБИК), СтрокаСекции.ОрганизацияБанкКод, СтрокаСекции.ОрганизацияБанкСВИФТБИК));
				
				ПотокВыгрузки.ДобавитьСтроку("9" + СтрокаСекции.ОрганизацияРасчСчет); // Расчетный счёт плательщика 13
				ПотокВыгрузки.ДобавитьСтроку("A" + Формат(СтрокаСекции.Сумма, "ЧЦ=20; ЧДЦ=2; ЧГ=0"));
				ПотокВыгрузки.ДобавитьСтроку("B"); // Наименование банка – корреспондента банка получателя 105 (можно не указывать)
				ПотокВыгрузки.ДобавитьСтроку("C"); // Код банка – корреспондента банка получателя 9 (или 3 последних)
				ПотокВыгрузки.ДобавитьСтроку("D"); // Счет банка получателя в банке – корреспонденте 13
				ПотокВыгрузки.ДобавитьСтроку("E" + Лев(СтрокаСекции.КонтрагентНаименованиеПолное, 105)); // Наименование бенефициара 105
				ПотокВыгрузки.ДобавитьСтроку("G" + СтрокаСекции.КонтрагентИНН); // УНН бенефициара 9 (11 на нерезидента)
				ПотокВыгрузки.ДобавитьСтроку("H" + Лев(СтрокаСекции.КонтрагентБанк, 105)); // Наименование Банка получателя (можно не указывать) 105 (на нерезидента - указать)
				ПотокВыгрузки.ДобавитьСтроку("J" + СтрокаСекции.КонтрагентБанкСВИФТБИК); // Код Банка получателя 9 (или 3 последних, 11 на нерезидента)
				ПотокВыгрузки.ДобавитьСтроку("I" + СтрокаСекции.КонтрагентРасчСчет); // Расчетный счёт получателя 13 (20 на нерезидента)
				ПотокВыгрузки.ДобавитьСтроку("K"); //Код УНН за кого платят 9
				ПотокВыгрузки.ДобавитьСтроку("L" + СтрокаСекции.КодБК); // Код назначения платежа 5
				ПотокВыгрузки.ДобавитьСтроку("M" + СтрокаСекции.ОчередностьПлатежа); // Очерёдность платежа если очередность не указывается, то ставится 0 или 2
				ПотокВыгрузки.ДобавитьСтроку("N0"); //Код срочности 0 – обычный, 1 – срочный 1
				ПотокВыгрузки.ДобавитьСтроку("N1");
				
				Содержание = СтрокаСекции.НазначениеПлатежа;
				Содержание = Лев(Содержание, 332);
				// O Назначение платежа 1 (можно все назначение в одну строку;
				// можно разбить на несколько, тогда в начале каждой строки стоит признак поля Назначение платежа =О) В сумме - 332 символа
				
				ПотокВыгрузки.ДобавитьСтроку("O" + Содержание);
				
				Если ПараметрыВыгрузки.ПрограммаБанк = "БЕЛАГРОПРОМБАНК" Тогда
					ПотокВыгрузки.ДобавитьСтроку("Q"); // Q Строка 1 приложения к документу ширина строк не более 113 символов
					ПотокВыгрузки.ДобавитьСтроку("^1" + СтрокаСекции.ОрганизацияРасчСчет);
					ПотокВыгрузки.ДобавитьСтроку("^51");
				КонецЕсли;
				
				// Расходы по переводу
				//Если ТипЗнч(СтрокаСекции) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				//	Если СтрокаСекции.РасходыПоПереводу = Перечисления.ВидыРасходовПоПереводу.Плательщик Тогда // плательщика
				//		ПотокВыгрузки.ДобавитьСтроку("^1" + СокрЛП(СтрокаСекции.СчетОрганизации.НомерСчета));
				//		ПотокВыгрузки.ДобавитьСтроку("^51");
				//	ИначеЕсли СтрокаСекции.РасходыПоПереводу = Перечисления.ВидыРасходовПоПереводу.Бенефициар Тогда // бенефициара
				//		ПотокВыгрузки.ДобавитьСтроку("^1" + СокрЛП(СтрокаСекции.СчетКонтрагента.НомерСчета));
				//		ПотокВыгрузки.ДобавитьСтроку("^52");
				//	Иначе
				//		ПотокВыгрузки.ДобавитьСтроку("^54");
				//	КонецЕсли;
				//КонецЕсли;
				
				ПотокВыгрузки.ДобавитьСтроку("~");
			ИначеЕсли ПараметрыВыгрузки.ПрограммаБанк = "БПСБАНК" Тогда
				Если ПараметрыВыгрузки.ВалютныйСчет Тогда
					ПотокВыгрузки.ДобавитьСтроку("#1|PayDocCur");
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Дата, "ДФ=dd.MM.yyyy"));
					ПотокВыгрузки.ДобавитьСтроку(ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер));
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ВалютаКод);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ОрганизацияРасчСчет);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентРасчСчет);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентНаим);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентИНН);
					ПотокВыгрузки.ДобавитьСтроку("112");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБИКБанка);
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБанк);
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ="));
					
					Содержание = СтрокаСекции.НазначениеПлатежа;
					Содержание = СтрЗаменить(Содержание, "/", " ");
					Содержание = СтрЗаменить(Содержание, "№", "N");
					Содержание = СтрЗаменить(Содержание, ":", " ");
					Содержание = СтрЗаменить(Содержание, Символ(160), "");
					Содержание = СтрЗаменить(Содержание, Символ(10), " ");
					ПотокВыгрузки.ДобавитьСтроку(Содержание);
					
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.ОчередностьПлатежа, "ЧЦ=2"));
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					//ПотокВыгрузки.ДобавитьСтроку(СокрЛП(СтрокаСекции.Документ.СчетКомиссии.НомерСчета));
					//ПотокВыгрузки.ДобавитьСтроку(СокрЛП(СтрокаСекции.Документ.СчетКомиссии.ВалютаДенежныхСредств.Код));
					
					ПотокВыгрузки.ДобавитьСтроку(";NestedTable");
					ПотокВыгрузки.ДобавитьСтроку(";EndNestedTable");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку(";NestedTable");
					ПотокВыгрузки.ДобавитьСтроку("vPaymentAttribId");
					ПотокВыгрузки.ДобавитьСтроку("1");
					ПотокВыгрузки.ДобавитьСтроку(";EndNestedTableRow");
					ПотокВыгрузки.ДобавитьСтроку("vRGCodeId");
					ПотокВыгрузки.ДобавитьСтроку("3");
					ПотокВыгрузки.ДобавитьСтроку(";EndNestedTable");
					ПотокВыгрузки.ДобавитьСтроку(";NestedTable");
					ПотокВыгрузки.ДобавитьСтроку(";EndNestedTable");
					ПотокВыгрузки.ДобавитьСтроку(";END");
				Иначе
					ПотокВыгрузки.ДобавитьСтроку("#|PAYDOCBY");
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Дата, "ДФ=dd/MM/yyyy"));
					ПотокВыгрузки.ДобавитьСтроку(ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер));
					ПотокВыгрузки.ДобавитьСтроку("933");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.ОрганизацияРасчСчет);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентРасчСчет);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБанк);
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентИНН);
					ПотокВыгрузки.ДобавитьСтроку("112");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБИКБанка);
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КонтрагентБанк);
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ="));
					
					Содержание = СтрокаСекции.НазначениеПлатежа;
					Содержание = СтрЗаменить(Содержание, "/", " ");
					Содержание = СтрЗаменить(Содержание, "№", "N");
					Содержание = СтрЗаменить(Содержание, ":", " ");
					Содержание = СтрЗаменить(Содержание, Символ(160), "");
					Содержание = СтрЗаменить(Содержание, Символ(10), " ");
					ПотокВыгрузки.ДобавитьСтроку(Содержание);
					
					ПотокВыгрузки.ДобавитьСтроку(Формат(СтрокаСекции.ОчередностьПлатежа, "ЧЦ=2"));
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку(";NestedTable");
					ПотокВыгрузки.ДобавитьСтроку(";EndNestedTable");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку("");
					ПотокВыгрузки.ДобавитьСтроку(СтрокаСекции.КодБК); // Код платежа
					ПотокВыгрузки.ДобавитьСтроку(";END");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Кодировка = ?(ПараметрыВыгрузки.Кодировка = "DOS", "cp866", "windows-1251");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодировка);
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
КонецПроцедуры

Функция ИдентификаторПрограммы(Параметры)
	Если Параметры.ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Или Параметры.ПрограммаБанк = "ПРИОРБАНК"
		Или Параметры.ПрограммаБанк = "АЛЬФАБАНК" Или Параметры.ПрограммаБанк = "БЕЛСВИССБАНК"
		Или Параметры.ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Или Параметры.ПрограммаБанк = "БЕЛИНВЕСТБАНК"
		Или Параметры.ПрограммаБанк = "ВТББАНК" Или Параметры.ПрограммаБанк = "МОСКВА-МИНСК"
		Или Параметры.ПрограммаБанк = "АБСОЛЮТБАНК" Или Параметры.ПрограммаБанк = "БСББАНК" Тогда
		
		// Для СООО "СИСТЕМНЫЕ ТЕХНОЛОГИИ"
		Идентификатор = "MAILBANK";
	ИначеЕсли Параметры.ПрограммаБанк = "БТАБАНК" Тогда
		Идентификатор = "БТАБАНК_XML";
	Иначе
		Идентификатор = "";
	КонецЕсли;
		
	Возврат Идентификатор;
КонецФункции

#КонецОбласти

#Область СлужебныеВыгрузка

Функция СоздатьXMLЗаписьДляОбменаДанными(ИмяФайлаОбменаДанными, Кодировка)
	Если ПустаяСтрока(ИмяФайлаОбменаДанными) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		КодировкаЗнач = ?(Кодировка = "Windows", "windows-1251", "cp866");
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбменаДанными, КодировкаЗнач);
	Исключение
		ЗаписьXML = Неопределено;
	КонецПопытки;
	
	Возврат ЗаписьXML;
КонецФункции

Функция СформироватьСтруктуруВыгрузки(ВидДокумента, ПараметрыВыгрузки)
	СтруктураЭкспорта = Новый Структура;
	
	Если ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Если ПараметрыВыгрузки.ВалютныйСчет Тогда
			Если ПараметрыВыгрузки.ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "ПРИОРБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "АЛЬФАБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛСВИССБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛИНВЕСТБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "ВТББАНК" Тогда
				
				//СтруктураЭкспорта.Вставить("Number", "");
				//СтруктураЭкспорта.Вставить("Date", "");
				//СтруктураЭкспорта.Вставить("DateVal", "");
				//СтруктураЭкспорта.Вставить("_005", "");
				//СтруктураЭкспорта.Вставить("CurrCode", "");
				//СтруктураЭкспорта.Вставить("_026", "");
				//СтруктураЭкспорта.Вставить("Conv", "");
				//СтруктураЭкспорта.Вставить("OUR", "");
				//СтруктураЭкспорта.Вставить("BEN", "");
				//СтруктураЭкспорта.Вставить("SHA", "");
				//СтруктураЭкспорта.Вставить("Option56", "");
				//СтруктураЭкспорта.Вставить("Name56", "");
				//СтруктураЭкспорта.Вставить("CorrBIC56", "");
				//СтруктураЭкспорта.Вставить("Option57", "");
				//СтруктураЭкспорта.Вставить("BIC57", "");
				//СтруктураЭкспорта.Вставить("BankBY57", "");
				//СтруктураЭкспорта.Вставить("Name57", "");
				//СтруктураЭкспорта.Вставить("Option59", "");
				//СтруктураЭкспорта.Вставить("I32", "");
				//СтруктураЭкспорта.Вставить("Acc", "");
				//СтруктураЭкспорта.Вставить("SendName", "");
				//СтруктураЭкспорта.Вставить("SendAddress", "");
				//СтруктураЭкспорта.Вставить("SendCountryReg", "");
				//СтруктураЭкспорта.Вставить("SendBankNR", "");
				//СтруктураЭкспорта.Вставить("SendBankBIC", "");
				//СтруктураЭкспорта.Вставить("SendKorrAcc", "");
				//СтруктураЭкспорта.Вставить("SendKorrBankName", "");
				//СтруктураЭкспорта.Вставить("SendKorrBankBIC", "");
				//СтруктураЭкспорта.Вставить("IsSenderNR", "");
				//СтруктураЭкспорта.Вставить("UNNSend", "");
				//СтруктураЭкспорта.Вставить("AccRec", "");
				//СтруктураЭкспорта.Вставить("UNNRec", "");
				//СтруктураЭкспорта.Вставить("KredCountryReg", "");
				//СтруктураЭкспорта.Вставить("KredBankNR", "");
				//СтруктураЭкспорта.Вставить("KredBankBIC", "");
				//СтруктураЭкспорта.Вставить("KredSWIFTNR", "");
				//СтруктураЭкспорта.Вставить("KredKorrAcc", "");
				//СтруктураЭкспорта.Вставить("KredKorrBankName", "");
				//СтруктураЭкспорта.Вставить("KredKorrBankBIC", "");
				//СтруктураЭкспорта.Вставить("IsReceiverNR", "");
				//СтруктураЭкспорта.Вставить("OrderOfPayment", "");
				//СтруктураЭкспорта.Вставить("NaznValText", "");
				//СтруктураЭкспорта.Вставить("Rashod", "");
				//СтруктураЭкспорта.Вставить("Sender", "");
				//СтруктураЭкспорта.Вставить("BankName", "");
				//СтруктураЭкспорта.Вставить("Receiver", "");
				//СтруктураЭкспорта.Вставить("__Address", "");
			КонецЕсли;
		Иначе
			Если ПараметрыВыгрузки.ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "ПРИОРБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "АЛЬФАБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛСВИССБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "БЕЛИНВЕСТБАНК"
				Или ПараметрыВыгрузки.ПрограммаБанк = "ВТББАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "МОСКВА-МИНСК" Тогда
				
				СтруктураЭкспорта.Вставить("NaznText");
				СтруктураЭкспорта.Вставить("NaznText1");
				СтруктураЭкспорта.Вставить("NaznText2");
				//СтруктураЭкспорта.Вставить("KorName");
				//СтруктураЭкспорта.Вставить("IsQuick");
				//СтруктураЭкспорта.Вставить("N_plt", "");
				//СтруктураЭкспорта.Вставить("DatePlt", "");
				//СтруктураЭкспорта.Вставить("CPI", "");
				//СтруктураЭкспорта.Вставить("NPI", "");
				//СтруктураЭкспорта.Вставить("MFO1", "");
				//СтруктураЭкспорта.Вставить("Bank1", "");
				//СтруктураЭкспорта.Вставить("ABW", "");
				//СтруктураЭкспорта.Вставить("ISO", "");
				//СтруктураЭкспорта.Вставить("_004", "");
				//СтруктураЭкспорта.Вставить("ISON", "");
				//СтруктураЭкспорта.Вставить("Acc", "");
				//СтруктураЭкспорта.Вставить("UNN", "");
				//СтруктураЭкспорта.Вставить("Name", "");
				//СтруктураЭкспорта.Вставить("MFO2", "");
				//СтруктураЭкспорта.Вставить("Bank2", "");
				//СтруктураЭкспорта.Вставить("KorAcc", "");
				//СтруктураЭкспорта.Вставить("KorName", "");
				//СтруктураЭкспорта.Вставить("UNNRec", "");
				//СтруктураЭкспорта.Вставить("OchPlat", "");
				//СтруктураЭкспорта.Вставить("SrokPlt", "");
				//СтруктураЭкспорта.Вставить("E", "");
				//СтруктураЭкспорта.Вставить("X", "");
				//СтруктураЭкспорта.Вставить("Version", "");
				//СтруктураЭкспорта.Вставить("NaznCode", "");
				//СтруктураЭкспорта.Вставить("__Face1", "");
				//СтруктураЭкспорта.Вставить("__Address", "");
				//СтруктураЭкспорта.Вставить("__Face2", "");
				//СтруктураЭкспорта.Вставить("Plat1", "");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		
	КонецЕсли;
	
	Возврат СтруктураЭкспорта;
КонецФункции

Процедура ПоместитьИнформациюПоДокументу(ПотокВыгрузки, СтрокаСекции, ПараметрыВыгрузки)
	СимволОграничитель = "^";
	СтуртураДляЗаписи = СформироватьСтруктуруВыгрузки(СтрокаСекции.ВидДокумента, ПараметрыВыгрузки);
	ЗаполнитьЗначенияСвойствВыгрузки(СтуртураДляЗаписи, СтрокаСекции, ПараметрыВыгрузки, СтрокаСекции.ВидДокумента);
	
	Если СтрокаСекции.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение И Не ПараметрыВыгрузки.ВалютныйСчет Тогда
		ТипДок = "9"; // Рублевое платежное поручение
	ИначеЕсли СтрокаСекции.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		ТипДок = "29"; // Платежное требование
	ИначеЕсли СтрокаСекции.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение И ПараметрыВыгрузки.ВалютныйСчет Тогда
		ТипДок = ТипВалютногоПлатежногоПоручения(ПараметрыВыгрузки);
	Иначе
		ТипДок = "9";
	КонецЕсли;
	
	ПотокВыгрузки.ДобавитьСтроку("***** " + СимволОграничитель + "Type=" + ТипДок + СимволОграничитель + " " + СимволОграничитель + "Acc=" + СтрокаСекции.ОрганизацияРасчСчет + СимволОграничитель);
	ПотокВыгрузки.ДобавитьСтроку("[IN_PARAM]");
	
	Для каждого ВыгружаемыйРеквизит Из СтуртураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если Не ПустаяСтрока(Значение) Тогда
			Если Лев(ВыгружаемыйРеквизит.Ключ, 1) = "_" Тогда
				Ключ = Сред(ВыгружаемыйРеквизит.Ключ, 2);
			Иначе
				Ключ = ВыгружаемыйРеквизит.Ключ;
			КонецЕсли;
			
			ПотокВыгрузки.ДобавитьСтроку(СимволОграничитель + Ключ + "=" + Значение + СимволОграничитель);
		КонецЕсли;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("[OUT_PARAM]");
	ПотокВыгрузки.ДобавитьСтроку("###################################################");
КонецПроцедуры

Функция ТипВалютногоПлатежногоПоручения(ПараметрыВыгрузки)
	Если ПараметрыВыгрузки.ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "ВТББАНК"
		Или ПараметрыВыгрузки.ПрограммаБанк = "ПРИОРБАНК" Или ПараметрыВыгрузки.ПрограммаБанк = "АЛЬФАБАНК" Тогда
		
		ТипДок = "18";
	ИначеЕсли ПараметрыВыгрузки.ПрограммаБанк = "БЕЛИНВЕСТБАНК" Тогда
		ТипДок = "48";
	Иначе
		ТипДок = "18";
	КонецЕсли;
	
	Возврат ТипДок;
КонецФункции

Процедура ЗаполнитьЗначенияСвойствВыгрузки(СтрокаЭкспорта, СтрокаСекции, ПараметрыВыгрузки, ВидДокумента)
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СтрокаСекции.Организация, СтрокаСекции.Дата);
	Руководители = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(СтрокаСекции.Организация, СтрокаСекции.Дата);
	
	Руководитель = ВРег(Руководители.Руководитель.Наименование);
	ГлавБух = ВРег(Руководители.ГлавныйБухгалтер.Наименование);
	АдресОрганизации = ВРег(ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	
	НазначениеПлатежаСумма = СокрЛП(СтрокаСекции.НазначениеПлатежа);
	НазначениеПлатежаСумма = СтрЗаменить(НазначениеПлатежаСумма, ",", "");
	НазначениеПлатежаСумма = СтрЗаменить(НазначениеПлатежаСумма, ".", "");
	
	СодержаниеПлатежа = СокрЛП(Лев(СтрокаСекции.Комментарий, 590 - СтрДлина(НазначениеПлатежаСумма) - 1) + " " + НазначениеПлатежаСумма);
	ИнформацияПлатежа(СтрокаЭкспорта, СодержаниеПлатежа);
	
	Если ПустаяСтрока(СтрокаСекции.КонтрагентНаименованиеПолное) Тогда
		Поместить(СтрокаЭкспорта, "KorName", Лев(СтрокаСекции.КонтрагентНаим, 105));
	Иначе
		Поместить(СтрокаЭкспорта, "KorName", Лев(СтрокаСекции.КонтрагентНаименованиеПолное, 105));
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Если СтрокаСекции.ВидПлатежа = "СРОЧНО" Тогда
			Поместить(СтрокаЭкспорта, "IsQuick", "1");
		Иначе
			Поместить(СтрокаЭкспорта, "IsQuick", "0");
		КонецЕсли;
		
		Если ПараметрыВыгрузки.ВалютныйСчет Тогда
			Поместить(СтрокаЭкспорта, "Number", ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер));
			Поместить(СтрокаЭкспорта, "Date", Формат(СтрокаСекции.Дата, "ДФ=дд.ММ.гггг"));
			Поместить(СтрокаЭкспорта, "DateVal", Формат(СтрокаСекции.Дата, "ДФ=дд.ММ.гггг"));
			Поместить(СтрокаЭкспорта, "_005", Формат(СтрокаСекции.Сумма, "ЧЦ=25; ЧДЦ=; ЧРД=.; ЧРГ=' '; ЧГ=0"));
			Поместить(СтрокаЭкспорта, "CurrCode", СтрокаСекции.ВалютаКод);
			Поместить(СтрокаЭкспорта, "_026", СтрокаСекции.ВалютаКод);
			Поместить(СтрокаЭкспорта, "Conv", "0");
			
			//СтрокаЭкспорта.Conv = "0"; // не с конверсией
			//Если ВРЕГ(СтрокаСекции.ВидПП) = "СКОНВЕРСИЕЙ" Тогда
			//	СтрокаЭкспорта.Conv = "1"; //с конверсией
			//	СтрокаЭкспорта.AmConv = Формат(СтрокаСекции.СуммаДокумента*СтрокаСекции.КурсКонверсии, "ЧЦ=25; ЧДЦ=0; ЧРД=.; ЧРГ=' '; ЧГ=0");
			//	СтрокаЭкспорта.CurrConv = СтрокаСекции.КодВалютыКонверсии;
			//	СтрокаЭкспорта.Course = СтрокаСекции.КурсКонверсии;
			//Иначе
			//	СтрокаЭкспорта.Conv = "0"; //не с конверсией
			//КонецЕсли;
			
			Поместить(СтрокаЭкспорта, "OUR", "[X]");
			Поместить(СтрокаЭкспорта, "BEN", "[ ]");
			Поместить(СтрокаЭкспорта, "SHA", "[ ]");
			
			Поместить(СтрокаЭкспорта, "Option56", "A");
			Поместить(СтрокаЭкспорта, "Name56", СтрокаСекции.ОрганизацияБанк);
			Поместить(СтрокаЭкспорта, "CorrBIC56", СтрокаСекции.ОрганизацияБИКБанка);
			
			Поместить(СтрокаЭкспорта, "Option57", "A");
			Поместить(СтрокаЭкспорта, "BIC57", СтрокаСекции.ОрганизацияБИКБанка);
			Поместить(СтрокаЭкспорта, "BankBY57", "-1");
			Поместить(СтрокаЭкспорта, "Name57", СтрокаСекции.ОрганизацияБанк);
			
			Поместить(СтрокаЭкспорта, "Option59", "Z");
			Поместить(СтрокаЭкспорта, "I32", СтрокаСекции.ВалютаНаименование);
			Поместить(СтрокаЭкспорта, "Acc", СтрокаСекции.ОрганизацияРасчСчет);
			Поместить(СтрокаЭкспорта, "SendName", СтрокаСекции.ОрганизацияБанк);
			Поместить(СтрокаЭкспорта, "SendAddress", АдресОрганизации);
			Поместить(СтрокаЭкспорта, "SendCountryReg", СтрокаСекции.КонтрагентСтранаРегистрацииКод);
			Поместить(СтрокаЭкспорта, "SendBankNR", СтрокаСекции.ОрганизацияБанк);
			Поместить(СтрокаЭкспорта, "SendBankBIC", СтрокаСекции.ОрганизацияБИКБанка);
			Поместить(СтрокаЭкспорта, "SendKorrAcc", СтрокаСекции.ОрганизацияКоррСчетРЦБанка);
			Поместить(СтрокаЭкспорта, "SendKorrBankName", СтрокаСекции.ОрганизацияБанкДляРасчетов);
			Поместить(СтрокаЭкспорта, "SendKorrBankBIC", СтрокаСекции.ОрганизацияБИКРЦБанка);
			Поместить(СтрокаЭкспорта, "IsSenderNR", ?(СтрокаСекции.ОрганизацияСтранаРегистрацииКод = "112", "0", "1"));
			Поместить(СтрокаЭкспорта, "UNNSend", СтрокаСекции.ОрганизацияИНН);
			Поместить(СтрокаЭкспорта, "AccRec", СтрокаСекции.КонтрагентРасчСчет);
			Поместить(СтрокаЭкспорта, "UNNRec", СтрокаСекции.КонтрагентИНН);
			Поместить(СтрокаЭкспорта, "KredCountryReg", СтрокаСекции.КонтрагентСтранаРегистрацииКод);
			Поместить(СтрокаЭкспорта, "KredBankNR", СтрокаСекции.КонтрагентНаим);
			Поместить(СтрокаЭкспорта, "KredBankBIC", Прав(СтрокаСекции.КонтрагентБИКБанка, 3));
			Поместить(СтрокаЭкспорта, "KredSWIFTNR", СтрокаСекции.КонтрагентБанкСВИФТБИК);
			Поместить(СтрокаЭкспорта, "KredKorrAcc", СтрокаСекции.КонтрагентКоррСчетРЦБанка);
			Поместить(СтрокаЭкспорта, "KredKorrBankName", СтрокаСекции.КонтрагентБанкДляРасчетов);
			Поместить(СтрокаЭкспорта, "KredKorrBankBIC", СтрокаСекции.КонтрагентБИКРЦБанка);
			Поместить(СтрокаЭкспорта, "IsReceiverNR", ?(СтрокаСекции.ОрганизацияСтранаРегистрацииКод = "112", "0", "1"));
			Поместить(СтрокаЭкспорта, "OrderOfPayment", Лев(СодержаниеПлатежа, 140));
			Поместить(СтрокаЭкспорта, "NaznValText", СодержаниеПлатежа);
			Поместить(СтрокаЭкспорта, "Rashod", "0");
			
			Поместить(СтрокаЭкспорта, "Sender", СтрокаСекции.ОрганизацияНаим);
			Поместить(СтрокаЭкспорта, "BankName", СтрокаСекции.КонтрагентБанк);
			Поместить(СтрокаЭкспорта, "Receiver", СтрокаСекции.КонтрагентНаим);
			Поместить(СтрокаЭкспорта, "__Address", АдресОрганизации);
		Иначе
			Поместить(СтрокаЭкспорта, "N_plt", ПолучитьНомерВФорматеОбмена(СтрокаСекции.Ссылка, СтрокаСекции.Номер));
			Поместить(СтрокаЭкспорта, "DatePlt", Формат(СтрокаСекции.Дата, "ДФ=дд.ММ.гггг"));
			Поместить(СтрокаЭкспорта, "CPI", "0401600036");
			Поместить(СтрокаЭкспорта, "NPI", "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ");
			Поместить(СтрокаЭкспорта, "MFO1", СтрокаСекции.ОрганизацияБИКБанка);
			Поместить(СтрокаЭкспорта, "Bank1", СтрокаСекции.ОрганизацияБанк);
			
			//Поместить(СтрокаЭкспорта, "IsQuick", "0");
			
			СуммаПрописью = ВРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаСекции.Сумма, СтрокаСекции.Валюта));
			Поместить(СтрокаЭкспорта, "ABW", Лев(СуммаПрописью, 220));
			
			Поместить(СтрокаЭкспорта, "ISO", СтрокаСекции.ВалютаКод);
			Поместить(СтрокаЭкспорта, "_004", Формат(СтрокаСекции.Сумма, "ЧЦ=25; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			Поместить(СтрокаЭкспорта, "ISON", СтрокаСекции.ВалютаНаименованиеПолное);
			Поместить(СтрокаЭкспорта, "Acc", СтрокаСекции.ОрганизацияРасчСчет);
			Поместить(СтрокаЭкспорта, "UNN", СтрокаСекции.ОрганизацияИНН);
			Поместить(СтрокаЭкспорта, "Name", Лев(СтрокаСекции.ОрганизацияНаименованиеПолное, 105));
			Поместить(СтрокаЭкспорта, "MFO2", СтрокаСекции.КонтрагентБИКБанка);
			Поместить(СтрокаЭкспорта, "Bank2", СтрокаСекции.КонтрагентБанк);
			Поместить(СтрокаЭкспорта, "KorAcc", СтрокаСекции.КонтрагентРасчСчет);
			Поместить(СтрокаЭкспорта, "UNNRec", СтрокаСекции.КонтрагентИНН);
			Поместить(СтрокаЭкспорта, "KorName", СтрокаСекции.КонтрагентБанк);
			
			Если ПараметрыВыгрузки.ПрограммаБанк = "МОСКВА-МИНСК" И СтрДлина(СтрокаСекции.ОчередностьПлатежа) = 1 Тогда
				Поместить(СтрокаЭкспорта, "OchPlat", "0" + СтрокаСекции.ОчередностьПлатежа);
			Иначе
				Поместить(СтрокаЭкспорта, "OchPlat", СтрокаСекции.ОчередностьПлатежа);
			КонецЕсли;
			
			Поместить(СтрокаЭкспорта, "SrokPlt", Формат(СтрокаСекции.Дата, "ДФ=дд.ММ.гггг"));
			Поместить(СтрокаЭкспорта, "E", "OUR");
			Поместить(СтрокаЭкспорта, "X", "X");
			Поместить(СтрокаЭкспорта, "Version", "1");
			Поместить(СтрокаЭкспорта, "NaznCode", "509");
			Поместить(СтрокаЭкспорта, "__Face1", Руководитель);
			Поместить(СтрокаЭкспорта, "__Address", АдресОрганизации);
			Поместить(СтрокаЭкспорта, "__Face2", ГлавБух);
			
			Если СтрокаСекции.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
				Поместить(СтрокаЭкспорта, "Plat1", СокрЛП(СтрокаСекции.Ссылка.КодПлатежаВБюджет));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаСекции.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		
	КонецЕсли;
КонецПроцедуры

Процедура Поместить(СтрокаЭкспорта, Идентификатор, Значение)
	Если Не СтрокаЭкспорта.Свойство(Идентификатор) Тогда
		СтрокаЭкспорта.Вставить(Идентификатор, "");
	КонецЕсли;
	
	СтрокаЭкспорта[Идентификатор] = Строка(Значение);
КонецПроцедуры

Процедура ИнформацияПлатежа(ПотокВыгрузки, НазначениеПлатежа)
	Содержание = НазначениеПлатежа;
	
	Содержание1 = СокрЛП(Сред(Содержание, 141, 365));
	Содержание2 = СокрЛП(Сред(Содержание, 366, 590));
	Содержание = СокрЛП(Сред(Содержание, 1, 140));
	
	Если ПотокВыгрузки.Свойство("NaznText") Тогда
		ПотокВыгрузки.NaznText = Содержание;
	КонецЕсли;
	
	Если ПотокВыгрузки.Свойство("NaznText1") И ЗначениеЗаполнено(Содержание1) Тогда
		ПотокВыгрузки.NaznText1 = Содержание1;
	КонецЕсли;
	
	Если ПотокВыгрузки.Свойство("NaznText2") И ЗначениеЗаполнено(Содержание2) Тогда
		ПотокВыгрузки.NaznText2 = Содержание2;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНомерВФорматеОбмена(Документ, НомерДокумента)
	Номер = СокрЛП(НомерДокумента);
	
	ПрефиксОрганизации = "";
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Документ, Истина, ПрефиксОрганизации);
	
	// Удаление префикса из номера документа
	Если Найти(Номер, ПрефиксОрганизации) = 1 Тогда
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации) + 1);
	КонецЕсли;
	
	// Так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// Удаление ведущих нулей
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
КонецФункции

Функция ПривестиЗначение(Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПараметрЗнач(Знач Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = УдалитьЗапрещенныеСимволы(Значение);
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция УдалитьЗапрещенныеСимволы(Знач ЗначСтрока)
	ЗначСтрока = СтрЗаменить(ЗначСтрока, "«", "");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, "»", "");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, "№", "N");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, "-", "");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, ":", "");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, "#", "");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, """", "");
	
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символы.ВК, " ");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символы.НПП, " ");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символы.ПС, " ");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символы.ПФ, " ");
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символы.Таб, " ");
	
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символ(32) + Символ(32), Символ(32));
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символ(32) + Символ(32), Символ(32));
	ЗначСтрока = СтрЗаменить(ЗначСтрока, Символ(32) + Символ(32), Символ(32));
	ЗначСтрока = СокрЛП(ЗначСтрока);
	
	Возврат ВРег(ЗначСтрока);
КонецФункции

#КонецОбласти

#Область СлужебныеЗагрузка

Процедура РассчитатьКонечныйОстаток(ДанныеРасчетногоСчета, ПараметрыЗагрузки)
	Если ПустаяСтрока(ДанныеРасчетногоСчета["КонечныйОстаток"]) Или ДанныеРасчетногоСчета["НачальныйОстаток"] = "0" Тогда
		НачальныйОстаток = 0;
		ВсегоПоступило = 0;
		ВсегоСписано = 0;
		
		Если ЗначениеЗаполнено(ДанныеРасчетногоСчета["НачальныйОстаток"]) Тогда
			НачальныйОстаток = Число(ДанныеРасчетногоСчета["НачальныйОстаток"]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРасчетногоСчета["ВсегоПоступило"]) Тогда
			ВсегоПоступило = Число(ДанныеРасчетногоСчета["ВсегоПоступило"]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРасчетногоСчета["ВсегоСписано"]) Тогда
			ВсегоСписано = Число(ДанныеРасчетногоСчета["ВсегоСписано"]);
		КонецЕсли;
		
		ДанныеРасчетногоСчета["КонечныйОстаток"] = Строка(НачальныйОстаток + ВсегоПоступило - ВсегоСписано);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Знач Источник)
	Источник = СтрЗаменить(Источник, "/", ".");
	Возврат ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(Источник);
КонецФункции

Функция ПараметрыПреобразованияВЧисло(ПараметрыЗагрузки)
	ПрограммаБанк = ПараметрыЗагрузки.ПрограммаБанк;
	
	Результат = Новый Структура;
	
	Если ПрограммаБанк = "АЛЬФАБАНК" Или ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Или ПрограммаБанк = "АБСОЛЮТБАНК" Или ПрограммаБанк = "ИДЕЯБАНК"
		Или ПрограммаБанк = "БЕЛИНВЕСТБАНК" Или ПрограммаБанк = "ПРИОРБАНК" Или ПрограммаБанк = "ФРАНСАБАНК"
		Или ПрограммаБанк = "МОСКВА-МИНСК" Или ПрограммаБанк = "БСББАНК" Тогда
		
		Результат.Вставить("РазделительДробнойЧасти", ".");
		Результат.Вставить("РазделительГруппЦелойЧасти", ",");
	ИначеЕсли ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Тогда
		Результат.Вставить("РазделительДробнойЧасти", ",");
		Результат.Вставить("РазделительГруппЦелойЧасти", ".");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПреобразоватьВЧисло(Знач Буфер, ПараметрыЗагрузки)
	ПараметрыЧисла = ПараметрыПреобразованияВЧисло(ПараметрыЗагрузки);
	
	Буфер = СтрЗаменить(Буфер, Символ(160), "");
	Буфер = СтрЗаменить(Буфер, "=", "");
	Буфер = СтрЗаменить(Буфер, ПараметрыЧисла.РазделительГруппЦелойЧасти, "");
	Буфер = СтрЗаменить(Буфер, ПараметрыЧисла.РазделительДробнойЧасти, ".");
	
	Результат = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(Буфер);
	Если Результат = Неопределено Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЧисловыеИдентификаторыОбмена()
	Результат = Новый Массив;
	Результат.Добавить("НачальныйОстаток");
	Результат.Добавить("КонечныйОстаток");
	Результат.Добавить("ВсегоСписано");
	Результат.Добавить("ВсегоПоступило");
	
	Возврат Результат
КонецФункции

Процедура ЗагрузитьСтрокуЗаголовка(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, ТекстСтрокиЗаголовка, ТекущаяСтрока, ЗаголовокВыписки)
	Значение = "";
	Тег = "";
	
	Если РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение) Тогда
		СписокКлючей = ПолучитьПараметрОбмена(ИдентификаторыФайлаОбмена, Тег);
		Для каждого ПараметрОбмена Из СписокКлючей Цикл
			Если ПустаяСтрока(ПараметрОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗаголовокВыписки.Свойство(ПараметрОбмена) И ПустаяСтрока(ЗаголовокВыписки[ПараметрОбмена]) Тогда
				Если Не ПараметрыЗагрузки.ЧисловыеИдентификаторыОбмена.Найти(ПараметрОбмена) = Неопределено Тогда
					Значение = Строка(ПреобразоватьВЧисло(Значение, ПараметрыЗагрузки));
				ИначеЕсли ПараметрОбмена = "ДатаНачала" Тогда
					Значение = ПолучитьДатуИзСтроки(Значение);
				ИначеЕсли ПараметрОбмена = "ДатаКонца" Тогда
					Значение = КонецДня(ПолучитьДатуИзСтроки(Значение));
				КонецЕсли;
				
				ЗаголовокВыписки[ПараметрОбмена] = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьСекциюРасчетногоСчета(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, ПравилаЧтенияВыпискиБанка, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки, ЗаголовокВыписки)
	ДанныеРасчетногоСчета = Новый Структура("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток");
	
	Проверка = Истина;
	Значение = "";
	Тег = "";
	
	Пока Проверка Цикл
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки);
		Проверка = РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение);
		
		Если Не ПравилаЧтенияВыпискиБанка.СекцияДокументНачало.Найти(Тег) = Неопределено Тогда
			ТекущаяСтрока = ТекущаяСтрока - 1;
			Прервать;
		КонецЕсли;
		
		Если ПараметрыЗагрузки.ПрограммаБанк = "ФРАНСАБАНК" И Тег = "Type" Тогда
			ДанныеРасчетногоСчета.РасчСчет = ПолучитьНомерРасчетногоСчетаФрансабанк(СтрокаРазбора);
			Продолжить;
		КонецЕсли;
		
		Если Тег = "Time" Или Тег = "Date" Тогда
			ДатаВремяСоздания = ПолучитьДатуИзСтроки(Значение);
			
			ЗаголовокВыписки.ДатаСоздания = Формат(ДатаВремяСоздания, "ДЛФ=D");
			ЗаголовокВыписки.ВремяСоздания = Формат(ДатаВремяСоздания, "ДЛФ=T");
			
			ПараметрыЗагрузки.Вставить("ДатаВыписки", ДатаВремяСоздания);
			
			Продолжить;
		КонецЕсли;
		
		СписокКлючей = ПолучитьПараметрОбмена(ИдентификаторыФайлаОбмена, Тег);
		Для каждого ПараметрОбмена Из СписокКлючей Цикл
			Если ПустаяСтрока(ПараметрОбмена) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеРасчетногоСчета.Свойство(ПараметрОбмена) И ПустаяСтрока(ДанныеРасчетногоСчета[ПараметрОбмена]) Тогда
				Если ПараметрОбмена = "РасчСчет" Тогда
					Для каждого НомерСчета Из ПараметрыЗагрузки.ЗагружаемыеБанковскиеСчетаОрганизаций Цикл
						Если СтрНайти(Значение, НомерСчета) > 0 Тогда
							Значение = НомерСчета;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Не ПараметрыЗагрузки.ЧисловыеИдентификаторыОбмена.Найти(ПараметрОбмена) = Неопределено Тогда
					Значение = Строка(ПреобразоватьВЧисло(Значение, ПараметрыЗагрузки));
				ИначеЕсли ПараметрОбмена = "ДатаНачала" Тогда
					Значение = ПолучитьДатуИзСтроки(Значение);
				ИначеЕсли ПараметрОбмена = "ДатаКонца" Тогда
					Значение = КонецДня(ПолучитьДатуИзСтроки(Значение));
				КонецЕсли;
				
				ДанныеРасчетногоСчета[ПараметрОбмена] = Значение;
				ЗаполнитьЗначенияСвойств(ЗаголовокВыписки, ДанныеРасчетногоСчета);
			ИначеЕсли ЗаголовокВыписки.Свойство(ПараметрОбмена) И ПустаяСтрока(ЗаголовокВыписки[ПараметрОбмена]) Тогда
				Заполнение = Новый Структура;
				Заполнение.Вставить(ПараметрОбмена, Значение);
				ЗаполнитьЗначенияСвойств(ЗаголовокВыписки, Заполнение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеРасчетногоСчета;
КонецФункции

Функция ПолучитьНомерРасчетногоСчетаФрансабанк(СтрокаРазбора)
	ПозицияСчета = Найти(СтрокаРазбора, "Acc=");
	НомерСчета = СокрЛП(Прав(СтрокаРазбора, СтрДлина(СтрокаРазбора) - ПозицияСчета - 3));
	Возврат НомерСчета;
КонецФункции

Функция ЗагрузитьБанковскиеОперации(ИдентификаторыФайлаОбмена, ПараметрыЗагрузки, ПравилаЧтенияВыпискиБанка, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки)
	Результат = Новый Массив;
	СтрокаДокумента = ТегиСтрокиДокумента();
	
	Пока ТекущаяСтрока <= КоличествоСтрок Цикл
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки); // ТекущаяСтрока++
		
		Тег = "";
		Значение = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			СписокКлючей = ПолучитьПараметрОбмена(ИдентификаторыФайлаОбмена, Тег);
			Для каждого ПараметрОбмена Из СписокКлючей Цикл
				Если ЗначениеЗаполнено(ПараметрОбмена) Тогда
					Если ПараметрОбмена = "Дата" Тогда
						СтрокаДокумента["Дата"] = ПолучитьДатуИзСтроки(Значение);
						СтрокаДокумента["ДатаПроведения"] = СтрокаДокумента["Дата"];
					ИначеЕсли ПараметрОбмена = "СуммаДокументаДебет" Или ПараметрОбмена = "СуммаДокументаКредит" Тогда
						Значение = ПреобразоватьВЧисло(Значение, ПараметрыЗагрузки);
						Если Значение <> 0 Тогда
							Если ПараметрОбмена = "СуммаДокументаКредит" Тогда
								СтрокаДокумента.Исходящий = Ложь; // ПоступлениеБезналичныхДенежныхСредств
								Если ПустаяСтрока(СтрокаДокумента["ПлательщикСчет"]) Тогда
									//СтрокаДокумента["ПлательщикСчет"] = ПараметрыЗагрузки.РасчетныйСчет.НомерСчета; //TODO
								КонецЕсли;
							Иначе
								СтрокаДокумента.Исходящий = Истина;
							КонецЕсли;
							
							СтрокаДокумента["Сумма"] = Значение;
							//СтрокаДокумента["СуммаВзаиморасчетов"] = Значение;
						КонецЕсли;
					ИначеЕсли ПараметрОбмена = "ПлательщикСчет" Тогда
						Если ПустаяСтрока(СтрокаДокумента["ПлательщикСчет"]) Тогда
							//Значение = УчетБланковСтрогойОтчетностиКлиентСервер.ОставитьВСтрокеЦифровыеСимволы(Значение);
							СтрокаДокумента["ПлательщикСчет"] = Значение;
						КонецЕсли;
						//СтрокаДокумента["СчетКонтрагента"] = Значение;
					ИначеЕсли ПараметрОбмена = "ПолучательИНН" Тогда
						//Значение = УчетБланковСтрогойОтчетностиКлиентСервер.ОставитьВСтрокеЦифровыеСимволы(Значение);
						СтрокаДокумента["ПолучательИНН"] = Значение;
					Иначе
						Если СтрокаДокумента.Свойство(ПараметрОбмена) И ПустаяСтрока(СтрокаДокумента[ПараметрОбмена]) Тогда
							СтрокаДокумента[ПараметрОбмена] = Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
				
			Если Не ПравилаЧтенияВыпискиБанка.СекцияДокументКонец.Найти(Тег) = Неопределено Тогда
				СтрокаДокумента.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтрокаДокумента.ПолучательИНН);
				Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					//СтрокаДокумента.СчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.СчетКонтрагента);
					СтрокаДокумента.Партнер = СтрокаДокумента.Контрагент.Партнер;
					
					Если ТипЗнч(СтрокаДокумента.Исходящий) = Тип("Булево") И Не СтрокаДокумента.Исходящий Тогда // ПоступлениеБезналичныхДенежныхСредств
						Запрос = Новый Запрос;
						Запрос.Текст =
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ДоговорыКонтрагентов.Ссылка КАК ОбъектРасчетов,
						|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
						|ИЗ
						|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|ГДЕ
						|	ДоговорыКонтрагентов.Партнер = &Партнер
						|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
						|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
						|	И ДоговорыКонтрагентов.Организация = &Организация
						|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)";
						Запрос.УстановитьПараметр("Партнер", СтрокаДокумента.Партнер);
						Запрос.УстановитьПараметр("Организация", ПараметрыЗагрузки.Организация);
						
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выбрать();
						Если Выборка.Количество() = 1 Тогда
							Выборка.Следующий();
							СтрокаДокумента.ОбъектРасчетов = Выборка.ОбъектРасчетов;
							СтрокаДокумента.ОснованиеПлатежа = Выборка.ОбъектРасчетов;
							СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
							СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
						КонецЕсли;
					КонецЕсли;
				Иначе
					//Если ТипЗнч(СтрокаДокумента.Исходящий) = Тип("Булево") И СтрокаДокумента.Исходящий Тогда
					//	СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
					//ИначеЕсли ТипЗнч(СтрокаДокумента.Исходящий) = Тип("Булево") И Не СтрокаДокумента.Исходящий Тогда
					//	СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
					//КонецЕсли;
					//
					//СтрокаДокумента.Контрагент = Справочники.Организации.НайтиПоРеквизиту("ИНН", СтрокаДокумента.ПолучательИНН);
					//СтрокаДокумента.СчетКонтрагента = Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.СчетКонтрагента);
				КонецЕсли;
				
				Результат.Добавить(СтрокаДокумента);
				СтрокаДокумента = ТегиСтрокиДокумента();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки)
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) Или Лев(Буфер, 1) = "[" Или Лев(Буфер, 2) = "**" Или Лев(Буфер, 2) = "##" Цикл
		Если ТекущаяСтрока > КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = СтрокиВыписки[ТекущаяСтрока - 1];
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
	
	ПроверкаЗакрытыйТег = Истина;
	Пока ПроверкаЗакрытыйТег Цикл
		КоличествоСлужебныхСимволов = 0; // "^"
		ДлинаБуфер = СтрДлина(Буфер);
		
		К = 1;
		Пока К <= ДлинаБуфер Цикл
			Если Сред(Буфер, К, 1) = "^" Тогда
				КоличествоСлужебныхСимволов = КоличествоСлужебныхСимволов + 1;
			КонецЕсли;
			К = К + 1;
		КонецЦикла;
		
		Если КоличествоСлужебныхСимволов % 2 = 0 Тогда
			ПроверкаЗакрытыйТег = Ложь;
		Иначе
			Если ТекущаяСтрока <= КоличествоСтрок Тогда
				ПроверкаЗакрытыйТег = Истина;
				Буфер = Буфер + СокрЛП(СтрокиВыписки[ТекущаяСтрока - 1]);
				ТекущаяСтрока = ТекущаяСтрока + 1;
			Иначе
				ПроверкаЗакрытыйТег = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Буфер;
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	СтрокаРазбора = СтрЗаменить(СтрокаРазбора, "^", "");
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат Не ПустаяСтрока(Тег);
КонецФункции

Функция ТегиСтрокиДокумента()
	Возврат Новый Структура(
	"Номер, Дата, Сумма, ВидОперации, ДатаПроведения,
	|ВидПлатежа, ВидОплаты, Операция,
	|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
	|ДатаСписано, ДатаПоступило,
	|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1,
	|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
	|Плательщик2, Плательщик3, Плательщик4,
	|ПолучательСчет, Получатель, ПолучательИНН, Получатель1, ПолучательБИК,
	|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
	|Получатель2, Получатель3, Получатель4,
	|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
	|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
	|Код,
	|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
	|СрокПлатежа, Очередность,
	|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
	|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок,
	|ДанныеВыписки,
	|Контрагент, СчетКонтрагента, Партнер, СтатьяДвиженияДенежныхСредств, СуммаВзаиморасчетов, ВалютаВзаиморасчетов, Исходящий, ОбъектРасчетов, ОснованиеПлатежа, НайденоОснованиеПлатежа,
	|ИмяКонтрагента");
КонецФункции

Функция ПолучитьСоответствиеРеквизитовДокументаИВнутреннихТеговВыписки(ПараметрыЗагрузки)
	ПрограммаБанк = ПараметрыЗагрузки.ПрограммаБанк;
	
	НоваяЗапись = Новый Соответствие;
	НоваяЗапись.Вставить("Номер", МассивИзСтроки("Num, NDoc, NumDocD, NumDocK"));
	НоваяЗапись.Вставить("Дата", МассивИзСтроки("DocDate, DateOpD, DateOpK"));
	НоваяЗапись.Вставить("Операция", МассивИзСтроки("Opr, CD, CK"));
	
	//НоваяЗапись.Вставить("Получатель", МассивИзСтроки("Name")); // Владелец расчетного счета файла выписки
	НоваяЗапись.Вставить("Получатель", МассивИзСтроки("KorName, BNNMD, PLNMK"));
	НоваяЗапись.Вставить("ПолучательБИК", МассивИзСтроки("Cod"));
	НоваяЗапись.Вставить("ПолучательСчет", МассивИзСтроки("Acc, AccKorD, AccKorK, KorAcc"));
	
	Если ПрограммаБанк = "МОСКВА-МИНСК" Тогда
		//НоваяЗапись.Вставить("ИмяКонтрагента", МассивИзСтроки("KorName, BNNMD, PLNMK"));
		НоваяЗапись.Вставить("ПолучательИНН", МассивИзСтроки("UNNRec"));
	Иначе
		НоваяЗапись.Вставить("ПолучательИНН", МассивИзСтроки("KorUNP, UNNKorr, UNNRec, TPND, TPNK, korUNN"));
	КонецЕсли;
	
	НоваяЗапись.Вставить("Отправитель", МассивИзСтроки("MyBankName, 102, BankName")); // Банк расчетного счета файла выписки
	
	НоваяЗапись.Вставить("Плательщик", МассивИзСтроки("KorName, BNNMD, PLNMK"));
	НоваяЗапись.Вставить("ПлательщикСчет", МассивИзСтроки("Acc, AccKorD, AccKorK, KorAcc"));
	
	НоваяЗапись.Вставить("НазначениеПлатежа", МассивИзСтроки("Nazn, NaznD, NaznK"));
	НоваяЗапись.Вставить("НазначениеПлатежа1", МассивИзСтроки("Nazn2, Nazn2D, Nazn2K"));
	
	Если ПрограммаБанк = "АБСОЛЮТБАНК" Или ПрограммаБанк = "БЕЛИНВЕСТБАНК" Тогда
		НоваяЗапись.Вставить("РасчСчет", МассивИзСтроки("Header5, Header4"));
	ИначеЕсли ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Тогда
		НоваяЗапись.Вставить("РасчСчет", МассивИзСтроки("AccN"));
	ИначеЕсли ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Тогда
		НоваяЗапись.Вставить("РасчСчет", МассивИзСтроки("ClientAcc"));
	Иначе
		НоваяЗапись.Вставить("РасчСчет", МассивИзСтроки("Header4"));
	КонецЕсли;
	
	НоваяЗапись.Вставить("ДатаНачала", МассивИзСтроки("DateBegin, InDate, DateIn, Date1"));
	НоваяЗапись.Вставить("ДатаКонца", МассивИзСтроки("DateEnd, DateOut, Date2"));
	
	Если ПараметрыЗагрузки.ВалютныйСчет Тогда
		НоваяЗапись.Вставить("НачальныйОстаток", МассивИзСтроки(""));
		НоваяЗапись.Вставить("КонечныйОстаток", МассивИзСтроки(""));
		НоваяЗапись.Вставить("ВсегоСписано", МассивИзСтроки("DebVQ"));
		НоваяЗапись.Вставить("ВсегоПоступило", МассивИзСтроки("CreVQ"));
	Иначе
		Если ПрограммаБанк = "МОСКВА-МИНСК" Тогда
			НоваяЗапись.Вставить("НачальныйОстаток", МассивИзСтроки("CrIn"));
			НоваяЗапись.Вставить("КонечныйОстаток", МассивИзСтроки("CrOut"));
		Иначе
			НоваяЗапись.Вставить("НачальныйОстаток", МассивИзСтроки("RestIn, StartAmount, RestInS, SummPas_ActivVal, CrIn"));
			НоваяЗапись.Вставить("КонечныйОстаток", МассивИзСтроки("RestOut, RestOutS, DebIn, CrOut"));
		КонецЕсли;
		
		НоваяЗапись.Вставить("ВсегоСписано", МассивИзСтроки("DB"));
		НоваяЗапись.Вставить("ВсегоПоступило", МассивИзСтроки("CR"));
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ВалютныйСчет Тогда
		НоваяЗапись.Вставить("СуммаДокументаДебет", МассивИзСтроки("DebQ"));
		НоваяЗапись.Вставить("СуммаДокументаКредит", МассивИзСтроки("CreQ"));
	Иначе
		НоваяЗапись.Вставить("СуммаДокументаДебет", МассивИзСтроки("Db, AmmValD"));
		НоваяЗапись.Вставить("СуммаДокументаКредит", МассивИзСтроки("Credit, AmmValK"));
	КонецЕсли;
	
	НоваяЗапись.Вставить("ВерсияФормата", МассивИзСтроки("Version"));
	
	Возврат НоваяЗапись;
КонецФункции

Функция ПравилаЧтенияВыписки(ПараметрыЗагрузки)
	ПрограммаБанк = ПараметрыЗагрузки.ПрограммаБанк;
	
	Результат = Новый Структура;
	
	Если ПрограммаБанк = "АЛЬФАБАНК" Или ПрограммаБанк = "АБСОЛЮТБАНК" Или ПрограммаБанк = "ИДЕЯБАНК" Или ПрограммаБанк = "БЕЛИНВЕСТБАНК"
		Или ПрограммаБанк = "ПРИОРБАНК" Или ПрограммаБанк = "МОСКВА-МИНСК" Или ПрограммаБанк = "БСББАНК" Тогда
		
		Результат.Вставить("СекцияДокументНачало", МассивИзСтроки("DocDate"));
	ИначеЕсли ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Тогда
		Результат.Вставить("СекцияДокументНачало", МассивИзСтроки("Date"));
	ИначеЕсли ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Тогда
		Результат.Вставить("СекцияДокументНачало", МассивИзСтроки("CD, CK"));
	ИначеЕсли ПрограммаБанк = "ФРАНСАБАНК" Тогда
		Результат.Вставить("СекцияДокументНачало", МассивИзСтроки("NewStr"));
	КонецЕсли;
	
	Если ПрограммаБанк = "АЛЬФАБАНК" Или ПрограммаБанк = "АБСОЛЮТБАНК" Или ПрограммаБанк = "ИДЕЯБАНК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("OpDate"));
	ИначеЕсли ПрограммаБанк = "БЕЛГАЗПРОМБАНК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("KorName"));
	ИначеЕсли ПрограммаБанк = "БЕЛИНВЕСТБАНК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("CodPayInBudget"));
	ИначеЕсли ПрограммаБанк = "БЕЛВНЕШЭКОНОМБАНК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("Nazn4D, Nazn4K"));
	ИначеЕсли ПрограммаБанк = "ПРИОРБАНК" Или ПрограммаБанк = "ФРАНСАБАНК" Или ПрограммаБанк = "БСББАНК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("Credit"));
	ИначеЕсли ПрограммаБанк = "МОСКВА-МИНСК" Тогда
		Результат.Вставить("СекцияДокументКонец", МассивИзСтроки("Nazn2"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрОбмена(ИдентификаторыФайлаОбмена, ТегОбмена)
	СписокКлючей = Новый Массив;
	
	Если ПустаяСтрока(ТегОбмена) Тогда
		Возврат СписокКлючей;
	КонецЕсли;
	
	Для каждого Стр Из ИдентификаторыФайлаОбмена Цикл
		Для каждого ТегСтрока Из Стр.Значение Цикл
			Если ТегСтрока = ТегОбмена Тогда
				СписокКлючей.Добавить(Стр.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокКлючей;
КонецФункции

Функция МассивИзСтроки(Знач ВходящиеДанные) Экспорт
	ВходящиеДанные = СтрЗаменить(ВходящиеДанные, ",", Символ(13));
	
	МассивТегов = Новый Массив;
	Для Счетчик = 1 По СтрЧислоСтрок(ВходящиеДанные) Цикл
		ТекСтрока = СокрЛП(СтрПолучитьСтроку(ВходящиеДанные, Счетчик));
		МассивТегов.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат МассивТегов;
КонецФункции

Функция ПолучитьДатуИзСтрокиБТАБАНК(Знач ДатаСтрока, НайтиВремя = Ложь) Экспорт
	ГодЗн = Число(Сред(ДатаСтрока, 7, 4));
	МесяцЗн = Число(Сред(ДатаСтрока, 4, 2));
	ДеньЗн = Число(Сред(ДатаСтрока, 1, 2));
	
	Если НайтиВремя Тогда
		ЧасЗн = Число(Сред(ДатаСтрока, 12, 2));
		МинутаЗн = Число(Сред(ДатаСтрока, 15, 2));
		СекундаЗн = Число(Сред(ДатаСтрока, 18, 2));
		Результат = Дата(ГодЗн, МесяцЗн, ДеньЗн, ЧасЗн, МинутаЗн, СекундаЗн);
	Иначе
		Результат = Дата(ГодЗн, МесяцЗн, ДеньЗн);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти