
#Область ПрограммныйИнтерфейс

// Открывает кассовую смену для кассы ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ.
//  ОписаниеОшибки - Строка - Описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина, Если операция выполнена успешно.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	Возврат РозничныеПродажи.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	
КонецФункции

// Закрывает кассовую смену для кассы ККМ.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Касса ККМ.
//  ОшибкаПриСнятииZОтчета - Булево - Признак успешного снятия z-отчета.
//  ОписаниеОшибки - Строка - Выходной параметр - описание ошибки.
//
// Возвращаемое значение:
//  Массив - Массив созданных отчетов о розничных продажах.
//
Функция ЗакрытьКассовуюСмену(Объект, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	Возврат РозничныеПродажи.ВыполнитьОперациюЗакрытияКассовойСмены(Объект, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
	
КонецФункции

// Создать документ внесение денежных средств в кассу ККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Реквизиты документа.
//  ОписаниеОшибки - Строка - Описание ошибки.
// 
// Возвращаемое значение:
//   Булево - Истина, если создание документа выполнено успешно.
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные);
		
	Исключение
		
		Результат = Ложь;
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		                         УровеньЖурналаРегистрации.Ошибка, , ,
		                         НСтр("ru = 'Во время создания документа внесения денежных средств в кассу ККМ произошла ошибка.'")
		                         + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Создать документ выемка денежных средств из кассы ККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Структура с реквизитами документа.
//  ОписаниеОшибки - Строка - Описание ошибки.
// 
// Возвращаемое значение:
//   Булево - Истина, если создание документа выполнено успешно.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные);
		
	Исключение
		
		Результат = Ложь;
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		                         УровеньЖурналаРегистрации.Ошибка, , ,
		                         НСтр("ru = 'Во время создания документа выемки денежных средств из кассы ККМ произошла ошибка.'")
		                         + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру описания кассовой смены для кассы ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ.
//
// Возвращаемое значение:
//  Структура - Структура описания кассовой смены, см. функцию РозничныеПродажи.ПолучитьСтруктуруОписанияКассовойСмены().
//
Функция СостояниеКассовойСмены(КассаККМ) Экспорт
	
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции

// Получает штрихкоды номенклатуры
//
// Параметры:
//  Структура	 - Структура - Структура перданных параметров 
// 
// Возвращаемое значение:
//  МассивШтрихкодов - Массив штрихкодов номенклатуры
//
Функция ПолучитьШтрихкодыНоменклатуры(Структура) Экспорт
	
	МассивШтрихкодов = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ТекстЗапросаКоэффициентУпаковки КАК КоличествоЕдиничныхУпаковок,
	|	УпаковкиНоменклатуры.Владелец,
	|	УпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ГДЕ
	|	&ТекстЗапросаКоэффициентУпаковки = 1
	|	И УпаковкиНоменклатуры.ПометкаУдаления = ЛОЖЬ
	|	И (УпаковкиНоменклатуры.Владелец = &Владелец
	| 	ИЛИ УпаковкиНоменклатуры.Владелец = &НаборУпаковок)
	|	И УпаковкиНоменклатуры.Владелец.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("УпаковкиНоменклатуры", Неопределено));
	НаборУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура,"НаборУпаковок");
	Запрос.УстановитьПараметр("НаборУпаковок", НаборУпаковок);
	Запрос.УстановитьПараметр("Владелец", Структура.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕдиничнаяУпаковка = Выборка.Ссылка;
		// Поиск штрихкодов по единичной упаковке и по единице измерения имеет смысл только тогда,
		// когда у номенклатуры 1 упаковка с коэффициентом 1 и ед. изм. 1.
		Если Не Выборка.Следующий()  Тогда
			Если ЕдиничнаяУпаковка = Структура.Упаковка Тогда
				МассивШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Структура.Номенклатура,
																								Структура.Характеристика,
																								Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			Иначе
				МассивШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Структура.Номенклатура,
																								Структура.Характеристика,
																								ЕдиничнаяУпаковка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		
		МассивШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Структура.Номенклатура,
																						Структура.Характеристика,
																						Структура.Упаковка);
					
	Иначе
		
		МассивШтрихкодовУпаковкиСтруктуры = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Структура.Номенклатура,
																										 Структура.Характеристика,
																										 Структура.Упаковка);
					
		Для Каждого Штрихкод Из МассивШтрихкодовУпаковкиСтруктуры Цикл 
			МассивШтрихкодов.Добавить(Штрихкод);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивШтрихкодов;
	
КонецФункции

// Заполнить реквизит формы "РеквизитыКассира".
//
// Параметры:
//  Кассир - Справочник.Пользователи - Кассир.
//
Функция РеквизитыКассира(Знач Кассир = Неопределено) Экспорт
	
	Если Кассир = Неопределено Тогда
		Кассир = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Возврат РозничныеПродажи.РеквизитыКассира(Кассир);
	
КонецФункции

Функция ИспользуетсяККТФЗ54(КассоваяСмена) Экспорт
	
	ИспользуетсяККТФЗ54 = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассоваяСмена.ФискальноеУстройство.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Ссылка = &КассоваяСмена
	|");
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ИспользуетсяККТФЗ54 = (Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ);
		
	КонецЕсли;
	
	Возврат ИспользуетсяККТФЗ54;
	
КонецФункции

Функция НайтиПартнераПоКонтактнымДаннымЭлектронногоЧека(ВариантОтправкиЭлектронногоЧека, КонтактныеДанные) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		
		ПараметрПоиска = "%" + Прав(КонтактныеДанные, 10);
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартнерыКонтактнаяИнформация.Ссылка,
		|	ПартнерыКонтактнаяИнформация.Ссылка.ВариантОтправкиЭлектронногоЧека КАК ВариантОтправкиЭлектронногоЧека,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО &КонтактныеДанные";
		
	ИначеЕсли ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		
		ПараметрПоиска = КонтактныеДанные;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартнерыКонтактнаяИнформация.Ссылка,
		|	ПартнерыКонтактнаяИнформация.Ссылка.ВариантОтправкиЭлектронногоЧека КАК ВариантОтправкиЭлектронногоЧека,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.АдресЭП = &КонтактныеДанные";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонтактныеДанные", ПараметрПоиска);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Партнер",                         Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ВариантОтправкиЭлектронногоЧека", Выборка.ВариантОтправкиЭлектронногоЧека);
		ВозвращаемоеЗначение.Вставить("Email",                           Выборка.АдресЭП);
		ВозвращаемоеЗначение.Вставить("Телефон",                         РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(Выборка.НомерТелефона));
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ПрограммныйИнтерфейс_ЕГАИС

// Функция проверяет наличие расхождений между ТТН ЕГАИС и товарами накладной
//	
//	Параметры:
//		ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС
//	
//	Возвращаемое значение:
//		Булево - есть расхождения.
//	
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТоварноТранспортнаяНакладнаяЕГАИС, ПоступлениеТоваров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура КАК Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика КАК Характеристика,
		|	СУММА(ТТНВходящаяЕГАИСТовары.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН, 1)) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
		|		ПО (КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка)
		|			И ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.ИдентификаторУпаковки
		|ГДЕ
		|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ПоступлениеТоваров
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ВтТоварыПоступления.Характеристика КАК Характеристика,
		|	ВтТоварыПоступления.Количество КАК Количество,
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|			И ВтТоварыПоступления.Характеристика = ВтТоварыТТН.Характеристика
		|ГДЕ
		|	(ВтТоварыПоступления.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL )");
		
	Запрос.УстановитьПараметр("ТТНСсылка", ТоварноТранспортнаяНакладнаяЕГАИС);
	Запрос.УстановитьПараметр("ПоступлениеТоваров", ПоступлениеТоваров);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТТН",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка",
		"КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();
	
	
КонецФункции

//Функция проверяет сопоставлены ли все товары и организации в ТТН
//	
//	Параметры:
//		ТТНСсылка - ДокументСсылка.ТТНВходящаяЕГАИС
//		ДопПараметры - Структура - возвращаемая структура реквизитов ТТН
//
//	Возвращаемое значение:
//		Булево - все сопоставлено.
//	
Функция ТТНПолностьюСопоставлена(ТТНСсылка, ДопПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТНВходящаяЕГАИС.Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИСТовары.Ссылка = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНСсылка
	|	И (НЕ ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция.Сопоставлено
	|			ИЛИ НЕ ЕСТЬNULL(ТТНВходящаяЕГАИС.Грузоотправитель.Сопоставлено, ИСТИНА)
	|			ИЛИ НЕ ЕСТЬNULL(ТТНВходящаяЕГАИС.Грузополучатель.Сопоставлено, ИСТИНА)
	|			ИЛИ НЕ ЕСТЬNULL(ТТНВходящаяЕГАИС.Поставщик.Сопоставлено, ИСТИНА));
	|");
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНСсылка,
		|	ТТНВходящаяЕГАИС.ТорговыйОбъект КАК Склад,
		|	ТТНВходящаяЕГАИС.Организация КАК Организация,
		|	ЕСТЬNULL(ТТНВходящаяЕГАИС.Поставщик.Контрагент, ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК Контрагент
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТТНСсылка", ТТНСсылка);
	Результат = Запрос.ВыполнитьПакет();
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДопПараметры, Выборка);
	КонецЕсли;
	
	Возврат Результат[0].Пустой();
	
КонецФункции

// Проверка константы "Разрешать продажу алкогольной продукции без сопоставления ЕГАИС"
// 
// Возвращаемое значение:
//  Булево - возвращает значение константы
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС.Получить();
	
КонецФункции

Процедура ЗаполнитьРасхожденияВДокументеТТНВходящая(ТоварноТранспортнаяНакладнаяЕГАИС, Расхождения) Экспорт
	
	ТаблицаРасхождений = Расхождения.Выгрузить();
	
	Попытка
		
		ДокументОбъект = ТоварноТранспортнаяНакладнаяЕГАИС.ПолучитьОбъект();
		ДокументОбъект.ЕстьРасхождения = Истина;
		Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
			НайденнаяСтрока = ТаблицаРасхождений.Найти(СтрокаТовары.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				СтрокаТовары.КоличествоФакт = НайденнаяСтрока.КоличествоФакт;
			Иначе
				СтрокаТовары.КоличествоФакт = СтрокаТовары.Количество;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать();
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОрганизациюКассуККМ(КассоваяСмена, КассаККМ, Организация) Экспорт
	
	КассоваяСменаОбъект = КассоваяСмена.ПолучитьОбъект();
	КассоваяСменаОбъект.КассаККМ    = КассаККМ;
	КассоваяСменаОбъект.Организация = Организация;
	КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти
