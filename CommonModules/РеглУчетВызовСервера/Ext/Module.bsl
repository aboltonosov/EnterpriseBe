
#Область ПрограммныйИнтерфейс

// Проверяет переданные документы на факт отражения в регл. учете при наличии прав на формирование проводок
//
// Параметры:
//    МассивДокументов - Массив - Документы
//
// Возвращаемое значение:
//    Массив - Документы, которые не отражены в регл. учете
//
Функция ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(МассивДокументов) Экспорт
	
	Возврат РеглУчетПроведениеСервер.ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(МассивДокументов);
	
КонецФункции

// Выполняет попытку отражения документов в регл. учете
//
// Параметры:
//	Документы - Массив - документы, которые необходимо отразить в регл. учете
//	ВыполнитьПересчеты - Булево - Признак, что перед отражением документа необходимо выполнить отражение в учете НДС и распределение взаиморасчетов.
//
// Возвращаемое значение:
//	Массив - Не отраженные в регл. учете документы
//
Функция ОтразитьДокументыВРеглУчете(МассивДокументов, ВыполнитьПересчеты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РеглУчетПроведениеСервер.ОтразитьДокументыВРеглУчете(МассивДокументов, ВыполнитьПересчеты);
	
КонецФункции

// Возвращает строкое представление отражения в регл. учете
//
// Параметры:
// 	ОтражениеВРеглУчете - ДанныеФормыКоллекция - коллекция, содержащая поля
// 		* СчетУчета - ПланСчетовСсылка.Хозрасчетный - Счет учета
// 		* Субконто1 - Характеристика.ВидыСубконтоХозрасчетные - Субконто 1
// 		* Субконто2 - Характеристика.ВидыСубконтоХозрасчетные - Субконто 2
// 		* Субконто3 - Характеристика.ВидыСубконтоХозрасчетные - Субконто 3
// 	ПодбираемыеАналитики - Массив типов аналитик, которые могут быть подобраны автоматически
//
// Возвращаемое значение:
// 	 Результат - Строка - Представление отражения в регл. учете
//
Функция ПредставлениеОтраженияВРеглУчете(ОтражениеВРеглУчете, ПодбираемыеАналитики = Неопределено) Экспорт
	
	Результат = НСтр("ru = 'Настроить'");
	
	Если Не ЗначениеЗаполнено(ОтражениеВРеглУчете.СчетУчета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Строка(ОтражениеВРеглУчете.СчетУчета));
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОтражениеВРеглУчете.СчетУчета);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ЗначениеСубконто = ОтражениеВРеглУчете["Субконто" + НомерСубконто];
		
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			МассивПолей.Добавить(Строка(ЗначениеСубконто));
		ИначеЕсли ПодбираемыеАналитики = Неопределено Тогда
			МассивПолей.Добавить("<...>");
		Иначе
			
			ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			
			ПредставлениеЗаполнено = Ложь;
			Для Каждого Аналитика Из ПодбираемыеАналитики Цикл
				Если ОписаниеТиповСубконто.СодержитТип(Аналитика) Тогда
					ПредставлениеЗаполнено = Истина;
					МассивПолей.Добавить(НСтр("ru = '<авто>'"));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПредставлениеЗаполнено Тогда
				МассивПолей.Добавить("<...>");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СтрСоединить(МассивПолей, ", ");
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет строковое представление отражения в регл. учете строки таблицы формы
//
// Параметры:
// 	ТаблицаФормы - ДанныеФормыКоллекция - Данные табличной части
// 	ПодбираемыеАналитики - Массив - Типы аналитик, которые могут быть подобраны автоматически
//
Процедура ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(ТаблицаФормы, ПодбираемыеАналитики = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") ИЛИ Не ПравоДоступа("Чтение", Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		
		СтрокаТаблицы.ПредставлениеОтраженияВРеглУчете = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(СтрокаТаблицы, ПодбираемыеАналитики);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура дополняет условное оформление элементами, обеспечивающими совместное отображение в табличной части
// настроек счетов регл. учета доходов, расходов и прочих активов/пассивов
//
// Параметры:
// 	 Форма - УправляемаяФорма - Форма, для которой необходимо добавить условное оформление
// 	 ИмяТЧ - Строка - имя табличной части
// 	 ТипыСтатей - Массив - Типы статей, которые используются в ТЧ (1 - Статьи расходов, 2 - Статьи доходов, 3 - СтатьиАктивовПассивов)
//
Процедура УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если ТипыСтатей.Найти(1)  <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется для статьи расходов>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 1;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	Если ТипыСтатей.Найти(2)  <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаДоходов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется для статьи доходов>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаДоходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 2;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	Если ТипыСтатей.Найти(3) <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПредставлениеОтраженияВРеглУчете");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст",  НСтр("ru = 'Настроить'"));
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 3;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция опеределяет необходимость задать вопрос об установе вида деятельности НДС "ВводОСВЭксплуатацию"
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, вид деятельности НДС в котором необходимо проверить
//
// Возвращаемое значение:
// 	 Результат - Булево - Признак необходимости задать вопрос 
//
Функция ЗадаватьВопросПоИзменениюДеятельности(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда 
	    Результат = ЗадаватьВопросПоИзменениюДеятельностиПоступлениеУслугПрочихАктивов(Объект);
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда 
	    Результат = ЗадаватьВопросПоИзменениюДеятельностиВнутреннееПотреблениеТоваров(Объект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗадаватьВопросПоИзменениюДеятельностиПоступлениеУслугПрочихАктивов(Объект)
	
	Результат = Новый Структура;
	Результат.Вставить("Задавать", Ложь);
	Результат.Вставить("ТекстВопроса", НСтр("ru = 'Оформляется поступление прочих активов, учитываемых на счете 08.04 (08.05). Установить закупку под деятельнось ""Ввод в экспулатацию ОС/НМА""?'"));
	
	ДеятельностьНДС = Объект.ЗакупкаПодДеятельность;
	Если ДеятельностьНДС = Перечисления.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расходы.НомерСтроки    КАК НомерСтроки,
	|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
	|	Расходы.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Расходы.СчетУчета      КАК СчетУчета
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	&Расходы КАК Расходы
	|;
	|
	|ВЫБРАТЬ
	|	Расходы.НомерСтроки,
	|	Расходы.СтатьяРасходов,
	|	Расходы.СчетУчета
	|ИЗ
	|	Расходы КАК Расходы
	|	
	|ГДЕ
	|	Расходы.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|	И (Расходы.АналитикаАктивовПассивов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|		ИЛИ Расходы.АналитикаАктивовПассивов ССЫЛКА Справочник.НематериальныеАктивы)
	|	И Расходы.СчетУчета В ИЕРАРХИИ (
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств),
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов))
	|";
	Запрос.УстановитьПараметр("Расходы",  Объект.Расходы.Выгрузить(,"НомерСтроки, СтатьяРасходов, АналитикаАктивовПассивов, СчетУчета"));
	
	ШаблонСообщения = НСтр("ru = 'В строке ""%1"" выбран счет учета %2'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСтроки, Выборка.СчетУчета);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", Выборка.НомерСтроки, "СтатьяРасходов");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Неопределено, 
			Поле, 
			"Объект",
			Результат.Задавать);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗадаватьВопросПоИзменениюДеятельностиВнутреннееПотреблениеТоваров(Объект)
	
	Результат = Новый Структура;
	Результат.Вставить("Задавать", Ложь);
	Результат.Вставить("ТекстВопроса", НСтр("ru = 'Оформляется списание на прочие активы, учитываемых на счете 08.04 (08.05). Установить потребление под деятельнось ""Ввод в экспулатацию ОС/НМА""?'"));
	
	ДеятельностьНДС = Объект.ПотреблениеДляДеятельности;
	Если ДеятельностьНДС = Перечисления.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки    КАК НомерСтроки,
	|	Товары.СтатьяРасходов КАК СтатьяРасходов,
	|	Товары.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Товары.СчетУчета      КАК СчетУчета
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.СтатьяРасходов,
	|	Товары.СчетУчета
	|ИЗ
	|	Товары КАК Товары
	|	
	|ГДЕ
	|	Товары.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|	И (Товары.АналитикаАктивовПассивов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|		ИЛИ Товары.АналитикаАктивовПассивов ССЫЛКА Справочник.НематериальныеАктивы)
	|	И Товары.СчетУчета В ИЕРАРХИИ (
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств),
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов))
	|";
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить(, "НомерСтроки, СтатьяРасходов, АналитикаАктивовПассивов, СчетУчета"));
	
	ШаблонСообщения = НСтр("ru = 'В строке ""%1"" выбран счет учета %2'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСтроки, Выборка.СчетУчета);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Неопределено, 
			Поле, 
			"Объект",
			Результат.Задавать);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти



