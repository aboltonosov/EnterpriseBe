#Область ФормированниеЭСЧФ

Процедура СформироватьЭлектронныйДокумент(МассивСсылок, ТекстОшибки = "", Отказ = Ложь) Экспорт
	
	Для каждого СсылкаНаОбъект Из МассивСсылок Цикл

		ТипСчетаФактуры  = СсылкаНаОбъект.ТипСчетаФактуры;
		
		Если  ТипСчетаФактуры   = Справочники.ТипыЭСЧФ.Исходный Тогда
			ПространствоИменСхемы = "http://www.w3schools.com";
		ИначеЕсли ТипСчетаФактуры   = Справочники.ТипыЭСЧФ.Дополнительный Тогда
			ПространствоИменСхемы = "http://www.w3schoolsa.com"
		ИначеЕсли ТипСчетаФактуры   = Справочники.ТипыЭСЧФ.Исправленный Тогда	
			ПространствоИменСхемы = "http://www.w3schoolsf.com";
		Иначе
			ПространствоИменСхемы = "http://www.w3schoolsn.com";
		КонецЕсли;	
		
		СтруктураЭД = Новый Структура;
		
		Если ЗаполнитьЭСЧФ(СсылкаНаОбъект, ПространствоИменСхемы, ТипСчетаФактуры, СтруктураЭД) Тогда
			
			Если УдалитьПространствоИмен(СтруктураЭД.ИмяФайла, ПространствоИменСхемы) Тогда
				
				// Сформируем и заполним структуру электронного документа.
				СтруктураЭД.Вставить("НаправлениеЭД", 				Перечисления.НаправленияЭД.Исходящий);
				СтруктураЭД.Вставить("ДатаДокументаОтправителя",    СсылкаНаОбъект.Дата);
				СтруктураЭД.Вставить("ВладелецЭД",    				СсылкаНаОбъект);
				струкЗаменыРеквизитов = ПолучитьСтруктуруРеквизитовДокументаДляЗаменыПоУниверсальнымИменам(СсылкаНаОбъект);
				СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", 		Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				СтруктураЭД.Вставить("СтатусЭД", 					Перечисления.СтатусыЭД.Сформирован);
				СтруктураЭД.Вставить("Автор", 					    Пользователи.АвторизованныйПользователь());
				СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ТекущаяДатаСеанса());
				
				СоздатьПрисоединенныйФайл(СтруктураЭД);
				
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru='Создан электронный документ %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьЭСЧФ(СсылкаНаОбъект, ПространствоИменСхемы, ТипСчетаФактуры, СтруктураЭД) 
	
	Попытка
		
		МассивСчетовФактур = Новый Массив();
		МассивСчетовФактур.Добавить(СсылкаНаОбъект); 
		ТаблицаСчетовФактур = ПолучитьДанныеСчетаФактурыНаРеализацию(МассивСчетовФактур, ТекстЗапросаДляЭДСчетовФактур(СсылкаНаОбъект));
		
		Если ТаблицаСчетовФактур = Неопределено ИЛИ ТаблицаСчетовФактур.Количество()= 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеШапки              = ТаблицаСчетовФактур[0].Выбрать();
		ДанныеТабличнойЧасти     = ТаблицаСчетовФактур[1].Выбрать(); 
		ДанныеДокументаОснования = ТаблицаСчетовФактур[2].Выбрать();
		ДанныеТабличнойЧастиРозн = Неопределено;
		
		ДанныеШапки.Следующий();
		ДанныеДокументаОснования.Следующий();
		
		ПространствоИмен = "";
		
		Исходящий 				=  ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		Дополнительный 			=  ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Дополнительный;
		ДополнительныйБезСсылки =  ТипСчетаФактуры = Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки;
		Исправительный 			=  ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исправленный;
		
		СтрукСтатусовЭСЧФ   = СтруктураСтатусовЭСЧФ(СсылкаНаОбъект);
		НаИмпорт     		= СтрукСтатусовЭСЧФ.НаИмпорт;
		Розница      		= СтрукСтатусовЭСЧФ.Розница;
		ЭтоЭкспорт			= СтрукСтатусовЭСЧФ.ЭтоЭкспорт;
		
		Корректировочный 	= НЕ Исходящий; 
		
		Если НаИмпорт Тогда 
			
			СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Контрагент,  ДанныеШапки.Дата);
			СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Организация, ДанныеШапки.Дата);
			ОрганизацияУНП      = СокрЛП(СведенияОПокупателе.ИНН);  
			
			ПоставщикВзаимозависимоеЛицо   = ДанныеШапки.КонтрагентВзаимозависимоеЛицо;
			ПоставщикРезидентОффшорнойЗоны = ДанныеШапки.КонтрагентРезидентОффшорнойЗоны;
			ПоставщикТоварыПоПеречню       = ДанныеШапки.КонтрагентСделкаСТоварамиПоПеречню;
			ПоставщикКрупныйПлательщик     = ДанныеШапки.КонтрагентКрупныйПлательщикНДС;
			ПоставщикКодСтраныРегистрации  = ДанныеШапки.КонтрагентКодСтраныРегистрации;
			ПоставщикКодПодразделения      = ДанныеШапки.КонтрагентКодФилиала;
			
			ПолучательВзаимозависимоеЛицо   = ДанныеШапки.ОрганизацияВзаимозависимоеЛицо;
			ПолучательРезидентОффшорнойЗоны = ДанныеШапки.ОрганизацияРезидентОффшорнойЗоны;
			ПолучательТоварыПоПеречню       = ДанныеШапки.ОрганизацияСделкаСТоварамиПоПеречню;
			ПолучательКрупныйПлательщик     = ДанныеШапки.ОрганизацияКрупныйПлательщикНДС;
			ПолучательКодСтраныРегистрации  = ДанныеШапки.ОрганизацияКодСтраныРегистрации;
			ПолучательКодПодразделения      = ДанныеШапки.ОрганизацияКодФилиала;
			
		Иначе
			
			СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Организация, ДанныеШапки.Дата);
			СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Контрагент,  ДанныеШапки.Дата);
			ОрганизацияУНП      = СокрЛП(СведенияОПоставщике.ИНН);
			
			ПоставщикВзаимозависимоеЛицо   = ДанныеШапки.ОрганизацияВзаимозависимоеЛицо;
			ПоставщикРезидентОффшорнойЗоны = ДанныеШапки.ОрганизацияРезидентОффшорнойЗоны;
			ПоставщикТоварыПоПеречню       = ДанныеШапки.ОрганизацияСделкаСТоварамиПоПеречню;
			ПоставщикКрупныйПлательщик     = ДанныеШапки.ОрганизацияКрупныйПлательщикНДС;
			ПоставщикКодСтраныРегистрации  = ДанныеШапки.ОрганизацияКодСтраныРегистрации;
			ПоставщикКодПодразделения      = ДанныеШапки.ОрганизацияКодФилиала;
			
			ПолучательВзаимозависимоеЛицо   = ДанныеШапки.КонтрагентВзаимозависимоеЛицо;
			ПолучательРезидентОффшорнойЗоны = ДанныеШапки.КонтрагентРезидентОффшорнойЗоны;
			ПолучательТоварыПоПеречню       = ДанныеШапки.КонтрагентСделкаСТоварамиПоПеречню;
			ПолучательКрупныйПлательщик     = ДанныеШапки.КонтрагентКрупныйПлательщикНДС;
			ПолучательКодСтраныРегистрации  = ДанныеШапки.КонтрагентКодСтраныРегистрации;
			ПолучательКодПодразделения      = ДанныеШапки.КонтрагентКодФилиала;
			
		КонецЕсли;
		
		
		//Поставщик
		ПоставщикНаименование          = СведенияОПоставщике.ОфициальноеНаименование;
		ПоставщикУНП                   = СокрЛП(СведенияОПоставщике.ИНН);
		ПоставщикАдрес                 = СведенияОПоставщике.ЮридическийАдрес;
		
		//Получатель
		ПолучательНаименование          = СведенияОПокупателе.ОфициальноеНаименование;
		ПолучательУНП                   = СокрЛП(СведенияОПокупателе.ИНН);
		ПолучательАдрес                 = СведенияОПокупателе.ЮридическийАдрес;
		
		ДатаСовершенияОперацииРозница = ДанныеШапки.Дата;
		Если Розница Тогда
			Если ДанныеШапки.ПериодичностьФормирования = Перечисления.Периодичность.Месяц Тогда
				ДатаСовершенияОперацииРозница = КонецМесяца(ДанныеШапки.МесяцФормирования);
			ИначеЕсли ДанныеШапки.ПериодичностьФормирования = Перечисления.Периодичность.Квартал Тогда
				ДатаСовершенияОперацииРозница = КонецКвартала(ДанныеШапки.МесяцФормирования);
			КонецЕсли;
		КонецЕсли;
		
		ДатаСовершенияОперацииЭкспорт = ДанныеШапки.Дата; 		
		Если ЭтоЭкспорт Тогда
			ДатаСовершенияОперацииЭкспорт = ?(ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаДокументаОснования),КонецМесяца(ДанныеДокументаОснования.ДатаДокументаОснования),КонецМесяца(ДанныеШапки.Дата));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ДанныеШапки.СтатусПоставщика) Тогда 
			СтатусПоставщика = ДанныеШапки.СтатусПоставщика.Код;
		Иначе
			СтатусПоставщика = "SELLER";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.СтатусПолучателя) Тогда 
			СтатусПолучателя = ДанныеШапки.СтатусПолучателя.Код;
		Иначе
			СтатусПолучателя = "CUSTOMER";
		КонецЕсли;
		
		Если  СтатусПоставщика = "COMMISSIONAIRE" И СтатусПолучателя = "CUSTOMER"  Тогда
			НомерЭСЧФКомитента =  СокрЛП(ДанныеШапки.НомерЭСЧФКомитента); 
			ДатаЭСЧФКомитента  =  Формат(ДанныеШапки.ДатаЭСЧФКомитента,"ДФ=yyyy-MM-dd");	
		Иначе 
			НомерЭСЧФКомитента = ""; 
			ДатаЭСЧФКомитента  = "";
		КонецЕсли; 
		
		Если  (СтатусПоставщика = "COMMISSIONAIRE" 	И СтатусПолучателя = "CONSIGNOR")  
			ИЛИ  (СтатусПоставщика = "AGENT" И СтатусПолучателя = "CONSUMER")
			ИЛИ  (СтатусПоставщика = "DEVELOPER" И СтатусПолучателя = "CONSUMER") Тогда
			НомерЭСЧФПродавца =  СокрЛП(ДанныеШапки.НомерЭСЧФПродавца); 
			ДатаЭСЧФПродавца  =  Формат(ДанныеШапки.ДатаЭСЧФПродавца,"ДФ=yyyy-MM-dd");	
		Иначе
			НомерЭСЧФПродавца = ""; 
			ДатаЭСЧФПродавца  =  "";			
		КонецЕсли; 
		
		Если НаИмпорт Тогда
			
			Если ДанныеДокументаОснования.ВидДокументаИмпорта = "Заявление" ТОгда	
				Если ЗначениеЗаполнено(ДанныеДокументаОснования.НомерЗаявления) Тогда
					НомерЗаявленияОВвозе = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(ДанныеДокументаОснования.НомерЗаявления));   
				Иначе
					НомерЗаявленияОВвозе = "";
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаЗаявления) Тогда  //Дата документа-основание Заявление
					ДатаЗаявленияОВвозе   = Формат(ДанныеДокументаОснования.ДатаЗаявления,"ДФ=yyyy-MM-dd");
					Если ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаВвозаТоваров) Тогда    //Дата документа Поступление в док. Заявление
						ДатаВвозаТоваровИмпорт   = Формат(ДанныеДокументаОснования.ДатаВвозаТоваров,"ДФ=yyyy-MM-dd");
					Иначе
						ДатаВвозаТоваровИмпорт   = ДатаЗаявленияОВвозе;
					КонецЕсли;	
				Иначе
					ДатаЗаявленияОВвозе     = "";
					ДатаВвозаТоваровИмпорт  = "";
				КонецЕсли;
				РегНомерВыпускаТоваров  = "";
				
			ИначеЕсли ДанныеДокументаОснования.ВидДокументаИмпорта = "ГТД" ТОгда	 
				
				Если ЗначениеЗаполнено(ДанныеДокументаОснования.РегНомерВыпускаТоваров) Тогда
					РегНомерВыпускаТоваров  = Строка(СокрЛП(ДанныеДокументаОснования.РегНомерВыпускаТоваров));
				Иначе
					РегНомерВыпускаТоваров  = "";
				КонецЕсли;
				НомерЗаявленияОВвозе   = "";
				ДатаЗаявленияОВвозе    = "";   
				ДатаВвозаТоваровИмпорт = "";
			ИНаче
				РегНомерВыпускаТоваров  = "";   		 
				НомерЗаявленияОВвозе    = "";   
				ДатаЗаявленияОВвозе     = "";   
				ДатаВвозаТоваровИмпорт  = "";
			КонецЕсли;
			
		КонецЕсли;	
		
		ДополнительныеСведения = "";
		
		ИмяКорневогоОбъектаXDTO = "issuance";
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("issuance");
		ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://www.w3schools.com");
		ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьАтрибут("xsi:schemaLocation", "http://www.w3schools.com");
		ЗаписьXML.ЗаписатьАтрибут("sender", СокрЛП(ОрганизацияУНП));
		
		general = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("general", ПространствоИменСхемы);
		Путь =   "issuance.general.";
		
		НомерЭСЧФ = Строка(ОрганизацияУНП) + "-"  +  Формат(Год(ТекущаяДата()), "ЧГ=0") + "-" + Формат(Число(Прав(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеШапки.Номер, Истина, Истина),10)), "ЧЦ=10; ЧВН=; ЧГ=0"); 
		ДатаСовершенияОперации = ?(ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаДокументаОснования),ДанныеДокументаОснования.ДатаДокументаОснования, ДанныеШапки.Дата);
		Если НаИмпорт Тогда
			ДатаСовершенияОперации = ?(ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаПраваНаВычет),ДанныеДокументаОснования.ДатаПраваНаВычет, ДатаСовершенияОперации);
			Если ДанныеДокументаОснования.ВидДокументаИмпорта = "ГТД" ТОгда
				ДатаСовершенияОперации = ?(ЗначениеЗаполнено(ДанныеДокументаОснования.ДатаДокументаОснования),ДанныеДокументаОснования.ДатаДокументаОснования, ДанныеШапки.Дата);
			КонецЕсли;	
		ИначеЕсли Розница Тогда
			ДатаСовершенияОперации = ?(ЗначениеЗаполнено(ДатаСовершенияОперацииРозница),ДатаСовершенияОперацииРозница,ДатаСовершенияОперации);
		ИначеЕсли ЭтоЭкспорт Тогда
			Если Корректировочный Тогда
				ДатаСовершенияОперации = ДанныеШапки.ДатаСовершенияОперации;
			Иначе
				ДатаСовершенияОперации = ?(ЗначениеЗаполнено(ДатаСовершенияОперацииЭкспорт),ДатаСовершенияОперацииЭкспорт,ДатаСовершенияОперации);
			КонецЕсли;
		КонецЕсли;
		
		Если  Исходящий Тогда
			ТипДокумента =   "ORIGINAL" ;
		ИначеЕсли Дополнительный Тогда
			ТипДокумента =   "ADDITIONAL" ;
		ИначеЕсли Исправительный Тогда
			ТипДокумента =   "FIXED" ;
		ИначеЕсли ДополнительныйБезСсылки Тогда
			ТипДокумента =   "ADD_NO_REFERENCE" ;
		КонецЕсли;
		
		general.number           = НомерЭСЧФ;
		general.documentType     = ТипДокумента;
		general.dateTransaction  = ДатаСовершенияОперации;
		
		Если Исправительный ИЛИ Дополнительный Тогда
			НомерСчСсылки        = ДанныеШапки.НомерИсходногоДокумента;
			general.invoice      = НомерСчСсылки;
		КонецЕсли;
		
		Если  Исправительный Тогда
			general.dateCancelled  = Формат(ДанныеШапки.ДатаАннулирования,"ДФ=yyyy-MM-dd");
		КонецЕсли;
		
		Если Дополнительный Тогда
			general.sendToRecipient = "true";
		КонецЕсли;
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,general, "general", , , НазначениеТипаXML.Неявное);
		
		Если Розница Тогда
			
			ПолучательВзаимозависимоеЛицо   = "false";
			ПолучательРезидентОффшорнойЗоны = "false";
			ПолучательТоварыПоПеречню       = "false";
			ПолучательКрупныйПлательщик     = "false";
			ПолучательКодСтраныРегистрации  = "112";
			ПолучательНаименование          = "";
			ПолучательАдрес                 = "";
			ПолучательКодПодразделения      = 0; 
			
		КонецЕсли;
		
		Если Исходящий  ИЛИ  Исправительный ИЛИ ДополнительныйБезСсылки Тогда 	
			
			provider = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("provider", ПространствоИменСхемы);
			provider.providerStatus          = СтатусПоставщика; 
			provider.dependentPerson         = ПоставщикВзаимозависимоеЛицо; 
			provider.residentsOfOffshore     = ПоставщикРезидентОффшорнойЗоны; 
			provider.specialDealGoods        = ПоставщикТоварыПоПеречню; 
			provider.bigCompany              = ПоставщикКрупныйПлательщик; 
			provider.countryCode             = ПоставщикКодСтраныРегистрации;
			provider.name                    = ПоставщикНаименование; 
			
			Если НЕ НаИмпорт И (НЕ Розница) Тогда 
				
				Если ЗначениеЗаполнено(ДанныеШапки.РегистрационныйНомерВыпускаТоваров) тогда
					
					provider.declaration         = СокрЛП(ДанныеШапки.РегистрационныйНомерВыпускаТоваров); 
					Если ЗначениеЗаполнено(ДанныеШапки.ДатаВыпускаТоваров) тогда
						provider.dateRelease     = Формат(ДанныеШапки.ДатаВыпускаТоваров,"ДФ=yyyy-MM-dd"); //заполнено если есть рег.номер - Дата выпуска товаров
					КонецЕсли;
					Если ЗначениеЗаполнено(ДанныеШапки.ДатаРазрешенияНаУбытие) тогда
						provider.dateActualExport = Формат(ДанныеШапки.ДатаРазрешенияНаУбытие,"ДФ=yyyy-MM-dd"); //заполнено если есть рег.номер  - Дата разрешения на убытие 
					КонецЕсли;
					
				ИначеЕсли  ЗначениеЗаполнено(ДанныеШапки.НомерЗаявленияОВвозеТоваров) ИЛИ ЗначениеЗаполнено(ДанныеШапки.ДатаЗаявленияОВвозеТоваров) Тогда
					
					taxes = фабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "taxesType"));
					taxes.number    = СокрЛП(ДанныеШапки.НомерЗаявленияОВвозеТоваров);
					taxes.date      = Формат(ДанныеШапки.ДатаЗаявленияОВвозеТоваров,"ДФ=yyyy-MM-dd");;
					provider.taxes = taxes;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтатусПоставщика = "FOREIGN_ORGANIZATION" Тогда
				
				Если  ЗначениеЗаполнено(ПоставщикУНП) Тогда
					provider.unp    = ПоставщикУНП;
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(ПоставщикАдрес) Тогда
					provider.address    = ПоставщикАдрес;
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(ПоставщикКодПодразделения) Тогда
					provider.branchCode    = ПоставщикКодПодразделения;
				КонецЕсли;
				
			Иначе
				
				provider.unp           = ПоставщикУНП;
				provider.address       = ПоставщикАдрес;
				provider.branchCode    = ПоставщикКодПодразделения;
				
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(НомерЭСЧФКомитента) ИЛИ ЗначениеЗаполнено(ДатаЭСЧФКомитента) Тогда
				
				principal = фабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "forInvoiceType"));
				principal.number   = НомерЭСЧФКомитента;
				principal.date     = ДатаЭСЧФКомитента;
				provider.principal = principal;    
				
			КонецЕсли;	
			
			Если  ЗначениеЗаполнено(НомерЭСЧФПродавца) ИЛИ ЗначениеЗаполнено(ДатаЭСЧФПРодавца) Тогда
				
				vendor = фабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "forInvoiceType"));
				vendor.number   = НомерЭСЧФПродавца;
				vendor.date     = ДатаЭСЧФПродавца;
				provider.vendor = vendor;          
				
			КонецЕсли;	
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, provider, "provider", , , НазначениеТипаXML.Неявное);
			
			recipient = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("recipient", ПространствоИменСхемы);
			
			Если Розница Тогда
				
				recipient.recipientStatus        =   СтатусПолучателя;
				recipient.dependentPerson        =   ПолучательВзаимозависимоеЛицо; 
				recipient.residentsOfOffshore    =   ПолучательРезидентОффшорнойЗоны; 
				recipient.specialDealGoods       =   ПолучательТоварыПоПеречню; 
				recipient.bigCompany             =   ПолучательКрупныйПлательщик; 
				recipient.countryCode            =   ПолучательКодСтраныРегистрации;
				
			Иначе	
				
				recipient.recipientStatus        =   СтатусПолучателя;
				recipient.dependentPerson        =   ПолучательВзаимозависимоеЛицо; 
				recipient.residentsOfOffshore    =   ПолучательРезидентОффшорнойЗоны; 
				recipient.specialDealGoods       =   ПолучательТоварыПоПеречню; 
				recipient.bigCompany             =   ПолучательКрупныйПлательщик; 
				recipient.countryCode            =   ПолучательКодСтраныРегистрации;
				recipient.unp                    =   ПолучательУНП;
				recipient.branchCode             =   ПолучательКодПодразделения;
				recipient.name                   =   ПолучательНаименование;
				recipient.address                =   ПолучательАдрес;
				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(РегНомерВыпускаТоваров) Тогда
				
				recipient.declaration        =   РегНомерВыпускаТоваров;
				
			ИначеЕсли  Значениезаполнено(ДатаВвозаТоваровИмпорт) Тогда
				
				recipient.dateImport         =   ДатаВвозаТоваровИмпорт;
				Если  ЗначениеЗаполнено(НомерЗаявленияОВвозе) 
					ИЛИ ЗначениеЗаполнено(ДатаЗаявленияОВвозе) Тогда
					taxes = фабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменСхемы, "taxesType"));
					taxes.number   = НомерЗаявленияОВвозе;
					taxes.date     = ДатаЗаявленияОВвозе;
					recipient.taxes = taxes;
				КонецЕсли;
				
			КонецЕсли;
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, recipient, "recipient", , , НазначениеТипаXML.Неявное);		
			
			senderReceiver = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("senderReceiver", ПространствоИменСхемы);
			
			consignorList  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("consignorList", ПространствоИменСхемы);
			consigneesList = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("consigneeList", ПространствоИменСхемы);
			
			Если ДанныеШапки.ВидДокументаБСО = Справочники.ВидыДокументовЭСЧФ.ТТН_1 ИЛИ НаИмпорт Тогда
				
				consignor      = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("consignor", ПространствоИменСхемы);
				
				consignor.countryCode   =  ПоставщикКодСтраныРегистрации;
				consignor.unp           =  ПоставщикУНП;
				consignor.name          =  ПоставщикНаименование;
				consignor.address       =  ?(ЗначениеЗаполнено(ДанныеШапки.АдресГрузоотправителя),СокрЛП(ДанныеШапки.АдресГрузоотправителя),ПоставщикАдрес);
				
				элементСпискаXDTO = consignorList.consignor.Добавить(consignor);
				senderReceiver.consignors  =    consignorList;
				
			КонецЕсли;
			
			Если ДанныеШапки.ВидДокументаБСО = Справочники.ВидыДокументовЭСЧФ.ТТН_1 ИЛИ НаИмпорт Тогда
				
				consignee      = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("consignee", ПространствоИменСхемы);
				
				consignee.countryCode   =  ПолучательКодСтраныРегистрации;
				consignee.unp           =  ПолучательУНП;
				consignee.name          =  ПолучательНаименование;
				consignee.address       =  ?(ЗначениеЗаполнено(ДанныеШапки.АдресГрузополучателя),СокрЛП(ДанныеШапки.АдресГрузополучателя),ПолучательАдрес);
				
				элементСпискаXDTO = consigneesList.consignee.Добавить(consignee);
				senderReceiver.consignees  =    consigneesList;
				
			КонецЕсли;
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, senderReceiver, "senderReceiver", , , НазначениеТипаXML.Неявное);
			
			deliveryCondition = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("deliveryCondition", ПространствоИменСхемы);
			deliveryCondition.description   = ДополнительныеСведения;
			
			contract = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("contract", ПространствоИменСхемы);
			
			Если  ЗначениеЗаполнено(ДанныеШапки.НомерДоговора) Тогда
				
				contract.number = СокрЛП(ДанныеШапки.НомерДоговора); 
				contract.date   = Формат(ДанныеШапки.ДатаДоговора, "ДФ=yyyy-MM-dd");
				
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(ДанныеШапки.НомерБСО) Тогда
				
				documentList   = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("documentList", ПространствоИменСхемы); 
				document       = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("document",     ПространствоИменСхемы); 
				
				docType        = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("docType", ПространствоИменСхемы);
				docType.code   = (ДанныеШапки.ВидДокументаБСО.Код);//Строка(ДанныеШапки.КодДокумента);
				docType.value  = Строка(ДанныеШапки.ВидДокументаБСО.Наименование);
				
				document.date 	      = Формат(ДанныеШапки.ДатаБСО,"ДФ=yyyy-MM-dd");
				document.blankCode    = Строка(СокрЛП(ДанныеШапки.ТипБСО)); 
				document.seria        = Строка(СокрЛП(ДанныеШапки.СерияБСО));
				document.number       = Строка(СокрЛП(ДанныеШапки.НомерБСО));
				
				document.docType      = docType;
				элементСпискаXDTO = documentList.document.Добавить(document);
				contract.documents =  documentList;
				
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(ДанныеШапки.НомерДоговора) ИЛИ ЗначениеЗаполнено(ДанныеШапки.НомерБСО) Тогда
				deliveryCondition.contract = contract;
			КонецЕсли;
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, deliveryCondition, "deliveryCondition",,, НазначениеТипаXML.Неявное);
			
		КонецЕсли;
		
		ИмяЭлемента_rosterList = ?(ФабрикаXDTO.Тип(ПространствоИменСхемы, "rosterList") = Неопределено,  "roster", "rosterList");
		rosterList    = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ИмяЭлемента_rosterList, ПространствоИменСхемы);
		
		totalCost    = 0;
		totalExcise  = 0;
		totalCostVat = 0;
		totalVat     = 0;
		
		Если Розница Тогда	
			
			ДанныеТабличнойЧастиРозн.Сбросить();
			НомерСтрокиРозница = 1;
			
			Пока ДанныеТабличнойЧастиРозн.Следующий() Цикл 
				
				Если  ДанныеТабличнойЧастиРозн.ИспользоватьРасчетнуюСтавкуНДС Тогда
					
					ТипСтавки = "CALCULATED";				
					ПроцентНДС = ДанныеТабличнойЧастиРозн.СтавкаНДСРозница;
					
				Иначе
					
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеТабличнойЧастиРозн.СтавкаНДСРозница);
					
					Если ДанныеТабличнойЧастиРозн.СтавкаНДСРозница = Перечисления.СтавкиНДС.НДС0 Тогда
						ТипСтавки = "ZERO";
					ИначеЕсли ДанныеТабличнойЧастиРозн.СтавкаНДСРозница = Перечисления.СтавкиНДС.БезНДС Тогда
						ТипСтавки = "NO_VAT";
					Иначе
						ТипСтавки = "DECIMAL"; 			
					КонецЕсли;
					
				КонецЕсли; 
				
				Если ДанныеТабличнойЧастиРозн.ДополнительныеДанные = Справочники.ДополнительныеДанныеЭСЧФ.ВычетВПолномОбъеме Тогда
					ДополнительныеДанные = "DEDUCTION_IN_FULL";
				ИначеЕсли ДанныеТабличнойЧастиРозн.ДополнительныеДанные = Справочники.ДополнительныеДанныеЭСЧФ.ОсвобождениеОтНДС Тогда
					ДополнительныеДанные = "VAT_EXEMPTION";
				ИначеЕсли ДанныеТабличнойЧастиРозн.ДополнительныеДанные = Справочники.ДополнительныеДанныеЭСЧФ.ВвознойНДС Тогда
					ДополнительныеДанные = "IMPORT_VAT";
				ИначеЕсли ДанныеТабличнойЧастиРозн.ДополнительныеДанные = Справочники.ДополнительныеДанныеЭСЧФ.РеализацияЗаПределамиРеспубликиБеларусь Тогда
					ДополнительныеДанные = "OUTSIDE_RB";
				Иначе
					ДополнительныеДанные = "";
				КонецЕсли; 
				
				rosterItem             = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("rosterItem", ПространствоИменСхемы);
				rosterItem.number      = НомерСтрокиРозница;
				rosterItem.name        = "Реализация товаров(услуг) по розничным ценам";
				rosterItem.cost        = ДанныеТабличнойЧастиРозн.Стоимость;
				rosterItem.summaExcise = ДанныеТабличнойЧастиРозн.СтоимостьАкциза;
				rosterItem.costVat     = ДанныеТабличнойЧастиРозн.Всего;
				
				vat                    = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("vat", ПространствоИменСхемы);
				vat.rate               = ПроцентНДС;
				vat.ratetype           = ТипСтавки;
				vat.summaVat           = ДанныеТабличнойЧастиРозн.СуммаНДС;
				rosterItem.vat         = vat;
				
				totalCost    = totalCost    +  rosterItem.cost;
				totalExcise  = totalExcise  +  rosterItem.summaExcise;
				totalCostVat = totalCostVat +  rosterItem.costVat;
				totalVat     = totalVat     +  vat.summaVat;
				
				Если ДополнительныеДанные <> "" Тогда  
					descriptions = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("descriptionList", ПространствоИменСхемы);
					элементСпискаXDTO = descriptions.description.Добавить(ДополнительныеДанные);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(rosterItem, "descriptions", descriptions);
				КонецЕсли;
				
				элементСпискаXDTO = rosterList.rosterItem.Добавить(rosterItem);
				
				НомерСтрокиРозница = НомерСтрокиРозница + 1;
				
			КонецЦикла;
			
		Иначе	 
			
			ДанныеТабличнойЧасти.Сбросить();
			Пока ДанныеТабличнойЧасти.Следующий() Цикл 
				
				Если ДанныеТабличнойЧасти.ИспользоватьРасчетнуюСтавкуНДС Тогда
					
					ТипСтавки = "CALCULATED";				
					ПроцентНДС = ДанныеТабличнойЧасти.РасчетнаяСтавкаНДС;
					
				Иначе
					
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеТабличнойЧасти.СтавкаНДС);
					Если ДанныеТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						ТипСтавки = "ZERO";
					ИначеЕсли ДанныеТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						ТипСтавки = "NO_VAT";
					Иначе
						ТипСтавки = "DECIMAL"; 			
					КонецЕсли;
					
				КонецЕсли;
				
				ДополнительныеДанные = ДанныеТабличнойЧасти.ДополнительныеДанные.Код;
				
				rosterItem             = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("rosterItem", ПространствоИменСхемы);
				rosterItem.number      = ДанныеТабличнойЧасти.НомерСтроки;
				
				КодТНВЭД = ?(ЗначениеЗаполнено(ДанныеТабличнойЧасти.КодТНВЭДЕАС), СокрЛП(ДанныеТабличнойЧасти.КодТНВЭДЕАС), "");
				Если ЗначениеЗАполнено(КодТНВЭД) Тогда
					rosterItem.code        = КодТНВЭД;
				КонецЕсли;
				
				КодОКЭД  = ?(ЗначениеЗаполнено(ДанныеТабличнойЧасти.КодОКЭД), Число(ДанныеТабличнойЧасти.КодОКЭД), "");
				Если  ЗначениеЗаполнено(КодОКЭД) Тогда
					rosterItem.code_oced   = КодОКЭД;
				КонецЕсли;
				
				rosterItem.name        = ДанныеТабличнойЧасти.Наименование; 
				rosterItem.count       = ДанныеТабличнойЧасти.Количество;
				rosterItem.price       = ДанныеТабличнойЧасти.Цена;
				rosterItem.cost        = ДанныеТабличнойЧасти.Стоимость;
				rosterItem.summaExcise = ДанныеТабличнойЧасти.СтоимостьАкциза;
				rosterItem.costVat     = ДанныеТабличнойЧасти.Всего;
				Если ЗначениеЗаполнено(ДанныеТабличнойЧасти.КодЕдИзм) Тогда
					rosterItem.units       = Число(ДанныеТабличнойЧасти.КодЕдИзм);
				КонецЕсли;
				
				vat                    = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("vat", ПространствоИменСхемы);
				vat.rate               = ПроцентНДС;
				vat.ratetype           = Строка(ТипСтавки);
				vat.summaVat           = ДанныеТабличнойЧасти.СуммаНДС;
				rosterItem.vat         = vat;
				
				totalCost    = totalCost    +  rosterItem.cost;
				totalExcise  = totalExcise  +  rosterItem.summaExcise;
				totalCostVat = totalCostVat +  rosterItem.costVat;
				totalVat     = totalVat     +  vat.summaVat;
				
				Если ДополнительныеДанные <> "" Тогда  
					
					descriptions = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("descriptionList", ПространствоИменСхемы);
					элементСпискаXDTO = descriptions.description.Добавить(ДополнительныеДанные);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(rosterItem, "descriptions", descriptions);
					
				КонецЕсли;
				
				элементСпискаXDTO = rosterList.rosterItem.Добавить(rosterItem);
				
			КонецЦикла;
			
		КонецЕсли;
		
		rosterList.totalCost    = totalCost;
		rosterList.totalExcise  = totalExcise;
		rosterList.totalCostVat = totalCostVat;
		rosterList.totalVat     = totalVat;
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, rosterList, ИмяЭлемента_rosterList, , , НазначениеТипаXML.Неявное);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.Закрыть();
		
		СтруктураЭД.Вставить("НомерЭД", 		НомерЭСЧФ);
		СтруктураЭД.Вставить("ИмяБезРасширения",НомерЭСЧФ);
		СтруктураЭД.Вставить("ИмяФайла", 		ИмяФайла);
		
		Возврат Истина;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка заполнения документа: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция УдалитьПространствоИмен(ИмяФайла, ПространствоИмен) 
	
	Попытка
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайла,"UTF-8");
		КоличествоСтрок = Текст.КоличествоСтрок();
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			СтрокаФайл = Текст.ПолучитьСтроку(НомерСтроки);
			СтрокаФайл = СтрЗаменить(СтрокаФайл, " " + "xmlns=" + """" + ПространствоИмен  + """" + " " +   "xmlns:xs="+"""http://www.w3.org/2001/XMLSchema""", "");
			Текст.ЗаменитьСтроку(НомерСтроки, СтрокаФайл);
			
		КонецЦикла;
		
		Текст.Записать(ИмяФайла, "UTF-8");
		
		Возврат Истина;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка подготовки файла ЭСЧФ: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции	

Функция ТекстЗапросаДляЭДСчетовФактур(ДокСсылка) 
		
	мдДок = ДокСсылка.Метаданные();
	ИмяТаблицыДок = мдДок.Имя;
	струкЗаменыРеквизитов = ПолучитьСтруктуруРеквизитовДокументаДляЗаменыПоУниверсальнымИменам(ДокСсылка);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СчетФактураВыданный.Дата КАК Дата,
	               |	СчетФактураВыданный.Номер КАК Номер,
	               |	СчетФактураВыданный.СтатусПоставщика КАК СтатусПоставщика,
	               |	СчетФактураВыданный.СтатусПолучателя КАК СтатусПолучателя,
	               |	СчетФактураВыданный.ДоговорНомер КАК НомерДоговора,
	               |	СчетФактураВыданный.ДоговорДата КАК ДатаДоговора,
	               |	СчетФактураВыданный.ВидДокумента.Код КАК КодДокумента,
	               |	СчетФактураВыданный.КодБланкаИсходящегоДокумента КАК ТипБСО,
	               |	СчетФактураВыданный.СерияИсходящегоДокумента КАК СерияБСО,
	               |	СчетФактураВыданный.ДатаИсходящегоДокумента КАК ДатаБСО,
	               |	СчетФактураВыданный.НомерИсходящегоДокумента КАК НомерБСО,
	               |	СчетФактураВыданный.ВидДокумента КАК ВидДокументаБСО,
	               |	СчетФактураВыданный.Грузоотправитель,
	               |	СчетФактураВыданный.Грузополучатель,
	               |	СчетФактураВыданный.ДатаВыставления,
	               |	СчетФактураВыданный.АдресГрузоотправителя,
	               |	СчетФактураВыданный.АдресГрузополучателя,
	               |	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	               |	СчетФактураВыданный.Дата КАК ДатаИсправления,
	               |	СчетФактураВыданный.Организация КАК Организация,
	               |	СчетФактураВыданный.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
	               |	СчетФактураВыданный.Организация.ИНН КАК ОрганизацияУНП,
	               |	СчетФактураВыданный.ВзаимозависимоеЛицоПоставщик КАК ОрганизацияВзаимозависимоеЛицо,
	               |	СчетФактураВыданный.СделкаСРезидентомОффшорнойЗоныПоставщик КАК ОрганизацияРезидентОффшорнойЗоны,
	               |	СчетФактураВыданный.СделкаСТоварамиПоПеречнюПоставщик КАК ОрганизацияСделкаСТоварамиПоПеречню,
	               |	СчетФактураВыданный.ОрганизацияВключеннаяВПереченьКрупныхПлательщиковПоставшик КАК ОрганизацияКрупныйПлательщикНДС,
	               |	СчетФактураВыданный.Организация.КодФилиала КАК ОрганизацияКодФилиала,
				   |	ВЫБОР
				   |		КОГДА СчетФактураВыданный.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
				   |			ТОГДА СчетФактураВыданный.Организация.СтранаРегистрации.Код
				   |		ИНАЧЕ ""112"" 
				   |	КОНЕЦ КАК ОрганизацияКодСтраныРегистрации,
	               |	СчетФактураВыданный." + струкЗаменыРеквизитов.Контрагент + " КАК Контрагент,
	               |	СчетФактураВыданный.ВзаимозависимоеЛицоПолучатель КАК КонтрагентВзаимозависимоеЛицо,
	               |	СчетФактураВыданный.СделкаСРезидентомОффшорнойЗоныПолучатель КАК КонтрагентРезидентОффшорнойЗоны,
	               |	СчетФактураВыданный.СделкаСТоварамиПоПеречнюПолучатель КАК КонтрагентСделкаСТоварамиПоПеречню,
	               |	СчетФактураВыданный.ОрганизацияВключеннаяВПереченьКрупныхПлательщиковПолучатель КАК КонтрагентКрупныйПлательщикНДС,
				   |	ВЫБОР
				   |		КОГДА СчетФактураВыданный." + струкЗаменыРеквизитов.Контрагент + ".ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
				   |			ТОГДА СчетФактураВыданный." + струкЗаменыРеквизитов.Контрагент + ".СтранаРегистрации.Код
				   |		ИНАЧЕ ""112"" 
				   |	КОНЕЦ КАК КонтрагентКодСтраныРегистрации,
	               |	СчетФактураВыданный." + струкЗаменыРеквизитов.Контрагент + ".КодФилиала КАК КонтрагентКодФилиала,
	               |	СчетФактураВыданный.ДатаПраваНаВычет,
	               |	СчетФактураВыданный.ДатаАннулирования,
	               |	СчетФактураВыданный.РегистрационныйНомерВыпускаТоваров,
	               |	СчетФактураВыданный.ДатаВыпускаТоваров,
	               |	СчетФактураВыданный.ДатаРазрешенияНаУбытие,
	               |	СчетФактураВыданный.НомерЗаявленияОВвозеТоваров,
	               |	СчетФактураВыданный.ДатаЗаявленияОВвозеТоваров,
	               |	СчетФактураВыданный.НомерСчетФактурыКомитента КАК НомерЭСЧФКомитента,
	               |	СчетФактураВыданный.ДатаСчетФактурыКомитента КАК ДатаЭСЧФКомитента,
	               |	СчетФактураВыданный.НомерСчетФактурыПродавца КАК НомерЭСЧФПродавца,
	               |	СчетФактураВыданный.ДатаСчетФактурыПродавца КАК ДатаЭСЧФПродавца,
	               |	СчетФактураВыданный.МесяцФормирования,
	               |	СчетФактураВыданный.ПериодичностьФормирования,
	               |	СчетФактураВыданный.ДатаСовершенияОперации,
	               |	СчетФактураВыданный.НомерИсходногоДокумента
	               |ИЗ
	               |	Документ." + ИмяТаблицыДок + " КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйТоварыУслуги.НомерСтроки,
	               |	СчетФактураВыданныйТоварыУслуги.Номенклатура,
	               |	СчетФактураВыданныйТоварыУслуги.Упаковка КАК ЕдиницаИзмерения,
	               |	СчетФактураВыданныйТоварыУслуги.Количество,
	               |	СчетФактураВыданныйТоварыУслуги.Цена,
	               |	СчетФактураВыданныйТоварыУслуги.Сумма КАК Стоимость,
	               |	СчетФактураВыданныйТоварыУслуги.Номенклатура.НаименованиеПолное КАК Наименование,
	               |	СчетФактураВыданныйТоварыУслуги.СуммаАкциза КАК СтоимостьАкциза,
	               |	СчетФактураВыданныйТоварыУслуги.СтавкаНДС,
	               |	СчетФактураВыданныйТоварыУслуги.ДополнительныеДанные,
	               |	СчетФактураВыданныйТоварыУслуги.Упаковка.Код КАК КодЕдИзм,
	               |	СчетФактураВыданныйТоварыУслуги.СуммаНДС,
	               |	СчетФактураВыданныйТоварыУслуги.СуммаСНДС КАК Всего,
	               |	СчетФактураВыданныйТоварыУслуги.КодТНВЭД.Код КАК КодТНВЭДЕАС,
	               |	СчетФактураВыданныйТоварыУслуги.КодОКЭД.Код КАК КодОКЭД,
	               |	СчетФактураВыданныйТоварыУслуги.РасчетнаяСтавкаНДС,
	               |	СчетФактураВыданныйТоварыУслуги.ИспользоватьРасчетнуюСтавкуНДС
	               |ИЗ
	               |	Документ." + ИмяТаблицыДок + ".Товары КАК СчетФактураВыданныйТоварыУслуги
	               |ГДЕ
	               |	СчетФактураВыданныйТоварыУслуги.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |" + ?(ИмяТаблицыДок = "СчетФактураВыданный",
				   "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Номер КАК НомерДокументаОснования,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДатаДокументаОснования,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	               |			ТОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование.НомерДекларации
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК РегНомерВыпускаТоваров,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	               |			ТОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование.Номер
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК НомерЗаявления,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	               |			ТОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ДатаЗаявления,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	               |			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ДатаВвозаТоваров
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ДатаВвозаТоваров,
	               |	ВЫБОР
	               |		КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	               |			ТОГДА ""Заявление""
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	               |					ТОГДА ""ГТД""
	               |				ИНАЧЕ """"
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВидДокументаИмпорта,
	               |	Ссылка.ДатаПраваНаВычет КАК ДатаПраваНаВычет,
	               |	НомерИсходногоДокумента КАК НомерИсходногоДокумента
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка В(&МассивОбъектов)",
				   "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Номер КАК НомерДокументаОснования,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДатаДокументаОснования,
	               |	"""" КАК РегНомерВыпускаТоваров,
	               |	"""" КАК НомерЗаявления,
	               |	"""" КАК ДатаЗаявления,
	               |	"""" КАК ДатаВвозаТоваров,
	               |	"""" КАК ВидДокументаИмпорта,
	               |	Ссылка.ДатаПраваНаВычет КАК ДатаПраваНаВычет,
	               |	НомерИсходногоДокумента КАК НомерИсходногоДокумента
	               |ИЗ
	               |	Документ." + ИмяТаблицыДок + " КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка В(&МассивОбъектов)") + "
	               |";
	
		Возврат ТекстЗапроса;       

	
КонецФункции 

Функция ПолучитьДанныеСчетаФактурыНаРеализацию(МассивОбъектов, ТекстЗапросаПоСчетамФактурам) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст	= ТекстЗапросаПоСчетамФактурам;
	Результат		= Запрос.ВыполнитьПакет();
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьНедоступныеДляФормированияЭСЧФОбъекты(МассивСсылок) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭСЧФ.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭСЧФ КАК СостоянияЭСЧФ
	|ГДЕ
	|	СостоянияЭСЧФ.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭСЧФ.ЭлектронныйДокумент.СтатусЭД = (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отправлен))
	|	ИЛИ СостоянияЭСЧФ.ЭлектронныйДокумент.СтатусЭД = (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)))
	|";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		
		ШаблонСообщения = НСтр("ru='Документ %1 в статусе ""Отправлен"" или ""Подписан"". Повторное формирование невозможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПечатьЭСЧФ

Функция СформироватьПечатнуюФормуЭСЧФ(ПолноеИмяФайла) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	Если ЧтениеXML.Прочитать() Тогда
		ИмяКорневогоЭлемента = ВРег(ЧтениеXML.Имя);
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ПолноеИмяФайла);
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Исходный    = Ложь;
	Исправленый = Ложь;
	Дополнительный = Ложь;
	ДополнительныйБезСсылки = Ложь;
	ТипДокумента = ОбъектXDTO.general.documentType;
	
	Если ТипДокумента = "ORIGINAL" Тогда
		Исходная  =  Истина;
		Тип = "Исходный" ;
	ИначеЕсли ТипДокумента = "FIXED" Тогда
		Исправленый  =  Истина;
		Тип = "Исправленый";
	ИначеЕсли ТипДокумента  = "ADDITIONAL" Тогда
		Дополнительный  =  Истина;
		Тип = "Дополнительный";
	ИначеЕсли ТипДокумента = "ADD_NO_REFERENCE" Тогда
		ДополнительныйБезСсылки  =  Истина;
		Тип = "Дополнительный без ссылки";	
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЭСЧФ");
	
	Попытка
						
		general = Макет.ПолучитьОбласть("general");
		ЗаполнитьПараметрыМакета(general,  ОбъектXDTO.general);
		general.Параметры.documentType = Тип;
		ТабличныйДокумент.Вывести(general);
		
		Если ОбъектXDTO.general.Свойства().Получить("invoice") <> Неопределено Тогда
			invoice = Макет.ПолучитьОбласть("invoice");
			invoice.Параметры.invoice = ОбъектXDTO.general.invoice;
			ТабличныйДокумент.Вывести(invoice);
		КонецЕсли;
		
		Если ОбъектXDTO.general.Свойства().Получить("dateCancelled") <> Неопределено Тогда
			dateCancelled = Макет.ПолучитьОбласть("dateCancelled");
			dateCancelled.Параметры.dateCancelled = ОбъектXDTO.general.dateCancelled;
			ТабличныйДокумент.Вывести(dateCancelled);
		КонецЕсли;

		Если НЕ Дополнительный Тогда 
			
			providerName = Макет.ПолучитьОбласть("providerName"); 
			ЗаполнитьПараметрыМакета(providerName,  ОбъектXDTO.provider);
			ТабличныйДокумент.Вывести(providerName);
			
			ТабличныйДокумент.НачатьГруппуСтрок("provider", Ложь);
			
			provider = Макет.ПолучитьОбласть("provider"); 
			ЗаполнитьПараметрыМакета(provider,  ОбъектXDTO.provider);
			
			provider.Параметры.providerStatus = Справочники.СтатусыПоставщикаЭСЧФ.НайтиПоКоду(ОбъектXDTO.provider.providerStatus);
			
			ФорматироватьПараметрыМакета(provider.Параметры);
			ТабличныйДокумент.Вывести(provider);

			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			СвойстваProvider = ОбъектXDTO.provider.Свойства();
			
			Если  СвойстваProvider.Получить("principal") <> Неопределено Тогда
				principal = Макет.ПолучитьОбласть("principal");
				principal.Параметры.number =   ОбъектXDTO.provider.principal.number;
				principal.Параметры.date   =   ОбъектXDTO.provider.principal.date;
				ТабличныйДокумент.Вывести(principal);
			КонецЕсли;
			
			Если  СвойстваProvider.Получить("vendor") <> Неопределено Тогда
				vendor = Макет.ПолучитьОбласть("vendor");
				vendor.Параметры.number =   ОбъектXDTO.provider.vendor.number;
				vendor.Параметры.date   =   ОбъектXDTO.provider.vendor.date;
				ТабличныйДокумент.Вывести(vendor);
			КонецЕсли;
			
			Если  СвойстваProvider.Получить("declaration") <> Неопределено Тогда
				declaration = Макет.ПолучитьОбласть("declaration");
				declaration.Параметры.declaration =   ОбъектXDTO.provider.declaration; 
				ФорматироватьПараметрыМакета(declaration.Параметры);
				ТабличныйДокумент.Вывести(declaration);
			КонецЕсли;
			
			Если  СвойстваProvider.Получить("dateRelease") <> Неопределено Тогда
				dateRelease = Макет.ПолучитьОбласть("dateRelease");
				dateRelease.Параметры.dateRelease =   ОбъектXDTO.provider.dateRelease;
				ФорматироватьПараметрыМакета(dateRelease.Параметры);
				ТабличныйДокумент.Вывести(dateRelease);
			КонецЕсли;
			
			Если  СвойстваProvider.Получить("dateАctualExport") <> Неопределено Тогда
				dateАctualExport = Макет.ПолучитьОбласть("dateАctualExport");
				dateАctualExport.Параметры.dateАctualExport =   ОбъектXDTO.provider.dateАctualExport;
				ФорматироватьПараметрыМакета(dateАctualExport.Параметры);
				ТабличныйДокумент.Вывести(dateАctualExport);
			КонецЕсли;
			
			Если  СвойстваProvider.Получить("taxes") <> Неопределено Тогда
				taxes = Макет.ПолучитьОбласть("taxes");
				taxes.Параметры.number =   ОбъектXDTO.provider.taxes.number;
				taxes.Параметры.date   =   ОбъектXDTO.provider.taxes.date;
				ТабличныйДокумент.Вывести(taxes);
			КонецЕсли;
			
			recipientName = Макет.ПолучитьОбласть("recipientName"); 
			ЗаполнитьПараметрыМакета(recipientName,  ОбъектXDTO.recipient);
			ТабличныйДокумент.Вывести(recipientName);
			
			ТабличныйДокумент.НачатьГруппуСтрок("recipient", Ложь);
			
			recipient = Макет.ПолучитьОбласть("recipient"); 
			ЗаполнитьПараметрыМакета(recipient,  ОбъектXDTO.recipient);
			
			recipient.Параметры.recipientStatus = Справочники.СтатусыПолучателяЭСЧФ.НайтиПоКоду(ОбъектXDTO.recipient.recipientStatus);
			
			ФорматироватьПараметрыМакета(recipient.Параметры);
			ТабличныйДокумент.Вывести(recipient);
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			Свойстваrecipient = ОбъектXDTO.recipient.Свойства();
			
			Если  Свойстваrecipient.Получить("declaration") <> Неопределено Тогда
				declaration = Макет.ПолучитьОбласть("declaration1");
				declaration.Параметры.declaration =   ОбъектXDTO.recipient.declaration; 
				ФорматироватьПараметрыМакета(declaration.Параметры);
				ТабличныйДокумент.Вывести(declaration);
			КонецЕсли;
			
			Если  Свойстваrecipient.Получить("taxes") <> Неопределено Тогда
				taxes = Макет.ПолучитьОбласть("taxes");
				taxes.Параметры.number =   ОбъектXDTO.recipient.taxes.number;
				taxes.Параметры.date   =   ОбъектXDTO.recipient.taxes.date;
				ТабличныйДокумент.Вывести(taxes);
			КонецЕсли;
			
			Если  Свойстваrecipient.Получить("dateimport") <> Неопределено Тогда
				dateimport = Макет.ПолучитьОбласть("dateimport");
				dateimport.Параметры.dateimport =   ОбъектXDTO.recipient.dateimport;
				ФорматироватьПараметрыМакета(dateimport.Параметры);
				ТабличныйДокумент.Вывести(dateimport);
			КонецЕсли;
			
			
			Если  ОбъектXDTO.Свойства().Получить("senderReceiver") <> Неопределено  Тогда
				senderReceiver =  ОбъектXDTO.senderReceiver;
				СвойстваsenderReceiver  = senderReceiver.Свойства();
				
				Если   СвойстваsenderReceiver.Получить("consignors") <> Неопределено Тогда
					Если senderReceiver.consignors.свойства().Количество() > 0  Тогда
						
						consignorName = Макет.ПолучитьОбласть("consignorName");
						ЗаполнитьПараметрыМакета(consignorName, senderReceiver.consignors.consignor);
						ТабличныйДокумент.Вывести(consignorName);
						
						ТабличныйДокумент.НачатьГруппуСтрок("consignor", Ложь);
						
						consignor = Макет.ПолучитьОбласть("consignor");
						ЗаполнитьПараметрыМакета(consignor, senderReceiver.consignors.consignor);
						ТабличныйДокумент.Вывести(consignor);
						
						ТабличныйДокумент.ЗакончитьГруппуСтрок();
						
					КонецЕсли;	
				КонецЕсли;	
				
				Если   СвойстваsenderReceiver.Получить("consignees") <> Неопределено Тогда
					Если senderReceiver.consignees.свойства().Количество() > 0  Тогда
						
						consigneeName = Макет.ПолучитьОбласть("consigneeName");
						ЗаполнитьПараметрыМакета(consigneeName, senderReceiver.consignees.consignee);
						ТабличныйДокумент.Вывести(consigneeName);
						
						ТабличныйДокумент.НачатьГруппуСтрок("consignee", Ложь);
						
						consignee = Макет.ПолучитьОбласть("consignee");
						ЗаполнитьПараметрыМакета(consignee, senderReceiver.consignees.consignee);
						ТабличныйДокумент.Вывести(consignee);
						
						ТабличныйДокумент.ЗакончитьГруппуСтрок();
						
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;	
			
			
			Если  ОбъектXDTO.Свойства().Получить("deliveryCondition") <> Неопределено  Тогда
				
				УсловияПоставкиШапка = Макет.ПолучитьОбласть("УсловияПоставкиШапка");
				ТабличныйДокумент.Вывести(УсловияПоставкиШапка);
				
				deliveryCondition =   ОбъектXDTO.deliveryCondition;
				
				Если  deliveryCondition.Свойства().Получить("contract") <> Неопределено  Тогда 
					
					contract = Макет.ПолучитьОбласть("contract");
					ЗаполнитьПараметрыМакета(contract,  deliveryCondition.contract);
					ТабличныйДокумент.Вывести(contract);
					
					Если deliveryCondition.contract.Свойства().Получить("documents") <> Неопределено  Тогда
						
						document = Макет.ПолучитьОбласть("document");
						documentXDTO =  deliveryCondition.contract.documents.document;
						
						Если ТипЗнч(documentXDTO) = Тип("СписокXDTO") Тогда
							ЗаполнитьПараметрыМакета(document, documentXDTO[0]);
							ЗаполнитьПараметрыМакета(document, documentXDTO[0].doctype);
						Иначе	
							ЗаполнитьПараметрыМакета(document, documentXDTO);
							ЗаполнитьПараметрыМакета(document, documentXDTO.doctype);
						КонецЕсли;	
						
						ФорматироватьПараметрыМакета(document.Параметры);
						ТабличныйДокумент.Вывести(document);
						
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыТаблицы =  Макет.ПолучитьОбласть("РеквизитыТаблицы");
		ТабличныйДокумент.Вывести(РеквизитыТаблицы);
		
		ШапкаТаблицы =  Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ШапкаТаблицы);
		
		СтрокиТаблицы =  Макет.ПолучитьОбласть("СтрокиТаблицы");
		
		ИмяЭлемента_rosterList = ?(ОбъектXDTO.Свойства().Получить("rosterList") = Неопределено,  "roster", "rosterList");
		totalCost = ОбъектXDTO[ИмяЭлемента_rosterList].totalCost;
		totalCostVat = ОбъектXDTO[ИмяЭлемента_rosterList].totalCostVat;
		totalExcise = ОбъектXDTO[ИмяЭлемента_rosterList].totalExcise;
		totalVat = ОбъектXDTO[ИмяЭлемента_rosterList].totalVat;
		
		Товары = ОбъектXDTO[ИмяЭлемента_rosterList].rosterItem;
		
		сч = 1;
		Если ТипЗнч(Товары) = Тип("ОбъектXDTO") Тогда
			
			ОбработатьСтрокуТЧ(СтрокиТаблицы, Товары, сч);
			ТабличныйДокумент.Вывести(СтрокиТаблицы);
		Иначе
			Для каждого item Из Товары Цикл
				СтрокиТаблицы =  Макет.ПолучитьОбласть("СтрокиТаблицы");
				ОбработатьСтрокуТЧ(СтрокиТаблицы, item, сч);
				ТабличныйДокумент.Вывести(СтрокиТаблицы);
				сч = сч + 1
			КонецЦикла;
		КонецЕсли;	
		
		УсловияПоставкиСтроки =  Макет.ПолучитьОбласть("ИтогоТаблицы");
		УсловияПоставкиСтроки.Параметры.totalCost = totalCost;
		УсловияПоставкиСтроки.Параметры.totalExcise = totalExcise;
		УсловияПоставкиСтроки.Параметры.totalCostVat = totalCostVat;
		УсловияПоставкиСтроки.Параметры.totalVat = totalVat;
		ФорматироватьЧисло("totalCost,totalExcise,totalVat,totalCostVat", УсловияПоставкиСтроки.Параметры);

		ТабличныйДокумент.Вывести(УсловияПоставкиСтроки);
		
		Возврат ТабличныйДокумент;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка заполнения табличного макета'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ФорматироватьПараметрыМакета(Параметры)
	
	Для сч = 0 По Параметры.Количество()-1  Цикл
		
		Если  Параметры[сч] = "false" ИЛИ 
			ТипЗнч(Параметры[сч]) = Тип("ОбъектXDTO") Тогда
			Параметры[сч] = "";
		КонецЕсли;
		
		Если Параметры[сч] = "true" Тогда
			 Параметры[сч] = "да";
		 КонецЕсли;
		 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ФорматироватьЧисло(СписокСвойств, Параметры)
	
	СписокСвойств = МассивИзСтроки(СписокСвойств);	
	
	Попытка	
		Для каждого элт Из СписокСвойств Цикл
			Параметры[элт] = Число(Параметры[элт]);
		КонецЦикла;
		
	Исключение
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыМакета(ОбластьМакета, ОбъектXDTO)
	
	ОбластьМакета.Параметры.Заполнить(ОбъектXDTO);
	
КонецПроцедуры	

Процедура ОбработатьСтрокуТЧ(СтрокиТаблицы, ОбъектXDTO, Число)
	
	ЗаполнитьПараметрыМакета(СтрокиТаблицы,  ОбъектXDTO);
	Попытка	
		СтрокиТаблицы.Параметры.number = Формат(Число,"ЧЦ=3; ЧГ=");
	исключение
		
	КонецПопытки;
	
	НДС = ОбъектXDTO.Vat;
	ЗаполнитьПараметрыМакета(СтрокиТаблицы, НДС);
	
	Если ОбъектXDTO.Свойства().Получить("descriptions") <> Неопределено Тогда
		ЗаполнитьПараметрыМакета(СтрокиТаблицы,  ОбъектXDTO.descriptions);
	КонецЕсли;
	Описание = СтрокиТаблицы.Параметры.description;
	
	Если Описание = "DEDUCTION_IN_FULL" Тогда 
		СтрокиТаблицы.Параметры.description = "Вычет в полном объеме"; 
	ИначеЕсли Описание =  "VAT_EXEMPTION" Тогда
		СтрокиТаблицы.Параметры.description = "Освобождение от НДС"; 
	ИначеЕсли Описание =  "IMPORT_VAT" Тогда 
		СтрокиТаблицы.Параметры.description =  "Ввозной НДС";
	ИначеЕсли Описание =  "OUTSIDE_RB" Тогда 
		СтрокиТаблицы.Параметры.description = "Реализация за пределами РБ";
	КонецЕсли; 

	ФорматироватьПараметрыМакета(СтрокиТаблицы.Параметры);
	ФорматироватьЧисло("price,cost,summaExcise,rate,summaVat,costVat", СтрокиТаблицы.Параметры);

КонецПроцедуры	

Функция ПолучитьДанныеДляПечати(СсылкаНаОбъект) Экспорт
	
	Возврат СформироватьПечатнуюФормуЭСЧФ(ПолучитьИмяФайлаДанныхЭД(СсылкаНаОбъект));
	
КонецФункции

#КонецОбласти

#Область ДополнительныеФункции

Функция МассивИзСтроки(Знач Стр, Разделитель=",")

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции

Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции 

Функция НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	Перем СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
		Тогда
		ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаИмпорт);  
	Иначе
		ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	КонецЕсли; 	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",     ИсключаемыйСФ);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.ДокументОснование = &ДокументОснование
	|	И ДокументыОснования.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|";
	
	Если ЗначениеЗаполнено(ИсключаемыйСФ) Тогда
		Запрос.Текст = Запрос.Текст 
			+ " И ДокументыОснования.Ссылка <> &ИсключаемыйСФ";
	КонецЕсли;

	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			ТекстУсловия = ТекстУсловия + "
			| И ";
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + ТекстУсловия;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;
	
	Возврат СчетФактура;

КонецФункции

#КонецОбласти

#Область ЗагрузкаXML

Процедура ЗагрузитьИзXML(РезультатПомещенияФайлов) Экспорт 
	
	Попытка	
		
		СтруктураЭД = Новый Структура;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатПомещенияФайлов.Хранение);
		ИмяВременногоФайлаXML = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяВременногоФайлаXML);
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаXML);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		СтруктураЭД.Вставить("ИмяФайла", 				ИмяВременногоФайлаXML);
		СтруктураЭД.Вставить("НомерЭД", 				СокрЛП(ОбъектXDTO.general.number));
		СтруктураЭД.Вставить("СтатусЭД", 				Перечисления.СтатусыЭД.Получен);
		
		СчетФактураВходящая = ПолучитьСчетФактураВходящаяПоНомеруЭД(СтруктураЭД.НомерЭД);
		Если СчетФактураВходящая <> Неопределено Тогда
			ШаблонСообщения = НСтр("ru='Документ """ + СчетФактураВходящая.Ссылка.Метаданные().Синоним + """ с номером %1 уже существует'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;	
		КонецЕсли;
		
		СтруктураЭД.Вставить("ТипДокумента", 			СокрЛП(ОбъектXDTO.general.documentType));
		ИмяЭлемента_rosterList = ?(ОбъектXDTO.Свойства().Получить("rosterList") = Неопределено,  "roster", "rosterList");
		СтруктураЭД.Вставить("СуммаДокумента", 			Число(ОбъектXDTO[ИмяЭлемента_rosterList].totalCostVat));
		СтруктураЭД.Вставить("СуммаНДС", 				Число(ОбъектXDTO[ИмяЭлемента_rosterList].totalVat));
		
		Если ОбъектXDTO.general.Свойства().Получить("invoice") <> Неопределено Тогда
			СтруктураЭД.Вставить("НомерИсходногоДокумента",	СокрЛП(ОбъектXDTO.general.invoice));
		КонецЕсли;	
		
		Если ОбъектXDTO.Свойства().Получить("recipient") <> Неопределено Тогда
			Если ОбъектXDTO.recipient.Свойства().Получить("unp") <> Неопределено Тогда
				СтруктураЭД.Вставить("УНПОрганизации", 	СокрЛП(ОбъектXDTO.recipient.unp));
			КонецЕсли;
			Если ОбъектXDTO.recipient.Свойства().Получить("recipientStatus") <> Неопределено Тогда
				СтруктураЭД.Вставить("СтатусПолучателя", Справочники.СтатусыПолучателяЭСЧФ.НайтиПоКоду(ВРег(СокрЛП(ОбъектXDTO.recipient.recipientStatus))));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTO.Свойства().Получить("provider") <> Неопределено Тогда
			Если ОбъектXDTO.provider.Свойства().Получить("unp") <> Неопределено Тогда
				СтруктураЭД.Вставить("УНПКонтрагента", 	СокрЛП(ОбъектXDTO.provider.unp));
			КонецЕсли;
			//TODO Проверить на пустое
			Если ОбъектXDTO.provider.Свойства().Получить("providerStatus") <> Неопределено Тогда
				СтруктураЭД.Вставить("СтатусПоставщика", Справочники.СтатусыПоставщикаЭСЧФ.НайтиПоКоду(ВРег(СокрЛП(ОбъектXDTO.provider.providerStatus))));
			КонецЕсли;
		КонецЕсли;
		
		ДатаДокумента = ОбъектXDTO.general.dateTransaction;   
		СтруктураЭД.Вставить("Дата", Дата(Лев(ДатаДокумента,4) + сред(ДатаДокумента,6,2) + Прав(ДатаДокумента, 2)));
		
		Если  ОбъектXDTO.Свойства().Получить("deliveryCondition") <> Неопределено Тогда
			
			СвойстваПоставки = ОбъектXDTO.deliveryCondition.Свойства();
			Если СвойстваПоставки.Получить("contract") <> Неопределено Тогда
				
				ДанныеПоставки = ОбъектXDTO.deliveryCondition;
				СвойстваДоговора = ДанныеПоставки.contract.Свойства();
				
				Если СвойстваДоговора.Получить("date") <> Неопределено Тогда
					ДатаДоговора = ДанныеПоставки.contract.date;
					Если ЗначениеЗаполнено(ДатаДоговора) Тогда
						СтруктураЭД.Вставить("ДатаДоговора",  Дата(Лев(ДатаДоговора,4) + сред(ДатаДоговора,6,2) + Прав(ДатаДоговора, 2)));
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваДоговора.Получить("number") <> Неопределено Тогда
					СтруктураЭД.Вставить("НомерДоговора", СокрЛП(ДанныеПоставки.contract.number));
				КонецЕсли;
				
				Если СвойстваДоговора.Получить("documents") <> Неопределено Тогда
					
					СвойстваДокументов = ДанныеПоставки.contract.documents.Свойства();
					Если СвойстваДокументов.Получить("document") <> Неопределено Тогда
						
						Если ТипЗнч(ДанныеПоставки.contract.documents.document) = Тип("ОбъектXDTO") Тогда
							
							СвойстваДокумента = ДанныеПоставки.contract.documents.document.Свойства();
							Если СвойстваДокумента.Получить("seria") <> Неопределено Тогда
								СтруктураЭД.Вставить("СерияВходящегоДокумента", СокрЛП(ДанныеПоставки.contract.documents.document.seria));
							КонецЕсли;
							Если СвойстваДокумента.Получить("number") <> Неопределено Тогда
								СтруктураЭД.Вставить("НомерВходящегоДокумента", СокрЛП(ДанныеПоставки.contract.documents.document.number));
							КонецЕсли;
							Если СвойстваДокумента.Получить("date") <> Неопределено Тогда
								ДатаВходящегоДокумента = ДанныеПоставки.contract.documents.document.date;
								СтруктураЭД.Вставить("ДатаВходящегоДокумента", Дата(Лев(ДатаВходящегоДокумента,4) + Сред(ДатаВходящегоДокумента,6,2) + Прав(ДатаВходящегоДокумента, 2)));
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(ДанныеПоставки.contract.documents.document) = Тип("СписокXDTO") Тогда	
							
							СвойстваДокумента = ДанныеПоставки.contract.documents.document[0].Свойства();
							Если СвойстваДокумента.Получить("seria") <> Неопределено Тогда
								СтруктураЭД.Вставить("СерияВходящегоДокумента", СокрЛП(ДанныеПоставки.contract.documents.document[0].seria));
							КонецЕсли;
							Если СвойстваДокумента.Получить("number") <> Неопределено Тогда
								СтруктураЭД.Вставить("НомерВходящегоДокумента", СокрЛП(ДанныеПоставки.contract.documents.document[0].number));
							КонецЕсли;
							Если СвойстваДокумента.Получить("date") <> Неопределено Тогда
								ДатаВходящегоДокумента = ДанныеПоставки.contract.documents.document[0].date;
								СтруктураЭД.Вставить("ДатаВходящегоДокумента", Дата(Лев(ДатаВходящегоДокумента,4) + Сред(ДатаВходящегоДокумента,6,2) + Прав(ДатаВходящегоДокумента, 2)));
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка чтения файла %1.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
		
	СоздатьОбъектыЭД(СтруктураЭД);

КонецПроцедуры

Функция СоздатьОбъектыЭД(СтруктураЭД) Экспорт

	НачатьТранзакцию();
	
	Если СтруктураЭД.Свойство("СтатусПоставщика") И (СтруктураЭД.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комитент Или СтруктураЭД.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер И СтруктураЭД.Свойство("СтатусПолучателя") И СтруктураЭД.СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.Комиссионер) Тогда
		ТекущийДокумент = СоздатьДокументСчетФактураКомитента(СтруктураЭД);
	Иначе
		ТекущийДокумент = СоздатьДокументСчетФактураПолученный(СтруктураЭД);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		Возврат Неопределено;	
		
	КонецЕсли;
	
	ДобавленныйФайл = СоздатьПрисоединенныйФайл(СтруктураЭД);
	
	Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		Возврат Неопределено;	
		
	КонецЕсли;	
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат ДобавленныйФайл;

КонецФункции

Функция СоздатьДокументСчетФактураПолученный(СтруктураЭД) 
	
	Попытка
		
		ТекущийДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
		
		Если СтруктураЭД.Свойство("УНПОрганизации") Тогда
			ТекущийДокумент.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", СтруктураЭД.УНПОрганизации);
			Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Организация) Тогда
				ШаблонСообщения = НСтр("ru='Не найдена организация с УНП %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.УНПОрганизации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;	
		
		ТекущийДокумент.Номер					= СтруктураЭД.НомерЭД;
		ТекущийДокумент.Валюта			 		= Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если СтруктураЭД.Свойство("ДатаВходящегоДокумента") Тогда
			ТекущийДокумент.Дата	= СтруктураЭД.ДатаВходящегоДокумента;
		Иначе	
			ТекущийДокумент.Дата	= СтруктураЭД.Дата;
		КонецЕсли;	

		Если СтруктураЭД.ТипДокумента = "ORIGINAL" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		ИначеЕсли 	 СтруктураЭД .ТипДокумента = "ADDITIONAL" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Дополнительный;
		ИначеЕсли СтруктураЭД.ТипДокумента = "ADD_NO_REFERENCE" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки;
		ИначеЕсли  СтруктураЭД.ТипДокумента = "FIXED" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исправленный;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УНПКонтрагента") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	Контрагенты.Ссылка
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.ИНН ПОДОБНО &ИНН
			               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ИНН", "%" + СтруктураЭД.УНПКонтрагента + "%");
			
			Если СтруктураЭД.Свойство("КодФилиалаКонтрагента") Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И Контрагенты.КодФилиала ПОДОБНО &КодФилиала";
				Запрос.УстановитьПараметр("КодФилиала", "%" + СтруктураЭД.КодФилиалаКонтрагента + "%");
			КонецЕсли;	
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийДокумент.Контрагент = Выборка.Ссылка;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекущийДокумент.Контрагент) Тогда
				
				Если СтруктураЭД.Свойство("НомерВходящегоДокумента") И СтруктураЭД.Свойство("ДатаВходящегоДокумента") И НЕ ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					               |	ДокументПоступления.Ссылка
					               |ИЗ
					               |	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступления
					               |ГДЕ
					               |	ДокументПоступления.Контрагент = &Контрагент
					               |	И ДокументПоступления.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
					               |	И ДокументПоступления.НомерВходящегоДокумента ПОДОБНО &НомерВходящегоДокумента
					               |	И ДокументПоступления.Проведен = ИСТИНА
					               |
					               |ОБЪЕДИНИТЬ ВСЕ
								   | 
					               |ВЫБРАТЬ
					               |	ДокументПоступления.Ссылка
					               |ИЗ
					               |	Документ.ПоступлениеУслугПрочихАктивов КАК ДокументПоступления
					               |ГДЕ
					               |	ДокументПоступления.Контрагент = &Контрагент
					               |	И ДокументПоступления.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
					               |	И ДокументПоступления.НомерВходящегоДокумента ПОДОБНО &НомерВходящегоДокумента
					               |	И ДокументПоступления.Проведен = ИСТИНА
					               |
					               |ОБЪЕДИНИТЬ ВСЕ
					               |
					               |ВЫБРАТЬ
					               |	ДокументПоступления.Ссылка
					               |ИЗ
					               |	Документ.ПоступлениеУслугПоЛизингу КАК ДокументПоступления
					               |ГДЕ
					               |	ДокументПоступления.Контрагент = &Контрагент
					               |	И ДокументПоступления.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
					               |	И ДокументПоступления.НомерВходящегоДокумента ПОДОБНО &НомерВходящегоДокумента
					               |	И ДокументПоступления.Проведен = ИСТИНА";
					
					Запрос.УстановитьПараметр("Контрагент", ТекущийДокумент.Контрагент);
					Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураЭД.ДатаВходящегоДокумента);
					Запрос.УстановитьПараметр("НомерВходящегоДокумента", "%"+ СтруктураЭД.НомерВходящегоДокумента + "%");
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						СтруктураОтбора = Новый Структура("ТипСчетаФактуры", ТекущийДокумент.ТипСчетаФактуры);
											
						СуществующийСФ = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Выборка.Ссылка,,, СтруктураОтбора);
						Если СуществующийСФ = Неопределено Тогда
							
							ТекущийДокумент.ДокументОснование = Выборка.Ссылка;
							
							НоваяСтрока = ТекущийДокумент.ДокументыОснования.Добавить();
							НоваяСтрока.ДокументОснование = Выборка.Ссылка;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийДокумент.СуммаДокумента = СтруктураЭД.СуммаДокумента;
		ТекущийДокумент.СуммаНДС = СтруктураЭД.СуммаНДС;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Организация) 
					И ЗначениеЗаполнено(ТекущийДокумент.Контрагент) 
					И ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		
		СтруктураЭД.Вставить("ВладелецЭД", 		ТекущийДокумент.Ссылка);
		СтруктураЭД.Вставить("ДатаСоздания", 	ТекущаяДатаСеанса());
		СтруктураЭД.Вставить("Автор", 			Пользователи.АвторизованныйПользователь());
	
		ШаблонСообщения = НСтр("ru='Создан документ ""Счет-фактура полученный"" %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат ТекущийДокумент.Ссылка;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка создания документа ""Счет-фактура полученный"" на основании счет-фактуры %1: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки; 
		
КонецФункции

Функция СоздатьДокументСчетФактураКомитента(СтруктураЭД) 
	
	Попытка
		
		ТекущийДокумент = Документы.СчетФактураКомитента.СоздатьДокумент();
		
		Если СтруктураЭД.Свойство("УНПОрганизации") Тогда
			ТекущийДокумент.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", СтруктураЭД.УНПОрганизации);
			Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Организация) Тогда
				ШаблонСообщения = НСтр("ru='Не найдена организация с УНП %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.УНПОрганизации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;	
		
		ТекущийДокумент.Номер					= СтруктураЭД.НомерЭД;
		ТекущийДокумент.Валюта			 		= Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если СтруктураЭД.Свойство("ДатаВходящегоДокумента") Тогда
			ТекущийДокумент.Дата	= СтруктураЭД.ДатаВходящегоДокумента;
		Иначе	
			ТекущийДокумент.Дата	= СтруктураЭД.Дата;
		КонецЕсли;	
			
		Если СтруктураЭД.ТипДокумента = "ORIGINAL" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		ИначеЕсли 	 СтруктураЭД .ТипДокумента = "ADDITIONAL" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Дополнительный;
		ИначеЕсли СтруктураЭД.ТипДокумента = "ADD_NO_REFERENCE" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки;
		ИначеЕсли  СтруктураЭД.ТипДокумента = "FIXED" Тогда
			ТекущийДокумент.ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исправленный;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УНПКонтрагента") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	Контрагенты.Ссылка
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.ИНН ПОДОБНО &ИНН
			               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ИНН", "%" + СтруктураЭД.УНПКонтрагента + "%");
			
			Если СтруктураЭД.Свойство("КодФилиалаКонтрагента") Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И Контрагенты.КодФилиала ПОДОБНО &КодФилиала";
				Запрос.УстановитьПараметр("КодФилиала", "%" + СтруктураЭД.КодФилиалаКонтрагента + "%");
			КонецЕсли;	
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийДокумент.Комитент = Выборка.Ссылка;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекущийДокумент.Комитент) Тогда
				
				Если СтруктураЭД.Свойство("НомерВходящегоДокумента") И СтруктураЭД.Свойство("ДатаВходящегоДокумента") Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	КРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
					|	КРегистрации.Покупатель КАК Покупатель,
					|	КРегистрации.Дата КАК Дата,
					|	КРегистрации.Субкомиссионер КАК Субкомиссионер,
					|	КРегистрации.СуммаСНДС КАК СуммаСНДС,
					|	КРегистрации.СуммаНДС КАК СуммаНДС
					|ИЗ
					|	РегистрСведений.СчетаФактурыКомитентовКРегистрации КАК КРегистрации
					|ГДЕ
					|	КРегистрации.Дата <= &Дата
					|	И КРегистрации.Комитент = &Комитент
					|	И КРегистрации.Организация = &Организация
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата,
					|	СчетФактураВыданный";
					
					Запрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
					Запрос.УстановитьПараметр("Комитент", ТекущийДокумент.Комитент);
					Запрос.УстановитьПараметр("Дата", ?(СтруктураЭД.Свойство("ДатаВходящегоДокумента"), СтруктураЭД.ДатаВходящегоДокумента, СтруктураЭД.Дата));
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						ЗаполнитьЗначенияСвойств(ТекущийДокумент.Покупатели.Добавить(), Выборка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийДокумент.СуммаСНДС = СтруктураЭД.СуммаДокумента;
		ТекущийДокумент.СуммаНДС = СтруктураЭД.СуммаНДС;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Организация) 
					И ЗначениеЗаполнено(ТекущийДокумент.Комитент) 
					И ТекущийДокумент.Покупатели.Итог("СуммаСНДС") = СтруктураЭД.СуммаДокумента Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
		
		СтруктураЭД.Вставить("ВладелецЭД", 		ТекущийДокумент.Ссылка);
		СтруктураЭД.Вставить("ДатаСоздания", 	ТекущаяДатаСеанса());
		СтруктураЭД.Вставить("Автор", 			Пользователи.АвторизованныйПользователь());
	
		ШаблонСообщения = НСтр("ru='Создан документ ""Счет-фактура полученный от комитента (принципала)"" %1%2'");
		Если ТекущийДокумент.Покупатели.Итог("СуммаСНДС") <> СтруктураЭД.СуммаДокумента Тогда
			ТекстПараметра2 = НСтр("ru='. Необходимо подобрать покупателей на сумму " + СтруктураЭД.СуммаДокумента);
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД, ТекстПараметра2);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат ТекущийДокумент.Ссылка;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru='Ошибка создания документа ""Счет-фактура полученный от комитента (принципала)"" на основании счет-фактуры %1: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.НомерЭД, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки; 
		
КонецФункции

Функция СоздатьПрисоединенныйФайл(СтруктураЭД) Экспорт
	
	Файл = Новый Файл(СтруктураЭД.ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ДобавленныйФайл = ПолучитьЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
	Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
		СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		СтруктураЭД.Вставить("АдресВременногоХранилищаТекста", "");
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);	
		
	Иначе	
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
			СтруктураЭД.ВладелецЭД,
			СтруктураЭД.НомерЭД,
			СтрЗаменить(Файл.Расширение, ".", ""),
			ТекущаяДатаСеанса(),
			ТекущаяДатаСеанса(),
			АдресФайла,
			Неопределено,
			"",
			Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	КонецЕсли;
	
	СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
	
	ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	УстановитьСсылкуДляВладельцаВРегистреСостояний(СтруктураЭД, ДобавленныйФайл);
	
	Возврат Истина;
	
КонецФункции

Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
	КонецЕсли;
		
	Если СтруктураЭД.Свойство("НомерЭД") Тогда 
		ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Автор") Тогда
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СтатусЭД") Тогда
		ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	Иначе
		Если ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ФайлОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		Иначе
			ФайлОбъект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	ФайлОбъект.Записать();
	
КонецПроцедуры

Процедура ОбновитьВерсиюЭД(СсылкаНаОбъект, СтруктураСтатусов, ДатаИзмененияСтатуса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭСЧФ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 0 Тогда
		
		НоваяЗаписьНабора 									= НаборЗаписей.Получить(0);
		НоваяЗаписьНабора.СостояниеВерсииЭД 				= СтруктураСтатусов.СостояниеВерсииЭД;
		НоваяЗаписьНабора.ДействияСНашейСтороны 			= СтруктураСтатусов.ДействияСНашейСтороны;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСтатусов.ДействияСоСтороныДругогоУчастника;
		НоваяЗаписьНабора.ЭлектронныйДокумент 				= НоваяЗаписьНабора.ЭлектронныйДокумент;
		НоваяЗаписьНабора.НомерЭД 							= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяЗаписьНабора.ЭлектронныйДокумент, "НомерЭД");
		
		Если ДатаИзмененияСтатуса <> Неопределено Тогда
			НоваяЗаписьНабора.ДатаИзмененияСтатуса			= ПреобразоватьВДатуИзмененияСтатуса(ДатаИзмененияСтатуса);	
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьВДатуИзмененияСтатуса(ДатаИзмененияСтатуса)
	Возврат Дата(Лев(ДатаИзмененияСтатуса,4) + Сред(ДатаИзмененияСтатуса,6,2) + Сред(ДатаИзмененияСтатуса,9,2));
КонецФункции	

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СтруктураЭД, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭСЧФ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СтруктураЭД.ВладелецЭД);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СтруктураЭД.ВладелецЭД;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
	КонецЕсли;
	
	НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяЗаписьНабора.НомерЭД 			  = СтруктураЭД.НомерЭД;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииЭД

Функция ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД) Экспорт
	
	ИмяФайла = "";
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		ДанныеЭД.Записать(ИмяФайла);
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭСЧФ КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД  = Справочники.СостоянияВерсийЭСЧФ.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество() > 0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);

	Возврат СтруктураВерсииЭД;
	
КонецФункции

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.ДатаСоздания УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСчетФактураВходящаяПоНомеруЭД(НомерЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерЭД", "%" + НомерЭД + "%");
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученный.Номер ПОДОБНО &НомерЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураКомитента.Ссылка
	|ИЗ
	|	Документ.СчетФактураКомитента КАК СчетФактураКомитента
	|ГДЕ
	|	СчетФактураКомитента.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураКомитента.Номер ПОДОБНО &НомерЭД";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктуруСтатусовЭСЧФ(lastStatus, Исходящая) Экспорт 
	
	Статус = Справочники.СостоянияВерсийЭСЧФ.НайтиПоКоду(lastStatus);
	Если Статус = Справочники.СостоянияВерсийЭСЧФ.ПустаяСсылка() Тогда
		ВызватьИсключение "Неизвестный статус";
	КонецЕсли;	
	
	//В разработке
	Если lastStatus = "IN_PROGRESS" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СтатусЭД 							= Перечисления.СтатусыЭД.Отправлен;
		
	//В разработке. Ошибка
	ИначеЕсли lastStatus = "IN_PROGRESS_ERROR" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СтатусЭД 							= Перечисления.СтатусыЭД.ОшибкаПередачи;
		
	//Выставлен
	ИначеЕсли lastStatus = "COMPLETED" Тогда 
		Если Исходящая Тогда
			ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		Иначе
			ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		КонецЕсли;	
		СтатусЭД 							= Перечисления.СтатусыЭД.ЧастичноПодписан;
	
	//На согласовании
	// Данный статус присваивается для дополнительных и исправленных ЭСЧФ в следующих случаях:
	// -   Когда на исходный (исправленный) счет-фактуру, который подписан обеими сторонами,
	// выставляется дополнительный ЭСЧФ с отрицательной суммой;
	// -   Когда на исходный (исправленный) счет-фактуру, который подписан обеими сторонами,
	// выставляется исправленный ЭСЧФ.
	ИначеЕсли lastStatus = "ON_AGREEMENT" Тогда 
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		СтатусЭД 							= Перечисления.СтатусыЭД.ЧастичноПодписан;
		
	//Выставлен. Подписан получателем	
	ИначеЕсли lastStatus = "COMPLETED_SIGNED" Тогда 
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтатусЭД 							= Перечисления.СтатусыЭД.ПолностьюПодписан;
		
	//Выставлен. Аннулирован поставщиком
	ИначеЕсли lastStatus = "ON_AGREEMENT_CANCEL" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		СтатусЭД 							= Перечисления.СтатусыЭД.ОтклоненПолучателем;
		
	//Аннулирован
	ИначеЕсли lastStatus = "CANCELLED" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.Отклонен;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.Отклонен;
		СтатусЭД 							= Перечисления.СтатусыЭД.Отклонен;
		
	//Не найден
	ИначеЕсли lastStatus = "NOT_FOUND" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СтатусЭД 							= Перечисления.СтатусыЭД.Отклонен;
		
	//Отказано	
	ИначеЕсли lastStatus = "DENIED" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СтатусЭД 							= Перечисления.СтатусыЭД.Отклонен;
		
	//Ошибка
	ИначеЕсли lastStatus = "ERROR" Тогда
		ДействияСНашейСтороны				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ДействияСоСтороныДругогоУчастника   = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		СтатусЭД 							= Перечисления.СтатусыЭД.ОшибкаПередачи;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеВерсииЭД", Статус);
	Результат.Вставить("ДействияСНашейСтороны", ДействияСНашейСтороны);
	Результат.Вставить("ДействияСоСтороныДругогоУчастника", ДействияСоСтороныДругогоУчастника);
	Результат.Вставить("СтатусЭД", СтатусЭД);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура УправлениеЭлементамиФормы(Форма) Экспорт

	ВернутьВИсходноеСостояниеЭлементыФормыЭСЧФ(Форма);
	
	струкОбработанныхРеквизитов = Новый Структура;
	
	// возможно в старых формулах использования основного реквизита "Объект"
	Объект = Форма.Объект;
	
	струкСтраныЕАЭС = Справочники.СтраныМира.ПолучитьСтруктуруСтраныЕАЭС(Форма.Объект.Дата);
	мсвКодыЕАЭС = СтрРазделить(струкСтраныЕАЭС.Код, ",", Ложь);
	струкСтатусовЭСЧФ = СтруктураСтатусовЭСЧФ(Форма.Объект);
	НаИмпорт = струкСтатусовЭСЧФ.НаИмпорт;
	ОрганизацияБудетПолучателем = НаИмпорт;
	струкЗаменыРеквизитов = ПолучитьСтруктуруРеквизитовДокументаДляЗаменыПоУниверсальнымИменам(Форма.Объект.Ссылка);
	
	//для удобства формул создадим переменные для выражений, как в модуле объекта
	мдОбъекта = Форма.Объект.Ссылка.Метаданные();
	стрВыполнить = ПолучитьСтрокуРеквизитыКакПеременные(мдОбъекта, "Объект");
	
	// возможно в старых формулах использования основного реквизита "Объект"
	Объект = Форма.Объект;
	
	//проверим правила
	ВыборкаПравил = РегистрыСведений.ПравилаЗаполненияПолейЭСЧФ.Выбрать();
	СтрокаПравила = Новый Структура("ИмяРеквизита, Доступный, Обязательный");
	Пока ВыборкаПравил.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтрокаПравила, ВыборкаПравил);
		Для Каждого КлЗнПравила Из СтрокаПравила Цикл
			Если Не ПустаяСтрока(КлЗнПравила.Значение) Тогда
				Для Каждого КлЗнРеквизита Из струкЗаменыРеквизитов Цикл
					СтрокаПравила[КлЗнПравила.Ключ] = СтрЗаменить(КлЗнПравила.Значение, "%" + КлЗнРеквизита.Ключ + "%", КлЗнРеквизита.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// предусмотрим возможность в одном правиле указания множества реквизитов разделенных запятой
		Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаПравила.ИмяРеквизита, ";", Ложь) Цикл
			
			Если стрНайти(ИмяРеквизита, "?") > 0 Тогда
				Выполнить(стрВыполнить + Символы.ПС + "ИмяРеквизита = " + ИмяРеквизита);
			Иначе
				ИмяРеквизита = СокрЛП(ИмяРеквизита);
			КонецЕсли;
			
			Если НРег(ИмяРеквизита) = "текущаястрока" Или стрНайти(ИмяРеквизита, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Элемент = Форма.Элементы.Найти(ИмяРеквизита);
			Если Элемент <> Неопределено Тогда
				
				Если Не струкОбработанныхРеквизитов.Свойство(ИмяРеквизита) Тогда
					Элемент = Форма.Элементы[ИмяРеквизита];
					Элемент.Подсказка   = "";
					Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
					
					струкОбработанныхРеквизитов.Вставить(ИмяРеквизита, Элемент.Доступность);
				КонецЕсли;
				
				Доступный = Ложь;
				Если НЕ ПустаяСтрока(СтрокаПравила.Доступный) Тогда
					
					Выполнить(стрВыполнить + Символы.ПС + "Доступный = " + СтрЗаменить(СтрокаПравила.Доступный, "%Реквизит%", ИмяРеквизита));
					
					Если Доступный Тогда
						
						// доступные элементы настроенные в конфигураторе, не меняются
						Если Не Элемент.Доступность Тогда
							Форма.ДоступныеРеквизиты.Добавить(ИмяРеквизита);
						КонецЕсли;
						
						Элемент.Доступность = Истина;
						струкОбработанныхРеквизитов[ИмяРеквизита] = Истина;
						
						Элемент.Подсказка   = ?(ПустаяСтрока(Элемент.Подсказка), "", Элемент.Подсказка + Символы.ПС) + ?(СтрНайти(Элемент.Подсказка, ВыборкаПравил.Наименование + " : ") = 0, ВыборкаПравил.Наименование + " : " + СокрЛП(ВыборкаПравил.Правило), "");
						Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
						
					КонецЕсли;	
					
				КонецЕсли;
				
				Обязательный = Ложь;
				Если НЕ ПустаяСтрока(СтрокаПравила.Обязательный) Тогда
					
					Выполнить(стрВыполнить + Символы.ПС + "Обязательный = " + СтрЗаменить(СтрокаПравила.Обязательный, "%Реквизит%", ИмяРеквизита));
					Если Форма.ОбязательныеРеквизиты.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
						Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
							Элемент.АвтоОтметкаНезаполненного = Обязательный;
						КонецЕсли;	
						Если Обязательный Тогда
							Форма.ОбязательныеРеквизиты.Добавить(ИмяРеквизита); 
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//очистим недоступные реквизиты
	Для Каждого КлЗн Из струкОбработанныхРеквизитов Цикл
		ИмяРеквизита = КлЗн.Ключ;
		
		Если Не КлЗн.Значение Тогда
			Если ЗначениеЗаполнено(Форма.Объект[ИмяРеквизита]) И Форма.Объект[ИмяРеквизита] <> Неопределено Тогда
				Форма.Объект[ИмяРеквизита] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Форма.Объект[ИмяРеквизита]));
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВернутьВИсходноеСостояниеЭлементыФормыЭСЧФ(Форма) Экспорт
	
	//отключим доступность по предыдущему правилу
	Для Каждого ИмяРеквизита ИЗ Форма.ДоступныеРеквизиты Цикл
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если Элемент <> Неопределено Тогда
			Элемент.Доступность = Ложь;
			Элемент.Подсказка = "";
		КонецЕсли;	
	КонецЦикла;	
	Форма.ДоступныеРеквизиты.Очистить();
	
	//и автоотметку незаполненного
	Для Каждого ИмяРеквизита ИЗ Форма.ОбязательныеРеквизиты Цикл
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если Элемент <> Неопределено Тогда
			Элемент.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	Форма.ОбязательныеРеквизиты.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокОбъект, Отказ) Экспорт
	
	Если ДокОбъект.ДополнительныеСвойства.Свойство("ПроведениеИзФормыДокумента") Тогда
		ПроверкаИзФормыДокумента =  ДокОбъект.ДополнительныеСвойства.ПроведениеИзФормыДокумента;
	Иначе
		Возврат;
	КонецЕсли;
	
	// возможность в формулах использования переменной "Объект" как и для формы
	Объект = ДокОбъект;
	
	мсвКодыЕАЭС = СтрРазделить(Справочники.СтраныМира.ПолучитьСтруктуруСтраныЕАЭС(ДокОбъект.Дата).Код, ",", Ложь);
	струкСтатусовЭСЧФ = СтруктураСтатусовЭСЧФ(ДокОбъект);
	НаИмпорт = струкСтатусовЭСЧФ.НаИмпорт;
	ОрганизацияБудетПолучателем = НаИмпорт;
	струкЗаменыРеквизитов = ПолучитьСтруктуруРеквизитовДокументаДляЗаменыПоУниверсальнымИменам(ДокОбъект.Ссылка);
	
	мдОбъекта = ДокОбъект.Метаданные();
	
	//для удобства формул создадим переменные для выражений, как в модуле объекта
	стрВыполнить = ПолучитьСтрокуРеквизитыКакПеременные(мдОбъекта, "ДокОбъект");
	
	//получим состояние Состояние ЭСЧФ
	Если ЗначениеЗаполнено(ДокОбъект.СчетФактураОснование) Тогда
		струкСостояниеЭСЧФ = РегистрыСведений.СостоянияЭСЧФ.Получить(Новый Структура("СсылкаНаОбъект", ДокОбъект.СчетФактураОснование));
	КонецЕсли;
	
	ВыборкаПравил = РегистрыСведений.ПравилаЗаполненияПолейЭСЧФ.Выбрать();
	СтрокаПравила = Новый Структура("ИмяРеквизита, ПроверкаЗаполнения");
	
	//проверим правила шапки
	//считаем, что имена элементов формы совпадают с проверяемыми именами реквизитов
	Пока ВыборкаПравил.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтрокаПравила, ВыборкаПравил);
		Для Каждого КлЗнПравила Из СтрокаПравила Цикл
			Если Не ПустаяСтрока(КлЗнПравила.Значение) Тогда
				Для Каждого КлЗнРеквизита Из струкЗаменыРеквизитов Цикл
					СтрокаПравила[КлЗнПравила.Ключ] = СтрЗаменить(КлЗнПравила.Значение, "%" + КлЗнРеквизита.Ключ + "%", КлЗнРеквизита.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(СтрокаПравила.ПроверкаЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяРеквизита Из СтрРазделить(СтрокаПравила.ИмяРеквизита, ";", Ложь) Цикл
			
			Если стрНайти(ИмяРеквизита, "?") > 0 Тогда
				Выполнить(стрВыполнить + Символы.ПС + Символы.ПС + "ИмяРеквизита = " + ИмяРеквизита);
			Иначе
				ИмяРеквизита = СокрЛП(ИмяРеквизита);
			КонецЕсли;
			
			ЭтоРеквизитФормы = НРег(Лев(ИмяРеквизита, 6)) = "форма.";
			
			Если ЭтоРеквизитФормы Или Лев(ИмяРеквизита, 2) = "//" Тогда
				// обрабатываем только реквизиты документа и не закомментированные
				Продолжить;
				
			ИначеЕсли НРег(ИмяРеквизита) = "текущаястрока" Или стрНайти(ИмяРеквизита, ".") > 0 Тогда
				
				Если НРег(ИмяРеквизита) = "текущаястрока" Тогда
					ИмяТЧ = "Товары";
					ИмяРеквизитаТЧ = "";
				Иначе
					мсвПуть = СтрРазделить(ИмяРеквизита, ".", Ложь);
					ИмяТЧ = мсвПуть[0];
					ИмяРеквизитаТЧ = мсвПуть[1];
				КонецЕсли;
				
				Для Каждого ТекущаяСтрока ИЗ ДокОбъект[ИмяТЧ] Цикл
					
					Проверка = Ложь;
					Выполнить(стрВыполнить + Символы.ПС + Символы.ПС + "Проверка = " + СтрЗаменить(СтрокаПравила.ПроверкаЗаполнения, "%Реквизит%", "ТекущаяСтрока." + ИмяРеквизитаТЧ));
					
					Если Проверка = Истина Тогда
						
						Если ПроверкаИзФормыДокумента Тогда
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ВыборкаПравил.Наименование + Символы.ПС + ВыборкаПравил.Правило;
							Сообщение.Поле = ИмяТЧ + "[" + Формат(ДокОбъект[ИмяТЧ].Индекс(ТекущаяСтрока), "ЧГ=") + "]" + ?(ПустаяСтрока(ИмяРеквизитаТЧ), "", "." + ИмяРеквизитаТЧ);
							Сообщение.УстановитьДанные(ДокОбъект);
							Сообщение.Сообщить();
							
							Отказ = Истина;
							
							//разкомментировать, если слишком много строк с ошибками сообщений одного правила
							//Прервать;
						
						Иначе
							// проверка не из формы
							ШаблонСообщения = НСтр("ru='Проверьте правильность заполнения реквизитов ЭСЧФ в документе %1 через форму документа'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДокОбъект.Ссылка);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Проверка = Ложь;
				Выполнить(стрВыполнить + Символы.ПС + Символы.ПС + "Проверка = " + СтрЗаменить(СтрокаПравила.ПроверкаЗаполнения, "%Реквизит%", ИмяРеквизита));
				
				Если Проверка = Истина Тогда
					
					Если ПроверкаИзФормыДокумента Тогда
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ВыборкаПравил.Наименование + Символы.ПС + ВыборкаПравил.Правило;
						Сообщение.Поле = ИмяРеквизита;
						Сообщение.УстановитьДанные(ДокОбъект);
						Сообщение.Сообщить();
						
						Отказ = Истина;

					Иначе
						ШаблонСообщения = НСтр("ru='Проверьте правильность заполнения реквизитов ЭСЧФ в документе %1 через форму документа'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДокОбъект.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтрокуРеквизитыКакПеременные(мдОбъекта, ИмяПеремОбъекта, стрТипыКоллекцийМД = "СтандартныеРеквизиты, Реквизиты, ТабличныеЧасти") Экспорт
	
	//для удобства формул создадим переменные для выражений, как в модуле объекта
	стрВыполнить = "";
	Для Каждого ИмяКоллекции Из СтрРазделить(стрТипыКоллекцийМД, ",", Ложь) Цикл
		Для Каждого мдЭлемента Из мдОбъекта[СокрЛП(ИмяКоллекции)] Цикл
			стрВыполнить = стрВыполнить + Символы.ПС + мдЭлемента.Имя + " = " + ИмяПеремОбъекта + "." + мдЭлемента.Имя + ";";
		КонецЦикла;
	КонецЦикла;
	
	Возврат стрВыполнить;
	
КонецФункции

Функция СтруктураСтатусовЭСЧФ(Данные, Знач ТребуемыеСвойства = "") Экспорт
	
	Если ПустаяСтрока(ТребуемыеСвойства) Тогда
		ТребуемыеСвойства = "НаИмпорт, Розница, ЭтоЭкспорт";
	КонецЕсли;
	
	Результат = Новый Структура(ТребуемыеСвойства);
	
	Если ТипЗнч(Данные) = Тип("ДокументСсылка.СчетФактураВыданный") Или ТипЗнч(Данные) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		РеквизитыЭСЧФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Данные,
			"ДокументОснование,
			|РегистрационныйНомерВыпускаТоваров,
			|НомерЗаявленияОВвозеТоваров,
			|ДатаЗаявленияОВвозеТоваров")
		;
	Иначе
	    РеквизитыЭСЧФ = Данные;
	КонецЕсли;
	
	Если Результат.Свойство("НаИмпорт") Тогда
		Результат.НаИмпорт = ТипЗнч(РеквизитыЭСЧФ.ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Или ТипЗнч(РеквизитыЭСЧФ.ДокументОснование) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт");
	КонецЕсли;
	
	Если Результат.Свойство("Розница") Тогда
		// ...
		Результат.Розница = Ложь;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоЭкспорт") Тогда
		Результат.ЭтоЭкспорт =
			ЗначениеЗаполнено(РеквизитыЭСЧФ.РегистрационныйНомерВыпускаТоваров) ИЛИ
			ЗначениеЗаполнено(РеквизитыЭСЧФ.НомерЗаявленияОВвозеТоваров) ИЛИ
			ЗначениеЗаполнено(РеквизитыЭСЧФ.ДатаЗаявленияОВвозеТоваров)
		;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СХ_ВходитВЕАЭС(спрСсылка, парКодыЕАЭС = Неопределено, Знач Дата = '00010101', резДляНезаполненного = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(спрСсылка) Тогда
		Возврат резДляНезаполненного;
	КонецЕсли;
	
	СтранаРегистрацииКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		спрСсылка,
		"СтранаРегистрации.Код")
	;
	
	Если ТипЗнч(парКодыЕАЭС) = Тип("Массив") Тогда
		мсвКодыЕАЭС = парКодыЕАЭС;
	ИначеЕсли ТипЗнч(парКодыЕАЭС) = Тип("Строка") И Не ПустаяСтрока(парКодыЕАЭС) Тогда
		мсвКодыЕАЭС = СтрРазделить(парКодыЕАЭС, ",", Ложь);
	Иначе
		мсвКодыЕАЭС = СтрРазделить(Справочники.СтраныМира.ПолучитьСтруктуруСтраныЕАЭС(Дата).Код, ",", Ложь);
	КонецЕсли;
	
	Возврат мсвКодыЕАЭС.Найти(СтранаРегистрацииКод) <> Неопределено;
	
КонецФункции

Функция СХ_ИностранныйРезидент(спрСсылка, резДляНезаполненного = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(спрСсылка) Тогда
		ЭтоИностранныйРезидент = резДляНезаполненного;
		
	ИначеЕсли ТипЗнч(спрСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			спрСсылка,
			"ЮрФизЛицо, СтранаРегистрации, СтранаРегистрации.Код")
		;
		ЭтоИностранныйРезидент = РеквизитыСсылки.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент И РеквизитыСсылки.СтранаРегистрации <> Справочники.СтраныМира.Беларусь И РеквизитыСсылки.СтранаРегистрацииКод <> "112";
		
	ИначеЕсли ТипЗнч(спрСсылка) = Тип("СправочникСсылка.Организации") Тогда
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			спрСсылка,
			"ИностраннаяОрганизация, СтранаРегистрации, СтранаРегистрации.Код")
		;
		ЭтоИностранныйРезидент = РеквизитыСсылки.ИностраннаяОрганизация И РеквизитыСсылки.СтранаРегистрации <> Справочники.СтраныМира.Беларусь И РеквизитыСсылки.СтранаРегистрацииКод <> "112";  
	КонецЕсли;
	
	Возврат ЭтоИностранныйРезидент;
	
КонецФункции

Функция ВхождениеКодТНВЭД_УказN287от21_06_2007_ОНалогообложенииПродовольственныхТоваровИТоваровДляДетей(спрСсылка)
	
	// простая проверка
	Если Не ЗначениеЗаполнено(спрСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		спрСсылка,
		"Код")
	;
	
	Возврат СтрДлина(КодТНВЭД) = 10;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовДокументаДляЗаменыПоУниверсальнымИменам(СчетФактураСсылка)
	
	струкЗаменыРеквизитов = Новый Структура("Контрагент", "Контрагент");
	
	Если ТипЗнч(СчетФактураСсылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		струкЗаменыРеквизитов.Контрагент = "Комиссионер";
	ИначеЕсли ТипЗнч(СчетФактураСсылка) = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
		струкЗаменыРеквизитов.Контрагент = "Комитент";
	ИначеЕсли ТипЗнч(СчетФактураСсылка) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		струкЗаменыРеквизитов.Контрагент = "Поставщик";
	КонецЕсли;
	
	Возврат струкЗаменыРеквизитов;
	
КонецФункции

#КонецОбласти
