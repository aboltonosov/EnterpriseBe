
#Область СлужебныеПроцедурыИФункции

// Функция конструирует структуру, описывающую данные о начислениях 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОНачисленияхСреднегоЗаработкаФСС() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПоляОписания.Вставить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ПоляОписания.Вставить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции
	   
// Функция конструирует структуру, описывающую данные периодах отсутствия.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиПериодовДнейБолезниУходаЗаДетьми() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Начало", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Окончание", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Дни", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ВидБолезниУходаЗаДетьми", Новый ОписаниеТипов("Строка"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция КатегорияНачисленияПоПричинеНетрудоспособности(ПричинаНетрудоспособности) Экспорт
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста");
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам");
		
		// 4D:ERP для Беларуси, Петр, 22.02.2018 12:58:15 
		// Редактировать отборы для Категории начисления и неоплаченного времени, № 17828
		// {
		// Действие не требуется
		// }
		// 4D
		
	КонецЕсли;
	
	Возврат КатегорияНачисления;
	
КонецФункции

Функция КатегорияНачисленияОплатаБольничногоЛистаЗаСчетРаботодателя() Экспорт
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя");
	
	Возврат КатегорияНачисления;
	
КонецФункции

Функция КатегорияНачисленияДоплатаДоСреднегоЗаработкаЗаДниБолезни() Экспорт
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни");
	
	Возврат КатегорияНачисления;
	
КонецФункции

Функция КатегорияНеоплачиваемогоВремениПоПричинеНетрудоспособности(ПричинаНетрудоспособности) Экспорт
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты");
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты");
	КонецЕсли;
	
	Возврат КатегорияНачисления;
	
КонецФункции

// 4D:ERP для Беларуси, Яна, 22.05.2017 11:01:51 
// Документ "Отпуск по уходу за ребенком", № 14900
// {
#Область СреднийЗаработокФСС

Функция СреднийЗаработокФСС(ПараметрыРасчета) Экспорт 
	
	СреднийЗаработокФСЗН = 0;
		
	Если ПараметрыРасчета.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация") Тогда
		СреднийЗаработокФСЗН = СреднийЗаработокФСЗН(ПараметрыРасчета);
	КонецЕсли;
	
	Возврат СреднийЗаработокФСЗН;
	
КонецФункции

Функция ПорядокРасчетаСреднегоЗаработкаФСС(Период) Экспорт
	
	ПрименениеПорядкаРасчета = Новый Массив;
	
	// значение по умолчанию		
	ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация");
	
	//УчетСреднегоЗаработкаКлиентСервер.ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПрименениеПорядкаРасчета);
	
	Возврат ПорядокРасчета;
	
КонецФункции

Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС() Экспорт
	
	Параметры = Новый Структура("ДатаНачалаСобытия, 
		|ПериодРасчетаСреднегоЗаработкаНачало, 
		|ПериодРасчетаСреднегоЗаработкаОкончание, 
		|ПериодыРасчета, 
		|РасчетныеГоды,
		|НеполныйРасчетныйПериод, 
		|ДанныеНачислений, 
		|ДанныеВремени, 
		|ДанныеСтрахователей, 
		|УчитыватьЗаработокПредыдущихСтрахователей, 
		|ИспользоватьДниБолезниУходаЗаДетьми, 
		|ПрименятьПредельнуюВеличину, 
		|ПредельныеВеличиныПоГодам,
		|ПредельныеВеличины,		
		|ПорядокРасчета, 
		|ДоляНеполногоВремени, 
		|РайонныйКоэффициентРФ, 
		|МинимальныйРазмерОплатыТрудаРФ, 
		|Сотрудник");
	
	//Параметры.РасчетныеГоды 						= Новый Массив;
	Параметры.ПериодыРасчета 						= Новый Массив;
	Параметры.НеполныйРасчетныйПериод			 	= Ложь;
	Параметры.ПредельныеВеличиныПоГодам 			= Новый Соответствие;
	Параметры.ИспользоватьДниБолезниУходаЗаДетьми 	= Ложь;
	Параметры.ПрименятьПредельнуюВеличину 			= Истина;
	Параметры.ДоляНеполногоВремени 					= 1;
	Параметры.РайонныйКоэффициентРФ 				= 1;
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
// }
// 4D

// 4D:ERP для Беларуси, Яна, 30.08.2017 17:50:51 
// Ошибка при вводе данных для расчета среднего заработка, №15832 
// {
#Область ДанныеРасчетаСреднегоЗаработкаФСЗН

Функция СреднийЗаработокФСЗН(ПараметрыРасчета)
	
	СреднедневнойЗаработок = 0;
	
	ПрименятьПредельнуюВеличину = ПараметрыРасчета.ПрименятьПредельнуюВеличину;
		
	ДанныеРасчетаСреднегоЗаработка = ДанныеРасчетаСреднегоЗаработкаФСЗН(ПараметрыРасчета);
	
	Заработок		= УчитываемыйЗаработокФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	КоличествоДней 	= УчитываемыхДнейФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	
	СреднедневнойЗаработок = УчетПособийСоциальногоСтрахованияКлиентСервер.СреднедневнойЗаработокФСС(Заработок, КоличествоДней);
			
	Возврат СреднедневнойЗаработок;
	
КонецФункции

Функция ДанныеРасчетаСреднегоЗаработкаФСЗН(ПараметрыРасчета) Экспорт
	
	ДанныеРасчета = Новый Массив;
		
	ДобавитьСтрокиРасчетныхПериодовФСЗН(ДанныеРасчета, ПараметрыРасчета);
	
	ДобавитьДанныеОЗаработкеФСЗН(ДанныеРасчета, ПараметрыРасчета);
	    
	ДобавитьДанныеОВремениФСЗН(ДанныеРасчета, ПараметрыРасчета);
			
	Возврат ДанныеРасчета;
	
КонецФункции

Процедура ДобавитьСтрокиРасчетныхПериодовФСЗН(ДанныеРасчета, ПараметрыРасчета)
	
	Отбор = Новый Структура;
	
	Для каждого Период Из ПараметрыРасчета.ПериодыРасчета Цикл
		Отбор.Очистить();
		Отбор.Вставить("Период", Период);
		ЭлементДанных = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор, Истина);
		Если ПараметрыРасчета.ПредельныеВеличины <> Неопределено Тогда 
			ПредельнаяВеличина = ПараметрыРасчета.ПредельныеВеличины.Получить(Период);
		Иначе
			ПредельнаяВеличина = Неопределено;
		КонецЕсли;
		ЭлементДанных.ПредельнаяВеличина = ?(ПредельнаяВеличина = Неопределено, 0, ПредельнаяВеличина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьДанныеОЗаработкеФСЗН(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого Начисление Из ПараметрыРасчета.ДанныеНачислений Цикл
		
		Если Начисление.ПорядокРасчета <> ПараметрыРасчета.ПорядокРасчета Тогда 
			Продолжить;
		КонецЕсли; 	
			
		Отбор.Очистить();
		Отбор.Вставить("Период", Начисление.Период);
		СтрокаЗаработка = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		СтрокаВремени = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ПараметрыРасчета.ДанныеВремени, Отбор); 
		
		Если СтрокаЗаработка <> Неопределено Тогда
			Сумма =  Начисление.Сумма;
			Если Начисление.СоставнаяЧасть = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеФСС.ПремияМесячная") Тогда
				Если СтрокаВремени <> Неопределено Тогда
					Если ПараметрыРасчета.РасчетПремии = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремени.ПоЧасам") Тогда  
						Если СтрокаВремени.НормаЧасов <> 0 И СтрокаВремени.ОтработаноЧасов <> 0 Тогда
							Сумма = Сумма*СтрокаВремени.ОтработаноЧасов/СтрокаВремени.НормаЧасов;
	                  	КонецЕсли;
					Иначе
						Если СтрокаВремени.НормаДней <> 0 И СтрокаВремени.ОтработаноДней <> 0 Тогда
							Сумма = Сумма*СтрокаВремени.ОтработаноДней/СтрокаВремени.НормаДней;
	                  	КонецЕсли;  						
					КонецЕсли;    
				КонецЕсли;
			КонецЕсли;
			СтрокаЗаработка.Заработок = СтрокаЗаработка.Заработок + Сумма;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеОВремениФСЗН(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого СтрокаВремени Из ПараметрыРасчета.ДанныеВремени Цикл 	
		
		Отбор.Очистить();
		Отбор.Вставить("Период", СтрокаВремени.Период);
		Строка = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		
		Если Строка <> Неопределено Тогда
			Строка.КалендарныхДней = Строка.КалендарныхДней + СтрокаВремени.ОтработаноДнейКалендарных;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСЗН() Экспорт
	
	Параметры = Новый Структура(
		"ДатаНачалаСобытия, 
		|ПериодРасчетаСреднегоЗаработкаНачало, 
		|ПериодРасчетаСреднегоЗаработкаОкончание, 
		|ПериодыРасчета, 
		|НеполныйРасчетныйПериод, 
		|ДанныеНачислений, 
		|ДанныеВремени, 
		|ДанныеСтрахователей, 
		|УчитыватьЗаработокПредыдущихСтрахователей, 
		|ИспользоватьДниБолезниУходаЗаДетьми, 
		|ПрименятьПредельнуюВеличину, 
		|ПредельныеВеличины,
		|ПорядокРасчета,
		|МинимальныйРазмерОплатыТрудаРФ, 
		|РасчетПремии,
		
		// 4D:ERP для Беларуси, Юлия, 19.09.2017 18:00:49 
		// Ошибка в документе "Больничный лист", № 16086
		// {
		|ДоляНеполногоВремени,
		// }
		// 4D
		
		|Сотрудник");
	
	
	Параметры.ПериодыРасчета 						= Новый Массив;
	Параметры.НеполныйРасчетныйПериод			 	= Ложь;
	Параметры.ПредельныеВеличины 					= Новый Соответствие;
	Параметры.ИспользоватьДниБолезниУходаЗаДетьми 	= Ложь;
	Параметры.ПрименятьПредельнуюВеличину 			= Истина;
	
	Возврат Параметры;
	
КонецФункции


Функция УчитываемыйЗаработокФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину Тогда
		ВсегоЗаработка = ЗаработокСУчетомОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка);
	Иначе
		ВсегоЗаработка = ЗаработокБезОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка);
	КонецЕсли;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокСУчетомОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
		ВсегоЗаработка = ВсегоЗаработка + Мин(Элемент.ПредельнаяВеличина, Элемент.Заработок);
	КонецЦикла;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокБезОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
			ВсегоЗаработка = ВсегоЗаработка + Элемент.Заработок;
	КонецЦикла;

	Возврат ВсегоЗаработка

КонецФункции

Функция УчитываемыхДнейФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоДней = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
			ВсегоДней = ВсегоДней + Элемент.КалендарныхДней;
	КонецЦикла;

	Возврат ВсегоДней

КонецФункции

#КонецОбласти
// }
// 4D

#КонецОбласти
