////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложения.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий форм.

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Для формы настройки выгрузки торгового предложения программно формирует элементы
// настройки торговых предложений (гиперссылки, статус).
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ЭлементИнтерфейса - ЭлементФормы - элемент формы.
//
Процедура ИнициализацияЭлементовФормы(Знач Форма, ЭлементИнтерфейса) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТипТорговоеПредложение = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип;
	Если ТипТорговоеПредложение.СодержитТип(ТипЗнч(Форма.Объект.Ссылка)) Тогда
		
		ЕстьПравоПубликацииТорговыхПредложений = Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаБизнесСеть");
			
		Если Не ЕстьПравоПубликацииТорговыхПредложений Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ЭлементИнтерфейса);
		ЭлементСостояниеОбмена = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТорговоеПредложение", Форма.Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации     КАК ДатаСинхронизации,
		|	СостоянияСинхронизацииТорговыеПредложения.Состояние             КАК Состояние,
		|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки        КАК ОписаниеОшибки,
		|	СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации КАК ДействиеСинхронизации
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		|ГДЕ
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Форма.ТорговыеПредложенияПубликовать = Ложь;
		Если Выборка.Следующий() Тогда
			Форма.ТорговыеПредложенияПубликовать = Истина;
			Если Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
				Форма.ТорговыеПредложенияСостояниеОбмена = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Выгружено'"),
				Формат(Выборка.ДатаСинхронизации, "ДЛФ=DT"));
				ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
				ЭлементСостояниеОбмена.Гиперссылка = Ложь;
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
				Если Выборка.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
					Форма.ТорговыеПредложенияСостояниеОбмена = НСтр("ru = 'Отмена публикации. Требуется синхронизация'");
					Форма.ТорговыеПредложенияПубликовать = Ложь;
				Иначе
					Форма.ТорговыеПредложенияСостояниеОбмена = НСтр("ru = 'Требуется синхронизация'");
				КонецЕсли;
				ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
				ЭлементСостояниеОбмена.Гиперссылка = Истина;
			Иначе
				Форма.ТорговыеПредложенияСостояниеОбмена = НСтр("ru = 'Ошибка выгрузки'");
				ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ЭлементСостояниеОбмена.Гиперссылка = Истина;
			КонецЕсли;
		КонецЕсли;
		Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Видимость = Форма.ТорговыеПредложенияПубликовать;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Источник - СправочникОбъект - источник события.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//  Отказ - Булево - признак отказа от выполнения действия.
//
Процедура ПередЗаписьюНаСервере(Знач Форма, Знач Источник, Знач Организация, Знач ЭлементИнтерфейса, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		ГруппаТорговыеПредложения = ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
		Если ГруппаТорговыеПредложения = Неопределено
			ИЛИ ГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ТорговыеПредложенияПубликовать") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ТорговыеПредложенияПубликовать Тогда
			ТекстСообщения = "";
			Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
				ТекстСообщения = НСтр("ru = 'Организация не указана. Публикация торговых предложений невозможна.'");
			ИначеЕсли Не БизнесСеть.ОрганизацияПодключена(Источник.Организация) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Организация %1 не подключена к сервису 1С:Бизнес-сеть. Публикация торговых предложений этой организации невозможна.'"),
					Источник.Организация);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					Источник.Ссылка, "Организация", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - СправочникОбъект - торговое предложений.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//
Процедура ПослеЗаписиНаСервере(Знач Форма, Знач ТекущийОбъект, Знач Организация, Знач ЭлементИнтерфейса = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;

	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(ТекущийОбъект.Ссылка)) Тогда
		
		Если ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Источник = ТекущийОбъект.Ссылка;
		ЭлементСостояниеОбмена = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		ЭлементНастройкиПубликации = Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации;
		Публиковать = Форма.ТорговыеПредложенияПубликовать;
		
		СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
		Выборка = СостоянияСинхронизации.Выбрать(Новый Структура("ТорговоеПредложение", Источник));
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = Источник;
		ЕстьЗапись = Ложь;
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Организация = Выборка.Организация;
			МенеджерЗаписи.Прочитать();
			ЕстьЗапись = Истина;
		Иначе
			МенеджерЗаписи.Организация = Организация;
		КонецЕсли;
		
		Если Публиковать Тогда
			Статус = НСтр("ru = 'Требуется синхронизация'");
		ИначеЕсли ЕстьЗапись Тогда
			Статус = НСтр("ru = 'Отмена публикации. Требуется синхронизация'");
		Иначе
			Статус = "";
		КонецЕсли;
		
		Если Не Публиковать И ЕстьЗапись Тогда
			Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление Тогда // отменяем синхронизацию
				МенеджерЗаписи.Удалить();
				Статус = "";
			Иначе
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
				МенеджерЗаписи.ДатаСинхронизации = '00010101';
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли Публиковать Тогда
			МенеджерЗаписи.ТорговоеПредложение = Источник;
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			МенеджерЗаписи.ДействиеСинхронизации = ?(ЕстьЗапись,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление);
			МенеджерЗаписи.Записать(ЕстьЗапись);
		КонецЕсли;
		
		Если ЭлементСостояниеОбмена <> Неопределено Тогда
			Форма.ТорговыеПредложенияСостояниеОбмена = Статус;
			ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ЭлементСостояниеОбмена.Гиперссылка = Истина;
			ЭлементНастройкиПубликации.Видимость = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементСостояниеОбмена.Доступность = Истина;
			ЭлементНастройкиПубликации.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Методы работы с рубрикатором.

// Получение категорий рубрикатора.
//
// Параметры:
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значения для заполнения.
//  Идентификатор	 - Строка - идентификатор категории.
//
Процедура ПолучитьКатегорииРубрикатора(СтрокаДерева, Знач Идентификатор) Экспорт
	
	Результат = Неопределено; Отказ = Ложь;
	ПараметрыКоманды = Новый Структура;
	
	Если Идентификатор = Неопределено Тогда
		// Получение корневого дерева.
		ВыполнитьКомандуРубрикатора("ПолучитьСписокКатегорийПервогоУровня", Неопределено, Результат, Отказ);
	Иначе
		// Получение вложенных объектов.
		ПараметрыКоманды.Вставить("ИдентификаторКатегории", Идентификатор);
		ВыполнитьКомандуРубрикатора("ПолучитьСписокДочернихКатегорий", ПараметрыКоманды, Результат, Отказ);
	КонецЕсли;
	
	ВозвращаемоеЗначение = "";
	Если Отказ ИЛИ Результат = Неопределено ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Результат.Данные Цикл
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.Идентификатор = Формат(ЭлементСтруктуры.Id, "ЧГ=");
		НоваяСтрока.Представление = ЭлементСтруктуры.title;
		НоваяСтрока.КоличествоПодчиненных = ЭлементСтруктуры.childrenCount;
		Если НоваяСтрока.КоличествоПодчиненных > 0 Тогда
			НоваяСтрока.ИндексКартинки = 0; // Картинка группы.
		Иначе
			НоваяСтрока.ИндексКартинки = 3; // Картинка элемента.
		КонецЕсли;
	КонецЦикла;
	
	СтрокаДерева.Строки.Сортировать("Представление", Истина); // Сортировка строк дерева.
	
КонецПроцедуры

// Выполнение команды рубрикатора.
//
// Параметры:
//   ИмяКоманды - Строка - имя метода.
//   ПараметрыКоманды - Структура - параметры вызова.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ВыполнитьКомандуРубрикатора(Знач ИмяКоманды, ПараметрыКоманды, Результат, Отказ) Экспорт
	
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды = Новый Структура;
	КонецЕсли;
	
	ПараметрыСоединения = Новый Структура(
		СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("БизнесСетьПараметрыСоединения"));
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения) Тогда
		ПараметрыСоединения = БизнесСеть.ОбщиеНастройкиСервиса();
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыРубрикатора(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединениеРубрикатора Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервераРубрикатора,
			ПараметрыСоединения.ПортРубрикатора,,,, 30, ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = нСтр("ru='Отсутствует соединение с сервером'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 5);
		Возврат;
	КонецПопытки;
	
	Результат = Новый Структура("КодСостояния, Данные");
	
	// Выполнение запроса HTTP к сервису.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыВызова.Адрес);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	Если ЗначениеЗаполнено(ПараметрыВызова.Данные) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВызова.Данные);
	КонецЕсли;
	
	Попытка
		Если ПараметрыВызова.Метод = "get" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "post" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "put" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ПараметрыВызова.Метод = "delete" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса:'") + " " + ИнформацияОбОшибке().Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 5);
		Возврат;
	КонецПопытки;
	
	// Обработка полученных данных.
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ОбъектJSON = Неопределено;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Если Результат.КодСостояния = 200 Тогда
			Результат.Данные = БизнесСеть.ПреобразоватьВСтрокуИзJSON(ТелоОтвета);
		Иначе
			Результат.Данные = ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	// Обработка ошибок сервиса.
	ТекстСообщения = "";
	Если Результат.КодСостояния >= 400 И Не Результат.КодСостояния = 404 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса (%1).'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяКоманды);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И Не ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках") Тогда
		
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru='Ошибка выполнения команды в сервисе 1С:Бизнес-сеть.'");
		КонецЕсли;
		
		ПодробныйТекстОшибки =  + Символы.ПС + СтрШаблон(НСтр("ru='Адрес: %1.'"), ПараметрыВызова.Адрес);
		Если ТипЗнч(ОбъектJSON) = Тип("Структура") Тогда
			Если ОбъектJSON.Свойство("message") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.message;
			ИначеЕсли ОбъектJSON.Свойство("error_description") Тогда
				ТекстОшибкиСервиса = ОбъектJSON.error_description;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстОшибкиСервиса) Тогда
				ПодробныйТекстОшибки = ПодробныйТекстОшибки
					+ Символы.ПС + СтрШаблон(НСтр("ru='Подробности: %1.'"), ТекстОшибкиСервиса);
			КонецЕсли;
		КонецЕсли;
		
		ВидОперации = СтрШаблон(НСтр("ru = 'Команда ""%1""'"), ИмяКоманды);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
			ПодробныйТекстОшибки, , 5);
		Результат.Вставить("ТекстОшибки", );
		Результат.Вставить("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение реквизитов рубрикатора по условиям.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * ВидНоменклатуры        - СправочникСсылка.ВидыНоменклатуры, Строка - владелец для отбора реквизитов.
//   * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка - адрес временного хранилища с результатом.
//
Процедура ПолучитьРеквизитыРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Получить данные из сервиса.
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИдентификаторКатегории", ПараметрыПроцедуры.ИдентификаторКатегории);
	
	Отказ = Ложь;
	Результат = Неопределено;
	
	ТорговыеПредложения.ВыполнитьКомандуРубрикатора("ПолучитьСписокХарактеристикКатегории", ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	// Сопоставленные значения реквизитов информационной базы и сервиса.
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	СопоставленныеРеквизиты.Колонки.Добавить("РеквизитОбъекта");
	СопоставленныеРеквизиты.Колонки.Добавить("ИдентификаторРеквизитаКатегории");
	СопоставленныеРеквизиты.Индексы.Добавить("ИдентификаторРеквизитаКатегории"); // Индекс.
	
	// Дополнительные реквизиты номенклатуры в информационной базе.
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитОбъекта", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения");
	
	// Таблица расчета сопоставленных значений реквизитов в информационной базе со значениями сервиса.
	РасчетСоответствий = Новый ТаблицаЗначений;
	РасчетСоответствий.Колонки.Добавить("РеквизитОбъекта");
	РасчетСоответствий.Колонки.Добавить("КоличествоЗначенийРеквизита");
	РасчетСоответствий.Колонки.Добавить("КоличествоСопоставленныхРеквизитов");
	РасчетСоответствий.Индексы.Добавить("РеквизитОбъекта");	// Индекс.
	
	ТорговыеПредложенияПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов(ПараметрыПроцедуры.ВидНоменклатуры,
		СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий);
	
	РеквизитыРубрикатора = ОписаниеРеквизитовСопоставленияРубрикатора();
	
	Для Каждого РеквизитРубрикатора Из Результат.Данные Цикл
		
		ЭтоДополнительныеЗначенияРеквизита = Ложь;
		ЭтоДополнительныеЗначенияСервиса = Ложь;
		
		// Заполнение данных рубрикатора сервера.
		Если Найти(РеквизитРубрикатора.sourceId, "-") ИЛИ Найти(РеквизитРубрикатора.sourceId, "shipping")
			ИЛИ РеквизитРубрикатора.title = "Минимальная цена" ИЛИ РеквизитРубрикатора.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизит = РеквизитыРубрикатора.Добавить();
		НовыйРеквизит.ПредставлениеРеквизитаКатегории = РеквизитРубрикатора.title
			+ ?(ЗначениеЗаполнено(РеквизитРубрикатора.unitCode), ", " + РеквизитРубрикатора.unitCode, "");
		НовыйРеквизит.ИдентификаторРеквизитаКатегории = Формат(РеквизитРубрикатора.id, "ЧГ=");
		Если РеквизитРубрикатора.type = "NUMBER" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Число";
		ИначеЕсли РеквизитРубрикатора.type = "STRING" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Строка";
		ИначеЕсли РеквизитРубрикатора.type = "BOOLEAN" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Булево";
		ИначеЕсли РеквизитРубрикатора.type = "ENUMERATION" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Список";
			ЭтоДополнительныеЗначенияСервиса = Истина;
		КонецЕсли;
		
		// Установка типов данных.
		СтрокаПоиска = СопоставленныеРеквизиты.Найти(НовыйРеквизит.ИдентификаторРеквизитаКатегории, "ИдентификаторРеквизитаКатегории");
		Если СтрокаПоиска <> Неопределено Тогда
			
			НовыйРеквизит.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СтрокаПоиска.РеквизитОбъекта)) Тогда
				НовыйРеквизит.ТипЗначения = СтрокаПоиска.РеквизитОбъекта.ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(НовыйРеквизит.ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
				КонецЕсли;
			Иначе
				// Поиск в списке реквизитов номенклатуры.
				СтрокиРеквизитов = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("РеквизитОбъекта", СтрокаПоиска.РеквизитОбъекта));
				Если СтрокиРеквизитов.Количество() Тогда
					НовыйРеквизит.ТипЗначения = СтрокиРеквизитов[0].ТипЗначения;
					Если ОбщегоНазначения.ЭтоСсылка(СтрокиРеквизитов[0].ТипЗначения.Типы()[0]) Тогда
						ЭтоДополнительныеЗначенияРеквизита = Истина;
						Если РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта")= Неопределено Тогда
							НовоеСоответствие = РасчетСоответствий.Добавить();
							НовоеСоответствие.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
							НовоеСоответствие.КоличествоЗначенийРеквизита = 0;
							НовоеСоответствие.КоличествоСопоставленныхРеквизитов = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДополнительныеЗначенияРеквизита И ЭтоДополнительныеЗначенияСервиса Тогда
				НовыйРеквизит.ВозможноСопоставление = Истина;
			КонецЕсли;
			
			СтрокаСоответствий = РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта");
			Если СтрокаСоответствий <> Неопределено Тогда
				НовыйРеквизит.Сопоставлено = СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"),
					СтрокаСоответствий.КоличествоСопоставленныхРеквизитов,
					СтрокаСоответствий.КоличествоЗначенийРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РеквизитыРубрикатора",    РеквизитыРубрикатора);
	Реквизиты.Вставить("СопоставленныеРеквизиты", СопоставленныеРеквизиты);
	
	ПоместитьВоВременноеХранилище(Реквизиты, АдресРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания.

// Выполняет регламентное задание по синхронизации торговых предложений с сервисом.
//
Процедура СинхронизацияТорговыхПредложенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	
	СинхронизацияТорговыхПредложений(Неопределено, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы работы с торговыми предложениями.

// Синхронизация торговых предложений с сервисом.
// Экспортная процедура, запускается по регламентному заданию,
// см. ТорговыеПредложенияВызовСервера.СинхронизироватьТорговыеПредложенияВФоне().
//
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура СинхронизацияТорговыхПредложений(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ТорговыеПредложения.НачатьЗамерВремени(
		"ОбщийМодуль.ТорговыеПредложения.СинхронизацияТорговыхПредложений");
	КоличествоПовторяющихсяДанных = 0;

	СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных);

	// &ЗамерПроизводительности
	ТорговыеПредложения.ЗакончитьЗамерВремени(ОписаниеЗамера, Макс(1, КоличествоПовторяющихсяДанных /100)); // Пакет по 100 записей.
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по отбору.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры получения торговых предложений из сервиса.
//    * КодВалюты - Число - код валюты для отбора. По умолчанию 643 (Рубль).
//    * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора для отбора.
//    * НазваниеТовара - Строка - наименование товара для отбора.
//    * Артикул - Строка - артикул товара.
//    * ШтрихКоды - Массив - штрихкоды для отбора поиска.
//    * Поставщик - ОпределяемыйТип.Контрагент - отбор по контрагенту.
//    * ЦенаОт - Число - нижний порог цены для поиска.
//    * ЦенаДо - Число - верхний порог цены для поиска.
//    * РежимСортировки - Строка - название режима сортировки, можно использовать следующие названия:
//      ** СортировкаНаименованиеВозрастание - по названию товара, возрастание.
//      ** СортировкаНаименованиеУбывание - по названию товара, убывание.
//      ** СортировкаЦенаВозрастание - по цене, возрастание.
//      ** СортировкаЦенаУбывание - по цене, убывание.
//    * Атрибуты - Массив - значения атрибутов товара для отбора, элементы в структуре:
//      ** ИдентификаторАтрибута - Строка - идентификатор атрибута товара в рубрикаторе, обязательно заполнение.
//      ** ИдентификаторЗначения - Строка - идентификатор значения атрибута товара в рубрикаторе.
//      ** Значение - Строка - значение атрибута товара. Следует передавать, в случае если значения не сопоставлены или не могут
//                             быть сопоставлены, например числовое значение.
//   АдресРезультата - УникальныйИдентификатор - адрес результата в хранилище таблицы с торговыми предложениями.
//   Отказ - Булево - признак ошибки при выполнении.
//
Процедура НайтиТорговыеПредложенияПоОтбору(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "ProductSearch"));
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	Иначе
		ОбъектПоиска.currency = 643; // По умолчанию Рубли, код валюты 643.
	КонецЕсли;

	Если ПараметрыПоиска.Свойство("ИдентификаторКатегории") И Не ПустаяСтрока(ПараметрыПоиска.ИдентификаторКатегории) Тогда
		ОбъектПоиска.categoryId	= ПараметрыПоиска.ИдентификаторКатегории;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("НазваниеТовара") И Не ПустаяСтрока(ПараметрыПоиска.НазваниеТовара) Тогда
		ОбъектПоиска.productName = ПараметрыПоиска.НазваниеТовара;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Артикул") И Не ПустаяСтрока(ПараметрыПоиска.Артикул) Тогда
		ОбъектПоиска.vendorCode = ПараметрыПоиска.Артикул;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ШтрихКоды")
		И ЗначениеЗаполнено(ПараметрыПоиска.ШтрихКоды)
		И ТипЗнч(ПараметрыПоиска.ШтрихКоды) = Тип("Массив") Тогда
		
		Для Каждого ШтрихКод Из ПараметрыПоиска.ШтрихКоды Цикл
			ОбъектПоиска.barcodes.Добавить(ШтрихКод);
		КонецЦикла;
	КонецЕсли;
	
	ОбъектКонтрагент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Organization"));
	ОтборПоПоставщику = Ложь;
	Если ПараметрыПоиска.Свойство("Поставщик") И ЗначениеЗаполнено(ПараметрыПоиска.Поставщик) Тогда
		РеквизитыПоставщика  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПоиска.Поставщик, "ИНН, КПП");
		ОбъектКонтрагент.inn = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыПоставщика.ИНН);
		ОбъектКонтрагент.kpp = БизнесСетьКлиентСервер.ФорматИдентификатора(РеквизитыПоставщика.КПП);
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикИдентификатор") И СтрДлина(ПараметрыПоиска.ПоставщикИдентификатор) >= 10 Тогда
		МассивИдентификаторов = СтрРазделить(ПараметрыПоиска.ПоставщикИдентификатор, "/");
		ОбъектКонтрагент.inn = МассивИдентификаторов[0];
		Если МассивИдентификаторов.Количество() > 1 Тогда
			ОбъектКонтрагент.kpp = МассивИдентификаторов[1];	
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикНаименование") И СтрДлина(ПараметрыПоиска.ПоставщикНаименование) >= 3 Тогда
		// Если в наименовании число, то ищем поставщика по ИНН.
		ПоставщикНаименование = ПараметрыПоиска.ПоставщикНаименование;
		ТипЧисло = Новый ОписаниеТипов("Число");
		ЗначениеЧисло = ТипЧисло.ПривестиЗначение(ПоставщикНаименование);
		Если ЗначениеЧисло <> 0 И СтрДлина(ПоставщикНаименование) >= 10 И СтрДлина(ПоставщикНаименование) <= 12 Тогда
			ОбъектКонтрагент.inn = XMLСтрока(ЗначениеЧисло);
		Иначе
			ОбъектКонтрагент.title = ПоставщикНаименование;
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	КонецЕсли;
	
	Если ОтборПоПоставщику Тогда
		ОбъектПоиска.vendors.Добавить(ОбъектКонтрагент);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаОт") И ПараметрыПоиска.ЦенаОт <> 0 Тогда
		ТипЦена = ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "MoneyType");
		ОбъектЦена = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "MoneyType"),
			ПараметрыПоиска.ЦенаОт);
		ОбъектПоиска.Установить("minPrice", ПараметрыПоиска.ЦенаОт);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаДо") И ПараметрыПоиска.ЦенаДо <> 0 Тогда
		ОбъектЦена = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "MoneyType"),
			ПараметрыПоиска.ЦенаДо);
		ОбъектПоиска.Установить("maxPrice", ПараметрыПоиска.ЦенаДо);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("РежимСортировки") Тогда
		ОбъектСортировка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Sort"));
		Если ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеВозрастание" Тогда
			ОбъектСортировка.Установить("name",     "name");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеУбывание" Тогда
			ОбъектСортировка.Установить("name",      "name");
			ОбъектСортировка.Установить("ascending", Ложь);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаВозрастание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаУбывание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Ложь);
		КонецЕсли;
		ОбъектПоиска.sortings.Добавить(ОбъектСортировка);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Атрибуты") Тогда
		Для каждого Атрибут Из ПараметрыПоиска.Атрибуты Цикл
			ОбъектАтрибуты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Attribute"));
			ОбъектАтрибуты.attributeId = Атрибут.ИдентификаторАтрибута;
			Если Атрибут.Свойство("ИдентификаторЗначения") Тогда
				ОбъектАтрибуты.valueId = Атрибут.ИдентификаторЗначения;
			ИначеЕсли Атрибут.Свойство("Значение") Тогда
				ОбъектАтрибуты.value = Атрибут.Значение;
			КонецЕсли;
			ОбъектПоиска.attributeFilters.Добавить(ОбъектАтрибуты);
		КонецЦикла;
	КонецЕсли;

	СтрокаJSON = ОбъектXDTOВСтрокуJSON(ОбъектПоиска);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
	
	Отказ = Ложь;
	Результат = Новый Структура;
	
	ИмяКоманды = "ПоискТорговыхПредложенийПоСтроке";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	
	Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВалют = Новый Соответствие;
	
	РезультатПоиска = ОписаниеРезультатаПоискаТорговыхПредложений();
	Для Каждого ДанныеСервиса Из Результат.Данные Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.ПредложениеИдентификатор = ДанныеСервиса.id;
		НоваяСтрока.ТоварНаименование        = ДанныеСервиса.name;
		НоваяСтрока.Описание                 = ДанныеСервиса.description;
		НоваяСтрока.Артикул                  = ДанныеСервиса.vendorCode;
		НоваяСтрока.ЕдиницаИзмерения         = ДанныеСервиса.unit;
		НоваяСтрока.Характеристика           = ДанныеСервиса.feature;
		НоваяСтрока.Цена                     = ДанныеСервиса.price / 100; // Данные в сервисе хранятся в копейках.
		НоваяСтрока.ПоставщикНаименование    = ДанныеСервиса.vendor.title;
		НоваяСтрока.ПоставщикИдентификатор   = ДанныеСервиса.vendor.inn + "/" + ДанныеСервиса.vendor.kpp;
		НоваяСтрока.ПоставщикИНН             = ДанныеСервиса.vendor.inn;
		НоваяСтрока.ПоставщикКПП             = ДанныеСервиса.vendor.kpp;
		КодВалюты                            = ДанныеСервиса.currency;
		Если СписокВалют[КодВалюты] = Неопределено Тогда
			СписокВалют.Вставить(КодВалюты, Справочники.Валюты.НайтиПоКоду(ДанныеСервиса.currency));
		КонецЕсли;
		НоваяСтрока.Валюта              = СписокВалют[КодВалюты];
		НоваяСтрока.СрокПоставки        = ДанныеСервиса.deliveryTime;
		НоваяСтрока.ЕдиницаИзмеренияКод = ДанныеСервиса.basicUnit;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатПоиска, АдресРезультата);
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по списку товаров.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры по которым надо получить торговые предложения из сервиса.
//    * Товары - Массив, ТаблицаЗначений - товары которые надо найти в сервисе, состав свойств структур/колонок:
//      ** Наименование - Строка - наименование искомого товара.
//      ** Характеристика - Строка - наименование характеристики товара.
//      ** Артикул - Строка - артикул товара.
//      ** ШтрихКоды - Массив - массив штрихкодов по которым надо искать товар.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//      ** ЕдиницаИзмеренияКод - Строка - код ОКЕИ базовой единицы измерения товара.
//      ** Числитель - Число - количество в базовой единице измерения.
//      ** Знаменатель - Число - количество в текущей единице измерения.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//    * МаксимальныйСрокПоставки - Число - срок доставки в днях при превышении которого предложение не будет считаться оптимальным.
//    * ПревышениеМинимальнойЦены - Число - максимальное отклонение в процентах от минимальной цены при котором предложение не будет считаться оптимальным.
//    * ОграничениеТорговыхПредложений - Число - максимальное количество поставщиков по которым вернуть предложения.
//    * КодВалюты - Число - код валюты в которой ищутся цены. По умолчанию 643 (Рубль).
//    * ПоискПоНаименованию - Булево - признак того, что поиск будет осуществляться по наименованию.
//    * ПоискПоХарактеристике - Булево - признак того, что поиск будет осуществляться по характеристике.
//    * ПоискПоАртикулу - Булево - признак того, что поиск будет осуществляться по артикулу.
//    * ПоискПоШтрихКоду - Булево - признак того, что поиск будет осуществляться по штрихкоду.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, кода будут помещены таблицы:
//    * ТаблицаПоставщиков - ТаблицаЗначений - таблица поставщиков отсортированная по мере убывания оптимальности предложений
//    * ТаблицаРезультата - ТаблицаЗначений - таблица с найденными торговыми предложениями.
//   Отказ - Булево - признак ошибки в процедуре.
//
Процедура НайтиТорговыеПредложенияПоСпискуТоваров(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Если ПараметрыПоиска.Свойство("Товары") = Ложь Или ПараметрыПоиска.Товары.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "ProductListSearch"));
	
	Если ПараметрыПоиска.Свойство("МаксимальныйСрокПоставки") Тогда
		ОбъектПоиска.maxDeliveryTime = ПараметрыПоиска.МаксимальныйСрокПоставки;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ПревышениеМинимальнойЦены") Тогда
		ОбъектПоиска.maxOptimalPriceExcess = ПараметрыПоиска.ПревышениеМинимальнойЦены;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ОграничениеТорговыхПредложений") Тогда
		ОбъектПоиска.maxCount = ПараметрыПоиска.ОграничениеТорговыхПредложений;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	Иначе
		ОбъектПоиска.currency = 643; // По умолчанию рубли.
	КонецЕсли;
	
	ПоискПоНаименованию = ПараметрыПоиска.Свойство("ПоискПоНаименованию") И ПараметрыПоиска.ПоискПоНаименованию;
	ПоискПоАртикулу = ПараметрыПоиска.Свойство("ПоискПоАртикулу") И ПараметрыПоиска.ПоискПоАртикулу;
	
	ПоискПоХарактеристике = ПараметрыПоиска.Свойство("ПоискПоХарактеристике") И ПараметрыПоиска.ПоискПоХарактеристике;
	
	ПоискПоШтрихКоду = ПараметрыПоиска.Свойство("ПоискПоШтрихКоду") И ПараметрыПоиска.ПоискПоШтрихКоду;
	ТорговыеПредложенияПереопределяемый.ДобавитьСлужебныеКолонкиТовары(ПараметрыПоиска.Товары, ПоискПоШтрихКоду);
	Для Каждого СтрокаТовары Из ПараметрыПоиска.Товары Цикл
		
		ЭлементПоиска = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "ListSearch"));
		
		Наименование = СтрокаТовары.Наименование;
		
		Если ПоискПоНаименованию И Не ЗначениеЗаполнено(Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоискПоНаименованию Тогда
			ЭлементПоиска.Установить("productName", Наименование);
		КонецЕсли;
		
		Если ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			ЭлементПоиска.Установить("productFeature", Строка(СтрокаТовары.Характеристика));
		КонецЕсли;
		
		Если ПоискПоАртикулу Тогда
			ЭлементПоиска.Установить("vendorCode", СтрокаТовары.Артикул);	
		КонецЕсли;
		
		Если ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из СтрокаТовары.ШтрихКоды Цикл
				ЭлементПоиска.barcodes.Добавить(ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторКатегории) Тогда
			ЭлементПоиска.Установить("categoryId", СтрокаТовары.ИдентификаторКатегории); // Категория вида номенклатуры.
		КонецЕсли;
		
		ЭлементПоиска.index = ПараметрыПоиска.Товары.Индекс(СтрокаТовары);
		
		ОбъектЕдиницаИзмерения = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "UnitFilter"));
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмеренияКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СтрокаТовары.УпаковкаЕдиницаИзмеренияКод;
		Иначе
			ОбъектЕдиницаИзмерения.basicUnit = СтрокаТовары.ЕдиницаИзмеренияКод
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЧислитель) Тогда
			ОбъектЕдиницаИзмерения.unitCount = СтрокаТовары.УпаковкаЧислитель;
		Иначе
			ОбъектЕдиницаИзмерения.unitCount = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЗнаменатель) Тогда
			ОбъектЕдиницаИзмерения.basicUnitCount = СтрокаТовары.УпаковкаЗнаменатель;
		Иначе
			ОбъектЕдиницаИзмерения.basicUnitCount = 1;
		КонецЕсли;
		
		ЭлементПоиска.units.Добавить(ОбъектЕдиницаИзмерения);
		ОбъектПоиска.listSearch.Добавить(ЭлементПоиска);
		
	КонецЦикла;

	Попытка
		ОбъектПоиска.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка формирования запроса.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование запроса'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, 5);
		Возврат;
	КонецПопытки;
	
	СтрокаJSON = ОбъектXDTOВСтрокуJSON(ОбъектПоиска);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
	
	Результат = Новый Структура;
	Отказ = Ложь;
	
	ИмяКоманды = "ПоискТорговыхПредложенийПоСписку";
	
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);

	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	ТаблицаПоставщиков.Колонки.Добавить("Наименование");
	ТаблицаПоставщиков.Колонки.Добавить("ИНН");
	ТаблицаПоставщиков.Колонки.Добавить("КПП");
	ТаблицаПоставщиков.Колонки.Добавить("Идентификатор");
	
	Для Каждого ДанныеСервиса Из Результат.Данные.vendors Цикл
		НовыйПоставщик = ТаблицаПоставщиков.Добавить();
		НовыйПоставщик.ИНН           = ДанныеСервиса.inn;
		НовыйПоставщик.КПП           = ДанныеСервиса.kpp;
		НовыйПоставщик.Наименование  = ДанныеСервиса.title;
		НовыйПоставщик.Идентификатор = НовыйПоставщик.ИНН
			+ ?(ПустаяСтрока(НовыйПоставщик.КПП),"", "_" + НовыйПоставщик.КПП);
	КонецЦикла;
	
	ТаблицаРезультата = ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку();
	Для Каждого ДанныеСервиса Из Результат.Данные.offers Цикл
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.ИндексСтроки             = ДанныеСервиса.index;
		НоваяСтрока.ПредложениеИдентификатор = ДанныеСервиса.product.id;
		НоваяСтрока.Наименование             = ДанныеСервиса.product.name;
		НоваяСтрока.Цена                     = ДанныеСервиса.product.price;
		НоваяСтрока.СрокПоставки             = ДанныеСервиса.product.deliveryTime;
		НоваяСтрока.Артикул                  = ДанныеСервиса.product.vendorCode;
		НоваяСтрока.Упаковка                 = ДанныеСервиса.product.unit;
		НоваяСтрока.ЦенаВключаетНДС          = ДанныеСервиса.product.campaign.saleWithNds;
		НоваяСтрока.Поставщик                = ДанныеСервиса.product.vendor.title;
		НоваяСтрока.ПоставщикИНН             = ДанныеСервиса.product.vendor.inn;
		НоваяСтрока.ПоставщикКПП             = ДанныеСервиса.product.vendor.kpp;
		НоваяСтрока.ЛучшаяЦена               = ДанныеСервиса.bestPrice;
		НоваяСтрока.ЛучшийСрок               = ДанныеСервиса.bestDelivery;
		НоваяСтрока.МинимальнаяЦена          = ДанныеСервиса.minPrice;
		НоваяСтрока.МаксимальнаяЦена         = ДанныеСервиса.maxPrice;
		НоваяСтрока.МинимальныйСрокПоставки  = ДанныеСервиса.minDeliveryTime;
		НоваяСтрока.МаксимальныйСрокПоставки = ДанныеСервиса.maxDeliveryTime;
		НоваяСтрока.КоличествоПредложений    = ДанныеСервиса.amountProducts;
		НоваяСтрока.СтавкаНДС                = ТорговыеПредложенияПереопределяемый.ЗначениеПеречисленияПоНаименованию("СтавкаНДС", ДанныеСервиса.product.nds);
		НоваяСтрока.ПоставщикИдентификатор   = НоваяСтрока.ПоставщикИНН
			+ ?(ПустаяСтрока(НоваяСтрока.ПоставщикКПП),"","_" + НоваяСтрока.ПоставщикКПП);
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаПоставщиков", ТаблицаПоставщиков);
	Результат.Вставить("ТаблицаРезультата", ТаблицаРезультата);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор торгового предложения.
//   НаборДанных - Структура - Структура определяющая список свойств которые будут получены.
//   Отказ - Булево - Признак того, что в процедуре возникли ошибки.
//
// Возвращаемое значение:
//   Структура - структура данных торгового предложения.
//
Функция ПрочитатьТорговоеПредложение(Знач Идентификатор, Знач НаборДанных = Неопределено, Отказ = Ложь) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Идентификатор", Идентификатор);
	
	Результат = Неопределено;
	
	ИмяКоманды = "ПрочитатьТорговоеПредложение";
	ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
	СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
	ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
	
	БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
	
	Если Результат.Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Результат.Данные;
	
	Если НаборДанных = Неопределено Тогда
		НаборДанных = Новый Структура;
	КонецЕсли;
	
	Если Данные.Свойство("categoryId") И Данные.categoryId <> Неопределено Тогда
		
		ИдентификаторКатегории  =  Данные.categoryId;
		
		Если НаборДанных.Свойство("Характеристики") Тогда
			Если Данные.Свойство("attributes") И Данные.attributes <> Неопределено Тогда
				
				ОтказПриПолученииСпискаХарактеристикКатегории = Ложь;
				
				СписокХарактеристикКатегории = Новый Структура;
				
				ПараметрыКоманды = Новый Структура;
				ПараметрыКоманды.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
				ВыполнитьКомандуРубрикатора("ПолучитьСписокХарактеристикКатегории",
					ПараметрыКоманды, СписокХарактеристикКатегории, ОтказПриПолученииСпискаХарактеристикКатегории);
				
				Если Не ОтказПриПолученииСпискаХарактеристикКатегории
					И СписокХарактеристикКатегории.Данные <> Неопределено
					И ТипЗнч(СписокХарактеристикКатегории.Данные) = Тип("Массив") Тогда
					
					ИменаХарактеристикКатегории = Новый Соответствие;
					ТипыХарактеристикКатегории = Новый Соответствие;
					
					Для Каждого ХарактеристикаКатегории Из СписокХарактеристикКатегории.Данные Цикл
						ПредставлениеХарактеристики = ХарактеристикаКатегории.title
							+ ?(Не ПустаяСтрока(ХарактеристикаКатегории.unitCode), ", "
							+ ХарактеристикаКатегории.unitCode, "");
						ИдентификаторХарактеристики = ?(ТипЗнч(ХарактеристикаКатегории.id) = Тип("Строка"), ХарактеристикаКатегории.id,
							Формат(ХарактеристикаКатегории.id, "ЧГ="));
						ИменаХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ПредставлениеХарактеристики);
						ТипыХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ХарактеристикаКатегории.type);
					КонецЦикла;
					
					Характеристики = Новый ТаблицаЗначений;
					Характеристики.Колонки.Добавить("Название");
					Характеристики.Колонки.Добавить("Значение");
					
					Для Каждого Атрибут Из Данные.attributes Цикл
						
						ИдентификаторХарактеристики = Атрибут.attributeId;
						
						НаименованиеХарактеристики = ИменаХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						Если НаименованиеХарактеристики = Неопределено Тогда
							// Неактуальный идентификатор характеристики позиции торгового предложения.
							Продолжить;
						КонецЕсли;
						
						ТипХарактеристикКатегории = ТипыХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						
						Если Атрибут.Свойство("valueId")
							И Атрибут.valueId <> Неопределено Тогда
							
							ОтказПриПолученииЗначенияХарактеристики = Ложь;
							
							ЗначениеХарактеристики = Новый Структура;

							ПараметрыКоманды = Новый Структура;
							ПараметрыКоманды.Вставить("ИдентификаторЗначенияХарактеристики", Атрибут.valueId);
							ВыполнитьКомандуРубрикатора("ПолучитьЗначениеХарактеристики",
								ПараметрыКоманды, ЗначениеХарактеристики, ОтказПриПолученииЗначенияХарактеристики);
							
							Если Не ОтказПриПолученииЗначенияХарактеристики
								И ЗначениеХарактеристики.Данные <> Неопределено Тогда
								
								Значение = ЗначениеХарактеристики.Данные.value
							Иначе
								Продолжить;
							КонецЕсли;
							
						ИначеЕсли Атрибут.Свойство("value")
							И Атрибут.value <> Неопределено
							И ТипХарактеристикКатегории <> "ENUMERATION" Тогда
							Значение = Атрибут.value;
						Иначе
							Продолжить;
						КонецЕсли;
						
						НоваяХарактеристика = Характеристики.Добавить();
						
						НоваяХарактеристика.Название = НаименованиеХарактеристики;
						НоваяХарактеристика.Значение = ПривестиКТипуЗначениеРубрикатора(Значение, ТипХарактеристикКатегории);
						
					КонецЦикла;
					
					Если Характеристики.Количество() Тогда
						Данные.Вставить("Характеристики", Характеристики);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описание пакета предложений для заполнения данных.
// 
// Возвращаемое значение:
//  Структура - описание пакета предложений.
//
Функция ОписаниеПакетаПредложений()
	
	// Сегмент контрагентов для ограничения доступа к торговым предложениям.
	
	ТипСтрока =	Новый ОписаниеТипов("Строка");
	ТипЧисло =	Новый ОписаниеТипов("Число");
	ТипЦена =	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	ИмяСправочникаНоменклатура =	ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ИмяСправочникаХарактеристики =	ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ИмяСправочникаУпаковки =		ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("УпаковкиНоменклатуры");
	
	ТипНоменклатура = 	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаНоменклатура);
	ТипХарактеристики = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаХарактеристики);
	ТипУпаковки = 		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаУпаковки);
	
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО",				"");
	КонтактноеЛицо.Вставить("Телефон",			"");
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта",	"");
	
	КонтактыОрганизации = Новый Структура;
	КонтактыОрганизации.Вставить("ИНН",			"");
	КонтактыОрганизации.Вставить("КПП",			"");
	КонтактыОрганизации.Вставить("Телефон",		"");
	КонтактыОрганизации.Вставить("ЭлектроннаяПочта", "");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",					ТипНоменклатура);
	Товары.Колонки.Добавить("Наименование",					ТипСтрока);
	Товары.Колонки.Добавить("Цена",							ТипЦена);
	Товары.Колонки.Добавить("ВалютаКод",					ТипСтрока);
	Товары.Колонки.Добавить("Характеристика",				ТипХарактеристики);
	Товары.Колонки.Добавить("ХарактеристикаНаименование",	ТипСтрока);
	Товары.Колонки.Добавить("Артикул",						ТипСтрока);
	Товары.Колонки.Добавить("ИдентификаторКатегории", 		ТипСтрока);
	Товары.Колонки.Добавить("СрокПоставки",					ТипЧисло);
	Товары.Колонки.Добавить("Упаковка",						ТипУпаковки);
	Товары.Колонки.Добавить("УпаковкаКод",					ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаНаименование", 		ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаЧислитель", 			ТипЧисло);
	Товары.Колонки.Добавить("УпаковкаЗнаменатель",			ТипЧисло);
	Товары.Колонки.Добавить("ВидНоменклатуры"); 			// Ссылка.
	Товары.Колонки.Добавить("БазоваяЕдиницаИзмерения"); 	// Ссылка.
	Товары.Колонки.Добавить("СтавкаНДС");					// Ссылка.
	Товары.Колонки.Добавить("ШтрихКоды",					Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("Атрибуты",						Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ШтрихКоды = Новый ТаблицаЗначений;
	ШтрихКоды.Колонки.Добавить("Номенклатура",				ТипНоменклатура);
	ШтрихКоды.Колонки.Добавить("Характеристика",			ТипХарактеристики);
	ШтрихКоды.Колонки.Добавить("Упаковка",					ТипУпаковки);
	ШтрихКоды.Колонки.Добавить("ЕдиницаИзмерения");
	ШтрихКоды.Колонки.Добавить("Значение");
	ШтрихКоды.Индексы.Добавить("Номенклатура, Характеристика, Упаковка, ЕдиницаИзмерения");
	
	Атрибуты = Новый ТаблицаЗначений;
	Атрибуты.Колонки.Добавить("ИдентификаторРеквизитаКатегории",	ТипСтрока);
	Атрибуты.Колонки.Добавить("Наименование",						ТипСтрока);
	Атрибуты.Колонки.Добавить("ИдентификаторЗначения",				ТипСтрока);
	Атрибуты.Колонки.Добавить("Значение");
	
	СписокКонтрагентов = Новый ТаблицаЗначений;
	СписокКонтрагентов.Колонки.Добавить("ИНН", ТипСтрока);
	СписокКонтрагентов.Колонки.Добавить("КПП", ТипСтрока);
	
	ПакетПредложений = Новый Структура;
	ПакетПредложений.Вставить("Статус",				Перечисления.СостоянияСинхронизацииТорговыеПредложения.ПустаяСсылка());
	ПакетПредложений.Вставить("ДатаНачалаДействия",	'00010101');
	ПакетПредложений.Вставить("ДатаОкончанияДействия",'00010101');
	ПакетПредложений.Вставить("Организация",		Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ВидЦен",				Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ЦенаВключаетНДС", 	Ложь);
	ПакетПредложений.Вставить("Контрагент",			Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("Валюта",				Ложь);
	ПакетПредложений.Вставить("КонтактноеЛицо",		КонтактноеЛицо);
	ПакетПредложений.Вставить("КонтактыОрганизации",	КонтактыОрганизации);
	
	// Табличные части.
	ПакетПредложений.Вставить("СписокКонтрагентов",	СписокКонтрагентов);
	ПакетПредложений.Вставить("Товары",				Товары);
	ПакетПредложений.Вставить("ШтрихКоды",			ШтрихКоды);
	ПакетПредложений.Вставить("Атрибуты",			Атрибуты);
	
	Возврат ПакетПредложений;
	
КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения при поиске по списку.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку()
	
	ТипСтрока         = Новый ОписаниеТипов("Строка");
	ТипБулево         = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоИзмерения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло          = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ТипСтавкаНДС      = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(
		ТорговыеПредложенияПереопределяемый.ЗначениеПеречисленияПоНаименованию("СтавкаНДС", Неопределено))));
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИндексСтроки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Наименование",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Цена",                     ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("СтавкаНДС",                ТипСтавкаНДС);
	ТаблицаРезультата.Колонки.Добавить("СрокПоставки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("Артикул",                  ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Упаковка",                 ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЦенаВключаетНДС",          ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("Поставщик",                ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЛучшаяЦена",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("ЛучшийСрок",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("МинимальнаяЦена",          ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МаксимальнаяЦена",         ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МинимальныйСрокПоставки",  ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("МаксимальныйСрокПоставки", ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("КоличествоПредложений",    ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	
	Возврат ТаблицаРезультата;

КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложений()
	
	ТипСтрока          = Новый ОписаниеТипов("Строка");
	ТипБулево          = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный   = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоИзмерения  = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло           = Новый ОписаниеТипов("Число",
						 Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ТипВалюта          = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	Таблица.Колонки.Добавить("ТоварНаименование",        ТипСтрока);
	Таблица.Колонки.Добавить("Описание",                 ТипСтрока);
	Таблица.Колонки.Добавить("Артикул",                  ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",         ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",      ТипСтрока);
	Таблица.Колонки.Добавить("Характеристика",           ТипСтрока);
	Таблица.Колонки.Добавить("Цена",                     ТипЧислоДенежный);
	Таблица.Колонки.Добавить("ПоставщикНаименование",    ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	Таблица.Колонки.Добавить("Валюта",                   ТипВалюта);
	Таблица.Колонки.Добавить("СрокПоставки",             ТипЧисло);
	
	Возврат Таблица;
	
КонецФункции

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - объект данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ОбъектXDTOВСтрокуJSON(Знач ОбъектXDTO, Знач Уровень = 0) Экспорт
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ОбъектXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			Если ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			ИначеЕсли ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ОбъектXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Установка параметров вызова команды сервиса.
//
// Параметры:
//   Метод - Строка - наименование метода.
//   ПараметрыКоманды - Структура - дополнительные произвольные параметры.
//   ПараметрыВызова - Структура - возвращаемые параметры вызова команды.
//     * Адрес - Строка - адрес метода в сервисе.
//     * Метод - Строка - метод взаимодействия get, post, put, update.
//     * Данные - Произвольный - тело запроса.
//     * Права - Строка - права доступа bn_its (логин Интернет-поддержки), bn_user (пользователь ИБ).
//   Отказ - Булево - признак отказа выполнения.
//
Процедура СформироватьПараметрыВызоваКомандыСервиса(Знач ИмяКоманды, Знач ПараметрыКоманды, ПараметрыВызова, Отказ)
	
	Если ИмяКоманды = "ПоискТорговыхПредложенийПоСтроке" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/search";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
		// Если нет регистрации, необходима аутентификация по логину интернет-поддержки.
		Если Не БизнесСеть.ОрганизацияПодключена() Тогда
			ПараметрыВызова.Права = "bn_its";
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПоискТорговыхПредложенийПоСписку" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/listSearch";
		ПараметрыВызова.Метод = "post";

		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
	ИначеЕсли ИмяКоманды = "ПрочитатьТорговоеПредложение" Тогда
	
		ПараметрыВызова.Адрес = "/api/offer/v1/product/" + КодироватьСтроку(ПараметрыКоманды.Идентификатор,
			СпособКодированияСтроки.КодировкаURL);
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолнаяСинхронизацияТорговыхПредложений" Тогда
		
		ПараметрыВызова.Адрес = "/api/offer/v1/organization/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.ИНН) + "/"
			+ БизнесСетьКлиентСервер.ФорматИдентификатора(ПараметрыКоманды.КПП) + "/campaigns/fullSync";
		ПараметрыВызова.Метод = "post";
		ПараметрыВызова.Права = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.СтрокаJSON;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка инициализации сервиса'"),,,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

// Синхронизация торговых предложения с сервисом.
//
// Параметры:
//  КоличествоПовторяющихсяДанных	 - Число - количество выгруженных данных.
//
Процедура СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ТорговоеПредложение.Ссылка КАК ТорговоеПредложение,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Организация.ИНН КАК ИНН,
	|	Таблица.Организация.КПП КАК КПП,
	|	Таблица.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	Таблица.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	Таблица.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	Таблица.ДополнительноеОписание КАК ДополнительноеОписание
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ТорговоеПредложение.ПометкаУдаления
	|ИТОГИ ПО
	|	Организация";
	
	ДанныеДляСинхронизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивТорговыхПредложений = Новый Массив;
	
	Пока ДанныеДляСинхронизации.Следующий() Цикл
			
		Если ПустаяСтрока(ДанныеДляСинхронизации.ИНН) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Для организации %1 не указан ИНН, публикация торговых предложений не возможна.'"),
				СокрЛП(ДанныеДляСинхронизации.Организация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			ПараметрыТорговогоПредложения = ДанныеДляСинхронизации.Выбрать();
			Пока ПараметрыТорговогоПредложения.Следующий() Цикл
				ТорговоеПредложение = Новый Структура("ТорговоеПредложение, Организация, Дата, Статус, ОписаниеОшибки,
					|ДействиеСинхронизации");
				ТорговоеПредложение.ТорговоеПредложение = ПараметрыТорговогоПредложения.ТорговоеПредложение;
				ТорговоеПредложение.Организация = ПараметрыТорговогоПредложения.Организация;
				ТорговоеПредложение.Дата = ТекущаяДатаСеанса();
				ТорговоеПредложение.Статус = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				ТорговоеПредложение.ОписаниеОшибки = ТекстОшибки;
				ТорговоеПредложение.ДействиеСинхронизации = ПараметрыТорговогоПредложения.ДействиеСинхронизации;
				МассивТорговыхПредложений.Добавить(ТорговоеПредложение);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		ProductList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "ProductList"));
		
		ПараметрыТорговогоПредложения = ДанныеДляСинхронизации.Выбрать();
		Пока ПараметрыТорговогоПредложения.Следующий() Цикл
			ПакетПредложенийXDTO = СформироватьПакетПредложенийXDTO(ПараметрыТорговогоПредложения);
			ProductList.offers.Добавить(ПакетПредложенийXDTO);
			
			// &ЗамерПроизводительности
			КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных
				+ ?(ПакетПредложенийXDTO.products = Неопределено, 0, ПакетПредложенийXDTO.products.Количество());
		КонецЦикла;
		
		СтрокаJSON = ОбъектXDTOВСтрокуJSON(ProductList, -1);
		
		ПараметрыКоманды = Новый Структура("ИНН, КПП, Данные");
		ЗаполнитьЗначенияСвойств(ПараметрыКоманды, ДанныеДляСинхронизации);
		ПараметрыКоманды.Вставить("СтрокаJSON", СтрокаJSON);
		
		Результат = Новый Структура;
		Отказ = Ложь;
		
		ИмяКоманды = "ПолнаяСинхронизацияТорговыхПредложений";
		ПараметрыВызова = Новый Структура("Адрес, Метод, Права, Данные");
		СформироватьПараметрыВызоваКомандыСервиса(ИмяКоманды, ПараметрыКоманды, ПараметрыВызова, Отказ);
		ПараметрыКоманды.Вставить("ПараметрыВызова", ПараметрыВызова);
		
		БизнесСеть.ВыполнитьКомандуСервиса(ИмяКоманды, ПараметрыКоманды, Результат, Отказ);
		
		ПараметрыТорговогоПредложения.Сбросить();
		Пока ПараметрыТорговогоПредложения.Следующий() Цикл
			ТорговоеПредложение = Новый Структура("ТорговоеПредложение, Организация, Дата, Статус, ОписаниеОшибки,
				|ДействиеСинхронизации");
			ТорговоеПредложение.ТорговоеПредложение = ПараметрыТорговогоПредложения.ТорговоеПредложение;
			ТорговоеПредложение.Организация = ПараметрыТорговогоПредложения.Организация;
			ТорговоеПредложение.Дата = ТекущаяДатаСеанса();
			ТорговоеПредложение.Статус = ?(Не Отказ,
				Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано,
				Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации);
			ТорговоеПредложение.ОписаниеОшибки = ?(Результат.Свойство("ТекстОшибки"), Результат.ТекстОшибки, "");
			ТорговоеПредложение.ДействиеСинхронизации = ПараметрыТорговогоПредложения.ДействиеСинхронизации;
			МассивТорговыхПредложений.Добавить(ТорговоеПредложение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТорговоеПредложение Из МассивТорговыхПредложений Цикл
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = ТорговоеПредложение.ТорговоеПредложение;
		МенеджерЗаписи.Организация = ТорговоеПредложение.Организация;
		МенеджерЗаписи.Прочитать();
		Если ТорговоеПредложение.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		Иначе
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.Состояние = ТорговоеПредложение.Статус;
			МенеджерЗаписи.ДатаСинхронизации = ТорговоеПредложение.Дата;
			МенеджерЗаписи.ОписаниеОшибки = ТорговоеПредложение.ОписаниеОшибки;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавление элементов управления для формы торговые предложения.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма объекта торговые предложения, например Справочник.Соглашения.
//  ГруппаЭлементов	 - ГруппаФормы - группа элементов формы для добавления новых элементов.
//
Процедура ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ГруппаЭлементов)

	// Создание реквизитов формы.
	
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Реквизиты = Новый Соответствие();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Реквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	РеквизитТорговыеПредложенияПубликовать = Новый РеквизитФормы("ТорговыеПредложенияПубликовать",
		Новый ОписаниеТипов("Булево"),,
		НСтр("ru = 'Публиковать торговые предложения в сервисе'"),
		Истина);
	РеквизитТорговыеПредложенияСостояниеОбмена = Новый РеквизитФормы("ТорговыеПредложенияСостояниеОбмена",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)),,
		НСтр("ru = 'Торговые предложения состояние обмена'"),
		Ложь);
		
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияПубликовать.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияПубликовать);
	КонецЕсли;
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияСостояниеОбмена.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияСостояниеОбмена);
	КонецЕсли;
	Если НовыеРеквизитыФормы.Количество() Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	КонецЕсли;
	
	// Создание/настройка элементов управления.
	
	// Создание общей группы 1С:Бизнес-сеть.
	ЭлементГруппаТорговыеПредложения = ГруппаЭлементов.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
	Если ЭлементГруппаТорговыеПредложения = Неопределено Тогда
		ЭлементГруппаТорговыеПредложения = Форма.Элементы.Добавить("ГруппаТорговыеПредложения",
			Тип("ГруппаФормы"), ГруппаЭлементов);
		ЭлементГруппаТорговыеПредложения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаТорговыеПредложения.Заголовок = НСтр("ru = '1С:Бизнес-сеть'");
		ЭлементГруппаТорговыеПредложения.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаТорговыеПредложения.ОтображатьЗаголовок = Ложь;
		ЭлементГруппаТорговыеПредложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ЭлементыГруппы = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы;
	
	// Флаг Публиковать торговые предложения.
	ЭлементТорговыеПредложенияПубликовать = ЭлементыГруппы.Найти("ТорговыеПредложенияПубликовать");
	Если ЭлементТорговыеПредложенияПубликовать = Неопределено Тогда
		ЭлементТорговыеПредложенияПубликовать = Форма.Элементы.Добавить("ТорговыеПредложенияПубликовать",
			Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияПубликовать.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементТорговыеПредложенияПубликовать.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементТорговыеПредложенияПубликовать.ПутьКДанным = РеквизитТорговыеПредложенияПубликовать.Имя;
		ЭлементТорговыеПредложенияПубликовать.УстановитьДействие("ПриИзменении",
			"Подключаемый_ПриИзменении_ПубликоватьТорговыеПредложения");
	КонецЕсли;
	
	// Гиперссылка Торговые предложения.
	ЭлементТорговыеПредложенияСостояниеОбмена = ЭлементыГруппы.Найти("ТорговыеПредложенияСостояниеОбмена");
	Если ЭлементТорговыеПредложенияСостояниеОбмена = Неопределено Тогда
		ЭлементТорговыеПредложенияСостояниеОбмена = Форма.Элементы.Добавить("ТорговыеПредложенияСостояниеОбмена",
		Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияСостояниеОбмена.Вид = ВидПоляФормы.ПолеНадписи;
		ЭлементТорговыеПредложенияСостояниеОбмена.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТорговыеПредложенияСостояниеОбмена.ПутьКДанным = РеквизитТорговыеПредложенияСостояниеОбмена.Имя;
		ЭлементТорговыеПредложенияСостояниеОбмена.Гиперссылка = Истина;
		ЭлементТорговыеПредложенияСостояниеОбмена.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Дополнительные настройки.
	ЭлементГиперссылка = ЭлементыГруппы.Найти("ТорговыеПредложенияОткрытьНастройкиПубликации");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьНастройкиПубликации",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Дополнительные настройки публикации'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;

КонецПроцедуры

// Формирование пакет предложений XDTO для синхронизации.
//
// Параметры:
//  ПараметрыТорговогоПредложения	 - Структура - параметры для синхронизации.
// 
// Возвращаемое значение:
//  ОбъектXTDO - объект выгрузки торговых предложений.
//
Функция СформироватьПакетПредложенийXDTO(Знач ПараметрыТорговогоПредложения)
	
	ТорговоеПредложение    = ПараметрыТорговогоПредложения.ТорговоеПредложение;
	ДействиеСинхронизации  = ПараметрыТорговогоПредложения.ДействиеСинхронизации;
	ДополнительноеОписание = ПараметрыТорговогоПредложения.ДополнительноеОписание;
	
	Campaign = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Campaign"));
	Campaign.id            = Строка(ТорговоеПредложение.УникальныйИдентификатор());
	
	Если ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
		Campaign.active = Ложь;
		Возврат Campaign;
	КонецЕсли;
	
	// Формирование торгового предложения.
	ПакетПредложений = ОписаниеПакетаПредложений();
	ТорговыеПредложенияПереопределяемый.ЗаполнитьПакетПредложений(ТорговоеПредложение, ПакетПредложений);

	Campaign.active      = Истина;
	Campaign.validFrom   = ПакетПредложений.ДатаНачалаДействия;
	Campaign.validTo     = ПакетПредложений.ДатаОкончанияДействия;
	Campaign.saleWithNds = ПакетПредложений.ЦенаВключаетНДС;
	
	// Заполнение контактной информации.
	ContactInfo  = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "ContactInfo"));
	Organization = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Organization"));
	Person       = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Person"));
	
	Organization.inn   = ПакетПредложений.КонтактыОрганизации.ИНН;
	Organization.kpp   = ?(ПустаяСтрока(ПакетПредложений.КонтактыОрганизации.КПП), "0", ПакетПредложений.КонтактыОрганизации.КПП);
	Organization.phone = ПакетПредложений.КонтактыОрганизации.Телефон;
	Organization.email = ПакетПредложений.КонтактыОрганизации.ЭлектроннаяПочта;
	
	Person.name  = ПакетПредложений.КонтактноеЛицо.ФИО;
	Person.phone = ПакетПредложений.КонтактноеЛицо.Телефон;
	Person.email = ПакетПредложений.КонтактноеЛицо.ЭлектроннаяПочта;
	
	ContactInfo.organization = Organization;
	ContactInfo.person = Person;
	
	Если ПараметрыТорговогоПредложения.УведомлятьОЗаказах И Не ПустаяСтрока(ПараметрыТорговогоПредложения.АдресЭлектроннойПочты) Тогда
		ContactInfo.notificationEmail = ПараметрыТорговогоПредложения.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Campaign.contactInfo = ContactInfo;
	
	// Заполнение сегмента контрагентов.
	Для Каждого СтрокаКонтрагентов Из ПакетПредложений.СписокКонтрагентов Цикл
		Customer = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Organization"));
		Customer.inn = СтрокаКонтрагентов.ИНН;
		Customer.kpp = ?(ПустаяСтрока(СтрокаКонтрагентов.КПП), "0", СтрокаКонтрагентов.КПП);
		Campaign.customers.Добавить(Customer);
	КонецЦикла;
	
	// Заполнение позиций торговых предложений.
	Для Каждого СтрокаТовары Из ПакетПредложений.Товары Цикл
		
		Если СтрокаТовары.Цена = 0 Тогда
			Продолжить; // Пустые цены не выгружаются в сервис.
		КонецЕсли;
		
		Product = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Product"));
		Product.name = СтрокаТовары.Наименование;
		Product.price = СтрокаТовары.Цена * 100; // Цены в сервисе хранятся в копейках.
		Product.currency = СтрокаТовары.ВалютаКод;
		Product.vendorCode = СтрокаТовары.Артикул;
		Product.categoryId = СтрокаТовары.ИдентификаторКатегории;
		Product.deliveryTime = СтрокаТовары.СрокПоставки;
		Product.basicUnit = СтрокаТовары.УпаковкаКод;
		Product.unit = СтрокаТовары.УпаковкаНаименование;
		Product.basicUnitCount = СтрокаТовары.УпаковкаЧислитель;
		Product.unitCount = СтрокаТовары.УпаковкаЗнаменатель;
		Product.feature = СтрокаТовары.ХарактеристикаНаименование;
		Product.description = ДополнительноеОписание;
		Product.feature = СтрокаТовары.ХарактеристикаНаименование;
		Product.id = СтрШаблон("%1#%2#%3#%4",
			Строка(ПараметрыТорговогоПредложения.ТорговоеПредложение.УникальныйИдентификатор()),
			Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор()),
			?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), Строка(СтрокаТовары.Характеристика.УникальныйИдентификатор()), ""),
			?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), Строка(СтрокаТовары.Упаковка.УникальныйИдентификатор()), ""));
			
		Product.nds = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаТовары.СтавкаНДС);
			
		// Заполнение атрибутов номенклатуры.
		Для Каждого СтрокаАтрибуты Из СтрокаТовары.Атрибуты Цикл
			Attribute = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", "Attribute"));
			Attribute.name = СтрокаАтрибуты.Наименование;
			Attribute.attributeId = СтрокаАтрибуты.ИдентификаторРеквизитаКатегории;
			Attribute.valueId = СтрокаАтрибуты.ИдентификаторЗначения;
			Attribute.value = СтрокаАтрибуты.Значение;
			Product.attributes.Добавить(Attribute);
		КонецЦикла;
		
		// Заполнение штрих-кодов.
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
		Отбор.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Отбор.Вставить("Упаковка", СтрокаТовары.БазоваяЕдиницаИзмерения);
		ШтрихКодыНоменклатуры = ПакетПредложений.ШтрихКоды.НайтиСтроки(Отбор);
		Для Каждого СтрокаШтрихКодов Из ШтрихКодыНоменклатуры Цикл
			Product.barcodes.Добавить(СтрокаШтрихКодов.barcode);
		КонецЦикла;
		
		Campaign.products.Добавить(Product);
		
	КонецЦикла;
	
	Возврат Campaign;
	
КонецФункции

// Приведение к типу значения рубрикатора.
//
// Параметры:
//  Значение		 - Произвольный - значение рубрикатора.
//  ТипРубрикатора	 - Строка - тип значения рубрикатора (BOOLEAN, NUMBER).
// 
// Возвращаемое значение:
//  Булево, Число - возвращаемое значение по типу.
//
Функция ПривестиКТипуЗначениеРубрикатора(Знач Значение, Знач ТипРубрикатора)
	
	Если ВРег(ТипРубрикатора) = "BOOLEAN" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "NUMBER" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "ENUMERATION" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Установка параметров вызова команды сервиса рубрикатора.
//
// Параметры:
//   Метод - Строка - наименование метода.
//   ПараметрыКоманды - Структура - дополнительные произвольные параметры.
//   ПараметрыВызова - Структура - возвращаемые параметры вызова команды.
//     * Адрес - Строка - адрес метода в сервисе.
//     * Метод - Строка - метод взаимодействия get, post, put, update.
//     * Данные - Произвольный - тело запроса.
//     * Права - Строка - права доступа bn_its (логин Интернет-поддержки), bn_user (пользователь ИБ).
//   Отказ - Булево - признак отказа выполнения.
//
Процедура СформироватьПараметрыВызоваКомандыРубрикатора(Знач ИмяКоманды, Знач ПараметрыКоманды, ПараметрыВызова, Отказ)
	
	Если ИмяКоманды = "ПолучитьСписокКатегорийПервогоУровня" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/categories";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьКатегорию" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьСписокДочернихКатегорий" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/children";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЦепочкуКатегорийДоКорневой" Тогда
		
		ПараметрыВызова.Адрес  = "api/classifier/v1/category/pathToRoot";
		ПараметрыВызова.Метод  = "post";
		ПараметрыВызова.Права  = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.ИдентификаторыКатегории;
		
	ИначеЕсли ИмяКоманды = "ПолучитьСписокХарактеристикКатегории" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/attributes";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьХарактеристику" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/attribute/" + Формат(ПараметрыКоманды.ИдентификаторХарактеристики, "ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЗначенияХарактеристики" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/category/" + Формат(ПараметрыКоманды.ИдентификаторКатегории, "ЧГ=")
			+ "/attribute/" + Формат(ПараметрыКоманды.ИдентификаторХарактеристики, "ЧГ=") + "/values";
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЗначениеХарактеристики" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/value/"
			+ Формат(ПараметрыКоманды.ИдентификаторЗначенияХарактеристики,"ЧГ=");
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПоискКатегорий" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/categories/search?search="
			+ КодироватьСтроку(ПараметрыКоманды.СтрокаПоиска, СпособКодированияСтроки.КодировкаURL);
			
		Если ПараметрыКоманды.Свойство("ТолькоЭлементы") И ПараметрыКоманды.ТолькоЭлементы Тогда
			ПараметрыВызова.Адрес = ПараметрыВызова.Адрес + "&onlyLeaves="
				+ Формат(ПараметрыКоманды.ТолькоЭлементы, "БЛ=false; БИ=true");
		КонецЕсли;
		
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "ПолучитьЕдиницуИзмерения" Тогда
		
		ПараметрыВызова.Адрес = "api/classifier/v1/unit/" + ПараметрыКоманды.ИдентификаторЕдиницыИзмерения;
		ПараметрыВызова.Метод = "get";
		ПараметрыВызова.Права = "bn_user";
		
	ИначеЕсли ИмяКоманды = "СопоставитьЗначенияРеквизитов" Тогда
		
		ПараметрыВызова.Адрес  = "api/classifier/v1/findAttributeValueIdsByValues";
		ПараметрыВызова.Метод  = "post";
		ПараметрыВызова.Права  = "bn_user";
		ПараметрыВызова.Данные = ПараметрыКоманды.ЗначенияДляСопоставления;

	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка инициализации сервиса'"),,,, Отказ);
		
	КонецЕсли;

КонецПроцедуры

// Получение структуры реквизитов сопоставления рубрикатора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица реквизитов с указанными типами колонок.
//
Функция ОписаниеРеквизитовСопоставленияРубрикатора()
	
	ТипСтрока          = Новый ОписаниеТипов("Строка");
	ТипБулево          = Новый ОписаниеТипов("Булево");
	ТипОписаниеТипов   = Новый ОписаниеТипов("ОписаниеТипов");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РеквизитОбъекта");
	Таблица.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("Сопоставлено",                    ТипСтрока);
	Таблица.Колонки.Добавить("ТипЗначения",                     ТипОписаниеТипов);
	Таблица.Колонки.Добавить("ТипРеквизитаРубрикатора",         ТипСтрока);
	Таблица.Колонки.Добавить("ВозможноСопоставление",           ТипБулево);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Производительность

////////////////////////////////////////////////////////////////////////////////
// Производительность - модуль контроля производительности конфигурации.
// Методы поддерживаются до момента переноса в 1С:Библиотека стандартных подсистем.
////////////////////////////////////////////////////////////////////////////////

#Область ПроизводительностьСлужебныйПрограммныйИнтерфейс

// Начать замер времени на сервере при помощи подсистемы "Оценка производительности".
// Упрощает замеры длительных операций, обрабатывающих массивы однотипных данных.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//
// Возвращаемое значение:
//  Структура - используется в дальнейших вызовах процедур и функций этого модуля.
//              Описание полей доступно в комментариях функции СтруктураОписанияЗамера().
//  Неопределено - возвращается, если механизм оценки производительности отключен.
//
Функция НачатьЗамерВремени(КлючеваяОперация) Экспорт
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		Возврат СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецФункции

// Завершить замер начатый НачатьЗамерВремени() и сохранить его результат.
// Добавляет к длительности замера время обработки единицы данных и сохраняет замер.
//
// Может вызываться однократно с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
		ВремяНачала = ОписаниеЗамера.ВремяНачала - ОписаниеЗамера.СуммарноеВремя;
		ДополнительнаяИнформация = Новый Соответствие;
		ДополнительнаяИнформация["Длительная"] = Истина;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(ОписаниеЗамера.КлючеваяОперация,
			ВремяНачала,
			ОписаниеЗамера.Вес,
			ДополнительнаяИнформация);
		ОписаниеЗамера.ЗамерЗавершен = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводительностьСлужебныеПроцедурыИФункции

// Проверить, что указано допустимое количество данных и замер не завершен.
// Если проверка не выполняется успешно, вызывается исключение с описанием проблемы.
//
// Параметры:
//  ОписаниеЗамера - Структура, полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных.
//
Процедура ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных)
	
	Если КоличествоДанных < 0 Тогда
		ТекстОшибки = НСтр("ru = 'Параметр ""КоличествоДанных"" должен быть положительным (текущее значение ""%1"").'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, КоличествоДанных);
	ИначеЕсли ОписаниеЗамера.ЗамерЗавершен Тогда
		ТекстОшибки = НСтр("ru = 'Замер ключевой операции ""%1"" уже завершен. Повторное использование описания этого замера запрещено.'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, ОписаниеЗамера.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Создать описание замера производительности.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//  ВремяНачала - Число - время начала замера с точностью до миллисекунд.
//
// Возвращаемое значение:
//  Структура:
//   КлючеваяОперация - СправочникСсылка.КлючевыеОперации или Строка, равно значению параметра КлючеваяОперация.
//   ВремяНачала      - Число - время начала замера с точностью до миллисекунд, равно значению параметра ВремяНачала.
//   СуммарноеВремя   - Число - время, накопленное при вызовах ЗафиксироватьЗамерВремени().
//   Вес              - Число - суммарное количество обработанных данных.
//   ЗамерЗавершен    - Булево - Ложь, означает, что замер только начат, а Истина (позже), что замер завершен.
//
Функция СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала)
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("КлючеваяОперация", КлючеваяОперация);
	СтруктураОписания.Вставить("ВремяНачала", ВремяНачала);
	СтруктураОписания.Вставить("СуммарноеВремя", 0.0);
	СтруктураОписания.Вставить("Вес", 0);
	СтруктураОписания.Вставить("ЗамерЗавершен", Ложь);
	
	Возврат СтруктураОписания;
	
КонецФункции

// Зафиксировать промежуточное время замера с учетом количества обработанных данных.
// Добавляет к длительности замера время обработки единицы данных.
//
// Может вызываться неограниченное количество раз после НачатьЗамерВремени(),
// но не после вызова ЗакончитьЗамерВремени() с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1)
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если КоличествоДанных = 0 Тогда
			КоличествоДанных = 1;
		КонецЕсли;
		
		ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных);
		Интервал = ТекущееВремя - ОписаниеЗамера.ВремяНачала;
		УдельноеВремя = Интервал / КоличествоДанных;
		ОписаниеЗамера.СуммарноеВремя = ОписаниеЗамера.СуммарноеВремя + УдельноеВремя;
		ОписаниеЗамера.Вес = ОписаниеЗамера.Вес + КоличествоДанных;
		ОписаниеЗамера.ВремяНачала = ТекущееВремя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
