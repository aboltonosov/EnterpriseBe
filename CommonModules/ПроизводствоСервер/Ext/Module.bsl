////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Настройки

// Получает настройки подсистемы "Производство"
// 
// Возвращаемое значение:
//   - Структура - настройки подсистемы "Производство"
//
Функция НастройкиПодсистемыПроизводство() Экспорт
	
	Результат = Новый Структура;
	
	ИспользуетсяПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Результат.Вставить("ИспользуетсяПроизводство", ИспользуетсяПроизводство);
	Результат.Вставить("ИспользуетсяПроизводствоНаСтороне", ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне"));
	
	Результат.Вставить("ИспользуетсяПроизводство22", Ложь);
	Результат.Вставить("ИспользуетсяПроизводство21", ИспользуетсяПроизводство);
	
	#Область УправлениеПроизводством
	
	Результат.Вставить("ПланируетсяГрафикПроизводства", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", Ложь);
	Результат.Вставить("ФорматДатыГрафика", "ДЛФ=D");
	
//++ НЕ УТКА
	НастройкиУправленияПроизводством = УправлениеПроизводством.НастройкиУправленияПроизводством();
	ЗаполнитьЗначенияСвойств(Результат, НастройкиУправленияПроизводством);
//-- НЕ УТКА
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого требуется получить параметры
//
// Возвращаемое значение:
//   Структура   - содержит параметры производственного подразделения
//
Функция ПараметрыПроизводственногоПодразделения(Подразделение) Экспорт

	ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование",                   "");
	Параметры.Вставить("ГрафикРаботы",                   ОсновнойКалендарьПредприятия);
	Параметры.Вставить("НачалоИнтервалаПланирования",    '00010101');
	Параметры.Вставить("ОкончаниеИнтервалаПланирования", КонецДня('00010101'));
	Параметры.Вставить("ПодразделениеДиспетчер",         Ложь);
	Параметры.Вставить("ПроизводствоПоЗаказам",          Ложь);
	Параметры.Вставить("ПроизводствоБезЗаказов",         Ложь);
	Параметры.Вставить("ИспользуетсяСписаниеЗатратНаВыпуск", Ложь);
	
	//++ НЕ УТКА
	Параметры.Вставить("ИнтервалПланирования", Перечисления.ТочностьГрафикаПроизводства.День);
	Параметры.Вставить("УправлениеМаршрутнымиЛистами",    Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ);
	Параметры.Вставить("СпособПооперационногоУправления", Перечисления.СпособыУправленияОперациями.ПустаяСсылка());
	Параметры.Вставить("ИспользоватьПооперационноеУправление", Ложь);
	Параметры.Вставить("ИспользоватьМатериалыВОперациях", Ложь);
	Параметры.Вставить("ИспользоватьВыходныеИзделияВОперациях", Ложь);
	//-- НЕ УТКА
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА СтруктураПредприятия.ГрафикРаботы
		|		ИНАЧЕ &ОсновнойКалендарьПредприятия
		|	КОНЕЦ КАК ГрафикРаботы,
		|	СтруктураПредприятия.ИнтервалПланирования,
		|	СтруктураПредприятия.НачалоИнтервалаПланирования КАК НачалоИнтервалаПланирования,
		|	СтруктураПредприятия.ОкончаниеИнтервалаПланирования КАК ОкончаниеИнтервалаПланирования,
		|	СтруктураПредприятия.УправлениеМаршрутнымиЛистами,
		|	СтруктураПредприятия.СпособПооперационногоУправления,
		|	СтруктураПредприятия.ПодразделениеДиспетчер,
		|	СтруктураПредприятия.ПроизводствоПоЗаказам,
		|	СтруктураПредприятия.ПроизводствоБезЗаказов,
		|	СтруктураПредприятия.ИспользуетсяСписаниеЗатратНаВыпуск,
		|	СтруктураПредприятия.ИспользоватьПооперационноеУправление,
		|	СтруктураПредприятия.ИспользоватьМатериалыВОперациях,
		|	СтруктураПредприятия.ИспользоватьВыходныеИзделияВОперациях
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка = &Подразделение";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("ОсновнойКалендарьПредприятия", ОсновнойКалендарьПредприятия);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(Параметры, Выборка);
			
		КонецЕсли;
		
	КонецЕсли; 

	Возврат Параметры;
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  СписокПодразделений	- Массив - список подразделений для которых требуется получить параметры
//
// Возвращаемое значение:
//  Соответствие, где ключ - ссылка на подразделение, а Значение - структура, которая 
//				содержит параметры производственного подразделения
//
Функция ПараметрыПроизводственныхПодразделений(СписокПодразделений) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Подразделение,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА СтруктураПредприятия.ГрафикРаботы
	|		ИНАЧЕ ОсновнойКалендарьПредприятия.Значение
	|	КОНЕЦ КАК ГрафикРаботы,
	|	СтруктураПредприятия.ИнтервалПланирования КАК ИнтервалПланирования,
	|	СтруктураПредприятия.НачалоИнтервалаПланирования КАК НачалоИнтервалаПланирования,
	|	СтруктураПредприятия.ОкончаниеИнтервалаПланирования КАК ОкончаниеИнтервалаПланирования,
	|	СтруктураПредприятия.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
	|	СтруктураПредприятия.СпособПооперационногоУправления КАК СпособПооперационногоУправления
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия,
	|	Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&СписокПодразделений)";
	
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Параметры = Новый Структура("Наименование,
									|ГрафикРаботы,
									|ИнтервалПланирования,
									|НачалоИнтервалаПланирования,
									|ОкончаниеИнтервалаПланирования,
									|УправлениеМаршрутнымиЛистами,
									|СпособПооперационногоУправления");
								
		ЗаполнитьЗначенияСвойств(Параметры, Выборка);
		ЗначенияПараметров.Вставить(Выборка.Подразделение, Параметры);
	КонецЦикла;

	Возврат ЗначенияПараметров;
	
КонецФункции

#КонецОбласти

#Область Обеспечение

// Возвращает текст запроса с помощью которого можно получить склад материалов.
//
// Параметры:
//  ИмяТаблицыМатериалы			 - Строка - Псевдоним таблицы "материалов". Таблица должна содержать
//		поля Номенклатура, Характеристика, Подразделение (не обязательно).
//  ИмяПоляПодразделение		 - Строка - Имя поля "Подразделение" в таблице материалов.
//		Если подразделение определяется параметром, то перед именем нужно добавить "&".
//  ИспользоватьПроизводство2_2	 - Булево - Истина, если нужно использовать параметры производства версии 2.2.
// 
// Возвращаемое значение:
//  Структура - содержит тексты запросов:
//  	* ТекстПолеСклад - Строка - текст для получения поля "Склад".
//  	* ТекстПолеОснование - Строка - текст для получения поля "ОснованиеДляПолучения".
//  	* ТекстСоединения - Строка - текст соединений.
//
Функция ТекстЗапросаНастройкиПередачиМатериалов(ИмяТаблицыМатериалы, ИмяПоляПодразделение = Неопределено, ИспользоватьПроизводство2_2 = Ложь) Экспорт

	Если ИспользоватьПроизводство2_2 Тогда
		
		ТекстПолеСклад = 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(НастройкаДетальная.МетодОбеспеченияПотребностей, 
		|			ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, 
		|			ЕСТЬNULL(НастройкаОбщая.МетодОбеспеченияПотребностей, 
		|			ЕСТЬNULL(НастройкаГруппировкиОбщейНастройки.МетодОбеспеченияПотребностей, NULL)))) В (
		|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс),
		|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме),
		|					ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике))
		|		ТОГДА ЕСТЬNULL(НастройкаДетальная.Склад, 
		|			ЕСТЬNULL(ПринадлежностьГруппе.Склад, 
		|			ЕСТЬNULL(НастройкаОбщая.Склад, 
		|			ЕСТЬNULL(ПринадлежностьГруппеОбщейНастройки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))))
		|	ИНАЧЕ ЕСТЬNULL(СхемыОбеспеченияПроизводства.Склад, &СкладПоУмолчанию)
		|КОНЕЦ";
		
		ТекстПолеОснование = 
			"ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)";
		
		ТекстСоединения = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспеченияПроизводства КАК СхемыОбеспеченияПроизводства
		|		ПО ТаблицаМатериалы.Номенклатура.СхемаОбеспечения = СхемыОбеспеченияПроизводства.СхемаОбеспечения
		|			И ТаблицаМатериалы.Подразделение = СхемыОбеспеченияПроизводства.Подразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения";
		
		ПоляСоединенияТоварныеОграничения = 
			"ТаблицаМатериалы.Номенклатура,ТаблицаМатериалы.Характеристика,ТаблицаМатериалы.Подразделение";
		
		ТекстСоединения = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединениеПоддержанияЗапасовВКладовых(
								ТекстСоединения, "ПодстановкаТоварногоОграничения", ПоляСоединенияТоварныеОграничения);
	Иначе	
		
		ТекстПолеСклад = 
		"ЕСТЬNULL(НастройкаПередачиХарактеристика.Склад,
		|				ЕСТЬNULL(НастройкаПередачиНоменклатура.Склад, 
		|				ЕСТЬNULL(НастройкаПередачиСклад.Склад, &СкладПоУмолчанию)))";
		
		ТекстПолеОснование = 
		"ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
		|						ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство))))";
		
		ТекстСоединения = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиХарактеристика
		|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиХарактеристика.Подразделение
		|			И ТаблицаМатериалы.Номенклатура = НастройкаПередачиХарактеристика.Номенклатура
		|			И ТаблицаМатериалы.Характеристика = НастройкаПередачиХарактеристика.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиНоменклатура
		|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиНоменклатура.Подразделение
		|			И ТаблицаМатериалы.Номенклатура = НастройкаПередачиНоменклатура.Номенклатура
		|			И (НастройкаПередачиНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиСклад
		|		ПО ТаблицаМатериалы.Подразделение = НастройкаПередачиСклад.Подразделение
		|			И (НастройкаПередачиСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (НастройкаПередачиСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаПередачиХарактеристика.Подразделение ЕСТЬ NULL )
		|			И (НастройкаПередачиНоменклатура.Подразделение ЕСТЬ NULL )";
		
	КонецЕсли; 
	
	Если ИмяПоляПодразделение <> Неопределено Тогда
		Если Лев(ИмяПоляПодразделение, 1) = "&" Тогда
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы.Подразделение", ИмяПоляПодразделение);
		ИначеЕсли ИмяПоляПодразделение <> "Подразделение" Тогда
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы.Подразделение", "ТаблицаМатериалы." + ИмяПоляПодразделение);
		КонецЕсли; 
	КонецЕсли;
	
	Если ИмяТаблицыМатериалы <> "ТаблицаМатериалы" Тогда
		ТекстПолеСклад  = СтрЗаменить(ТекстПолеСклад,  "ТаблицаМатериалы", ИмяТаблицыМатериалы);
		ТекстСоединения = СтрЗаменить(ТекстСоединения, "ТаблицаМатериалы", ИмяТаблицыМатериалы);
	КонецЕсли;
	
	ШаблоныЗапроса = Новый Структура;
	ШаблоныЗапроса.Вставить("ТекстПолеСклад", ТекстПолеСклад);
	ШаблоныЗапроса.Вставить("ТекстПолеОснование", ТекстПолеОснование);
	ШаблоныЗапроса.Вставить("ТекстСоединения", ТекстСоединения);
	
	Возврат ШаблоныЗапроса;

КонецФункции

// Формирует текст запроса инициализирующий временную таблицу ВтСпособыПолученияМатериалов.
// 
// Возвращаемое значение:
//   - Строка - текст запроса
//
Функция ТекстЗапросаВТСпособыПолученияМатериаловПустая() Экспорт
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО								                 КАК Распоряжение,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                 КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                	 КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) 	 КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ГДЕ
		|	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для получения полей Склад, ВариантОбеспечения
//
// Параметры:
//  ИмяПоляСпособПолученияМатериала	 - Строка - имя поля в котором содержится способ получения.
//  ИмяПоляПодразделение			 - Строка - имя поля в котором содержится ссылка на подразделение,
//		например "Этап.Подразделение".
//  ИспользоватьПроизводство2_2		 - Булево - Истина, если нужно получить параметры для производства версии 2.2.
// 
// Возвращаемое значение:
//  Структура - содержит тексты запросов:
//  	* ТекстПолеСклад - Строка - текст для получения поля "Склад".
//  	* ТекстПолеВариантОбеспечения - Строка - текст для получения поля "ВариантОбеспечения".
//  	* ТекстПолеОснование - Строка - текст для получения поля "ОснованиеДляПолучения".
//  	* ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения - Строка - текст для получения поля 
//			"ЗапрещеноИзменятьПараметрыОбеспечения".
//  	* ТекстСоединения - Строка - текст соединений.
//
Функция ТекстЗапросаПараметрыОбеспечения(ИмяПоляСпособПолученияМатериала = Неопределено, ИмяПоляПодразделение = Неопределено, ИспользоватьПроизводство2_2 = Ложь, РассчитыватьДляПлановПроизводства = Ложь) Экспорт

	Если ИспользоватьПроизводство2_2 Тогда
		
		// В версии 2.2. 
		// - ПФ всегда идут через склад
		// - Для получения склада используются схемы обеспечения
		
		// Склад
		#Область ТекстПолеСклад
		ТекстПолеСклад = 
		"ВЫБОР
		|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				ИЛИ ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа), 
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад ЕСТЬ NULL ТОГДА
		|			ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад
		|		ИНАЧЕ &ТекстПоляСкладМатериалов
		|	КОНЕЦ";
		#КонецОбласти
		
		// ВариантОбеспечения
		#Область ТекстПолеВариантОбеспечения
		
		ТекстПолеВариантОбеспечения = 
		"ВЫБОР 
		|		КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно)
		|
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|
		|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
		|			
		|			ВЫБОР 
		|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
		|						ИЛИ МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
		|																			ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе))
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|			КОНЕЦ
		|			
		|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
		|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|			
		|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура ЕСТЬ NULL ТОГДА
		|
		|			ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения
		|
		|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|			
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|		
		|		КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|	
		|	КОНЕЦ";
		
		#КонецОбласти
		
	Иначе
		
		// Склад
		#Область ТекстПолеСклад
		ТекстПолеСклад = 
		"ВЫБОР 
		|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад ЕСТЬ NULL ТОГДА
		|			ТаблицаСпособыПолученияМатериаловПереопределяемый.Склад";
		
		Если ИмяПоляСпособПолученияМатериала <> Неопределено Тогда
			ТекстПолеСклад = ТекстПолеСклад + "
			|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
			|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
			|			ВЫБОР 
			|				КОГДА СпрПодразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
			|					ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
			|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Подразделение
			|					ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
			|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Подразделение
			|					ТОГДА &ТекстПоляСкладМатериалов
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
			|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Подразделение
			|					ТОГДА &ТекстПоляСкладМатериалов
			|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			КОНЕЦ";
		КонецЕсли; 
		
		Если РассчитыватьДляПлановПроизводства Тогда
			
			ТекстПолеСклад = ТекстПолеСклад + "
			|		ИНАЧЕ &ТекстПоляСкладМатериалов
			|	КОНЕЦ";
			
		Иначе
			
			ТекстПолеСклад = ТекстПолеСклад + "
			|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
			|			ТОГДА &ТекстПоляСкладМатериалов
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ";
			
		КонецЕсли;
		
		#КонецОбласти
		
		// ВариантОбеспечения
		#Область ТекстПолеВариантОбеспечения
		ТекстПолеВариантОбеспечения = "ВЫБОР";
		Если ИмяПоляСпособПолученияМатериала <> Неопределено Тогда
			ТекстПолеВариантОбеспечения = ТекстПолеВариантОбеспечения + "
			|		КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ОбеспечиватьОбособленно)
			|
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|
			|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
			|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
			|			
			|			ВЫБОР 
			|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
			|						ИЛИ МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
			|																			ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе))
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|			КОНЕЦ
			|			
			|		КОГДА МатериалыИУслуги.СпособПолученияМатериала В (ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации),
			|															ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)) ТОГДА
			|			ВЫБОР 
			|				КОГДА МатериалыИУслуги.Подразделение.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую)
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
			|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение = МатериалыИУслуги.Подразделение
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе)
			|						И ВЫРАЗИТЬ(МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства).Подразделение <> МатериалыИУслуги.Подразделение
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				КОГДА МатериалыИУслуги.СпособПолученияМатериала = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
			|						И ПроизводимоеВПроцессеИзделие.Этап.Подразделение <> МатериалыИУслуги.Подразделение
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
			|			КОНЕЦ";
		КонецЕсли;
		
		ТекстПолеВариантОбеспечения = ТекстПолеВариантОбеспечения + "
		|			
		|		КОГДА НЕ ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура ЕСТЬ NULL ТОГДА
		|
		|			ТаблицаСпособыПолученияМатериаловПереопределяемый.ВариантОбеспечения
		|
		|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|			
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|		
		|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				И &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|				ТОГДА
		|		
		|			ВЫБОР 
		|				КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа 
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|			КОНЕЦ
		|	
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	КОНЕЦ";
		
		#КонецОбласти
		
	КонецЕсли; 
	
	ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
										"МатериалыИУслуги", 
										ИмяПоляПодразделение,
										ИспользоватьПроизводство2_2);	
										
	ТекстПолеСклад = СтрЗаменить(
						ТекстПолеСклад, 
						"&ТекстПоляСкладМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
						
	ТекстПолеСклад = СтрЗаменить(
						ТекстПолеСклад, 
						"&ТекстПолеОснование",
						ТекстЗапросаДляПолученияСклада.ТекстПолеОснование);
	
	ТекстПолеВариантОбеспечения = СтрЗаменить(
						ТекстПолеВариантОбеспечения, 
						"&ТекстПолеОснование",
						ТекстЗапросаДляПолученияСклада.ТекстПолеОснование);
	
	ТекстСоединения = ТекстЗапросаДляПолученияСклада.ТекстСоединения + " 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыПолученияМатериалов КАК ТаблицаСпособыПолученияМатериаловПереопределяемый
	|		ПО ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура = МатериалыИУслуги.Номенклатура
	|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Характеристика = МатериалыИУслуги.Характеристика
	|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Распоряжение = &Распоряжение
	|			И ТаблицаСпособыПолученияМатериаловПереопределяемый.Назначение = &Назначение
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СпрПодразделение
	|		ПО СпрПодразделение.Ссылка = МатериалыИУслуги.Подразделение";
						
	Если ИмяПоляСпособПолученияМатериала <> Неопределено 
		И ИмяПоляСпособПолученияМатериала <> "СпособПолученияМатериала" Тогда
		
		ТекстПолеСклад = СтрЗаменить(
			ТекстПолеСклад,
			"МатериалыИУслуги.СпособПолученияМатериала",
			"МатериалыИУслуги." + ИмяПоляСпособПолученияМатериала);
		
		ТекстПолеВариантОбеспечения = СтрЗаменить(
			ТекстПолеВариантОбеспечения,
			"МатериалыИУслуги.СпособПолученияМатериала",
			"МатериалыИУслуги." + ИмяПоляСпособПолученияМатериала);
		
	КонецЕсли;
		
	Если ИмяПоляПодразделение <> Неопределено Тогда 
		
		Если Лев(ИмяПоляПодразделение, 1) = "&" Тогда
			
			ТекстПолеСклад = СтрЗаменить(
				ТекстПолеСклад,
				"МатериалыИУслуги.Подразделение",
				ИмяПоляПодразделение);
			
			ТекстПолеВариантОбеспечения = СтрЗаменить(
				ТекстПолеВариантОбеспечения,
				"МатериалыИУслуги.Подразделение",
				ИмяПоляПодразделение);
				
			ТекстСоединения = СтрЗаменить(
				ТекстСоединения,
				"МатериалыИУслуги.Подразделение",
				ИмяПоляПодразделение);
				
		ИначеЕсли ИмяПоляПодразделение <> "Подразделение" Тогда
			
			ТекстПолеСклад = СтрЗаменить(
				ТекстПолеСклад,
				"МатериалыИУслуги.Подразделение",
				"МатериалыИУслуги." + ИмяПоляПодразделение);
			
			ТекстПолеВариантОбеспечения = СтрЗаменить(
				ТекстПолеВариантОбеспечения,
				"МатериалыИУслуги.Подразделение",
				"МатериалыИУслуги." + ИмяПоляПодразделение);
				
			ТекстСоединения = СтрЗаменить(
				ТекстСоединения,
				"МатериалыИУслуги.Подразделение",
				"МатериалыИУслуги." + ИмяПоляПодразделение);
				
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения = 
	"ВЫБОР
	|	КОГДА ТаблицаСпособыПолученияМатериаловПереопределяемый.Номенклатура ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ
	|	ИНАЧЕ ИСТИНА
	|КОНЕЦ";
	
	ШаблоныЗапроса = Новый Структура;
	ШаблоныЗапроса.Вставить("ТекстПолеСклад", ТекстПолеСклад);
	ШаблоныЗапроса.Вставить("ТекстПолеВариантОбеспечения", ТекстПолеВариантОбеспечения);
	ШаблоныЗапроса.Вставить("ТекстПолеОснование", ТекстЗапросаДляПолученияСклада.ТекстПолеОснование);
	ШаблоныЗапроса.Вставить("ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения",
		ТекстПолеЗапрещеноИзменятьПараметрыОбеспечения);
	ШаблоныЗапроса.Вставить("ТекстСоединения", ТекстСоединения);
	
	Возврат ШаблоныЗапроса;

КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Добавляет команду для создания передачи материалов на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	//++ НЕ УТКА
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
			
			СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
			Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
			
			КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
			КомандаСоздатьНаОсновании.Представление = Операция.Представление;
			КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВКладовуюНаОсновании";
			КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
			КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			
			Возврат КомандаСоздатьНаОсновании;
			
		КонецЕсли;
		
	Иначе
	//-- НЕ УТКА
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПередачаМатериаловВПроизводство) Тогда
			
			КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПередачаМатериаловВПроизводство.ПолноеИмя();
			КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПередачаМатериаловВПроизводство);
			КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
			//++ НЕ УТКА
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством";
			//-- НЕ УТКА
			КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			
			КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказМатериаловВПроизводство"));
			КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
			//++ НЕ УТКА
			КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
			КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказДавальца"));
			КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца"));
			//-- НЕ УТКА
			
			Возврат КомандаСоздатьНаОсновании;
			
		КонецЕсли;
	//++ НЕ УТКА	
	КонецЕсли; 
	//-- НЕ УТКА
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду для создания возврата материалов на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьВозвратМатериаловНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	//++ НЕ УТКА
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
		Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства);
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииВозвратМатериалов";
		КомандаСоздатьНаОсновании.Представление = Операция.Представление;
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьВозвратМатериаловНаОсновании";
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду для создания выпуска продукции на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//	МножественныйВыбор - Булево - флаг, определяющий режим использования команды (множественный или одиночный)
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьПередачуПродукцииИзПроизводстваНаОсновании(КомандыСоздатьНаОсновании, МножественныйВыбор = Ложь) Экспорт
	
	//++ НЕ УТКА
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
		Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства);
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача выпущенной продукции'");
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуПродукцииИзПроизводстваНаОсновании";
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.РежимИспользованияПараметра = ?(МножественныйВыбор, 
																	РежимИспользованияПараметраКоманды.Множественный,
																	РежимИспользованияПараметраКоманды.Одиночный);
																	
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду для создания выпуска продукции на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//	МножественныйВыбор - Булево - флаг, определяющий режим использования команды (множественный или одиночный)
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьПередачуПродукцииНаОсновании(КомандыСоздатьНаОсновании, МножественныйВыбор = Ложь) Экспорт
	
	//++ НЕ УТКА
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
			СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
			Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
			КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача выпущенной продукции'");
			КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуПродукцииИзКладовойНаОсновании";
			КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСоздатьНаОсновании.РежимИспользованияПараметра = ?(МножественныйВыбор, 
																		РежимИспользованияПараметраКоманды.Множественный,
																		РежимИспользованияПараметраКоманды.Одиночный);
																		
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
			
			Возврат КомандаСоздатьНаОсновании;
			
		КонецЕсли;
		
	Иначе
	//-- НЕ УТКА	
		Если ПравоДоступа("Добавление", Метаданные.Документы.ВыпускПродукции) Тогда
			
			КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ВыпускПродукции.ПолноеИмя();
			КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ВыпускПродукции);
			КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСоздатьНаОсновании.РежимИспользованияПараметра = ?(МножественныйВыбор, 
																		РежимИспользованияПараметраКоманды.Множественный,
																		РежимИспользованияПараметраКоманды.Одиночный);
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
			//++ НЕ УТКА
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством";
			//-- НЕ УТКА
			
			Возврат КомандаСоздатьНаОсновании;
			
		КонецЕсли;
	//++ НЕ УТКА
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду для создания выпуска продукции без заказа на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьВыпускПродукцииБезЗаказаНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	//++ НЕ УТКА
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача выпущенной продукции'");
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьВыпускПродукцииБезЗаказаНаОсновании";
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
																	
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	//-- НЕ УТКА
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду для создания передачи материалов на основании другого документа
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции
//		ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьПередачуМатериаловВПроизводствоНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	//++ НЕ УТКА
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
		Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = Операция.Представление;
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВПроизводствоНаОсновании";
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПоискВТаблицеЗначенийССохранениемПорядкаСтрок

// Выполняет нумерацию строк таблицы значений. Для нумерации используется колонка ПорядковыйНомер.
// Если колонка с таким именем отсутствует в переданной таблице, то она будет добавлена.
//
// Параметры:
//  Таблица	- ТаблицаЗначений - таблица, строки которой будут пронумерованы.
//
Процедура ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица) Экспорт
	
	Если Таблица.Колонки.Найти("ПорядковыйНомер") = Неопределено Тогда
		Таблица.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Номер = 0;
	Для каждого Строка Из Таблица Цикл
		Строка.ПорядковыйНомер = Номер;
		Номер = Номер + 1;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значение колонки ПорядковыйНомер в новой строке таблицы значений,
// строки которой пронумерованы (см. процедуру ДобавитьВТаблицуПорядковыйНомерСтрок).
//
// Параметры:
//  Таблица		 - ТаблицаЗначений - таблица с пронумерованными строками.
//  НоваяСтрока	 - СтрокаТаблицыЗначений - строка в которой необходимо заполнить порядковый номер.
//
Процедура ЗаполнитьПорядковыйНомерВНовойСтроке(Таблица, НоваяСтрока) Экспорт
	
	НоваяСтрока.ПорядковыйНомер = Таблица.Количество() + 1;
	
КонецПроцедуры

// Осуществляет поиск строк в таблице значений с сохранением их порядка.
//
// Параметры:
//  Таблица				 - ТаблицаЗначений - таблица в которой необходимо выполнить поиск.
//  УсловиеПоиска		 - Структура - условие поиска строк.
//  СтрокиПронумерованы	 - Булево - Истина, если строки таблицы были предварительно пронумерованы
//		(см. процедуру ДобавитьВТаблицуПорядковыйНомерСтрок).
// 
// Возвращаемое значение:
//  Массив - найденные строки.
//
Функция НайтиСтрокиССохранениемПорядка(Таблица, УсловиеПоиска, СтрокиПронумерованы=Ложь) Экспорт
	
	НайденныеСтроки = Таблица.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Если СтрокиПронумерованы Тогда
			
			Результат = УпорядочитьПронумерованныеСтроки(Таблица, НайденныеСтроки);
			
		Иначе
			
			Результат = УпорядочитьНеПронумерованныеСтроки(Таблица, НайденныеСтроки);
			
		КонецЕсли;
		
	Иначе
		
		Результат = НайденныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Включает/отключает использование свойств для нормативно-справочной информации.
//
Процедура УстановитьИспользованиеСвойствСправочников() Экспорт
	
	ПараметрыНабора              = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьПроизводство.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РесурсныеСпецификации", ПараметрыНабора);
//++ НЕ УТКА
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыРабочихЦентров", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РабочиеЦентры", ПараметрыНабора);
//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДвижениеПродукцииИМатериалов

// КОМАНДЫ СОЗДАНИЯ НА ОСНОВАНИИ

// Если документ оформлен по одному распоряжению то в табличной части заполняется реквизит Распоряжение.
// Если документ оформлен не распоряжениям то в табличной части очищается реквизит Распоряжение.
// Используется перед записью документа.
//
Процедура ЗаполнитьИлиОчиститьРаспоряжениеВТабличнойЧасти(ТабличнаяЧасть, Распоряжение, ПоРаспоряжениям) Экспорт

	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		Если ПоРаспоряжениям 
			И ЗначениеЗаполнено(Распоряжение) 
			И Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
		
			ДанныеСтроки.Распоряжение = Распоряжение;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение)
			И ДанныеСтроки.Распоряжение <> Неопределено Тогда
			
			ДанныеСтроки.Распоряжение = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОсновании(Реквизиты, ХозяйственнаяОперация) Экспорт
	
	Перем ТекстОшибки;
	
	Если НЕ Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить документ на основании непроведенных распоряжений.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Не Реквизиты.ЕстьОтгрузить Тогда
		ТекстОшибки = ОбеспечениеСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
		И Не Реквизиты.ЕстьПроизведен Тогда
		ТекстОшибки = НСтр("ru = 'Нет продукции, доступной для передачи. Для начала процесса передачи продукции
                            |необходимо установить признак ""Произведено"" в этапе производства.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить документ по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Реквизиты.КоличествоСкладов > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы отгружаются с разных складов.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, 
			|т.к материалы отгружаются с разных складов.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		И Реквизиты.КоличествоПодразделений > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы отгружаются в разные подразделения.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, 
			|т.к материалы отгружаются в разные подразделения.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
		И Реквизиты.КоличествоПолучателей > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, т.к продукция передается на разные склады.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, 
			|т.к продукция передается на разные склады.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
		И Реквизиты.КоличествоПолучателей > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, т.к продукция передается в разные подразделения.
			|Для оформления документа рекомендуется использовать форму ""Получение и возврат материалов"".'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу продукции, 
			|т.к продукция передается в разные подразделения.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЖурналаРегистрации

Функция СобытиеНазначениеОсновныхСпецификаций() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Назначение основных спецификаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеРасчетНормативнойДлительности() Экспорт
	
	Возврат НСтр("ru = 'НСИ производства.Расчет нормативной длительности'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЗаменаСпецификаций() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Замена спецификаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПланированиеГрафикаПроизводства() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Планирование графика производства'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
КонецФункции

Функция СобытиеПередачаЭтаповКВыполнению() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Передача этапов к выполнению'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПометкаНаУдалениеЭтапов() Экспорт
	
	Возврат НСтр("ru = 'Межцеховое управление.Пометка на удаление этапов производства'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область Математика

Функция НаибольшийОбщийДелительВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Если МассивЧисел.Количество() < 2 Тогда
		
		НОД = 1;
		
	Иначе
		
		НОД = МассивЧисел[0];
		
		Для Индекс = 1 По МассивЧисел.Количество()-1 Цикл
		
			НОД = НаибольшийОбщийДелитель(НОД, МассивЧисел[Индекс]);
			
			Если НОД = 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НОД;
	
КонецФункции

Функция НаибольшийОбщийДелитель(Знач Числитель, Знач Знаменатель) Экспорт
	
	Если Числитель = 0 ИЛИ Знаменатель = 0 Тогда
		
		Возврат 1;
		
	КонецЕсли;

	Пока Знаменатель <> 0 Цикл
		
		ОстатокОтДеления = Числитель % Знаменатель;
		Числитель = Знаменатель;
		Знаменатель = ОстатокОтДеления;
		
	КонецЦикла;
	
	Возврат Числитель;

КонецФункции

Функция НаименьшееОбщееКратноеВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Возврат НаименьшееОбщееКратное(МассивЧисел);
	
КонецФункции

Функция НаименьшееОбщееКратное(Числа) Экспорт

	НОК = 1;
	
	Для Каждого Число Из Числа Цикл
		
		НОК = НОК * Число / НаибольшийОбщийДелитель(НОК,Число);
		
	КонецЦикла;
	
	Возврат НОК;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция УпорядочитьПронумерованныеСтроки(Таблица, МассивСтрок)
	
	СтрокиУпорядочены = МассивПронумерованныхСтрокУпорядочен(МассивСтрок);
	
	Если СтрокиУпорядочены Тогда
		
		Результат = МассивСтрок;
		
	Иначе
		
		ТаблицаСортировки = Новый ТаблицаЗначений;
		ТаблицаСортировки.Колонки.Добавить("Строка", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
		ТаблицаСортировки.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
			
			Строка = МассивСтрок[Индекс];
			
			НоваяСтрока = ТаблицаСортировки.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.ПорядковыйНомер = Строка.ПорядковыйНомер;
			
		КонецЦикла;
		
		ТаблицаСортировки.Сортировать("ПорядковыйНомер ВОЗР");
		
		Результат = Новый Массив;
		Для Индекс = 0 По ТаблицаСортировки.Количество()-1 Цикл
			
			Результат.Добавить(ТаблицаСортировки[Индекс].Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МассивПронумерованныхСтрокУпорядочен(МассивСтрок)
	
	Результат = Истина;
	
	МаксИндекс = МассивСтрок.ВГраница();
	
	ПредыдущаяСтрока = МассивСтрок[МаксИндекс];
	Для Сч = 1 По МаксИндекс Цикл
		
		ТекущаяСтрока = МассивСтрок[МаксИндекс-сч];
		Если ТекущаяСтрока.ПорядковыйНомер > ПредыдущаяСтрока.ПорядковыйНомер Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УпорядочитьНеПронумерованныеСтроки(Таблица, МассивСтрок)
	
	ТаблицаИндексов = ИндексыНеПронумерованныхСтрок(Таблица, МассивСтрок);
	СтрокиУпорядочены = ТаблицаИндексовУпорядочена(ТаблицаИндексов);
	
	Если СтрокиУпорядочены Тогда
		
		Результат = МассивСтрок;
		
	Иначе
		
		ТаблицаИндексов.Сортировать("ИндексТаблицы ВОЗР");
		
		Результат = Новый Массив;
		Для Индекс = 0 По ТаблицаИндексов.Количество()-1 Цикл
			
			Результат.Добавить(ТаблицаИндексов[Индекс].Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИндексыНеПронумерованныхСтрок(Таблица, МассивСтрок)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Строка", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("ИндексТаблицы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		
		Строка = МассивСтрок[Индекс];
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.ИндексТаблицы = Таблица.Индекс(Строка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИндексовУпорядочена(ТаблицаИндексов)
	
	Результат = Истина;
	
	ПредыдущаяСтрока = ТаблицаИндексов[0];
	Для Индекс = 1 По ТаблицаИндексов.Количество()-1 Цикл
		
		ТекущаяСтрока = ТаблицаИндексов[Индекс];
		Если ТекущаяСтрока.ИндексТаблицы < ПредыдущаяСтрока.ИндексТаблицы Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МассивЗначений(Значение, СоздатьНовыйМассив = Ложь) Экспорт

	Перем Результат;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Если Значение <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
		
	ИначеЕсли СоздатьНовыйМассив Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
	Иначе
		
		Результат = Значение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(Таблица, КоэффициентыСтоимости) Экспорт
	
	КоэффициентыСтоимости = КоэффициентыСтоимости(Таблица);
	Для каждого КлючИЗначение Из КоэффициентыСтоимости Цикл
		
		Индекс = КлючИЗначение.Ключ;
		Коэффициент = КлючИЗначение.Значение;
		
		Таблица[Индекс].ДоляСтоимости = Таблица[Индекс].Количество * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоэффициентыСтоимости(Таблица)
	
	Результат = Новый Соответствие;
	
	Если Таблица.Количество() = 1 Тогда
		
		Результат.Вставить(0, 1);
		
	Иначе
			
		НОК = НаименьшееОбщееКратноеВКоллекции(Таблица, "Количество");
		
		Для Индекс = 0 По Таблица.Количество()-1 Цикл
			
			Строка = Таблица[Индекс];
			
			Если Строка.Количество > 0 Тогда
				
				Коэффициент = (Строка.ДоляСтоимости * НОК)/Строка.Количество;
				Результат.Вставить(Индекс, Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьДолиСтоимостиПриРазбиенииСтроки(Таблица, ИсходнаяСтрока, НоваяСтрока, КоэффициентыСтоимости) Экспорт
	
	Коэффициент = КоэффициентыСтоимости.Получить(Таблица.Индекс(ИсходнаяСтрока));
	КоэффициентыСтоимости.Вставить(Таблица.Индекс(НоваяСтрока), Коэффициент);
	
	ДоляСтоимостиИсх = ИсходнаяСтрока.ДоляСтоимости;
	
	ИсходнаяСтрока.ДоляСтоимости = Окр(ИсходнаяСтрока.Количество * Коэффициент);
	НоваяСтрока.ДоляСтоимости = ДоляСтоимостиИсх - ИсходнаяСтрока.ДоляСтоимости;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
