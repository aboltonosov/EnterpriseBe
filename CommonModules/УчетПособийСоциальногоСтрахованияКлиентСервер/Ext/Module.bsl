
#Область СлужебныеПроцедурыИФункции

// Возвращает дату вступления в силу статьи 1 Федерального закона от 25.02.2011 № 21-ФЗ.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаОтдельногоРасчетаПособийПоМатеринству() Экспорт 

	Возврат '20130101'

КонецФункции 

// Возвращает дату вступления в силу Федерального Закона от 08.12.2010 № 343-ФЗ.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаНачалаРеформыСоцСтрахования() Экспорт 
	
	Возврат '20110101'
	
КонецФункции 

// Возвращает дату вступления в силу Федерального закона от 05.04.2013 № 36-ФЗ "О внесении изменений в статью 9.
// Федерального закона "Об обязательном социальном страховании от несчастных случаев на производстве и профессиональных
// заболеваний" и статью 1 Федерального закона "Об обязательном социальном страховании на случай временной
// нетрудоспособности и в связи с материнством".
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаВводаОграниченийДляПособийПоНС_ПЗ() Экспорт 

	Возврат '20130408'

КонецФункции 

// Возвращает дату вступления в силу Федерального закона от 29.12.2015 № 388-ФЗ "О внесении изменений в отдельные 
// законодательные акты Российской Федерации в части учета и совершенствования предоставления мер социальной поддержки 
// исходя из обязанности соблюдения принципа адресности и применения критериев нуждаемости".
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Дата
//
Функция ДатаОтменыЛьготФинансируемыхИзБюджета() Экспорт 

	Возврат '20160701'

КонецФункции 

// Функция возвращает длину суток в секундах.
//
Функция ДлинаСуток() Экспорт
	Возврат 24 * 60 * 60;
КонецФункции

// 4D:ERP для Беларуси, Петр, 29.11.2017 16:24:27 
// Документ "Больничный лист. Доработать заполнение процента оплаты, № 15884
// {
// Функция возвращает количество дней оплаты больничных листов в размере 80%.
Функция КоличествоДнейНеПолнойОплаты() Экспорт
	Возврат 12;
КонецФункции
// }
// 4D

// Функция возвращает количество дней за счет работодателя в зависимости от даты начала нетрудоспособности.
//
Функция КоличествоДнейЗаСчетРаботодателя(ДатаНачалаСобытия) Экспорт
	Возврат ?(ДатаНачалаСобытия > ДатаНачалаРеформыСоцСтрахования(), 3, 2);
КонецФункции

Функция ДатаНачалаНеполногоПериодаРасчетаСреднегоЗаработка() Экспорт
	Возврат '20140301';
КонецФункции

#Область СреднийЗаработокФСС

Функция СреднийЗаработокФСС(ПараметрыРасчета) Экспорт 
	
	// 4D:ERP для Беларуси, Яна, 09.06.2017 17:31:47 
	// Документ "Отпуск по уходу за ребенком", №14900 
	// {	
	СреднийЗаработокФСЗН = 0;
	
	Если ПараметрыРасчета.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация") Тогда
		СреднийЗаработокФСЗН = СреднийЗаработокФСЗН(ПараметрыРасчета);
	КонецЕсли;
	
	Возврат СреднийЗаработокФСЗН;
	// }
	// 4D	
	
КонецФункции

Функция СреднийЗаработокФСС2010(ПараметрыРасчета) Экспорт
	
	СуммаНачислений = 0;
	ОтработаноДнейКалендарных = 0;
	
	Для Каждого СтрокаКоллекции Из ПараметрыРасчета.ДанныеНачислений Цикл
		
		Если СтрокаКоллекции.ПорядокРасчета <> ПараметрыРасчета.ПорядокРасчета Тогда 
			Продолжить;
		КонецЕсли;

		Если СтрокаКоллекции.Период >= ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало 
			И СтрокаКоллекции.Период <= ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание Тогда
			СуммаНачислений = СуммаНачислений + СтрокаКоллекции.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКоллекции Из ПараметрыРасчета.ДанныеВремени Цикл
		
		Если СтрокаКоллекции.Период >= ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало 
			И СтрокаКоллекции.Период <= ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание Тогда
			ОтработаноДнейКалендарных = ОтработаноДнейКалендарных + СтрокаКоллекции.ОтработаноДнейКалендарных;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(ОтработаноДнейКалендарных = 0, 0, Окр(СуммаНачислений / ОтработаноДнейКалендарных, 2));
	
КонецФункции	

Функция СреднийЗаработокФСС2011(ПараметрыРасчета)
	
	СреднедневнойЗаработок = 0;
	
	ПрименятьПредельнуюВеличину = ПараметрыРасчета.ПрименятьПредельнуюВеличину;
	Если ПараметрыРасчета.НеполныйРасчетныйПериод Тогда
		ПараметрыРасчета.ПрименятьПредельнуюВеличину = Ложь
	КонецЕсли;
	
	ДанныеРасчетаСреднегоЗаработка = ДанныеРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета);
	
	Заработок		= УчитываемыйЗаработокФСС(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	КоличествоДней 	= УчитываемыхДнейВКалендарныхГодахФСС(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	
	СреднедневнойЗаработок = СреднедневнойЗаработокФСС(Заработок, КоличествоДней);
	
	Если ПараметрыРасчета.НеполныйРасчетныйПериод И ПрименятьПредельнуюВеличину Тогда
		МаксимальныйСреднедневнойЗаработок = МаксимальныйСреднедневнойЗаработокДляНеполногоРасчетногоПериода(ПараметрыРасчета.ДатаНачалаСобытия);
		СреднедневнойЗаработок = Мин(МаксимальныйСреднедневнойЗаработок, СреднедневнойЗаработок);			
	ИначеЕсли ПрименятьОграничениеПособияПоМатеринству(ПараметрыРасчета) Тогда 
		МаксимальныйСреднедневнойЗаработок = МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(ПараметрыРасчета);
		СреднедневнойЗаработок = Мин(МаксимальныйСреднедневнойЗаработок, СреднедневнойЗаработок);			
	КонецЕсли;
	
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = ПрименятьПредельнуюВеличину;
	
	Возврат СреднедневнойЗаработок;
	
КонецФункции

Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС() Экспорт
	
	Параметры = Новый Структура(	
	// 4D:ERP для Беларуси, Яна, 15.08.2017 12:17:20 
	//  Документ "Отпуск по уходу за ребенком", №15745 
	// {
		"ДатаНачалаСобытия, 
		|ПериодРасчетаСреднегоЗаработкаНачало, 
		|ПериодРасчетаСреднегоЗаработкаОкончание,
		|ПериодыРасчета, 
		|РасчетныеГоды, 
		|НеполныйРасчетныйПериод, 
		|ДанныеНачислений, 
		|ДанныеВремени, 
		|ДанныеСтрахователей, 
		|УчитыватьЗаработокПредыдущихСтрахователей, 
		|ИспользоватьДниБолезниУходаЗаДетьми, 
		|ПрименятьПредельнуюВеличину, 
		|ПредельныеВеличиныПоГодам, 
		|ПредельныеВеличины,
		|ПорядокРасчета, 
		|ДоляНеполногоВремени, 
		|РайонныйКоэффициентРФ, 
		|МинимальныйРазмерОплатыТрудаРФ,
		
		// 4D:ERP для Беларуси, Петр, 01.03.2018 17:07:26 
		// Доработать печатные формы док-та "Больничный лист", № 17952
		// {
		|РасчетПремии,
		// }
		// 4D
		
		|Сотрудник");
			
	Параметры.РасчетныеГоды 							= Новый Массив;
	Параметры.ПериодыРасчета							= Новый Массив;
	// }
	// 4D
	Параметры.НеполныйРасчетныйПериод			 		= Ложь;
	Параметры.УчитыватьЗаработокПредыдущихСтрахователей	= Ложь;
	Параметры.ПредельныеВеличиныПоГодам 				= Новый Соответствие;
	Параметры.ИспользоватьДниБолезниУходаЗаДетьми 		= Ложь;
	Параметры.ПрименятьПредельнуюВеличину 				= Истина;
	Параметры.ДоляНеполногоВремени 						= 1;
	Параметры.РайонныйКоэффициентРФ 					= 1;
	
	Возврат Параметры;
	
КонецФункции

Функция ПорядокРасчетаСреднегоЗаработкаФСС(Период) Экспорт
	
	ПрименениеПорядкаРасчета = Новый Массив;
	// 4D:ERP для Беларуси, Яна, 09.06.2017 16:02:04 
	// Документ "Отпуск по уходу за ребенком", №14900 
	// {
	ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация");
	// }
	// 4D

	Возврат ПорядокРасчета;
	
КонецФункции

Функция ПериодРасчетаСреднегоЗаработкаФСС(ДатаНачалаСобытия, ПорядокРасчета = Неопределено) Экспорт
	
	ПериодРасчета = Новый СтандартныйПериод;
	
	Если ПорядокРасчета = Неопределено Тогда
		ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС(ДатаНачалаСобытия);
	КонецЕсли;
	
	// 4D:ERP для Беларуси, Яна, 09.06.2017 16:02:04 
	// Документ "Отпуск по уходу за ребенком", №14900 
	// {	
	Если ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация") Тогда
		ПериодРасчета.ДатаНачала	= НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -6));
		ПериодРасчета.ДатаОкончания	= КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1));
	КонецЕсли;
	// }
	// 4D
	
	Возврат ПериодРасчета;
	
КонецФункции

Функция ПрименятьОграничениеПособияПоМатеринству(ПараметрыРасчета) Экспорт
	Возврат ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми
		И ПараметрыРасчета.ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству() 
		И ПараметрыРасчета.ПрименятьПредельнуюВеличину;
КонецФункции

Функция ГодыПредельныхВеличин(ПараметрыРасчета) Экспорт
	
	ГодыПредельныхВеличин = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыРасчета.РасчетныеГоды);
	
	Если ПрименятьОграничениеПособияПоМатеринству(ПараметрыРасчета) Тогда
		ГодыПредельныхВеличинДляОграниченияПособияПоМатеринству = ГодыПредельныхВеличинДляОграниченияПособияПоМатеринству(ПараметрыРасчета);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГодыПредельныхВеличин, ГодыПредельныхВеличинДляОграниченияПособияПоМатеринству, Истина);
	КонецЕсли;
	
	Возврат ГодыПредельныхВеличин;
	
КонецФункции

Функция ГодыПредельныхВеличинДляОграниченияПособияПоМатеринству(ПараметрыРасчета) Экспорт
	
	ГодыПолученияПредельныхВеличинДляОграниченияПособия = Новый Массив;
	
	ПериодРасчетаСреднего = ПериодРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета.ДатаНачалаСобытия, ПараметрыРасчета.ПорядокРасчета);
	
	ГодыПолученияПредельныхВеличинДляОграниченияПособия.Добавить(Год(ПериодРасчетаСреднего.ДатаНачала));
	ГодыПолученияПредельныхВеличинДляОграниченияПособия.Добавить(Год(ПериодРасчетаСреднего.ДатаОкончания));
	
	Возврат ГодыПолученияПредельныхВеличинДляОграниченияПособия;
	
КонецФункции

#Область ДанныеРасчетаСреднегоЗаработкаФСС
	
Функция ДанныеРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета) Экспорт
	
	ДанныеРасчета = Новый Массив;
		
	ДобавитьСтрокиРасчетныхЛет(ДанныеРасчета, ПараметрыРасчета);
	
	ДобавитьДанныеОЗаработке(ДанныеРасчета, ПараметрыРасчета);
	    
	ДобавитьДанныеОВремени(ДанныеРасчета, ПараметрыРасчета);
	
	Если ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей Тогда
		ДобавитьДанныеСтороннихСтрахователей(ДанныеРасчета, ПараметрыРасчета);
	КонецЕсли;
		
	Возврат ДанныеРасчета;
	
КонецФункции

Процедура ДобавитьСтрокиРасчетныхЛет(ДанныеРасчета, ПараметрыРасчета)
	
	Отбор = Новый Структура;
	
	Для каждого РасчетныйГод Из ПараметрыРасчета.РасчетныеГоды Цикл
		Отбор.Очистить();
		Отбор.Вставить("РасчетныйГод", РасчетныйГод);
		ЭлементДанных = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор, Истина);
		ПредельнаяВеличина = ПараметрыРасчета.ПредельныеВеличиныПоГодам.Получить(РасчетныйГод);
		ЭлементДанных.ПредельнаяВеличина = ?(ПредельнаяВеличина = Неопределено, 0, ПредельнаяВеличина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьДанныеОЗаработке(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого Начисление Из ПараметрыРасчета.ДанныеНачислений Цикл
		
		Если Начисление.ПорядокРасчета <> ПараметрыРасчета.ПорядокРасчета Тогда 
			Продолжить;
		КонецЕсли;
		
		// Ограничение расчетного периода в соответствии с Федеральным законом от 31 декабря 2014 года № 4??-ФЗ.
		Если НеВключатьПериодВДанныеДляРасчета(Начисление.Период, ПараметрыРасчета) Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор.Очистить();
		Отбор.Вставить("РасчетныйГод", Год(Начисление.Период));
		СтрокаПоГоду = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		
		Если СтрокаПоГоду <> Неопределено Тогда
			СтрокаПоГоду.Заработок = СтрокаПоГоду.Заработок + Начисление.Сумма;
			
			Отбор.Очистить();
			Отбор.Вставить("Страхователь", Неопределено);
			СтрокаСтрахователя = ЭлементДанныхСтрахователяПоОтбору(СтрокаПоГоду.Страхователи, Отбор);
			СтрокаСтрахователя.Заработок = СтрокаСтрахователя.Заработок + Начисление.Сумма; 
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеОВремени(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого СтрокаВремени Из ПараметрыРасчета.ДанныеВремени Цикл
		
		// Ограничение расчетного периода в соответствии с Федеральным законом от 31 декабря 2014 года № 4??-ФЗ.
		Если НеВключатьПериодВДанныеДляРасчета(СтрокаВремени.Период, ПараметрыРасчета)	Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор.Очистить();
		Отбор.Вставить("РасчетныйГод", Год(СтрокаВремени.Период));
		СтрокаПоГоду = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		
		Если СтрокаПоГоду <> Неопределено Тогда
			СтрокаПоГоду.ДнейБолезниУходаЗаДетьми = СтрокаПоГоду.ДнейБолезниУходаЗаДетьми + СтрокаВремени.ДнейБолезниУходаЗаДетьми;
			
			Отбор.Очистить();
			Отбор.Вставить("Страхователь", Неопределено);
			СтрокаСтрахователя = ЭлементДанныхСтрахователяПоОтбору(СтрокаПоГоду.Страхователи, Отбор);
			СтрокаСтрахователя.ДнейБолезниУходаЗаДетьми = СтрокаСтрахователя.ДнейБолезниУходаЗаДетьми + СтрокаВремени.ДнейБолезниУходаЗаДетьми; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеСтороннихСтрахователей(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого СтороннийСтрахователь Из ПараметрыРасчета.ДанныеСтрахователей Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("РасчетныйГод", СтороннийСтрахователь.Год);
		СтрокаПоГоду = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		
		Если СтрокаПоГоду <> Неопределено Тогда			
			СтрокаПоГоду.Заработок = СтрокаПоГоду.Заработок + СтороннийСтрахователь.Сумма;
			СтрокаПоГоду.ДнейБолезниУходаЗаДетьми = СтрокаПоГоду.ДнейБолезниУходаЗаДетьми + СтороннийСтрахователь.ДнейБолезниУходаЗаДетьми;
			
			Отбор.Очистить();
			Отбор.Вставить("Страхователь", СтороннийСтрахователь.Страхователь);
			Отбор.Вставить("СтороннийСтрахователь", Истина);
			СтрокаСтрахователя = ЭлементДанныхСтрахователяПоОтбору(СтрокаПоГоду.Страхователи, Отбор);
			СтрокаСтрахователя.Заработок = СтрокаСтрахователя.Заработок + СтороннийСтрахователь.Сумма; 
			СтрокаСтрахователя.ДнейБолезниУходаЗаДетьми = СтрокаСтрахователя.ДнейБолезниУходаЗаДетьми + СтороннийСтрахователь.ДнейБолезниУходаЗаДетьми;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(Коллекция, Отбор, СоздаватьНовый = Ложь) Экспорт 
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если СоздаватьНовый И ПодходящийЭлемент = Неопределено Тогда
		
		// 4D:ERP для Беларуси, Яна, 30.08.2017 18:16:20 
		// Ошибка при вводе данных для расчета среднего заработка, №15832 
		// {
		//ПодходящийЭлемент = СтруктураДанныхДляРасчетаСреднегоЗаработка();
		ПодходящийЭлемент = СтруктураДанныхДляРасчетаСреднегоЗаработка();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		// }
		// 4D
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ЭлементДанныхСтрахователяПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураДанныхСтороннегоСтрахователяДляРасчетаСреднего();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
КонецФункции

Функция СтруктураДанныхДляРасчетаСреднегоЗаработка()
	
	// 4D:ERP для Беларуси, Яна, 30.08.2017 18:16:20 
	// Ошибка при вводе данных для расчета среднего заработка, №15832
	// Список печатных форм для печати из док-та "Больничный лист", № 17039
	// {
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Период", 						ПустоеЧисло);
	СтруктураДанных.Вставить("РасчетныйГод", 				ПустоеЧисло);
	СтруктураДанных.Вставить("Заработок", 					ПустоеЧисло);
	СтруктураДанных.Вставить("КалендарныхДней", 			ПустоеЧисло);
	СтруктураДанных.Вставить("ДнейБолезниУходаЗаДетьми", 	ПустоеЧисло);
	СтруктураДанных.Вставить("ПредельнаяВеличина", 			ПустоеЧисло);
	СтруктураДанных.Вставить("Страхователи", 				Новый Массив);
	
	Возврат СтруктураДанных;
	// }
	// 4D
	
КонецФункции

Функция СтруктураДанныхСтороннегоСтрахователяДляРасчетаСреднего()
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Страхователь", 				Неопределено);
	СтруктураДанных.Вставить("СтороннийСтрахователь", 		Ложь);
	СтруктураДанных.Вставить("Заработок", 					ПустоеЧисло);
	СтруктураДанных.Вставить("ДнейБолезниУходаЗаДетьми", 	ПустоеЧисло);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция НеВключатьПериодВДанныеДляРасчета(Период, ПараметрыРасчета) 

	Возврат	ПараметрыРасчета.НеполныйРасчетныйПериод И Период < '20140301'

КонецФункции 

#КонецОбласти

#Область АгрегатыДанныхРасчетаСреднегоЗаработка

Функция СреднедневнойЗаработокФСС(Заработок, КоличествоДней) Экспорт
	Возврат ?(КоличествоДней = 0, 0, Окр(Заработок / КоличествоДней,2));
КонецФункции

Функция УчитываемыйЗаработокФСС(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину И Не ПараметрыРасчета.НеполныйРасчетныйПериод Тогда
		ВсегоЗаработка = ЗаработокСУчетомОграниченияФСС(ДанныеРасчетаСреднегоЗаработка);
	Иначе
		ВсегоЗаработка = ЗаработокБезОграниченияФСС(ДанныеРасчетаСреднегоЗаработка);
	КонецЕсли;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция УчитываемыйЗаработокФССПоГоду(ПараметрыРасчета, СтрокаДанныхРасчетаСреднегоПоГоду) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину И Не ПараметрыРасчета.НеполныйРасчетныйПериод Тогда
		ВсегоЗаработка = Мин(СтрокаДанныхРасчетаСреднегоПоГоду.ПредельнаяВеличина, СтрокаДанныхРасчетаСреднегоПоГоду.Заработок);
	Иначе
		ВсегоЗаработка = СтрокаДанныхРасчетаСреднегоПоГоду.Заработок;
	КонецЕсли;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокСУчетомОграниченияФСС(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
		ВсегоЗаработка = ВсегоЗаработка + Мин(Элемент.ПредельнаяВеличина, Элемент.Заработок);
	КонецЦикла;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокБезОграниченияФСС(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
			ВсегоЗаработка = ВсегоЗаработка + Элемент.Заработок;
	КонецЦикла;

	Возврат ВсегоЗаработка

КонецФункции

// 4D:ERP для Беларуси, Петр, 02.03.2018 11:33:40 
// Доработать печатные формы док-та "Больничный лист", № 17952
// {
Функция МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	СуммаОграничений = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка, "ПредельнаяВеличина");
	
	МаксимальныйСреднедневнойЗаработок = СуммаОграничений / КоличествоКалендарныхДнейВДвухГодахФСС();
	
	Возврат Окр(МаксимальныйСреднедневнойЗаработок, 2);
	
КонецФункции
// }
// 4D

Функция МаксимальныйСреднедневнойЗаработокДляНеполногоРасчетногоПериода(ДатаНачалаСобытия) Экспорт
	
	МаксимальныйСреднедневнойЗаработок = 0;
	Если ДатаНачалаСобытия < '20160101'  Тогда
		МаксимальныйСреднедневнойЗаработок = 1632.88;
	Иначе
		МаксимальныйСреднедневнойЗаработок = (624000 + 670000) / 730;
	КонецЕсли;
	
	Возврат Окр(МаксимальныйСреднедневнойЗаработок, 2);
	
КонецФункции

Функция МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета) Экспорт
	
	Возврат Окр(ПараметрыРасчета.МинимальныйРазмерОплатыТрудаРФ * ДоляНеполногоВремени(ПараметрыРасчета) / СреднееКоличествоДнейВМесяцеФСС(), 2);

КонецФункции

Функция ДоляНеполногоВремени(ПараметрыРасчета) Экспорт
	
	Возврат ?(ПараметрыРасчета.ДоляНеполногоВремени = 0, 1, Мин(ПараметрыРасчета.ДоляНеполногоВремени, 1));

КонецФункции

Функция УчитываемыхДнейВКалендарныхГодахФСС(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	Если ПараметрыРасчета.НеполныйРасчетныйПериод Тогда
		Если ПараметрыРасчета.ДатаНачалаСобытия < '20160101'  Тогда
			УчитываемыхДнейВКалендарныхГодах = 289;
		Иначе
			УчитываемыхДнейВКалендарныхГодах = 654;
		КонецЕсли;
		Если ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми Тогда
			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
				УчитываемыхДнейВКалендарныхГодах = УчитываемыхДнейВКалендарныхГодах - Элемент.ДнейБолезниУходаЗаДетьми;
			КонецЦикла;	
			УчитываемыхДнейВКалендарныхГодах = Макс(УчитываемыхДнейВКалендарныхГодах, 0);
		КонецЕсли;
	ИначеЕсли ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми
		И ПараметрыРасчета.ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаОтдельногоРасчетаПособийПоМатеринству() Тогда
		УчитываемыхДнейВКалендарныхГодах	= КоличествоКалендарныхДнейПособияПоМатеринству(ДанныеРасчетаСреднегоЗаработка);
	Иначе      
		УчитываемыхДнейВКалендарныхГодах	= КоличествоКалендарныхДнейВДвухГодахФСС();
	КонецЕсли;
	
	Возврат УчитываемыхДнейВКалендарныхГодах;

КонецФункции

Функция КоличествоКалендарныхДнейПособияПоМатеринству(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	КалендарныхДней = 0;
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
		КалендарныхДней = КалендарныхДней + ДеньГода(Дата(Элемент.РасчетныйГод, 12, 31)) - Элемент.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;	
	
	Возврат КалендарныхДней
	
КонецФункции

Функция КоличествоКалендарныхДнейВДвухГодахФСС() Экспорт
	
	Возврат 730;
	
КонецФункции

Функция СреднееКоличествоДнейВМесяцеФСС() Экспорт
	Возврат 730 / 24;
КонецФункции

#КонецОбласти

// Функция выполняет упаковку данных среднего заработка ФСС формы документа для передачи в форму редактирования.
//
Функция ПараметрыРедактированияСреднегоЗаработкаФССПоДокументу() Экспорт
	
	ПараметрыРедактирования = Новый Структура(
		"ДокументСсылка,
		|Сотрудник,
		|Организация,
		|ДатаНачалаСобытия,
		|НачалоПериодаРасчета,
		|ОкончаниеПериодаРасчета,
		|ГодыПериодаРасчета,
		|ФиксПериодРасчета,
		|ПорядокРасчета,
		|ИспользоватьДниБолезниУходаЗаДетьми,
		|УчитыватьЗаработокПредыдущихСтрахователей,
		|ТолькоПросмотр,
		|ДанныеОНачислениях,
		|ДанныеОВремени,
		|ДанныеСтрахователей, 
		|ПериодыОтсутствий, 
		|ПараметрыРасчета");
	
	ПараметрыРедактирования.ФиксПериодРасчета = Ложь;
	ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011");
	ПараметрыРедактирования.УчитыватьЗаработокПредыдущихСтрахователей = Ложь;
	ПараметрыРедактирования.ТолькоПросмотр = Ложь;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

// 4D:ERP для Беларуси, Яна, 30.08.2017 17:07:20 
// Ошибка при вводе данных для расчета среднего заработка, № 15832 
// {
// Функция выполняет упаковку данных среднего заработка ФСС формы документа для передачи в форму редактирования.
//
Функция ПараметрыРедактированияСреднегоЗаработкаФСЗНПоДокументу() Экспорт
	
	ПараметрыРедактирования = Новый Структура(
	"ДокументСсылка,
	|Сотрудник,
	|Организация,
	|ДатаНачалаСобытия,
	|НачалоПериодаРасчета,
	|ОкончаниеПериодаРасчета,
	|ПериодыРасчета,
	|ФиксПериодРасчета,
	|ПорядокРасчета,
	|ИспользоватьДниБолезниУходаЗаДетьми,
	|ПереноситьДанныеВДругойУчетСреднегоЗаработка,
	|УчитыватьЗаработокПредыдущихСтрахователей,
	|ТолькоПросмотр,
	|ДанныеОНачислениях,
	|ДанныеОВремени,
	|ДанныеСтрахователей,
	|ПредельныеВеличины,
	|РасчетПремии,
	|ПараметрыРасчета,
	|ПериодыОтсутствий,
	|ДокументВладелецДанныеАдрес");
	
	ПараметрыРедактирования.ФиксПериодРасчета = Ложь;
	ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация");
	ПараметрыРедактирования.ПереноситьДанныеВДругойУчетСреднегоЗаработка = Ложь;
	ПараметрыРедактирования.УчитыватьЗаработокПредыдущихСтрахователей = Ложь;
	ПараметрыРедактирования.ТолькоПросмотр = Ложь;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции
// }
// 4D

// Функция конструирует структуру, описывающую данные о начислениях 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОНачисленияхСреднегоЗаработкаФСС() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПоляОписания.Вставить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ПоляОписания.Вставить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции
	   
// Функция конструирует структуру, описывающую данные периодах отсутствия.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиПериодовДнейБолезниУходаЗаДетьми() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Начало", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Окончание", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Дни", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ВидБолезниУходаЗаДетьми", Новый ОписаниеТипов("Строка"));
	ПоляОписания.Вставить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция СтруктураПримененияПорядкаРасчета(ПорядокРасчета, НачалоПрименения) Экспорт
	
	СтруктураПрименения = Новый Структура;
	СтруктураПрименения.Вставить("ПорядокРасчета", ПорядокРасчета);
	СтруктураПрименения.Вставить("НачалоПрименения", НачалоПрименения);
	
	Возврат СтруктураПрименения;
	
КонецФункции

Функция ЭлементКоллекцииПоОтбору(Коллекция, Отбор) Экспорт
	
	ПодходящийЭлемент = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		ЭтоПодходящийЭлемент = Истина;
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементОтбора.Значение <> Неопределено
				И Элемент[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение  Тогда
				ЭтоПодходящийЭлемент = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПодходящийЭлемент Тогда
			ПодходящийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Процедура ЗаполнитьЭлементКоллекцииПоОтбору(Элемент, Отбор) Экспорт
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Значение <> Неопределено Тогда
			Элемент[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПравилаПримененияПорядкаРасчета) Экспорт
	
	// Подбирается порядок расчета, 
	// дата начала применения которого "ближе" всего к заданному периоду.
	
	Для Каждого ПрименениеПорядкаРасчета Из ПравилаПримененияПорядкаРасчета Цикл
		Если Период >= ПрименениеПорядкаРасчета.НачалоПрименения Тогда
			ПорядокРасчета = ПрименениеПорядкаРасчета.ПорядокРасчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// 4D:ERP для Беларуси, Яна, 09.06.2017 17:32:47 
// Документ "Отпуск по уходу за ребенком", №14900

// {
#Область ДанныеРасчетаСреднегоЗаработкаФСЗН

Функция СреднийЗаработокФСЗН(ПараметрыРасчета)
	
	СреднедневнойЗаработок = 0;
	
	ПрименятьПредельнуюВеличину = ПараметрыРасчета.ПрименятьПредельнуюВеличину;
		
	ДанныеРасчетаСреднегоЗаработка = ДанныеРасчетаСреднегоЗаработкаФСЗН(ПараметрыРасчета);
	
	Заработок		= УчитываемыйЗаработокФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	КоличествоДней 	= УчитываемыхДнейФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка);
	
	СреднедневнойЗаработок = СреднедневнойЗаработокФСС(Заработок, КоличествоДней);
			
	Возврат СреднедневнойЗаработок;
	
КонецФункции

Функция ДанныеРасчетаСреднегоЗаработкаФСЗН(ПараметрыРасчета) Экспорт
	
	ДанныеРасчета = Новый Массив;
		
	ДобавитьСтрокиРасчетныхПериодовФСЗН(ДанныеРасчета, ПараметрыРасчета);
	
	ДобавитьДанныеОЗаработкеФСЗН(ДанныеРасчета, ПараметрыРасчета);
	    
	ДобавитьДанныеОВремениФСЗН(ДанныеРасчета, ПараметрыРасчета);
	
	//Если ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей Тогда
	//	ДобавитьДанныеСтороннихСтрахователей(ДанныеРасчета, ПараметрыРасчета);
	//КонецЕсли;
		
	Возврат ДанныеРасчета;
	
КонецФункции

Процедура ДобавитьСтрокиРасчетныхПериодовФСЗН(ДанныеРасчета, ПараметрыРасчета)
	
	Отбор = Новый Структура;
	
	Для каждого Период Из ПараметрыРасчета.ПериодыРасчета Цикл
		Отбор.Очистить();
		Отбор.Вставить("Период", Период);
		ЭлементДанных = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор, Истина);
		Если ПараметрыРасчета.ПредельныеВеличины <> Неопределено Тогда 
			ПредельнаяВеличина = ПараметрыРасчета.ПредельныеВеличины.Получить(Период);
		Иначе
			ПредельнаяВеличина = Неопределено;
		КонецЕсли;
		ЭлементДанных.ПредельнаяВеличина = ?(ПредельнаяВеличина = Неопределено, 0, ПредельнаяВеличина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьДанныеОЗаработкеФСЗН(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого Начисление Из ПараметрыРасчета.ДанныеНачислений Цикл
		
		Если Начисление.ПорядокРасчета <> ПараметрыРасчета.ПорядокРасчета Тогда 
			Продолжить;
		КонецЕсли; 	
			
		Отбор.Очистить();
		Отбор.Вставить("Период", Начисление.Период);
		СтрокаЗаработка = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		СтрокаВремени = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ПараметрыРасчета.ДанныеВремени, Отбор); 
		
		Если СтрокаЗаработка <> Неопределено Тогда
			Сумма =  Начисление.Сумма;
			Если Начисление.СоставнаяЧасть = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеФСС.ПремияМесячная") Тогда
				Если СтрокаВремени <> Неопределено Тогда
					Если ПараметрыРасчета.РасчетПремии = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремени.ПоЧасам") Тогда  
						Если СтрокаВремени.НормаЧасов <> 0 И СтрокаВремени.ОтработаноЧасов <> 0 Тогда
							Сумма = Сумма*СтрокаВремени.ОтработаноЧасов/СтрокаВремени.НормаЧасов;
	                  	КонецЕсли;
					Иначе
						Если СтрокаВремени.НормаДней <> 0 И СтрокаВремени.ОтработаноДней <> 0 Тогда
							Сумма = Сумма*СтрокаВремени.ОтработаноДней/СтрокаВремени.НормаДней;
	                  	КонецЕсли;  						
					КонецЕсли;    
				КонецЕсли;
			КонецЕсли;
			СтрокаЗаработка.Заработок = СтрокаЗаработка.Заработок + Сумма;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеОВремениФСЗН(ДанныеРасчета, ПараметрыРасчета)
	Отбор = Новый Структура;
	
	Для каждого СтрокаВремени Из ПараметрыРасчета.ДанныеВремени Цикл 	
		
		Отбор.Очистить();
		Отбор.Вставить("Период", СтрокаВремени.Период);
		Строка = ЭлементДанныхДляРасчетаСреднегоЗаработкаПоОтбору(ДанныеРасчета, Отбор);
		
		Если Строка <> Неопределено Тогда
			Строка.КалендарныхДней = Строка.КалендарныхДней + СтрокаВремени.ОтработаноДнейКалендарных;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСЗН() Экспорт
	
	Параметры = Новый Структура(
		"ДатаНачалаСобытия, 
		|ПериодРасчетаСреднегоЗаработкаНачало, 
		|ПериодРасчетаСреднегоЗаработкаОкончание, 
		|ПериодыРасчета, 
		|НеполныйРасчетныйПериод, 
		|ДанныеНачислений, 
		|ДанныеВремени, 
		|ДанныеСтрахователей, 
		|УчитыватьЗаработокПредыдущихСтрахователей, 
		|ИспользоватьДниБолезниУходаЗаДетьми, 
		|ПрименятьПредельнуюВеличину, 
		|ПредельныеВеличины,
		|ПорядокРасчета,
		|МинимальныйРазмерОплатыТрудаРФ, 
		|РасчетПремии,
		|Сотрудник");
	
	
	Параметры.ПериодыРасчета 						= Новый Массив;
	Параметры.НеполныйРасчетныйПериод			 	= Ложь;
	Параметры.ПредельныеВеличины 					= Новый Соответствие;
	Параметры.ИспользоватьДниБолезниУходаЗаДетьми 	= Ложь;
	Параметры.ПрименятьПредельнуюВеличину 			= Истина;
	
	Возврат Параметры;
	
КонецФункции


Функция УчитываемыйЗаработокФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину Тогда
		ВсегоЗаработка = ЗаработокСУчетомОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка);
	Иначе
		ВсегоЗаработка = ЗаработокБезОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка);
	КонецЕсли;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокСУчетомОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
		ВсегоЗаработка = ВсегоЗаработка + Мин(Элемент.ПредельнаяВеличина, Элемент.Заработок);
	КонецЦикла;
	
	Возврат ВсегоЗаработка
	
КонецФункции

Функция ЗаработокБезОграниченияФСЗН(ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоЗаработка = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
			ВсегоЗаработка = ВсегоЗаработка + Элемент.Заработок;
	КонецЦикла;

	Возврат ВсегоЗаработка

КонецФункции

Функция УчитываемыхДнейФСЗН(ПараметрыРасчета, ДанныеРасчетаСреднегоЗаработка) Экспорт
	
	ВсегоДней = 0;	
	
	Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка Цикл
			ВсегоДней = ВсегоДней + Элемент.КалендарныхДней;
	КонецЦикла;

	Возврат ВсегоДней

КонецФункции

#КонецОбласти

// }
// 4D

#КонецОбласти
