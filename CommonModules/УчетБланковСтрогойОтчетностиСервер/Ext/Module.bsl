////////////////////////////////////////////////////////////////////////////////
// Подсистема "БланкиСтрогойОтчетности".
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбщиеМеханизмыБСО

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	ДобавитьГруппуБСО(Форма);
	ДобавитьРеквизитыИспользованныеБСО(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область НомерСерияИсходящегоДокумента

Процедура ЗаписатьДанныеБСОПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТранспортнаяНакладная") Тогда
		Если Источник.ДокументыОснования.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДокументОснование = Неопределено;
		Для каждого Стр Из Источник.ДокументыОснования Цикл
			ТекущийОснование = Стр.ДокументОснование;
			
			МетаданныеДокумента = ТекущийОснование.Метаданные();
			ЕстьСерияИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("СерияИсходящегоДокумента") <> Неопределено;
			ЕстьНомерИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("НомерИсходящегоДокумента") <> Неопределено;
			ЕстьТипБСО = МетаданныеДокумента.Реквизиты.Найти("ТипБСО") <> Неопределено;
			
			Если ЕстьСерияИсходящегоДокумента И ЕстьНомерИсходящегоДокумента И ЕстьТипБСО Тогда
				Если ТекущийОснование.Проведен И ЗначениеЗаполнено(ТекущийОснование.НомерИсходящегоДокумента)
					И ЗначениеЗаполнено(ТекущийОснование.СерияИсходящегоДокумента) И ЗначениеЗаполнено(ТекущийОснование.ТипБСО) Тогда
					
					ДокументОснование = ТекущийОснование;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОснование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МетаданныеДокумента = ДокументОснование.Метаданные();
		ЕстьСерияИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("СерияИсходящегоДокумента") <> Неопределено;
		ЕстьНомерИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("НомерИсходящегоДокумента") <> Неопределено;
		ЕстьТипБСО = МетаданныеДокумента.Реквизиты.Найти("ТипБСО") <> Неопределено;
		
		Если ЕстьСерияИсходящегоДокумента И ЕстьНомерИсходящегоДокумента И ЕстьТипБСО Тогда
			Если ПустаяСтрока(Источник.СерияИсходящегоДокумента) Или ПустаяСтрока(Источник.НомерИсходящегоДокумента) Или ПустаяСтрока(Источник.ТипБСО) Тогда
				Источник.СерияИсходящегоДокумента = ВРег(ДокументОснование.СерияИсходящегоДокумента);
				Источник.НомерИсходящегоДокумента = ДокументОснование.НомерИсходящегоДокумента;
				Источник.ТипБСО = ДокументОснование.ТипБСО;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.НомерИсходящегоДокумента КАК НомерИсходящегоДокумента,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.СерияИсходящегоДокумента КАК СерияИсходящегоДокумента,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.ТипБСО КАК ТипБСО
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
		|	И ТранспортнаяНакладнаяДокументыОснования.ДокументОснование.Проведен
		|	И ТранспортнаяНакладнаяДокументыОснования.Ссылка.Проведен";
		Запрос.УстановитьПараметр("ДокументОснование", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.НомерИсходящегоДокумента) И ЗначениеЗаполнено(Выборка.СерияИсходящегоДокумента) И ЗначениеЗаполнено(Выборка.ТипБСО) Тогда
				Если ПустаяСтрока(Источник.СерияИсходящегоДокумента) Или ПустаяСтрока(Источник.НомерИсходящегоДокумента) Или Не ЗначениеЗаполнено(Источник.ТипБСО) Тогда
					Источник.СерияИсходящегоДокумента = Выборка.СерияИсходящегоДокумента;
					Источник.НомерИсходящегоДокумента = Выборка.НомерИсходящегоДокумента;
					Источник.ТипБСО = Выборка.ТипБСО;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеБСОПриПроведении(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТранспортнаяНакладная") Тогда
		Если Источник.ДокументыОснования.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДокументОснование = Неопределено;
		Для каждого Стр Из Источник.ДокументыОснования Цикл
			ТекущийОснование = Стр.ДокументОснование;
			
			МетаданныеДокумента = ТекущийОснование.Метаданные();
			ЕстьСерияИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("СерияИсходящегоДокумента") <> Неопределено;
			ЕстьНомерИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("НомерИсходящегоДокумента") <> Неопределено;
			ЕстьТипБСО = МетаданныеДокумента.Реквизиты.Найти("ТипБСО") <> Неопределено;
			
			Если ЕстьСерияИсходящегоДокумента И ЕстьНомерИсходящегоДокумента И ЕстьТипБСО Тогда
				Если ТекущийОснование.Проведен Тогда
					ДокументОснование = ТекущийОснование;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОснование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СокрЛП(ДокументОснование.НомерИсходящегоДокумента) <> СокрЛП(Источник.НомерИсходящегоДокумента)
			Или СокрЛП(ДокументОснование.СерияИсходящегоДокумента) <> СокрЛП(Источник.СерияИсходящегоДокумента)
			Или ДокументОснование.ТипБСО <> Источник.ТипБСО Тогда
			
			ДокОбъект = ДокументОснование.ПолучитьОбъект();
			ДокОбъект.НомерИсходящегоДокумента = СокрЛП(Источник.НомерИсходящегоДокумента);
			ДокОбъект.СерияИсходящегоДокумента = СокрЛП(Источник.СерияИсходящегоДокумента);
			ДокОбъект.ТипБСО = Источник.ТипБСО;
			
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.НомерИсходящегоДокумента КАК НомерИсходящегоДокумента,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.СерияИсходящегоДокумента КАК СерияИсходящегоДокумента,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.ТипБСО КАК ТипБСО,
		|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТранспортнаяНакладнаяСсылка
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
		|	И ТранспортнаяНакладнаяДокументыОснования.ДокументОснование.Проведен";
		Запрос.УстановитьПараметр("ДокументОснование", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если СокрЛП(Выборка.НомерИсходящегоДокумента) <> СокрЛП(Источник.НомерИсходящегоДокумента)
				Или СокрЛП(Выборка.СерияИсходящегоДокумента) <> СокрЛП(Источник.СерияИсходящегоДокумента)
				Или Выборка.ТипБСО <> Источник.ТипБСО Тогда
				
				ДокОбъект = Выборка.ТранспортнаяНакладнаяСсылка.ПолучитьОбъект();
				ДокОбъект.НомерИсходящегоДокумента = СокрЛП(Источник.НомерИсходящегоДокумента);
				ДокОбъект.СерияИсходящегоДокумента = СокрЛП(Источник.СерияИсходящегоДокумента);
				ДокОбъект.ТипБСО = Источник.ТипБСО;
				
				Если ДокОбъект.Проведен Тогда
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьСписокТранспортныхНакладнах(ИсточникСсылка) Экспорт
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТранспортнаяНакладнаяСсылка
	|ИЗ
	|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|ГДЕ
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
	|	И ТранспортнаяНакладнаяДокументыОснования.ДокументОснование.Проведен";
	Запрос.УстановитьПараметр("ДокументОснование", ИсточникСсылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРезультат.Добавить(Выборка.ТранспортнаяНакладнаяСсылка);
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

Функция ПолучитьГруппуНомерСерияБСО(Элементы, Родитель)
	
	ГруппаИнформацияБСО = Элементы.Добавить("ИнформацияБСО", Тип("ГруппаФормы"), Родитель);
	ГруппаИнформацияБСО.Заголовок = "Информация БСО";
	ГруппаИнформацияБСО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИнформацияБСО.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаИнформацияБСО.РастягиватьПоГоризонтали = Истина;
	ГруппаИнформацияБСО.ОтображатьЗаголовок = Ложь;
	ГруппаИнформацияБСО.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ГруппаНомерСерияБСО = Элементы.Добавить("НомерСерияИсходящегоДокументаБСО", Тип("ГруппаФормы"), ГруппаИнформацияБСО);
	ГруппаНомерСерияБСО.Заголовок = "Номер, серия исходящего документа";
	ГруппаНомерСерияБСО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНомерСерияБСО.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаНомерСерияБСО.РастягиватьПоГоризонтали = Истина;
	ГруппаНомерСерияБСО.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНомерСерияБСО.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаНомерСерияБСО;
	
КонецФункции

Процедура ПриПроведенииИспользованныеБСО(Источник, Отказ, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Источник.Метаданные();
	ЕстьТЧИспорченныеНомераБСО = МетаданныеДокумента.ТабличныеЧасти.Найти("ИспорченныеНомераБСО") <> Неопределено;
	ЕстьСерияИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("СерияИсходящегоДокумента") <> Неопределено;
	ЕстьНомерИсходящегоДокумента = МетаданныеДокумента.Реквизиты.Найти("НомерИсходящегоДокумента") <> Неопределено;
	ЕстьТипБСО = МетаданныеДокумента.Реквизиты.Найти("ТипБСО") <> Неопределено;
	
	Если (ЕстьСерияИсходящегоДокумента И ЕстьНомерИсходящегоДокумента И ЕстьТипБСО) Или (ЕстьТЧИспорченныеНомераБСО) Тогда
		НаборЗаписей = РегистрыСведений.ИспользованныеБСО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
		ТЗИспользованныеБСО = НаборЗаписей.ВыгрузитьКолонки();
		
		Если ЕстьСерияИсходящегоДокумента И ЕстьНомерИсходящегоДокумента И ЕстьТипБСО Тогда
			Если ЗначениеЗаполнено(Источник.СерияИсходящегоДокумента) И ЗначениеЗаполнено(Источник.НомерИсходящегоДокумента) И ЗначениеЗаполнено(Источник.ТипБСО) Тогда
				Серия = СокрЛП(Источник.СерияИсходящегоДокумента);
				Номер = Источник.НомерИсходящегоДокумента;
				ТипБСО = Источник.ТипБСО;
				
				Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(Число(Номер), 10);
				
				НоваяЗапись = ТЗИспользованныеБСО.Добавить();
				НоваяЗапись.Серия = Серия;
				НоваяЗапись.Номер = Номер;
				НоваяЗапись.Тип = ТипБСО;
				НоваяЗапись.ДатаЗаписи = Источник.Дата;
				НоваяЗапись.ДокументДвижения = Источник.Ссылка;
				НоваяЗапись.ТипСписания = Перечисления.ВидыСписанияБСО.Использованы;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьТЧИспорченныеНомераБСО И Источник.ИспорченныеНомераБСО.Количество() > 0 Тогда
			Для каждого Стр Из Источник.ИспорченныеНомераБСО Цикл
				Серия = СокрЛП(Стр.Серия);
				Номер = Стр.Номер;
				ТипБСО = Стр.ТипБланка;
				
				Если ЗначениеЗаполнено(Серия) И ЗначениеЗаполнено(Номер) И ЗначениеЗаполнено(ТипБСО) Тогда
					Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(Число(Номер), 10);
					
					НоваяЗапись = ТЗИспользованныеБСО.Добавить();
					НоваяЗапись.Серия = Серия;
					НоваяЗапись.Номер = Номер;
					НоваяЗапись.Тип = ТипБСО;
					НоваяЗапись.ДатаЗаписи = Источник.Дата;
					НоваяЗапись.ДокументДвижения = Источник.Ссылка;
					НоваяЗапись.ТипСписания = Перечисления.ВидыСписанияБСО.Испорчены;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТЗИспользованныеБСО.Количество() > 0 Тогда
			ТЗИспользованныеБСО.Свернуть("Серия, Номер, Тип, ДокументДвижения, ДатаЗаписи, ТипСписания");
			НаборЗаписей.Загрузить(ТЗИспользованныеБСО);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьТЧИспорченныеНомераБСО(Форма, ГруппаНомерСерияБСО, НаименованиеТЧ = "ИспорченныеНомераБСО")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Команды = Форма.Команды;
	
	ГруппаБСОВложенная = Элементы.Добавить("ГруппаБСОВложенная", Тип("ГруппаФормы"), Элементы.ИнформацияБСО);
	ГруппаБСОВложенная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБСОВложенная.ОтображатьЗаголовок = Ложь;
	ГруппаБСОВложенная.Заголовок = "Группа БСО (вложенная)";
	ГруппаБСОВложенная.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
	ГруппаБСОВложенная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Испортить = Команды.Добавить("Испортить");
	Испортить.Действие = "Испортить";
	КнопкаИспортить = Элементы.Добавить("Испортить", Тип("КнопкаФормы"), ГруппаНомерСерияБСО);
	КнопкаИспортить.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаИспортить.Картинка = БиблиотекаКартинок.Удалить;
	КнопкаИспортить.Отображение = ОтображениеКнопки.Картинка;
	КнопкаИспортить.Заголовок = "Испортить";
	КнопкаИспортить.ИмяКоманды = "Испортить";
	КнопкаИспортить.РасширеннаяПодсказка.Заголовок = "Испортить бланк строгой отчетности";
	КнопкаИспортить.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	ВидимостьТЧИспорченныеНомераБСО = Элементы.Вставить("ВидимостьТЧИспорченныеНомераБСО", Тип("ПолеФормы"), ГруппаНомерСерияБСО);
	ВидимостьТЧИспорченныеНомераБСО.ПутьКДанным = "Объект.ВидимостьТЧИспорченныеНомераБСО";
	ВидимостьТЧИспорченныеНомераБСО.Вид = ВидПоляФормы.ПолеФлажка;
	ВидимостьТЧИспорченныеНомераБСО.Заголовок = "Показать испорченные номера";
	ВидимостьТЧИспорченныеНомераБСО.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ВидимостьТЧИспорченныеНомераБСО.УстановитьДействие("ПриИзменении", "Подключаемый_ВидимостьТЧИспорченныеНомераБСОПриИзменении");
	
	ГруппаНомераБСО = Элементы.Добавить("ГруппаНомераБСО", Тип("ГруппаФормы"), ГруппаБСОВложенная);
	ГруппаНомераБСО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНомераБСО.ОтображатьЗаголовок = Ложь;
	ГруппаНомераБСО.Заголовок = "Группа Номера БСО";
	ГруппаНомераБСО.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
	ГруппаНомераБСО.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НомераБСО = Элементы.Добавить(НаименованиеТЧ, Тип("ТаблицаФормы"), ГруппаНомераБСО);
	НомераБСО.ПутьКДанным = "Объект." + НаименованиеТЧ;
	НомераБСО.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НомераБСО.Видимость = Объект.ВидимостьТЧИспорченныеНомераБСО;
	
	НоваяКолонка = Элементы.Добавить(НаименованиеТЧ + "Серия", Тип("ПолеФормы"), НомераБСО);
	НоваяКолонка.ПутьКДанным = "Объект." + НаименованиеТЧ + ".Серия";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Заголовок = "Серия";
	НоваяКолонка.КнопкаОчистки = Истина;
	НоваяКолонка.Маска = "!!";
	НоваяКолонка.РасширеннаяПодсказка.Заголовок = "Серия бланка строгой отчетности";
	НоваяКолонка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	НоваяКолонка = Элементы.Добавить(НаименованиеТЧ + "Номер", Тип("ПолеФормы"), НомераБСО);
	НоваяКолонка.ПутьКДанным = "Объект." + НаименованиеТЧ + ".Номер";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Заголовок = "Номер";
	НоваяКолонка.КнопкаОчистки = Истина;
	НоваяКолонка.Маска = "9999999999";
	НоваяКолонка.РасширеннаяПодсказка.Заголовок = "Номер бланка строгой отчетности";
	НоваяКолонка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	НоваяКолонка = Элементы.Добавить(НаименованиеТЧ + "ТипБланка", Тип("ПолеФормы"), НомераБСО);
	НоваяКолонка.ПутьКДанным = "Объект." + НаименованиеТЧ + ".ТипБланка";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Заголовок = "Тип";
	НоваяКолонка.КнопкаОчистки = Истина;
	НоваяКолонка.РасширеннаяПодсказка.Заголовок = "Тип бланка строгой отчетности";
	НоваяКолонка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
КонецПроцедуры

Функция ПередЗаписьюРеквизитТипБСО(ДатаДокумента, Серия, Номер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Серия) И НЕ ЗначениеЗаполнено(Номер) Тогда
		Возврат Справочники.БланкиСтрогойОтчетности.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БланкиСтрогойОтчетностиОстатки.Тип
	|ИЗ
	|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
	|			&ДатаДокумента,
	|			Серия = &Серия
	|				И Номер = &Номер) КАК БланкиСтрогойОтчетностиОстатки
	|ГДЕ
	|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	 	Возврат Выборка.Тип;
	КонецЦикла;
	
	Возврат Справочники.БланкиСтрогойОтчетности.ПустаяСсылка();
	
КонецФункции

Функция БСОДокументыИспользования(Серия = Неопределено, Номер = Неопределено, Тип = Неопределено) Экспорт
	
	Если Не (Серия <> Неопределено И Номер <> Неопределено И Тип <> Неопределено) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользованныеБСО.ДокументДвижения КАК ДокументДвижения,
	|	ПРЕДСТАВЛЕНИЕ(ИспользованныеБСО.ДокументДвижения) КАК ДокументПредставление
	|ИЗ
	|	РегистрСведений.ИспользованныеБСО КАК ИспользованныеБСО
	|ГДЕ
	|	ИспользованныеБСО.Серия = &Серия
	|	И ИспользованныеБСО.Номер = &Номер
	|	И ИспользованныеБСО.Тип = &Тип";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	КоличествоДок = Выборка.Количество();
	ДокументДвижения = "";
	
	Пока Выборка.Следующий() Цикл
		Если КоличествоДок = 1 Тогда
			ДокументДвижения = Выборка.ДокументДвижения;
		Иначе
			ДокументДвижения = ДокументДвижения + Выборка.ДокументПредставление + "; ";
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоДок > 1 Тогда
		ДокументДвижения = Лев(ДокументДвижения, СтрДлина(ДокументДвижения) - 2);
	КонецЕсли;
	
	Возврат ДокументДвижения;
	
КонецФункции

Процедура ДобавитьРеквизитыИспользованныеБСО(Форма) Экспорт
	
	Имя = Форма.ИмяФормы;
	Элементы = Форма.Элементы;
	
	Если Имя = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.СтраницаОсновное);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ПередачаДавальцу.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ВозвратСырьяДавальцу.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	ИначеЕсли Имя = "Документ.ПередачаСырьяПереработчику.Форма.ФормаДокумента" Тогда
		ГруппаНомерСерияБСО = ПолучитьГруппуНомерСерияБСО(Элементы, Элементы.ГруппаДополнительно);
		ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДобавлениеРеквизитовБСО(Форма, ГруппаНомерСерияБСО)
	
	Элементы = Форма.Элементы;
	
	НовыйРеквизит = Элементы.Добавить("СерияИсходящегоДокумента", Тип("ПолеФормы"), ГруппаНомерСерияБСО);
	НовыйРеквизит.Заголовок = "Серия";
	НовыйРеквизит.ПутьКДанным = "Объект.СерияИсходящегоДокумента";
	НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
	НовыйРеквизит.Маска = "!!";
	НовыйРеквизит.РасширеннаяПодсказка.Заголовок = "Серия бланка строгой отчетности";
	НовыйРеквизит.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	НовыйРеквизит = Элементы.Добавить("НомерИсходящегоДокумента", Тип("ПолеФормы"), ГруппаНомерСерияБСО);
	НовыйРеквизит.Заголовок = "Номер";
	НовыйРеквизит.ПутьКДанным = "Объект.НомерИсходящегоДокумента";
	НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
	НовыйРеквизит.Маска = "9999999999";
	НовыйРеквизит.РасширеннаяПодсказка.Заголовок = "Номер бланка строгой отчетности";
	НовыйРеквизит.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	НовыйРеквизит = Элементы.Добавить("ТипБСОИсходящегоДокумента", Тип("ПолеФормы"), ГруппаНомерСерияБСО);
	НовыйРеквизит.Заголовок = "Тип";
	НовыйРеквизит.ПутьКДанным = "Объект.ТипБСО";
	НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
	НовыйРеквизит.РастягиватьПоГоризонтали = Ложь;
	НовыйРеквизит.РасширеннаяПодсказка.Заголовок = "Тип бланка строгой отчетности";
	НовыйРеквизит.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	ДобавитьТЧИспорченныеНомераБСО(Форма, ГруппаНомерСерияБСО);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыКнопкиВДокументахБСО

Функция ПолучитьГруппуБСО(Элементы, Родитель)
	
	ГруппаБСО = Элементы.Найти("ГруппаБСО");
		
	Если ГруппаБСО = Неопределено Тогда
		ГруппаБСО = Элементы.Добавить("ГруппаБСО", Тип("ГруппаФормы"), Родитель);
		ГруппаБСО.Заголовок = "Бланки строгой отчетности";
		ГруппаБСО.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаБСО.ОтображатьВШапке = Истина;
	КонецЕсли;	
	
	Возврат ГруппаБСО;
	
КонецФункции

Процедура ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО, ИмяТЧ = "Товары")
	
	Элементы = Форма.Элементы;
	
	НоваяКолонка = Элементы.Добавить("ТипБСО", Тип("ПолеФормы"), ГруппаБСО);
	НоваяКолонка.Заголовок = "Тип";
	НоваяКолонка.ПутьКДанным = "Объект." + ИмяТЧ + ".ТипБСО";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	
	НоваяКолонка = Элементы.Добавить("СерияБСО", Тип("ПолеФормы"), ГруппаБСО);
	НоваяКолонка.Заголовок = "Серия";
	НоваяКолонка.ПутьКДанным = "Объект." + ИмяТЧ + ".СерияБСО";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Маска = "!!";
	
	НоваяКолонка = Элементы.Добавить("НачальныйНомерБСО", Тип("ПолеФормы"), ГруппаБСО);
	НоваяКолонка.Заголовок = "С номера";
	НоваяКолонка.ПутьКДанным = "Объект." + ИмяТЧ + ".НачальныйНомерБСО";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Маска = "9999999999";
	НоваяКолонка.УстановитьДействие("ПриИзменении", "НачальныйНомерБСОПриИзменении");
	
	НоваяКолонка = Элементы.Добавить("КонечныйНомерБСО", Тип("ПолеФормы"), ГруппаБСО);
	НоваяКолонка.Заголовок = "По номер";
	НоваяКолонка.ПутьКДанным = "Объект." + ИмяТЧ + ".КонечныйНомерБСО";
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Маска = "9999999999";
	НоваяКолонка.УстановитьДействие("ПриИзменении", "КонечныйНомерБСОПриИзменении");
	
КонецПроцедуры

Процедура ДобавитьКнопкуПодборБСОНаФорму(Форма)
	
	Имя = Форма.ИмяФормы;
	Элементы = Форма.Элементы;
	ИмяКнопкиПодбора = "Подбор БСО";
	
	ИмяКартинки = Метаданные.ОбщиеКартинки.ПодобратьТовары;
	ВыбраннаяКартинка = БиблиотекаКартинок[ИмяКартинки.Имя];
	
	НоваяКоманда = Форма.Команды.Добавить("ПодборБСО");
	НоваяКоманда.Действие = "ПодборБСО";
	
	Если Имя = "Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента" Тогда
		НовыйЭлемент = Элементы.Добавить("ТоварыПодборБСО", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить);
		НовыйЭлемент.ИмяКоманды = "ПодборБСО";
		НовыйЭлемент.Картинка = ВыбраннаяКартинка;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = ИмяКнопкиПодбора;
		Элементы.Переместить(НовыйЭлемент, Элементы.ТоварыГруппаЗаполнить, Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам);
	ИначеЕсли Имя = "Документ.СписаниеИзЭксплуатации.Форма.ФормаДокумента" Тогда
		ПодменюЗаполнить = Элементы.Добавить("ТоварыПодменюЗаполнить", Тип("ГруппаФормы"), Элементы.ТоварыКоманднаяПанель);
		ПодменюЗаполнить.Заголовок = "Заполнить";
		ПодменюЗаполнить.Вид = ВидГруппыФормы.Подменю;
		
		НовыйЭлемент = Элементы.Добавить("ТоварыПодборБСО", Тип("КнопкаФормы"), Элементы.ТоварыКоманднаяПанель);
		НовыйЭлемент.ИмяКоманды = "ПодборБСО";
		НовыйЭлемент.Картинка = ВыбраннаяКартинка;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = ИмяКнопкиПодбора;
		
		Элементы.Переместить(Элементы.ТоварыПодбор, ПодменюЗаполнить);
		Элементы.Переместить(НовыйЭлемент, ПодменюЗаполнить);
		
		НоваяКоманда = Форма.Команды.Добавить("ЗаполнитьИспользованные");
		НоваяКоманда.Действие = "ЗаполнитьИспользованные";
		НовыйЭлемент = Элементы.Добавить("ТоварыЗаполнитьИспользованные", Тип("КнопкаФормы"), ПодменюЗаполнить);
		НовыйЭлемент.ИмяКоманды = "ЗаполнитьИспользованные";
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = "Заполнить использованные";
		
		НоваяКоманда = Форма.Команды.Добавить("ЗаполнитьОстатки");
		НоваяКоманда.Действие = "ЗаполнитьОстатки";
		НовыйЭлемент = Элементы.Добавить("ТоварыЗаполнитьОстатки", Тип("КнопкаФормы"), ПодменюЗаполнить);
		НовыйЭлемент.ИмяКоманды = "ЗаполнитьОстатки";
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = "Заполнить остатки";
	ИначеЕсли Имя = "Документ.ПеремещениеВЭксплуатации.Форма.ФормаДокумента" Тогда
		ПодменюЗаполнить = Элементы.Добавить("ТоварыПодменюЗаполнить", Тип("ГруппаФормы"), Элементы.ТоварыКоманднаяПанель);
		ПодменюЗаполнить.Заголовок = "Заполнить";
		ПодменюЗаполнить.Вид = ВидГруппыФормы.Подменю;
		
		НовыйЭлемент = Элементы.Добавить("ТоварыПодборБСО", Тип("КнопкаФормы"), Элементы.ТоварыКоманднаяПанель);
		НовыйЭлемент.ИмяКоманды = "ПодборБСО";
		НовыйЭлемент.Картинка = ВыбраннаяКартинка;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = ИмяКнопкиПодбора;
		
		Элементы.Переместить(Элементы.ТоварыПодбор, ПодменюЗаполнить);
		Элементы.Переместить(НовыйЭлемент, ПодменюЗаполнить);
	ИначеЕсли Имя = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		НовыйЭлемент = Элементы.Добавить("ТоварыПодборБСО", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить);
		НовыйЭлемент.ИмяКоманды = "ПодборБСО";
		НовыйЭлемент.Картинка = ВыбраннаяКартинка;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = ИмяКнопкиПодбора;
		Элементы.Переместить(НовыйЭлемент, Элементы.ТоварыГруппаЗаполнить, Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам);
	ИначеЕсли Имя = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		НовыйЭлемент = Элементы.Добавить("ТоварыПодборБСО", Тип("КнопкаФормы"), Элементы.ГруппаТоварыПодобратьТовары);
		НовыйЭлемент.ИмяКоманды = "ПодборБСО";
		НовыйЭлемент.Картинка = ВыбраннаяКартинка;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Заголовок = ИмяКнопкиПодбора;
		Элементы.Переместить(НовыйЭлемент, Элементы.ГруппаТоварыПодобратьТовары, Элементы.ТоварыПодобратьТоварыИзДокументовПоступления);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьГруппуБСО(Форма) Экспорт
	
	Имя 		= Форма.ИмяФормы;
	Элементы 	= Форма.Элементы;
	ИмяТЧ 		= "";
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ГруппаБСО = Неопределено;
	
	Если Имя = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			Элементы.ХозяйственнаяОперация.СписокВыбора.Очистить();
			Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
			
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары, Элементы.ТоварыНомерГТД);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			Элементы.ХозяйственнаяОперация.СписокВыбора.Очистить();
			Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
			
			// ПодборБСО
			ДобавитьКнопкуПодборБСОНаФорму(Форма);
			Элементы.ТоварыПодборБСО.Видимость = РежимИспользованияБСО;
			// ПодборБСО
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары, Элементы.ТоварыФизическоеЛицо);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ВводОстатков.Форма.ФормаТовары" И Форма.ИмяТекущейТаблицыФормы = "СобственныеТовары" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			ИмяТЧ = "Товары";
			
			ГруппаБСО = Элементы.Найти("ГруппаБСО");
			Если ГруппаБСО = Неопределено Тогда
				ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.СобственныеТовары);
				Элементы.Переместить(ГруппаБСО, Элементы.СобственныеТовары, Элементы.СобственныеТоварыНомерГТД);
				
				ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
				
				Форма.УстановитьДействие("ПередЗаписью", "ПередЗаписью");
			КонецЕсли;	
			
		Иначе
			
			ГруппаБСО = Элементы.Найти("ГруппаБСО");
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ВводОстатков.Форма.ФормаТМЦВЭксплуатации" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			ИмяТЧ = "ТМЦВЭксплуатации";
			
			ГруппаБСО = Элементы.Найти("ГруппаБСО");
			Если ГруппаБСО = Неопределено Тогда
				ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.ТМЦВЭксплуатации);
				Элементы.Переместить(ГруппаБСО, Элементы.ТМЦВЭксплуатации);
				
				ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО, ИмяТЧ);
				
				Форма.УстановитьДействие("ПередЗаписью", "ПередЗаписью");
			КонецЕсли;
			
		Иначе
			
			ГруппаБСО = Элементы.Найти("ГруппаБСО");
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.СписаниеИзЭксплуатации.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			ЭлементТипСписанныхБСО = Элементы.Добавить("ТипСписанныхБСО", Тип("ПолеФормы"), Элементы.ГруппаРеквизитыЛево);
			ЭлементТипСписанныхБСО.Заголовок = "Тип списанных БСО";
			ЭлементТипСписанныхБСО.ПутьКДанным = "Объект.ТипСписанныхБСО";
			ЭлементТипСписанныхБСО.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементТипСписанныхБСО.Видимость = РежимИспользованияБСО;
			ЭлементТипСписанныхБСО.РастягиватьПоГоризонтали = Ложь;
			ЭлементТипСписанныхБСО.Ширина = 28;
			
			// ПодборБСО
			ДобавитьКнопкуПодборБСОНаФорму(Форма);
			Элементы.ТоварыПодборБСО.Видимость = РежимИспользованияБСО;
			// ПодборБСО
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО, "Товары");
			
			Форма.УстановитьДействие("ПередЗаписью", "ПередЗаписью");
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ПеремещениеВЭксплуатации.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			// ПодборБСО
			ДобавитьКнопкуПодборБСОНаФорму(Форма);
			Элементы.ТоварыПодборБСО.Видимость = РежимИспользованияБСО;
			// ПодборБСО
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО, "Товары");
			
			Форма.УстановитьДействие("ПередЗаписью", "ПередЗаписью");
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			// ПодборБСО
			ДобавитьКнопкуПодборБСОНаФорму(Форма);
			Элементы.ТоварыПодборБСО.Видимость = РежимИспользованияБСО;
			// ПодборБСО
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары, Элементы.ТоварыГруппаЗаказНаПеремещение);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ОприходованиеИзлишковТоваров.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары, Элементы.ТоварыНомерГТД);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
			
		КонецЕсли;
		
	ИначеЕсли Имя = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		
		РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
		Если РежимИспользованияБСО Тогда
			
			ИспользоватьБСО = Истина;
			РежимИспользованияБСО = Форма.Объект.РежимИспользованияБСО;
			
			// ПодборБСО
			ДобавитьКнопкуПодборБСОНаФорму(Форма);
			Элементы.ТоварыПодборБСО.Видимость = РежимИспользованияБСО;
			// ПодборБСО
			
			ГруппаБСО = ПолучитьГруппуБСО(Элементы, Элементы.Товары);
			Элементы.Переместить(ГруппаБСО, Элементы.Товары, Элементы.ТоварыДокументПоступления);
			
			ВыполнитьДобавлениеКолонокГруппыБСО(Форма, ГруппаБСО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ГруппаБСО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимИспользованияБСО Тогда
		
		УчетБланковСтрогойОтчетностиКлиентСервер.НепроверяемыеРеквизиты(МассивНепроверяемыхРеквизитов, Форма.Объект.Ссылка, ИмяТЧ, Истина);
		
		Для каждого Стр Из МассивНепроверяемыхРеквизитов Цикл
			Элементы[Стр].Видимость = Ложь;
		КонецЦикла;
		
		ГруппаБСО.Видимость = Истина;
		
	Иначе
		
		ГруппаБСО.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьТекстЗапросаПоТЧ(СсылкаНаДокумент, ХозяйственнаяОперация = Неопределено)
	Текст =
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Ссылка.Дата КАК Период,
	|	СписокНоменклатуры.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	СписокНоменклатуры.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика КАК Характеристика,
	|	СписокНоменклатуры.ТипБСО КАК Тип,
	|	СписокНоменклатуры.СерияБСО КАК Серия,
	|	СписокНоменклатуры.НачальныйНомерБСО КАК НачальныйНомер,
	|	СписокНоменклатуры.КонечныйНомерБСО КАК КонечныйНомер,
	|	СписокНоменклатуры.Количество КАК Количество,
	|	СписокНоменклатуры.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК СписокНоменклатуры
	|ГДЕ
	|	СписокНоменклатуры.Ссылка = &Ссылка";
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ОприходованиеИзлишковТоваров.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВозвратТоваровПоставщику.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ПеремещениеТоваров.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.СкладОтправитель КАК Склад");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "0 КАК Сумма");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВводОстатков.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "СписокНоменклатуры.СуммаРегл КАК Сумма");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВводОстатков.ТМЦВЭксплуатации");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад");
		Текст = СтрЗаменить(Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "СписокНоменклатуры.СуммаРегл КАК Сумма");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВнутреннееПотреблениеТоваров.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
		Текст = СтрЗаменить(Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "0 КАК Сумма");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеВЭксплуатации") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ПеремещениеВЭксплуатации.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад");
		Текст = СтрЗаменить(Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицоПолучатель КАК ФизическоеЛицоПолучатель, СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "0 КАК Сумма");
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.СписаниеИзЭксплуатации") Тогда
		Текст = СтрЗаменить(Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.СписаниеИзЭксплуатации.Товары");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Склад КАК Склад", "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад");
		Текст = СтрЗаменить(Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
		Текст = СтрЗаменить(Текст, "СписокНоменклатуры.Сумма КАК Сумма", "0 КАК Сумма");
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

Функция СформироватьСтрокуОтборов(Отбор) Экспорт
	Если ТипЗнч(Отбор) <> Тип("Отбор") Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаОтборов = "";
	
	Для К = 0 По Отбор.Количество() - 1 Цикл
		ЭлементОтбора = Отбор[К];
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.Имя = "Периодичность" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаОтборов) Тогда
			СтрокаОтборов = СтрокаОтборов + ", ";
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " = " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <> " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если Не ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла;
			
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если Не ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла;
			
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке по иерархии " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если Не ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла;
			
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если Не ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				КонецЕсли;
			КонецЦикла;
			
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке по иерархии " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СтрокаСписка, "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " > " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " >= " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " < " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <= " + ?(ЗначениеЗаполнено(ЭлементОтбора.Значение), СокрЛП(Строка(ЭлементОтбора.Значение)), "Пусто");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " < " + ЭлементОтбора.Представление + " < " + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " <= " + ЭлементОтбора.Представление + " <= " + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " <= " + ЭлементОтбора.Представление + " < " + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			СтрокаОтборов = СтрокаОтборов + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), СокрЛП(Строка(ЭлементОтбора.ЗначениеС)), "...") + " < " + ЭлементОтбора.Представление + " <= " + ?(ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)), "...");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаОтборов;
КонецФункции

Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон) Экспорт
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		ОписаниеПериода = "Период: без ограничения.";
	Иначе
		Если ДатаНач = '00010101000000' Или ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ=дд.ММ.гггг; ДП='без ограничения'") + " - " + Формат(ДатаКон, "ДФ=дд.ММ.гггг; ДП='без ограничения'");
		Иначе
			Если ДатаНач > ДатаКон Тогда
				ОписаниеПериода = "";
			Иначе
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеПериода;
КонецФункции

Функция ПроверкаРеквизитовБСО(ВыборкаБСО)
	Если ЗначениеЗаполнено(ВыборкаБСО.Тип) И ЗначениеЗаполнено(ВыборкаБСО.Серия) И ЗначениеЗаполнено(ВыборкаБСО.НачальныйНомер) И ЗначениеЗаполнено(ВыборкаБСО.КонечныйНомер) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПередЗаписьюДокументаБСО

Функция ТаблицаПроверочныхНомеровБСО(Коллекция, ИмяФормы = "")
	Если ИмяФормы = "Документ.СписаниеИзЭксплуатации.Форма.ФормаДокумента" Или ИмяФормы = "Документ.ПеремещениеВЭксплуатации.Форма.ФормаДокумента" Тогда
		ДопКолонки = "ФизическоеЛицо, ";
	Иначе
		ДопКолонки = "";
	КонецЕсли;
	
	КоллекцияБСО = Коллекция.Выгрузить(, ДопКолонки + "Номенклатура, Характеристика, Количество, ТипБСО, СерияБСО, НачальныйНомерБСО, КонечныйНомерБСО");
	
	ТаблицаНабор = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
	
	Для каждого Стр Из КоллекцияБСО Цикл
		ПроверкаБСО = ЗначениеЗаполнено(Стр.ТипБСО) И ЗначениеЗаполнено(Стр.СерияБСО) И ЗначениеЗаполнено(Стр.НачальныйНомерБСО) И ЗначениеЗаполнено(Стр.КонечныйНомерБСО);
		
		Если ПроверкаБСО Тогда
			НачальныйНомер = Число(Стр.НачальныйНомерБСО);
			КонечныйНомер = Число(Стр.КонечныйНомерБСО);
			КоличествоБСО = КонечныйНомер - НачальныйНомер + 1;
			
			Если Стр.Количество = КоличествоБСО Тогда
				ДлинаСтр = Макс(СтрДлина(Стр.НачальныйНомерБСО), СтрДлина(Стр.КонечныйНомерБСО));
				
				Для Номер = НачальныйНомер По КонечныйНомер Цикл
					НоваяЗапись = ТаблицаНабор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
					
					НоваяЗапись.Номенклатура = Стр.Номенклатура;
					НоваяЗапись.Характеристика = Стр.Характеристика;
					НоваяЗапись.Тип = Стр.ТипБСО;
					НоваяЗапись.Серия = Стр.СерияБСО;
					НоваяЗапись.Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(Номер, ДлинаСтр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНабор;
КонецФункции

Функция ПроверитьВозможностьПоступленияБСО(Знач Коллекция, Знач ДатаДокумента) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Отказ", Ложь);
	
	ТаблицаНабор = ТаблицаПроверочныхНомеровБСО(Коллекция);
	Если ТаблицаНабор.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если НачалоДня(ДатаДокумента) = ДатаДокумента Тогда
		ГраницаДокумента = КонецДня(ДатаДокумента);
	Иначе
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаДокумента;
		Параметры[1] = ВидГраницы.Исключая;
		ГраницаДокумента = Новый(Тип("Граница"), Параметры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
	Запрос.УстановитьПараметр("ГраницаДокумента", ГраницаДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика КАК Характеристика,
	|	СписокНоменклатуры.Тип КАК Тип,
	|	СписокНоменклатуры.Серия КАК Серия,
	|	СписокНоменклатуры.Номер КАК Номер
	|ПОМЕСТИТЬ ТаблЧастьБСО
	|ИЗ
	|	&ТаблицаНабор КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблЧастьБСО.Номенклатура КАК Номенклатура,
	|	ТаблЧастьБСО.Характеристика КАК Характеристика,
	|	ТаблЧастьБСО.Тип КАК Тип,
	|	ТаблЧастьБСО.Серия КАК Серия,
	|	ТаблЧастьБСО.Номер КАК Номер,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ПовторныеНомера
	|ИЗ
	|	ТаблЧастьБСО КАК ТаблЧастьБСО
	|		ВНУТРЕННеЕ СОЕДИНеНИЕ РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
	|				&ГраницаДокумента,
	|				(Номенклатура, Характеристика, Тип, Серия) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблЧастьБСО.Номенклатура,
	|						ТаблЧастьБСО.Характеристика,
	|						ТаблЧастьБСО.Тип,
	|						ТаблЧастьБСО.Серия
	|					ИЗ
	|						ТаблЧастьБСО КАК ТаблЧастьБСО)) КАК БланкиСтрогойОтчетностиОстатки
	|		ПО ТаблЧастьБСО.Номенклатура = БланкиСтрогойОтчетностиОстатки.Номенклатура
	|			И ТаблЧастьБСО.Характеристика = БланкиСтрогойОтчетностиОстатки.Характеристика
	|			И ТаблЧастьБСО.Тип = БланкиСтрогойОтчетностиОстатки.Тип
	|			И ТаблЧастьБСО.Серия = БланкиСтрогойОтчетностиОстатки.Серия
	|			И ТаблЧастьБСО.Номер = БланкиСтрогойОтчетностиОстатки.Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблЧастьБСО.Номенклатура,
	|	ТаблЧастьБСО.Характеристика,
	|	ТаблЧастьБСО.Номер,
	|	ТаблЧастьБСО.Тип,
	|	ТаблЧастьБСО.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПовторныеНомера.Номенклатура КАК Номенклатура,
	|	ПовторныеНомера.Характеристика КАК Характеристика,
	|	ПовторныеНомера.Тип КАК Тип,
	|	ПовторныеНомера.Серия КАК Серия,
	|	ПовторныеНомера.Номер КАК Номер,
	|	ПовторныеНомера.Количество
	|ИЗ
	|	ПовторныеНомера КАК ПовторныеНомера
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серия,
	|	Номер
	|ИТОГИ ПО
	|	Тип";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Соответствие;
	
	ВыборкаТип = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТип.Следующий() Цикл
		НомераБСО = Новый Массив;
		
		Выборка = ВыборкаТип.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество > 1 Тогда
				НомераБСО.Добавить("Дублирование номера в табличной части: " + СокрЛП(ВыборкаТип.Тип) + ", " + СокрЛП(Выборка.Серия) + " " + Выборка.Номер);
			Иначе
				НомераБСО.Добавить("Информация о бланках строгой отчетности уже введена: " + СокрЛП(ВыборкаТип.Тип) + ", " + СокрЛП(Выборка.Серия) + " " + Выборка.Номер);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбработки.Вставить(ВыборкаТип.Тип, НомераБСО);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("Отказ", Истина);
	СтруктураВозврата.Вставить("ПараметрыОбработки", ПараметрыОбработки);
	
	Возврат СтруктураВозврата;
КонецФункции

Функция ПроверитьВозможностьСписанияБСО(Знач Склад, Знач Коллекция, Знач ДатаДокумента, Знач ИмяФормы) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Отказ", Истина);
	СтруктураВозврата.Вставить("ПричинаОтказа", "Ошибка поиска данных");
	
	ТаблицаНабор = ТаблицаПроверочныхНомеровБСО(Коллекция, ИмяФормы);
	Если ТаблицаНабор.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если НачалоДня(ДатаДокумента) = ДатаДокумента Тогда
		ГраницаДокумента = КонецДня(ДатаДокумента);
	Иначе
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаДокумента;
		Параметры[1] = ВидГраницы.Исключая;
		ГраницаДокумента = Новый(Тип("Граница"), Параметры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
	Запрос.УстановитьПараметр("ГраницаДокумента", ГраницаДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика КАК Характеристика,
	|	СписокНоменклатуры.Тип КАК Тип,
	|	СписокНоменклатуры.Серия КАК Серия,
	|	СписокНоменклатуры.Номер КАК Номер
	|ПОМЕСТИТЬ ТаблЧастьБСО
	|ИЗ
	|	&ТаблицаНабор КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблЧастьБСО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблЧастьБСО.Номенклатура КАК Номенклатура,
	|	ТаблЧастьБСО.Характеристика КАК Характеристика,
	|	ТаблЧастьБСО.Тип КАК Тип,
	|	ТаблЧастьБСО.Серия КАК Серия,
	|	ТаблЧастьБСО.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОстатки.КоличествоОстаток ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНеЦ КАК ЕстьОстаток,
	|	СУММА(ЕСТЬNULL(БланкиСтрогойОтчетностиОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТЗИтоги
	|ИЗ
	|	ТаблЧастьБСО КАК ТаблЧастьБСО
	|		ЛЕВОЕ СОЕДИНеНИЕ РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
	|				&ГраницаДокумента,
	|				Склад = &Склад
	|					И (ФизическоеЛицо, Номенклатура, Характеристика, Тип, Серия) В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТаблЧастьБСО.ФизическоеЛицо,
	|							ТаблЧастьБСО.Номенклатура,
	|							ТаблЧастьБСО.Характеристика,
	|							ТаблЧастьБСО.Тип,
	|							ТаблЧастьБСО.Серия
	|						ИЗ
	|							ТаблЧастьБСО КАК ТаблЧастьБСО)) КАК БланкиСтрогойОтчетностиОстатки
	|		ПО ТаблЧастьБСО.ФизическоеЛицо = БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо
	|			И ТаблЧастьБСО.Номенклатура = БланкиСтрогойОтчетностиОстатки.Номенклатура
	|			И ТаблЧастьБСО.Характеристика = БланкиСтрогойОтчетностиОстатки.Характеристика
	|			И ТаблЧастьБСО.Тип = БланкиСтрогойОтчетностиОстатки.Тип
	|			И ТаблЧастьБСО.Серия = БланкиСтрогойОтчетностиОстатки.Серия
	|			И ТаблЧастьБСО.Номер = БланкиСтрогойОтчетностиОстатки.Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблЧастьБСО.Номенклатура,
	|	ТаблЧастьБСО.Тип,
	|	ТаблЧастьБСО.Характеристика,
	|	ТаблЧастьБСО.Номер,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОстатки.КоличествоОстаток ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНеЦ,
	|	ТаблЧастьБСО.Серия,
	|	ТаблЧастьБСО.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗИтоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТЗИтоги.Номенклатура КАК Номенклатура,
	|	ТЗИтоги.Характеристика КАК Характеристика,
	|	ТЗИтоги.Тип КАК Тип,
	|	ТЗИтоги.Серия КАК Серия,
	|	ТЗИтоги.Номер КАК Номер,
	|	ТЗИтоги.ЕстьОстаток КАК ЕстьОстаток,
	|	ТЗИтоги.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	ТЗИтоги КАК ТЗИтоги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЗИтоги.Серия,
	|	ТЗИтоги.Номер
	|ИТОГИ ПО
	|	Тип";
	
	Если ИмяФормы = "Документ.СписаниеИзЭксплуатации.Форма.ФормаДокумента" Или ИмяФормы = "Документ.ПеремещениеВЭксплуатации.Форма.ФормаДокумента" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Соответствие;
	
	ВыборкаТип = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТип.Следующий() Цикл
		НомераБСО = Новый Массив;
		
		Выборка = ВыборкаТип.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ЕстьОстаток Тогда
				НомераБСО.Добавить("Информация о бланках строгой отчетности недоступна: " + СокрЛП(ВыборкаТип.Тип) + ", " + СокрЛП(Выборка.Серия) + " " + Выборка.Номер);
			КонецЕсли;
			
			Если Выборка.КоличествоОстаток > 1 Тогда
				НомераБСО.Добавить("Дублирование номера в табличной части: " + СокрЛП(ВыборкаТип.Тип) + ", " + СокрЛП(Выборка.Серия) + " " + Выборка.Номер);
			КонецЕсли;
		КонецЦикла;
		
		Если НомераБСО.Количество() > 0 Тогда
			ПараметрыОбработки.Вставить(ВыборкаТип.Тип, НомераБСО);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбработки.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("Отказ", Ложь);
	Иначе
		СтруктураВозврата.Вставить("Отказ", Истина);
		СтруктураВозврата.Вставить("ПараметрыОбработки", ПараметрыОбработки);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#Область ДвиженияХозрасчетный

Функция СодержаниеОперацииБСО(СсылкаНаДокумент, ХозяйственнаяОперация = Неопределено)
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Содержание = "Поступление БСО на склад";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Содержание = "Оприходование БСО на склад";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		Содержание = "Ввод начальных остатков товаров БСО";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		Содержание = "Ввод начальных остатков БСО в эксплуатации";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		Содержание = "Передача БСО физическому лицу";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Содержание = "Возврат БСО поставщику";
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Содержание = "Перемещение БСО";
	Иначе
		Содержание = "";
	КонецЕсли;
	
	Возврат Содержание;
КонецФункции

Процедура ВыполнитьДвиженияРегл(СсылкаНаДокумент, НаборЗаписей, ХозяйственнаяОперация = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Период", СсылкаНаДокумент.Дата);
	Запрос.Текст = СформироватьТекстЗапросаПоТЧ(СсылкаНаДокумент, ХозяйственнаяОперация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаБСО = Результат.Выбрать();
	Пока ВыборкаБСО.Следующий() Цикл
		Если Не ПроверкаРеквизитовБСО(ВыборкаБСО) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Или ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
			Или (ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров) Тогда
			Движение = НаборЗаписей.Добавить();
			Движение.Период = ВыборкаБСО.Период;
			Движение.Организация = ВыборкаБСО.Организация;
			Движение.ПодразделениеДт = ВыборкаБСО.Подразделение;
			Движение.Содержание = СодержаниеОперацииБСО(СсылкаНаДокумент, ХозяйственнаяОперация);
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_01;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Склады", ВыборкаБСО.Склад);
			
			Движение.КоличествоДт = ВыборкаБСО.Количество;
			Движение.Сумма = ВыборкаБСО.Сумма;
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВводОстатков") И ХозяйственнаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
			Движение = НаборЗаписей.Добавить();
			Движение.Период = ВыборкаБСО.Период;
			Движение.Организация = ВыборкаБСО.Организация;
			Движение.ПодразделениеДт = ВыборкаБСО.Подразделение;
			Движение.Содержание = СодержаниеОперацииБСО(СсылкаНаДокумент, ХозяйственнаяОперация);
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_02;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "РаботникиОрганизаций", ВыборкаБСО.ФизическоеЛицо);
			
			Движение.КоличествоДт = ВыборкаБСО.Количество;
			Движение.Сумма = ВыборкаБСО.Сумма;
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
			СуммаИзНабора = 0;
			Если НаборЗаписей.Количество() > 0 Тогда
				СуммаИзНабора = НаборЗаписей[0].Сумма;
			КонецЕсли;
			
			Движение = НаборЗаписей.Добавить();
			Движение.Период = СсылкаНаДокумент.Дата;
			Движение.Организация = СсылкаНаДокумент.Организация;
			Движение.ПодразделениеКт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Передача БСО физическому лицу";
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_01;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Склады", СсылкаНаДокумент.Склад);
			
			Движение.КоличествоКт = ВыборкаБСО.Количество;
			Движение.Сумма = СуммаИзНабора;
			
			Движение = НаборЗаписей.Добавить();
			Движение.Период = СсылкаНаДокумент.Дата;
			Движение.Организация = СсылкаНаДокумент.Организация;
			Движение.ПодразделениеДт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Передача БСО физическому лицу";
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_02;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "РаботникиОрганизаций", ВыборкаБСО.ФизическоеЛицо);
			
			Движение.КоличествоДт = ВыборкаБСО.Количество;
			Движение.Сумма = СуммаИзНабора;
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Движение = НаборЗаписей.Добавить();
			Движение.Период = СсылкаНаДокумент.Дата;
			Движение.Организация = СсылкаНаДокумент.Организация;
			Движение.ПодразделениеКт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Возврат БСО поставщику";
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_01;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Склады", СсылкаНаДокумент.Склад);
			
			Движение.КоличествоКт = ВыборкаБСО.Количество;
			Движение.Сумма = ВыборкаБСО.Сумма;
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			СуммаИзНабора = 0;
			Если НаборЗаписей.Количество() > 0 Тогда
				СуммаИзНабора = НаборЗаписей[0].Сумма;
			КонецЕсли;
			
			Движение = НаборЗаписей.Добавить();
			Движение.Период = СсылкаНаДокумент.Дата;
			Движение.Организация = СсылкаНаДокумент.Организация;
			Движение.ПодразделениеКт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Перемещение БСО";
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_01;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Склады", СсылкаНаДокумент.СкладОтправитель);
			
			Движение.КоличествоКт = ВыборкаБСО.Количество;
			Движение.Сумма = СуммаИзНабора;
			
			Движение = НаборЗаписей.Добавить();
			Движение.Период = СсылкаНаДокумент.Дата;
			Движение.Организация = СсылкаНаДокумент.Организация;
			Движение.ПодразделениеДт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Перемещение БСО";
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_01;
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Склады", СсылкаНаДокумент.СкладПолучатель);
			
			Движение.КоличествоДт = ВыборкаБСО.Количество;
			Движение.Сумма = СуммаИзНабора;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ДвиженияБланкиСтрогойОтчетности

Функция ТаблицаНомеровБСО(ВыборкаБСО)
	ТаблицаНабор = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
	
	Если Не (ЗначениеЗаполнено(ВыборкаБСО.Тип) И ЗначениеЗаполнено(ВыборкаБСО.Серия) И ЗначениеЗаполнено(ВыборкаБСО.НачальныйНомер) И ЗначениеЗаполнено(ВыборкаБСО.КонечныйНомер)) Тогда
		Возврат ТаблицаНабор;
	КонецЕсли;
	
	НачальныйНомер = Число(ВыборкаБСО.НачальныйНомер);
	КонечныйНомер = Число(ВыборкаБСО.КонечныйНомер);
	КоличествоБСО = КонечныйНомер - НачальныйНомер + 1;
	
	Если ВыборкаБСО.Количество <> КоличествоБСО Тогда
		Возврат ТаблицаНабор;
	КонецЕсли;
	
	ДлинаСтр = Макс(СтрДлина(ВыборкаБСО.НачальныйНомер), СтрДлина(ВыборкаБСО.КонечныйНомер));
	
	Для Номер = НачальныйНомер По КонечныйНомер Цикл
		НоваяЗапись = ТаблицаНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаБСО);
		НоваяЗапись.Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(Номер, ДлинаСтр);
	КонецЦикла;
	
	Возврат ТаблицаНабор;
КонецФункции

Процедура ПриПроведенииБСО(Источник, Отказ, РежимПроведения) Экспорт
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", Источник.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата", Источник.Дата);
	СтруктураШапкиДокумента.Вставить("Организация", Источник.Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СписокНоменклатуры.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.Характеристика КАК Характеристика,
	|	СписокНоменклатуры.ТипБСО КАК Тип,
	|	СписокНоменклатуры.СерияБСО КАК Серия,
	|	СписокНоменклатуры.НачальныйНомерБСО КАК НачальныйНомер,
	|	СписокНоменклатуры.КонечныйНомерБСО КАК КонечныйНомер,
	|	ВЫРАЗИТЬ(СписокНоменклатуры.Цена КАК ЧИСЛО(15, 2)) КАК Цена,
	|	СписокНоменклатуры.Количество КАК Количество,
	|	СписокНоменклатуры.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК СписокНоменклатуры
	|ГДЕ
	|	СписокНоменклатуры.Ссылка = &Ссылка";
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И (Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Или Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
		И Источник.РежимИспользованияБСО Тогда
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаБСО = Результат.Выбрать();
		ВыполнитьДвиженияУпр(СтруктураШапкиДокумента, ВыборкаБСО);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") И Источник.РежимИспользованияБСО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ОприходованиеИзлишковТоваров.Товары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаБСО = Результат.Выбрать();
		ВыполнитьДвиженияУпр(СтруктураШапкиДокумента, ВыборкаБСО);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВводОстатков") И Источник.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров И Источник.РежимИспользованияБСО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВводОстатков.Товары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписокНоменклатуры.Склад КАК Склад", "СписокНоменклатуры.Ссылка.Склад КАК Склад");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫРАЗИТЬ(СписокНоменклатуры.Цена КАК ЧИСЛО(15, 2)) КАК Цена",
			"ВЫРАЗИТЬ(СписокНоменклатуры.СуммаРегл / ВЫБОР
			|			КОГДА СписокНоменклатуры.Количество = 0
			|				ТОГДА 1
			|			ИНАЧЕ СписокНоменклатуры.Количество
			|		КОНеЦ КАК ЧИСЛО(15, 2)) КАК Цена");
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаБСО = Результат.Выбрать();
		ВыполнитьДвиженияУпр(СтруктураШапкиДокумента, ВыборкаБСО);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВводОстатков") И Источник.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации И Источник.РежимИспользованияБСО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг.Товары", "Документ.ВводОстатков.ТМЦВЭксплуатации");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СписокНоменклатуры.Склад КАК Склад", "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", "СписокНоменклатуры.ФизическоеЛицо КАК ФизическоеЛицо");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫРАЗИТЬ(СписокНоменклатуры.Цена КАК ЧИСЛО(15, 2)) КАК Цена",
			"ВЫРАЗИТЬ(СписокНоменклатуры.Сумма / ВЫБОР
			|			КОГДА СписокНоменклатуры.Количество = 0
			|				ТОГДА 1
			|			ИНАЧЕ СписокНоменклатуры.Количество
			|		КОНеЦ КАК ЧИСЛО(15, 2)) КАК Цена");
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаБСО = Результат.Выбрать();
		ВыполнитьДвиженияУпр(СтруктураШапкиДокумента, ВыборкаБСО);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") И Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию И Источник.РежимИспользованияБСО Тогда
		СтруктураШапкиДокумента.Вставить("Склад", Источник.Склад);
		
		Запрос.Текст = СформироватьТекстЗапросаПоТЧ(Источник.Ссылка, Источник.ХозяйственнаяОперация);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНаборОбщая = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
		
		ВыборкаБСО = Результат.Выбрать();
		Пока ВыборкаБСО.Следующий() Цикл
			ТаблицаНабор = ТаблицаНомеровБСО(ВыборкаБСО);
			Если ТаблицаНабор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСтрока = Новый Запрос;
			ЗапросСтрока.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
			ЗапросСтрока.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
			ЗапросСтрока.УстановитьПараметр("Склад", СтруктураШапкиДокумента.Склад);
			ЗапросСтрока.УстановитьПараметр("ФизическоеЛицо", ВыборкаБСО.ФизическоеЛицо);
			ЗапросСтрока.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.Склад КАК Склад,
			|	ТекущаяТаблица.Номенклатура КАК Номенклатура,
			|	ТекущаяТаблица.Характеристика КАК Характеристика,
			|	ТекущаяТаблица.Тип КАК Тип,
			|	ТекущаяТаблица.Серия КАК Серия,
			|	ТекущаяТаблица.Номер КАК Номер
			|ПОМЕСТИТЬ ТекущаяТаблица
			|ИЗ
			|	&ТаблицаНабор КАК ТекущаяТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиСтрогойОтчетностиОстатки.Склад КАК Склад,
			|	БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	БланкиСтрогойОтчетностиОстатки.Номенклатура КАК Номенклатура,
			|	БланкиСтрогойОтчетностиОстатки.Характеристика КАК Характеристика,
			|	БланкиСтрогойОтчетностиОстатки.Тип КАК Тип,
			|	БланкиСтрогойОтчетностиОстатки.Серия КАК Серия,
			|	БланкиСтрогойОтчетностиОстатки.Номер КАК Номер,
			|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток КАК Количество,
			|	БланкиСтрогойОтчетностиОстатки.СуммаОстаток КАК Сумма
			|ПОМЕСТИТЬ ВсеОстатки
			|ИЗ
			|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
			|			&Период,
			|			Склад = &Склад
			|				И (Номенклатура, Характеристика, Тип, Серия) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ТекущаяТаблица.Номенклатура,
			|						ТекущаяТаблица.Характеристика,
			|						ТекущаяТаблица.Тип,
			|						ТекущаяТаблица.Серия
			|					ИЗ
			|						ТекущаяТаблица КАК ТекущаяТаблица)) КАК БланкиСтрогойОтчетностиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	ВсеОстатки.Склад КАК Склад,
			|	&ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВсеОстатки.Номенклатура КАК Номенклатура,
			|	ВсеОстатки.Характеристика КАК Характеристика,
			|	ВсеОстатки.Тип КАК Тип,
			|	ВсеОстатки.Серия КАК Серия,
			|	ВсеОстатки.Номер КАК Номер,
			|	ВсеОстатки.Сумма КАК Сумма,
			|	ВсеОстатки.Количество КАК Количество
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	ВсеОстатки КАК ВсеОстатки
			|		ВНУТРЕННеЕ СОЕДИНеНИЕ ТекущаяТаблица КАК ТекущаяТаблица
			|		ПО ВсеОстатки.Номенклатура = ТекущаяТаблица.Номенклатура
			|			И ВсеОстатки.Характеристика = ТекущаяТаблица.Характеристика
			|			И ВсеОстатки.Тип = ТекущаяТаблица.Тип
			|			И ВсеОстатки.Серия = ТекущаяТаблица.Серия
			|			И ВсеОстатки.Номер = ТекущаяТаблица.Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ИтоговаяТаблица.Склад КАК Склад,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
			|	ИтоговаяТаблица.Характеристика КАК Характеристика,
			|	ИтоговаяТаблица.Тип КАК Тип,
			|	ИтоговаяТаблица.Серия КАК Серия,
			|	ИтоговаяТаблица.Номер КАК Номер,
			|	ИтоговаяТаблица.Сумма КАК Сумма,
			|	ИтоговаяТаблица.Количество КАК Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
			|	ИтоговаяТаблица.ФизическоеЛицо,
			|	ИтоговаяТаблица.Номенклатура,
			|	ИтоговаяТаблица.Характеристика,
			|	ИтоговаяТаблица.Тип,
			|	ИтоговаяТаблица.Серия,
			|	ИтоговаяТаблица.Номер,
			|	ИтоговаяТаблица.Сумма,
			|	ИтоговаяТаблица.Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица";
			
			РезультатСтрока = ЗапросСтрока.Выполнить();
			Если РезультатСтрока.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСтрока = РезультатСтрока.Выбрать();
			Пока ВыборкаСтрока.Следующий() Цикл
				НоваяЗапись = ТаблицаНаборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, СтруктураШапкиДокумента.Ссылка);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И Источник.РежимИспользованияБСО Тогда
		СтруктураШапкиДокумента.Вставить("Склад", Источник.Склад);
		
		Запрос.Текст = СформироватьТекстЗапросаПоТЧ(Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНаборОбщая = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
		
		ВыборкаБСО = Результат.Выбрать();
		Пока ВыборкаБСО.Следующий() Цикл
			ТаблицаНабор = ТаблицаНомеровБСО(ВыборкаБСО);
			Если ТаблицаНабор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСтрока = Новый Запрос;
			ЗапросСтрока.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
			ЗапросСтрока.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
			ЗапросСтрока.УстановитьПараметр("Склад", СтруктураШапкиДокумента.Склад);
			ЗапросСтрока.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.Склад КАК Склад,
			|	ТекущаяТаблица.Номенклатура КАК Номенклатура,
			|	ТекущаяТаблица.Характеристика КАК Характеристика,
			|	ТекущаяТаблица.Тип КАК Тип,
			|	ТекущаяТаблица.Серия КАК Серия,
			|	ТекущаяТаблица.Номер КАК Номер
			|ПОМЕСТИТЬ ТекущаяТаблица
			|ИЗ
			|	&ТаблицаНабор КАК ТекущаяТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиСтрогойОтчетностиОстатки.Склад КАК Склад,
			|	БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	БланкиСтрогойОтчетностиОстатки.Номенклатура КАК Номенклатура,
			|	БланкиСтрогойОтчетностиОстатки.Характеристика КАК Характеристика,
			|	БланкиСтрогойОтчетностиОстатки.Тип КАК Тип,
			|	БланкиСтрогойОтчетностиОстатки.Серия КАК Серия,
			|	БланкиСтрогойОтчетностиОстатки.Номер КАК Номер,
			|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток КАК Количество,
			|	БланкиСтрогойОтчетностиОстатки.СуммаОстаток КАК Сумма
			|ПОМЕСТИТЬ ВсеОстатки
			|ИЗ
			|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
			|			&Период,
			|			Склад = &Склад
			|				И (Номенклатура, Характеристика, Тип, Серия) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ТекущаяТаблица.Номенклатура,
			|						ТекущаяТаблица.Характеристика,
			|						ТекущаяТаблица.Тип,
			|						ТекущаяТаблица.Серия
			|					ИЗ
			|						ТекущаяТаблица КАК ТекущаяТаблица)) КАК БланкиСтрогойОтчетностиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеОстатки.Склад КАК Склад,
			|	ВсеОстатки.Номенклатура КАК Номенклатура,
			|	ВсеОстатки.Характеристика КАК Характеристика,
			|	ВсеОстатки.Тип КАК Тип,
			|	ВсеОстатки.Серия КАК Серия,
			|	ВсеОстатки.Номер КАК Номер,
			|	ВсеОстатки.Сумма КАК Сумма,
			|	ВсеОстатки.Количество КАК Количество
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	ВсеОстатки КАК ВсеОстатки
			|		ВНУТРЕННеЕ СОЕДИНеНИЕ ТекущаяТаблица КАК ТекущаяТаблица
			|		ПО ВсеОстатки.Номенклатура = ТекущаяТаблица.Номенклатура
			|			И ВсеОстатки.Характеристика = ТекущаяТаблица.Характеристика
			|			И ВсеОстатки.Тип = ТекущаяТаблица.Тип
			|			И ВсеОстатки.Серия = ТекущаяТаблица.Серия
			|			И ВсеОстатки.Номер = ТекущаяТаблица.Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ИтоговаяТаблица.Склад КАК Склад,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
			|	ИтоговаяТаблица.Характеристика КАК Характеристика,
			|	ИтоговаяТаблица.Тип КАК Тип,
			|	ИтоговаяТаблица.Серия КАК Серия,
			|	ИтоговаяТаблица.Номер КАК Номер,
			|	ИтоговаяТаблица.Сумма КАК Сумма,
			|	ИтоговаяТаблица.Количество КАК Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица";
			
			РезультатСтрока = ЗапросСтрока.Выполнить();
			Если РезультатСтрока.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСтрока = РезультатСтрока.Выбрать();
			Пока ВыборкаСтрока.Следующий() Цикл
				НоваяЗапись = ТаблицаНаборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, СтруктураШапкиДокумента.Ссылка);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СписаниеИзЭксплуатации") И Источник.РежимИспользованияБСО Тогда
		
		Запрос.Текст = СформироватьТекстЗапросаПоТЧ(Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНаборОбщая = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
		
		НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = СтруктураШапкиДокумента.Ссылка;
		НаборЗаписейХозрасчетный.Отбор.Регистратор.Использование = Истина;
		
		ВыборкаБСО = Результат.Выбрать();
		Пока ВыборкаБСО.Следующий() Цикл
			ТаблицаНабор = ТаблицаНомеровБСО(ВыборкаБСО);
			Если ТаблицаНабор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСтрока = Новый Запрос;
			ЗапросСтрока.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
			ЗапросСтрока.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
			ЗапросСтрока.УстановитьПараметр("Склад", Справочники.Склады.ПустаяСсылка());
			ЗапросСтрока.УстановитьПараметр("ФизическоеЛицо", ВыборкаБСО.ФизическоеЛицо);
			ЗапросСтрока.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущаяТаблица.Номенклатура КАК Номенклатура,
			|	ТекущаяТаблица.Характеристика КАК Характеристика,
			|	ТекущаяТаблица.Тип КАК Тип,
			|	ТекущаяТаблица.Серия КАК Серия,
			|	ТекущаяТаблица.Номер КАК Номер
			|ПОМЕСТИТЬ ТекущаяТаблица
			|ИЗ
			|	&ТаблицаНабор КАК ТекущаяТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиСтрогойОтчетностиОстатки.Склад КАК Склад,
			|	БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	БланкиСтрогойОтчетностиОстатки.Номенклатура КАК Номенклатура,
			|	БланкиСтрогойОтчетностиОстатки.Характеристика КАК Характеристика,
			|	БланкиСтрогойОтчетностиОстатки.Тип КАК Тип,
			|	БланкиСтрогойОтчетностиОстатки.Серия КАК Серия,
			|	БланкиСтрогойОтчетностиОстатки.Номер КАК Номер,
			|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток КАК Количество,
			|	БланкиСтрогойОтчетностиОстатки.СуммаОстаток КАК Сумма
			|ПОМЕСТИТЬ ВсеОстатки
			|ИЗ
			|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
			|			&Период,
			|			Склад = &Склад
			|				И ФизическоеЛицо = &ФизическоеЛицо
			|				И (Номенклатура, Характеристика, Тип, Серия) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ТекущаяТаблица.Номенклатура,
			|						ТекущаяТаблица.Характеристика,
			|						ТекущаяТаблица.Тип,
			|						ТекущаяТаблица.Серия
			|					ИЗ
			|						ТекущаяТаблица КАК ТекущаяТаблица)) КАК БланкиСтрогойОтчетностиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеОстатки.Склад КАК Склад,
			|	ВсеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВсеОстатки.Номенклатура КАК Номенклатура,
			|	ВсеОстатки.Характеристика КАК Характеристика,
			|	ВсеОстатки.Тип КАК Тип,
			|	ВсеОстатки.Серия КАК Серия,
			|	ВсеОстатки.Номер КАК Номер,
			|	ВсеОстатки.Сумма КАК Сумма,
			|	ВсеОстатки.Количество КАК Количество
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	ВсеОстатки КАК ВсеОстатки
			|		ВНУТРЕННеЕ СОЕДИНеНИЕ ТекущаяТаблица КАК ТекущаяТаблица
			|		ПО ВсеОстатки.Номенклатура = ТекущаяТаблица.Номенклатура
			|			И ВсеОстатки.Характеристика = ТекущаяТаблица.Характеристика
			|			И ВсеОстатки.Тип = ТекущаяТаблица.Тип
			|			И ВсеОстатки.Серия = ТекущаяТаблица.Серия
			|			И ВсеОстатки.Номер = ТекущаяТаблица.Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ИтоговаяТаблица.Склад КАК Склад,
			|	ИтоговаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
			|	ИтоговаяТаблица.Характеристика КАК Характеристика,
			|	ИтоговаяТаблица.Тип КАК Тип,
			|	ИтоговаяТаблица.Серия КАК Серия,
			|	ИтоговаяТаблица.Номер КАК Номер,
			|	ИтоговаяТаблица.Сумма КАК Сумма,
			|	ИтоговаяТаблица.Количество КАК Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица
			|ИТОГИ
			|	СУММА(Сумма),
			|	СУММА(Количество)
			|ПО
			|	ОБЩИЕ";
			
			РезультатСтрока = ЗапросСтрока.Выполнить();
			Если РезультатСтрока.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСтрока = РезультатСтрока.Выбрать();
			ВыборкаСтрока.Следующий();
			
			Если ВыборкаСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИтогоСумма = ВыборкаСтрока.Сумма;
			
			Движение = НаборЗаписейХозрасчетный.Добавить();
			Движение.Период = Источник.Дата;
			Движение.Организация = Источник.Организация;
			Движение.ПодразделениеКт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Списание использованных БСО";
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_02;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "РаботникиОрганизаций", ВыборкаБСО.ФизическоеЛицо);
			Движение.КоличествоКт = ВыборкаБСО.Количество;
			Движение.Сумма = ИтогоСумма;
			
			Пока ВыборкаСтрока.Следующий() Цикл
				НоваяЗапись = ТаблицаНаборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрока);
			КонецЦикла;
		КонецЦикла;
		
		Если НаборЗаписейХозрасчетный.Количество() <> 0 Тогда
			НаборЗаписейХозрасчетный.Записать(Ложь);
		КонецЕсли;
		
		ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, СтруктураШапкиДокумента.Ссылка);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПеремещениеВЭксплуатации") И Источник.РежимИспользованияБСО Тогда
		
		Запрос.Текст = СформироватьТекстЗапросаПоТЧ(Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНаборОбщая = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
		
		НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = СтруктураШапкиДокумента.Ссылка;
		НаборЗаписейХозрасчетный.Отбор.Регистратор.Использование = Истина;
		
		ВыборкаБСО = Результат.Выбрать();
		Пока ВыборкаБСО.Следующий() Цикл
			ТаблицаНабор = ТаблицаНомеровБСО(ВыборкаБСО);
			Если ТаблицаНабор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСтрока = Новый Запрос;
			ЗапросСтрока.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
			ЗапросСтрока.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
			ЗапросСтрока.УстановитьПараметр("Склад", Справочники.Склады.ПустаяСсылка());
			ЗапросСтрока.УстановитьПараметр("ФизическоеЛицо", ВыборкаБСО.ФизическоеЛицо);
			ЗапросСтрока.УстановитьПараметр("ФизическоеЛицоПолучатель", ВыборкаБСО.ФизическоеЛицоПолучатель);
			ЗапросСтрока.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущаяТаблица.Номенклатура КАК Номенклатура,
			|	ТекущаяТаблица.Характеристика КАК Характеристика,
			|	ТекущаяТаблица.Тип КАК Тип,
			|	ТекущаяТаблица.Серия КАК Серия,
			|	ТекущаяТаблица.Номер КАК Номер
			|ПОМЕСТИТЬ ТекущаяТаблица
			|ИЗ
			|	&ТаблицаНабор КАК ТекущаяТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиСтрогойОтчетностиОстатки.Склад КАК Склад,
			|	БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	БланкиСтрогойОтчетностиОстатки.Номенклатура КАК Номенклатура,
			|	БланкиСтрогойОтчетностиОстатки.Характеристика КАК Характеристика,
			|	БланкиСтрогойОтчетностиОстатки.Тип КАК Тип,
			|	БланкиСтрогойОтчетностиОстатки.Серия КАК Серия,
			|	БланкиСтрогойОтчетностиОстатки.Номер КАК Номер,
			|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток КАК Количество,
			|	БланкиСтрогойОтчетностиОстатки.СуммаОстаток КАК Сумма
			|ПОМЕСТИТЬ ВсеОстатки
			|ИЗ
			|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
			|			&Период,
			|			Склад = &Склад
			|				И ФизическоеЛицо = &ФизическоеЛицо
			|				И (Номенклатура, Характеристика, Тип, Серия) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ТекущаяТаблица.Номенклатура,
			|						ТекущаяТаблица.Характеристика,
			|						ТекущаяТаблица.Тип,
			|						ТекущаяТаблица.Серия
			|					ИЗ
			|						ТекущаяТаблица КАК ТекущаяТаблица)) КАК БланкиСтрогойОтчетностиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	ВсеОстатки.Склад КАК Склад,
			|	ВсеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВсеОстатки.Номенклатура КАК Номенклатура,
			|	ВсеОстатки.Характеристика КАК Характеристика,
			|	ВсеОстатки.Тип КАК Тип,
			|	ВсеОстатки.Серия КАК Серия,
			|	ВсеОстатки.Номер КАК Номер,
			|	ВсеОстатки.Сумма КАК Сумма,
			|	ВсеОстатки.Количество КАК Количество
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	ВсеОстатки КАК ВсеОстатки
			|		ВНУТРЕННеЕ СОЕДИНеНИЕ ТекущаяТаблица КАК ТекущаяТаблица
			|		ПО ВсеОстатки.Номенклатура = ТекущаяТаблица.Номенклатура
			|			И ВсеОстатки.Характеристика = ТекущаяТаблица.Характеристика
			|			И ВсеОстатки.Тип = ТекущаяТаблица.Тип
			|			И ВсеОстатки.Серия = ТекущаяТаблица.Серия
			|			И ВсеОстатки.Номер = ТекущаяТаблица.Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ИтоговаяТаблица.Склад КАК Склад,
			|	ИтоговаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
			|	ИтоговаяТаблица.Характеристика КАК Характеристика,
			|	ИтоговаяТаблица.Тип КАК Тип,
			|	ИтоговаяТаблица.Серия КАК Серия,
			|	ИтоговаяТаблица.Номер КАК Номер,
			|	ИтоговаяТаблица.Сумма КАК Сумма,
			|	ИтоговаяТаблица.Сумма КАК СуммаРегл,
			|	ИтоговаяТаблица.Количество КАК Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
			|	ИтоговаяТаблица.Склад,
			|	&ФизическоеЛицоПолучатель,
			|	ИтоговаяТаблица.Номенклатура,
			|	ИтоговаяТаблица.Характеристика,
			|	ИтоговаяТаблица.Тип,
			|	ИтоговаяТаблица.Серия,
			|	ИтоговаяТаблица.Номер,
			|	ИтоговаяТаблица.Сумма,
			|	0,
			|	ИтоговаяТаблица.Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица
			|ИТОГИ
			|	СУММА(СуммаРегл),
			|	СУММА(Количество)
			|ПО
			|	ОБЩИЕ";
			
			РезультатСтрока = ЗапросСтрока.Выполнить();
			Если РезультатСтрока.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСтрока = РезультатСтрока.Выбрать();
			ВыборкаСтрока.Следующий();
			
			Если ВыборкаСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИтогоСумма = ВыборкаСтрока.СуммаРегл;
			
			Движение = НаборЗаписейХозрасчетный.Добавить();
			Движение.Период = Источник.Дата;
			Движение.Организация = Источник.Организация;
			Движение.ПодразделениеКт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Перемещение БСО";
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_02;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "РаботникиОрганизаций", ВыборкаБСО.ФизическоеЛицо);
			Движение.КоличествоКт = ВыборкаБСО.Количество;
			Движение.Сумма = ИтогоСумма;
			
			Движение = НаборЗаписейХозрасчетный.Добавить();
			Движение.Период = Источник.Дата;
			Движение.Организация = Источник.Организация;
			Движение.ПодразделениеДт = Справочники.СтруктураПредприятия.ПустаяСсылка();
			Движение.Содержание = "Перемещение БСО";
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности_006_02;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Номенклатура", ВыборкаБСО.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "РаботникиОрганизаций", ВыборкаБСО.ФизическоеЛицоПолучатель);
			Движение.КоличествоДт = ВыборкаБСО.Количество;
			Движение.Сумма = ИтогоСумма;
			
			Пока ВыборкаСтрока.Следующий() Цикл
				НоваяЗапись = ТаблицаНаборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрока);
			КонецЦикла;
		КонецЦикла;
		
		Если НаборЗаписейХозрасчетный.Количество() <> 0 Тогда
			НаборЗаписейХозрасчетный.Записать(Ложь);
		КонецЕсли;
		
		ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, СтруктураШапкиДокумента.Ссылка);
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") И Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров И Источник.РежимИспользованияБСО Тогда
		СтруктураШапкиДокумента.Вставить("СкладОтправитель", Источник.СкладОтправитель);
		СтруктураШапкиДокумента.Вставить("СкладПолучатель", Источник.СкладПолучатель);
		
		Запрос.Текст = СформироватьТекстЗапросаПоТЧ(Источник.Ссылка, Источник.ХозяйственнаяОперация);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНаборОбщая = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
		
		ВыборкаБСО = Результат.Выбрать();
		Пока ВыборкаБСО.Следующий() Цикл
			ТаблицаНабор = ТаблицаНомеровБСО(ВыборкаБСО);
			Если ТаблицаНабор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросСтрока = Новый Запрос;
			ЗапросСтрока.УстановитьПараметр("ТаблицаНабор", ТаблицаНабор);
			ЗапросСтрока.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
			ЗапросСтрока.УстановитьПараметр("Склад", СтруктураШапкиДокумента.СкладОтправитель);
			ЗапросСтрока.УстановитьПараметр("СкладПолучатель", СтруктураШапкиДокумента.СкладПолучатель);
			ЗапросСтрока.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.Номенклатура КАК Номенклатура,
			|	ТекущаяТаблица.Характеристика КАК Характеристика,
			|	ТекущаяТаблица.Тип КАК Тип,
			|	ТекущаяТаблица.Серия КАК Серия,
			|	ТекущаяТаблица.Номер КАК Номер
			|ПОМЕСТИТЬ ТекущаяТаблица
			|ИЗ
			|	&ТаблицаНабор КАК ТекущаяТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БланкиСтрогойОтчетностиОстатки.Склад КАК Склад,
			|	БланкиСтрогойОтчетностиОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	БланкиСтрогойОтчетностиОстатки.Номенклатура КАК Номенклатура,
			|	БланкиСтрогойОтчетностиОстатки.Характеристика КАК Характеристика,
			|	БланкиСтрогойОтчетностиОстатки.Тип КАК Тип,
			|	БланкиСтрогойОтчетностиОстатки.Серия КАК Серия,
			|	БланкиСтрогойОтчетностиОстатки.Номер КАК Номер,
			|	БланкиСтрогойОтчетностиОстатки.КоличествоОстаток КАК Количество,
			|	БланкиСтрогойОтчетностиОстатки.СуммаОстаток КАК Сумма
			|ПОМЕСТИТЬ ВсеОстатки
			|ИЗ
			|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(
			|			&Период,
			|			Склад = &Склад
			|				И (Номенклатура, Характеристика, Тип, Серия) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ТекущаяТаблица.Номенклатура,
			|						ТекущаяТаблица.Характеристика,
			|						ТекущаяТаблица.Тип,
			|						ТекущаяТаблица.Серия
			|					ИЗ
			|						ТекущаяТаблица КАК ТекущаяТаблица)) КАК БланкиСтрогойОтчетностиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	ВсеОстатки.Склад КАК Склад,
			|	ВсеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВсеОстатки.Номенклатура КАК Номенклатура,
			|	ВсеОстатки.Характеристика КАК Характеристика,
			|	ВсеОстатки.Тип КАК Тип,
			|	ВсеОстатки.Серия КАК Серия,
			|	ВсеОстатки.Номер КАК Номер,
			|	ВсеОстатки.Сумма КАК Сумма,
			|	1 КАК Количество
			|ПОМЕСТИТЬ ИтоговаяТаблица
			|ИЗ
			|	ВсеОстатки КАК ВсеОстатки
			|		ВНУТРЕННеЕ СОЕДИНеНИЕ ТекущаяТаблица КАК ТекущаяТаблица
			|		ПО ВсеОстатки.Номенклатура = ТекущаяТаблица.Номенклатура
			|			И ВсеОстатки.Характеристика = ТекущаяТаблица.Характеристика
			|			И ВсеОстатки.Тип = ТекущаяТаблица.Тип
			|			И ВсеОстатки.Серия = ТекущаяТаблица.Серия
			|			И ВсеОстатки.Номер = ТекущаяТаблица.Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ИтоговаяТаблица.Склад КАК Склад,
			|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
			|	ИтоговаяТаблица.Характеристика КАК Характеристика,
			|	ИтоговаяТаблица.Тип КАК Тип,
			|	ИтоговаяТаблица.Серия КАК Серия,
			|	ИтоговаяТаблица.Номер КАК Номер,
			|	ИтоговаяТаблица.Сумма КАК Сумма,
			|	ИтоговаяТаблица.Количество КАК Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИтоговаяТаблица.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
			|	&СкладПолучатель,
			|	ИтоговаяТаблица.Номенклатура,
			|	ИтоговаяТаблица.Характеристика,
			|	ИтоговаяТаблица.Тип,
			|	ИтоговаяТаблица.Серия,
			|	ИтоговаяТаблица.Номер,
			|	ИтоговаяТаблица.Сумма,
			|	ИтоговаяТаблица.Количество
			|ИЗ
			|	ИтоговаяТаблица КАК ИтоговаяТаблица";
			
			РезультатСтрока = ЗапросСтрока.Выполнить();
			Если РезультатСтрока.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСтрока = РезультатСтрока.Выбрать();
			Пока ВыборкаСтрока.Следующий() Цикл
				НоваяЗапись = ТаблицаНаборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьДвиженияУпр(СтруктураШапкиДокумента, ВыборкаБСО)
	ТаблицаНабор = РегистрыНакопления.БланкиСтрогойОтчетности.СтруктураРегистра();
	
	Пока ВыборкаБСО.Следующий() Цикл
		Если Не ПроверкаРеквизитовБСО(ВыборкаБСО) Тогда
			Продолжить;
		КонецЕсли;
		
		НачальныйНомер = Число(ВыборкаБСО.НачальныйНомер);
		КонечныйНомер = Число(ВыборкаБСО.КонечныйНомер);
		КоличествоБСО = КонечныйНомер - НачальныйНомер + 1;
		
		Если ВыборкаБСО.Количество = КоличествоБСО Тогда
			ДлинаСтр = Макс(СтрДлина(ВыборкаБСО.НачальныйНомер), СтрДлина(ВыборкаБСО.КонечныйНомер));
			
			Для Номер = НачальныйНомер По КонечныйНомер Цикл
				НоваяЗапись = ТаблицаНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаБСО);
				
				НоваяЗапись.Количество = 1;
				НоваяЗапись.Сумма = ВыборкаБСО.Цена;
				НоваяЗапись.Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(Номер, ДлинаСтр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаНабор.Количество() > 0 Тогда
		НаборЗаписей = РегистрыНакопления.БланкиСтрогойОтчетности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		НаборЗаписей.Загрузить(ТаблицаНабор);
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьНаборБСОПоРегистратору(ТаблицаНаборОбщая, Регистратор)
	Если ТаблицаНаборОбщая.Количество() > 0 Тогда
		НаборЗаписей = РегистрыНакопления.БланкиСтрогойОтчетности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Загрузить(ТаблицаНаборОбщая);
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодборБланковСтрогойОтчетности

Процедура НайтиДобавитьСтрокиБСО(ПолныйОбъект, Адрес, ИмяТЧ = "Товары", ОбнулитьСуммы = Истина) Экспорт
	ТЗ_Подбор = ПолучитьИзВременногоХранилища(Адрес);
	Если ТЗ_Подбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбнулитьСуммы Тогда
		ТЗ_Подбор.ЗаполнитьЗначения(0, "Сумма");
	КонецЕсли;
	
	Для каждого Стр Из ПолныйОбъект[ИмяТЧ] Цикл
		Если (Не ЗначениеЗаполнено(Стр.ТипБСО) И ПустаяСтрока(Стр.СерияБСО)) Или (ПустаяСтрока(Стр.НачальныйНомерБСО) И ПустаяСтрока(Стр.КонечныйНомерБСО)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоС = ?(ПустаяСтрока(Стр.НачальныйНомерБСО), Число(Стр.КонечныйНомерБСО), Число(Стр.НачальныйНомерБСО));
		ЧислоПо = ?(ПустаяСтрока(Стр.КонечныйНомерБСО), Число(Стр.НачальныйНомерБСО), Число(Стр.КонечныйНомерБСО));
		ДлинаНомера = Макс(СтрДлина(Стр.НачальныйНомерБСО), СтрДлина(Стр.КонечныйНомерБСО));
		
		Пока ЧислоС <= ЧислоПо Цикл
			НоваяСтрока = ТЗ_Подбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			
			НоваяСтрока.Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(ЧислоС, ДлинаНомера);
			НоваяСтрока.Количество = 1;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Тип = Стр.ТипБСО;
			НоваяСтрока.Серия = Стр.СерияБСО;
			
			Если ТипЗнч(ПолныйОбъект[ИмяТЧ]) = Тип("ДокументТабличнаяЧасть.ВозвратТоваровПоставщику.Товары") Тогда
				НоваяСтрока.Сумма = Стр.Цена;
			КонецЕсли;
			
			ЧислоС = ЧислоС + 1;
		КонецЦикла;
	КонецЦикла;
	
	ТЗ = УчетБланковСтрогойОтчетностиСервер.СвернутьТаблицуБСО(ТЗ_Подбор);
	
	Для каждого ПозицияТЗ Из ТЗ Цикл
		ПараметрыОтбора = Новый Структура;
		
		Если ТипЗнч(ПолныйОбъект[ИмяТЧ]) = Тип("ДокументТабличнаяЧасть.ВнутреннееПотреблениеТоваров.Товары")
			Или ТипЗнч(ПолныйОбъект[ИмяТЧ]) = Тип("ДокументТабличнаяЧасть.СписаниеИзЭксплуатации.Товары")
			Или ТипЗнч(ПолныйОбъект[ИмяТЧ]) = Тип("ДокументТабличнаяЧасть.ПеремещениеВЭксплуатации.Товары") Тогда
			
			ПараметрыОтбора.Вставить("ФизическоеЛицо", ПозицияТЗ.ФизическоеЛицо);
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("Номенклатура", ПозицияТЗ.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ПозицияТЗ.Характеристика);
		ПараметрыОтбора.Вставить("ТипБСО", ПозицияТЗ.Тип);
		ПараметрыОтбора.Вставить("СерияБСО", ПозицияТЗ.Серия);
		
		НайденныеСтроки = ПолныйОбъект[ИмяТЧ].НайтиСтроки(ПараметрыОтбора);
		Для каждого ЭлементСтрока Из НайденныеСтроки Цикл
			ПолныйОбъект[ИмяТЧ].Удалить(ЭлементСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ПозицияТЗ Из ТЗ Цикл
		Стр = ПолныйОбъект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(Стр, ПозицияТЗ);
		
		Если ТипЗнч(ПолныйОбъект[ИмяТЧ]) = Тип("ДокументТабличнаяЧасть.ВозвратТоваровПоставщику.Товары") Тогда
			Стр.Цена = ПозицияТЗ.Сумма;
			Стр.Сумма = Стр.Цена * Стр.Количество
		КонецЕсли;
		
		Стр.ТипБСО = ПозицияТЗ.Тип;
		Стр.СерияБСО = ПозицияТЗ.Серия;
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(Адрес);
КонецПроцедуры

Функция СтруктураСлужебнойТаблицыБСО() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЗ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗ.Колонки.Добавить("Тип", Новый ОписаниеТипов("СправочникСсылка.БланкиСтрогойОтчетности"));
	ТЗ.Колонки.Добавить("Серия", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТЗ.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("НомерБланка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТЗ.Колонки.Добавить("ДлинаНомера", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТЗ.Колонки.Добавить("НачальныйНомерБСО", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("КонечныйНомерБСО", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
	
	Возврат ТЗ;
	
КонецФункции

Функция СвернутьТаблицуБСО(ТаблицаБСО, СоздаватьТаблицуБСО = Истина) Экспорт
	КолонкаНомер = ТаблицаБСО.Колонки.Найти("Номер") = Неопределено;
	
	Если СоздаватьТаблицуБСО Тогда
		ИтоговаяТаблицаБСО = УчетБланковСтрогойОтчетностиСервер.СтруктураСлужебнойТаблицыБСО();
	Иначе
		ИтоговаяТаблицаБСО = ТаблицаБСО.СкопироватьКолонки();
	КонецЕсли;
	
	ТаблицаНомераБСО = ИтоговаяТаблицаБСО.СкопироватьКолонки();
	
	СписокКолонок = "";
	Для каждого Стр Из ИтоговаяТаблицаБСО.Колонки Цикл
		СписокКолонок = СписокКолонок + Стр.Имя + ",";
	КонецЦикла;
	СписокКолонок = Лев(СписокКолонок, СтрДлина(СписокКолонок) - 1);
	
	Для каждого Стр Из ТаблицаБСО Цикл
		Если КолонкаНомер Или ПустаяСтрока(Стр.Номер) Тогда
			ЧислоС = ?(ПустаяСтрока(Стр.НачальныйНомерБСО), Число(Стр.КонечныйНомерБСО), Число(Стр.НачальныйНомерБСО));
			ЧислоПо = ?(ПустаяСтрока(Стр.КонечныйНомерБСО), Число(Стр.НачальныйНомерБСО), Число(Стр.КонечныйНомерБСО));
			ДлинаНомера = Макс(СтрДлина(Стр.НачальныйНомерБСО), СтрДлина(Стр.КонечныйНомерБСО));
		Иначе
			ЧислоС = Число(Стр.Номер);
			ЧислоПо = Число(Стр.Номер);
			ДлинаНомера = СтрДлина(Стр.Номер);
		КонецЕсли;
		
		Пока ЧислоС <= ЧислоПо Цикл
			Запись = ТаблицаНомераБСО.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Стр);
			
			Запись.ДлинаНомера = ДлинаНомера;
			Запись.НомерБланка = ЧислоС;
			Запись.Количество = 1;
			Запись.КоличествоУпаковок = 1;
			Запись.Номер = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(ЧислоС, ДлинаНомера);
			Запись.НачальныйНомерБСО = "";
			Запись.КонечныйНомерБСО = "";
			
			ЧислоС = ЧислоС + 1;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаНомераБСО.Свернуть(СписокКолонок);
	//ТаблицаНомераБСО.Свернуть("Склад, ФизическоеЛицо, Номенклатура, Характеристика, Тип, Серия, Номер, Количество, КоличествоУпаковок, Сумма, НомерБланка, ДлинаНомера, НачальныйНомерБСО, КонечныйНомерБСО");
	ТаблицаНомераБСО.Сортировать("Склад, ФизическоеЛицо, Номенклатура, Характеристика, Тип, Серия, НомерБланка");
	
	// Ищем диапазоны номеров бланков
	ЧислоОборотов = ТаблицаНомераБСО.Количество() - 2;
	ЧислоС = ТаблицаНомераБСО[0].НомерБланка; // первый номер бланка
	
	СтандартноеПоведение = Истина;
	Для К = 0 По ЧислоОборотов Цикл
		СтандартноеПоведение = ТаблицаНомераБСО[К].Серия <> ТаблицаНомераБСО[К + 1].Серия Или (ТаблицаНомераБСО[К].НомерБланка + 1) <> ТаблицаНомераБСО[К + 1].НомерБланка
			Или ТаблицаНомераБСО[К].ДлинаНомера <> ТаблицаНомераБСО[К + 1].ДлинаНомера
			Или ТаблицаНомераБСО[К].Сумма <> ТаблицаНомераБСО[К + 1].Сумма;
		
		Если СтандартноеПоведение Или К = ЧислоОборотов Тогда
			ДлинаНомера = ТаблицаНомераБСО[К].ДлинаНомера;
			
			Запись = ИтоговаяТаблицаБСО.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ТаблицаНомераБСО[К]);
			
			Запись.НачальныйНомерБСО = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(ЧислоС, ДлинаНомера);
			
			КонечныйНомер = ТаблицаНомераБСО[К + ?(СтандартноеПоведение, 0, 1)].НомерБланка;
			Запись.КонечныйНомерБСО = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(КонечныйНомер, ДлинаНомера);
			
			Запись.Количество = КонечныйНомер - ЧислоС + 1;
			Запись.КоличествоУпаковок = Запись.Количество;
			
			ЧислоС = ТаблицаНомераБСО[К + 1].НомерБланка;
		КонецЕсли;
	КонецЦикла;
	
	Если СтандартноеПоведение Тогда
		ДлинаНомера = ТаблицаНомераБСО[К].ДлинаНомера;
		
		Запись = ИтоговаяТаблицаБСО.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ТаблицаНомераБСО[К]);
		
		Запись.НачальныйНомерБСО = УчетБланковСтрогойОтчетностиКлиентСервер.ОтформатироватьНомерБланка(ЧислоС, ДлинаНомера);
		Запись.КонечныйНомерБСО = Запись.НачальныйНомерБСО;
		
		Запись.Количество = 1;
		Запись.КоличествоУпаковок = Запись.Количество;
	КонецЕсли;
	
	Возврат ИтоговаяТаблицаБСО;
КонецФункции

#КонецОбласти