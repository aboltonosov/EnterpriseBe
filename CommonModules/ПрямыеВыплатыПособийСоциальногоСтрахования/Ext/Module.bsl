
#Область ПрограммныйИнтерфейс

// Возвращает дату передачи выплаты пособий в ФСС.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//	Дата
//
Функция ДатаПередачиФССВыплатыПособий(Организация) Экспорт

	ДатаВНастройках = РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.Получить(Новый Структура("Организация", Организация)).ДатаПередачиФССВыплатыПособий;
	Возврат ?(ЗначениеЗаполнено(ДатаВНастройках), ДатаВНастройках, МаксимальнаяДатаПередачиФССВыплатыПособий());

КонецФункции

// Определяет по статусу является ли объект редактируемым или нет 
//
// Параметры
//  Статус - Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий
//
// Возвращаемое значение:
//    Булево - истина, если статус позволяет редактировать документ.
//
Функция СтатусПозволяетРедактироватьДокумент(Статус) Экспорт
	СписокСтатусовПозволяющихРедактироватьДокумент = Новый Массив;
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка());
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован);
	
	Возврат СписокСтатусовПозволяющихРедактироватьДокумент.Найти(Статус) <> Неопределено;	
	
КонецФункции 

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	СоответствиеСсылокСвойствам = Новый Соответствие;
	ДокументыРеестрыСведений = Новый Массив;
	ДокументыРеестрыДанныхЭЛН = Новый Массив;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка)  = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
			ДокументыРеестрыСведений.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		ИначеЕсли ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
			ДокументыРеестрыДанныхЭЛН.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыРеестрыСведений.Количество() = 0 И ДокументыРеестрыДанныхЭЛН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыРеестрыСведений", ДокументыРеестрыСведений);
	Запрос.УстановитьПараметр("ДокументыРеестрыДанныхЭЛН", ДокументыРеестрыДанныхЭЛН);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата КАК ДатаСоздания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Комментарий
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|ГДЕ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка В(&ДокументыРеестрыСведений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата КАК ДатаСоздания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Комментарий
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК РеестрДанныхЭЛНЗаполняемыхРаботодателем
	|ГДЕ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка В(&ДокументыРеестрыДанныхЭЛН)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗапрашиваемыеДанные.ВариантОтчета = "-";
	КонецЦикла;
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//		
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Пилотный проект ФСС'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'ЭЛН'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрДанныхЭЛНЗаполняемыхРаботодателем;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц) Экспорт
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ДопустимыеЗначенияРайонногоКоэффициента() Экспорт
	
	ДопустимыеЗначенияРайонногоКоэффициента = Новый Массив;
	
	ROWSET 	= КорневойЭлементРеестраПилотногоПроектаФСС();			
	ROW 	= ЭлементРеестраПилотногоПроектаФСС(ROWSET);
	ФасетыРК = ROW.Свойства().Получить("KF_REG").Тип.Фасеты.Перечисления;
	
	Для Каждого Фасет Из ФасетыРК Цикл
		Если ПустаяСтрока(Фасет.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенноеЗначение = Число(Фасет.Значение) / 100;
		
		ДопустимыеЗначенияРайонногоКоэффициента.Добавить(ПриведенноеЗначение);
		
	КонецЦикла; 
	
	Возврат ДопустимыеЗначенияРайонногоКоэффициента;	
	
КонецФункции 

Функция КатегорииНачисленийПособийПоПрямымВыплатамФСС() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.КатегорииНачисленийПособийПоПрямымВыплатамФСС();	
	
КонецФункции

Функция ПособиеПлатитУчастникПилотногоПроекта(Организация, ДатаВыплатыПособия) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПособиеПлатитУчастникПилотногоПроекта = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект = ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, ДатаВыплатыПособия);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект
		Или ДатаВыплатыПособия >= ДатаПередачиФССВыплатыПособий(Организация)  Тогда 
		ПособиеПлатитУчастникПилотногоПроекта = Истина
	Иначе
		ПособиеПлатитУчастникПилотногоПроекта = Ложь;
	КонецЕсли;  
	
	Возврат ПособиеПлатитУчастникПилотногоПроекта  
	
КонецФункции

Функция ТекстСообщенияЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация) Экспорт 
	
	ТекстСообщения = НСтр("ru = 'Организация %1 зарегистрирована в одном из регионов, где в настоящее время проводится Пилотный проект ФСС по непосредственной выплате пособий.
	|Необходимо указать дату вступления в Пилотный проект в учетной политике организации, либо уточнить ИНН и КПП организации.'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция - Проверить выплату пособия участником пилотного проекта ФСС
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - ссылка на организацию выплаты которой проверяются
//  ПериодРегистрации - Дата
//  Пособия		 - 	Таблица значение, колонки: Начисление, Результат 
// 
// Возвращаемое значение:
//  ТекстОшибки - строка. 
//
Функция ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, ПериодРегистрации, Пособия) Экспорт
	
	ТекстОшибки = "";
	
	Если Пособия.Количество() = 0 Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДатаПередачиФССВыплатыПособий = ДатаПередачиФССВыплатыПособий(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаПередачиФССВыплатыПособий) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если ПериодРегистрации < ДатаПередачиФССВыплатыПособий Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	КатегорииНачисленийПособийПоПрямымВыплатамФСС = КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	Для каждого Пособие Из Пособия Цикл
		ОписаниеНачисления = ЗарплатаКадрыПовтИсп.ПолучитьИнформациюОВидеРасчета(Пособие.Начисление);
		Если КатегорииНачисленийПособийПоПрямымВыплатамФСС.Найти(ОписаниеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено
			И Пособие.Результат > 0 Тогда
			ТекстОшибки = НСтр("ru = 'С %1 пособие %2 не может быть начислено в организации - участнике пилотного проекта по прямым выплатам пособий.'");	
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ДатаПередачиФССВыплатыПособий, "ДЛФ=D"), Пособие.Начисление);
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Функция подготавливает пустую таблицу для механизма проверки оплаты пособий участником пилотного проекта ФСС
// 
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений
//
Функция ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Начисление");
	Таблица.Колонки.Добавить("Результат");

	Возврат Таблица;
	
КонецФункции 

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.37";
	Обработчик.Процедура = "Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЗаполнитьТабличнуюЧастьФизическихЛицИНаборыЗначенийДоступа";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.37";
	Обработчик.Процедура = "Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий.ЗаполнитьТабличнуюЧастьФизическихЛицИНаборыЗначенийДоступа";
	Обработчик.НачальноеЗаполнение = Ложь;
		
КонецПроцедуры	

#КонецОбласти   

// Определяет есть ли в массиве начислений пособия оплачиваемые за счет ФСС 
//
// Параметры
//  МассивНачислений - массив или список значений содержащий виды расчетов
//
// Возвращаемое значение:
//    Булево - истина, если в массиве начислений есть пособия за счет ФСС.
//
Функция КоллекцияСодержитПособияЗаСчетФСС(МассивНачислений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&МассивНачислений)
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&МассивКатегорий)";
	Запрос.УстановитьПараметр("МассивНачислений", МассивНачислений);
	Запрос.УстановитьПараметр("МассивКатегорий", ПрямыеВыплатыПособийСоциальногоСтрахования.КатегорииНачисленийПособийПоПрямымВыплатамФСС());
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет по КПП организации, является ли она участником пилотного проекта 
// и если является, введена ли для этой организации дата передачи в ФСС выплаты пособий
//
// Параметры
//	Организация - СправочникСсылка.Организации.
//
Функция ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, ДатаАктуальности) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности);
	Если РегистрацияВНалоговомОргане.Пустая() Тогда
		Возврат Ложь; // Нет информации о регистрации в налоговом органе.
	КонецЕсли;
	
	КодыРегионовПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.КодыРегионовПилотногоПроекта();
	КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
	ДатаВступленияРегиона = КодыРегионовПилотногоПроекта[Лев(КПП, 2)];
	Если ДатаВступленияРегиона = Неопределено
		Или ДатаВступленияРегиона > ДатаАктуальности Тогда
		Возврат Ложь; // Регион не участвует в пилотном проекте или на указанную дату регион еще не участвовал в проекте.
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий
	|ИЗ
	|	РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
	|ГДЕ
	|	НастройкиУчетаПособийСоциальногоСтрахования.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаЗаполнена = Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаПередачиФССВыплатыПособий);
	
	Возврат Не ДатаЗаполнена; // Регион участвует, но в учетной политике не заполнена дата вступления.
КонецФункции

Функция МаксимальнаяДатаПередачиФССВыплатыПособий()

	Возврат '30000101';

КонецФункции

#Область ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Организация, Ссылка, ОплатаДнейУходаЗаДетьмиИнвалидами = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Организация, Ссылка, ОплатаДнейУходаЗаДетьмиИнвалидами);
	
КонецФункции 

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции 

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеДокументаЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции 

#КонецОбласти

#Область ЗаявлениеВФССОВозмещенииРасходовНаПогребение

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие);
	
КонецФункции 

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции 

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции 

#КонецОбласти

#Область ЗаявлениеСотрудникаНаВыплатуПособия

Функция РеестрПоЗаявлению(Заявление) Экспорт
	
	Реестр = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реестры.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СтатусДокумента
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Реестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|		ПО Реестры.Ссылка = РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка
	|ГДЕ
	|	Реестры.Заявление = &Заявление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка,
	|	ОписьЗаявленийСотрудниковНаВыплатуПособий.СтатусДокумента
	|ИЗ
	|	Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Заявления КАК ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий КАК ОписьЗаявленийСотрудниковНаВыплатуПособий
	|		ПО ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка = ОписьЗаявленийСотрудниковНаВыплатуПособий.Ссылка
	|ГДЕ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Заявление = &Заявление";
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Реестр = Новый Структура("Реестр, СтатусДокумента", Выборка.Ссылка, Выборка.СтатусДокумента);
	КонецЕсли;
	
	Возврат Реестр;
	
КонецФункции 
	
Функция ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Объект) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Объект);
	
КонецФункции 
	
Функция РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение);
	
КонецФункции

// Функция находит вид на жительство или разрешение на проживание для физлица
Функция ДокументРазрешениеНаПроживаниеФизическогоЛица(ФизическоеЛицо, Дата) Экспорт
	
	СтруктураПолейДокумента  = Новый Структура("ВидДокумента, Серия, Номер, ДатаВыдачи");
	СтруктураПолейДокумента.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	СтруктураПолейДокумента.Серия = "";
	СтруктураПолейДокумента.Номер = "";
	СтруктураПолейДокумента.ДатаВыдачи = '00010101';
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ВидыДокументовФизическихЛиц.КодМВД КАК КодМВД,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка
	|			И (ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД = ""15"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодМВД";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПолейДокумента, Выборка);
	КонецЕсли;
	
	Возврат	 СтруктураПолейДокумента
	
КонецФункции

Функция ТипДокументаОснованияЗаявленияСотрудникаНаВыплатуПособия(ВидПособия) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ТипДокументаОснованияЗаявленияСотрудникаНаВыплатуПособия(ВидПособия);
	
КонецФункции

Функция СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование);
	
КонецФункции

Функция ВидПособияИмеетДокументОснование(ВидПособия) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ВидПособияИмеетДокументОснование(ВидПособия);
	
КонецФункции

Функция ДоляРабочегоВремениСотрудника(Сотрудник, Дата) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДоляРабочегоВремениСотрудника(Сотрудник, Дата);
	
КонецФункции

Процедура ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати) Экспорт 

	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати);

КонецПроцедуры

#КонецОбласти

#Область РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	
Функция СведенияПервичныхДокументовНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление = Неопределено) Экспорт
	
	СведенияНеобходимыеДляНазначенияПособий = Неопределено;

	Если Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПособияПоНетрудоспособности Тогда
		СведенияНеобходимыеДляНазначенияПособий = СведенияБольничныхЛистовНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление);
	ИначеЕсли Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЕдиновременныеПособияПриРожденииРебенка Тогда
		СведенияНеобходимыеДляНазначенияПособий = СведенияЕдиновременныхПособийПриРожденииНеобходимыеДляНазначенияИВыплатыПособий(Объект);
	ИначеЕсли Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПособияВставшимНаУчетВРанниеСроки Тогда
		СведенияНеобходимыеДляНазначенияПособий = СведенияПоПособиямВставшимНаУчетВРанниеСрокиНеобходимыеДляНазначенияИВыплатыПособий(Объект);
	ИначеЕсли Объект.ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЕжемесячныеПособияПоУходуЗаРебенком Тогда
		СведенияНеобходимыеДляНазначенияПособий = СведенияОтпусковПоУходуНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление);
	КонецЕсли;
	
	Возврат СведенияНеобходимыеДляНазначенияПособий;
	
КонецФункции 

Функция СведенияБольничныхЛистовНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.СведенияБольничныхЛистовНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление);
	
КонецФункции

Функция СведенияОтпусковПоУходуНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.СведенияОтпусковПоУходуНеобходимыеДляНазначенияИВыплатыПособий(Объект, Заявление);
	
КонецФункции

Функция СведенияЕдиновременныхПособийПриРожденииНеобходимыеДляНазначенияИВыплатыПособий(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрСведенийУчтенных.Заявление
	|ПОМЕСТИТЬ УчтенныеЗаявления
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК РеестрСведенийУчтенных
	|ГДЕ
	|	РеестрСведенийУчтенных.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявления.Ссылка КАК Заявление
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
	|ГДЕ
	|	Заявления.ВидПособия В (ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка))
	|	И Заявления.Организация = &Организация
	|	И Заявления.Проведен
	|	И НЕ Заявления.Ссылка В
	|				(ВЫБРАТЬ
	|					УчтенныеЗаявления.Заявление
	|				ИЗ
	|					УчтенныеЗаявления КАК УчтенныеЗаявления)";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция СведенияПоПособиямВставшимНаУчетВРанниеСрокиНеобходимыеДляНазначенияИВыплатыПособий(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрСведенийУчтенных.Заявление
	|ПОМЕСТИТЬ УчтенныеЗаявления
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК РеестрСведенийУчтенных
	|ГДЕ
	|	РеестрСведенийУчтенных.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявления.Ссылка КАК Заявление
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
	|ГДЕ
	|	Заявления.ВидПособия В (ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеВставшимНаУчетВРанниеСроки))
	|	И Заявления.Проведен
	|	И НЕ Заявления.Ссылка В
	|				(ВЫБРАТЬ
	|					УчтенныеЗаявления.Заявление
	|				ИЗ
	|					УчтенныеЗаявления КАК УчтенныеЗаявления)";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ОписаниеФиксацииРеквизитовРеестраСведенийНеобходимыхДляНазначенияИВыплатыПособий() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовРеестраСведенийНеобходимыхДляНазначенияИВыплатыПособий();
	
КонецФункции 

#КонецОбласти

#Область РаботаСXDTO

Функция URIПространстваИменРеестровФСС() Экспорт
	
	Возврат "http://pilot.fss.ru/1.7";	
	
КонецФункции 

Функция КорневойЭлементРеестраПилотногоПроектаФСС() Экспорт
	
	URIПространстваИменРеестровФСС 	= URIПространстваИменРеестровФСС();
	ПакетXDTOРеестровФСС 			= ФабрикаXDTO.Пакеты.Получить(URIПространстваИменРеестровФСС);
	ТипROWSET 						= ПакетXDTOРеестровФСС.КорневыеСвойства.Получить("ROWSET").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROWSET);
	
КонецФункции 

Функция ЭлементРеестраПилотногоПроектаФСС(КорневойXDTOЭлемент) Экспорт
	
	ТипROW = КорневойXDTOЭлемент.Свойства().Получить("ROW").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROW);
	
КонецФункции 

Функция СписокЭлементовРеестраПилотногоПроектаФСС(ROWSET) Экспорт
	
	Возврат ROWSET["ROW"];
	
КонецФункции 

Функция ЗаписатьРеестрВСтрокуXML(ROWSET) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ROWSET, "ROWSET");
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции

Процедура УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML) Экспорт
	
	АтрибутXMLNS = "xmlns=""" + URIПространстваИменРеестровФСС() + """";
	СтрокаXML = СтрЗаменить(СтрокаXML, АтрибутXMLNS, ""); 
	
КонецПроцедуры 

#КонецОбласти

Функция ЗапросПоСтруктуре(Структура) Экспорт
	
	Запрос = Новый Запрос;  
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонПоля = " &#Парам# КАК #Парам#,";
	
	Текст = "ВЫБРАТЬ #Поля#
	|	ПОМЕСТИТЬ ВТВторичныеДанные";
	
	Поля = "";
	
	Для каждого Поле Из Структура Цикл
		Поля = Поля + Символы.ПС + СтрЗаменить(ШаблонПоля, "#Парам#", Поле.Ключ);
		Запрос.Параметры.Вставить(Поле.Ключ);
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Поля, 1);
	Запрос.Текст = СтрЗаменить(Текст, "#Поля#", Поля);
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, Структура); 
	
	Возврат Запрос
	
КонецФункции 

Функция ЗапросПоСтрокеПолей(СтрокаПолей) Экспорт
	
	Запрос = Новый Запрос;  
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонПоля = " ЕстьNULL(&#Парам#, """") КАК #Парам#,";
	
	Текст = "ВЫБРАТЬ #Поля#
	|	ПОМЕСТИТЬ ВТВторичныеДанные";
	
	Поля = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей);
	Для каждого Поле Из МассивПолей Цикл
		Поля = Поля + Символы.ПС + СтрЗаменить(ШаблонПоля, "#Парам#", Поле);
		Запрос.Параметры.Вставить(Поле);
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Поля, 1);
	Запрос.Текст = СтрЗаменить(Текст, "#Поля#", Поля);
	
	Возврат Запрос
	
КонецФункции 

#КонецОбласти
