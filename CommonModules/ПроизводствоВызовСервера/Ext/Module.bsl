////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределяемый обработчик получения данных выбора справочника СтруктураПредприятия.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - значения выбора.
//  Параметры - Структура - параметры выбора.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура СтруктураПредприятияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	СтруктураПредприятия.Представление КАК Представление
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Наименование ПОДОБНО &Текст
		|	И НЕ СтруктураПредприятия.ПометкаУдаления
		|	И (СтруктураПредприятия.ПодразделениеДиспетчер
		|			ИЛИ СтруктураПредприятия.ПроизводственноеПодразделение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
		Запрос.УстановитьПараметр("Текст", "%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		КонецЦикла; 
								
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступноРабочееМестоЗаказыПереработчикам() Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		И Пользователи.РолиДоступны("ИспользованиеРабочегоМестаЗаказыПереработчикам") Тогда
		
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

//++ НЕ УТКА
Функция ПараметрыСозданияДвиженияПродукцииИМатериаловНаОсновании(МассивЗаказов, ХозяйственнаяОперация) Экспорт
	
	РеквизитыШапки = Документы.ДвижениеПродукцииИМатериалов.ДанныеЗаполненияНакладной(
						МассивЗаказов, ХозяйственнаяОперация);
						
	РезультатыПроверки = Документы.ДвижениеПродукцииИМатериалов.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
	
	ПараметрыОснования = Новый Структура;
	Если РеквизитыШапки.ПоРаспоряжениям Тогда
		ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыОснования.Вставить("МассивЗаказов",  МассивЗаказов);
	Иначе
		ПараметрыОснования.Вставить("ОбъектыОснований", МассивЗаказов);
		ПараметрыОснования.Вставить("ХозяйственнаяОперация", РеквизитыШапки.ХозяйственнаяОперация);
	КонецЕсли; 
	
	Возврат Новый Структура("Основание, РезультатыПроверки", ПараметрыОснования, РезультатыПроверки);
	
КонецФункции

Функция ДокументыДвиженияПродукцииИМатериаловПоПараметрам(ПараметрыДокументов) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОписаниеЗамера = Производительность.НачатьЗамерВремени(
		"ОбщийМодуль.ПроизводствоВызовСервера.ДокументыДвиженияПродукцииИМатериаловПоПараметрам");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	МассивОбъектов = Документы.ДвижениеПродукцииИМатериалов.ДокументыПоПараметрам(ПараметрыДокументов);
	
	Результат = Новый Структура("СписокДокументов, ОбъектФормы, ИдентификаторФормы");
	Результат.СписокДокументов = Новый СписокЗначений;
	Результат.ИдентификаторФормы = ПараметрыДокументов.ИдентификаторФормы;
	
	Если МассивОбъектов.Количество() = 1 Тогда
		ЗначениеВДанныеФормы(МассивОбъектов[0], ПараметрыДокументов.ОбъектФормы);
		Результат.Вставить("ОткрытьФормуНового");
	Иначе
		Для Каждого ТекДокумент Из МассивОбъектов Цикл
			ТекДокумент.Записать(РежимЗаписиДокумента.Запись);
			Результат.СписокДокументов.Добавить(ТекДокумент.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.СписокДокументов.Количество() > 1 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыДокументов.ИдентификаторФормы, Результат.СписокДокументов, "СписокДокументов");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	КоличествоОпераций = ПараметрыДокументов.ОбъектыОснований.Количество();
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоОпераций);
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПередачуМатериаловВПроизводствоПроверкаОснований(ОбъектыОснований, УправлениеПроизводством2_2) Экспорт
	
	Если ТипЗнч(ОбъектыОснований[0]) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		Возврат Документы.ЗаказМатериаловВПроизводство.СоздатьПередачуМатериаловВПроизводствоПроверкаОснований(ОбъектыОснований, УправлениеПроизводством2_2);
	Иначе
		РезультатПроверки = Новый Структура("ОбъектыОснований, ТекстОшибки");
		РезультатПроверки.ОбъектыОснований = ОбъектыОснований;
		Возврат РезультатПроверки;
	КонецЕсли;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти
