
#Область ПрограммныйИнтерфейс

// Подбирает справки 2 по остаткам для списания по FIFO.
//
// Параметры:
//  Товары - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть, содержащая реквизиты:
//                                                                     АлкогольнаяПродукция, Справка2, Количество,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация учета остатков,
//  Период - Дата, Граница - дата получения остатков. Если не указана, то берутся последние.
//  СтруктураПересчетаСуммы - Структура со свойствами:
//   * Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//   * Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//   * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ПодобратьСправки2ДляСписанияИзРегистра1(Товары, ОрганизацияЕГАИС, Период, СтруктураПересчетаСуммы) Экспорт
	
	Данные = ПодготовитьДанныеДляПодбораСправок2(Товары);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОстатки.АлкогольнаяПродукция                                                КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТаблицаОстатки.Справка2.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1))    КАК ДатаТТН,
	|	ТаблицаОстатки.Справка2                                                            КАК Справка2,
	|	ТаблицаОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(СправкиВДокументе.Количество, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(" + ?(ЗначениеЗаполнено(Период), "&Период", "") + "
	|			,
	|			ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|				И АлкогольнаяПродукция В (ВЫБРАТЬ Т.АлкогольнаяПродукция ИЗ втТаблицаДляЗаполнения КАК Т)) КАК ТаблицаОстатки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДляСписания КАК СправкиВДокументе
	|		ПО ТаблицаОстатки.АлкогольнаяПродукция = СправкиВДокументе.АлкогольнаяПродукция
	|			И ТаблицаОстатки.Справка2 = СправкиВДокументе.Справка2
	|
	|УПОРЯДОЧИТЬ ПО
	|	АлкогольнаяПродукция,
	|	ДатаТТН
	|ИТОГИ ПО
	|	АлкогольнаяПродукция");
	
	Запрос.МенеджерВременныхТаблиц = Данные.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Период", Период);
	
	ВыборкаАлкогольнаяПродукция = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл
		
		Выборка = ВыборкаАлкогольнаяПродукция.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			АлкогольнаяПродукция = ВыборкаАлкогольнаяПродукция.АлкогольнаяПродукция;
			ОстатокПоСправке     = Выборка.Количество;
			Справка2             = Выборка.Справка2;
			
			ЕстьСтрокиДляЗаполнения = ЗаполнитьСправку2ВТабличнойЧасти(
				Товары,
				АлкогольнаяПродукция,
				Справка2,
				ОстатокПоСправке, СтруктураПересчетаСуммы);
			
			Если Не ЕстьСтрокиДляЗаполнения Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подбирает справки 2 для списания по LIFO.
//
// Параметры:
//  Товары - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть, содержащая реквизиты:
//                                                                     АлкогольнаяПродукция, Справка2, Количество,
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация учета остатков,
//  Период - Дата - дата получения остатков.
//  СтруктураПересчетаСуммы - Структура со свойствами:
//   * Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//   * Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//   * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
// Возвращаемое значение:
//  Булево - Истина, если все справки заполнены.
//
Функция ПодобратьСправки2ДляВозвратаИзРегистра2(Товары, ОрганизацияЕГАИС, Период, СтруктураПересчетаСуммы) Экспорт
	
	ОстатокВРегистре2 = Новый ТаблицаЗначений;
	ОстатокВРегистре2.Колонки.Добавить("Последняя",            Новый ОписаниеТипов("Булево"));
	ОстатокВРегистре2.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ОстатокВРегистре2.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ОстатокВРегистре2.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ОстатокВРегистре2.Индексы.Добавить("АлкогольнаяПродукция, Последняя");
	
	Данные = ПодготовитьДанныеДляПодбораСправок2(Товары);
	Если Данные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Таблицы = Новый Структура;
	Таблицы.Вставить("ОстатокВРегистре2",  ОстатокВРегистре2);
	Таблицы.Вставить("ТаблицаДляСписания", Данные.ТаблицаДляСписания);
	
	Справки2Подобраны = ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(
		Данные.МенеджерВременныхТаблиц,
		ОрганизацияЕГАИС,
		Период,
		Таблицы);
	
	ЕстьСтрокиДляЗаполнения = Истина;
	Для Каждого СтрокаТЧ Из ОстатокВРегистре2 Цикл
		
		АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		ОстатокПоСправке     = СтрокаТЧ.Количество;
		Справка2             = СтрокаТЧ.Справка2;
		
		ЗаполнитьСправку2ВТабличнойЧасти(
			Товары,
			АлкогольнаяПродукция,
			Справка2,
			ОстатокПоСправке, СтруктураПересчетаСуммы);
		
		ЕстьСтрокиДляЗаполнения = Справки2ЗаполненыВТабличнойЧасти(Товары);
		Если Не ЕстьСтрокиДляЗаполнения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Справки2ЗаполненыВТабличнойЧасти(Товары);
	
КонецФункции

// Получить представление статуса ЕГАИС.
//
// Параметры:
//  СтатусЕГАИС - ПеречислениеСсылка - Статус документа ЕГАИС.
//  ВходящиеДальнейшееДействие - Массив,ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС
//                             - Список разрешенных дальнейших действий.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ЕГАИС.
//
Функция ПредставлениеСтатусаЕГАИС(СтатусЕГАИС, ВходящиеДальнейшееДействие) Экспорт

	СтатусЕГАИСПредставление = СтатусЕГАИС;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС") И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусЕГАИСПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		ТекстГиперссылки = "";
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки Тогда
			ТекстГиперссылки = "ЗапроситьОстатки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях Тогда
			ТекстГиперссылки = "ПодтвердитьАктОРасхождениях";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях Тогда
			ТекстГиперссылки = "ОтказатьсяОтАктаОРасхождениях";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной Тогда
			ТекстГиперссылки = "ОтказатьсяОтНакладной";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение Тогда
			ТекстГиперссылки = "ПодтвердитьПолучение";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
			ТекстГиперссылки = "ЗапроситьОтменуПроведения";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения Тогда
			ТекстГиперссылки = "ПодтвердитьЗапросНаОтменуПроведения";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения Тогда
			ТекстГиперссылки = "ОтказатьсяОтЗапросаНаОтменуПроведения";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
				НРег(Строка(ДальнейшееДействие)),
				Новый Шрифт(,,,,Истина),
				ЦветаСтиля.ЦветГиперссылкиГИСМ,
				,
				ТекстГиперссылки);
				
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусЕГАИСПредставление;

КонецФункции

// Проверить является ли статус документа конечным.
//
// Параметры:
//  МетаданныеДокумента - Метаданные - Метаданные документа.
//  Статус - ПеречислениеСсылка - Статус документа.
// 
// Возвращаемое значение:
//  Булево - Статус является конечным.
//
Функция ЭтоКонечныйСтатус(МетаданныеДокумента, Статус) Экспорт
	
	МетаданныеДокументы = Метаданные.Документы;
	
	Если МетаданныеДокумента = МетаданныеДокументы.ТТНВходящаяЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ТТНИсходящаяЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.АктПостановкиНаБалансЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.АктСписанияЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПереданВЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ОстаткиЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ПередачаВРегистр2ЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПереданВЕГАИС);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ЧекЕГАИС Тогда
		
		Результат = (Статус = Перечисления.СтатусыИнформированияЕГАИС.Передан);
		
	ИначеЕсли МетаданныеДокумента = МетаданныеДокументы.ЧекЕГАИСВозврат Тогда
		
		Результат = (Статус = Перечисления.СтатусыИнформированияЕГАИС.Передан);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает (или обновляет, если найдена по рег. номеру) справку на основании переданных данных.
//
// Параметры:
//  ДанныеСправки - Структура - заполненная структура, полученная функцией ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки(1)(2),
//  ВидСправки - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид справки,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации,
//  ТекстОшибки - Строка - возвращаемый текст ошибки создания справки,
//  ВызыватьОбработчик - Булево - признак вызова обработчика переопределяемого модуля.
//
// Возвращаемое значение:
//   СправочникСсылка.Справки1ЕГАИС, СправочникСсылка.Справки2ЕГАИС - созданная (найденная) справка.
//
Функция СоздатьСправку(ДанныеСправки, ВидСправки, ДополнительныеПараметры, ТекстОшибки, ВызыватьОбработчик = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрационныйНомер", ДанныеСправки.РегистрационныйНомер);
	
	ИмяСправочника = ?(ВидСправки = Перечисления.ВидыДокументовЕГАИС.Справка1, "Справки1ЕГАИС", "Справки2ЕГАИС");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиЕГАИС.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СправкиЕГАИС
	|ГДЕ
	|	СправкиЕГАИС.РегистрационныйНомер = &РегистрационныйНомер";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Справка = Справочники[ИмяСправочника].СоздатьЭлемент();
	Иначе
		Справка = РезультатЗапроса.Выгрузить()[0].Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеСправки Цикл
		
		Если ЗначениеЗаполнено(КлючЗначение.Значение) И Справка[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Справка[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Справка.Модифицированность() Тогда
		Если ВызыватьОбработчик Тогда
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеСправки(Справка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если НЕ ЗаписатьОбъект(Справка, ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справка.Ссылка;
	
КонецФункции

// Обновляет статус обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  НовыйСтатус - ПеречислениеСсылка - новый статус документа.
//
// Возвращаемое значение:
//   Структура - результат изменения статуса.
//
Функция ИзменитьСтатусОбработкиДокумента(ДокументСсылка, НовыйСтатус) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СтатусОбработки");
	
	Если ТекущийСтатус <> НовыйСтатус Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.СтатусОбработки = НовыйСтатус;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, Результат.ОписаниеОшибки, РежимЗаписи) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Процедура запуска регламентного задания ОбработкаОтветовЕГАИС.
//
Процедура ЗапуститьОбработкуОтветовЕГАИС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Истина);
	СписокУТМ = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);
	
	Для Каждого ТранспортныйМодуль Из СписокУТМ Цикл
		ИнтеграцияЕГАИСВызовСервера.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//   ИмяПараметра           - строка с именем параметра сеанса.
//   УстановленныеПараметры - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИдентификаторСеансаЕГАИС" Тогда
		ПараметрыСеанса.ИдентификаторСеансаЕГАИС = Новый УникальныйИдентификатор;
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода конфигурации.
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоАдресВременногоХранилища(Строка(ПараметрыСеанса.ИдентификаторСеансаЕГАИС)) Тогда
		Расписание = ПолучитьИзВременногоХранилища(Строка(ПараметрыСеанса.ИдентификаторСеансаЕГАИС));
	Иначе
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", "ОбработкаОтветовЕГАИС");
		
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если Задания.Количество() = 1 Тогда
			Расписание = Задания[0].Расписание;
		Иначе
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ПериодПовтораДней = 1;
			Расписание.ПериодНедель = 1;
			Расписание.ПериодПовтораВТечениеДня = 300;
			
			Месяцы = Новый Массив;
			ДниНедели = Новый Массив;
			
			Для Сч = 1 По 12 Цикл
				Месяцы.Добавить(Сч);
				
				Если Сч <= 7 Тогда
					ДниНедели.Добавить(Сч);
				КонецЕсли;
			КонецЦикла;
			
			Расписание.Месяцы = Месяцы;
			Расписание.ДниНедели = ДниНедели;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("РасписаниеОбработкиОтветов", ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание));
	
КонецПроцедуры

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Возвращает имя справочника, содержащего классификатор видов алкогольной продукции.
//
// Возвращаемое значение:
//   Строка - имя справочника.
//
Функция СправочникВидовАлкогольнойПродукции() Экспорт

	МассивТипов = Метаданные.ОпределяемыеТипы.ВидАлкогольнойПродукции.Тип.Типы();
	
	Если МассивТипов.Количество() = 1 Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		Возврат ОбъектМетаданных.Имя;
	Иначе
		ВызватьИсключение НСтр("ru = 'Определено более одного справочника видов алкогольной продукции.'");
	КонецЕсли;

КонецФункции

// Функция возвращает таблицу значений классификатора видов алкогольной продукции.
//
Функция КлассификаторВидовАлкогольнойПродукции() Экспорт
	
	ТаблицаВидовПродукции = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("КлассификаторВидовАлкогольнойПродукции");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		Если ИмяКолонки = "Маркируемый" Тогда
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
		Иначе
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаВидовПродукции.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			Если ИмяКолонки = "Маркируемый" Тогда
				новСтр[Сч-1] = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки)));
			Иначе
				новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовПродукции.Сортировать(ТаблицаВидовПродукции.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаВидовПродукции;
	
КонецФункции

// Проводит документ для внутреннего учета остатков по регистру №1
//
Процедура ПровестиДокумент(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Инициализация дополнительных свойств для проведения документа
	ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДокументОбъект.ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы[ДокументОбъект.Метаданные().Имя].ИнициализироватьДанныеДокумента(ДокументОбъект.Ссылка, ДокументОбъект.ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДокументОбъект.ДополнительныеСвойства, ДокументОбъект.Движения, Отказ);
	
	ЗаписатьНаборыЗаписей(ДокументОбъект);
	
	ИнтеграцияЕГАИСПереопределяемый.ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	
	ОчиститьДополнительныеСвойстваДляПроведения(ДокументОбъект.ДополнительныеСвойства);
	
КонецПроцедуры

// Возвращает значение по умолчанию переданного определяемого типа.
//
Функция ПустоеЗначениеОпределяемогоТипа(ИмяТипа) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.ПривестиЗначение();
	
КонецФункции

// Заполняет в табличной части сопоставленную номенклатуру и алкогольную продукцию.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений - таблица для заполнения.
//
Процедура ЗаполнитьНесопоставленнуюПродукцию(ТаблицаСопоставления) Экспорт
	
	Если ТаблицаСопоставления.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		НомерСтроки = 1;
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставления Цикл
			СтрокаТаблицы.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("Упаковка") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("Упаковка", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("АлкогольнаяПродукция") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	КонецЕсли;
	
	Если ТаблицаСопоставления.Колонки.Найти("ИдентификаторУпаковки") = Неопределено Тогда
		ТаблицаСопоставления.Колонки.Добавить("ИдентификаторУпаковки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	КонецЕсли;
	
	КорректировкаОстатковЕГАИСПереопределяемый.ЗаполнитьНесопоставленнуюПродукцию(ТаблицаСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкиВводаНаОсновании

// Возвращает структуру данных описания гиперссылки документа Акт списания ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаАктСписанияЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать акт списания ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьАктСписанияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьАктСписанияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Акт списания ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Акт списания ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Акты списания ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Акт списания ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаАктПостановкиНаБалансЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать акт постановки на баланс ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьАктПостановкиНаБалансЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьАктПостановкиНаБалансЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Акт постановки на баланс ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Акт постановки на баланс ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Акты постановки на баланс ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа ТТН ЕГАИС (исходящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаТТНИсходящаяЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать ТТН ЕГАИС (исходящую)'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьТТНИсходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьТТНИсходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'ТТН ЕГАИС (исходящая) не создана'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'ТТН ЕГАИС (исходящая): %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'ТТН ЕГАИС (исходящие) (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа ТТН ЕГАИС (входящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаТТНВходящаяЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'ТТН ЕГАИС (входящая) не получена'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьТТНВходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'ТТН ЕГАИС (входящая) не получена'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'ТТН ЕГАИС (входящая): %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'ТТН ЕГАИС (входящие) (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Чек ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаЧекЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать чек ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьЧекЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьЧекЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Чек ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Чек ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Чек ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Чек ЕГАИС на возврат.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаЧекЕГАИСВозврат()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать чек ЕГАИС на возврат'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьЧекЕГАИСВозврат");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьЧекЕГАИСВозврат");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Чек ЕГАИС на возврат не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Чек ЕГАИС на возврат: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Чек ЕГАИС на возврат (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Передача в регистр 2.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаПередачаВРегистр2ЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать передачу в регистр №2 ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьПередачаВРегистр2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьПередачаВРегистр2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Передача в регистр №2 ЕГАИС не создана'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Передача в регистр №2 ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Передача в регистр №2 ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Возврат из регистра 2.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаВозвратИзРегистра2ЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать возврат из регистра №2 ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьВозвратИзРегистра2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьВозвратИзРегистра2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Возврат из регистра №2 ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Возврат из регистра №2 ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Возврат из регистра №2 ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные для заполнения представления документа.
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствми:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента(МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Возврат ПредставлениеДокументаАктСписанияЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Возврат ПредставлениеДокументаАктПостановкиНаБалансЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Возврат ПредставлениеДокументаТТНИсходящаяЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Возврат ПредставлениеДокументаТТНВходящаяЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Возврат ПредставлениеДокументаЧекЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Возврат ПредставлениеДокументаЧекЕГАИСВозврат();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Возврат ПредставлениеДокументаПередачаВРегистр2ЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Возврат ПредставлениеДокументаВозвратИзРегистра2ЕГАИС();
		
	КонецЕсли;
	
КонецФункции

// Получить данные документа ЕГАИС
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//  Структура - структура со свойствами:
//   * ВозвратИзРегистра2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС - Статус документа.
//   * ПередачаВРегистр2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС - Статус документа.
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Представление - Строка - Представление документа.
//   * МассивДокументов - Массив - Массив документов.
//   * МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//
Функция ДанныеДокументаЕГАИС(МетаданныеДокумента, ДокументыПоОснованию) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Представление"      , "");
	Результат.Вставить("МассивДокументов"   , Новый Массив);
	Результат.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокумента);
	
	Если Не ПравоЧтения Тогда
		Возврат Результат;
	КонецЕсли;
	
	Представления = ИнтеграцияЕГАИС.ПредставлениеДокумента(МетаданныеДокумента);
	
	Если ПравоДобавления Тогда
		ТекстНадписи = Представления.КомандаСоздать;
		ИмяКоманды   = Представления.ИмяКомандыСоздать;
	Иначе
		ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
		ИмяКоманды   = "";
	КонецЕсли;
	
	МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	Если МассивДокументов.Количество() = 1 Тогда
		
		ДанныеДокумента = МассивДокументов[0];
		
		ТекстНадписи = СтрШаблон(Представления.Представление, ДанныеДокумента.Статус);
		ИмяКоманды   = Представления.ИмяКомандыОткрыть;
		
	ИначеЕсли МассивДокументов.Количество() > 1 Тогда
		
		ТекстНадписи = СтрШаблон(Представления.НесколькоДокументовПредставление, МассивДокументов.Количество());
		ИмяКоманды   = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Если ТекстНадписи = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИмяКоманды = Неопределено Тогда
		Цвет = Неопределено;
	Иначе
		Цвет = ЦветаСтиля.ЦветГиперссылкиГИСМ;
	КонецЕсли;
	
	Представление = Новый ФорматированнаяСтрока(
		ТекстНадписи,,
		Цвет,,
		ИмяКоманды);
	
	Результат.Представление = Представление;
	Результат.МассивДокументов = МассивДокументов;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

// Проверяет наличие текста запроса для формирования указанной таблицы
//
// Параметры:
//  ИмяТаблицы		- Строка - имя таблицы
//	ТекстыЗапроса 	- Список значений - список значений, значениями которого являются блоки запроса,
//	                                  синонимами - имена таблиц в которые необходимо поместить
//	                                  результат выполнения каждого отдельного блока запроса.
// 
// Возвращаемое значение:
//   - Булево - Истина, если текст запроса есть.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт

	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы
//
// Параметры:
//	Запрос				- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса		- Список значений - в списке перечислены тексты запросов и их имена.
//	Таблицы				- Структура - структура в которую будут помещены полученные таблицы для движений.
//	ДобавитьРазделитель	- Булево - Истина, если нужно добавить разделитель ";" между запросами.
//	ДобавлятьСловоТаблица	- Булево - Истина, если к имени таблицы движений нужно вначало добавить слово "Таблица"
//
Процедура ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные=Ложь) Экспорт
	
	ТаблицыЗапроса = ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- Список значений - в списке перечислены тексты запросов и их имена.
//	ОбходРезультата - ОбходРезультатаЗапроса - вариант обхода результата запроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные таблицы
//
Функция ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, ОбходРезультата = Неопределено, ДобавитьРазделитель = Ложь)

	Таблицы = Новый Структура;
	
	// Инициализация варианта обхода результата запроса.
	Если ОбходРезультата = Неопределено Тогда
		ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	КонецЕсли;
	
	МассивТекстаЗапроса = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстаЗапроса.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		МассивТекстаЗапроса.Добавить(ТекстЗапроса.Значение);
		Если ДобавитьРазделитель Тогда
			МассивТекстаЗапроса.Добавить("
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
	
	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) Тогда

			Индекс = ТекстыЗапроса.Индекс(ТекстЗапроса);
			Таблицы.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить(ОбходРезультата));

		КонецЕсли;

	КонецЦикла;

	Возврат Таблицы;
	
КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь)
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ИспользуемыеРегистры(
			Объект.Ссылка,
			МетаданныеДвижения);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ИспользуемыеРегистры(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	МассивТекстаЗапроса = Новый Массив;
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				МассивТекстаЗапроса.Добавить("
				|ОБЪЕДИНИТЬ ВСЕ
				|");

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			МассивТекстаЗапроса.Добавить(
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|");

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
			МассивТекстаЗапроса.Очистить();
			
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект)
	Перем РегистрыДляКонтроля, РассчитыватьИзменения, ПараметрыКонтроля;
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		Движение.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);
		Движение.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);
		Движение.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);
		Движение.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
		
		Движение.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы",
				// Структура для передачи данных в модули наборов записей.
				Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

// Выполняет закрытие менеджера временных таблиц в структуре дополнительных свойств документа, используемых 
// при проведении.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми
//		при проведении.
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства)

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
Функция ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ФорматОбмена, ВидДокумента, ПараметрыЗапроса, ТекстОшибки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Documents", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
		Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(КорневоеПространствоИмен()),
		КорневоеПространствоИмен());
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, ФорматОбмена, ТекстОшибки);
	
	Зависимости = Новый Массив;
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema-instance");
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema");
	
	ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
	
	Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
		Зависимости.Добавить(ПространствоИмен);
	КонецЕсли;
	
	Для Каждого ЗависимоеПространство Из Зависимости Цикл
		Префикс = Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(ЗависимоеПространство);
		Если НЕ ПустаяСтрока(Префикс) Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Префикс, ЗависимоеПространство);
		КонецЕсли;
	КонецЦикла;
	
	ОтправительXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "SenderInfo"));
	УстановитьЗначениеСвойстваXDTO(ОтправительXDTO, "FSRAR_ID", ТранспортныйМодуль.ИдентификаторФСРАР, ТекстОшибки);
	
	СодержимоеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "DocBody"));
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryAP = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryAP_v2 = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОрганизаций Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryClients = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryClients_v2 = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1 Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryRests = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryRests_v2 = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2 Тогда
		СодержимоеXDTO.QueryRestsShop_v2 = ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросСправки1 Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryFormA = ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryFormF1 = ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросСправки2 Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.QueryFormB = ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.QueryFormF2 = ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросТТН Тогда
		СодержимоеXDTO.QueryResendDoc = ПреобразоватьВXDTOЗапросТТН(ВидДокумента, ПараметрыЗапроса, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1 Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.ActChargeOn = ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр1(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.ActChargeOn_v2 = ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр1_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2 Тогда
		СодержимоеXDTO.ActChargeOnShop_v2 = ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс Тогда
		СодержимоеXDTO.RequestRepealACO = ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаПостановкиНаБаланс(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.ActWriteOff = ПреобразоватьВXDTOАктСписанияИзРегистра1(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.ActWriteOff_v2 = ПреобразоватьВXDTOАктСписанияИзРегистра1_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
		СодержимоеXDTO.ActWriteOffShop_v2 = ПреобразоватьВXDTOАктСписанияИзРегистра2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания Тогда
		СодержимоеXDTO.RequestRepealAWO = ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаСписания(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.WayBill = ПреобразоватьВXDTOТТН(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.WayBill_v2 = ПреобразоватьВXDTOТТН_v2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СодержимоеXDTO.WayBillAct = ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			СодержимоеXDTO.WayBillAct_v2 = ПреобразоватьВXDTOАктПодтвержденияТТН_v2(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		СодержимоеXDTO.ConfirmTicket = ПреобразоватьВXDTOПодтверждениеАктаРасхожденийТТН(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		СодержимоеXDTO.RequestRepealWB = ПреобразоватьВXDTOЗапросНаОтменуПроведенияТТН(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеЗапросаНаОтменуПроведенияТТН
		ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтЗапросаНаОтменуПроведенияТТН Тогда
		СодержимоеXDTO.ConfirmRepealWB = ПреобразоватьВXDTOПодтверждениеЗапросаНаОтменуПроведенияТТН(ВидДокумента, ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2 Тогда
		СодержимоеXDTO.TransferToShop = ПреобразоватьВXDTOПередачуВРегистр2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2 Тогда
		СодержимоеXDTO.TransferFromShop = ПреобразоватьВXDTOВозвратИзРегистра2(ПараметрыЗапроса.ДокументСсылка, ТекстОшибки);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена Тогда
		СодержимоеXDTO.InfoVersionTTN = ПреобразоватьВXDTOИнформациюОФорматеОбмена(ПараметрыЗапроса, ТекстОшибки);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ЗаписьXML.Закрыть();
		Возврат "";
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтправительXDTO, "Owner", КорневоеПространствоИмен());
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СодержимоеXDTO, "Document", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат = ЗаписьXML.Закрыть();
	Результат = СтрЗаменить(Результат, "unqualified_element:", "");
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
Функция ТекстXMLВыгрузкиЧека(ВидДокумента, ШапкаЧека, СтрокиЧека, ТекстОшибки) Экспорт

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЧекXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Cheque");
	
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "inn", ШапкаЧека.ИНН, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ШапкаЧека.КПП) Тогда
		УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "kpp", ШапкаЧека.КПП, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "address" , ШапкаЧека.АдресМагазина                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "name"    , ШапкаЧека.НаименованиеМагазина                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "kassa"   , ШапкаЧека.ЗаводскойНомерККМ                     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "shift"   , ШапкаЧека.НомерСменыККМ                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "number"  , ШапкаЧека.НомерЧекаККМ                          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЧекXDTO, "datetime", Формат(ШапкаЧека.ДатаВремяЧека, "ДФ=ddMMyyHHmm"), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из СтрокиЧека Цикл
		
		Цена = Формат(?(ШапкаЧека.Свойство("Возврат") И ШапкаЧека.Возврат, -1, 1) * СтрокаЧека.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаЧека.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		СтрокаЧекаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
		УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "price"  , Цена, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "barcode", СтрокаЧека.КодАкцизнойМарки, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаЧека.Штрихкод) Тогда
			УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "ean", СтрокаЧека.Штрихкод, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объем) Тогда
			УстановитьЗначениеСвойстваXDTO(СтрокаЧекаXDTO, "volume" , Объем, ТекстОшибки);
		КонецЕсли;
		
		ЧекXDTO.Bottle.Добавить(СтрокаЧекаXDTO);
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ЧекXDTO, "Cheque");
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ПараметрыЗапроса, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	ПараметрыЗапросаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Parameters", ЗапросXDTO);
	
	ПараметрXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Parameter"));
	
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Name", ПараметрыЗапроса.ИмяПараметра, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Value", ПараметрыЗапроса.ЗначениеПараметра, ТекстОшибки);
	
	ПараметрыЗапросаXDTO.Parameter.Добавить(ПараметрXDTO);
	ЗапросXDTO.Parameters.Добавить(ПараметрыЗапросаXDTO);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ПараметрыЗапроса.ЗначениеПараметра, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу остатков.
//
Функция ПреобразоватьВXDTOЗапросОстатков(ВидДокумента, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, "", ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросСправки(ВидДокумента, ПараметрыЗапроса, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ЗапросСправкиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryFormAB"));
	УстановитьЗначениеСвойстваXDTO(ЗапросСправкиXDTO, "FormRegId", ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросСправкиXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
Функция ПреобразоватьВXDTOЗапросСправки_v2(ВидДокумента, ПараметрыЗапроса, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ЗапросСправкиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryFormF1F2"));
	УстановитьЗначениеСвойстваXDTO(ЗапросСправкиXDTO, "FormRegId", ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ПараметрыЗапроса.РегистрационныйНомер, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросСправкиXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий повторному запросу ТТН.
//
Функция ПреобразоватьВXDTOЗапросТТН(ВидДокумента, ПараметрыЗапроса, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "QueryParameters"));
	
	ПараметрыЗапросаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Parameters", ЗапросXDTO);
	
	ПараметрXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Parameter"));
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Name", "WBREGID", ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ПараметрXDTO, "Value", ПараметрыЗапроса.ИдентификаторЕГАИС, ТекстОшибки);
	
	ПараметрыЗапросаXDTO.Parameter.Добавить(ПараметрXDTO);
	ЗапросXDTO.Parameters.Добавить(ПараметрыЗапросаXDTO);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ПараметрыЗапроса.ИдентификаторЕГАИС, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения ТТН.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияТТН(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealWB"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", СокрЛП(ДанныеДляВыгрузки.Номер)     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "WBRegId"      , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий подтверждению запроса на отмену проведения ТТН.
//
Функция ПреобразоватьВXDTOПодтверждениеЗапросаНаОтменуПроведенияТТН(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный)
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Неопределено,
		ТекстОшибки);
		
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	КвитанцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ConfirmRepealWB"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", КвитанцияXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "IsConfirm"    , ?(ДанныеДляВыгрузки.Отказ, "Rejected", "Accepted"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ConfirmNumber", СокрЛП(ДанныеДляВыгрузки.Номер)                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ConfirmDate"  , ТекущаяДатаСеанса()                               , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "WBRegId"      , ДанныеДляВыгрузки.ИдентификаторЕГАИС              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note"         , ДанныеДляВыгрузки.Комментарий                     , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(КвитанцияXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки);
	КонецЕсли;
	
	КвитанцияXDTO.Header = ШапкаXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат КвитанцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Функция ПреобразоватьВXDTOОрганизацию(Организация, ТекстОшибкиГлобальный)
	
	ТекстОшибки = "";
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код,
	|	КлассификаторОрганизацийЕГАИС.Наименование КАК Наименование,
	|	КлассификаторОрганизацийЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.КодСтраны КАК КодСтраны,
	|	КлассификаторОрганизацийЕГАИС.КодРегиона КАК КодРегиона,
	|	КлассификаторОрганизацийЕГАИС.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса КАК ПредставлениеАдреса
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыОрганизации = Запрос.Выполнить().Выбрать();
	РеквизитыОрганизации.Следующий();
	
	ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfo"));
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "Identity"   , Строка(Организация.УникальныйИдентификатор())    , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ClientRegId", РеквизитыОрганизации.Код                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "FullName"   , Лев(РеквизитыОрганизации.НаименованиеПолное, 255), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ShortName"  , Лев(РеквизитыОрганизации.Наименование, 64)       , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.ИНН) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "INN" , РеквизитыОрганизации.ИНН, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.КПП) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "KPP", РеквизитыОрганизации.КПП, ТекстОшибки);
	КонецЕсли;
	
	АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressType"));
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Country", Формат(РеквизитыОрганизации.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), ТекстОшибки);
	
	Если НЕ РеквизитыОрганизации.ПочтовыйИндекс = 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Index", Формат(РеквизитыОрганизации.ПочтовыйИндекс, "ЧЦ=6; ЧВН=; ЧГ="), ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыОрганизации.КодРегиона = 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "RegionCode", Формат(РеквизитыОрганизации.КодРегиона, "ЧЦ=2; ЧВН="), ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыОрганизации.ПредставлениеАдреса) Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "description", Лев(РеквизитыОрганизации.ПредставлениеАдреса, 2000), ТекстОшибки);
	КонецЕсли;
	
	ОрганизацияXDTO.address = АдресXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Организация ЕГАИС'"), Организация, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ОрганизацияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Функция ПреобразоватьВXDTOОрганизацию_v2(Организация, ОрганизацияРФ, ТекстОшибкиГлобальный)
	
	ТекстОшибки = "";
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код,
	|	КлассификаторОрганизацийЕГАИС.Наименование КАК Наименование,
	|	КлассификаторОрганизацийЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.КодСтраны КАК КодСтраны,
	|	КлассификаторОрганизацийЕГАИС.КодРегиона КАК КодРегиона,
	|	КлассификаторОрганизацийЕГАИС.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса КАК ПредставлениеАдреса,
	|	КлассификаторОрганизацийЕГАИС.ТипОрганизации КАК ТипОрганизации,
	|	КлассификаторОрганизацийЕГАИС.ИдентификаторОрганизацииТС КАК ИдентификаторОрганизацииТС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыОрганизации = Запрос.Выполнить().Выбрать();
	РеквизитыОрганизации.Следующий();
	
	Если РеквизитыОрганизации.ТипОрганизации.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Для организации %1 не заполнен тип.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ОрганизацияРФ И РеквизитыОрганизации.ТипОрганизации <> Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ
		И РеквизитыОрганизации.ТипОрганизации <> Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ТекстОшибки = НСтр("ru='Организация %1 не зарегистрирована на территории РФ.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeULFL"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FLType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeULFL"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FOType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeFOTS"));
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОрганизацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TSType"));
		АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeFOTS"));
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ClientRegId", РеквизитыОрганизации.Код                         , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "FullName"   , Лев(РеквизитыОрганизации.НаименованиеПолное, 255), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "ShortName"  , Лев(РеквизитыОрганизации.Наименование, 64)       , ТекстОшибки);
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "INN") Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "INN" , РеквизитыОрганизации.ИНН, ТекстОшибки);
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "KPP") Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "KPP", РеквизитыОрганизации.КПП, ТекстОшибки);
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ОрганизацияXDTO, "TSNUM") И НЕ ПустаяСтрока(РеквизитыОрганизации.ИдентификаторОрганизацииТС) Тогда
		УстановитьЗначениеСвойстваXDTO(ОрганизацияXDTO, "TSNUM", РеквизитыОрганизации.ИдентификаторОрганизацииТС, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "Country", Формат(РеквизитыОрганизации.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), ТекстОшибки);
	
	Если ЕстьСвойствоОбъектаXDTO(АдресXDTO, "RegionCode") Тогда
		УстановитьЗначениеСвойстваXDTO(АдресXDTO, "RegionCode", Формат(РеквизитыОрганизации.КодРегиона, "ЧЦ=2; ЧВН="), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АдресXDTO, "description", Лев(РеквизитыОрганизации.ПредставлениеАдреса, 2000), ТекстОшибки);
	
	ОрганизацияXDTO.address = АдресXDTO;
	
	Если ОрганизацияРФ Тогда
		ИнформацияОбОрганизацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_v2"));
	Иначе
		ИнформацияОбОрганизацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfo_v2"));
	КонецЕсли;
	
	Если РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ИнформацияОбОрганизацииXDTO.UL = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ИнформацияОбОрганизацииXDTO.FL = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ИнформацияОбОрганизацииXDTO.FO = ОрганизацияXDTO;
	ИначеЕсли РеквизитыОрганизации.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ИнформацияОбОрганизацииXDTO.TS = ОрганизацияXDTO;
	КонецЕсли;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Организация ЕГАИС'"), Организация, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ИнформацияОбОрганизацииXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Функция ПреобразоватьВXDTOАлкогольнуюПродукцию(АлкогольнаяПродукция, ТекстОшибкиГлобальный)
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер КАК Импортер,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Код, """") КАК КодВидаПродукции,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ВидЛицензии
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + СправочникВидовАлкогольнойПродукции() + " КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыАлкогольнойПродукции = Запрос.Выполнить().Выбрать();
	РеквизитыАлкогольнойПродукции.Следующий();
	
	ТекстОшибки = "";
	
	АлкогольнаяПродукцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "ProductInfo"));
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Identity", Строка(АлкогольнаяПродукция.УникальныйИдентификатор()), ТекстОшибки);
	
	Если НЕ РеквизитыАлкогольнойПродукции.ВидЛицензии.Пустая() Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Type", ТипыАП[РеквизитыАлкогольнойПродукции.ВидЛицензии], ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "FullName", Лев(РеквизитыАлкогольнойПродукции.НаименованиеПолное, 255), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыАлкогольнойПродукции.Наименование) Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ShortName", Лев(РеквизитыАлкогольнойПродукции.Наименование, 64), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcCode", РеквизитыАлкогольнойПродукции.Код, ТекстОшибки);
	
	Если РеквизитыАлкогольнойПродукции.Объем > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Capacity", РеквизитыАлкогольнойПродукции.Объем, ТекстОшибки);
	КонецЕсли;
	
	Если РеквизитыАлкогольнойПродукции.Крепость > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcVolume", РеквизитыАлкогольнойПродукции.Крепость, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Производитель.Пустая() Тогда
		АлкогольнаяПродукцияXDTO.Producer = ПреобразоватьВXDTOОрганизацию(РеквизитыАлкогольнойПродукции.Производитель, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Импортер.Пустая() Тогда
		АлкогольнаяПродукцияXDTO.Importer = ПреобразоватьВXDTOОрганизацию(РеквизитыАлкогольнойПродукции.Импортер, ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ProductVCode", РеквизитыАлкогольнойПродукции.КодВидаПродукции, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Алкогольная продукция'"), АлкогольнаяПродукция, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АлкогольнаяПродукцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Функция ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(АлкогольнаяПродукция, ТекстОшибкиГлобальный)
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Код, """") КАК КодВидаПродукции,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции КАК ТипПродукции,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ВидЛицензии
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + СправочникВидовАлкогольнойПродукции() + " КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	РеквизитыАлкогольнойПродукции = Запрос.Выполнить().Выбрать();
	РеквизитыАлкогольнойПродукции.Следующий();
	
	ТекстОшибки = "";
	
	АлкогольнаяПродукцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "ProductInfo_v2"));
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "UnitType", ТипыПродукции[РеквизитыАлкогольнойПродукции.ТипПродукции], ТекстОшибки);
	
	Если НЕ РеквизитыАлкогольнойПродукции.ВидЛицензии.Пустая() Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Type", ТипыАП[РеквизитыАлкогольнойПродукции.ВидЛицензии], ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "FullName", Лев(РеквизитыАлкогольнойПродукции.НаименованиеПолное, 255), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(РеквизитыАлкогольнойПродукции.Наименование) Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ShortName", Лев(РеквизитыАлкогольнойПродукции.Наименование, 64), ТекстОшибки);
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcCode", РеквизитыАлкогольнойПродукции.Код, ТекстОшибки);
	
	Если РеквизитыАлкогольнойПродукции.Объем > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Capacity", РеквизитыАлкогольнойПродукции.Объем, ТекстОшибки);
	КонецЕсли;
	
	Если РеквизитыАлкогольнойПродукции.Крепость > 0 Тогда
		УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "AlcVolume", РеквизитыАлкогольнойПродукции.Крепость, ТекстОшибки);
	КонецЕсли;
	
	Если НЕ РеквизитыАлкогольнойПродукции.Производитель.Пустая() Тогда
		ПроизводительXDTO = ПреобразоватьВXDTOОрганизацию_v2(РеквизитыАлкогольнойПродукции.Производитель, Ложь, ТекстОшибки);
	Иначе
		ПроизводительXDTO = Неопределено;
	КонецЕсли;
	
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "Producer", ПроизводительXDTO, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(АлкогольнаяПродукцияXDTO, "ProductVCode", РеквизитыАлкогольнойПродукции.КодВидаПродукции, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Алкогольная продукция'"), АлкогольнаяПродукция, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АлкогольнаяПродукцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданному списку акцизных марок.
//
Функция ПреобразоватьВXDTOСписокАкцизныхМарок(АкцизныеМарки, ТекстОшибкиГлобальный)
	
	АкцизныеМаркиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/CommonEnum", "MarkCodeInfoType"));
	
	ТекстОшибки = "";
	Для Каждого ШтрихкодМарки Из АкцизныеМарки Цикл
		УстановитьЗначениеСвойстваXDTO(АкцизныеМаркиXDTO, "MarkCode", ШтрихкодМарки, ТекстОшибки);
	КонецЦикла;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Список акцизных марок'"), "", ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АкцизныеМаркиXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр1(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", СокрЛП(ДанныеДляВыгрузки.Номер), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	
	Если НЕ ДанныеДляВыгрузки.Комментарий = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnPositionType"));
		
		ДанныеСправокXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "InformAB", ЭлементСодержимогоXDTO);
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ActInventoryABInfo", "InformARegType"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "Quantity"    , СтрокаТовары.КоличествоПоСправке1, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "BottlingDate", СтрокаТовары.ДатаРозлива         , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNNumber"   , СтрокаТовары.НомерТТН            , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNDate"     , СтрокаТовары.ДатаТТН             , ТекстОшибки);
		
		Если НЕ ПустаяСтрока(СтрокаТовары.НомерПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixNumber", СтрокаТовары.НомерПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixDate", СтрокаТовары.ДатаПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		ДанныеСправки1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformABRegType"));
		ДанныеСправки1XDTO.InformA = Справка1XDTO;
		
		ДанныеСправокXDTO.InformABReg = ДанныеСправки1XDTO;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformAB = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			АкцизныеМаркиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "MarkCodeInfoType"));
			
			Для Каждого ШтрихкодМарки Из СтрокаТовары.АкцизныеМарки Цикл
				УстановитьЗначениеСвойстваXDTO(АкцизныеМаркиXDTO, "MarkCode", ШтрихкодМарки, ТекстОшибки);
			КонецЦикла;
			
			ЭлементСодержимогоXDTO.MarkCodeInfo = АкцизныеМаркиXDTO;
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр1_v2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", СокрЛП(ДанныеДляВыгрузки.Номер), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeChargeOn", Строка(ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс), ТекстОшибки);
	
	Если ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс = Перечисления.ПричиныПостановкиНаБалансЕГАИС.Пересортица Тогда
		Если ЗначениеЗаполнено(ДанныеДляВыгрузки.ИдентификаторАктаСписания) Тогда
			УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActWriteOff", ДанныеДляВыгрузки.ИдентификаторАктаСписания, ТекстОшибки);
		Иначе
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + НСтр("ru='Акт списания не выгружен в ЕГАИС.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляВыгрузки.Комментарий <> Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnPositionType"));
		
		ДанныеСправокXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "InformF1F2", ЭлементСодержимогоXDTO);
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ActInventoryF1F2Info", "InformF1RegType"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "Quantity"    , СтрокаТовары.КоличествоПоСправке1, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "BottlingDate", СтрокаТовары.ДатаРозлива         , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNNumber"   , СтрокаТовары.НомерТТН            , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "TTNDate"     , СтрокаТовары.ДатаТТН             , ТекстОшибки);
		
		Если НЕ ПустаяСтрока(СтрокаТовары.НомерПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixNumber", СтрокаТовары.НомерПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаПодтвержденияЕГАИС) Тогда
			УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "EGAISFixDate", СтрокаТовары.ДатаПодтвержденияЕГАИС, ТекстОшибки);
		КонецЕсли;
		
		ДанныеСправки1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformF1F2RegType"));
		ДанныеСправки1XDTO.InformF1 = Справка1XDTO;
		
		ДанныеСправокXDTO.InformF1F2Reg = ДанныеСправки1XDTO;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF1F2 = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту постановки на баланс в торговом зале.
//
Функция ПреобразоватьВXDTOАктПостановкиНаБалансВРегистр2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnShopType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Number", СокрЛП(ДанныеДляВыгрузки.Номер), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate", ДанныеДляВыгрузки.Дата, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeChargeOn", Строка(ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс), ТекстОшибки);
	
	Если ДанныеДляВыгрузки.ПричинаПостановкиНаБаланс = Перечисления.ПричиныПостановкиНаБалансЕГАИС.Пересортица Тогда
		Если ЗначениеЗаполнено(ДанныеДляВыгрузки.ИдентификаторАктаСписания) Тогда
			УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActWriteOff", ДанныеДляВыгрузки.ИдентификаторАктаСписания, ТекстОшибки);
		Иначе
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + НСтр("ru='Акт списания не выгружен в ЕГАИС.'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеДляВыгрузки.Комментарий = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActChargeOnShopPositionType"));
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
		
	КонецЦикла;
	
	Если НЕ ДанныеДляВыгрузки.Идентификатор = Неопределено Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения акта постановки на баланс.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаПостановкиНаБаланс(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктПостановкиНаБалансЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealACO"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", СокрЛП(ДанныеДляВыгрузки.Номер)     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ACORegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания.
//
Функция ПреобразоватьВXDTOАктСписанияИзРегистра1(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBTypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "BRegId", СтрокаТовары.НомерСправки2, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformB  = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания.
//
Функция ПреобразоватьВXDTOАктСписанияИзРегистра1_v2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправки2, ТекстОшибки);
		
		ДанныеСправокXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InformF1F2"));
		ДанныеСправокXDTO.InformF2 = Справка2XDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF1F2 = ДанныеСправокXDTO;
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту списания из торгового зала.
//
Функция ПреобразоватьВXDTOАктСписанияИзРегистра2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffShopType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActNumber"   , СокрЛП(ДанныеДляВыгрузки.Номер)          , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ActDate"     , ДанныеДляВыгрузки.Дата                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TypeWriteOff", Строка(ДанныеДляВыгрузки.ПричинаСписания), ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ActWriteOffShopPositionType"));
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		
		Если СтрокаТовары.АкцизныеМарки.Количество() > 0 Тогда
			ЭлементСодержимогоXDTO.MarkCodeInfo = ПреобразоватьВXDTOСписокАкцизныхМарок(СтрокаТовары.АкцизныеМарки, ТекстОшибки);
		КонецЕсли;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header  = ШапкаXDTO;
	АктXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий запросу на отмену проведения акта списания.
//
Функция ПреобразоватьВXDTOЗапросНаОтменуПроведенияАктаСписания(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.АктСписанияЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ЗапросXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "RequestRepealAWO"));
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "ClientId"     , ДанныеДляВыгрузки.ИдентификаторФСРАР, ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestNumber", СокрЛП(ДанныеДляВыгрузки.Номер)     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "RequestDate"  , ДанныеДляВыгрузки.Дата              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ЗапросXDTO, "AWORegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ЗапросXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу ТТН.
//
Функция ПреобразоватьВXDTOТТН(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	ТТНXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ТТНXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Type"        , ТипыТТН[ДанныеДляВыгрузки.ВидОперации]              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "UnitType"    , ?(ДанныеДляВыгрузки.Упакована, "Packed", "Unpacked"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "NUMBER"      , СокрЛП(ДанныеДляВыгрузки.НомерТТН)                  , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Date"        , ДанныеДляВыгрузки.ДатаТТН                           , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ShippingDate", ДанныеДляВыгрузки.ДатаОтгрузки                      , ТекстОшибки);
	
	ШапкаXDTO.Transport = ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибки);
	ШапкаXDTO.Shipper = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Грузоотправитель, ТекстОшибки);
	ШапкаXDTO.Consignee = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Грузополучатель, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Поставщик) Тогда
		ШапкаXDTO.Supplier = ПреобразоватьВXDTOОрганизацию(ДанныеДляВыгрузки.Поставщик, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Основание) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Base", Лев(ДанныеДляВыгрузки.Основание, 200), ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 200), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ТТНXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformAType"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "RegId", СтрокаТовары.НомерСправки1, ТекстОшибки);
		
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBType"));
		
		ЭлементСправки2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef", "InformBTypeItem"));
		УстановитьЗначениеСвойстваXDTO(
			ЭлементСправки2XDTO,
			"BRegId",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Справка2, "РегистрационныйНомер"),
			ТекстОшибки);
		
		Справка2XDTO.InformBItem = ЭлементСправки2XDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторУпаковки) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Pack_ID", СтрокаТовары.ИдентификаторУпаковки, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Price"   , СтрокаТовары.Цена      , ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.НомерПартии) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Party", СтрокаТовары.НомерПартии, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.InformA = Справка1XDTO;
		ЭлементСодержимогоXDTO.InformB = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ТТНXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ТТНXDTO.Header = ШапкаXDTO;
	ТТНXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ТТНXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу ТТН.
//
Функция ПреобразоватьВXDTOТТН_v2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
		
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	ТТНXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillType_v2"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ТТНXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Type"        , ТипыТТН[ДанныеДляВыгрузки.ВидОперации], ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "NUMBER"      , СокрЛП(ДанныеДляВыгрузки.НомерТТН)    , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Date"        , ДанныеДляВыгрузки.ДатаТТН             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "ShippingDate", ДанныеДляВыгрузки.ДатаОтгрузки        , ТекстОшибки);
	
	ШапкаXDTO.Transport = ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибки);
	ШапкаXDTO.Shipper = ПреобразоватьВXDTOОрганизацию_v2(ДанныеДляВыгрузки.Грузоотправитель, Истина, ТекстОшибки);
	ШапкаXDTO.Consignee = ПреобразоватьВXDTOОрганизацию_v2(ДанныеДляВыгрузки.Грузополучатель, Ложь, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Основание) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Base", Лев(ДанныеДляВыгрузки.Основание, 200), ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 200), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ТТНXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		Справка1XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF1Type"));
		УстановитьЗначениеСвойстваXDTO(Справка1XDTO, "RegId", СтрокаТовары.НомерСправки1, ТекстОшибки);
		
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2Type"));
		
		ЭлементСправки2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(
			ЭлементСправки2XDTO,
			"F2RegId",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Справка2, "РегистрационныйНомер"),
			ТекстОшибки);
		
		Справка2XDTO.InformF2Item = ЭлементСправки2XDTO;
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		ЭлементСодержимогоXDTO.Product = ПреобразоватьВXDTOАлкогольнуюПродукцию_v2(СтрокаТовары.АлкогольнаяПродукция, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторУпаковки) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Pack_ID", СтрокаТовары.ИдентификаторУпаковки, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity", СтрокаТовары.Количество, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Price"   , СтрокаТовары.Цена      , ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтрокаТовары.НомерПартии) Тогда
			УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Party", СтрокаТовары.НомерПартии, ТекстОшибки);
		КонецЕсли;
		
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity", СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		ЭлементСодержимогоXDTO.InformF1 = Справка1XDTO;
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ТТНXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ТТНXDTO.Header = ШапкаXDTO;
	ТТНXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Документ'"), ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ТТНXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий транспортному разделу ТТН.
//
Функция ПреобразоватьВXDTOТранспортныйРазделТТН(ПространствоИмен, ДанныеДляВыгрузки, ТекстОшибкиГлобальный)
	
	ДоставкаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransportType"));
	
	ПоляДоставки = Новый Соответствие;
	ПоляДоставки.Вставить("TRAN_TYPE"       , "ТипДоставки");
	ПоляДоставки.Вставить("TRAN_COMPANY"    , "Перевозчик");
	ПоляДоставки.Вставить("TRAN_CAR"        , "Автомобиль");
	ПоляДоставки.Вставить("TRAN_TRAILER"    , "Прицеп");
	ПоляДоставки.Вставить("TRAN_CUSTOMER"   , "Заказчик");
	ПоляДоставки.Вставить("TRAN_DRIVER"     , "Водитель");
	ПоляДоставки.Вставить("TRAN_LOADPOINT"  , "ПунктПогрузки");
	ПоляДоставки.Вставить("TRAN_UNLOADPOINT", "ПунктРазгрузки");
	ПоляДоставки.Вставить("TRAN_REDIRECT"   , "Перенаправление");
	ПоляДоставки.Вставить("TRAN_FORWARDER"  , "Экспедитор");
	
	ТекстОшибки = "";
	Для Каждого СвойствоДоставкиXDTO Из ДоставкаXDTO.Свойства() Цикл
		ИмяПоляДанных = ПоляДоставки[СвойствоДоставкиXDTO.Имя];
		Если НЕ ИмяПоляДанных = Неопределено И НЕ ДанныеДляВыгрузки[ИмяПоляДанных] = Неопределено Тогда
			МаксДлина = 0;
			Для Каждого Фасет Из СвойствоДоставкиXDTO.Тип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					МаксДлина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Фасет.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если МаксДлина > 0 Тогда
				УстановитьЗначениеСвойстваXDTO(ДоставкаXDTO, СвойствоДоставкиXDTO.Имя, Лев(ДанныеДляВыгрузки[ИмяПоляДанных], МаксДлина), ТекстОшибки);
			Иначе
				УстановитьЗначениеСвойстваXDTO(ДоставкаXDTO, СвойствоДоставкиXDTO.Имя, ДанныеДляВыгрузки[ИмяПоляДанных], ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗавершитьПреобразованиеXDTO(НСтр("ru='Транспортный раздел ТТН'"), "", ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ДоставкаXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	Иначе
		ТекстОшибки = НСтр("ru='Для документа %1 не предусмотрена выгрузка акта подтверждения.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		Возврат Неопределено;
	КонецЕсли;
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillActType"));
	
	ШапкаАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "IsAccept" , ?(ДанныеДляВыгрузки.Отказ, "Rejected", "Accepted"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ACTNUMBER", СокрЛП(ДанныеДляВыгрузки.Номер)                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ActDate"  , ТекущаяДатаСеанса()                               , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "WBRegId"  , ДанныеДляВыгрузки.ИдентификаторЕГАИС              , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"    , СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "InformBRegId", СтрокаТовары.НомерСправки2      , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "RealQuantity", СтрокаТовары.КоличествоФакт     , ТекстОшибки);
		
		СодержимоеАктаXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаАктаXDTO;
	АктXDTO.Content = СодержимоеАктаXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН_v2(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный)

	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V2,
		ТекстОшибки);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	Иначе
		ТекстОшибки = НСтр("ru='Для документа %1 не предусмотрена выгрузка акта подтверждения.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыАктов = Новый Соответствие;
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН, "Accepted");
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН, "Rejected");
	ВидыАктов.Вставить(Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН, "Differences");
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WayBillActType_v2"));
	
	ШапкаАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", АктXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "IsAccept" , ВидыАктов[ВидДокумента]             , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ACTNUMBER", СокрЛП(ДанныеДляВыгрузки.Номер)     , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "ActDate"  , ТекущаяДатаСеанса()                 , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "WBRegId"  , ДанныеДляВыгрузки.ИдентификаторЕГАИС, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаАктаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеАктаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", АктXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"     , СтрокаТовары.ИдентификаторСтроки, ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "InformF2RegId", СтрокаТовары.НомерСправки2      , ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "RealQuantity" , СтрокаТовары.КоличествоФакт     , ТекстОшибки);
		
		СодержимоеАктаXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(АктXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	АктXDTO.Header = ШапкаАктаXDTO;
	АктXDTO.Content = СодержимоеАктаXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат АктXDTO;

КонецФункции

// Функция возвращает объект XDTO, соответствующий подтверждению акта расхождений.
//
Функция ПреобразоватьВXDTOПодтверждениеАктаРасхожденийТТН(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный)
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		ВидДокумента,
		Перечисления.ФорматыОбменаЕГАИС.V1,
		ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ТТНИсходящаяЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента);
	
	КвитанцияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ConfirmTicketType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", КвитанцияXDTO);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "IsConfirm"   , ?(ДанныеДляВыгрузки.Отказ, "Rejected", "Accepted"), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TicketNumber", СокрЛП(ДанныеДляВыгрузки.Номер)                   , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TicketDate"  , ТекущаяДатаСеанса()                               , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "WBRegId"     , ДанныеДляВыгрузки.ИдентификаторЕГАИС              , ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note"        , ДанныеДляВыгрузки.Комментарий                     , ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(КвитанцияXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки);
	КонецЕсли;
	
	КвитанцияXDTO.Header = ШапкаXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат КвитанцияXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу передачи в регистр №2.
//
Функция ПреобразоватьВXDTOПередачуВРегистр2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ПередачаВРегистр2ЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка);
	
	ДокументXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferToShopType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ДокументXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferNumber", СокрЛП(ДанныеДляВыгрузки.Номер), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferDate"  , ДанныеДляВыгрузки.Дата , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ДокументXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправки2, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferToShopPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"   , СтрокаТовары.ИдентификаторСтроки    , ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "ProductCode", СтрокаТовары.КодАлкогольнойПродукции, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity"   , СтрокаТовары.Количество             , ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ДокументXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ДокументXDTO.Header  = ШапкаXDTO;
	ДокументXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ДокументXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий документу возврата из торгового зала.
//
Функция ПреобразоватьВXDTOВозвратИзРегистра2(ДокументСсылка, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ДанныеДляВыгрузки = Документы.ВозвратИзРегистра2ЕГАИС.ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка);
	
	ДокументXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferFromShopType"));
	
	ШапкаXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ДокументXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferNumber", СокрЛП(ДанныеДляВыгрузки.Номер), ТекстОшибки);
	УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "TransferDate"  , ДанныеДляВыгрузки.Дата , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Комментарий) Тогда
		УстановитьЗначениеСвойстваXDTO(ШапкаXDTO, "Note", Лев(ДанныеДляВыгрузки.Комментарий, 500), ТекстОшибки);
	КонецЕсли;
	
	СодержимоеXDTO = ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ДокументXDTO);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		Справка2XDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/ProductRef_v2", "InformF2TypeItem"));
		УстановитьЗначениеСвойстваXDTO(Справка2XDTO, "F2RegId", СтрокаТовары.НомерСправки2, ТекстОшибки);
		
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TransferFromShopPositionType"));
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Identity"   , СтрокаТовары.ИдентификаторСтроки    , ТекстОшибки, 5);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "ProductCode", СтрокаТовары.КодАлкогольнойПродукции, ТекстОшибки);
		УстановитьЗначениеСвойстваXDTO(ЭлементСодержимогоXDTO, "Quantity"   , СтрокаТовары.Количество             , ТекстОшибки);
		ЭлементСодержимогоXDTO.InformF2 = Справка2XDTO;
		
		СодержимоеXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеДляВыгрузки.Идентификатор) Тогда
		УстановитьЗначениеСвойстваXDTO(ДокументXDTO, "Identity", ДанныеДляВыгрузки.Идентификатор, ТекстОшибки, 3);
	КонецЕсли;
	
	ДокументXDTO.Header  = ШапкаXDTO;
	ДокументXDTO.Content = СодержимоеXDTO;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ДокументСсылка, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ДокументXDTO;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий информации о формате обмена.
//
Функция ПреобразоватьВXDTOИнформациюОФорматеОбмена(ПараметрыЗапроса, ТекстОшибкиГлобальный)
	
	ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена;
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ВидДокумента, Неопределено, ТекстОшибки);
	
	ИнформацияXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InfoVersionTTN"));
	УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "ClientId", ПараметрыЗапроса.ИдентификаторФСРАР, ТекстОшибки);
	
	Если ПараметрыЗапроса.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "WBTypeUsed", "WayBill", ТекстОшибки);
	ИначеЕсли ПараметрыЗапроса.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		УстановитьЗначениеСвойстваXDTO(ИнформацияXDTO, "WBTypeUsed", "WayBill_v2", ТекстОшибки);
	КонецЕсли;
	
	ЗавершитьПреобразованиеXDTO(ВидДокумента, ПараметрыЗапроса.ИдентификаторФСРАР, ТекстОшибкиГлобальный, ТекстОшибки);
	
	Возврат ИнформацияXDTO;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  МассивДокументов        - Массив - полученные документы из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие  - загруженные документы.
//
Функция ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Справки2 = Новый ТаблицаЗначений;
	Справки2.Колонки.Добавить("Обработана"            , Новый ОписаниеТипов("Булево"));
	Справки2.Колонки.Добавить("Идентификатор"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Справки2.Колонки.Добавить("НомерТТН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Справки2.Колонки.Добавить("ДатаТТН"               , Новый ОписаниеТипов("Дата"));
	Справки2.Колонки.Добавить("Грузоотправитель"      , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	Справки2.Колонки.Добавить("Грузополучатель"       , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	Справки2.Колонки.Добавить("ИдентификаторТТН"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Справки2.Колонки.Добавить("ИдентификаторСтрокиТТН", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Справки2.Колонки.Добавить("НомерСтрокиТТН"        , Новый ОписаниеТипов("Число"));
	Справки2.Колонки.Добавить("НомерСправки2"         , Новый ОписаниеТипов("Строка"));
	Справки2.Колонки.Добавить("Справка2"              , Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	Справки2.Колонки.Добавить("ИдентификаторЗапроса"  , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Справки2.Колонки.Добавить("АдресЗапроса"          , Новый ОписаниеТипов("Строка"));
	Справки2.Колонки.Добавить("ТекстXML"              , Новый ОписаниеТипов("Строка"));
	
	МассивТТН = Новый Массив;
	
	Для Каждого СтруктураДокумента Из МассивДокументов Цикл
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		РезультатОбработкиДокумента.ИдентификаторЗапроса = СтруктураДокумента.ИдентификаторЗапроса;
		РезультатОбработкиДокумента.ТекстXML = СтруктураДокумента.ТекстXML;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураДокумента.ТекстXML);
		
		Попытка
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents").Тип());
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураДокумента.АдресЗапроса);
			
			ПредставлениеОшибки = ПредставлениеОшибкиXDTO(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Попытка
				
				ЧтениеXML.УстановитьСтроку(СтруктураДокумента.ТекстXML);
				ИсточникЗначенийXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				
				ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
					ИсточникЗначенийXDTO,
					ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents", Неопределено));
				
			Исключение
				
				РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки + Символы.ПС + ПредставлениеОшибки;
				
				ЗаписьЖурналаРегистрации(
					ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки);
				
				Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
				Продолжить;
			КонецПопытки;
			
		КонецПопытки;
		
		Если НЕ ОбъектXDTO.Document.TTNInformBReg = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.TTNInformF2Reg = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.TTNInformBReg = Неопределено Тогда
				ДобавитьСправкиВТаблицуЗагрузки(
					ОбъектXDTO.Document.TTNInformBReg,
					Справки2,
					СтруктураДокумента,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			Иначе
				ДобавитьСправкиВТаблицуЗагрузки(
					ОбъектXDTO.Document.TTNInformF2Reg,
					Справки2,
					СтруктураДокумента,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			КонецЕсли;
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ActInventoryInformBReg = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ActInventoryInformF2Reg = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.ActInventoryInformBReg = Неопределено Тогда
				ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(ОбъектXDTO.Document.ActInventoryInformBReg, РезультатОбработкиДокумента, ДополнительныеПараметры);
			Иначе
				ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(ОбъектXDTO.Document.ActInventoryInformF2Reg, РезультатОбработкиДокумента, ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.WayBill = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.WayBill_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.WayBill = Неопределено Тогда
				ДанныеТТН = ПолучитьДанныеТТНВходящей(
					ОбъектXDTO.Document.WayBill,
					Перечисления.ФорматыОбменаЕГАИС.V1,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			Иначе
				ДанныеТТН = ПолучитьДанныеТТНВходящей(
					ОбъектXDTO.Document.WayBill_v2,
					Перечисления.ФорматыОбменаЕГАИС.V2,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			КонецЕсли;
			
			Если НЕ РезультатОбработкиДокумента.Результат Тогда
				Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			Иначе
				ДанныеТТН.Вставить("АдресЗапроса", СтруктураДокумента.АдресЗапроса);
				ДанныеТТН.Вставить("ТекстXML", СтруктураДокумента.ТекстXML);
				
				МассивТТН.Добавить(ДанныеТТН);
			КонецЕсли;
			
		ИначеЕсли НЕ ОбъектXDTO.Document.WayBillAct = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.WayBillAct_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.WayBillAct = Неопределено Тогда
				ЗагрузитьАктПодтвержденияТТН(ОбъектXDTO.Document.WayBillAct, РезультатОбработкиДокумента, ДополнительныеПараметры);
			Иначе
				ЗагрузитьАктПодтвержденияТТН(ОбъектXDTO.Document.WayBillAct_v2, РезультатОбработкиДокумента, ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ConfirmTicket = Неопределено Тогда
			
			ЗагрузитьПодтверждениеАктаРасхожденийТТН(ОбъектXDTO.Document.ConfirmTicket, РезультатОбработкиДокумента, ДополнительныеПараметры);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.RequestRepealWB = Неопределено Тогда
			
			ЗагрузитьЗапросНаОтменуПроведенияТТН(ОбъектXDTO.Document.RequestRepealWB, РезультатОбработкиДокумента, ДополнительныеПараметры);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.Ticket = Неопределено Тогда
			
			ЗагрузитьКвитанцию(ОбъектXDTO.Document.Ticket, РезультатОбработкиДокумента, СтруктураДокумента);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyClient = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyClient_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.ReplyClient = Неопределено Тогда
				ЗагрузитьСписокОрганизаций(ОбъектXDTO.Document.ReplyClient.Clients.Client, РезультатОбработкиДокумента, ДополнительныеПараметры);
			Иначе
				ЗагрузитьСписокОрганизаций(ОбъектXDTO.Document.ReplyClient_v2.Clients.Client, РезультатОбработкиДокумента, ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyAP = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyAP_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.ReplyAP = Неопределено Тогда
				ЗагрузитьСписокАлкогольнойПродукции(ОбъектXDTO.Document.ReplyAP.Products.Product, РезультатОбработкиДокумента, ДополнительныеПараметры);
			Иначе
				ЗагрузитьСписокАлкогольнойПродукции(ОбъектXDTO.Document.ReplyAP_v2.Products.Product, РезультатОбработкиДокумента, ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyFormA = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyForm1 = Неопределено Тогда
			
			ТекстОшибки = "";
			Если НЕ ОбъектXDTO.Document.ReplyFormA = Неопределено Тогда
				ЗагрузитьСправку(
					ОбъектXDTO.Document.ReplyFormA,
					Перечисления.ВидыДокументовЕГАИС.Справка1,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			Иначе
				ЗагрузитьСправку(
					ОбъектXDTO.Document.ReplyForm1,
					Перечисления.ВидыДокументовЕГАИС.Справка1,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyFormB = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyForm2 = Неопределено Тогда
			
			ТекстОшибки = "";
			Если НЕ ОбъектXDTO.Document.ReplyFormB = Неопределено Тогда
				ЗагрузитьСправку(
					ОбъектXDTO.Document.ReplyFormB,
					Перечисления.ВидыДокументовЕГАИС.Справка2,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			Иначе
				ЗагрузитьСправку(
					ОбъектXDTO.Document.ReplyForm2,
					Перечисления.ВидыДокументовЕГАИС.Справка2,
					РезультатОбработкиДокумента,
					ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyRests = Неопределено
			ИЛИ НЕ ОбъектXDTO.Document.ReplyRests_v2 = Неопределено Тогда
			
			Если НЕ ОбъектXDTO.Document.ReplyRests_v2 = Неопределено Тогда
				ЗагрузитьОстаткиВРегистре1(ОбъектXDTO.Document.ReplyRests_v2, РезультатОбработкиДокумента, СтруктураДокумента, ДополнительныеПараметры);
			Иначе
				ЗагрузитьОстаткиВРегистре1(ОбъектXDTO.Document.ReplyRests, РезультатОбработкиДокумента, СтруктураДокумента, ДополнительныеПараметры);
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyRestsShop_v2 = Неопределено Тогда
			
			ЗагрузитьОстаткиВРегистре2(ОбъектXDTO.Document.ReplyRestsShop_v2, РезультатОбработкиДокумента, СтруктураДокумента, ДополнительныеПараметры);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.TTNHistoryF2Reg = Неопределено Тогда
			
			Продолжить;
			
		Иначе
			РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не удалось определить формат входящего документа %1'");
			РезультатОбработкиДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				РезультатОбработкиДокумента.ОписаниеОшибки,
				СтруктураДокумента.АдресЗапроса);
				
			ЗаписьЖурналаРегистрации(
				ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				РезультатОбработкиДокумента.ОписаниеОшибки);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТТН.Количество() > 0 Тогда
		СоздатьТТНИзСписка(МассивТТН, Справки2, Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Справки2.Количество() > 0
		И НЕ Справки2.Найти(Ложь, "Обработана") = Неопределено Тогда
		ЗарегистрироватьСправки2ПоТТН(Справки2, Результат);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Результат Цикл
		РезультатОбработкиДокумента = КлючЗначение.Значение;
		Если НЕ РезультатОбработкиДокумента.Результат Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСессииОбмена = ИнтеграцияЕГАИСКлиентСервер.ПараметрыСессииОбмена();
		ЗаполнитьЗначенияСвойств(ПараметрыСессииОбмена, РезультатОбработкиДокумента);
		
		ПараметрыСессииОбмена.ТипЗапроса   = Перечисления.ТипыЗапросовЕГАИС.Входящий;
		ПараметрыСессииОбмена.ПолученОтказ = РезультатОбработкиДокумента.ПолученОтказ;
		ПараметрыСессииОбмена.Комментарий  = РезультатОбработкиДокумента.КомментарийЕГАИС;
		ПараметрыСессииОбмена.ФайлОбмена   = Новый ХранилищеЗначения(ФорматироватьТекстXML(РезультатОбработкиДокумента.ТекстXML), Новый СжатиеДанных(9));
		
		РегистрыСведений.ПротоколОбменаЕГАИС.ЗаписатьСессиюОбменаСУТМ(ПараметрыСессииОбмена);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру результата обработки ответа сервера ЕГАИС на запрос.
//
Функция РезультатОбработкиВходящегоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("ВидДокумента"        , Неопределено);
	Результат.Вставить("ДокументОснование"   , Неопределено);
	Результат.Вставить("ПолученОтказ"        , Ложь);
	Результат.Вставить("КомментарийЕГАИС"    , "");
	Результат.Вставить("ТекстXML"            , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки строки ТТН.
//
Функция СтруктураДанныхСтрокиТТНВходящей()
	
	Результат = Новый Структура;
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС.
	Результат.Вставить("ИдентификаторУпаковки"  , "");           // Идентификатор упаковки.
	Результат.Вставить("Количество"             , 0);            // Количество продукции в ТТН.
	Результат.Вставить("Цена"                   , 0);            // Цена продукции в ТТН.
	Результат.Вставить("НомерПартии"            , "");           // Номер партии продукции.
	Результат.Вставить("ИдентификаторСтроки"    , "");           // Идентификатор позиции внутри накладной.
	Результат.Вставить("НомерСправки1"          , "");           // Номер справки "А"
	Результат.Вставить("НомерСправки2Поставщика", "");           // Номер справки "Б", по которой поставщик получил товар.
	Результат.Вставить("Справка2"               , Неопределено); // Элемент справочника Справки2ЕГАИС.
	Результат.Вставить("ДиапазоныНомеровМарок"  , Новый Массив); // Массив диапазонов номеров.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки строки диапазона марок в ТТН.
//
Функция СтруктураДанныхСтрокиДиапазонаМарок()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипМарки"      , "");           // Тип марки
	Результат.Вставить("Идентификатор" , Неопределено); // Идентификатор диапазона в списке
	Результат.Вставить("Серия"         , "");           // Серия
	Результат.Вставить("НачальныйНомер", "");           // Начальный номер
	Результат.Вставить("КонечныйНомер" , "");           // Конечный номер
	
	Возврат Результат;
	
КонецФункции

// Создает документы ТТНВходящаяЕГАИС из переданного массива данных.
//
Процедура СоздатьТТНИзСписка(МассивТТН, Справки2, Результат, ДополнительныеПараметры)
	
	Для Каждого ДанныеТТН Из МассивТТН Цикл
		
		АдресРегистрацииСправок = "";
		ТекстXMLРегистрацииСправок = "";
		
		Для Каждого СтрокаТовары Из ДанныеТТН.ТаблицаТоваров Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор"         , ДанныеТТН.Идентификатор);
			ПараметрыОтбора.Вставить("НомерТТН"              , ДанныеТТН.НомерТТН);
			ПараметрыОтбора.Вставить("ДатаТТН"               , ДанныеТТН.ДатаТТН);
			ПараметрыОтбора.Вставить("Грузоотправитель"      , ДанныеТТН.Грузоотправитель);
			ПараметрыОтбора.Вставить("Грузополучатель"       , ДанныеТТН.Грузополучатель);
			ПараметрыОтбора.Вставить("ИдентификаторСтрокиТТН", СтрокаТовары.ИдентификаторСтроки);
			
			МассивСтрок = Справки2.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				ДанныеТТН.ИдентификаторЕГАИС = МассивСтрок[0].ИдентификаторТТН;
				СтрокаТовары.Справка2 = МассивСтрок[0].Справка2;
				
				АдресРегистрацииСправок = МассивСтрок[0].АдресЗапроса;
				ТекстXMLРегистрацииСправок = МассивСтрок[0].ТекстXML;
				
				Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
					МассивСтрок[Индекс].Обработана = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ДанныеТТН.ИдентификаторЕГАИС) Тогда
			Продолжить;
		КонецЕсли;
		
		ТТН = СоздатьТТНВходящую(ДанныеТТН, ДополнительныеПараметры);
		
		Если НЕ ТТН = Неопределено Тогда
			РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
			РезультатОбработкиДокумента.Результат = Истина;
			РезультатОбработкиДокумента.ТекстXML = ДанныеТТН.ТекстXML;
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН;
			РезультатОбработкиДокумента.ДокументОснование = ТТН;
			
			Если Результат[ДанныеТТН.АдресЗапроса] = Неопределено Тогда
				Результат.Вставить(ДанныеТТН.АдресЗапроса, РезультатОбработкиДокумента);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(АдресРегистрацииСправок) И Результат[АдресРегистрацииСправок] = Неопределено Тогда
				РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
				РезультатОбработкиДокумента.Результат = Истина;
				РезультатОбработкиДокумента.ТекстXML = ТекстXMLРегистрацииСправок;
				РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.РегистрацияСправокПоТТН;
				РезультатОбработкиДокумента.ДокументОснование = ТТН;
				
				Результат.Вставить(АдресРегистрацииСправок, РезультатОбработкиДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает ТТН на основании переданных данных.
//
Функция СоздатьТТНВходящую(ДанныеТТН, ДополнительныеПараметры)
	
	НоваяСсылка = Документы.ТТНВходящаяЕГАИС.ПолучитьСсылку();
	
	ТТН = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
	ТТН.УстановитьСсылкуНового(НоваяСсылка);
	
	ТТН.Дата = ТекущаяДатаСеанса();
	ТТН.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
	ЗаполнитьЗначенияСвойств(ТТН, ДанныеТТН);
	
	ТекстОшибки = "";
	Для Каждого СтрокаТоварыТТН Из ДанныеТТН.ТаблицаТоваров Цикл
		СтрокаТовары = ТТН.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыТТН);
		
		Справка2 = СтрокаТовары.Справка2.ПолучитьОбъект();
		Справка2.АлкогольнаяПродукция = СтрокаТовары.АлкогольнаяПродукция;
		Справка2.Количество = СтрокаТовары.Количество;
		Справка2.НомерСправки1 = СтрокаТоварыТТН.НомерСправки1;
		Справка2.ДокументОснование = НоваяСсылка;
		ЗаписатьОбъект(Справка2, ТекстОшибки);
		
		СтрокаТовары.Сумма = СтрокаТовары.Количество * СтрокаТоварыТТН.Цена;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ЗаписьЖурналаРегистрации(
			ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ТТН.СуммаДокумента = ТТН.Товары.Итог("Сумма");
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеТТН(ТТН, ДополнительныеПараметры);
	
	Если ТТН.Модифицированность() Тогда
		Если НЕ ЗаписатьОбъект(ТТН, ТекстОшибки, РежимЗаписиДокумента.Проведение) Тогда
			Если НЕ ЗаписатьОбъект(ТТН, ТекстОшибки) Тогда
				ЗаписьЖурналаРегистрации(
					ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТТН.Ссылка;
	
КонецФункции

// Добавляет новые справки 2 в общую таблицу загрузки.
//
Процедура ДобавитьСправкиВТаблицуЗагрузки(КвитанцияXDTO, Справки2, СтруктураДокумента, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	НовыеСправки = Справки2.СкопироватьКолонки();
	
	ШапкаXDTO = КвитанцияXDTO.Header;
	СписокСправокБXDTO = КвитанцияXDTO.Content.Position;
	
	ТекстОшибки = "";
	Для Каждого ЭлементСодержимого Из СписокСправокБXDTO Цикл
		ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
		ДанныеСправки2.НомерПодтвержденияЕГАИС = ШапкаXDTO.EGAISFixNumber;
		ДанныеСправки2.ДатаПодтвержденияЕГАИС  = ШапкаXDTO.EGAISFixDate;
		
		НомерСправки2 = "";
		Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимого, "InformBRegId") Тогда
			НомерСправки2 = ЭлементСодержимого.InformBRegId;
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(ЭлементСодержимого, "InformF2RegId") Тогда
			НомерСправки2 = ЭлементСодержимого.InformF2RegId;
		КонецЕсли;
		
		ДанныеСправки2.РегистрационныйНомер = НомерСправки2;
		ДанныеСправки2.Наименование = НомерСправки2;
		
		Грузоотправитель = ЗагрузитьОрганизацию(ШапкаXDTO.Shipper, ДополнительныеПараметры, ТекстОшибки);
		Грузополучатель  = ЗагрузитьОрганизацию(ШапкаXDTO.Consignee, ДополнительныеПараметры, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаНовыхСправок = НовыеСправки.Добавить();
		СтрокаНовыхСправок.Идентификатор          = ШапкаXDTO.Identity;
		СтрокаНовыхСправок.ИдентификаторТТН       = ШапкаXDTO.WBRegId;
		СтрокаНовыхСправок.НомерТТН               = ШапкаXDTO.WBNUMBER;
		СтрокаНовыхСправок.ДатаТТН                = ШапкаXDTO.WBDate;
		СтрокаНовыхСправок.Грузоотправитель       = Грузоотправитель;
		СтрокаНовыхСправок.Грузополучатель        = Грузополучатель;
		СтрокаНовыхСправок.ИдентификаторСтрокиТТН = ЭлементСодержимого.Identity;
		СтрокаНовыхСправок.НомерСтрокиТТН         = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементСодержимого.Identity);
		СтрокаНовыхСправок.НомерСправки2          = НомерСправки2;
		
		Если ПустаяСтрока(СтруктураДокумента.ИдентификаторЗапроса) Тогда
			СтрокаНовыхСправок.Справка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.Справка2, ДополнительныеПараметры, ТекстОшибки);
		КонецЕсли;
		
		СтрокаНовыхСправок.ИдентификаторЗапроса   = СтруктураДокумента.ИдентификаторЗапроса;
		СтрокаНовыхСправок.АдресЗапроса           = СтруктураДокумента.АдресЗапроса;
		СтрокаНовыхСправок.ТекстXML               = СтруктураДокумента.ТекстXML;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Для Каждого СтрокаНовыхСправок Из НовыеСправки Цикл
			СтрокаСправок2 = Справки2.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСправок2, СтрокаНовыхСправок);
		КонецЦикла;
	Иначе
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует новые справки Б и заполняет их в табличной части ТТН.
//
Процедура ЗарегистрироватьСправки2ПоТТН(Справки2, Результат)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Справки2", Справки2);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Справки2.Идентификатор КАК Идентификатор,
	|	Справки2.НомерТТН КАК НомерТТН,
	|	Справки2.ДатаТТН КАК ДатаТТН,
	|	Справки2.Грузоотправитель КАК Грузоотправитель,
	|	Справки2.Грузополучатель КАК Грузополучатель,
	|	Справки2.ИдентификаторТТН КАК ИдентификаторТТН,
	|	Справки2.ИдентификаторСтрокиТТН КАК ИдентификаторСтрокиТТН,
	|	Справки2.НомерСтрокиТТН КАК НомерСтрокиТТН,
	|	Справки2.Справка2 КАК Справка2,
	|	Справки2.НомерСправки2 КАК НомерСправки2,
	|	Справки2.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	Справки2.АдресЗапроса КАК АдресЗапроса,
	|	Справки2.ТекстXML КАК ТекстXML
	|ПОМЕСТИТЬ Справки2
	|ИЗ
	|	&Справки2 КАК Справки2
	|ГДЕ
	|	НЕ Справки2.Обработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Справки2.ИдентификаторТТН,
	|	Справки2.Справка2,
	|	Справки2.НомерСправки2,
	|	Справки2.ИдентификаторЗапроса,
	|	Справки2.АдресЗапроса,
	|	Справки2.ТекстXML,
	|	ТТНВходящаяЕГАИСТовары.Ссылка КАК ДокументОснование,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справки2 КАК Справки2
	|		ПО ТТНВходящаяЕГАИСТовары.Ссылка.Идентификатор = Справки2.Идентификатор
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.НомерТТН = Справки2.НомерТТН
	|			И (НАЧАЛОПЕРИОДА(ТТНВходящаяЕГАИСТовары.Ссылка.ДатаТТН, ДЕНЬ) = НАЧАЛОПЕРИОДА(Справки2.ДатаТТН, ДЕНЬ))
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.Грузоотправитель = Справки2.Грузоотправитель
	|			И ТТНВходящаяЕГАИСТовары.Ссылка.Грузополучатель = Справки2.Грузополучатель
	|			И ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки = Справки2.ИдентификаторСтрокиТТН
	|			И (ТТНВходящаяЕГАИСТовары.Ссылка.ИдентификаторЕГАИС = Справки2.ИдентификаторТТН
	|				ИЛИ ТТНВходящаяЕГАИСТовары.Ссылка.ИдентификаторЕГАИС = """")
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	И Справки2.ИдентификаторЗапроса = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Справки2.ИдентификаторТТН,
	|	Справки2.Справка2,
	|	Справки2.НомерСправки2,
	|	Справки2.ИдентификаторЗапроса,
	|	Справки2.АдресЗапроса,
	|	Справки2.ТекстXML,
	|	ТТНИсходящаяЕГАИСТовары.Ссылка,
	|	ТТНИсходящаяЕГАИСТовары.НомерСтроки,
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНИсходящаяЕГАИСТовары.Количество
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справки2 КАК Справки2
	|		ПО ТТНИсходящаяЕГАИСТовары.Ссылка.Идентификатор = Справки2.Идентификатор
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.НомерТТН = Справки2.НомерТТН
	|			И (НАЧАЛОПЕРИОДА(ТТНИсходящаяЕГАИСТовары.Ссылка.ДатаТТН, ДЕНЬ) = НАЧАЛОПЕРИОДА(Справки2.ДатаТТН, ДЕНЬ))
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель = Справки2.Грузоотправитель
	|			И ТТНИсходящаяЕГАИСТовары.Ссылка.Грузополучатель = Справки2.Грузополучатель
	|			И ТТНИсходящаяЕГАИСТовары.НомерСтроки = Справки2.НомерСтрокиТТН
	|			И (ТТНИсходящаяЕГАИСТовары.Ссылка.ИдентификаторЕГАИС = Справки2.ИдентификаторТТН
	|				ИЛИ ТТНИсходящаяЕГАИСТовары.Ссылка.ИдентификаторЕГАИС = """")
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.НомерСправки2Покупателя = """"
	|	И Справки2.ИдентификаторЗапроса <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТТН = Выборка.ДокументОснование.ПолучитьОбъект();
		ТТН.ИдентификаторЕГАИС = Выборка.ИдентификаторТТН;
		
		Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			ТТН.Товары[Выборка.НомерСтроки - 1].Справка2 = Выборка.Справка2;
		Иначе
			ТТН.Товары[Выборка.НомерСтроки - 1].НомерСправки2Покупателя = Выборка.НомерСправки2;
		КонецЕсли;
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		РезультатОбработкиДокумента.ИдентификаторЗапроса = Выборка.ИдентификаторЗапроса;
		РезультатОбработкиДокумента.ТекстXML = Выборка.ТекстXML;
		
		Если ЗаписатьОбъект(ТТН, РезультатОбработкиДокумента.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			РезультатОбработкиДокумента.ДокументОснование = ТТН.Ссылка;
		КонецЕсли;
		
		Если НЕ Выборка.Справка2.Пустая() Тогда
			Справка2 = Выборка.Справка2.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(Справка2, Выборка);
			ЗаписатьОбъект(Справка2, РезультатОбработкиДокумента.ОписаниеОшибки);
		КонецЕсли;
		
		РезультатОбработкиДокумента.Результат = ПустаяСтрока(РезультатОбработкиДокумента.ОписаниеОшибки);
		
		Если Результат[Выборка.АдресЗапроса] = Неопределено Тогда
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.РегистрацияСправокПоТТН;
			Результат.Вставить(Выборка.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует новые справки 1 и 2 и заполняет их в табличной части акта.
//
Процедура ЗарегистрироватьСправкиПоАктуПостановкиНаБаланс(КвитанцияXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)

	РезультатОбработкиДокумента.Результат = Истина;
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1;
	
	Если НЕ ЗначениеЗаполнено(КвитанцияXDTO.Header.Identity) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор акта.'");
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Попытка
		ИдентификаторАкта = Новый УникальныйИдентификатор(КвитанцияXDTO.Header.Identity);
		ИдентификаторАкта = Строка(ИдентификаторАкта);
	Исключение
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Некорректный идентификатор акта %1.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатОбработкиДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РезультатОбработкиДокумента.ОписаниеОшибки, КвитанцияXDTO.Header.Identity);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторАкта);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Идентификатор = &Идентификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Неизвестный идентификатор акта %1.'");
		РезультатОбработкиДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РезультатОбработкиДокумента.ОписаниеОшибки, КвитанцияXDTO.Header.Identity);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	Иначе
		РезультатОбработкиДокумента.ДокументОснование = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	АктОбъект = РезультатОбработкиДокумента.ДокументОснование.ПолучитьОбъект();
	
	Для Каждого СтрокаКвитанцииXDTO Из КвитанцияXDTO.Content.Position Цикл
		ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
		
		НомерНовойСправки1 = "";
		Если ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformARegId") Тогда
			НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformARegId;
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformF1RegId") Тогда
			НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformF1RegId;
		КонецЕсли;
		
		СтрокаТоваров = Неопределено;
		Если АктОбъект.Товары.Количество() > ИндексСтроки Тогда
			СтрокаТоваров = АктОбъект.Товары[ИндексСтроки];
		КонецЕсли;
		
		ДанныеСправки1 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		ДанныеСправки1.РегистрационныйНомер = НомерНовойСправки1;
		ДанныеСправки1.Наименование = НомерНовойСправки1;
		
		Если СтрокаТоваров <> Неопределено Тогда
			ДанныеСправки1.АлкогольнаяПродукция    = СтрокаТоваров.АлкогольнаяПродукция;
			ДанныеСправки1.НомерТТН                = СтрокаТоваров.НомерТТН;
			ДанныеСправки1.ДатаТТН                 = СтрокаТоваров.ДатаТТН;
			ДанныеСправки1.ДатаРозлива             = СтрокаТоваров.ДатаРозлива;
			ДанныеСправки1.Количество              = СтрокаТоваров.КоличествоПоСправке1;
			ДанныеСправки1.НомерПодтвержденияЕГАИС = СтрокаТоваров.НомерПодтвержденияЕГАИС;
			ДанныеСправки1.ДатаПодтвержденияЕГАИС  = СтрокаТоваров.ДатаПодтвержденияЕГАИС;
		КонецЕсли;
		
		НоваяСправка1 = СоздатьСправку(ДанныеСправки1, Перечисления.ВидыДокументовЕГАИС.Справка1, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
		Если НоваяСправка1 = Неопределено Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			Возврат;
		КонецЕсли;
		
		СписокСправок2XDTO = Новый Массив;
		Если ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformB") Тогда
			СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformB.InformBItem;
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаКвитанцииXDTO, "InformF2") Тогда
			СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformF2.InformF2Item;
		КонецЕсли;
		
		Для Каждого СтрокаСправок2 Из СписокСправок2XDTO Цикл
			НомерНовойСправки2 = "";
			Если ЕстьСвойствоОбъектаXDTO(СтрокаСправок2, "BRegId") Тогда
				НомерНовойСправки2 = СтрокаСправок2.BRegId;
			ИначеЕсли ЕстьСвойствоОбъектаXDTO(СтрокаСправок2, "F2RegId") Тогда
				НомерНовойСправки2 = СтрокаСправок2.F2RegId;
			КонецЕсли;
			
			ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
			ДанныеСправки2.РегистрационныйНомер = НомерНовойСправки2;
			ДанныеСправки2.Наименование         = НомерНовойСправки2;
			ДанныеСправки2.НомерСправки1        = НомерНовойСправки1;
			ДанныеСправки2.Справка1             = НоваяСправка1;
			ДанныеСправки2.ДокументОснование    = РезультатОбработкиДокумента.ДокументОснование;
			
			Если СтрокаТоваров <> Неопределено Тогда
				ДанныеСправки2.АлкогольнаяПродукция = СтрокаТоваров.АлкогольнаяПродукция;
				ДанныеСправки2.Количество = СтрокаТоваров.Количество;
			КонецЕсли;
			
			НоваяСправка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.Справка2, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
			Если НоваяСправка2 = Неопределено Тогда
				РезультатОбработкиДокумента.Результат = Ложь;
				Возврат;
			КонецЕсли;
		
			Если СтрокаТоваров <> Неопределено Тогда
				СтрокаТоваров.Справка2 = НоваяСправка2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если АктОбъект.Модифицированность() Тогда
		Если НЕ ЗаписатьОбъект(АктОбъект, РезультатОбработкиДокумента.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Справки зарегистрированы.'");
	
КонецПроцедуры

// Выполняет действия при получении подтверждения акта расхождений ТТН.
//
Процедура ЗагрузитьПодтверждениеАктаРасхожденийТТН(КвитанцияXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	РезультатОбработкиДокумента.Результат = Истина;
	
	ТТН = Документы.ТТНВходящаяЕГАИС.ТТНПоИдентификатору(КвитанцияXDTO.Header.WBRegId);
	Если НЕ ЗначениеЗаполнено(ТТН) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не найдена входящая ТТН с идентификатором %1.'");
		РезультатОбработкиДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РезультатОбработкиДокумента.ОписаниеОшибки, КвитанцияXDTO.Header.WBRegId);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.ДокументОснование = ТТН;
	
	Если ВРег(КвитанцияXDTO.Header.IsConfirm) = ВРег("Rejected") Тогда
		НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятОтказОтАктаРасхождений;
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН;
	Иначе
		НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений;
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН;
		
		ДокументОбъект = ТТН.ПолучитьОбъект();
		ДокументОбъект.ДатаРегистрацииДвижений = КвитанцияXDTO.Header.TicketDate;
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РезультатОбработкиДокумента.ОписаниеОшибки) Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатОперации = ИзменитьСтатусОбработкиДокумента(ТТН, НовыйСтатус);
	
	Если НЕ РезультатОперации.Результат Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Обработано подтверждение акта расхождений.'");
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(
		ТТН,
		НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятОтказОтАктаРасхождений);
	
КонецПроцедуры

// Выполняет действия при получении акта подтверждения ТТН.
//
Процедура ЗагрузитьАктПодтвержденияТТН(АктXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	РезультатОбработкиДокумента.Результат = Истина;
	
	Если ВРег(АктXDTO.Header.IsAccept) = ВРег("Rejected") Тогда
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН;
	ИначеЕсли ВРег(АктXDTO.Header.IsAccept) = ВРег("Differences") Тогда
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
	Иначе
		Если АктXDTO.Content <> Неопределено И АктXDTO.Content.Position.Количество() > 0 Тогда
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
		Иначе
			РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН;
		КонецЕсли;
	КонецЕсли;
	
	ТТН = Документы.ТТНИсходящаяЕГАИС.ТТНПоИдентификатору(АктXDTO.Header.WBRegId);
	
	Если НЕ ЗначениеЗаполнено(ТТН) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не найдена исходящая ТТН с идентификатором %1.'");
		РезультатОбработкиДокумента.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РезультатОбработкиДокумента.ОписаниеОшибки, АктXDTO.Header.WBRegId);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.ДокументОснование = ТТН;
	
	ТТНОбъект = ТТН.ПолучитьОбъект();
	
	ПредыдущийСтатус = ТТНОбъект.СтатусОбработки;
	
	Если РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН Тогда
		ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа;
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружен акт отказа от ТТН.'");
	Иначе
		Если АктXDTO.Content <> Неопределено Тогда
			Для Каждого СтрокаРасхожденияXDTO Из АктXDTO.Content.Position Цикл
				НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаРасхожденияXDTO.Identity);
				
				Если ТТНОбъект.Товары.Количество() >= НомерСтроки Тогда
					ТТНОбъект.Товары[НомерСтроки - 1].КоличествоФакт = СтрокаРасхожденияXDTO.RealQuantity;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
			ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружен акт расхождений ТТН.'");
		Иначе
			ТТНОбъект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктПодтверждения;
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружен акт подтверждения ТТН.'");
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН ИЛИ ТТНОбъект.СтатусОбработки <> ПредыдущийСтатус Тогда
		Если НЕ ЗаписатьОбъект(ТТНОбъект, РезультатОбработкиДокумента.ОписаниеОшибки, РежимЗаписиДокумента.Проведение) Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАктаПодтвержденияТТН(ТТН,
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН,
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН);
	
КонецПроцедуры

// Выполняет действия при получении запроса на отмену проведения ТТН.
//
Процедура ЗагрузитьЗапросНаОтменуПроведенияТТН(ЗапросXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	РезультатОбработкиДокумента.Результат = Истина;
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН;
	
	ТТН = Документы.ТТНИсходящаяЕГАИС.ТТНПоИдентификатору(ЗапросXDTO.WBRegId);
	
	Если НЕ ЗначениеЗаполнено(ТТН) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не найдена исходящая ТТН с идентификатором %1.'");
		РезультатОбработкиДокумента.ОписаниеОшибки = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", ЗапросXDTO.WBRegId);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОбработкиДокумента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.ДокументОснование = ТТН;
	
	НовыйСтатус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятЗапросНаОтменуПроведения;
	РезультатОперации = ИзменитьСтатусОбработкиДокумента(ТТН, НовыйСтатус);
	
	Если НЕ РезультатОперации.Результат Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Загружает список организаций ЕГАИС в базу.
//
Процедура ЗагрузитьСписокОрганизаций(СписокОрганизацийXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОрганизации;
	
	ТекстОшибки = "";
	Для Каждого ДанныеОрганизацииXDTO Из СписокОрганизацийXDTO Цикл
		ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ДополнительныеПараметры, ТекстОшибки);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
	РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
	
	Если СписокОрганизацийXDTO.Количество() = 0 Тогда
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Отсутствуют данные для загрузки.'");
	Иначе
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загрузка завершена.
															|Загружено элементов: %1.'");
		РезультатОбработкиДокумента.КомментарийЕГАИС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			РезультатОбработкиДокумента.КомментарийЕГАИС,
			Формат(СписокОрганизацийXDTO.Количество(), "ЧГ="));
	КонецЕсли;
	
КонецПроцедуры

// Загружает организацию в базу.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ДополнительныеПараметры, ТекстОшибки)
	
	ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ПустаяСсылка();
	ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.ПустаяСсылка();
	
	Если ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "OrgInfoV2") Тогда
		Если ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill") Тогда
			ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1;
		ИначеЕсли ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill_v2") Тогда
			ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2;
		КонецЕсли;
		
		ЗагружаемаяОрганизацияXDTO = ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO.OrgInfoV2, ТипОрганизации);
	Иначе
		ЗагружаемаяОрганизацияXDTO = ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO, ТипОрганизации);
	КонецЕсли;
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ЗагружаемаяОрганизацияXDTO.ClientRegId);
	
	Если НЕ ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		Организация = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		Организация.Код = ЗагружаемаяОрганизацияXDTO.ClientRegId;
		Организация.Наименование = ЗагружаемаяОрганизацияXDTO.ShortName;
		Если ПустаяСтрока(Организация.Наименование) Тогда
			Организация.Наименование = ЗагружаемаяОрганизацияXDTO.FullName;
		КонецЕсли;
		Организация.НаименованиеПолное = ЗагружаемаяОрганизацияXDTO.FullName;
	Иначе
		Организация = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	Если Организация.ТипОрганизации <> ТипОрганизации И НЕ ТипОрганизации.Пустая() Тогда
		Организация.ТипОрганизации = ТипОрганизации;
	КонецЕсли;
	
	Если Организация.ФорматОбмена <> ФорматОбмена И НЕ ФорматОбмена.Пустая() Тогда
		Организация.ФорматОбмена = ФорматОбмена;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "INN") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.INN) И СокрЛП(Организация.ИНН) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.INN) Тогда
			Организация.ИНН = СокрЛП(ЗагружаемаяОрганизацияXDTO.INN);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "KPP") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.KPP) И СокрЛП(Организация.КПП) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP) Тогда
			Организация.КПП = СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO, "TSNUM") Тогда
		Если НЕ ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.TSNUM) И СокрЛП(Организация.ИдентификаторОрганизацииТС) <> СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM) Тогда
			Организация.ИдентификаторОрганизацииТС = СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM);
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Country);
	
	Если КодСтраны <> 0 И Организация.КодСтраны <> КодСтраны Тогда
		Организация.КодСтраны = КодСтраны;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO.address, "RegionCode") Тогда
		КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.RegionCode);
		Если КодРегиона <> 0 И Организация.КодРегиона <> КодРегиона Тогда
			Организация.КодРегиона = КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойствоОбъектаXDTO(ЗагружаемаяОрганизацияXDTO.address, "Index") Тогда
		ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Index);
		Если ПочтовыйИндекс <> 0 И Организация.ПочтовыйИндекс <> ПочтовыйИндекс Тогда
			Организация.ПочтовыйИндекс = ПочтовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ПредставлениеАдреса) Тогда
		Организация.ПредставлениеАдреса = СокрЛП(ЗагружаемаяОрганизацияXDTO.address.description);
	КонецЕсли;
	
	Если Организация.ТипОрганизации.Пустая() Тогда
		Если НЕ ПустаяСтрока(Организация.ИдентификаторОрганизацииТС) Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ПустаяСтрока(Организация.ИНН) И ПустаяСтрока(Организация.КПП) Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(Организация.КПП) И СтрДлина(СокрЛП(Организация.ИНН)) = 12 Тогда
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			Организация.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.Модифицированность() Тогда
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(Организация, ДополнительныеПараметры);
		
		Если НЕ ЗаписатьОбъект(Организация, ТекстОшибки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация.Ссылка;
	
КонецФункции

// Возвращает объект XDTO организации, которую требуется загрузить.
//
Функция ОпределитьЗагружаемуюОрганизацию(ДанныеОрганизацииXDTO, ТипОрганизации = Неопределено)
	
	ОрганизацияXDTO = Неопределено;
	
	Если ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "UL") И ДанныеОрганизацииXDTO.UL <> Неопределено Тогда
		ОрганизацияXDTO = ДанныеОрганизацииXDTO.UL;
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		
	ИначеЕсли ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "FL") И ДанныеОрганизацииXDTO.FL <> Неопределено Тогда
		ОрганизацияXDTO = ДанныеОрганизацииXDTO.FL;
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		
	ИначеЕсли ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "FO") И ДанныеОрганизацииXDTO.FO <> Неопределено Тогда
		ОрганизацияXDTO = ДанныеОрганизацииXDTO.FO;
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		
	ИначеЕсли ЕстьСвойствоОбъектаXDTO(ДанныеОрганизацииXDTO, "TS") И ДанныеОрганизацииXDTO.TS <> Неопределено Тогда
		ОрганизацияXDTO = ДанныеОрганизацииXDTO.TS;
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		
	Иначе
		ОрганизацияXDTO = ДанныеОрганизацииXDTO;
	КонецЕсли;
	
	Возврат ОрганизацияXDTO;
	
КонецФункции

// Загружает список алкогольной продукции в базу.
//
Функция ЗагрузитьСписокАлкогольнойПродукции(СписокАлкогольнойПродукцииXDTO, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	Результат = Новый Соответствие;
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветАлкогольнаяПродукция;
	
	КоличествоЭлементов = СписокАлкогольнойПродукцииXDTO.Количество();
	
	Если КоличествоЭлементов = 0 Тогда
		РезультатОбработкиДокумента.Результат = Истина;
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Отсутствуют данные для загрузки.'");
		Возврат Результат;
	КонецЕсли;
	
	КлассификаторВидовПродукции = КлассификаторВидовАлкогольнойПродукции();
	ИмяКлассификатора = СправочникВидовАлкогольнойПродукции();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторВидовПродукции", КлассификаторВидовПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КлассификаторВидовПродукции.Код КАК Строка(3)) КАК Код,
	|	КлассификаторВидовПродукции.Наименование КАК Наименование,
	|	КлассификаторВидовПродукции.Маркируемый КАК Маркируемый
	|ПОМЕСТИТЬ КлассификаторВидовПродукции
	|ИЗ
	|	&КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код,
	|	КлассификаторВидовПродукции.Наименование,
	|	КлассификаторВидовПродукции.Маркируемый,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяКлассификатора + " КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО КлассификаторВидовПродукции.Код = ВидыАлкогольнойПродукцииЕГАИС.Код";
	
	КлассификаторВидовПродукции = Запрос.Выполнить().Выгрузить();
	КлассификаторВидовПродукции.Индексы.Добавить("Код");
	
	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Наименование"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Объем"             , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Крепость"          , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Производитель"     , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Импортер"          , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ВидПродукции"      , Новый ОписаниеТипов("СправочникСсылка." + ИмяКлассификатора));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ТипПродукции"      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродукцииЕГАИС"));
	
	ВидыЛицензий = Новый Соответствие;
	ВидыЛицензий.Вставить("АП", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ВидыЛицензий.Вставить("ССП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ВидыЛицензий.Вставить("ССНП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ВидыЛицензий.Вставить("Спирт", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	
	ТекстОшибки = "";
	МассивКодов = Новый Массив;
	
	Для Каждого ДанныеАлкогольнойПродукцииXDTO Из СписокАлкогольнойПродукцииXDTO Цикл
		
		Если МассивКодов.Найти(ДанныеАлкогольнойПродукцииXDTO.AlcCode) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКодов.Добавить(ДанныеАлкогольнойПродукцииXDTO.AlcCode);
		
		СтрокаТаблицы = ТаблицаАлкогольнойПродукции.Добавить();
		СтрокаТаблицы.Код                = ДанныеАлкогольнойПродукцииXDTO.AlcCode;
		СтрокаТаблицы.Наименование       = ДанныеАлкогольнойПродукцииXDTO.ShortName;
		СтрокаТаблицы.НаименованиеПолное = ДанныеАлкогольнойПродукцииXDTO.FullName;
		СтрокаТаблицы.Объем              = ДанныеАлкогольнойПродукцииXDTO.Capacity;
		СтрокаТаблицы.Крепость           = ДанныеАлкогольнойПродукцииXDTO.AlcVolume;
		
		Если ПустаяСтрока(СтрокаТаблицы.Наименование) И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			СтрокаТаблицы.Наименование = СтрокаТаблицы.НаименованиеПолное;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			СтрокаТаблицы.НаименованиеПолное = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукцииXDTO.Producer <> Неопределено Тогда
			СтрокаТаблицы.Производитель = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Producer, ДополнительныеПараметры, ТекстОшибки);
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ДанныеАлкогольнойПродукцииXDTO, "Importer") Тогда
			Если ДанныеАлкогольнойПродукцииXDTO.Importer <> Неопределено Тогда
				СтрокаТаблицы.Импортер = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Importer, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ДанныеАлкогольнойПродукцииXDTO, "UnitType") Тогда
			СтрокаТаблицы.ТипПродукции = ?(ДанныеАлкогольнойПродукцииXDTO.UnitType = "Unpacked",
				Перечисления.ТипыПродукцииЕГАИС.Неупакованная,
				Перечисления.ТипыПродукцииЕГАИС.Упакованная);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаКлассификатора = КлассификаторВидовПродукции.Найти(ДанныеАлкогольнойПродукцииXDTO.ProductVCode, "Код");
		Если СтрокаКлассификатора <> Неопределено Тогда
			Если СтрокаКлассификатора.Ссылка.Пустая() Тогда
				ВидПродукции = Справочники[ИмяКлассификатора].СоздатьЭлемент();
				ВидПродукции.Код          = СтрокаКлассификатора.Код;
				ВидПродукции.Наименование = СтрокаКлассификатора.Наименование;
				ВидПродукции.ВидЛицензии  = ВидыЛицензий[ДанныеАлкогольнойПродукцииXDTO.Type];
				ВидПродукции.Маркируемый  = СтрокаКлассификатора.Маркируемый;
				
				Если НЕ ЗаписатьОбъект(ВидПродукции, ТекстОшибки) Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаКлассификатора.Ссылка = ВидПродукции.Ссылка;
			КонецЕсли;
			
			СтрокаТаблицы.ВидПродукции = СтрокаКлассификатора.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции КАК ТипПродукции
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	&ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код,
	|	ТаблицаАлкогольнойПродукции.Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции,
	|	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК Ссылка,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL 
	|		ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.Наименование КАК СТРОКА(100))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК СТРОКА(100)))
	|			И НЕ ТаблицаАлкогольнойПродукции.Наименование = """"
	|		ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК СТРОКА(1000)))
	|			И НЕ ТаблицаАлкогольнойПродукции.НаименованиеПолное = """"
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Объем = КлассификаторАлкогольнойПродукцииЕГАИС.Объем
	|			И НЕ ТаблицаАлкогольнойПродукции.Объем = 0
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Крепость = КлассификаторАлкогольнойПродукцииЕГАИС.Крепость
	|			И НЕ ТаблицаАлкогольнойПродукции.Крепость = 0
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Производитель = КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|			И НЕ ТаблицаАлкогольнойПродукции.Производитель = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.Импортер = КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|			И НЕ ТаблицаАлкогольнойПродукции.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции
	|			И НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка) 
	|		ИЛИ НЕ ТаблицаАлкогольнойПродукции.ТипПродукции = КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции
	|			И НЕ ТаблицаАлкогольнойПродукции.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка) КАК ЕстьИзменения
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаАлкогольнойПродукции.Код = КлассификаторАлкогольнойПродукцииЕГАИС.Код";
	
	Запрос.УстановитьПараметр("ТаблицаАлкогольнойПродукции", ТаблицаАлкогольнойПродукции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЕстьИзменения Тогда
			Результат.Вставить(Выборка.Код, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.Пустая() Тогда
			АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Иначе
			АлкогольнаяПродукция = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаАлкогольнойПродукции.Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда
				АлкогольнаяПродукция[Колонка.Имя] = Выборка[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ДополнительныеПараметры);
		
		Если НЕ ЗаписатьОбъект(АлкогольнаяПродукция, ТекстОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Вставить(Выборка.Код, АлкогольнаяПродукция.Ссылка);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработкиДокумента.Результат = Истина;
	
	РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загрузка завершена.
		|Загружено элементов: %1.'");
	РезультатОбработкиДокумента.КомментарийЕГАИС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		РезультатОбработкиДокумента.КомментарийЕГАИС,
		Формат(КоличествоЭлементов, "ЧГ="));
		
	Возврат Результат;
	
КонецФункции

// Загружает остатки ЕГАИС по регистру №1 в базу данных.
//
Процедура ЗагрузитьОстаткиВРегистре1(ОтветОстаткиXDTO, РезультатОбработкиДокумента, СтруктураДокумента, ДополнительныеПараметры)
	
	ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗапроса.ДокументОснование) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не найден исходящий документ запроса остатков.'");
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОстаткиВРегистре1;
	
	Док = ДанныеЗапроса.ДокументОснование.ПолучитьОбъект();
	Док.Дата = ОтветОстаткиXDTO.RestsDate;
	
	Док.ОстаткиПоДаннымЕГАИС.Очистить();
	
	ТекстОшибки = "";
	Если ОтветОстаткиXDTO.Products <> Неопределено
		И ОтветОстаткиXDTO.Products.StockPosition.Количество() <> 0 Тогда
		МассивXDTO = Новый Массив;
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.StockPosition Цикл
			МассивXDTO.Добавить(ЭлементXDTO.Product);
		КонецЦикла;
		
		РезультатОперации = РезультатОбработкиВходящегоДокумента();
		ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, РезультатОперации, ДополнительныеПараметры);
		Если НЕ РезультатОперации.Результат Тогда
			РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.StockPosition Цикл
			СтрокаТЧ = Док.ОстаткиПоДаннымЕГАИС.Добавить();
			СтрокаТЧ.АлкогольнаяПродукция = ЗагруженныеПозиции[ЭлементXDTO.Product.AlcCode];
			СтрокаТЧ.Количество = ЭлементXDTO.Quantity;
			
			Если ЕстьСвойствоОбъектаXDTO(ЭлементXDTO, "InformF1RegId") Тогда
				НомерСправки1 = ЭлементXDTO.InformF1RegId;
				НомерСправки2 = ЭлементXDTO.InformF2RegId;
			Иначе
				НомерСправки1 = ЭлементXDTO.InformARegId;
				НомерСправки2 = ЭлементXDTO.InformBRegId;
			КонецЕсли;
			
			ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
			ДанныеСправки2.РегистрационныйНомер = НомерСправки2;
			ДанныеСправки2.Наименование = НомерСправки2;
			ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			ДанныеСправки2.НомерСправки1 = НомерСправки1;
			
			СтрокаТЧ.Справка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.Справка2, ДополнительныеПараметры, ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	Док.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки;
	
	РежимЗаписи = ?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ЗаписатьОбъект(Док, ТекстОшибки, РежимЗаписи);
	
	РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
	РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружены остатки по регистру №1.'");
	КонецЕсли;
	
КонецПроцедуры

// Загружает остатки ЕГАИС по регистру №2 в базу данных.
//
Процедура ЗагрузитьОстаткиВРегистре2(ОтветОстаткиXDTO, РезультатОбработкиДокумента, СтруктураДокумента, ДополнительныеПараметры)
	
	ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
	Если НЕ ЗначениеЗаполнено(ДанныеЗапроса.ДокументОснование) Тогда
		РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не найден исходящий документ запроса остатков.'");
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
	РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтветОстаткиВРегистре2;
	
	Док = ДанныеЗапроса.ДокументОснование.ПолучитьОбъект();
	Док.Дата = ОтветОстаткиXDTO.RestsDate;
	
	Док.ОстаткиПоДаннымЕГАИС.Очистить();
	
	Если ОтветОстаткиXDTO.Products <> Неопределено
		И ОтветОстаткиXDTO.Products.ShopPosition.Количество() <> 0 Тогда
		МассивXDTO = Новый Массив;
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.ShopPosition Цикл
			МассивXDTO.Добавить(ЭлементXDTO.Product);
		КонецЦикла;
		
		РезультатОперации = РезультатОбработкиВходящегоДокумента();
		ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, РезультатОперации, ДополнительныеПараметры);
		Если НЕ РезультатОперации.Результат Тогда
			РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементXDTO Из ОтветОстаткиXDTO.Products.ShopPosition Цикл
			СтрокаТЧ = Док.ОстаткиПоДаннымЕГАИС.Добавить();
			СтрокаТЧ.АлкогольнаяПродукция = ЗагруженныеПозиции[ЭлементXDTO.Product.AlcCode];
			СтрокаТЧ.Количество = ЭлементXDTO.Quantity;
		КонецЦикла;
	КонецЕсли;
	
	Док.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки;
	
	РежимЗаписи = ?(Док.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ТекстОшибки = "";
	ЗаписатьОбъект(Док, ТекстОшибки, РежимЗаписи);
	
	РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
	РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружены остатки по регистру №2.'");
	КонецЕсли;
	
КонецПроцедуры

// Загружает справки по формам А и Б в базу данных.
//
Процедура ЗагрузитьСправку(СправкаXDTO, ВидСправки, РезультатОбработкиДокумента, ДополнительныеПараметры)
	
	РезультатОбработкиДокумента.ВидДокумента = ВидСправки;
	
	ТекстОшибки = "";
	ДанныеСправки = ПолучитьДанныеСправки(СправкаXDTO, ВидСправки, ДополнительныеПараметры, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	СоздатьСправку(ДанныеСправки, ВидСправки, ДополнительныеПараметры, ТекстОшибки);
	
	РезультатОбработкиДокумента.Результат = ПустаяСтрока(ТекстОшибки);
	РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.Справка1 Тогда
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружена справка 1.'");
		ИначеЕсли ВидСправки = Перечисления.ВидыДокументовЕГАИС.Справка2 Тогда
			РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Загружена справка 2.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Загружает и обрабатывает квитанцию из ЕГАИС.
//
Процедура ЗагрузитьКвитанцию(КвитанцияXDTO, РезультатОбработкиДокумента, СтруктураДокумента)
	
	РезультатОбработкиДокумента.Результат = Истина;
	
	ДанныеЗапроса = РегистрыСведений.ПротоколОбменаЕГАИС.НайтиИсходящийЗапрос(СтруктураДокумента.ИдентификаторЗапроса);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗапроса.ВидДокумента) И ЗначениеЗаполнено(КвитанцияXDTO.Identity) И ЗначениеЗаполнено(КвитанцияXDTO.DocType) Тогда
		ДанныеЗапроса = ДанныеИсходящегоЗапроса(КвитанцияXDTO.Identity, КвитанцияXDTO.DocType);
	КонецЕсли;
	
	ИдентификаторЕГАИС = "";
	Если ЗначениеЗаполнено(ДанныеЗапроса.ДокументОснование) Тогда
		Если ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2
			ИЛИ ДанныеЗапроса.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2 Тогда
			ИдентификаторЕГАИС = Строка(КвитанцияXDTO.RegID);
		КонецЕсли;
		
		РезультатОбработкиДокумента.ДокументОснование = ДанныеЗапроса.ДокументОснование;
	КонецЕсли;
	
	Если НЕ КвитанцияXDTO.Result = Неопределено Тогда
		
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.КвитанцияФиксации;
		
		РезультатОперации = ЗагрузитьКвитанциюФиксации(
			КвитанцияXDTO,
			ДанныеЗапроса.ДокументОснование,
			ДанныеЗапроса.ВидДокумента,
			ИдентификаторЕГАИС);
		
		Если НЕ РезультатОперации.Результат Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Иначе
			РезультатОбработкиДокумента.ПолученОтказ = РезультатОперации.ПолученОтказ;
			РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОперации.КомментарийЕГАИС;
		КонецЕсли;
		
	ИначеЕсли НЕ КвитанцияXDTO.OperationResult = Неопределено Тогда
		
		РезультатОбработкиДокумента.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведения;
		
		РезультатОперации = ЗагрузитьКвитанциюПроведения(КвитанцияXDTO, ДанныеЗапроса.ДокументОснование, ИдентификаторЕГАИС);
		
		Если НЕ РезультатОперации.Результат Тогда
			РезультатОбработкиДокумента.Результат = Ложь;
			РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Иначе
			РезультатОбработкиДокумента.ПолученОтказ = РезультатОперации.ПолученОтказ;
			РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатОперации.КомментарийЕГАИС;
		КонецЕсли;
		
	Иначе
		РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Не удалось определить формат ответа на запрос %1'");
		РезультатОбработкиДокумента.КомментарийЕГАИС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РезультатОбработкиДокумента.ОписаниеОшибки, СтруктураДокумента.АдресЗапроса);
		РезультатОбработкиДокумента.ПолученОтказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Загружает информацию о фиксации документа в ЕГАИС.
//
Функция ЗагрузитьКвитанциюФиксации(КвитанцияXDTO, ДокументОснование, ВидДокумента, ИдентификаторЕГАИС)
	
	Результат = РезультатЗагрузкиКвитанции();
	
	РезультатXDTO = КвитанцияXDTO.Result;
	
	Результат.ПолученОтказ = ВРег(РезультатXDTO.Conclusion) = ВРег("Rejected");
	Результат.КомментарийЕГАИС = РезультатXDTO.Comments;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ОтразитьФиксацию = Ложь;
	
	Если Результат.ПолученОтказ Тогда
		ОтразитьФиксацию = Истина;
	Иначе
		ОтразитьФиксацию =
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеЗапросаНаОтменуПроведенияТТН
			ИЛИ ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтЗапросаНаОтменуПроведенияТТН;
	КонецЕсли;
	
	Если ОтразитьФиксацию Тогда
		РезультатОперации = ОтразитьФиксациюДокумента(ДокументОснование, НЕ Результат.ПолученОтказ, ИдентификаторЕГАИС);
		
		Если НЕ РезультатОперации.Результат Тогда
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Загружает информацию о проведении документа в ЕГАИС.
//
Функция ЗагрузитьКвитанциюПроведения(КвитанцияXDTO, ДокументОснование, ИдентификаторЕГАИС)
	
	Результат = РезультатЗагрузкиКвитанции();
	
	РезультатXDTO = КвитанцияXDTO.OperationResult;
	
	Результат.ПолученОтказ = ВРег(РезультатXDTO.OperationResult) = ВРег("Rejected");
	Результат.КомментарийЕГАИС = РезультатXDTO.OperationComment;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ДатаРегистрацииДвижений = Неопределено;
	
	Если ВРег(РезультатXDTO.OperationName) = ВРег("Confirm") Тогда
		
		Если НЕ Результат.ПолученОтказ Тогда
			Если ДокументСоответствуетТипуЕГАИС(ДокументОснование, КвитанцияXDTO.DocType) Тогда
				ДатаРегистрацииДвижений = РезультатXDTO.OperationDate;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(РезультатXDTO.OperationName) = ВРег("UnConfirm") Тогда
		
		Если НЕ Результат.ПолученОтказ Тогда
			
			ТекстОшибки = "";
			ОтменитьПроведениеДокумента(ДокументОснование, ТекстОшибки);
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				Результат.ОписаниеОшибки = ТекстОшибки;
				Возврат Результат;
			Иначе
				Результат.Результат = Истина;
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатОперации = ОтразитьФиксациюДокумента(ДокументОснование, НЕ Результат.ПолученОтказ, ИдентификаторЕГАИС, ДатаРегистрацииДвижений);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие типа ЕГАИС и передаваемого документа.
//
Функция ДокументСоответствуетТипуЕГАИС(ДокументСсылка, ТипЕГАИС)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("WayBill") ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBill_v2");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("ActChargeOn") ИЛИ ВРег(ТипЕГАИС) = ВРег("ActChargeOn_v2") ИЛИ ВРег(ТипЕГАИС) = ВРег("ActChargeOnShop_v2");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("ActWriteOff") ИЛИ ВРег(ТипЕГАИС) = ВРег("ActWriteOff_v2") ИЛИ ВРег(ТипЕГАИС) = ВРег("ActWriteOffShop_v2");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("TransferFromShop");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("TransferToShop");
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Возвращает вид документа и ссылку на документ-основание, выгруженного ранее в ЕГАИС
//
Функция ДанныеИсходящегоЗапроса(Идентификатор, ТипЕГАИС)
	
	Результат = Новый Структура("ВидДокумента, ДокументОснование");
	
	Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВидДокументаПоТипуЕГАИС(ТипЕГАИС);
	
	Если Результат.ВидДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Если Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Идентификатор = &Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИС.Ссылка
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|ГДЕ
		|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор";
	Иначе
		Если Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН
			ИЛИ Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН
			ИЛИ Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН Тогда
			ИмяТаблицы = "ТТНИсходящаяЕГАИС";
			
		ИначеЕсли Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1
			ИЛИ Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2 Тогда
			ИмяТаблицы = "АктПостановкиНаБалансЕГАИС";
			
		ИначеЕсли Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1
			ИЛИ Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
			ИмяТаблицы = "АктСписанияЕГАИС";
			
		ИначеЕсли Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2 Тогда
			ИмяТаблицы = "ВозвратИзРегистра2ЕГАИС";
			
		ИначеЕсли Результат.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2 Тогда
			ИмяТаблицы = "ПередачаВРегистр2ЕГАИС";
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Идентификатор = &Идентификатор";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ДокументОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет статус передачи документа в ЕГАИС и дату регистрации движений.
//
Функция ОтразитьФиксациюДокумента(ДокументОснование, ДокументПередан, ИдентификаторЕГАИС, ДатаРегистрацииДвижений = Неопределено)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	СтатусыПередачиВЕГАИС = Новый Соответствие;
	
	// Акт постановки на баланс
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиВЕГАИС));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// Акт списания
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// ТТН входящая
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданЗапросНаОтменуПроведения,
			Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения));
		
	// ТТН исходящая
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданАктОтказа,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиАктаОтказа));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений));
		
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеЗапросаНаОтменуПроведения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеЗапросаНаОтменуПроведения,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияЗапросаНаОтменуПроведения));
			
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтЗапросаНаОтменуПроведения,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтЗапросаНаОтменуПроведения,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтЗапросаНаОтменуПроведения));
		
	// Остатки ЕГАИС
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиОстатковЕГАИС.ПереданЗапрос,
			Перечисления.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков));
			
	// Передача в регистр №2
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПередаетсяВЕГАИС,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ОшибкаПередачиВЕГАИС));
			
	// Возврат из регистра №2
	СтатусыПередачиВЕГАИС.Вставить(
		Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПередаетсяВЕГАИС,
		Новый Структура("СтатусПередан, СтатусОшибкаПередачи",
			Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПереданВЕГАИС,
			Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ОшибкаПередачиВЕГАИС));
		
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтатусОбработки");
	
	Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено
		ИЛИ НЕ ПустаяСтрока(ИдентификаторЕГАИС)
		ИЛИ НЕ ДатаРегистрацииДвижений = Неопределено Тогда
		
		ДокументОбъект = ДокументОснование.ПолучитьОбъект();
		
		Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено Тогда
			ДокументОбъект.СтатусОбработки = ?(ДокументПередан, СтатусыПередачиВЕГАИС[ТекущийСтатус].СтатусПередан, СтатусыПередачиВЕГАИС[ТекущийСтатус].СтатусОшибкаПередачи);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИдентификаторЕГАИС) Тогда
			ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
		КонецЕсли;
		
		Если НЕ ДатаРегистрацииДвижений = Неопределено Тогда
			ДокументОбъект.ДатаРегистрацииДвижений = ДатаРегистрацииДвижений;
		КонецЕсли;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, Результат.ОписаниеОшибки, РежимЗаписи) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если НЕ СтатусыПередачиВЕГАИС[ТекущийСтатус] = Неопределено Тогда
			ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаОбработкиДокумента(ДокументОснование, ТекущийСтатус, ДокументОбъект.СтатусОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Отменяет проведение документа при получении квитанции об отмене из ЕГАИС.
//
Процедура ОтменитьПроведениеДокумента(ДокументСсылка, ТекстОшибки)
	
	Док = ДокументСсылка.ПолучитьОбъект();
	Док.ДатаРегистрацииДвижений = '00010101';
	
	ПредыдущийСтатус = Док.СтатусОбработки;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		Док.СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		Док.СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		Если Док.СтатусОбработки <> Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа Тогда
			Док.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		Если Док.СтатусОбработки <> Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданАктОтказа
			И Док.СтатусОбработки <> Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа Тогда
			Док.СтатусОбработки = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьОбъект(Док, ТекстОшибки, РежимЗаписиДокумента.Проведение) Тогда
		Если ПредыдущийСтатус <> Док.СтатусОбработки Тогда
			ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаОбработкиДокумента(Док.Ссылка, ПредыдущийСтатус, Док.СтатусОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные справок А и Б в виде структуры для последующей загрузки в базу.
//
Функция ПолучитьДанныеСправки(СправкаXDTO, ВидСправки, ДополнительныеПараметры, ТекстОшибки)
	
	// Соответствие между реквизитами справки (Ключ) и свойствами объекта XDTO (Значение)
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Количество", "Quantity");
	
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.Справка1 Тогда
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		
		Если ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformARegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformARegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "TTNNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "TTNDate");
			СоответствияРеквизитов.Вставить("ДатаОтгрузки", "ShippingDate");
			
			ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(СправкаXDTO.Shipper, ДополнительныеПараметры, ТекстОшибки);
			ДанныеСправки.Грузополучатель = ЗагрузитьОрганизацию(СправкаXDTO.Consignee, ДополнительныеПараметры, ТекстОшибки);
			
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformF1RegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF1RegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "OriginalDocNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "OriginalDocDate");
			
			Если СправкаXDTO.OriginalClient <> Неопределено Тогда
				ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(СправкаXDTO.OriginalClient, ДополнительныеПараметры, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		СоответствияРеквизитов.Вставить("ДатаРозлива", "BottlingDate");
		СоответствияРеквизитов.Вставить("НомерПодтвержденияЕГАИС", "EGAISNumber");
		СоответствияРеквизитов.Вставить("ДатаПодтвержденияЕГАИС", "EGAISDate");
	Иначе
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
		
		Если ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformBRegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformBRegId");
		ИначеЕсли ЕстьСвойствоОбъектаXDTO(СправкаXDTO, "InformF2RegId") Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF2RegId");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствияРеквизитов Цикл
		ДанныеСправки[КлючЗначение.Ключ] = СправкаXDTO.Получить(КлючЗначение.Значение);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивXDTO = Новый Массив;
	МассивXDTO.Добавить(СправкаXDTO.Product);
	
	РезультатОперации = РезультатОбработкиВходящегоДокумента();
	ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивXDTO, РезультатОперации, ДополнительныеПараметры);
	
	Если НЕ РезультатОперации.Результат Тогда
		ТекстОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСправки.АлкогольнаяПродукция = ЗагруженныеПозиции[СправкаXDTO.Product.AlcCode];
	
	Возврат ДанныеСправки;
	
КонецФункции

// Получает данные ТТН в виде структуры для последующей загрузки в базу.
//
Функция ПолучитьДанныеТТНВходящей(ТТНXDTO, ФорматОбмена, РезультатОбработкиДокумента, ДополнительныеПараметры)

	ДанныеТТН = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхТТН();
	ДанныеТТН.Идентификатор = Строка(ТТНXDTO.Identity);
	
	ДанныеТТН.ВидОперации = ?(СтрНайти(ВРег(ТТНXDTO.Header.Type), ВРег("Return")) <> 0,
		Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя,
		Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная);
		
	Если ЕстьСвойствоОбъектаXDTO(ТТНXDTO.Header, "UnitType") Тогда
		ДанныеТТН.Упакована = ТТНXDTO.Header.UnitType = "Packed";
	КонецЕсли;
	
	ДанныеТТН.НомерТТН         = ТТНXDTO.Header.NUMBER;
	ДанныеТТН.ДатаТТН          = ТТНXDTO.Header.Date;
	ДанныеТТН.ДатаОтгрузки     = ТТНXDTO.Header.ShippingDate;
	ДанныеТТН.Грузоотправитель = ЗагрузитьОрганизацию(ТТНXDTO.Header.Shipper, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
	ДанныеТТН.Грузополучатель  = ЗагрузитьОрганизацию(ТТНXDTO.Header.Consignee, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
	
	ГрузоотправительXDTO = ОпределитьЗагружаемуюОрганизацию(ТТНXDTO.Header.Shipper);
	ОбновитьФорматОбменаОрганизацииЕГАИС(ГрузоотправительXDTO.ClientRegId, ФорматОбмена);
	
	Если ЕстьСвойствоОбъектаXDTO(ТТНXDTO.Header, "Supplier") И ТТНXDTO.Header.Supplier <> Неопределено Тогда
		ДанныеТТН.Поставщик = ЗагрузитьОрганизацию(ТТНXDTO.Header.Supplier, ДополнительныеПараметры, РезультатОбработкиДокумента.ОписаниеОшибки);
	КонецЕсли;
	
	ДанныеТТН.Основание = ТТНXDTO.Header.Base;
	ДанныеТТН.Комментарий = ТТНXDTO.Header.Note;
	
	Если НЕ ПустаяСтрока(РезультатОбработкиДокумента.ОписаниеОшибки) Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТТНXDTO.Header.Transport <> Неопределено Тогда
		ДанныеТТН.ТипДоставки     = ТТНXDTO.Header.Transport.TRAN_TYPE;
		ДанныеТТН.Перевозчик      = ТТНXDTO.Header.Transport.TRAN_COMPANY;
		ДанныеТТН.Автомобиль      = ТТНXDTO.Header.Transport.TRAN_CAR;
		ДанныеТТН.Прицеп          = ТТНXDTO.Header.Transport.TRAN_TRAILER;
		ДанныеТТН.Заказчик        = ТТНXDTO.Header.Transport.TRAN_CUSTOMER;
		ДанныеТТН.Водитель        = ТТНXDTO.Header.Transport.TRAN_DRIVER;
		ДанныеТТН.ПунктПогрузки   = ТТНXDTO.Header.Transport.TRAN_LOADPOINT;
		ДанныеТТН.ПунктРазгрузки  = ТТНXDTO.Header.Transport.TRAN_UNLOADPOINT;
		ДанныеТТН.Перенаправление = ТТНXDTO.Header.Transport.TRAN_REDIRECT;
		ДанныеТТН.Экспедитор      = ТТНXDTO.Header.Transport.TRAN_FORWARDER;
	КонецЕсли;
	
	МассивАлкогольнойПродукцииXDTO = Новый Массив;
	
	Для Каждого ЭлементСодержимогоXDTO Из ТТНXDTO.Content.Position Цикл
		
		Если МассивАлкогольнойПродукцииXDTO.Найти(ЭлементСодержимогоXDTO.Product) = Неопределено Тогда
			МассивАлкогольнойПродукцииXDTO.Добавить(ЭлементСодержимогоXDTO.Product);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатОперации = РезультатОбработкиВходящегоДокумента();
	ЗагруженныеПозиции = ЗагрузитьСписокАлкогольнойПродукции(МассивАлкогольнойПродукцииXDTO, РезультатОперации, ДополнительныеПараметры);
	
	Если НЕ РезультатОперации.Результат Тогда
		РезультатОбработкиДокумента.Результат = Ложь;
		РезультатОбработкиДокумента.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементСодержимогоXDTO Из ТТНXDTO.Content.Position Цикл
		
		СтрокаТТН = СтруктураДанныхСтрокиТТНВходящей();
		СтрокаТТН.АлкогольнаяПродукция  = ЗагруженныеПозиции[ЭлементСодержимогоXDTO.Product.AlcCode];
		СтрокаТТН.ИдентификаторУпаковки = ЭлементСодержимогоXDTO.Pack_ID;
		СтрокаТТН.Количество            = ЭлементСодержимогоXDTO.Quantity;
		СтрокаТТН.Цена                  = ЭлементСодержимогоXDTO.Price;
		СтрокаТТН.НомерПартии           = ЭлементСодержимогоXDTO.Party;
		СтрокаТТН.ИдентификаторСтроки   = ЭлементСодержимогоXDTO.Identity;
		
		Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимогоXDTO, "InformA") Тогда
			СтрокаТТН.НомерСправки1 = ЭлементСодержимогоXDTO.InformA.RegId;
			СтрокаТТН.НомерСправки2Поставщика = ЭлементСодержимогоXDTO.InformB.InformBItem.BRegId;
		Иначе
			СтрокаТТН.НомерСправки1 = ЭлементСодержимогоXDTO.InformF1.RegId;
			СтрокаТТН.НомерСправки2Поставщика = ЭлементСодержимогоXDTO.InformF2.InformF2Item.F2RegId;
		КонецЕсли;
		
		Если ЕстьСвойствоОбъектаXDTO(ЭлементСодержимогоXDTO, "InformB") Тогда
			МаркировкаXDTO = ЭлементСодержимогоXDTO.InformB.InformBItem.MarkInfo;
		Иначе
			МаркировкаXDTO = ЭлементСодержимогоXDTO.InformF2.InformF2Item.MarkInfo;
		КонецЕсли;
		
		Если МаркировкаXDTO <> Неопределено Тогда
			Для Каждого ЭлементДиапазонаXDTO Из МаркировкаXDTO.Ranges.Range Цикл
				ДиапазонНомеров = СтруктураДанныхСтрокиДиапазонаМарок();
				ДиапазонНомеров.ТипМарки       = МаркировкаXDTO.Type;
				ДиапазонНомеров.Идентификатор  = ЭлементДиапазонаXDTO.Identity;
				ДиапазонНомеров.Серия          = ЭлементДиапазонаXDTO.Rank;
				ДиапазонНомеров.НачальныйНомер = ЭлементДиапазонаXDTO.Start;
				ДиапазонНомеров.КонечныйНомер  = ЭлементДиапазонаXDTO.Last;
				
				СтрокаТТН.ДиапазоныНомеровМарок.Добавить(ДиапазонНомеров);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТТН.ТаблицаТоваров.Добавить(СтрокаТТН);
		
	КонецЦикла;
	
	РезультатОбработкиДокумента.Результат = Истина;
	
	Возврат ДанныеТТН;

КонецФункции

// Обновляет используемый формат обмена данными у организации ЕГАИС.
//
Процедура ОбновитьФорматОбменаОрганизацииЕГАИС(КодФСРАР, ФорматОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодФСРАР);
	Запрос.УстановитьПараметр("ФорматОбмена", ФорматОбмена);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка,
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &Код
	|	И КлассификаторОрганизацийЕГАИС.ФорматОбмена <> &ФорматОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОрганизацияЕГАИС = Выборка.Ссылка.ПолучитьОбъект();
	ОрганизацияЕГАИС.ФорматОбмена = ФорматОбмена;
	ОрганизацияЕГАИС.Записать();
	
КонецПроцедуры

// Заполняет структуру результата загрузки квитанции.
//
Функция РезультатЗагрузкиКвитанции()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"       , Ложь);
	Результат.Вставить("ОписаниеОшибки"  , "");
	Результат.Вставить("ПолученОтказ"    , Ложь);
	Результат.Вставить("КомментарийЕГАИС", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует строку в вид XML.
//
Функция ФорматироватьТекстXML(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		Возврат СтрокаXML;
	КонецПопытки;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Преобразует содержимое произвольного объекта XDTO источника (без типов) в содержимое объекта XDTO приемника (с типами).
//
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник)
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		Если СвойствоПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				ЗначениеСвойстваПриемника = ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЗначениеСвойства, ЗначениеСвойстваПриемника);
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
						
						ЭлементаСпискаПриемника = ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ЭлементаСпискаПриемника);
							ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементСпискаИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Попытка
				
				Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойства);
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойства;
				КонецЕсли;
				
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

// Создает ОбъектXDTO из пространства имен по имени свойства.
//
Функция ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойства, ОбъектXDTOРодитель = Неопределено)
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		ТипОбъекта = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяСвойства).Тип;
	Иначе
		ТипОбъекта = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства).Тип;
	КонецЕсли;
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции

// Проверяет наличие свойства у объекта XDTO. Возвращает Истина, если свойство присутствует.
//
Функция ЕстьСвойствоОбъектаXDTO(ОбъектXDTO, ИмяСвойства)
	
	Возврат ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO.
//
Процедура УстановитьЗначениеСвойстваXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, ТекстОшибкиГлобальный, Глубина = Неопределено)
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ЧтениеXML = Новый Структура;
		ЧтениеXML.Вставить("Имя"                , ИмяСвойства);
		ЧтениеXML.Вставить("ЛокальноеИмя"       , ИмяСвойства);
		ЧтениеXML.Вставить("Значение"           , ЗначениеСвойства);
		ЧтениеXML.Вставить("ТипУзла"            , ТипУзлаXML.КонецЭлемента);
		ЧтениеXML.Вставить("URIПространстваИмен", ОбъектXDTO.Тип().URIПространстваИмен);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПредставлениеОшибкиXDTO(ТекстОшибки, ЧтениеXML, Глубина);
		
		Если НЕ ПустаяСтрока(ТекстОшибкиГлобальный) Тогда
			ТекстОшибкиГлобальный = ТекстОшибкиГлобальный + Символы.ПС;
		КонецЕсли;
		
		ТекстОшибкиГлобальный = ТекстОшибкиГлобальный + Символы.Таб + ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает пользовательское представление ошибки при чтении/записи xml-файла.
//
Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Глубина = Неопределено)
	
	Если СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Ошибка проверки данных XDTO'")) = 0
		И СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Несоответствие типов XDTO'")) = 0 Тогда
		Возврат ПредставлениеОшибки;
	КонецЕсли;
	
	ЗначениеПоля = ЧтениеXML.Значение;
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	ТаблицаПредставлений = ПредставленияПолейЕГАИС();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПространствоИмен", ЧтениеXML.URIПространстваИмен);
	Отбор.Вставить("ЛокальноеИмя", ЧтениеXML.ЛокальноеИмя);
	
	МассивСтрок = ТаблицаПредставлений.НайтиСтроки(Отбор);
	
	СтрокаТаблицы = Неопределено;
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	ИначеЕсли МассивСтрок.Количество() > 1 И НЕ Глубина = Неопределено Тогда
		Отбор.Вставить("Глубина", Глубина);
		МассивСтрокПоГлубине = ТаблицаПредставлений.НайтиСтроки(Отбор);
		Если МассивСтрокПоГлубине.Количество() = 1 Тогда
			СтрокаТаблицы = МассивСтрокПоГлубине[0];
		Иначе
			СтрокаТаблицы = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ПредставлениеОшибки = НСтр("ru = 'Не заполнено значение поля ""%1"" (%2)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			Иначе
				ПредставлениеОшибки = НСтр("ru = 'Некорректное значение ""%1"" поля ""%2"" (%3)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ЗначениеПоля, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			КонецЕсли;
		Иначе
			ИндексСтроки = ТаблицаПредставлений.Индекс(СтрокаТаблицы);
			
			Пока ИндексСтроки > 0 Цикл
				ПредыдущееПоле = ТаблицаПредставлений[ИндексСтроки - 1];
				Если ПредыдущееПоле.ПространствоИмен <> СтрокаТаблицы.ПространствоИмен
					ИЛИ ПредыдущееПоле.Глубина <> СтрокаТаблицы.Глубина Тогда
					Прервать;
				КонецЕсли;
				Если ПредыдущееПоле.Обязательное Тогда
					ПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""%1"" (%2)'");
					ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ПредыдущееПоле.Представление, ПредыдущееПоле.ЛокальноеИмя);
					Прервать;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

// Формирует пользовательское представление ошибки преобразования в XDTO.
//
Процедура ЗавершитьПреобразованиеXDTO(ВидОбъекта, ВыгружаемыйОбъект, ТекстОшибкиГлобальный, ТекстОшибки)
	
	ПредставлениеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1: %2", Строка(ВидОбъекта), Строка(ВыгружаемыйОбъект));
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		НачалоСообщения = НСтр("ru='Ошибка при выгрузке объекта ""%1""
									|по причине:'");
		НачалоСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НачалоСообщения, ПредставлениеОбъекта);
		
		Если НЕ ПустаяСтрока(ТекстОшибкиГлобальный) Тогда
			ТекстОшибкиГлобальный = ТекстОшибкиГлобальный + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстОшибкиГлобальный = ТекстОшибкиГлобальный + НачалоСообщения + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает корневое пространство имен для документов ЕГАИС.
//
Функция КорневоеПространствоИмен()
	
	Возврат "http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01";
	
КонецФункции

// Возвращает все пространства зависимые пространства имен из коллекции пакетов.
//
Функция ЗависимыеПространстваИмен(ЗависимыеПакеты, Результат)
	
	Для Каждого ПакетXDTO Из ЗависимыеПакеты Цикл
		Если Результат.Найти(ПакетXDTO.URIПространстваИмен) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПакетXDTO.URIПространстваИмен);
		
		ЗависимыеПространстваИмен(ПакетXDTO.Зависимости, Результат);
	КонецЦикла;
	
КонецФункции

// Функция возвращает таблицу значений представлений полей файла обмена с УТМ.
//
Функция ПредставленияПолейЕГАИС()
	
	ТаблицаПредставлений = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("ПредставленияПолейЕГАИС");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		Если ИмяКолонки = "Глубина" Тогда
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
		ИначеЕсли ИмяКолонки = "Обязательное" Тогда
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
		Иначе
			ТаблицаПредставлений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаПредставлений.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			Если ИмяКолонки = "Глубина" Тогда
				новСтр[Сч-1] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки));
			ИначеЕсли ИмяКолонки = "Обязательное" Тогда
				новСтр[Сч-1] = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки)));
			Иначе
				новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПредставлений.Сортировать(ТаблицаПредставлений.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаПредставлений;
	
КонецФункции

// Формирует уникальный идентификатор для нового элемента справочника.
//
// Параметры:
//  Источник - СправочникОбъект - записываемый элемент справочника,
//  Отказ - Булево - признак отказа от записи.
//
Процедура СформироватьИдентификаторОбъектаРИБПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = Источник.Метаданные().Имя;
	
	Если ИмяСправочника = "Справки1ЕГАИС"
		ИЛИ ИмяСправочника = "Справки2ЕГАИС" Тогда
		ИмяРеквизита = "РегистрационныйНомер";
		ПредставлениеРеквизита = Источник.Метаданные().Реквизиты.РегистрационныйНомер.Синоним;
	Иначе
		ИмяРеквизита = "Код";
		ПредставлениеРеквизита = Источник.Метаданные().СтандартныеРеквизиты.Код.Синоним;
		
		Если ПустаяСтрока(ПредставлениеРеквизита) Тогда
			ПредставлениеРеквизита = НСтр("ru='Код'");
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		НовыйИдентификатор = Неопределено;
		
		Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда
			НовыйИдентификатор = СформироватьУникальныйИдентификатор(Источник[ИмяРеквизита], ИмяСправочника);
		КонецЕсли;
		
		Если НовыйИдентификатор <> Неопределено Тогда
			НоваяСсылка = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйИдентификатор);
			Если НЕ ПустаяСтрока(НоваяСсылка.ВерсияДанных) Тогда
				СтрокаСообщения = НСтр("ru='Значение ""%1"" поля ""%2"" не уникально'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Источник[ИмяРеквизита], ПредставлениеРеквизита);
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			Источник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
	Иначе
		ПредыдущийКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, ИмяРеквизита);
		Если ПредыдущийКод <> Источник[ИмяРеквизита] Тогда
			СтрокаСообщения = НСтр("ru = 'Изменение реквизита ""%1"" для существующих элементов запрещено'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПредставлениеРеквизита);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует уникальный идентификатор из переданной строки добавлением лидирующих нулей.
//
Функция СформироватьУникальныйИдентификатор(ИсходнаяСтрока, ИмяСправочника)
	
	Префиксы = Новый Соответствие;
	Префиксы.Вставить("КлассификаторАлкогольнойПродукцииЕГАИС", "00");
	Префиксы.Вставить("КлассификаторОрганизацийЕГАИС"         , "01");
	Префиксы.Вставить("Справки1ЕГАИС"                         , "02");
	Префиксы.Вставить("Справки2ЕГАИС"                         , "03");
	Префиксы.Вставить(СправочникВидовАлкогольнойПродукции()   , "04");
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Префиксы[ИмяСправочника] + ИсходнаяСтрока);
	
	ХешСумма = Строка(ХешированиеДанных.ХешСумма);
	
	Строка32 = "";
	Для Сч = 1 По СтрДлина(ХешСумма) Цикл
		ТекСимвол = Сред(ХешСумма, Сч, 1);
		Если Найти("0123456789abcdef", НРег(ТекСимвол)) <> 0 Тогда
			Строка32 = Строка32 + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Строка32) < 32 Тогда
		Строка32 = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка32, 32, "0");
	КонецЕсли;
	
	СтрокаGUID = Лев(Строка32, 8)
		+ "-" + Сред(Строка32, 9, 4)
		+ "-" + Сред(Строка32, 13, 4)
		+ "-" + Сред(Строка32, 17, 4)
		+ "-" + Сред(Строка32, 21, 12);
	
	НовыйИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID);
	
	Возврат НовыйИдентификатор;
	
КонецФункции

// Записывает переданный объект в базу данных.
//
Функция ЗаписатьОбъект(Объект, ТекстОшибки, РежимЗаписи = Неопределено)
	
	Объект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзЕГАИС", Истина);
	
	Попытка
		Если НЕ РежимЗаписи = Неопределено Тогда
			Объект.Записать(РежимЗаписи);
		Иначе
			Объект.Записать();
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка записи %1.'");
		
		ПредставлениеОбъекта = "";
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			ПредставлениеОбъекта = ПредставлениеОбъекта + НСтр("ru = 'документа'");
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
			ПредставлениеОбъекта = ПредставлениеОбъекта + НСтр("ru = 'элемента справочника'");
		КонецЕсли;
		
		ПредставлениеОбъекта = ПредставлениеОбъекта + " '" + Объект.Метаданные().Представление() + "'";
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПредставлениеОбъекта);
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияЕГАИСКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#Область ПодборСправок2

// Инициализирует начальные данные для подбора справок 2 для списания по LIFO.
//
Функция ПодготовитьДанныеДляПодбораСправок2(Товары)
	
	ТаблицаДляЗаполнения = Новый ТаблицаЗначений;
	ТаблицаДляЗаполнения.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаДляЗаполнения.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	ТаблицаДляСписания.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаДляСписания.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаДляСписания.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Справка2)Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаТовары);
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДляСписания.Добавить(), СтрокаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДляЗаполнения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДляСписания.Свернуть("АлкогольнаяПродукция, Справка2", "Количество");
	ТаблицаДляЗаполнения.Свернуть("АлкогольнаяПродукция", "Количество");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДляЗаполнения.АлкогольнаяПродукция,
	|	ТаблицаДляЗаполнения.Количество
	|ПОМЕСТИТЬ втТаблицаДляЗаполнения
	|ИЗ
	|	&ТаблицаДляЗаполнения КАК ТаблицаДляЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляСписания.АлкогольнаяПродукция,
	|	ТаблицаДляСписания.Справка2,
	|	ТаблицаДляСписания.Количество
	|ПОМЕСТИТЬ втТаблицаДляСписания
	|ИЗ
	|	&ТаблицаДляСписания КАК ТаблицаДляСписания
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДляЗаполнения", ТаблицаДляЗаполнения);
	Запрос.УстановитьПараметр("ТаблицаДляСписания",   ТаблицаДляСписания);
	
	Запрос.Выполнить();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ВозвращаемоеЗначение.Вставить("ТаблицаДляЗаполнения",    ТаблицаДляЗаполнения);
	ВозвращаемоеЗначение.Вставить("ТаблицаДляСписания",      ТаблицаДляСписания);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет справку 2 в тех строках таблицы Товары, где справка 2 не заполнена.
//
Функция ЗаполнитьСправку2ВТабличнойЧасти(Товары, АлкогольнаяПродукция, Справка2, ОстатокПоСправке, СтруктураПересчетаСуммы)
	
	ЕстьСтрокиДляЗаполнения = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
	Отбор.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	
	Пока ОстатокПоСправке > 0 Цикл
		
		МассивСтрок = Товары.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			ЕстьСтрокиДляЗаполнения = Ложь;
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			
			СтрокаТЧ.Справка2 = Справка2;
			
			Если СтрокаТЧ.Количество > ОстатокПоСправке Тогда
				
				ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
				
				РазницаПоКоличеству = СтрокаТЧ.Количество - ОстатокПоСправке;
				СтрокаТЧ.Количество = ОстатокПоСправке;
				
				НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаТЧ) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.Количество = РазницаПоКоличеству;
				НоваяСтрока.Справка2   = Справочники.Справки2ЕГАИС.ПустаяСсылка();
				
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НоваяСтрока);
				ИнтеграцияЕГАИСКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			
			КонецЕсли;
			
			ОстатокПоСправке = ОстатокПоСправке - СтрокаТЧ.Количество;
			Если ОстатокПоСправке <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьСтрокиДляЗаполнения;
	
КонецФункции

// Заполняет таблицы, по которым будет сформирован возврат из регистра 2.
//
Функция ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(МенеджерВременныхТаблиц, ОрганизацияЕГАИС, Период, Таблицы)
	
	Запрос = Новый Запрос(
	"////////////////////////////////////////////////////////////////////////////////0
	|ВЫБРАТЬ 
	|	ОстатокВРегистре2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстатокВРегистре2.Справка2             КАК Справка2,
	|	ОстатокВРегистре2.Количество           КАК Количество
	|ПОМЕСТИТЬ втОстатокВРегистре2
	|ИЗ
	|	&ОстатокВРегистре2 КАК ОстатокВРегистре2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ГраницыНачало
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДляЗаполнения КАК втТаблицаДляЗаполнения
	|		ПО (втТаблицаДляЗаполнения.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция)
	|ГДЕ
	|	(   Таблица.Регистратор ССЫЛКА Документ.ВозвратИзРегистра2ЕГАИС
	|	ИЛИ Таблица.Регистратор ССЫЛКА Документ.ПередачаВРегистр2ЕГАИС)
	|	И Таблица.Количество <> 0
	|	И Таблица.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	" + ?(ЗначениеЗаполнено(Период), "И Таблица.Период < &Период", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Таблица.Период), ДатаВремя(1,1,1)) КАК Период
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	ГраницыНачало КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Справка2 КАК Справка2,
	|	ВЫБОР
	|		КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -Таблица.Количество
	|		КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Таблица.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ втПорцияДанных
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДляЗаполнения КАК втТаблицаДляЗаполнения
	|		ПО (втТаблицаДляЗаполнения.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция)
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Границы КАК Границы
	|		ПО ИСТИНА
	|ГДЕ
	|	(   Таблица.Регистратор ССЫЛКА Документ.ВозвратИзРегистра2ЕГАИС
	|	ИЛИ Таблица.Регистратор ССЫЛКА Документ.ПередачаВРегистр2ЕГАИС)
	|	И Таблица.Количество <> 0
	|	И Таблица.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И Таблица.Период >= Границы.Период
	|	" + ?(ЗначениеЗаполнено(Период), "И Таблица.Период < &Период", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Справка2 КАК Справка2,
	|	Таблица.Количество КАК Количество
	|ИЗ
	|	втПорцияДанных КАК Таблица
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Период УБЫВ,
	|	Таблица.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	0                            КАК Требуется
	|ПОМЕСТИТЬ ТаблицаДляГруппировки
	|ИЗ
	|	втПорцияДанных КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	-Таблица.Количество,
	|	0
	|ИЗ
	|	втТаблицаДляСписания КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Количество,
	|	0
	|ИЗ
	|	втОстатокВРегистре2 КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	0,
	|	Таблица.Количество
	|ИЗ
	|	втТаблицаДляЗаполнения КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДляГруппировки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ТаблицаДляГруппировки.Количество)    КАК Количество,
	|	СУММА(ТаблицаДляГруппировки.Требуется)     КАК Требуется
	|ИЗ
	|	ТаблицаДляГруппировки КАК ТаблицаДляГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДляГруппировки.АлкогольнаяПродукция
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДляГруппировки.Требуется) - СУММА(ТаблицаДляГруппировки.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ
	|	Границы.Период
	|ИЗ
	|	Границы КАК Границы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстатокВРегистре2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПорцияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГраницыНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Границы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДляГруппировки
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",  ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("ОстатокВРегистре2", Таблицы.ОстатокВРегистре2);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НоваяПорция = РезультатЗапроса[4].Выгрузить();
	
	Для Каждого СтрокаТЧ Из НоваяПорция Цикл
		
		Если СтрокаТЧ.Количество < 0 Тогда
			НоваяСтрока = Таблицы.ТаблицаДляСписания.Добавить();
			НоваяСтрока.АлкогольнаяПродукция =  СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.Справка2             =  СтрокаТЧ.Справка2;
			НоваяСтрока.Количество           = -СтрокаТЧ.Количество;
			Продолжить;
		КонецЕсли;
		
		Если Таблицы.ТаблицаДляСписания.Количество() > 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("Справка2",             СтрокаТЧ.Справка2);
			НайденныеСтроки = Таблицы.ТаблицаДляСписания.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Количество > 0 И СтрокаТЧ.Количество > 0 Тогда
					
					Если СтрокаТЧ.Количество <= НайденнаяСтрока.Количество Тогда
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТЧ.Количество;
						СтрокаТЧ.Количество = 0;
					Иначе
						Разница = СтрокаТЧ.Количество - НайденнаяСтрока.Количество;
						НайденнаяСтрока.Количество = 0;
						СтрокаТЧ.Количество = СтрокаТЧ.Количество - Разница;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НайденнаяСтрока.Количество = 0 Тогда
					Таблицы.ТаблицаДляСписания.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Количество <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("Последняя",            Истина);
			НайденныеСтроки = Таблицы.ОстатокВРегистре2.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					Если НайденнаяСтрока.Справка2 = СтрокаТЧ.Справка2 Тогда
						
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаТЧ.Количество;
						
					Иначе
						
						НайденнаяСтрока.Последняя = Ложь;
						
						НоваяСтрока = Таблицы.ОстатокВРегистре2.Добавить();
						НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
						НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
						НоваяСтрока.Количество           = СтрокаТЧ.Количество;
						НоваяСтрока.Последняя            = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = Таблицы.ОстатокВРегистре2.Добавить();
				НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
				НоваяСтрока.Количество           = СтрокаТЧ.Количество;
				НоваяСтрока.Последняя            = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатЗапроса[6].Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Границы = РезультатЗапроса[7].Выгрузить();
		Если Границы.Количество() = 1 Тогда
			
			НовыйПериод = Границы[0].Период;
			
			Если ЗначениеЗаполнено(НовыйПериод) Тогда
				
				Возврат ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(
					МенеджерВременныхТаблиц,
					ОрганизацияЕГАИС,
					НовыйПериод,
					Таблицы);
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Все строки табличной части имеют заполненные справки 2.
//
// Параметры:
//  Товары - ТабличнаяЧасть - Табличная часть.
//
// Возвращаемое значение:
//  Булево - Истина, если в табличной части нет строк с незаполнными справками 2.
//
Функция Справки2ЗаполненыВТабличнойЧасти(Товары) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеСтроки.Количество() = 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти