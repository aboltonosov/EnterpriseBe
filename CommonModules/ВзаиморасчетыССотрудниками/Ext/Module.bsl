
#Область ПрограммныйИнтерфейс

#Область УчетНачисленнойИВыплаченнойЗарплаты

// Процедура регистрирует факт начисления зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений, коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		ХарактерВыплаты   - ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//		Начисления        - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//		Удержания         - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//
Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления, Удержания);
КонецПроцедуры

// Процедура регистрирует факт начисления авансов с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений, коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		Начисления        - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//		Удержания         - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания);
КонецПроцедуры

// Процедура регистрирует факт выплаты зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений ведомости.
//		Отказ             - Булево - признак отказа в проведении.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		Зарплата          - ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты
//		ХарактерВыплаты   - ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//
Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата, ХарактерВыплаты = Неопределено) Экспорт
	Если ХарактерВыплаты = Неопределено Тогда
		ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
	КонецЕсли;	
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата)
КонецПроцедуры

// Процедура регистрирует ввод начальных остатков по взаиморасчетам с сотрудниками.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений документа ввода начальных остатков.
//		Отказ    			- булево, признак отказа в проведении.
//		ПериодРегистрации	- дата.
//		Остатки  - таблица значений с данными о начальных остатках:
//								•	Сотрудник (СправочникСсылка.Сотрудники)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//								•	ПериодВзаиморасчетов (Дата) 	
//								•	Сумма 	
//
Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

// Функция возвращает новую таблицу значений для данных о начисленной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* Сотрудник - СправочникСсылка.Сотрудники
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма - Число 	
//			* СуммаКорректировкиВыплаты - Число - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
//
Функция НоваяТаблицаНачисленнойЗарплаты() Экспорт
	
	НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
	
	Колонки = Новый Массив;
	Колонки.Добавить("ФизическоеЛицо");
	Колонки.Добавить("Сотрудник");
	Колонки.Добавить("Подразделение");
	Колонки.Добавить("СтатьяФинансирования");
	Колонки.Добавить("СтатьяРасходов");
	Колонки.Добавить("Сумма");
	Колонки = СтрСоединить(Колонки, ", ");
	
	Таблица = НаборЗаписей.ВыгрузитьКолонки(Колонки);
	Таблица.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Возврат Таблица
	
КонецФункции

// Создает новую пустую таблицу значений для данных о выплаченной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* Сотрудник - СправочникСсылка.Сотрудники
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//			* ПериодВзаиморасчетов - Дата
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//			* ДокументОснование - ОпределяемыйТип.ДокументОснованиеЗарплатыКВыплате
//			* Сумма - Число 	
//
Функция НоваяТаблицаВыплаченнойЗарплаты() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ПериодВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ДокументОснование",    Метаданные.ОпределяемыеТипы.ДокументОснованиеЗарплатыКВыплате.Тип);
	Таблица.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Таблица
	
КонецФункции

// Создает новую таблицу значений для данных о выплаченной зарплате по переданной табличной части.
//
// Параметры:
//		ТабличнаяЧасть - ТабличнаяЧасть - данные о выплаченной зарплате.
//		ОписаниеСоответствияКолонок - Структура - см. НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты
//
// Возвращаемое значение:
//		ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты()
//
Функция НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(ТабличнаяЧасть, ОписаниеСоответствияКолонок) Экспорт
	
	КолонкиТаблицыВыплаченнойЗарплаты = КолонкиТаблицыВыплаченнойЗарплаты();
	
	КолонкиВыгружаемые  = Новый Массив;
	КолонкиГруппировок  = Новый Массив;
	КолонкиСуммирования = Новый Массив;
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		Если КолонкиТаблицыВыплаченнойЗарплаты.Все.Найти(ОписаниеКолонки.Ключ) = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти: недопустимое имя колонки таблицы выплаченной зарплаты в описании соответствия колонок'")
		КонецЕсли;	
		КолонкиВыгружаемые.Добавить(ОписаниеКолонки.Значение);
		Если КолонкиТаблицыВыплаченнойЗарплаты.Группировок.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиГруппировок.Добавить(ОписаниеКолонки.Значение);
		ИначеЕсли КолонкиТаблицыВыплаченнойЗарплаты.Суммирования.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиСуммирования.Добавить(ОписаниеКолонки.Значение);
		КонецЕсли	
	КонецЦикла;	
	
	ТаблицаВыплаченнойЗарплаты = ТабличнаяЧасть.Выгрузить(, СтрСоединить(КолонкиВыгружаемые, ", "));
	ТаблицаВыплаченнойЗарплаты.Свернуть(СтрСоединить(КолонкиГруппировок, ", "), СтрСоединить(КолонкиСуммирования, ", "));
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		ТаблицаВыплаченнойЗарплаты.Колонки[ОписаниеКолонки.Значение].Имя = ОписаниеКолонки.Ключ
	КонецЦикла;
	
	Возврат ТаблицаВыплаченнойЗарплаты
	
КонецФункции

// Создает описание соответствия колонок входной таблицы колонкам таблицы выплаченной зарплаты.
// Предназначена для использования в функциях- конструкторах таблицы выплаченной зарплаты.
// см. НоваяТаблицаВыплаченнойЗарплаты(), см. НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти()
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя колонки таблицы выплаченной зарплаты, значение - имя колонки входной таблицы 
//
Функция НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты() Экспорт
	
	ОписаниеСоответствияКолонок = Новый Структура;
	
	Для Каждого Колонка из НоваяТаблицаВыплаченнойЗарплаты().Колонки Цикл
		ОписаниеСоответствияКолонок.Вставить(Колонка.Имя, Колонка.Имя)
	КонецЦикла;
	
	Возврат ОписаниеСоответствияКолонок
	
КонецФункции
	
#КонецОбласти

#Область ОплатаВедомостей

// Функция возвращает информацию для оплаты платежным документом указанных ведомостей.
//	Удобна для использования в процедурах заполнения платежных документов.
//	Возвращаются суммы в разрезе ведомостей и физических лиц с учетом состояния оплаты
//  (все, оплаченные, только неоплаченные).
//	Оплаты, проведенные самим документом, не учитываются.
//
// Параметры:
//	Документ	 	- ссылка на документ-заказчик (его оплаты не учитываются).
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
// Возвращаемое значение:
//		ДанныеВедомостейДляОплаты -	Таблица значений со строками ведомости:
//			Ведомость (ДокументСсылка)
//			ФизическоеЛицо
//			СуммаКВыплате
//			КомпенсацияЗаЗадержкуЗарплаты (заполняется только для ВедомостьНаВыплатуЗарплаты).
//
Функция ДанныеВедомостейДляОплатыДокументом(Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, Ложь, Документ, Ведомости, ФизическиеЛица, Оплаченные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате,
	|	ДанныеВедомостей.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументом КАК ДанныеВедомостей";
	
	ДанныеВедомостейДляОплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеВедомостейДляОплаты;
	
КонецФункции

// Функция-конструктор структуры, описывающей правила контроля данных об оплате.
//	Предназначения для создания параметра Проверки процедуры ПроверитьОплатуВедомостейДокументом.
//							
// Возвращаемое значение:
//		Структура проверок с полями:
//			ВедомостьПроведена	- контролировать, что ведомость проведена.
//			РаботникВВедомости	- контролировать наличие указанного работника в ведомости.
//			ПовторнаяВыплата	- контроль повторной выплаты по строке ведомости.
//
Функция ПроверкиОплатыВедомостейДокументом() Экспорт
	
	Проверки = Новый Структура;
	
	Проверки.Вставить("ВедомостьПроведена",	Истина);
	Проверки.Вставить("РаботникВВедомости",	Истина);
	Проверки.Вставить("ПовторнаяВыплата",	Истина);
	
	Возврат Проверки
	
КонецФункции

// Процедура проверяет данные по оплате зарплаты.
//	Удобна для использования при проведении.
//	Контролируется:
//		проведенность ведомости
//		соответствие ведомости и работника (наличие такого в ведомости)
//		попытка повторной выплаты
//	Объем проверок может настраиваться параметром Проверки 
//
// Параметры:
//	Документ		 - объект или ссылка - платежный документ (его оплаты не учитываются).
//	Отказ			 - булево - признак наличия ошибок в проверяемых данных ведомостей.
//	ОплатаВедомостей - таблица значений с данными об оплате вида:
//							Ведомость (ДокументСсылка)
//							ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//	Проверки		 - Структура правил проверки, см. ПроверкиОплатыВедомостейДокументом().
//
Процедура ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = ПроверкиОплатыВедомостейДокументом()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Документ.Ссылка);
	Запрос.УстановитьПараметр("ОплатаВедомостей", ОплатаВедомостей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	&ОплатаВедомостей КАК ОплатаВедомостей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо"
	
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ведомость,
	|	#ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТОплатаВедомостей.Ведомость
	|			ИЗ
	|				ВТОплатаВедомостей)";
	
	Запрос.Текст = Запрос.Текст 
		+ ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "Зарплата") 
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.Ведомость.Проведен КАК Проведен,
	|	ТИПЗНАЧЕНИЯ(ОплатаВедомостей.Ведомость) КАК ТипВедомости,
	|	ИСТИНА КАК Проводится
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей"
	 
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
	
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеВедомостей.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицаНетВВедомости,
	|	ВЫБОР
	|		КОГДА РегистрОплатыВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПовторнаяВыплата,
	|	РегистрОплатыВедомостей.Регистратор
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомостей КАК ДанныеВедомостей
	|		ПО (ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РегистрОплатыВедомостей
	|		ПО (РегистрОплатыВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (РегистрОплатыВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|			И (РегистрОплатыВедомостей.Регистратор <> &Регистратор)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВедомостей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	ТаблицаРаботников = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	
	Для Каждого Ведомость Из ТаблицаВедомостей Цикл
		Ведомость.Проводится = Метаданные.НайтиПоТипу(Ведомость.ТипВедомости).Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	КонецЦикла;
	
	Если Проверки.ВедомостьПроведена Тогда
		ОшибкиВедомостьНеПроведена = ТаблицаВедомостей.НайтиСтроки(Новый Структура("Проведен,Проводится", Ложь,Истина));
		Отказ = Отказ ИЛИ ОшибкиВедомостьНеПроведена.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиВедомостьНеПроведена Цикл
			СообщениеОбОшибке = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 не проведен'"), 
					Ошибка.Ведомость);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
	Если Проверки.РаботникВВедомости Тогда
		ОшибкиНетВВедомости	= ТаблицаРаботников.НайтиСтроки(Новый Структура("ФизлицаНетВВедомости", Истина));
		Отказ = Отказ ИЛИ ОшибкиНетВВедомости.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиНетВВедомости Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Документ %1 не содержит сотрудника %2'"), 
						Ошибка.Ведомость, 
						Ошибка.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
	Если Проверки.ПовторнаяВыплата Тогда
		ПовторныеВыплаты = ТаблицаРаботников.НайтиСтроки(Новый Структура("ПовторнаяВыплата", Истина));
		Отказ = Отказ ИЛИ ПовторныеВыплаты.Количество() > 0;
	
		Для Каждого ПовторнаяВыплата Из ПовторныеВыплаты Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выплата сотруднику %2 по документу %1 уже произведена документом %3'"), 
						ПовторнаяВыплата.Ведомость, 
						ПовторнаяВыплата.ФизическоеЛицо,
						ПовторнаяВыплата.Регистратор);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует выдачу зарплаты работникам по ведомостям.
//
// Параметры:
//	Документ         - ДокументОбъект - платежный документ.
//	Отказ            - Булево - признак отказа в выполнении операции.
//	ОплатаВедомостей - ТаблицаЗначений - таблица сведений об оплате с колонками:
//		* Ведомость      - ДокументСсылка
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
Процедура ЗарегистрироватьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей) Экспорт
	
	Если Отказ ИЛИ ОплатаВедомостей = Неопределено Тогда
		Возврат
	КонецЕсли;		
	
	ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ведомости = ОплатаВедомостей.ВыгрузитьКолонку("Ведомость");
	ОрганизацияВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ведомости, "Организация");
	
	Для Каждого СтрокаОплаты Из ОплатаВедомостей Цикл
				
		НоваяСтрока = Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
		
		НоваяСтрока.Организация		= ОрганизацияВедомости[СтрокаОплаты.Ведомость];
		НоваяСтрока.Ведомость 		= СтрокаОплаты.Ведомость; 
		НоваяСтрока.ФизическоеЛицо	= СтрокаОплаты.ФизическоеЛицо;
		
	КонецЦикла;
		
	Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записывать = Истина;		
	
КонецПроцедуры

// Регистрирует выдачу зарплаты работникам по ведомостям.
//
// Параметры:
//	ПлатежныйДокумент - ДокументОбъект - платежный документ..
//	Организация       - СправочникСсылка.Организации - организация документа.
//	Ведомости         - Массив - ведомости, по которым выдана зарплата 
//	                       ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//	                       ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.д.
//	ФизическиеЛица    - Массив - физические лица, получившие зарплату (СправочникСсылка.ФизическиеЛица).
//	Оплаченные        - Булево - учет статуса оплаты:
//							истина       - только оплаченные
//							ложь         - неоплаченные
//							неопределено - состояние оплаты не учитывается.
//	Отказ             - Булево - признак отказа в выполнении операции.
//
Процедура ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Регистрация оплаты
	ВзаиморасчетыССотрудниками.СоздатьВТДанныеВедомостейДляОплатыДокументом(Запрос.МенеджерВременныхТаблиц, Истина, ПлатежныйДокумент.Ссылка, Ведомости, ФизическиеЛица, Оплаченные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплачиваемыеДанныеВедомостей.Ведомость,
	|	ОплачиваемыеДанныеВедомостей.ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументом КАК ОплачиваемыеДанныеВедомостей
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемыеДанныеВедомостей.Ведомость,
	|	ОплачиваемыеДанныеВедомостей.ФизическоеЛицо";
	
	ОплатаВедомостей = Запрос.Выполнить().Выгрузить();
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОплатуВедомостейДокументом(ПлатежныйДокумент, Отказ, ОплатаВедомостей);
	
КонецПроцедуры

// Функция проверяет, есть ли выплаты по ведомости.
//
// Параметры:
//	Ведомость - документ-ссылка.
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьОплатаПоВедомости(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СпособыОкругленияПриРасчетеЗарплаты.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.40";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ОбновитьУдаленныеПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.14";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьЗарплатныйПроект";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.НачисленияУдержанияПоСотрудникам.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.ВзаиморасчетыССотрудниками.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплате.ЗаполнитьОрганизацию";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.2";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьНомерЛицевогоСчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.15";
	Обработчик.Процедура = "РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.19";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплате.ЗаполнитьПериодДвиженийВедомостейПериодомРегистрации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.7";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьПризнакПоставляемый";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.116";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьОкругление";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "ВзаиморасчетыССотрудниками.ЗаполнитьПериодыВзаиморасчетовЗарплатыВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.120";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьХарактерВыплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "ВзаиморасчетыССотрудниками.ЗаполнитьФизическиеЛицаЗарплатыВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.124";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВКассу.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.124";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьСостав";
	
КонецПроцедуры	

Процедура ЗаполнитьПериодыВзаиморасчетовЗарплатыВедомостей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми периодами взаиморасчетов в зарплате
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ПериодВзаиморасчетов = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, "#ВедомостьЗарплата", "Зарплата", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документ.ВедомостьНаВыплатуЗарплаты"));
	Запрос.Выполнить();
	
	// В проведенных документах переносим движения в табличную часть
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Ссылка,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В
	|			(ВЫБРАТЬ
	|				ОбновляемыеВедомости.Ссылка
	|			ИЗ
	|				ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|			ГДЕ
	|				ОбновляемыеВедомости.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗарплатаДоОбновления = Ведомость.Зарплата.Выгрузить();
		
		Ведомость.Зарплата.Очистить();
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			
			// Перенос специфических для типа данных сотрудника
			СтрокаСотрудника = ЗарплатаДоОбновления.Найти(Выборка.Сотрудник, "Сотрудник");
			Если СтрокаСотрудника <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСотрудника);
			КонецЕсли;	
			
			// Заполняем общие для всех ведомостей данные
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// В непроведенных документах заполняем период взаиморасчетов из шапки документа
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеВедомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|ГДЕ
	|	НЕ ОбновляемыеВедомости.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаЗарплаты.ПериодВзаиморасчетов = Ведомость.ПериодРегистрации;
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ЗаполнитьФизическиеЛицаЗарплатыВедомостей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми физическими лицами в зарплате
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И НЕ ВедомостьЗарплата.Ссылка.Номер ЕСТЬ NULL ";
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, "#ВедомостьЗарплата", "Зарплата", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документ.ВедомостьНаВыплатуЗарплаты"));
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостей КАК ВедомостьЗарплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокиСотрудника = Ведомость.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
				СтрокаСотрудника.ФизическоеЛицо = Выборка.ФизическоеЛицо
			КонецЦикла;
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры	

// Используется в модулях менеджеров ведомостей в процедурах обновления ЗаполнитьСостав(). 
Процедура ЗаполнитьСоставВедомости(ПолноеИмя, КлючевыеПоля) Экспорт
	
	ПараметрыОтбораПоКлючу = Новый Структура(КлючевыеПоля);
	
	// Выбираем ведомости, имеющие заполненную ТЧ Зарплата и пустую ТЧ Строки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьДокумент КАК Ведомость
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				#ВедомостьЗарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					#ВедомостьСостав КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмя); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ПолноеИмя + ".Состав"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ключи = Ведомость.Зарплата.Выгрузить(, КлючевыеПоля);
		Ключи.Свернуть(КлючевыеПоля);
		
		Для Каждого Ключ Из Ключи Цикл
			
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			СтрокаСостава = Ведомость.Состав.Добавить();
			СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаСостава, Ключ);
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораПоКлючу, Ключ); 
			СтрокиЗарплата = Ведомость.Зарплата.НайтиСтроки(ПараметрыОтбораПоКлючу);
			
			Для Каждого СтрокаЗарплаты Из СтрокиЗарплата Цикл
				СтрокаЗарплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла	
	
КонецПроцедуры	

#КонецОбласти

#Область ЗаполнениеВедомостей

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ДанныеЗаполненияВедомости()
КонецФункции	

// Проверяет, являются ли переданные данные структурой, используемой для заполнения документа
// (см. функцию ДанныеЗаполнения).
//
Функция ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Экспорт
	Возврат ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоДанныеЗаполненияВедомостиНаВыплатуЗарплаты") 
КонецФункции	

#КонецОбласти

#Область ОплатаВедомостей

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументом с информацией для оплаты платежным документом
// указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; описывает учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
 Процедура СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	 
	 СоздатьВТДанныеВедомостейДляОплатыДокументами(МенеджерВременныхТаблиц, ТолькоРазрешенные, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Ведомости, ФизическиеЛица, Оплаченные);	 
	 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате,
	|	ДанныеВедомостей.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументом
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументами КАК ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеВедомостейДляОплатыДокументами";
	
	Запрос.Выполнить();
	
 КонецПроцедуры

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументами с информацией для оплаты платежным документом
// указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//	Документы - массив ссылок на документы оплаты.
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; описывает учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
 Процедура СоздатьВТДанныеВедомостейДляОплатыДокументами(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документы, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	#ФизическоеЛицо КАК ФизическоеЛицо,
	|	#КВыплате КАК КВыплате,
	|	ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В(&Ведомости)
	|	И (&ПоВсемФизлицам
	|			ИЛИ #ФизическоеЛицо В (&ФизическиеЛица))";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистраторы", Документы);
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", ФизическиеЛица = Неопределено);
	Запрос.УстановитьПараметр("Оплаченные", Оплаченные);
	
	Запрос.Текст = 
		ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "Зарплата")
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	
	Если Оплаченные = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументами
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	Иначе	
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументами
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|		ПО (НЕ Оплата.Регистратор В (&Регистраторы))
		|			И (Оплата.Ведомость = ВедомостьЗарплата.Ссылка)
		|			И (Оплата.ФизическоеЛицо = ВедомостьЗарплата.ФизическоеЛицо)
		|ГДЕ
		|	(&Оплаченные
		|				И НЕ Оплата.Регистратор ЕСТЬ NULL 
		|			ИЛИ НЕ &Оплаченные
		|				И Оплата.Регистратор ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура регистрирует факт неудачи при попытке выплаты по ведомостям.
// При этом невыплаченные суммы "возвращаются" во взаиморасчеты.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений ведомости.
//		Отказ		- признак отказа выполнения операции.
//		Ведомость	- ссылка на ведомость на выплату зарплаты.
//		ФизическиеЛица	- массив ссылок на физические лица.
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНеВыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица)
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения состояния выплат
//
// Параметры:
//		МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц
//		ТаблицаОтборов			 - Строка или ТаблицаЗначений
//		ИмяПоляФизическоеЛицо	 - Строка
//		ИмяПоляДокументОснование - Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц     - МенеджерВременныхТаблиц.
//			* ИмяВТОтборов                - Строка.
//			* ИмяПоляФизическоеЛицо       - Строка.
//			* ИмяПоляДокументОснование    - Строка.
//			* ИмяПоляСтатьяФинансирования - Строка.
//			* ИмяПоляСтатьяРасходов       - Строка.
//			* УничтожитьТаблицуОтборов    - Булево.
//
Функция ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(МенеджерВременныхТаблиц, ТаблицаОтборов, ИмяПоляФизическоеЛицо = "ФизическоеЛицо", ИмяПоляДокументОснование = "ДокументОснование", ИмяПоляСтатьяФинансирования = "СтатьяФинансирования", ИмяПоляСтатьяРасходов = "СтатьяРасходов") Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц",     МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов",                "");
	ОписательВТ.Вставить("ИмяПоляФизическоеЛицо",       ИмяПоляФизическоеЛицо);
	ОписательВТ.Вставить("ИмяПоляДокументОснование",    ИмяПоляДокументОснование);
	ОписательВТ.Вставить("ИмяПоляСтатьяФинансирования", ИмяПоляСтатьяФинансирования);
	ОписательВТ.Вставить("ИмяПоляСтатьяРасходов",       ИмяПоляСтатьяРасходов);
	ОписательВТ.Вставить("УничтожитьТаблицуОтборов",    Ложь);
	
	Если ТипЗнч(ТаблицаОтборов) = Тип("ТаблицаЗначений") Тогда
		ОписательВТ.ИмяВТОтборов = "ВТОтборыДляСоздатьВТСостояниеВыплат";
		ОписательВТ.УничтожитьТаблицуОтборов = Истина;
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаОтборов, ОписательВТ.ИмяВТОтборов);
	ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("Строка") Тогда	
		ОписательВТ.ИмяВТОтборов = ТаблицаОтборов;
	Иначе	
		ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра ТаблицаОтборов'");
	КонецЕсли;
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу со сведениями о состоянии выплаты в разрезе сотрудников и документов-оснований .
//
// Параметры:
//		МенеджерВременныхТаблиц
//		Организация - СправочникСсылка.Организации
//		ПериодРегистрации - Дата - первое число месяца периода регистрации 
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//								движения которых должны быть проигнорированы
//		ИмяВременнойТаблицыОтборов - имя временной таблицы - "фильтра".
//							Таблица должна содержать два поля: Сотрудник и ДокументОснование
//
Процедура СоздатьВТСостояниеВыплат(ОписательВременныхТаблиц, ТолькоРазрешенные, Организация, ПериодРегистрации, ИгнорируемыеРегистраторы, ИмяВТСостояниеВыплат = "ВТСостояниеВыплат") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",        ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Отборы.ДокументОснование КАК ДокументОснование,
	|	Отборы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Отборы.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТФильтрПоОтборам
	|ИЗ
	|	#ВТОтборов КАК Отборы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отборы.ФизическоеЛицо,
	|	Отборы.ДокументОснование,
	|	Отборы.СтатьяФинансирования,
	|	Отборы.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленная,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВыплаченная
	|ПОМЕСТИТЬ ВТСостояниеВыплатПоОтборам
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФильтрПоОтборам КАК ФильтрПоОтборам
	|		ПО (ФильтрПоОтборам.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо)
	|			И (ФильтрПоОтборам.ДокументОснование = ЗарплатаКВыплате.ДокументОснование)
	|			И (ФильтрПоОтборам.СтатьяФинансирования = ЗарплатаКВыплате.СтатьяФинансирования)
	|			И (ФильтрПоОтборам.СтатьяРасходов = ЗарплатаКВыплате.СтатьяРасходов)
	|ГДЕ
	|	НЕ ЗарплатаКВыплате.Регистратор В (&ИгнорируемыеРегистраторы)
	|	И ЗарплатаКВыплате.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ЗарплатаКВыплате.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВсеПоляВТОтборов,
	|	ЕСТЬNULL(СуммыВыплат.СуммаНачисленная, 0) КАК СуммаНачисленная,
	|	ЕСТЬNULL(СуммыВыплат.СуммаВыплаченная, 0) КАК СуммаВыплаченная
	|ПОМЕСТИТЬ #ВТСостояниеВыплат
	|ИЗ
	|	#ВТОтборов КАК Отборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеВыплатПоОтборам КАК СуммыВыплат
	|		ПО Отборы.ФизическоеЛицо = СуммыВыплат.ФизическоеЛицо
	|			И Отборы.ДокументОснование = СуммыВыплат.ДокументОснование
	|			И Отборы.СтатьяФинансирования = СуммыВыплат.СтатьяФинансирования
	|			И Отборы.СтатьяРасходов = СуммыВыплат.СтатьяРасходов";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСостояниеВыплат", ИмяВТСостояниеВыплат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТОтборов", ОписательВременныхТаблиц.ИмяВТОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВсеПоляВТОтборов", "Отборы.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Отборы.ФизическоеЛицо",    "Отборы." + ОписательВременныхТаблиц.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Отборы.ДокументОснование", "Отборы." + ОписательВременныхТаблиц.ИмяПоляДокументОснование);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Отборы.СтатьяФинансирования", "Отборы." + ОписательВременныхТаблиц.ИмяПоляСтатьяФинансирования);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Отборы.ДокуСтатьяРасходов", "Отборы." + ОписательВременныхТаблиц.ИмяПоляСтатьяРасходов);
	
	Запрос.Выполнить();
	
	Запрос.Текст = "";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТФильтрПоОтборам");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТСостояниеВыплатПоОтборам");
	Если ОписательВременныхТаблиц.УничтожитьТаблицуОтборов Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ОписательВременныхТаблиц.ИмяВТОтборов);
	КонецЕсли;
	Запрос.Выполнить();
	
КонецПроцедуры	

#КонецОбласти

// Формирует временную таблицу ВТОстаткиВзаиморасчетов с остатками взаиморасчетов по сотрудникам
// в разрезе подразделений и статей финансирования
//
// Параметры:
//		МенеджерВременныхТаблиц
//		Организация - СправочникСсылка.Организации
//		ПериодРегистрации - Дата - первое число месяца периода регистрации 
//		ФизическиеЛица - Массив, ФиксированныйМассив - массив ссылок на физические лица.
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//						движения которых должны быть проигнорированы
//		ИмяВТОстаткиВзаиморасчетов - Строка
//
Процедура СоздатьВТОстаткиВзаиморасчетов(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ФизическиеЛица, ИгнорируемыеРегистраторы = Неопределено, ИмяВТОстаткиВзаиморасчетов = "ВТОстаткиВзаиморасчетов") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	Взаиморасчеты.Подразделение КАК Подразделение,
	|	Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Взаиморасчеты.Сотрудник КАК Сотрудник,
	|		Взаиморасчеты.Подразделение КАК Подразделение,
	|		Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|		Взаиморасчеты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК Взаиморасчеты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Взаиморасчеты.ФизическоеЛицо,
	|		Взаиморасчеты.Сотрудник,
	|		Взаиморасчеты.Подразделение,
	|		Взаиморасчеты.СтатьяФинансирования,
	|		Взаиморасчеты.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Взаиморасчеты.СуммаВзаиморасчетов
	|			ИНАЧЕ Взаиморасчеты.СуммаВзаиморасчетов
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.ФизическоеЛицо В(&ФизическиеЛица)
	|		И Взаиморасчеты.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)) КАК Взаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.ФизическоеЛицо,
	|	Взаиморасчеты.Сотрудник,
	|	Взаиморасчеты.Подразделение,
	|	Взаиморасчеты.СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплате.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК ЗарплатаКВыплате
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)) КАК ЗарплатаКВыплате
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	Взаиморасчеты.Подразделение КАК Подразделение,
	|	Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|	Взаиморасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СуммаКВыплате, 0) КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТОстаткиВзаиморасчетов
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО Взаиморасчеты.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо
	|			И Взаиморасчеты.Сотрудник = ЗарплатаКВыплате.Сотрудник
	|			И Взаиморасчеты.Подразделение = ЗарплатаКВыплате.Подразделение
	|			И Взаиморасчеты.СтатьяФинансирования = ЗарплатаКВыплате.СтатьяФинансирования
	|			И Взаиморасчеты.СтатьяРасходов = ЗарплатаКВыплате.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВзаиморасчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗарплатаКВыплате";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОстаткиВзаиморасчетов", ИмяВТОстаткиВзаиморасчетов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает сведения о накопленном остатке взаиморасчетов
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		ПериодРегистрации - Дата - первое число месяца периода регистрации 
//  	ФизическиеЛица - Массив, ФиксированныйМассив - массив ссылок на физические лица.
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//								движения которых должны быть проигнорированы
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, в которой есть колонки: 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица;
//		* Сотрудник - СправочникСсылка.Сотрудники;
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - не обязательно к заполнению;
//		* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - не обязательно к заполнению;
//		* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата - не обязательно к заполнению;
//		* СуммаВзаиморасчетов - Число.
//		* СуммаКВыплате - Число.
//
Функция ОстаткиВзаиморасчетов(Организация, ПериодРегистрации, ФизическиеЛица, ИгнорируемыеРегистраторы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	
	СоздатьВТОстаткиВзаиморасчетов(Запрос.МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ФизическиеЛица, ИгнорируемыеРегистраторы);
	СоздатьВТОстаткиВзаиморасчетов(Запрос.МенеджерВременныхТаблиц, Организация, НачалоГода(ПериодРегистрации) - 1, ФизическиеЛица, ИгнорируемыеРегистраторы, "ВТОстаткиВзаиморасчетовНаНачалоГода");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиВзаиморасчетов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОстаткиВзаиморасчетов.Сотрудник КАК Сотрудник,
	|	ОстаткиВзаиморасчетов.Подразделение КАК Подразделение,
	|	ОстаткиВзаиморасчетов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОстаткиВзаиморасчетов.СтатьяРасходов КАК СтатьяРасходов,
	|	ОстаткиВзаиморасчетов.СуммаВзаиморасчетов - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ОстаткиВзаиморасчетов.СуммаКВыплате - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаКВыплате, 0) КАК СуммаКВыплате
	|ИЗ
	|	ВТОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВзаиморасчетовНаНачалоГода КАК ОстаткиВзаиморасчетовНаНачалоГода
	|		ПО ОстаткиВзаиморасчетов.ФизическоеЛицо = ОстаткиВзаиморасчетовНаНачалоГода.ФизическоеЛицо
	|			И ОстаткиВзаиморасчетов.Сотрудник = ОстаткиВзаиморасчетовНаНачалоГода.Сотрудник
	|			И ОстаткиВзаиморасчетов.Подразделение = ОстаткиВзаиморасчетовНаНачалоГода.Подразделение
	|			И ОстаткиВзаиморасчетов.СтатьяФинансирования = ОстаткиВзаиморасчетовНаНачалоГода.СтатьяФинансирования
	|			И ОстаткиВзаиморасчетов.СтатьяРасходов = ОстаткиВзаиморасчетовНаНачалоГода.СтатьяРасходов";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает сведения о накопленной корректировке выплаты
// Корректировка выплаты - разница между суммой долга работодателя перед сотрудником и 
// суммой, положенной к выплате сотруднику. 
// Разница может быть обусловлена невозможностью выплаты излишне удержанного ранее НДФЛ
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		ПериодРегистрации - Дата - первое число месяца периода регистрации 
//  	ФизическиеЛица - Массив, ФиксированныйМассив - массив ссылок на физические лица.
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//								движения которых должны быть проигнорированы
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, в которой есть колонки: 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица;
//		* Сотрудник - СправочникСсылка.Сотрудники;
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - не обязательно к заполнению;
//		* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - не обязательно к заполнению;
//		* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата - не обязательно к заполнению;
//		* КорректировкаВыплаты - Число - не обязательно к заполнению.
//
Функция КорректировкиВыплаты(Организация, ПериодРегистрации, ФизическиеЛица, ИгнорируемыеРегистраторы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	
	СоздатьВТОстаткиВзаиморасчетов(Запрос.МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ФизическиеЛица, ИгнорируемыеРегистраторы);
	СоздатьВТОстаткиВзаиморасчетов(Запрос.МенеджерВременныхТаблиц, Организация, НачалоГода(ПериодРегистрации) - 1, ФизическиеЛица, ИгнорируемыеРегистраторы, "ВТОстаткиВзаиморасчетовНаНачалоГода");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиВзаиморасчетов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОстаткиВзаиморасчетов.Сотрудник КАК Сотрудник,
	|	ОстаткиВзаиморасчетов.Подразделение КАК Подразделение,
	|	ОстаткиВзаиморасчетов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОстаткиВзаиморасчетов.СтатьяРасходов КАК СтатьяРасходов,
	|	ОстаткиВзаиморасчетов.СуммаВзаиморасчетов - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаВзаиморасчетов, 0) - (ОстаткиВзаиморасчетов.СуммаКВыплате - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаКВыплате, 0)) КАК КорректировкаВыплаты
	|ИЗ
	|	ВТОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВзаиморасчетовНаНачалоГода КАК ОстаткиВзаиморасчетовНаНачалоГода
	|		ПО ОстаткиВзаиморасчетов.ФизическоеЛицо = ОстаткиВзаиморасчетовНаНачалоГода.ФизическоеЛицо
	|			И ОстаткиВзаиморасчетов.Сотрудник = ОстаткиВзаиморасчетовНаНачалоГода.Сотрудник
	|			И ОстаткиВзаиморасчетов.Подразделение = ОстаткиВзаиморасчетовНаНачалоГода.Подразделение
	|			И ОстаткиВзаиморасчетов.СтатьяФинансирования = ОстаткиВзаиморасчетовНаНачалоГода.СтатьяФинансирования
	|			И ОстаткиВзаиморасчетов.СтатьяРасходов = ОстаткиВзаиморасчетовНаНачалоГода.СтатьяРасходов
	|ГДЕ
	|	ОстаткиВзаиморасчетов.СуммаВзаиморасчетов - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаВзаиморасчетов, 0) - (ОстаткиВзаиморасчетов.СуммаКВыплате - ЕСТЬNULL(ОстаткиВзаиморасчетовНаНачалоГода.СуммаКВыплате, 0)) <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КолонкиТаблицыВыплаченнойЗарплаты()
	
	Колонки = Новый Структура;
	Колонки.Вставить("Все", Новый Массив);
	Колонки.Вставить("Группировок",  Новый Массив);
	Колонки.Вставить("Суммирования", Новый Массив);
	
	Для Каждого Колонка из НоваяТаблицаВыплаченнойЗарплаты().Колонки Цикл
		Колонки.Все.Добавить(Колонка.Имя);
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Колонки.Суммирования.Добавить(Колонка.Имя)
		Иначе	
			Колонки.Группировок.Добавить(Колонка.Имя)
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Колонки
	
КонецФункции

#Область ВзаимосвязиМеждуОбъектами

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент)
КонецФункции

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, ИсточникДанныхВШаблоне = "ИсточникДанных", ИмяТЧ = "", ИсключаемыеТипы = Неопределено)
	
	ИмяВТ = "ВТДанныеВедомостей";
	
	ТекстЗапросаВТДанныеВедомостей = "";
	
	Для Каждого ТипВедомости Из Метаданные.РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.Измерения.Ведомость.Тип.Типы()  Цикл
		
		Если ИсключаемыеТипы <> Неопределено И ИсключаемыеТипы.Найти(Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя()) <> Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		ИсточникДанных = Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя() + ?(ЗначениеЗаполнено(ИмяТЧ), "." + ИмяТЧ, "");
		ТекстЗапросаПоТипуВедомости = СтрЗаменить(ШаблонЗапроса, ИсточникДанныхВШаблоне, ИсточникДанных);
		Если ИсточникДанных = "Документ.ВедомостьНаВыплатуЗарплаты.Зарплата" Тогда
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#ФизическоеЛицо", "ВедомостьЗарплата.ФизическоеЛицо");
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#КВыплате", "ВедомостьЗарплата.Сумма");
		Иначе
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#ФизическоеЛицо", "ВедомостьЗарплата.Сотрудник.ФизическоеЛицо");
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#КВыплате", "ВедомостьЗарплата.КВыплате");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапросаВТДанныеВедомостей) Тогда
			ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + 
				"
				|
			 	|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ПОМЕСТИТЬ " + ИмяВТ + Символы.ПС, "");
		КонецЕсли;	
		
		ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + ТекстЗапросаПоТипуВедомости
		
	КонецЦикла;	
	
	Возврат ТекстЗапросаВТДанныеВедомостей;
	
КонецФункции	

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость)
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость)
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) 
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица)
КонецПроцедуры	

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ПараметрыПолученияЗарплатыКВыплате()
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость)
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники = "ВТСотрудникиОрганизации")
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
КонецПроцедуры	

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные = "") Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные);
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры)
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		ПериодВзаиморасчетов = ДобавитьМесяц(Параметры.ПериодРегистрации, -1);
	ИначеЕсли Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда
		ПериодВзаиморасчетов = Параметры.ПериодРегистрации;
	Иначе
		Возврат
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		КонецМесяца(ПериодВзаиморасчетов));
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Зарплата по физлицам
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаСотрудников.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаФизлиц
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаСотрудников.ФизическоеЛицо";
	Запрос.Выполнить();	
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.Организация			= Параметры.Организация;
	ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица	= "ВТЗарплатаФизлиц";
	ПараметрыПолученияСотрудников.ОкончаниеПериода		= МИН(КонецМесяца(Параметры.ПериодРегистрации), Параметры.Дата);
	
	// Получаем всех сотрудников переданных физлиц
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников,
		"ВТСотрудникиФизическихЛиц");
		
	// Запрашиваем плановые авансы всех сотрудников рассматриваемых физлиц
	СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТСотрудникиФизическихЛиц");		
	
	// Определяем плановые авансы физических лиц
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПлановыйАванс.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТПлановыйАвансФизическихЛиц
		|ИЗ
		|	ВТПлановыйАванс КАК ПлановыйАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыйАванс.ФизическоеЛицо";

	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		
		// Получаем остатки начислений первой половины месяца
		Запрос.Текст = 
			Запрос.Текст +
			ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) КАК КВыплате
			|ПОМЕСТИТЬ ВТНачисленныйАвансФизическихЛиц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
			|	ИЗ
			|		РегистрНакопления.ЗарплатаКВыплатеАвансом.Остатки(
			|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
			|				Организация = &Организация
			|					И ПериодВзаиморасчетов = &ПериодРегистрации
			|					И ФизическоеЛицо В
			|						(ВЫБРАТЬ
			|							ЗарплатаФизлиц.ФизическоеЛицо
			|						ИЗ
			|							ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗарплатаКВыплате.ФизическоеЛицо,
			|		ВЫБОР
			|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
			|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
			|	ГДЕ
			|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
			|		И ЗарплатаКВыплате.Организация = &Организация
			|		И ЗарплатаКВыплате.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
			|		И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодРегистрации
			|		И ЗарплатаКВыплате.ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ЗарплатаФизлиц.ФизическоеЛицо
			|				ИЗ
			|					ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеАвансом
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо";
			
		
	Иначе 	
		
		// Получаем начисленное в первой половине месяца
		Запрос.Текст = 
			Запрос.Текст +
			ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо,
			|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) КАК КВыплате
			|ПОМЕСТИТЬ ВТНачисленныйАвансФизическихЛиц
			|ИЗ
			|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
			|ГДЕ
			|	ЗарплатаКВыплатеАвансом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ЗарплатаКВыплатеАвансом.Организация = &Организация
			|	И ЗарплатаКВыплатеАвансом.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
			|	И ЗарплатаКВыплатеАвансом.ФизическоеЛицо В
			|			(ВЫБРАТЬ
			|				ЗарплатаФизлиц.ФизическоеЛицо
			|			ИЗ
			|				ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо";
		
	КонецЕсли;	
		
	// Остатки зарплаты к выплате по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеФизическихЛиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
		|				,
		|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
		|					И Организация = &Организация
		|					И ФизическоеЛицо В
		|						(ВЫБРАТЬ
		|							ЗарплатаФизлиц.ФизическоеЛицо
		|						ИЗ
		|							ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
		|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|	ГДЕ
		|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
		|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
		|		И ЗарплатаКВыплате.Организация = &Организация
		|		И ЗарплатаКВыплате.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ЗарплатаФизлиц.ФизическоеЛицо
		|				ИЗ
		|					ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо";
		
		
	// Предел выплаты по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ПределВыплат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПределВыплат.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТСальдоФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПлановыйАванс.КВыплате КАК КВыплате
		|	ИЗ
		|		ВТПлановыйАвансФизическихЛиц КАК ПлановыйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НачисленныйАванс.ФизическоеЛицо,
		|		НачисленныйАванс.КВыплате
		|	ИЗ
		|		ВТНачисленныйАвансФизическихЛиц КАК НачисленныйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ЗарплатаКВыплате.КВыплате
		|	ИЗ
		|		ВТЗарплатаКВыплатеФизическихЛиц КАК ЗарплатаКВыплате) КАК ПределВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ПределВыплат.ФизическоеЛицо";
		
	// Коэффициент выплаты (отношение сальдо к зарплате, но не больше зарплаты)
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Зарплата.КВыплате <= 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате > 1
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате КАК ЧИСЛО(25, 10))
		|	КОНЕЦ КАК Размер
		|ПОМЕСТИТЬ ВТКоэффициентыВыплаты
		|ИЗ
		|	ВТЗарплатаФизлиц КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСальдоФизлиц КАК Сальдо
		|		ПО Зарплата.ФизическоеЛицо = Сальдо.ФизическоеЛицо";
		
	// Ограничиваем суммы зарплаты коэффициентами выплаты		
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование,
		|	ВЫРАЗИТЬ(ЗарплатаКВыплате.КВыплате * КоэффициентыВыплаты.Размер КАК ЧИСЛО(15, 2)) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициентыВыплаты КАК КоэффициентыВыплаты
		|		ПО (КоэффициентыВыплаты.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо)";
	
	Запрос.Выполнить();
	
	// Удаляем временные таблицы
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАвансФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленныйАвансФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗарплатаКВыплатеФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСальдоФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоэффициентыВыплаты";
		
	Запрос.Выполнить();
	
	// Перемещаем зарплату, ограниченную сальдо, в ВТЗарплатаКВыплате
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаКВыплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц КАК ЗарплатаКВыплате";
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииВедомостейНаВыплатуЗарплаты

// Заполнение и расчет документа.

Функция ВедомостьРеквизитыОтветственныхЛиц() Экспорт
	
	РеквизитыОтветственныхЛиц = Новый Массив;
	
	РеквизитыОтветственныхЛиц.Добавить("Руководитель");
	РеквизитыОтветственныхЛиц.Добавить("ДолжностьРуководителя");
	РеквизитыОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	
	Возврат РеквизитыОтветственныхЛиц
	
КонецФункции	

Функция ВедомостьМестоВыплаты() Экспорт
	
	ВедомостьМестоВыплаты = Новый Структура;
	ВедомостьМестоВыплаты.Вставить("Вид", Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка());
	ВедомостьМестоВыплаты.Вставить("Значение", Неопределено);
	
	Возврат ВедомостьМестоВыплаты
	
КонецФункции	

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуМестоВыплаты(Ведомость);
КонецФункции	

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение);
КонецПроцедуры

// Устанавливает в ведомости указанную зарплату физических лиц
//
// Параметры:
//	Ведомость - ДокументОбъект - ведомость
//	ЗарплатаРаботников - ТаблицаЗначений
//
Процедура ВедомостьУстановитьЗарплатуРаботников(Ведомость, ЗарплатаРаботников) Экспорт
	
	// Добавляем в ведомость отсутствующих в ней работников
	НовыеРаботники = Новый Массив;
	Для Каждого ЗарплатаРаботника Из ЗарплатаРаботников Цикл
		Если Ведомость.Состав.Найти(ЗарплатаРаботника.ФизическоеЛицо, "ФизическоеЛицо") = Неопределено Тогда
			НовыеРаботники.Добавить(ЗарплатаРаботника.ФизическоеЛицо);
		КонецЕсли;	
	КонецЦикла;	
	
	Если НовыеРаботники.Количество() > 0 Тогда 
		Ведомость.ДополнитьЗарплату(НовыеРаботники);
	КонецЕсли;	
	
	// Переданные суммы зарплаты распределяем по разрезам учета
	Для Каждого ЗарплатаРаботника Из ЗарплатаРаботников Цикл
		
		СтрокиЗарплатыФизлица = Ведомость.Зарплата.НайтиСтроки(Новый Структура("ФизическоеЛицо", ЗарплатаРаботника.ФизическоеЛицо));
		
		КоэффициентыРаспределения = Новый Массив;
		СуммаКВыплатеПоФизлицу = 0;
		Для Индекс = 0 По СтрокиЗарплатыФизлица.ВГраница() Цикл
			КоэффициентыРаспределения.Добавить(СтрокиЗарплатыФизлица[Индекс].КВыплате);
			СуммаКВыплатеПоФизлицу = СуммаКВыплатеПоФизлицу + СтрокиЗарплатыФизлица[Индекс].КВыплате;
		КонецЦикла;
		
		Если ЗарплатаРаботника.Сумма <> СуммаКВыплатеПоФизлицу Тогда
			РаспределеннаяСумма = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ЗарплатаРаботника.Сумма, КоэффициентыРаспределения);
			Если РаспределеннаяСумма <> Неопределено Тогда
				Для Индекс = 0 По СтрокиЗарплатыФизлица.ВГраница() Цикл
					СтрокиЗарплатыФизлица[Индекс].КВыплате = РаспределеннаяСумма[Индекс];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьМожноЗаполнитьЗарплату(Ведомость);
КонецФункции

Процедура ВедомостьЗаполнитьЗарплату(Ведомость) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников в соответствии с реквизитами шапки ведомости.
	СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость);
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты.
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате, "ВТСотрудникиДляВедомости");

	// Ограничиваем зарплату к выплате общей задолженностью перед работником
	СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате);
	
	// Получаем кадровые данные сотрудников с полями для сортировки. 	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиДляВедомости");
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	// Формируем отсортированную зарплату сотрудников к выплате.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	ЗарплатаКВыплате = Запрос.Выполнить().Выгрузить();
	
	Ведомость.ЗаполнитьПоТаблицеЗарплат(ЗарплатаКВыплате);
		
КонецПроцедуры

Процедура ВедомостьДополнитьЗарплату(Ведомость, ФизическиеЛица) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников по переданным физическим лицам.
	СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица);
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты.
	ПараметрыПолученияЗарплатыКВыплате = ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате, "ВТСотрудникиДляВедомости");
	
	// Ограничиваем зарплату к выплате общей задолженностью перед работником
	СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате);
	
	// Формируем зарплату сотрудников к выплате.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", Ведомость.ПериодРегистрации);
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, Ведомость);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ЗарплатаКВыплате.Подразделение, Сотрудники.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ПериодВзаиморасчетов, &ПериодРегистрации) КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЗарплатаКВыплате.КВыплате, 0) КАК КВыплате
	|ИЗ
	|	ВТСотрудникиДляВедомости КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)";
	ЗарплатаКВыплате = Запрос.Выполнить().Выгрузить();
		
	Ведомость.ДополнитьПоТаблицеЗарплат(ЗарплатаКВыплате);
		
КонецПроцедуры

Процедура ВедомостьОчиститьЗарплату(Ведомость) Экспорт
	ВедомостьОчиститьСостав(Ведомость);
КонецПроцедуры

Процедура ВедомостьЗаполнитьПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Группируем строки таблицы зарплат
	ВедомостьСгруппироватьТаблицуЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Рассчитываем суммы к выплате с учетом округления и т.п.
	ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Собираем состав
	Состав = ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Убираем неположительные строки
	УдаляемыеСтрокиСостава = Новый Массив;
	Для Каждого СтрокаСостава Из Состав Цикл
		Если СтрокаСостава.КВыплате <= 0 Тогда
			УдаляемыеСтрокиСостава.Добавить(СтрокаСостава);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого УдаляемаяСтрокаСостава Из УдаляемыеСтрокиСостава Цикл
		Состав.Удалить(УдаляемаяСтрокаСостава);
	КонецЦикла;
	
	// Заполняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьОчиститьСостав(Ведомость);
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Процедура ВедомостьДополнитьПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Группируем строки таблицы зарплат
	ВедомостьСгруппироватьТаблицуЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Рассчитываем суммы к выплате с учетом округления и т.п.
	ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Собираем состав
	Состав = ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Дополняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Процедура ВедомостьСгруппироватьТаблицуЗарплат(Ведомость, ТаблицаЗарплат)

	// Добавляем в таблицу колонку с идентификатором группы
	ТаблицаЗарплат.Колонки.Добавить("ИдентификаторСтроки", Ведомость.Метаданные().ТабличныеЧасти.Состав.Реквизиты.ИдентификаторСтроки.Тип);
	ТаблицаЗарплат.Индексы.Добавить("ИдентификаторСтроки");
	
	// Получаем ключевые поля группировки зарплаты
	КолонкиГруппировки = ВзаиморасчетыССотрудниками.ВедомостьКолонкиГруппировкиЗарплаты(Ведомость);
	
	// структура для отбора строк зарплаты, попадающих в группу
	ПараметрыОтбораГруппы = Новый Структура(КолонкиГруппировки);
	
	// выделяем группы таблицы зарплат
	Группы = ТаблицаЗарплат.Скопировать(, КолонкиГруппировки);
	Группы.Свернуть(КолонкиГруппировки);
	
	// Группируем строки
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		ЗарплатаГруппы = ТаблицаЗарплат.НайтиСтроки(ПараметрыОтбораГруппы);
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Для Каждого СтрокаЗарплаты Из ЗарплатаГруппы Цикл
			СтрокаЗарплаты.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат);
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
КонецФункции

Процедура ВедомостьОчиститьСостав(Ведомость)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОчиститьСостав(Ведомость)
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьДополнитьСостав(Ведомость, Состав)
КонецПроцедуры	

Функция ВедомостьКолонкиГруппировкиЗарплаты(Ведомость) Экспорт
	
	// колонки группировки - это реквизиты ТЧ Состав, кроме идентификатора строки
	КолонкиГруппировки	= Новый Массив;
	Для Каждого РеквизитСостава Из Ведомость.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		КолонкиГруппировки.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(КолонкиГруппировки, "ИдентификаторСтроки");
	
	Возврат СтрСоединить(КолонкиГруппировки, ", ")

КонецФункции

/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи)
КонецПроцедуры

Процедура ВедомостьОбработкаПроведения(Ведомость, Отказ) Экспорт
	
	Если Ведомость.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Ведомость);
	
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ);
	
	Для Каждого НаборЗаписей Из Ведомость.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДоступаКВедомостям

Функция ВедомостьДанныеДляПечати(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВзаиморасчетыССотрудниками.СоздатьВТВыплатыВедомостей(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		Ведомость.Метаданные().ПолноеИмя(), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ведомость));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Выплаты.НомерСтроки) КАК НомерСтроки,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	СУММА(Выплаты.Сумма) КАК КВыплате
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТВыплатыВедомостей(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("Выплаты", Перечисления.ВидыВзаиморасчетовССотрудниками.Выплаты());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Регистратор КАК Ведомость,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК Сумма
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор В(&Ведомости)
	|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В(&Выплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыССотрудниками.Регистратор,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Ведомость КАК Ведомость,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки * 10000 + ВедомостьЗарплата.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрок
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК ВедомостьСостав
	|		ПО Взаиморасчеты.Ведомость = ВедомостьСостав.Ссылка
	|			И (ВедомостьСостав.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьЗарплата КАК ВедомостьЗарплата
	|		ПО (ВедомостьСостав.Ссылка = ВедомостьЗарплата.Ссылка)
	|			И (ВедомостьСостав.ИдентификаторСтроки = ВедомостьЗарплата.ИдентификаторСтроки)
	|			И Взаиморасчеты.Сотрудник = ВедомостьЗарплата.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Ведомость,
	|	Взаиморасчеты.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьДокумент.Ссылка КАК Ведомость,
	|	ВедомостьДокумент.Дата КАК ВедомостьДата,
	|	НомераСтрок.НомерСтроки КАК НомерСтроки,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	СУММА(Взаиморасчеты.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыВедомостей
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьДокумент КАК ВедомостьДокумент
	|		ПО Взаиморасчеты.Ведомость = ВедомостьДокумент.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрок КАК НомераСтрок
	|		ПО Взаиморасчеты.Ведомость = НомераСтрок.Ведомость
	|			И Взаиморасчеты.Сотрудник = НомераСтрок.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьДокумент.Ссылка,
	|	ВедомостьДокумент.Дата,
	|	НомераСтрок.НомерСтроки,
	|	Взаиморасчеты.Сотрудник";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ИмяТипа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ИмяТипа + ".Зарплата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
