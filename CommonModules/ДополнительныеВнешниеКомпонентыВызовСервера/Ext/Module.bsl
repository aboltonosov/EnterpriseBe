////////////////////////////////////////////////////////////////////////////////
// ДополнительныеВнешниеКомпонентыВызовСервера: Механизм для работы с внешними компонентами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текст ссылки на внешнюю компоненту
//
// Параметры:
//  ИмяКомпоненты - Строка - уникальное название внешней компоненты
// 
// Возвращаемое значение:
// Строка - текст ссылки
// Неопределено - внешняя компонента не найдена в информационной базе
//
Функция АдресВК(ИмяКомпоненты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаСправочник = Справочники.ВнешниеКомпоненты.НайтиПоРеквизиту("Идентификатор", ИмяКомпоненты);
	Если ЗначениеЗаполнено(СсылкаНаСправочник) Тогда
		ХранилищеВК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСправочник, "ДанныеВК");
		Возврат ПоместитьВоВременноеХранилище(ХранилищеВК.Получить(), Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Обновляет внешнюю компоненту в фоне без вывода ошибок.
//
// Параметры:
//  ИмяМодуля - Строка - идентификатор внешней компоненты.
//
Процедура ОбновитьВнешнююКомпоненту(Знач ИмяМодуля) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Нстр("ru = 'Обновление внешней компоненты.'");
	
	ДлительныеОперации.ВыполнитьВФоне(
		"Справочники.ВнешниеКомпоненты.ОбновитьВнешниеКомпоненты", Новый Структура(ИмяМодуля), ПараметрыВыполнения);

КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выводит текст ошибки в виде сообщения и производит запись в журнал регистрации.
//
// Параметры:
//  ВидОперации - Строка - выполняемая операция
//  ПодробныйТекстОшибки - Строка - подробная информация об ошибке
//  ТекстСообщения - Строка - текст сообщения, выводимый пользователю.
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Если ЭтоПолноправныйПользователь И ЗначениеЗаполнено(ПодробныйТекстОшибки) И НЕ ПустаяСтрока(ТекстСообщения)
		И ПодробныйТекстОшибки <> ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ Нстр("ru ='Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если Прав(ВидОперации, 1) <> "." Тогда
		ВидОперации = ВидОперации + ".";
	КонецЕсли;
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
		|%2'"), ВидОперации, ПодробныйТекстОшибки);
	
	ВыполнитьЗаписьСобытияВЖурналРегистрации(ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗаписьСобытияВЖурналРегистрации(ОписаниеСобытия, УровеньВажности = Неопределено, РежимТранзакции = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Внешние компоненты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, , , ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

#КонецОбласти