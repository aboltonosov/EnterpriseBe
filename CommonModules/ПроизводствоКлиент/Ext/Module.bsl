////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

#Область ДвижениеПродукцииИМатериалов

// Открывает форму нового документа "ДвижениеПродукцииИМатериалов"
//
// Параметры:
//  Операция	 - ПеречислениеСсылка.ХозяйственныеОперации - операция документа
//  Отправитель	 - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Склады - значение реквизита "Отправитель"
//  Получатель	 - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Склады - значение реквизита "Получатель"
//
Процедура СоздатьДвижениеПродукцииИМатериалов(Операция, Отправитель = Неопределено, Получатель = Неопределено) Экспорт

	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", Операция);
	РеквизитыШапки.Вставить("Отправитель", Отправитель);
	РеквизитыШапки.Вставить("Получатель", Получатель);
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область ДвижениеПродукцииИМатериалов

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВыпускПродукцииНаОсновании"
//
Функция СоздатьПередачуПродукцииИзПроизводстваНаОсновании(ОписаниеКоманды) Экспорт

	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства"));
	
	КонецФункции
	
// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВыпускПродукцииНаОсновании"
//
Функция СоздатьПередачуПродукцииИзКладовойНаОсновании(ОписаниеКоманды) Экспорт

	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой"));
	
КонецФункции

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании"
//
Функция СоздатьПередачуМатериаловВПроизводствоНаОсновании(ОписаниеКоманды) Экспорт
	
	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство"));
	
КонецФункции

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании"
//
Функция СоздатьПередачуМатериаловВКладовуюНаОсновании(ОписаниеКоманды) Экспорт
	
	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"));
	
КонецФункции

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВозвратМатериаловНаОсновании"
//
Функция СоздатьВозвратМатериаловНаОсновании(ОписаниеКоманды) Экспорт

	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства"));
	
КонецФункции

Процедура СоздатьДвижениеПродукцииИМатериаловНаОсновании(ОписаниеКоманды, ХозяйственнаяОперация)
	
	ПараметрыОткрытия = ПроизводствоВызовСервера.ПараметрыСозданияДвиженияПродукцииИМатериаловНаОсновании(
							ОписаниеКоманды.ОбъектыОснований,
							ХозяйственнаяОперация);
	
	ОперацияПроизводства2_2 = (ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство"));
	
	РезультатПроверки = ПроизводствоВызовСервера.СоздатьПередачуМатериаловВПроизводствоПроверкаОснований(ОписаниеКоманды.ОбъектыОснований, ОперацияПроизводства2_2);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		Если ПараметрыОткрытия.Основание.Свойство("ОбъектыОснований") Тогда
			ИмяФормы = "Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта";
		ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство")
			И ТипЗнч(ОписаниеКоманды.ОбъектыОснований[0]) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство")
			И ТипЗнч(ПараметрыОткрытия.Основание.РеквизитыШапки.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ИмяФормы = "Документ.ПередачаМатериаловВПроизводство.ФормаОбъекта";
			ПараметрыОткрытия.Основание.РеквизитыШапки.ХозяйственнаяОперация =
				ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВПроизводство");
		Иначе
			ИмяФормы = "Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта";
		КонецЕсли;
		
		ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВыпускПродукцииБезЗаказаНаОсновании"
//
Функция СоздатьВыпускПродукцииБезЗаказаНаОсновании(ОписаниеКоманды) Экспорт

	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"ОбщийМодуль.ПроизводствоКлиент.СоздатьВыпускПродукцииБезЗаказаНаОсновании");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("ОбъектыОснований", ОписаниеКоманды.ОбъектыОснований);
	
	ФормаДокумента = ПолучитьФорму("Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта",,, ОписаниеКоманды.Форма,);
	ПараметрыДокументов.Вставить("ОбъектФормы", ФормаДокумента.Объект);
	
	ИдентификаторФормы = Строка(ОписаниеКоманды.Форма.УникальныйИдентификатор);
	ПараметрыДокументов.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Результат = ПроизводствоВызовСервера.ДокументыДвиженияПродукцииИМатериаловПоПараметрам(ПараметрыДокументов);
	
	Если Результат.Свойство("ОткрытьФормуНового") Тогда
		
		КопироватьДанныеФормы(ПараметрыДокументов.ОбъектФормы, ФормаДокумента.Объект);
		ФормаДокумента.ОбновитьПриОткрытии = Истина;
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.Открыть();
		
	ИначеЕсли Результат.СписокДокументов.Количество() > 1 Тогда
		
		ОткрытьФорму("Документ.ДвижениеПродукцииИМатериалов.Форма.ФормаСпискаНовыхДокументов",
						Результат, ОписаниеКоманды.Форма);
			
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не сформировано ни одного документа.'"));
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти
