
#Область ПрограммныйИнтерфейс

// Инициирует формирование исходящего запроса в ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания формирования запроса,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид документа ЕГАИС,
//  ВходныеПараметры - Структура - необходимые данные для формирования запроса,
//  ТранспортныйМодуль - Структура - модуль ТМ, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
Процедура НачатьФормированиеИсходящегоЗапроса(ОповещениеПриЗавершении, ВидДокумента, ВходныеПараметры,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	Контекст.Вставить("ВидДокумента"           , ВидДокумента);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	Если ТранспортныйМодуль = Неопределено Тогда
		Отбор = Новый Массив;
		
		Если ВходныеПараметры.Свойство("ДокументСсылка") Тогда
			ИдентификаторФСРАР = ИнтеграцияЕГАИСВызовСервера.КодФСРАРОрганизацииПоДокументу(ВходныеПараметры.ДокументСсылка);
			
			Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР));
		КонецЕсли;
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		НачатьВыборТранспортногоМодуля(ОповещениеВыбора, Отбор);
	Иначе
		ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Инициирует загрузку новых документов из ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания загрузки документов,
//  ТранспортныйМодуль      - Структура - модуль ТМ, из которого требуется загрузить документы,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента    - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - произвольные параметры прикладной конфигурации.
//
Процедура НачатьЗагрузкуДокументов(ОповещениеПриЗавершении,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Контекст.Вставить("Результат"              , ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов());
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		НачатьВыборТранспортногоМодуля(ОповещениеВыбора, Новый Структура("Поле, Значение", "ЗагружатьВходящиеДокументы", Истина));
	Иначе
		ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;

КонецПроцедуры

// Инициирует обработку ответов на запросы из ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - описание оповещения процедуры окончания обработки ответов,
//  ТранспортныйМодуль - Структура - модуль ТМ, из которого требуется загрузить ответы,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации,
//  УстанавливатьКомпонентуHTTPЗапросов - Булево - признак установки компоненты для веб-клиента.
//
Процедура НачатьОбработкуОтветов(ОповещениеПриЗавершении,
	ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено,
	ДополнительныеПараметры = Неопределено, УстанавливатьКомпонентуHTTPЗапросов = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Контекст.Вставить("УстанавливатьКомпоненту", УстанавливатьКомпонентуHTTPЗапросов);
	Контекст.Вставить("Результат"              , ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов());
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
		НачатьВыборТранспортногоМодуля(ОповещениеВыбора);
	Иначе
		ОбработкаОтветов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Подписывает чек в системе ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания чека,
//  ПараметрыЧека           - Массив - параметры чека в формате БПО,
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, если Неопределено, то будет предложен выбор,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
Процедура НачатьФормированиеПодписиЧека(ОповещениеПриЗавершении, ПараметрыЧека, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Результат = РезультатПодписиЧека(ТранспортныйМодуль);
	
	РезультатПодготовки = РезультатПодписиЧека();
	ПараметрыЧекаЕГАИС = ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, РезультатПодготовки);
	
	Если НЕ РезультатПодготовки.Результат Тогда
		ЗавершитьОперациюСОшибкой(ОповещениеПриЗавершении, ОтображатьСообщения, РезультатПодготовки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() > 0 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
		Контекст.Вставить("ПараметрыЧека"          , ПараметрыЧека);
		Контекст.Вставить("ПараметрыЧекаЕГАИС"     , ПараметрыЧекаЕГАИС);
		Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
		Контекст.Вставить("Результат"              , Результат);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			ОповещениеВыбора = Новый ОписаниеОповещения("ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля", ЭтотОбъект, Контекст);
			НачатьВыборТранспортногоМодуля(ОповещениеВыбора);
		Иначе
			ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
		КонецЕсли;
	Иначе
		Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;

КонецПроцедуры

// Показывает оповещение о результате заполнения справок 2 табличной части документа.
//
// Параметры:
//  СправкиЗаполнены - Булево - признак успешного заполнения справок,
//  Регистр2 - Булево - признак заполнения возврата алкогольной продукции из регистра №2.
//
Процедура СообщитьОЗавершенииЗаполненияСправок(СправкиЗаполнены, Регистр2 = Ложь) Экспорт
	
	Если СправкиЗаполнены Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение справок 2 в табличной части ""Товары"" выполнено успешно.'");
	Иначе
		Если Не Регистр2 Тогда
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет остатков в регистре №1.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Выполнить заполнение справок 2 в табличной части ""Товары"" не удалось: Нет документов передачи в регистр №2.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Обработка завершена'"),,
		ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает оповещение об успешном формировании запроса на загрузку классификатора.
//
Процедура СообщитьОЗавершенииФормированияИсходящегоЗапроса() Экспорт
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Операция выполнена.'"),,
		НСтр("ru = 'Запрос на загрузку классификатора сформирован.'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#Область РаботаСПрикладнымиДокументами

// Открывает форму протокола обмена.
//
// Параметры:
//  Документ        - ДокументСсылка - документ, для которого открывается протокол обмена.
//  ФормаВладелец   - УправляемаяФорма, Неопределено - форма, которая будет являться владельцем формы протокола обмена.
//
Процедура ОткрытьПротоколОбмена(Документ, ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументОснование", Документ);
	
	ОткрытьФорму(
		"РегистрСведений.ПротоколОбменаЕГАИС.Форма.ФормаСписка",
		ПараметрыФормы,
		ФормаВладелец,
		Новый УникальныйИдентификатор,
		ВариантОткрытияОкна.ОтдельноеОкно,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДокументОснование = Форма.Объект.Ссылка;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ДокументОснование", ДокументОснование);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	
	Если Форма.Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 был изменен. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 не записан. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиПродолжение(Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - выбранный пользователем ответ,
//  Контекст - Структура - контекст формы документа:
//   * Форма - УправляемаяФорма - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Форма.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если Не Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.Форма.Объект.Ссылка) Тогда
		ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиПродолжение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  Контекст - Структура - контекст формы документа:
//   * Форма - УправляемаяФорма - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиПродолжение(Контекст) Экспорт
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриОбработкеНавигационнойСсылки(
		Контекст.Форма,
		Контекст.ДокументОснование,
		Контекст.НавигационнаяСсылкаФорматированнойСтроки,
		Новый ОписаниеОповещения("ПриЗавершенииСопоставленияКлассификаторов", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Открывает форму нового документа после завершения сопоставления классификаторов.
//
// Параметры:
//  Результат - Булево - результат сопоставления,
//  ДополнительныеПараметры - Структура - контекст формы документа:
//   * Форма - УправляемаяФорма - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ПриЗавершенииСопоставленияКлассификаторов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Форма                                    = ДополнительныеПараметры.Форма;
	ДокументОснование                        = ДополнительныеПараметры.ДокументОснование;
	НавигационнаяСсылкаФорматированнойСтроки = ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки;
	
	СтрДлинаОткрыть = СтрДлина("Открыть");
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ОткрытьПротоколОбмена(ДокументОснование, Форма);
		
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, СтрДлинаОткрыть) = "Открыть" Тогда
		
		Результат = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(ДокументОснование);
		
		МассивДокументов = Результат[Прав(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(НавигационнаяСсылкаФорматированнойСтроки) - СтрДлинаОткрыть)];
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьАктСписанияЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.АктСписанияЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьАктПостановкиНаБалансЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьТТНИсходящаяЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЧекЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ЧекЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЧекЕГАИСВозврат" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьПередачаВРегистр2ЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ПередачаВРегистр2ЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьВозвратИзРегистра2ЕГАИС" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ОткрытьФорму("Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Начинает загрузку новых документов и обработку полученных ответов из ЕГАИС.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после загрузки документов,
//  ТранспортныйМодуль - Структура - настройка обмена с УТМ. Если Неопределено, то будет выполнен обмен по всем доступным настройкам.
//
Процедура ВыполнитьОбмен(ОповещениеПриЗавершении = Неопределено, ТранспортныйМодуль = Неопределено) Экспорт
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
	Иначе
		ТранспортныеМодули = Новый Массив;
		ТранспортныеМодули.Добавить(ТранспортныйМодуль);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	КонецЕсли;
	
	ОповещениеПриЗавершенииОбмена = Новый ОписаниеОповещения("ПриЗавершенииОбмена", ЭтотОбъект, ДополнительныеПараметры);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТранспортныеМодули",          ТранспортныеМодули);
	Контекст.Вставить("РезультатЗагрузкаДокументов", Новый Массив);
	Контекст.Вставить("РезультатОбработкаОтветов",   Новый Массив);
	Контекст.Вставить("ОповещениеПриЗавершении",     ОповещениеПриЗавершенииОбмена);
	
	ОбработатьОтветы(Неопределено, Контекст);
	
КонецПроцедуры

// Показывает оповещение пользователю о результате обмена с ЕГАИС.
//
// Параметры:
//  Результат - Структура - результат выполнения обмена:
//   * РезультатЗагрузкаДокументов - Структура - результат загрузки новых документов,
//   * РезультатОбработкаОтветов - Структура - результат обработки ответов.
//  ДополнительныеПараметры - Структура - параметры, сформированные перед началом выполнения обмена:
//   * ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после выполнения обмена.
//
Процедура ПриЗавершенииОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru='Выполнение обмена с ЕГАИС'");
	
	ОписанияОшибок    = Новый Соответствие;
	СтатусыДокументов = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Результат.РезультатЗагрузкаДокументов Цикл
		
		Если Не ЭлементДанных.Результат Тогда
			ОписанияОшибок.Вставить(ЭлементДанных.ОписаниеОшибки, Истина);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументСсылка Из ЭлементДанных.ЗагруженныеДокументыСсылки Цикл
			СтатусыДокументов.Вставить(ДокументСсылка, Неопределено);
		КонецЦикла;
		
		Если ЭлементДанных.ДокументыСОшибками.Количество() > 0 Тогда
			ОписанияОшибок.Вставить(СтрШаблон(НСтр("ru = 'При загрузке новых документов не удалось получить %1 документов'"), ЭлементДанных.ДокументыСОшибками.Количество()), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементДанных Из Результат.РезультатОбработкаОтветов Цикл
		
		Если Не ЭлементДанных.Результат Тогда
			ОписанияОшибок.Вставить(ЭлементДанных.ОписаниеОшибки, Истина);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументСсылка Из ЭлементДанных.ЗагруженныеДокументыСсылки Цикл
			СтатусыДокументов.Вставить(ДокументСсылка, Неопределено);
		КонецЦикла;
		
		Если ЭлементДанных.ДокументыСОшибками.Количество() > 0 Тогда
			ОписанияОшибок.Вставить(СтрШаблон(НСтр("ru = 'При обработке ответов не удалось загрузить %1 документов'"), ЭлементДанных.ДокументыСОшибками.Количество()), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатусыДокументов.Количество() > 0 Тогда
		СтатусыДокументов = ИнтеграцияЕГАИСВызовСервера.ПолучитьСтатусыДокументов(СтатусыДокументов);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтатусыДокументов Цикл
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",    КлючИЗначение.Значение.Ссылка);
		ПараметрОповещения.Вставить("Основание", КлючИЗначение.Значение.ДокументОснование);
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
	КонецЦикла;
	
	Если СтатусыДокументов.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru='Документов с измененным статусом: %1.'"), СтатусыДокументов.Количество());
		
	ИначеЕсли СтатусыДокументов.Количество() = 1 Тогда
		
		Для Каждого КлючИЗначение Из СтатусыДокументов Цикл
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ);
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для документа %1 изменен статус ЕГАИС: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение.Статус);
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru='Документов с измененным статусом: %1.'"), СтатусыДокументов.Количество());
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
	Для Каждого КлючИЗначение Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет итерацию получения ответов из ЕГАИС по одной настройке обмена.
//
// Параметры:
//  Результат - Структура - результат обработки ответов предыдущей итерации
//     (см. ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов()),
//  Контекст - Структура - параметры, сформированные перед началом обработки ответов:
//   * РезультатЗагрузкаДокументов - Структура - результат загрузки новых документов,
//   * РезультатОбработкаОтветов - Структура - результат обработки ответов,
//   * ТранспортныеМодули - Массив - массив доступных настроек обмена,
//   * ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после завершения обмена.
//
Процедура ОбработатьОтветы(Результат, Контекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		Контекст.РезультатОбработкаОтветов.Добавить(Результат);
	КонецЕсли;
	
	Если Контекст.ТранспортныеМодули.Количество() = 0 Тогда
		
		ТранспортныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТранспортныеМодули",          ТранспортныеМодули);
		ДополнительныеПараметры.Вставить("РезультатЗагрузкаДокументов", Контекст.РезультатЗагрузкаДокументов);
		ДополнительныеПараметры.Вставить("РезультатОбработкаОтветов",   Контекст.РезультатОбработкаОтветов);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",     Контекст.ОповещениеПриЗавершении);
		
		ЗагрузитьВходящиеДокументы(Неопределено, ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	ТранспортныйМодуль = Контекст.ТранспортныеМодули[0];
	
	Контекст.ТранспортныеМодули.Удалить(Контекст.ТранспортныеМодули.Найти(ТранспортныйМодуль));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТранспортныеМодули",          Контекст.ТранспортныеМодули);
	ДополнительныеПараметры.Вставить("РезультатЗагрузкаДокументов", Контекст.РезультатЗагрузкаДокументов);
	ДополнительныеПараметры.Вставить("РезультатОбработкаОтветов",   Контекст.РезультатОбработкаОтветов);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",     Контекст.ОповещениеПриЗавершении);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОбработатьОтветы", ЭтотОбъект, ДополнительныеПараметры));
	Контекст.Вставить("ОтображатьСообщения"    , Истина);
	Контекст.Вставить("ИдентификаторКлиента"   , Неопределено);
	Контекст.Вставить("ДополнительныеПараметры", Неопределено);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	Контекст.Вставить("Результат"              , ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов());
	
	ОбработкаОтветов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст);
	
КонецПроцедуры

// Выполняет итерацию загрузки новых документов из ЕГАИС по одной настройке обмена.
//
// Параметры:
//  Результат - Структура - результат обработки ответов предыдущей итерации
//     (см. ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов()),
//  Контекст - Структура - параметры, сформированные перед началом обработки ответов:
//   * РезультатЗагрузкаДокументов - Структура - результат загрузки новых документов,
//   * РезультатОбработкаОтветов - Структура - результат обработки ответов,
//   * ТранспортныеМодули - Массив - массив доступных настроек обмена,
//   * ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после завершения обмена.
//
Процедура ЗагрузитьВходящиеДокументы(Результат, Контекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		Контекст.РезультатЗагрузкаДокументов.Добавить(Результат);
	КонецЕсли;
	
	Если Контекст.ТранспортныеМодули.Количество() = 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РезультатЗагрузкаДокументов", Контекст.РезультатЗагрузкаДокументов);
		ДополнительныеПараметры.Вставить("РезультатОбработкаОтветов",   Контекст.РезультатОбработкаОтветов);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении,  ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	ТранспортныйМодуль = Контекст.ТранспортныеМодули[0];
	
	Контекст.ТранспортныеМодули.Удалить(Контекст.ТранспортныеМодули.Найти(ТранспортныйМодуль));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТранспортныеМодули",          Контекст.ТранспортныеМодули);
	ДополнительныеПараметры.Вставить("РезультатЗагрузкаДокументов", Контекст.РезультатЗагрузкаДокументов);
	ДополнительныеПараметры.Вставить("РезультатОбработкаОтветов",   Контекст.РезультатОбработкаОтветов);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",     Контекст.ОповещениеПриЗавершении);
	
	ПараметрыДляЗаполненияТТН = Новый Структура;
	ПараметрыДляЗаполненияТТН.Вставить("Организация",    ТранспортныйМодуль.Контрагент);
	ПараметрыДляЗаполненияТТН.Вставить("ТорговыйОбъект", ТранспортныйМодуль.ТорговыйОбъект);
	
	ИнтеграцияЕГАИСКлиент.НачатьЗагрузкуДокументов(
		Новый ОписаниеОповещения("ЗагрузитьВходящиеДокументы", ЭтотОбъект, ДополнительныеПараметры),
		ТранспортныйМодуль,
		Истина,
		Неопределено,
		ПараметрыДляЗаполненияТТН);
	
КонецПроцедуры

// Возвращает транспортный модуль по переданной организации и торговому объекту.
//
// Параметры:
//  Организация               - ОпределяемыйТип.Организация - организация предприятия,
//  ТорговыйОбъект            - ОпределяемыйТип.ТорговыйОбъектЕГАИС - магазин, в котором установлен транспортный модуль,
//  ВыбратьМодульИнтерактивно - Булево - выбирать транспортный модуль интерактивно,
//  ОповещениеПриЗавершении   - ОписаниеОповещения - оповещение при завершении.
//
Процедура ТранспортныйМодуль(Организация, ТорговыйОбъект, ВыбратьМодульИнтерактивно = Ложь, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСВызовСервера.ТранспортныйМодуль(
		Организация,
		ТорговыйОбъект);
		
	Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) И Не ВыбратьМодульИнтерактивно Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заданы параметры подключения к ЕГАИС'"));
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТорговыйОбъект", ТорговыйОбъект);
		ДополнительныеПараметры.Вставить("Организация",    Организация);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ТорговыйОбъект", ТорговыйОбъект);
		ПараметрыОткрытияФормы.Вставить("Организация",    Организация);
		
		ОткрытьФорму(
			"РегистрСведений.НастройкиОбменаЕГАИС.Форма.ФормаВыбора",
			ПараметрыОткрытияФормы,,,,,
			Новый ОписаниеОповещения("ТранспортныйМодульЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ТранспортныйМодуль);
		
	КонецЕсли;
	
КонецПроцедуры

// Передать ответ в ЕГАИС.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС,
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//
Процедура ПередатьОтветЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС, ОповещениеПриЗавершении) Экспорт
	
	СтруктураРасхождений = ИнтеграцияЕГАИСВызовСервера.ПроверитьРасхожденияТоваровПоступленияТТН_ЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ЕстьРасхожденияМеньшеТТН", СтруктураРасхождений.ЕстьРасхожденияМеньшеТТН);
	
	Если СтруктураРасхождений.ЕстьРасхожденияБольшеТТН ИЛИ СтруктураРасхождений.ЕстьРасхожденияМеньшеТТН Тогда
		
		ПараметрыВопроса = Новый Структура("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
		ОткрытьФорму("Документ.ТТНВходящаяЕГАИС.Форма.ФормаВопросОРасхожденияхЕГАИС",
			ПараметрыВопроса,
			,,,,
			Новый ОписаниеОповещения("ПередатьОтветЕГАИСПослеВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН");
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
		ВходныеПараметры.ДокументСсылка = ТоварноТранспортнаяНакладнаяЕГАИС;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ПередатьОтветЕГАИСЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ВидДокумента,
			ВходныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Отказаться от данных ЕГАИС.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС	 - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС,
//  ОповещениеПриЗавершении				 - ОписаниеОповещения - оповещение при завершении.
//
Процедура ОтказатьсяОтДанныхЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС, ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",           ОповещениеПриЗавершении);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОтказатьсяОтДанныхЕГАИСПодтверждение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='Передать отказ от накладной в ЕГАИС?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Запросить отмену проведения накладной в ЕГАИС.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС,
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//
Процедура ЗапроситьОтменуПроведения(ТоварноТранспортнаяНакладнаяЕГАИС, ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",           ОповещениеПриЗавершении);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ЗапроситьОтменуПроведенияПодтверждение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='Отменить проведение накладной в ЕГАИС?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Подготавливает данные по чеку и начинает формирование подписи чека в ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС, ДокументСсылка.ЧекЕГАИСВозврат - передаваемый в ЕГАИС чек.
//
Процедура ПередатьДанныеЧекаЕГАИСИзСписка(ДокументСсылка) Экспорт
	
	Данные = ИнтеграцияЕГАИСВызовСервера.ПараметрыПередачиДанныхЕГАИС(ДокументСсылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументСсылка", ДокументСсылка);
	
	НачатьФормированиеПодписиЧека(
		Новый ОписаниеОповещения("ПриЗавершенииФормированияПодписиЧекаИзСписка", ЭтотОбъект, ДополнительныеПараметры),
		Данные.ВходныеПараметры,
		Данные.ТранспортныйМодуль, Ложь);
	
КонецПроцедуры

// Меняет статус чека, сохраняет в базу адрес и подпись чека при успешном формировании подписи в ЕГАИС.
//
// Параметры:
//  РезультатВыполнения - Структура - результат формирования подписи (см. РезультатПодписиЧека()),
//  ДополнительныеПараметры - Структура - дополнительные параметры, указанные при создании оповещения.
//
Процедура ПриЗавершенииФормированияПодписиЧекаИзСписка(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Ошибка = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		АдресЧекаЕГАИС   = РезультатВыполнения.АдресЧека;
		ПодписьЧекаЕГАИС = РезультатВыполнения.ПодписьЧека;
		СтатусОбработки  = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияЕГАИС.Передан");
		
		ВозвращаемоеЗначение = ИнтеграцияЕГАИСВызовСервера.ИзменитьСтатусЧекаЕГАИС(
			ДополнительныеПараметры.ДокументСсылка,
			АдресЧекаЕГАИС,
			ПодписьЧекаЕГАИС,
			СтатусОбработки);
			
		Если Не ВозвращаемоеЗначение.Результат Тогда
			
			Ошибка = Истина;
			ОписаниеОшибки = ВозвращаемоеЗначение.ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		Ошибка = Истина;
		ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
		
	КонецЕсли;
	
	Если Ошибка Тогда
		
		ТекстСообщения = НСтр("ru = 'При передаче данных в ЕГАИС произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",    ДополнительныеПараметры.ДокументСсылка);
		ПараметрОповещения.Вставить("Основание", ВозвращаемоеЗначение.ДокументОснование);
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
		ТекстЗаголовка = НСтр("ru = 'Выполнение обмена с ЕГАИС'");
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДополнительныеПараметры.ДокументСсылка);
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для документа %1 изменен статус ЕГАИС: %2.'"),
			ДополнительныеПараметры.ДокументСсылка,
			СтатусОбработки);
			
		ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные по чеку и начинает формирование подписи чека в ЕГАИС.
//
// Параметры:
//  Форма - УправляемаяФорма - форма чека,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после формирования подписи.
//
Процедура ПередатьДанныеЧекаЕГАИС(Форма, ОповещениеПриЗавершении) Экспорт
	
	Данные = ИнтеграцияЕГАИСВызовСервера.ПараметрыПередачиДанныхЕГАИС(Форма.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	НачатьФормированиеПодписиЧека(
		Новый ОписаниеОповещения("ПриЗавершенииФормированияПодписиЧека", ЭтотОбъект, ДополнительныеПараметры),
		Данные.ВходныеПараметры,
		Данные.ТранспортныйМодуль,Ложь);
	
КонецПроцедуры

// Меняет статус чека, сохраняет в базу адрес и подпись чека при успешном формировании подписи в ЕГАИС.
//
// Параметры:
//  РезультатВыполнения - Структура - результат формирования подписи (см. РезультатПодписиЧека()),
//  ДополнительныеПараметры - Структура - дополнительные параметры, указанные при создании оповещения.
//
Процедура ПриЗавершенииФормированияПодписиЧека(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.Форма.Объект.АдресЧекаЕГАИС   = РезультатВыполнения.АдресЧека;
		ДополнительныеПараметры.Форма.Объект.ПодписьЧекаЕГАИС = РезультатВыполнения.ПодписьЧека;
		ДополнительныеПараметры.Форма.Объект.СтатусОбработки  = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияЕГАИС.Передан");
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		
		ДополнительныеПараметры.Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",    ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрОповещения.Вставить("Основание", ДополнительныеПараметры.Форма.Объект.ДокументОснование);
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
		ТекстЗаголовка = НСтр("ru = 'Выполнение обмена с ЕГАИС'");
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДополнительныеПараметры.Форма.Объект.Ссылка);
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для документа %1 изменен статус ЕГАИС: %2.'"),
			ДополнительныеПараметры.Форма.Объект.Ссылка,
			ДополнительныеПараметры.Форма.Объект.СтатусОбработки);
			
		ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При передаче данных в ЕГАИС произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Обработчик окончания формирования исходящего запроса.
//
// Параметры:
//  Результат - Структура - результат формирования исходящего запроса (см. ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса()),
//  ДополнительныеПараметры - Структура - дополнительные параметры, указанные при создании оповещения.
//
Процедура ПослеПередачиДанныхЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Прекращает выполнение текущей операции с оборудованием с ошибкой и вызывает завершающую процедуру.
//
// Параметры:
//  ОповещениеПриЗавершении  - ОписаниеОповещения - процедура, вызываемая после выполнения операции на оборудовании,
//  ОтображатьСообщения      - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ТекстОшибки              - Строка - описание ошибки.
//
Процедура ЗавершитьОперациюСОшибкой(ОповещениеПриЗавершении, ОтображатьСообщения = Истина, ТекстОшибки = "") Экспорт
	
	Если ОтображатьСообщения И НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
		
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Результат", Ложь);
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Подключает обработчик ожидания для получения ответов из ЕГАИС.
//
Процедура ПодключитьОбработчикОтветовЕГАИС() Экспорт
	
	Если НЕ ИнтеграцияЕГАИСВызовСервера.ДоступнаОбработкаОтветов() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Ложь);
	СписокУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если СписокУТМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьОтветыЕГАИСНаКлиенте", 60, Ложь);
	
КонецПроцедуры

// Проверяет возможность и при необходимости выполняет обработку ответов из ЕГАИС.
//
Процедура НачатьОбработкуОтветовПоРасписанию() Экспорт
	
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИмяПараметра = "ИнтеграцияЕГАИС.ДатаПоследнейОбработкиОтветов";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ДатаПроверки);
	КонецЕсли;
	
	РасписаниеСтруктура = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РасписаниеОбработкиОтветов;
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РасписаниеСтруктура);
	
	Если ЗначениеЗаполнено(ПараметрыПриложения[ИмяПараметра]) И НЕ ИнтеграцияЕГАИСВызовСервера.ПроверитьРасписание(Расписание, ДатаПроверки, ПараметрыПриложения[ИмяПараметра]) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения[ИмяПараметра] = ДатаПроверки;
	
	Отбор = Новый Структура("Поле, Значение", "ОбменНаСервере", Ложь);
	
	СписокУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если СписокУТМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_Завершение", ЭтотОбъект));
	Контекст.Вставить("СписокУТМ", СписокУТМ);
	Контекст.Вставить("ТекущийИндекс", 0);
	Контекст.Вставить("РезультатОбработкаОтветов", Новый Массив);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ", ЭтотОбъект, Контекст);
	НачатьОбработкуОтветов(ОповещениеПриЗавершении, СписокУТМ[0], Ложь,,, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выбирает доступный транспортный модуль из настроек обмена.
//
Процедура НачатьВыборТранспортногоМодуля(ОповещениеПриЗавершении, Отбор = Неопределено)
	
	СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если СписокДоступныхМодулей.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствуют доступные транспортные модули.'");
	КонецЕсли;
	
	Если СписокДоступныхМодулей.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, СписокДоступныхМодулей[0]);
		Возврат;
	КонецЕсли;
	
	ИдентификаторФСРАРПоУмолчанию = "";
	
	СписокДляВыбора = Новый СписокЗначений;
	Для Каждого ТранспортныйМодуль Из СписокДоступныхМодулей Цикл
		Если ТранспортныйМодуль.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
			ИдентификаторФСРАРПоУмолчанию = ТранспортныйМодуль.ИдентификаторФСРАР;
		ИначеЕсли ТранспортныйМодуль.ИдентификаторФСРАР = ИдентификаторФСРАРПоУмолчанию Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДляВыбора.Добавить(ТранспортныйМодуль, ТранспортныйМодуль.Представление);
	КонецЦикла;
	
	Если СписокДляВыбора.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, СписокДляВыбора[0].Значение);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	СписокДляВыбора.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ВыборТранспортногоМодуля_Завершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Выберите транспортный модуль ЕГАИС'"));
	
КонецПроцедуры

// Начинает получение данных из УТМ по переданному списку URL-адресов.
//
Процедура НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, ТранспортныйМодуль, СписокURL, ОтображатьСообщения)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки, ПолученныеДанные", Ложь, "", Новый Массив);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("СписокURL"              , СписокURL);
	Контекст.Вставить("ТекущийИндекс"          , 0);
	Контекст.Вставить("Результат"              , Результат);
	
	Если СписокURL.Количество() = 0 Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СписокURL[0].АдресURL);
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
	#Иначе
		ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(
			ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
			Контекст);
	#КонецЕсли
	
КонецПроцедуры

// Начинает удаление данных из УТМ по переданному списку URL-адресов.
//
Процедура НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, ТранспортныйМодуль, СписокURL, ОтображатьСообщения)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ТранспортныйМодуль"     , ТранспортныйМодуль);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	Контекст.Вставить("СписокURL"              , СписокURL);
	Контекст.Вставить("ТекущийИндекс"          , 0);
	Контекст.Вставить("Результат"              , Результат);
	
	Если СписокURL.Количество() = 0 Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СписокURL[0]);
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
	ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
	#Иначе
		УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(
			ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
			Контекст);
	#КонецЕсли
	
КонецПроцедуры

// Сохраняет текст полученного документа из списка URL-адресов.
//
Процедура ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента();
	СтруктураДокумента.ИдентификаторЗапроса = Контекст.СписокURL[Контекст.ТекущийИндекс].ИдентификаторЗапроса;
	СтруктураДокумента.АдресЗапроса = Контекст.СписокURL[Контекст.ТекущийИндекс].АдресURL;
	СтруктураДокумента.ТекстXML = Результат.ОтветМодуляЕГАИС;
	
	Контекст.Результат.ПолученныеДанные.Добавить(СтруктураДокумента);
	
	Если Контекст.ТекущийИндекс = Контекст.СписокURL.ВГраница() Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	Иначе
		URLАдрес = Контекст.СписокURL[Контекст.ТекущийИндекс + 1].АдресURL;
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLАдрес);
		
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
		#Иначе
			ПолучениеДанныхПоСпискуURL_ПослеЗагрузкиЭлементаСписка(
				ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
				Контекст);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Удаляет успешно загруженные документы.
//
Процедура УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось удалить документ %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Контекст.СписокURL[Контекст.ТекущийИндекс]);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ОписаниеОшибки;
		
		Если Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.ТекущийИндекс = Контекст.СписокURL.ВГраница() Тогда
		Контекст.Результат.Результат = Истина;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	Иначе
		URLАдрес = Контекст.СписокURL[Контекст.ТекущийИндекс + 1];
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLАдрес);
		
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE");
		ДанныеЗапроса.АдресЗапроса = СтруктураURI.ПутьНаСервере;
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
		#Иначе
			УдалениеДанныхПоСпискуURL_ПослеУдаленияЭлементаСписка(
				ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса),
				Контекст);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Продолжает формирование исходящего запроса после выбора транспортного модуля.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если (Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции")) Тогда
		
		Если ПустаяСтрока(Контекст.ВходныеПараметры.ИмяПараметра) Тогда
			Контекст.ВходныеПараметры.ИмяПараметра = "ИНН";
			Контекст.ВходныеПараметры.ЗначениеПараметра = Контекст.ВходныеПараметры.ИНН;
		КонецЕсли;
		
		Если ПустаяСтрока(Контекст.ВходныеПараметры.ЗначениеПараметра) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
			
			Если ВРег(Контекст.ВходныеПараметры.ИмяПараметра) = "ИНН" Тогда
				
				Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
					ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите ИНН производителя или импортера алкогольной продукции'"), 12);
				Иначе
					ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите ИНН производителя, импортера или собственной организации'"), 12);
				КонецЕсли;
				
			ИначеЕсли ВРег(Контекст.ВходныеПараметры.ИмяПараметра) = "КОД" Тогда
				
				ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите код алкогольной продукции'"), 50);
				
			ИначеЕсли ВРег(Контекст.ВходныеПараметры.ИмяПараметра) = "СИО" Тогда
				
				ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите код организации в ФСРАР'"), 50);
				
			Иначе
				ТекстПодсказки = НСтр("ru = 'Введите %1'");
				ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, Контекст.ВходныеПараметры.ИмяПараметра);
				
				ПоказатьВводСтроки(ОписаниеОповещения,, ТекстПодсказки);
			КонецЕсли;
		Иначе
			ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст);
		КонецЕсли;
		
	ИначеЕсли (Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2"))
		И ПустаяСтрока(Контекст.ВходныеПараметры.РегистрационныйНомер) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
		Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1") Тогда
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите регистрационный номер справки 1'"), 50);
		Иначе
			ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите регистрационный номер справки 2'"), 50);
		КонецЕсли;
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН")
		И ПустаяСтрока(Контекст.ВходныеПараметры.ИдентификаторЕГАИС) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров", ЭтотОбъект, Контекст);
		ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите идентификатор ТТН'"), 50);
		
	Иначе
		ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ввод параметра исходящего запроса.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров(ПараметрЗапроса, Контекст) Экспорт
	
	Если ПараметрЗапроса = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	Если Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			Если ВРег(Контекст.ВходныеПараметры.ИмяПараметра) = "ИНН" Тогда
				ТекстОшибки = НСтр("ru = 'Не введен ИНН.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Не введен %1.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НРег(Контекст.ВходныеПараметры.ИмяПараметра));
			КонецЕсли;
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("ЗначениеПараметра", ПараметрЗапроса);
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1")
		ИЛИ Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Не введен регистрационный номер.'"));
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("РегистрационныйНомер", ПараметрЗапроса);
		
	ИначеЕсли Контекст.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН") Тогда
		
		Если ПустаяСтрока(ПараметрЗапроса) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Не введен идентификатор ТТН.'"));
			Возврат;
		КонецЕсли;
		
		Контекст.ВходныеПараметры.Вставить("ИдентификаторЕГАИС", ПараметрЗапроса);
		
	КонецЕсли;
	
	ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст);
	
КонецПроцедуры

// Формирует исходящий запрос в УТМ после получения всех данных.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных(Контекст)
	
	ДокументОснование = ?(
		ТипЗнч(Контекст.ВходныеПараметры) = Тип("Структура") И Контекст.ВходныеПараметры.Свойство("ДокументСсылка"),
		Контекст.ВходныеПараметры.ДокументСсылка,
		Неопределено);
	
	Контекст.Вставить("ДокументОснование", ДокументОснование);
	
	Если Контекст.ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.СформироватьЗапросВУТМ(
			Контекст.ТранспортныйМодуль,
			Контекст.ВидДокумента,
			Контекст.ВходныеПараметры,
			ДокументОснование);
			
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ТекстОшибки = "";
		ДанныеЗапроса = ИнтеграцияЕГАИСВызовСервера.ПодготовитьДанныеЗапросаВУТМ(
			Контекст.ТранспортныйМодуль,
			Контекст.ВидДокумента,
			Контекст.ВходныеПараметры,
			ТекстОшибки);
	
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Контекст.Вставить("ДанныеЗапроса", ДанныеЗапроса);
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, Контекст.ДанныеЗапроса);
		#КонецЕсли
		
		ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные исходящего запроса после получения ответа из УТМ.
//
Процедура ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.ДанныеЗапроса.Вставить("ИдентификаторЗапроса", Результат.ИдентификаторЗапроса);
	
	ИнтеграцияЕГАИСВызовСервера.ЗавершитьФормированиеИсходящегоЗапроса(Контекст.ДанныеЗапроса, Контекст.ВидДокумента, Контекст.ДокументОснование);
	
	СтатусыДокументов = Новый Соответствие;
	СтатусыДокументов.Вставить(Контекст.ДокументОснование, Неопределено);
	СтатусыДокументов = ИнтеграцияЕГАИСВызовСервера.ПолучитьСтатусыДокументов(СтатусыДокументов);
	
	Для Каждого КлючИЗначение Из СтатусыДокументов Цикл
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",    КлючИЗначение.Значение.Ссылка);
		ПараметрОповещения.Вставить("Основание", КлючИЗначение.Значение.ДокументОснование);
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
		ТекстЗаголовка = НСтр("ru = 'Выполнение обмена с ЕГАИС'");
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ);
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для документа %1 изменен статус ЕГАИС: %2.'"),
			КлючИЗначение.Ключ,
			КлючИЗначение.Значение.Статус);
			
		ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

// Начинает загрузку документов из ЕГАИС.
//
Процедура ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТранспортныйМодуль.ЗагружатьВходящиеДокументы Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, НСтр("ru = 'Загрузка документов запрещена.'"));
		Возврат;
	КонецЕсли;
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, Контекст.ДополнительныеПараметры);
		
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "/opt/out";
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		#КонецЕсли
		
		ЗагрузкаДокументов_ПослеПолученияСпискаДокументов(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает массив документов для последующей загрузки.
//
Процедура ЗагрузкаДокументов_ПослеПолученияСпискаДокументов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		СписокURL = ИнтеграцияЕГАИСВызовСервера.ПодготовитьСписокURLДокументовКЗагрузке(Результат.ОтветМодуляЕГАИС);
	#Иначе
		СписокURL = ИнтеграцияЕГАИСКлиентСервер.ПодготовитьСписокURLДокументовКЗагрузке(Результат.ОтветМодуляЕГАИС);
	#КонецЕсли
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеЗагрузкиСпискаДокументов", ЭтотОбъект, Контекст);
	НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Записывает в базу данных загруженные документы.
//
Процедура ЗагрузкаДокументов_ПослеЗагрузкиСпискаДокументов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(Контекст.ТранспортныйМодуль, Результат.ПолученныеДанные, Контекст.ОтображатьСообщения, Контекст.ДополнительныеПараметры);
	
	Если Контекст.Результат.ЗагруженныеДокументы.Количество() = 0 Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_ПослеУдаленияЗагруженныхДокументов", ЭтотОбъект, Контекст);
	НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, Контекст.Результат.ЗагруженныеДокументы, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Вызывает оповещение процедуры завершения загрузки документов.
//
Процедура ЗагрузкаДокументов_ПослеУдаленияЗагруженныхДокументов(Результат, Контекст) Экспорт
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Начинает обработку ответов из ЕГАИС.
//
Процедура ОбработкаОтветов_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт

	Если ТранспортныйМодуль = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		Результат = ИнтеграцияЕГАИСВызовСервера.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, Контекст.ДополнительныеПараметры);
		
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		Если НЕ Результат.Результат Тогда
			ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	Иначе
		ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "/opt/in";
		
		#Если ВебКлиент Тогда
			ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
				Новый ОписаниеОповещения("ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов", ЭтотОбъект, Контекст),
				Контекст.ТранспортныйМодуль,
				ДанныеЗапроса,
				Контекст.ОтображатьСообщения,
				Контекст.УстанавливатьКомпоненту);
			Возврат;
		#Иначе
			Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		#КонецЕсли
		
		ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Наичнает получение списка ответов из ЕГАИС.
//
Процедура ОбработкаОтветов_ПослеПолученияСпискаИсходящихЗапросов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СоответствиеЗапросов", Новый Соответствие);
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВызовСервера.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресЗапроса");
	#Иначе
		ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресЗапроса");
	#КонецЕсли
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ОбработкаОтветов_ПослеПолученияСпискаОтветов", ЭтотОбъект, Контекст),
			Контекст.ТранспортныйМодуль,
			ДанныеЗапроса,
			Контекст.ОтображатьСообщения);
		Возврат;
	#Иначе
		Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(Контекст.ТранспортныйМодуль, ДанныеЗапроса);
	#КонецЕсли
	
	ОбработкаОтветов_ПослеПолученияСпискаОтветов(Результат, Контекст);
	
КонецПроцедуры

// Подготавливает массив документов для последующей загрузки.
//
Процедура ОбработкаОтветов_ПослеПолученияСпискаОтветов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВызовСервера.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресаОтветов");
	#Иначе
		ИнтеграцияЕГАИСКлиентСервер.УстановитьСоответствиеЗапросов(Контекст.СоответствиеЗапросов, Результат.ОтветМодуляЕГАИС, "АдресаОтветов");
	#КонецЕсли
	
	СписокURL = ИнтеграцияЕГАИСВызовСервера.ПодготовитьСписокURLОтветовКЗагрузке(Контекст.СоответствиеЗапросов);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеЗагрузкиСпискаОтветов", ЭтотОбъект, Контекст);
	НачатьПолучениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Записывает в базу данных полученные ответы.
//
Процедура ОбработкаОтветов_ПослеЗагрузкиСпискаОтветов(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьМассивДокументов(Контекст.ТранспортныйМодуль, Результат.ПолученныеДанные, Контекст.ОтображатьСообщения, Контекст.ДополнительныеПараметры);
	
	Если Контекст.Результат.ЗагруженныеДокументы.Количество() = 0 Тогда
		РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
		Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	СписокURL = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Контекст.Результат.ЗагруженныеДокументы);
	
	Для Каждого КлючЗначение Из Контекст.СоответствиеЗапросов Цикл
		Если ПустаяСтрока(КлючЗначение.Значение.АдресЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресаОтветов = КлючЗначение.Значение.АдресаОтветов;
		
		Для Каждого АдресОтвета Из АдресаОтветов Цикл
			Если СписокURL.Найти(АдресОтвета) <> Неопределено И СписокURL.Найти(КлючЗначение.Значение.АдресЗапроса) = Неопределено Тогда
				СписокURL.Добавить(КлючЗначение.Значение.АдресЗапроса);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_ПослеУдаленияЗагруженныхОтветов", ЭтотОбъект, Контекст);
	НачатьУдалениеДанныхПоСпискуURL(ОповещениеПриЗавершении, Контекст.ТранспортныйМодуль, СписокURL, Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Вызывает оповещение процедуры завершения обработи ответов.
//
Процедура ОбработкаОтветов_ПослеУдаленияЗагруженныхОтветов(Результат, Контекст) Экспорт
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(Контекст.ТранспортныйМодуль, Контекст.ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат И Контекст.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Результат.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Результат.ОписаниеОшибки);
	Иначе
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат подписи чека ККМ в ЕГАИС.
//
Функция РезультатПодписиЧека(ТранспортныйМодуль = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"         , Ложь);
	Результат.Вставить("ОписаниеОшибки"    , "");
	Результат.Вставить("АдресЧека"         , "");
	Результат.Вставить("ПодписьЧека"       , "");
	Результат.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Возврат Результат;
	
КонецФункции

// Добавляет в текст ошибки строку с ошибкой.
//
// Параметры:
//  ТекстОшибки  - Строка - Общий текст ошибки,
//  СтрокаОшибки - Строка - Добавляемая строка ошибки,
//  Номенклатура - Строка - Номенклатура, для которой зафиксирована ошибка.
//
Процедура ДобавитьСтрокуСОшибкой(ТекстОшибки, СтрокаОшибки, Номенклатура)

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + СтрЗаменить(СтрокаОшибки, "%1", Номенклатура);

КонецПроцедуры

// Проверяет корректность входящих данных перед отправкой запроса в УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные УТМ, в котором требуется подписать чек,
//  ПараметрыЧекаЕГАИС - Структура - подготовленные ранее данные чека.
//
// Возвращаемое значение:
//   Структура - результат проверки данных.
//
Функция ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС)
	
	Результат = РезультатПодписиЧека();
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) И НЕ ПустаяСтрока(ТранспортныйМодуль.ИНН) Тогда
		ПараметрыЧекаЕГАИС.ИНН = ТранспортныйМодуль.ИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И НЕ ПустаяСтрока(ТранспортныйМодуль.КПП) Тогда
		ПараметрыЧекаЕГАИС.КПП = ТранспортныйМодуль.КПП;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Адрес) Тогда
		ПараметрыЧекаЕГАИС.АдресМагазина = Лев(ТранспортныйМодуль.Адрес, 128);
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.НаименованиеМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Представление) Тогда
		ПараметрыЧекаЕГАИС.НаименованиеМагазина = Лев(ТранспортныйМодуль.Представление, 128);
	КонецЕсли;
	
	МассивКодовМарок = Новый Массив;
	ТекстОшибки  = "";
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан ИНН организации.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И СтрДлина(ПараметрыЧекаЕГАИС.ИНН) = 10 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан КПП торгового объекта.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан адрес магазина.'"), "");
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из ПараметрыЧекаЕГАИС.ТаблицаТоваров Цикл
		
		Если СтрокаЧека.Цена = 0 Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указана цена.'"), СтрокаЧека.Номенклатура);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЧека.КодАкцизнойМарки) Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указан штрихкод марки алкогольной продукции.'"), СтрокаЧека.Номенклатура);
		КонецЕсли;
		
		Если МассивКодовМарок.Найти(СокрЛП(СтрокаЧека.КодАкцизнойМарки)) <> Неопределено Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'В чеке обнаружены дублирующиеся позиции.'"), "");
		КонецЕсли;
		
		МассивКодовМарок.Добавить(СокрЛП(СтрокаЧека.КодАкцизнойМарки));
	КонецЦикла;
	
	Результат.ОписаниеОшибки = ТекстОшибки;
	Результат.Результат = ПустаяСтрока(ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

// Начинает выгрузку алкогольной продукции в УТМ.
//
Процедура ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля(ТранспортныйМодуль, Контекст) Экспорт

	Если ТранспортныйМодуль = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	Контекст.Результат.ТранспортныйМодуль = ТранспортныйМодуль;
	
	РезультатОперации = ПроверитьВходящиеДанныеПередПодписьюЧека(Контекст.ТранспортныйМодуль, Контекст.ПараметрыЧекаЕГАИС);
	Если НЕ РезультатОперации.Результат Тогда
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры = Новый Массив;
	ВходныеПараметры.Добавить(Контекст.ПараметрыЧекаЕГАИС);
	ВходныеПараметры.Добавить(Контекст.ПараметрыЧекаЕГАИС.ТаблицаТоваров);
		
	НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ФормированиеПодписиЧека_ПослеФормированияИсходящегоЗапроса", ЭтотОбъект, Контекст),
		ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ"),
		ВходныеПараметры,
		Контекст.ТранспортныйМодуль,
		Контекст.ОтображатьСообщения);
	
КонецПроцедуры

// Возвращает результат подписи чека в исходную процедуру.
//
Процедура ФормированиеПодписиЧека_ПослеФормированияИсходящегоЗапроса(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Контекст.Результат.ОписаниеОшибки = Результат.ОписаниеОшибки;
		ЗавершитьОперациюСОшибкой(Контекст.ОповещениеПриЗавершении, Контекст.ОтображатьСообщения, Контекст.Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат.Результат   = Истина;
	Контекст.Результат.АдресЧека   = Результат.ИдентификаторЗапроса;
	Контекст.Результат.ПодписьЧека = Результат.Подпись;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Результат);
	
КонецПроцедуры

// Передает в вызвавшую процедуру выбранную настройку обмена.
//
Процедура ВыборТранспортногоМодуля_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответы следующего элемента массива УТМ.
//
Процедура ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'ЕГАИС'"),
			"Ошибка",
			Результат.ОписаниеОшибки);
	Иначе
		Контекст.РезультатОбработкаОтветов.Добавить(Результат);
	КонецЕсли;
	
	Если Контекст.ТекущийИндекс = Контекст.СписокУТМ.ВГраница() Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.РезультатОбработкаОтветов);
	Иначе
		ТранспортныйМодуль = Контекст.СписокУТМ[Контекст.ТекущийИндекс + 1];
		Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
		
		НачатьОбработкуОтветов(
			Новый ОписаниеОповещения("ОбработкаОтветовПоРасписанию_ПослеОбработкиОтветовУТМ", ЭтотОбъект, Контекст),
			ТранспортныйМодуль,
			Ложь,,,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Записывает сообщения в журнал регистрации.
//
Процедура ОбработкаОтветовПоРасписанию_Завершение(РезультатОбработкаОтветов, ДополнительныеПараметры) Экспорт
	
	СтатусыДокументов = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из РезультатОбработкаОтветов Цикл
		
		Если Не ЭлементДанных.Результат Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументСсылка Из ЭлементДанных.ЗагруженныеДокументыСсылки Цикл
			СтатусыДокументов.Вставить(ДокументСсылка, Неопределено);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтатусыДокументов.Количество() > 0 Тогда
		СтатусыДокументов = ИнтеграцияЕГАИСВызовСервера.ПолучитьСтатусыДокументов(СтатусыДокументов);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтатусыДокументов Цикл
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",    КлючИЗначение.Значение.Ссылка);
		ПараметрОповещения.Вставить("Основание", КлючИЗначение.Значение.ДокументОснование);
		Оповестить("ИзменениеСостоянияЕГАИС", ПараметрОповещения);
		
	КонецЦикла;
	
	ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("СписокЗначений") ИЛИ ПараметрыПриложения[ИмяПараметра].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ПараметрыПриложения[ИмяПараметра]);
	
КонецПроцедуры

#Область Прочее

// Обрабатывает интерактивный выбор настройки обмена с УТМ.
//
// Параметры:
//  Результат - РегистрСведенийЗапись.НастройкиОбменаЕГАИС - выбранная настройка обмена,
//  ДополнительныеПараметры - Структура - данные, указанные при создании оповещения.
//
Процедура ТранспортныйМодульЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ТОгда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСВызовСервера.ТранспортныйМодуль(
		Результат.Контрагент,
		Результат.ТорговыйОбъект);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ТранспортныйМодуль);
	
КонецПроцедуры

// Начинает формирование исходящего запроса в ЕГАИС с переданными параметрами.
//
// Параметры:
//  Результат - Структура - параметры формирования запроса,
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ПередатьОтветЕГАИСПослеВопросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПринятьСРасхождениями = Ложь;
	Если ЗначениеЗаполнено(Результат) И Результат.Свойство("ПринятьСРасхождениями", ПринятьСРасхождениями) Тогда
		Если ПринятьСРасхождениями Тогда
			ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктРасхожденийТТН");
			ИнтеграцияЕГАИСВызовСервера.ЗаполнитьРасхожденияВДокументеТТНВходящая(ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС,Результат.ТаблицаРасхождений);
		Иначе
			ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН");
		КонецЕсли;
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
		ВходныеПараметры.ДокументСсылка = ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ПередатьОтветЕГАИСЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ВидДокумента,
			ВходныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Передает управление в исходный модуль после отправки запроса в ЕГАИС.
//
// Параметры:
//  ДанныеОтЕГАИС - Структура - результат формирования запроса (см. ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса()),
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ПередатьОтветЕГАИСЗавершение(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтЕГАИС = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеОтЕГАИС.Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Истина);
		Оповестить("ПереданОтветВ_ЕГАИС", ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС);
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Начинает отправку атка отказа от ТТН в ЕГАИС после подтверждения пользователя.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - ответ пользователя,
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ОтказатьсяОтДанныхЕГАИСПодтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН");
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ВходныеПараметры.ДокументСсылка = ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ОтказатьсяОтДанныхЕГАИСПодтверждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ВидДокумента,
		ВходныеПараметры);
	
КонецПроцедуры

// Отменяет проведение поступления товаров в случае успешной отправки акта отказа в ЕГАИС.
//
// Параметры:
//  ДанныеОтЕГАИС - Структура - результат формирования запроса (см. ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса()),
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ОтказатьсяОтДанныхЕГАИСПодтверждениеЗавершение(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтЕГАИС = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеОтЕГАИС.Результат Тогда
		
		ИнтеграцияЕГАИСВызовСервера.ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(
			ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Начинает отправку запроса на отмену проведения ТТН в ЕГАИС после подтверждения пользователя.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - ответ пользователя,
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ЗапроситьОтменуПроведенияПодтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН");
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ВходныеПараметры.ДокументСсылка = ДополнительныеПараметры.ТоварноТранспортнаяНакладнаяЕГАИС;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ЗапроситьОтменуПроведенияПодтверждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ВидДокумента,
		ВходныеПараметры);
	
КонецПроцедуры

// Передает управление в исходный модуль после отправки запроса в ЕГАИС.
//
// Параметры:
//  ДанныеОтЕГАИС - Структура - результат формирования запроса (см. ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса()),
//  ДополнительныеПараметры - Структура - произвольные параметры, указанные при создании оповещения.
//
Процедура ЗапроситьОтменуПроведенияПодтверждениеЗавершение(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтЕГАИС = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДанныеОтЕГАИС.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает входящие данные для подписи чека.
//
Функция ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, РезультатПодготовки)

	ВходящиеДанные = ИнтеграцияЕГАИСКлиентСервер.СтруктураЧекаЕГАИС();
	
	Если ТипЗнч(ПараметрыЧека) = Тип("Массив") Тогда
		ТаблицаТоваров = ПараметрыЧека[0];
		ШапкаЧека = ПараметрыЧека[2];
		
		Если ТаблицаТоваров.Количество() > 0 И ТаблицаТоваров[0].Количество() < 18 ИЛИ ШапкаЧека.Количество() < 21 Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		ВходящиеДанные.ИНН                  = ШапкаЧека[14];
		ВходящиеДанные.КПП                  = ШапкаЧека[17];
		ВходящиеДанные.АдресМагазина        = ШапкаЧека[19];
		ВходящиеДанные.НаименованиеМагазина = ШапкаЧека[18];
		ВходящиеДанные.ЗаводскойНомерККМ    = ШапкаЧека[20];
		ВходящиеДанные.НомерСменыККМ        = ШапкаЧека[8];
		ВходящиеДанные.НомерЧекаККМ         = ШапкаЧека[9];
		ВходящиеДанные.ДатаВремяЧека        = ШапкаЧека[11];
		ВходящиеДанные.Возврат              = ШапкаЧека[0] = 1;
		
	ИначеЕсли ТипЗнч(ПараметрыЧека) = Тип("Структура") Тогда
		ТаблицаТоваров = ПараметрыЧека.ПозицииЧека;
		
		ВходящиеДанные.ИНН                  = ПараметрыЧека.ОрганизацияИНН;
		ВходящиеДанные.КПП                  = ПараметрыЧека.ОрганизацияКПП;
		ВходящиеДанные.АдресМагазина        = ПараметрыЧека.АдресМагазина;
		ВходящиеДанные.НаименованиеМагазина = ПараметрыЧека.НаименованиеМагазина;
		ВходящиеДанные.ЗаводскойНомерККМ    = ПараметрыЧека.СерийныйНомер;
		ВходящиеДанные.НомерСменыККМ        = ПараметрыЧека.НомерСмены;
		ВходящиеДанные.НомерЧекаККМ         = ПараметрыЧека.НомерЧека;
		ВходящиеДанные.ДатаВремяЧека        = ПараметрыЧека.ДатаВремя;
		ВходящиеДанные.Возврат              = ПараметрыЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		
	КонецЕсли;
	
	Если ВходящиеДанные.НомерСменыККМ <= 0 Тогда
		ВходящиеДанные.НомерСменыККМ = 1;
	КонецЕсли;
	
	Если ВходящиеДанные.НомерЧекаККМ <= 0 Тогда
		ВходящиеДанные.НомерЧекаККМ = 1;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
			ПараметрыАлкогольнойПродукции = СтрокаТаблицы[17].Значение;
		Иначе
			ПараметрыАлкогольнойПродукции = СтрокаТаблицы.ПараметрыАлкогольнойПродукции;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыАлкогольнойПродукции) <> Тип("Массив") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если ПараметрыАлкогольнойПродукции.Количество() <> 0 Тогда
			
			Маркируемый = ПараметрыАлкогольнойПродукции[0];
			
			Если НЕ Маркируемый Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
				КоличествоСтрок = СтрокаТаблицы[5].Значение;
			Иначе
				КоличествоСтрок = СтрокаТаблицы.Количество;
			КонецЕсли;
			
			Для Сч = 1 По КоличествоСтрок Цикл
				СтрокаЧека = ИнтеграцияЕГАИСКлиентСервер.СтруктураСтрокиЧекаЕГАИС();
				Если ТипЗнч(СтрокаТаблицы) = Тип("СписокЗначений") Тогда
					СтрокаЧека.Номенклатура = СокрЛП(СтрокаТаблицы[0].Значение);
					
					Если СтрокаТаблицы[7].Значение = 0 Тогда
						СтрокаЧека.Цена = СтрокаТаблицы[4].Значение;
					ИначеЕсли СтрокаТаблицы[9].Значение = 0 Тогда
						СтрокаЧека.Цена = СтрокаТаблицы[4].Значение;
					Иначе
						СтрокаЧека.Цена = Окр(СтрокаТаблицы[9].Значение / СтрокаТаблицы[5].Значение, 2, 1);
					КонецЕсли;
					
					СтрокаЧека.Штрихкод = СтрокаТаблицы[1].Значение;
				Иначе
					СтрокаЧека.Номенклатура = СтрокаТаблицы.Наименование;
					СтрокаЧека.Цена = СтрокаТаблицы.Цена;
					СтрокаЧека.Штрихкод = СтрокаТаблицы.Штрихкод;
				КонецЕсли;
				
				Если ТипЗнч(ПараметрыАлкогольнойПродукции[1]) = Тип("Массив") Тогда
					СтрокаЧека.КодАкцизнойМарки = ?(ПараметрыАлкогольнойПродукции[1].ВГраница() < Сч - 1, "", ПараметрыАлкогольнойПродукции[1][Сч - 1]);
				ИначеЕсли ТипЗнч(ПараметрыАлкогольнойПродукции[1]) = Тип("Строка") И Сч = 1 Тогда
					СтрокаЧека.КодАкцизнойМарки = ПараметрыАлкогольнойПродукции[1];
				КонецЕсли;
				
				СтрокаЧека.Объем = ПараметрыАлкогольнойПродукции[2];
				
				ВходящиеДанные.ТаблицаТоваров.Добавить(СтрокаЧека);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПодготовки.Результат = Истина;
	
	Возврат ВходящиеДанные;

КонецФункции

#КонецОбласти

#КонецОбласти
