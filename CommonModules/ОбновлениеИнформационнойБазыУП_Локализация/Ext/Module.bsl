////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеПредприятием.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеПредприятиемДляБеларуси";
	Описание.Версия = Метаданные.Версия;
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик 			 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия; // При каждой смене версии УП
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВидыКонтактнойИнформации";

	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия    = Метаданные.Версия; // При каждой смене версии УП
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьПравилаПроверкиЭСЧФ";
	
	// 4D:ERP для Беларуси, Петр, 30.11.2017 14:51:51 
	// Редактировать виды выплат в поле "Выплачивать" в ведомостях, №16775
	// Редактировать начальное заполнение спр. "Тарифы платежных агентов", №16849
	// Релиз 2.2.4.93. Годовой вычет для вида дохода по подоходному налогу,  №16660
	// Реализовать заполнение справочника "Виды доходов по подоходному налогу" при обновлении конфигурации, №16941
	// Добавить предопределенные элементы в справочник "Виды ежегодных отпусков", № 16948
	// Спр. Виды вычетов по подоходному налогу, № 17173
	// {
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьСпособыВыплатыЗарплаты";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьТарифыПлатежныхАгентов";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВидыДоходовНДФЛ";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВычетыПоДоходамНДФЛ";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВидыОтпусков";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВидыВычетовНДФЛ";
	
	Обработчик  		 = Обработчики.Добавить();
	Обработчик.Версия 	 = Метаданные.Версия;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУП_Локализация.ОбновитьВидыДоговоровАвторскогоЗаказа";
	// }
	// 4D
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура ОбновитьВидыКонтактнойИнформации() Экспорт
	
	// 4D:ERP для Беларуси, ВладимирР, 14.04.2016 11:57:39 
	// Адресный классификатор, №10641
	// Пока отключаем механизм
	// { 
	ЭлементОбъект = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ЭлементОбъект.ХранитьИсториюИзменений = Ложь;
	ЭлементОбъект.Записать();
	// }
	// 4D
	
КонецПроцедуры

Процедура ОбновитьПравилаПроверкиЭСЧФ() Экспорт
	
	РегистрыСведений.ПравилаЗаполненияПолейЭСЧФ.ЗагрузитьПравилаИзМакета();
	
КонецПроцедуры

// 4D:ERP для Беларуси, Петр, 30.11.2017 14:51:51 
// Редактировать виды выплат в поле "Выплачивать" в ведомостях, №16775
// Редактировать начальное заполнение спр. "Тарифы платежных агентов", №16849
// Релиз 2.2.4.93. Годовой вычет для вида дохода по подоходному налогу,  №16660
// Спр. Виды вычетов по подоходному налогу, № 17173
// Реализовать заполнение справочника "Виды доходов по подоходному налогу" при обновлении конфигурации, №16941
// {
Процедура ОбновитьСпособыВыплатыЗарплаты() Экспорт

	Справочники.СпособыВыплатыЗарплаты.НачальноеЗаполнение();

КонецПроцедуры

Процедура ОбновитьТарифыПлатежныхАгентов() Экспорт

	Выборка = Справочники.ТарифыПлатежныхАгентов.Выбрать();
	
	ПрисутствиеБелпочта = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Наименование = "Белпочта" Тогда
			ПрисутствиеБелпочта = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПрисутствиеБелпочта Тогда
		Справочники.ТарифыПлатежныхАгентов.СоздатьТарифыПоНастройкам();
	КонецЕсли; 

КонецПроцедуры

Процедура ОбновитьВидыДоходовНДФЛ() Экспорт
	
	Справочники.ВидыДоходовНДФЛ.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура ОбновитьВидыВычетовНДФЛ() Экспорт
	
	Справочники.ВидыВычетовНДФЛ.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура ОбновитьВычетыПоДоходамНДФЛ() Экспорт

	РегистрыСведений.ВычетыПоДоходамНДФЛ.НачальноеЗаполнение();

КонецПроцедуры

Процедура ОбновитьВидыДоговоровАвторскогоЗаказа() Экспорт

	Справочники.ВидыДоговоровАвторскогоЗаказа.СоздатьПредопределенныеВидыДоговоров();

КонецПроцедуры
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 12.12.2017 13:15:36 
// Добавить предопределенные элементы в справочник "Виды ежегодных отпусков", № 16948
// {
Процедура ОбновитьВидыОтпусков() Экспорт

	Справочники.ВидыОтпусков.СоздатьВидыОтпусковПоНастройкам();

КонецПроцедуры
// }
// 4D

#КонецОбласти