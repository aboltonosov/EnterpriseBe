
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции регламентированных отчетов ФСРАР общего назначения:
// - для работы с формой длительной операции;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейсКомандыФормы

// Выполняет любую команду формы, вызывая нужную процедуру.
//
// Параметры:
//
// 		Форма		- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции. 
//					Опеределяет форму, команду кторой необходимо выполнить.
//
//		ИмяКоманды 	- Строка - Имя команды формы, которую надо выполнить.
//
Процедура ВыполнитьКомандуФормыПоИмениАЛКО(Форма, ИмяКоманды) Экспорт
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
		
		Если Форма.СписокОчередиДействий.Количество() > 3 Тогда
		    Форма.СписокОчередиДействий.Очистить();
			Форма.СтруктураРеквизитовФормы.ТекущееДействие = ИмяКоманды;
		Иначе
			Форма.СписокОчередиДействий.Добавить(ИмяКоманды);
			Возврат;				
		КонецЕсли; 
		
	Иначе
		Форма.СтруктураРеквизитовФормы.ТекущееДействие = ИмяКоманды;
	КонецЕсли;
	
	Если ИмяКоманды = "ПроверитьВыгрузку" Тогда
	    НачалоПроверкиВыгрузкиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда
	    НачалоВыгрузкиАЛКО(Форма);	
	ИначеЕсли ИмяКоманды = "ДобавитьСтраницу" Тогда
	    Форма.ДобавитьСтраницуНаСервере();
	ИначеЕсли ИмяКоманды = "ДобавитьВиноградник" Тогда	
		ДобавитьВиноградникАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "УдалитьСтраницу" Тогда
	    УдалитьСтраницуАЛКО(Форма);	
	ИначеЕсли ИмяКоманды = "УдалитьВсеСтраницы" Тогда
	    УдалитьВсеСтраницыАЛКО(Форма);	
	ИначеЕсли ИмяКоманды = "Заполнить" Тогда
	    ЗаполнитьАвтоАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ПечатьФайлZIP" Тогда
	    ПечатьФайлZIPВыборФорматаАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ПоказатьБланк" Тогда
	    ПоказатьБланкАЛКО(Форма);		
	ИначеЕсли ИмяКоманды = "ПересчитатьИтоги" Тогда
	    ПересчетИтогов_ДлительнаяОперация(Форма);
	ИначеЕсли ИмяКоманды = "ЗаписатьИЗакрыть" Тогда
		ЗаписатьИЗакрытьАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "СохранитьОтчет" Тогда
		СохранитьНаКлиентеАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОчиститьРегистрыОтМусора" Тогда
	    КомандаОчиститьРегистрыОтМусораАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ВосстановитьУдаленныеСтраницы" Тогда
	    КомандаВосстановитьУдаленныеСтраницыАЛКО(Форма);
		
	ИначеЕсли ИмяКоманды = "Обновить" Тогда
	    Форма.ОбновитьНаСервере();
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОчиститьТекущуюСтраницу" Тогда
	    ОчиститьТекущуюСтраницуАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОчиститьОтчет" Тогда
	    РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, "ОчиститьВесьОтчет");
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "Расшифровать" Тогда
	    РасшифроватьАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОткрытьФормуНастроек" Тогда	
		ОткрытьФормуНастроекАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "Просуммировать" Тогда	
		Форма.Просуммировать();
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);	
	
		
	Иначе
		// Сторонние обработчики.
		//
		Если ИмяКоманды = "ПроверитьВИнтернете" Тогда
			Форма.ПроверитьВИнтернете("");
		ИначеЕсли ИмяКоманды = "ВыгрузитьПакет" Тогда
	    	Форма.ВыгрузитьПакет("");
		ИначеЕсли ИмяКоманды = "ОтправитьВКонтролирующийОрган" Тогда
	    	Форма.ОтправитьВКонтролирующийОрган("");
		ИначеЕсли ИмяКоманды = "ОбновитьОтправку" Тогда
	    	Форма.ОбновитьОтправку("");
		ИначеЕсли ИмяКоманды = "ОтправитьНеотправленноеИзвещение" Тогда
	    	Форма.ОтправитьНеотправленноеИзвещение("");
			
		// Загрузка.
		ИначеЕсли ИмяКоманды = "Загрузить" Тогда
		    Форма.ЗагрузитьИзФайла("");
			
		// Не найдена команда.
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Выполняет действие из списка очереди действий формы.
//
// Параметры:
//
// 		Форма		- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
Процедура ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма) Экспорт

	Если НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
	    Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";	
	КонецЕсли;
	
	Если Форма.СписокОчередиДействий.Количество() > 0 Тогда
	
		ДействиеИзОчереди = Форма.СписокОчередиДействий[0].Значение;
		Форма.СписокОчередиДействий.Удалить(0);
		ВыполнитьКомандуФормыПоИмениАЛКО(Форма, ДействиеИзОчереди);
	
	КонецЕсли; 
	
КонецПроцедуры

// Начинает процесс сохранения отчета.
//
// Параметры:
//
// 		Форма					- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Автосохранение 			- Булево - Признак включенного режима автосахранения отчета. 
//								На практике признак всегда выключен.
//
//		ВыполняемоеОповещение 	- ОписаниеОповещения - Оповещение, которое необходимо выполнить после завершения процесса
//								сохранения отчета.
//
Процедура СохранитьНаКлиентеАЛКО(Форма, Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Форма.РезультатСохранения = Ложь;
	
	Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	
	КодИФНС = "";
	КПП = "";
	
	Если НЕ ВыполняемоеОповещение = Неопределено Тогда		
		Форма.УниверсальноеОписаниеОповещения = ВыполняемоеОповещение;		
	КонецЕсли;
		
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	МожноСохранять = Ложь;
	
	// Подготовка параметров для ПередСохранением().
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Вставить("Вариант", Вариант);
	СтруктураПараметров.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", 
								ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Вставить("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
	СтруктураПараметров.Вставить("НаимТекРаздела", Форма.ТекущийРаздел);
	
	Форма.ПередСохранениемНаСервере(СтруктураПараметров);
	
	// Извлекаем обратно.
	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", 
								ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Свойство("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	СтруктураПараметров.Свойство("НаимТекРаздела", Форма.ТекущийРаздел);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
		
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Форма.РезультатСохранения = Ложь;
	Если НуженВопросПередСохранением Тогда		
		СохранитьСВопросомАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, 
									ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, 
									ПодобныйОтчетСуществует, КодИФНС, КПП); 		
	ИначеЕсли МожноСохранять Тогда						
		РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, , Форма.ТекущийРаздел, ВыполняемоеОповещение);		
	Иначе		
		ПослеСохраненияАЛКО(Форма);		
	КонецЕсли;
	
КонецПроцедуры

// Очищает все разделы отчета.
//
// Параметры:
//
// 		Форма					- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ВыполняемоеОповещение 	- ОписаниеОповещения - Оповещение, которое необходимо выполнить после завершения процесса
//								очистки отчета.
//
//		ЗадаватьВопросПередОчисткой	- Булево - Признак интерактивности очистки. 
//
//      ТекстВопроса				- Строка - Текст вопроса, выдаваемого пользователю при включенной интерактивной очистке.
//
Процедура ОчиститьОтчетАЛКО(Форма, 
				ВыполняемоеОповещение = Неопределено, ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт
	
	Если ЗадаватьВопросПередОчисткой Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Будут очищены все разделы отчета.
				 					|Продолжить?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		Форма.ОчиститьНаСервере();
				
		// Устанавливаем флаг модифицированности формы и выполняем оповещение, если есть.
		Форма.Модифицированность = Истина;
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийФормы

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции процедура обработки оповещения.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ИмяСобытия		- Строка. Имя события. Может быть использовано для идентификации сообщений принимающими их формами.
//
//		Параметр		- Произвольный тип - Параметр сообщения. Могут быть переданы любые необходимые данные.
//
//		Источник		- Произвольный тип - Источник события. Например, в качестве источника может быть указана другая форма.
//
Процедура ОбработкаОповещенияАЛКО(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = Форма.УникальностьФормы Тогда
		
		Если НРег(ИмяСобытия) = НРег("АктивацияДеактивация") Тогда			
		    Форма.АктивацияДеактивация();			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ПриАктивизацииСтрокиНаКлиенте") Тогда			
		    ПриАктивизацииСтрокиАЛКО(Форма);			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ОткрытиеСтраницы") Тогда			
		    ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма);			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ОтменаОперации") Тогда
					    
			Если Форма.ОтменитьФоновоеЗаданиеНаСервере(Форма.СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда
				
				Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте");
				
				ОтменаДлительнойОперацииАЛКО(Форма);
				
			КонецЕсли; 
						
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ОтменаОперацииПриОшибке") Тогда
			
			ОтменаДлительнойОперацииАЛКО(Форма);
										
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ПересчетИтогов") Тогда
			
			// Произошли изменения в формах редактирования записей регистров - строк таблицы,
			// и эти изменения уже записаны в регистры.	
			ИнформацияДляПересчетаИтогов = Параметр;
			
			Если (Форма.ТекущееСостояние =  "Копирование") или (Форма.ТекущееСостояние =  "Добавление") Тогда
				
				РегламентированнаяОтчетностьАЛКОКлиентСервер.УвеличитьКоличествоСтрокПоТекущейСтранице(
							Форма, Форма.ТекущийИдГруппы, Форма.НомерАктивнойСтраницыМногострочногоРаздела, Форма.КоличествоСтрок);
							
				Форма.ТекущееСостояние =  "";
				
			КонецЕсли;
		
			Форма.ПересчитатьТекущиеИтогиНаСервере(ИнформацияДляПересчетаИтогов);
			
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ПоказыватьПредупреждениеПослеПереходаПоСсылке") Тогда	
		    Форма.ПоказыватьПредупреждениеПослеПереходаПоСсылке = Ложь;			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ОткрытаФормаЗаписиРегистра") Тогда	
		    Форма.ФормаЗаписиРегистра = Параметр;			
		КонецЕсли;
		
		Если НРег(ИмяСобытия) = НРег("ЗакрытаФормаЗаписиРегистра") Тогда
			
		    Форма.ФормаЗаписиРегистра = Неопределено;
			
			Если    (Форма.ТекущееСостояние = "Копирование") или (Форма.ТекущееСостояние =  "Добавление") 
				или (Форма.ТекущееСостояние = "Редактирование") Тогда		        				
				Форма.ТекущееСостояние =  "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// обработчик события ПриОткрытии.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Отказ			- Булево. Если Истина, дальнейшее открытие формы прекращается.
//
Процедура ПриОткрытииАЛКО(Форма, Отказ) Экспорт
		
	Форма.ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();	
	
	Форма.ПоказыватьПредупреждениеПослеПереходаПоСсылке = Истина;
	
	// Зафиксируем текущую строку форм 1С-Отчетность и Управление Отчетностью.
	ТекДокумент = ЗафиксироватьТекущийДокументУправляющейФормы();
	
	Форма.СтруктураРеквизитовФормы.Вставить("ДокУправляющейФормыПередОткрытием", ТекДокумент);
	
	ВыполнитьПроверкуПередОткрытиемАЛКО(Форма);
		
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередЗакрытием.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Отказ			- Булево. Если Истина, закрытие формы отменяется.
//
//		ЗавершениеРаботы 	- Булево. В данный параметр передается признак того, что форма закрывается 
//							в процессе завершения работы приложения:
//							Истина - если в процессе завершения приложения; Ложь - если закрывается только форма.
//
//		ТекстПредупреждения - Строка. 
//							Если параметру <Отказ> установлено значение Истина и <ТекстПредупреждения> содержит непустую строку, то:
//
//							если <Завершение работы> установлено в Истина, окно сообщения со строкой текста предупреждения 
//							будет выведено на экран и пользователю будет предложено на выбор - остаться или 
//							покинуть окно без сохранения изменений.
//
//							если <Завершение работы> установлено в Ложь, текст предупреждения игнорируется и 
//							процесс закрытия формы прерывается.
//
//							Если параметру <Отказ> установлено значение Истина и <ТекстПредупреждения> содержит пустую строку, то:
//
//							если <Завершение работы> установлено в Истина, пользователю будет отображно окно с общим 
//							текстом "Работа в данном окне не завершена" и будет предложено остаться или покинуть окно 
//							без сохранения изменений. 
//
//							если <Завершение работы> установлено в Ложь, то значение параметра <ТекстПредупреждения> будет 
//							проигнорировано, и процесс закрытия формы будет прерван.
//
//							Если параметру <Отказ> установлено значение Ложь, то 
//							значение параметра <ТекстПредупреждения> будет проигнорировано, и процесс закрытия формы будет продолжен.
//
// Примечание: В браузере Mozilla Firefox окно сообщения не будет содержать текста предупреждения. 
//
Процедура ПередЗакрытиемАЛКО(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт 
	
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
	    // Поскольку для нормальной работы Отчет должен быть сохранен хотя бы раз,
		// попадание в процедуру ПередЗакрытием с несохраненным отчетом означает отказ от сохранения.
		Возврат;	
	КонецЕсли;
		 
	ПередЗакрытиемРегламентированногоОтчетаАЛКО(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения); 
	
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриЗакрытии.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ЗавершениеРаботы 	- Булево. В данный параметр передается признак того, что форма закрывается 
//							в процессе завершения работы приложения:
//							Истина - если в процессе завершения приложения; Ложь - если закрывается только форма.
//
Процедура ПриЗакрытииАЛКО(Форма, ЗавершениеРаботы) Экспорт
	
	Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
		// Идет завершение работы системы.		
		Возврат;
		
	КонецЕсли;
	
	Форма.ПриЗакрытииНаСервере();
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийТаблицаРазделыОтчета

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриАктивизацииСтроки таблицы ТаблицаРазделыОтчета,
// устанавливается как обработчик события в ВыполнитьПереходНаСтраницуРазделаАЛКО()
// и остается обработчиком до момента завершения перехода на страницу отчета.
//
// Заменяется на "нормальный" обработчик РазделыОтчетаПриАктивизацииСтрокиАЛКО() 
// в случае если СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие
// пуст при выходе из процедуры ВыполнитьПереходНаСтраницуРазделаАЛКО().
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент 		- Элемент формы ТаблицаРазделыОтчета. 
//
Процедура РазделыОтчетаПокаИдетОткрытиеПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт
	
	Если  Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета  Тогда
		Возврат;
	КонецЕсли;
			
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
		
	Форма.ЭтоРазделОтчета = (ТекущийРодитель = Неопределено);
	
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Форма.ТекущийРаздел = ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Если Форма.ЭтоРазделОтчета Тогда
	    Форма.ТекущееИмяРаздела = ТекущиеДанные.КолонкаРазделыОтчета;
	Иначе	
	    Форма.ТекущееИмяРаздела = ТекущийРодитель.КолонкаРазделыОтчета;		 
	КонецЕсли; 
			
	// Определим одна страница или несколько.
	Форма.ОднаСтраницаВРазделе = Ложь;
	
	Если Форма.ЭтоРазделОтчета Тогда
		
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
			Форма.ОднаСтраницаВРазделе = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущийРодитель.ПолучитьЭлементы().Количество() = 1 Тогда
		Форма.ОднаСтраницаВРазделе = Истина;
	КонецЕсли;	
	
	
		
	// Определим индекс страницы.
	ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
														        ИЛИ ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 
																1, ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	НомерСтраницы = ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
	
	// Заполняем параметры для дальнейшего использования в ВыполнитьПереходНаСтраницуРаздела().
	ПараметрыПереходаНаСтраницуРаздела = Новый Структура;
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ПоказатьПоИндексуПриВыводеСтраницы", Истина);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НомерСтраницыПриВыводеСтраницы", НомерСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НаименованиеРазделаПриВыводеСтраницы", Форма.ТекущийРаздел);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭлементПриВыводеСтраницы", Элемент);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоРазделОтчетаПриВыводеСтраницы", Форма.ЭтоРазделОтчета);
	
	Если Форма.УказываютсяНомераЛицензии Тогда
		Форма.ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельностьАЛКО(Форма);
		ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы", Форма.ЭтоЛицензируемаяДеятельность);
	КонецЕсли;
	
	// Список необходим для ситуации быстрого "щелканья" по страницам раздела, 
	// чтобы предотвратить падение платформы - отслеживаем такие быстрые "щелчки" 
	// и выводим лишь последнюю выбранную страницу.
	Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Вставить(0, ПараметрыПереходаНаСтраницуРаздела);
	
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриАктивизацииСтроки таблицы ТаблицаРазделыОтчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент 		- Элемент формы ТаблицаРазделыОтчета. 
//
Процедура РазделыОтчетаПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт
	
	Если  Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ( Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета ) 
		и (НЕ ( Форма.ТекущееСостояние =  "Активизация" или Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела" ) ) Тогда
		Возврат;
	КонецЕсли;
		
	Если (Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета)
		и (Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела") Тогда
		
		// Проверяем наличие таблицы - РазделыОтчетаПриАктивизацииСтроки вызывается несколько раз,
		// в том числе до вывода ТаблицыФормы.
		ИмяАктивизируемогоРаздела = Форма.ЯчейкаАктивизации.Раздел;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
											ИмяАктивизируемогоРаздела, Форма.СтруктураРеквизитовФормы);
		ИмяТаблицыФормыАктивизируемогоРаздела = "ТаблицаФормыРаздела" + ИдГруппы;
		
		Если Форма.Элементы.Найти(ИмяТаблицыФормыАктивизируемогоРаздела) = Неопределено Тогда
		    // Еще рано.
			Возврат;						 
		КонецЕсли; 
		
		// Уже выполнен переход на нужную страницу многострочного раздела.
		Форма.ТекущееСостояние =  "";
		АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО(Форма);
		
		// Для предотвращения повторного перехода на страницу раздела, уходим.
		Возврат;
		
	КонецЕсли;
			
	Если (Элемент.ТекущаяСтрока <> Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета) 
		и (Форма.ТекущееСостояние =  "Активизация") Тогда
		// Меняем состояние для обработки после перехода на страницу Раздела.
	    Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела";	
	КонецЕсли; 
			
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
		
	Форма.ЭтоРазделОтчета = (ТекущийРодитель = Неопределено);
	
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Форма.ТекущийРаздел = ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел) Тогда
	
		// Первичное открытие, обрабатывать нечего.
		Возврат;
	
	КонецЕсли;
	
	Если Форма.ЭтоРазделОтчета Тогда
	    Форма.ТекущееИмяРаздела = ТекущиеДанные.КолонкаРазделыОтчета;
	Иначе	
	    Форма.ТекущееИмяРаздела = ТекущийРодитель.КолонкаРазделыОтчета;		 
	КонецЕсли; 
			
	// Определим одна страница или несколько.
	Форма.ОднаСтраницаВРазделе = Ложь;
	
	Если Форма.ЭтоРазделОтчета Тогда
		
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
			Форма.ОднаСтраницаВРазделе = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущийРодитель.ПолучитьЭлементы().Количество() = 1 Тогда
		Форма.ОднаСтраницаВРазделе = Истина;
	КонецЕсли;	
	
		
	// Определим индекс страницы.
	ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
														        ИЛИ ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 
																1, ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	НомерСтраницы = ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
	
	// Заполняем параметры для дальнейшего использования в ВыполнитьПереходНаСтраницуРаздела().
	ПараметрыПереходаНаСтраницуРаздела = Новый Структура;
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ПоказатьПоИндексуПриВыводеСтраницы", Истина);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НомерСтраницыПриВыводеСтраницы", НомерСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НаименованиеРазделаПриВыводеСтраницы", Форма.ТекущийРаздел);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭлементПриВыводеСтраницы", Элемент);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоРазделОтчетаПриВыводеСтраницы", Форма.ЭтоРазделОтчета);
	
	Если Форма.УказываютсяНомераЛицензии Тогда
		Форма.ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельностьАЛКО(Форма);
		ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы", Форма.ЭтоЛицензируемаяДеятельность);
	КонецЕсли;
	
	// Список необходим для ситуации быстрого "щелканья" по страницам раздела, 
	// чтобы предотвратить падение платформы - отслеживаем такие быстрые "щелчки" 
	// и выводим лишь последнюю выбранную страницу.
	Форма.СписокПараметровПереходаНаСтраницуРаздела.Вставить(0, ПараметрыПереходаНаСтраницуРаздела);
			
	// Нельзя использовать серверные методы. 				
	Оповестить("ОткрытиеСтраницы", , Форма.УникальностьФормы);	
					
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийТаблицыМногострочногоРаздела

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Выбор таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		ВыбраннаяСтрока, Поле, СтандартнаяОбработка - описание соответствует
//		параметрам обработчика действия Выбор таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаВыборАЛКО(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	// Отрабатываем ситуацию двойного клика на колонке отбора.
	ИмяПоля = Поле.Имя;
		
	Если ИмяПоля = "Активно" + Форма.ТекущийИдГруппы Тогда
		 
		СтандартнаяОбработка = Ложь;
				
		Форма.АктивныйЭлементТаблицы = Элемент;
		// Нельзя использовать серверные методы. 				
		Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);
				
	    Возврат;
		
	КонецЕсли; 
	
	Форма.ТекущееСостояние =  "Редактирование";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Активно Тогда
	    // Строка выключена из отбора, соответственно в итогах не участвует.
		// И меняется не поле активности (пометка на удаление).
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередУдалением таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		Отказ - описание соответствует
//		параметрам обработчика действия ПередУдалением таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаПередУдалениемАЛКО(Форма, Элемент, Отказ = Истина) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Отказ = Истина;
			
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
				
	// Отмена удаления.
	Форма.АктивныйЭлементТаблицы = Элемент;
	// Нельзя использовать серверные методы. 				
	Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);
																		
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередНачаломДобавления таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		Отказ, Копирование, Родитель, ЭтоГруппа, Параметр - описание соответствует
//		параметрам обработчика действия ПередНачаломДобавления таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаПередНачаломДобавленияАЛКО(Форма, Элемент, Отказ, Копирование, 
																Родитель, ЭтоГруппа, Параметр) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент); 
			
	Форма.ТекущееСостояние = ?(Копирование, "Копирование", "Добавление");
		
	// Добавляем строку в конец, если Копирование - копируем.
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
			
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
Процедура ТаблицаФормыРазделаПриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Форма.АктивныйЭлементТаблицы = Элемент;
					
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриАктивизацииСтроки таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
Процедура ТаблицаФормыРазделаПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт
	
	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);
	
	Форма.АктивныйЭлементТаблицы = Элемент;
	// Нельзя использовать серверные методы. 				
	Оповестить("ПриАктивизацииСтрокиНаКлиенте", , Форма.УникальностьФормы);
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсТитульный

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении поля НомерКорректировки Титульного листа отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы НомерКорректировки.
//
Процедура НомерКорректировкиПриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, "НомКорр", "НомерКорректировки");	
		
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Форма.НомерКорректировки = 0, 0, 1);
		
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Нажатие поля гиперссылки МестоОсуществленияДеятельности.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
Процедура МестоОсуществленияДеятельностиНажатиеАЛКО(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
		
	// Читаем сохраненную во внутреннем представлении структуру.
	СохраненныеДанныеАдреса = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;
	
	ЗаголовокФормыВвода = "Ввод адреса местонахождения";
	ВидКонтактнойИнформации = Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации;
	Оповещение = Новый ОписаниеОповещения("МестоОсуществленияДеятельностиНажатиеЗавершениеАЛКО", ЭтотОбъект, Форма);
	
	ВызватьФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса, ЗаголовокФормыВвода, Оповещение, ВидКонтактнойИнформации);
	
КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении поля ДатаПодписи Титульного листа отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы ДатаПодписи.
//
Процедура ДатаПодписиПриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	ЭлементИзменен = ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, "ДатаПодписи", "ДатаПодписи");
	Если ЭлементИзменен Тогда
	    Форма.ОбновитьНаСервере(Истина);		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет измененное значение полей титульного листа в данных отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
//		ИмяВСтруктуреДанныхТитульный 	- Строка. Имя поля структуры СтруктураДанныхТитульный, в значении
//										которого сохраняется значение элемента.
//		ИмяРеквизитаФормы				- Строка. Имя реквизита формы, источника данных для элемента.
//
Функция ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, ИмяВСтруктуреДанныхТитульный, ИмяРеквизитаФормы) Экспорт
	
	ЭлементИзменен = Ложь;
	
	Если Форма.СтруктураДанныхТитульный.Свойство(ИмяВСтруктуреДанныхТитульный) Тогда
		
	    Если Форма.СтруктураДанныхТитульный.ЭлектроннаяПочта <> Форма[ИмяРеквизитаФормы] Тогда
		
			Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
			Форма.Модифицированность = Истина;
		    ЭлементИзменен = Истина;
			
		КонецЕсли; 
		
	Иначе
		
		Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
		Форма.Модифицированность = Истина;
		ЭлементИзменен = Истина;
		
	КонецЕсли; 
	
	Возврат ЭлементИзменен;
	
КонецФункции

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Нажатие полей гиперссылок заполняемых по данным
// Организации - декларанта отчета, расположенных на Титульном листе отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
//		СтандартнаяОбработка -  описание соответствует
//		параметрам обработчика действия Нажатие поля управляемой формы.
//
Процедура ОрганизацияОткрытиеАЛКО(Форма, Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОрганизации = Новый Структура("Ключ", Форма.ОрганизацияОтчета);
	
	Оповещение = Новый ОписаниеОповещения("ОрганизацияОткрытиеЗавершениеАЛКО", ЭтотОбъект, Форма);

	ФормаСправочникаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыОрганизации, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
	ЭлементУправления = Неопределено;

	Если НЕ Элемент = Неопределено Тогда
	
		ИмяЭлемента = Элемент.Имя;
				
		Если (ИмяЭлемента = "ИНН") или (ИмяЭлемента = "КПП") Тогда
			
			Если Форма.ЭтоПБОЮЛ Тогда
			    ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("ИННИП");		
			КонецЕсли;
			
			Если ЭлементУправления = Неопределено Тогда
			    ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);		
			КонецЕсли; 
		    		
		ИначеЕсли ИмяЭлемента = "ЭлектронныйАдресОрганизации" Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеEmailОрганизации");
					
		ИначеЕсли ИмяЭлемента = "ПолныйАдресТелефон" Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеЮрАдресОрганизации");
			
		ИначеЕсли (ИмяЭлемента = "Руководитель") или (ИмяЭлемента = "ГлавныйБухгалтер") Тогда
			
			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);
			
		КонецЕсли;	
	
	КонецЕсли; 
	
	
	Если ЭлементУправления <> Неопределено Тогда
	    ФормаСправочникаОрганизации.ТекущийЭлемент = ЭлементУправления;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсЛицензии

Процедура ДеятельностьПоЛицензииНачалоВыбораАЛКО(Форма, ДанныеВыбора = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВыборДеятельностиПоЛицензииАЛКО(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсМногостраничныйРаздел

Процедура ПриИзмененииВиноградныхДанныхАЛКО(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	// Для этой группы имя элемента совпадает с именем реквизита формы.
	
	АктивнаяСтраница = Форма.ТаблицаСтраницыДекларация[Форма.НомерАктивнойСтраницыМногострочногоРаздела];
	АктивныеДанные = АктивнаяСтраница.Данные[0].Значение;
	
	Если АктивныеДанные.Свойство(ИмяЭлемента) Тогда
		
	    Если АктивныеДанные[ИмяЭлемента] <> Форма[ИмяЭлемента] Тогда		
			Форма.Модифицированность = Истина;		
		КонецЕсли; 
		
	Иначе
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	АктивныеДанные.Вставить(ИмяЭлемента, Форма[ИмяЭлемента]);
	
	
	// Расчет урожайности.
	Если ИмяЭлемента = "П000010000303" или ИмяЭлемента = "П000010000301" Тогда
	
		Если Форма["П000010000301"] > 0 Тогда	
			Форма["П000010000302"] = Форма["П000010000303"] / Форма["П000010000301"];		
		Иначе
			Форма["П000010000302"] = 0;
		КонецЕсли;	
		
		АктивныеДанные.Вставить("П000010000301", Форма["П000010000301"]);
		АктивныеДанные.Вставить("П000010000302", Форма["П000010000302"]);
		АктивныеДанные.Вставить("П000010000303", Форма["П000010000303"]);
		
	КонецЕсли; 
	
	АктивнаяСтраница.Данные[0].Пометка = НЕ АктивнаяСтраница.Данные[0].Пометка;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеНажатиеАЛКО(Форма, Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВводРеквизитовОП_АЛКО(Форма);
	
КонецПроцедуры

Процедура ФлагГоловногоОППриИзмененииАЛКО(Форма, Элемент) Экспорт
	
	Форма.Модифицированность = Истина;
	
	Раздел = Форма.ТекущийРаздел;
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;	
	
	ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;	
	Форма[ИмяНомерСтраницыФлагГоловногоОП] = ?(Форма.ФлагГоловногоОП, ИндексСтраницы + 1, 0);
	
	ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
	ТаблицаСтраницРаздела[ИндексСтраницы].ФлагГоловногоОП = Форма.ФлагГоловногоОП;
	
	Если Форма.ФлагГоловногоОП Тогда
	    Форма.ЗаполнитьОПРеквизитамиОрганизации(Раздел, ИндексСтраницы);	
	КонецЕсли; 

	ЗаголовокОП_ИП = Неопределено;
	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда
		ЗаголовокОП_ИП = "Сведения по месту 
						 |нахождения виноградника";
	КонецЕсли;
	
	Форма.УстановитьВидимостьРазделов(Раздел, ИндексСтраницы, ЗаголовокОП_ИП);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсДлительнойОперации

// Возвращает значение перечисления подсистемы ОтчетностьПоАлкогольнойПродукции ВидыДлительныхОперацийРегламентированныхОтчетов
//
// Параметры:
//		ЗначениеПеречисления				- Строка - Имя значения перечисления.
//		
// Возвращаемое значение:
//		Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов
//
Функция ПолучитьПеречислениеВидыДлительныхОперацийРеглОтчетов(ЗначениеПеречисления) Экспорт

	СтрокаПеречисления = "Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов";
	Возврат ПредопределенноеЗначение(СтрокаПеречисления + "." + ЗначениеПеречисления);

КонецФункции

Процедура ВыполнитьДлительнуюОперациюАЛКО(Форма, ВидДлОперации, ВидПечати = Неопределено, 
													ФормаВлФормыДлитОперации = Неопределено) Экспорт
	
	Если Форма.ВладелецФормыДлитОпер = Неопределено Тогда
	
		Если (ФормаВлФормыДлитОперации = Неопределено) и Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы  Тогда
			ФормаВлФормыДлитОперации = ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(Форма);
		ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы  Тогда
			ФормаВлФормыДлитОперации = Форма;		
		КонецЕсли;
		
		Форма.ВладелецФормыДлитОпер = ФормаВлФормыДлитОперации;
	
	КонецЕсли;	
		
	ДлОперВосстановление = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	Если  (НЕ ВидДлОперации = ДлОперВосстановление)
		и Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		
		Форма.ВосстановитьДанныеБезОткрытияФормыНаСервере();
					    		
	КонецЕсли; 
		
	// Предварительная проверка на подключение к 1С-отчетности для некоторых видов операций.
	ВидДлОперацииОтправка 				= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПроверкаВИнтернете 	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииВыгрузкаПакета		 	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	
	Если (ВидДлОперации = ВидДлОперацииОтправка) или (ВидДлОперации = ВидДлОперацииВыгрузкаПакета) Тогда
		
		// Проверка подключения к 1С-отчетности и ФСРАР.
		ОрганизацияПодключена = ПроверитьПодключениеОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Ложь);
		
		Если НЕ ОрганизацияПодключена.ФСРАР Тогда
		    Возврат;	
		КонецЕсли;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда	
	    // Проверка подключения к 1С-отчетности.
		ОрганизацияПодключена = ПроверитьПодключениеОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Истина);
		
		Если НЕ ОрганизацияПодключена.Отчетность Тогда
		    Возврат;	
		КонецЕсли;
		
	КонецЕсли; 
		
	Если НЕ ВидПечати = Неопределено Тогда
		
		Если ВидПечати <> "ПечатьФайлZIP" Тогда
		
			// Нужно убедиться, что отчет не слишком большой.
			КолСтрокВОтчете = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма, Истина);
			
			Если КолСтрокВОтчете > 20000 Тогда
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, "Да");
				Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
				
				ТекстВопроса = НСтр("ru='Слишком большой отчет для печати с показом бланка.
										|Продолжить в режиме печати в выбранном формате в ZIP архив?'");
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПродолжитьПечатьФайлZIPЗавершениеАЛКО", ЭтотОбъект, Форма);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			НужноВыбратьФормат = Ложь;
			
			Если НЕ Форма.СтруктураРеквизитовФормы.Свойство("ТипЭкспорта") Тогда
			    НужноВыбратьФормат = Истина;
			ИначеЕсли Форма.СтруктураРеквизитовФормы.ТипЭкспорта = Неопределено Тогда	
			    НужноВыбратьФормат = Истина;
			КонецЕсли; 
			
			Если НужноВыбратьФормат Тогда
			
				ПечатьФайлZIPВыборФорматаАЛКО(Форма);
			    Возврат;	
			
			КонецЕсли; 
			
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	ВыполнитьДлительнуюОперациюПродолжениеАЛКО(Форма, ВидДлОперации, ВидПечати);
		
КонецПроцедуры

Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииАЛКО(Форма) Экспорт
	
	ОперацияЗавершена = ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(Форма);
	
	Если ОперацияЗавершена Тогда
		
	    Возврат;
		
	КонецЕсли;
	
	Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал * Форма.ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал > Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", 
										Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры	

// Закрывает форму длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
//
Процедура ВыключитьЗаставкуДлительнойОперации(ФормаОтчета) Экспорт
	
	ВыполняетсяДлительнаяОперация = Ложь;
	
	СтруктураНастроекФормыДлительнойОперации = Новый Структура;
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	
	УправлениеФормойДлительнойОперации(ФормаОтчета,СтруктураНастроекФормыДлительнойОперации);
	
КонецПроцедуры 

// Проверяет выполнение длительной операции и в случае завершения вызывает из 
// модуля формы отчета ПослеВыполненияДлительнойОперацииНаКлиенте(), в противном случае
// читает информацию переданную из длительной операции и отображает ее в форме 
// длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена.
//
Функция ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчета) Экспорт

	Отладка = Истина;
	
	Если ФормаОтчета = Неопределено Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Попытка
		
		Если ФормаОтчета.ОтменаОперации Тогда
		    ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);
			Возврат Истина;		
		КонецЕсли; 
		
		ИдентификаторЗадания = ФормаОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания;
		СообщениеОбОшибке = Неопределено;
		
		Если РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда 
			
			АдресРезультата = ФормаОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
			
			ЕстьОшибка = Ложь;
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				
				ЕстьОшибка = Истина;
				
			ИначеЕсли НЕ РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьКорректностьЗавершения(АдресРезультата) Тогда				
				
				ЕстьОшибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить длительную операцию " + ФормаОтчета.ВидДлительнойОперации + ".'");
				
			КонецЕсли;
			
			Если ЕстьОшибка Тогда
				
				ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);
				
				ПослеВыполненияДлительнойОперацииПриОшибкеАЛКО(ФормаОтчета, СообщениеОбОшибке);
				
			Иначе
				ПослеВыполненияДлительнойОперацииАЛКО(ФормаОтчета);
			КонецЕсли; 
						
			Возврат Истина;
			
		Иначе
						
			// Обновляем информацию в форме длительной операции.
			
			Информация = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторЗадания);
			
			Если ТипЗнч(Информация) = Тип("Структура") Тогда
				
				Если НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда
					ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Истина;									    				
				КонецЕсли; 
				
				// Передача структуры информации через ДопПараметры.
				СтруктураИнформации = Информация.ДополнительныеПараметры;
				
				СообщениеИзФоновойЗадачи = Неопределено;
				Если СтруктураИнформации.Свойство("СообщениеПользователю") и Отладка Тогда
				    СообщениеИзФоновойЗадачи = Строка(СтруктураИнформации.СообщениеПользователю);				
				КонецЕсли; 
								
				СообщениеПользователю = ?(ЗначениеЗаполнено(ФормаОтчета.СообщениеПользователю), ФормаОтчета.СообщениеПользователю, "");  
									
				ВидимостьПроцентов = Ложь;
				Если СтруктураИнформации.Свойство("ВидимостьПроцентаВыполненияОперации") Тогда
				    ВидимостьПроцентов = СтруктураИнформации.ВидимостьПроцентаВыполненияОперации;				
				КонецЕсли;
				
				ПроцентВыполнения = 0;
				Если СтруктураИнформации.Свойство("ПроцентВыполненияОперации") Тогда
				    ПроцентВыполнения = СтруктураИнформации.ПроцентВыполненияОперации;				
				КонецЕсли;
				
				СтруктураНастроекФормыДлительнойОперации = Новый Структура;
				
				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ДопСообщениеПользователю", СообщениеИзФоновойЗадачи);				
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ПроцентВыполненияОперации", ПроцентВыполнения);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);
	
				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
														
			ИначеЕсли НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда
														
				// По вспомогательному адресу ничего не лежит,										
				// значит работа фоновой задачи еще  не началась.
				СообщениеПользователю = "Выполняются другие фоновые задачи,
										|необходимо дождаться их завершения.";
										
				СтруктураНастроекФормыДлительнойОперации = Новый Структура;
				
				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);				
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);
	
				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
				
			КонецЕсли;
									
			Возврат Ложь;
				
		КонецЕсли;
		
	Исключение
				
		ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);		
				
		ВызватьИсключение;
		
		Возврат Истина;
		
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область АктивизироватьПолеЯчейкуИзФормыОшибок

Процедура АктивизироватьЯчейкуАЛКО(Форма, Ячейка) Экспорт
	
	// Если идет длительная операция - ничего не делаем.
	Если НЕ Форма.ФормаДлительнойОперации = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'При выполнении длительной операции переход из формы сообщений об ошибках невозможен!'");
		Сообщение.Сообщить();
	    Возврат;
		
	КонецЕсли;
	
	// Если открыта внешняя форма редактирования реквизитов ОП - надо ее закрыть.
	Оповестить("ЗакрытьОткрытыеФормы", , Форма.УникальностьФормы);
	
	Форма.ТекущееСостояние =  "АктивизацияЯчейки";
	Форма.СтруктураРеквизитовФормы.Вставить("Ячейка", Ячейка);
	Форма.ЯчейкаАктивизации = Ячейка;
	
	Если Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Неопределено Тогда		
		Возврат;		
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.Удалить("Ячейка");
	
	// Закрываем внешние формы редактирования записей регистров.
	Если НЕ Форма.ФормаЗаписиРегистра = Неопределено Тогда
	
		Оповестить("ЗакрытьОткрытыеФормыЗаписи", , Форма.УникальностьФормы);
		// Небольшая задержка, чтобы успели отработать обработчики таблицы формы после закрытия 
		// формы редактирования записей регистров.
		АктивизироватьЯчейкуСЗадержкойАЛКО(Форма);
	Иначе
		АктивизироватьЯчейкуПослеЗакрытияОткрытыхФормАЛКО(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура АктивизироватьПолеАктивнойСтраницыАЛКО(Форма) Экспорт
					
	Если Форма.НомерСтрокиАктивизации = Неопределено Тогда
	
		// Без указания строки.
		Форма.ТекущийЭлемент = Форма.Элементы[Форма.ИмяЯчейкиАктивизации];
		ТекущийЭлемент = Форма.ТекущийЭлемент;
		
		Если Форма.ВходВРедактированиеПриАктивизации Тогда
			
			Если ТекущийЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			    Если ТекущийЭлемент.Гиперссылка Тогда
					
					ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "Нажатие");
					
					Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда					
						Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
						ВыполнитьОбработкуОповещения(Оповещение);
					КонецЕсли;				
				
				КонецЕсли;
				
			ИначеЕсли ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда	
				Если ТекущийЭлемент.КнопкаВыбора <> Неопределено Тогда
					Если ТекущийЭлемент.КнопкаВыбора Тогда
					
						ИмяПроцедурыНачалоВыбора = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "НачалоВыбора");						
						
						Если ЗначениеЗаполнено(ИмяПроцедурыНачалоВыбора) Тогда					
							Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНачалоВыбора, Форма.ЭтотОбъект);
							ВыполнитьОбработкуОповещения(Оповещение);
						КонецЕсли;
					
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;		
		
		Форма.ТекущееСостояние =  "";
		
	Иначе
		
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
								Форма.ЯчейкаАктивизации.Раздел, Форма.СтруктураРеквизитовФормы);
								
		// Для многострочных групп, в том случае, если их несколько в разделе, 
		// надо вычислять ИдГруппы по имени ИмяЯчейкиАктивизации.
			
		ИмяТаблицы = "";
											
	    СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(
													Форма.ЯчейкаАктивизации.Раздел, Форма.СтруктураРеквизитовФормы);
		Если СписокИдГрупп.Количество() > 1 Тогда
			 
			Для каждого ЭлементСписка Из СписокИдГрупп Цикл
								 
				Если СтрНайти(Форма.ИмяЯчейкиАктивизации, ЭлементСписка.Значение) > 0 Тогда
				
					ИдГруппы = ЭлементСписка.Значение;
					ИмяТаблицы = ЭлементСписка.Представление;
					
					// Нужно активизировать нужную страницу.
					Форма.Элементы["СтраницыТаблиц" + Форма.ЯчейкаАктивизации.Раздел].ТекущаяСтраница = Форма.Элементы["СтраницаТаблицы" + ИмяТаблицы];
					Прервать;
				
				КонецЕсли; 
			
			КонецЦикла;	
		
		КонецЕсли;
							
		Форма.ТекущееСостояние =  "АктивизацияЯчейкиТаблицы";
			
		ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, Форма.НомерСтрокиАктивизации, Форма.ИмяКолонкиАктивизации);	
			
	КонецЕсли;
		
КонецПроцедуры

Процедура АктивизироватьЯчейкуПослеЗакрытияОткрытыхФормАЛКО(Форма) Экспорт
	
	Ячейка = Форма.ЯчейкаАктивизации;
	
	// Гарантируем нужный обработчик.
	Действие = "ПриАктивизацииСтроки";
	ИмяПроцедурыДействия = "РазделыОтчетаПриАктивизацииСтроки";
	Форма.УстановитьДействиеТаблицыРазделыОтчетаНаСервере(Действие, ИмяПроцедурыДействия);
	
	// Структура Ячейка:
	// Раздел, Страница, Строка, Графа, СтрокаПП, ИмяЯчейки, Описание.
	Если Ячейка.Свойство("ИмяЯчейки") Тогда
	    Форма.ИмяЯчейкиАктивизации = Ячейка.ИмяЯчейки;
	Иначе	
	    Форма.ИмяЯчейкиАктивизации = "";
	КонецЕсли; 
		
	// Активизируем нужную строку элементы.РазделыОтчета.
	ДеревоРазделыОтчета = Форма.РазделыОтчета;
	КоллекцияЭлементовДереваРазделыОтчета = ДеревоРазделыОтчета.ПолучитьЭлементы();
	КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел;
	ЭлементДереваРаздел =  РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(КоллекцияЭлементовДереваРазделыОтчета, 
												"КолонкаРазделыОтчетаСокрНаим", КолонкаРазделыОтчетаСокрНаим);
	Если Ячейка.Раздел = "Титульный" Тогда
				
		// Чтобы не отработал ПриАктивизацииСтроки() Таблицы разделов, заранее присваем нужное значение
		// в СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета.										
		Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = ЭлементДереваРаздел.ПолучитьИдентификатор();
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета;
		
		Форма.ТекущийРаздел = "Титульный";
		
		Форма.Элементы.ГруппаТаблицы.Видимость = Ложь;
		
		Если Форма.УказываютсяНомераЛицензии Тогда
		    Форма.Элементы.СтраницаОтчетаЛицензии.Видимость = Ложь;			
		КонецЕсли; 
		
		Форма.Элементы.СтраницаОтчетаМногострочная.Видимость = Ложь;
		
		Форма.Элементы.СтраницаОтчетаТитульный.Видимость = Истина;
		
		Форма.Элементы.Обновить.Доступность = Истина;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
		
		// Для ошибок генерируемых при проверке формата готового XML выгрузки,
		// указывается раздел Титульный, но более никакой информации нет.
		// Поэтому нужно проверять заполнение.
		Если ЗначениеЗаполнено(Форма.ИмяЯчейкиАктивизации) Тогда
		
			Форма.ТекущийЭлемент = Форма.Элементы[Форма.ИмяЯчейкиАктивизации];
			ТекущийЭлемент = Форма.ТекущийЭлемент;
			
			Если Форма.ВходВРедактированиеПриАктивизации Тогда
				
				Если ТекущийЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
					
				    Если ТекущийЭлемент.Гиперссылка Тогда
						
						ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "Нажатие");
						
						Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда
							
							Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
							ВыполнитьОбработкуОповещения(Оповещение);
							
						КонецЕсли;				
					
					КонецЕсли;
					
				ИначеЕсли ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
					
					Если ТекущийЭлемент.КнопкаВыбора <> Неопределено Тогда
						
						Если ТекущийЭлемент.КнопкаВыбора Тогда
						
							ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "НачалоВыбора");						
							
							Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда
								
								Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
								ВыполнитьОбработкуОповещения(Оповещение);
								
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли; 
		
		Форма.ТекущееСостояние =  "";
		
	Иначе	
	    // Многостраничные разделы.		
		
		Форма.ЯчейкаАктивизации = Ячейка;
		
		КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница);		
		
		ЭлементСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ЭлементДереваРаздел.ПолучитьЭлементы(), 
												"КолонкаНомерСтраницыРазделаОтчета", КолонкаНомерСтраницыРазделаОтчета);
				
		РазделыОтчетаНоваяТекущаяСтрока = ЭлементСтраницыРаздела.ПолучитьИдентификатор();
		
		// Получим данные для активизации.
	    Форма.ИмяКолонкиАктивизации = Неопределено;
		Форма.НомерСтрокиАктивизации = Неопределено;
		
		Если ЗначениеЗаполнено(Форма.ИмяЯчейкиАктивизации) Тогда
		
			// В имени ячейки указана информация вида П0001000312_4,
			// где П0001000312 - имя колонки, 4- номер строки.
			ПозицияПодчеркивания = СтрНайти(Форма.ИмяЯчейкиАктивизации, "_");
			
			Если ПозицияПодчеркивания > 0 Тогда
				
				// Есть информация по строке.
				Форма.ИмяКолонкиАктивизации = Лев(Форма.ИмяЯчейкиАктивизации, ПозицияПодчеркивания - 1);
				Форма.НомерСтрокиАктивизации = Число(Сред(Форма.ИмяЯчейкиАктивизации, ПозицияПодчеркивания + 1));
			    			
			КонецЕсли;	
					
		КонецЕсли;
						
		Если Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = РазделыОтчетаНоваяТекущаяСтрока Тогда
			
			// Отчет уже открыт на нужной странице,
			// нужно заставить открыть эту страницу еще раз, чтобы не зависеть от отбора по поиску,
			// поскольку если он активизирован, нужной строки может не быть в текущем выводе строк.
			// Поскольку при открытии таблица формы создается заново - тем самым гарантируем наличие всех строк.
			
			// Меняем текущую строку таблицы разделов отчета на Титульный лист.			
			ЭлементДереваРазделов =  РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(КоллекцияЭлементовДереваРазделыОтчета, 
												"КолонкаРазделыОтчетаСокрНаим", "Титульный"); 
												
			// Чтобы не отработал ПриАктивизацииСтроки() Таблицы разделов при активизации строчки Титульного листа, 
			// заранее присваем нужное значение в СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета.									
			Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = ЭлементДереваРазделов.ПолучитьИдентификатор();			
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета;
						
		КонецЕсли;
		
		Форма.ТекущееСостояние =  "Активизация";
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = РазделыОтчетаНоваяТекущаяСтрока;
						 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводАдреснойИнформации

Процедура ВызватьФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса, Заголовок, 
				ОповещениеПослеЗавершенияВвода, ВидКонтактнойИнформации = Неопределено) Экспорт

	Если НЕ ТипЗнч(СохраненныеДанныеАдреса) = Тип("Структура") Тогда
	
		ВызватьИсключение НСтр("ru = 'В процедуру РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВводаАдресаАЛКО 
									|передан неверный параметр СохраненныеДанныеАдреса, параметр должен быть структурой.'");
	
	КонецЕсли;
	
	Если ВидКонтактнойИнформации = Неопределено Тогда
	    ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации");	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
	    Заголовок = "Ввод адреса";	
	КонецЕсли;
	
	ЗначенияПолей = ПолучитьЗначенияПолейДляПередачиВФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",     Заголовок);
	ПараметрыФормы.Вставить("ЗначенияПолей", ЗначенияПолей);
	
	ПредставлениеАдреса = ""; Представление = "";
	Если СохраненныеДанныеАдреса.Свойство("ПредставлениеАдреса", Представление)
		И ЗначениеЗаполнено(Представление) Тогда
		
	    ПредставлениеАдреса = Представление;
		
	ИначеЕсли СохраненныеДанныеАдреса.Свойство("Представление", Представление)
		И ЗначениеЗаполнено(Представление) Тогда
		
	    ПредставлениеАдреса = Представление;
		
	ИначеЕсли СохраненныеДанныеАдреса.Свойство("Адрес", Представление)
		И ЗначениеЗаполнено(Представление) Тогда
		
	    ПредставлениеАдреса = Представление;
		
	КонецЕсли; 
	ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , ОповещениеПослеЗавершенияВвода);

КонецПроцедуры
 
#КонецОбласти

#Область ВыборЗначений

Процедура ВызватьФормуВыбораЗначенийАЛКО(Форма, ФлажокОтклАвтоВыборКодов, СтруктураПараметров, ОписаниеОповещения) Экспорт

	Перем Параметры;
	
	Если НЕ ФлажокОтклАвтоВыборКодов Тогда
		
		Если НЕ СтруктураПараметров.Свойство("ПараметрыПриВключенномВыбореИзСписка", Параметры) Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваПоказателей = Параметры.СвойстваПоказателей;
		ИмяКолонкиКод 		= Параметры.ИмяКолонкиКод;
		КолонкаПоиска 		= Параметры.КолонкаПоиска;
		ИсходноеЗначение 	= Параметры.ИсходноеЗначение;
				
		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяКолонкиКод));
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			
			ПараметрВводаПоля = Неопределено;
			
			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(ИмяКолонкиКод, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			ТекстВыбора   = ПараметрВводаПоля.ТекстПриВыборе;
			ТаблицаВыбора = ПараметрВводаПоля.ТаблицаЗначений;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
		ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, Форма,,,,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если НЕ СтруктураПараметров.Свойство("ПараметрыПриОтключенномВыбореИзСписка", Параметры) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы",          		Параметры.ЗаголовокФормы);
		ПараметрыФормы.Вставить("Код",          				Параметры.ИсходноеЗначениеКода);
		ПараметрыФормы.Вставить("Название",          			Параметры.ИсходноеЗначениеПоКоду);
		ПараметрыФормы.Вставить("ИмяПоляЗначение",          	Параметры.НадписьПоляЗначения);
		ПараметрыФормы.Вставить("ИмяПоляКод",          			Параметры.НадписьПоляКод);
		ПараметрыФормы.Вставить("МногострочныйРежимЗначения",	Параметры.МногострочныйРежимЗначения);
		ПараметрыФормы.Вставить("ДлинаПоляКода",          		Параметры.ДлинаПоляКода);
		ПараметрыФормы.Вставить("ДлинаПоляЗначения",       		Параметры.ДлинаПоляЗначения);
		ПараметрыФормы.Вставить("УникальностьФормы",       		Параметры.УникальностьФормы);
		
		
		ОткрытьФорму("ОбщаяФорма.АЛКОФормаВводаПарыСвязанныхЗначений", ПараметрыФормы, Форма,,,, 
							ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбщие

// Выполняет процедуру формы с указанной задержкой, если форма не открыта - осуществляется попытка
// выполнить без задержки.
// Полезна, когда небольшая задержка необходима для выполнения кода после синхронизации Клиент-Сервер,
// это актуально для Веб-Клиента.
// Кроме того, поскольку в некоторых обработчиках запрещено использовать серверные методы, с помощью этой
// процедуры легко реализовать вызов серверного метода из такого обработчика, но с небольшой задержкой.
//
// Параметры:
//		Форма					- Управляемая форма - Форма, в контексте которой будет выполняться процедура.
//		ИмяПроцедуры			- Строка - Имя процедуры Формы, которую надо выполнить. 
//								Процедура должна не иметь параметров.
//		Таймаут					- Число - Необязательный. Интервал времени в секундах с точностью до 1/10 секунды, 
//								через который будет осуществляться вызов процедуры (положительное число). 
//								Если передан 0, тогда сначала производится попытка определения таймаута по 
//								экспортной клиентской переменной или реквизиту Формы ВремяЗадержки.
//								
//
Процедура ВыполнитьСЗадержкой(Форма, ИмяПроцедуры, Таймаут = 0, 
							ОбъектОповещения = Неопределено, ИмяПроцедурыОповещения = Неопределено)

	Если НЕ ( ТипЗнч(Форма) = Тип("УправляемаяФорма") ) Тогда
	    Возврат;	
	КонецЕсли;
	
	Если Таймаут = 0 Тогда		
		Таймаут = Форма.ВремяЗадержки;		
	КонецЕсли;
	
	Задержка = ?(Таймаут < 0.1, 0.1, Таймаут);
		
	Если ЗначениеЗаполнено(ИмяПроцедуры) и (ТипЗнч(ИмяПроцедуры) = Тип("Строка")) Тогда
		
		БезЗадержки = Ложь;
		Если Форма.Открыта() Тогда
		    Форма.ПодключитьОбработчикОжидания(ИмяПроцедуры, Задержка, Истина);
		Иначе
			
			БезОткрытияФормы = Неопределено;
			Форма.СтруктураРеквизитовФормы.Свойство("мБезОткрытияФормы", БезОткрытияФормы);
			// Форма.Открыта() для открытой формы не всегда Истина, 
			// если еще работают клиентские методы при открытии-инициализации.
			Если ТипЗнч(БезОткрытияФормы) = Тип("Булево") Тогда
			
				Если НЕ БезОткрытияФормы Тогда
		    		Форма.ПодключитьОбработчикОжидания(ИмяПроцедуры, Задержка, Истина);
				Иначе
					БезЗадержки = Истина;
				КонецЕсли;	
			
			КонецЕсли; 
							
		КонецЕсли;	
					
	    Если БезЗадержки Тогда
		
			// При закрытой форме ПодключитьОбработчикОжидания() не отрабатывает корректно
			// выполним без задержки.
		    Если ЗначениеЗаполнено(ИмяПроцедурыОповещения)  Тогда
			
				Если ОбъектОповещения = Неопределено Тогда				
					// По умолчанию считаем объектом форму.
					ОбъектОповещения = Форма.ЭтотОбъект;				
				КонецЕсли;
				
				// В качестве дополнительных параметров передаем форму.
				Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ОбъектОповещения, Форма);
				ВыполнитьОбработкуОповещения(Оповещение);
			
			КонецЕсли; 
			
		КонецЕсли;		    
		
	КонецЕсли;

КонецПроцедуры

// Проверяет подключение организации к 1С-Отчетности и к сдаче на портале ФСРАР.
// В случае не подключения к 1С-отчетности - выдаются стандартная форма-предложение оформить Заявление на подключение.
// В случае не подключения к порталу ФСРАР - выдается предупреждение. 
//
// Параметры:
//		ОрганизацияОтчета 	- Справочник.Организации.Ссылка - Организация, подключение которой проверяется.
//		ТолькоОтчетность	- Булево - Необязательный. 
//							Если Истина, проверяется подключение только к 1С- отчетности. 
//							Ложь - проверяется подключение и к 1С-отчетности и к ФСРАР.
//		
// Возвращаемое значение:
// 		Структура, со свойствами
// 			* ФСРАР 		- Булево, Истина, если организация подключена к сдаче отчетности в ФСРАР.
// 			* Отчетность 	- Булево, Истина, если организация подключена к сдаче отчетности в 1С-Отчетности.
//
Функция ПроверитьПодключениеОрганизации(ОрганизацияОтчета, ТолькоОтчетность = Ложь)

	Подключение = РегламентированнаяОтчетностьАЛКОВызовСервера.ОрганизацияПодключенаК1СОтчетностиИкФСРАР(ОрганизацияОтчета);
	
	Если НЕ Подключение.Отчетность Тогда
	    // Выдаем стандартное приглашение.
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(ОрганизацияОтчета);
	ИначеЕсли (НЕ Подключение.ФСРАР) и (НЕ ТолькоОтчетность) Тогда	
	    ПоказатьПредупреждение(,НСтр("ru = 'По организации отчета не включена возможность электронного документооборота с Росалкогольрегулированием!'"));
	КонецЕсли;
	
	Возврат Подключение;

КонецФункции

Функция ПолучитьЗначенияПолейДляПередачиВФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса)

	ЗначенияПолей = Неопределено;
	
	// Читаем сохраненную во внутреннем представлении структуру.
	АдресXML = "";
	Если СохраненныеДанныеАдреса.Свойство("АдресXML") Тогда
	    АдресXML = СохраненныеДанныеАдреса.АдресXML;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресXML) Тогда
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда
		    ЗначенияПолей = АдресXML;						
		КонецЕсли;	     
	КонецЕсли;
	
	Если ЗначенияПолей = Неопределено Тогда	
	
        // Если был сохранен в предыдущем варианте хранения.
		ЗначенияПолей = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтруктураВСписокЗначений(СохраненныеДанныеАдреса);
		
	КонецЕсли;
	
	Возврат ЗначенияПолей;

КонецФункции

#КонецОбласти

#Область СлужебныеПриОткрытии

Процедура ВыполнитьПроверкуПередОткрытиемАЛКО(Форма)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершениеАЛКО", ЭтотОбъект, Форма);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
		
КонецПроцедуры

Процедура ПриОткрытииЗавершениеАЛКО(Отказ, Форма) Экспорт
		
	Если Отказ Тогда
		// Проверка онлайн блокировки показала, что открывать нельзя.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьСЗадержкой(Форма, "ОткрытьОтчетНаКлиенте", 0.2, 
								ЭтотОбъект, "ОткрытьОтчетАЛКОИзОповещения");
		
КонецПроцедуры

Процедура ОткрытьОтчетАЛКО(Форма) Экспорт
	
	Форма.СписокПараметровПереходаНаСтраницуРаздела 					= Новый СписокЗначений;
	Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие 	= Новый СписокЗначений;
	
	КоэфОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 1);		
	Форма.ВремяЗадержки = ?(Форма.ЭтоВебКлиент, 0.3, 0.1);	
	Форма.ВремяЗадержки = Форма.ВремяЗадержки * КоэфОжидания;
	
	Если Форма.ЭтоНовыйДокумент Тогда
		// Создание нового отчета или копирование.		
		КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, Форма.мДеревоВыбранныхСтраниц);
		Форма.ОкончаниеИнициализацииНаСервере();
				
	КонецЕсли;
		
	Если Форма.НужноСкопировать Тогда
		
		// Идет процесс копирования отчета. 
		// Сначала необходимо сохранить отчет, 
		// чтобы можно было привязать записи регистров сведений к документу отчета.
		Оповещение = Новый ОписаниеОповещения("ВосстановитьДанныеТаблицПриКопированииАЛКО", ЭтотОбъект, Форма);
	    СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
		
	ИначеЕсли Форма.НужноЗаполнитьАвто Тогда
		
		// Автозаполнение отчета после создания.
		// Сначала необходимо сохранить отчет, 
		// чтобы можно было привязать записи регистров сведений к документу отчета.
		// Данный режим на данный момент не используется, автозаполнение только по кнопке Заполнить.
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоПриСозданииОтчетаАЛКО", ЭтотОбъект, Форма);
	    СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
		
	ИначеЕсли Форма.НужноСохранить Тогда
		
		// Требуется сохранить отчет перед открытием.
		СохранитьНаКлиентеАЛКО(Форма);
		
	ИначеЕсли Форма.НужноВосстановитьДанные Тогда
		
		// Нормальное открытие - запускается восстановление данных регистров,
		// с последующим восстановлением данных отчета.
	    ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма);
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОткрытьОтчетАЛКОИзОповещения(Результат, Форма) Экспорт

	ОткрытьОтчетАЛКО(Форма);

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеЗакрытие

Процедура ПередЗакрытиемРегламентированногоОтчетаАЛКО(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения)
	
	Если Форма.Модифицированность Тогда
		
		Отказ = Истина;
		
		Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
			
			// Идет завершение работы системы.
			ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
				|Перед завершением работы рекомендуется записать отчет, иначе измененные данные будут утеряны.'");			
			
			Возврат;
			
		КонецЕсли;
				
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершениеАЛКО", ЭтотОбъект, Форма);
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	Иначе
		// Нормальное закрытие.
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершениеАЛКО(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершениеАЛКО", ЭтотОбъект, Форма);
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
				
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершениеАЛКО(Результат, Форма) Экспорт
	Форма.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытийТаблицМногострочныхРазделов

Процедура ПриАктивизацииСтрокиАЛКО(Форма)
		 
	Элемент = Форма.АктивныйЭлементТаблицы;
	
    Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
														Раздел, Форма.СтруктураРеквизитовФормы);
						
	Форма.ТекущийИдГруппы  = ИдГруппы;
	Форма.ТекущийРаздел	 = Раздел;
	
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если НЕ (Форма.ТекущееСостояние =  "АктивизацияЯчейки" 
		или Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела" 
		или Форма.ТекущееСостояние =  "Активизация") Тогда
			
		Если Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Количество() > 0 Тогда

			// На случай если успели выбрать страницу, пока открывалась страница.
			// Поскольку открытие идет с небольшой задержкой такая ситуация возможна.
			// Отказаться от задержки проблематично - не всегда успевают синхронизироваться 
			// данные Клиент-Сервер, особенно в случае Веб-клиента.
			Форма.СписокПараметровПереходаНаСтраницуРаздела = Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Скопировать();
			Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Очистить();
			ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма);
			
		Иначе
						
			Действие = "ПриАктивизацииСтроки";
			ИмяПроцедурыДействия = "РазделыОтчетаПриАктивизацииСтроки";
			Форма.УстановитьДействиеТаблицыРазделыОтчетаНаСервере(Действие, ИмяПроцедурыДействия);
			
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			
		КонецЕсли;
						
	КонецЕсли;
	
	Если ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаТаблицы Тогда
	    
		Возврат;
		
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаТаблицы = ТекущаяСтрока;
		
	Если ТекущаяСтрока <> Неопределено Тогда	
		Форма.ТекущийНомерСтрокиТаблицыФормы = ТекущиеДанные.ИндексСтроки;		
	Иначе
		Форма.ТекущийНомерСтрокиТаблицыФормы = 0;				
	КонецЕсли; 
			 
КонецПроцедуры 

Процедура ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент)
	
	ИмяТаблицы = Элемент.Имя;
	
	ИдГруппы = СтрЗаменить(ИмяТаблицы, "ТаблицаФормыРаздела", "");
	
    Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
									
	Форма.ТекущийИдГруппы  = ИдГруппы;
	Форма.ТекущийРаздел	 = Раздел;
		
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
															Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФормаДлительнойОперации

// Открывает форму длительной операции с настройками, зависящими от типа длительной операции.
//
// Параметры:
//		ФормаОтчета					- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		ВидДлОперации				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ИдентификаторЗадания		- Строка - 	УникальныйИдентификатор - Идентификатор фонового задания, процесс
//									выполнения которого показывает форма длительной операции.
//
Процедура ПоказатьФормуДлительнойОперации(ФормаОтчета, ВидДлОперации, ИдентификаторЗадания)
	
	ВидДлОперацииВосстановление 	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	ВидДлОперацииВыгрузка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПересчет 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВидДлОперацииПечать 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВидДлОперацииПечатьВАрхив 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив");
	ВидДлОперацииПроверка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииСохранение 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	ВидДлОперацииАвтоЗаполнение		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВидДлОперацииОчисткаОтМусора	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВидДлОперацииСкопироватьТекущиеРегистры	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВидДлОперацииУдалениеДокументаОтчета	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета");
	
	ВыполняетсяДлительнаяОперация = Истина;
	
	Если ВидДлОперации = ВидДлОперацииВосстановление Тогда
		
		ВидимостьПроцентов = Ложь;
		// Режим длительной операции включается только при копировании отчетов
		// или при импорте данных отчета из старого формата.
		СообщениеПользователю = "Копируются данные отчета";		
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда
		
		ВидимостьПроцентов = Ложь;
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		СообщениеПользователю = "Копируются данные отчета";		
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для портала ФСРАР.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для отправки в ФСРАР.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПересчет Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Пересчитываются строки таблиц Разделов отчета.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПечать
		или   ВидДлОперации = ВидДлОперацииПечатьВАрхив Тогда
		
		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Формируются печатные листы отчета.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверка Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Проверяется возможность выгрузки отчета.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Выгружается отчет для проверки в Интернете.";		 
		ДоступностьКнОтмена = Истина;
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииСохранение Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Сохраняются данные отчета.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииАвтоЗаполнение Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Идет заполнение отчета по данным информационной базы.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОчисткаОтМусора Тогда
		
	    ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Идет очистка регистров отчета от ненужной информации.";		 
		ДоступностьКнОтмена = Истина;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииУдалениеДокументаОтчета Тогда
		
		ВидимостьПроцентов = Ложь;
	 	СообщениеПользователю = "Идет очистка регистров от записей удаляемого временного отчета.";		 
		ДоступностьКнОтмена = Истина;
			
	КонецЕсли;
	
	ФормаОтчета.СообщениеПользователю = СообщениеПользователю;
	ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Ложь;
	
	СтруктураНастроекФормыДлительнойОперации = Новый Структура;
	
	СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	
	УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);
	
КонецПроцедуры

Процедура НайтиУправляющиеФормы(Форма1СОтчетность, ФормаУправлениеОтчетностью)

	Форма1СОтчетность = Неопределено;
	ФормаУправлениеОтчетностью = Неопределено;
	
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				
				Если Найти(ИмяТекФормы, ".УправлениеОтчетностью") > 0 Тогда				
					ФормаУправлениеОтчетностью = ТекФорма;
				ИначеЕсли Найти(ИмяТекФормы, ".РегламентированнаяОтчетность") > 0 Тогда
					Форма1СОтчетность = ТекФорма;
				КонецЕсли;
				
				Если (НЕ Форма1СОтчетность = Неопределено) и (НЕ ФормаУправлениеОтчетностью = Неопределено) Тогда
				
					// Все нашли.
					Прервать;
				
				КонецЕсли; 
					
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла;

КонецПроцедуры
 
Функция ЗафиксироватьТекущийДокументУправляющейФормы()

	Форма1СОтчетность = Неопределено;
	ФормаУправлениеОтчетностью = Неопределено;
	
	НайтиУправляющиеФормы(Форма1СОтчетность, ФормаУправлениеОтчетностью);
	
	ТекДокумент = Неопределено;
	
	// Приоритет у формы 1С-Отчетность.
	Если НЕ Форма1СОтчетность = Неопределено Тогда
	
		ТаблицаОтчетов = Форма1СОтчетность.Элементы.Найти("Отчеты");
		Если НЕ ТаблицаОтчетов = Неопределено Тогда
			
			Если НЕ ТаблицаОтчетов.ТекущиеДанные = Неопределено Тогда
			    ТекДокумент = ТаблицаОтчетов.ТекущиеДанные.РегламентированныйОтчет;
			Иначе	
			    ТекДокумент = Неопределено;
			КонецЕсли; 
					
		КонецЕсли; 
	
	КонецЕсли;
	
	Если ТекДокумент = Неопределено И (НЕ ФормаУправлениеОтчетностью = Неопределено) Тогда
	
		ТаблицаЖурналОтчетов = ФормаУправлениеОтчетностью.Элементы.Найти("ЖурналОтчетов");
		Если НЕ ТаблицаЖурналОтчетов = Неопределено Тогда
			
			Если НЕ ТаблицаЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
			    ТекДокумент = ТаблицаЖурналОтчетов.ТекущиеДанные.Ссылка;
			Иначе	
			    ТекДокумент = Неопределено;
			КонецЕсли;
								
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ТекДокумент;

КонецФункции

// Обновляет списки отчетов открытых форм.
// Необходимо при удалении временных отчетов, чтобы в списке не отображались
// уже удаленные отчеты.
//
Процедура ОбновитьФормыСоСпискомОтчетов(ДокОтчета = Неопределено)
	
	// Смотрим текущий документ управляющей формы.
	ТекДок = ЗафиксироватьТекущийДокументУправляющейФормы();
		
	// Поэтому ищем среди открытых окон 1С-отчетность или Управление отчетностью 
	// или любые другие с элементами ЖурналОтчетов и Отчеты и обновляем.
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				
				ТаблицаОтчетов = ТекФорма.Элементы.Найти("Отчеты");
				ТаблицаЖурналОтчетов = ТекФорма.Элементы.Найти("ЖурналОтчетов");
				
				Если НЕ ТаблицаЖурналОтчетов = Неопределено Тогда					
					ТаблицаЖурналОтчетов.Обновить();					
				КонецЕсли;
								
				Если НЕ ТаблицаОтчетов = Неопределено Тогда					
					ТаблицаОтчетов.Обновить();					
				КонецЕсли; 
					
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла;
	
	Если НЕ ДокОтчета = Неопределено Тогда
		
		// Смотрим текущий документ управляющей формы.
		ТекДок = ЗафиксироватьТекущийДокументУправляющейФормы();
		ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ТекДок);
		
		Если НЕ ОписаниеРегОтчета = Неопределено Тогда
			
			// Раз строка реальная, вернем курсор на нее, 
			// ведь пользователь после открытия, создания, копирования отчета
			// мог переключаться в 1С-Отчетность и щелкать строки.
			
			// Оповещаем формы 1С-Отчетность и Управление отчетностью.
			
			ИмяСобытия = "Позиционирование в списке отчетов";
			Параметр = Новый Структура;
			Параметр.Вставить("Организация", ОписаниеРегОтчета.Организация);
			Параметр.Вставить("Ссылка", ТекДок);
		    Оповестить(ИмяСобытия, Параметр);	
			
		Иначе
			
			// Управляющая форма была спозиционирована на несуществующем уже отчете.
			// Возвращаем все как было до открытия отчета.
			
			ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокОтчета);
			
			// Оповещаем формы 1С-Отчетность и Управление отчетностью.
			
			Если НЕ ОписаниеРегОтчета = Неопределено Тогда
			
				ИмяСобытия = "Позиционирование в списке отчетов";
				Параметр = Новый Структура;
				Параметр.Вставить("Организация", ОписаниеРегОтчета.Организация);
				Параметр.Вставить("Ссылка", ДокОтчета);
			    Оповестить(ИмяСобытия, Параметр);	
			
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

// Определяет форму-владелец для формы длительной операции отчета.
// Поскольку длительные операции реализованы как при открытой, так и при закрытой форме отчета,
// при показе формы длительной операции необходимо определить форму-владелец для нее,
// в том случае, если она неизвестна.
// Приоритет при этом имеет ОбщаяФорма.РегламентированнаяОтчетность.
//
// Параметры:
// 		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которого показывается.
//
// Возвращаемое значение:
// 		Управляемая форма.
//
Функция ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета)

	Если ФормаОтчета.Открыта() Тогда
	
		Возврат ФормаОтчета;
	
	КонецЕсли; 
	
	// определяем форму текущего активного окна	
		
	// Помимо 1С отчетности может быть открыто что-то еще и 
	// и пользователь в ожидании завершения длительной операции
	// может переключиться.
	// Поэтому ищем среди открытых окон 1С-отчетность или Управление отчетностью.
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				
				Если ВРег(ИмяТекФормы) = ВРег("ОбщаяФорма.РегламентированнаяОтчетность") Тогда
				    // это форма 1С-отчетность
					Возврат ТекФорма;
					
				ИначеЕсли СтрНайти(ВРег(ИмяТекФормы), ВРег("УправлениеОтчетностью")) > 0 Тогда
					// это форма Управление отчетностью
					Возврат ТекФорма;				
				
				КонецЕсли; 
			
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции 

// Открывает, закрывает форму длительной операции с переданными настройками, 
// или передает в открытую форму длительной операции новые настройки отображения.
//
// Параметры:
//	 ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//	 СтруктураНастроекФормыДлительнойОперации - Структура, содержит свойства:
//
//	 	* СообщениеПользователю 				- Строка - Необязательный. Основное сообщение, выводимое в форме 
//												длительной операции.
// 		* ДопСообщениеПользователю 				- Строка - Необязательный. Дополнительное сообщение, выводимое после основного, 
//												с новой строки.
// 		* ДоступностьКнОтмена					- Булево - Необязательный. Определяет доступность и видимость кнопки "Отмена" 
//												на форме длительной операции.
// 		* ВидимостьПроцентаВыполненияОперации 	- Булево - Необязательный. Определяет видимость шкалы прогресса
//												с процентом выполнения.
// 		* ПроцентВыполненияОперации 			- Число - Необязательный. Процент выполнения длительной операции, 
//												который надо показать. Данное свойство учитывается только если передано
//												свойство ВидимостьПроцентаВыполненияОперации.
// 		* ИмяПроцедурыПослеОткрытияФормыДлитОперации - Строка - Необязательный. Имя процедуры, выполняемой с задержкой после 
//												выполнения процедуры.
// 		* ВыполняетсяДлительнаяОперация			- Булево - Необязательный. Признак выполнения длительной операции.
//												Если Истина - форма длительной операции открывается, если не открыта или
//															в нее передаются новые настройки, если уже открыта.
//												Если Ложь - форма длительной операции закрывается.
//												По умолчанию Ложь.
//		
//
Процедура УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации)
												
												
	Перем СообщениеПользователю, ДопСообщениеПользователю, ДоступностьКнОтмена, 
		ВидимостьПроцентаВыполненияОперации, ПроцентВыполненияОперации, 
		ИмяПроцедурыПослеОткрытияФормыДлитОперации, ВыполняетсяДлительнаяОперация;
		
	СтруктураНастроекФормыДлительнойОперации.Свойство("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДопСообщениеПользователю", ДопСообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентаВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ПроцентВыполненияОперации", ПроцентВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ИмяПроцедурыПослеОткрытияФормыДлитОперации", ИмяПроцедурыПослеОткрытияФормыДлитОперации);
	
	
	СтруктураНастроекФормыДлительнойОперации.Свойство("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	ВыполняетсяДлительнаяОперация = ?(ВыполняетсяДлительнаяОперация = Неопределено, Ложь, ВыполняетсяДлительнаяОперация);
	
	// Если в форме отчета не зафиксирована форма-владелец, попробуем ее найти.
	Если ФормаОтчета.ВладелецФормыДлитОпер = Неопределено Тогда
		
	    ВладелецФормыДлитОпер = ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета);
		ФормаОтчета.ВладелецФормыДлитОпер = ВладелецФормыДлитОпер;
		
	Иначе
		ВладелецФормыДлитОпер = ФормаОтчета.ВладелецФормыДлитОпер;
	КонецЕсли; 											
	
	
	
	// пробуем найти открытую форму длительной операции для данного отчета.
	ФормаДлительнойОперацииОтчета = ФормаОтчета.ФормаДлительнойОперации;
	НужноНайтиФорму = Ложь;
	Если НЕ ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
		НужноНайтиФорму = Истина;
	ИначеЕсли НЕ ВРег(ФормаДлительнойОперацииОтчета.ИмяФормы) = ВРег("ОбщаяФорма.АЛКОДлительнаяОперация") Тогда
		НужноНайтиФорму = Истина;
	КонецЕсли;
	
	Если НужноНайтиФорму Тогда
		
		ФормаДлительнойОперацииОтчета = ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета);
		Если ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда			
			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняетсяДлительнаяОперация Тогда
						
		ПараметрыФормы = Новый Структура;
				
		Если НЕ ДоступностьКнОтмена = Неопределено Тогда
		    ПараметрыФормы.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
		КонецЕсли;
		
		Если НЕ СообщениеПользователю = Неопределено Тогда
		    ПараметрыФормы.Вставить("СообщениеПользователю", СообщениеПользователю);		
		Иначе
			ПараметрыФормы.Вставить("СообщениеПользователю", "");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДопСообщениеПользователю", ДопСообщениеПользователю);		
				
		ВариантСПроцентами = Истина;
		Если НЕ ВидимостьПроцентаВыполненияОперации = Неопределено Тогда
		    ПараметрыФормы.Вставить("ВидимостьПроцентВыполнения", ВидимостьПроцентаВыполненияОперации);		
		Иначе
			ВариантСПроцентами = Ложь;
		КонецЕсли; 

		Если ВариантСПроцентами Тогда
		
			Если НЕ ПроцентВыполненияОперации = Неопределено Тогда
			    ПараметрыФормы.Вставить("ПроцентВыполнения", ПроцентВыполненияОперации);					
			КонецЕсли;	
		
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("УникальностьФормы", ФормаОтчета.УникальностьФормы);
		
        ИмяФормыДлительнойОперации = "ОбщаяФорма.АЛКОДлительнаяОперация";
		 
		НужноОткрытьФорму = Ложь;
		
		Если НЕ ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
			НужноОткрытьФорму = Истина;						
		ИначеЕсли НЕ ФормаДлительнойОперацииОтчета.Открыта() Тогда
			НужноОткрытьФорму = Истина;
		ИначеЕсли НЕ ВРег(ФормаДлительнойОперацииОтчета.ИмяФормы) = ВРег("ОбщаяФорма.АЛКОДлительнаяОперация") Тогда
			НужноОткрытьФорму = Истина;
		Иначе
			// Оповещение в форму длительной операции.
			Оповестить("ИмитацияАктивности", ПараметрыФормы, ФормаОтчета.УникальностьФормы);			
		КонецЕсли;
		
		Если НужноОткрытьФорму Тогда
		
			ФормаДлительнойОперацииОтчета = ОткрытьФорму(ИмяФормыДлительнойОперации, ПараметрыФормы, 
														ВладелецФормыДлитОпер, ФормаОтчета.УникальностьФормы,,,, 
														РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		    ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;
			
		КонецЕсли;
		
		ФормаДлительнойОперацииОтчета.Активизировать();
		
	Иначе
		
		// Нужно закрыть форму длительной операции, если она открыта
		Если ТипЗнч(ФормаДлительнойОперацииОтчета) = Тип("УправляемаяФорма") Тогда
			
			// Оповещение в форму длительной операции.
			Оповестить("ЗакрытьДлительнуюОперацию", , ФормаОтчета.УникальностьФормы);
			
			ФормаОтчета.ФормаДлительнойОперации = Неопределено;
						
		КонецЕсли;	
					
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяПроцедурыПослеОткрытияФормыДлитОперации) Тогда
	    ВыполнитьСЗадержкой(ФормаОтчета, ИмяПроцедурыПослеОткрытияФормыДлитОперации, ФормаОтчета.ВремяЗадержки);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПослеВыполненияДлительнойОперацииПриОшибкеАЛКО(Форма, СообщениеОбОшибке)
		
	// Отключаем показ формы-анимации длительной операции.
	ВыключитьЗаставкуДлительнойОперации(Форма);
	
	ВидДлОперации = Форма.ВидДлительнойОперации;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = ' При выполнении длительной операции 
							|" + ВидДлОперации
							+ "произошла ошибка.
							|" + СообщениеОбОшибке + "
							|Подробности см. в Журнале регистрации.'");;				
	Сообщение.Сообщить();
		
	Оповестить("ОтменаОперацииПриОшибке", , Форма.УникальностьФормы);		
	
КонецПроцедуры

Процедура ОтменаДлительнойОперацииАЛКО(Форма)

	// очистим, чтобы можно было контролировать наличие выполняемой операции
	// при одновременном открытии формы отчета и попытке выполнения операции
	// из 1С отчетности или Управления отчетностью.
	// ПараметрыОбработчикаОжидания во внешней форме очищаются ,
	// в Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте() внешней формы.
	Форма.ПараметрыОбработчикаОжидания = Неопределено;
	
	Форма.ВладелецФормыОшибок 		= РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Форма.ВладелецФормыДлитОпер);
	Форма.ВладелецФормыДлитОпер 	= Неопределено;

	Форма.ОтменаОперации = Истина;
	
	ВыключитьЗаставкуДлительнойОперации(Форма);
	
	ВидДлОперации = Форма.ВидДлительнойОперации;
	
	Если ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры") Тогда
	
		// Отмена копирования данных при записи отчета как нового с измененым номером корректировки.
		ПриОтменеКопированияРегистровОтчетаПриЗаписиКакНовыйАЛКО(Форма);
		
	ИначеЕсли ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать")
		или ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив") Тогда
		
		Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", Неопределено);

	ИначеЕсли ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление") Тогда
		
		// Режим длительной операции при восстановлении включается только при копировании отчетов
		// или при импорте данных отчета из старого формата.
		ПриОтменеВосстановленияАЛКО(Форма);
		Возврат;
	    
	КонецЕсли;
	
    ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

КонецПроцедуры

Процедура ПослеВыполненияДлительнойОперацииАЛКО(Форма, СтрукРеквизитовФормы  = Неопределено)
	
	// При вызове извне, без открытия формы, может передаваться значение измененной СтруктураРеквизитовФормы.	
	Если НЕ СтрукРеквизитовФормы  = Неопределено Тогда
	    Форма.СтруктураРеквизитовФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрукРеквизитовФормы);		
	КонецЕсли; 
	
	// очистим, чтобы можно было контролировать наличие выполняемой операции
	// при одновременном открытии формы отчета и попытке выполнения операции
	// из 1С отчетности или Управления отчетностью.
	// ПараметрыОбработчикаОжидания во внешней форме очищаются ,
	// в Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте() внешней формы.
	Форма.ПараметрыОбработчикаОжидания = Неопределено;
	
	Форма.ВладелецФормыОшибок 		= РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Форма.ВладелецФормыДлитОпер);
	Форма.ВладелецФормыДлитОпер 	= Неопределено;
	
	ВидДлОперации = Форма.ВидДлительнойОперации;
	
	ВидДлОперацииВосстановление 	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
		
	ВидДлОперацииВыгрузка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПересчет 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВидДлОперацииПечать 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВидДлОперацииПечатьВАрхив 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив");
	ВидДлОперацииПроверка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииСохранение 		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	ВидДлОперацииАвтоЗаполнение		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВидДлОперацииОчисткаОтМусора	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВидДлОперацииСкопироватьТекущиеРегистры	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВидДлОперацииУдалениеДокументаОтчета	= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета");
	
	// Отключаем показ формы-анимации длительной операции.
	ВыключитьЗаставкуДлительнойОперации(Форма);
			
	Если ВидДлОперации = ВидДлОперацииВосстановление Тогда
		
	    Форма.ПродолжениеВосстановленияДанныхНаСервере(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
		
		Форма.Активизировать();
		
		Если Форма.БылИмпорт Тогда
			// Сохранение будет после пересчета итогов.			
			ПересчетИтогов_ДлительнаяОперация(Форма);
		Иначе
			// После восстановления могли измениться Сервис регистров и Сервис регистров удаленные.
			Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
			    Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
			КонецЕсли;
			
			СохранитьНаКлиентеАЛКО(Форма);
			
		КонецЕсли;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверка Тогда
		
		ПослеВыполненияЗадания_ПроверкиВыгрузкиАЛКО(Форма);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
		
		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);
	
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузка Тогда	
		
		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда	
		
		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
		
		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииПересчет Тогда
		
		ПослеВыполненияЗадания_ПересчетИтоговАЛКО(Форма);
		
		Если Форма.БылИмпорт Тогда
			
			Форма.БылИмпорт = Ложь;
			Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
			    Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
			КонецЕсли; 
			СохранитьНаКлиентеАЛКО(Форма);
			
		КонецЕсли;
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииПечать
		или ВидДлОперации = ВидДлОперацииПечатьВАрхив Тогда
		
		ВидПечати = Форма.ОбщийПараметрПроцедур.ВидПечати;
		ПечатьУспешна = Форма.ПослеВыполненияЗадания_ПечатьНаСервере(ВидПечати);
							
		Если ПечатьУспешна и (ВидПечати <> "ПечатьФайлZIP") Тогда
		    РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, , Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);			
		КонецЕсли; 
						
		Форма.СтруктураРеквизитовФормы.мРежимПечати = Ложь;
        
		Если ПечатьУспешна и (ВидПечати = "ПечатьФайлZIP") Тогда
			
			СписокПечатаемыхЛистов = Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов;
			СписокПечатаемыхЛистов.Очистить();
				
			АдресВоВременномХранилищеZIP = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилищеZIP;
			ТипЭкспорта = Форма.СтруктураРеквизитовФормы.ТипЭкспорта;
			
			СохранитьФайлыZIP(АдресВоВременномХранилищеZIP, ТипЭкспорта, "ALKO_" + Строка(Форма.НомерАлкоОтчета),
											Форма.ОтчетныйПериодСГодом, Форма.ОрганизацияНаименованиеСокращенное);
			
		КонецЕсли;
		
		Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", Неопределено);
			
	ИначеЕсли ВидДлОперации = ВидДлОперацииСохранение Тогда
		
		ПослеСохраненияАЛКО(Форма);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииАвтоЗаполнение Тогда
		
		Форма.ЗагрузитьПодготовленныеДанныеАвтоЗаполненияНаСервере();
		ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииОчисткаОтМусора Тогда
		
		Форма.ПослеВыполненияЗадания_ОчисткаОтМусораНаСервере();
		
		Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
		    Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
		КонецЕсли; 
		СохранитьНаКлиентеАЛКО(Форма);
		
	ИначеЕсли ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда
		
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		
		// Очищаем источник отчета и признак копирования.
		Форма.СтруктураРеквизитовФормы.мДокументИсточник = Неопределено;
		Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;
		
		// Нужно очистить Журнал отчета посредством СохранитьРегистрыСведений(). 
		// В противном случае при следующем открытии, при восстановлении,
		// будут добавлены в СервисРегистровУдаленные все страницы,
		// так как при копировании писалась информация о добавлении страниц в Журнал.
		// При очистке от мусора это приведет к удалению всех данных.
		
		Если НЕ Форма.ВыполняемоеОповещениеПослеКопированияРегистров = Неопределено Тогда
			// Выполнится в ПослеСохраненияНаКлиенте().
			Форма.УниверсальноеОписаниеОповещения = Форма.ВыполняемоеОповещениеПослеКопированияРегистров;
		
		КонецЕсли;
		СохранитьРегистрыСведенийАЛКО(Форма);
		
	КонецЕсли;
	
	Если ВидДлОперации = ВидДлОперацииВосстановление или ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда
	    Возврат;	
	КонецЕсли;
	
	Если ВидДлОперации = ВидДлОперацииСохранение и (НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет") Тогда
	    Возврат;	
	КонецЕсли;
	
	Если ВидДлОперации = ВидДлОперацииПересчет и (НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "ПересчитатьИтоги") Тогда
	    Возврат;	
	КонецЕсли;
		
	ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
КонецПроцедуры

Процедура ВыполнитьДлительнуюОперациюПродолжениеАЛКО(Форма, ВидДлОперации, ВидПечати = Неопределено)
	
	Форма.ВидДлительнойОперации = ВидДлОперации;
	Форма.ОтменаОперации = Ложь;
			
	Если НЕ ВидПечати = Неопределено Тогда
		
		Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
		    Форма.ОбщийПараметрПроцедур =  Новый Структура(); 		
		КонецЕсли;
		
	    Форма.ОбщийПараметрПроцедур.Вставить("ВидПечати", ВидПечати);
	
	КонецЕсли; 
	
	ЗаданиеВыполнено = Форма.ВыполнитьДлительнуюОперацию_НаСервере(ВидДлОперации, ВидПечати);
	
	Если ЗаданиеВыполнено Тогда	
		
		ПослеВыполненияДлительнойОперацииАЛКО(Форма);	    				
		Возврат;

	КонецЕсли;
		
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания = Новый Структура;
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	
	МаксимальныйИнтервал = 0; КоэффициентУвеличенияИнтервала = 0;
	РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьПараметрыОбработчикаОжиданияАЛКО(МаксимальныйИнтервал, КоэффициентУвеличенияИнтервала);
	
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", МаксимальныйИнтервал);
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", КоэффициентУвеличенияИнтервала);
	 
	Форма.ВладелецФормыДлитОпер.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", 1, Истина);
	
	ПоказатьФормуДлительнойОперации(Форма, ВидДлОперации, Форма.СтруктураРеквизитовФормы.ИдентификаторЗадания);
	
КонецПроцедуры

Функция ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета)

	ИмяФормыДлительнойОперации = "ОбщаяФорма.АЛКОДлительнаяОперация";
	
	// определяем форму текущего активного окна	Длительной операции
	// открытого для отчета, которому принадлежит форма.
	УникальностьФормы = ФормаОтчета.УникальностьФормы;
		
	// Ищем среди открытых форм	
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл
	
		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();
		
		Если КолФорм > 0 Тогда
		    Для Инд = 0 По КолФорм - 1 Цикл
			
				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				Если ВРег(ИмяТекФормы) = ВРег(ИмяФормыДлительнойОперации) Тогда
				    // это форма длительной операции
					// проверяем на совпадение по уникальности
					Если ТекФорма.УникальностьФормы = УникальностьФормы Тогда
					    Возврат ТекФорма;					
					КонецЕсли; 
				
				КонецЕсли; 
			
			КонецЦикла; 		
		КонецЕсли;		
	
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции 

#КонецОбласти

#Область СлужебныеПоказатьСтраницуМногострочногоРаздела

Процедура ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма)
		
	ПоказатьПоИндексу 			 = Форма.ПоказатьПоИндексуПриВыводеСтраницы;
	НомерСтраницы 				 = Форма.НомерСтраницыПриВыводеСтраницы;
	НаименованиеРаздела 		 = Форма.НаименованиеРазделаПриВыводеСтраницы;
	
	// Ситуация возможна когда добавляется первая строка, но не сохраняется, поскольку строк нет
	// ПриАктивизацииСтроки не отрабатывает и ТекущееСостояние не скидывается.
	Если (Форма.ТекущееСостояние =  "Копирование") или (Форма.ТекущееСостояние =  "Добавление") Тогда
		Форма.ТекущееСостояние = "";
	КонецЕсли;
	
	Форма.ПоказатьСтраницуМногострочногоРазделаНаСервере(НомерСтраницы, НаименованиеРаздела, ПоказатьПоИндексу);
	
	Форма.АктивнаяСтраницаРаздела = Форма["ТаблицаСтраницы" + НаименованиеРаздела][Форма.НомерАктивнойСтраницыМногострочногоРаздела];
	
	Форма.УправлениеМенюТаблицыФормыНаСервере(НаименованиеРаздела);
	
КонецПроцедуры

Процедура ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма)
	
	Элемент	= Форма.Элементы.РазделыОтчета;
	
	Если Форма.СписокПараметровПереходаНаСтраницуРаздела.Количество() = 0 Тогда
		// Нет информации для перехода.
		Возврат;
	КонецЕсли;
	
	Если НЕ (Форма.ТекущееСостояние =  "АктивизацияЯчейки" 
		или Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела" 
		или Форма.ТекущееСостояние =  "Активизация") Тогда
	
		Действие = "ПриАктивизацииСтроки";
		ИмяПроцедурыДействия = "РазделыОтчетаПокаИдетОткрытиеПриАктивизацииСтроки";
		Форма.УстановитьДействиеТаблицыРазделыОтчетаНаСервере(Действие, ИмяПроцедурыДействия);	
	
	КонецЕсли; 
				
	ЭлементПараметрыПереходаНаСтраницуРаздела = Форма.СписокПараметровПереходаНаСтраницуРаздела[0];
	ПараметрыПереходаНаСтраницуРаздела = ЭлементПараметрыПереходаНаСтраницуРаздела.Значение;
	
	// Сразу удаляем, если при следующем проходе список не пуст - значит щелкнули еще страничку.
	Форма.СписокПараметровПереходаНаСтраницуРаздела.Очистить();
	
	ПараметрыПереходаНаСтраницуРаздела.Свойство("ПоказатьПоИндексуПриВыводеСтраницы", Форма.ПоказатьПоИндексуПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("НомерСтраницыПриВыводеСтраницы", Форма.НомерСтраницыПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("НаименованиеРазделаПриВыводеСтраницы", Форма.НаименованиеРазделаПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭлементПриВыводеСтраницы", Форма.ЭлементПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭтоРазделОтчетаПриВыводеСтраницы", Форма.ЭтоРазделОтчетаПриВыводеСтраницы);
	
	Если Форма.УказываютсяНомераЛицензии Тогда
	    ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы", Форма.ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы); 
	КонецЕсли; 
					
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
		// Развернем если раздел.
		Если Форма.ЭтоРазделОтчета Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока, Истина);
		КонецЕсли;
		
	Иначе
		
		// НЕ Многостраничный раздел только один - Титульный.
		Форма.ТекущийРаздел = Форма.НаименованиеРазделаПриВыводеСтраницы;
		
		Форма.Элементы.ГруппаТаблицы.Видимость = Ложь;
		
		Если Форма.УказываютсяНомераЛицензии Тогда
		    Форма.Элементы.СтраницаОтчетаЛицензии.Видимость = Ложь;			
		КонецЕсли; 
		
		Форма.Элементы.СтраницаОтчетаМногострочная.Видимость = Ложь;
		
		Форма.Элементы.СтраницаОтчетаТитульный.Видимость = Истина;
		
		Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
		Форма.Элементы.Обновить.Доступность = Истина;
		
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость  = Ложь;
		
		Форма.ТекущийНомерСтрокиТаблицыФормы = 0;
		
		Если НЕ (Форма.ТекущееСостояние =  "АктивизацияЯчейки" 
			или Форма.ТекущееСостояние =  "АктивизацияСтраницыРаздела" 
			или Форма.ТекущееСостояние =  "Активизация") Тогда
			
			Если Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Количество() > 0 Тогда

				// На случай если успели выбрать страницу, пока открывалась страница.
				// Поскольку открытие идет с небольшой задержкой такая ситуация возможна.
				// Отказаться от задержки проблематично - не всегда успевают синхронизироваться 
				// данные Клиент-Сервер, особенно в случае Веб-клиента.
				Форма.СписокПараметровПереходаНаСтраницуРаздела = Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Скопировать();
				Форма.СписокПараметровПереходаНаСтраницуРазделаПокаИдетОткрытие.Очистить();
				ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма);
				
			Иначе
								
				Действие = "ПриАктивизацииСтроки";
				ИмяПроцедурыДействия = "РазделыОтчетаПриАктивизацииСтроки";
				Форма.УстановитьДействиеТаблицыРазделыОтчетаНаСервере(Действие, ИмяПроцедурыДействия);
				
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
								
	КонецЕсли;
	
	Если Форма.ТекущееСостояние =  "АктивизацияЯчейки" Тогда
	    
		Ячейка = Форма.СтруктураРеквизитовФормы.Ячейка;		
		АктивизироватьЯчейкуАЛКО(Форма, Ячейка);
		
		Форма.ТекущееСостояние =  "";
		
	КонецЕсли;
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеМестоОсуществленияДеятельности

Процедура МестоОсуществленияДеятельностиНажатиеЗавершениеАЛКО(Результат, Форма) Экспорт
	
	Форма.ОбновитьМестоОсуществленияДеятельностиНаСервере(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеВводРеквизитовОП

Процедура ВводРеквизитовОП_АЛКО(Форма)
	
	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Количество() = 0 Тогда
		Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	СведенияОбОП = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьПустуюСтруктуруСведенийОбОП();
		
	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";
	
	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
    	ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СведенияОбОП", 		СведенияОбОП);
	ПараметрыФормы.Вставить("ЭтоПБОЮЛ", 			Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ);
	ПараметрыФормы.Вставить("УникальностьФормы",	Форма.УникальностьФормы);
	
	ИмяФормыВводРеквизитовОП = "ОбщаяФорма.АЛКОВводРеквизитовОП";
	
	ДополнительныеПараметры = Новый Структура("Форма, ИмяЭлементаСтруктуры, СведенияОбОП", 
											Форма, ИмяЭлементаСтруктуры, СведенияОбОП);
	Оповещение = Новый ОписаниеОповещения("ВводРеквизитовОПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
	ОткрытьФорму(ИмяФормыВводРеквизитовОП, ПараметрыФормы, Форма, , , , Оповещение, 
												РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВводРеквизитовОПЗавершение(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	Форма 					= ДополнительныеПараметры.Форма;
	ИмяЭлементаСтруктуры 	= ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП 			= ДополнительныеПараметры.СведенияОбОП;
	
	// Уберем форму из параметров.
	Параметры = Новый Структура("ИмяЭлементаСтруктуры, СведенияОбОП", 
								ИмяЭлементаСтруктуры, СведенияОбОП);
	
	Форма.ВводРеквизитовОПЗавершениеНаСервере(РезультатВвода, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЛицензии

Процедура ВыборДеятельностиПоЛицензииАЛКО(Форма)
	
	АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;
	
	// Код деятельности
	Если АктивнаяСтраницаРаздела.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраницаРаздела.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
	
	Если АктивнаяСтраницаРаздела.Данные.Количество() = 0 Тогда
		АктивнаяСтраницаРаздела.Данные.Добавить(Новый Структура);
	КонецЕсли;
		
	СохраненныйКодДеятельности = Неопределено;
	СохраненноеНазваниеДеятельности = Неопределено;
	ИмяЭлементаСтруктуры = "П000000000105";
	
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныйКодДеятельности);
	АктивнаяСтраницаРаздела.Данные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненноеНазваниеДеятельности);
	
	Если СохраненныйКодДеятельности = Неопределено Тогда
	    СохраненныйКодДеятельности = "";	
	КонецЕсли; 
	Если СохраненноеНазваниеДеятельности = Неопределено Тогда
	    СохраненноеНазваниеДеятельности = "";	
	КонецЕсли;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
	
		ПараметрВводаПоля = Форма.СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяЭлементаСтруктуры));
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			
			ПараметрВводаПоля = Неопределено;
			
			Для Каждого Стр из Форма.СвойстваПоказателей Цикл
				Если Лев(ИмяЭлементаСтруктуры, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			
			ИмяПоказателя 	= ПараметрВводаПоля.Показатель;
			ТекстВыбора		= ПараметрВводаПоля.ТекстПриВыборе;
			ТаблицаВыбора 	= ПараметрВводаПоля.ТаблицаЗначений;
			КолонкаПоиска 	= "Код"; 
			ИсходноеЗначение = СохраненныйКодДеятельности;
			
		Иначе
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
		ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
		
		ДополнительныеПараметры = Новый Структура("Форма, ИсходноеЗначение", Форма, ИсходноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДеятельностиПоЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
					ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы",          		"Ввод вида деятельности");
		ПараметрыФормы.Вставить("Код",          				СохраненныйКодДеятельности);
		ПараметрыФормы.Вставить("Название",          			СохраненноеНазваниеДеятельности);
		ПараметрыФормы.Вставить("ИмяПоляЗначение",          	"Вид деятельности");
		ПараметрыФормы.Вставить("ИмяПоляКод",          			"Код");
		ПараметрыФормы.Вставить("МногострочныйРежимЗначения",	Истина);
		ПараметрыФормы.Вставить("ДлинаПоляКода",          		4);
		ПараметрыФормы.Вставить("ДлинаПоляЗначения",       		40);
		
		ДополнительныеПараметры = Новый Структура("Форма, ИсходноеЗначениеКода, ИсходноеЗначениеНазвания", 
										Форма, СохраненныйКодДеятельности, СохраненноеНазваниеДеятельности);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДеятельностиПоЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.АЛКОФормаВводаПарыСвязанныхЗначений", 
					ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыборДеятельностиПоЛицензииЗавершение(РезультатВыбора, Параметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	Форма = Параметры.Форма;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		// поскольку всегда "выбираем" код
		ИсходноеЗначение 				 = Параметры.ИсходноеЗначение;		
		БылоИзменение = (СокрЛП(ИсходноеЗначение) <> СокрЛП(РезультатВыбора.Код));
		
	Иначе
		
		ИсходноеЗначениеКода 		= Параметры.ИсходноеЗначениеКода;
		ИсходноеЗначениеНазвания 	= Параметры.ИсходноеЗначениеНазвания;
		
		БылоИзменение = (СокрЛП(ИсходноеЗначениеКода) <> СокрЛП(РезультатВыбора.Код))
						или (СокрЛП(ИсходноеЗначениеНазвания) <> СокрЛП(РезультатВыбора.Название));
		
	КонецЕсли;	
			
	ВыбранныйКод = СокрЛП(РезультатВыбора.Код);
	
		
	Если БылоИзменение Тогда
		
		// Если выбран код "12" - т.е нелицензируемая деятельность
		// нужно дополнительно спросить, поскольку такой выбор влечет
		// удаление всех остальных введенных лицензий и ДопСтраниц.
		КоличествоСтраницЛицензий = Форма.ТаблицаСтраницыЛицензии.Количество();
		
		Если (КоличествоСтраницЛицензий > 1) и (ВыбранныйКод = "12") 
			и (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101') Тогда
			
			// В отчете нельзя совмещать лицензионную или нелицензионную деятельность.
			ТекстВопроса = НСтр("ru='Выбор этого вида деятельности приведет к удалению
				         			|всех страниц этого раздела, кроме текущей. 
						 			|Если в отчете есть нелицензионный вид деятельности, 
						 			|он должен быть единственным.
						 			|Продолжить?'");
					
			ДополнительныеПараметры = Новый Структура("Форма, ВыбранныйКод, ВыбранныйВидДеятельности", 
													Форма, ВыбранныйКод, СокрЛП(РезультатВыбора.Название));
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыборДеятельностиПоЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Форма.Модифицированность = Истина;
			
			// Присваиваем новое значение кода деятельности
			ИмяЭлементаСтруктуры = "П000000000105";
			АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;
			
			АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйКод); 
			
			// Присваиваем вид деятельности			
			ВыбранныйВидДеятельности = ?(ВыбранныйКод = "", "", СокрЛП(РезультатВыбора.Название));
			АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйВидДеятельности);
			Форма[ИмяЭлементаСтруктуры] = ВыбранныйВидДеятельности;
			
			АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
			АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

			ЧислоВыбранныйКод = ?(ЗначениеЗаполнено(ВыбранныйКод), Число(ВыбранныйКод), 0);
			Форма.ОбработкаПолейСтраницыЛицензийНаСервере( ЧислоВыбранныйКод < 12 );
			
			// Видимость кнопок добавления-удаления страниц	
			ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;
			Родитель =  ТекущиеДанные.ПолучитьРодителя();
			
			Форма.Элементы.КнопкаУдалитьСтраницуЛицензии.Видимость = (КоличествоСтраницЛицензий > 1) и (Родитель <> Неопределено);
		
			Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101')				    
				И (ЧислоВыбранныйКод = 12) Тогда
			
				// Для НЕ лицензируемой деятельности нет смысла добавлять страницы
				// т.к. Лицензия может быть только одна, с кодом 12
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Ложь;	
			Иначе
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Истина;
			КонецЕсли;
		
		КонецЕсли;	        
		
	КонецЕсли; 

КонецПроцедуры

Процедура ВопросВыборДеятельностиПоЛицензииЗавершение(РезультатВопроса, Параметры) Экспорт

	Если РезультатВопроса = Неопределено Тогда
	    Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Форма = Параметры.Форма;
	
	Форма.Модифицированность = Истина;
	
	// Присваиваем новое значение кода деятельности
	// В данном случае ВыбранныйКод всегда "12".
	
	ВыбранныйКод 			 = Параметры.ВыбранныйКод;
	ВыбранныйВидДеятельности = Параметры.ВыбранныйВидДеятельности;
	
	ИмяЭлементаСтруктуры = "П000000000105";
	
	АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;
	
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйКод); 
	
	// Присваиваем вид деятельности			
	Форма[ИмяЭлементаСтруктуры] = ВыбранныйВидДеятельности;
	АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйВидДеятельности);
	
	// Принудительно заставляем платформу обновить значения Списка
	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;	
			
	// Удаляем все страницы Лицензий кроме активной
	// от последней к первой.
	КолСтраницЛицензий = Форма.ТаблицаСтраницыЛицензии.Количество();
	Для Инд = 0 По КолСтраницЛицензий - 1 Цикл
		
	    ТекИндекс = КолСтраницЛицензий - 1 - Инд;
		СтраницаЛицензий = Форма.ТаблицаСтраницыЛицензии[ТекИндекс];
		
		Если СтраницаЛицензий.АктивнаяСтраница Тогда
			Продолжить;						
		КонецЕсли;
		
		// Удаляем
		Форма.УдалитьСтраницуНаСервере("Лицензии", ТекИндекс);
		
	КонецЦикла;	 
	
	// Страница после удаления только одна.
	Форма.НомерАктивнойСтраницыМногострочногоРаздела = 0;
	
	Форма.ОбработкаПолейСтраницыЛицензийНаСервере( Ложь );
	
	// нужно пересчитать таблицу разделов
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(Форма);
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Иначе
		Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		    Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьИдентификатор();			
		КонецЕсли;		
	КонецЕсли;
			
КонецПроцедуры  

Функция ЛицензируемаяДеятельностьАЛКО(Форма)
		
	Если Форма.НомерАлкоОтчета = 1 или Форма.НомерАлкоОтчета = 9 Тогда
		// 1 и 9 алкоотчеты всегда лицензионная.
	    Возврат Истина;
	ИначеЕсли Форма.НомерАлкоОтчета > 11 Тогда
		// 12, 13, 14, 15 алкоотчеты - без лицензий.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Форма.УказываютсяНомераЛицензии Тогда
	    Возврат Ложь;	
	КонецЕсли;
	
	Если Форма.ТаблицаСтраницыЛицензии.Количество() < 1
		Или Форма.ТаблицаСтраницыЛицензии[0].Данные.Количество() < 1
		Или Форма.ТаблицаСтраницыЛицензии[0].ДополнительныеДанные.Количество() < 1 Тогда
		// По умолчанию считаем лицензируемой.
		Возврат Истина;
	КонецЕсли;
	
	// Если деятельность нелицензируемая, то все страницы могут содержать в поле
	// П000000000105 только строку, 
	// соответствующую в макете Списки в области Виды Деятельности коду 12.
	//
	// Код вида деятельности сохраняется в Дополнительных Данных
	// в структуре с ключем П000000000105.
	//
	// Фактически при реализации в виде многострочной страницы на обычных формах
	// это означает одну единственную страницу с индексом 0.
	
	СтруктураДополнительныеДанные = Форма.ТаблицаСтраницыЛицензии[0].ДополнительныеДанные[0].Значение;
		
	ИмяПоля = "П000000000105";
	
	КодВидДеятельности = Неопределено;
	
	Если ТипЗнч(СтруктураДополнительныеДанные) = Тип("Структура") Тогда
	
		КодВидДеятельности = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(
																ИмяПоля, СтруктураДополнительныеДанные);	
	Иначе
		Форма.ТаблицаСтраницыЛицензии[0].ДополнительныеДанные[0].Значение = Новый Структура;														
	КонецЕсли; 
	
	
	// По умолчанию считаем лицензируемой.
	КодВидДеятельности = ?(ЗначениеЗаполнено(КодВидДеятельности), КодВидДеятельности,  "0");
	
	// КодВидДеятельности в структуре имеет тип строка 2 символа.
	// Лицензионные виды деятельности начинаются от значения кода 08 до 11.
	Возврат Число(КодВидДеятельности) < 8;
	
			
КонецФункции

#КонецОбласти 

#Область СлужебныеВосстановитьУдаленныеСтраницы

Процедура КомандаВосстановитьУдаленныеСтраницыАЛКО(Форма)
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Восстановить");	
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
	ТекстВопроса = НСтр("ru='Внимание!
							|Восстановление будет возможно только для тех страниц, которые были удалены после 
							|последнего запуска процедуры ""Очистить регистры от ненужной информации""!
							|
							|Будут восстановлены лишь табличные данные, реквизиты Обособленных подразделений(ОП)
							|в восстановленных страницах будут не заполненны.
							|
							|Восстановленные страницы будут добавлены в конец списка страниц по разделам.
							|
							|Страницы раздела ""Сведения о лицензиях"" восстанавливаться не будут.
							|
							|По завершении восстановления отчет будет сохранен.
							|Ненужные страницы можно будет опять удалить.
							|
							|Рекомендуется скопировать отчет перед выполнением восстановления,
							|поскольку может быть восстановлено большое количество страниц, разбираться
							|в которых, не имея исходный вариант, может быть сложно.'");
														
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьУдаленныеСтраницыЗавершениеАЛКО", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Восстановление удаленных страниц");
	
КонецПроцедуры

Процедура ВосстановитьУдаленныеСтраницыЗавершениеАЛКО(РезультатВопроса, Форма) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Форма.ВосстановитьУдаленныеСтраницыНаСервере();
		
		// Нужно обновить данные в таблице РазделыОтчета.
		ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма);
		
		// Фиксируем изменения. Если этого не сделать, в случае отказа от сохранения при закрытии
		// и последующем восстановлении отчета возможны проблемы.
		СохранитьНаКлиентеАЛКО(Форма);
		
	Иначе
		// Отмена.
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОчистить

Процедура ОчиститьТекущуюСтраницуАЛКО(Форма)
	
	Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
														Раздел, Форма.СтруктураРеквизитовФормы);
		
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИдГруппы", ИдГруппы);
	ДополнительныеПараметры.Вставить("Раздел", Раздел);
	ДополнительныеПараметры.Вставить("ИндексСтраницы", ИндексСтраницы);
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, 
		"ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Раздел, Оповещение);
			
КонецПроцедуры

Процедура ОчиститьТекущуюСтраницуЗавершениеАЛКО(Результат = Неопределено, Параметры) Экспорт
	
	Форма 			= Параметры.Форма;
	ИдГруппы 		= Параметры.ИдГруппы;
	Раздел   		= Параметры.Раздел;
	ИндексСтраницы  = Параметры.ИндексСтраницы;
		
	Если (НЕ ИдГруппы = Неопределено) и (НЕ ИндексСтраницы = Неопределено) Тогда
			
		Если НЕ Раздел = "Титульный" Тогда
			// Нужно вывести страницу чтобы сменился источник данных Динамического списка.
		    ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВопросОчиститьЗавершениеАЛКО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма 					= ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение 	= ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Форма.ОчиститьНаСервере();
				
		Форма.Модифицированность = Истина;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОчиститьОтМусора

Процедура КомандаОчиститьРегистрыОтМусораАЛКО(Форма)
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Частичная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Полная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	
	ТекстВопроса = НСтр("ru='Внимание! 
							|После применения данной процедуры восстановление удаленных страниц станет невозможным!
							|
							|Частичная очистка - очистка регистров от данных удаленных страниц.
							|Может выполняться длительное время, если удаленные страницы содержали большое количество строк.
							|
							|Полная очистка - очистка регистров от данных удаленных страниц и 
							|дополнительно удаляются строки, помеченные на удаление в активных (неудаленных) страницах.
							|Выполняется дольше частичной очистки. 
							|
							|Если помеченных на удаление строк немного, рекомендуется частичная очистка.
							|
							|Если Отчет изменен, перед очисткой изменения будут сохранены.
							|
							|Очистка не влияет на работоспособность отчета, она необходима лишь в целях уменьшения 
							|размера информационной базы, особенно если база файловая.
							|
							|Для файловой ИБ возможна выдача ошибок о превышении максимального размера 
							|внутреннего файла 1Cv8.1CD в Журнале регистрации при операциях Заполнения, 
							|Копирования отчета или при интерактивном добавлении строк табличной части.
							|Если это произошло - необходимо полностью удалить ненужные отчеты (не только пометить на удаление), 
							|а в тех отчетах, которые необходимы, выполнить данную процедуру очистки.'");
														
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьРегистрыОтМусораЗавершение", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Выберите вариант очистки");
	
КонецПроцедуры

Процедура ОчиститьРегистрыОтМусораЗавершение(РезультатВопроса, Форма) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
	    Форма.ОбщийПараметрПроцедур =  Новый Структура(); 		
	КонецЕсли;
	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Частичная очистка.
		ОбщийПараметрПроцедур.Вставить("УдалятьПомеченныеНаУдаление", Ложь);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		// Полная очистка.
		ОбщийПараметрПроцедур.Вставить("УдалятьПомеченныеНаУдаление", Истина);
	Иначе
		// Отмена.
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаОтМусораПослеСохраненияАЛКО", ЭтотОбъект, Форма);
	
	Если Форма.Модифицированность Тогда
	    СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОчисткаОтМусораПослеСохраненияАЛКО(Результат, Форма) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда		
		ОчисткаОтМусора_ДлительнаяОперацияАЛКО(Форма);
	Иначе	
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение очистки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаОтМусора_ДлительнаяОперацияАЛКО(Форма)
		
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеАктивизироватьПоле

Процедура АктивизироватьЯчейкуСЗадержкойАЛКО(Форма)
	
	ВыполнитьСЗадержкой(Форма, "АктивизироватьЯчейкуПослеЗакрытияОткрытыхФорм", Форма.ВремяЗадержки);
	
КонецПроцедуры

Процедура АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО(Форма)
	
	ВыполнитьСЗадержкой(Форма, "АктивизироватьПолеАктивнойСтраницы", Форма.ВремяЗадержки);
	
КонецПроцедуры

Процедура ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, НомерСтроки, ИмяПоля = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(НомерСтроки) Тогда
	    //Ничего не делаем - нет данных.
		Возврат;
	КонецЕсли;
	
	ПерешлиУспешно = Форма.ПереходНаСтрокуТаблицыФормыНаСервере(ИдГруппы, НомерСтроки, ИмяПоля);
	
	ТаблицаФормыРаздела = Форма.Элементы["ТаблицаФормыРаздела"+ИдГруппы];
	ТаблицаФормыРаздела.Обновить();
	
	Если ПерешлиУспешно и (Форма.ТекущееСостояние = "АктивизацияЯчейкиТаблицы") Тогда
		
		// Сбросить состояние нужно до редактирования.
		Форма.ТекущееСостояние = "";
		
		Если Форма.ВходВРедактированиеПриАктивизации Тогда
			
			Если НЕ ТаблицаФормыРаздела.ТекущиеДанные = Неопределено Тогда
			    ТаблицаФормыРаздела.ИзменитьСтроку();			
			КонецЕсли; 
		    
		КонецЕсли; 
			
	КонецЕсли; 

	// Сбрасываем состояние в любом случае.
	Форма.ТекущееСостояние = "";
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПересчетИтогов

Процедура ПересчетИтогов_ДлительнаяОперация(Форма)
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
		
КонецПроцедуры

Процедура ПослеВыполненияЗадания_ПересчетИтоговАЛКО(Форма)
		 
	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище; 
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
	    Возврат;	
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьИзвременногоХранилища(АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если НЕ ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
	    Возврат;	
	КонецЕсли;
	
	// нужно загрузить результаты пересчета ИТОГОВ в Доп.данные
	Для Каждого Результат Из СтруктураРезультата Цикл
	
		ИдГруппы = Результат.Ключ;
		МассивРезультата = Результат.Значение;
		
		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(
														ИдГруппы, Форма.СтруктураРеквизитовФормы);
		Если Раздел = Неопределено Тогда
			// На всякий случай. Но эта ситуация не должна воспроизводиться.
			Продолжить;		
		КонецЕсли; 
		
		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
		
		ТекущийИндекс = -1;
		Для Каждого СписокРезультата Из МассивРезультата Цикл
			
			ТекущийИндекс = ТекущийИндекс + 1;
			СтраницаРаздела = ТаблицаСтраницРаздела[ТекущийИндекс];
			
			Для Каждого ЭлементСпискаИтогов Из СписокРезультата Цикл
			
				ИмяКонтролируемогоПоля = ЭлементСпискаИтогов.Представление;
				ЗначениеИтога = ЭлементСпискаИтогов.Значение;
				СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);
				
			КонецЦикла; 
		    СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;
			
		КонецЦикла;	
	
	КонецЦикла;	
	
	Форма.Модифицированность = Истина;
			
	// Нужно обновить текущую страницу
	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
	    ИмяТекРаздела = "Титульный";
	Иначе
		
		ИмяТекРаздела = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
														ИмяТекРаздела, Форма.СтруктураРеквизитовФормы);
		
	КонецЕсли; 
	
	Если НЕ ИмяТекРаздела = "Титульный" Тогда
		
		ЭлементТаблицыФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
		ЭлементТаблицыФормы.Обновить();
	    Форма.ВывестиИтогиТабличногоПоляРазделаНаСервере(ИдГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПечатьФайлZIP

Процедура ПечатьФайлZIPВыборФорматаАЛКО(Форма)
	
	Оповещение = Новый ОписаниеОповещения("ПечатьФайлZIPзавершениеАЛКО", ЭтотОбъект, Форма);
	
	СписокТиповЭкспорта = Новый СписокЗначений;
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.MXL,  "Табличный документ (*.mxl)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.XLSX, "Лист Excel 2007-... (*.xlsx)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.HTML, "Документ HTML (*.html)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.PDF,  "Документ PDF (*.pdf)"); 
			
	СписокТиповЭкспорта.ПоказатьВыборЭлемента(Оповещение, "Выберите формат файлов в архиве");
	
КонецПроцедуры

Процедура ПечатьФайлZIPзавершениеАЛКО(ТипЭкспорта, Форма) Экспорт
	
	Если ТипЭкспорта = Неопределено Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);		
		Возврат;		
	КонецЕсли;
			
	Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", ТипЭкспорта.Значение);
	ПечатьАЛКО(Форма, "ПечатьФайлZIP");
	
КонецПроцедуры

Процедура ВопросПродолжитьПечатьФайлZIPЗавершениеАЛКО(РезультатВопроса, Форма) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);			
		Возврат;		
	КонецЕсли;
	
	ПечатьФайлZIPВыборФорматаАЛКО(Форма);
	
КонецПроцедуры

// Сохраняет ZIP архив файлов табличного документа в выбранном пользователем формате, 
// предварительно сохраненный во временном хранилище, на клиентском компьютере.
// При этом определяется имя файла по умолчанию для сохраняемого файла на основании переданных реквизитов 
// отчета.
//
// Параметры:
//		АдресВоВременномХранилищеZIP	- Строка - 	Адрес временного хранилища, 
//										в котором должен быть помещен ZIP архив.
//		ТипЭкспорта						- ТипФайлаТабличногоДокумента - выбранный пользователем вариант 
//										формата файлов для сохранения табличного документа.
//		СокращенноеИмяОтчета			- Строка - Очень короткое имя отчета, для алкоотчетов например 
//										это "ALKO_01" дли Приложения 1 или "ALKO_11" для Приложения 11.
//		ОтчетныйПериодСГодом			- Строка - Строка вида "2квартал2016года", отражающая отчетный период отчета.
//		ОрганизацияНаименованиеСокращенное - Строка - Сокращенное наименование организации-декларанта отчета.
//								
//
Процедура СохранитьФайлыZIP(АдресВоВременномХранилищеZIP, ТипЭкспорта, СокращенноеИмяОтчета,
							ОтчетныйПериодСГодом, ОрганизацияНаименованиеСокращенное)
		
	
	СоответсвиеРасширений = Новый Соответствие;
			
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.PDF, ".pdf");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLS, ".xls");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLSX, ".xlsx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.MXL, ".mxl");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.DOCX, ".docx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.ODS, ".ods");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.HTML, ".html");
	
	Расширение = СоответсвиеРасширений.Получить( ТипЭкспорта );
	
	СтрОтчПериод = Стрзаменить(ОтчетныйПериодСГодом, " ", "");
	// убираем все символы которых не должно быть в имени файла	
	СокращенноеНаименованиеОрг = ОрганизацияНаименованиеСокращенное;
	
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, " ", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ".", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ",", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ":", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ";", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "?", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "!", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "№", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "#", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "@", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "~", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "`", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, """", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "'", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "/", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "\", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "|", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "[", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "]", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "{", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "}", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "+", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "*", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "&", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "^", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "=", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "%", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "$", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ">", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "<", "");
	
	ИмяКонечногоФайла = СокращенноеИмяОтчета + "_" + СокращенноеНаименованиеОрг + "_" + СтрОтчПериод 
						+ "_(" + Сред(Расширение, 2) + ").zip";
			
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилищеZIP) Тогда
		
		ПолучитьФайл(АдресВоВременномХранилищеZIP, ИмяКонечногоФайла, Истина);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПечать

Процедура ПоказатьБланкАЛКО(Форма)
		
	Отказ = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершениеАЛКО", ЭтотОбъект, Форма);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
		
КонецПроцедуры

Процедура ПоказатьБланкЗавершениеАЛКО(Отказ, Форма) Экспорт
	
	Если Отказ Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;		
	КонецЕсли;
	
	ПечатьАЛКО(Форма, "ПоказатьБланк");
	
КонецПроцедуры

Процедура ПечатьАЛКО(Форма, ВидПечати, НеИзФормыОтчета = Ложь)
	
	// Все параметры передаются через структуру ОбщийПараметрПроцедур			
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
	    Форма.ОбщийПараметрПроцедур = Новый Структура;		
	КонецЕсли;
	
	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	ОбщийПараметрПроцедур.Вставить("ВидПечати", ВидПечати);
				
	Оповещение = Новый ОписаниеОповещения("ПечатьПослеСохраненияАЛКО", ЭтотОбъект, Форма);		
			
	Если Форма.Модифицированность Тогда
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПечатьПослеСохраненияАЛКО(Отказ, Форма) Экспорт
	
	Если Форма.Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение печати невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	ВидПечати = Форма.ОбщийПараметрПроцедур.ВидПечати;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1. Формируется печатная форма...'"), Форма.Заголовок), , , БиблиотекаКартинок.Печать);
		
	Если НЕ Форма.ПроверкаГотовностиПечатиНаСервере() Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;		
	КонецЕсли; 
	
	Печать_ДлительнаяОперацияАЛКО(Форма);	
	
КонецПроцедуры

Процедура Печать_ДлительнаяОперацияАЛКО(Форма)
	
	Если Форма.Открыта() И Форма.Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение печати невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	ВидПечати = Форма.ОбщийПараметрПроцедур.ВидПечати;
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации, ВидПечати);
		
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеФормаНастроек

Процедура ОткрытьФормуНастроекАЛКО(Форма)
	
	ОткрытьФормуВыбораСтраницОтчетаАЛКО(Форма, "ВыбратьДляНастройки");

КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницОтчетаАЛКО(Форма, ВариантВыбора)
	
    Перем НомерСтраницыРаздела;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел) Тогда
	
		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			Форма.ТекущийРаздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			НомерСтраницыРаздела  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		КонецЕсли;	
		
	Иначе		
		НомерСтраницыРаздела = Форма.НомерАктивнойСтраницыМногострочногоРаздела + 1;		
	КонецЕсли; 
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);			
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	
	// Отключаем показ галочки отключения авторасчета
	Если Форма.НомерАлкоОтчета = 13 
		или Форма.НомерАлкоОтчета = 14 
		или Форма.НомерАлкоОтчета = 15 Тогда
	
		мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	
	КонецЕсли; 	
		
	Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", Форма.СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ОткрытьФормуВыбораСтраницАЛКО(Форма, ПараметрыФормы, Форма.ТекущийРаздел, НомерСтраницыРаздела);
		
КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницАЛКО(Форма, ПараметрыФормы, ТекущийРаздел, НомерСтраницыРаздела)

	Если НЕ ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
	    Возврат;	
	КонецЕсли;
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, Форма);

	Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеАвтоВыборКодов = Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов;
	
	ДополнительныеПараметры = Новый Структура("Форма, ЗначениеАвторасчета, ЗначениеАвтоВыборКодов, НомерСтраницыРаздела, ТекущийРаздел", 
										Форма, ЗначениеАвторасчета, ЗначениеАвтоВыборКодов, НомерСтраницыРаздела, ТекущийРаздел);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ОткрытьФорму(ФормаНастройкиОтчета);

КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницЗавершениеАЛКО(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Форма 						= ДополнительныеПараметры.Форма;
	ЗначениеАвторасчета 		= ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеАвтоВыборКодов 		= ДополнительныеПараметры.ЗначениеАвтоВыборКодов;
	НомерСтраницыРаздела 		= ДополнительныеПараметры.НомерСтраницыРаздела;
	ТекущийРаздел 				= ДополнительныеПараметры.ТекущийРаздел;
	
	ФлНужноВывестиСтраницуРаздела12 = Ложь;
	ФлНужноПересчитатьРазделы12 = Ложь;
	
	Форма.Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Форма.ИзменитьТаблицуВариантовЗаполненияНаСервере();
						
		// Нужно вывести текущую страницу с новыми настройками вариантов заполнения.
		Если ТекущийРаздел = "Раздел1" или ТекущийРаздел = "Раздел2" или ТекущийРаздел = "Декларация" Тогда
			
			ФлНужноВывестиСтраницуРаздела12 = Истина;
			
		КонецЕсли;	
		
		// Если раньше флажок ОтклАвтоРасчет был взведен, значит авторасчет был отключен,
		// а теперь его включили.
		// Поэтому в этой ситуации надо пересчитать данные.
		ФлНужноПересчитатьРазделы12 = ЗначениеАвторасчета;	
		
	КонецЕсли;
	
	Если ЗначениеАвтоВыборКодов <> Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
	    // Нужно вывести текущую страницу с новыми настройками вариантов заполнения.
		Если ТекущийРаздел = "Раздел1" или ТекущийРаздел = "Раздел2" или ТекущийРаздел = "Декларация" Тогда			
			ФлНужноВывестиСтраницуРаздела12 = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы.
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(Форма);
	
	Если НЕ ФлЗначенияИдентичны Тогда
		
		РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);
		
		Если НЕ ТекущийРаздел = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРаздел);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРаздела = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРаздела);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФлНужноПересчитатьРазделы12 Тогда
		
		ПересчетИтогов_ДлительнаяОперация(Форма);		
	
	КонецЕсли; 
	
	Если ФлНужноВывестиСтраницуРаздела12 Тогда
		
		Форма.ПоказатьПоИндексуПриВыводеСтраницы = Истина;
		Форма.НомерСтраницыПриВыводеСтраницы = НомерСтраницыРаздела - 1;		
		Форма.НаименованиеРазделаПриВыводеСтраницы = ТекущийРаздел;
	
		ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФормаНавигацииПоОшибкам

Процедура ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СохраненныйОтчет", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	
	НаименованиеДекларации = Форма.Заголовок;
	ПараметрыФормы.Вставить("НазваниеДекларации", НаименованиеДекларации);
	
	ПараметрыФормы.Вставить("АдресХранилищаПредставленияОшибок", Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Форма.СтруктураРеквизитовФормы.Вставить("ПараметрыФормыОшибок", ПараметрыФормы);	
	
	Если (НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы) и Форма.ЭтоВебКлиент Тогда
	    ВыполнитьСЗадержкой(Форма, "Подключаемый_ОткрытьФормуНавигацииПоОшибкамБезПараметров", Форма.ВремяЗадержки);
	Иначе	
	    ОткрытьФормуНавигацииПоОшибкамБезПараметровАЛКО(Форма);
	КонецЕсли; 
		
КонецПроцедуры

// Вызывается из формы отчета в случае Веб клиента.
Процедура ОткрытьФормуНавигацииПоОшибкамБезПараметровАЛКО(Форма) Экспорт
	
	Перем ПараметрыФормы;
	
	Форма.СтруктураРеквизитовФормы.Свойство("ПараметрыФормыОшибок", ПараметрыФормы);
	Если ПараметрыФормы = Неопределено Тогда
	    Возврат;	
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("ОбщаяФорма.АЛКОФормаСообщенийОбОшибках", ПараметрыФормы, Форма.ВладелецФормыОшибок);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		
		ФормаНавигацииПоОшибкам.Закрыть();				
		ФормаНавигацииПоОшибкам = ПолучитьФорму("ОбщаяФорма.АЛКОФормаСообщенийОбОшибках", ПараметрыФормы, Форма.ВладелецФормыОшибок);
		
	КонецЕсли;
		
	ОткрытьФорму(ФормаНавигацииПоОшибкам);	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеРасшифровать

Процедура РасшифроватьАЛКО(Форма)
		
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 				    	Форма.СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") - 1), 7), Сред(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеТитульный

Процедура ОрганизацияОткрытиеЗавершениеАЛКО(Результат, Форма) Экспорт
	
	Форма.ОбновитьНаСервере();
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроверкаВыгрузки

Процедура НачалоПроверкиВыгрузкиАЛКО(Форма)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершениеАЛКО", ЭтотОбъект, Форма);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВыгрузкуЗавершениеАЛКО(Отказ, Форма) Экспорт
	
	Если Отказ Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;		
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчетаАЛКО(Форма);
		
КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчетаАЛКО(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Проверка выгрузки невозможна.'");
		Сообщение.Сообщить();
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаПослеСохраненияАЛКО", ЭтотОбъект, Форма);
	
	Если Форма.Модифицированность Тогда
		СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчетаПослеСохраненияАЛКО(Результат, Форма) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда		
		ПроверитьВыгрузкуОтчета_ДлительнаяОперацияАЛКО(Форма);
	Иначе	
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение проверки выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчета_ДлительнаяОперацияАЛКО(Форма)
	
	Если Форма.Открыта() И Форма.Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение проверки выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
		
КонецПроцедуры

Процедура ПослеВыполненияЗадания_ПроверкиВыгрузкиАЛКО(Форма)
		
	РезультатПроверки = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьРезультатПроверкиОтчетаАЛКО(
												Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);

		
    Если РезультатПроверки = 1 ИЛИ РезультатПроверки = 2 Тогда
	
		// Есть ошибки или сообщения.
		ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);
				
	ИначеЕсли РезультатПроверки = 0 Тогда
				
		ПоказатьПредупреждение(,НСтр("ru='Ошибок не обнаружено!'"));
		
	ИначеЕсли РезультатПроверки = 3 Тогда
				
		ПоказатьПредупреждение(,НСтр("ru='Непредвиденная ошибка!
										 |Обратитесь в службу поддержки и приложите выгрузку ИБ.'"));
		
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеВыгрузить

Процедура НачалоВыгрузкиАЛКО(Форма)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершениеАЛКО", ЭтотОбъект, Форма);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
	
КонецПроцедуры

Процедура ВыгрузитьЗавершениеАЛКО(Отказ, Форма) Экспорт
	
	Если Отказ Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);			
		Возврат;		
	КонецЕсли;
	
	ВыгрузитьОтчетАЛКО(Форма);
	
КонецПроцедуры

Процедура ВыгрузитьОтчетАЛКО(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетПослеСохраненияАЛКО", ЭтотОбъект, Форма);
	
	Если Форма.Модифицированность Тогда
		СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОтчетПослеСохраненияАЛКО(Результат, Форма) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда		
		ВыгрузитьОтчет_ДлительнаяОперацияАЛКО(Форма);
	Иначе	
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОтчет_ДлительнаяОперацияАЛКО(Форма)
	
	Если Форма.Открыта() И Форма.Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
		
КонецПроцедуры

Процедура ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации)
	
	РезультатПроверки = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьРезультатПроверкиОтчетаАЛКО(
												Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
		
    Если РезультатПроверки = 1 Тогда
	
		// Есть ошибки.
		ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);
		
	ИначеЕсли РезультатПроверки = 2 Тогда
		
		// Есть сообщения.		
		ВопросПродолженияВыгрузкиАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли РезультатПроверки = 0 Тогда
		
		// Ошибок нет, можно выгружать.
		ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли РезультатПроверки = 3 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Непредвиденная ошибка!
										 |Обратитесь в службу поддержки и приложите выгрузку ИБ.'"));
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации)

	ВидДлОперацииВыгрузка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	
	ИмяКонечногоФайла = Форма.ФайлВыгрузкиИмя + ".xml";
	
	Если ЭтоАдресВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных) Тогда
		
		Если ВидДлОперации = ВидДлОперацииВыгрузка Тогда		
					
			ПолучитьФайл(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, ИмяКонечногоФайла, Истина);
			
		ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда
				
			ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", Форма.КонтекстЭДОКлиент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЗавершение", Форма.ЭтотОбъект, ДополнительныеПараметры);
			Форма.КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВФСРАР(
	            Форма,
	            ОписаниеОповещения,
	            ,
	            ,
	            ,
	            ,
	            ,
	            ,
	            ,
	            Форма.ОрганизацияОтчета,
	            Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных,
	            ИмяКонечногоФайла);
			
		ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
			
			РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(
				Форма, 
				"ФСРАР", 
				Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, 
				ИмяКонечногоФайла);
			
		ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
		
			РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
				Форма, 
				"ФСРАР",
				Форма.СтруктураДанныхТитульный.КодРегиона, 
				Истина, 
				Форма.СтруктураРеквизитовФормы.мСохраненныйДок, 
				Форма.ОрганизацияОтчета, 
				Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных,
				ИмяКонечногоФайла);
				
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Процедура ВопросПродолженияВыгрузкиАЛКО(Форма, ВидДлОперации)
	
	ВидДлОперацииВыгрузка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета		= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка 			= ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	
	Если ВидДлОперации = ВидДлОперацииВыгрузка или ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда	
		ТекстКнопкиДа = НСтр("ru='Продолжить выгрузку'");
	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
		ТекстКнопкиДа = НСтр("ru='Продолжить отправку'");
	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
		ТекстКнопкиДа = НСтр("ru='Продолжить проверку'");
	КонецЕсли;
	
	ТекстКнопкиНет = НСтр("ru='Отменить и посмотреть'");
	
	ТекстВопроса = НСтр("ru='Исходя из правил заполнения и формата выгрузки отчета, 
							|некоторые ситуации не являются формально ошибками, 
							|но существует вероятность ошибочного заполнения.
							|
							|В данном отчете обнаружены такие ситуации и сформированы сообщения о них.
							|
							|Необходимо внимательно просмотреть эти сообщения и убедиться, 
							|что все правильно и ошибок нет, при необходимости исправить.
							|
							|Если Вы смотрели эти сообщения, и убедились что ошибок нет,
							|нажмите """ + ТекстКнопкиДа + """ '");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, ТекстКнопкиДа);
	Кнопки.Добавить(КодВозвратаДиалога.Нет, ТекстКнопкиНет);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ВидДлОперации", ВидДлОперации);
	
	Оповещение = Новый ОписаниеОповещения("ВопросПродолженияВыгрузкиЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
КонецПроцедуры

Процедура ВопросПродолженияВыгрузкиЗавершениеАЛКО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ВидДлОперации = ДополнительныеПараметры.ВидДлОперации;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЗаполнить

// Вызывается при автоматическом заполнении отчета при создании.
// Данный режим на данный момент не используется, автозаполнение только по кнопке Заполнить.
Процедура ЗаполнитьАвтоПриСозданииОтчетаАЛКО(Результат, Форма) Экспорт
	
	// Заполнение при открытии формы.
	Если НЕ Форма.Модифицированность Тогда		
		ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма);
	Иначе	
	    // отказ от сохранения или ошибка сохранения.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАвтоАЛКО(Форма)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(Форма.ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершениеАЛКО", ЭтотОбъект, Форма);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьАвтоЗавершениеАЛКО(Отказ, Форма) Экспорт
	
	Если Отказ Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);			
		Возврат;		
	КонецЕсли;
	
	// Сохранение не требуется.
	ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма)

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
	
КонецПроцедуры

Процедура ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма)

	////////////////////////////////////////////////////////
	// Обновляем дерево разделов и выводим текущий раздел.
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(Форма);
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Иначе
		Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		    Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьИдентификатор();			
		КонецЕсли;		
	КонецЕсли;
	
	// Заставим принудительно обновить многострочную страницу.
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = 0;
	
	Форма.ТекущийЭлемент = Форма.Элементы.РазделыОтчета.ТекущийЭлемент;
	
	Форма.Элементы.Расшифровать.Доступность = Форма.Элементы.Расшифровать.Видимость;
	
	Форма.Модифицированность = Истина;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеВосстановитьОтчет

Процедура ВосстановитьДанныеТаблицПриКопированииАЛКО(Результат, Форма) Экспорт
	
	//Если РезультатСохранения Тогда
	Если НЕ Форма.Модифицированность Тогда 	
		ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма);
	Иначе
		
	    // Отказ от сохранения или ошибка сохранения,
		// поскольку для копирования данных регистров необходим записанный документ отчета,
		// нет смысла открывать.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма)
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
			
КонецПроцедуры

Процедура ПриОтменеВосстановленияАЛКО(Форма)
	
	// Импорт данных из старого формата.
	// Ничего не делаем - просто закрываем.
	Форма.Модифицированность = Ложь;
	Форма.Закрыть();
					
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеСохранить

Процедура РезультатСохраненияАЛКО(Форма, Автосохранение = Ложь, КодИФНС, КПП, Вариант, 
								ВидДокументаНомерКорректировкиИзменен = Ложь, НаимТекРаздела, 
								ВыполняемоеОповещение = Неопределено)
								
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);							
	 							
		
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
	    Форма.ОбщийПараметрПроцедур =  Новый Структура(); 		
	КонецЕсли;

	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	
	ОбщийПараметрПроцедур.Вставить("Автосохранение", Автосохранение);
	ОбщийПараметрПроцедур.Вставить("КодИФНС", КодИФНС);
	ОбщийПараметрПроцедур.Вставить("КПП", КПП);
	ОбщийПараметрПроцедур.Вставить("Вариант", Вариант);
	ОбщийПараметрПроцедур.Вставить("ВидДокументаНомерКорректировкиИзменен", ВидДокументаНомерКорректировкиИзменен);
	ОбщийПараметрПроцедур.Вставить("НаимТекРаздела", НаимТекРаздела);
	
	Если НЕ ВыполняемоеОповещение = Неопределено Тогда		
		Форма.УниверсальноеОписаниеОповещения = ВыполняемоеОповещение;		
	КонецЕсли;	
	
	Форма.РезультатСохранения = Форма.СохранитьДанныеОтчетаНаСервере(Автосохранение, КодИФНС, КПП, Вариант, 
															ВидДокументаНомерКорректировкиИзменен, НаимТекРаздела);
								
	
	Если Форма.РезультатСохранения Тогда
		// Присваиваем ключ уникальности.
		Форма.КлючУникальности = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
		// Очищается Журнал изменений в регистрах по документу отчета.
		СохранитьРегистрыСведенийАЛКО(Форма);		
	КонецЕсли; 
	 	 
КонецПроцедуры

Процедура СохранитьСВопросомАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Форма, Автосохранение, Вариант, ВыполняемоеОповещение, "
												+ "ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", 
												Форма, Автосохранение, Вариант, ВыполняемоеОповещение, 
												ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, 
												ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершениеАЛКО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
				
		Форма.РезультатСохранения = Ложь;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполняемоеОповещение = Неопределено;
		ДополнительныеПараметры.ВыполняемоеОповещение = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
			// Документ ни разу не сохранялся.			
			Форма.Модифицированность = Ложь; 
			Форма.Закрыть();
			
		    Возврат;
			
		КонецЕсли;
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, 
												ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
	
КонецПроцедуры

Процедура СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, 
												ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Форма, Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", 
												Форма, Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
		
	Иначе
							
		РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, , Форма.ТекущийРаздел, ВыполняемоеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросПриИзмененииВидаДокументаЗавершениеАЛКО(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
				
	Иначе
		
		Форма.РезультатСохранения = Ложь;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполняемоеОповещение = Неопределено;
		ДополнительныеПараметры.ВыполняемоеОповещение = Неопределено;
		
		// Отмена сохранения.
		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			
			// Документ ни разу не сохранялся.			
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
			
		    Возврат;
			
		КонецЕсли;
		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено) 
		и ВидДокументаНомерКорректировкиИзменен
		// Исключаем случай копирования отчета.
		и (Форма.СтруктураРеквизитовФормы.мДокументИсточник = Неопределено) Тогда
		
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("Форма", Форма);
		ДополнительныеПараметрыОповещения.Вставить("Оповещение", ВыполняемоеОповещение);
		ВыполняемоеОповещение = Новый ОписаниеОповещения("СкопироватьДанныеРегистровОтчетаПриЗаписиКакНовыйАЛКО", 
																ЭтотОбъект, ДополнительныеПараметрыОповещения);
			
	КонецЕсли; 
	
	РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, 
								ВидДокументаНомерКорректировкиИзменен, Форма.ТекущийРаздел, ВыполняемоеОповещение);
		
КонецПроцедуры

// Формально длительная операция, но на самом деле выполняется в обычном режиме, поскольку
// заключается в очистке регистра сведений Журнал от записей редактирования, что происходит достаточно быстро.
// Поэтому режим длительной операции в РегламентированнаяОтчетностьАЛКОВызовСервера.СохранитьРегистры()
// отключен. Но всегда можно включить если потребуется.
Процедура СохранитьРегистрыСведенийАЛКО(Форма)
				
	// Определим идет закрытие или нет	
	Если НЕ Форма.УниверсальноеОписаниеОповещения = Неопределено Тогда
		
		ИмяПроцедуры = Форма.УниверсальноеОписаниеОповещения.ИмяПроцедуры;
		Если СтрНайти( ВРег(ИмяПроцедуры), ВРег("ПослеСохраненияФормыЗавершение") ) > 0 
			или СтрНайти( ВРег(ИмяПроцедуры), ВРег("Закрыть") ) > 0 Тогда				
			// Закрытие могло быть инициировано не из формы.
			Форма.Активизировать();
		КонецЕсли;			
	
	КонецЕсли;		
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
		
КонецПроцедуры

Процедура ПослеСохраненияАЛКО(Форма)
	
	// Если текущий раздел многострочный - нужно обновить таблицу формы.		
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел)  Тогда	
		
		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда			
		    Форма.ТекущийРаздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;											
		Иначе	
		    Форма.ТекущийРаздел = "Титульный";
		КонецЕсли;
			
	КонецЕсли; 
			
	Если НЕ Форма.ТекущийРаздел = "Титульный" Тогда
		
		Форма.ТекущийИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьТочныйИдГруппыПоРазделуАЛКО(
																						Форма, Форма.ТекущийРаздел);
		ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
		
		// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
		Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(
																Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
		Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(
																Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
				
		
		ЭлементТаблицыФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + Форма.ТекущийИдГруппы);
		Если НЕ ЭлементТаблицыФормы = Неопределено Тогда
		    ЭлементТаблицыФормы.Обновить();		
		КонецЕсли; 
				
	КонецЕсли;
		
	Если Форма.РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(Форма);
		Форма.Модифицированность = Ложь;
		
	КонецЕсли;
	
	// Сбрасываем флаг до отработки оповещения, чтобы предотвратить
	// повторную блокировку при записи после отработки оповещения.
	Форма.ЭтоНовыйДокумент 			= Ложь;
	
	Если НЕ Форма.УниверсальноеОписаниеОповещения = Неопределено Тогда
		
		Оповещение = Форма.УниверсальноеОписаниеОповещения;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполнитьОбработкуОповещения(Оповещение);
		
	Иначе
		
		// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
		// сделана группа - оболочка панели отправки. 
		// Видимость отключена в конфигураторе и отключается 
		// в процедуре РегламентированнаяОтчетностьАЛКО.ОкончаниеИнициализацииАЛКО().
		Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Истина;
	
	КонецЕсли;
	
	// Сбрасываем флаги инициации.	
	Форма.НужноСкопировать 			= Ложь;
	Форма.НужноЗаполнитьАвто 		= Ложь;
	Форма.НужноСохранить 			= Ложь;
	Форма.НужноВосстановитьДанные 	= Ложь;
			
КонецПроцедуры

Процедура ЗаписатьИЗакрытьАЛКО(Форма)
		
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершениеАЛКО", ЭтотОбъект, Форма);
	СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
	
КонецПроцедуры

// Используется не при копировании отчетов, а при записи отчета 
// с измененным номером корректировки как новый.
// Выполняется как оповещение после Сохранения.
Процедура СкопироватьДанныеРегистровОтчетаПриЗаписиКакНовыйАЛКО(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если НЕ Форма.Модифицированность Тогда
		
		СкопироватьДанныеРегистров_ДлительнаяОперацияАЛКО(Форма);
	
	КонецЕсли;

	ВыполняемоеОповещение = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
	    ДополнительныеПараметры.Свойство("Оповещение", ВыполняемоеОповещение);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("ОписаниеОповещения") Тогда	
	    ВыполняемоеОповещение = ДополнительныеПараметры;
	КонецЕсли; 
	 
	Форма.ВыполняемоеОповещениеПослеКопированияРегистров = ВыполняемоеОповещение;
	
КонецПроцедуры

Процедура СкопироватьДанныеРегистров_ДлительнаяОперацияАЛКО(Форма)
	
	Если Форма.Открыта() И Форма.Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, копирование данных регистров невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);
			
КонецПроцедуры

Процедура ПриОтменеКопированияРегистровОтчетаПриЗаписиКакНовыйАЛКО(Форма)

	Форма.ВыполняемоеОповещениеПослеКопированияРегистров = Неопределено;
	
	// Возвращаем в СтруктураРеквизитовФормы.мСохраненныйДок старое значение из СтруктураРеквизитовФормы.мДокументИсточник.
	// Очищаем СтруктураРеквизитовФормы.мДокументИсточник.
	// Удаляем вновь созданный документ отчета для отчета с новым номером корректировки.
	// Блокируем данные для редактирования.
	Форма.ПриОтменеКопированияДанныхНаСервере();
	
	// Обновляем списки отчетов внешних форм, чтобы удаленный документ отчета оттуда удалился.
	ДокУправляющейФормыПередОткрытием = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ДокУправляющейФормыПередОткрытием", ДокУправляющейФормыПередОткрытием);
	
	ОбновитьФормыСоСпискомОтчетов(ДокУправляющейФормыПередОткрытием);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеДобавитьВиноградник

Процедура ДобавитьВиноградникАЛКО(Форма)
	
	// Нужно зафиксировать данные текущего ОП.	
	ТекущиеСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
							Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.СведенияОбОП);
							
	ТекущийФлагГоловногоОП = Форма.АктивнаяСтраницаРаздела.ФлагГоловногоОП;
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
	    Форма.ОбщийПараметрПроцедур =  Новый Структура(); 		
	КонецЕсли;

	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	ОбщийПараметрПроцедур.Вставить("ТекущиеСведенияОбОП", ТекущиеСведенияОбОП);
	ОбщийПараметрПроцедур.Вставить("ТекущийФлагГоловногоОП", ТекущийФлагГоловногоОП);
	
	// Выставляем состояние для дальнейшей обработки.
	Форма.ТекущееСостояние = "ДобавлениеВиноградника";
	
	// Добавляем страницу.
	Форма.ДобавитьСтраницуНаСервере();;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеУдалитьСтраницу

Процедура УдалитьСтраницуАЛКО(Форма)
	
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершениеАЛКО", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

Процедура УдалитьСтраницуЗавершениеАЛКО(РезультатВопроса, Форма) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда		
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;		
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		Форма.НомерАктивнойСтраницыМногострочногоРаздела = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 2;
	КонецЕсли;
	
	Форма.УдалитьСтраницуНаСервере();
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
				
КонецПроцедуры

Процедура УдалитьВсеСтраницыАЛКО(Форма)
	
	ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, "ОчиститьТекущийРаздел" + Форма.ТекущийРаздел);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
 

