
#Область СлужебныеПроцедурыИФункции

#Область ЗаказыНаПередачуВПроизводство

//++ НЕ УТ
Функция СоздатьЗаказыНаПередачуВПроизводство(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура();
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрыФормы.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований);
	Иначе
		ПараметрыФормы.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований[0]);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.Форма",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	
КонецФункции
//-- НЕ УТ

#КонецОбласти

#Область ЗаказыПоставщикам

Функция СозданиеЗаказовПоставщикамНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ВводНаОснованииУТВызовСервера.ПроверитьВозможностьВводаНаОсновании(ОписаниеКоманды.ОбъектыОснований[0]);
	ПараметрыФормы = Новый Структура("ДокументОснование", ОписаниеКоманды.ОбъектыОснований[0]);
	ОткрытьФорму(
		"Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецФункции

#КонецОбласти

#Область СчетНаОплату

Функция СоздатьСчетНаОплату(ОписаниеКоманды) Экспорт
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(ОписаниеКоманды.ОбъектыОснований[0]);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

Функция СоздатьСчетНаОплатуРеализацияАкт(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрыОткрытияФормы = ВводНаОснованииУТВызовСервера.СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований[0]);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru='%Документ% оформлена по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ОписаниеКоманды.ОбъектыОснований[0]);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

Функция СоздатьСчетНаОплатуПоДоговору(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если НЕ ВводНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	

КонецФункции

Функция СоздатьСчетНаОплатуПредоплатаПоДоговору(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если Не ВводНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

//++ НЕ УТКА

Функция СоздатьСчетНаОплатуЗаказДавальца(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
		ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
		ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(ОписаниеКоманды.ОбъектыОснований[0]);
		ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

Функция СоздатьСчетНаОплатуОтчетДавальцу(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыОткрытияФормы = ВводНаОснованииУТВызовСервера.СчетНаОплатуОтчетДавальцуПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru='%Документ% оформлен по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область ДокументыНаОснованииЗаказа

Функция АктВыполненныхРаботСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.АктВыполненныхРаботПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований);
	Если ПараметрыОткрытия <> Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	КонецЕсли;

КонецФункции

Функция ВнутреннееПотреблениеТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ВнутреннееПотреблениеТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция ПоступлениеТоваровУслугСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПоступлениеТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции

Функция СборкаТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.СборкаТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.СборкаТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция РеализацияТоваровУслугСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ВводНаОснованииУТКлиент.РеализацияТоваровУслугСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований);
	
	Если НЕ ПараметрыОткрытия = Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
		
КонецФункции

Функция ПеремещениеТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПеремещениеТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

//++ НЕ УТ

Функция ПередачаСырьяПереработчикуСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ВводНаОснованииУТКлиент.ПередачаСырьяПереработчикуСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПередачаСырьяПереработчикуПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований);
	
	Если Не ПараметрыОткрытия = Неопределено Тогда
		
		ОткрытьФорму(
			"Документ.ПередачаСырьяПереработчику.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область Документооборот

Функция ИнтеграцияС1СДокументооборотСоздатьПисьмо(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецФункции 

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение", ЭтотОбъект, ОбъектИС);
		ИнтеграцияС1СДокументооборотКлиент.НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не настроено подключение к 1С:Документообороту или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение(Результат, ОбъектИС) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Предмет", Результат);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", Параметры);
	
КонецПроцедуры

Функция ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецФункции 

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс(ОбъектИС);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не настроено подключение к 1С:Документообороту или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СогласованиеПродажи

Функция СоздатьНовоеСогласованиеЗаказаКлиента(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		Основание = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеПродажи.ФормаОбъекта",
	Новый Структура("Основание", Основание),
	,
	,);

КонецФункции 

#КонецОбласти 

#Область СогласованиеЗакупки

Функция СоздатьНовоеСогласованиеЗаказаПоставщику(ОписаниеКоманды) Экспорт

	ОткрытьФорму("БизнесПроцесс.СогласованиеЗакупки.ФормаОбъекта",
	Новый Структура("Основание",ОписаниеКоманды.ОбъектыОснований),
	,
	,);

КонецФункции 

#КонецОбласти 


Функция СозданиеСвязанныхОбъектов(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыВыполненияКоманды.Источник = ОписаниеКоманды.Форма;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(
		ОписаниеКоманды.ОбъектыОснований,
		ПараметрыВыполненияКоманды,
		ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов());

КонецФункции 

Функция ОпределитьСправочноеРазмещениеПоЯчейкам(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументПриемки",ПараметрКоманды);
	ОткрытьФорму("Обработка.СправочноеРазмещениеНоменклатуры.Форма.Форма",Параметры,ПараметрыВыполненияКоманды.Источник,ПараметрКоманды);

КонецФункции

Функция ПередачаВЭксплуатациюНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции

Функция СписаниеНаРасходыАктивыНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции

//++ НЕ УТКА
Функция СоздатьНаОснованииМаршрутныхЛистов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ТекстПредупреждения = Неопределено;
	ПараметрыОформления = ВводНаОснованииУТВызовСервера.ВыпускПродукцииПараметрыОформленияВыпуска(ПараметрКоманды, ТекстПредупреждения);
	Если ПараметрыОформления = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРаспоряжений = Новый Массив;
	Для каждого Ссылка Из ПараметрКоманды Цикл
		СтруктураРаспоряжения = Новый Структура("Распоряжение", Ссылка);
		ДанныеРаспоряжений.Добавить(СтруктураРаспоряжения);
	КонецЦикла;
	
	// Откроем форму
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки",     ПараметрыОформления);
	ПараметрыОснования.Вставить("ДанныеРаспоряжений", ДанныеРаспоряжений);
	
	ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));

КонецФункции
//-- НЕ УТКА

//++ НЕ УТКА
Функция СоздатьНаОснованииСпецификации(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ЗначенияЗаполнения = Новый Структура("МассивОбъектов, ТипОснования", ПараметрКоманды, Тип("СправочникСсылка.РесурсныеСпецификации"));
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ПлановаяКалькуляция.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции
//-- НЕ УТКА

Функция СоздатьНаОснованииРасходныйОрдерНаТовары(ОписаниеКоманды) Экспорт
	
	ОчиститьСообщения();
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	МассивРаспоряжений = ПараметрКоманды;
		
	ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроекСозданияОрдеров",Новый Структура("МассивРаспоряжений",МассивРаспоряжений),,,,,);	
	
КонецФункции

Функция АктНаПередачуПрав(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	
	ПараметрыОснования = Новый Структура;
	
	ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
	ПараметрыОснования.Вставить("ЗаполнятьПоОстаткам", Истина);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи",
	ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"));
	
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));

КонецФункции

Функция СоздатьЗаказНаВнутреннееПотребление(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаВнутреннееПотребление");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);

КонецФункции 

Функция СоздатьЗаказНаПеремещение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаПеремещение");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды);
	
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииПоступленияТоваровУслугПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПоступленияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды);
	
КонецФункции

Функция СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада",
			ВводНаОснованииУТКлиент,
			ОписаниеКоманды);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ОписаниеКоманды.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ОписаниеКоманды);
		
	КонецЕсли;
	
КонецФункции

Процедура СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(ДополнительныеПараметры.ОбъектыОснований) = Тип("Массив")
		И ДополнительныеПараметры.ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований;
	Иначе
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада",
			ВводНаОснованииУТКлиент, ОписаниеКоманды);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ОписаниеКоманды.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ОписаниеКоманды);
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьПоддержаниеЗапасов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ВводНаОснованииУТВызовСервера.УстановитьПоддержаниеЗапасов(ПараметрКоманды);
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецФункции

Функция НастройкаПоддержанияЗапасов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецФункции

Функция ПомощникОформленияСкладскихАктов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		РезультатПроверки = ВводНаОснованииУТВызовСервера.ПроверитьСтатусПересчетаНаСервере(ПараметрКоманды);
		Если Не РезультатПроверки.МожноОткрытьПомощник Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.СообщениеПользователю);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", 
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
		
КонецФункции

Функция КорректировочныйСчетФактура(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	РеквизитыДляОбработки = ВводНаОснованииУТВызовСервера.СтруктураРеквизитовДляОбработки(ПараметрКоманды);
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ТипЗнч(ПараметрКоманды)=Тип("ДокументСсылка.СчетФактураВыданный") тогда
		ТипСчетФактуры = "Выданный";
	ИначеЕсли ТипЗнч(ПараметрКоманды)=Тип("ДокументСсылка.СчетФактураПолученный") тогда
	    ТипСчетФактуры = "Полученный";
	КонецЕсли;
	
	Если РеквизитыДляОбработки.Исправление Тогда
		
		ЗначенияЗаполнения.Вставить("Исправление", Истина);
		ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
		
	ИначеЕсли РеквизитыДляОбработки.Корректировочный Тогда
		
		Основания = РеквизитыДляОбработки.Основания;
		
		Если Основания.Количество() = 1 Тогда
			ЗначенияЗаполнения.Вставить("ДокументОснование", Основания[0]);
		Иначе
			ЗначенияЗаполнения.Вставить("ДокументОснование", Основания);
			ЗначенияЗаполнения.Вставить("Дата", РеквизитыДляОбработки.ДатаКорректировки);
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("Корректировочный", Истина);
		
	Иначе
		
		Если ТипСчетФактуры="Выданный" тогда
			ТекстОперации = НСтр("ru = 'Корректировка реализации'");
		Иначе
			ТекстОперации = НСтр("ru = 'Корректировка поступления'");
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для выбранного документа уже введен корректировочный счет-фактура.
		|Чтобы ввести новую корректировку, необходимо создать документ ""%Операция%"".'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Операция%",ТекстОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактура"+ТипСчетФактуры+".ФормаОбъекта",
			ПараметрыФормы,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно);

КонецФункции

Функция ИсправительныйСчетФактураВыданныйАванс(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Исправление", Истина);
	ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактураВыданныйАванс.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецФункции

Функция ИсправительныйСчетФактураПолученныйАванс(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Исправление", Истина);
	ЗначенияЗаполнения.Вставить("СчетФактураОснование", ПараметрКоманды);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.СчетФактураПолученныйАванс.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецФункции

Функция ИсправлениеПрочегоНачисленияНДС(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.ЗаписьКнигиПродаж.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецФункции


//++ НЕ УТКА
Функция ОтгрузкаПоМаршрутнымЛистам(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыФормы = Новый Структура("СписокМаршрутныхЛистов", ПараметрКоманды);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма.КорректировкаЗаказаМатериалов", 
					ПараметрыФормы, 
					ПараметрыВыполненияКоманды.Источник, 
					ПараметрыВыполненияКоманды.Уникальность, 
					ПараметрыВыполненияКоманды.Окно, 
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции
//-- НЕ УТКА

//++ НЕ УТКА
Функция КорректировкаЗаказаМатериалов(ОписаниеКоманды) Экспорт
	
	Перем ТекстПредупреждения;
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;

	Если НЕ ВводНаОснованииУТВызовСервера.ВводКорректировкиДоступен(ПараметрКоманды, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СписокЗаказов", ПараметрКоманды);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", 
			ПараметрыФормы, 
			ПараметрыВыполненияКоманды.Источник, 
			ПараметрыВыполненияКоманды.Уникальность, 
			ПараметрыВыполненияКоманды.Окно, 
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции
//-- НЕ УТКА

//++ НЕ УТКА
Функция СозданиеВыработкиСотрудников(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	МассивРаспоряжений = Новый Массив;
	МассивРаспоряжений.Добавить(ПараметрКоманды);
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрКоманды, "Статус, УправлениеМаршрутнымиЛистами, Проведен");
		
		ЕстьОшибкиСтатус =  Не (
			Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется")
			Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен")
			Или (
				(Реквизиты.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование")
				ИЛИ Реквизиты.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций"))
				И Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению")
				)
			);
		
		ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство");
		
		ТекстОшибкиСтатус = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""К выполнению"", ""Выполняется"" и ""Выполнен"".'");
		
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", ПараметрКоманды);
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
		
	ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрКоманды, "Статус, Проведен");
		
		ЕстьОшибкиСтатус =  Не (
			Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат")
			Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен")
			);
		
		ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство");
		
		ТекстОшибкиСтатус = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""Начат"", и ""Завершен"".'");
		
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", ПараметрКоманды);
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
		
	ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрКоманды, "Проведен");
		ЕстьОшибкиСтатус = Ложь;
		ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство");
		
	ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.РаспределениеВозвратныхОтходов") Тогда
		
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрКоманды, "Проведен");
		ЕстьОшибкиСтатус = Истина;
		ТекстОшибкиСтатус = НСтр("ru='Операция недоступна для объекта.'");
		
	Иначе
		
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрКоманды, "Статус, Проведен");
		
		ЕстьОшибкиСтатус =  Не (Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Выполняется")
			Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Закрыт"));
		
		ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Ремонт");
		
		ТекстОшибкиСтатус = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""Выполняется"" и ""Закрыт"".'");
		
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", ПараметрКоманды);
		ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
		
	КонецЕсли;
	
	ЕстьОшибкиПроведен = Не Реквизиты.Проведен;
	
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
		
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		ВызватьИсключение ТекстОшибкиСтатус;
		
	КонецЕсли;
	
	ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивРаспоряжений, ВидНаряда);
	
КонецФункции
//-- НЕ УТКА

//++ НЕ УТ
Функция СписанияЗатратНаВыпускНаОснованииВыпусковПродукции(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ТекстОшибки = ВводНаОснованииУТВызовСервера.СписаниеЗатратНаВыпускПроверитьОбъектыОснований(ПараметрКоманды);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("Документ.СписаниеЗатратНаВыпуск.ФормаОбъекта",
		,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	ОбъектФормы = ФормаНового.Объект;
	Результат = ВводНаОснованииУТВызовСервера.СписаниеЗатратНаВыпускПараметрыВводаНаОсновании(ПараметрКоманды, ОбъектФормы);
	
	Если Результат.Свойство("ОткрытьФормуНового") Тогда
		
		КопироватьДанныеФормы(ОбъектФормы, ФормаНового.Объект);
		ФормаНового.ОбновитьПриОткрытии = Истина;
		ФормаНового.Открыть();
	
	ИначеЕсли Результат.СписокДокументов.Количество() = 0 Тогда
		
		ОткрытьФорму("Документ.СписаниеЗатратНаВыпуск.ФормаОбъекта",
			Новый Структура("Основание", Результат),
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	ИначеЕсли Результат.СписокДокументов.Количество() > 0 Тогда
		
		ОткрытьФорму("Документ.СписаниеЗатратНаВыпуск.Форма.ПодтверждениеНовыхДокументов",
			Новый Структура("СписокДокументов", Результат.СписокДокументов),
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		
	КонецЕсли;
	
КонецФункции

//-- НЕ УТ

#Область КорректировкаНазначения

Функция ОткрытьМастерСнятияРезерва(ОписаниеКоманды) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ОписаниеКоманды.Форма);
	
КонецФункции

Функция ОткрытьМастерРезервирования(ОписаниеКоманды) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ОписаниеКоманды.Форма);
	
КонецФункции

#КонецОбласти

Функция СоздатьРасходныйКассовыйОрдер(ОписаниеКоманды) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОписаниеКоманды,
		"РасходныйКассовыйОрдер");
	
КонецФункции

Функция СоздатьСписаниеБезналичныхДС(ОписаниеКоманды) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОписаниеКоманды,
		"СписаниеБезналичныхДенежныхСредств");
	
КонецФункции

Функция ПоручениеЭкспедитору(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента",
		Новый Структура("Основание", ОписаниеКоманды.ОбъектыОснований));	
	
КонецФункции

Функция СписаниеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму(
		"Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецФункции

Функция ПоступлениеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму(
		"Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецФункции

Функция ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецФункции

Функция ОткрытьПомощникФормированияДокументовОплаты(ОписаниеКоманды) Экспорт
	
	ДенежныеСредстваКлиент.ОткрытьПомощникФормированияДокументовОплаты(ОписаниеКоманды.Форма.Элементы.Список);
	
КонецФункции

//++ НЕ УТ
Функция ТаможеннаДекларацияЭкспортНаОсновании(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму("Документ.ТаможеннаяДекларацияЭкспорт.Форма.ФормаДокумента",
		Новый Структура("Основание", ОписаниеКоманды.ОбъектыОснований));
	
КонецФункции
//-- НЕ УТ

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды)
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада",
			ВводНаОснованииУТКлиент, ОписаниеКоманды);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ОписаниеКоманды.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.ОбъектыОснований) = Тип("Массив")
			 И ДополнительныеПараметры.ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований;
	Иначе
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.ОбъектыОснований) = Тип("Массив")
			 И ДополнительныеПараметры.ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований;
	Иначе
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

//++ НЕ УТКА
Функция СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальца(ОписаниеКоманды) Экспорт
	
	ОбъектыОснований = ОписаниеКоманды.ОбъектыОснований;
	РезультатПроверки = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
	Иначе
		Форма = ОписаниеКоманды.Форма;
		ОписаниеКоманды.Удалить("Форма");
		ВводНаОснованииКлиент.ВыполнитьКомандуСоздатьНаОсновании(ОписаниеКоманды.Идентификатор,
			РезультатПроверки.ОбъектыОснований, Форма, ОписаниеКоманды);
	КонецЕсли;
	
КонецФункции
//-- НЕ УТКА

//++ НЕ УТКА
Функция СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца(ОписаниеКоманды) Экспорт
	
	ОбъектыОснований = ОписаниеКоманды.ОбъектыОснований;
	РезультатПроверки = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
	Иначе
		Форма = ОписаниеКоманды.Форма;
		ОписаниеКоманды.Удалить("Форма");
		ВводНаОснованииКлиент.ВыполнитьКомандуСоздатьНаОсновании(ОписаниеКоманды.Идентификатор,
			РезультатПроверки.ОбъектыОснований, Форма, ОписаниеКоманды);
	КонецЕсли;
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти
