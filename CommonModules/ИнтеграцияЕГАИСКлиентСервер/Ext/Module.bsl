
#Область ПрограммныйИнтерфейс

// Возвращает структуру, необходимую для формирования исходящего запроса в УТМ.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид исходящего документа.
//
// Возвращаемое значение:
//   Структура - параметры исходящего запроса.
//
Функция ПараметрыИсходящегоЗапроса(ВидДокумента) Экспорт
	
	Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций") Тогда
		
		Возврат ПараметрыЗапросаКлассификатора();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2") Тогда
		
		Возврат ПараметрыЗапросаСправки();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН") Тогда
		
		Возврат ПараметрыЗапросаТТН();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена") Тогда
		
		Возврат ПараметрыВыгрузкиИнформацииОФорматеОбмена();
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктСписанияИзРегистра1")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктСписанияИзРегистра2")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ВозвратИзРегистра2")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ОтказОтЗапросаНаОтменуПроведенияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПередачаВРегистр2")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПодтверждениеЗапросаНаОтменуПроведенияТТН")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН") Тогда
		
		Возврат ПараметрыВыгрузкиДокумента();
		
	Иначе 
		ВызватьИсключение НСтр("ru = 'Для переданного вида документа параметры не предусмотрены.'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие у произвольного объекта реквизита с указанным именем.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Возвращает структуру данных чека для формирования подписи ЕГАИС.
//
Функция СтруктураЧекаЕГАИС() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИНН"                 , "");           // ИНН Организации
	СтруктураДанных.Вставить("КПП"                 , Неопределено); // КПП обособленного подразделения по розничной лицензии.
	СтруктураДанных.Вставить("АдресМагазина"       , "");           // Адрес обособленного подразделения по розничной лицензии (Длина до 128 символов).
	СтруктураДанных.Вставить("НаименованиеМагазина", "");           // Наименование магазина (Длина до 128 символов).
	СтруктураДанных.Вставить("ЗаводскойНомерККМ"   , "");           // Заводской номер ККМ (Длина до 128 символов).
	СтруктураДанных.Вставить("НомерСменыККМ"       , 0);            // Номер смены.
	СтруктураДанных.Вставить("НомерЧекаККМ"        , 0);            // Номер чека.
	СтруктураДанных.Вставить("ДатаВремяЧека"       , '00010101');   // Дата, время чека. Формат: ДДММГГЧЧММ - день, месяц, год, часы, минуты.
	СтруктураДанных.Вставить("Возврат"             , Ложь);         // Если Истина - то покупатель возвращает товар.
	СтруктураДанных.Вставить("ТаблицаТоваров"      , Новый Массив); // Таблица товаров
	
	Возврат СтруктураДанных;
	
КонецФункции

// Структура строки чека для ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура строки чека для ЕГАИС
//
Функция СтруктураСтрокиЧекаЕГАИС() Экспорт
	
	СтрокаТовара = Новый Структура;
	СтрокаТовара.Вставить("НомерСтроки");
	
	СтрокаТовара.Вставить("Наименование");
	СтрокаТовара.Вставить("Номенклатура");
	СтрокаТовара.Вставить("Характеристика");
	СтрокаТовара.Вставить("Упаковка");
	
	СтрокаТовара.Вставить("ТипНоменклатуры");
	СтрокаТовара.Вставить("ПодакцизныйТовар");
	
	СтрокаТовара.Вставить("Количество");
	СтрокаТовара.Вставить("КоличествоУпаковок");
	СтрокаТовара.Вставить("Цена");
	СтрокаТовара.Вставить("ПроцентАвтоматическойСкидки");
	СтрокаТовара.Вставить("СуммаАвтоматическойСкидки");
	СтрокаТовара.Вставить("ПроцентРучнойСкидки");
	СтрокаТовара.Вставить("СуммаРучнойСкидки");
	СтрокаТовара.Вставить("Сумма");
	СтрокаТовара.Вставить("СтавкаНДС");
	СтрокаТовара.Вставить("СуммаНДС");
	СтрокаТовара.Вставить("Штрихкод");
	
	СтрокаТовара.Вставить("НоменклатураЕГАИС");
	СтрокаТовара.Вставить("АлкогольнаяПродукция");
	СтрокаТовара.Вставить("Сопоставлено");
	СтрокаТовара.Вставить("КодАкцизнойМарки");
	СтрокаТовара.Вставить("МаркируемаяАлкогольнаяПродукция");
	СтрокаТовара.Вставить("ВидПродукции");
	СтрокаТовара.Вставить("КодВидаАлкогольнойПродукции");
	СтрокаТовара.Вставить("Объем");
	СтрокаТовара.Вставить("Крепость");
	СтрокаТовара.Вставить("ИНН");
	СтрокаТовара.Вставить("КПП");
	СтрокаТовара.Вставить("ПроизводительИмпортерАлкогольнойПродукции");
	
	Возврат СтрокаТовара;
	
КонецФункции

// Возвращает структуру, необходимую для записи справки 1.
//
Функция СтруктураДанныхСправки1() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер"   , "");
	Результат.Вставить("Наименование"           , "");
	Результат.Вставить("НомерТТН"               , Неопределено);
	Результат.Вставить("ДатаТТН"                , Неопределено);
	Результат.Вставить("Грузоотправитель"       , Неопределено);
	Результат.Вставить("Грузополучатель"        , Неопределено);
	Результат.Вставить("ДатаОтгрузки"           , Неопределено);
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено);
	Результат.Вставить("ДатаРозлива"            , Неопределено);
	Результат.Вставить("Количество"             , Неопределено);
	Результат.Вставить("НомерПодтвержденияЕГАИС", Неопределено);
	Результат.Вставить("ДатаПодтвержденияЕГАИС" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для записи справки 2.
//
Функция СтруктураДанныхСправки2() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер"   , "");
	Результат.Вставить("Наименование"           , "");
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено);
	Результат.Вставить("Количество"             , Неопределено);
	Результат.Вставить("НомерСправки1"          , "");
	Результат.Вставить("Справка1"               , Неопределено);
	Результат.Вставить("ДокументОснование"      , Неопределено);
	Результат.Вставить("НомерПодтвержденияЕГАИС", Неопределено);
	Результат.Вставить("ДатаПодтвержденияЕГАИС" , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для загрузки ТТН.
//
// Возвращаемое значение:
//   Структура - структура данных ТТН.
//
Функция СтруктураДанныхТТН() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"     , "");           // Идентификатор накладной (клиентский, к заполнению необязательный).
	Результат.Вставить("ИдентификаторЕГАИС", "");           // Идентификатор накладной в системе (присвоенный). Заполняется при фиксации ТТН в ЕГАИС.
	Результат.Вставить("ВидОперации"       , Неопределено); // Значение перечисления ВидыОперацийТТНВходящейЕГАИС, ВидыОперацийТТНИсходящейЕГАИС.
	Результат.Вставить("Упакована"         , Истина);       // Признак упаковки товаров ТТН.
	Результат.Вставить("НомерТТН"          , "");           // Номер документа.
	Результат.Вставить("ДатаТТН"           , '00010101');   // Дата составления документа.
	Результат.Вставить("ДатаОтгрузки"      , '00010101');   // Дата отгрузки продукции.
	Результат.Вставить("Грузоотправитель"  , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Грузополучатель"   , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Поставщик"         , Неопределено); // Элемент справочника КлассификаторОрганизацийЕГАИС.
	Результат.Вставить("Основание"         , Неопределено); // Основание накладной.
	Результат.Вставить("Комментарий"       , Неопределено); // Комментарий к накладной.
	Результат.Вставить("ТаблицаТоваров"    , Новый Массив); // Массив строк ТТН.
	
	// Параметры доставки
	Результат.Вставить("ТипДоставки"       , Неопределено); // Тип перевозки.
	Результат.Вставить("Перевозчик"        , Неопределено); // Название компании перевозчика.
	Результат.Вставить("Автомобиль"        , Неопределено); // Название транспортного средства.
	Результат.Вставить("Прицеп"            , Неопределено); // Прицеп транспортного средства.
	Результат.Вставить("Заказчик"          , Неопределено); // Название компании заказчика.
	Результат.Вставить("Водитель"          , Неопределено); // Водитель.
	Результат.Вставить("ПунктПогрузки"     , Неопределено); // Место погрузки.
	Результат.Вставить("ПунктРазгрузки"    , Неопределено); // Место разгрузки.
	Результат.Вставить("Перенаправление"   , Неопределено); // Перенаправление.
	Результат.Вставить("Экспедитор"        , Неопределено); // Экспедитор.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки акта подтверждения ТТН в УТМ.
//
Функция СтруктураДанныхАктаПодтвержденияТТН() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"     , "");           // Идентификатор документа (клиентский, к заполнению необязательный).
	Результат.Вставить("Отказ"             , Ложь);         // Признак отказа от ТТН.
	Результат.Вставить("Номер"             , "");           // Номер акта подтверждения. Если не указан, будет взят номер из ТТН.
	Результат.Вставить("ИдентификаторЕГАИС", "");           // Идентификатор ТТН в системе ЕГАИС.
	Результат.Вставить("Комментарий"       , "");           // Произвольный комментарий к акту.
	Результат.Вставить("ТаблицаТоваров"    , Новый Массив); // Массив строк с фактическим количеством. Используется для акта расхождений.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки запроса на отмену проведения документа.
//
Функция СтруктураДанныхЗапросаНаОтменуПроведения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФСРАР", "");         // Код организации в ФСРАР.
	Результат.Вставить("Номер"             , "");         // Номер запроса на отмену проведения.
	Результат.Вставить("Дата"              , '00010101'); // Дата запроса на отмену проведения.
	Результат.Вставить("ИдентификаторЕГАИС", "");         // Идентификатор документа в системе ЕГАИС.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую поля для пересчета суммы в табличной части документа
//
// Параметры:
//  Реквизиты - Строка - Содержит имена полей, заданных через запятую,
//  ЗависимыеРеквизиты - Структура - структура, каждое элемент которой есть структура с именами реквизитов без префикса,
//                       ключ элемента содержит префикс. Например Новый Структура("Тара", "Сумма, СуммаНДС") означает
//                       наличие реквизитов: "СуммаТара" и "СуммаНДСТара".
//  ИмяПоляКоличество     - Строка - Имя поля, по которому считается коэффициент пропорциональности.
//  РазрядностиОкругления - Структура - структура, в формате ИмяПоля => Количество знаков дробной части, которая будет
//                                      использоваться при пересчете реквизитов.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Функция СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты = Неопределено, ИмяПоляКоличество = "Количество", РазрядностиОкругления = Неопределено) Экспорт

	Поля = Новый Структура(Реквизиты);
	Если ЗависимыеРеквизиты <> Неопределено Тогда
		
		Для Каждого ПолеСтруктуры Из ЗависимыеРеквизиты цикл

			Реквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Поле Из Реквизиты цикл
				Поля.Вставить(Поле.Ключ + ПолеСтруктуры.Ключ);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Поля);
	Результат.Вставить("Строки", Новый Массив());
	Результат.Вставить("ИтогКоличество", 0);
	Результат.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	Результат.Вставить("РазрядностиОкругления", РазрядностиОкругления);

	Возврат Результат;

КонецФункции

// Инициализирует структуру для пересчета суммы в табличной части документа
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура подлежащая инициализации, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  ДанныеЗаполнения - ДанныеФормыЭлементКоллекции - строка, содержащая значения суммовых показателей,
//                     которые необходимо будет распределить между строками при пересчете сумм.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ДанныеЗаполнения) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураПересчетаСуммы.Поля, ДанныеЗаполнения);

	СтруктураПересчетаСуммы.ИтогКоличество = 0;
	СтруктураПересчетаСуммы.Строки.Очистить();

КонецПроцедуры

// Добавляет строку для пересчета суммы в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  Строка - ДанныеФормыЭлементКоллекции - строка, для которой необходимо рассчитать значения сумм.
//
Процедура ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка) Экспорт

	СтруктураПересчетаСуммы.Строки.Добавить(Строка);
	СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

Конецпроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы) Экспорт
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Загружает новые документы, полученные из УТМ.
//
Функция ЗагрузитьМассивДокументов(ТранспортныйМодуль, МассивДокументов, ОтображатьСообщения, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатЗагрузкиВходящихДокументов();
	
	ЗагруженныеДокументы = ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(ТранспортныйМодуль, МассивДокументов, ДополнительныеПараметры);
	
	ВидыЗагруженныхДокументов = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ЗагруженныеДокументы Цикл
		РезультатОбработкиДокумента = КлючЗначение.Значение;
		
		Если НЕ РезультатОбработкиДокумента.Результат Тогда
			Результат.ДокументыСОшибками.Добавить(Новый Структура("АдресДокумента, ОписаниеОшибки", КлючЗначение.Ключ, РезультатОбработкиДокумента.ОписаниеОшибки));
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиДокумента.ОписаниеОшибки);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(РезультатОбработкиДокумента.ВидДокумента) Тогда
				Если ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] = Неопределено Тогда
					ВидыЗагруженныхДокументов.Вставить(РезультатОбработкиДокумента.ВидДокумента, 0);
				КонецЕсли;
				ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] = ВидыЗагруженныхДокументов[РезультатОбработкиДокумента.ВидДокумента] + 1;
			КонецЕсли;
			
			Результат.ЗагруженныеДокументы.Добавить(КлючЗначение.Ключ);
			Результат.ЗагруженныеДокументыСсылки.Добавить(РезультатОбработкиДокумента.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗагруженныхДокументов = "";
	Для Каждого КлючЗначение Из ВидыЗагруженныхДокументов Цикл
		ТекстЗагруженныхДокументов = ТекстЗагруженныхДокументов + Символы.ПС;
		ТекстЗагруженныхДокументов = ТекстЗагруженныхДокументов + Строка(КлючЗначение.Ключ) + ": " + Формат(КлючЗначение.Значение, "ЧГ=0");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗагруженныхДокументов) Тогда
		Результат.ЗагруженоДокументов = ТекстЗагруженныхДокументов;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

#Если НЕ ВебКлиент Тогда

// Формирует HTTP-запрос в УТМ ЕГАИС.
//
Функция СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса) Экспорт

	Результат = РезультатВыполненияHTTPЗапроса();
	
	HTTPЗапрос = Новый HTTPЗапрос(ДанныеЗапроса.АдресЗапроса, ДанныеЗапроса.Заголовки);
	
	Если НЕ ПустаяСтрока(ДанныеЗапроса.ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеЗапроса.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
	
	#Если Клиент Тогда
		Состояние(НСтр("ru = 'Обращение к транспортному модулю ЕГАИС...'"));
	#КонецЕсли
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(ТранспортныйМодуль.АдресУТМ), ТранспортныйМодуль.ПортУТМ,,, ИнтернетПрокси, 60);
		Если ДанныеЗапроса.ТипЗапроса = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ДанныеЗапроса.ТипЗапроса = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ДанныеЗапроса.ТипЗапроса = "DELETE" Тогда
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		КонецЕсли;
	Исключение
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ОписаниеОшибки = СтрЗаменить(Результат.ОписаниеОшибки, НСтр("ru='Интернет'"), НСтр("ru='УТМ'"));
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка формирования запроса в УТМ по адресу %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ДанныеЗапроса.АдресЗапроса);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		Возврат Результат;
	КонецПопытки;
	
	Результат = ПрочитатьОтветМодуляЕГАИС(HTTPОтвет.КодСостояния, HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8), ДанныеЗапроса.ТипЗапроса = "POST");
	
	Если НЕ Результат.Результат Тогда
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка при выполнении %1-запроса по адресу %2'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ДанныеЗапроса.ТипЗапроса);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", ДанныеЗапроса.АдресЗапроса);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + Результат.ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Разбирает ответ, полученный из УТМ.
//
Функция ПрочитатьОтветМодуляЕГАИС(КодСостояния, ОтветМодуляЕГАИС, РазбиратьОтвет) Экспорт
	
	Результат = РезультатВыполненияHTTPЗапроса();
	Результат.ОтветМодуляЕГАИС = ОтветМодуляЕГАИС;
	
	Если КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет связи с УТМ.'");
	Иначе
		Если КодСостояния <> 200 Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Сервер отклонил запрос:'");
		КонецЕсли;
		
		Если РазбиратьОтвет Тогда
			Попытка
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
				
				ПостроительDOM = Новый ПостроительDOM;
				ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
				
				УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("*");
				
				Для Каждого УзелURL Из УзлыURL Цикл
					Если УзелURL.ИмяУзла = "url" Тогда
						Результат.ИдентификаторЗапроса = УзелURL.ТекстовоеСодержимое;
					ИначеЕсли УзелURL.ИмяУзла = "sign" Тогда
						Результат.Подпись = УзелURL.ТекстовоеСодержимое;
					ИначеЕсли УзелURL.ИмяУзла = "error" Тогда
						Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + УзелURL.ТекстовоеСодержимое;
					КонецЕсли;
				КонецЦикла;
				
				ЧтениеXML.Закрыть();
			Исключение
				Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + ОтветМодуляЕГАИС;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Разбирает список входящих документов и подготавливает список URL-адресов документов к загрузке.
//
Функция ПодготовитьСписокURLДокументовКЗагрузке(ОтветМодуляЕГАИС) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Результат = Новый Массив;
	
	Для Каждого УзелURL Из УзлыURL Цикл
		
		Если УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Новый Структура("ИдентификаторЗапроса, АдресURL", "", УзелURL.ТекстовоеСодержимое));
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Имя события для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Интеграция с ЕГАИС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает структуру, необходимую для запроса классификатора ЕГАИС.
//
Функция ПараметрыЗапросаКлассификатора()

	Результат = Новый Структура;
	Результат.Вставить("ИмяПараметра"     , "");
	Результат.Вставить("ЗначениеПараметра", "");
	Результат.Вставить("ИНН"              , "");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, необходимую для запроса справок А и Б.
//
Функция ПараметрыЗапросаСправки()

	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомер", "");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, необходимую для запроса ТТН.
//
Функция ПараметрыЗапросаТТН()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЕГАИС", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки документа.
//
Функция ПараметрыВыгрузкиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументСсылка", Неопределено); // Ссылка на выгружаемый документ.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки информации о формате обмена УТМ.
//
Функция ПараметрыВыгрузкиИнформацииОФорматеОбмена()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФСРАР", "");     // Код организации в ФСРАР.
	Результат.Вставить("ФорматОбмена", Неопределено); // Используемый формат обмена.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для записи информации об одной сессии обмена с УТМ.
//
// Возвращаемое значение:
//   Структура - параметры сессии.
// 
Функция ПараметрыСессииОбмена() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"          , Неопределено);
	Результат.Вставить("ВидДокумента"        , Неопределено);
	Результат.Вставить("ПолученОтказ"        , Ложь);
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("ДокументОснование"   , Неопределено);
	Результат.Вставить("Комментарий"         , "");
	Результат.Вставить("ФайлОбмена"          , Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает соответствие между исходящим запросом и полученным ответом.
//
Процедура УстановитьСоответствиеЗапросов(СоответствиеЗапросов, ОтветМодуляЕГАИС, ПолеАдреса) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для Каждого УзелURL Из УзлыURL Цикл
		
		АтрибутDOM = УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId");
		
		Если АтрибутDOM = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СоответствиеЗапросов[АтрибутDOM.Значение] = Неопределено Тогда
			СоответствиеЗапросов.Вставить(АтрибутDOM.Значение, Новый Структура("АдресЗапроса, АдресаОтветов", "", Новый Массив));
		КонецЕсли;
		
		Если ПолеАдреса = "АдресЗапроса" Тогда
			СоответствиеЗапросов[АтрибутDOM.Значение][ПолеАдреса] = УзелURL.ТекстовоеСодержимое;
		Иначе
			СоответствиеЗапросов[АтрибутDOM.Значение][ПолеАдреса].Добавить(УзелURL.ТекстовоеСодержимое);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Возвращает структуру выполнения операции к транспортному модулю ЕГАИС.
//
Функция РезультатВыполненияHTTPЗапроса() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ОтветМодуляЕГАИС"    , "");
	Результат.Вставить("ИдентификаторЗапроса", "");
	Результат.Вставить("Подпись"             , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для отправки запроса в УТМ.
//
Функция СтруктураДанныхHTTPЗапроса(ТипЗапроса = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"  , ТипЗапроса);
	Результат.Вставить("АдресЗапроса", "");
	Результат.Вставить("ТелоЗапроса" , "");
	Результат.Вставить("ТекстXML"    , "");
	Результат.Вставить("Заголовки"   , Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру результата обработки входящих документов.
//
Функция РезультатЗагрузкиВходящихДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"           , Ложь);
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ЗагруженоДокументов" , "0");
	Результат.Вставить("ДокументыСОшибками"  , Новый Массив);
	Результат.Вставить("ЗагруженныеДокументы", Новый Массив);
	Результат.Вставить("ЗагруженныеДокументыСсылки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру обработки входящего документов.
//
Функция СтруктураЗагрузкиВходящегоДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗапроса", Неопределено); // Заполняется, если получен ответ на исходящий запрос.
	Результат.Вставить("АдресЗапроса"        , Неопределено); // URL-адрес документа в УТМ.
	Результат.Вставить("ТекстXML"            , Неопределено); // Текст XML входящего документа.
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущую версию подсистемы ЕГАИС
//
Функция ВерсияПодсистемыЕГАИС() Экспорт
	
	Возврат "1.3.0.9";
	
КонецФункции

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора
//
// Параметры:
//  Список - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек
//
// Параметры:
//  Список - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Настройки - настройки, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		Если ПриводитьЗначениеКЧислу Тогда
			Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
		КонецЕсли;
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти