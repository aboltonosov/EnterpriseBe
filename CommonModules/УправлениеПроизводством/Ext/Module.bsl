////////////////////////////////////////////////////////////////////////////////
// Управление производством: содержит процедуры для управления производством.
// Модуль входит в подсистему "УправлениеПредприятием".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиПодсистемы

// Получает настройки подсистемы "Межцеховое управление"
// 
// Возвращаемое значение:
//   - Структура - настройки управления производством
//
Функция НастройкиУправленияПроизводством() Экспорт
	
	НаборКонстант = Константы.СоздатьНабор(
		"ИспользоватьУправлениеПроизводством,
		|ИспользоватьУправлениеПроизводством2_2,
		//
		|МетодикаУправленияПроизводством,
		|ИспользоватьПланированиеПоПроизводственнымРесурсам,
		|ИспользоватьПланированиеПоМатериальнымРесурсам,
		|ИспользоватьИнтервалПланированияЧас
		|");
	НаборКонстант.Прочитать();
	
	НастройкиПодсистемы = Новый Структура;
	
	НастройкиПодсистемы.Вставить("ИспользуетсяПроизводство22", НаборКонстант.ИспользоватьУправлениеПроизводством2_2);
	НастройкиПодсистемы.Вставить("ИспользуетсяПроизводство21", НаборКонстант.ИспользоватьУправлениеПроизводством);
	//
	НастройкиПодсистемы.Вставить("ПланируетсяГрафикПроизводства", ИспользуетсяГрафикПроизводства(НаборКонстант));
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоПроизводственнымРесурсам);
	НастройкиПодсистемы.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", НаборКонстант.ИспользоватьПланированиеПоМатериальнымРесурсам);
	НастройкиПодсистемы.Вставить("ФорматДатыГрафика", ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант));
	//
	Возврат НастройкиПодсистемы;
	
КонецФункции

// Определяет используется ли управление производством версии 2.2
// 
// Возвращаемое значение:
//   Булево - Истина, если используется  управление производством версии 2.2
//
Функция ИспользуетсяПроизводство22() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
КонецФункции

// Определяет используется ли управление производством версии 2.1
// 
// Возвращаемое значение:
//   Булево - Истина, если используется управление производством версии 2.1
//
Функция ИспользуетсяПроизводство21() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Определяет используется ли график производства.
// 
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант
// 
// Возвращаемое значение:
//   Булево - Истина, если график производства используется.
//
Функция ИспользуетсяГрафикПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		МетодикаУправления = НаборКонстант.МетодикаУправленияПроизводством;
	Иначе 
		МетодикаУправления = Константы.МетодикаУправленияПроизводством.Получить();
	КонецЕсли;
	
	Возврат МетодикаУправления <> Перечисления.МетодикаУправленияПроизводством.БезПланирования;
	
КонецФункции

// Определяет используется ли производство на стороне
// 
// Возвращаемое значение:
//   Булево - Истина, если используется планирование по производственным ресурсам
//
Функция ИспользуетсяПроизводствоНаСтороне() Экспорт
	
	Возврат Константы.ИспользоватьПроизводствоНаСтороне.Получить();
	
КонецФункции

// Определяет форматную строку для даты графика производства
//
// Параметры:
//  НаборКонстант - КонстантыНабор - значения констант
// 
// Возвращаемое значение:
//  Строка - форматная строка
//
Функция ФорматнаяСтрокаДляДатыГрафикаПроизводства(НаборКонстант = Неопределено) Экспорт
	
	Если НаборКонстант <> Неопределено Тогда
		ИспользоватьИнтервалПланированияЧас = НаборКонстант.ИспользоватьИнтервалПланированияЧас;
	Иначе 
		ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	КонецЕсли;
	
	Если ИспользоватьИнтервалПланированияЧас Тогда
		Результат = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		Результат = "ДЛФ=D";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вариант обособление материалов в производстве.
//
// Параметры:
//  Настройки	 - Структура - см. НастройкиУправленияПроизводством()
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыОбособленияМатериаловВПроизводстве - вариант обособление материалов в производстве.
//
Функция ВариантОбособленияМатериаловВПроизводстве() Экспорт
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВПроизводстве.Получить();
	
	Если ВариантОбособления.Пустая() Тогда
		Возврат Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства;
	Иначе
		Возврат ВариантОбособления;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаПроизводство

// Добавляет на форму списка условное оформление для поля Приоритет
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма.
//  ИмяСписка			 - Строка			- имя динамического списка.
//  ИмяПоля				 - Строка			- имя поля Приоритет динамического списка.
//  ИспользуетсяОтбор	 - Булево			- Истина, если используется отбор и для него необходимо установить условное оформление.
//  ИмяЭлемента			 - Строка			- имя колонки Приоритет динамического списка.
//  ИмяПоляОтбора		 - Строка			- имя реквизита формы для отбора.
//  ИмяЭлементаОтбора	 - Строка			- имя элемента формы для отбора.
//
Процедура УстановитьУсловноеОформлениеПоляПриоритет(Форма, ИмяСписка, ИмяПоля, ИмяЭлемента, ИспользуетсяОтбор = Ложь, ИмяПоляОтбора = Неопределено, ИмяЭлементаОтбора = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Приоритеты.Ссылка                      КАК Приоритет,
		|	-Приоритеты.РеквизитДопУпорядочивания  КАК ПриоритетНомер,
		|	Приоритеты.Цвет                        КАК Цвет,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Приоритеты.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// колонка
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ИмяПоля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.ПриоритетНомер;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Выборка.Представление);
			
			// отбор
			Если ИспользуетсяОтбор Тогда
				
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму списка условное оформление поля ДатаПроизводства
//
//  Параметры:
//   Форма - УправляемаяФорма - форма документа.
//   ИмяСписка - Строка - имя динамического списка.
//   ИмяПоляДата - Строка - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПоляДатаПроизводства(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
КонецПроцедуры

#КонецОбласти

#Область Этап

// Структура заполнения данных при изменении статуса
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктур	 - этап
//  ПлановаяДатаПоступления	 - Дата - плановая дата поступления изделий
// 
// Возвращаемое значение:
//   - Структура - данные заполнения
//
Функция ДанныеЗаполненияПриИзмененииСтатуса(Объект, Знач ПлановаяДатаПоступления = Неопределено) Экспорт
	
	Результат = Новый Структура("ДатаСобытия,ПлановаяДатаПоступления");
	
	Если Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		
		Если ПлановаяДатаПоступления <> Неопределено Тогда
			Результат.ПлановаяДатаПоступления = ПлановаяДатаПоступления;
		Иначе
			Результат.ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет необходимые действия с объектом при изменении отметки выполнения этапа производства
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса()
// 
// Возвращаемое значение:
//  Строка - содержит список рекизитов, которые были изменены при изменении отметки выполнения
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(Объект, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусФормируется = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	СтатусКВыполнению = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	НачатоВыполнение    = (Объект.ФактическоеНачалоЭтапа <> '000101010000');
	ЗавершеноВыполнение = (Объект.ФактическоеОкончаниеЭтапа <> '000101010000');
	
	ИзмененныеРеквизиты = "Статус";
	
	Если ЗавершеноВыполнение Тогда
		
		Объект.Статус = СтатусЗавершен;
		
	ИначеЕсли НачатоВыполнение 
		И Объект.Статус = СтатусЗавершен Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НачатоВыполнение 
		И (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению) Тогда
		
		Объект.Статус = СтатусНачат;
		
	ИначеЕсли НЕ НачатоВыполнение
		И (Объект.Статус = СтатусНачат
			ИЛИ Объект.Статус = СтатусЗавершен) Тогда
		
		Объект.Статус = СтатусКВыполнению;
		
	КонецЕсли;
	
	ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Выполняет действия необходимые при изменения статуса документа
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап
//  СтатусДоИзменения - Перечисления.СтатусыЭтаповПроизводства2_2 - статус до изменений
//  ДанныеЗаполнения - Структура - см. метод ДанныеЗаполненияПриИзмененииСтатуса()
// 
// Возвращаемое значение:
//  Строка - содержит список рекизитов, которые были изменены при смене статуса
//
Функция ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(Объект, СтатусДоИзменения, ДанныеЗаполнения = Неопределено) Экспорт
	
	СтатусФормируется = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	СтатусКВыполнению = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
	СтатусНачат       = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен    = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ИзмененныеРеквизиты = "";
	
	ДатаСобытия = Неопределено;
	Если ДанныеЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения.Свойство("ДатаСобытия", ДатаСобытия);
	КонецЕсли;
	
	Если Объект.Статус <> СтатусДоИзменения Тогда
		
		ИзмененныеРеквизиты = "Статус";
		
		НачатоВыполнение =    (Объект.Статус = СтатусНачат ИЛИ Объект.Статус = СтатусЗавершен);
		ЗавершеноВыполнение = (Объект.Статус = СтатусЗавершен);
		
		Если СтатусДоИзменения = СтатусЗавершен Тогда
			Объект.ЭкономияМатериалов.Очистить();
		КонецЕсли;
		
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ФактическоеНачалоЭтапа,
													 |ФактическоеОкончаниеЭтапа,
													 |НачатоВыполнениеЭтапа,
													 |ЗавершеноВыполнениеЭтапа,
													 |Выполнено";
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнение, 
					Объект.ФактическоеНачалоЭтапа,
					ДатаСобытия);
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнение, 
					Объект.ФактическоеОкончаниеЭтапа,
					ДатаСобытия,
					ЗавершеноВыполнение);
		
		ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Возвращает параметры для открытия формы Документ.ЭтапПроизводства2_2.Форма.ФормаРучногоРазмещенияВГрафике
//
// Параметры:
//  Объект					 - ДокументОбъект.ЭтапПроизводства2_2 - этап производства
//  УникальныйИдентификатор	 - УникальныйИдентификатор - уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура - параметры формы ручного размещения этапа в графике
//
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор) Экспорт

	ПараметрыФормы = Новый Структура;
	
	// Данные этапа
	
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("Статус", Объект.Статус);
	ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	// Данные графика производства
	
	ПараметрыФормы.Вставить("РучноеРазмещениеВГрафике", Объект.РучноеРазмещениеВГрафике);
	ПараметрыФормы.Вставить("ГрафикПроизводства");
	
	// Занятость видов рабочих центров
	
	АдресНормативы = "";
	АдресСтруктураЗанятости = "";
	
	Если Объект.РучноеРазмещениеВГрафике
		ИЛИ Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		// Нормативы
		
		ВидыРабочихЦентров = ИспользуемыеВидыРабочихЦентров(Объект);
		
		АдресНормативы = ПоместитьВоВременноеХранилище(ВидыРабочихЦентров, УникальныйИдентификатор);
		
		// Занятость видов рабочих центров
		
		Если Объект.РучноеРазмещениеВГрафике Тогда
			
			ЗанятоЭтапом = Объект.ЗанятостьВидовРабочихЦентров.Выгрузить();
			
			МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
			
			Если ЗанятоЭтапом.Количество() > 0 Тогда
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятоЭтапом, "ВидРабочегоЦентра");
			Иначе
				МассивВРЦ = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ВидыРабочихЦентров, "ВидРабочегоЦентра");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗанятоЭтапом.Свернуть("ВидРабочегоЦентра, ДатаИнтервала", "Количество");
		ЗанятоЭтапом.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
		
		СтруктураЗанятости = Новый Структура("
				|ЗанятоЭтапом, МассивВРЦ",
				ЗанятоЭтапом,
				МассивВРЦ);
			
		АдресСтруктураЗанятости = ПоместитьВоВременноеХранилище(СтруктураЗанятости, УникальныйИдентификатор)
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресНормативы", АдресНормативы);
	ПараметрыФормы.Вставить("АдресСтруктураЗанятости", АдресСтруктураЗанятости);
	
	Возврат ПараметрыФормы;

КонецФункции

// Процедура заполняет колонки Номенклатура, Характеристика и Спецификация данными основного изделия этапа в коллекции значений.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - коллекция значений
//
Процедура ЗаполнитьДанныеЭтаповВКоллекции(Коллекция) Экспорт
	
	Этапы = Коллекция.Выгрузить(, "Этап").ВыгрузитьКолонку("Этап");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Этапы, "ОсновноеИзделиеНоменклатура, ОсновноеИзделиеХарактеристика, Спецификация");
	
	Для Каждого Строка Из Коллекция Цикл
		ДанныеЭтапа = Реквизиты[Строка.Этап];
		ЗаполнитьЗначенияСвойств(Строка, ДанныеЭтапа);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПланированиеГрафика

// Инициирует планирование графика производства.
//
// Параметры:
//  НастройкиПланирования - Структура - настройки планирования графика.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище,
//		по которому надо поместить результаты планирования.
//
Процедура ПланироватьИЗаписатьГрафикВФоне(НастройкиПланирования, АдресХранилища) Экспорт
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьИЗаписатьГрафикВФоне(
		НастройкиПланирования, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполненияДокументов

// Формирует тескт запроса для контроля завершения производства по заказу
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаКонтрольЗакрытияЗаказа() Экспорт
	
	Возврат РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ТекстЗапросаКонтрольЗакрытияЗаказа();
	
КонецФункции

#КонецОбласти

#Область Аналоги

// Выполняет замену материала на его аналог
//
// Параметры:
//  ТабличнаяЧасть	 - ДанныеФормыКоллекция - табличная часть в которой требуется выполнить замену
//  АдресВХранилище	 - Строка - адрес хранилища в котором находится выбор аналога
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//					* СписокОшибок - Массив, Непределено - содержит список ошибок, если не удалось выполнить замену
//					* СписокИзмененныхСтрок - Массив - содержит список измененных строк
//
Функция ВыполнитьЗаменуНаАналог(ТабличнаяЧасть, АдресВХранилище) Экспорт
	
	Результат = Новый Структура("СписокОшибок,СписокИзмененныхСтрок", Неопределено, Неопределено);
	
	СписокОшибок = Новый Массив;
	МассивЗаменяемыхСтрок = Новый Массив;
	
	КоличествоОстаток = Новый Соответствие;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Производится", Ложь);
	
	НаборыМатериалов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		Если НаборыМатериалов.ПоСпецификации Тогда
			СтруктураОтбора.Вставить("КлючСвязиСпецификация", СтрокаМатериал.КлючСвязиСпецификация);
		Иначе
			СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", СтрокаМатериал.Характеристика);
		КонецЕсли;
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка применения аналога. Материал ""%1"" на этапе не потребляется.'"), 
											СокрЛП(СтрокаМатериал.Номенклатура));
			СписокОшибок.Добавить(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтрокаСпецификации = НайденныеСтроки[0];
		Идентификатор = СтрокаСпецификации.ПолучитьИдентификатор();
		
		Если СтрокаСпецификации.Количество < СтрокаМатериал.Количество Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" на этапе недостаточно для замены по разрешению.'"), 
											СокрЛП(СтрокаМатериал.Номенклатура));
			СписокОшибок.Добавить(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		МассивЗаменяемыхСтрок.Добавить(СтрокаСпецификации);
		КоличествоОстаток.Вставить(Идентификатор, СтрокаСпецификации.Количество - СтрокаМатериал.Количество);
		
	КонецЦикла;
	
	Если СписокОшибок.Количество() <> 0 Тогда
		Результат.СписокОшибок = СписокОшибок;
		Возврат Результат;
	КонецЕсли;
	
	СписокИзмененныхСтрок = Новый Массив;
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	// Удаление строк или изменение количества.
	
	Для Каждого СтрокаСпецификации из МассивЗаменяемыхСтрок Цикл
		
		Идентификатор = СтрокаСпецификации.ПолучитьИдентификатор();
		
		ИндексТекущейСтроки = ТабличнаяЧасть.Индекс(СтрокаСпецификации);
		
		ЗначенияРеквизитовНовыхСтрок.Вставить("ПрименениеМатериала", СтрокаСпецификации.ПрименениеМатериала);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ВариантОбеспечения", СтрокаСпецификации.ВариантОбеспечения);
		ЗначенияРеквизитовНовыхСтрок.Вставить("ДатаОтгрузки", СтрокаСпецификации.ДатаОтгрузки);
		ЗначенияРеквизитовНовыхСтрок.Вставить("Склад", СтрокаСпецификации.Склад);
		
		Если КоличествоОстаток[Идентификатор] > 0 Тогда
			
			СтрокаСпецификации.Количество = КоличествоОстаток[Идентификатор];
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСпецификации, СтруктураДействий, Неопределено);
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			
			СписокИзмененныхСтрок.Добавить(СтрокаСпецификации);
			
		Иначе
			
			ТабличнаяЧасть.Удалить(СтрокаСпецификации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаАналог из НаборыМатериалов.Аналоги Цикл
		
		НоваяСтрокаМатериалыИУслуги = ТабличнаяЧасть.Вставить(ИндексТекущейСтроки);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, ЗначенияРеквизитовНовыхСтрок);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериалыИУслуги, СтрокаАналог);
		
		СписокИзмененныхСтрок.Добавить(НоваяСтрокаМатериалыИУслуги);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;
	
	Результат.СписокИзмененныхСтрок = СписокИзмененныхСтрок;
	
	Возврат Результат;
	
КонецФункции

// Заполняет признак наличия аналогов
//
// Параметры:
//  ТабличнаяЧасть			 - ДанныеФормыКоллекуция - список в котором нужно заполнить признак
//  ПараметрыВыбораАналогов	 - Структура - содержит дополнительные сведения необходимые для заполнения
//  ТаблицаМатериалы		 - ТаблицаЗначений - список материалов по которым нужно определить наличие аналогов
//
Процедура ОтметитьНаличиеАналогов(ТабличнаяЧасть, ПараметрыВыбораАналогов, ТаблицаМатериалы) Экспорт

	// Поиск аналогов без учета спецификации.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки     КАК НомерСтроки,
	|	МатериалыИУслуги.Номенклатура    КАК Номенклатура,
	|	МатериалыИУслуги.Характеристика  КАК Характеристика
	|ПОМЕСТИТЬ МатериалыИУслуги
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналогиВПроизводстве.Материал КАК Материал,
	|	АналогиВПроизводстве.ХарактеристикаМатериала КАК ХарактеристикаМатериала,
	|	АналогиВПроизводстве.Спецификация КАК Спецификация,
	|	АналогиВПроизводстве.КлючСвязиСпецификация КАК КлючСвязиСпецификация,
	|	АналогиВПроизводстве.Подразделение КАК Подразделение,
	|	АналогиВПроизводстве.ЗаказКлиента КАК ЗаказКлиента,
	|	АналогиВПроизводстве.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	АналогиВПроизводстве.Изделие КАК Изделие,
	|	АналогиВПроизводстве.ХарактеристикаИзделия КАК ХарактеристикаИзделия,
	|	АналогиВПроизводстве.Аналог КАК Аналог,
	|	АналогиВПроизводстве.ХарактеристикаАналога КАК ХарактеристикаАналога
	|ПОМЕСТИТЬ ВсеАналоги
	|ИЗ
	|	РегистрСведений.АналогиВПроизводстве КАК АналогиВПроизводстве
	|ГДЕ
	|	АналогиВПроизводстве.Период <= &Дата
	|	И (АналогиВПроизводстве.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ АналогиВПроизводстве.ПериодЗавершения >= &Дата)
	|	И АналогиВПроизводстве.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	И (АналогиВПроизводстве.Подразделение = &Подразделение
	|			ИЛИ АналогиВПроизводстве.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказКлиента = &ЗаказКлиента
	|			ИЛИ АналогиВПроизводстве.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			ИЛИ АналогиВПроизводстве.ЗаказНаПроизводство В (
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
	|					НЕОПРЕДЕЛЕНО))
	|	И (АналогиВПроизводстве.Изделие = &Изделие
	|			ИЛИ АналогиВПроизводстве.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ХарактеристикаИзделия = &ХарактеристикаИзделия
	|			ИЛИ АналогиВПроизводстве.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВсеАналоги.Аналог ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьАналог
	|ИЗ
	|	МатериалыИУслуги КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеАналоги КАК ВсеАналоги
	|		ПО МатериалыИУслуги.Номенклатура = ВсеАналоги.Материал
	|			И МатериалыИУслуги.Характеристика = ВсеАналоги.ХарактеристикаМатериала
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.НомерСтроки";
	
	Запрос.УстановитьПараметр("Дата",					ПараметрыВыбораАналогов.ДатаОкончанияДействияРазрешений);
	Запрос.УстановитьПараметр("Спецификация",			ПараметрыВыбораАналогов.Спецификация);
	Запрос.УстановитьПараметр("Подразделение",			ПараметрыВыбораАналогов.Подразделение);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство",	ПараметрыВыбораАналогов.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Изделие",				ПараметрыВыбораАналогов.Изделие);
	Запрос.УстановитьПараметр("ХарактеристикаИзделия",	ПараметрыВыбораАналогов.ХарактеристикаИзделия);
	Запрос.УстановитьПараметр("ЗаказКлиента",	        ПараметрыВыбораАналогов.ЗаказКлиента);
	Запрос.УстановитьПараметр("МатериалыИУслуги", 		ТаблицаМатериалы);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	// Поиск аналогов с учетом спецификации.
	
	Запрос.Текст = "ВЫБРАТЬ
	|	АналогиВПроизводстве.КлючСвязиСпецификация КАК КлючСвязиСпецификация
	|ИЗ
	|	РегистрСведений.АналогиВПроизводстве КАК АналогиВПроизводстве
	|ГДЕ
	|	АналогиВПроизводстве.Период <= &Дата
	|			И (АналогиВПроизводстве.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ АналогиВПроизводстве.ПериодЗавершения >= &Дата)
	|	И АналогиВПроизводстве.Спецификация = &Спецификация
	|	И (АналогиВПроизводстве.Подразделение = &Подразделение
	|			ИЛИ АналогиВПроизводстве.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказКлиента = &ЗаказКлиента
	|			ИЛИ АналогиВПроизводстве.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			ИЛИ АналогиВПроизводстве.ЗаказНаПроизводство В (
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка),
	|					НЕОПРЕДЕЛЕНО))
	|	И (АналогиВПроизводстве.Изделие = &Изделие
	|			ИЛИ АналогиВПроизводстве.Изделие = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (АналогиВПроизводстве.ХарактеристикаИзделия = &ХарактеристикаИзделия
	|			ИЛИ АналогиВПроизводстве.ХарактеристикаИзделия = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	АналогиВПроизводстве.КлючСвязиСпецификация";
	
	АналогиСтрокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("КлючСвязиСпецификация");
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		
		Если Выборка.ЕстьАналог Тогда
			
			Строка.ЕстьАналогиМатериала = Выборка.ЕстьАналог;
			
		Иначе
			
			СтруктураОтбора.КлючСвязиСпецификация = Строка.КлючСвязиСпецификация;
			
			НайденныеСтроки = АналогиСтрокСпецификаций.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Строка.ЕстьАналогиМатериала = Истина;
			Иначе
				Строка.ЕстьАналогиМатериала = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет наличие изменений в табличной части документа.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект	 - проверяемый документ
//  ДанныеДоИзменения	 - Структура		 - структура, содержащая данные документа до изменения
//  ИмяТаблицы			 - Строка			 - имя проверяемой таблицы
//  Реквизиты			 - Массив			 - массив проверяемых реквизитов
// 
// Возвращаемое значение:
//   - Булево - признак наличия изменений в табличной части
//
Функция ИзмененаТабличнаяЧастьДокумента(ДокументОбъект, ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ТаблицаДоИзменения = ДанныеДоИзменения[ИмяТаблицы];
	
	Если Реквизиты = Неопределено Тогда
		
		Реквизиты = Новый Массив;
		Для каждого Колонка Из ТаблицаДоИзменения.Колонки Цикл
			Реквизиты.Добавить(Колонка.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаДоИзменения.Количество() <> ДокументОбъект[ИмяТаблицы].Количество() Тогда
		
		Результат = Истина;
		
	Иначе
		
		Для Индекс = 0 По ТаблицаДоИзменения.Количество()-1 Цикл
			
			СтрокаДоИзменения = ТаблицаДоИзменения[Индекс];
			СтрокаПослеИзменения = ДокументОбъект[ИмяТаблицы][Индекс];
			
			Для каждого Реквизит Из Реквизиты Цикл
				Если СтрокаДоИзменения[Реквизит] <> СтрокаПослеИзменения[Реквизит] Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность заполнения количества в табличной части
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект, который нужно проверить
//  ИмяТЧ - Строка - имя проверяемой табличной части
//  МассивНепроверяемыхРеквизитов - Массив - реквизиты, которые необходимо
//		исключить из стандартной процедуры проверки заполнения
//  Отказ - Булеов - флаг отказа от записи объекта (выполнения заданного действия)
//
Процедура ПроверитьЗаполнениеКоличестваВТЧ(Объект, ИмяТЧ, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	ПутьКДанным = "Объект";
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".Количество");
	
	ПредставлениеТЧ                          = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	
	Для Каждого СтрокаТаб Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТаб.Количество = 0 
			И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		ИначеЕсли СтрокаТаб.Количество = 0 Или СтрокаТаб.КоличествоУпаковок = 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПутьКДанным,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаказНаПроизводство

Функция ДобавитьКомандуСоздатьНаОснованииЗаказ(КомандыСоздатьНаОсновании) Экспорт
	
	Если УправлениеПроизводством.ИспользуетсяПроизводство22() Тогда
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство2_2;
	Иначе
		МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство;
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		
		КомандаСоздатьНаОсновании.Идентификатор = МенеджерОбъекта.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(МенеджерОбъекта);
		
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Этап

// Описывает служебные данные которые используются при редактировании этапа
// 
// Возвращаемое значение:
//   Структура 
//
Функция ПараметрыРедактированияЭтапа() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизитаОбъект", "Объект");
	Результат.Вставить("ИмяРеквизитаПараметрыУказанияСерий", "ПараметрыУказанияСерий");
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьВыполнениеЭтапаПоСтатусу(Объект, ДанныеЗаполнения = Неопределено, ИзмененныеРеквизиты = "")
	
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	СтатусСформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	СтатусКВыполнению = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	СтатусНачат       = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");
	СтатусЗавершен    = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	
	Если Объект.Статус = СтатусЗавершен Тогда
		
		Объект.Выполнено = Объект.Запланировано;
		
	ИначеЕсли Объект.Статус <> СтатусНачат Тогда
		
		Объект.Выполнено = 0;
		
	КонецЕсли;
	
	ПлановаяДатаПоступления = Неопределено;
	Если ДанныеЗаполнения <> Неопределено Тогда 
		ДанныеЗаполнения.Свойство("ПлановаяДатаПоступления", ПлановаяДатаПоступления);
	КонецЕсли;

	Если ПлановаяДатаПоступления = Неопределено Тогда
		ПлановаяДатаПоступления = '00010101';
	КонецЕсли;
	
	ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	// Выходные изделия и трудозатраты
	Если (Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению
			ИЛИ Объект.Статус = СтатусЗавершен)
		И НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Отметка = (Объект.Статус = СтатусЗавершен);
		
		УстановитьОтметкуПроизведено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			СтруктураОтбора = Новый Структура("Произведено", Истина);
			
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Если Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
					
					УстановитьОтметкуПроизведено = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если УстановитьОтметкуПроизведено Тогда
			
			ДатаПроизводства = Неопределено;
			
			Если Объект.ПроизводствоОднойДатой Тогда
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Отметка,
							Объект.ДатаПроизводства,
							,
							Объект.ДатаПроизводства = ПлановаяДатаПоступления);
				
				ДатаПроизводства = Объект.ДатаПроизводства;
				
			КонецЕсли;
			
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
					
					Строка.Произведено = Отметка;
					
					УправлениеПроизводством.УстановитьДатуПоОтметке(
								Отметка, 
								Строка.ДатаПроизводства, ДатаПроизводства, Истина);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(Объект);
			
		КонецЕсли;
		
		УстановитьОтметкуВыполнено = Истина;
		
		Если Объект.Статус = СтатусЗавершен Тогда
			
			СтруктураОтбора = Новый Структура("Выполнено", Истина);
			
			Если Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора).ВГраница() <> -1 Тогда
				
				УстановитьОтметкуВыполнено = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановитьОтметкуВыполнено Тогда
			
			Для Каждого Строка Из Объект.Трудозатраты Цикл
				
				Строка.Выполнено = Отметка;
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Отметка, 
							Строка.ДатаВыполнения,, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = СтатусНачат Тогда
		
		Если Объект.ПроизводствоОднойДатой Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Объект.ДатаПроизводства, ПлановаяДатаПоступления);
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Произведено", Ложь);
		
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			
			Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
				
				УправлениеПроизводством.УстановитьДатуПоОтметке(
							Истина, 
							Строка.ДатаПроизводства, ПлановаяДатаПоступления);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обеспечение, расход и экономия материалов
	Если НЕ Объект.ПроизводствоНаСтороне Тогда
		
		Если Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению Тогда
			
			Документы.ЭтапПроизводства2_2.ОтменитьДействиеОтгрузить(Объект);
			
		ИначеЕсли Объект.Статус = СтатусЗавершен Тогда
			
			Документы.ЭтапПроизводства2_2.УстановитьДействиеОтгрузить(Объект);
			
			Если Объект.РасходМатериаловИРабот.Количество() = 0 Тогда
				
				Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект);
				ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходМатериаловИРабот";
				
			ИначеЕсли Объект.ЭкономияМатериалов.Количество() = 0 Тогда
				
				Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(Объект);
				ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ЭкономияМатериалов";
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// От статуса зависит указание серий
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(Объект);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	
КонецПроцедуры

Процедура ОтразитьРаспоряженияНаПередачуИзПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспоряженияНаПередачуИзПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.РаспоряженияНаПередачуИзПроизводства;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

Функция ВыполняетсяПакетноеФормированиеЭтапов(Объект) Экспорт
	
	Возврат Объект.ДополнительныеСвойства.Свойство(КлючПакетныйРежимФормированияЭтапов());
	
КонецФункции

Функция КлючПакетныйРежимФормированияЭтапов() Экспорт
	
	Возврат "ПакетныйРежимФормированияЭтапов";
	
КонецФункции

Процедура УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ЭтоЗаказПереработчику = Ложь) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
        ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, 
		"СерииВсегдаВТЧТовары", 
		ПрефиксЭлементов + ИмяТЧ + "Серия", 
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий", 
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ДатаОтгрузки", "ДатаОтгрузки", ИмяТЧ, "ДатаОтгрузкиОбязательна");
		
	#КонецОбласти
	
	// Надпись <Производится на этапе>
	#Область Текст_ПроизводитсяНаЭтапе
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Производится на этапе>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Запрет редактирования спецификации если не установлен флаг Производится
	#Область Обеспечение_Спецификация_ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Спецификация"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Склад можно выбрать только для товаров
	#Область ТолькоПросмотрСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "Склад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Статья калькуляции обязательна в статусе Начат
	#Область СтатьяКалькуляции
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "СтатьяКалькуляции"].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(Форма, ИмяОбъекта, ИмяТЧ, ПрефиксЭлементов = "", ЭтоЗаказПереработчику = Ложь) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "НоменклатураЕдиницаИзмерения", 
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма, 
		ПрефиксЭлементов + ИмяТЧ + "Характеристика",
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");
	#КонецОбласти
	
	Если НЕ ЭтоЗаказПереработчику Тогда
		
		// В давальческой схеме назначение изделий обязательно
		// Субдавальческая схема не поддерживается, проверка нужна для только в этапах
		#Область ВыходныеИзделия_Назначение
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НазначениеРедактирование"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Назначение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".ХозяйственнаяОперация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		#КонецОбласти
	
	// Представление поля НаправлениеВыпуска
	#Область ВыходныеИзделия_НаправлениеВыпуска
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад'"));
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение'"));
	
		//
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "НаправлениеВыпуска"].Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы'"));
	#КонецОбласти
		
	// Статья и аналитика только если списываем на расходы, иначе указывается получатель
	#Область ВыходныеИзделия_АналитикаРасходов
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + ИмяТЧ + "АналитикаРасходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЦеховаяКладовая", Новый Структура("Получатель", "ЦеховаяКладовая")); // нужно чтобы не округлять количество до целых
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения = Неопределено) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЦеховаяКладовая", Новый Структура("Склад", "ЦеховаяКладовая"));	// нужно чтобы не округлять количество до целых
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть,
		СтруктураДействий,
		СтрокиЗаполнения);
			
КонецПроцедуры

Функция ПутиКДаннымДляОбеспечения(ЭтоЗаказПереработчику = Ложь) Экспорт
	
	ПутиКДанным = Новый Соответствие;
	
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
	
	// При редактировании этапов в заказе переработчику назначение указывается построчно
	Если НЕ ЭтоЗаказПереработчику Тогда
	
		ПутиКДанным.Вставить("Назначение", "НазначениеМатериалы");
		
	КонецЕсли;

	Возврат ПутиКДанным;
	
КонецФункции

Функция ПараметрыВыбораОбеспечения(Объект, ТекущаяСтрока) Экспорт

	ЭтоЗаказПереработчику = Объект.Свойство("Этапы");
	
	ТекущиеДанные = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);

	ПараметрыЗаполнения = Новый Структура("МенеджерРегистра", РегистрыНакопления.ЗаказыМатериаловВПроизводство);

	Если ЭтоЗаказПереработчику Тогда
		ОбъектОбеспечения = Новый Структура("Ссылка", Объект.Этапы.Выгрузить(,"Распоряжение").ВыгрузитьКолонку("Распоряжение"));
	Иначе
		ОбъектОбеспечения = Объект;
	КонецЕсли; 
	
	ПутиКДанным = ПутиКДаннымДляОбеспечения(ЭтоЗаказПереработчику);
	
	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		ТекущаяСтрока,
		ОбъектОбеспечения,
		Объект.ОбеспечениеМатериаламиИРаботами,
		ПутиКДанным,
		ПараметрыЗаполнения);

	Если ТекущиеДанные.Производится Тогда
		Результат.Вставить("ТолькоОбособленно", Истина);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция ЗаполнитьВариантОбеспеченияЭтапа(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	СтатусСформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	СтатусКВыполнению = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	
	ЭтоРедактированиеЭтаповВЗаказеПереработчику = (ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И Объект.Свойство("Этапы"));
	ДанныеЭтапов = Новый Соответствие;
	
	УдалитьНедопустимыеВариантыОбеспечения(Операция, Объект.ОбеспечениеМатериаламиИРаботами, ДанныеЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ЗаполнитьДатыОтгрузки = Ложь;
	ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
	ЖелаемаяДата = ?(ЭтоРедактированиеЭтаповВЗаказеПереработчику, Объект.ЖелаемаяДатаОтгрузки, Объект.ЖелаемаяДатаОбеспечения);
	ДатаПоУмолчанию = Макс(ТекущаяДатаСеанса, ЖелаемаяДата);
	
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	СписокЭтаповОтгрузить = Новый Массив;
	ЕстьОтгрузить = Ложь;
	
	ТребуетсяСвертка = ОбеспечениеСервер.СдвинутьДатуОтгрузкиКЖелаемой(
		ДанныеЗаполнения,
		ЖелаемаяДата,
		Объект.НеОтгружатьЧастями);
	
	ОбеспечениеСервер.СвернутьСтрокиДляОтгрузкиОднойДатой(
		ДанныеЗаполнения,
		Не Объект.НеОтгружатьЧастями,
		Операция = "СтрокаТовары",
		Не ТребуетсяСвертка);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		Иначе
			ТекСтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.Вставить(Объект.ОбеспечениеМатериаламиИРаботами.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");
		
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		ЗаполнитьДатуОтгрузки(Объект, ТекСтрокаТовары, СтрокаОбеспечения, ДатаПоУмолчанию);
		
		Если ЭтоРедактированиеЭтаповВЗаказеПереработчику Тогда
		
			Если ЗначениеЗаполнено(ТекСтрокаТовары.Распоряжение) Тогда
				
				ДанныеЭтапа = ДанныеЭтапов.Получить(ТекСтрокаТовары.Распоряжение);
				Если ДанныеЭтапа = Неопределено Тогда
					СтруктураПоиска = Новый Структура("Распоряжение", ТекСтрокаТовары.Распоряжение);
					ДанныеЭтапа = Объект.Этапы.НайтиСтроки(СтруктураПоиска)[0];
					ДанныеЭтапов.Вставить(ТекСтрокаТовары.Распоряжение, ДанныеЭтапа);
				КонецЕсли;
				ТекСтрокаТовары.Назначение = ДанныеЭтапа.Назначение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			ИЛИ ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			Если ЭтоРедактированиеЭтаповВЗаказеПереработчику 
				И СписокЭтаповОтгрузить.Найти(ТекСтрокаТовары.Распоряжение) = Неопределено Тогда
				СписокЭтаповОтгрузить.Добавить(ТекСтрокаТовары.Распоряжение);
			Иначе
				ЕстьОтгрузить = Истина;
			КонецЕсли; 
			
		ИначеЕсли Объект.НеОтгружатьЧастями Тогда
			
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;
	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ЭтоРедактированиеЭтаповВЗаказеПереработчику Тогда
		
		Для каждого ЭтапСсылка Из СписокЭтаповОтгрузить Цикл
			
			СтруктураПоиска = Новый Структура("Распоряжение", ЭтапСсылка);
			СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			
			Если СписокСтрок[0].Статус = СтатусФормируется
				ИЛИ СписокСтрок[0].Статус = СтатусСформирован
				ИЛИ СписокСтрок[0].Статус = СтатусКВыполнению Тогда
				
				СписокСтрок[0].Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если СписокЭтаповОтгрузить.Количество() <> 0
			И Форма.Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
			Форма.Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению;
		КонецЕсли;
		
	ИначеЕсли ЕстьОтгрузить Тогда
		
		Если Объект.Статус = СтатусФормируется
			ИЛИ Объект.Статус = СтатусСформирован
			ИЛИ Объект.Статус = СтатусКВыполнению Тогда
			
			Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
			УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
				Объект, 
				Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
				
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(
				Объект.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Процедура УдалитьНедопустимыеВариантыОбеспечения(Операция, Товары, ДанныеЗаполнения)
	
	СтрокиПолуфабрикатов = Новый Соответствие;
	ИдентификаторыСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Идентификатор = СтрокаОбеспечения.Идентификатор;
		Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
			СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
		ИначеЕсли Операция = "ИндексыСтрок" Тогда
			СтрокаТовары = Товары[Идентификатор];
		КонецЕсли;
		Если СтрокаТовары.Производится Тогда
			
			Если СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Обособленно
				И СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
					
				Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) = Неопределено Тогда
					ИдентификаторыСтрокКУдалению.Добавить(Идентификатор);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСтрокКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМассив = ТипЗнч(ДанныеЗаполнения) = Тип("Массив");
	
	СтрокиКУдалению = Новый Массив; 
	Для Сч = 0 По ДанныеЗаполнения.Количество() - 1 Цикл
		СтрокаОбеспечения = ДанныеЗаполнения[Сч];
		Если ИдентификаторыСтрокКУдалению.Найти(СтрокаОбеспечения.Идентификатор) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(?(ЭтоМассив, Сч, СтрокаОбеспечения));
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаОбеспечения Из СтрокиКУдалению Цикл
		ДанныеЗаполнения.Удалить(СтрокаОбеспечения);
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьДатуОтгрузки(Объект, СтрокаТовары, СтрокаОбеспечения, ЖелаемаяДатаОбеспечения) Экспорт
	
	Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
		ИЛИ СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		
		СтрокаТовары.ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
		
	ИначеЕсли НЕ Объект.НеОтгружатьЧастями И СтрокаОбеспечения.Отгружено = 0 Тогда
		
		СтрокаТовары.ДатаОтгрузки = Макс(СтрокаОбеспечения.ДатаОтгрузки, ЖелаемаяДатаОбеспечения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЖелаемуюДатуОбеспеченияЭтапа(Объект, ЖелаемаяДата) Экспорт
	
	Объект.ЖелаемаяДатаОбеспечения = ЖелаемаяДата;
	
	Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		Если Строка.ДатаОтгрузки < ЖелаемаяДата Тогда
			Строка.ДатаОтгрузки = ЖелаемаяДата;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область НазначениеРедактирование

Процедура ЗаполнитьНазначениеРедактированиеВТЧ(КоллекцияСтрок) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСсылок = Новый Массив;
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		Если ДанныеСтроки.ЭтапПотребитель.Пустая() Тогда
			ДанныеСтроки.НазначениеРедактирование = ДанныеСтроки.Назначение;
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(ДанныеСтроки);
		МассивСсылок.Добавить(ДанныеСтроки.ЭтапПотребитель);
	КонецЦикла;
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НазначенияЭтапов = Документы.ЭтапПроизводства2_2.НазначенияЭтапов(МассивСсылок);
	
	Для каждого ДанныеСтроки Из МассивСтрок Цикл
		ДанныеСтроки.НазначениеРедактирование = НазначенияЭтапов[ДанныеСтроки.ЭтапПотребитель];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Графы

// Возвращает граф этапов производства, представленный в виде списка смежности.
//
// Параметры:
//  ДанныеЗаполнения - РезультаЗапрос	 - Данные для заполнения графа
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - Таблица значений, хранящая вершины и ребра графа.
//                        Вершины хранятся как строки таблицы значений,
//                        ребра - как значение одной из колонок.
//
Функция Граф(ДанныеЗаполнения = Неопределено) Экспорт
	
	ОписаниеТипаСсылка = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	
	Граф = Новый ТаблицаЗначений();
	Граф.Колонки.Добавить("Ссылка",          ОписаниеТипаСсылка);
	Граф.Колонки.Добавить("Ребра",           Новый ОписаниеТипов("Массив"));
	Граф.Колонки.Добавить("КоличествоРебер", Новый ОписаниеТипов("Число"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("РезультатЗапроса") 
		И НЕ ДанныеЗаполнения.Пустой() Тогда
		
		Вершина = Неопределено;
		Выборка = ДанныеЗаполнения.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Вершина = Неопределено 
				ИЛИ Вершина.Ссылка <> Выборка.Вершина Тогда
				
				Вершина = Выборка.Вершина;
				
				ЭлементКоллекции = Граф.Добавить();
				ЭлементКоллекции.Ссылка = Выборка.Вершина;
				
			КонецЕсли;
			
			Если Выборка.СмежнаяВершина <> null Тогда
				ЭлементКоллекции.Ребра.Добавить(Выборка.СмежнаяВершина);
				ЭлементКоллекции.КоличествоРебер = ЭлементКоллекции.КоличествоРебер + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Граф.Индексы.Добавить("Ссылка");
	
	Возврат Граф;
	
КонецФункции

// Выполняет поиск циклов в графе, в качестве алгоритма поиска 
//  используется нерекурсивный обход графа в глубину
//
// Параметры:
//  Граф - ТаблицаЗначений - см. описание функции Граф()
//  НачалоДуги - ЛюбаяСсылка - вершина (начало дуги, на которой найден цикл)
//  КонецДуги - ЛюбаяСсылка - вершина (конец дуги, на которой найден цикл)
// 
// Возвращаемое значение:
//   - Булево - Истина, если цикл найден
//
Функция ЕстьЦиклыВГрафе(Граф, НачалоДуги = Неопределено, КонецДуги = Неопределено) Экспорт
	
	Если Граф.Количество() < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Граф.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Число"));
	Граф.Колонки.Добавить("ИндексСмежнойВершины", Новый ОписаниеТипов("Число"));
	Граф.ЗаполнитьЗначения(-1, "ИндексСмежнойВершины");
	
	ЕстьЦиклы = Ложь;
	
	Белый = 0;
	Серый = 1;
	Черный = 2;
	
	Вершина = Граф[0];
	Вершина.Цвет = Серый;
	
	Стек = Новый Массив;
	Стек.Добавить(Вершина);
	
	Пока Стек.ВГраница() <> -1 И НЕ ЕстьЦиклы Цикл
		
		Вершина = Стек[0];
		
		Если Вершина.ИндексСмежнойВершины + 1 < Вершина.КоличествоРебер Тогда
			
			Для Индекс = Вершина.ИндексСмежнойВершины + 1 По Вершина.КоличествоРебер - 1 Цикл
				
				Вершина.ИндексСмежнойВершины = Индекс;
				
				СмежнаяВершина = Граф.Найти(Вершина.Ребра[Индекс], "Ссылка");
				
				Если СмежнаяВершина.Цвет = Серый Тогда
					
					ЕстьЦиклы  = Истина;
					НачалоДуги = Вершина.Ссылка;
					КонецДуги  = СмежнаяВершина.Ссылка;
					
					Прервать;
					
				ИначеЕсли СмежнаяВершина.Цвет = Белый Тогда
					
					СмежнаяВершина.Цвет = Серый;
					
					Стек.Вставить(0,СмежнаяВершина);
					
					Прервать;
				
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Вершина.Цвет = Черный;
			
			Стек.Удалить(0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Граф.Колонки.Удалить("Цвет");
	Граф.Колонки.Удалить("ИндексСмежнойВершины");
	
	Возврат ЕстьЦиклы;
	
КонецФункции

// Возращает окружение вершины.
//
// Параметры:
//  Вершина - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф().
// 
// Возвращаемое значение:
//   - Массив - Окружение вершины.
//
Функция НайтиОкружениеВершины(Вершина) Экспорт
	
	Результат = Новый Массив;
	
	// Добавим служебное поле для работы алгоритма
	Вершина.Владелец().Колонки.Добавить("Посещена", Новый ОписаниеТипов("Булево"));
	
	ПоискВГлубину(Вершина, Результат);
	
	// Удалим служебное поле
	Вершина.Владелец().Колонки.Удалить("Посещена");
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск в глубину.
//
// Параметры:
//  Вершина		 - СтрокаТаблицыЗначений - строка таблицы значений, см. описание функции Граф().
//  Результат	 - Массив - Посещенные вершины.
//
Процедура ПоискВГлубину(Вершина, Результат) Экспорт
	
	Если Вершина.Посещена Тогда
		Возврат;
	КонецЕсли;
	
	Вершина.Посещена = Истина;
	Результат.Добавить(Вершина.Ссылка);
	
	Для Каждого Ребро Из Вершина.Ребра Цикл
		
		СмежнаяВершина = Вершина.Владелец().Найти(Ребро, "Ссылка");
		ПоискВГлубину(СмежнаяВершина, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает направление обхода графа "Вперед"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Вперед".
//
Функция НаправлениеОбходаГрафаВперед() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает направление обхода графа "Назад"
// 
// Возвращаемое значение:
//   - Число - направление обхода графа "Назад".
//
Функция НаправлениеОбходаГрафаНазад() Экспорт
	
	Возврат -1;
	
КонецФункции

#КонецОбласти

#Область Запросы

Функция ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса) Экспорт
	
	Возврат СтрСоединить(ТекстыЗапроса, "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|");
			
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// Структура данных графика производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных
//
Функция СтруктураДанныхГрафикПроизводства() Экспорт
	
	ПараметрыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОТДата = Новый ОписаниеТипов(Новый ОписаниеТипов("Дата"),,,,, ПараметрыДаты);
	ОТБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	
	Результат.Колонки.Добавить("НачалоЭтапа", ОТДата);
	Результат.Колонки.Добавить("ОкончаниеПредварительногоБуфера", ОТДата);
	Результат.Колонки.Добавить("НачалоЗавершающегоБуфера", ОТДата);
	Результат.Колонки.Добавить("ОкончаниеЭтапа", ОТДата);
	Результат.Колонки.Добавить("НаКритическомПути", ОТБулево);
	Результат.Колонки.Добавить("ОграничиваетСрокВыпуска", ОТБулево);
	
	Результат.Колонки.Добавить("Рассчитан", ОТБулево);
	
	Результат.Индексы.Добавить("Этап");
	
	Возврат Результат;
	
КонецФункции

// Структура данных продукции и полуфабрикатов в производстве
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных
//
Функция СтруктураДанныхПродукцияИПолуфабрикаты() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
	Результат.Колонки.Добавить("Распоряжение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	Результат.Колонки.Добавить("Спецификация", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

// Структура данных изделий этапа производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - структура данных
//
Функция СтруктураДанныхИзделияЭтапа() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапПотребитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Результат.Колонки.Добавить("Упаковка", ОписаниеТипов);
	
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоУпаковок");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область ПереработкаДавальческогоСырья

// Используется для заполнения флага "Передать давальцу" в этапе производства,
//  отражающих факт производства давальческой продукции.
//
// Параметры:
//  ТабличнаяЧасть	 - ТабличнаяЧасть	 - Табличная часть документа, содержащая реквизит Назначение и реквизит ПередатьДавальцу
//
Процедура ЗаполнитьФлагПередатьДавальцуВТабличнойЧастиЭтапаПроизводства(ТабличнаяЧасть) Экспорт
	
	КоллекцияСтрок = Новый Массив;
	Назначения = Новый Массив;
	Для каждого Строка Из ТабличнаяЧасть Цикл
		//исключаем полуфабрикаты производимые в процессе
		Если Строка.ЭтапПотребитель.Пустая() И Не Строка.Назначение.Пустая() Тогда
			Назначения.Добавить(Строка.Назначение);
			КоллекцияСтрок.Добавить(Строка);
		КонецЕсли;
		Строка.ПередатьДавальцу = Ложь;
	КонецЦикла;
	
	НазначенияПродукцииДавальца = Неопределено;
	Если Назначения.Количество() > 0 Тогда
		НазначенияПродукцииДавальца = Справочники.Назначения.НазначенияПродукцииДавальца(Назначения);
	КонецЕсли;
	Если НазначенияПродукцииДавальца = Неопределено Тогда
		НазначенияПродукцииДавальца = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Строка.ПередатьДавальцу = НазначенияПродукцииДавальца.Получить(Строка.Назначение) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

// Используется для заполнения флага "Передать давальцу" в производственных документах,
//  отражающих факт производства давальческой продукции.
//
// Параметры:
//  ТабличнаяЧасть	 - ТабличнаяЧасть	 - Табличная часть документа, содержащая реквизит Назначение и реквизит ПередатьДавальцу
//
Процедура ЗаполнитьФлагПередатьДавальцуПоНазначениюВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Назначения = ТабличнаяЧасть.ВыгрузитьКолонку("Назначение");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Назначения, Справочники.Назначения.ПустаяСсылка());
	
	НазначенияПродукцииДавальца = Неопределено;
	Если Назначения.Количество() > 0 Тогда
		НазначенияПродукцииДавальца = Справочники.Назначения.НазначенияПродукцииДавальца(Назначения);
	КонецЕсли;
	Если НазначенияПродукцииДавальца = Неопределено Тогда
		НазначенияПродукцииДавальца = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Строка.ПередатьДавальцу = НазначенияПродукцииДавальца.Получить(Строка.Назначение) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область ПереходНаУправлениеПроизводствомВерсии22

Процедура ОтключитьПроизводство21() Экспорт
	
	Константы.ИспользоватьУправлениеПроизводством.Установить(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ЕстьНезавершенныеОперацииВПроизводстве21() Экспорт
	
	Если КоличествоВыполняющихсяЗаказовНаПроизводство21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоЗаказовМатериаловОжидающихИсполнения21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоРаспоряженийНаОформлениеВыпускаПродукции21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КоличествоВыпусковТребующихСписанияЗатрат21() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьОстаткиМатериаловИРаботВПроизводстве21() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НезавершенныеПроизводственныеПроцессы21() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КоличествоВыполняющихсяЗаказовНаПроизводство",       КоличествоВыполняющихсяЗаказовНаПроизводство21());
	Результат.Вставить("КоличествоЗаказовМатериаловОжидающихИсполнения",     КоличествоЗаказовМатериаловОжидающихИсполнения21());
	Результат.Вставить("КоличествоРаспоряженийНаОформлениеВыпускаПродукции", КоличествоРаспоряженийНаОформлениеВыпускаПродукции21());
	Результат.Вставить("КоличествоВыпусковТребующихСписанияЗатрат",          КоличествоВыпусковТребующихСписанияЗатрат21());
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоВыполняющихсяЗаказовНаПроизводство21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаПроизводство.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.Статус <> &СтатусЗавершен");
		
	Запрос.УстановитьПараметр("СтатусЗавершен", Перечисления.СтатусыЗаказовНаПроизводство.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;

КонецФункции

Функция КоличествоЗаказовМатериаловОжидающихИсполнения21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказМатериаловВПроизводство.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТРаспоряжения
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
		|ГДЕ
		|	ЗаказМатериаловВПроизводство.Проведен
		|	И НЕ ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
		|			,
		|			Распоряжение В
		|				(ВЫБРАТЬ
		|					ТОтбора.Ссылка
		|				ИЗ
		|					ВТРаспоряжения КАК ТОтбора)) КАК Остатки
		|ГДЕ
		|	(Остатки.ЗаказаноОстаток > 0
		|		ИЛИ Остатки.ВРезервеОстаток > 0
		|		ИЛИ Остатки.КОформлениюОстаток > 0)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоРаспоряженийНаОформлениеВыпускаПродукции21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(, ) КАК Остатки
		|ГДЕ
		|	Остатки.КОформлениюОстаток > 0");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция КоличествоВыпусковТребующихСписанияЗатрат21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Остатки.Распоряжение) КАК Количество
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(, ) КАК Остатки");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция ЕстьОстаткиМатериаловИРаботВПроизводстве21() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Остатки.Организация    КАК Организация,
		|	Остатки.Номенклатура   КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Подразделение  КАК Подразделение,
		|	Остатки.Серия          КАК Серия,
		|	Остатки.Назначение     КАК Назначение
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|			,
		|			Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|												ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				И Подразделение ССЫЛКА Справочник.СтруктураПредприятия) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток <> 0");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает дату с учетом переданной отметки
//
// Параметры:
//  Отметка		 - Булево	 - отметка
//  ПолеДата	 - Дата		 - реквизит, в котором нужно установить дату
//  ДатаСобытия	 - Дата		 - устанавливаемая дата
//  Затереть	 - Булево	 - признак, что дату нужно установить принудительно
//
Процедура УстановитьДатуПоОтметке(Отметка, ПолеДата, ДатаСобытия = Неопределено, Затереть = Ложь) Экспорт
	
	Если ДатаСобытия = Неопределено Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ Отметка И ПолеДата <> '000101010000' Тогда
		ПолеДата  = '000101010000';
	ИначеЕсли Отметка И (ПолеДата = '000101010000' ИЛИ Затереть) Тогда
		ПолеДата = ДатаСобытия;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные при изменении обособленного обеспечения
//
// Параметры:
// МассивЗаказов - Массив - содержит ссылки на документы
//
Процедура ПриИзмененииОбособленногоОбеспечения(Объект, МассивЗаказов) Экспорт
	
	Если МассивЗаказов.Количество() = 0 ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивЗаказов);
	
	МассивСсылок = Новый Массив;
	Для Каждого Элемент Из ЗаказыПоТипам Цикл
		Если Элемент.Ключ = "Документ.ЭтапПроизводства2_2" Тогда
			МассивСсылок = Документы.ЭтапПроизводства2_2.ВыбратьЭтапыНазначения(Элемент.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОбновитьСостояниеОбеспечения(МассивСсылок);
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ПроверитьАктуальностьГрафикаПриИзмененииСроковОбеспечения(МассивСсылок);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает используемые виды рабочих центров
//  Объект - ДокументОбъект.ЭтапПроизводства2_2 - этап производства
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ИспользуемыеВидыРабочихЦентров(Объект) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Результат.Колонки.Добавить("ВидРабочегоЦентра", ОписаниеТипа);
	
	ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени");
	Результат.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипа);
	
	ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(10, 1, ДопустимыйЗнак.Неотрицательный);
	Результат.Колонки.Добавить("ВремяРаботы", ОписаниеТипа);
	
	ПараметрыОтбора = Новый Структура("Использовать", Истина);
	
	Для Каждого Строка Из Объект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
