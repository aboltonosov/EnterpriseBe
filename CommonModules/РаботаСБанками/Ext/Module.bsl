////////////////////////////////////////////////////////////////////////////////
// Подсистема "Банки".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с данными справочника КлассификаторБанковРФ.

// Получает данные из справочника КлассификаторБанковРФ по значениям БИК и корреспондентского счета банка.
// 
// Параметры:
//  БИК          - Строка - банковский идентификационный код.
//  КоррСчет     - Строка - корреспондентский счет банка.
//  ЗаписьОБанке - СправочникСсылка, Строка - (возвращаемый) найденный банк.
Процедура ПолучитьДанныеКлассификатораРФ(БИК = "", КоррСчет = "", ЗаписьОБанке = "") Экспорт
	Если Не ПустаяСтрока(БИК) Тогда
		ЗаписьОБанке = Справочники.КлассификаторБанковРФ.НайтиПоКоду(БИК);
	ИначеЕсли Не ПустаяСтрока(КоррСчет) Тогда
		ЗаписьОБанке = Справочники.КлассификаторБанковРФ.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	Иначе
		ЗаписьОБанке = "";
	КонецЕсли;
	Если ЗаписьОБанке = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
		ЗаписьОБанке = "";
	КонецЕсли;
КонецПроцедуры

// Возвращает текстовое описание причины, по которой банк отмечен недействительным.
//
// Параметры:
// Параметры:
//  Банк - СправочникСсылка.КлассификаторБанковРФ - банк, для которого необходимо получить текст пояснения.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока.
Функция ПояснениеНедействительногоБанка(Банк) Экспорт
	
	НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Ссылка,
	|	КлассификаторБанковРФ.Код КАК БИК
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|ГДЕ
	|	КлассификаторБанковРФ.Ссылка <> &Ссылка
	|	И КлассификаторБанковРФ.Наименование = &Наименование
	|	И НЕ КлассификаторБанковРФ.ДеятельностьПрекращена";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Банк);
	Запрос.УстановитьПараметр("Наименование", НаименованиеБанка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НовыеРеквизитыБанка = Неопределено;
	Если Выборка.Следующий() Тогда
		НовыеРеквизитыБанка = Новый Структура("Ссылка, БИК", Выборка.Ссылка, Выборка.БИК);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) И ЗначениеЗаполнено(НовыеРеквизитыБанка) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'БИК банка изменился на <a href = ""%1"">%2</a>'"),
			ПолучитьНавигационнуюСсылку(НовыеРеквизитыБанка.Ссылка), НовыеРеквизитыБанка.БИК);
	Иначе
		Результат = НСтр("ru = 'Деятельность банка прекращена'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Результат);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы"].Добавить(
		"РаботаСБанкамиКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентаПриЗапуске"].Добавить(
		"РаботаСБанками");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		СерверныеОбработчики["ТехнологияСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке"].Добавить(
			"РаботаСБанками");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ТекущиеДела\ПриЗаполненииСпискаТекущихДел"].Добавить(
			"РаботаСБанками");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"РаботаСБанками");
		
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаСБанками");
КонецПроцедуры

// Определить список справочников, доступных для загрузки с помощью подсистемы "Загрузка данных из файла".
//
// Параметры:
//  ЗагружаемыеСправочники - ТаблицаЗначений - список справочников, в которые возможна загрузка данных.
//      * ПолноеИмя          - Строка - полное имя справочника (как в метаданных).
//      * Представление      - Строка - представление справочника в списке выбора.
//      * ПрикладнаяЗагрузка - Булево - если Истина, значит справочник использует собственный алгоритм загрузки и
//                                      в модуле менеджера справочника определены функции.
//
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор КлассификаторБанковРФ запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.КлассификаторБанковРФ.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указана пустая строка, значит в модуле менеджера определены обе функции.
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.КлассификаторБанковРФ.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему.

// См. одноименную процедуру в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(
		Метаданные.Роли.ДобавлениеИзменениеБанков.Имя);
	
КонецПроцедуры

// См. описание одноименной процедуры в общем модуле РегламентныеЗаданияПереопределяемый.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанковРФССайтаРБК;
	Зависимость.ДоступноВМоделиСервиса      = Ложь;
	Зависимость.ДоступноВПодчиненномУзлеРИБ = Ложь;
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки.
Процедура ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки(ДанныеПользователя) Экспорт
	УстановитьПараметрыРегламентногоЗадания(Новый Структура("Использование", Истина));
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки.
Процедура ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки() Экспорт
	УстановитьПараметрыРегламентногоЗадания(Новый Структура("Использование", Ложь));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.3.4.69";
		Обработчик.Процедура = "РаботаСБанками.УстановитьРасписаниеРегламентногоЗадания";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРасписаниеРегламентногоЗадания() Экспорт
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	Задержка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 21600); // С 0 до 6 часов утра.
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодНедель = 1;
	Расписание.ВремяНачала = '00010101000000' + Задержка;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 600);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 10);
	
	УстановитьПараметрыРегламентногоЗадания(ПараметрыЗадания);
	
КонецПроцедуры

Процедура УстановитьПараметрыРегламентногоЗадания(ИзменяемыеПараметры)
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанковРФССайтаРБК;
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		Для Каждого ИзменяемыйПараметр Из ИзменяемыеПараметры Цикл
			ПараметрыЗадания.Вставить(ИзменяемыйПараметр.Ключ, ИзменяемыйПараметр.Значение);
		КонецЦикла;
		ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ИзменяемыеПараметры);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполняет параметры, которые используется клиентским кодом на запуске конфигурации.
//
// Параметры:
//   Параметры (Структура) Параметры запуска.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ВыводитьОповещениеОНеактуальности = (
		Не ОбщегоНазначенияПовтИсп.РазделениеВключено() // В модели сервиса обновляется автоматически.
		И Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() // В узле РИБ обновляется автоматически.
		И ПравоДоступа("Изменение", Метаданные.Справочники.КлассификаторБанковРФ) // Пользователь с необходимыми правами.
		И Не КлассификаторАктуален()); // Классификатор уже обновлен.
	
	ВключитьОповещение = Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	РаботаСБанкамиПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденияОбУстаревшемКлассификатореБанков(ВключитьОповещение);
	
	Параметры.Вставить("Банки", Новый ФиксированнаяСтруктура("ВыводитьОповещениеОНеактуальности", (ВыводитьОповещениеОНеактуальности И ВключитьОповещение)));
	
КонецПроцедуры

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() // В модели сервиса обновляется автоматически.
		Или ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() // В узле РИБ обновляется автоматически.
		Или Не ПравоДоступа("Изменение", Метаданные.Справочники.КлассификаторБанковРФ)
		Или МодульТекущиеДелаСервер.ДелоОтключено("КлассификаторБанков") Тогда
		Возврат;
	КонецЕсли;
	
	Результат = АктуальностьКлассификатораБанков();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.КлассификаторБанковРФ.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторБанки = "КлассификаторБанков" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторБанки;
		Дело.ЕстьДела       = Результат.КлассификаторУстарел;
		Дело.Важное         = Результат.КлассификаторПросрочен;
		Дело.Представление  = НСтр("ru = 'Классификатор банков устарел'");
		Дело.Подсказка      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Последнее обновление %1 назад'"), Результат.ВеличинаПросрочкиСтрокой);
		Дело.Форма          = "Справочник.КлассификаторБанковРФ.Форма.ЗагрузкаКлассификатора";
		Дело.ПараметрыФормы = Новый Структура("ОткрытиеИзСписка", Истина);
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.КлассификаторБанковРФ);
	
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией.
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения()));
	
КонецПроцедуры

// Возвращает список разрешений для загрузки классификатора банков с сайта РБК.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения()
	
	Разрешения = Новый Массив;
	
	// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:29:03 
	// Загрузка перечня банков, №14618 
	// {
	Протокол = "HTTP";
	Адрес = "www.nbrb.by";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Загрузка классификатора банков из интернета.'");
	// }
	// 4D
	
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
		
	Возврат Разрешения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с данными сайта РБК

// Формирует, дополняет текст сообщения пользователю в случае, если загрузка данных классификатора проведена успешно.
// 
// Параметры:
//	ПараметрыЗагрузкиКлассификатора - Соответствие:
//	Загружено						- Число  - Количество новых записей классификатора.
//	Обновлено						- Число  - Количество обновленных записей классификатора.
//	ТекстСообщения					- Строка - тест сообщения о результатах загрузки.
//	ЗагрузкаВыполнена               - Булево - флаг успешного завершения загрузки данных классификатора.
//
Процедура ДополнитьТекстСообщения(ПараметрыЗагрузкиКлассификатора)
	
	ТекстСообщения = ПараметрыЗагрузкиКлассификатора["ТекстСообщения"];
	Загружено = ПараметрыЗагрузкиКлассификатора["Загружено"];
	Обновлено = ПараметрыЗагрузкиКлассификатора["Обновлено"];
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Если Загружено = 0 И Обновлено = 0 Тогда
			ТекстСообщения = НСтр("ru ='Загрузка завершена. Изменений в классификаторе нет.'");
		Иначе
			
			// 4D:ERP для Беларуси, Дмитрий, 24.09.2017 13:23:46 
			// Загрузка перечня банков, №14618 
			// {
			ТекстСообщения = НСтр("ru ='Загрузка классификатора банков РБ выполнена успешно.'");
			// }
			// 4D
			
		КонецЕсли;
	КонецЕсли;
	
	Если Загружено > 0 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Загружено новых: %1.'"), Загружено);
	КонецЕсли;
	
	Если Обновлено > 0 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Обновлено записей: %1.'"), Обновлено);
	КонецЕсли;
	
	ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", ТекстСообщения);
	
КонецПроцедуры

// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:29:03 
// Загрузка перечня банков, №14618 
// {
Процедура ПолучитьДанныеРБК(ПараметрыЗагрузкиКлассификатора, АдресХранилища = "") Экспорт
	
	ПараметрыЗагрузкиФайлов = Новый Соответствие;
	ПараметрыЗагрузкиФайлов.Вставить("Загружено", ПараметрыЗагрузкиКлассификатора["Загружено"]);
	ПараметрыЗагрузкиФайлов.Вставить("Обновлено", ПараметрыЗагрузкиКлассификатора["Обновлено"]);
	ПараметрыЗагрузкиФайлов.Вставить("ТекстСообщения", ПараметрыЗагрузкиКлассификатора["ТекстСообщения"]);
	
	ЗагрузитьДанные(ПараметрыЗагрузкиФайлов);
	УстановитьВерсиюКлассификатораБанков();
	
	ПараметрыЗагрузкиКлассификатора.Вставить("Загружено", ПараметрыЗагрузкиФайлов["Загружено"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("Обновлено", ПараметрыЗагрузкиФайлов["Обновлено"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", ПараметрыЗагрузкиФайлов["ТекстСообщения"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("ЗагрузкаВыполнена", Истина);
	
	ДополнитьТекстСообщения(ПараметрыЗагрузкиКлассификатора);
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗагрузкиКлассификатора, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

// Получает, сортирует, записывает данные классификатора БИК РФ с сайта РБК;
//
Процедура ЗагрузитьКлассификаторБанков() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанковРФССайтаРБК);
	
	УровеньСобытия = УровеньЖурналаРегистрации.Информация;
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньСобытия, , , НСтр("ru = 'Загрузка в подчиненном узле РИБ не предусмотрена'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузкиКлассификатора = Новый Соответствие;
	ПараметрыЗагрузкиКлассификатора.Вставить("Загружено", 0);
	ПараметрыЗагрузкиКлассификатора.Вставить("Обновлено", 0);
	ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", "");
	ПараметрыЗагрузкиКлассификатора.Вставить("ЗагрузкаВыполнена", Ложь);
	
	ПолучитьДанныеРБК(ПараметрыЗагрузкиКлассификатора);
	
	Если ПараметрыЗагрузкиКлассификатора["ЗагрузкаВыполнена"] Тогда
		Если ПустаяСтрока(ПараметрыЗагрузкиКлассификатора["ТекстСообщения"]) Тогда
			ДополнитьТекстСообщения(ПараметрыЗагрузкиКлассификатора);
		КонецЕсли;
	Иначе
		УровеньСобытия = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньСобытия, , , ПараметрыЗагрузкиКлассификатора["ТекстСообщения"]);
	
КонецПроцедуры
 
// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:29:03 
// Загрузка перечня банков, №14618 
// {
Процедура ЗагрузитьДанные(ПараметрыЗагрузкиФайлов)
	
	ПараметрыЗагрузкиДанных = Новый Соответствие;
	ПараметрыЗагрузкиДанных.Вставить("Загружено", ПараметрыЗагрузкиФайлов["Загружено"]);
	ПараметрыЗагрузкиДанных.Вставить("Обновлено", ПараметрыЗагрузкиФайлов["Обновлено"]);
	
	ДействующиеБанки = Новый ТаблицаЗначений;
	ДействующиеБанки.Колонки.Добавить("БИК", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	
	НедействующиеБанки = Новый ТаблицаЗначений;
	НедействующиеБанки.Колонки.Добавить("БИК", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	
	Соединение = Новый HTTPСоединение("www.nbrb.by");
	HTTPЗапрос = Новый HTTPЗапрос("/API/BIC");
	
	ОтветHTTP = Соединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , "Bad status code");
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ОтветHTTP.ПолучитьТелоКакПоток()); 
    Банки = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Для Каждого Банк ИЗ Банки Цикл
		
		БИК 			= Банк.CDBank;
		Наименование 	= Банк.NmBankShort;	
		Город 			= Банк.AdrBank;
		Состояние		= Банк.CdControl;
		
		СтруктураБанк = Новый Структура;
		СтруктураБанк.Вставить("Наименование", Наименование);
		СтруктураБанк.Вставить("БИК", БИК);
		СтруктураБанк.Вставить("Состояние", Состояние);
		СтруктураБанк.Вставить("Город", ПолучитьГород(Город));
		
		ПараметрыЗагрузкиДанных.Вставить("СтруктураБанк", СтруктураБанк);
		ЗаписатьЭлементКлассификатораБанков(ПараметрыЗагрузкиДанных);
		
		Если Состояние = Неопределено Тогда
			НоваяСтрока     = ДействующиеБанки.Добавить();
			НоваяСтрока.БИК = БИК;
		Иначе
			НоваяСтрока     = НедействующиеБанки.Добавить();
			НоваяСтрока.БИК = БИК;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// пометка недействующих банков
	КоличествоОтмеченных = ОтметитьНедействующиеБанки(ДействующиеБанки, НедействующиеБанки);
	ПараметрыЗагрузкиФайлов["Обновлено"] = ПараметрыЗагрузкиДанных["Обновлено"] + КоличествоОтмеченных;
	
	ПараметрыЗагрузкиДанных.Вставить("Загружено", ПараметрыЗагрузкиДанных["Загружено"]);
	ПараметрыЗагрузкиДанных.Вставить("Обновлено", ПараметрыЗагрузкиДанных["Обновлено"]);
КонецПроцедуры 
// }
// 4D

// 4D:УПП для Беларуси, Екатерина, 06.06.2017 16:04:54 
// №15046
// {
Функция ПолучитьГород(СтрокаАдреса)
	
	Возврат СтрЗаменить(СтрокаАдреса, "Г.", "г. ");
		
КонецФункции	
// }
// 4D

// Выполняет загрузку классификатора банков РФ из файла, полученного с сайта РБК.
Функция ЗагрузитьДанныеИзФайлаРБК(ИмяФайла) Экспорт
	
	// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:29:03 
	// Загрузка перечня банков, №14618 
	// {
	Параметры = Новый Соответствие;
	Параметры.Вставить("Загружено", 0);
	Параметры.Вставить("Обновлено", 0);
	Параметры.Вставить("ТекстСообщения", "");
	Параметры.Вставить("ЗагрузкаВыполнена", Неопределено);
	
	ЗагрузитьДанные(Параметры);
	// }
	// 4D
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:29:03 
// Загрузка перечня банков, №14618 
// {
Функция ИмяСобытияВЖурналеРегистрации()
	
	Возврат НСтр("ru = 'Загрузка классификатора банков.НБРБ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции
// }
// 4D

Функция ОтметитьНедействующиеБанки(ДействующиеБанки, НедействующиеБанки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НедействующиеБанки.БИК КАК БИК
	|ПОМЕСТИТЬ НедействующиеБанки
	|ИЗ
	|	&НедействующиеБанки КАК НедействующиеБанки
	|ГДЕ
	|	НЕ НедействующиеБанки.БИК В (&БИК)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БИК";
	Запрос.УстановитьПараметр("НедействующиеБанки", НедействующиеБанки);
	Запрос.УстановитьПараметр("БИК", ДействующиеБанки.ВыгрузитьКолонку("БИК"));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Ссылка
	|ИЗ
	|	НедействующиеБанки КАК НедействующиеБанки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО НедействующиеБанки.БИК = КлассификаторБанковРФ.Код
	|ГДЕ
	|	КлассификаторБанковРФ.ДеятельностьПрекращена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	КлассификаторБанковРФ.Ссылка";
	
	ВыборкаБанков = Запрос.Выполнить().Выбрать();
	Пока ВыборкаБанков.Следующий() Цикл
		БанкОбъект = ВыборкаБанков.Ссылка.ПолучитьОбъект();
		БанкОбъект.ДеятельностьПрекращена = Истина;
		БанкОбъект.Записать();
	КонецЦикла;
	
	Возврат ВыборкаБанков.Количество();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с данными диска ИТС

// Сортирует, записывает данные классификатора БИК РФ с диска ИТС.
// 
// Параметры:
//	ПараметрыЗагрузкиФайловИТС		 - Соответствие:
//	ПодготовкаИТСАдресДвоичныхДанных - ВременноеХранилище - Обработка подготовки данных БИК ИТС.
//  ДанныеИТСАдресДвоичныхДанных	 - ВременноеХранилище - Файл данных БИК ИТС.
//	Загружено						 - Число		      - Количество новых записей классификатора.
//	Обновлено						 - Число			  - Количество обновленных записей классификатора.
//	ТекстСообщения					 - Строка			  - тест сообщения о результатах загрузки.
//	ЗагрузкаВыполнена                - Булево             - флаг успешного завершения загрузки данных классификатора.
//
Процедура ЗагрузитьДанныеДискИТС(ПараметрыЗагрузкиФайловИТС) Экспорт
	
	// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:35:48 
	// Загрузка перечня банков, №14618 
	// {
	ЗагрузитьКлассификаторБанков();
	// }
	// 4D
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись обработанных данных

// 4D:ERP для Беларуси, Дмитрий, 27.04.2017 12:35:48 
// Загрузка перечня банков, №14618 
// {
Процедура ЗаписатьЭлементКлассификатораБанков(ПараметрыЗагрузкиДанных)
	
	ФлагНовый		= Ложь;
	ФлагОбновленный = Ложь;
	
	СтруктураБанк = ПараметрыЗагрузкиДанных["СтруктураБанк"];
	Загружено	  = ПараметрыЗагрузкиДанных["Загружено"];
	Обновлено	  = ПараметрыЗагрузкиДанных["Обновлено"];
	
	ЗаписываемыйЭлементСправочникаКлассификаторБанковРФ = Справочники.КлассификаторБанковРФ.ПустаяСсылка();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КлассификаторБанковРФ.Ссылка,
	               |	КлассификаторБанковРФ.Код,
	               |	КлассификаторБанковРФ.ЦБУ
	               |ИЗ
	               |	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	               |ГДЕ
	               |	КлассификаторБанковРФ.Код = &БИК
	               |	И КлассификаторБанковРФ.ЦБУ = &ЦБУ";
	
	Запрос.УстановитьПараметр("БИК", СтруктураБанк.БИК);
	Запрос.УстановитьПараметр("ЦБУ", "");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписываемыйЭлементСправочникаКлассификаторБанковРФ = Выборка.Ссылка;
	КонецЦикла;
	
	Если ЗаписываемыйЭлементСправочникаКлассификаторБанковРФ.Пустая() Тогда
		КлассификаторБанковОбъект = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
		ФлагНовый				  = Истина;
	Иначе	
		КлассификаторБанковОбъект = ЗаписываемыйЭлементСправочникаКлассификаторБанковРФ.ПолучитьОбъект();
	КонецЕсли;
	
	Если КлассификаторБанковОбъект.ДеятельностьПрекращена Тогда
		КлассификаторБанковОбъект.ДеятельностьПрекращена = Ложь;
	КонецЕсли;
	
	Если КлассификаторБанковОбъект.ПометкаУдаления Тогда
		КлассификаторБанковОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если КлассификаторБанковОбъект.Код <> СтруктураБанк.БИК Тогда
		КлассификаторБанковОбъект.Код = СтруктураБанк.БИК;
	КонецЕсли;
	
	Если КлассификаторБанковОбъект.Наименование <> СтруктураБанк.Наименование Тогда
		Если Не ПустаяСтрока(СтруктураБанк.Наименование) Тогда
			КлассификаторБанковОбъект.Наименование = СтруктураБанк.Наименование;
		КонецЕсли;	
	КонецЕсли;
	
	Если КлассификаторБанковОбъект.Город <> СтруктураБанк.Город Тогда
		Если Не ПустаяСтрока(СтруктураБанк.Город) Тогда
			КлассификаторБанковОбъект.Город = СтруктураБанк.Город;
		КонецЕсли;	
	КонецЕсли;
	
	КлассификаторБанковОбъект.Адрес    = "";
	КлассификаторБанковОбъект.Телефоны = "";
	
	Если КлассификаторБанковОбъект.Модифицированность() Тогда
		ФлагОбновленный		  = Истина;
		КлассификаторБанковОбъект.Записать();
	КонецЕсли;
	
	Если ФлагНовый Тогда
		Загружено = Загружено + 1;
	ИначеЕсли ФлагОбновленный Тогда
		Обновлено = Обновлено + 1;
	КонецЕсли;
	
	ПараметрыЗагрузкиДанных.Вставить("Загружено", Загружено);
	ПараметрыЗагрузкиДанных.Вставить("Обновлено", Обновлено);
	
КонецПроцедуры
// }
// 4D

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Устанавливает значение даты загрузки данных классификатора.
// 
// Параметры:
//  ДатаВерсии - ДатаВремя - Дата загрузки данных классификатора.
Процедура УстановитьВерсиюКлассификатораБанков(ДатаВерсии = "")
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ДатаВерсии) <> Тип("Дата") Тогда
		Константы.ВерсияКлассификатораБанковРФ.Установить(ТекущаяУниверсальнаяДата());
	Иначе
		Константы.ВерсияКлассификатораБанковРФ.Установить(ДатаВерсии);
	КонецЕсли;
КонецПроцедуры

// Определяет нужно ли обновление данных классификатора.
//
Функция КлассификаторАктуален() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПоследнееОбновление = Константы.ВерсияКлассификатораБанковРФ.Получить();
	ДопустимаяПросрочка = 30*60*60*24;
	
	Если ТекущаяДатаСеанса() > ПоследнееОбновление + ДопустимаяПросрочка Тогда
		Возврат Ложь; // Пошла просрочка.
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция АктуальностьКлассификатораБанков()
	
	УстановитьПривилегированныйРежим(Истина);
	ПоследнееОбновление = Константы.ВерсияКлассификатораБанковРФ.Получить();
	ДопустимаяПросрочка = 60*60*24;
	
	Результат = Новый Структура;
	Результат.Вставить("КлассификаторУстарел", Ложь);
	Результат.Вставить("КлассификаторПросрочен", Ложь);
	Результат.Вставить("ВеличинаПросрочкиСтрокой", "");
	
	Если ТекущаяДатаСеанса() > ПоследнееОбновление + ДопустимаяПросрочка Тогда
		Результат.ВеличинаПросрочкиСтрокой = ОбщегоНазначения.ИнтервалВремениСтрокой(ПоследнееОбновление, ТекущаяДатаСеанса());
		
		ВеличинаПросрочки = (ТекущаяДатаСеанса() - ПоследнееОбновление);
		ДнейПросрочено = Цел(ВеличинаПросрочки/60/60/24);
		
		Результат.КлассификаторУстарел = ДнейПросрочено >= 1;
		Результат.КлассификаторПросрочен = ДнейПросрочено >= 7;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
