
#Область ПрограммныйИнтерфейс

#Область ПравилаПолученияФактическихДанных
	
// Возвращает ссылку на схему по типу, разделу и указанному источнику данных
// Предназначен для обезличенного, не зависящего от ссылки кэшированного получения схем из справочников-правил получения данных
// Если схема модифицируется в последствии в коде, то именно она будет возвращаться из кэша 
// 
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативный, международный или регламентированный учет
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - объект, содержащий имя макета СКД в правиле
// 
// Возвращаемое значение:
// 	 СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соотвествующая источнику. 
//						   - Неопределено - если макет не найден.
//
Функция СхемаКомпоновкиДанныхПравила(ИмяСправочникаИсточника, РазделИсточникаДанных, ИсточникДанных) Экспорт
	
	СхемаКомпоновкиДанныхПравила = Неопределено;
	ИмяСхемы = Неопределено;
	МакетИсточникаДанных = Неопределено;
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени("Справочник." + ИмяСправочникаИсточника);
	РазделыИсточников = Перечисления.РазделыИсточниковДанныхБюджетирования;
	
	Если РазделИсточникаДанных = РазделыИсточников.ОперативныйУчет Тогда
		
		Если ЗначениеЗаполнено(ИсточникДанных) Тогда
			ИмяСхемы = ИмяМакетаПоЗначениюИсточника(ИсточникДанных);
		КонецЕсли;
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточников.РегламентированныйУчет Тогда
		
		ИмяСхемы = "РегламентированныйУчет";
		
//++ НЕ УТКА
	ИначеЕсли РазделИсточникаДанных = РазделыИсточников.МеждународныйУчет Тогда
		
		ИмяСхемы = "МеждународныйУчет";
		
//-- НЕ УТКА
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимый раздел источника получения данных.'");
	КонецЕсли;
	
	НайденнаяСхемаИсточникаДанных = ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИмяСхемы);
	
	Если Не НайденнаяСхемаИсточникаДанных = Неопределено Тогда
		СхемаКомпоновкиДанныхПравила = НайденнаяСхемаИсточникаДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает ссылку на схему по типу, разделу и указанному хешу компоновки данных
// Предназначен для обезличенного, не зависящего от ссылки кэшированного получения схем из справочников-правил получения данных
// Если схема модифицируется в последствии в коде, то именно она будет возвращаться из кэша 
// 
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - произвольные данные
//  ХешСхемы - Строка - хеш сумма произвольной схемы компоновки данных
// 
// Возвращаемое значение:
// 	 СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соотвествующая источнику. 
//						   - Неопределено - если макет не найден.
//
Функция ПроизвольнаяСхемаКомпоновкиДанныхПравила(ИмяСправочникаИсточника, РазделИсточникаДанных, ХешСхемы) Экспорт
	
	СхемаКомпоновкиДанныхПравила = Неопределено;
	
	Если Не РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый раздел источника получения данных.'");
	КонецЕсли;
	
	НайденнаяСхемаИсточникаДанных = ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемы);
	
	Если Не НайденнаяСхемаИсточникаДанных = Неопределено Тогда
		СхемаКомпоновкиДанныхПравила = НайденнаяСхемаИсточникаДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает соответствие поддерживаемых типов и их полных имен
// 
// Возвращаемое значение:
// 	 Соответствие -
//		* Ключ - Тип- тип поддерживаемого объекта метаданных
//		* Значение - Строка - имя справочника, как оно задано в конфигураторе
//
Функция ПоддерживаемыеСправочникиИсточникиДанных() Экспорт
	Поддерживаемые = Новый Соответствие;
	Поддерживаемые.Вставить(Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"), "ПравилаПолученияФактаПоПоказателямБюджетов");
	Поддерживаемые.Вставить(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"),     "ПравилаПолученияФактаПоСтатьямБюджетов");
	
	Возврат Поддерживаемые;
КонецФункции

// Возвращает массив поддерживаемых типов источников имени макета
// 
// Возвращаемое значение:
// 	 Массив - Тип - тип поддерживаемого объекта метаданных
//
Функция ПоддерживаемыеТипИсточниковИмениМакета() Экспорт
	Поддерживаемые = Новый Массив;
	Поддерживаемые.Добавить(Тип("СправочникСсылка.НастройкиХозяйственныхОпераций"));
	Поддерживаемые.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	Возврат Поддерживаемые;
КонецФункции

// Возвращает имя схемы-умолчания на случай, когда иные схемы не найдены
// 
// Возвращаемое значение:
// 	 Соответствие -
//		* Ключ - Строка - имя справочника, как оно задано в конфигураторе
//		* Значение - Строка - имя макета схемы компоновки данных
//
Функция ИменаСхемУмолчанийДляИсточниковДанных() Экспорт
	Умолчания = Новый Соответствие;
	Умолчания.Вставить("ПравилаПолученияФактаПоПоказателямБюджетов", "ПрочиеАктивыПассивы");
	Умолчания.Вставить("ПравилаПолученияФактаПоСтатьямБюджетов", "");
	
	Возврат Умолчания;
КонецФункции

// Возвращает макет из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ИмяМакета               - Строка - например, "ВыданныеАвансы"
//
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент, другой объект, который может быть макетом. 
//
Функция ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИмяМакета) Экспорт

	Перем ИскомыйМакет;
	
	Если Метаданные.Справочники[ИмяСправочникаИсточника].Макеты.Найти(ИмяМакета) <> Неопределено Тогда
		ИскомыйМакет = Справочники[ИмяСправочникаИсточника].ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Возврат ИскомыйМакет;

КонецФункции

// Возвращает хранимый макет из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника  - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ХешСхемыКомпоновкиДанных - Строка - хеш-сумма произвольной схемы компоновки данных
//
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент, другой объект, который может быть макетом. 
//
Функция ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемыКомпоновкиДанных) Экспорт
	
	ХранимыйМакет = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникДанныхПравила.СхемаИсточникаДанных КАК СхемаИсточникаДанных
	|ИЗ
	|	&ТекстЗапросаТаблицаСправочника КАК ИсточникДанныхПравила
	|ГДЕ
	|	ИсточникДанныхПравила.ХешСхемыКомпоновкиДанных = &ХешСхемы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаТаблицаСправочника", "Справочник." + ИмяСправочникаИсточника);
	Запрос.УстановитьПараметр("ХешСхемы", ХешСхемыКомпоновкиДанных);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ХранимыйМакет = Выборка.СхемаИсточникаДанных.Получить();
	КонецЕсли;

	Возврат ХранимыйМакет;

КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяМакетаПоЗначениюИсточника(ИсточникИмениМакета)
	
	ИмяМакета = Неопределено;
	
	ПоддерживаемыеТипы = ПоддерживаемыеТипИсточниковИмениМакета();
	ТипИсточникаИмениМакета = ТипЗнч(ИсточникИмениМакета);
	
	Если ПоддерживаемыеТипы.Найти(ТипИсточникаИмениМакета) = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый тип источника получения данных.'");
	КонецЕсли;
	
	Если ТипИсточникаИмениМакета = Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникИмениМакета, "ИсточникДанных");
		
	ИначеЕсли ТипИсточникаИмениМакета = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникИмениМакета, "ИмяПредопределенныхДанных");
		
	КонецЕсли;
		
	Возврат ИмяМакета;
		
КонецФункции

#КонецОбласти