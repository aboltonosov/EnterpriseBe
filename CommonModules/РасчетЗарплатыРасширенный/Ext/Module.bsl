
#Область ПрограммныйИнтерфейс

// Регистрирует значения оперативных показателей расчета зарплаты.
//
// Параметры:
//	Движения
//	Организация
//	ОперативныеПоказатели - таблица значений с колонками.
//		Дата
//		Сотрудник - СправочникСсылка.Сотрудники
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//		Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//		Значение - число
//	ЗаписыватьДвижения - булево, если Истина, движения будут записаны.
//
Процедура ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, ОперативныеПоказатели, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ОперативныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем необходимость выявления физического лица.
	ЗаполнятьФизическоеЛицо = Ложь;
	Если ОперативныеПоказатели.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗаполнятьФизическоеЛицо = Истина;
	КонецЕсли;
	
	Если ЗаполнятьФизическоеЛицо Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ОперативныеПоказатели, "Сотрудник", Истина);
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого Строка Из ОперативныеПоказатели Цикл
		Запись = Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Период = Строка.Дата;
		Запись.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		Если ЗаполнятьФизическоеЛицо Тогда
			Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		КонецЕсли;
		Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записать();
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует в системе данные о выполненных сотрудниками работах.
//
// Параметры:
//	- Движения
//	- Отказ
//	- ВыполненныеРаботы - таблица значений с колонками:
//		- Период - дата выполнения работ,
//		- Сотрудник
//		- ВидРабот - вид работ сотрудников.
//		- Сумма - число, сумма оплаты за выполненные работы.
//
Процедура ЗарегистрироватьВыполненныеРаботыСотрудников(Движения, Отказ, ВыполненныеРаботы) Экспорт
	
	Если ВыполненныеРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВыполненныеРаботы Цикл
		ЗаполнитьЗначенияСвойств(Движения.ВыполненныеРаботыСотрудников.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	Движения.ВыполненныеРаботыСотрудников.Записывать = Истина;
	
КонецПроцедуры

// Процедура регистрирует в системе данные о сдельном заработке сотрудников.
//
// Параметры:
//		Движения
//		Организация
//		СдельныйЗаработок - таблица значений с колонками.
//			Дата
//			Сотрудник - СправочникСсылка.Сотрудники
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//			Значение - число
//
Процедура ЗарегистрироватьСдельныйЗаработок(Движения, Организация, СдельныйЗаработок) Экспорт
	
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	СдельныйЗаработок.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	СдельныйЗаработок.ЗаполнитьЗначения(ПоказательСдельногоЗаработка, "Показатель");
	
	ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, СдельныйЗаработок);
	
КонецПроцедуры

// Добавляет новый показатель расчета зарплаты, 
// используемый для ввода оперативных данных.
//
// Параметры:
//	- Идентификатор - строковый идентификатор показателя, 
//		используется в формуле начислений, 
//		а также для идентификации показателя в исходном коде.
//		Идентификатор, используемый в формуле начислений может изменятся пользователем, 
//		но из кода показатель всегда будет доступен при помощи 
//		метода РасчетЗарплатыРасширенный.ОперативныйПоказательПоИдентификатору.
//	- Представление - пользовательское представление показателя.
//	- КраткоеПредставление - необязательный, пользовательское представление, 
//		используемое для заголовков колонок в документах ввода.
//	- Валюта - необязательный, валюта показателя, по умолчанию - валюта учета.
//	- Точность - необязательный, точность значения показателя по умолчанию - целое число.
//
// Возвращаемое значение - ссылка на созданный показатель.
//
Функция СоздатьОперативныйПоказатель(Идентификатор, Представление, КраткоеПредставление = Неопределено, Валюта = Неопределено, Точность = Неопределено) Экспорт
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.СоздатьОперативныйПоказатель(
				Идентификатор, Представление, КраткоеПредставление, Валюта, Точность);
	
КонецФункции

// Получает оперативный показатель по служебному идентификатору.
//
// Параметры:
//	- Идентификатор - строка, служебный идентификатор показателя, 
//			например, используемый при создании показателя 
//			методом СоздатьОперативныйПоказатель.
//
// Возвращаемое значение - найденный показатель, 
//		пустая ссылка - в случае, если показателя с таким идентификатором не существует.
//
Функция ОперативныйПоказательПоИдентификатору(Идентификатор) Экспорт
	Возврат РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(Идентификатор);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Регистрация результатов расчета.

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			ДатаНачала - дата, начало начисления.
//			ДатаОкончания - дата, окончание начисления.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			НормаДней
//			НормаЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//			ГрафикРаботы - ссылка на график, примененный при расчете строки.
//			ГрафикРаботыНорма - ссылка на график, используемый для расчета нормы времени при неполном рабочем дне.
//			ВидУчетаВремени - ссылка на вид учета времени, примененный при расчете строки
//			ВремяВЧасах
//			ПериодРегистрацииВремени
//			ИдентификаторСтроки.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с начислениями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	СтрокиЗаполнениеГрафикаРаботы = Новый Массив;
	МассивСотрудников = Новый Массив;
	МассивНачислений = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
			СотрудникиЗаполнениеФизическихЛиц.Добавить(Строка.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ГрафикРаботы) Тогда
			СтрокиЗаполнениеГрафикаРаботы.Добавить(Строка);
		КонецЕсли;
		МассивСотрудников.Добавить(Строка.Сотрудник);
		МассивНачислений.Добавить(Строка.Начисление);
	КонецЦикла;
	
	ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
	
	Если СтрокиЗаполнениеГрафикаРаботы.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(СтрокиЗаполнениеГрафикаРаботы, ПериодРегистрации);
	КонецЕсли;
	
	РегистраторНачислений = Движения.Начисления.Отбор.Регистратор.Значение;
	
	ОсновныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнойСотрудник");
	
	// Получаем реквизиты видов расчета.
	ИменаРеквизитов = 
		"ИспользованиеПериода,
		|ПериодРасчетаБазовыхНачислений,
		|КоличествоМесяцевБазовогоПериода,
		|СдвигБазовогоПериода";
	РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНачислений, ИменаРеквизитов);
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументОснование) Тогда
			НоваяСтрока.ДокументОснование = РегистраторНачислений;
		КонецЕсли;
		НоваяСтрока.ГоловнойСотрудник = ОсновныеСотрудники[Строка.Сотрудник];
		Если НоваяСтрока.Результат = 0 Тогда
			НоваяСтрока.Результат = Строка.Сумма;
		КонецЕсли;
		НоваяСтрока.РезультатВТомЧислеЗаСчетФБ = 0;
		// Определяем месяц (период действия).
		Месяц = Строка.ПериодДействия;
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Месяц = НачалоМесяца(Строка.ДатаНачала);
		КонецЕсли;
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.БазовыйПериодНачало = НоваяСтрока.ПериодДействияНачало;
		НоваяСтрока.БазовыйПериодКонец = НоваяСтрока.ПериодДействияКонец;
		Если РеквизитыНачислений[Строка.Начисление].ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			Если НоваяСтрока.ПериодДействияНачало < НачалоМесяца Или НоваяСтрока.ПериодДействияНачало > КонецМесяца Тогда
				НоваяСтрока.ПериодДействияНачало = НачалоМесяца;
			КонецЕсли;
			Если НоваяСтрока.ПериодДействияКонец < НачалоМесяца Или НоваяСтрока.ПериодДействияКонец > КонецМесяца Тогда
				НоваяСтрока.ПериодДействияКонец = КонецМесяца;
			КонецЕсли;
		КонецЕсли;
		Если Строка.Сторно Тогда
			// Для сторно-записей не выполняем корректировку базового периода.
			Продолжить;
		КонецЕсли;
		БазовыйПериодПереопределен = Ложь;
		// - Если базовый период переопределяется.
		Если ЕстьПолеВСтрокеКоллекции(Строка, "НачалоБазовогоПериода") И ЗначениеЗаполнено(Строка.НачалоБазовогоПериода) 
			И ЕстьПолеВСтрокеКоллекции(Строка, "ОкончаниеБазовогоПериода") И ЗначениеЗаполнено(Строка.ОкончаниеБазовогоПериода) Тогда
			БазовыйПериодПереопределен = Истина;
			НоваяСтрока.БазовыйПериодНачало = Строка.НачалоБазовогоПериода;
			НоваяСтрока.БазовыйПериодКонец = Строка.ОкончаниеБазовогоПериода;
		КонецЕсли;
		// - если не переопределяется
		Если Не БазовыйПериодПереопределен Тогда
			РеквизитыНачисления = РеквизитыНачислений[Строка.Начисление];
			Если РеквизитыНачисления.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				БазовыйПериод = РасчетЗарплатыРасширенныйКлиентСервер.БазовыйПериодНачисления(
					Месяц, РеквизитыНачисления.ПериодРасчетаБазовыхНачислений, РеквизитыНачисления.КоличествоМесяцевБазовогоПериода, РеквизитыНачисления.СдвигБазовогоПериода);
				НоваяСтрока.БазовыйПериодНачало = БазовыйПериод.ДатаНачала;
				НоваяСтрока.БазовыйПериодКонец = БазовыйПериод.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Начисления.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		// Получим значение регистратора.
		Регистратор = Движения.ЗначенияПоказателейНачислений.Отбор.Регистратор.Значение;
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейНачислений.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейНачислений.Записать();
			Движения.ЗначенияПоказателейНачислений.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//
//		Удержания - таблица значений с колонками (необязательный)
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			ДокументОснование - (необязательный) ДокументСсылка.ИсполнительныйЛист
//			Получатель - (необязательный) СправочникСсылка.Контрагенты
//			ПлатежныйАгент - (необязательный) СправочникСсылка.Контрагенты
//			ДатаНачала
//			ДатаОкончания
//			Сумма
//			СуммаКорректировкиВыплаты.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с удержаниями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУдержаний(Движения, Отказ, Организация, ПериодРегистрации, Удержания, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = Движения.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		НоваяСтрока.ВидРасчета = Строка.Удержание;
		НоваяСтрока.ПериодДействияНачало = НачалоМесяца(ПериодРегистрации);
		НоваяСтрока.ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.БазовыйПериодНачало = Строка.ДатаНачала;
		НоваяСтрока.БазовыйПериодКонец = Строка.ДатаОкончания;
	КонецЦикла;
	Движения.Удержания.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		Регистратор = Движения.ЗначенияПоказателейУдержаний.Отбор.Регистратор.Значение;
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейУдержаний.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Удержания.Записать();
		Движения.Удержания.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейУдержаний.Записать();
			Движения.ЗначенияПоказателейУдержаний.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (необязательный).
//			Сотрудник
//			Договор
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияНачисленийПоДоговорам(Движения, Отказ, Организация, ПериодРегистрации, Начисления) Экспорт
	
	Для Каждого Строка Из Начисления Цикл
		
		Если (ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") 
			Или ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ДоговорРаботыУслуги"))
			И Строка.ДокументОснование.СпособОплаты = Перечисления.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами Тогда
			
			НоваяСтрокаНачисленияПоДоговорамГПХ = Движения.НачисленияПоДоговорамГПХ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияПоДоговорамГПХ, Строка);
			НоваяСтрокаНачисленияПоДоговорамГПХ.Период = ПериодРегистрации;
			НоваяСтрокаНачисленияПоДоговорамГПХ.Организация = Организация;
						
		Иначе
			
			НоваяСтрока = Движения.ОплаченныеДоговоры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ДоговорАкт = Строка.ДокументОснование;
			НоваяСтрока.МесяцНачисления = ПериодРегистрации;
			НоваяСтрока.Организация = Организация;
						
		КонецЕсли;
		
	КонецЦикла;   
	
	Если Движения.НачисленияПоДоговорамГПХ.Количество() > 0 Тогда
		Движения.НачисленияПоДоговорамГПХ.Записывать = Истина;
	КонецЕсли;
	
	Если Движения.ОплаченныеДоговоры.Количество() > 0 Тогда 
		Движения.ОплаченныеДоговоры.Записывать = Истина;
	КонецЕсли;		
		
КонецПроцедуры

// Сохранение результатов распределения по территориям, условиям труда.
//
Процедура СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, ДокументСсылка, ТаблицаРаспределения) Экспорт
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		НоваяСтрока = Движения.РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		НоваяСтрока.РегистраторИзмерение = ДокументСсылка;
		Движения.РаспределениеПоТерриториямУсловиямТруда.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция БазаУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 			= НачалоМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= КонецМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ТерриторияВыполненияРаботВОрганизации,ГоловнойСотрудник";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
	

	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Результаты = Запрос.ВыполнитьПакет();
	Если Результаты[1].Пустой() Тогда
		Возврат Результаты[0].Выгрузить();
	Иначе
		Выборка = Результаты[1].Выбрать();
		
		ФизическиеЛицаБезБазы = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ФизическиеЛицаБезБазы.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		КадровыйУчет.СоздатьВТПоследниеРаботавшиеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, Истина,
			ФизическиеЛицаБезБазы, ПараметрыПолученияСотрудниковОрганизаций, "ВТПоследниеСотрудники");
		
		Запрос. Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
		|ИЗ
		|	ВТПоследниеСотрудники КАК КадровыеДанныеСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ГоловнойСотрудник,
		|	КадровыеДанныеСотрудников.Подразделение,
		|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции


// Формирует движения по Корректировкам выплаты
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ПериодРегистрации - реквизит регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					КорректировкиВыплаты - таблица значений с данными корректировок выплаты
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыКорректировкиВыплаты - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//
Процедура СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, ДанныеДляПроведения, Записывать = Ложь, РегистрироватьСуммыКорректировкиВыплаты = Неопределено) Экспорт 
	
	Если РегистрироватьСуммыКорректировкиВыплаты = Неопределено Тогда 
		РегистрироватьСуммыКорректировкиВыплаты = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	Если РегистрироватьСуммыКорректировкиВыплаты Тогда
		
		// Учет корретировок выплаты в "зарплате".
		УчетНачисленнойЗарплаты.ЗарегистрироватьКорректировкиВыплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПорядокВыплаты, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Плановые начисления и удержания.

// Заполняет движения регистров сведений:
//		ПлановыеНачисления,
//		ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников,
//		ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.
//
// Параметры:
//
//	РегистраторОбъект	- документ объект.
//
//	Движения			- коллекция движений, в которой необходимо заполнить движения.
//
//	СтруктураДанных		- Структура, содержащая ключи:
//
//		* ДанныеОПлановыхНачислениях (необязательный) - таблица значений с полями:
//			* ДатаСобытия				- Дата
//			* ДействуетДо				- Дата, (не обязательно)
//			* Сотрудник				- СправочникСсылка.Сотрудники
//			* Начисление				- ПланВидовРасчетаСсылка.Начисления
//			* Используется			- булево
//			* ИспользуетсяПоОкончании	- булево, обязателен если в коллекции есть поле ДействуетДо
//
//		* ЗначенияПоказателей (необязательный) - таблица значений с полями:
//			* ДатаСобытия		- Дата
//			* ДействуетДо		- Дата, (не обязательно).
//			* Организация		- СправочникСсылка.Организации
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сотрудник		- СправочникСсылка.Сотрудники
//			* Показатель		- СправочникСсылка.ПоказателиРасчетаЗарплаты
//			* Значение		- Число
//
//		* ПрименениеДополнительныхПоказателей (необязательный) - таблица значений с полями:
//			* ДатаСобытия		- Дата
//			* ДействуетДо		- Дата, (не обязательно).
//			* Организация		- СправочникСсылка.Организации
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сотрудник		- СправочникСсылка.Сотрудники
//			* Показатель		- СправочникСсылка.ПоказателиРасчетаЗарплаты
//			* Применение		- Булево
//
//	ФормироватьЗаписиТолькоДляИзменений - Булево, если Истина, то производится чтение текущих значений
//											и производится проверка необходимости формирования записей
//
//	ЗаполнятьНаборЗаписей				- Булево, для служебного использования
//
Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.Свойство("ДанныеОПлановыхНачислениях") Тогда
		
		ПлановыеНачисленияСотрудников.УстановитьРассчитанныеДанныеФОТ(РегистраторОбъект.Ссылка, Движения, СтруктураДанных.ДанныеОПлановыхНачислениях);
		
		РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, Ложь);
		
		ДанныеОПлановыхНачислениях = СтруктураДанных.ДанныеОПлановыхНачислениях;
		
		ИспользуютсяВозвратныеСобытия = ДанныеОПлановыхНачислениях.Колонки.Найти("ДействуетДо") <> Неопределено;
		ЕстьРеквизитХарактерНачисления = ДанныеОПлановыхНачислениях.Колонки.Найти("ХарактерНачисления") <> Неопределено;
		
		Если ФормироватьЗаписиТолькоДляИзменений Тогда
			
			ВремяРегистрацииДокумента = Неопределено;
			Движения.ПлановыеНачисления.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
			
			Если ВремяРегистрацииДокумента = Неопределено Тогда 
				ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(РегистраторОбъект.Ссылка, ДанныеОПлановыхНачислениях);
			КонецЕсли;
			
			// Сбор сведений о начислениях размер вклада в ФОТ которых вводится руками
			ТаблицаОтборов = Новый ТаблицаЗначений;
			ТаблицаОтборов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаОтборов.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
			ТаблицаОтборов.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
			
			Для каждого СтрокаПлановыхНачислений Из ДанныеОПлановыхНачислениях Цикл
				
				НоваяСтрокаПрежних = ТаблицаОтборов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПрежних, СтрокаПлановыхНачислений);
				
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПлановыхНачислений.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					НоваяСтрокаПрежних.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПлановыхНачислений.Сотрудник);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаОтборов.Количество() > 0 Тогда
				
				// Получение прежних значений размеров вклада в ФОТ начислений
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
				ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторОбъект.Ссылка);
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
					"ПлановыеНачисления",
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтборов),
					ПараметрыПостроения);
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПлановыеНачисления.Период,
					|	ПлановыеНачисления.ПериодЗаписи,
					|	ПлановыеНачисления.Сотрудник,
					|	ПлановыеНачисления.Начисление,
					|	ПлановыеНачисления.ДокументОснование,
					|	ПлановыеНачисления.Используется,
					|	ПлановыеНачисления.Размер,
					|	ПлановыеНачисления.ПериодВозвратногоСобытия
					|ИЗ
					|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления";
				
				ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
				ПредыдущиеЗначения.Индексы.Добавить("Сотрудник,Начисление,ДокументОснование");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Восстановительные движения пишем двумя записями
		// причем нужно получать срез последних для получения значения "по окончании"
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей = Движения.ПлановыеНачисления.ВыгрузитьКолонки();
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПериодСреза", Новый ОписаниеТипов("Дата"));
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПроверкаНеобходимостиВосстановления", Новый ОписаниеТипов("Булево"));
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("СтрокаДвижений", Новый ОписаниеТипов());
		
		ХарактерНачисления = Неопределено;
		
		// Формирование движений
		Для Каждого СтрокаПлановыхНачислений Из ДанныеОПлановыхНачислениях Цикл
			
			Если ЕстьРеквизитХарактерНачисления Тогда
				ХарактерНачисления = СтрокаПлановыхНачислений.ХарактерНачисления;
			КонецЕсли;
			
			СтрокаПредыдущихЗначений = Неопределено;
			Если ФормироватьЗаписиТолькоДляИзменений Тогда
				
				СтруктураПоиска = Новый Структура("Сотрудник,Начисление,ДокументОснование");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлановыхНачислений);
				
				СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
					
					ДобавлятьЗапись = Ложь;
					
					СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
					
					ИнфоОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаПлановыхНачислений.Начисление);
					РазмерФОТСохраняется = Не ИнфоОНачислении.ФОТНеРедактируется Или Не ИнфоОНачислении.Рассчитывается;
					
					Если РазмерФОТСохраняется И СтрокаПлановыхНачислений.Размер <> СтрокаПредыдущихЗначений.Размер Тогда
						ДобавлятьЗапись = Истина;
					КонецЕсли;
					
					Если Не ДобавлятьЗапись Тогда
						
						Если СтрокаПлановыхНачислений.Используется <> СтрокаПредыдущихЗначений.Используется Тогда
							ДобавлятьЗапись = Истина;
						ИначеЕсли ИспользуютсяВозвратныеСобытия
							И ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное
							И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
							И (Не ЗначениеЗаполнено(СтрокаПлановыхНачислений.ДействуетДо)
								Или СтрокаПлановыхНачислений.ДействуетДо > СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
							
							ДобавлятьЗапись = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ДобавлятьЗапись Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Движения.ПлановыеНачисления.Записывать = Истина;
			
			НоваяСтрока = Движения.ПлановыеНачисления.Добавить();
			НоваяСтрока.Период = СтрокаПлановыхНачислений.ДатаСобытия;
			НоваяСтрока.Сотрудник = СтрокаПлановыхНачислений.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = СтрокаПлановыхНачислений.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = СтрокаПлановыхНачислений.ГоловнаяОрганизация;
			НоваяСтрока.Начисление = СтрокаПлановыхНачислений.Начисление;
			НоваяСтрока.ДокументОснование = СтрокаПлановыхНачислений.ДокументОснование;
			НоваяСтрока.Используется = СтрокаПлановыхНачислений.Используется;
			
			// необязательные колонки
			Если ДанныеОПлановыхНачислениях.Колонки.Найти("Размер") <> Неопределено Тогда
				НоваяСтрока.Размер = СтрокаПлановыхНачислений.Размер;
			КонецЕсли;
			
			Если ИспользуютсяВозвратныеСобытия Тогда
				
				НоваяСтрока.ДействуетДо = СтрокаПлановыхНачислений.ДействуетДо;
				
				Если ФормироватьЗаписиТолькоДляИзменений
					И СтрокаПредыдущихЗначений <> Неопределено Тогда
					
					// Восстановление предыдущего состояния
					Если ЗначениеЗаполнено(СтрокаПлановыхНачислений.ДействуетДо) Тогда
						
						// Запоминание строки для восстановления движений
						Если ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
							
							СтрокаВосстановленияВозвратногоСобытия = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
							
							СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 1;
							СтрокаВосстановленияВозвратногоСобытия.Используется = СтрокаПредыдущихЗначений.Используется;
							СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
							СтрокаВосстановленияВозвратногоСобытия.ПериодСреза = СтрокаПредыдущихЗначений.ПериодЗаписи - 1;
							
							Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия < НоваяСтрока.ДействуетДо + 1 Тогда
								СтрокаВосстановленияВозвратногоСобытия.ПроверкаНеобходимостиВосстановления = Истина;
								СтрокаВосстановленияВозвратногоСобытия.СтрокаДвижений = НоваяСтрока;
							КонецЕсли;
							
							Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > НоваяСтрока.ДействуетДо + 2 Тогда
								
								СтрокаВосстановленияВозвратногоСобытия = Движения.ПлановыеНачисления.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
								
								СтрокаВосстановленияВозвратногоСобытия.Используется = СтрокаПредыдущихЗначений.Используется;
								СтрокаВосстановленияВозвратногоСобытия.Размер = СтрокаПредыдущихЗначений.Размер;
								СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
								СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 2;
								
								ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ПлановыеНачисления, СтрокаВосстановленияВозвратногоСобытия);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Количество() > 0 Тогда
			
			ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Индексы.Добавить("Сотрудник,Начисление,ДокументОснование,ПериодСреза");
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.УстановитьПараметр("ТаблицаДвиженийНаНачалоВосстановительныхЗаписей", ТаблицаДвиженийНаНачалоВосстановительныхЗаписей);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ПериодСреза КАК Период
				|ПОМЕСТИТЬ ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей
				|ИЗ
				|	&ТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей";
			
			Запрос.Выполнить();
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторОбъект.Ссылка);
			
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей", "Сотрудник,Начисление,ДокументОснование");
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"ПлановыеНачисления",
				Запрос.МенеджерВременныхТаблиц,
				Истина,
				ОписаниеФильтра,
				ПараметрыПостроения);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
				|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период КАК ПериодСреза,
				|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Используется, ЛОЖЬ) КАК Используется,
				|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Размер, 0) КАК Размер
				|ИЗ
				|	ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
				|		ПО ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
				|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление = ПлановыеНачисленияСрезПоследних.Начисление
				|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование = ПлановыеНачисленияСрезПоследних.ДокументОснование
				|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период = ПлановыеНачисленияСрезПоследних.Период";
			
			СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ДокументОснование, ПериодСреза");
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ИнфоОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Выборка.Начисление);
				РазмерФОТСохраняется = Не ИнфоОНачислении.ФОТНеРедактируется Или Не ИнфоОНачислении.Рассчитывается;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				СтрокиТаблицы = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					
					Если Не СтрокаТаблицы.ПроверкаНеобходимостиВосстановления
						Или РазмерФОТСохраняется И СтрокаТаблицы.СтрокаДвижений.Размер <> Выборка.Размер Тогда
						
						СтрокаДвижений = Движения.ПлановыеНачисления.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы, "Период,Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
						СтрокаДвижений.Используется = Выборка.Используется;
						СтрокаДвижений.Размер = Выборка.Размер;
						
						ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ПлановыеНачисления, СтрокаДвижений);
						
					Иначе
						
						Если СтрокаТаблицы.СтрокаДвижений.Используется = Выборка.Используется Тогда
							СтрокаТаблицы.СтрокаДвижений.ДействуетДо = '00010101';
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		
		СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(
			Движения, СтруктураДанных.ЗначенияПоказателей, , ФормироватьЗаписиТолькоДляИзменений);
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ПрименениеДополнительныхПоказателей") Тогда
		
		СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(
			Движения, СтруктураДанных.ПрименениеДополнительныхПоказателей, ФормироватьЗаписиТолькоДляИзменений);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения регистра ПрименениеПлановыхНачислений.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПримененииПлановыхНачислений - таблица значений 
//		см. функцию ПустаяТаблицаРегистрацииПримененияПлановыхНачислений.
// 		
Процедура СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеОПримененииПлановыхНачислений) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПримененииПлановыхНачислений Цикл
		НоваяСтрока = Движения.ПрименениеПлановыхНачислений.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.Применение = СтрокаДанных.Применение;
		Движения.ПрименениеПлановыхНачислений.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения плановыми удержаниями (см. процедуру
// РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхУдержаний).
//
Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных);
	
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, СтруктураДанных.ЗначенияПоказателей, Истина);
	КонецЕсли; 
	
	Если СтруктураДанных.Свойство("РабочиеМестаУдержаний") Тогда
		СформироватьДвиженияРабочихМестУдержаний(Движения, СтруктураДанных.РабочиеМестаУдержаний);
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет набор записей регистра периодических значений показателей сотрудников.
//
Процедура СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, ЗначенияПоказателей, РегистрироватьПоФизическомуЛицу = Ложь, ФормироватьЗаписиТолькоДляИзменяемыхЗначений = Ложь) Экспорт
	
	ИспользуютсяВозвратныеСобытия = ЗначенияПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	ЗаполнятьДокументОснование = ЗначенияПоказателей.Колонки.Найти("ДокументОснование") <> Неопределено;
	
	ЕстьРеквизитХарактерНачисления = ЗначенияПоказателей.Колонки.Найти("ХарактерНачисления") <> Неопределено;
	
	Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
		
		Регистратор = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ЗначенияПоказателей);
		КонецЕсли;
		
		ИзмеренияОтборов = "Период,Организация,Показатель";
		
		ТаблицаОтборов = Новый ТаблицаЗначений;
		ТаблицаОтборов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаОтборов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаОтборов.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		
		Если РегистрироватьПоФизическомуЛицу Тогда
			
			ИзмеренияОтборов = ИзмеренияОтборов + ",ФизическоеЛицо";
			ТаблицаОтборов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
			
		Иначе
			
			ИзмеренияОтборов = ИзмеренияОтборов + ",Сотрудник";
			ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			
		КонецЕсли;
		
		Если ЗаполнятьДокументОснование Тогда
			
			ИзмеренияОтборов = ИзмеренияОтборов + ",ДокументОснование";
			ТаблицаОтборов.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
			
		КонецЕсли;
		
		Для Каждого СтрокаЗначенийПоказателей Из ЗначенияПоказателей Цикл
			
			НоваяСтрокаТаблицыОтборов = ТаблицаОтборов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОтборов, СтрокаЗначенийПоказателей);
			
			Если Не РегистрироватьПоФизическомуЛицу Тогда
				
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаЗначенийПоказателей.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					НоваяСтрокаТаблицыОтборов.Период = ВремяРегистрацииСотрудников.Получить(СтрокаЗначенийПоказателей.Сотрудник);
				КонецЕсли;
				
			Иначе
				НоваяСтрокаТаблицыОтборов.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтборов, ИзмеренияОтборов);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Значения.Период,
			|	Значения.ПериодЗаписи,
			|	Значения.Организация,
			|	Значения.ФизическоеЛицо,
			|	Значения.ДокументОснование,
			|	Значения.Сотрудник,
			|	Значения.Показатель,
			|	Значения.Значение,
			|	Значения.ПериодВозвратногоСобытия
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК Значения";
		
		ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Восстановительные движения пишем двумя записями
	// причем нужно получать срез последних для получения значения "по окончании"
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ВыгрузитьКолонки();
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПериодСреза", Новый ОписаниеТипов("Дата"));
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПроверкаНеобходимостиВосстановления", Новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("СтрокаДвижений", Новый ОписаниеТипов());
	
	ХарактерНачисления = Неопределено;
	
	Для Каждого СтрокаЗначенийПоказателей Из ЗначенияПоказателей Цикл
		
		СтрокаПредыдущихЗначений = Неопределено;
		Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
			
			СтруктураПоиска = Новый Структура(ИзмеренияОтборов);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЗначенийПоказателей);
			
			Если Не РегистрироватьПоФизическомуЛицу Тогда
				
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаЗначенийПоказателей.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					СтруктураПоиска.Период = ВремяРегистрацииСотрудников.Получить(СтрокаЗначенийПоказателей.Сотрудник);
				КонецЕсли;
				
			Иначе
				СтруктураПоиска.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
			КонецЕсли;
			
			Если ЕстьРеквизитХарактерНачисления Тогда
				ХарактерНачисления = СтрокаЗначенийПоказателей.ХарактерНачисления;
			КонецЕсли;
			
			ДобавлятьЗапись = Ложь;
			
			СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				
				СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
				Если СтрокаЗначенийПоказателей.Значение <> СтрокаПредыдущихЗначений.Значение Тогда
					ДобавлятьЗапись = Истина;
				ИначеЕсли ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное
					И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
					И (Не ЗначениеЗаполнено(СтрокаЗначенийПоказателей.ДействуетДо)
						Или СтрокаЗначенийПоказателей.ДействуетДо > СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
						
					ДобавлятьЗапись = Истина;
					
				КонецЕсли;
				
				Если Не ДобавлятьЗапись Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
		НоваяСтрока.Организация = СтрокаЗначенийПоказателей.Организация;
		НоваяСтрока.ФизическоеЛицо = СтрокаЗначенийПоказателей.ФизическоеЛицо;
		
		Если Не РегистрироватьПоФизическомуЛицу Тогда
			// Не заполняем сотрудника при регистрации показателей физического лица, 
			// в том числе для поддержки для контроля уникальности.
			НоваяСтрока.Сотрудник = СтрокаЗначенийПоказателей.Сотрудник;
		КонецЕсли;
		
		НоваяСтрока.Показатель = СтрокаЗначенийПоказателей.Показатель;
		НоваяСтрока.Значение = СтрокаЗначенийПоказателей.Значение;
		
		// необязательные колонки
		Если ЗаполнятьДокументОснование Тогда
			НоваяСтрока.ДокументОснование = СтрокаЗначенийПоказателей.ДокументОснование;
		КонецЕсли;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			
			НоваяСтрока.ДействуетДо = СтрокаЗначенийПоказателей.ДействуетДо;
			
			Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений
				И СтрокаПредыдущихЗначений <> Неопределено Тогда
				
				// Восстановление предыдущего состояния
				Если ЗначениеЗаполнено(СтрокаЗначенийПоказателей.ДействуетДо) Тогда
					
					// Запоминание строки для восстановления движений
					Если ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
						
						СтрокаВосстановленияВозвратногоСобытия = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
						
						СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 1;
						СтрокаВосстановленияВозвратногоСобытия.Значение = СтрокаПредыдущихЗначений.Значение;
						СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
						СтрокаВосстановленияВозвратногоСобытия.ПериодСреза = СтрокаПредыдущихЗначений.ПериодЗаписи - 1;
						
						Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия < НоваяСтрока.ДействуетДо + 1 Тогда
							СтрокаВосстановленияВозвратногоСобытия.ПроверкаНеобходимостиВосстановления = Истина;
							СтрокаВосстановленияВозвратногоСобытия.СтрокаДвижений = НоваяСтрока;
						КонецЕсли;
						
						Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > НоваяСтрока.ДействуетДо + 2 Тогда
							
							СтрокаВосстановленияВозвратногоСобытия = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
							
							СтрокаВосстановленияВозвратногоСобытия.Значение = СтрокаПредыдущихЗначений.Значение;
							СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
							СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 2;
							
							ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, СтрокаВосстановленияВозвратногоСобытия);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Количество() > 0 Тогда
		
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Индексы.Добавить("Сотрудник,Организация,Показатель,ДокументОснование,ПериодСреза");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаДвиженийНаНачалоВосстановительныхЗаписей", ТаблицаДвиженийНаНачалоВосстановительныхЗаписей);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ПериодСреза КАК Период
			|ПОМЕСТИТЬ ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей
			|ИЗ
			|	&ТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей";
		
		Запрос.Выполнить();
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей", "Сотрудник,Организация,Показатель,ДокументОснование");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
			|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период КАК ПериодСреза,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение
			|ИЗ
			|	ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
			|		ПО ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
			|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация = ЗначенияПериодическихПоказателей.Организация
			|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель = ЗначенияПериодическихПоказателей.Показатель
			|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
			|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период = ЗначенияПериодическихПоказателей.Период";
		
		СтруктураПоиска = Новый Структура("Сотрудник,Организация,Показатель,ДокументОснование,ПериодСреза");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			СтрокиТаблицы = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				Если Не СтрокаТаблицы.ПроверкаНеобходимостиВосстановления Тогда
					СтрокаДвижений = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы, "Период,Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
					СтрокаДвижений.Значение = Выборка.Значение;
					
					ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, СтрокаДвижений);
				Иначе
					
					Если СтрокаТаблицы.СтрокаДвижений.Значение = Выборка.Значение Тогда
						СтрокаТаблицы.СтрокаДвижений.ДействуетДо = '00010101';
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения регистра РабочиеМестаУдержаний.
//
// Параметры:
//   Движения - коллекция движений, в которой необходимо заполнить движения.
//   РабочиеМестаУдержаний - ТаблицаЗначений - таблица значений с колонками:
//     * ФизическоеЛицо 	- СправочникСсылка.ФизическиеЛица 
//     * ДокументОснование 	- ДокументСсылка 
//     * РабочееМесто 		- СправочникСсылка.Сотрудники 
//
Процедура СформироватьДвиженияРабочихМестУдержаний(Движения, РабочиеМестаУдержаний) Экспорт
	
	Если РабочиеМестаУдержаний.Количество() > 0 Тогда
		Движения.РабочиеМестаУдержаний.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РабочиеМестаУдержаний Цикл
		
		НоваяСтрока = Движения.РабочиеМестаУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;	
			
КонецПроцедуры

// Заполняет набор записей регистра применения дополнительных периодических показателей сотрудников.
//
Процедура СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(Движения, ПрименениеДополнительныхПоказателей, ФормироватьЗаписиТолькоДляИзменяемыхПрименений = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПрименениеДополнительныхПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений Тогда
		
		Регистратор = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
		
		// Дополняем таблицу полем ПрименениеПоОкончании.
		КлючевыеИзмерения = "Период,Организация,Показатель,Сотрудник";
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ПрименениеДополнительныхПоказателей);
		КонецЕсли;
		
		ОтборПоказателей = Новый ТаблицаЗначений;
		ОтборПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ОтборПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ОтборПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ОтборПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		
		Для Каждого СтрокаПримененияДополнительныхПоказателей Из ПрименениеДополнительныхПоказателей Цикл
			
			НоваяСтрокаОтбораПоказателей = ОтборПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтбораПоказателей, СтрокаПримененияДополнительныхПоказателей);
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПримененияДополнительныхПоказателей.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				НоваяСтрокаОтбораПоказателей.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПримененияДополнительныхПоказателей.Сотрудник);
			Иначе
				НоваяСтрокаОтбораПоказателей.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОтборПоказателей);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрименениеПоказателей.Период,
			|	ПрименениеПоказателей.Организация,
			|	ПрименениеПоказателей.Сотрудник,
			|	ПрименениеПоказателей.ФизическоеЛицо,
			|	ПрименениеПоказателей.Показатель,
			|	ПрименениеПоказателей.Применение
			|ИЗ
			|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеПоказателей";
		
		ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого СтрокаПримененияДополнительныхПоказателей Из ПрименениеДополнительныхПоказателей Цикл
		
		Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений Тогда
			
			СтруктураПоиска = Новый Структура("Период,Организация,Сотрудник,Показатель");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПримененияДополнительныхПоказателей);
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПримененияДополнительныхПоказателей.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтруктураПоиска.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПримененияДополнительныхПоказателей.Сотрудник);
			Иначе
				СтруктураПоиска.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
			КонецЕсли;
			
			СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				
				СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
				Если СтрокаПримененияДополнительныхПоказателей.Применение = СтрокаПредыдущихЗначений.Применение Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаПримененияДополнительныхПоказателей.Сотрудник;
		НоваяСтрока.Организация = СтрокаПримененияДополнительныхПоказателей.Организация;
		НоваяСтрока.ФизическоеЛицо = СтрокаПримененияДополнительныхПоказателей.ФизическоеЛицо;
		НоваяСтрока.Показатель = СтрокаПримененияДополнительныхПоказателей.Показатель;
		НоваяСтрока.Применение = СтрокаПримененияДополнительныхПоказателей.Применение;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			НоваяСтрока.ДействуетДо = СтрокаПримененияДополнительныхПоказателей.ДействуетДо;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания.
// Добавляет записи об их прекращении на указанную дату.
//
// Параметры:
//	Движения
//	Сотрудник - сотрудник, удержания которого прекращаются.
//	ДатаПрекращения - дата, после которой не действует ни одного удержания.
//	Организация
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеНачисленияУдержания(Движения, Сотрудник, ДатаПрекращения, Организация, ПрекращатьУдержания = Истина) Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаПрекращения;
	
	ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, ИсходныеДанные);
	
	Если ПрекращатьУдержания Тогда
		
		ИсходныеДанные.Колонки.Удалить("Сотрудник");
		
		// Добавляем и заполняем колонки для удержаний.
		ИсходныеДанные.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ИсходныеДанные[0].Период = НачалоДня(НачалоДня(ДатаПрекращения) - 1);
		ИсходныеДанные[0].ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		ИсходныеДанные[0].Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		
		ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, ИсходныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//				* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//				* Организация		- СправочникСсылка.Организации
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеНачисления.Отбор.Регистратор.Значение;
	
	// Плановые начисления
	ДействующиеНачисления = ВсеДействующиеПлановыеНачисления(СотрудникиПериоды, Регистратор, Истина);
	
	Для Каждого СтрокаТаблицы Из ДействующиеНачисления Цикл
		
		СтрокаДвижений = Движения.ПлановыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
		СтрокаДвижений.Используется = Ложь;
		
		Движения.ПлановыеНачисления.Записывать = Истина;
		
	КонецЦикла;

КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//				* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//				* Организация		- СправочникСсылка.Организации
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	// Плановые удержания
	ДействующиеУдержания = ДействующиеПлановыеУдержания(СотрудникиПериоды, Регистратор);
	Для Каждого СтрокаТаблицы Из ДействующиеУдержания Цикл
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = 			КонецДня(СтрокаТаблицы.Период) + 1;
		СтрокаДвижений.Организация = 		СтрокаТаблицы.Организация;
		СтрокаДвижений.ФизическоеЛицо = 	СтрокаТаблицы.ФизическоеЛицо;
		СтрокаДвижений.Удержание = 			СтрокаТаблицы.Удержание;
		СтрокаДвижений.ДокументОснование = 	СтрокаТаблицы.ДокументОснование;
		СтрокаДвижений.Используется = 		Ложь;
		Движения.ПлановыеУдержания.Записывать = Истина;
	КонецЦикла;

КонецПроцедуры

// Заполняет движения плановыми выплатами (авансы).
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПлановыхВыплатах - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Аванс
// 		
Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Регистратор = Движения.ПлановыеАвансы.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДанныеОПлановыхВыплатах.Колонки.Найти("ДействуетДо") <> Неопределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПлановыеАвансы.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиАвансов(ДанныеОПлановыхВыплатах, Регистратор, ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.ТекущийСпособРасчетаАванса;
			НоваяСтрока.Аванс = СтрокаДанных.ТекущийАванс;
		Иначе
			НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.СпособРасчетаАванса;
			НоваяСтрока.Аванс = СтрокаДанных.Аванс;
		КонецЕсли;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = НачалоМесяца(СтрокаДанных.ДействуетДо);
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.СпособРасчетаАвансаПоОкончании = СтрокаДанных.СпособРасчетаАванса;
					НоваяСтрока.АвансПоОкончании = СтрокаДанных.Аванс;
				Иначе
					НоваяСтрока.СпособРасчетаАвансаПоОкончании = СтрокаДанных.ТекущийСпособРасчетаАванса;
					НоваяСтрока.АвансПоОкончании = СтрокаДанных.ТекущийАванс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конструирует объект для хранения данных для проведения плановых удержаний.
//
// Структура содержит
//		ДанныеПлановыхУдержаний - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			Удержание - ПланВидовРасчетаСсылка.Удержания
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Используется - Булево
//
//		ЗначенияПоказателей - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//			Значение - Число(15,3) значение показателя.
//
Функция СоздатьДанныеДляРегистрацииПлановыхУдержаний() Экспорт
	
	ПоляСтруктуры =
	"ДанныеПлановыхУдержаний,
	|РабочиеМестаУдержаний,
	|ЗначенияПоказателей";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения плановых удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержаний(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ДокументУдержания.Ссылка = &Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК Период,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.РабочееМесто,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|	И ДокументУдержания.Ссылка.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.РабочиеМестаУдержаний = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения плановых удержаний для многосотрудникового документа.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержанийСпискаСотрудников(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Ссылка.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ЗначенияПоказателей.ИдентификаторСтрокиВидаРасчета = ДокументУдержания.ИдентификаторСтрокиВидаРасчета)
	|			И (ДокументУдержания.Ссылка = &Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.РабочееМесто
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|	И ДокументУдержания.Ссылка.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаУдержанийДокумента", ИмяДокумента + ".Удержания");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.РабочиеМестаУдержаний = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

Функция НоваяТаблицаПолучателиУдержаний() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо",  Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Удержание",  Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Таблица.Колонки.Добавить("Контрагент",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Возврат Таблица;

КонецФункции 

// Добавляет запись о получателе удержания по документу основания.
//
Процедура ЗарегистрироватьПолучателяУдержания(ПолучателиУдержаний, Организация, ДокументОснование) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПолучателиУдержаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОснование);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Для каждого СтрокаТаблицы Из ПолучателиУдержаний Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) И ЗначениеЗаполнено(СтрокаТаблицы.Удержание) И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицы);
				НоваяЗапись.ДокументОснование = ДокументОснование;
				НоваяЗапись.Организация = Организация;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Регистрирует значения разовых показателей расчета зарплаты.
//
// Параметры:
//	Движения
//	Организация
//	РазовыеПоказатели - таблица значений с колонками.
//		ПериодДействия
//		Сотрудник - СправочникСсылка.Сотрудники
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//		Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//		Значение - число
//	ЗаписыватьДвижения - булево, если Истина, движения будут записаны.
//
Процедура ЗарегистрироватьЗначенияРазовыхПоказателейСотрудников(Движения, Организация, РазовыеПоказатели, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если РазовыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем необходимость выявления физического лица.
	ЗаполнятьФизическоеЛицо = Ложь;
	Если РазовыеПоказатели.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗаполнятьФизическоеЛицо = Истина;
	КонецЕсли;
	
	Если ЗаполнятьФизическоеЛицо Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(РазовыеПоказатели, "Сотрудник", Истина);
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого Строка Из РазовыеПоказатели Цикл
		Запись = Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Организация = Организация;
		Если ЗаполнятьФизическоеЛицо Тогда
			Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		КонецЕсли;
		Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
			Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записать();
			Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение и пересчет в расчетных документах.

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение,
		|ДокументСсылка, 
		|Сотрудники, 
		|ОкончаниеПериода, 
		|РежимНачисления, 
		|ПорядокВыплаты, 
		|ДатаВыплаты, 
		|СотрудникиПериодДействияПерерасчет, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|МногопотоковоеЗаполнение,
		|СотрудникиДополнительныйДоход,
		|АдресХранилища,
		|ОкончательныйРасчетНДФЛ,
		|ПроверятьРегистрациюПроцентаЕНВД");
		                           
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.МногопотоковоеЗаполнение = Ложь;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = Ложь;
	ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриСозданииДополнительныхПараметровДанныхДляНачисленияЗарплаты(ДополнительныеПараметры);
	КонецЕсли;

	Возврат ДополнительныеПараметры;
	
КонецФункции

// Получает данные для заполнения табличных частей документа, выполняющего начисление зарплаты.
//
Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт	
	
	ЗамерПодготовкаДанныхЗаполненияДокумента = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	Подразделение = ДополнительныеПараметры.Подразделение;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	РежимНачисления = ДополнительныеПараметры.РежимНачисления;
	ПорядокВыплаты = ДополнительныеПараметры.ПорядокВыплаты;
	ДатаВыплаты = ДополнительныеПараметры.ДатаВыплаты;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	МногопотоковоеЗаполнение = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	СотрудникиДополнительныйДоход = ДополнительныеПараметры.СотрудникиДополнительныйДоход;
	АдресХранилища = ДополнительныеПараметры.АдресХранилища;
	ОкончательныйРасчетНДФЛ = ДополнительныеПараметры.ОкончательныйРасчетНДФЛ;
	ПроверятьРегистрациюПроцентаЕНВД = ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД;
	
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	РасчетПервойПоловиныМесяца = (РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца);
	
	// Флаги выполняемых действия при заполнении
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы;
	РассчитыватьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;
	
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;
	
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыСотрудников(ИменаВТ, МенеджерВременныхТаблиц, Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
	КонецЕсли;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Сотрудники = Неопределено Тогда
		ПараметрыСотрудников = РасчетЗарплатыРасширенный.ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
		ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = ЗаполнятьНачисленияПоТрудовымДоговорам;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
		ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
		ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
		ПараметрыСотрудников.РежимДоначисления = ОписаниеДокумента.РежимДоначисления;
		ПараметрыСотрудников.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
		ПараметрыСотрудников.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыСотрудников.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
		Сотрудники = СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников);
		
		ИменаВТ.Добавить("ВТВсеСотрудникиОрганизации");
		
		// Для сотрудников, уже не работающих, но, возможно, имевших доход в выбранном периоде.
		СотрудникиДополнительныйДоход = СотрудникиДополнительныйДоход(
			Организация,
			Подразделение,
			МесяцНачисления,
			ПараметрыСотрудников,
			Сотрудники,
			РассчитыватьНДФЛ,
			РассчитыватьВзносы);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиДополнительныйДоход);
		
		Если Сотрудники.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ВыявлениеСотрудников", ЗамерВыявленияСотрудников);
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	
	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияНачисленияЗарплаты(МенеджерРасчета, ДополнительныеПараметры);
	КонецЕсли;
	
	СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();
	
	РассчитыватьУдержанияПерерасчет = Ложь;
	СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
	// Сотрудники перерасчета.
	Если ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет Тогда
		
		ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
		ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
		ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
		КонецЕсли;
		
		ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
			ДанныеПерерасчета, 
			Организация, 
			Подразделение, 
			МесяцНачисления, 
			Сотрудники, 
			СотрудникиПериодДействияПерерасчет, 
			ДокументСсылка, 
			ОписаниеДокумента.РежимДоначисления,
			МенеджерРасчета);
		
		Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
			РассчитыватьУдержанияПерерасчет = Истина;
		КонецЕсли;
		
	ИначеЕсли ЕстьУдержанияПерерасчет Тогда
		
		ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
		ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
		ПерерасчетЗарплаты.УстановитьОтборыПерерасчетовУдержаний(
				ДанныеПерерасчета,
				МенеджерРасчета,
				Организация,
				Подразделение,
				Сотрудники,
				СотрудникиПериодДействияПерерасчет,
				МесяцНачисления,
				ОписаниеДокумента.РежимДоначисления);
		
		Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
			РассчитыватьУдержанияПерерасчет = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сотрудники начислений (и удержаний, и договоров).
	Если ЕстьНачисления Или ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет Тогда
		Для Каждого Сотрудник Из Сотрудники Цикл
			Если ЕстьНачисления Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда  
				НоваяСтрока = СотрудникиДляНачислений.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
			КонецЕсли;
			Если РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет Тогда
				НоваяСтрока = СотрудникиДляУдержаний.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
	ОтборМенеджераРасчета.Подразделение = Подразделение;
	МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);
	
	Если ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет Тогда
		
		// Добавляем в менеджер сторно строки.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		
		
	КонецЕсли;
	
	МенеджерРасчета.РассчитатьЗарплату();
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ПодготовкаДанныхЗаполненияДокумента", ЗамерПодготовкаДанныхЗаполненияДокумента);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// 4D:ERP для Беларуси, Яна, 22.08.2017 14:56:07 
// Результат тестирования конфигурации, №15769
// Документ "Начисление взносов" ошибка при заполнении документа, №15152 
// {
// В дополнение к методу ДанныеДляНачисленияЗарплатыБезКорректировкиПериода заполняет даты начала окончания датами
// базового периода для более наглядного отображения в формах документов.
//
// Параметры:
//	Организация
//	Начало, 
//	Окончание,	
//	МесяцНачисления,
//	Подразделение,
//	СотрудникиНачисления - таблица значений с колонками Сотрудник и Начисление,
//	ИзвестныеЗначенияПоказателей - таблица значений с колонками Сотрудник, Показатель, Значение.
//
// Возвращаемое значение - таблица значений, см. ПустаяТаблицаНачисления().
//
Функция ДанныеДляНачисленияЗарплаты(Организация, Начало, Окончание,	МесяцНачисления, Подразделение = Неопределено, Знач Сотрудники = Неопределено, СотрудникиНачисления = Неопределено, ИзвестныеЗначенияПоказателей = Неопределено, РасчетПервойПоловиныМесяца = Ложь, ДокументСсылка = Неопределено, ИсключатьРанееВыполненныеНачисления = Ложь, РасчетЛьгот = Ложь, ИсправленныйДокумент = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляНачисленияЗарплаты();
	ДополнительныеПараметры.Подразделение = Подразделение;
	ДополнительныеПараметры.Сотрудники = Сотрудники;
	ДополнительныеПараметры.СотрудникиНачисления = СотрудникиНачисления;
	ДополнительныеПараметры.ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателей;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
	ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
	ДополнительныеПараметры.ИсправленныйДокумент = ИсправленныйДокумент;
	ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления = ИсключатьРанееВыполненныеНачисления;
	//ДополнительныеПараметры.РасчетЛьгот = РасчетЛьгот;	
	
	НачисленияЗаПериод = ДанныеДляНачисленияЗарплатыБезКорректировкиПериода(Организация, Начало, Окончание,	МесяцНачисления, ДополнительныеПараметры);
	
	// Заполним период расчета базовых начислений для тех начислений, 
	// для которых он отличается от периода действия.
	Для Каждого СтрокаНачислений Из НачисленияЗаПериод Цикл
		Если Не ЗначениеЗаполнено(СтрокаНачислений.НачалоБазовогоПериода) 
			Или Не ЗначениеЗаполнено(СтрокаНачислений.ОкончаниеБазовогоПериода) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаНачислений.ДатаНачала <> СтрокаНачислений.НачалоБазовогоПериода Тогда
			СтрокаНачислений.ДатаНачала = СтрокаНачислений.НачалоБазовогоПериода;
		КонецЕсли;
		Если СтрокаНачислений.ДатаОкончания <> СтрокаНачислений.ОкончаниеБазовогоПериода Тогда
			СтрокаНачислений.ДатаОкончания = СтрокаНачислений.ОкончаниеБазовогоПериода;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НачисленияЗаПериод;

КонецФункции

// Структура для определения дополнительных параметров получения данных для начисления зарплаты.
//
Функция ДополнительныеПараметрыДанныхДляНачисленияЗарплаты() Экспорт
	
	// 4D:ERP для Беларуси, Яна, 19.07.2017 12:48:18 
	// Документ "Начисление взносов" ошибка при заполнении документа, №15152
	// {
	ДополнительныеПараметры = Новый Структура(
		"Подразделение, 
		|Сотрудники, 
		|СотрудникиНачисления, 
		|ИзвестныеЗначенияПоказателей, 
		|РасчетПервойПоловиныМесяца, 
		|ДокументСсылка, 
		|ИсправленныйДокумент, 
		|ИсключатьРанееВыполненныеНачисления");
		
	ДополнительныеПараметры.Подразделение = Неопределено;
	ДополнительныеПараметры.Сотрудники = Неопределено;
	ДополнительныеПараметры.СотрудникиНачисления = Неопределено;
	ДополнительныеПараметры.ИзвестныеЗначенияПоказателей = Неопределено;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = Ложь;
	ДополнительныеПараметры.ДокументСсылка = Неопределено;
	ДополнительныеПараметры.ИсправленныйДокумент = Неопределено;
	ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления = Ложь;
	// }
	// 4D
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ДанныеДляНачисленияЗарплатыБезКорректировкиПериода(Организация, Начало, Окончание,	МесяцНачисления, ДополнительныеПараметры = Неопределено, РасчетЛьгот = Ложь) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляНачисленияЗарплаты();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Метод работает 
	// - либо в режиме выявления начислений, 
	// - либо для заполнения таблицы конкретными начислениями.
	
	// В любом случае прежде всего получаем сотрудников и кадровые перемещения за интервал с даты начала по дату окончания.
	// Кадровые данные нужны для заполнения подразделений и периодов приема/увольнения.
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДополнительныеПараметры.СотрудникиНачисления, "Сотрудник", Истина);
		Начисления = ОбщегоНазначения.ВыгрузитьКолонку(ДополнительныеПараметры.СотрудникиНачисления, "Начисление", Истина);
		Если Начисления.Количество() = 0 Тогда
			НачисленияОпределены = Ложь;
		ИначеЕсли Начисления.Количество() = 1 Тогда
			НачисленияОпределены = Начисления[0] <> ПланыВидовРасчета.Начисления.ПустаяСсылка();
		Иначе
			НачисленияОпределены = Истина;
		КонецЕсли;
	Иначе
		НачисленияОпределены = Ложь;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= ДополнительныеПараметры.Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= Начало;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = Окончание;
		// Подработки
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
			ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
		КонецЕсли;		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
	КонецЕсли; 
		
	// Для выявленных по установленным фильтрам сотрудникам получаем полную кадровую историю в пределах головной
	// организации.
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  					= Организация;
	ПараметрыПолученияРабочихМест.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияРабочихМест.НачалоПериода					= Начало;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  			= Окончание;
	ПараметрыПолученияРабочихМест.СписокСотрудников 			= Сотрудники;
	// Подработки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		ПараметрыПолученияРабочихМест.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	КонецЕсли;		
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		// Готовим "пустышку", если не заданы конкретные начисления.
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	NULL КАК Начисление
		|ПОМЕСТИТЬ ВТСотрудникиНачисления";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление
		|ПОМЕСТИТЬ ВТСотрудникиНачисления
		|ИЗ
		|	&СотрудникиНачисления КАК СотрудникиНачисления";
		Запрос.УстановитьПараметр("СотрудникиНачисления", ДополнительныеПараметры.СотрудникиНачисления);
		Запрос.Выполнить();
	КонецЕсли;
	
	// В таблице могут участвовать сотрудники, которые уже не работали в заданном периоде, 
	// но им нужно выполнить определенные начисления.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМестаСотрудников.Сотрудник
	|ПОМЕСТИТЬ ВТВсеСотрудники
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СотрудникиНачисления.Сотрудник
	|ИЗ
	|	ВТСотрудникиНачисления КАК СотрудникиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|		ПО (РабочиеМестаСотрудников.Сотрудник = СотрудникиНачисления.Сотрудник)
	|ГДЕ
	|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеСотрудники.Сотрудник,
	|	&ДатаНачала КАК Период,
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 1) КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТВсеСотрудники КАК ВсеСотрудники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
		// В расчет первой половины месяца включаем только тех сотрудников, 
		// для которых установлен соответствующий способ расчета аванса.
		ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", МесяцНачисления);
	КонецЕсли;
	
	// Нужно получить даты приема/увольнения для корректировки периодов начислений.
	// Получаем еще и кадровые данные для того, чтобы заполнить рабочие места неработающих сотрудников.
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,Период");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Организация, Подразделение, Должность, ДолжностьПоШтатномуРасписанию, ДатаПриема, ДатаУвольнения, ВидЗанятости");
	
	// Пересоздаем таблицу ВТРабочиеМестаСотрудников, чтобы включить в нее еще и неработающих сотрудников.
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение,
		|	РабочиеМестаСотрудников.Должность,
		|	РабочиеМестаСотрудников.ВидЗанятости,
		|	РабочиеМестаСотрудников.ВидСобытия,
		|	РабочиеМестаСотрудников.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТПрежняяТаблицаРабочиеМестаСотрудников
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМестаРаботающихСотрудников.Период,
		|	РабочиеМестаРаботающихСотрудников.Сотрудник,
		|	РабочиеМестаРаботающихСотрудников.Организация,
		|	РабочиеМестаРаботающихСотрудников.Подразделение,
		|	РабочиеМестаРаботающихСотрудников.Должность,
		|	РабочиеМестаРаботающихСотрудников.ВидЗанятости,
		|	РабочиеМестаРаботающихСотрудников.ВидСобытия,
		|	РабочиеМестаРаботающихСотрудников.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаРаботающихСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеМестаНеработающихСотрудников.Период,
		|	РабочиеМестаНеработающихСотрудников.Сотрудник,
		|	РабочиеМестаНеработающихСотрудников.Организация,
		|	РабочиеМестаНеработающихСотрудников.Подразделение,
		|	РабочиеМестаНеработающихСотрудников.Должность,
		|	РабочиеМестаНеработающихСотрудников.ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
		|	РабочиеМестаНеработающихСотрудников.ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК РабочиеМестаНеработающихСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО (РабочиеМестаСотрудников.Сотрудник = РабочиеМестаНеработающихСотрудников.Сотрудник)
		|ГДЕ
		|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL ";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем источники данных для периодов:
	// нужны ли изменения графика, плановых показателей и т.д.
	// Источники данных для периодов определяются с точностью до начисления, 
	// а также в целом - необходимость запроса к таким данным.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	МАКСИМУМ(Начисления.ТребуетсяРасчетВремени) КАК ТребуютсяИзмененияГрафикаРаботы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуютсяИзмененияПлановыхНачислений,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Начисления.КоличествоПостоянныхПоказателей > 0
	|					ИЛИ ПоказателиЗависимыеОтТарифнойСтавки.Показатель ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуютсяИзмененияПериодическихПоказателей
	|ПОМЕСТИТЬ ВТТребованияНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиЗависимыеОтТарифнойСтавки
	|		ПО (ПоказателиЗависимыеОтТарифнойСтавки.Ссылка = Начисления.Ссылка)
	|			И (ПоказателиЗависимыеОтТарифнойСтавки.Показатель В (&ПоказателиЗависимыеОтТарифнойСтавки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиТипаСтаж
	|		ПО (ПоказателиТипаСтаж.Ссылка = Начисления.Ссылка)
	|			И (ПоказателиТипаСтаж.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
	|ГДЕ
	|	(Начисления.Ссылка В
	|				(ВЫБРАТЬ
	|					СотрудникиНачисления.Начисление
	|				ИЗ
	|					ВТСотрудникиНачисления КАК СотрудникиНачисления)
	|			ИЛИ НЕ &ПоСотрудникамНачислениям
	|			ИЛИ НЕ &НачисленияОпределены)
	|	И (Начисления.НачисляетсяПриРасчетеПервойПоловиныМесяца
	|			ИЛИ НЕ &РасчетПервойПоловиныМесяца)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияГрафикаРаботы), ЛОЖЬ) КАК ТребуютсяИзмененияГрафикаРаботы,
	|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияПлановыхНачислений), ЛОЖЬ) КАК ТребуютсяИзмененияПлановыхНачислений,
	|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияПериодическихПоказателей), ЛОЖЬ) КАК ТребуютсяИзмененияПериодическихПоказателей
	|ИЗ
	|	ВТТребованияНачислений КАК ТребованияНачислений";
	
	ТребуютсяИзмененияГрафикаРаботы			= Ложь;
	ТребуютсяИзмененияПлановыхНачислений	= Ложь;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПоСотрудникамНачислениям", ДополнительныеПараметры.СотрудникиНачисления <> Неопределено);
	Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", ДополнительныеПараметры.РасчетПервойПоловиныМесяца);
	Запрос.УстановитьПараметр("НачисленияОпределены", НачисленияОпределены);
	
	// Показатели, зависимые от тарифной ставки, т.к. рассчитываются на основе ее значения, 
	// а значит требуется учитывать ее изменение для таких начислений.
	ПоказателиЗависимыеОтТарифнойСтавки = Новый Массив;
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	Запрос.УстановитьПараметр("ПоказателиЗависимыеОтТарифнойСтавки", ПоказателиЗависимыеОтТарифнойСтавки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТребуютсяИзмененияГрафикаРаботы			= Выборка.ТребуютсяИзмененияГрафикаРаботы;
		ТребуютсяИзмененияПлановыхНачислений	= Выборка.ТребуютсяИзмененияПлановыхНачислений;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник");
	
	// Срез графиков получаем в любом случае для получения значения графика на дату начала.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
	
	Если ТребуютсяИзмененияГрафикаРаботы Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"ГрафикРаботыСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
	Иначе
		// Добавляем временную таблицу-"пустышку", чтобы не переписывать соединения.
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ТребуютсяИзмененияПлановыхНачислений Тогда
		ПараметрыСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		// Настраиваем фильтр начислений.
		Если Не РасчетЛьгот Тогда 
			ИсключаемыеКатегорииНачислений = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
			ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", ИсключаемыеКатегорииНачислений);
		Иначе 		
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Начисление.ЯвляетсяЛьготой", "=", Истина);
		КонецЕсли;
		Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
			// Ограничим начислениями, только участвующими в расчете за первую половину месяца.
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Начисление.НачисляетсяПриРасчетеПервойПоловиныМесяца", "=", Истина);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыСреза);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		
		ПараметрыПостроенияПлановыхНачислений = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроенияПлановыхНачислений.Отборы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыСреза.Отборы);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроенияПлановыхНачислений);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		
		Если РасчетЛьгот Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		       Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			   Модуль.ДополнитьВТПлановыеНачисленияСрезПоследних(МенеджерВременныхТаблиц, ДополнительныеПараметры.ДокументСсылка);
		   КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Графики работы срез - всегда, движения - по требованию.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период,
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковСрезИДвижения
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудников";
	
	Если ТребуютсяИзмененияГрафикаРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|";
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Плановые начисления, их применение и показатели - получаем по требованию.
	Если ТребуютсяИзмененияПлановыхНачислений Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Применение
		|ИЗ
		|	ВТПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	Начисления.Рассчитывается
		|ПОМЕСТИТЬ ВТПлановыеНачисленияМесяца
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете))
		|			И (ПлановыеНачисления.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|			И (ПлановыеНачисления.Используется)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.МесяцыНачисления КАК Месяцы
		|		ПО (Месяцы.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Месяцы.Месяц = &НомерМесяца)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.МесяцыНачисления КАК Месяцы
		|		ПО (Месяцы.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Месяцы.Месяц = &НомерМесяца)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	МАКСИМУМ(ПлановыеНачисленияСлева.Период) КАК ДатаСлева
		|ПОМЕСТИТЬ ВТПлановыеНачисленияДатыСлева
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.Период < ПлановыеНачисления.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезИДвижения
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияДатыСлева КАК ПлановыеНачисленияДатыСлева
		|		ПО (ПлановыеНачисленияДатыСлева.Период = ПлановыеНачисления.Период)
		|			И (ПлановыеНачисленияДатыСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияДатыСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисления.Рассчитывается = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.Период = ПлановыеНачисленияДатыСлева.ДатаСлева)
		|			И (ПлановыеНачисленияСлева.Используется = ПлановыеНачисления.Используется)
		|ГДЕ
		|	ПлановыеНачисленияСлева.Начисление ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияДатыСлева КАК ПлановыеНачисленияДатыСлева
		|		ПО (ПлановыеНачисленияДатыСлева.Период = ПлановыеНачисления.Период)
		|			И (ПлановыеНачисленияДатыСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияДатыСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисления.Рассчитывается = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.Период = ПлановыеНачисленияДатыСлева.ДатаСлева)
		|			И (ПлановыеНачисленияСлева.Используется = ПлановыеНачисления.Используется)
		|			И (ПлановыеНачисленияСлева.Размер = ПлановыеНачисления.Размер)
		|ГДЕ
		|	ПлановыеНачисленияСлева.Начисление ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейСотрудников.Период,
		|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
		|	ЗначенияПериодическихПоказателейСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейСотрудников.Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейСотрудников.Период,
		|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
		|	ЗначенияПериодическихПоказателейСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейСотрудников.Значение
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НомерМесяца", Месяц(Окончание));
		Запрос.Выполнить();
	Иначе
		// Чтобы оставить неизменным текст запроса, использующий временные таблицы
		// создаем таблицы - "пустышки".
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ИСТИНА КАК Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЛОЖЬ КАК Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	0 КАК Размер,
		|	ЛОЖЬ КАК Используется
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	0 КАК Размер,
		|	ЛОЖЬ КАК Используется
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка) КАК Показатель,
		|	0 КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка) КАК Показатель,
		|	0 КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ТребуютсяИзмененияГрафикаРаботы Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник
		|ИЗ
		|	ВТСотрудникиПериоды КАК Сотрудники";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		РезультатЗапроса = Запрос.Выполнить();
		
		// Нужно рассчитать фактическое время для получения данных для начисления
		// выполнить формирование данных о времени.
		СотрудникиПериоды = УчетРабочегоВремени.ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам();
		СотрудникиПериодыРегистрации = УчетРабочегоВремени.ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Создаем строки по всем месяцам, попадающим в интервал
			НачалоМесяца = НачалоМесяца(Начало);
			Пока НачалоМесяца < Окончание Цикл
				НоваяСтрока = СотрудникиПериоды.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ПериодДействия = НачалоМесяца;
				// Копируем строку в соседнюю таблицу 
				ЗаполнитьЗначенияСвойств(СотрудникиПериодыРегистрации.Добавить(), НоваяСтрока);
				НачалоМесяца = ДобавитьМесяц(НачалоМесяца, 1);
			КонецЦикла;
		КонецЦикла;
		
		// Строки, в которых незаполнен период регистрации времени передаем 
		// для заполнения подсистеме УчетРабочегоВремени.
		Если СотрудникиПериодыРегистрации.Количество() > 0 Тогда
			УчетРабочегоВремени.УстановитьПериодыРегистрацииВремениПоСотрудникам(СотрудникиПериодыРегистрации, МесяцНачисления);
			// Заполняем в исходной таблице полученные периоды регистрации времени.
			Для Каждого СтрокаТаблицы Из СотрудникиПериодыРегистрации Цикл
				ОтборСтрок = Новый Структура("Сотрудник, ПериодДействия");
				ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
				ОтборСтрок.Вставить("ПериодРегистрации", Дата(1, 1, 1));
				НайденныеСтроки = СотрудникиПериоды.НайтиСтроки(ОтборСтрок);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ПериодРегистрации = СтрокаТаблицы.ПериодРегистрации;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// И формируем записи рабочего времени по полученным данным.
		УчетРабочегоВремени.СформироватьЗаписиРабочегоВремениСотрудников(СотрудникиПериоды);
		
		// Используем полученную таблицу для связи с регистром ГрафикиРаботыПоВидамВремени.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПериодыРегистрацииВремени.Сотрудник,
		|	ПериодыРегистрацииВремени.ПериодДействия,
		|	ПериодыРегистрацииВремени.ПериодРегистрации
		|ПОМЕСТИТЬ ВТПериодыРегистрацииВремени
		|ИЗ
		|	&ПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПериодыРегистрацииВремени", СотрудникиПериоды);
		Запрос.Выполнить();
		
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТПериодыРегистрацииВремени";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "МЕСЯЦ", "Период", "ВТДатыНачалаМесяцев");

	// Периоды из разных источников объединяем в единый набор, 
	// при этом про каждый период известно, когда он используется.
	// Затем для каждого начисления составляем интервалы только из периодов, 
	// которые требуются особенностями именно этого начисления,
	// Для начислений, использующих базовый период действия требуется рассчитать его.
	// Если период связан с изменением показателей, то используем его только для тех начислений, 
	// в формулах которых этот показатель используется.
	
	// Определение периодов начисления основной оплаты труда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ПериодДействияКонец, ДЕНЬ, 1), ДЕНЬ) КАК Период,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета
	|ПОМЕСТИТЬ ВТПериодыНачисленияОсновнойОплатыТруда
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И Начисления.ПериодДействияКонец > СотрудникиПериоды.Период
	|			И Начисления.ПериодДействияКонец < СотрудникиПериоды.ДатаОкончания
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
	|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
	|			И (СторноНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (СторноНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
	|			И (СторноНачисления.Сторно = ИСТИНА)
	|			И (СторноНачисления.Регистратор <> &Регистратор)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
	|ГДЕ
	|	СторноНачисления.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ПериодДействияНачало,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И Начисления.ПериодДействияНачало > СотрудникиПериоды.Период
	|			И Начисления.ПериодДействияНачало < СотрудникиПериоды.ДатаОкончания
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
	|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
	|			И (СторноНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (СторноНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
	|			И (СторноНачисления.Сторно = ИСТИНА)
	|			И (СторноНачисления.Регистратор <> &Регистратор)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
	|ГДЕ
	|	СторноНачисления.Сотрудник ЕСТЬ NULL ";
	
	// Выполняем в привилегированном режиме, чтобы учесть оплату труда, которая есть, но стала недоступной.
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Регистратор", ДополнительныеПараметры.ДокументСсылка);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ДополнительныеПараметры.ИсправленныйДокумент);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.Период,
	|	КадроваяИсторияСотрудников.Сотрудник,
	|	ИСТИНА КАК ИзменениеПодразделения,
	|	ЛОЖЬ КАК НачалоМесяца,
	|	ЛОЖЬ КАК ИзменениеГрафика,
	|	ЛОЖЬ КАК ИзменениеПлановыхНачислений,
	|	ЛОЖЬ КАК ИзменениеПериодическихПоказателей,
	|	ЛОЖЬ КАК ИзменениеЗачетНормыВремени,
	|	NULL КАК ОбъектИзменения
	|ПОМЕСТИТЬ ВТПериодыИзменений
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыНачисленияОсновнойОплатыТруда.Период,
	|	ПериодыНачисленияОсновнойОплатыТруда.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ПериодыНачисленияОсновнойОплатыТруда.ВидРасчета
	|ИЗ
	|	ВТПериодыНачисленияОсновнойОплатыТруда КАК ПериодыНачисленияОсновнойОплатыТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатыНачалаМесяцев.Период,
	|	СотрудникиПериоды.Сотрудник,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	NULL
	|ИЗ
	|	ВТДатыНачалаМесяцев КАК ДатыНачалаМесяцев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (ДатыНачалаМесяцев.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|		ПО (КадровыеДанные.Сотрудник = СотрудникиПериоды.Сотрудник)
	|			И ДатыНачалаМесяцев.Период >= КадровыеДанные.ДатаПриема
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период,
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	NULL
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрименениеПлановыхНачислений.Период,
	|	ПрименениеПлановыхНачислений.Сотрудник,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	NULL
	|ИЗ
	|	ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ПлановыеНачисления.Начисление
	|ИЗ
	|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейСотрудников.Период,
	|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЗначенияПериодическихПоказателейСотрудников.Показатель
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК Сотрудник,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзменений КАК ПериодыИзменений
	|		ПО (ПериодыИзменений.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ))
	|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации <= &ПериодРегистрации)";
	
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Окончание));
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаНачала,
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление
		|ПОМЕСТИТЬ ВТПериодыИспользованияНачислений
		|ИЗ
		|	ВТСотрудникиНачисления КАК СотрудникиНачисления";
		Запрос.УстановитьПараметр("ДатаНачала", Начало);
		Запрос.Выполнить();
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.Период,
		|	МАКСИМУМ(ГрафикРаботыСотрудников.Период) КАК ДатаИзмененияОбщегоГрафика
		|ПОМЕСТИТЬ ВТДатыИзмененияОбщихГрафиков
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
		|		ПО (ГрафикРаботыСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ГрафикРаботыСотрудников.Период <= ПериодыИзменений.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.Сотрудник,
		|	ЕСТЬNULL(ИндивидуальныеГрафики.Сотрудник, ГрафикРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботы,
		|	ГрафикРаботыСотрудников.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоПериодамИзменений
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
		|		ПО (ИндивидуальныеГрафики.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыИзмененияОбщихГрафиков КАК ДатыИзмененияОбщихГрафиков
		|		ПО (ДатыИзмененияОбщихГрафиков.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ДатыИзмененияОбщихГрафиков.Период = ПериодыИзменений.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
		|		ПО (ГрафикРаботыСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ГрафикРаботыСотрудников.Период = ДатыИзмененияОбщихГрафиков.ДатаИзмененияОбщегоГрафика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ПериодыИзменений.Период) КАК Период,
		|	ПериодыИзменений.Сотрудник,
		|	НачисленияПоказатели.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТПериодыИспользованияНачислений
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.ОпределяющийПоказатель)
		|			И (НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейСотрудников
		|		ПО (ЗначенияРазовыхПоказателейСотрудников.ПериодДействия = НАЧАЛОПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ))
		|			И (ЗначенияРазовыхПоказателейСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ЗначенияРазовыхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзменений.Сотрудник,
		|	НачисленияПоказатели.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.Сотрудник,
		|	НачисленияПоказатели.Ссылка
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете))
		|			И (НачисленияПоказатели.ОпределяющийПоказатель)
		|			И (НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
		|		ПО (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ ПериодыИзменений.Период И КОНЕЦПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ))
		|			И (ЗначенияОперативныхПоказателейСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ЗначенияОперативныхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыПоДатамИзменений.Период,
		|	ГрафикиРаботыПоДатамИзменений.Сотрудник,
		|	Начисления.Ссылка
		|ИЗ
		|	ВТГрафикиРаботыПоПериодамИзменений КАК ГрафикиРаботыПоДатамИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете))
		|			И (Начисления.ЯвляетсяЛьготой)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ГрафикиРаботыПоДатамИзменений.Период И КОНЕЦПЕРИОДА(ГрафикиРаботыПоДатамИзменений.Период, МЕСЯЦ))
		|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыПоДатамИзменений.ГрафикРаботы)
		|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.Сотрудник,
		|	НачисленияПоказатели.Ссылка
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете))
		|			И (НачисленияПоказатели.Ссылка.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные)
		|			И (НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
		|		ПО (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ ПериодыИзменений.Период И КОНЕЦПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ))
		|			И (ЗначенияОперативныхПоказателейСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ЗначенияОперативныхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыПоДатамИзменений.Период,
		|	ГрафикиРаботыПоДатамИзменений.Сотрудник,
		|	Начисления.Ссылка
		|ИЗ
		|	ВТГрафикиРаботыПоПериодамИзменений КАК ГрафикиРаботыПоДатамИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|			И (Начисления.ЯвляетсяЛьготой)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ГрафикиРаботыПоДатамИзменений.Период И КОНЕЦПЕРИОДА(ГрафикиРаботыПоДатамИзменений.Период, МЕСЯЦ))
		|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыПоДатамИзменений.ГрафикРаботы)
		|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыПраздничныхДней
		|		ПО (ДатыПраздничныхДней.ПроизводственныйКалендарь = ГрафикиРаботыПоДатамИзменений.ПроизводственныйКалендарь)
		|			И (ДатыПраздничныхДней.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|			И (ДатыПраздничныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (ДатыПраздничныхДней.Дата = ГрафикиРаботыПоВидамВремени.Дата)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|ИЗ
		|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)";
		
		Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
		Если Не РасчетЛьгот Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой", "НЕ НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ЯвляетсяЛьготой", "НЕ Начисления.ЯвляетсяЛьготой");
		КонецЕсли;
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление
	|ПОМЕСТИТЬ ВТНачисленияСотрудников
	|ИЗ
	|	ВТПериодыИспользованияНачислений КАК НачисленияСотрудников";
	
	Запрос.Выполнить();
	
	// Определяем даты изменения отдельных начислений для того, 
	// чтобы разделять их на отдельные строки по периодам в зависимости от специфических условий.
	СоздатьВТДополнительныеДатыИзмененияНачислений(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияНачислений КАК ТребованияНачислений
	|			ПО (ТребованияНачислений.Начисление = ПериодыИспользованияНачислений.Начисление)
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ПериодыИзменений.НачалоМесяца
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеПодразделения
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеГрафика
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияГрафикаРаботы
	|				КОГДА ПериодыИзменений.ИзменениеЗачетНормыВремени
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеПлановыхНачислений
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияПлановыхНачислений
	|								И ПериодыИзменений.ОбъектИзменения ЕСТЬ NULL 
	|							ИЛИ ПериодыИзменений.ОбъектИзменения = ПериодыИспользованияНачислений.Начисление
	|				КОГДА ПериодыИзменений.ИзменениеПериодическихПоказателей
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияПериодическихПоказателей
	|							И (ПериодыИзменений.ОбъектИзменения ЕСТЬ NULL 
	|								ИЛИ ПериодыИзменений.ОбъектИзменения В
	|									(ВЫБРАТЬ
	|										ПоказателиНачислений.Показатель
	|									ИЗ
	|										ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|									ГДЕ
	|										ПоказателиНачислений.Ссылка = ПериодыИспользованияНачислений.Начисление))
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДополнительныеДатыИзмененияНачислений.Дата,
	|	ДополнительныеДатыИзмененияНачислений.Сотрудник,
	|	ДополнительныеДатыИзмененияНачислений.Начисление
	|ИЗ
	|	ВТДополнительныеДатыИзмененияНачислений КАК ДополнительныеДатыИзмененияНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = НачисленияСотрудников.Начисление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = НачисленияСотрудников.Сотрудник)
	|			И (БазовыеНачисления.ВидРасчета = ПлановыеНачисления.Начисление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Сотрудник,
	|	Периоды.Начисление,
	|	Периоды.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL 
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ПериодыСлед
	|		ПО Периоды.Период < ПериодыСлед.Период
	|			И Периоды.Сотрудник = ПериодыСлед.Сотрудник
	|			И Периоды.Начисление = ПериодыСлед.Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Сотрудник,
	|	Периоды.Период,
	|	Периоды.Начисление";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления Тогда
		// Готовим таблицу, в которой по другим однотипным документам составляются периоды уже выполненных начислений.
		// При заполнении эти периоды будут исключены.
		// Для этого предварительно составляем ВТ определяющих начислений, то есть таких, 
		// наличие которых в указанном периоде будет означать, что этот период уже "покрыт".
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТОпределяющиеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ЗачетНормыВремени = ИСТИНА
		|	И Начисления.ЗачетОтработанногоВремени = ИСТИНА";
		
		Запрос.Выполнить();
		
		ИсключитьИнтервалыРанееВыполненныхНачислений(
			МенеджерВременныхТаблиц, 
			Организация, 
			ДополнительныеПараметры.ДокументСсылка, 
			МесяцНачисления, 
			ДополнительныеПараметры.РасчетПервойПоловиныМесяца, 
			ДополнительныеПараметры.ИсправленныйДокумент);
	КонецЕсли;
	
	// Для начислений, зависящих от накапливаемых показателей, 
	// исключаем интервалы начислений, в которых нет значений опорных показателей.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
		|				ГДЕ
		|					ПоказателиНачисления.Ссылка = Интервалы.Начисление
		|					И ПоказателиНачисления.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
		|					И ПоказателиНачисления.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключатьИнтервал
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|ГДЕ
		|	НЕ Интервалы.ИсключатьИнтервал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|					ПО
		|						НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
		|							И НачисленияПоказатели.ОпределяющийПоказатель
		|							И НачисленияПоказатели.Ссылка = Интервалы.Начисление
		|							И (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|							И ЗначенияОперативныхПоказателейСотрудников.Сотрудник = Интервалы.Сотрудник
		|							И ЗначенияОперативныхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем даты базового периода.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интервалы.Начисление,
	|	Интервалы.ДатаНачала КАК ИсходнаяДатаНачала,
	|	Интервалы.ДатаОкончания КАК ИсходнаяДатаОкончания,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, КВАРТАЛ), КВАРТАЛ, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, ГОД), ГОД, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -Начисления.КоличествоМесяцевБазовогоПериода)
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|			ТОГДА КОНЕЦПЕРИОДА(Интервалы.ДатаОкончания, КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, КВАРТАЛ, -1), КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|			ТОГДА КОНЕЦПЕРИОДА(Интервалы.ДатаОкончания, ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, ГОД, -1), ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыРасчетаБазовыхНачислений
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = Интервалы.Начисление)
	|			И (Начисления.ТребуетсяРасчетБазы)
	|			И (Начисления.ПериодРасчетаБазовыхНачислений <> ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц))";
	
	Запрос.Выполнить();
	
	// Определяем графики работы по интервалам.
	// Строим таблицу ВТСотрудникиВидыУчетаВремени для того, чтобы понять, используется ли конкретный вид учета времени в
	// данных времени сотрудника за месяц.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	МАКСИМУМ(ОбщиеГрафикиСрезИДвижения.Период) КАК ДатаИзмененияГрафика
	|ПОМЕСТИТЬ ВТДатыИзмененияОбщихГрафиковПоИнтервалам
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ОбщиеГрафикиСрезИДвижения
	|		ПО (ОбщиеГрафикиСрезИДвижения.Сотрудник = Интервалы.Сотрудник)
	|			И (ОбщиеГрафикиСрезИДвижения.Период <= Интервалы.ДатаНачала)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	ОбщиеГрафикиСрезИДвижения.ГрафикРаботы
	|ПОМЕСТИТЬ ВТОбщиеГрафикиРаботыПоИнтервалам
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыИзмененияОбщихГрафиковПоИнтервалам КАК ДатыИзмененияОбщихГрафиковПоИнтервалам
	|		ПО (ДатыИзмененияОбщихГрафиковПоИнтервалам.Сотрудник = Интервалы.Сотрудник)
	|			И (ДатыИзмененияОбщихГрафиковПоИнтервалам.ДатаНачала = Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ОбщиеГрафикиСрезИДвижения
	|		ПО (ОбщиеГрафикиСрезИДвижения.Сотрудник = Интервалы.Сотрудник)
	|			И (ОбщиеГрафикиСрезИДвижения.Период = ДатыИзмененияОбщихГрафиковПоИнтервалам.ДатаИзмененияГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщиеГрафикиРаботы.Сотрудник,
	|	ОбщиеГрафикиРаботы.ДатаНачала,
	|	ЕСТЬNULL(ИндивидуальныеГрафики.Сотрудник, ОбщиеГрафикиРаботы.ГрафикРаботы) КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ИндивидуальныеГрафики.Сотрудник
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|					ТОГДА ГрафикиРаботыСотрудников.Ссылка
	|				ИНАЧЕ ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
	|			КОНЕЦ
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиРаботыПоИнтервалам
	|ИЗ
	|	ВТОбщиеГрафикиРаботыПоИнтервалам КАК ОбщиеГрафикиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудников.Ссылка = ОбщиеГрафикиРаботы.ГрафикРаботы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
	|		ПО (ИндивидуальныеГрафики.Сотрудник = ОбщиеГрафикиРаботы.Сотрудник)
	|			И (ИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ОбщиеГрафикиРаботы.ДатаНачала, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоИнтервалам.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботыПоИнтервалам.ДатаНачала, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиВидыУчетаВремени
	|ИЗ
	|	ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = ГрафикиРаботыПоИнтервалам.Сотрудник)
	|			И (ПериодыРегистрацииВремени.ПериодРегистрации <> ДАТАВРЕМЯ(1, 1, 1))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоИнтервалам.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ГрафикиРаботыПоИнтервалам.ДатаНачала, МЕСЯЦ))
	|			И (ПериодыРегистрацииВремени.ПериодРегистрации ЕСТЬ NULL 
	|				ИЛИ ПериодыРегистрацииВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)";	
	
	Запрос.Выполнить();
	
	// Для начислений, зависящих от наличия значения вида времени, 
	// исключаем интервалы начислений, в которых нет времени указанного вида.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключатьИнтервал
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = Интервалы.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала
		|ПОМЕСТИТЬ ВТИсключаемыеИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
		|		ПО (ПериодыРегистрацииВремени.Сотрудник = Интервалы.Сотрудник)
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации <> ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = Интервалы.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
		|		ПО Интервалы.Сотрудник = ГрафикиРаботыПоИнтервалам.Сотрудник
		|			И Интервалы.ДатаНачала = ГрафикиРаботыПоИнтервалам.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Начисления.ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (ГрафикиРаботыПоИнтервалам.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ))
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации ЕСТЬ NULL 
		|				ИЛИ ПериодыРегистрацииВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ГрафикиРаботыПоВидамВремени.Дата ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТСверхурочныеПоказателями
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Ссылка.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные)
		|			И (НачисленияПоказатели.Ссылка = Интервалы.Начисление)
		|			И (Интервалы.ИсключатьИнтервал)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
		|		ПО (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПоказателейСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияОперативныхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсключаемыеИнтервалы КАК ИсключаемыеИнтервалы
		|		ПО (ИсключаемыеИнтервалы.Сотрудник = Интервалы.Сотрудник)
		|			И (ИсключаемыеИнтервалы.Начисление = Интервалы.Начисление)
		|			И (ИсключаемыеИнтервалы.ДатаНачала = Интервалы.ДатаНачала)
		|ГДЕ
		|	ИсключаемыеИнтервалы.Начисление ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|ГДЕ
		|	НЕ Интервалы.ИсключатьИнтервал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеИнтервалы КАК ИсключаемыеИнтервалы
		|		ПО (ИсключаемыеИнтервалы.Сотрудник = Интервалы.Сотрудник)
		|			И (ИсключаемыеИнтервалы.Начисление = Интервалы.Начисление)
		|			И (ИсключаемыеИнтервалы.ДатаНачала = Интервалы.ДатаНачала)
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ИсключаемыеИнтервалы.ДатаНачала ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ИЗ
		|	ВТСверхурочныеПоказателями КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИсключаемыеИнтервалы";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Для начислений, выполняемых только по праздничным дням, 
	// исключаем интервалы начислений, в которых нет праздничных дней.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключатьИнтервал
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = Интервалы.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала
		|ПОМЕСТИТЬ ВТИсключаемыеИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбщиеГрафикиРаботыПоИнтервалам КАК ОбщиеГрафикиРаботы
		|		ПО (ОбщиеГрафикиРаботы.Сотрудник = Интервалы.Сотрудник)
		|			И (ОбщиеГрафикиРаботы.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.ПроизводственныйКалендарь = ОбщиеГрафикиРаботы.ГрафикРаботы.ПроизводственныйКалендарь)
		|			И (ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (ДанныеКалендаря.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ДанныеКалендаря.Дата ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|ГДЕ
		|	НЕ Интервалы.ИсключатьИнтервал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеИнтервалы КАК ИсключаемыеИнтервалы
		|		ПО (ИсключаемыеИнтервалы.Сотрудник = Интервалы.Сотрудник)
		|			И (ИсключаемыеИнтервалы.Начисление = Интервалы.Начисление)
		|			И (ИсключаемыеИнтервалы.ДатаНачала = Интервалы.ДатаНачала)
		|			И (Интервалы.ИсключатьИнтервал)
		|ГДЕ
		|	ИсключаемыеИнтервалы.ДатаНачала ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИсключаемыеИнтервалы";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем в часах или в днях оплачиваются праздничные дни на конкретном интервале.
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	NULL КАК ДатаНачала,
		|	NULL КАК Начисление,
		|	NULL КАК ВремяВЧасах
		|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	Интервалы.Начисление,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВремяВЧасах
		|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = Интервалы.Начисление)
		|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
		|		ПО (ГрафикиРаботыПоИнтервалам.Сотрудник = Интервалы.Сотрудник)
		|			И (ГрафикиРаботыПоИнтервалам.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
		|		ПО (ПериодыРегистрацииВремени.Сотрудник = ГрафикиРаботыПоИнтервалам.Сотрудник)
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации <> ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоИнтервалам.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ГрафикиРаботыПоИнтервалам.ДатаНачала, МЕСЯЦ))
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В (&Праздники))
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации ЕСТЬ NULL 
		|				ИЛИ ПериодыРегистрацииВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|			И (ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение > 0)";	
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем признак суммированного учета общего графика для принятия решения о способе оплаты по среднему.
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТИнтервалы", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "СуммированныйУчетРабочегоВремени");
	
	// Определены интервалы и состав полагающихся сотрудникам начислений,
	// составляем итоговую выборку.
	
	// Для начислений, выполняемых в целом за месяц, нужно определить дату такого начисления.
	// Считаем такой датой последнее изменение рабочего места в месяце.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	Интервалы.Начисление,
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод,
	|	МАКСИМУМ(ПрименениеПлановыхНачислений.Период) КАК ПрименениеПлановыхНачисленийПериод,
	|	МАКСИМУМ(ПлановыеНачисления.Период) КАК ПлановыеНачисленияПериод
	|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО (КадроваяИсторияСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И (КадроваяИсторияСотрудников.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|		ПО (ПрименениеПлановыхНачислений.Сотрудник = Интервалы.Сотрудник)
	|			И (ПрименениеПлановыхНачислений.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = Интервалы.Сотрудник)
	|			И (ПлановыеНачисления.Начисление = Интервалы.Начисление)
	|			И (ПлановыеНачисления.Период <= Интервалы.ДатаНачала)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	Интервалы.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.Сотрудник,
	|	МАКСИМУМ(РабочиеМеста.Период) КАК Период
	|ПОМЕСТИТЬ ВТДатаПоследнихРабочихМестСотрудников
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	КадроваяИсторияСотрудников.Организация,
	|	КадроваяИсторияСотрудников.Подразделение,
	|	КадроваяИсторияСотрудников.Должность,
	|	КадроваяИсторияСотрудников.ВидЗанятости,
	|	ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ГрафикРаботыНорма,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ВТСотрудникиВидыУчетаВремени КАК СотрудникиВидыУчетаВремени
	|				ГДЕ
	|					Интервалы.Сотрудник = СотрудникиВидыУчетаВремени.Сотрудник
	|					И НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) = СотрудникиВидыУчетаВремени.Месяц
	|					И ГрафикиРаботыСотрудников.ГрафикРаботы = СотрудникиВидыУчетаВремени.ГрафикРаботы
	|					И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = СотрудникиВидыУчетаВремени.ВидУчетаВремени)
	|			ТОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|						ИЛИ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ЛОЖЬ
	|					ТОГДА &РабочееВремя
	|				ИНАЧЕ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА Начисления.УчетВремениВЧасах
	|			ТОГДА ИСТИНА
	|		КОГДА Начисления.УчетВремениВДняхЧасах
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники)
	|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
	|					ИНАЧЕ КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВЧасах,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	ЕСТЬNULL(ПериодыБазовыхНачислений.ДатаНачала, Интервалы.ДатаНачала) КАК НачалоБазовогоПериода,
	|	ЕСТЬNULL(ПериодыБазовыхНачислений.ДатаОкончания, Интервалы.ДатаОкончания) КАК ОкончаниеБазовогоПериода,
	|	Интервалы.Начисление,
	|	Начисления.Рассчитывается КАК НачислениеРассчитывается,
	|	ПлановыеНачисления.Размер,
	|	Начисления.ВидВремени КАК ВидВремени,
	|	ВЫБОР
	|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
	|			ТОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|	КОНЕЦ КАК ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудников.Организация <> &Организация
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ КадроваяИсторияСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)
	|				И НЕ &ПоВсемПодразделениям
	|			ТОГДА ЛОЖЬ
	|		КОГДА СотрудникиНачисления.Начисление ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПрименениеПлановыхНачислений.Применение = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		КОГДА Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
	|			ТОГДА ЕСТЬNULL(ПлановыеНачисления.Используется, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется,
	|	ПериодыРегистрацииВремени.ПериодРегистрации КАК ПериодРегистрацииВремени,
	|	ПоследниеРабочиеМестаСотрудников.Должность КАК ПоследнееРабочееМестоДолжность,
	|	ПоследниеРабочиеМестаСотрудников.Подразделение КАК ПоследнееРабочееМестоПодразделение,
	|	ПоследниеРабочиеМестаСотрудников.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжности,
	|	ПоследниеРабочиеМестаСотрудников.Подразделение.РеквизитДопУпорядочивания КАК ПорядокПодразделения,
	|	Сотрудники.Наименование КАК ФИОСотрудника,
	|	Начисления.ОчередностьРасчета КАК ОчередностьРасчета,
	|	Начисления.РеквизитДопУпорядочивания КАК ПорядокНачисления
	|ПОМЕСТИТЬ ВТДанныеНачислений
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Интервалы.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО Интервалы.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И Интервалы.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаПоследнихРабочихМестСотрудников КАК ДатыПоследнегоРабочегоМеста
	|		ПО Интервалы.Сотрудник = ДатыПоследнегоРабочегоМеста.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК ПоследниеРабочиеМестаСотрудников
	|		ПО Интервалы.Сотрудник = ПоследниеРабочиеМестаСотрудников.Сотрудник
	|			И (ДатыПоследнегоРабочегоМеста.Период = ПоследниеРабочиеМестаСотрудников.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И Интервалы.ДатаНачала = ГрафикиРаботыСотрудников.ДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|		ПО Интервалы.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник
	|			И Интервалы.ПрименениеПлановыхНачисленийПериод = ПрименениеПлановыхНачислений.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|		ПО Интервалы.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И Интервалы.Начисление = ПлановыеНачисления.Начисление
	|			И Интервалы.ПлановыеНачисленияПериод = ПлановыеНачисления.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО Интервалы.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОплатыПраздничныхДней КАК СпособыОплатыПраздничныхДней
	|		ПО (СпособыОплатыПраздничныхДней.Сотрудник = Интервалы.Сотрудник)
	|			И (СпособыОплатыПраздничныхДней.ДатаНачала = Интервалы.ДатаНачала)
	|			И (СпособыОплатыПраздничныхДней.Начисление = Интервалы.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРасчетаБазовыхНачислений КАК ПериодыБазовыхНачислений
	|		ПО (ПериодыБазовыхНачислений.Начисление = Интервалы.Начисление)
	|			И (ПериодыБазовыхНачислений.ИсходнаяДатаНачала = Интервалы.ДатаНачала)
	|			И (ПериодыБазовыхНачислений.ИсходнаяДатаОкончания = Интервалы.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = Интервалы.Сотрудник)
	|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
	|		ПО (СотрудникиНачисления.Сотрудник = Интервалы.Сотрудник)
	|			И (СотрудникиНачисления.Начисление = Интервалы.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (КадровыеДанныеСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И (КадровыеДанныеСотрудников.Период = Интервалы.ДатаНачала)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Начисление,
	|	МАКСИМУМ(ДанныеНачислений.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыНачисленийВЦеломЗаМесяц
	|ИЗ
	|	ВТДанныеНачислений КАК ДанныеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|			И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Организация,
	|	ДанныеНачислений.Подразделение,
	|	ДанныеНачислений.Должность,
	|	ДанныеНачислений.ВидЗанятости,
	|	ДанныеНачислений.ГрафикРаботы,
	|	ДанныеНачислений.ГрафикРаботыНорма,
	|	ДанныеНачислений.ВидУчетаВремени,
	|	ДанныеНачислений.ВремяВЧасах,
	|	ДанныеНачислений.ДатаНачала,
	|	ДанныеНачислений.ДатаОкончания,
	|	ДанныеНачислений.НачалоБазовогоПериода,
	|	ДанныеНачислений.ОкончаниеБазовогоПериода,
	|	ДанныеНачислений.Начисление,
	|	ДанныеНачислений.НачислениеРассчитывается,
	|	ДанныеНачислений.Размер,
	|	ДанныеНачислений.ВидВремени,
	|	ДанныеНачислений.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ДанныеНачислений.Используется,
	|	ДанныеНачислений.ПериодРегистрацииВремени,
	|	ДанныеНачислений.ПоследнееРабочееМестоДолжность,
	|	ДанныеНачислений.ПоследнееРабочееМестоПодразделение,
	|	ДанныеНачислений.ПорядокДолжности,
	|	ДанныеНачислений.ПорядокПодразделения,
	|	ДанныеНачислений.ФИОСотрудника,
	|	ДанныеНачислений.ОчередностьРасчета,
	|	ДанныеНачислений.ПорядокНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеНачислений.Сотрудник КАК Сотрудник,
	|		ДанныеНачислений.Организация КАК Организация,
	|		ДанныеНачислений.Подразделение КАК Подразделение,
	|		ДанныеНачислений.Должность КАК Должность,
	|		ДанныеНачислений.ВидЗанятости КАК ВидЗанятости,
	|		ДанныеНачислений.ГрафикРаботы КАК ГрафикРаботы,
	|		ДанныеНачислений.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ДанныеНачислений.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ДанныеНачислений.ВремяВЧасах КАК ВремяВЧасах,
	|		ДанныеНачислений.ДатаНачала КАК ДатаНачала,
	|		ДанныеНачислений.ДатаОкончания КАК ДатаОкончания,
	|		ДанныеНачислений.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
	|		ДанныеНачислений.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
	|		ДанныеНачислений.Начисление КАК Начисление,
	|		ДанныеНачислений.НачислениеРассчитывается КАК НачислениеРассчитывается,
	|		ДанныеНачислений.Размер КАК Размер,
	|		ДанныеНачислений.ВидВремени КАК ВидВремени,
	|		ДанныеНачислений.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени,
	|		ДанныеНачислений.Используется КАК Используется,
	|		ДанныеНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|		ДанныеНачислений.ПоследнееРабочееМестоДолжность КАК ПоследнееРабочееМестоДолжность,
	|		ДанныеНачислений.ПоследнееРабочееМестоПодразделение КАК ПоследнееРабочееМестоПодразделение,
	|		ДанныеНачислений.ПорядокДолжности КАК ПорядокДолжности,
	|		ДанныеНачислений.ПорядокПодразделения КАК ПорядокПодразделения,
	|		ДанныеНачислений.ФИОСотрудника КАК ФИОСотрудника,
	|		ДанныеНачислений.ОчередностьРасчета КАК ОчередностьРасчета,
	|		ДанныеНачислений.ПорядокНачисления КАК ПорядокНачисления
	|	ИЗ
	|		ВТДанныеНачислений КАК ДанныеНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|				И (НЕ Начисления.НачисляетсяВЦеломЗаМесяц)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеНачислений.Сотрудник,
	|		ДанныеНачислений.Организация,
	|		ДанныеНачислений.Подразделение,
	|		ДанныеНачислений.Должность,
	|		ДанныеНачислений.ВидЗанятости,
	|		ДанныеНачислений.ГрафикРаботы,
	|		ДанныеНачислений.ГрафикРаботыНорма,
	|		ДанныеНачислений.ВидУчетаВремени,
	|		ДанныеНачислений.ВремяВЧасах,
	|		ДанныеНачислений.ДатаНачала,
	|		ДанныеНачислений.ДатаОкончания,
	|		ДанныеНачислений.НачалоБазовогоПериода,
	|		ДанныеНачислений.ОкончаниеБазовогоПериода,
	|		ДанныеНачислений.Начисление,
	|		ДанныеНачислений.НачислениеРассчитывается,
	|		ДанныеНачислений.Размер,
	|		ДанныеНачислений.ВидВремени,
	|		ДанныеНачислений.ОбозначениеВТабелеУчетаРабочегоВремени,
	|		ДанныеНачислений.Используется,
	|		ДанныеНачислений.ПериодРегистрацииВремени,
	|		ДанныеНачислений.ПоследнееРабочееМестоДолжность,
	|		ДанныеНачислений.ПоследнееРабочееМестоПодразделение,
	|		ДанныеНачислений.ПорядокДолжности,
	|		ДанныеНачислений.ПорядокПодразделения,
	|		ДанныеНачислений.ФИОСотрудника,
	|		ДанныеНачислений.ОчередностьРасчета,
	|		ДанныеНачислений.ПорядокНачисления
	|	ИЗ
	|		ВТДанныеНачислений КАК ДанныеНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|				И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНачисленийВЦеломЗаМесяц КАК ДатыНачисленийВЦеломЗаМесяц
	|			ПО (ДатыНачисленийВЦеломЗаМесяц.Сотрудник = ДанныеНачислений.Сотрудник)
	|				И (ДатыНачисленийВЦеломЗаМесяц.Начисление = ДанныеНачислений.Начисление)
	|				И (ДатыНачисленийВЦеломЗаМесяц.ДатаНачала = ДанныеНачислений.ДатаНачала)) КАК ДанныеНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеНачислений.ПорядокДолжности,
	|	ДанныеНачислений.ПорядокПодразделения,
	|	ДанныеНачислений.ФИОСотрудника,
	|	ДанныеНачислений.ОчередностьРасчета,
	|	ДанныеНачислений.ПорядокНачисления,
	|	ДанныеНачислений.ДатаНачала";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Не ЗначениеЗаполнено(ДополнительныеПараметры.Подразделение));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Основная выборка для формирования набора записей.
	Выборка = РезультатЗапроса.Выбрать();
	
	НачисленияЗаПериод = ПустаяТаблицаНачисления();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		// Вводим новые строки начисления.
		НовыеСтроки = ВводНовыхСтрокНачислений(Выборка, НачисленияЗаПериод);
		Для Каждого ЭлементМассива Из НовыеСтроки Цикл
			НоваяСтрока = ЭлементМассива.НоваяСтрока;
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.Подразделение = Выборка.Подразделение;
			НоваяСтрока.ВидЗанятости = Выборка.ВидЗанятости;
			НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
			НоваяСтрока.ГрафикРаботыНорма = Выборка.ГрафикРаботыНорма;
			НоваяСтрока.ВидУчетаВремени = Выборка.ВидУчетаВремени;
			НоваяСтрока.ВидВремени = Выборка.ВидВремени;
			НоваяСтрока.ВремяВЧасах = Выборка.ВремяВЧасах;
			НоваяСтрока.Начисление = Выборка.Начисление;
			НоваяСтрока.НачалоБазовогоПериода = Выборка.НачалоБазовогоПериода;
			НоваяСтрока.ОкончаниеБазовогоПериода = Выборка.ОкончаниеБазовогоПериода;
			НоваяСтрока.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремени;
			Если Не Выборка.НачислениеРассчитывается Тогда 
				НоваяСтрока.Результат = Выборка.Размер;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияПоказателейНачислений(НачисленияЗаПериод, ДополнительныеПараметры.ИзвестныеЗначенияПоказателей);
	
	Возврат НачисленияЗаПериод;
	
КонецФункции

// Накладывает на временную таблицу, содержащую сотрудников, фильтр, 
// получая таким образом таблицу с тем же самым именем, 
// но уже содержащую только сотрудников, для которых установлен аванс расчетом за первую половину месяца.
//
Процедура ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, ИмяВТСотрудники, МесяцНачисления) Экспорт 
	
	// Получаем менеджер ВТ и имя таблицы в которой есть сотрудник
	// выбираем все из этой таблицы в другую временную таблицу
	// выбираем из нее сотрудников,
	// уничтожаем исходную таблицу.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТДанныеБезОтбора
	|ИЗ
	|	#ВТСотрудники КАК ДанныеБезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеБезОтбора.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиБезОтбора
	|ИЗ
	|	ВТДанныеБезОтбора КАК ВТДанныеБезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыВТСпособыАванса = ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников(
		МенеджерВременныхТаблиц, "ВТСотрудникиБезОтбора");
		
	СоздатьВТАвансыСотрудников(ПараметрыВТСпособыАванса, Истина, КонецМесяца(МесяцНачисления));
	
	// Выбираем из созданной временной таблицы с фильтром на сотрудников по авансу,
	// помещаем во временную таблицу с исходным именем.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ #ВТСотрудники
	|ИЗ
	|	ВТДанныеБезОтбора КАК ДанныеБезОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАвансыСотрудников КАК АвансыСотрудников
	|		ПО (АвансыСотрудников.Сотрудник = ДанныеБезОтбора.Сотрудник)
	|		И АвансыСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура предназначена для расширения стандартных критериев, 
// в соответствии с которыми строка с начислением делится на отдельные интервалы.
//
// Параметры:
//	МенеджерВременныхТаблиц - содержит таблицу ВТНачисленияСотрудников с полями Сотрудник и Начисление.
//	МесяцНачисления - период регистрации расчетов.
//	Начало и Окончание - интервал, за который выполняется начисление зарплаты.
//	
Процедура СоздатьВТДополнительныеДатыИзмененияНачислений(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание) Экспорт 
	
	ИменаВТ = Новый Массив;
	
	// Формируем таблицы с датами изменения
	// - стажа,
	СоздатьВТДатыИзмененияНачисленийЗависящихОтСтажа(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ);
	// - способа оплаты праздничных дней (по дням или по часам),
	СоздатьВТДатыИзмененияСпособаОплатыПраздников(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ);
	// - пособий ,
	УчетПособийСоциальногоСтрахованияРасширенный.СоздатьВТДатыИзмененияЗаписейРасчетаПособияДоПолутораЛет(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	
	// 4D:ERP для Беларуси, Яна, 19.05.2017 14:44:25 
	// Документ "Отпуск по уходу за ребенком", №14900 
	// Документ "Начисление взносов" ошибка при заполнении документа, №15152
	// {
	// - пособий  до 3 лет
	УчетПособийСоциальногоСтрахованияРасширенный.СоздатьВТДатыИзмененияЗаписейРасчетаПособияДоТрехЛет(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);	

	// - северной надбавки,
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСевернойНадбавки(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// - базового тарифа, тарифной группы,
	РазрядыКатегорииДолжностей.СоздатьВТПериодыИзмененияБазовогоТарифа(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	//// - совокупной тарифной ставки,
	//СоздатьВТДатыИзмененияСовокупнойСтавки(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// - и других начислений.
	РасчетЗарплатыРасширенныйПереопределяемый.СоздатьВТПериодыИзмененияОтдельныхНачислений(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Яна, 23.05.2017 17:22:15 
	// Ошибка при формировании документа увольнения, № 14902 
	// {
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление
	|ПОМЕСТИТЬ ВТДополнительныеДатыИзмененияНачислений
	|ГДЕ
	|	ЛОЖЬ";
	
	Для Каждого ИмяВТ Из ИменаВТ Цикл
		ТекстОбъединения = "
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ
		|	ПериодыИзменения.Период,
		|	ПериодыИзменения.Сотрудник,
		|	ПериодыИзменения.Начисление
		|ИЗ #ИмяВТ КАК ПериодыИзменения
		|";
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстОбъединения, "#ИмяВТ", ИмяВТ);
	КонецЦикла;	
	// }
	// 4D
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу ВТИнтервалы взамен переданной, в которой остаются только интервалы, 
// ранее не выполненных начислений в других документах указанного типа начисления.
// 
Процедура ИсключитьИнтервалыРанееВыполненныхНачислений(МенеджерВременныхТаблиц, Организация, ДокументСсылка, МесяцНачисления, РасчетПервойПоловиныМесяца = Ложь, ИсправленныйДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	// 4D:ERP для Беларуси, Яна, 23.05.2017 17:32:13 
	// Ошибка при формировании документа увольнения, №14902 
	// {	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПериодДействияНачало КАК ДатаНачала,
		|	ТаблицаНачислений.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалыВыполненныхНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеИнтервалы КАК Интервалы
		|		ПО (Интервалы.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (ТаблицаНачислений.Регистратор <> &ДокументСсылка)
		|			И (ТаблицаНачислений.Регистратор <> &ИсправленныйДокумент)
		|			И (ТаблицаНачислений.Организация = &Организация)
		|			И ТаблицаНачислений.ПериодДействияНачало <= Интервалы.ДатаОкончания
		|			И ТаблицаНачислений.ПериодДействияКонец >= Интервалы.ДатаНачала
		|			И (ТаблицаНачислений.ПериодРегистрации <= &МесяцНачисления)
		|			И (ТаблицаНачислений.Сторно = ЛОЖЬ)
		|			И (ТаблицаНачислений.ВидРасчета В
		|				(ВЫБРАТЬ
		|					ОпределяющиеНачисления.Начисление
		|				ИЗ
		|					ВТОпределяющиеНачисления КАК ОпределяющиеНачисления))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
		|		ПО (СторноНачисления.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (СторноНачисления.ПериодДействияНачало = ТаблицаНачислений.ПериодДействияНачало)
		|			И (СторноНачисления.ПериодДействияКонец = ТаблицаНачислений.ПериодДействияКонец)
		|			И (СторноНачисления.ВидРасчета = ТаблицаНачислений.ВидРасчета)
		|			И (СторноНачисления.Сторно = ИСТИНА)
		|			И (СторноНачисления.Регистратор <> &ДокументСсылка)
		|			И (СторноНачисления.ПериодРегистрации > ТаблицаНачислений.ПериодРегистрации)
		|ГДЕ
		|	СторноНачисления.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.ДатаОкончания
		|ИЗ
		|	Документ.НачислениеЗаПервуюПоловинуМесяца.Начисления КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеИнтервалы КАК Интервалы
		|		ПО (Интервалы.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (ТаблицаНачислений.Ссылка <> &ДокументСсылка)
		|			И (ТаблицаНачислений.Ссылка <> &ИсправленныйДокумент)
		|			И (ТаблицаНачислений.Ссылка.Организация = &Организация)
		|			И ТаблицаНачислений.ДатаНачала <= Интервалы.ДатаОкончания
		|			И ТаблицаНачислений.ДатаОкончания >= Интервалы.ДатаНачала
		|			И (ТаблицаНачислений.Ссылка.Проведен)
		|			И (ТаблицаНачислений.Начисление В
		|				(ВЫБРАТЬ
		|					ОпределяющиеНачисления.Начисление
		|				ИЗ
		|					ВТОпределяющиеНачисления КАК ОпределяющиеНачисления))
		|			И (&РасчетПервойПоловиныМесяца)";
		
	Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", РасчетПервойПоловиныМесяца);
	
	УстановитьПривилегированныйРежим(Истина);
	// Проверку уже оплаченных интервалов выполняем по всей базе, сквозь ограничение доступа.
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВсеИнтервалы.Сотрудник,
		|	ВсеИнтервалы.Начисление,
		|	ВсеИнтервалы.ДатаНачала,
		|	ВсеИнтервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК ВсеИнтервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыВыполненныхНачислений КАК ИнтервалыВыполненныхНачислений
		|		ПО ВсеИнтервалы.Сотрудник = ИнтервалыВыполненныхНачислений.Сотрудник
		|			И ВсеИнтервалы.ДатаНачала <= ИнтервалыВыполненныхНачислений.ДатаОкончания
		|			И ВсеИнтервалы.ДатаОкончания >= ИнтервалыВыполненныхНачислений.ДатаНачала
		|ГДЕ
		|	ИнтервалыВыполненныхНачислений.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы";		
	// }
	// 4D
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВводНовыхСтрокНачислений(Выборка, НачисленияЗаПериод) Экспорт 
	
	Строки = Новый Массив;
	
	НоваяСтрока = НачисленияЗаПериод.Добавить();
	НоваяСтрока.ДатаНачала = Выборка.ДатаНачала;
	НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
	НоваяСтрока.ПериодДействия = НачалоМесяца(Выборка.ДатаНачала);
	
	Строки.Добавить(Новый Структура("НоваяСтрока, ФиксированнаяДатаОкончания", НоваяСтрока, Неопределено));
	
	Возврат Строки;
	
КонецФункции

// Получает и заполняет значения показателей начислений в переданной таблице значений.
// Создает при необходимости колонки для показателей вида Показатель1, ..., ПоказательN.
// 
// Параметры:
//	- НачисленияЗаПериод - таблица значений, в которой есть колонки, см. ПустаяТаблицаСотрудниковНачислений().
//		Сотрудник, 
//		Начисление, 
//		ДатаНачала, 
//		ДатаОкончания
//	- ИзвестныеЗначенияПоказателей - (необязательный), если указан, то для заполнения указанных показателей 
//		будут использованы значения из этой таблицы, см. ПустаяТаблицаЗначенийПоказателей().
//
Процедура ЗаполнитьЗначенияПоказателейНачислений(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей = Неопределено) Экспорт
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Если НачисленияЗаПериод.Колонки.Найти("Показатель" + Счетчик) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Если для показателей пока не добавлено колонок, добавляем их.
		НачисленияЗаПериод.Колонки.Добавить("Показатель" + Счетчик);
		НачисленияЗаПериод.Колонки.Добавить("Значение" + Счетчик);
		НачисленияЗаПериод.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	// Проверяем есть ли в таблице показатели, значения которых необходимо заполнить (по данным учета).
	// Такой необходимости может не возникнуть, если все показатели вводятся непосредственно при расчете,
	// или их значения уже определены в коллекции известных показателей.
	
	Если Не ТребуетсяЗаполнениеЗначенийПоказателей(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей) Тогда
		ЗаполнитьСведенияОПоказателях(НачисленияЗаПериод);
		ЗаполнитьИзвестныеЗначенияПоказателей(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей);
		Возврат;
	КонецЕсли;
	
	ЗначенияПоказателей = ЗначенияПоказателейНачислений(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей);
	
	ОтборНачислений = Новый Структура("Сотрудник, Подразделение, Начисление, ДокументОснование, ДатаНачала, ДатаОкончания");
	НачисленияЗаПериод.Индексы.Добавить("Сотрудник, Подразделение, Начисление, ДокументОснование, ДатаНачала, ДатаОкончания"); 	
	Для Каждого СтрокаПоказателей Из ЗначенияПоказателей Цикл
		ЗаполнитьЗначенияСвойств(ОтборНачислений, СтрокаПоказателей);
		СтрокиНачислений = НачисленияЗаПериод.НайтиСтроки(ОтборНачислений);
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, СтрокаПоказателей);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьВТДатыИзмененияНачисленийЗависящихОтСтажа(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ)
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыИзмененияСтажаСотрудников.Сотрудник,
	|	ДатыИзмененияСтажаСотрудников.ДатаСтажа КАК Период,
	|	ПоказателиНачислений.Ссылка КАК Начисление
	|ПОМЕСТИТЬ ВТДатыИзмененияНачисленийЗависящихОтСтажа
	|ИЗ
	|	ВТПериодыИзмененияСтажа КАК ДатыИзмененияСтажаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ДатыИзмененияСтажаСотрудников.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Показатель.ВидСтажа = ДатыИзмененияСтажаСотрудников.ВидСтажа)
	|			И (ПоказателиНачислений.Ссылка = НачисленияСотрудников.Начисление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
	|		ПО (ШкалаОценкиСтажа.Ссылка = ПоказателиНачислений.Показатель)
	|			И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = ДатыИзмененияСтажаСотрудников.ЗначениеСтажа
	|				ИЛИ ДатыИзмененияСтажаСотрудников.ЗначениеСтажа = 0)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТДатыИзмененияНачисленийЗависящихОтСтажа");
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияСпособаОплатыПраздников(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ)
	
	Праздники = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники");
	Если Не ЗначениеЗаполнено(Праздники) Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем даты изменения способа оплаты праздников.
	// В течение заполняемого периода возможны смены способов оплаты праздничных дней (по дням и по часам).
	// Необходимо определить даты, в которых произошла смена способа оплаты, 
	// они будут использоваться для расщепления начислений праздничных дней.
	// Самую первую дату подменяем на начало работы сотрудника в этом месяце, чтобы интервалы были "красивыми".
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВремяВЧасах
	|ПОМЕСТИТЬ ВТДатыОплатыПраздников
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &Начало И &Окончание)
	|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
	|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации <= &ПериодРегистрации)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В (&Праздники))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОплатыПраздников.ГрафикРаботы,
	|	ДатыОплатыПраздников.Месяц,
	|	ДатыОплатыПраздников.Дата,
	|	МАКСИМУМ(ДатыСлева.Дата) КАК ДатаСлева
	|ПОМЕСТИТЬ ВТБлижайшиеДатыСлева
	|ИЗ
	|	ВТДатыОплатыПраздников КАК ДатыОплатыПраздников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОплатыПраздников КАК ДатыСлева
	|		ПО (ДатыСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (ДатыСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (ДатыСлева.Дата < ДатыОплатыПраздников.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОплатыПраздников.ГрафикРаботы,
	|	ДатыОплатыПраздников.Месяц,
	|	ДатыОплатыПраздников.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.Сотрудник,
	|	НАЧАЛОПЕРИОДА(РабочиеМеста.Период, МЕСЯЦ) КАК Месяц,
	|	МИНИМУМ(РабочиеМеста.Период) КАК Период
	|ПОМЕСТИТЬ ВТНачалоРаботыСотрудников
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.Сотрудник,
	|	НАЧАЛОПЕРИОДА(РабочиеМеста.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОплатыПраздников.ГрафикРаботы КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА БлижайшиеДатыСлева.ДатаСлева ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(НачалоРаботыСотрудников.Период, ДатыОплатыПраздников.Месяц)
	|		ИНАЧЕ ДатыОплатыПраздников.Дата
	|	КОНЕЦ КАК Период,
	|	НачисленияСотрудников.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТДатыИзмененияСпособаОплатыПраздников
	|ИЗ
	|	ВТДатыОплатыПраздников КАК ДатыОплатыПраздников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБлижайшиеДатыСлева КАК БлижайшиеДатыСлева
	|		ПО (БлижайшиеДатыСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (БлижайшиеДатыСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (БлижайшиеДатыСлева.Дата = ДатыОплатыПраздников.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачалоРаботыСотрудников КАК НачалоРаботыСотрудников
	|		ПО (НачалоРаботыСотрудников.Сотрудник = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (НачалоРаботыСотрудников.Месяц = ДатыОплатыПраздников.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОплатыПраздников КАК ДатыОплатыПраздниковСлева
	|		ПО (ДатыОплатыПраздниковСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (ДатыОплатыПраздниковСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (ДатыОплатыПраздниковСлева.Дата = БлижайшиеДатыСлева.ДатаСлева)
	|			И (ДатыОплатыПраздниковСлева.ВремяВЧасах = ДатыОплатыПраздников.ВремяВЧасах)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (НачисленияСотрудников.Начисление.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете))
	|			И (НачисленияСотрудников.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
	|ГДЕ
	|	ДатыОплатыПраздниковСлева.Дата ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачалоРаботыСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТДатыИзмененияСпособаОплатыПраздников");
	
КонецПроцедуры

// Функция проверяет, есть ли в таблице показатели, значения которых необходимо заполнить (по данным учета).
// Такой необходимости может не возникнуть, если все показатели вводятся непосредственно при расчете,
// или их значения уже определены в коллекции известных показателей.
//
Функция ТребуетсяЗаполнениеЗначенийПоказателей(ТаблицаНачислений, ИзвестныеЗначенияПоказателей)
	
	Если ИзвестныеЗначенияПоказателей = Неопределено Тогда
		// Если значения известных показателей не определены, достаточно проверить только начисления (без учета сотрудников).
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНачислений, "Начисление", Истина);
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
		|		ПО (ПоказателиНачислений.Ссылка В (&ВидыРасчета))
		|			И (Показатели.Ссылка = ПоказателиНачислений.Показатель)
		|			И (Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете))
		|			И (НЕ Показатели.Ссылка В (&ПоказателиОпределяемыеПриРасчете))";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
		Запрос.УстановитьПараметр("ПоказателиОпределяемыеПриРасчете", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОпределяемыеПриРасчете());
		РезультатЗапроса = Запрос.Выполнить();
		// Проверяем наличие показателей, которые вводятся не при расчете.
		// Если нет, то вообще не выполняем заполнение значений.
		Возврат Не РезультатЗапроса.Пустой();
	КонецЕсли;
	
	// Если значения известных показателей определены, то проверяем наличие показателей, 
	// требующих заполнение значений, с точностью до сотрудника.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиНачисления.Сотрудник,
	|	СотрудникиНачисления.Начисление
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&СотрудникиНачисления КАК СотрудникиНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзвестныеЗначения.Сотрудник,
	|	ИзвестныеЗначения.Показатель
	|ПОМЕСТИТЬ ВТИзвестныеЗначенияПоказателей
	|ИЗ
	|	&ИзвестныеЗначения КАК ИзвестныеЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
	|		ПО (Начисления.Начисление = ПоказателиНачислений.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|		ПО (Показатели.Ссылка = ПоказателиНачислений.Показатель)
	|			И (Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете))
	|			И (НЕ Показатели.Ссылка В (&ПоказателиОпределяемыеПриРасчете))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзвестныеЗначенияПоказателей КАК ИзвестныеЗначения
	|		ПО (ИзвестныеЗначения.Сотрудник = Начисления.Сотрудник)
	|			И (ИзвестныеЗначения.Показатель = ПоказателиНачислений.Показатель)
	|ГДЕ
	|	ИзвестныеЗначения.Показатель ЕСТЬ NULL ";
	
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, СотрудникиНачисления);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СотрудникиНачисления", СотрудникиНачисления);
	Запрос.УстановитьПараметр("ИзвестныеЗначения", ИзвестныеЗначенияПоказателей);
	Запрос.УстановитьПараметр("ПоказателиОпределяемыеПриРасчете", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОпределяемыеПриРасчете());
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем наличие показателей, которые требуется заполнить.
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Заполняет ссылки на показатели в строках, а также представление и точность показателей.
//
Процедура ЗаполнитьСведенияОПоказателях(ТаблицаНачислений)
	
	ЕстьПолеВидВремени = ТаблицаНачислений.Колонки.Найти("ВидВремени") <> Неопределено;
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		// Заполняем поле ВидВремени для корректного отображения полей времени.
		Если ЕстьПолеВидВремени Тогда 
			СтрокаНачислений.ВидВремени = Неопределено;
			Если ВидРасчетаИнфо.Свойство("ВидВремени") Тогда
				СтрокаНачислений.ВидВремени = ВидРасчетаИнфо.ВидВремени;
			КонецЕсли;
		КонецЕсли;
		СтрокаНачислений.ИспользованиеПериода = ВидРасчетаИнфо.ИспользованиеПериода;
		// Заполняем сведения о показателях.
		НомерПоказателя = 1;
		Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если Не СтрокаПоказателя.ИспользоватьПриРасчете Тогда
				Продолжить;
			КонецЕсли;
			ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
			Если Не ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачислений["Показатель" + НомерПоказателя] = СтрокаПоказателя.Показатель;
			Если ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "ТочностьПоказателя" + НомерПоказателя) Тогда
				СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
			КонецЕсли;
			Если ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "ПредставлениеПоказателя" + НомерПоказателя) Тогда
				СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЕсли;
			НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения известных показателей в коллекции начислений.
//
Процедура ЗаполнитьИзвестныеЗначенияПоказателей(ТаблицаНачислений, ИзвестныеЗначенияПоказателей)
	
	Если ИзвестныеЗначенияПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателей Из ИзвестныеЗначенияПоказателей Цикл
		СтрокиПоСотруднику = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сотрудник", СтрокаПоказателей.Сотрудник));
		Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
			Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
				Показатель = СтрокаПоСотруднику["Показатель" + НомерПоказателя];
				Если Показатель = СтрокаПоказателей.Показатель Тогда
					СтрокаПоСотруднику["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
					СтрокаПоСотруднику["КомандаРасшифровки" + НомерПоказателя] = СтрокаПоказателей.КомандаРасшифровки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Функция предназначена для получения значений показателей 
// начислений сотрудников.
//
// Параметры:
//	ИсходныеДанные - таблица значений с колонками:
//		- Сотрудник,
//		- Начисление,
//		- ДатаНачала,
//		- ДатаОкончания
//	ИзвестныеЗначенияПоказателей - необязательный, таблица значений, 
//		значения показателей, которые не нужно выявлять 
//		(они уже известны потребителю, 
//			например, показатель «Средний заработок» в документе «Больничный лист»).
//
// Параметры:
//	Таблица значений, аналогичная исходной, 
//	добавляются колонки с показателями начислений, их значениями, сопутствующими сведениями.
//
Функция ЗначенияПоказателейНачислений(ИсходныеДанные, ИзвестныеЗначенияПоказателей = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Создаем таблицу значений с типизированными колонками и заполняем ее.
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИсходныеДанные, СотрудникиНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление,
		// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
		// Ошибка конфигурации, №1498
		// {
		//|	СотрудникиНачисления.ДокументОснование,
		// }
		// 4D
		|	СотрудникиНачисления.ДатаНачала,
		|	СотрудникиНачисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиНачисления
		|ИЗ
		|	&ИсходныеДанные КАК СотрудникиНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиНачисления КАК Сотрудники";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", СотрудникиНачисления);
	Запрос.Выполнить();
	
	// Определяем минимальную и максимальную даты для оптимизации последующих запросов.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Сотрудники.ДатаНачала) КАК МинимальнаяДата,
		|	МАКСИМУМ(Сотрудники.ДатаОкончания) КАК МаксимальнаяДата
		|ИЗ
		|	ВТСотрудникиПериоды КАК Сотрудники";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	Если Выборка.Следующий() Тогда
		МинимальнаяДата = Выборка.МинимальнаяДата;
		МаксимальнаяДата = Выборка.МаксимальнаяДата;
	КонецЕсли;
	
	// Получаем ВТРабочиеМестаСотрудников для определения организации и подразделения на конкретные даты.
	ПараметрыВТРабочиеМеста = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		"ВТСотрудникиПериоды", "Сотрудник",	"ДатаНачала", "ДатаОкончания");
	ПараметрыВТРабочиеМеста.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросВТРабочиеМеста = КадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(Истина, "ВТРабочиеМестаСотрудников", ПараметрыВТРабочиеМеста);
	ЗапросВТРабочиеМеста.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВТРабочиеМеста.Выполнить();
	
	// Получаем "кадровый" график работы.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ГрафикРаботы, СуммированныйУчетРабочегоВремени, Организация, Подразделение");
	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	// Пересоздаем таблицу ВТРабочиеМестаСотрудников, чтобы включить в нее еще и неработающих сотрудников.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТПрежняяТаблицаРабочиеМестаСотрудников
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМестаРаботающихСотрудников.Период,
		|	РабочиеМестаРаботающихСотрудников.Сотрудник,
		|	РабочиеМестаРаботающихСотрудников.Организация,
		|	РабочиеМестаРаботающихСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаРаботающихСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеМестаНеработающихСотрудников.Период,
		|	РабочиеМестаНеработающихСотрудников.Сотрудник,
		|	РабочиеМестаНеработающихСотрудников.Организация,
		|	РабочиеМестаНеработающихСотрудников.Подразделение
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК РабочиеМестаНеработающихСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО (РабочиеМестаСотрудников.Сотрудник = РабочиеМестаНеработающихСотрудников.Сотрудник)
		|ГДЕ
		|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL ";
	Запрос.Выполнить();
	
	// Формируем ВТ с организацией для корректного выявления значений показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Сотрудник,
		|	МИНИМУМ(СотрудникиНачисления.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(СотрудникиНачисления.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО РабочиеМеста.Сотрудник = СотрудникиНачисления.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Сотрудник";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиОрганизации", "Сотрудник,Организация");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения");
	
	// Применение начислений
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Начисление,
		|	Сотрудники.ДатаНачала КАК ДатаНачала,
		|	Сотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиНачисления КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	// Организации и подразделения.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение,
		|	СотрудникиНачисления.ДатаНачала КАК ДатаНачала,
		|	СотрудникиНачисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОрганизацииПодразделения
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО РабочиеМеста.Сотрудник = СотрудникиНачисления.Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Организация"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Подразделение"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения");
		
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцыКадровыхДанных
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИндивидуальныеГрафики.Сотрудник КАК ГрафикРаботы,
		|	ИндивидуальныеГрафики.Месяц
		|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
		|ИЗ
		|	ВТМесяцыКадровыхДанных КАК ИндивидуальныеГрафики
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ГДЕ
		|				ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ИндивидуальныеГрафики.Сотрудник
		|				И ГрафикиРаботыПоВидамВремени.Месяц = ИндивидуальныеГрафики.Месяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.Период,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, КадровыеДанныеСотрудников.ГрафикРаботы) КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ИндивидуальныйГрафик.ГрафикРаботы ЕСТЬ НЕ NULL 
		|			ТОГДА ИндивидуальныйГрафик.ГрафикРаботы
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|				ИНАЧЕ ГрафикиРаботыСотрудников.Ссылка
		|			КОНЕЦ
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО (ГрафикиРаботыСотрудников.Ссылка = КадровыеДанныеСотрудников.ГрафикРаботы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныйГрафик
		|		ПО (ИндивидуальныйГрафик.ГрафикРаботы = КадровыеДанныеСотрудников.Сотрудник)
		|			И (ИндивидуальныйГрафик.Месяц = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.ДатаНачала,
		|	НачисленияЗаПериод.ДатаОкончания,
		|	НачисленияЗаПериод.Начисление,
		// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
		// Ошибка конфигурации, №1498
		// {
		//|	НачисленияЗаПериод.ДокументОснование,
		// }
		// 4D
		|	НАЧАЛОПЕРИОДА(НачисленияЗаПериод.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
		|	ГрафикиРаботы.ГрафикРаботы
		|ПОМЕСТИТЬ ВТИнтервалыОплатыПраздничныхДней
		|ИЗ
		|	ВТСотрудникиНачисления КАК НачисленияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = НачисленияЗаПериод.Начисление)
		|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботы КАК ГрафикиРаботы
		|		ПО НачисленияЗаПериод.Сотрудник = ГрафикиРаботы.Сотрудник
		|			И НачисленияЗаПериод.ДатаНачала = ГрафикиРаботы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	Интервалы.Начисление,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Интервалы.ГрафикРаботы
		|					И ГрафикиРаботыПоВидамВремени.Месяц = Интервалы.Месяц
		|					И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания
		|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Интервалы.ВидУчетаВремени
		|					И ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
		|					И ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение > 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах
		|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней
		|ИЗ
		|	ВТИнтервалыОплатыПраздничныхДней КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПроизвольнойФормулы.Ссылка КАК Начисление,
		|	ПоказателиПроизвольнойФормулы.Показатель,
		|	ПоказателиПроизвольнойФормулы.ЗапрашиватьПриВводе,
		|	ПоказателиПроизвольнойФормулы.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияПоказатели
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиПроизвольнойФормулы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО (СотрудникиНачисления.Начисление = ПоказателиПроизвольнойФормулы.Ссылка)
		|ГДЕ
		|	ПоказателиПроизвольнойФормулы.ИспользоватьПриРасчете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод
		|ПОМЕСТИТЬ ВТДатыКадровойИстории
		|ИЗ
		|	ВТСотрудникиНачисления КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО (КадроваяИсторияСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (КадроваяИсторияСотрудников.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала";
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Интервалы.Начисление,
		|	Интервалы.Начисление.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
		// Ошибка конфигурации, №1498
		// {	
		//|	Интервалы.ДокументОснование,
		// }
		// 4D
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.ЗапрашиватьПриВводе,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейСотрудников.Период) КАК ЗначенияПериодическихПоказателейСотрудниковПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейПодразделений.Период) КАК ЗначенияПериодическихПоказателейПодразделенийПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейОрганизаций.Период) КАК ЗначенияПериодическихПоказателейОрганизацийПериод
		|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
		|ИЗ
		|	ВТСотрудникиНачисления КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыКадровойИстории КАК ДатыКадровойИстории
		|		ПО (ДатыКадровойИстории.Сотрудник = Интервалы.Сотрудник)
		|			И (ДатыКадровойИстории.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО Интервалы.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И (ДатыКадровойИстории.Сотрудник = КадроваяИсторияСотрудников.Сотрудник)
		|			И (ДатыКадровойИстории.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО (ЗначенияПериодическихПоказателейСотрудников.Сотрудник = Интервалы.Сотрудник)
		// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
		// Ошибка конфигурации, №1498
		// {
		|			И (НЕ НачисленияПоказатели.ЗапрашиватьПриВводе)
		//|				ИЛИ ЗначенияПериодическихПоказателейСотрудников.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|			И (ВЫБОР
		|				КОГДА Интервалы.Начисление.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаОкончания
		|				ИНАЧЕ ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаНачала
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО (ЗначенияПериодическихПоказателейПодразделений.Подразделение = КадроваяИсторияСотрудников.Подразделение)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО (ЗначенияПериодическихПоказателейОрганизаций.Организация = КадроваяИсторияСотрудников.Организация)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Период <= Интервалы.ДатаНачала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Интервалы.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.Начисление.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		//|	Интервалы.ДокументОснование,
		// }
		// 4D
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.ЗапрашиватьПриВводе,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	Сотрудники.ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияРазовыхОрганизации.ПериодДействия,
		|	ЗначенияРазовыхОрганизации.Организация,
		|	ЗначенияРазовыхОрганизации.Показатель,
		|	ЗначенияРазовыхОрганизации.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияРазовыхОрганизации
		|		ПО Интервалы.Организация = ЗначенияРазовыхОрганизации.Организация
		|			И Интервалы.Месяц = ЗначенияРазовыхОрганизации.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхПодразделения.ПериодДействия,
		|	ЗначенияРазовыхПодразделения.Подразделение,
		|	ЗначенияРазовыхПодразделения.Показатель,
		|	ЗначенияРазовыхПодразделения.Организация,
		|	ЗначенияРазовыхПодразделения.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхПодразделения
		|		ПО Интервалы.Подразделение = ЗначенияРазовыхПодразделения.Подразделение
		|			И Интервалы.Месяц = ЗначенияРазовыхПодразделения.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхСотрудники.ПериодДействия,
		|	ЗначенияРазовыхСотрудники.Сотрудник,
		|	ЗначенияРазовыхСотрудники.Показатель,
		|	ЗначенияРазовыхСотрудники.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхСотрудники
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудники
		|		ПО Интервалы.Сотрудник = ЗначенияРазовыхСотрудники.Сотрудник
		|			И Интервалы.Месяц = ЗначенияРазовыхСотрудники.ПериодДействия";
		
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);	
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник КАК Сотрудник,
		|	Интервалы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Интервалы.Организация КАК Организация,
		|	Интервалы.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Интервалы.Месяц КАК Месяц,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания КАК ДатаОкончания,
		|	Интервалы.Начисление КАК Начисление,
		|	Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТИнтервалыОперативныхСотрудники
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиСотрудников
		|		ПО (ПоказателиСотрудников.Ссылка = Интервалы.Показатель)
		|			И (ПоказателиСотрудников.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|			И (ПоказателиСотрудников.СпособВводаЗначений В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям), ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник КАК Сотрудник,
		|	Интервалы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ЗначенияОперативныхСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПоФизическомуЛицу,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания КАК ДатаОкончания,
		|	Интервалы.Начисление КАК Начисление,
		|	Интервалы.Показатель КАК Показатель,
		|	СУММА(ЗначенияОперативныхСотрудники.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудникиПоДням
		|ИЗ
		|	ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхСотрудники
		|		ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхСотрудники.Организация = Интервалы.ГоловнаяОрганизация)
		|			И (ЗначенияОперативныхСотрудники.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ЗначенияОперативныхСотрудники.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|			И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ЗначенияОперативныхСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.Показатель,
		|	ЗначенияОперативныхСотрудники.Организация,
		|	ЗначенияОперативныхСотрудники.ФизическоеЛицо,
		|	ЗначенияОперативныхСотрудники.Период КАК Месяц,
		|	ЗначенияОперативныхСотрудники.ЗначениеОборот КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудникиВЦеломЗаМесяц
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&МинимальнаяДата,
		|			&МаксимальнаяДата,
		|			Месяц,
		|			(ФизическоеЛицо, Показатель, Организация) В
		|				(ВЫБРАТЬ
		|					Интервалы.ФизическоеЛицо,
		|					Интервалы.Показатель,
		|					Интервалы.ГоловнаяОрганизация
		|				ИЗ
		|					ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|				ГДЕ
		|					Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативныхСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.ДатаНачала,
		|	ЗначенияОперативныхСотрудники.ДатаОкончания,
		|	ЗначенияОперативныхСотрудники.Начисление,
		|	ЗначенияОперативныхСотрудники.Показатель,
		|	СУММА(ЗначенияОперативныхСотрудники.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудники
		|ИЗ
		|	(ВЫБРАТЬ
		|		Интервалы.Сотрудник КАК Сотрудник,
		|		Интервалы.ДатаНачала КАК ДатаНачала,
		|		Интервалы.ДатаОкончания КАК ДатаОкончания,
		|		Интервалы.Начисление КАК Начисление,
		|		Интервалы.Показатель КАК Показатель,
		|		ЗначенияОперативныхСотрудники.Значение КАК Значение
		|	ИЗ
		|		ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудникиПоДням КАК ЗначенияОперативныхСотрудники
		|			ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|				И (ЗначенияОперативныхСотрудники.ГоловнаяОрганизация = Интервалы.ГоловнаяОрганизация)
		|				И (ЗначенияОперативныхСотрудники.ДатаНачала = Интервалы.ДатаНачала)
		|				И (ЗначенияОперативныхСотрудники.ДатаОкончания = Интервалы.ДатаОкончания)
		|				И (ЗначенияОперативныхСотрудники.Начисление = Интервалы.Начисление)
		|				И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|				И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|				И (ВЫБОР
		|					КОГДА ЗначенияОперативныхСотрудники.ПоФизическомуЛицу = ЛОЖЬ
		|						ТОГДА ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Интервалы.Сотрудник,
		|		Интервалы.ДатаНачала,
		|		Интервалы.ДатаОкончания,
		|		Интервалы.Начисление,
		|		Интервалы.Показатель,
		|		ЗначенияОперативныхСотрудники.Значение
		|	ИЗ
		|		ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудникиВЦеломЗаМесяц КАК ЗначенияОперативныхСотрудники
		|			ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|				И (ЗначенияОперативныхСотрудники.Организация = Интервалы.ГоловнаяОрганизация)
		|				И Интервалы.Месяц = ЗначенияОперативныхСотрудники.Месяц
		|				И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|				И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|				И (ВЫБОР
		|					КОГДА ЗначенияОперативныхСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|						ТОГДА ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)) КАК ЗначенияОперативныхСотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.ДатаНачала,
		|	ЗначенияОперативныхСотрудники.ДатаОкончания,
		|	ЗначенияОперативныхСотрудники.Начисление,
		|	ЗначенияОперативныхСотрудники.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.Сотрудник,
		|	ЗначенияОперативныхПодразделения.Подразделение,
		|	ЗначенияОперативныхПодразделения.Показатель,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	СУММА(ЗначенияОперативныхПодразделения.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиПодразделений
		|		ПО (ПоказателиПодразделений.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ЗначенияОперативныхПодразделения.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияОперативныхПодразделения.Показатель = ПоказателиПодразделений.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияОперативныхПодразделения.Подразделение,
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	ЗначенияОперативныхПодразделения.Показатель,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.ДатаНачала";
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
		// Ошибка конфигурации, №1498
		// {
		//|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	ВЫБОР
		|		КОГДА НачисленияПоказатели.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗначениеПоказателяВводитсяНепосредственноПриРасчете,
		|	Начисления.КоличествоПоказателейИспользуемыхПриРасчете КАК КоличествоПоказателей,
		|	ВЫБОР
		|		КОГДА Начисления.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА Начисления.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
		|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах ЕСТЬ НЕ NULL 
		|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах,
		|	Начисления.ВидВремени,
		|	Начисления.ИспользованиеПериода,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейСотрудников.Значение
		|			КОГДА НЕ ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейПодразделений.Значение
		|			КОГДА НЕ ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейОрганизаций.Значение
		|			КОГДА НЕ ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхСотрудники.Значение
		|			КОГДА НЕ ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхПодразделения.Значение
		|			КОГДА НЕ ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхОрганизации.Значение
		|			КОГДА НЕ ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияОперативныхСотрудники.Значение
		|			КОГДА НЕ ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияОперативныхПодразделения.Значение
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Значение,
		|	ВЫБОР
		|		КОГДА ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗначениеОпределено,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания,
		|	НачисленияПоказатели.НомерСтроки
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ПО Интервалы.Подразделение = Подразделения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|			ПО (ГрафикиРаботыСотрудников.Ссылка = КадровыеДанныеСотрудников.ГрафикРаботы)
		|		ПО (КадровыеДанныеСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (КадровыеДанныеСотрудников.Период = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Интервалы.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОплатыПраздничныхДней КАК СпособыОплатыПраздничныхДней
		|		ПО (СпособыОплатыПраздничныхДней.Сотрудник = Интервалы.Сотрудник)
		|			И (СпособыОплатыПраздничныхДней.ДатаНачала = Интервалы.ДатаНачала)
		|			И (СпособыОплатыПраздничныхДней.Начисление = Интервалы.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПочасоваяОплатаТруда КАК ПочасоваяОплатаТруда
		|		ПО (ПочасоваяОплатаТруда.Сотрудник = Интервалы.Сотрудник)
		|			И (ПочасоваяОплатаТруда.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО Интервалы.Сотрудник = ЗначенияПериодическихПоказателейСотрудников.Сотрудник
		|			И (НЕ Интервалы.ЗапрашиватьПриВводе)
		//|				ИЛИ Интервалы.ДокументОснование = ЗначенияПериодическихПоказателейСотрудников.ДокументОснование)
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейСотрудников.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейСотрудниковПериод = ЗначенияПериодическихПоказателейСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО Интервалы.Подразделение = ЗначенияПериодическихПоказателейПодразделений.Подразделение
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейПодразделений.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейПодразделенийПериод = ЗначенияПериодическихПоказателейПодразделений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО Интервалы.Организация = ЗначенияПериодическихПоказателейОрганизаций.Организация
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейОрганизаций.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейОрганизацийПериод = ЗначенияПериодическихПоказателейОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхСотрудники КАК ЗначенияРазовыхСотрудники
		|		ПО (ЗначенияРазовыхСотрудники.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхСотрудники.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияРазовыхСотрудники.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПодразделения КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхОрганизации КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудники КАК ЗначенияОперативныхСотрудники
		|		ПО (ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияОперативныхСотрудники.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхСотрудники.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхСотрудники.Начисление = Интервалы.Начисление)
		|			И (ЗначенияОперативныхСотрудники.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПодразделения КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияОперативныхПодразделения.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхПодразделения.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Начисление = Интервалы.Начисление)
		|			И (ЗначенияОперативныхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Организация,
		|	Интервалы.Сотрудник,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		//|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	ВЫБОР
		|		КОГДА НачисленияПоказатели.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Начисления.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА Начисления.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
		|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах ЕСТЬ НЕ NULL 
		|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Начисления.ВидВремени,
		|	Начисления.ИспользованиеПериода,
		|	ВЫБОР
		|		КОГДА ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	НачисленияПоказатели.НомерСтроки,
		|	Начисления.КоличествоПоказателейИспользуемыхПриРасчете,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания
		|
		|УПОРЯДОЧИТЬ ПО
		|	Интервалы.Сотрудник,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания,
		|	Интервалы.Начисление,
		//|	Интервалы.ДокументОснование,
		// }
		// 4D
		|	Интервалы.ДатаНачала,
		|	Интервалы.Подразделение,
		|	НачисленияПоказатели.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник");
	ЗначенияПоказателей.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ЗначенияПоказателей.Колонки.Добавить("ДатаНачала");
	ЗначенияПоказателей.Колонки.Добавить("ДатаОкончания");
	ЗначенияПоказателей.Колонки.Добавить("Начисление");
	// 4D:ERP для Беларуси, Яна, 30.05.2017 9:30:25 
	// Ошибка конфигурации, №1498
	// {
	//ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	// }
	// 4D
	ЗначенияПоказателей.Колонки.Добавить("ВидВремени");
	ЗначенияПоказателей.Колонки.Добавить("ИспользованиеПериода");
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ЗначенияПоказателей.Колонки.Добавить("Показатель" + Счетчик);
		ЗначенияПоказателей.Колонки.Добавить("Значение" + Счетчик);
		ЗначенияПоказателей.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;
	
	// Таблица показателей, которые не удалось заполнить по данным подсистемы, 
	// их значения попытаемся заполнить внешними подсистемами.
	ДополнительныеПоказатели = Новый ТаблицаЗначений;
	ДополнительныеПоказатели.Колонки.Добавить("Сотрудник");
	ДополнительныеПоказатели.Колонки.Добавить("Организация");
	ДополнительныеПоказатели.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДополнительныеПоказатели.Колонки.Добавить("ДатаНачала");
	ДополнительныеПоказатели.Колонки.Добавить("ДатаОкончания");
	ДополнительныеПоказатели.Колонки.Добавить("Начисление");
	ДополнительныеПоказатели.Колонки.Добавить("Показатель");
	ДополнительныеПоказатели.Колонки.Добавить("Значение");
	ДополнительныеПоказатели.Колонки.Добавить("ВремяВЧасах");
	ДополнительныеПоказатели.Колонки.Добавить("КомандаРасшифровки");
	ДополнительныеПоказатели.Колонки.Добавить("ЗначениеОпределено", Новый ОписаниеТипов("Булево"));
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗначенияПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(Выборка.КоличествоПоказателей) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока["Показатель1"] = Выборка.Показатель;
		// Если значение уже известно из потребителя, то подставим его "как есть".
		ДанныеЗначения = ИзвестноеЗначениеПоказателя(ИзвестныеЗначенияПоказателей, Выборка.Сотрудник, Выборка.Показатель);
		Если ДанныеЗначения <> Неопределено Тогда
			НоваяСтрока["Значение1"] = ДанныеЗначения.Значение;
			НоваяСтрока["КомандаРасшифровки1"] = ДанныеЗначения.КомандаРасшифровки;
		Иначе
			НоваяСтрока["Значение1"] = Выборка.Значение;
			Если Не Выборка.ЗначениеОпределено И Не Выборка.ЗначениеПоказателяВводитсяНепосредственноПриРасчете Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеПоказатели.Добавить(), Выборка);
			КонецЕсли;
		КонецЕсли;
		Для НомерПоказателя = 2 По Выборка.КоличествоПоказателей Цикл
			Выборка.Следующий();
			НоваяСтрока["Показатель" + НомерПоказателя] = Выборка.Показатель;
			ДанныеЗначения = ИзвестноеЗначениеПоказателя(ИзвестныеЗначенияПоказателей, Выборка.Сотрудник, Выборка.Показатель);
			Если ДанныеЗначения <> Неопределено Тогда
				НоваяСтрока["Значение" + НомерПоказателя] = ДанныеЗначения.Значение;
				НоваяСтрока["КомандаРасшифровки" + НомерПоказателя] = ДанныеЗначения.КомандаРасшифровки;
			Иначе
				НоваяСтрока["Значение" + НомерПоказателя] = Выборка.Значение;
				Если Не Выборка.ЗначениеОпределено И Не Выборка.ЗначениеПоказателяВводитсяНепосредственноПриРасчете Тогда
					ЗаполнитьЗначенияСвойств(ДополнительныеПоказатели.Добавить(), Выборка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполняем значения известных подсистеме предопределенных показателей.
	ЗаполнитьЗначенияПредопределенныхПоказателей(ДополнительныеПоказатели);
	
	ЗарплатаКадрыРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	УчетСреднегоЗаработка.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	// Заполняем значения показателей других подсистем.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьЗначенияДополнительныхПоказателей(ДополнительныеПоказатели);
	
	ОтборНачислений = Новый Структура("Сотрудник, Подразделение, Начисление, ДатаНачала, ДатаОкончания");
	ЗначенияПоказателей.Индексы.Добавить("Сотрудник, Подразделение, Начисление, ДатаНачала, ДатаОкончания");	
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если Не СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОтборНачислений, СтрокаПоказателей);
		СтрокиНачислений = ЗначенияПоказателей.НайтиСтроки(ОтборНачислений);
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
				Если СтрокаНачислений["Показатель" + НомерПоказателя] = СтрокаПоказателей.Показатель Тогда
					СтрокаНачислений["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
					СтрокаНачислений["КомандаРасшифровки" + НомерПоказателя] = СтрокаПоказателей.КомандаРасшифровки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

// Создает временную таблицу ВТПочасоваяОплатаТруда с полями Сотрудник и УчетВремениВЧасах, 
// содержащую признак того, что оплата труда сотрудника на заданную дату осуществляется по часам.
//
// Параметры:
// - МенеджерВременныхТаблиц - должен содержать таблицу с полями Сотрудник и ДатаНачала.
// - ИмяВТСотрудникиПериоды - имя временной таблицы с сотрудниками и датами, по умолчанию - ВТСотрудникиПериоды.
// - ИмяВТПлановыеНачисления - имя временной таблицы "СрезИДвижения", 
// содержащей изменения плановых начислений, аналогично, если не указано, запрашивается по данным учета.
//
Процедура СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = Неопределено, ИмяВТПлановыеНачисления = Неопределено) Экспорт
	
	// Оплата труда сотрудника осуществляется по часам, 
	// если хотя бы одно из его плановых начислений с зачетом нормы времени рассчитывается по часам.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ПлановыеНачисления.Начисление,
		|	МАКСИМУМ(ПлановыеНачисления.Период) КАК ПлановыеНачисленияПериод
		|ПОМЕСТИТЬ ВТПлановыеНачисленияПериод
		|ИЗ
		|	ВТИнтервалы КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПлановыеНачисления.Период <= СотрудникиПериоды.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ПлановыеНачисления.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисления.Начисление ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчетВремениВЧасах
		|ПОМЕСТИТЬ ВТПочасоваяОплатаТруда
		|ИЗ
		|	ВТИнтервалы КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПлановыеНачисления.Начисление.ЗачетНормыВремени = ИСТИНА)
		|			И (ПлановыеНачисления.Начисление.УчетВремениВЧасах = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияПериод КАК ПериодыПлановыхНачислений
		|		ПО (ПериодыПлановыхНачислений.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПериодыПлановыхНачислений.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (ПлановыеНачисления.Начисление = ПериодыПлановыхНачислений.Начисление)
		|			И (ПлановыеНачисления.Период = ПериодыПлановыхНачислений.ПлановыеНачисленияПериод)";
	
	Если ИмяВТСотрудникиПериоды <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИнтервалы", ИмяВТСотрудникиПериоды);
	Иначе
		ИмяВТСотрудникиПериоды = "ВТИнтервалы";
	КонецЕсли;
	Если ИмяВТПлановыеНачисления <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСрезПоследних", ИмяВТПлановыеНачисления);
	Иначе
		// Если имя ВТ не определено, значит нужно запросить соответствующие данные из учета.
		// Для среза плановых начислений необходимо поле Период.
		ТекстЗапросаВТСотрудники = 
			"ВЫБРАТЬ
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ДатаНачала КАК Период
			|ПОМЕСТИТЬ ВТИзмеренияДаты
			|ИЗ
			|	ВТИнтервалы КАК СотрудникиПериоды";
		ТекстЗапросаВТСотрудники = СтрЗаменить(ТекстЗапросаВТСотрудники, "ВТИнтервалы", ИмяВТСотрудникиПериоды);
		Запрос = Новый Запрос(ТекстЗапросаВТСотрудники);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		// Получаем срез плановых начислений.
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты", "Сотрудник");
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИзвестноеЗначениеПоказателя(ЗначенияПоказателей, Сотрудник, Показатель)
	
	Если ЗначенияПоказателей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзвестныеЗначения = ЗначенияПоказателей.НайтиСтроки(Новый Структура("Сотрудник, Показатель", Сотрудник, Показатель));
	Если ИзвестныеЗначения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПоказателя = Новый Структура("Значение, КомандаРасшифровки");
	ЗаполнитьЗначенияСвойств(ЗначениеПоказателя, ИзвестныеЗначения[0]);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение значений специализированных показателей.

// Процедура предназначена для заполнения значений показателей, 
// имеющих нетривиальный и/или предопределенный алгоритм выявления значений.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПредопределенныхПоказателей(ДополнительныеПоказатели)
	
	ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ДополнительныеПоказатели);
	
	// 4D:ERP для Беларуси, Яна, 20.06.2017 12:02:11 
	// Документ "Отпуск по уходу за ребенком", № 14900,15145,14877   
	// {
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособиеНаВичИнфицРебенка(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3Лет(ДополнительныеПоказатели);
	// }
	// 4D
			
	ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ДополнительныеПоказатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьЗначенияПоказателяОкладНадбавкаЗаКлассныйЧин(ДополнительныеПоказатели);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ЗаполнитьЗначенияПоказателяОкладЗаВоинскоеСпециальноеЗвание(ДополнительныеПоказатели);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗаполнитьЗначенияПоказателейЭффективностиСотрудников(ДополнительныеПоказатели);
	КонецЕсли;	
	
КонецПроцедуры

// Вычисляет значение показателя «Доля неполного рабочего времени».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ДополнительныеПоказатели)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");

	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = Показатель 
			И Не СтрокаПоказателей.ЗначениеОпределено Тогда
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ДоляНеполногоРабочегоВремени");

	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК ЗначениеПоказателя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				
	Выборка=Запрос.Выполнить().Выбрать();
				
	ОтборСтрок = Новый Структура("Сотрудник, ДатаНачала, ЗначениеОпределено, Показатель");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	ОтборСтрок.Вставить("Показатель", Показатель);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателя = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателя Из СтрокиПоказателя Цикл 		
			СтрокаПоказателя.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателя.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры	

// Вычисляет значение показателя «Оклад тарифной группы».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ДополнительныеПоказатели)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы");

	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = Показатель 
			И Не СтрокаПоказателей.ЗначениеОпределено Тогда
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ТарифнаяСетка");

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТКадровыеДанныеСотрудников","Период,ТарифнаяСетка");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
	
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ЗначенияБазовыхТарифов.Тариф, 0) КАК ЗначениеПоказателя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО КадровыеДанныеСотрудников.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка
		|			И КадровыеДанныеСотрудников.Период = ЗначенияБазовыхТарифов.Период";
				
	Выборка=Запрос.Выполнить().Выбрать();
				
	ОтборСтрок = Новый Структура("Сотрудник, ДатаНачала, ЗначениеОпределено, Показатель");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	ОтборСтрок.Вставить("Показатель", Показатель);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателя = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателя Из СтрокиПоказателя Цикл 		
			СтрокаПоказателя.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателя.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры	

// Вычисляет значения показателей «Стоимость часа» и «Стоимость дня» в соответствии 
// с настройками порядка пересчета.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ДополнительныеПоказатели) Экспорт 
	
	// Вычисляемые показатели
	СтоимостьЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	СтоимостьДняПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	ВычисляемыеПоказатели = Новый Массив;
	ВычисляемыеПоказатели.Добавить(СтоимостьЧасаПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняЧасаПоказатель);
	
	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	СтрокиПоИдентификатору = Новый Соответствие;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		Если ВычисляемыеПоказатели.Найти(СтрокаПоказателей.Показатель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаПоказателей);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаНачала,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТНормыВремениГрафиковКалендарей(МенеджерВременныхТаблиц);
	
	РасчетЗарплатыРасширенный.СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц);
	РасчетЗарплатыРасширенный.СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц);
	
	УстановитьПривилегированныйРежим(Истина);
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Ложь, "ОсновноеНачисление,ДоляНеполногоРабочегоВремени");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|		ИНАЧЕ ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.Значение, 0) КАК ЗначениеПоказателя,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряМесяц, 0) КАК НормаДнейКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряМесяц, 0) КАК НормаЧасовКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряГод, 0) КАК НормаДнейКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряГод, 0) КАК НормаЧасовКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейГрафикаМесяц, 0) КАК НормаДнейГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовГрафикаМесяц, 0) КАК НормаЧасовГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейПолногоГрафикаМесяц, 0) КАК НормаДнейПолногоГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовПолногоГрафикаМесяц, 0) КАК НормаЧасовПолногоГрафикаМесяц,
		|	ДанныеГрафиков.ГрафикРаботы.ГрафикПолногоРабочегоВремени КАК ГрафикПолногоВремени,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ) КАК УчетВремениВЧасах,
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени,
		|	МАКСИМУМ(ПоказателиДоляНеполногоРабочегоВремени.Показатель) КАК ПоказательДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиков КАК ДанныеГрафиков
		|		ПО (ДанныеГрафиков.Сотрудник = ИсходныеДанные.Сотрудник)
		|			И ИсходныеДанные.ДатаНачала = ДанныеГрафиков.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени
		|		ПО ИсходныеДанные.Сотрудник = ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = ПорядокРасчетаСтоимостиЕдиницыВремени.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавокСотрудниковСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок
		|		ПО ИсходныеДанные.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = ЗначенияСовокупныхТарифныхСтавок.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиДоляНеполногоРабочегоВремени
		|		ПО (КадровыеДанныеСотрудников.ОсновноеНачисление = ПоказателиДоляНеполногоРабочегоВремени.Ссылка)
		|			И (ПоказателиДоляНеполногоРабочегоВремени.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени))
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|		ИНАЧЕ ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.Значение, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряГод, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряГод, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейПолногоГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовПолногоГрафикаМесяц, 0),
		|	ДанныеГрафиков.ГрафикРаботы.ГрафикПолногоРабочегоВремени,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ),
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени";

	Выборка = Запрос.Выполнить().Выбрать();
	
	// 1. Получаем значения основного показателя для указанных сотрудников.
	// 2. Для сотрудников, у которых основным показателем является 
	//	- часовая ставка 
	//		* для стоимости часа - не пересчитываем
	//		* для стоимости дня - пересчитываем по соотношению часов к дням
	//	- дневная ставка
	//		* для стоимости часа - пересчитываем по соотношению дней к часам
	//		* для стоимости дня - не пересчитываем
	//	- месячная ставка (оклад)
	//		* для стоимости часа - пересчитываем на основании данных о количестве часов в месяце
	//		* для стоимости дня - пересчитываем на основании данных о количестве дней в месяце.
	
	ПорядокРасчетаПоУмолчанию = НастройкиРасчетаЗарплаты().ПорядокРасчетаСтоимостиЕдиницыВремени;
	
	Пока Выборка.Следующий() Цикл
		СтрокаСотрудника = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ПорядокРасчета = ?(ЗначениеЗаполнено(Выборка.ПорядокРасчета), Выборка.ПорядокРасчета, ПорядокРасчетаПоУмолчанию);
		Значение = Неопределено;
		Точность = 0;
		// Требуется рассчитать:
		// - стоимость часа
		Если СтрокаСотрудника.Показатель = СтоимостьЧасаПоказатель 
			Или СтрокаСотрудника.Показатель = СтоимостьДняЧасаПоказатель И СтрокаСотрудника.ВремяВЧасах = Истина Тогда
			Точность = 3;
			// * Если показатель сотрудника - часовая ставка, значение не пересчитываем.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				Значение = Выборка.ЗначениеПоказателя;
			КонецЕсли;
			// * Если показатель сотрудника - дневная ставка, пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц * Выборка.НормаДнейГрафикаМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц * Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * Выборка.НормаДнейКалендаряГод;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
						Если Выборка.УчетВремениВЧасах Тогда
							Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
							КонецЕсли;
						Иначе 
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
							ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) И Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					Иначе 
						Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) Тогда
								Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаЧасовГрафикаМесяц;
							Иначе
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * 12;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// - стоимость дня
		Если СтрокаСотрудника.Показатель = СтоимостьДняПоказатель
			Или СтрокаСотрудника.Показатель = СтоимостьДняЧасаПоказатель И СтрокаСотрудника.ВремяВЧасах = Ложь Тогда
			Точность = 2;
			// * Если показатель сотрудника - часовая ставка, пересчитываем в дневную.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряМесяц / Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряГод / Выборка.НормаДнейКалендаряГод;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// * Если показатель сотрудника - дневная ставка, значение не пересчитываем.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				Значение = Выборка.ЗначениеПоказателя;
			КонецЕсли;
			// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
						Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 И Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
							Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц 
								/ Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
						КонецЕсли;
					Иначе 
						Если Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) Тогда
								Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейГрафикаМесяц;
							Иначе
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаДнейКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаДнейКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряГод * 12;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если удалось рассчитать значение - заполняем.
		Если Значение <> Неопределено Тогда
			СтрокаСотрудника.Значение = Окр(Значение, Точность);
			СтрокаСотрудника.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значение показателя «Размер пособия по уходу за ребенком до трех лет».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ДополнительныеПоказатели)
	
	РазмерПособияДоТрехЛет = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособияДоТрехЛет 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛет
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПоУходуЗаРебенкомДоТрехЛет);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособияДоТрехЛет); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 15.06.2017 10:56:11 
// Документ "Отпуск по уходу за ребенком", № 14900,15145,14877  
// {
Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка(ДополнительныеПоказатели)
	
	РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ(ДополнительныеПоказатели)
	
	РазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка50ПроцентовБПМ","<>",0);		
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"),ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка50ПроцентовБПМ
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка50ПроцентовБПМ);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособияПоУходуЗаРебенкомДоТрехЛет50ПроцентовБПМ); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида(ДополнительныеПоказатели)
	
	РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаРебенкаДо3ЛетНаРебенкаИнвалида);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособияПоУходуЗаРебенкомДоТрехЛетНаРебенкаИнвалида); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособиеНаВичИнфицРебенка(ДополнительныеПоказатели) 
	
	РазмерПособиеНаВичИнфицРебенка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПособиеНаВичИнфицРебенка");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособиеНаВичИнфицРебенка 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаВичИнфицРебенка","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаВичИнфицРебенка
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаВичИнфицРебенка);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособиеНаВичИнфицРебенка); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида(ДополнительныеПоказатели)
	
	РазмерПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида(ДополнительныеПоказатели)
	
	РазмерПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида(ДополнительныеПоказатели)
	
	РазмерПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателяРазмерПособиеНаРебенкаСтарше3Лет(ДополнительныеПоказатели)
	
	РазмерПособиеНаРебенкаСтарше3Лет = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПособиеНаРебенкаСтарше3Лет");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособиеНаРебенкаСтарше3Лет 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
    ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,"ПособиеНаРебенкаСтарше3Лет","<>",0);		
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПособиеНаРебенкаСтарше3Лет
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПособиеНаРебенкаСтарше3Лет);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособиеНаРебенкаСтарше3Лет); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры
// }
// 4D


// Вычисляет значение показателя «Районный коэффициент РФ».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяРайонныйКоэффициентРФ(ДополнительныеПоказатели)
	
	// Вычисляемые показатели
	РайонныйКоэффициентРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	
	Если Не ЗначениеЗаполнено(РайонныйКоэффициентРФ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РайонныйКоэффициентРФ 
			И Не СтрокаПоказателей.ЗначениеОпределено Тогда
			СтрокаПоказателей.Значение = РайонныйКоэффициентРФ(СтрокаПоказателей.Подразделение);
			СтрокаПоказателей.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значения показателей «Процент доплаты за работу в ночное время» и «Процент доплаты за работу в вечернее
// время».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ДополнительныеПоказатели)
	
	ПроцентДоплатыЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");

	Для Каждого СтрокаТаблицы Из ДополнительныеПоказатели Цикл
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаНочные) И СтрокаТаблицы.Показатель = ПроцентДоплатыЗаНочные Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаТаблицы.Организация);
			СтрокаТаблицы.Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВНочноеВремя;
			СтрокаТаблицы.ЗначениеОпределено = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаВечерние) И СтрокаТаблицы.Показатель = ПроцентДоплатыЗаВечерние Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаТаблицы.Организация);
			СтрокаТаблицы.Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВВечернееВремя;
			СтрокаТаблицы.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Запрашивает значения показателей удержаний. 
// Заполняет таблицу УдержанияЗаПериод строками удержаний и значениями показателей.
//
// Параметры:
//	МенеджерВременныхТаблиц - ожидается таблица ВТУдержанияЗаПериод с колонками
//		- ФизическоеЛицо,
//		- ДатаНачала,
//		- ДатаОкончания,
//		- Удержание,
//		- ДокументОснование,
//		- Используется
//	УдержанияЗаПериод - таблица значений.
//	Организация
//
Процедура ЗаполнитьЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, УдержанияЗаПериод, Организация, СозданныеВТ = Неопределено, РежимНачисления = Неопределено)
	
	Если СозданныеВТ = Неопределено Тогда
		СозданныеВТ = Новый Массив;
	КонецЕсли;
	
	Если УдержанияЗаПериод = Неопределено Тогда
		УдержанияЗаПериод = ПустаяТаблицаУдержанияДокумента();
	КонецЕсли;
	
	Если РежимНачисления <> Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		ОтобратьУдержанияВыполняемыеДоОкончательногоРасчета(МенеджерВременныхТаблиц, СозданныеВТ);
	КонецЕсли;
	
	// Получение значений показателей.
	ЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, Организация, СозданныеВТ);
	
	Если СозданныеВТ.Найти("ВТЗначенияПоказателейУдержаний") = Неопределено Тогда
		// Нет удержаний, показатели не запрашивались.
		Возврат;
	КонецЕсли;
	
	// Запрашиваем показатели удержаний предопределенным способом, чтобы корректно «склеивать» строки.
	ИсполнительныеЛисты.СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УдержанияЗаПериод.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(УдержанияЗаПериод.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	УдержанияЗаПериод.ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания,
		|	УдержанияЗаПериод.Удержание КАК Удержание,
		|	ВидыУдержаний.КатегорияУдержания КАК КатегорияУдержания,
		|	УдержанияЗаПериод.ПорядокУдержания КАК ПорядокУдержания,
		|	УдержанияЗаПериод.ДокументОснование КАК ДокументОснование,
		|	ВидыУдержаний.Рассчитывается КАК УдержаниеРассчитывается,
		|	УдержанияЗаПериод.Размер КАК Размер,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Получатель КАК Получатель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ПлатежныйАгент КАК ПлатежныйАгент,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ТарифПлатежногоАгента КАК ТарифПлатежногоАгента,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.СпособРасчета,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ВидБазы,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Процент,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Сумма,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Числитель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Знаменатель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Предел,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ПрожиточныйМинимум,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.УчитыватьБольничныеЛисты,
		|	УдержанияЗаПериод.Показатель,
		|	УдержанияЗаПериод.КоличествоПоказателей,
		|	УдержанияЗаПериод.НомерПоказателя КАК НомерПоказателя,
		|	УдержанияЗаПериод.Значение
		|ИЗ
		|	ВТЗначенияПоказателейУдержаний КАК УдержанияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыУдержаний
		|		ПО (ВидыУдержаний.Ссылка = УдержанияЗаПериод.Удержание)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУдержанийПоИсполнительнымДокументам КАК ПоказателиУдержанийПоИсполнительнымДокументам
		|		ПО (ПоказателиУдержанийПоИсполнительнымДокументам.ИсполнительныйДокумент = УдержанияЗаПериод.ДокументОснование)
		|			И (ПоказателиУдержанийПоИсполнительнымДокументам.Период = УдержанияЗаПериод.ДатаНачала)
		|			И (ПоказателиУдержанийПоИсполнительнымДокументам.КатегорияУдержания = ВидыУдержаний.КатегорияУдержания)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ПорядокУдержания,
		|	Удержание,
		|	ДокументОснование,
		|	УдержанияЗаПериод.ДатаНачала,
		|	НомерПоказателя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обходя результат, «склеиваем» заранее избыточно «разрезанные» строки, если в них одинаковые значения во всех
	// колонках.
	// Прежде всего составляем из нескольких отдельных строк (для каждого показателя) одну структуру, 
	// затем сверяем ее поля с значениями предыдущей строки.
	
	// Создаем структуру, идентичную строке таблицы значений.
	СтруктураСтроки = Новый Структура;
	Для Каждого Колонка Из УдержанияЗаПериод.Колонки Цикл
		СтруктураСтроки.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	ПредыдущаяСтрока = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		Если ЗначениеЗаполнено(Выборка.КоличествоПоказателей) Тогда
			ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Выборка.Показатель);
			ДанныеСтроки["Показатель1"] = Выборка.Показатель;
			ДанныеСтроки["Значение1"] = Выборка.Значение;
			ДанныеСтроки["ТочностьПоказателя1"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
			ДанныеСтроки["ПредставлениеПоказателя1"] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			Для НомерПоказателя = 2 По Выборка.КоличествоПоказателей Цикл
				Выборка.Следующий();
				ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Выборка.Показатель);
				ДанныеСтроки["Показатель" + НомерПоказателя] = Выборка.Показатель;
				ДанныеСтроки["Значение" + НомерПоказателя] = Выборка.Значение;
				ДанныеСтроки["ТочностьПоказателя" + НомерПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
				ДанныеСтроки["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЦикла;
		КонецЕсли;
		Если Не Выборка.УдержаниеРассчитывается Тогда 
			ДанныеСтроки["Результат"] = Выборка.Размер;
		КонецЕсли;
		
		ДобавлятьНовуюСтроку = Истина;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ДобавлятьНовуюСтроку = Ложь;
			ИгнорируемыеКолонки = ИгнорируемыеКолонкиСравненияПриЗаполненииУдержаний(Выборка.КатегорияУдержания);
			Для Каждого Колонка Из УдержанияЗаПериод.Колонки Цикл
				Если ИгнорируемыеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ПредыдущаяСтрока[Колонка.Имя] <> ДанныеСтроки[Колонка.Имя] 
					И (ЗначениеЗаполнено(ПредыдущаяСтрока[Колонка.Имя]) Или ЗначениеЗаполнено(ДанныеСтроки[Колонка.Имя])) Тогда
					ДобавлятьНовуюСтроку = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДобавлятьНовуюСтроку Тогда
			// добавляем новую строку
			НоваяСтрока = УдержанияЗаПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			ПредыдущаяСтрока = НоваяСтрока;
		Иначе
			// продлеваем предыдущую
			ПредыдущаяСтрока.ДатаОкончания = ДанныеСтроки.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтобратьУдержанияВыполняемыеДоОкончательногоРасчета(МенеджерВременныхТаблиц, СозданныеВТ)
	
	// Подключаем сведения об условиях удержаний.
	ИсполнительныеЛисты.СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ);
	
	// Исключаем удержания, выполняемые фиксированной суммой или определяемые в зависимости от прожиточного минимума.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТУдержанияЗаПериодБезОтбора
	|ИЗ
	|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУдержанияЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияЗаПериод.*
	|ПОМЕСТИТЬ ВТУдержанияЗаПериод
	|ИЗ
	|	ВТУдержанияЗаПериодБезОтбора КАК УдержанияЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиУдержанийПоИсполнительнымДокументам КАК ПоказателиУдержанийПоИсполнительнымДокументам
	|		ПО (УдержанияЗаПериод.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.ИсполнительныйДокумент = УдержанияЗаПериод.ДокументОснование)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.Период = УдержанияЗаПериод.ДатаНачала)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.КатегорияУдержания = УдержанияЗаПериод.Удержание.КатегорияУдержания)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой))
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.ВидБазы <> ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТУдержанияЗаПериодБезОтбора КАК УдержанияЗаПериод
	|ГДЕ
	|	УдержанияЗаПериод.Удержание.КатегорияУдержания <> ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция предназначена для получения значений показателей 
// удержаний сотрудников.
//
Процедура ЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, Организация, СозданныеВТ = Неопределено, ИзвестныеЗначенияПоказателей = Неопределено)
	
	Если СозданныеВТ = Неопределено Тогда
		СозданныеВТ = Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.Удержание,
		|	УдержанияЗаПериод.ДокументОснование,
		|	УдержанияЗаПериод.ДатаНачала КАК Период,
		|	ДОБАВИТЬКДАТЕ(УдержанияЗаПериод.ДатаНачала, ДЕНЬ, 1) КАК ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|ГДЕ
		|	УдержанияЗаПериод.Используется";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	СоздатьВТЗначенийПериодическихПоказателейФизическихЛиц(МенеджерВременныхТаблиц, СозданныеВТ);
	
	// «Общие» показатели (по подразделению и по организации) получаем по основному месту работы.
	// Для этого составляем массив физических лиц, получаем крайние даты периодов.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивФизическихЛиц = Новый Массив;
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	Пока Выборка.Следующий() Цикл
		МассивФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = Выборка.ДатаНачала;
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = Выборка.ДатаОкончания;
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, Выборка.ДатаНачала);
		ОкончаниеПериода = Макс(ОкончаниеПериода, Выборка.ДатаОкончания);
	КонецЦикла;
	
	Если МассивФизическихЛиц.Количество() = 0 Тогда
		// Нет ни одного физического лица.
		Возврат;
	КонецЕсли;
	
	// Обращаемся к кадровому учету для получения основных сотрудников физических лиц.
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, Истина, МассивФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСотрудники.Сотрудник
		|ИЗ
		|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники";
	
	МассивСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  		= Организация;
	ПараметрыПолученияРабочихМест.НачалоПериода		= НачалоПериода;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  = ОкончаниеПериода;
	ПараметрыПолученияРабочихМест.СписокСотрудников = МассивСотрудников;
		
	// Для основных сотрудников получаем данные рабочих мест.
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получаем организации и подразделения для выявления общих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.ФизическоеЛицо,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТШтатныеСотрудники
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатныеСотрудники.Период,
		|	ШтатныеСотрудники.Сотрудник,
		|	ШтатныеСотрудники.ФизическоеЛицо,
		|	ШтатныеСотрудники.Организация,
		|	ШтатныеСотрудники.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТШтатныеСотрудники КАК ШтатныеСотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДГПХ.ДатаНачала,
		|	ПериодыДГПХ.Сотрудник,
		|	ПериодыДГПХ.ФизическоеЛицо,
		|	ПериодыДГПХ.Организация,
		|	ПериодыДГПХ.Подразделение
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДГПХ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО (ФизическиеЛицаПериоды.ФизическоеЛицо = ПериодыДГПХ.ФизическоеЛицо)
		|			И ПериодыДГПХ.ДатаНачала <= ФизическиеЛицаПериоды.ДатаОкончания
		|			И ПериодыДГПХ.ДатаОкончания >= ФизическиеЛицаПериоды.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатныеСотрудники КАК ШтатныеСотрудники
		|		ПО (ШтатныеСотрудники.ФизическоеЛицо = ПериодыДГПХ.ФизическоеЛицо)
		|ГДЕ
		|	ШтатныеСотрудники.ФизическоеЛицо ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТШтатныеСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеСотрудники.ФизическоеЛицо,
		|	РабочиеМеста.Период,
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаФизическихЛиц
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|		ПО РабочиеМеста.Сотрудник = ОсновныеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение,
		|	ФизическиеЛицаПериоды.Период КАК ДатаНачала,
		|	ФизическиеЛицаПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОрганизацииПодразделения
		|ИЗ
		|	ВТРабочиеМестаФизическихЛиц КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО (ФизическиеЛицаПериоды.ФизическоеЛицо = РабочиеМеста.ФизическоеЛицо)";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Организация"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Подразделение"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения");
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПроизвольнойФормулы.Ссылка КАК Удержание,
		|	ПоказателиПроизвольнойФормулы.Показатель,
		|	ПоказателиПроизвольнойФормулы.НомерСтроки
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	ПланВидовРасчета.Удержания.Показатели КАК ПоказателиПроизвольнойФормулы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|		ПО (УдержанияЗаПериод.Удержание = ПоказателиПроизвольнойФормулы.Ссылка)
		|ГДЕ
		|	ПоказателиПроизвольнойФормулы.ИспользоватьПриРасчете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод
		|ПОМЕСТИТЬ ВТДатыКадровойИстории
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|		ПО УдержанияЗаПериод.ФизическоеЛицо = ОсновныеСотрудники.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО (КадроваяИсторияСотрудников.Сотрудник = ОсновныеСотрудники.Сотрудник)
		|			И (КадроваяИсторияСотрудников.Период <= УдержанияЗаПериод.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	ПоказателиУдержания.Показатель.НазначениеПоказателя КАК НазначениеПоказателя,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейСотрудников.Период) КАК ЗначенияПериодическихПоказателейСотрудниковПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейПодразделений.Период) КАК ЗначенияПериодическихПоказателейПодразделенийПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейОрганизаций.Период) КАК ЗначенияПериодическихПоказателейОрганизацийПериод
		|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
		|ИЗ
		|	ВТУдержанияЗаПериод КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыКадровойИстории КАК ДатыКадровойИстории
		|		ПО (ДатыКадровойИстории.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ДатыКадровойИстории.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаФизическихЛиц КАК КадроваяИсторияСотрудников
		|		ПО Интервалы.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
		|			И (ДатыКадровойИстории.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо)
		|			И (ДатыКадровойИстории.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиУдержания
		|		ПО (ПоказателиУдержания.Удержание = Интервалы.Удержание)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО (ЗначенияПериодическихПоказателейСотрудников.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияПериодическихПоказателейСотрудников.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО (ЗначенияПериодическихПоказателейПодразделений.Подразделение = КадроваяИсторияСотрудников.Подразделение)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО (ЗначенияПериодическихПоказателейОрганизаций.Организация = КадроваяИсторияСотрудников.Организация)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	ПоказателиУдержания.Показатель.НазначениеПоказателя";
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхФизическиеЛица.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхФизическиеЛица
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхФизическиеЛица
		|		ПО (ЗначенияРазовыхФизическиеЛица.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ЗначенияРазовыхФизическиеЛица.Сотрудник)
		|			И (Сотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхПодразделения.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхОрганизации.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхФизическиеЛица.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхФизическиеЛица
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхФизическиеЛица
		|		ПО (ЗначенияОперативныхФизическиеЛица.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ЗначенияОперативныхФизическиеЛица.Сотрудник)
		|			И (Сотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхПодразделения.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхОрганизации.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияОперативныхОрганизации
		|		ПО (ЗначенияОперативныхОрганизации.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхОрганизации.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации))
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель";
		
	Запрос.Выполнить();
		
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	ПоказателиУдержания.НомерСтроки КАК НомерПоказателя,
		|	Удержания.РеквизитДопУпорядочивания КАК ПорядокУдержания,
		|	Удержания.КоличествоПоказателейИспользуемыхПриРасчете КАК КоличествоПоказателей,
		|	ВЫБОР
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение)
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение)
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхФизическиеЛица.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхФизическиеЛица.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхПодразделения.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхПодразделения.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхОрганизации.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхФизическиеЛица.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхФизическиеЛица.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхПодразделения.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхПодразделения.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхОрганизации.Значение)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхФизическиеЛица.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхПодразделения.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхОрганизации.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхФизическиеЛица.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхПодразделения.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗначениеОпределено
		|ПОМЕСТИТЬ ВТЗначенияПоказателейУдержаний
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиУдержания
		|		ПО (ПоказателиУдержания.Удержание = Интервалы.Удержание)
		|			И (ПоказателиУдержания.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО Интервалы.Удержание = Удержания.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО Интервалы.ФизическоеЛицо = ЗначенияПериодическихПоказателейСотрудников.ФизическоеЛицо
		|			И Интервалы.ДокументОснование = ЗначенияПериодическихПоказателейСотрудников.ДокументОснование
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейСотрудников.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейСотрудниковПериод = ЗначенияПериодическихПоказателейСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО Интервалы.Подразделение = ЗначенияПериодическихПоказателейПодразделений.Подразделение
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейПодразделений.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейПодразделенийПериод = ЗначенияПериодическихПоказателейПодразделений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО Интервалы.Организация = ЗначенияПериодическихПоказателейОрганизаций.Организация
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейОрганизаций.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейОрганизацийПериод = ЗначенияПериодическихПоказателейОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхФизическиеЛица КАК ЗначенияРазовыхФизическиеЛица
		|		ПО (ЗначенияРазовыхФизическиеЛица.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияРазовыхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхФизическиеЛица.Удержание = Интервалы.Удержание)
		|			И (ЗначенияРазовыхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (ЗначенияРазовыхФизическиеЛица.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияРазовыхФизическиеЛица.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхФизическиеЛица.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияРазовыхФизическиеЛица.ДатаОкончания = Интервалы.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПодразделения КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхОрганизации КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхФизическиеЛица КАК ЗначенияОперативныхФизическиеЛица
		|		ПО (ЗначенияОперативныхФизическиеЛица.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхФизическиеЛица.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхФизическиеЛица.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхФизическиеЛица.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхФизическиеЛица.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхФизическиеЛица.ДокументОснование = Интервалы.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПодразделения КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхПодразделения.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхПодразделения.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхПодразделения.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхПодразделения.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхПодразделения.ДокументОснование = Интервалы.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхОрганизации КАК ЗначенияОперативныхОрганизации
		|		ПО (ЗначенияОперативныхОрганизации.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхОрганизации.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхОрганизации.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхОрганизации.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхОрганизации.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхОрганизации.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхОрганизации.ДокументОснование = Интервалы.ДокументОснование)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	Удержания.РеквизитДопУпорядочивания,
		|	ПоказателиУдержания.Показатель,
		|	Удержания.КоличествоПоказателейИспользуемыхПриРасчете,
		|	ПоказателиУдержания.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	СозданныеВТ.Добавить("ВТЗначенияПоказателейУдержаний");	
	
КонецПроцедуры

Функция ИгнорируемыеКолонкиСравненияПриЗаполненииУдержаний(КатегорияУдержания)
	
	// Для отдельных категорий удержаний состав игнорируемых колонок может отличаться.
	
	ИгнорируемыеКолонки = Новый Массив;
	ИгнорируемыеКолонки.Добавить("ДатаНачала");
	ИгнорируемыеКолонки.Добавить("ДатаОкончания");
	
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда 
		ИгнорируемыеКолонки.Добавить("Получатель");
		ИгнорируемыеКолонки.Добавить("ПлатежныйАгент");
		ИгнорируемыеКолонки.Добавить("ТарифПлатежногоАгента");
	ИначеЕсли КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда 
		ИгнорируемыеКолонки.Добавить("ДокументОснование");
		ИгнорируемыеКолонки.Добавить("ВидБазы");
		ИгнорируемыеКолонки.Добавить("Знаменатель");
		ИгнорируемыеКолонки.Добавить("НомерПоказателя");
		ИгнорируемыеКолонки.Добавить("Показатель");
		ИгнорируемыеКолонки.Добавить("Предел");
		ИгнорируемыеКолонки.Добавить("ПрожиточныйМинимум");
		ИгнорируемыеКолонки.Добавить("Процент");
		ИгнорируемыеКолонки.Добавить("СпособРасчета");
		ИгнорируемыеКолонки.Добавить("Сумма");
		ИгнорируемыеКолонки.Добавить("УчитыватьБольничныеЛисты");
		ИгнорируемыеКолонки.Добавить("Числитель");
	КонецЕсли;
	
	Возврат ИгнорируемыеКолонки;
	
КонецФункции

Процедура СоздатьВТЗначенийПериодическихПоказателейФизическихЛиц(МенеджерВременныхТаблиц, СозданныеВТ)
	
	Если СозданныеВТ.Найти("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТФизическиеЛицаПериоды",
		"ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", "Период");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвиженияПредварительно");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейСотрудников.Период,
	|	ЗначенияПоказателейСотрудников.ФизическоеЛицо,
	|	ЗначенияПоказателейСотрудников.Показатель,
	|	ЗначенияПоказателейСотрудников.ДокументОснование,
	|	ВЫРАЗИТЬ(ЗначенияПоказателейСотрудников.Значение КАК ЧИСЛО(15, 4)) КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвиженияПредварительно КАК ЗначенияПоказателейСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Описываем созданные временные таблицы, чтобы для оптимизации не создавать их повторно.
	СозданныеВТ.Добавить("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
	
КонецПроцедуры

// Определяет является ли характер выплаты межрасчетным
//
// Параметры:
//  ПорядокВыплаты	 - Перечисление.ХарактерВыплатыЗарплаты 
// 
// Возвращаемое значение:
//   Булево   
//
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) Экспорт
	
	Возврат ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет
			Или ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		
КонецФункции

// Выполняет обработку всех коллекций расчетного документа при изменении сотрудника.
//
Процедура ОбработатьИзменениеСотрудникаВедущейТаблицыФормы(Форма, ОписаниеДокумента, НовыйСотрудник, ПрежнийСотрудник) Экспорт
	
	// Очистить все коллекции документа от данных предыдущего сотрудника, 
	// если в ведущей таблице больше не осталось его представителей
	// создать строки зависимых коллекций по новому сотруднику.
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ДокументСсылка = Объект.Ссылка;
	ОкончаниеПериода = КонецМесяца(Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	Если ОписаниеДокумента.Окончание <> Неопределено Тогда
		ОкончаниеПериода = Объект[ОписаниеДокумента.Окончание];
	КонецЕсли;
	
	ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, ПрежнийСотрудник, Организация);
	
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	КонецЕсли;
	
	Если РассчитыватьУдержания Тогда
		// Среди зависимых коллекций, для которых нужно создавать строки - только удержания, 
		// т.к. для расчета НДФЛ и Взносы не требуется наличия строк.
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
			
			Отбор = РасчетЗарплатыРасширенныйФормы.СотрудникиФизическиеЛицаОтбор();
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСотрудник, "ФизическоеЛицо");
			Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина);
			
			НачальныеПозицииВставки = Новый Соответствие;
			РасчетЗарплатыРасширенныйФормы.УдержанияИсправленияВДанныеМенеджераРасчета(
				Объект[ОписаниеДокумента.УдержанияИмя],
				МенеджерРасчета,
				Отбор,
				НачальныеПозицииВставки);
			
			ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
			ТаблицыУдержаний.Удержания = Объект[ОписаниеДокумента.УдержанияИмя];
			Если ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено Тогда
				ТаблицыУдержаний.УдержанияПерерасчет = Объект[ОписаниеДокумента.УдержанияПерерасчетИмя];
			КонецЕсли;
			
			МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = Истина;
			МенеджерРасчета.ЗаполнитьУдержанияСотрудникаЗаПериод(НовыйСотрудник, МесяцНачисления, ОкончаниеПериода);
			РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(
				ТаблицыУдержаний,
				МенеджерРасчета.Зарплата.Удержания,
				МесяцНачисления,
				НачальныеПозицииВставки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет (и пересчитывает) данные формы документа-начисления 
// по переданным сотрудникам.
//
// Параметры:
//	Форма
//	ОписаниеДокумента - структура, описывающая документ-начисление 
//		(см. ОписаниеРасчетногоДокумента).
//	Сотрудники - ссылка или массив ссылок на сотрудников.
// 	СохранятьИсправления - если Истина, перезаполнены не будут строки, 
//		для которых в наборах по определенному ключу содержатся исправления.
//		Например, для таблицы Начислений состав ключа Сотрудник и Начисление, 
//		это значит, что если хотя бы одна строка с таким начислением сотрудника содержит исправления, 
//		то все строки этого начисления этому сотруднику не будут перезаполнены
// 	ИспользоватьДлительнуюОперацию.
// 	ПерезаполнятьВедущиеТаблицы - в документах есть таблицы, от наполнения которых зависит содержимое других таблиц,
//		если изменение данных производится в этих таблицах, то их перезаполнять не нужно, в этом случае нужно установить 
//		ПерезаполнятьВедущиеТаблицы = Ложь
//		Например, при изменении сотрудника в таблице Начислений, 
//		нужно перезаполнить зависимые (ведомые) таблицы удержаний, НДФЛ и др., но не перезаполнять начисления по договорам.
//		
//
Функция ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица = Неопределено, СохранятьИсправления = Истина, ИспользоватьДлительнуюОперацию = Ложь, ПерезаполнятьВедущиеТаблицы = Истина, СотрудникиПериодДействияПерерасчет = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	
	Организация = Объект.Организация;
	ДокументСсылка = Объект.Ссылка;
	Подразделение = Объект.Подразделение;
	
	ФизическиеЛица = Неопределено;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
		Если ВедущиеОбъекты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сотрудники = ВедущиеОбъекты.Сотрудники;
		ФизическиеЛица = ВедущиеОбъекты.ФизическиеЛица;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда 
		ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, , КонецМесяца(МесяцНачисления));
	    МассивПодработок = КадровыйУчетРасширенный.ПодработкиСотрудников(Истина, ПараметрыПолученияПодработок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, МассивПодработок, Истина);
	КонецЕсли;
	
	// Период заполнения данных определяем по месяцу начисления, 
	// если он не определяется отдельными полями.
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеДокумента.Окончание) Тогда
		ОкончаниеПериода = КонецДня(Объект[ОписаниеДокумента.Окончание]);
	КонецЕсли;
	
	РежимНачисления = РежимНачисления(Объект, ОписаниеДокумента);
	ПорядокВыплаты = ПорядокВыплаты(Объект, ОписаниеДокумента);
	ДатаВыплаты = ДатаВыплаты(Объект, ОписаниеДокумента);
	
	НачальныеПозицииВставки = Новый Соответствие;
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ДокументСсылка = ДокументСсылка;
	СтруктураПараметров.Подразделение = Подразделение;
	СтруктураПараметров.МесяцНачисления = МесяцНачисления;
	СтруктураПараметров.ДатаВыплаты = ДатаВыплаты;
	СтруктураПараметров.Сотрудники = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода = ОкончаниеПериода;
	СтруктураПараметров.РежимНачисления = РежимНачисления;
	СтруктураПараметров.ПорядокВыплаты = ПорядокВыплаты;
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента = СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, НачальныеПозицииВставки, ФизическиеЛица);
	СтруктураПараметров.КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
	СтруктураПараметров.РежимПересчетаНДФЛ = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаНДФЛ;
	СтруктураПараметров.РежимПересчетаВзносов = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаВзносов;
	СтруктураПараметров.НачальныеПозицииВставки = НачальныеПозицииВставки;
	
	Если Не ПустаяСтрока(ОписаниеДокумента.НДФЛИмя) Тогда
		СтруктураПараметров.ОкончательныйРасчетНДФЛ = Форма["ОкончательныйРасчетНДФЛ"];
	КонецЕсли;
	
	ДанныеРаспределения = Новый Структура;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;
	
	Если ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата <> Неопределено Тогда 
		Для Каждого КлючИЗначение Из ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата Цикл
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И Не ДанныеРаспределения.Свойство(ПутьКДанным) Тогда
				ДанныеРаспределения.Вставить(ПутьКДанным, ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]));
			КонецЕсли;
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено Тогда
				ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.РаспределениеРезультатов = ДанныеРаспределения;
	СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Начисление зарплаты""'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

// Подготавливает данные формы документа-начисления для перезаполнения документа
// по переданным параметрам.
// Используется фоновым заданием, если БД серверная.
//
// Параметры:
//		СтруктураПараметров - структура с параметрам
//				(см. ПерезаполнитьДанныеФормы и ОписаниеРасчетногоДокумента).
//		АдресХранилища - адрес, куда будет помещен результат выполнения.
//
Процедура ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	Подразделение = СтруктураПараметров.Подразделение;
	МесяцНачисления = СтруктураПараметров.МесяцНачисления;
	ДатаВыплаты = СтруктураПараметров.ДатаВыплаты;
	Сотрудники = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода = СтруктураПараметров.ОкончаниеПериода;
	РежимНачисления = СтруктураПараметров.РежимНачисления;
	СохранятьИсправления = СтруктураПараметров.СохранятьИсправления;
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	КонтролируемыеПоля = СтруктураПараметров.КонтролируемыеПоля;
	РежимПересчетаНДФЛ = СтруктураПараметров.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = СтруктураПараметров.РежимПересчетаВзносов;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОкончательныйРасчетНДФЛ = СтруктураПараметров.ОкончательныйРасчетНДФЛ;
	НачальныеПозицииВставки = СтруктураПараметров.НачальныеПозицииВставки;
	ПроверятьРегистрациюПроцентаЕНВД = СтруктураПараметров.ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы;
	РассчитыватьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;
	
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;
	
	ЗаполнениеДокумента = Сотрудники = Неопределено;
	ИмяДанныхЗаполнения = ?(ЗаполнениеДокумента, "ДанныеДляЗаполненияТаблицДокумента", "ДанныеДляПерезаполненияТаблицДокумента");
	
	РасчетПервойПоловиныМесяца = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца;
	ПолучатьДанныеУчета = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		СтруктураПараметров.Сотрудники = Сотрудники;
	КонецЕсли;
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	
	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета);
	КонецЕсли;
	
	Если ПолучатьДанныеУчета Тогда
		СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();
		СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();
		РассчитыватьУдержанияПерерасчет = Ложь;
		
		// Сотрудники перерасчета.
		Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
		
			ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
			ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
			ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
		
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
			КонецЕсли;
		
			ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
				ДанныеПерерасчета, 
				Организация, 
				Подразделение, 
				МесяцНачисления, 
				Сотрудники, 
				СтруктураПараметров.СотрудникиПериодДействияПерерасчет, 
				ДокументСсылка, 
				ОписаниеДокумента.РежимДоначисления,
				МенеджерРасчета);
		
			Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
				РассчитыватьУдержанияПерерасчет = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьНачисления Или ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет Тогда
			Для Каждого Сотрудник Из Сотрудники Цикл
				Если ЕстьНачисления Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда  
					НоваяСтрока = СотрудникиДляНачислений.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				КонецЕсли;
				Если РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет Тогда 
					НоваяСтрока = СотрудникиДляУдержаний.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СохранятьИсправления Тогда 
			ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		КонецЕсли;
		
		ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
		ОтборМенеджераРасчета.Подразделение = Подразделение;
		МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);
		Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		КонецЕсли;
		МенеджерРасчета.РассчитатьЗарплату();
	Иначе
		ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		Если РежимПересчетаВзносов Тогда
			МенеджерРасчета.ПересчитатьВзносы();
		КонецЕсли;
		Если РежимПересчетаНДФЛ Тогда
			МенеджерРасчета.ПересчитатьНДФЛ();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить(ИмяДанныхЗаполнения, ДанныеЗаполнения);
	РезультатЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	// Начисления
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксРасчетВремени 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Начисления", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// НачисленияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПерерасчет Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксРасчетВремени 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "НачисленияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// Пособия
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Пособия Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксРасчетВремени 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Пособия", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// ПособияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.ПособияПерерасчет Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксРасчетВремени 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "ПособияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// Льготы
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ЛьготыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Льготы Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксРасчетВремени 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Льготы", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// НачисленияПоДоговорам
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПоДоговорамИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	КодыДоходаДоговорРаботыУслуги = УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПоДоговорам Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксСтрока Тогда
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, КодыДоходаДоговорРаботыУслуги, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// Удержания
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.УдержанияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.Удержания, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	Для Каждого Строка Из СодержимоеДокумента.Удержания Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксЗаполнение 
			Или Строка.ФиксСтрока Тогда
			РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// НДФЛ
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НДФЛИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.НДФЛ Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксСтрока Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиНДФЛ", Строка.ИдентификаторСтрокиНДФЛ);
			ПримененныеВычеты = СодержимоеДокумента.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(ПараметрыОтбора);
			РасчетЗарплатыРасширенныйФормы.СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ПримененныеВычеты, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// КорректировкиВыплаты
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.КорректировкиВыплатыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.КорректировкиВыплаты Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксСтрока Тогда
			РасчетЗарплатыРасширенныйФормы.СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СодержимоеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	// Начисления
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Начисления", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// НачисленияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПерерасчет Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "НачисленияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Пособия
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Пособия Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Пособия", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// ПособияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.ПособияПерерасчет Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "ПособияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Льготы
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ЛьготыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Льготы Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Льготы", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// НачисленияПоДоговорам
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПоДоговорамИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	КодыДоходаДоговорРаботыУслуги = УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПоДоговорам Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, КодыДоходаДоговорРаботыУслуги, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Удержания
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.УдержанияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.Удержания, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	Для Каждого Строка Из СодержимоеДокумента.Удержания Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// НДФЛ
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НДФЛИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.НДФЛ Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиНДФЛ", Строка.ИдентификаторСтрокиНДФЛ);
		ПримененныеВычеты = СодержимоеДокумента.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(ПараметрыОтбора);
		РасчетЗарплатыРасширенныйФормы.СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ПримененныеВычеты, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	//Взносы
	МенеджерРасчета.Зарплата.Взносы = СодержимоеДокумента.Взносы.Скопировать();
	
	// КорректировкиВыплаты
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.КорректировкиВыплатыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.КорректировкиВыплаты Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// ПогашениеЗаймов
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПогашениеЗаймовИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.ПогашениеЗаймов Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СодержимоеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРезультатовРаспределенияТаблицыДокумента(ИмяТаблицы, ОписанияТаблицФормы, РаспределениеРезультатов)
	
	ОписаниеТаблицы = Неопределено;
	Если ЗначениеЗаполнено(ИмяТаблицы) И ЗначениеЗаполнено(ОписанияТаблицФормы) Тогда 
		ОписанияТаблицФормы.Свойство(ИмяТаблицы, ОписаниеТаблицы);
	КонецЕсли;
	ДанныеРезультатовРаспределения = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеТаблицы) Тогда
		ПутьКДаннымАдресаРаспределения = ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
		Если ЗначениеЗаполнено(ПутьКДаннымАдресаРаспределения) Тогда 
			РаспределениеРезультатов.Свойство(ПутьКДаннымАдресаРаспределения, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРезультатовРаспределения;
	
КонецФункции

// Удаляет строки, связанные с сотрудником из всех коллекций расчетного документа.
//
Процедура ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, Сотрудник, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	// Проверяем остались ли строки в ведущих таблицах: 
	ВедущиеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ВедущиеТаблицы();
	
	// Начисления, НачисленияПоДоговорам
	СтрокиСотрудника = Новый Массив;
	Для Каждого ВедущаяТаблица Из ВедущиеТаблицы Цикл
		Если ОписаниеДокумента[ВедущаяТаблица + "Имя"] <> Неопределено Тогда
			НайденныеСтроки = Объект[ОписаниеДокумента[ВедущаяТаблица + "Имя"]].НайтиСтроки(
					Новый Структура("Сотрудник", Сотрудник));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиСотрудника, НайденныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиСотрудника.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем сотрудников и физических лиц.
	ВедущиеОбъекты = СотрудникиФизическиеЛица(Сотрудник, Организация);
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	КоллекцииПоФизическомуЛицу = Новый Массив;
	КоллекцииПоФизическомуЛицу.Добавить("Удержания");
	КоллекцииПоФизическомуЛицу.Добавить("Взносы");
	КоллекцииПоФизическомуЛицу.Добавить("НДФЛ");
	
	Для Каждого ИмяКоллекции Из КоллекцииПоФизическомуЛицу Цикл
		ИмяТаблицыДокумента = ОписаниеДокумента[ИмяКоллекции + "Имя"];
		Если ИмяТаблицыДокумента = Неопределено Тогда
			// Нет такой таблицы в этом документе.
			Продолжить;
		КонецЕсли;
		СтрокиКоллекции = НайтиСтрокиОтборПоМассиву(Объект[ИмяТаблицыДокумента], "ФизическоеЛицо", Физлица);
		Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
			Объект[ИмяТаблицыДокумента].Удалить(СтрокаКоллекции);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выбирает объекты, являющиеся ведущими для обновления (сотрудники или физические лица)
// и вызывает процедуру перезаполнения данных формы.
//
// Параметры:
//	Форма
//	ИмяТаблицы - имя таблицы документа, как оно указывается в описании расчетного документа, 
//		см. РасчетЗарплатыРасширенный.ОписаниеРасчетногоДокумента.
//	ВыбранныеСтроки - идентификаторы выбранных строк таблицы.
//	ВедущееПоле - имя поля, содержащего ведущее поле для обновления (Сотрудник или ФизическоеЛицо).
//	ТипВедущего - тип значения, являющегося ведущим для обновления (Сотрудник или ФизическоеЛицо).
//
Процедура ПересчитатьСотрудникаНаСервере(Форма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	Объект = Форма.Объект;
	
	// В таблицах реквизиты разного типа и с разными именами
	// если это сотрудники - нужно получить физических лиц, 
	// если физические лица - сотрудников
	// очистить строки по всем таблицам, запомнить места вставки строк по таблицам.
	
	// Составляем коллекцию выделенных пользователем строк.
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		// Получаем физических лиц по сотрудникам.
		Сотрудники = ВедущиеОбъекты;
	Иначе
		// Получаем сотрудников по физическим лицам.
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Форма.ПерезаполнитьДанныеФормыНаСервере(Сотрудники, Истина);
	
КонецПроцедуры

// Подготавливает таблицу с данными расчета займов и материальной выгоды.
//
Функция РезультатРасчетаЗаймов(Организация, ДатаОкончания, Документ, Сотрудники = Неопределено, Подразделение = Неопределено) Экспорт
	
	// Получаем данные расчета займов.
	РасчетЗаймов = ЗаймыСотрудникам.РасчетЗаймовСотрудникам(
		Организация, ДатаОкончания, Документ, , Сотрудники, Подразделение, Истина);
		
	// Дополняем таблицу данными расчета материальной выгоды.
	УчетНДФЛРасширенный.РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, ДатаОкончания, РасчетЗаймов, Документ);
	
	РасчетЗаймов.Свернуть("ФизическоеЛицо, ДоговорЗайма, Подразделение", 
		"НачисленоПроцентов, ПогашениеПроцентов, ПогашениеЗайма, МатериальнаяВыгода, НалогНаМатериальнуюВыгоду");
		
	// Удаляем (просто не добавляем) строки с нулевыми суммами.
	ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		Если СтрокаРасчета.НачисленоПроцентов = 0
			И СтрокаРасчета.ПогашениеПроцентов = 0
			И СтрокаРасчета.ПогашениеЗайма = 0
			И СтрокаРасчета.МатериальнаяВыгода = 0 
			И СтрокаРасчета.НалогНаМатериальнуюВыгоду = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), СтрокаРасчета);
	КонецЦикла;
	
	Возврат ПогашениеЗаймов;
	
КонецФункции

// Возвращает структуру параметров для ПроверитьПересечениеФактическогоПериодаДействия.
//
Функция ПараметрыПроверкиПересеченияФактическогоПериодаДействия() Экспорт 
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация");
	ПараметрыПроверки.Вставить("ПериодРегистрации");
	ПараметрыПроверки.Вставить("Документ");
	ПараметрыПроверки.Вставить("Начисления");
	ПараметрыПроверки.Вставить("ИмяКолонки", "Начисление");
	ПараметрыПроверки.Вставить("Начисление");
	ПараметрыПроверки.Вставить("ИсправленныйДокумент");
	ПараметрыПроверки.Вставить("ОсновныеНачисления");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет пересечение фактического периода действия начислений с зачетом нормы времени.
//
// Параметры:
//		Организация - организация из документа.
//		ПериодРегистрации - период регистрации документа.
//		Документ - ссылка на документ.
//		Начисления - табличная часть Начисления.
//		ИмяКолонки - имя колонки таблицы, к которой будет привязано сообщение об ошибке.
//      Начисление - для документов, у которых в табличной части Начисления нет вида расчета.
//
Процедура ПроверитьПересечениеФактическогоПериодаДействия(Параметры, Отказ = Ложь) Экспорт 
	
	Организация 			= Параметры.Организация;
	ПериодРегистрации 		= Параметры.ПериодРегистрации;
	Документ 				= Параметры.Документ;
	Начисления 				= Параметры.Начисления;
	ИмяКолонки 				= Параметры.ИмяКолонки;
	Начисление 				= Параметры.Начисление;
	ИсправленныйДокумент 	= Параметры.ИсправленныйДокумент;
	ОсновныеНачисления 		= Параметры.ОсновныеНачисления;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ПериодРегистрации) Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОсновныеНачисления <> Неопределено Тогда 
		
		ДокументИсправлен = Ложь;
		
		Если ИсправленныйДокумент <> Неопределено И ЗначениеЗаполнено(Документ) Тогда 
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Документ.Ссылка КАК Ссылка
			|ИЗ
			|	#Таблица КАК Документ
			|ГДЕ
			|	Документ.ИсправленныйДокумент = &Ссылка
			|	И Документ.Проведен");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ));
			Запрос.УстановитьПараметр("Ссылка", Документ);
			
			РезультатЗапроса = Запрос.Выполнить();
			ДокументИсправлен = Не РезультатЗапроса.Пустой();
			
		КонецЕсли;
		
		Если Не ДокументИсправлен Тогда 
			
			СписокИсправленныхДокументов = Новый Массив; 
			
			Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
				
				СписокИсправленныхДокументов.Добавить(ИсправленныйДокумент);
				
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				ИмяДокумента = СтрРазделить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ), ".")[1];
				ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц, СписокИсправленныхДокументов, ИмяДокумента, "ВТИсправленныеДокументы");
				
				Запрос = Новый Запрос;
				
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				
				Запрос.УстановитьПараметр("ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).ПустаяСсылка());
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ИсправленныеДокументы.ИсправленныйДокумент
				|ИЗ
				|	ВТИсправленныеДокументы КАК ИсправленныеДокументы
				|ГДЕ
				|	ИсправленныеДокументы.ИсправленныйДокумент <> &ПустаяСсылка";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					СписокИсправленныхДокументов.Добавить(Выборка.ИсправленныйДокумент);
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
			
			Для Каждого СтрокаНачисления Из Начисления Цикл
				Если Не ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление) Тогда 
					Продолжить;
				КонецЕсли;	
				НоваяСтрока = ТаблицаНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Начисление = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
			КонецЦикла;
			
			МассивНачислений = Новый Массив;
			Для Каждого ОсновноеНачисление Из ОсновныеНачисления Цикл 
				Отбор = Новый Структура("Начисление", ОсновноеНачисление);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачислений, ТаблицаНачислений.НайтиСтроки(Отбор));
			КонецЦикла;
			
			НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления();
			НачисленияНабор.Отбор.Регистратор.Установить(Документ);
			
			Движения = Новый Структура("Начисления", НачисленияНабор);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, МассивНачислений, , Ложь);
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("СписокИсправленныхДокументов", СписокИсправленныхДокументов);
			Запрос.УстановитьПараметр("Начисления", Движения.Начисления);
			Запрос.УстановитьПараметр("Документ", Документ);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.ПериодДействия,
			|	Начисления.Организация,
			|	Начисления.Сотрудник,
			|	Начисления.ВидРасчета,
			|	Начисления.ПериодДействияНачало,
			|	Начисления.ПериодДействияКонец,
			|	Начисления.НомерСтроки
			|ПОМЕСТИТЬ ВТДанныеДокументаПредварительно
			|ИЗ
			|	&Начисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеДокументаПредварительно.ПериодДействия,
			|	ДанныеДокументаПредварительно.Организация,
			|	ДанныеДокументаПредварительно.Сотрудник,
			|	ДанныеДокументаПредварительно.ВидРасчета,
			|	ДанныеДокументаПредварительно.ПериодДействияНачало,
			|	ДанныеДокументаПредварительно.ПериодДействияКонец,
			|	ДанныеДокументаПредварительно.НомерСтроки,
			|	Начисления.ВидВремени
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	ВТДанныеДокументаПредварительно КАК ДанныеДокументаПредварительно
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО ДанныеДокументаПредварительно.ВидРасчета = Начисления.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеРегистра.Регистратор,
			|	ДанныеРегистра.Организация,
			|	ДанныеРегистра.Сотрудник,
			|	ДанныеРегистра.ВидРасчета,
			|	ДанныеРегистра.ПериодДействия,
			|	ДанныеРегистра.ПериодДействияНачало,
			|	ДанныеРегистра.ПериодДействияКонец,
			|	ДанныеРегистра.Сторно,
			|	ДанныеДокумента.НомерСтроки
			|ПОМЕСТИТЬ ВТКонкурирующиеЗаписи
			|ИЗ
			|	ВТДанныеДокумента КАК ДанныеДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ДанныеРегистра
			|		ПО (НЕ ДанныеРегистра.Регистратор В (&СписокИсправленныхДокументов))
			|			И (ДанныеРегистра.Регистратор <> &Документ)
			|			И ДанныеДокумента.ПериодДействия = ДанныеРегистра.ПериодДействия
			|			И ДанныеДокумента.Организация = ДанныеРегистра.Организация
			|			И ДанныеДокумента.Сотрудник = ДанныеРегистра.Сотрудник
			|			И ДанныеДокумента.ВидРасчета = ДанныеРегистра.ВидРасчета
			|			И (НЕ ДанныеДокумента.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
			|			И ДанныеДокумента.ПериодДействияНачало = ДанныеРегистра.ПериодДействияНачало
			|			И ДанныеДокумента.ПериодДействияКонец = ДанныеРегистра.ПериодДействияКонец
			|			И (НЕ(ДанныеРегистра.Регистратор ССЫЛКА Документ.Увольнение
			|					И ДанныеРегистра.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
			|					И ДанныеРегистра.СторнируемыйДокумент ССЫЛКА Документ.Отпуск
			|					И ДанныеРегистра.СторнируемыйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонкурирующиеЗаписи.Регистратор,
			|	КонкурирующиеЗаписи.Организация,
			|	КонкурирующиеЗаписи.Сотрудник,
			|	КонкурирующиеЗаписи.ВидРасчета,
			|	КонкурирующиеЗаписи.ПериодДействия,
			|	КонкурирующиеЗаписи.ПериодДействияНачало,
			|	КонкурирующиеЗаписи.ПериодДействияКонец,
			|	КонкурирующиеЗаписи.Сторно,
			|	КонкурирующиеЗаписи.НомерСтроки
			|ИЗ
			|	ВТКонкурирующиеЗаписи КАК КонкурирующиеЗаписи
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонкурирующиеЗаписи КАК КонкурирующиеЗаписиСторно
			|		ПО КонкурирующиеЗаписи.Сотрудник = КонкурирующиеЗаписиСторно.Сотрудник
			|			И КонкурирующиеЗаписи.Организация = КонкурирующиеЗаписиСторно.Организация
			|			И КонкурирующиеЗаписи.ВидРасчета = КонкурирующиеЗаписиСторно.ВидРасчета
			|			И КонкурирующиеЗаписи.ПериодДействия = КонкурирующиеЗаписиСторно.ПериодДействия
			|			И КонкурирующиеЗаписи.ПериодДействияНачало = КонкурирующиеЗаписиСторно.ПериодДействияНачало
			|			И КонкурирующиеЗаписи.ПериодДействияКонец = КонкурирующиеЗаписиСторно.ПериодДействияКонец
			|			И (НЕ КонкурирующиеЗаписи.Сторно)
			|			И (КонкурирующиеЗаписиСторно.Сторно)
			|ГДЕ
			|	НЕ КонкурирующиеЗаписи.Сторно
			|	И КонкурирующиеЗаписиСторно.Сотрудник ЕСТЬ NULL ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 0 Тогда 
				
				ШаблонСообщения = НСтр("ru = 'Работник %1: начисление %2 на эти даты уже введено документом %3.'");
				
				Пока Выборка.Следующий() Цикл 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, Выборка.ВидРасчета, Выборка.Регистратор);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Начисления" + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + "Результат", , Отказ);
				КонецЦикла;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("МассивСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФПДНачислений.Регистратор КАК Регистратор,
	|	ФПДНачислений.Сотрудник КАК Сотрудник,
	|	ФПДНачислений.Организация КАК Организация,
	|	ФПДНачислений.ВидРасчета КАК ВидРасчета,
	|	ФПДНачислений.ПериодДействияНачало КАК ДатаНачала,
	|	ФПДНачислений.ПериодДействияКонец КАК ДатаОкончания,
	|	ФПДНачислений.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТФПДНачислений
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетНормыВремени = ИСТИНА
	|				И Сотрудник В (&МассивСотрудников)
	|				И ПериодРегистрации = &ПериодРегистрации
	|				И Сторно = ЛОЖЬ
	|				И ФиксСторно = ЛОЖЬ
	|				И НЕ(Регистратор ССЫЛКА Документ.Увольнение
	|						И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|						И СторнируемыйДокумент ССЫЛКА Документ.Отпуск
	|						И СторнируемыйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка))) КАК ФПДНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияДокумента.ВидРасчета КАК ВидРасчета,
	|	ДвиженияДокумента.ДатаНачала КАК ДатаНачала,
	|	ДвиженияДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ВидРасчета КАК ВидРасчетаРегистр,
	|	ДанныеРегистра.ДатаНачала КАК ДатаНачалаРегистр,
	|	ДанныеРегистра.ДатаОкончания КАК ДатаОкончанияРегистр,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтрокиРегистр
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДанныеРегистра
	|		ПО ДвиженияДокумента.Сотрудник = ДанныеРегистра.Сотрудник
	|			И ДвиженияДокумента.Организация = ДанныеРегистра.Организация
	|			И (ДвиженияДокумента.Регистратор = &Документ)
	|			И (ДанныеРегистра.Регистратор <> &Документ)
	|			И ДвиженияДокумента.ДатаНачала <= ДанныеРегистра.ДатаОкончания
	|			И ДвиженияДокумента.ДатаОкончания >= ДанныеРегистра.ДатаНачала
	|			И (НЕ ДанныеРегистра.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (НЕ ДвиженияДокумента.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияДокумента.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДанныеРегистра.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияДокумента.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРегистратора.Сотрудник КАК Сотрудник,
	|	ДвиженияРегистратора.ВидРасчета КАК ВидРасчета,
	|	ДвиженияРегистратора.ДатаНачала КАК ДатаНачала,
	|	ДвиженияРегистратора.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистратора.НомерСтроки КАК НомерСтроки,
	|	ДвиженияРегистратораДляПроверки.ВидРасчета КАК ВидРасчетаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаНачала КАК ДатаНачалаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаОкончания КАК ДатаОкончанияДляПроверки,
	|	ДвиженияРегистратораДляПроверки.НомерСтроки КАК НомерСтрокиДляПроверки
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДвиженияРегистратораДляПроверки
	|		ПО (ДвиженияРегистратора.Регистратор = &Документ)
	|			И (ДвиженияРегистратораДляПроверки.Регистратор = &Документ)
	|			И ДвиженияРегистратора.Сотрудник = ДвиженияРегистратораДляПроверки.Сотрудник
	|			И ДвиженияРегистратора.Организация = ДвиженияРегистратораДляПроверки.Организация
	|			И ДвиженияРегистратора.НомерСтроки <> ДвиженияРегистратораДляПроверки.НомерСтроки
	|			И ДвиженияРегистратора.ДатаНачала <= ДвиженияРегистратораДляПроверки.ДатаОкончания
	|			И ДвиженияРегистратора.ДатаОкончания >= ДвиженияРегистратораДляПроверки.ДатаНачала
	|			И (ВЫБОР
	|				КОГДА ДвиженияРегистратора.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияРегистратораДляПроверки.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДвиженияРегистратора.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияРегистратораДляПроверки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ШаблонСообщения = НСтр("ru = 'Работник %1: период %2 будет оплачен как ""%3"" текущим документом и как ""%4"" документом %5'");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаРегистр);
		ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияРегистр);
		ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.ВидРасчетаРегистр, Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор, "Начисления" + "[" + Формат(Выборка.НомерСтрокиРегистр - 1, "ЧН=0; ЧГ=0") + "]." + "Результат", , Отказ);
	КонецЦикла;	
	
	ШаблонСообщения = НСтр("ru = 'Работник %1: период %2 будет оплачен как ""%3"" (строка %4) и как ""%5"" (строка %6)'");
	
	НомераСтрок = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если НомераСтрок[Выборка.НомерСтрокиДляПроверки] = Неопределено Тогда 
			НомераСтрок.Вставить(Выборка.НомерСтроки, Истина);
			
			ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаДляПроверки);
			ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияДляПроверки);
			ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.НомерСтроки, Выборка.ВидРасчетаДляПроверки, Выборка.НомерСтрокиДляПроверки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Объект.Начисления" + "[" + Формат(Выборка.НомерСтрокиДляПроверки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяКолонки, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление = Неопределено)
	
	ВидРасчета = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
	
	Если ЗначениеЗаполнено(ВидРасчета) 
		И ЗначениеЗаполнено(СтрокаНачисления.Сотрудник) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаНачала) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончания) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Аванс

// Функция возвращает таблицу значений с информацией о плановых авансах сотрудников.
//
// Параметры:
//	ТаблицаСотрудников - таблица значений с колонками.
//		- Сотрудник; 
//		- Период
//	ДокументСсылка - если указать, то зарегистрированные этим документом авансы будут игнорироваться;
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь
//
// Возвращаемое значение - таблица значений с колонками.
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс
//
Функция АвансыСотрудников(ТаблицаСотрудников, ДокументСсылка = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если ДокументСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	КонецЕсли;	

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
		ПараметрыПостроения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает структуру с параметрами для метода СоздатьВТАвансыСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВТСотрудники - имя временной таблицы сотрудников.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВТСотрудники
//
Функция ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТСотрудники", ИмяВТСотрудники);
	
	Возврат ОписательВременныхТаблиц
	
КонецФункции

// Процедура создает временную таблицу с информацией о плановых авансах сотрудников.
// В результате выполнения в менеджере временных таблиц создается временная таблица 
// ВТАвансыСотрудников с колонками:
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс
//
// Параметры:
//	ОписательВременныхТаблиц - структура, см. ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников; 
//	ТолькоРазрешенные - булево признак выбора только разрешенных сотрудников;
//	ДатаАктуальности - дата, на которую определяется состояние авансов;
//	Отбор - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//		Коллекция, строки которой имеют поля.
//			ЛевоеЗначение - строка, имя поля регистра сведений.
//			ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//			ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//		По умолчанию отбор не задан.
//
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь
//
Процедура СоздатьВТАвансыСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, ДатаАктуальности, Отбор = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериодДляПолученияАвансов
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники",		ОписательВременныхТаблиц.ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отбор;
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиИПериодДляПолученияАвансов",
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ПОМЕСТИТЬ ВТАвансыСотрудников
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиИПериодДляПолученияАвансов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пересчет тарифных ставок

// Заполняет набор записей регистра порядка пересчета тарифных ставок сотрудников.
//
Процедура СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ПорядокПересчетаТарифнойСтавки) Экспорт 

	Если Не ЗначениеЗаполнено(ПорядокПересчетаТарифнойСтавки) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПорядокПересчетаТарифнойСтавки.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ПорядокПересчетаТарифнойСтавки);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЕстьПериодыВозвратныхСобытий = Ложь;
	Для Каждого СтрокаДвижений Из ПорядокПересчетаТарифнойСтавки Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
		Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий И ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ЕстьПериодыВозвратныхСобытий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий Тогда
		ИспользуютсяВозвратныеСобытия = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяВозвратныеСобытия Тогда 
	
		ИзмеренияДаты.Свернуть("Сотрудник, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПорядокРасчетаСтоимостиЕдиницыВремени.Период, ДЕНЬ) КАК ДатаСобытия,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ФизическоеЛицо,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета КАК ТекущееЗначение
		|ИЗ
		|	ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени";
		
		Выборка = Запрос.Выполнить().Выбрать();

		ПорядокПересчетаТарифнойСтавки.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда"));
		СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Строка = ПорядокПересчетаТарифнойСтавки.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из ПорядокПересчетаТарифнойСтавки Цикл
		
		Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ПорядокРасчета = Строка.ПорядокРасчета;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПорядокРасчетаПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц) Экспорт 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
КонецПроцедуры

Процедура СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц) Экспорт 

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"),,
		"ВТЗначенияСовокупныхТарифныхСтавокСотрудников");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация движений по регистрам расчета.

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
		"МенеджерВременныхТаблиц, 
		|Начисления, 
		|НачисленияПоСотрудникам, 
		|ПоказателиНачислений,
		|ОтработанноеВремяПоСотрудникам,
		|Удержания, 
		|УдержанияПоСотрудникам, 
		|ПоказателиУдержаний,
		|УдержанияПоИсполнительнымДокументам, 
		|ПоказателиУдержаний, 
		|НДФЛ, 
		|НДФЛПоСотрудникам, 
		|КорректировкиВыплаты, 
		|КорректировкиВыплатыПоСотрудникам, 
		|ИсчисленныйНДФЛ, 
		|ИсчисленныеВзносы,
		|СтраховыеВзносы,
		|Пособия,
		|ПособияПоУходу";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УчетСреднегоЗаработка.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	ЗаймыСотрудникам.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	СостоянияСотрудников.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриОписанииДанныхДляПроведенияДокумента(ДанныеДляПроведения);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения начислениями и 
// временной таблицей ВТНачисления.
//	
// Параметры:
//		ДанныеДляПроведения
//		Документ
//		ТаблицаНачислений - имя (имена через запятую) табличной части с начислениями, не обязательно, по умолчанию -
//		                    "Начисления".
//		ПолеДатыДействия - поле запроса для получения даты действия, по умолчанию дата действия - месяц 
//				начисления первичного документа, т.е. "Ссылка.МесяцНачисления".
//		ПолеВидаНачисление - строка с именами (через запятую) полей, содержащих вид расчета в каждой из таблиц, по
//		                     умолчанию - Начисление.
//		ПолеВидаНачисленияВШапке - строка с именем поля шапки документа, содержащего вид расчета.
//
Процедура ЗаполнитьНачисления(ДанныеДляПроведения, Документ, ТаблицаНачислений = "Начисления", ПолеДатыДействия = "Ссылка.МесяцНачисления", ПолеВидаНачисления = "Начисление", СписокФизическихЛиц = Неопределено) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	
	// Поля, которые есть не во всех табличных частях, проверяем, и если нет, заменяем на NULL.
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("СуммаВычета", "0");
	НеобязательныеПоля.Вставить("КодВычета", "ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Сторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксСторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("СторнируемыйДокумент", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ДатаНачала", ПолеДатыДействия);
	НеобязательныеПоля.Вставить("ДатаОкончания", "КОНЕЦПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ПериодДействия", "НАЧАЛОПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ГрафикРаботы", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ГрафикРаботыНорма", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВидУчетаВремени", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВремяВЧасах", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ОтработаноДней", "0");
	НеобязательныеПоля.Вставить("ОтработаноЧасов", "0");
	НеобязательныеПоля.Вставить("ОплаченоДней", "0");
	НеобязательныеПоля.Вставить("ОплаченоЧасов", "0");
	НеобязательныеПоля.Вставить("ПериодРегистрацииВремени", "ДАТАВРЕМЯ(1, 1, 1)");
	НеобязательныеПоля.Вставить("РасчетнаяБазаЗаЕдиницуНормыВремени", "0");
	НеобязательныеПоля.Вставить("ФиксСтрока", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксРасчетВремени", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ДокументОснование", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	
	// Составляем текст запроса создания временной таблицы ВТЗаписиНачислений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		// Составляем текст объединения - части запроса.
		ТекстОбъединения = 
			"ВЫБРАТЬ
			|	Начисления.Ссылка КАК ДокументСсылка,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение,
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.ДатаНачала КАК ДатаНачала,
			|	Начисления.ДатаОкончания КАК ДатаОкончания,
			|	Начисления.ДатаДействия КАК ДатаДействия,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ДокументОснование КАК ДокументОснование,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
			|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
			|	Начисления.ОбщийГрафик КАК ОбщийГрафик,
			|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
			|	Начисления.ОтработаноДней КАК ОтработаноДней,
			|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
			|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
			|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
			|	Начисления.Сторно КАК Сторно,
			|	Начисления.ФиксСторно КАК ФиксСторно,
			|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
			|	Начисления.ФиксРасчет КАК ФиксРасчет,
			|	Начисления.ФиксСтрока КАК ФиксСтрока,
			|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
			|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
			|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	Начисления.ОплаченоДней КАК ОплаченоДней,
			|	Начисления.ОплаченоЧасов КАК ОплаченоЧасов,
			|	Начисления.СуммаВычета КАК СуммаВычета,
			|	Начисления.КодВычета КАК КодВычета,
			|	ВЫБОР
			|		КОГДА Начисления.Начисление.ВидОтпуска.ОтпускЯвляетсяЕжегодным
			|			ТОГДА Начисления.Начисление.ВидОтпуска
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|	КОНЕЦ КАК ВидЕжегодногоОтпуска,
			|	Начисления.Начисление.ИспользованиеПериода КАК ИспользованиеПериода
			|ПОМЕСТИТЬ ВТЗаписиНачислений
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка";
		
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли; 
		
		Если Не ПерваяТаблица Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ПОМЕСТИТЬ ВТЗаписиНачислений", "");
		КонецЕсли;
		
		// Проверяем необязательные поля.
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений];
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поле присутствует в метаданных табличной части - не делаем замен.
				Продолжить;
			КонецЕсли;
			Если ИмяПоля <> "ДокументОснование" И МетаданныеДокумента.Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поля нет в табличной части, но оно  присутствует в метаданных документа - заменяем на обращение "через .".
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", "Начисления.Ссылка." + ИмяПоля + " КАК");
			Иначе
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
			КонецЕсли;
		КонецЦикла;
		
		// Выполняем замену параметризуемых имен полей.
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ДатаДействия КАК ДатаДействия", ПолеДатыДействия + " КАК ДатаДействия");
		
		// Подменяем поле начисления и всего, что с ним связано, лишь в случае, если в анализируемой таблице нет поля "по
		// умолчанию".
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Начисление") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление КАК Начисление", ПолеВидаНачисления + " КАК Начисление");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ВидОтпуска", ПолеВидаНачисления + ".ВидОтпуска");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ИспользованиеПериода", ПолеВидаНачисления + ".ИспользованиеПериода");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	СкорректироватьПериодВТНачислений(ДанныеДляПроведения.МенеджерВременныхТаблиц, "ВТЗаписиНачислений");
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении начислений по источникам финансирования.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	РаспределениеНачислений.Территория КАК Территория,
			|	РаспределениеНачислений.СтатьяФинансирования,
			|	РаспределениеНачислений.СтатьяРасходов,
			|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
			|	РаспределениеНачислений.ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияСРаспределением
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеРезультатовНачислений КАК РаспределениеНачислений
			|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
			|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовНачислений", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовНачислений");
		Запрос.Выполнить();
	Иначе
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация) Тогда
			// Извлекаем данные из табличной части с распределением.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория,
				|	СУММА(Распределение.Результат) КАК Результат,
				|	СУММА(Распределение.СуммаВычета) КАК СуммаВычета
				|ПОМЕСТИТЬ ВТРаспределениеПоТерриториям
				|ИЗ
				|	#ТаблицаРаспределения КАК Распределение
				|ГДЕ
				|	Распределение.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
			Запрос.Выполнить();
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
				|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
				|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
				|	ЛОЖЬ КАК ОблагаетсяЕНВД,
				|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
				|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
				|	ЗаписиНачислений.Сторно
				|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
				|	ВЫБОР
				|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
				|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
				|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
				|			ТОГДА РаспределениеНачислений.Территория
				|		ИНАЧЕ ЗаписиНачислений.Подразделение
				|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
				|	ЗаписиНачислений.*
				|ПОМЕСТИТЬ ВТНачисленияСРаспределением
				|ИЗ
				|	ВТЗаписиНачислений КАК ЗаписиНачислений
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
				|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
			Запрос.Выполнить();
		Иначе
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
				|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
				|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
				|	ЛОЖЬ КАК ОблагаетсяЕНВД,
				|	ЗаписиНачислений.Сумма КАК Сумма,
				|	ЗаписиНачислений.СуммаВычета КАК СуммаВычета,
				|	ЗаписиНачислений.Сторно
				|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
				|	ЗаписиНачислений.*
				|ПОМЕСТИТЬ ВТНачисленияСРаспределением
				|ИЗ
				|	ВТЗаписиНачислений КАК ЗаписиНачислений";
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	// Готовим ВТНачисления
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаписиНачислений.ИдентификаторСтроки,
			|	ЗаписиНачислений.Сотрудник,
			|	ЗаписиНачислений.ПериодДействия,
			|	ЗаписиНачислений.ДатаНачала,
			|	ЗаписиНачислений.ДатаОкончания,
			|	ЗаписиНачислений.Начисление,
			|	ЗаписиНачислений.ДокументОснование,
			|	ЗаписиНачислений.Сумма КАК СуммаДохода,
			|	ЗаписиНачислений.СуммаВычета КАК СуммаВычетаНДФЛ,
			|	ЗаписиНачислений.СуммаВычета КАК СуммаВычетаВзносы,
			|	ЗаписиНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ЗаписиНачислений.Подразделение,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.СторнируемыйДокумент					
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений";
		Запрос.Выполнить();
	Иначе
		// Извлекаем данные из табличной части с распределением.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.Результат,
			|	Распределение.СуммаВычета
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
			|ИЗ
			|	#ТаблицаРаспределения КАК Распределение
			|ГДЕ
			|	Распределение.Ссылка = &Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
		Запрос.Выполнить();
		// Формируем ВТНачисления.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РаспределениеНачислений.ИдентификаторСтроки, ЗаписиНачислений.ИдентификаторСтроки) КАК ИдентификаторСтроки,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК Подразделение,
			|	ЕСТЬNULL(РаспределениеНачислений.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(РаспределениеНачислений.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК СуммаДохода,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычетаНДФЛ,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычетаВзносы,
			|	ЗаписиНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Формируем таблицы для регистрации: 
	
	// 1. Начисления
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений";
	ДанныеДляПроведения.Начисления = Запрос.Выполнить().Выгрузить();
	
	// 2. Начисления с учетом возможного распределения по источникам финансирования.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТНачисленияСРаспределением КАК ЗаписиНачислений";
	ДанныеДляПроведения.НачисленияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Документ);
	ВидыДокументовНачислений = ЗарплатаКадрыРасширенныйПовтИсп.ВидыДокументовНачислений();
	НачисленияРегистрируемыеДокументом = ВидыДокументовНачислений[ВидДокумента];
	Если НачисленияРегистрируемыеДокументом <> Неопределено Тогда
		Для каждого СтрокаТЗ Из ДанныеДляПроведения.НачисленияПоСотрудникам Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДокументОснование) Тогда
				Если НачисленияРегистрируемыеДокументом.Найти(СтрокаТЗ.Начисление)<> Неопределено Тогда
					СтрокаТЗ.ДокументОснование = Документ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ВыделитьСуммуЗаСчетГрантовИзНачислений(ДанныеДляПроведения.МенеджерВременныхТаблиц);
	КонецЕсли;

	// 3. Отработанное время
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений
		|ГДЕ
		|	НЕ(ЗаписиНачислений.ОтработаноДней = 0
		|				И ЗаписиНачислений.ОтработаноЧасов = 0
		|				И ЗаписиНачислений.ОплаченоДней = 0
		|				И ЗаписиНачислений.ОплаченоЧасов = 0)";
	ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 4. Показатели
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение,
		|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
		|ИЗ
		|	#ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиНачислений КАК Начисления
		|		ПО (Начисления.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
		|ГДЕ
		|	ТаблицаПоказателей.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеДляПроведения.ПоказателиНачислений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, ДокументСсылка, ТаблицаУдержаний = "Удержания", СписокФизическихЛиц = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	ИменаТаблицУдержаний = СтрРазделить(ТаблицаУдержаний, ",");
	
	ПерваяТаблица = Истина;
	Для каждого ИмяТаблицыУдержаний Из ИменаТаблицУдержаний Цикл
		
		ТекстЗапросаТаблицы =
			"ВЫБРАТЬ
			|	Удержания.Ссылка КАК ДокументСсылка,
			|	Удержания.ФизическоеЛицо,
			|	Удержания.Сотрудник,
			|	Удержания.Удержание,
			|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
			|	Удержания.Результат КАК Сумма,
			|	Удержания.Результат,
			|	Удержания.ДокументОснование,
			|	Удержания.Получатель,
			|	Удержания.ПлатежныйАгент,
			|	ВЫБОР
			|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|			ТОГДА Удержания.Получатель
			|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|			ТОГДА Удержания.ПлатежныйАгент
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	КОНЕЦ КАК Контрагент,
			|	НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	Удержания.ДатаНачала,
			|	Удержания.ДатаОкончания,
			|	Удержания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	Удержания.ФиксСторно
			|ПОМЕСТИТЬ ВТЗаписиУдержаний
			|ИЗ
			|	#ТаблицаУдержаний КАК Удержания
			|ГДЕ
			|	Удержания.Ссылка = &Ссылка
			|	И Удержания.ФизическоеЛицо В(&СписокФизическихЛиц)";
			
		Если СписокФизическихЛиц = Неопределено Тогда
			ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "И Удержания.ФизическоеЛицо В(&СписокФизическихЛиц)", "");
		КонецЕсли;
		
		ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "#ТаблицаУдержаний", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыУдержаний);
		
		Если Не ПерваяТаблица Тогда
			
			ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "ПОМЕСТИТЬ ВТЗаписиУдержаний", "");
			
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|"
				+ ТекстЗапросаТаблицы;
			
		Иначе
			
			Запрос.Текст = ТекстЗапросаТаблицы;
			ПерваяТаблица = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Выполнить();

	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении удержаний по источникам финансирования.
		ОтражениеЗарплатыВУчетеРасширенный.СоздатьВТУдержанияПоСотрудникамКонтрагент(Запрос.МенеджерВременныхТаблиц, "ВТЗаписиУдержаний");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспределениеУдержаний.Сотрудник,
			|	РаспределениеУдержаний.Подразделение,
			|	РаспределениеУдержаний.СтатьяФинансирования,
			|	РаспределениеУдержаний.СтатьяРасходов,
			|	РаспределениеУдержаний.Результат КАК Сумма,
			|	ЕСТЬNULL(УдержанияПоСотрудникамКонтрагент.Контрагент, ЗаписиУдержаний.Контрагент) КАК Контрагент,
			|	ЗаписиУдержаний.*
			|ПОМЕСТИТЬ ВТУдержанияСРаспределением
			|ИЗ
			|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
			|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияПоСотрудникамКонтрагент КАК УдержанияПоСотрудникамКонтрагент
			|		ПО (ЗаписиУдержаний.ДокументОснование = УдержанияПоСотрудникамКонтрагент.ДокументОснование)
			|			И (ЗаписиУдержаний.ФизическоеЛицо = УдержанияПоСотрудникамКонтрагент.ФизическоеЛицо)
			|			И (ЗаписиУдержаний.Удержание = УдержанияПоСотрудникамКонтрагент.Удержание)
			|			И (ЗаписиУдержаний.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТУдержанияПоСотрудникамКонтрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗаписиУдержаний.Сумма КАК Сумма,
			|	ЗаписиУдержаний.*
			|ПОМЕСТИТЬ ВТУдержанияСРаспределением
			|ИЗ
			|	ВТЗаписиУдержаний КАК ЗаписиУдержаний";
	КонецЕсли;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. Удержания
	Запрос.Текст = 
		"ВЫБРАТЬ * ИЗ ВТЗаписиУдержаний";
	ДанныеДляПроведенияНачисленияЗарплаты.Удержания = Запрос.Выполнить().Выгрузить();
	
	// 2. Удержания с возможным распределением по источникам финансирования.
	Запрос.Текст = 
		"ВЫБРАТЬ * ИЗ ВТУдержанияСРаспределением";
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 3. Удержания по исполнительным документам.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспределениеУдержаний.СтатьяФинансирования,
			|	РаспределениеУдержаний.СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|				ТОГДА РаспределениеУдержаний.Результат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|				ТОГДА РаспределениеУдержаний.Результат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
			|ИЗ
			|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
			|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
			|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
			|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
			|
			|СГРУППИРОВАТЬ ПО
			|	РаспределениеУдержаний.СтатьяФинансирования,
			|	РаспределениеУдержаний.СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|					ТОГДА РаспределениеУдержаний.Результат
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0
			|		ИЛИ СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|					ТОГДА РаспределениеУдержаний.Результат
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|				ТОГДА ЗаписиУдержаний.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|				ТОГДА ЗаписиУдержаний.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
			|ИЗ
			|	ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
			|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
			|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиУдержаний.ДокументОснование,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|					ТОГДА ЗаписиУдержаний.Сумма
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0
			|		ИЛИ СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|					ТОГДА ЗаписиУдержаний.Сумма
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0)";
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоИсполнительнымДокументам = РезультатЗапроса.Выгрузить();
	
	// 4. Показатели
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение,
		|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
		|ИЗ
		|	#ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК Удержания
		|		ПО (Удержания.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
		|ГДЕ
		|	ТаблицаПоказателей.Ссылка = &Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	ДанныеДляПроведенияНачисленияЗарплаты.ПоказателиУдержаний = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения данными НДФЛ.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	УчетНДФЛ.СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА РаспределениеУдержаний.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НалогПоСтавке13
		|ПОМЕСТИТЬ ВТРаспределениеУдержаний
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|ГДЕ
		|	РаспределениеУдержаний.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение КАК ПодразделениеСотрудника,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.НалогПоСтавке13,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТРаспределениеУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНДФЛ КАК НДФЛ
		|		ПО (НДФЛ.Ссылка = РаспределениеУдержаний.Ссылка)
		|			И (НДФЛ.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеСотрудника,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТДанныеНДФЛ КАК НДФЛ";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. НДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеНДФЛ";
	ДанныеДляПроведения.НДФЛ = Запрос.Выполнить().Выгрузить();
	
	// 2. НДФЛ с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТНДФЛПоСотрудникам";
	ДанныеДляПроведения.НДФЛПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения данными КорректировкиВыплаты.
//
// Параметры:
//		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	РасчетЗарплаты.СоздатьВТДанныеКорректировкиВыплатыПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА РаспределениеУдержаний.ВидУдержания В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету))
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КорректировкаВыплаты
		|ПОМЕСТИТЬ ВТРаспределениеУдержаний
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|
		|ГДЕ
		|	РаспределениеУдержаний.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.КорректировкаВыплаты КАК КорректировкаВыплаты,
		|	0 КАК Сумма,
		|	КорректировкиВыплаты.*
		|ПОМЕСТИТЬ ВТКорректировкиВыплатыПоСотрудникам
		|ИЗ
		|	ВТРаспределениеУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКорректировкиВыплаты КАК КорректировкиВыплаты
		|		ПО (КорректировкиВыплаты.Ссылка = РаспределениеУдержаний.Ссылка)
		|			И (КорректировкиВыплаты.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	0 КАК Сумма,
		|	КорректировкиВыплаты.*
		|ПОМЕСТИТЬ ВТКорректировкиВыплатыПоСотрудникам
		|ИЗ
		|	ВТДанныеКорректировкиВыплаты КАК КорректировкиВыплаты";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. КорректировкиВыплаты
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеКорректировкиВыплаты";
	ДанныеДляПроведения.КорректировкиВыплаты = Запрос.Выполнить().Выгрузить();
	
	// 2. КорректировкиВыплаты с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТКорректировкиВыплатыПоСотрудникам";
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения страховыми взносами.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	РасчетЗарплатыБазовый.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

// Добавляет в ДанныеДляПроведения таблицы значений с данными начислений по договорам,
// а также временную таблицу ВТНачисленияПоДоговорам.
//
Процедура ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведения, РеквизитыДляПроведения, СписокФизическихЛиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
		
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли;
	
	МетаданныеДокумента = РеквизитыДляПроведения.Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка.Организация,
	|	Начисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	Начисления.Ссылка КАК ДокументСсылка,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	Начисления.Результат КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.ДокументОснование КАК Договор,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
	|ИЗ
	|	#ТаблицаНачислений КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", ИмяДокумента + ".НачисленияПоДоговорам");
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	Запрос.Выполнить();
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		// Дополнить данными о распределении начислений по источникам финансирования.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
		|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
		|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|			ТОГДА РаспределениеНачислений.Территория
		|		ИНАЧЕ ЗаписиНачислений.Подразделение
		|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
		|	РаспределениеНачислений.Территория КАК Территория,
		|	РаспределениеНачислений.СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеНачислений.ОблагаетсяЕНВД,
		|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаРаспределения КАК РаспределениеНачислений
		|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
		|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", ИмяДокумента + ".РаспределениеРезультатовНачислений");
		
		Запрос.Выполнить();
		
	Иначе
		
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(РеквизитыДляПроведения.Организация) Тогда
			// Извлекаем данные из табличной части с распределением.
			Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТРаспределениеПоТерриториям") = Неопределено Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория,
				|	СУММА(Распределение.Результат) КАК Результат,
				|	СУММА(Распределение.СуммаВычета) КАК СуммаВычета
				|ПОМЕСТИТЬ ВТРаспределениеПоТерриториям
				|ИЗ
				|	#ТаблицаРаспределения КАК Распределение
				|ГДЕ
				|	Распределение.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория";
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", ИмяДокумента + ".РаспределениеПоТерриториямУсловиямТруда");
				Запрос.Выполнить();
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
			|ИЗ
			|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
			Запрос.Выполнить();
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЗаписиНачислений.Сумма КАК Сумма,
			|	ЗаписиНачислений.СуммаВычета КАК СуммаВычета,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
			|ИЗ
			|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений";
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	// создание ВТНачисленияСтраховыеВзносы
	// используется при вызове УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы
	ОтражениеЗарплатыВБухучетеРасширенный.ДанныеДляПроведенияСоздатьВТНачисленияСтраховыеВзносы(Запрос.МенеджерВременныхТаблиц, РеквизитыДляПроведения, "ВТНачисленияСтраховыеВзносы");
	
	// Таблица значений для регистрации в учете 
	// - договоров подряда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорам", Запрос.Выполнить().Выгрузить());
	
	// - В учете начисленной зарплаты.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.СтатьяФинансирования,
	|	НачисленияПоДоговорам.СтатьяРасходов,
	|	НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете,
	|	НачисленияПоДоговорам.ОблагаетсяЕНВД,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета
	|ИЗ
	|	ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорам";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамСРаспределением", Запрос.Выполнить().Выгрузить());
	
	// - В учете НДФЛ.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета,
	|	СУММА(НачисленияПоДоговорам.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорам
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ФизическоеЛицо";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамДляУчетаНДФЛ", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции-конструкторы используемых коллекций.

Функция ОписаниеТиповЧисло()

	ОписаниеТиповЧисло = Новый Структура;
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_3", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло10_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло12_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	
	Возврат ОписаниеТиповЧисло;

КонецФункции

// Конструирует таблицу начислений, аналогичную по структуре таблице расчетного документа.
//
// Параметры:
//	ИспользоватьДляПерерасчета - необязательный, по умолчанию Ложь, 
//		если Истина, будут добавлены колонки, используемые в таблицах НачисленияПерерасчет.
//
Функция ПустаяТаблицаНачисления(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Начисления.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	Начисления.Колонки.Добавить("ГрафикРаботыНорма", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	Начисления.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	Начисления.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Строка", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ОтработаноДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОтработаноЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	Начисления.Колонки.Добавить("КоличествоДетей", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("СуммаВычета", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("ФиксСуммаВычета", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Начисления.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	Начисления.Колонки.Добавить("ЯвляетсяЛьготой", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("СуммаВсегоПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаВсегоПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СтраховойСлучай", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	Начисления.Колонки.Добавить("КоличествоПервыхДетей", ОписаниеТиповЧисло.ТипЧисло7_0);
	
	Если ИспользоватьДляПерерасчета Тогда
		Начисления.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Начисления.Колонки.Добавить("Показатель" + Счетчик);
		Начисления.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Начисления.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	Возврат Начисления;
	
КонецФункции

Функция ПустаяТаблицаНачисленияПоДоговорам() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	НачисленияПоДоговорам = Новый ТаблицаЗначений;
	НачисленияПоДоговорам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияПоДоговорам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДоходаСтраховыеВзносы", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовПоСтраховымВзносам"));
	НачисленияПоДоговорам.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("СуммаВычета", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.АктПриемкиВыполненныхРаботОказанныхУслуг,ДокументСсылка.ДоговорАвторскогоЗаказа, ДокументСсылка.ДоговорРаботыУслуги"));
	НачисленияПоДоговорам.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ПланируемаяДатаВыплаты", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	НачисленияПоДоговорам.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	НачисленияПоДоговорам.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	НачисленияПоДоговорам.Колонки.Добавить("ТерриторииУсловияТруда", Новый ОписаниеТипов("ТаблицаЗначений"));
	НачисленияПоДоговорам.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	
	Возврат НачисленияПоДоговорам;
	
КонецФункции

Функция ПустаяТаблицаПособия(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	Пособия = Новый ТаблицаЗначений;
	Пособия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Пособия.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Пособия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Пособия.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Пособия.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Пособия.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Пособия.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Пособия.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Пособия.Колонки.Добавить("ФинансированиеФедеральнымБюджетом", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом"));
	Пособия.Колонки.Добавить("СтраховойСлучай", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	Пособия.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("КоличествоПервыхДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Пособия.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	
	Если ИспользоватьДляПерерасчета Тогда
		Пособия.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;

	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Пособия.Колонки.Добавить("Показатель" + Счетчик);
		Пособия.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Пособия.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;
	
	Пособия.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));

	Возврат Пособия;
	
КонецФункции

Функция ПустаяТаблицаУдержанияДокумента() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	УдержанияЗаПериод = Новый ТаблицаЗначений;
	УдержанияЗаПериод.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	УдержанияЗаПериод.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	УдержанияЗаПериод.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
	УдержанияЗаПериод.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания") Цикл
		УдержанияЗаПериод.Колонки.Добавить("Показатель" + Счетчик, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		УдержанияЗаПериод.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		УдержанияЗаПериод.Колонки.Добавить("КомандаРасшифровки" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ПредставлениеПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ТочностьПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод);
	
	УдержанияЗаПериод.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	УдержанияЗаПериод.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	// Добавляем поле Месяц для того, чтобы строки из разных месяцев не склеивались.
	УдержанияЗаПериод.Колонки.Добавить("Месяц");
	
	Возврат УдержанияЗаПериод;
	
КонецФункции

Функция ПустаяТаблицаНДФЛДокумента()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторииВыполненияРаботВОрганизации.Тип));
	ТаблицаНДФЛ.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаНДФЛ.Колонки.Добавить("Налог", ОписаниеТиповЧисло.ТипЧисло10_0);
	ТаблицаНДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежей", ОписаниеТиповЧисло.ТипЧисло10_0);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичный", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозврату", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));	
	// 4D:ERP для Беларуси, Яна, 07.09.2017 15:03:07 
	// Локализация документа "Увольнение ", №15180 
	// {
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйВторой", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйВторойКЗачетуВозврату", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйВторойКЗачетуВозвратуКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйВторойКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	// }
	// 4D	
	ТаблицаНДФЛ.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаНДФЛ.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Возврат ТаблицаНДФЛ;
	
КонецФункции

Функция ПустаяТаблицаПримененныеВычетыНДФЛДокумента()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаВычеты = Новый ТаблицаЗначений;
	ТаблицаВычеты.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
	ТаблицаВычеты.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаВычеты.Колонки.Добавить("КодВычетаПредыдущий", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаВычеты.Колонки.Добавить("РазмерВычета", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаВычеты.Колонки.Добавить("РазмерВычетаПредыдущий", ОписаниеТиповЧисло.ТипЧисло12_2);
	Возврат ТаблицаВычеты;
	
КонецФункции

Функция ПустаяТаблицаВзносыДокумента() 
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ПоляВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы());
	
	ТаблицаВзносы = Новый ТаблицаЗначений;
	ТаблицаВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносы.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ТаблицаВзносы.Колонки.Добавить(ИмяПоля, ОписаниеТиповЧисло.ТипЧисло15_2);
	КонецЦикла;
	
	Возврат ТаблицаВзносы;
	
КонецФункции

Функция ПустаяТаблицаПогашениеЗаймов()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаПогашениеЗаймов = Новый ТаблицаЗначений;
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ДоговорЗайма", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("МатериальнаяВыгода", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НалогНаМатериальнуюВыгоду", ОписаниеТиповЧисло.ТипЧисло10_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НачисленоПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеЗайма", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("СтавкаНалогообложенияМатвыгоды", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Возврат ТаблицаПогашениеЗаймов;
	
КонецФункции

Функция ПустаяТаблицаПлановыхНачислений() Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	ТаблицаНачислений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииПлановыхНачислений(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ТаблицаНачислений.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	
	ЗначенияПоказателей.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗначенияПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ЗначенияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ЗначенияПоказателей.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	Возврат ЗначенияПоказателей;
	
КонецФункции

Функция ОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	ДанныеЗаполнения = Новый Структура(
		"Начисления, 
		|НачисленияПерерасчет,
		|НачисленияПоДоговорам, 
		|Пособия, 
		|ПособияПерерасчет,
		|Удержания, 
		|УдержанияПерерасчет, 
		|НДФЛ, 
		|КорректировкиВыплаты, 
		|ПримененныеВычетыНаДетейИИмущественные, 
		|ПогашениеЗаймов, 
		|Взносы");
	
	// По умолчанию это перечислимые коллекции.
	ДанныеЗаполнения.Начисления = Новый ТаблицаЗначений;
	ДанныеЗаполнения.НачисленияПерерасчет = Новый ТаблицаЗначений;
	ДанныеЗаполнения.НачисленияПоДоговорам = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Пособия = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПособияПерерасчет = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Удержания = Новый ТаблицаЗначений;
	ДанныеЗаполнения.УдержанияПерерасчет = Новый Массив;
	ДанныеЗаполнения.НДФЛ = Новый ТаблицаЗначений;
	ДанныеЗаполнения.КорректировкиВыплаты = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПримененныеВычетыНаДетейИИмущественные = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПогашениеЗаймов = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Взносы = Новый ТаблицаЗначений;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Создает таблицу для регистрации движений по регистру ПрименениеПлановыхНачислений.
//
Функция ПустаяТаблицаРегистрацииПримененияПлановыхНачислений() Экспорт
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРегистрации.Колонки.Добавить("Применение", Новый ОписаниеТипов("Булево"));
	ТаблицаРегистрации.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("ПрименениеПоОкончании", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаРегистрации;
	
КонецФункции

// 4D:ERP для Беларуси, Яна, 22.08.2017 15:13:32 
// Результат тестирования конфигурации, №15769
// {
Функция ПустаяТаблицаСотрудниковНачислений() Экспорт
	
	СотрудникиНачисления = Новый ТаблицаЗначений;
	СотрудникиНачисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиНачисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	СотрудникиНачисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	СотрудникиНачисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	СотрудникиНачисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат СотрудникиНачисления;
	
КонецФункции

// Структура для определения дополнительных параметров для расчета данных формы по сотрудникам.
//
Функция ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам() Экспорт
	
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам = Новый Структура(
	    "ОписаниеТаблицы, 
		|СохранятьИсправления, 
		|ИзвестныеЗначенияПоказателейНачислений, 
		|КонтролируемыеПоля, 
		|ИсключатьСтрокиПолностьюВытесненныхНачислений, 
		|РежимПересчетаНДФЛ, 
		|РежимПересчетаВзносов,
		|РаспределениеРезультатов,
		|ДанныеРаспределенияПоТерриториямУсловиямТруда,
		|РассчитыватьНДФЛБезусловно,
		|ОкончательныйРасчетНДФЛ");
		
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.СохранятьИсправления = Истина;	
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.ИсключатьСтрокиПолностьюВытесненныхНачислений = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РежимПересчетаНДФЛ = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РежимПересчетаВзносов = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РассчитыватьНДФЛБезусловно = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.ОкончательныйРасчетНДФЛ = Ложь;
	
	Возврат ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам;
	
КонецФункции

// Выполняет расчет данных формы по отдельным сотрудникам.
// Используется 
// - при редактировании содержимого таблиц документа, например, при изменении значений показателей,
// - при отмене исправлений.
//
// Параметры:
//	Сотрудники - массив сотрудников или ссылка на одного сотрудника.
//	Форма
//	ОписаниеДокумента - см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента().
//  ДополнительныеПараметры - необязательный, структура, см. ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам().
Процедура РассчитатьДанныеФормыПоСотрудникам(Знач СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ДополнительныеПараметры = Неопределено, ОписаниеТаблицы = Неопределено, СохранятьИсправления = Истина, ИзвестныеЗначенияПоказателейНачислений = Неопределено, КонтролируемыеПоля = Неопределено, ИсключатьСтрокиПолностьюВытесненныхНачислений = Ложь) Экспорт
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(Форма, ОписаниеДокумента, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Флаги выполняемых действия при заполнении
	РассчитыватьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	РассчитыватьНачисления = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияИмя <> Неопределено;
	РассчитыватьПособия =  Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПособияИмя <> Неопределено;
	РассчитыватьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	РассчитыватьЛьготы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	// 4D:ERP для Беларуси, Яна, 24.07.2017 11:01:13 
	// Ошибка "Поле объекта не обнаружено (контролируемые поля)", №15532 
	// { 
	Если ДополнительныеПараметры <> Неопределено Тогда
		КонтролируемыеПоля = ДополнительныеПараметры.КонтролируемыеПоля; 	
		ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
		СохранятьИсправления = ДополнительныеПараметры.СохранятьИсправления;	
		ИзвестныеЗначенияПоказателейНачислений = ДополнительныеПараметры.ИзвестныеЗначенияПоказателейНачислений; 
		ИсключатьСтрокиПолностьюВытесненныхНачислений = ДополнительныеПараметры.ИсключатьСтрокиПолностьюВытесненныхНачислений;
	КонецЕсли;
	// }
	// 4D
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ДокументСсылка = Объект.Ссылка;
	
	Если КонтролируемыеПоля = Неопределено Тогда
		КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	КонецЕсли;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
	Если ВедущиеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", Физлица);
	
	// Накапливаем данные ведущих коллекций для расчета зависимых.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИменаВТ = Новый Массив;
	
	ПричинаИзменений = Неопределено;
	Если ОписаниеТаблицы <> Неопределено Тогда
		ПричинаИзменений = ОписаниеТаблицы.ИмяТаблицы;
	КонецЕсли;
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	// Прежде всего рассчитываем записи перерасчета.
	Если РассчитыватьНачисленияПерерасчет И ТипЗнч(Объект) = Тип("Структура") 
		И Не Объект.Свойство(ОписаниеДокумента.НачисленияПерерасчетИмя) Тогда 
		РассчитыватьНачисленияПерерасчет = Ложь;
	КонецЕсли;
	
	ПараметрыРасчета = ДополнительныеПараметрыРасчетаНачислений();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
	ПараметрыРасчета.МесяцНачисления = МесяцНачисления;
	ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей(, ДокументСсылка);
	ПараметрыРасчета.ДанныеФормыОбъект = Объект;
	Если Объект.Свойство("РаспределениеПоТерриториямУсловиямТруда") Тогда
		ПараметрыРасчета.РаспределениеПоТерриториямУсловиямТруда = Объект.РаспределениеПоТерриториямУсловиямТруда;
	КонецЕсли;
	
	// Отбираем строки по физическим лицам.
	Если РассчитыватьНачисленияПерерасчет Тогда
		
		СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПерерасчетИмя], "Сотрудник", Сотрудники);
		// Отбираем строки по физическим лицам.
		СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПерерасчетИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей();
		Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет").Найти(ПричинаИзменений) <> Неопределено 
			Или ПричинаИзменений = Неопределено Тогда
			РассчитатьНачисления(СтрокиНачисления, ПараметрыРасчета);
		Иначе
			// Начисления регистрируются в системе в процессе расчета (это необходимо для целей расчета)
			// если же начисления не пересчитываются, то для целей расчета удержаний например, 
			// нужно принудительно сформировать движения.
			Начисления = ПустаяТаблицаНачисления();
			СтрокиЗаполнениеФизическихЛиц = Новый Массив;
			СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
			Для Каждого СтрокаНачисления Из СтрокиНачисленийПоФизическимЛицам Цикл
				// Заполняем коллекцию для формирования движений.
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Сумма = СтрокаНачисления.Результат;
				// Собираем данные для заполнения физических лиц.
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					СтрокиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока);
					СотрудникиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			// Заполняем физических лиц в коллекции.
			ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
			// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
			УстановитьПривилегированныйРежим(Истина);
			СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления, , Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// Заполняем базовые данные и менеджер временных таблиц.
		ПараметрыСоздатьВТНачисления = ДополнительныеПараметрыСоздатьВТНачисления();
		ПараметрыСоздатьВТНачисления.Начисления = СтрокиНачисленийПоФизическимЛицам;
		ПараметрыСоздатьВТНачисления.РаспределениеПоТерриториямУсловиямТруда = ПараметрыРасчета.РаспределениеПоТерриториямУсловиямТруда;
		ПараметрыСоздатьВТНачисления.ИмяВТ = "ВТНачисленияПерерасчет";
		СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ПараметрыСоздатьВТНачисления);
		
	КонецЕсли;
	
	// Расчет начислений
	ПланируемаяДатаВыплаты = НачалоДня(КонецМесяца(МесяцНачисления));
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		ПланируемаяДатаВыплаты = Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя];
	КонецЕсли;
		
	Если РассчитыватьНачисления Тогда

		СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник", Сотрудники);
		
		// Отбираем строки по физическим лицам.
		СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		ПараметрыРасчета.ОбщиеЗначения = Новый Структура;
		Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект[ОписаниеДокумента.ВидНачисленияИмя]);
			ПараметрыРасчета.КоличествоПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
			ПараметрыРасчета.ОбщиеЗначения.Вставить("Начисление", Объект[ОписаниеДокумента.ВидНачисленияИмя]);
			
		КонецЕсли;
		Если ОписаниеДокумента.ПериодДействияВШапке Тогда
			ПараметрыРасчета.ОбщиеЗначения.Вставить("ДатаНачала", НачалоМесяца(МесяцНачисления));
			Если ОписаниеДокумента.ДатаНачалаИмя <> Неопределено Тогда
				ПараметрыРасчета.ОбщиеЗначения.Вставить("ДатаНачала", Объект[ОписаниеДокумента.ДатаНачалаИмя]);
			КонецЕсли;
			ПараметрыРасчета.ОбщиеЗначения.Вставить("ДатаОкончания", КонецМесяца(МесяцНачисления));
			
			Если ОписаниеДокумента.ДатаОкончанияИмя <> Неопределено Тогда
				ПараметрыРасчета.ОбщиеЗначения.Вставить("ДатаОкончания", Объект[ОписаниеДокумента.ДатаОкончанияИмя]);		
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.НачалоБазовогоПериодаИмя <> Неопределено Тогда
			ПараметрыРасчета.ОбщиеЗначения.Вставить("НачалоБазовогоПериода", Объект[ОписаниеДокумента.НачалоБазовогоПериодаИмя]);
		КонецЕсли;
		
		// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
		ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
		ПараметрыРасчета.ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателейНачислений;
		Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет").Найти(ПричинаИзменений) <> Неопределено 
			Или ПричинаИзменений = Неопределено Тогда    	
			РассчитатьНачисления(СтрокиНачисления, ПараметрыРасчета);
			РассчитатьНачисления(СтрокиНачисления, ПараметрыРасчета);

		Иначе
			// Начисления регистрируются в системе в процессе расчета (это необходимо для целей расчета)
			// если же начисления не пересчитываются, то для целей расчета удержаний например, 
			// нужно принудительно сформировать движения.
			Начисления = ПустаяТаблицаНачисления();
			СтрокиЗаполнениеФизическихЛиц = Новый Массив;
			СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
			Для Каждого СтрокаНачисления Из СтрокиНачисленийПоФизическимЛицам Цикл
				// Заполняем коллекцию для формирования движений.
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				//ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРасчета.ОбщиеЗначения);
				НоваяСтрока.Сумма = СтрокаНачисления.Результат;
				// Собираем данные для заполнения физических лиц.
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					СтрокиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока);
					СотрудникиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			// Заполняем физических лиц в коллекции.
			ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
			// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
			УстановитьПривилегированныйРежим(Истина);
			СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления, , Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.НачисленияИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
			// ..И заново перезаполняем массив строк.
			СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		КонецЕсли;
		ЗаполнитьЗначенияВычетов(СтрокиНачисленийПоФизическимЛицам, Организация, ДокументСсылка, ПланируемаяДатаВыплаты, ПараметрыРасчета.ОбщиеЗначения);
	КонецЕсли;
	
	// Расчет начислений по таблице пособий.
	Если РассчитыватьПособия Тогда
		СтрокиПособий = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ПособияИмя], "Сотрудник", Сотрудники);
		
		// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
		ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
		ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей("Пособия");	
		РассчитатьНачисления(СтрокиПособий, ПараметрыРасчета);
		
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.ПособияИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		КонецЕсли;
		// Отбираем строки по физическим лицам.
		СтрокиПособийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ПособияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		// Объединяем строки пособий со строками начислений.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисленийПоФизическимЛицам, СтрокиПособийПоФизическимЛицам);
	КонецЕсли;
	
	// Расчет начислений по таблице льгот.
	Если РассчитыватьЛьготы Тогда
		СтрокиЛьгот = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ЛьготыИмя], "Сотрудник", Сотрудники);
		
		// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
		ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
		ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей();
		РассчитатьНачисления(СтрокиЛьгот, ПараметрыРасчета);
		
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.ЛьготыИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		КонецЕсли;
		// Отбираем строки по физическим лицам.
		СтрокиЛьготПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ЛьготыИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		ЗаполнитьЗначенияВычетов(СтрокиЛьготПоФизическимЛицам, Организация, ДокументСсылка, ПланируемаяДатаВыплаты);	
		// Объединяем строки пособий со строками начислений.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисленийПоФизическимЛицам, СтрокиЛьготПоФизическимЛицам);
	КонецЕсли;
	
	// Заполняем базовые данные и менеджер временных таблиц.
	Если РассчитыватьНачисления Тогда
		ПараметрыСоздатьВТНачисления = ДополнительныеПараметрыСоздатьВТНачисления();
		ПараметрыСоздатьВТНачисления.Начисления = СтрокиНачисленийПоФизическимЛицам;
		ПараметрыСоздатьВТНачисления.РаспределениеПоТерриториямУсловиямТруда = ПараметрыРасчета.РаспределениеПоТерриториямУсловиямТруда;
		
		СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ПараметрыСоздатьВТНачисления);
	КонецЕсли;
	
	// Договоры подряда не пересчитываются, но участвуют в качестве исходных данных при последующих расчетах.
	Если РассчитыватьНачисленияПоДоговорамПодряда Тогда
		СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПоДоговорамИмя], "Сотрудник", Сотрудники);
		Если СтрокиНачисления.Количество() > 0 Тогда
			СоздатьВТНачисленияПоДоговорам(МенеджерВременныхТаблиц, СтрокиНачисления, ИменаВТ, Сотрудники);
			// Регистрируем данные о начислениях по договорам, 
			// если далее потребуется расчет удержаний по исполнительным листам.
			ЗарегистрироватьНачисленияПоДоговорам(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеДокумента.ЕстьПрочиеНачисления Тогда
		ПрочиеНачисления = Форма.ПрочиеНачисленияДокумента();
		Если ПрочиеНачисления.Количество() > 0 Тогда
			СоздатьВТПрочиеНачисления(МенеджерВременныхТаблиц, ПрочиеНачисления, ИменаВТ, Сотрудники);
			// Регистрируем данные о прочих начислениях.
			ЗарегистрироватьПрочиеНачисления(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
	ПараметрыДляРаспределения.РаспределятьНачисления = Истина;
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ОписаниеТаблицы, НаборыЗаписей, ПараметрыДляРаспределения);
	
	// Готовим менеджер временных таблиц с базовыми данными.
	СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ИменаВТ,
	РассчитыватьВзносы И МесяцНачисления < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР(), Физлица);
	
	ПорядокВыплаты = Неопределено;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	Если РассчитыватьУдержания Или Не ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		
		// Если есть взносы - рассчитать взносы.
		// Формируем доходы и рассчитываем взносы.
		Если РассчитыватьВзносы Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			// Формируем доходы в любом случае.
			СформироватьДоходыДляРасчетаСтраховыхВзносов(
			Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, ПараметрыДляРаспределения.НачисленияСРаспределениемПоСтатьям);
			
			// Пересчитываем взносы только в случае изменения ведущих коллекций.
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено Тогда
				Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
				ЗаменитьСтрокиВзносов(Объект[ОписаниеДокумента.ВзносыИмя], Взносы, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, СохранятьИсправления);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		// Расчет удержаний, влияющих на расчет НДФЛ (ДСВ и пр.).
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			
			// Отбор строк по физическим лицам.
			СтрокиУдержания = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.УдержанияИмя], "ФизическоеЛицо", Физлица);
			// Расчет только ДСВ
			// Раскладываем строки в отдельные коллекции.
			СтрокиУдержанийПоРолям = Новый Соответствие;
			СтрокиУдержанийПоРолям.Вставить(Перечисления.КатегорииУдержаний.ДСВ, Новый Массив);
			СтрокиУдержанийПоРолям.Вставить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ, Новый Массив);
			РазложитьСтрокиУдержанийПоРолям(СтрокиУдержания, СтрокиУдержанийПоРолям);
				
			// Составляем массив строк по отдельным ролям.
			РассчитываемыеСтроки = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ДСВ]);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ]);
			
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,Удержания").Найти(ПричинаИзменений) <> Неопределено 
				Или ПричинаИзменений = Неопределено Тогда
				РассчитатьУдержания(
				РассчитываемыеСтроки, 
				Организация, 
				МесяцНачисления, 
				ДокументСсылка, 
				МенеджерВременныхТаблиц, 
				ИменаВТ,
				Объект);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет НДФЛ
		//Если ОписаниеДокумента.НДФЛИмя <> Неопределено И Не РежимПересчетаВзносов Тогда
		Если ОписаниеДокумента.НДФЛИмя <> Неопределено Тогда
			
			//НаборыЗаписейДоходыНДФЛ = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			//СформироватьДоходыНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, ПланируемаяДатаВыплаты, НаборыЗаписейДоходыНДФЛ);
			УстановитьПривилегированныйРежим(Истина);
			//Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,Удержания").Найти(ПричинаИзменений) <> Неопределено
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,Удержания,НДФЛ").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено Тогда
				//РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, ПланируемаяДатаВыплаты);
				РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, Ложь, Не РассчитыватьУдержания, ПланируемаяДатаВыплаты);
				ЗаменитьСтрокиНДФЛ(Объект[ОписаниеДокумента.НДФЛИмя], РезультатРасчетаНДФЛ.НДФЛ, Объект[ОписаниеДокумента.ПримененныеВычетыИмя], РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, СохранятьИсправления);
				//ПараметрыДляРаспределения.НДФЛИзменился = Истина;
				ПараметрыДляРаспределения.НДФЛРассчитывался = Истина;
			КонецЕсли;
			// Очищаем доходы НДФЛ.
			СтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НДФЛИмя], "ФизическоеЛицо", Физлица);
			РегистрацияНДФЛ = УчетНачисленнойЗарплаты.ПустаяТаблицаРегистрацииНДФЛ();
			Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
				НоваяСтрока = РегистрацияНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
				НоваяСтрока.Сумма = СтрокаНДФЛ.Налог - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей;
				НоваяСтрока.СуммаКорректировкиВыплаты = СтрокаНДФЛ.НалогКЗачетуВозврату;
			КонецЦикла;
			// Регистрируем НДФЛ, если далее нужно считать удержания по исполнительным листам.
			ЗарегистрироватьНДФЛ(НаборыЗаписей, РегистрацияНДФЛ, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		// Расчет остальных удержаний
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			
			// Рассчитать все, кроме ДСВ (удержания по исполнительным документам и др.).
			//Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,НДФЛ,Удержания").Найти(ПричинаИзменений) <> Неопределено
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,НДФЛ,Удержания").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено Тогда
				РассчитатьУдержания(
				СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ПустаяСсылка()], 
				Организация, 
				МесяцНачисления, 
				ДокументСсылка, 
				МенеджерВременныхТаблиц, 
				ИменаВТ,
				Объект);
			КонецЕсли;
			// Строки с удержаниями, результат которых равен нулю, - удаляем, 
			// делаем это только для документов, заполняющихся полным составом начислений.
			Если Не ЗначениеЗаполнено(ПорядокВыплаты) Тогда
				УдалитьНулевыеУдержания(Объект[ОписаниеДокумента.УдержанияИмя], Организация, МесяцНачисления, СтрокиУдержания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДляРаспределения.РаспределятьНачисления = Ложь;
	ПараметрыДляРаспределения.РаспределятьУдержания = Истина;
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ОписаниеТаблицы, НаборыЗаписей, ПараметрыДляРаспределения);
		
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДоходыДляРасчетаСтраховыхВзносов(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, НачисленияСРаспределениемПоЕНВД, НаборыЗаписей = Неопределено)
	
	// Для формирования доходов создаем временную ссылку на документ и коллекцию наборов записей.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	Если ИменаВТ.Найти("ВТНачисления") <> Неопределено Тогда
		// Формирование доходов по начислениям.
		ОтражениеЗарплатыВБухучете.ДополнитьНачисленияДаннымиОЕНВД(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ДокументСсылка, НачисленияСРаспределениемПоЕНВД, Истина);
		УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, МенеджерВременныхТаблиц, Истина, Истина, ДокументСсылка);
	КонецЕсли;
	
	// Формирование доходов по начислениям по договорам.
	Если ИменаВТ.Найти("ВТНачисленияПоДоговорам") <> Неопределено Тогда
		ПараметрыВТ = Новый Структура;
		ПараметрыВТ.Вставить("ИмяВременнойТаблицыИсточник", "ВТНачисленияПоДоговорам");
		ПараметрыВТ.Вставить("ИмяВременнойТаблицы", "ВТНачисленияСтраховыеВзносы");
		
		ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьНачисленияПоДоговорамПоВидамДеятельностиЕНВДСоздатьВременнуюТаблицу(
			Организация, МесяцНачисления, МенеджерВременныхТаблиц, ПараметрыВТ);
		СведенияОДоходахСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы(
			Организация, МесяцНачисления, МенеджерВременныхТаблиц);
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(
			НаборыЗаписей, Неопределено, Организация, МесяцНачисления, СведенияОДоходахСтраховыеВзносы, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСтрокиВзносов(ОбновляемаяКоллекция, СтрокиОбновления, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок = Неопределено, СохранятьИсправления = Истина)
	
	УсловияЗаменыСтрок = Неопределено;
	
	// Обновление строк таблицы Взносы.
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ВзносыИмя);
	КонецЕсли;
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, СтрокиОбновления, "ФизическоеЛицо", УсловияЗаменыСтрок, ОтборСтрок);
	
КонецПроцедуры

// Расчет удержаний
// Важно. Перед вызовом метода следует начать транзакцию, которую потом отменить. 
//
//Процедура РассчитатьУдержания(УдержанияЗаПериод, ПараметрыРасчета, Рассчитывать = Истина)
Процедура РассчитатьУдержания(УдержанияЗаПериод, Организация, МесяцУдержания, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ДанныеФормыОбъект = Неопределено)
	
	Если УдержанияЗаПериод = Неопределено 
		Или УдержанияЗаПериод.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для расчета удержаний
	// - заполняем коллекцию для формирования движений:
	//	* удержания
	//	* начисления по договорам
	//	* НДФЛ
	//	* начисления уже записаны при расчете начислений
	// - расставляем идентификаторы строк
	// - «упаковываем» значения показателей
	// - записываем записи набора
	// - выполняем запрос к регистру расчета, обходим результат, выполняя расчет результата
	// - заполняем строки исходной коллекции
	
	МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	
	//Организация = ПараметрыРасчета.Организация;
	//МесяцУдержания = ПараметрыРасчета.МесяцУдержания;
	//ДокументСсылка = ПараметрыРасчета.ДокументСсылка;
	//РегистраторыНачислений = ПараметрыРасчета.РегистраторыНачислений;
	//
	//// Наборы записей могут не быть определены.
	//НаборыЗаписей = ПараметрыРасчета.НаборыЗаписей;
	//Если НаборыЗаписей = Неопределено Тогда
	//	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	//КонецЕсли;
	
	//ВременнаяСсылка = НаборыЗаписей["Удержания"].Отбор.Регистратор.Значение;
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(МетаданныеДокумента, ВременнаяСсылка);
	
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("ФизическоеЛицо");
	Удержания.Колонки.Добавить("Удержание");
	Удержания.Колонки.Добавить("ДокументОснование");
	Удержания.Колонки.Добавить("Получатель");
	Удержания.Колонки.Добавить("ПлатежныйАгент");
	Удержания.Колонки.Добавить("Сумма");
	Удержания.Колонки.Добавить("ДатаНачала");
	Удержания.Колонки.Добавить("ДатаОкончания");
	Удержания.Колонки.Добавить("ФиксРасчет");
	Удержания.Колонки.Добавить("ФиксЗаполнение");
	Удержания.Колонки.Добавить("ИдентификаторСтроки");
	
	// Специализированные показатели рассчитываются отдельно.
	РасчетПереопределяемыхПоказателей = ТаблицаРасчетаПереопределяемыхПоказателей();
	
	ИдентификаторСтроки = 1;
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	Для Каждого СтрокаДанных Из УдержанияЗаПериод Цикл
		НоваяСтрока = Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаДанных.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		НоваяСтрока.Сумма = СтрокаДанных.Результат;
		// Упаковываем показатели
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания");
		ПоказателиВидаРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(НоваяСтрока.Удержание).Показатели;
		ПереопределяемыеПоказатели = Новый Массив;
		УпаковатьЗначенияПоказателей(
			СтрокаДанных, 
			ИдентификаторСтроки, 
			ИсходныеДанныеПоИдентификаторуСтроки, 
			ПоказателиВидаРасчета, 
			КоличествоПоказателей, 
			ПереопределяемыеПоказатели);
		// Если встречаются переопределяемые показатели, откладываем их в отдельную таблицу.
		Для Каждого ПереопределяемыйПоказатель Из ПереопределяемыеПоказатели Цикл
			СтрокаПоказателя = РасчетПереопределяемыхПоказателей.Добавить();
			СтрокаПоказателя.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			СтрокаПоказателя.Организация = Организация;
			СтрокаПоказателя.Показатель = ПереопределяемыйПоказатель;
			СтрокаПоказателя.ВидРасчета = СтрокаДанных.Удержание;
			СтрокаПоказателя.ДатаНачала = СтрокаДанных.ДатаНачала;
			СтрокаПоказателя.ДатаОкончания = СтрокаДанных.ДатаОкончания;
			СтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтроки;
			СтрокаПоказателя.Регистратор = ВременнаяСсылка;
		КонецЦикла;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Регистрируем данные удержаний.
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцУдержания, Удержания, , Истина);
	УстановитьПривилегированныйРежим(Ложь);
		
	// Рассчитываем значения отдельных показателей.
	РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка);
	
	// Расставляем значения переопределяемых показателей в структурах исходных данных.
	Для Каждого СтрокаРасчета Из РасчетПереопределяемыхПоказателей Цикл
		Если СтрокаРасчета.ЗначениеРассчитано Тогда
			ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			ИсходныеДанные.Вставить(ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(СтрокаРасчета.Показатель), СтрокаРасчета.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Составляем соответствие строк для более быстрого поиска.
	СтрокиНабора = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборыЗаписей.Удержания Цикл
		СтрокиНабора.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
	КонецЦикла;
	
	// Составляем таблицу уже удержанных сумм для того, чтобы рассчитывать удержания в целом за месяц.
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Удержания.ВидРасчета.ТребуетсяРасчетБазы
	|			ТОГДА НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
	|		ИНАЧЕ Удержания.ПериодРегистрации
	|	КОНЕЦ КАК Месяц,
	|	Удержания.Организация,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.ВидРасчета
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &ВременныйРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержаноЗаМесяц.Месяц,
	|	УдержаноЗаМесяц.Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета,
	|	СУММА(УдержаноЗаМесяц.Удержано) КАК Удержано
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.Период, МЕСЯЦ) КАК Месяц,
	|		УдержаноЗаМесяц.Организация.ГоловнаяОрганизация КАК Организация,
	|		УдержаноЗаМесяц.ФизическоеЛицо КАК ФизическоеЛицо,
	|		УдержаноЗаМесяц.НачислениеУдержание КАК ВидРасчета,
	|		УдержаноЗаМесяц.СуммаОборот КАК Удержано
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|				&НачалоПериода,
	|				&ОкончаниеПериода,
	|				Месяц,
	|				(Организация.ГоловнаяОрганизация, ФизическоеЛицо, НачислениеУдержание) В
	|					(ВЫБРАТЬ
	|						Удержания.Организация,
	|						Удержания.ФизическоеЛицо,
	|						Удержания.ВидРасчета
	|					ИЗ
	|						ВТУдержания КАК Удержания)) КАК УдержаноЗаМесяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(УдержаноПоДокументу.Период, МЕСЯЦ),
	|		УдержаноПоДокументу.Организация.ГоловнаяОрганизация,
	|		УдержаноПоДокументу.ФизическоеЛицо,
	|		УдержаноПоДокументу.НачислениеУдержание,
	|		-УдержаноПоДокументу.Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК УдержаноПоДокументу
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержания КАК Удержания
	|			ПО УдержаноПоДокументу.Организация.ГоловнаяОрганизация = Удержания.Организация
	|				И УдержаноПоДокументу.ФизическоеЛицо = Удержания.ФизическоеЛицо
	|				И УдержаноПоДокументу.НачислениеУдержание = Удержания.ВидРасчета
	|				И (Удержания.Месяц = НАЧАЛОПЕРИОДА(УдержаноПоДокументу.Период, МЕСЯЦ))
	|				И (УдержаноПоДокументу.Регистратор = &Регистратор)) КАК УдержаноЗаМесяц
	
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержаноЗаМесяц.Месяц,
	|	УдержаноЗаМесяц.Организация,
	|	УдержаноЗаМесяц.ФизическоеЛицо,
	|	УдержаноЗаМесяц.ВидРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременнаяСсылка);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцУдержания));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(МесяцУдержания));
	УдержанныеСуммы = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеФормыОбъект", ДанныеФормыОбъект);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("МесяцНачисления", МесяцУдержания);
	
	// Выбираем записи и рассчитываем их в соответствии с очередностью расчета, 
	// которая предопределена ролью удержания.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	РегистрРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ВидРасчета.ОчередностьРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		РассчитатьУдержанияОчередности(ДокументСсылка, Выборка.ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДополнительныеПараметры, ИсходныеДанныеПоИдентификаторуСтроки, УдержанныеСуммы);
		УстановитьПривилегированныйРежим(Истина);
		НаборыЗаписей.Удержания.Записать(Истина, Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
	// Перенос результата расчета в УдержанияЗаПериод.
	Для Каждого СтрокаДанных Из УдержанияЗаПериод Цикл
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаДанных.ИдентификаторСтрокиВидаРасчета];
		РаспаковатьЗначенияПоказателей(СтрокаДанных, КоличествоПоказателей, ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержанияОчередности(ДокументСсылка, ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДополнительныеПараметры, ИсходныеДанныеПоИдентификаторуСтроки, УдержанныеСуммы)
	
	// Месяцем удержания считаем месяц базового периода удержания.
	
	// Расчетная база удержания в общем случае складывается из трех составляющих:
	// 1) начисления, зарегистрированные в месяце удержания, период действия которых совпадает с периодом регистрации,
	// 2) начисления, зарегистрированные в месяце удержания, период действия которых больше периода регистрации (например,
	// будущий отпуск)
	// 3) начисления, зарегистрированные в месяце удержания, период действия которых меньше периода регистрации (например,
	// больничный за прошлый месяц).
	
	// Включаем части расчетной базы в следующие группы удержаний
	// - для удержаний, которые начинаются в текущем месяце, включаем только 1 и 2 части
	// - для удержаний, которые заканчиваются в текущем месяце, включаем только 1 и 3 части
	// - для остальных удержаний, включаем все части.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеНачисления.Ссылка КАК Удержание,
	|	БазовыеНачисления.ВидРасчета КАК Начисление
	|ПОМЕСТИТЬ ВТБазовыеНачисления
	|ИЗ
	|	ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.НомерСтроки,
	|	Удержания.ВидРасчета,
	|	Удержания.Организация,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.ИдентификаторСтроки,
	|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания,
	|	Удержания.БазовыйПериодНачало,
	|	Удержания.БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА Удержания.БазовыйПериодНачало > НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Начинается,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Заканчивается
	|ПОМЕСТИТЬ ВТУдержанияПоБазе
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &ВременныйРегистратор
	|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|	И Удержания.ВидРасчета.ТребуетсяРасчетБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетнаяБазаУдержаний.НомерСтроки,
	|	РасчетнаяБазаУдержаний.БазовоеНачисление,
	|	РасчетнаяБазаУдержаний.КатегорияБазовогоНачисления,
	|	СУММА(РасчетнаяБазаУдержаний.РасчетнаяБаза) КАК РасчетнаяБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБаза
	|ИЗ
	|	(ВЫБРАТЬ
	|		УдержанияБаза.НомерСтроки КАК НомерСтроки,
	|		УдержанияБаза.ВидРасчетаРазрез КАК БазовоеНачисление,
	|		УдержанияБаза.ВидРасчетаРазрез.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияБазовогоНачисления,
	|		УдержанияБаза.РезультатБаза КАК РасчетнаяБаза
	|	ИЗ
	|		РегистрРасчета.Удержания.БазаНачисления(
	|				&ИзмеренияОсновногоРегистра,
	|				&ИзмеренияБазовогоРегистра,
	|				&Разрезы,
	|				Регистратор = &ВременныйРегистратор
	|					И НомерСтроки В
	|						(ВЫБРАТЬ
	|							ВТУдержанияПоБазе.НомерСтроки
	|						ИЗ
	|							ВТУдержанияПоБазе)) КАК УдержанияБаза
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияПоБазе КАК УдержанияПоБазе
	|			ПО (УдержанияПоБазе.НомерСтроки = УдержанияБаза.НомерСтроки)
	|				И УдержанияБаза.ПериодРегистрацииРазрез = УдержанияПоБазе.МесяцУдержания
	|				И (УдержанияБаза.РегистраторРазрез <> &Регистратор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УдержанияПоБазе.НомерСтроки,
	|		Начисления.ВидРасчета,
	|		Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени,
	|		ВЫБОР
	|			КОГДА УдержанияПоБазе.Начинается
	|					И НЕ УдержанияПоБазе.Заканчивается
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.ПериодДействия > УдержанияПоБазе.МесяцУдержания
	|							ТОГДА Начисления.Результат
	|					КОНЕЦ
	|			КОГДА УдержанияПоБазе.Заканчивается
	|					И НЕ УдержанияПоБазе.Начинается
	|				ТОГДА ВЫБОР
	|						КОГДА Начисления.ПериодДействия < УдержанияПоБазе.МесяцУдержания
	|							ТОГДА Начисления.Результат
	|					КОНЕЦ
	|			КОГДА УдержанияПоБазе.Начинается
	|					И УдержанияПоБазе.Заканчивается
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Начисления.ПериодДействия <> УдержанияПоБазе.МесяцУдержания
	|						ТОГДА Начисления.Результат
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ
	|	ИЗ
	|		ВТУдержанияПоБазе КАК УдержанияПоБазе
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|			ПО (Начисления.ПериодРегистрации = УдержанияПоБазе.МесяцУдержания)
	|				И (Начисления.ФизическоеЛицо = УдержанияПоБазе.ФизическоеЛицо)
	|				И (Начисления.ГоловнаяОрганизация = УдержанияПоБазе.Организация)
	|				И (Начисления.Регистратор <> &Регистратор)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеНачисления КАК БазовыеНачисления
	|			ПО (БазовыеНачисления.Удержание = УдержанияПоБазе.ВидРасчета)
	|				И (БазовыеНачисления.Начисление = Начисления.ВидРасчета)) КАК РасчетнаяБазаУдержаний
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетнаяБазаУдержаний.БазовоеНачисление,
	|	РасчетнаяБазаУдержаний.КатегорияБазовогоНачисления,
	|	РасчетнаяБазаУдержаний.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияБаза.НомерСтроки,
	|	СУММА(УдержанияБаза.РасчетнаяБаза) КАК РасчетнаяБаза
	|ПОМЕСТИТЬ ВТРезультатБаза
	|ИЗ
	|	ВТРасчетнаяБаза КАК УдержанияБаза
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанияБаза.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияБаза.РасчетнаяБаза,
	|	Удержания.ВидРасчета,
	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Удержания.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета,
	|	Удержания.ВидРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
	|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
	|	Удержания.ВидРасчета.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.ВидРасчета.Рассчитывается КАК Рассчитывается,
	|	Удержания.ИдентификаторСтроки,
	|	РасшифровкаБазы.БазовоеНачисление,
	|	РасшифровкаБазы.КатегорияБазовогоНачисления,
	|	РасшифровкаБазы.РасчетнаяБаза КАК РасчетнаяБазаПоНачислению
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатБаза КАК УдержанияБаза
	|		ПО Удержания.НомерСтроки = УдержанияБаза.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетнаяБаза КАК РасшифровкаБазы
	|		ПО Удержания.НомерСтроки = РасшифровкаБазы.НомерСтроки
	|ГДЕ
	|	Удержания.Регистратор = &ВременныйРегистратор
	|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержания.ВидРасчета.ОчередностьРасчета,
	|	Удержания.ИдентификаторСтроки";
	
	
	ИзмеренияОсновногоРегистра = Новый Массив(2);
	ИзмеренияОсновногоРегистра[0] = "ФизическоеЛицо";
	ИзмеренияОсновногоРегистра[1] = "Организация";
	
	ИзмеренияБазовогоРегистра = Новый Массив(2);
	ИзмеренияБазовогоРегистра[0] = "ФизическоеЛицо";
	ИзмеренияБазовогоРегистра[1] = "ГоловнаяОрганизация";
	
	Разрезы = Новый Массив(3);
	Разрезы[0] = "Регистратор";
	Разрезы[1] = "ВидРасчета";
	Разрезы[2] = "ПериодРегистрации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Удержания"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.УстановитьПараметр("ИзмеренияОсновногоРегистра", ИзмеренияОсновногоРегистра);
	Запрос.УстановитьПараметр("ИзмеренияБазовогоРегистра", ИзмеренияБазовогоРегистра);
	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	// Записи текущей очередности разложенные по ролям.
	ЗаписиОчередности = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
		ИсходныеДанные.Вставить("Рассчитывается", Выборка.Рассчитывается);
		
		// Дополняем структуру исходных данных автоматически рассчитываемыми показателями.
		Если Не СтрокаНабора.ФиксЗаполнение Тогда
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
			ИсходныеДанные.Вставить("РасшифровкаРасчетнойБазы", Неопределено);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
				// Заполняем расшифровку расчетной базы.
				РасшифровкаРасчетнойБазы = ПустаяТаблицаРасшифровкиРасчетнойБазы();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = РасшифровкаРасчетнойБазы.Добавить();
					НоваяСтрока.БазовоеНачисление = Выборка.БазовоеНачисление;
					НоваяСтрока.КатегорияБазовогоНачисления = Выборка.КатегорияБазовогоНачисления;
					НоваяСтрока.Сумма = Выборка.РасчетнаяБазаПоНачислению;
				КонецЦикла;
				ИсходныеДанные.Вставить("РасшифровкаРасчетнойБазы", РасшифровкаРасчетнойБазы);
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьЗаписьУдержания(СтрокаНабора, Выборка.СпособРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения, Выборка.ФормулаРасчета, РасчетПредопределеннымСпособом, УдержанныеСуммы, Истина);
		
		Если ЗаписиОчередности[Выборка.КатегорияУдержания] = Неопределено Тогда 
			ЗаписиОчередности.Вставить(Выборка.КатегорияУдержания, Новый Массив);
		КонецЕсли;
		
		ЗаписиОчередности[Выборка.КатегорияУдержания].Добавить(СтрокаНабора);
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом.
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры);
	
	// Сформировать движения по связанным регистрам.
	ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, ЗаписиОчередности, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка);
	
КонецПроцедуры

Функция ПричиныПересчета(СтрокаПричинПересчета)
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПричинПересчета);
КонецФункции

// Расчет данных для начисления: получение специализированных показателей (таких как время, база и др.), заполнение
// результата.
// Важно. Перед вызовом метода следует начать транзакцию, которую потом отменить. 
//
// Параметры:
//	- ДанныеДляНачисления - коллекция строк с полями.
//		Сотрудник
//		Подразделение
//		Начисление, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения.
//		Сумма
//		ДатаНачала, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения
//		ДатаОкончания, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения
//		ОтработаноДней
//		ОтработаноЧасов
//		НормаДней
//		НормаЧасов
//		ОплаченоДней
//		ОплаченоЧасов
//		ГрафикРаботы
//		ГрафикРаботыНорма
//		ВидУчетаВремени
//		ВремяВЧасах
//		ПериодРегистрацииВремени.
//		ИдентификаторСтрокиВидРасчета - может быть не заполнен
//	- ДокументСсылка
//	- Организация
//	- МесяцНачисления
//	- ДанныеФормыОбъект
//	- КоличествоПоказателей
//	- ИзвестныеЗначенияПоказателей - необязательный, таблица значений с значениями показателей, 
//		которые уже известны, и именно их нужно использовать при расчете.
//	- ОбщиеЗначения - Коллекция общих значений для всех строк.
//	- ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                       исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьНачисления(ДанныеДляНачисления, ПараметрыРасчета)
	
	Если ДанныеДляНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыРасчета.Организация;
	МесяцНачисления = ПараметрыРасчета.МесяцНачисления;
	ДокументСсылка = ПараметрыРасчета.ДокументСсылка;
	НаборыЗаписей = ПараметрыРасчета.НаборыЗаписей;
	ДанныеФормыОбъект = ПараметрыРасчета.ДанныеФормыОбъект;
	КоличествоПоказателей = ПараметрыРасчета.КоличествоПоказателей;
	ИзвестныеЗначенияПоказателей = ПараметрыРасчета.ИзвестныеЗначенияПоказателей;
	ИзвестныеЗначенияПоказателейПоОснованиям = ПараметрыРасчета.ИзвестныеЗначенияПоказателейПоОснованиям;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = ПараметрыРасчета.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОбщиеЗначения = ПараметрыРасчета.ОбщиеЗначения;
	ВызыватьИсключение = ПараметрыРасчета.ВызыватьИсключение;
	АннулироватьЗапись = ПараметрыРасчета.АннулироватьЗапись;
	
	ИспользоватьРаспределениеПоТерриториямУсловиямТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	
	// Определим количество показателей в переданных данных.
	Если КоличествоПоказателей = Неопределено Тогда
		КоличествоПоказателей = 0;
		Для Каждого Колонка Из ДанныеДляНачисления.Колонки Цикл
			Если Лев(Колонка.Имя, 10) = "Показатель" Тогда
				НомерПоказателя = Число(Сред(Колонка.Имя, 11));
				КоличествоПоказателей = Макс(НомерПоказателя, КоличествоПоказателей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВременнаяСсылка = НаборыЗаписей.Начисления.Отбор.Регистратор.Значение;
	
	Начисления = ПустаяТаблицаНачисления();
		
	// Специализированные показатели рассчитываются отдельно.
	РасчетПереопределяемыхПоказателей = ТаблицаРасчетаПереопределяемыхПоказателей();

	// Для расчета 
	// - раскладываем строки расчета в соответствии с очередностью в отдельные таблицы с одинаковой структурой
	// - всем строкам присваиваем идентификатор, идентификатор заполняем также в исходной строке
	// - составляем соответствия по идентификатору строк исходной и новых таблиц для быстрого поиска
	
	СтрокиРасчетаПоИдентификатору = Новый Соответствие;
	СтрокиТаблицыПоИдентификатору = Новый Соответствие;
	
	// Соответствие строк распределения.
	СтрокиРаспределенияПоИдентификатору = Новый Соответствие;
	
	// Соответствие, где ключ очередность расчета, а значение - отдельная таблица начислений.
	СтрокиРасчетаПоОчередности = Новый Соответствие;
	МассивОчередности = Новый Массив;
	
	// Отдельно все строки расчета собираем в массив для регистрации набора записей.
	СтрокиРасчета = Новый Массив;
	
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	ИзвестныеЗначенияПоИдентификаторуСтроки = Новый Соответствие;
	
	СтрокиРасчетаПереопределяемыхПоказателей = Новый Соответствие;
	
	// Собираем сотрудников для получения физических лиц и строки, в которых затем их нужно заполнить.
	СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	СтрокиРасчетаЗаполнениеФизическихЛиц = Новый Массив;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаТаблицы Из ДанныеДляНачисления Цикл
		// Определяем вид расчета
		Если ОбщиеЗначения <> Неопределено И ОбщиеЗначения.Свойство("Начисление") Тогда
			Начисление = ОбщиеЗначения.Начисление;
		Иначе
			Начисление = СтрокаТаблицы.Начисление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Начисление) Тогда 
			Продолжить;
		КонецЕсли;
		// Получаем сведения о виде расчета.
		СведенияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
		// Находим таблицу с строками начислений, соответствующих этой очередности, 
		// либо создаем новую, если ее пока не было создано.
		Очередность = СведенияОНачислении.ОчередностьРасчета;
		Начисления = СтрокиРасчетаПоОчередности[Очередность];
		Если Начисления = Неопределено Тогда
			Начисления = ПустаяТаблицаНачисления();
			// Определяем место в упорядоченном массиве очередностей, куда нужно вставить этот элемент.
			Индекс = 0;
			Пока Индекс < МассивОчередности.Количество() Цикл
				Если МассивОчередности[Индекс] > Очередность Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			МассивОчередности.Вставить(Индекс, Очередность);
			СтрокиРасчетаПоОчередности.Вставить(Очередность, Начисления);
		КонецЕсли;
		// Получили соответствующую таблицу - добавляем строку.
		СтрокаРасчета = Начисления.Добавить();
		// Добавляем строку в массив
		СтрокиРасчета.Добавить(СтрокаРасчета);
		// Заполняем строку
		ЗаполнитьЗначенияСвойств(СтрокаРасчета, СтрокаТаблицы);
		Если ОбщиеЗначения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРасчета, ОбщиеЗначения);
		КонецЕсли;
		СтрокаРасчета.Сумма = СтрокаТаблицы.Результат;
		// Идентифицируем строки...
		СтрокаРасчета.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		// ..И составляем соответствия по идентификаторам для быстрого поиска.
		СтрокиРасчетаПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		СтрокиТаблицыПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаТаблицы);
		// Считываем распределение по территориям условиям труда.
		Если ИспользоватьРаспределениеПоТерриториямУсловиямТруда 
			И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "РаспределениеПоТерриториямУсловиямТруда") Тогда
			РаспределениеПоТерриториямУсловиямТруда = СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено 
				И ДанныеРаспределенияПоТерриториямУсловиямТруда <> Неопределено
				И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ИдентификаторСтрокиВидаРасчета") Тогда 
				Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета);
				РаспределениеПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
			КонецЕсли;
			Если РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда 
				СтрокиРаспределения = Новый Массив;
				Для Каждого СтрокаРаспределения Из РаспределениеПоТерриториямУсловиямТруда Цикл
					ОписаниеСтроки = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
					ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
					СтрокиРаспределения.Добавить(ОписаниеСтроки);
				КонецЦикла;
				СтрокиРаспределенияПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокиРаспределения);
			КонецЕсли;
		КонецЕсли;
		// Упаковываем показатели
		ПереопределяемыеПоказатели = Новый Массив;
		УпаковатьЗначенияПоказателей(
			СтрокаТаблицы, 
			ИдентификаторСтроки,
			ИсходныеДанныеПоИдентификаторуСтроки, 
			СведенияОНачислении.Показатели, 
			КоличествоПоказателей,
			ПереопределяемыеПоказатели,
			ИзвестныеЗначенияПоказателей,
			ИзвестныеЗначенияПоказателейПоОснованиям, 
			ИзвестныеЗначенияПоИдентификаторуСтроки);
		// Если встречаются переопределяемые показатели, откладываем их в отдельную таблицу.
		МассивСтрокРасчетаПереопределяемыхПоказателей = Новый Массив;
		Для Каждого ПереопределяемыйПоказатель Из ПереопределяемыеПоказатели Цикл
			Если СтрокаТаблицы.ФиксЗаполнение Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоказателя = РасчетПереопределяемыхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателя, СтрокаТаблицы);
			Если ОбщиеЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ОбщиеЗначения);
				Если ОбщиеЗначения.Свойство("Начисление") Тогда
					СтрокаПоказателя.ВидРасчета = ОбщиеЗначения.Начисление;
				КонецЕсли;
			Иначе
				СтрокаПоказателя.ВидРасчета = СтрокаТаблицы.Начисление;
			КонецЕсли;
			СтрокаПоказателя.Организация = Организация;
			СтрокаПоказателя.Показатель = ПереопределяемыйПоказатель;
			СтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтроки;
			СтрокаПоказателя.Регистратор = ВременнаяСсылка;
			МассивСтрокРасчетаПереопределяемыхПоказателей.Добавить(СтрокаПоказателя);
		КонецЦикла;
		Если МассивСтрокРасчетаПереопределяемыхПоказателей.Количество() > 0 Тогда
			СтрокиРасчетаПереопределяемыхПоказателей.Вставить(ИдентификаторСтроки, МассивСтрокРасчетаПереопределяемыхПоказателей);
		КонецЕсли;
		// Собираем данные для заполнения физических лиц.
		Если Не ЗначениеЗаполнено(СтрокаРасчета.ФизическоеЛицо) Тогда
			СтрокиРасчетаЗаполнениеФизическихЛиц.Добавить(СтрокаРасчета);
			СотрудникиЗаполнениеФизическихЛиц.Добавить(СтрокаРасчета.Сотрудник);
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Заполняем физических лиц
	ЗаполнитьФизическихЛицПоСотрудникам(СтрокиРасчетаЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
		
	// Формируем набор записей регистра расчета теми начислениями, которые требуют записи для расчета (имеют период
	// действия).
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, СтрокиРасчета, , Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Для быстрого поиска составляем также соответствие строк набора записей.
	СтрокиНабораПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборыЗаписей.Начисления Цикл
		СтрокиНабораПоИдентификатору.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
	КонецЦикла;
	
	// Рассчитываем значения отдельных показателей.
	РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка);
	
	// Расставляем значения переопределяемых показателей в структурах исходных данных.
	Для Каждого СтрокаРасчета Из РасчетПереопределяемыхПоказателей Цикл
		Если СтрокаРасчета.ЗначениеРассчитано Тогда
			ИсходныеДанные = ИзвестныеЗначенияПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			Если ИсходныеДанные = Неопределено Тогда
				ИсходныеДанные = Новый Структура;
				ИзвестныеЗначенияПоИдентификаторуСтроки.Вставить(СтрокаРасчета.ИдентификаторСтроки, ИсходныеДанные);
			КонецЕсли;
			ИсходныеДанные.Вставить(ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(СтрокаРасчета.Показатель), СтрокаРасчета.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем временные таблицы, общие для расчета начислений всех очередностей.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ГрафикРаботы КАК Сотрудник,
		|	Начисления.ПериодДействияНачало КАК Период
		|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &ВременныйРегистратор
		|				И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|				И ГрафикРаботы ССЫЛКА Справочник.Сотрудники) КАК Начисления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременнаяСсылка);
	Запрос.Выполнить();
	
	// Получаем срез общих графиков.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИндивидуальныеГрафики", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ГрафикРаботыСотрудников",	МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	Начисления.ПериодДействия КАК Месяц,
		|	Начисления.ПериодРегистрацииВремени
		|ПОМЕСТИТЬ ВТГрафикиМесяцы
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &ВременныйРегистратор
		|	И Начисления.ВидРасчета.ТребуетсяРасчетНормыВремени
		|	И НЕ Начисления.ФиксРасчетВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиМесяцы.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	СУММА(ГрафикиРаботы.ОсновноеЗначениеНорма) КАК НормаДней
		|ПОМЕСТИТЬ ВТНормаВремениПредварительно
		|ИЗ
		|	ВТГрафикиМесяцы КАК ГрафикиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиМесяцы.ГрафикРаботы)
		|			И (ГрафикиРаботы.Месяц = ГрафикиМесяцы.Месяц)
		|			И (НЕ ГрафикиРаботы.ВремяВЧасах)
		|			И (ГрафикиРаботы.ВидУчетаВремени = &РабочееВремя)
		|			И (ГрафикиРаботы.ПериодРегистрации = ГрафикиМесяцы.ПериодРегистрацииВремени)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма,
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	НормаВремени.НормаДней,
		|	СУММА(ГрафикиРаботы.ОсновноеЗначениеНорма) КАК НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	СУММА(ГрафикиРаботы.ДополнительноеЗначениеНорма) КАК НормаЧасов
		|ПОМЕСТИТЬ ВТНормаВремени
		|ИЗ
		|	ВТГрафикиМесяцы КАК ГрафикиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиМесяцы.ГрафикРаботыНорма)
		|			И (ГрафикиРаботы.Месяц = ГрафикиМесяцы.Месяц)
		|			И (НЕ ГрафикиРаботы.ВремяВЧасах)
		|			И (ГрафикиРаботы.ВидУчетаВремени = &РабочееВремя)
		|			И (ГрафикиРаботы.ПериодРегистрации = ГрафикиМесяцы.ПериодРегистрацииВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПредварительно КАК НормаВремени
		|		ПО ГрафикиМесяцы.ГрафикРаботы = НормаВремени.ГрафикРаботы
		|			И ГрафикиМесяцы.ГрафикРаботыНорма = НормаВремени.ГрафикРаботыНорма
		|			И ГрафикиМесяцы.Месяц = НормаВремени.Месяц
		|			И ГрафикиМесяцы.ПериодРегистрацииВремени = НормаВремени.ПериодРегистрацииВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	НормаВремени.НормаДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ФПД.ГрафикРаботы,
		|	ФПД.ГрафикРаботыНорма,
		|	ФПД.ВидУчетаВремени,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрации,
		|	ФПД.ПериодРегистрацииВремени,
		|	ФПД.ВремяВЧасах,
		|	ФПД.ВидРасчета,
		|	ФПД.ВидРасчета.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	ФПД.ВидРасчета.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	ФПД.ВидРасчета.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	ФПД.ВидРасчета.СпособВыполненияНачисления КАК СпособВыполненияНачисления,
		|	ФПД.ПериодДействияНачало КАК Начало,
		|	ФПД.ПериодДействияКонец КАК Конец
		|ПОМЕСТИТЬ ВТИнтервалыФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &ВременныйРегистратор
		|				И ВидРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)) КАК ФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия КАК Месяц,
		|	ФПД.ПериодРегистрацииВремени,
		|	МИНИМУМ(ФПД.Начало) КАК МинимальнаяДата,
		|	МАКСИМУМ(ФПД.Конец) КАК МаксимальнаяДата
		|ПОМЕСТИТЬ ВТИсходныеДанныеВремени
		|ИЗ
		|	ВТИнтервалыФПД КАК ФПД
		|
		|СГРУППИРОВАТЬ ПО
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрацииВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтервалыФПД.ИдентификаторСтроки,
		|	СУММА(РАЗНОСТЬДАТ(ИнтервалыФПД.Начало, ИнтервалыФПД.Конец, ДЕНЬ) + 1) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТКалендарныеДни
		|ИЗ
		|	ВТИнтервалыФПД КАК ИнтервалыФПД
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнтервалыФПД.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.ИдентификаторСтроки,
		|	ФПД.Начало,
		|	ЕСТЬNULL(ОбщиеГрафики.ГрафикРаботы.ПроизводственныйКалендарь, ФПД.ГрафикРаботы.ПроизводственныйКалендарь) КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТПроизводственныеКалендари
		|ИЗ
		|	ВТИнтервалыФПД КАК ФПД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
		|		ПО (ИндивидуальныеГрафики.Сотрудник = ФПД.ГрафикРаботы)
		|			И (ИндивидуальныеГрафики.Период = ФПД.Начало)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ОбщиеГрафики
		|		ПО (ОбщиеГрафики.Сотрудник = ИндивидуальныеГрафики.Сотрудник)
		|			И (ОбщиеГрафики.Период = ФПД.Начало)
		|ГДЕ
		|	ФПД.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.ГрафикРаботы,
		|	ДанныеГрафика.Месяц,
		|	ДанныеГрафика.ПериодРегистрации КАК ПериодРегистрацииВремени,
		|	ДанныеГрафика.ВидУчетаВремени,
		|	ДанныеГрафика.Дата,
		|	МАКСИМУМ(ДанныеГрафика.ОсновноеЗначение) КАК Дней,
		|	СУММА(ДанныеГрафика.ДополнительноеЗначение) КАК Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеГрафика.ДополнительноеЗначение > 2
		|				ТОГДА 2
		|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначение
		|		КОНЕЦ) КАК ЧасовВПределах2Часов
		|ПОМЕСТИТЬ ВТРабочееВремяПоДнямПоВидам
		|ИЗ
		|	ВТИсходныеДанныеВремени КАК ИнтервалыФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеГрафика
		|		ПО (ДанныеГрафика.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|			И (ДанныеГрафика.Дата МЕЖДУ ИнтервалыФПД.МинимальнаяДата И ИнтервалыФПД.МаксимальнаяДата)
		|			И (ДанныеГрафика.ВремяВЧасах = ЛОЖЬ)
		|			И (ДанныеГрафика.Месяц = ИнтервалыФПД.Месяц)
		|			И (ДанныеГрафика.ПериодРегистрации = ИнтервалыФПД.ПериодРегистрацииВремени)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеГрафика.ГрафикРаботы,
		|	ДанныеГрафика.Месяц,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ВидУчетаВремени,
		|	ДанныеГрафика.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочееВремяПоДням.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДням.Дней) КАК Дней,
		|	СУММА(РабочееВремяПоДням.Часов) КАК Часов,
		|	СУММА(РабочееВремяПоДням.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|ПОМЕСТИТЬ ВТРабочееВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		МАКСИМУМ(РабочееВремяПоДнямПоВидам.Дней) КАК Дней,
		|		СУММА(РабочееВремяПоДнямПоВидам.Часов) КАК Часов,
		|		СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО (ВидыВремени.Ссылка = ИнтервалыФПД.ВидРасчета)
		|				И (ИнтервалыФПД.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|				И (ИнтервалыФПД.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|			ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		РабочееВремяПоДнямПоВидам.Дата) КАК РабочееВремяПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяПоДням.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнтервалыФПД.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДнямПоВидам.Дней),
		|	СУММА(РабочееВремяПоДнямПоВидам.Часов),
		|	СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов)
		|ИЗ
		|	ВТИнтервалыФПД КАК ИнтервалыФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|		ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|			И (ИнтервалыФПД.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|			И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|			И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнтервалыФПД.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочееВремяПоДням.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДням.Дней),
		|	СУММА(РабочееВремяПоДням.Часов),
		|	СУММА(РабочееВремяПоДням.ЧасовВПределах2Часов)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		МАКСИМУМ(РабочееВремяПоДнямПоВидам.Дней) КАК Дней,
		|		СУММА(РабочееВремяПоДнямПоВидам.Часов) КАК Часов,
		|		СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО (ВидыВремени.Ссылка = ИнтервалыФПД.ВидРасчета)
		|				И (ИнтервалыФПД.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|			ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроизводственныеКалендари КАК ПроизводственныеКалендари
		|			ПО (ПроизводственныеКалендари.ИдентификаторСтроки = ИнтервалыФПД.ИдентификаторСтроки)
		|				И (ПроизводственныеКалендари.Начало = ИнтервалыФПД.Начало)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыПраздничныхДней
		|			ПО (ДатыПраздничныхДней.ПроизводственныйКалендарь = ПроизводственныеКалендари.ПроизводственныйКалендарь)
		|				И (ДатыПраздничныхДней.Дата = РабочееВремяПоДнямПоВидам.Дата)
		|				И (ДатыПраздничныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		РабочееВремяПоДнямПоВидам.Дата) КАК РабочееВремяПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяПоДням.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработаноВсего.ИдентификаторСтроки,
		|	СУММА(ОтработаноВсего.Дней) КАК Дней,
		|	СУММА(ОтработаноВсего.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТОтработаноВсего
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		ДанныеГрафика.Дата КАК Дата,
		|		МАКСИМУМ(ДанныеГрафика.Дней) КАК Дней,
		|		СУММА(ДанныеГрафика.Часов) КАК Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК ДанныеГрафика
		|			ПО (ДанныеГрафика.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (ДанныеГрафика.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|				И (ДанныеГрафика.ВидУчетаВремени.РабочееВремя = ИСТИНА)
		|				И (ДанныеГрафика.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (ДанныеГрафика.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (ИнтервалыФПД.ТребуетсяРасчетОтработаноДнейВсего
		|					ИЛИ ИнтервалыФПД.ТребуетсяРасчетОтработаноЧасовВсего)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		ИнтервалыФПД.ВидРасчета,
		|		ДанныеГрафика.Дата) КАК ОтработаноВсего
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработаноВсего.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Заполнение распределения по территориям и условиям труда в соответствии СтрокиРаспределенияПоИдентификатору.
	ЗаполнитьРаспределениеПоТерриториямУсловиямТруда(СтрокиРасчетаПоИдентификатору, СтрокиРаспределенияПоИдентификатору, Организация, МесяцНачисления);
	
	// Формируем параметры расчета очередности начислений.
	ПараметрыОчереди = ДополнительныеПараметрыРасчетаОчередиНачислений();
	ПараметрыОчереди.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПараметрыОчереди.ДанныеФормыОбъект = ДанныеФормыОбъект;
	ПараметрыОчереди.Организация = Организация;
	ПараметрыОчереди.МесяцНачисления = МесяцНачисления;
	ПараметрыОчереди.НаборыЗаписей = НаборыЗаписей; 
	ПараметрыОчереди.ДокументСсылка = ДокументСсылка;
	ПараметрыОчереди.СтрокиРасчетаПоИдентификатору = СтрокиРасчетаПоИдентификатору;
	ПараметрыОчереди.СтрокиРаспределенияПоИдентификатору = СтрокиРаспределенияПоИдентификатору;
	ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки = ИсходныеДанныеПоИдентификаторуСтроки;
	ПараметрыОчереди.ИзвестныеЗначенияПоИдентификаторуСтроки = ИзвестныеЗначенияПоИдентификаторуСтроки; 
	ПараметрыОчереди.ВызыватьИсключение = ВызыватьИсключение;
	
	// Рассчитываем строки таблицы последовательными порциями в соответствии с очередностью расчета.
	Для Каждого ОчередностьРасчета Из МассивОчередности Цикл
		Начисления = СтрокиРасчетаПоОчередности[ОчередностьРасчета];
		// Расчет
		РассчитатьНачисленияОчередности(ОчередностьРасчета, ПараметрыОчереди);
		// Переносим результат 
		Для Каждого СтрокаРасчета Из Начисления Цикл
			// В набор записей
			СтрокаНабора = СтрокиНабораПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
			Если СтрокаНабора <> Неопределено Тогда
				СтрокаНабора.Результат = СтрокаРасчета.Результат;
				СтрокаНабора.ОтработаноДней = СтрокаРасчета.ОтработаноДней;
				СтрокаНабора.ОтработаноЧасов = СтрокаРасчета.ОтработаноЧасов;
			КонецЕсли;
			// Заполняем поле Сумма для учета начисленной зарплаты.
			СтрокаРасчета.Сумма = СтрокаРасчета.Результат;
			
			// 4D:ERP для Беларуси, Яна, 20.06.2017 10:44:25 
			// Документ "Отпуск по уходу за ребенком", №14900,14877,15145  
			// {
			Если СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет 
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка 
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДо3Лет50ПроцентовБПМ 
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехНаРебенкаИнвалида 
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаВичИнфицРебенка
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида
				Или СтрокаРасчета.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3Лет Тогда
				
				КалендарныхДнейВМесяце = День(КонецМесяца(СтрокаРасчета.ДатаНачала));
				ОплачиваемыеДни = День(СтрокаРасчета.ДатаОкончания) - День(СтрокаРасчета.ДатаНачала) + 1;
				Результат = СтрокаРасчета.Результат * ОплачиваемыеДни /КалендарныхДнейВМесяце;
				
				СтрокаРасчета.Сумма = Результат;
				СтрокаРасчета.Результат = Результат;
				
			Иначе
				СтрокаРасчета.Сумма = СтрокаРасчета.Результат;	
			КонецЕсли;
			// }
			// 4D
			
			// В исходную таблицу
			СтрокаТаблицы = СтрокиТаблицыПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
			ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			Если Не РасчетВремениЗафиксирован(СтрокаТаблицы) Тогда
				Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ОтработаноДней") Тогда
					СтрокаТаблицы.ОтработаноДней = СтрокаРасчета.ОтработаноДней;
					СтрокаТаблицы.ОтработаноЧасов = СтрокаРасчета.ОтработаноЧасов;
					СтрокаТаблицы.НормаДней = ИсходныеДанные.НормаДней;
					СтрокаТаблицы.НормаЧасов = ИсходныеДанные.НормаЧасов;
					// Нужно инвертировать знак, если запись не Сторно, но при этом ФиксСторно.
					Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "Сторно") Тогда
						Если Не СтрокаТаблицы.Сторно И СтрокаТаблицы.ФиксСторно Тогда
							СтрокаТаблицы.ОтработаноДней = - СтрокаТаблицы.ОтработаноДней;
							СтрокаТаблицы.ОтработаноЧасов = - СтрокаТаблицы.ОтработаноЧасов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ОплаченоДней") Тогда
					СтрокаТаблицы.ОплаченоДней = ИсходныеДанные.ОплаченоДней;
					СтрокаТаблицы.ОплаченоЧасов = ИсходныеДанные.ОплаченоЧасов;
					// Нужно инвертировать знак, если запись не Сторно, но при этом ФиксСторно.
					Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "Сторно") Тогда
						Если Не СтрокаТаблицы.Сторно И СтрокаТаблицы.ФиксСторно Тогда
							СтрокаТаблицы.ОплаченоДней = - СтрокаТаблицы.ОплаченоДней;
							СтрокаТаблицы.ОплаченоЧасов = - СтрокаТаблицы.ОплаченоЧасов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 4D:ERP для Беларуси, Яна, 20.06.2017 10:44:25 
			// Документ "Отпуск по уходу за ребенком", №14900,15145  
			// {
			Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "Начисление") Тогда
				
				Если СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка 
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДо3Лет50ПроцентовБПМ 
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехНаРебенкаИнвалида 
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаВичИнфицРебенка		
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида
					Или СтрокаТаблицы.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3Лет Тогда
					
					СтрокаТаблицы.Результат = СтрокаРасчета.Результат;
					
					Продолжить;
				КонецЕсли;	
			КонецЕсли;				
			// }
			// 4D
			
			// Переносим результаты расчета в коллекцию данных для начисления.
			РаспаковатьЗначенияПоказателей(СтрокаТаблицы, КоличествоПоказателей, ИсходныеДанные);
			ПеренестиРезультатыРасчета(СтрокаТаблицы, ИсходныеДанные, ПараметрыОчереди);
			// Переносим распределение по территориям и условиям труда.
			Если ИспользоватьРаспределениеПоТерриториямУсловиямТруда 
				И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "РаспределениеПоТерриториямУсловиямТруда") Тогда
				СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(Новый Массив);
				МассивСтрок = СтрокиРаспределенияПоИдентификатору[СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета];
				Если МассивСтрок <> Неопределено Тогда
					СтрокиРаспределения = Новый Массив;
					Для Каждого СтрокаРаспределения Из МассивСтрок Цикл
						ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
						ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределения);
						СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
					КонецЦикла;
					СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(МассивСтрок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
		УстановитьПривилегированныйРежим(Истина);
		НаборыЗаписей.Начисления.Записать(Истина, Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
	//Если АннулироватьЗапись Тогда
	//	// Если расчет производится в неотменяемой транзакции, 
	//	// то единственный способ восстановить состояние ИБ - это очистить записанные в процессе расчета наборы.
	//	НаборыЗаписей.Начисления.Очистить();
	//	НаборыЗаписей.Начисления.Записать();
	//КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с описанием параметров для создания 
// временной таблицы ВТНачисления
Функция ДополнительныеПараметрыСоздатьВТНачисления() Экспорт
	
	Параметры = Новый Структура(
		"Начисления,
		|Сотрудники,
		|Организация,
		|ЗаполнениеСтрок,
		// 4D:ERP для Беларуси, Яна, 26.06.2017 12:46:05 
		// Ошибка УчетНДФЛ, №15123 
		// {
		|РаспределениеПоТерриториямУсловиямТруда,
		// }
		// 4D
		|МесяцНачисления,
		|ИмяВТ");

	Параметры.ИмяВТ = "ВТНачисления";
		
	Возврат Параметры;
	
КонецФункции

Функция ТаблицаРасчетаПереопределяемыхПоказателей()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПереопределяемыхПоказателей = Новый ТаблицаЗначений;
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ФизическоеЛицо");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Организация");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Сотрудник");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Показатель");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ВидРасчета");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаНачала");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаОкончания");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ИдентификаторСтроки");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Регистратор");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ЗначениеРассчитано", Новый ОписаниеТипов("Булево"));
	
	Возврат РасчетПереопределяемыхПоказателей;
	
КонецФункции

// Удаляет строки удержаний, результат расчета которых равен нулю.
//
// Параметры:
//	ВладелецКоллекцииСтрок - объект-держатель коллекции строк, необходим для удаления, 
//	СтрокиУдержаний - необязательный, если не задан, анализируется вся коллекция.
//
Процедура УдалитьНулевыеУдержания(ВладелецКоллекцииСтрок, Организация, МесяцНачисления, СтрокиУдержаний = Неопределено)
	
	КоллекцияСтрок = ВладелецКоллекцииСтрок;
	Если СтрокиУдержаний <> Неопределено Тогда
		КоллекцияСтрок = СтрокиУдержаний;
	КонецЕсли;
	
	// Удаляем строку только если результат нулевой.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаУдержаний Из КоллекцияСтрок Цикл
		Если СтрокаУдержаний.Результат = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаУдержаний);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ВладелецКоллекцииСтрок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНДФЛ(НаборыЗаписей, НДФЛ, Организация, МесяцНачисления, МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Если НДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
			НДФЛ.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		КонецЕсли;
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(НаборыЗаписей, Ложь, Организация, МесяцНачисления, НДФЛ, МенеджерВременныхТаблиц, , Истина);
		Возврат;
	КонецЕсли;
	
	// Предварительно нужно распределить НДФЛ по рабочим местам.
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	БазаРаспределенияНДФЛ = УчетНДФЛ.ПолучитьБазуРасчетаНДФЛ(Организация, МесяцНачисления, ФизическиеЛицаМассив);
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.УдержанияПоРабочимМестам(НДФЛ, МесяцНачисления, Организация, БазаРаспределенияНДФЛ, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	УдержанияПоРабочимМестам.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для Каждого СтрокаТаблицы Из УдержанияПоРабочимМестам Цикл
		СтрокаТаблицы.ПодразделениеСотрудника = СтрокаТаблицы.Подразделение;
	КонецЦикла;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(НаборыЗаписей, Ложь, Организация, МесяцНачисления, УдержанияПоРабочимМестам, МенеджерВременныхТаблиц, , Истина);	
	
КонецПроцедуры

// Метод предназначен для заполнения специфических результатов расчета в строках исходных коллекций.
//
// Параметры:
//	СтрокаДанных - строка исходной коллекции.
//	ИсходныеДанные - структура со значениями показателей и результатами расчета.
//	ДополнительныеПараметры - параметры расчета очередности начислений.
//
Процедура ПеренестиРезультатыРасчета(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры)
	
	// Пособия
	УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаПособия(СтрокаДанных, ИсходныеДанные);
	// Пособия
	УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаОтпускаНаСанаторноКурортноеЛечение(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры);
	// Отпуск ЧАЭС
	ОстаткиОтпусков.ПеренестиРезультатыРасчетаОтпускаЧАЭС(СтрокаДанных, ИсходныеДанные);
	
КонецПроцедуры

Процедура РаспаковатьЗначенияПоказателей(СтрокаДанных, КоличествоПоказателей, ИсходныеДанные)
	
	// Перенос результата
	Если Не РасчетЗафиксирован(СтрокаДанных) Тогда
		СтрокаДанных.Результат = ИсходныеДанные.Результат;
	КонецЕсли;
	
	// Перенос расчета базы, значений переопределяемых показателей и удаление "лишних" показателей, 
	// которые не отображаются в документах начисления.
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		Показатель = СтрокаДанных["Показатель" + НомерПоказателя];
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
		Если Не ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
			СтрокаДанных["Показатель" + НомерПоказателя] = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
			СтрокаДанных["Значение" + НомерПоказателя] = 0;
		Иначе
			Если СтрокаДанных["Значение" + НомерПоказателя] <> ИсходныеДанные[ПоказательИнфо.Идентификатор] Тогда
				СтрокаДанных["Значение" + НомерПоказателя] = ИсходныеДанные[ПоказательИнфо.Идентификатор];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость расчета результата
//
Функция РасчетЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость расчета времени
//
Функция РасчетВремениЗафиксирован(Строка)
	
	Если Не ЕстьПолеВСтрокеКоллекции(Строка, "ФиксРасчетВремени") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.ФиксРасчетВремени Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура РассчитатьНачисленияОчередности(ОчередностьРасчета, ПараметрыОчереди)
	
	МенеджерВременныхТаблиц = ПараметрыОчереди.МенеджерВременныхТаблиц;
	
	
	ИсключаемыйРегистратор = ПараметрыОчереди.ДокументСсылка;
	ВременныйРегистратор = ПараметрыОчереди.НаборыЗаписей["Начисления"].Отбор.Регистратор.Значение;
	РегистраторыРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВременныйРегистратор);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействия,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ИдентификаторСтроки,
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаРасчета,
		|	ВидыРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
		|	Начисления.ВремяВЧасах КАК УчетВремениВЧасах,
		|	ВидыРасчета.ТребуетсяРасчетСверхурочных КАК ТребуетсяРасчетСверхурочных,
		|	ВидыРасчета.ТребуетсяРасчетКалендарныхДней КАК ТребуетсяРасчетКалендарныхДней,
		|	ВидыРасчета.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	ВидыРасчета.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	ВидыРасчета.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	ВидыРасчета.ТребуетсяРасчетНормыВремени,
		|	ВидыРасчета.ЗачетОтработанногоВремени,
		|	ВидыРасчета.ЗачетНормыВремени,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВнутрисменноеОтклонение,
		|	ВидыРасчета.Рассчитывается
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|			И (Начисления.Регистратор = &ВременныйРегистратор)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)";
		
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	СоздатьВТРасчетнаяБазаНачисленийПоРегистраторам(МенеджерВременныхТаблиц, РегистраторыРасчета, ОчередностьРасчета, ИсключаемыйРегистратор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки,
		|	СУММА(РасчетнаяБаза.РезультатБаза) КАК РезультатБаза
		|ПОМЕСТИТЬ ВТНачисленияБаза
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.КатегорияНачисления,
		|	Начисления.СпособРасчета КАК СпособРасчета,
		|	Начисления.ФормулаРасчета КАК ФормулаРасчета,
		|	Начисления.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
		|	Начисления.УчетВремениВЧасах,
		|	Начисления.ТребуетсяРасчетСверхурочных КАК ТребуетсяРасчетСверхурочных,
		|	Начисления.ТребуетсяРасчетКалендарныхДней КАК ТребуетсяРасчетКалендарныхДней,
		|	Начисления.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	Начисления.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	Начисления.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	Начисления.ЗачетОтработанногоВремени,
		|	Начисления.ЗачетНормыВремени,
		|	Начисления.ВнутрисменноеОтклонение,
		|	Начисления.Рассчитывается,
		|	НачисленияБаза.РезультатБаза КАК РасчетнаяБаза,
		|	ЕСТЬNULL(РабочееВремя.Дней, 0) КАК Дней,
		|	ЕСТЬNULL(РабочееВремя.Часов, 0) КАК Часов,
		|	ЕСТЬNULL(РабочееВремя.ЧасовВПределах2Часов, 0) КАК ЧасовВПределах2Часов,
		|	ОтработаноВсего.Дней КАК ОтработаноДнейВсего,
		|	ОтработаноВсего.Часов КАК ОтработаноЧасовВсего,
		|	НормаВремени.НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	НормаВремени.НормаДней,
		|	НормаВремени.НормаЧасов,
		|	КалендарныеДни.КалендарныхДней
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
		|		ПО Начисления.Регистратор = НачисленияБаза.Регистратор
		|			И Начисления.НомерСтроки = НачисленияБаза.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочееВремя КАК РабочееВремя
		|		ПО Начисления.ИдентификаторСтроки = РабочееВремя.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноВсего КАК ОтработаноВсего
		|		ПО Начисления.ИдентификаторСтроки = ОтработаноВсего.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремени КАК НормаВремени
		|		ПО (НормаВремени.ГрафикРаботы = Начисления.ГрафикРаботы)
		|			И (НормаВремени.ГрафикРаботыНорма = Начисления.ГрафикРаботыНорма)
		|			И (НормаВремени.Месяц = Начисления.ПериодДействия)
		|			И (НормаВремени.ПериодРегистрацииВремени = Начисления.ПериодРегистрацииВремени)
		|			И (Начисления.ТребуетсяРасчетНормыВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК КалендарныеДни
		|		ПО Начисления.ИдентификаторСтроки = КалендарныеДни.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРасчетнаяБаза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияБаза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверим заполненность нормы времени.
	ПараметрыПроверки = УчетРабочегоВремениРасширенный.ПараметрыДляПроверитьЗаполнениеНормыВремени("ВТНормаВремени", "Месяц");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДней", "ГрафикРаботы");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДнейПоГрафикуПолногоРабочегоВремени", "ГрафикРаботыНорма");
	УчетРабочегоВремениРасширенный.ПроверитьЗаполнениеНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки);
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	// Для устранения искажения совокупного результата расчета, возникающей в результате округления:
	// - накапливаем по сотруднику и начислению строки, имеющие все параметры расчета (кроме показателей времени) одинаковыми,
	// - вычисляем сумму результата,
	// - вычисляем по формуле начисление по накопленной сумме значений показателей времени,
	// - сравниваем сумму результата и вычисленный по формуле результат,
	// - при наличии расхождения, вычисленный по формуле результат распределяем пропорционально вычисленным отдельно результатам.
	СтрокиПоМесяцам = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = ПараметрыОчереди.СтрокиРасчетаПоИдентификатору[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
		
		// Дополняем структуру исходных данных автоматически рассчитываемыми показателями.
		ИсходныеДанные.Вставить("СпособРасчета", Выборка.СпособРасчета);
		ИсходныеДанные.Вставить("КатегорияНачисления", Выборка.КатегорияНачисления);
//		ИсходныеДанные.Вставить("НормаДнейПоГрафикуПолногоРабочегоВремени", СтрокаРасчета.НормаДнейПоГрафикуПолногоРабочегоВремени);
		ИсходныеДанные.Вставить("ВремяВДнях", СтрокаРасчета.ОтработаноДней);
		ИсходныеДанные.Вставить("ВремяВЧасах", СтрокаРасчета.ОтработаноЧасов);
		ИсходныеДанные.Вставить("ВремяВДняхЧасах", ?(Выборка.УчетВремениВЧасах = Истина, СтрокаРасчета.ОтработаноЧасов, СтрокаРасчета.ОтработаноДней));
		ИсходныеДанные.Вставить("ОтработаноДней", СтрокаРасчета.ОтработаноДней);
		ИсходныеДанные.Вставить("ОтработаноЧасов", СтрокаРасчета.ОтработаноЧасов);
		Если СтрокаРасчета.Сторно Тогда
			ИсходныеДанные.ВремяВДнях = - ИсходныеДанные.ВремяВДнях;
			ИсходныеДанные.ВремяВЧасах = - ИсходныеДанные.ВремяВЧасах;
			ИсходныеДанные.ВремяВДняхЧасах = - ИсходныеДанные.ВремяВДняхЧасах;
			ИсходныеДанные.ОтработаноДней = - ИсходныеДанные.ОтработаноДней;
			ИсходныеДанные.ОтработаноЧасов = - ИсходныеДанные.ОтработаноЧасов;
		КонецЕсли;
		ИсходныеДанные.Вставить("КалендарныеДниМесяца", День(КонецМесяца(СтрокаРасчета.ДатаНачала)));
		ИсходныеДанные.Вставить("КалендарныеДни", 0);
		Если Выборка.ТребуетсяРасчетКалендарныхДнейБезПраздников = Истина Тогда
			ИсходныеДанные.Вставить("КалендарныеДниБезПраздников", 0);
		КонецЕсли;
		ИсходныеДанные.Вставить("ТребуетсяРасчетОтработаноДнейВсего", Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина);
		ИсходныеДанные.Вставить("ТребуетсяРасчетОтработаноЧасовВсего", Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина);
		ИсходныеДанные.Вставить("Рассчитывается", Выборка.Рассчитывается);
		ИсходныеДанные.Вставить("ОтработаноСверхурочно", 0);
		ИсходныеДанные.Вставить("ОтработаноСверхурочноВПределах2Часов", 0);
		
		// Показатели учета времени обновляем расчетными значениями только в случае, если не установлены ручные значения.
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			Если Выборка.Дней <> Null Тогда
				ИсходныеДанные.ВремяВДнях = Выборка.Дней;
				ИсходныеДанные.ВремяВЧасах = Выборка.Часов;
				Если Выборка.ТребуетсяРасчетСверхурочных Тогда
					// При расчете сверхурочных учитываем только отработанные часы.
					ИсходныеДанные.ВремяВДнях = 0;
				КонецЕсли;
			КонецЕсли;
			Если Выборка.НормаДней <> Null Тогда
				ИсходныеДанные.НормаДнейПоГрафикуПолногоРабочегоВремени = Выборка.НормаДнейПоГрафикуПолногоРабочегоВремени;
				ИсходныеДанные.НормаДней = Выборка.НормаДней;
				ИсходныеДанные.НормаЧасов = Выборка.НормаЧасов;
			КонецЕсли;
			Если Выборка.ОтработаноДнейВсего <> Null Тогда
				ИсходныеДанные.ОтработаноДней = Выборка.ОтработаноДнейВсего;
			КонецЕсли;
			Если Выборка.ОтработаноЧасовВсего <> Null Тогда
				ИсходныеДанные.ОтработаноЧасов = Выборка.ОтработаноЧасовВсего;
			КонецЕсли;
			Если Выборка.КалендарныхДней <> Null Тогда
				ИсходныеДанные.КалендарныеДни = Выборка.КалендарныхДней;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем значения показателей.
		Если Не ЗначенияПоказателейЗафиксированы(СтрокаРасчета) Тогда
			// Расчетная база
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
			КонецЕсли;
		    // Другие показатели, связанные с расчетом времени.
			Если Выборка.ТребуетсяРасчетСверхурочных Тогда
				ИсходныеДанные.ОтработаноСверхурочно = Выборка.Часов;
				ИсходныеДанные.ОтработаноСверхурочноВПределах2Часов = Выборка.ЧасовВПределах2Часов;
			КонецЕсли;
		КонецЕсли;
		
		// Если какие-то значения заранее известны потребителю, 
		// то нужно использовать именно их.
		ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = ПараметрыОчереди.ИзвестныеЗначенияПоИдентификаторуСтроки;
		Если ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки <> Неопределено 
			И ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки] <> Неопределено Тогда
			ИзвестныеЗначения = ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
			Для Каждого КлючИЗначение Из ИзвестныеЗначения Цикл
				ИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			// Значение производных показателей заполняем уже после заполнения известных значений.
			ИсходныеДанные.ВремяВДняхЧасах = ?(Выборка.УчетВремениВЧасах = Истина, ИсходныеДанные.ВремяВЧасах, ИсходныеДанные.ВремяВДнях);
		КонецЕсли;
		
		// Заполняем поля Оплачено дней, часов.
		// Если определен специализированный показатель, то именно он используется в качестве значения оплаченного времени.
		Если Выборка.ФормулаРасчета = "0" Тогда
			// Время без оплаты
			ИсходныеДанные.ОплаченоДней = 0;
			ИсходныеДанные.ОплаченоЧасов = 0;
		Иначе
			ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ВремяВДнях;
			ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ВремяВЧасах;
			Если ИсходныеДанные.Свойство("КоличествоДнейОтпуска") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КоличествоДнейОтпуска;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("КоличествоДнейКомпенсации") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КоличествоДнейКомпенсации;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("КалендарныеДниБезПраздников") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДниБезПраздников;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("ДнейЧасовВыходногоПособия") Тогда
				Если СтрокаРасчета.ВремяВЧасах Тогда
					ИсходныеДанные.ОплаченоДней = 0;
					ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ДнейЧасовВыходногоПособия;
				Иначе
					ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ДнейЧасовВыходногоПособия;
					ИсходныеДанные.ОплаченоЧасов = 0;
				КонецЕсли;
			ИначеЕсли Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ОтработаноДней;
			ИначеЕсли Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина Тогда
				ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ОтработаноЧасов;
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьСтрокуНачисления(СтрокаРасчета, Выборка.СпособРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения, Выборка.ФормулаРасчета, РасчетПредопределеннымСпособом, ПараметрыОчереди.ВызыватьИсключение, ПараметрыОчереди.СтрокиРаспределенияПоИдентификатору[Выборка.ИдентификаторСтроки]);
		
		// Заполняем поля отработанного времени.
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			Если Выборка.ЗачетОтработанногоВремени Или Выборка.ЗачетНормыВремени Тогда
				СтрокаРасчета.ОтработаноДней = ИсходныеДанные.ВремяВДнях;
				СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ВремяВЧасах;
				//СтрокаРасчета.НормаДнейПоГрафикуПолногоРабочегоВремени = ИсходныеДанные.НормаДнейПоГрафикуПолногоРабочегоВремени;
				СтрокаРасчета.НормаДней = ИсходныеДанные.НормаДней;
				СтрокаРасчета.НормаЧасов = ИсходныеДанные.НормаЧасов;
				Если Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина Тогда
					// Если используется показатель отработано дней по всем видам времени, 
					//	то именно его используем в качестве отработанного времени.
					СтрокаРасчета.ОтработаноДней = ИсходныеДанные.ОтработаноДней;
				КонецЕсли;
				Если Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина Тогда
					// Если используется показатель отработано часов по всем видам времени, 
					//	то именно его используем в качестве отработанного времени.
					СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов;
				КонецЕсли;
				// Для отработанного времени - сколько отработано, столько и оплачено.
				Если Выборка.ЗачетОтработанногоВремени Тогда
					ИсходныеДанные.ОплаченоДней = СтрокаРасчета.ОтработаноДней;
					ИсходныеДанные.ОплаченоЧасов = СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
				Если СтрокаРасчета.Сторно Тогда
					СтрокаРасчета.ОтработаноДней = - СтрокаРасчета.ОтработаноДней;
					СтрокаРасчета.ОтработаноЧасов = - СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			Если Выборка.ВнутрисменноеОтклонение Тогда
				СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ВремяВЧасах;
				Если СтрокаРасчета.Сторно Тогда
					СтрокаРасчета.ОтработаноЧасов = - СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаРасчета.Сторно Тогда
				ИсходныеДанные.ОплаченоДней = - ИсходныеДанные.ОплаченоДней;
				ИсходныеДанные.ОплаченоЧасов = - ИсходныеДанные.ОплаченоЧасов;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем данные строки для последующей корректировки искажений результата.
		ЗаполнитьДанныеДляКорректировкиИскаженияРезультата(СтрокиПоМесяцам, СтрокаРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения)
	КонецЦикла;
	
	// Выполняем корректировку строк, в которых возможно искажение результата.
	СкорректироватьИскажениеРезультата(СтрокиПоМесяцам, ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки);	
	
	// Выполняем расчет предопределенным способом.
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, ПараметрыОчереди.НаборыЗаписей, ПараметрыОчереди.ДокументСсылка, ПараметрыОчереди);
	
	// Для строк расчета предопределенным способом нужно инвертировать знак оплаченных дней.
	Для Каждого ОписаниеРасчета Из РасчетПредопределеннымСпособом Цикл
		ЗаписьРасчета = ОписаниеРасчета.ЗаписьРасчета;
		ИсходныеДанные = ОписаниеРасчета.ИсходныеДанные;
		Если ЗаписьРасчета.Сторно Тогда
			ИсходныеДанные.ОплаченоДней = - ИсходныеДанные.ОплаченоДней;
			ИсходныеДанные.ОплаченоЧасов = - ИсходныеДанные.ОплаченоЧасов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предназначен для размещения вызовов процедур, выполняющих расчет начислений или удержаний предопределенным способом.
//
// Параметры:
//	- РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	- НаборыЗаписей - структура наборов записей, моделирующая коллекцию движений документа 
//			с установленным отбором по временному регистратору.
//	- ДокументСсылка - ссылка на документ, выполняющий расчет.
//
Процедура РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СпособыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПредопределеннымСпособом, "СпособРасчета", Истина);
	Для Каждого СпособРасчета Из СпособыРасчета Цикл
		
		СтрокиТаблицыРасчета = РасчетПредопределеннымСпособом.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета));
		
		// Доплата до среднего заработка.
		РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Доплата до среднего заработка ФСС.
		РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Доплата до сохраняемого денежного содержания за дни болезни.
		РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);

		// Удержания по исполнительным листам.
		ИсполнительныеЛисты.РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры);
		
		// Вознаграждения платежных агентов.
		ИсполнительныеЛисты.РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Пособия по нетрудоспособности и по уходу за ребенком.
		УчетПособийСоциальногоСтрахованияРасширенный.РассчитатьПособие(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДополнительныеПараметры);
		
		// Оплата простоев
		ПростоиСотрудников.РассчитатьОплатуПростоя(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Переопределяемые способы расчета.
		РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьПредопределеннымСпособом(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Распределяем результат расчета по территориям и условиям труда.
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СтрокиРаспределенияПоИдентификатору") Тогда
			Для Каждого СтрокаТаблицыРасчета Из СтрокиТаблицыРасчета Цикл
				СтрокаРасчета = СтрокаТаблицыРасчета.ЗаписьРасчета;
				СтрокиРаспределения = ДополнительныеПараметры.СтрокиРаспределенияПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
				РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения)
	
	Если СтрокаРасчета.Результат = 0 Или СтрокиРаспределения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоэффициентыРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "ДоляРаспределения");
	РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаРасчета.Результат, КоэффициентыРаспределения);
	Если РаспределенныеСуммы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс < СтрокиРаспределения.Количество() Цикл
		СтрокиРаспределения[Индекс].Результат = РаспределенныеСуммы[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни.
//
Процедура РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
		
		Если ИсходныеДанные.НормаДней = 0 Тогда
			Запись.Результат = 0;
		Иначе
			Запись.Результат = Макс(ИсходныеДанные.СохраняемоеДенежноеСодержание * ИсходныеДанные.КоэффициентИндексацииСохраняемогоДенежногоСодержания * ИсходныеДанные.ВремяВДнях / ИсходныеДанные.НормаДней - ИсходныеДанные.РасчетнаяБаза, 0);
		КонецЕсли;
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ВремяВДнях;
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработкаФСС.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
			
		Запись.Результат = Макс(((ИсходныеДанные.СреднийЗаработокФСС * ИсходныеДанные.КалендарныеДни) * ИсходныеДанные.ПроцентДоплатыЗаДниНетрудоспособности / 100) - ИсходныеДанные.РасчетнаяБаза, 0);
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДни;
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработка.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
			
		Запись.Результат = Макс(ИсходныеДанные.СреднийЗаработокОбщий * ИсходныеДанные.ВремяВДняхЧасах - ИсходныеДанные.РасчетнаяБаза, 0);
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультата(СтрокиПоМесяцам, ИсходныеДанныеПоИдентификаторуСтроки)
	
	Для Каждого КлючМесяцИЗначение Из СтрокиПоМесяцам Цикл
		СтрокиПоСотрудникам = КлючМесяцИЗначение.Значение;
		Для Каждого КлючСотрудникИЗначение Из СтрокиПоСотрудникам Цикл
			СтрокиПоНачислениям = КлючСотрудникИЗначение.Значение;
			Для Каждого КлючНачислениеИЗначение Из СтрокиПоНачислениям Цикл
				Начисление = КлючНачислениеИЗначение.Ключ;
				ОписаниеСтрок = КлючНачислениеИЗначение.Значение;
				Если Не ОписаниеСтрок.НакапливатьСтроки Тогда
					Продолжить;
				КонецЕсли;
				Если ОписаниеСтрок.ОтработаноДней <> ОписаниеСтрок.ПроверяемыеПоля.НормаДней
					Или ОписаниеСтрок.ОтработаноЧасов <> ОписаниеСтрок.ПроверяемыеПоля.НормаЧасов Тогда
					Продолжить;
				КонецЕсли;
				// Смоделируем строку начисления и рассчитаем ее
				ИсходныеДанные = ОписаниеСтрок.ИсходныеДанные;
				ИсходныеДанные.Вставить("ВремяВДнях", ОписаниеСтрок.ОтработаноДней);
				ИсходныеДанные.Вставить("ВремяВЧасах", ОписаниеСтрок.ОтработаноЧасов);
				ИсходныеДанные.Вставить("ВремяВДняхЧасах", ?(ОписаниеСтрок.ВремяВЧасах = Истина, ОписаниеСтрок.ОтработаноЧасов, ОписаниеСтрок.ОтработаноДней));
				ИсходныеДанные.Вставить("ОтработаноДней", ОписаниеСтрок.ОтработаноДней);
				ИсходныеДанные.Вставить("ОтработаноЧасов", ОписаниеСтрок.ОтработаноЧасов);
				
				Результат = Вычислить(ОписаниеСтрок.ФормулаРасчетаДляВыполнения);
				Если Результат <> ОписаниеСтрок.Результат Тогда
					// Если полученный результат отличается от накопленного, 
					// распределим полученный результат между отдельными суммами, чтобы избежать искажения.
					Результаты = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(Результат, ОписаниеСтрок.Результаты);
					Индекс = 0;
					Пока Индекс < Результаты.Количество() Цикл
						СтрокаРасчета = ОписаниеСтрок.Строки[Индекс];
						СтрокаРасчета.Результат = Результаты[Индекс];
						ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки].Результат = СтрокаРасчета.Результат;
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Выполняет непосредственный расчет результата для строки таблицы Начисления, 
// рассчитываемой по произвольной формуле.
// Строки, рассчитываемые предопределенным способом откладываются в таблицу значений РасчетПредопределеннымСпособом.
//
// Параметры:
//	СтрокаРасчета - строка таблицы значений Начисления, см. ПустаяТаблицаНачисления(),
//	СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений
//	ИсходныеДанные - структура, содержащая в себе значения показателей и поля результата расчета.
//	ФормулаДляВыполнения - строка.
//	ФормулаДляПредставления - строка.
//	РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                     исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьСтрокуНачисления(СтрокаРасчета, СпособРасчета, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, РасчетПредопределеннымСпособом, ВызыватьИсключение, СтрокиРаспределения)
		
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		// Если расчет выполняется предопределенным способом, 
		// откладываем запись в отдельную коллекцию.
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = СтрокаРасчета;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		Возврат;
	КонецЕсли;
	
	Если РасчетЗафиксирован(СтрокаРасчета) Или Не ИсходныеДанные.Рассчитывается Тогда
		ИсходныеДанные.Результат = СтрокаРасчета.Результат;
		РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
		Возврат;
	КонецЕсли;
	
	Если СтрокиРаспределения = Неопределено Тогда
		// Не используется распределение по территориям, условиям труда.
		СтрокаРасчета.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
	Иначе
		КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
		// Проверяем, есть ли хотя бы в одной строке распределения значения показателей.
		ЕстьПоказателиРаспределения = Ложь;
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				Если ЗначениеЗаполнено(СтрокаРаспределения["Показатель" + НомерПоказателя]) Тогда
					ЕстьПоказателиРаспределения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Не ЕстьПоказателиРаспределения Тогда
			// Если показателей нет, то результат сначала считаем по формуле как есть, затем распределяем.
			СтрокаРасчета.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
			РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
		Иначе
			// Если показатели есть, то результат является суммой отдельно рассчитанных строк распределения.
			// Предварительно копируем структуру исходных данных, ее будем использовать в качестве значений по умолчанию.
			ЗначенияПоУмолчанию = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсходныеДанные);
			// Последовательно повторяем расчет для каждой строки распределения, подставляя значения определяемых показателей.
			// Результат расчета будет суммой результата распределения.
			СтрокаРасчета.Результат = 0;
			// Нормируем доли распределения по единице.
			ДолиРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "ДоляРаспределения");
			ДолиРаспределения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(1, ДолиРаспределения, 9);
			Индекс = 0;
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				// Если в конкретной строке распределения определено значение показателя по территории или условиям труда, 
				// то подставляем его в исходные данные и выполняем расчет.
				ИспользованныеПоказатели = Новый Массив;
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значение = СтрокаРаспределения["Значение" + НомерПоказателя];
					ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
					ИсходныеДанные[ИдентификаторПоказателя] = Значение;
					ИспользованныеПоказатели.Добавить(ИдентификаторПоказателя);
				КонецЦикла;
				СтрокаРаспределения.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
				СтрокаРаспределения.Результат = СтрокаРаспределения.Результат * ДолиРаспределения[Индекс];
				СтрокаРасчета.Результат = СтрокаРасчета.Результат + СтрокаРаспределения.Результат;
				// Восстанавливаем значения по умолчанию в структуре исходных данных для использованных показателей.
				Для Каждого ИдентификаторПоказателя Из ИспользованныеПоказатели Цикл
					ИсходныеДанные[ИдентификаторПоказателя] = ЗначенияПоУмолчанию[ИдентификаторПоказателя];
				КонецЦикла;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаРасчета.Сторно Тогда
		СтрокаРасчета.Результат = - СтрокаРасчета.Результат;
		Если СтрокиРаспределения <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				СтрокаРаспределения.Результат = - СтрокаРаспределения.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанные.Результат = СтрокаРасчета.Результат;
	
КонецПроцедуры

Функция ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение)
	
	Попытка 
		Возврат Вычислить(ФормулаДляВыполнения);
	Исключение
		Если Не ВызыватьИсключение Тогда
			Возврат 0;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При расчете начисления «%1» за %5 для сотрудника %2 возникла ошибка: %4
					  |Формула, используемая при расчете: %3'"),
				СтрокаРасчета.Начисление, 
				СтрокаРасчета.ФизическоеЛицо, 
				ФормулаДляПредставления, 
				ИнформацияОбОшибке().Описание, 
				Формат(СтрокаРасчета.ДатаНачала, "ДФ='ММММ гггг'"));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДанныеДляКорректировкиИскаженияРезультата(СтрокиПоМесяцам, СтрокаРасчета, ИсходныеДанные, ФормулаРасчетаДляВыполнения)
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ИсходныеДанные.СпособРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетЗафиксирован(СтрокаРасчета) Или Не ИсходныеДанные.Рассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоСотрудникам = СтрокиПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
	Если СтрокиПоСотрудникам = Неопределено Тогда
		СтрокиПоСотрудникам = Новый Соответствие;
	КонецЕсли;
	СтрокиПоНачислениям = СтрокиПоСотрудникам[СтрокаРасчета.Сотрудник];
	Если СтрокиПоНачислениям = Неопределено Тогда
		СтрокиПоНачислениям = Новый Соответствие;
	КонецЕсли;
	ОписаниеСтрок = СтрокиПоНачислениям[СтрокаРасчета.Начисление];
	Если ОписаниеСтрок = Неопределено Тогда
		ОписаниеСтрок = Новый Структура(
			"НакапливатьСтроки, 
			|Результат,
			|ОтработаноДней,
			|ОтработаноЧасов,
			|ФормулаРасчетаДляВыполнения,
			|ВремяВЧасах,
			|Строки, 
			|Результаты, 
			|ПроверяемыеПоля, 
			|Показатели,
			|ИсходныеДанные");
		Если СтрокаРасчета.ОтработаноДней = СтрокаРасчета.НормаДней Или СтрокаРасчета.ОтработаноЧасов = СтрокаРасчета.НормаЧасов Тогда
			ОписаниеСтрок.НакапливатьСтроки = Ложь;
		Иначе
			// Признак того, что последовательность идентичных строк еще не прервалась.
			ОписаниеСтрок.НакапливатьСтроки = Истина;
			// Инициализируем поля описания.
			ОписаниеСтрок.Строки = Новый Массив;
			ОписаниеСтрок.Результаты = Новый Массив;
			ОписаниеСтрок.ИсходныеДанные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсходныеДанные);
			ОписаниеСтрок.ФормулаРасчетаДляВыполнения = ФормулаРасчетаДляВыполнения;
			ОписаниеСтрок.ВремяВЧасах = СтрокаРасчета.ВремяВЧасах;
			ОписаниеСтрок.Результат = 0;
			ОписаниеСтрок.ОтработаноДней = 0;
			ОписаниеСтрок.ОтработаноЧасов = 0;
			// Поля предназначены для проверки строки на принадлежность коллекции.
			ОписаниеСтрок.ПроверяемыеПоля = Новый Структура("НормаДней, НормаЧасов");
			ОписаниеСтрок.ПроверяемыеПоля.НормаДней = СтрокаРасчета.НормаДней;
			ОписаниеСтрок.ПроверяемыеПоля.НормаЧасов = СтрокаРасчета.НормаЧасов;
			ОписаниеСтрок.Показатели = Новый Структура;
			// Собираем значения показателей.
			СведенияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаРасчета.Начисление);
			Для Каждого Показатель Из СведенияОНачислении.Показатели Цикл
				Если Показатель.ОтображатьВДокументахНачисления Тогда
					ОписаниеСтрок.Показатели.Вставить(Показатель.Идентификатор, ИсходныеДанные[Показатель.Идентификатор]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеСтрок.НакапливатьСтроки Тогда
		// Проверяем строку, на предмет принадлежности ее коллекции.
		СтрокаСоответствует = Истина;
		Если ОписаниеСтрок.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из ОписаниеСтрок.ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение <> СтрокаРасчета[КлючИЗначение.Ключ] Тогда
					СтрокаСоответствует = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаСоответствует Тогда
				Для Каждого КлючИЗначение Из ОписаниеСтрок.Показатели Цикл
					Если КлючИЗначение.Значение <> ИсходныеДанные[КлючИЗначение.Ключ] Тогда
						СтрокаСоответствует = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Не СтрокаСоответствует Тогда
			// Встретили первую строку, которая не соответствует коллекции, далее накапливать строки не имеет смысла.
			ОписаниеСтрок.НакапливатьСтроки = Ложь;
		Иначе
			// Добавляем строку в набор и накапливаем значения времени.
			ОписаниеСтрок.Строки.Добавить(СтрокаРасчета);
			ОписаниеСтрок.Результаты.Добавить(СтрокаРасчета.Результат);
			ОписаниеСтрок.ОтработаноДней = ОписаниеСтрок.ОтработаноДней + СтрокаРасчета.ОтработаноДней;
			ОписаниеСтрок.ОтработаноЧасов = ОписаниеСтрок.ОтработаноЧасов + СтрокаРасчета.ОтработаноЧасов;
			ОписаниеСтрок.Результат = ОписаниеСтрок.Результат + СтрокаРасчета.Результат;
		КонецЕсли;
	КонецЕсли;
	СтрокиПоНачислениям.Вставить(СтрокаРасчета.Начисление, ОписаниеСтрок);
	СтрокиПоСотрудникам.Вставить(СтрокаРасчета.Сотрудник, СтрокиПоНачислениям);
	СтрокиПоМесяцам.Вставить(НачалоМесяца(СтрокаРасчета.ДатаНачала), СтрокиПоСотрудникам);
	
КонецПроцедуры

// Определяет необходимость перезаполнения значений показателей
//
Функция ЗначенияПоказателейЗафиксированы(Строка)
	
	Если Строка.ФиксЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Создает ВТРасчетнаяБаза для записей регистра расчета Начисления.
//
// Параметры:
//	- МенеджерВременныхТаблиц, в котором 
//		* будет создана ВТРасчетнаяБаза, состав полей см. метод СоздатьВТРасчетнаяБаза
//	- Регистраторы - массив регистраторов, наборы записей регистра расчета которых нужно рассчитать,
//	- ОчередностьРасчета - число, порядковый номер очередности выбираемых начислений,
//	- ИсключаемыйРегистратор - ссылка на документ, движения которого нужно исключить из рассмотрения.
//
Процедура СоздатьВТРасчетнаяБазаНачисленийПоРегистраторам(МенеджерВременныхТаблиц, Регистраторы, ОчередностьРасчета, ИсключаемыйРегистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК ВидРасчета,
		|	Начисления.ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОчередностьРасчета = &ОчередностьРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор В (&Регистраторы)
		|				И ВидРасчета В
		|					(ВЫБРАТЬ
		|						ВидыРасчета.ВидРасчета
		|					ИЗ
		|						ВТВидыРасчета КАК ВидыРасчета
		|					ГДЕ
		|						ВидыРасчета.ПериодДействияБазовый = ИСТИНА)) КАК НачисленияФПД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчета КАК ВидыРасчета
		|		ПО (ВидыРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ВидыРасчета.ПериодДействияБазовый = ЛОЖЬ)
		|			И (Начисления.Регистратор В (&Регистраторы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВидыРасчета";
		
	Запрос.Выполнить();	
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Начисления.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей);
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТОсновныеЗаписи";
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ТаблицаРасчетаПредопределеннымСпособом()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = Новый ТаблицаЗначений;
	РасчетПредопределеннымСпособом.Колонки.Добавить("СпособРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ЗаписьРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ИсходныеДанные");
	
	Возврат РасчетПредопределеннымСпособом;
	
КонецФункции

Функция ДополнительныеПараметрыРасчетаОчередиНачислений()
	
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцНачисления,
		|МенеджерВременныхТаблиц,
		|НаборыЗаписей, 
		|ДокументСсылка,
		|ДанныеФормыОбъект,
		|СтрокиРасчетаПоИдентификатору,
		|СтрокиРаспределенияПоИдентификатору,
		|ИсходныеДанныеПоИдентификаторуСтроки,
		|ИзвестныеЗначенияПоИдентификаторуСтроки, 
		|ВызыватьИсключение");
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

// Выполняется распределение результата расчета по территориям и условиям труда, в которых сотрудник был задействован в течение месяца.
//
Процедура ЗаполнитьРаспределениеПоТерриториямУсловиямТруда(СтрокиРасчетаПоИдентификатору, СтрокиРаспределенияПоИдентификатору, Организация, Месяц)
		
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	
	СтрокиПоИдентификаторуСЗафиксированнымРасчетом = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СтрокиРасчетаПоИдентификатору Цикл
		ИдентификаторСтроки = КлючИЗначение.Ключ;
		СтрокаРасчета = КлючИЗначение.Значение;
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаРасчета.Начисление);
		Если РасчетЗафиксирован(СтрокаРасчета) И ВидРасчетаИнфо.Рассчитывается Тогда
			СтрокиПоИдентификаторуСЗафиксированнымРасчетом.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		Иначе
			// Удаляем текущее распределение.
			СтрокиРаспределенияПоИдентификатору.Удалить(ИдентификаторСтроки);
			// Заполняем данные строки в таблицу для запроса.
			НоваяСтрока = ИсходныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Начисление,
		|	НАЧАЛОПЕРИОДА(ИсходныеДанные.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	ИсходныеДанные.ДатаНачала,
		|	ИсходныеДанные.ДатаОкончания,
		|	ИсходныеДанные.ГрафикРаботы,
		|	ИсходныеДанные.ПериодРегистрацииВремени,
		|	ИсходныеДанные.ВидУчетаВремени,
		|	ИсходныеДанные.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТСтрокиРасчета
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписаниеФильтра = УчетРабочегоВремени.ОписаниеФильтраДляСоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда();
	ОписаниеФильтра.ИмяТаблицы = "ВТСтрокиРасчета";
	
	УстановитьПривилегированныйРежим(Истина);
	УчетРабочегоВремени.СоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда(МенеджерВременныхТаблиц, ОписаниеФильтра);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТИдентификаторыСтрокРаспределения
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоТерриториямУсловияхТруда КАК ВремяПоТерриториямУсловиямТруда
		|		ПО (ВремяПоТерриториямУсловиямТруда.Сотрудник = СтрокиРасчета.Сотрудник)
		|			И (ВремяПоТерриториямУсловиямТруда.Месяц = СтрокиРасчета.Месяц)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаНачала = СтрокиРасчета.ДатаНачала)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаОкончания = СтрокиРасчета.ДатаОкончания)
		|			И (ВремяПоТерриториямУсловиямТруда.ПериодРегистрацииВремени = СтрокиРасчета.ПериодРегистрацииВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ВидУчетаВремени = СтрокиРасчета.ВидУчетаВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ГрафикРаботы = СтрокиРасчета.ГрафикРаботы)
		|			И (НЕ(ВремяПоТерриториямУсловиямТруда.Территория = ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|					И ВремяПоТерриториямУсловиямТруда.УсловияТруда = ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Территории.Ссылка КАК Территория,
		|	&РайонныйКоэффициент КАК Показатель,
		|	Территории.РайонныйКоэффициент КАК Значение,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ ВТПоказателиТерриторий
		|ИЗ
		|	Справочник.ТерриторииВыполненияРабот КАК Территории
		|ГДЕ
		|	&ИспользуетсяРайонныйКоэффициент
		|	И Территории.Владелец = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияТруда.Ссылка КАК УсловияТруда,
		|	&НадбавкаЗаВредность КАК Показатель,
		|	УсловияТруда.ПроцентНадбавкиЗаВредность КАК Значение,
		|	2 КАК Порядок
		|ПОМЕСТИТЬ ВТПоказателиУсловийТруда
		|ИЗ
		|	Справочник.УсловияТруда КАК УсловияТруда
		|ГДЕ
		|	&ИспользуетсяНадбавкаЗаВредность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СтрокиРасчета.Начисление,
		|	ВремяПоТерриториямУсловиямТруда.Территория,
		|	ВремяПоТерриториямУсловиямТруда.УсловияТруда,
		|	ВремяПоТерриториямУсловиямТруда.Дней,
		|	ВремяПоТерриториямУсловиямТруда.Часов
		|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоТерриториямУсловияхТруда КАК ВремяПоТерриториямУсловиямТруда
		|		ПО (ВремяПоТерриториямУсловиямТруда.Сотрудник = СтрокиРасчета.Сотрудник)
		|			И (ВремяПоТерриториямУсловиямТруда.Месяц = СтрокиРасчета.Месяц)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаНачала = СтрокиРасчета.ДатаНачала)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаОкончания = СтрокиРасчета.ДатаОкончания)
		|			И (ВремяПоТерриториямУсловиямТруда.ПериодРегистрацииВремени = СтрокиРасчета.ПериодРегистрацииВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ВидУчетаВремени = СтрокиРасчета.ВидУчетаВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ГрафикРаботы = СтрокиРасчета.ГрафикРаботы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИдентификаторыСтрокРаспределения КАК ИдентификаторыСтрок
		|		ПО (ИдентификаторыСтрок.ИдентификаторСтроки = СтрокиРасчета.ИдентификаторСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	СУММА(Распределение.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТРаспределениеПоДням
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|
		|СГРУППИРОВАТЬ ПО
		|	Распределение.ИдентификаторСтроки
		|
		|ИМЕЮЩИЕ
		|	СУММА(Распределение.Часов) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	ЕСТЬNULL(ПоказателиТерриторий.Порядок, ПоказателиУсловийТруда.Порядок) КАК Порядок,
		|	ЕСТЬNULL(ПоказателиТерриторий.Показатель, ПоказателиУсловийТруда.Показатель) КАК Показатель,
		|	ЕСТЬNULL(ПоказателиТерриторий.Значение, ПоказателиУсловийТруда.Значение) КАК Значение
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = Распределение.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиТерриторий КАК ПоказателиТерриторий
		|		ПО (ПоказателиТерриторий.Территория = Распределение.Территория)
		|			И (ПоказателиНачислений.Показатель = ПоказателиТерриторий.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУсловийТруда КАК ПоказателиУсловийТруда
		|		ПО (ПоказателиУсловийТруда.УсловияТруда = Распределение.УсловияТруда)
		|			И (ПоказателиНачислений.Показатель = ПоказателиУсловийТруда.Показатель)
		|ГДЕ
		|	(ПоказателиТерриторий.Показатель ЕСТЬ НЕ NULL 
		|			ИЛИ ПоказателиУсловийТруда.Показатель ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Начисление,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	Распределение.Дней,
		|	Распределение.Часов,
		|	ВЫБОР
		|		КОГДА РаспределениеПоДням.ИдентификаторСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РаспределятьПоДням
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоДням КАК РаспределениеПоДням
		|		ПО (РаспределениеПоДням.ИдентификаторСтроки = Распределение.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда";
		
	ПоказательРайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	ПоказательНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
	
	Запрос.УстановитьПараметр("ИспользуетсяРайонныйКоэффициент", ЗначениеЗаполнено(ПоказательРайонныйКоэффициент));
	Запрос.УстановитьПараметр("РайонныйКоэффициент", ПоказательРайонныйКоэффициент);
	Запрос.УстановитьПараметр("ИспользуетсяНадбавкаЗаВредность", ЗначениеЗаполнено(ПоказательНадбавкаЗаВредность));
	Запрос.УстановитьПараметр("НадбавкаЗаВредность", ПоказательНадбавкаЗаВредность);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ВыборкаПоказателей = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		СтрокаРасчета = СтрокиРасчетаПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокиРаспределения = Новый Массив;
		// Используем часы в качестве долей распределения.
		// В некоторых исключительных случаях, время может быть выражено только в днях, без указания часов.
		// В таких (и только таких) случаях используем дни для распределения.
		Пока Выборка.Следующий() Цикл
			ОписаниеСтроки = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
			ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
			ОписаниеСтроки.ДоляРаспределения = Выборка.Часов;
			Если Выборка.РаспределятьПоДням Тогда
				ОписаниеСтроки.ДоляРаспределения = Выборка.Дней;
			КонецЕсли;
			// Заполняем показатели в строке.
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, Территория, УсловияТруда");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			НомерПоказателя = 1;
			Пока ВыборкаПоказателей.НайтиСледующий(СтруктураПоиска) Цикл
				ОписаниеСтроки["Показатель" + НомерПоказателя] = ВыборкаПоказателей.Показатель;
				ОписаниеСтроки["Значение" + НомерПоказателя] = ВыборкаПоказателей.Значение;
				НомерПоказателя = НомерПоказателя + 1;
			КонецЦикла;
			СтрокиРаспределения.Добавить(ОписаниеСтроки);
		КонецЦикла;
		СтрокиРаспределенияПоИдентификатору.Вставить(Выборка.ИдентификаторСтроки, СтрокиРаспределения);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтрокиПоИдентификаторуСЗафиксированнымРасчетом Цикл
		ИдентификаторСтроки = КлючИЗначение.Ключ;
		СтрокаРасчета = КлючИЗначение.Значение;
		РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределенияПоИдентификатору[ИдентификаторСтроки]);
	КонецЦикла;
	
КонецПроцедуры

// Предназначен для размещения вызовов процедур, выполняющих расчет переопределяемых показателей
// см. ПереопределяемыеПоказатели().
//
// Параметры:
//	РасчетПереопределяемыхПоказателей - таблица значений (см. ТаблицаРасчетаПереопределяемыхПоказателей).
//
Процедура РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка, РегистраторыОтбор = Неопределено)
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПереопределяемыхПоказателей, "Показатель", Истина);
	
	Для Каждого Показатель Из Показатели Цикл
		СтрокиТаблицыРасчета = РасчетПереопределяемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", Показатель));
		РассчитатьБазуСтраховыхВзносов(Показатель, СтрокиТаблицыРасчета, ДокументСсылка, РегистраторыОтбор);
		РассчитатьПоказательКоличествоДнейОтпуска(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательСдельныйЗаработок(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКалендарныеДниБезПраздников(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКоэффициентИндексацииСреднегоЗаработка(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
	КонецЕсли;

КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоэффициентИндексацииСохраняемогоДенежногоСодержания.
//
Процедура РассчитатьПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если СтрокаРасчета.Сторно Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В соответствии с положением о расчете сохраняемого денежного содержания 
	// "В случае если в период сохранения денежного содержания произошло увеличение (индексация)
	// единого денежного вознаграждения, оклада денежного содержания и (или) дополнительных выплат,
	// то исчисленное денежное содержание индексируется со дня вступления в силу
	// решения об увеличении (индексации) и до окончания указанного периода.".
	// Это значит, что необходимо 
	// - выбрать все месяцы, записи за которые рассчитываются в текущей транзакции (отбором по текущему регистратору)
	// - получить коэффициенты индексации за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ПериодДействияНачало) КАК Начало,
	|	МАКСИМУМ(Начисления.ПериодДействияКонец) КАК КОНЕЦ
	|ПОМЕСТИТЬ ВТИнтервалНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Месяц,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалНачислений КАК ИнтервалНачислений
	|		ПО (Начисления.ПериодДействия МЕЖДУ ИнтервалНачислений.Начало И ИнтервалНачислений.Конец)
	|			И (Начисления.Регистратор = &Регистратор)
	|			И (Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц,
	|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	|		ПО (КоэффициентыИндексации.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|			И (КоэффициентыИндексации.Период = ДанныеДляРасчета.Месяц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеПоСотрудникам = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		КоэффициентИндексации = 1;
		ДанныеПоМесяцам = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
			ДанныеПоМесяцам.Вставить(Выборка.Месяц, КоэффициентИндексации);
		КонецЦикла;
		ДанныеПоСотрудникам.Вставить(Выборка.Сотрудник, ДанныеПоМесяцам);
	КонецЦикла;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		КоэффициентИндексации = 1;
		ДанныеПоМесяцам = ДанныеПоСотрудникам[СтрокаРасчета.Сотрудник];
		Если ДанныеПоМесяцам <> Неопределено Тогда
			ДанныеМесяца = ДанныеПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
			Если ДанныеМесяца <> Неопределено Тогда
				КоэффициентИндексации = ДанныеМесяца;
			КонецЕсли;
		КонецЕсли;
		СтрокаРасчета.Значение = КоэффициентИндексации;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоэффициентИндексацииСреднегоЗаработка.
//
Процедура РассчитатьПоказательКоэффициентИндексацииСреднегоЗаработка(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если СтрокаРасчета.Сторно Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В соответствии с положением о расчете среднего заработка 
	// «..если повышение произошло в период сохранения среднего заработка, 
	// - часть среднего заработка повышается с даты повышения тарифной ставки...».
	// Это значит, что необходимо 
	// - выбрать все месяцы, записи за которые рассчитываются в текущей транзакции (отбором по текущему регистратору)
	// - получить коэффициенты индексации заработка за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ПериодДействияНачало) КАК Начало,
	|	МАКСИМУМ(Начисления.ПериодДействияКонец) КАК КОНЕЦ
	|ПОМЕСТИТЬ ВТИнтервалНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Месяц,
	|	Начисления.ВидРасчета,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалНачислений КАК ИнтервалНачислений
	|		ПО Начисления.ПериодДействия > ИнтервалНачислений.Начало
	|			И Начисления.ПериодДействия <= ИнтервалНачислений.КОНЕЦ
	|			И (Начисления.Регистратор = &Регистратор)
	|			И (Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц,
	|	ДанныеДляРасчета.ВидРасчета,
	|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	|		ПО (КоэффициентыИндексации.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|			И (КоэффициентыИндексации.Период = ДанныеДляРасчета.Месяц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.ВидРасчета,
	|	ДанныеДляРасчета.Месяц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеПоСотрудникам = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ДанныеПоВидамРасчета = Новый Соответствие;
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
			КоэффициентИндексации = 1;
			ДанныеПоМесяцам = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
				ДанныеПоМесяцам.Вставить(Выборка.Месяц, КоэффициентИндексации);
			КонецЦикла;
			ДанныеПоВидамРасчета.Вставить(Выборка.ВидРасчета, ДанныеПоМесяцам);
		КонецЦикла;
		ДанныеПоСотрудникам.Вставить(Выборка.Сотрудник, ДанныеПоВидамРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		КоэффициентИндексации = 1;
		ДанныеПоВидамРасчета = ДанныеПоСотрудникам[СтрокаРасчета.Сотрудник];
		Если ДанныеПоВидамРасчета <> Неопределено Тогда
			ДанныеПоМесяцам = ДанныеПоВидамРасчета[СтрокаРасчета.ВидРасчета];
			Если ДанныеПоМесяцам <> Неопределено Тогда
				ДанныеМесяца = ДанныеПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
				Если ДанныеМесяца <> Неопределено Тогда
					КоэффициентИндексации = ДанныеМесяца;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаРасчета.Значение = КоэффициентИндексации;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя РасчетнаяБазаСтраховыеВзносы.
//
Процедура РассчитатьБазуСтраховыхВзносов(Показатель, СтрокиРасчета, ДокументСсылка, РегистраторыОтбор= Неопределено)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы") Тогда
		Возврат;
	КонецЕсли;
	
	ФизлицаОрганизаций = Новый ТаблицаЗначений;
	ФизлицаОрганизаций.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизлицаОрганизаций.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФизлицаОрганизаций.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ФизлицаОрганизаций.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	СтрокиПоИдентификатору = Новый Соответствие;
	
	Организация = Неопределено;
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Организация = СтрокаРасчета.Организация;
		НоваяСтрока = ФизлицаОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Дата = СтрокаРасчета.ДатаНачала;
		НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = НачалоМесяца(СтрокаРасчета.ДатаНачала);
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = КонецМесяца(СтрокаРасчета.ДатаНачала);
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, НачалоМесяца(СтрокаРасчета.ДатаНачала));
		ОкончаниеПериода = Макс(ОкончаниеПериода, КонецМесяца(СтрокаРасчета.ДатаНачала));
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизлицаОрганизаций.ФизическоеЛицо,
	|	ФизлицаОрганизаций.ГоловнаяОрганизация,
	|	ФизлицаОрганизаций.Дата,
	|	ФизлицаОрганизаций.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ФизлицаОрганизаций КАК ФизлицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизлицаОрганизаций.ФизическоеЛицо,
	|	ФизлицаОрганизаций.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФизлицаОрганизаций
	|ИЗ
	|	ВТИсходныеДанные КАК ФизлицаОрганизаций";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизлицаОрганизаций", ФизлицаОрганизаций);
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
		НачалоПериода, ОкончаниеПериода, Организация, МенеджерВременныхТаблиц, , , , , , Истина);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	СУММА(СведенияОДоходах.БазаПФР) КАК Значение
	|ИЗ
	|	ВТИсходныеДанные КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОДоходах КАК СведенияОДоходах
	|		ПО (СведенияОДоходах.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
	|			И (СведенияОДоходах.ГоловнаяОрганизация = ДанныеДляРасчета.ГоловнаяОрганизация)
	|			И (СведенияОДоходах.Период = НАЧАЛОПЕРИОДА(ДанныеДляРасчета.Дата, МЕСЯЦ))
	|			И (СведенияОДоходах.Регистратор <> &Регистратор)
	|			И (СведенияОДоходах.Регистратор В (&МассивВременныхСсылок))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("МассивВременныхСсылок", РегистраторыОтбор);
	
	Если РегистраторыОтбор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СведенияОДоходах.Регистратор В (&МассивВременныхСсылок))", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоличествоДнейОтпуска.
//
Процедура РассчитатьПоказательКоличествоДнейОтпуска(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК НачалоПериода,
	|	Начисления.ПериодДействияКонец КАК ОкончаниеПериода,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			Регистратор = &Регистратор
	|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляРасчета.Сотрудник КАК ГрафикРаботы,
	|	ДанныеДляРасчета.НачалоПериода,
	|	ДанныеДляРасчета.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	ОстаткиОтпусков.СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета", "Сотрудник,НачалоПериода");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(ДоговораСотрудников.КраткосрочныйТрудовойДоговор, ЛОЖЬ)
	|							ТОГДА ДанныеКалендаря.ДнейПоШестидневке
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|									ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	|								ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|						ТОГДА ДанныеКалендаря.ДнейПоШестидневке
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|								ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	|							ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК Значение
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	|		ПО (ДанныеКалендаря.НачалоПериода = ДанныеДляРасчета.НачалоПериода)
	|			И (ДанныеКалендаря.ОкончаниеПериода = ДанныеДляРасчета.ОкончаниеПериода)
	|			И (ДанныеКалендаря.ГрафикРаботы = ДанныеДляРасчета.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКраткосрочныеТрудовыеДоговорыСотрудников КАК ДоговораСотрудников
	|		ПО (ДоговораСотрудников.Период = ДанныеДляРасчета.НачалоПериода)
	|			И (ДоговораСотрудников.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|		ПО ДанныеДляРасчета.ВидРасчета = Начисления.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КалендарныеДниБезПраздников.
//
Процедура РассчитатьПоказательКалендарныеДниБезПраздников(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК НачалоПериода,
	|	Начисления.ПериодДействияКонец КАК ОкончаниеПериода,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			Регистратор = &Регистратор
	|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляРасчета.Сотрудник КАК ГрафикРаботы,
	|	ДанныеДляРасчета.НачалоПериода,
	|	ДанныеДляРасчета.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников КАК Значение
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	|		ПО (ДанныеКалендаря.НачалоПериода = ДанныеДляРасчета.НачалоПериода)
	|			И (ДанныеКалендаря.ОкончаниеПериода = ДанныеДляРасчета.ОкончаниеПериода)
	|			И (ДанныеКалендаря.ГрафикРаботы = ДанныеДляРасчета.Сотрудник)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя СдельныйЗаработок.
//
Процедура РассчитатьПоказательСдельныйЗаработок(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
		Если Не ЗначениеЗаполнено(МинимальнаяДата) Тогда
			МинимальнаяДата = СтрокаРасчета.ДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МаксимальнаяДата) Тогда
			МаксимальнаяДата = СтрокаРасчета.ДатаОкончания;
		КонецЕсли;
		Если СтрокаРасчета.ДатаНачала < МинимальнаяДата Тогда
			МинимальнаяДата = СтрокаРасчета.ДатаНачала;
		КонецЕсли;
		Если СтрокаРасчета.ДатаОкончания > МаксимальнаяДата Тогда
			МаксимальнаяДата = СтрокаРасчета.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("СдельныйЗаработок", Показатель);
	Запрос.УстановитьПараметр("НачалоПервогоМесяца", НачалоМесяца(МинимальнаяДата));
	Запрос.УстановитьПараметр("КонецПоследнегоМесяца", КонецМесяца(МаксимальнаяДата));
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", КонецДня(МаксимальнаяДата));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ПериодДействия КАК Месяц,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &Регистратор
		|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)
		|				И ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ) КАК Начисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Начисления.Организация,
		|	Начисления.ПериодДействия,
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(Начисления.ПериодДействияКонец, МЕСЯЦ),
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
		|	И Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА";
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыполненныеРаботы.Период КАК Месяц,
		|	ВыполненныеРаботы.Сотрудник,
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.ОбъемВыполненныхРаботОборот КАК ОбъемВыполненныхРабот
		|ПОМЕСТИТЬ ВТВыполненныеРаботыПоМесяцам
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ДанныеДляРасчета.Сотрудник
		|				ИЗ
		|					ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|				ГДЕ
		|					ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ВыполненныеРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.Период
		|ПОМЕСТИТЬ ВТВидыРаботПериоды
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО (ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник)
		|			И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботыПоМесяцам.ВидРабот,
		|	ВыполненныеРаботыПоМесяцам.Месяц
		|ИЗ
		|	ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботыПоМесяцам";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РасценкиРаботСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТВидыРаботПериоды",
			"ВидРабот"));
	
	// Учитывая данные расценок, рассчитаем значения показателя для сотрудников.
	// Суммируем значения с оперативным показателем, т.к. некоторые значения могли быть определены и непосредственно.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияОперативногоПоказателя.Период КАК Месяц,
		|	ЗначенияОперативногоПоказателя.Сотрудник,
		|	ЗначенияОперативногоПоказателя.ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Организация,
		|	ЗначенияОперативногоПоказателя.ЗначениеОборот КАК Значение
		|ПОМЕСТИТЬ ВТСдельныйЗаработокПоМесяцам
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Показатель = &СдельныйЗаработок
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ДанныеДляРасчета.Сотрудник
		|					ИЗ
		|						ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|					ГДЕ
		|						ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативногоПоказателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияОперативногоПоказателя.Период,
		|	ЗначенияОперативногоПоказателя.Сотрудник,
		|	ЗначенияОперативногоПоказателя.ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Организация,
		|	ЗначенияОперативногоПоказателя.ЗначениеОборот
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Показатель = &СдельныйЗаработок
		|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				И (ФизическоеЛицо, Организация) В
		|					(ВЫБРАТЬ
		|						ДанныеДляРасчета.ФизическоеЛицо,
		|						ДанныеДляРасчета.Организация
		|					ИЗ
		|						ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|					ГДЕ
		|						ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативногоПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателя.ИдентификаторСтроки,
		|	СУММА(ЗначенияПоказателя.Значение) КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		ЕСТЬNULL(ВыполненныеРаботы.ОбъемВыполненныхРабот, 0) * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0) КАК Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|				ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|					И ВыполненныеРаботы.Период = РасценкиРаботСотрудников.Период
		|			ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|				И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.Сотрудник = ЗначенияОперативногоПоказателя.Сотрудник
		|				И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|			ПО (Сотрудники.Ссылка = ДанныеДляРасчета.Сотрудник)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|			ПО (Сотрудники.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо)
		|				И (ЗначенияОперативногоПоказателя.Организация = ДанныеДляРасчета.Организация)
		|				И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ВыполненныеРаботы.ОбъемВыполненныхРабот * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0)
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботы
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|				ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|					И ВыполненныеРаботы.Месяц = РасценкиРаботСотрудников.Период
		|			ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|				И (ВыполненныеРаботы.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокПоМесяцам КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.Сотрудник = ЗначенияОперативногоПоказателя.Сотрудник
		|				И (ЗначенияОперативногоПоказателя.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокПоМесяцам КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо
		|				И (ЗначенияОперативногоПоказателя.Организация = ДанныеДляРасчета.Организация)
		|				И (ЗначенияОперативногоПоказателя.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияПоказателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателя.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Метод преобразовывает значения показателей, указанные в строке, 
// в структуру, которую в свою очередь вставляет в соответствие по идентификатору строки.
// В строке данных показатели представлены в виде Показатель1, ..., ПоказательN.
// Кроме того, выполняется поиск значения показателя в коллекции известных значений.
// 
// Параметры:
//	- СтрокаДанных - строка коллекции с полями показателей и их значений.
//	- ИдентификаторСтроки - число, ключ, по которому структура со значениями показателей помещается в соответствие.
//	- ИсходныеДанныеПоИдентификаторуСтроки - соответствие, 
//	- КоличествоПоказателей - число, количество показателей в коллекции, 
//	- ИзвестныеЗначенияПоказателей - необязательный, таблица значений с известными показателями, 
//	- ИзвестныеЗначенияПоИдентификаторуСтроки - соответствие для упаковки известных показателей.
//
Процедура УпаковатьЗначенияПоказателей(СтрокаДанных, ИдентификаторСтроки, ИсходныеДанныеПоИдентификаторуСтроки, ПоказателиВидаРасчета, КоличествоПоказателей, ПереопределяемыеПоказатели, ИзвестныеЗначенияПоказателей = Неопределено, ИзвестныеЗначенияПоказателейПоОснованиям = Неопределено, ИзвестныеЗначенияПоИдентификаторуСтроки = Неопределено)
	
	ИсходныеДанные = Новый Структура("Результат", 0);
	ИзвестныеЗначения = Новый Структура;
	
	НомерПоказателя = 0;
	Для Каждого СведенияОПоказателе Из ПоказателиВидаРасчета Цикл
		НомерПоказателя = НомерПоказателя + 1;
		Показатель = СведенияОПоказателе.Показатель;
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
		ИсходныеДанные.Вставить(ИдентификаторПоказателя, СтрокаДанных["Значение" + НомерПоказателя]);
		// Если расчет показателя переопределяется, вписываем его в отдельную коллекцию, 
		// но только, если его значение не определено по данным учета.
		Если ЗарплатаКадрыРасширенныйПовтИсп.ПоказателиПереопределяемогоРасчета().Найти(Показатель) <> Неопределено Тогда
			ПереопределяемыеПоказатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем все известные значения показателей сотрудника.
	Если ИзвестныеЗначенияПоказателей <> Неопределено Тогда
		ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателей.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
		Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
			ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзвестныеЗначенияПоказателейПоОснованиям <> Неопределено Тогда
		Отбор = Новый Структура("Сотрудник, ДокументОснование", СтрокаДанных.Сотрудник, СтрокаДанных.ДокументОснование);
		ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателейПоОснованиям.НайтиСтроки(Отбор);
		Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
			ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
		КонецЦикла;
		// Значения не запрашиваемых показателей добавляем без учета основания.
		Если СтрокаДанных.ДокументОснование <> Неопределено И ПоказателиВидаРасчета <> Неопределено Тогда 
			ОтобранныеПоказатели = Новый Соответствие;
			Для Каждого ДанныеПоказателя Из ПоказателиВидаРасчета Цикл
				Если Не ДанныеПоказателя.ЗапрашиватьПриВводе И Не ДанныеПоказателя.ЗначениеРассчитываетсяАвтоматически Тогда 
					ОтобранныеПоказатели.Вставить(ДанныеПоказателя.Показатель, Истина);
				КонецЕсли;
			КонецЦикла;
			Если ОтобранныеПоказатели.Количество() > 0 Тогда 
				Отбор = Новый Структура("Сотрудник", СтрокаДанных.Сотрудник);
				ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателейПоОснованиям.НайтиСтроки(Отбор);
				Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
					Если ОтобранныеПоказатели[ДанныеЗначения.Показатель] <> Неопределено Тогда 
						ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
						ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем "предопределенные" исходные данные
	// - оплаченное (отработанное) время.
	ИсходныеДанные.Вставить("ОплаченоДней", 0);
	ИсходныеДанные.Вставить("ОплаченоЧасов", 0);
	Если ЕстьПолеВСтрокеКоллекции(СтрокаДанных, "ОплаченоДней") Тогда
		ИсходныеДанные.ОплаченоДней = СтрокаДанных.ОплаченоДней;
		ИсходныеДанные.ОплаченоЧасов = СтрокаДанных.ОплаченоЧасов;
	КонецЕсли;
	// - норма времени
	ИсходныеДанные.Вставить("НормаДней", 0);
	ИсходныеДанные.Вставить("НормаЧасов", 0);
	Если ЕстьПолеВСтрокеКоллекции(СтрокаДанных, "НормаДней") Тогда
		ИсходныеДанные.НормаДней = СтрокаДанных.НормаДней;
		ИсходныеДанные.НормаЧасов = СтрокаДанных.НормаЧасов;
	КонецЕсли;
	
	ИсходныеДанныеПоИдентификаторуСтроки[ИдентификаторСтроки] = ИсходныеДанные;
	Если ИзвестныеЗначения.Количество() > 0 Тогда
		ИзвестныеЗначенияПоИдентификаторуСтроки[ИдентификаторСтроки] = ИзвестныеЗначения;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОтменятьЗапись = Истина, ОкончательныйРасчетЗарплаты = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено)
	
	// Для формирования доходов создаем коллекцию наборов записей.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	ДатаОкончания = КонецМесяца(МесяцНачисления);
	
	Если ДатаУдержанияИсчисленногоНалога = Неопределено Тогда 
		ДатаУдержанияИсчисленногоНалога = ДатаОкончания;
	КонецЕсли;
	
	Если ОтменятьЗапись Тогда 
		НачатьТранзакцию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Формируем доходы по начислениям и по таблице перерасчета.
	Если ИменаВТ.Найти("ВТНачисления") <> Неопределено Или ИменаВТ.Найти("ВТНачисленияПерерасчет") <> Неопределено Тогда 
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
		ЗначениеПустойСсылки = "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)";

		ТекстЗапросаНачисления = 
		"ВЫБРАТЬ
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.Начисление,
		|	НачисленияДокумента.ДатаНачала,
		|	НачисленияДокумента.ДатаОкончания,
		|	НачисленияДокумента.КодВычетаНДФЛ,
		|	НачисленияДокумента.СуммаДохода,
		|	НачисленияДокумента.СуммаВычетаНДФЛ,
		|	НачисленияДокумента.Подразделение,
		|	НачисленияДокумента.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НачисленияДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	НачисленияДокумента.Сторно КАК Сторно
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаНДФЛ
		|ИЗ
		|	#ИмяВТНачисления КАК НачисленияДокумента";

		Если ИменаВТ.Найти("ВТНачисления") <> Неопределено И ИменаВТ.Найти("ВТНачисленияПерерасчет") = Неопределено Тогда	
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисления");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СторнируемыйДокумент", ЗначениеПустойСсылки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.Сторно", "ЛОЖЬ");
		ИначеЕсли ИменаВТ.Найти("ВТНачисленияПерерасчет") <> Неопределено И ИменаВТ.Найти("ВТНачисления") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисленияПерерасчет");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисления");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СторнируемыйДокумент", ЗначениеПустойСсылки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.Сторно", "ЛОЖЬ");
			
			ТекстЗапроса = ТекстЗапроса + " 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ";
			
			ТекстЗапросаНачисления = СтрЗаменить(ТекстЗапросаНачисления, "ВЫБРАТЬ", "");
			ТекстЗапросаНачисления = СтрЗаменить(ТекстЗапросаНачисления, "ПОМЕСТИТЬ ВТНачисленияДляРасчетаНДФЛ", "");
			ТекстЗапросаНачисления = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисленияПерерасчет");
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаНачисления;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();	
		
		УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
			НаборыЗаписей, Ложь, Организация, ДатаОкончания, ДатаУдержанияИсчисленногоНалога, МенеджерВременныхТаблиц, МесяцНачисления, Истина, ОкончательныйРасчетЗарплаты, "ВТНачисленияДляРасчетаНДФЛ");
			
	КонецЕсли;
	
	// Формируем доходы по начислениям по договорам.
	Если ИменаВТ.Найти("ВТНачисленияПоДоговорам") <> Неопределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачисленияПоДоговорам.Сотрудник,
		|	НачисленияПоДоговорам.ФизическоеЛицо,
		|	НачисленияПоДоговорам.Начисление,
		|	НачисленияПоДоговорам.Подразделение,
		|	НачисленияПоДоговорам.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
		|	НачисленияПоДоговорам.КодДохода,
		|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
		|	НачисленияПоДоговорам.КодВычетаНДФЛ КАК КодВычета,
		|	НачисленияПоДоговорам.СуммаВычета
		|ИЗ
		|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам
		|ГДЕ
		|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборыЗаписей, Ложь, Организация, ДатаОкончания, Запрос.Выполнить().Выгрузить(), Истина, ОкончательныйРасчетЗарплаты);
	КонецЕсли;
	
	// Формируем доходы по прочим начислениям.
	Если ИменаВТ.Найти("ВТПрочиеНачисления") <> Неопределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрочиеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрочиеНачисления.Подразделение,
		|	ПрочиеНачисления.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	ПрочиеНачисления.ДатаНачала КАК ДатаПолученияДохода,
		|	ПрочиеНачисления.КодДохода,
		|	ПрочиеНачисления.Сумма КАК СуммаДохода,
		|	ПрочиеНачисления.КодВычетаНДФЛ КАК КодВычета,
		|	ПрочиеНачисления.СуммаВычета
		|ИЗ
		|	ВТПрочиеНачисления КАК ПрочиеНачисления";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборыЗаписей, Ложь, Организация, ДатаОкончания, Запрос.Выполнить().Выгрузить(), Истина, ОкончательныйРасчетЗарплаты);
	КонецЕсли;	
	
	// Рассчитываем НДФЛ
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления, ОкончательныйРасчетЗарплаты, ДатаУдержанияИсчисленногоНалога);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОтменятьЗапись Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
		
	// Упорядочим таблицу НДФЛ по тем же правилам, что и начисления (для этого получаем основных сотрудников).
	Физлица = ОбщегоНазначения.ВыгрузитьКолонку(РезультатРасчетаНДФЛ.НДФЛ, "ФизическоеЛицо", Истина);
	СотрудникиФизическиеЛица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(Физлица, Истина, Организация, МесяцНачисления);
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическиеЛица, "Сотрудник", Истина);
	
	// По основным сотрудникам запрашиваем сведения о рабочих местах на конец месяца.
	МенеджерВТУпорядочивания = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВТУпорядочивания, Истина, Сотрудники, "Подразделение,Должность", КонецМесяца(МесяцНачисления));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Подразделение,
	|	КадровыеДанныеСотрудников.Должность,
	|	Должности.РеквизитДопУпорядочивания КАК ПорядокДолжности,
	|	Подразделения.РеквизитДопУпорядочивания КАК ПорядокПодразделения,
	|	Сотрудники.Наименование
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО (Должности.Ссылка = КадровыеДанныеСотрудников.Должность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО (Подразделения.Ссылка = КадровыеДанныеСотрудников.Подразделение)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = КадровыеДанныеСотрудников.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокДолжности,
	|	ПорядокПодразделения,
	|	Сотрудники.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТУпорядочивания;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорядокПоФизическимЛицам = Новый Соответствие;
	Порядок = 0;
	Пока Выборка.Следующий() Цикл
		ПорядокПоФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, Порядок);
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// На основе полученного соответствия сортируем строки таблицы.
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Добавить("ПорядокСтрок");
	Для Каждого Строка Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		Строка.ПорядокСтрок = ПорядокПоФизическимЛицам[Строка.ФизическоеЛицо];
	КонецЦикла;
	РезультатРасчетаНДФЛ.НДФЛ.Сортировать("ПорядокСтрок,МесяцНалоговогоПериода,Подразделение");
	
	Возврат РезультатРасчетаНДФЛ;
	
КонецФункции

// Выполняет непосредственный расчет результата для записи регистра расчета Удержания, 
// рассчитываемой по произвольной формуле.
// Записи, рассчитываемые предопределенным способом откладываются в таблицу значений РасчетПредопределеннымСпособом.
//
// Параметры:
//	Запись - РегистрРасчетаЗапись.Удержания,
//	СпособРасчета - ПеречислениеСсылка.СпособыРасчетаУдержаний
//	ИсходныеДанные - структура, содержащая в себе значения показателей и поля результата расчета.
//	ФормулаДляВыполнения - строка.
//	ФормулаДляПредставления - строка.
//	РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                     исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьЗаписьУдержания(Запись, СпособРасчета, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, РасчетПредопределеннымСпособом, УдержанныеСуммы, ВызыватьИсключение = Истина)
		
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		// Если расчет выполняется предопределенным способом, 
		// откладываем запись в отдельную коллекцию.
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = Запись;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		Возврат;
	КонецЕсли;
	
	Если Запись.ФиксРасчет Или Не ИсходныеДанные.Рассчитывается Тогда
		ИсходныеДанные.Результат = Запись.Результат;
	КонецЕсли;
	
	Если Запись.ФиксРасчет Тогда
		// Если сумма внесена вручную, то ничего далее не предпринимаем.
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Рассчитывается Тогда
		Попытка 
			Запись.Результат = Вычислить(ФормулаДляВыполнения);
		Исключение
			Если Не ВызыватьИсключение Тогда
				Запись.Результат = 0;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При расчете удержания «%1» для сотрудника %2 возникла ошибка: %4
						  |Формула, используемая при расчете: %3'"),
					Запись.ВидРасчета, Запись.ФизическоеЛицо, ФормулаДляПредставления, ИнформацияОбОшибке().Описание);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	// Корректируем на величину уже удержанной суммы.
	// В том числе суммы, которые не рассчитываются.
	Если УдержанныеСуммы <> Неопределено Тогда
		// 4D:ERP для Беларуси, Яна, 19.07.2017 16:10:01 
		// Ошибки Зарплатного модуля, №15414 
		// {
		
		ОтборСтрок = Новый Структура(
			"Месяц, 
			|Организация, 
			|ФизическоеЛицо,
			|ВидРасчета");
			//|ВидРасчета, 
			//|ДокументОснование");
		// }
		// 4D	
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Запись);
		ОтборСтрок.Месяц = НачалоМесяца(Запись.ПериодДействияНачало);
		НайденныеСтроки = УдержанныеСуммы.НайтиСтроки(ОтборСтрок);
		// Нужно результат "пропустить сквозь" ранее удержанные суммы, учесть то, что уже ранее было удержано.
		// В свою очередь учитывая, также корректируем и ранее удержанные суммы.
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Запись.Результат = Запись.Результат - НайденнаяСтрока.Удержано;
			НайденнаяСтрока.Удержано = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Запись.Сторно Тогда
		Запись.Результат = - Запись.Результат;
	КонецЕсли;
	
	ИсходныеДанные.Результат = Запись.Результат;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияВычетов(Начисления, Организация, ДокументСсылка, ПланируемаяДатаВыплаты, ЗаполнениеСтрок = Неопределено) Экспорт 
	
	Если Начисления.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаНачислений = Начисления[0];
	Если ТипЗнч(СтрокаНачислений) = Тип("СтрокаТаблицыЗначений") Тогда 
		ТаблицаНачислений = СтрокаНачислений.Владелец();
		ЕстьПолеФиксСуммаВычета = ТаблицаНачислений.Колонки.Найти("ФиксСуммаВычета") <> Неопределено;
		ЕстьПолеВычетПредоставленныйДругомуРодителю = ТаблицаНачислений.Колонки.Найти("ВычетПредоставленныйДругомуРодителю") <> Неопределено;
	Иначе 	
		ЕстьПолеФиксСуммаВычета = СтрокаНачислений.Свойство("ФиксСуммаВычета");
		ЕстьПолеВычетПредоставленныйДругомуРодителю = СтрокаНачислений.Свойство("ВычетПредоставленныйДругомуРодителю")
	КонецЕсли;	
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИсходныеДанные.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число"));
	
	СписокНачислений = Новый Массив;
	СписокСотрудников = Новый Массив;
	
	УникальныеНачисления = Новый Соответствие;
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаНачислений Из Начисления Цикл 
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
		Если ЕстьПолеВычетПредоставленныйДругомуРодителю Тогда 
			НоваяСтрока.Результат = НоваяСтрока.Результат + СтрокаНачислений.ВычетПредоставленныйДругомуРодителю;
		КонецЕсли;	
		Если УникальныеНачисления[НоваяСтрока.Начисление] = Неопределено Тогда 
			УникальныеНачисления.Вставить(НоваяСтрока.Начисление, Истина);
			Если ЗначениеЗаполнено(НоваяСтрока.Начисление) Тогда 
				СписокНачислений.Добавить(НоваяСтрока.Начисление);
			КонецЕсли;
		КонецЕсли;
		Если УникальныеСотрудники[НоваяСтрока.Сотрудник] = Неопределено Тогда 
			УникальныеСотрудники.Вставить(НоваяСтрока.Сотрудник);
			Если ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда 
				СписокСотрудников.Добавить(НоваяСтрока.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КодыДоходовНДФЛ = Новый Соответствие;
	Если СписокНачислений.Количество() > 0 Тогда 
		КодыДоходовНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокНачислений, "КодДоходаНДФЛ");
	КонецЕсли;
	
	ФизическиеЛица = Новый Соответствие;
	Если СписокСотрудников.Количество() > 0 Тогда 
		ФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо");
	КонецЕсли;
	
	НачисленияФизическихЛиц = Новый ТаблицаЗначений;
	НачисленияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияФизическихЛиц.Колонки.Добавить("КодДоходаНДФЛ", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияФизическихЛиц.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияФизическихЛиц.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	НачисленияФизическихЛиц.Колонки.Добавить("СтрокаНачислений");
	
	Для Каждого СтрокаНачислений Из Начисления Цикл 
		НоваяСтрока = НачисленияФизическихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
	    НоваяСтрока.ФизическоеЛицо = ФизическиеЛица[НоваяСтрока.Сотрудник];
	    НоваяСтрока.КодДоходаНДФЛ = КодыДоходовНДФЛ[НоваяСтрока.Начисление];
		НоваяСтрока.СтрокаНачислений = СтрокаНачислений;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.НомерСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Начисление,
		|	ИсходныеДанные.Результат,
		|	ИсходныеДанные.КодВычета,
		|	ИсходныеДанные.КоличествоДетей
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Регистратор КАК Регистратор,
		|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	ДанныеДокумента.Результат КАК Сумма,
		|	ДанныеДокумента.КодВычета КАК КодВычета,
		|	ДанныеДокумента.КоличествоДетей КАК КоличествоДетей
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента";
		
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
		
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(ДокументСсылка, Организация, ПланируемаяДатаВыплаты, Запрос.МенеджерВременныхТаблиц);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыКДоходамФизическихЛиц.ФизическоеЛицо,
		|	ВычетыКДоходамФизическихЛиц.КодДохода,
		|	ВычетыКДоходамФизическихЛиц.КодВычета,
		|	ВычетыКДоходамФизическихЛиц.СуммаВычета
		|ИЗ
		|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходамФизическихЛиц";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, КодДоходаНДФЛ");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборСтрок.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ОтборСтрок.КодДоходаНДФЛ = Выборка.КодДохода;
		
		СтрокиНачисленийФизическогоЛица = НачисленияФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Если СтрокиНачисленийФизическогоЛица.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СуммаВычетаОстаток = Выборка.СуммаВычета;
		Для Каждого СтрокаНачисленийФизическогоЛица Из СтрокиНачисленийФизическогоЛица Цикл 
			СтрокаНачислений = СтрокаНачисленийФизическогоЛица.СтрокаНачислений;
			ДанныеВычета = Новый Структура("СуммаВычета", 0);
			ПересчитатьСуммуВычета = Не ЕстьПолеФиксСуммаВычета Или Не СтрокаНачислений.ФиксСуммаВычета;
			Если ПересчитатьСуммуВычета Тогда
				ВычетПредоставленныйДругомуРодителю = ?(ЕстьПолеВычетПредоставленныйДругомуРодителю, СтрокаНачислений.ВычетПредоставленныйДругомуРодителю, 0);
				СуммаВычета = Макс(0, СуммаВычетаОстаток - ВычетПредоставленныйДругомуРодителю);
				СуммаВычета = Мин(СуммаВычета, СтрокаНачислений.Результат);
				ДанныеВычета.Вставить("СуммаВычета", СуммаВычета);
			Иначе 
				ЗаполнитьЗначенияСвойств(ДанныеВычета, СтрокаНачислений);						
			КонецЕсли;
			
			СуммаВычетаОстаток = Макс(0, СуммаВычетаОстаток - ДанныеВычета.СуммаВычета);
			
			ДанныеВычета.Вставить("КодВычета", Выборка.КодВычета);
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ДанныеВычета);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

// Создает временную таблиц ВТНачисления
// 	Параметры
//		МенеджерВременныхТаблиц – менеджер временных таблиц, в который помещается таблица ВТНачисления
//		ИменаВТ – массив имен временных таблиц, помещенных в МенеджерВременныхТаблиц
//		ДополнительныеПараметры – структура параметров, см ДополнительныеПараметрыСоздатьВТНачисления
//
Процедура СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ДополнительныеПараметры) Экспорт
	
	Начисления = ДополнительныеПараметры.Начисления;
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ЗаполнениеСтрок = ДополнительныеПараметры.ЗаполнениеСтрок;
	ИмяВТ = ДополнительныеПараметры.ИмяВТ;
	Организация = ДополнительныеПараметры.Организация;
	МесяцНачисления = ДополнительныеПараметры.МесяцНачисления;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Заполняем начисления во временную таблицу СУБД.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.Результат,
		|	Начисления.СуммаВычета,
		|	Начисления.КодВычета,
		|	Начисления.Подразделение,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисленияБезОтбора
		|ИЗ
		|	&Начисления КАК Начисления";
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНачислений.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаНачислений.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));  
	ТаблицаНачислений.Колонки.Добавить("СторнируемыйДокумент", Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплаты"));
	ТаблицаНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	
	РаспределениеПоТерриториямУсловиямТруда = Неопределено;
	Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		РаспределениеПоТерриториямУсловиямТруда = ПустаяТаблицаРаспределениеПоТерриториямУсловиямТруда();
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		НоваяСтрока = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация)
			И ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "РаспределениеПоТерриториямУсловиямТруда")
			И СтрокаНачислений.РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоТерриториямУсловиямТруда Цикл
				ЗаполнитьЗначенияСвойств(РаспределениеПоТерриториямУсловиямТруда.Добавить(), СтрокаРаспределения);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачислений);
	Запрос.Выполнить();
	
	// Начисления с отбором.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.Результат КАК СуммаДохода,
		|	Начисления.СуммаВычета КАК СуммаВычетаНДФЛ,
		|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
		|	Начисления.КодВычета КАК КодВычетаНДФЛ,
		|	Начисления.Подразделение,
		|	Начисления.Подразделение КАК ПодразделениеОрганизации,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисленияСОтбором
		|ИЗ
		|	ВТНачисленияБезОтбора КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|ГДЕ
		|	(Начисления.Сотрудник В (&Сотрудники)
		|			ИЛИ &БезОтбораПоСотрудникам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияБезОтбора";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.Выполнить();
	
	СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияСОтбором");
	
	// Формируем целевую ВТ.
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.СуммаДохода КАК СуммаДохода,
			|	Начисления.Подразделение КАК Подразделение,
			|	Начисления.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	Начисления.*
			|ПОМЕСТИТЬ #ИмяВТ
			|ИЗ
			|	ВТНачисленияСОтбором КАК Начисления";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.Результат
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
			|ИЗ
			|	&РаспределениеПоТерриториямУсловиямТруда КАК Распределение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Распределение.Результат, Начисления.СуммаДохода) КАК СуммаДохода,
			|	ВЫБОР
			|		КОГДА Распределение.Территория ЕСТЬ НЕ NULL 
			|				И Распределение.Территория <> НЕОПРЕДЕЛЕНО
			|				И Распределение.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА Распределение.Территория
			|		ИНАЧЕ Начисления.Подразделение
			|	КОНЕЦ КАК Подразделение,
			|	Распределение.Территория КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
			|	Начисления.*
			|ПОМЕСТИТЬ #ИмяВТ
			|ИЗ
			|	ВТНачисленияСОтбором КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
			|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТРаспределениеПоТерриториямУсловиямТруда";
			
		Запрос.УстановитьПараметр("РаспределениеПоТерриториямУсловиямТруда", РаспределениеПоТерриториямУсловиямТруда);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ", ИмяВТ);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТНачисленияСОтбором";
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить(ИмяВТ);
	
КонецПроцедуры

// Процедура удаляет из переданной коллекции строки, 
// фактический период действия которых в результате вытеснения другими записями получился пустым.
//
// Параметры:
//	- ДанныеДляНачисления - коллекция строк начислений.
//	- Регистратор - ссылка на регистратор, по которому записан анализируемый набор записей начислений.
//
Процедура ИсключитьСтрокиПолностьюВытесненныхНачислений(ДанныеДляНачисления, Регистратор)
	
	// Строки, которые целиком пришлись на период ранее введенного отклонения, можно удалить.
	// Для их выявления, запишем набор записей (он должен быть уже записан), 
	// и исключим те записи, фактический период действия которых будет пустым.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФПД.НомерСтроки
		|ПОМЕСТИТЬ ВТФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК ФПД
		|ГДЕ
		|	ФПД.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФПД.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФПД КАК ФПД
		|		ПО (ФПД.НомерСтроки = Начисления.НомерСтроки)
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|	И ФПД.НомерСтроки ЕСТЬ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ИдентификаторыУдаляемыхСтрок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ИдентификаторыУдаляемыхСтрок.Вставить(Выборка.ИдентификаторСтроки, Истина);
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс < ДанныеДляНачисления.Количество() Цикл
		СтрокаДанных = ДанныеДляНачисления[Индекс];
		Если ИдентификаторыУдаляемыхСтрок[СтрокаДанных.ИдентификаторСтрокиВидаРасчета] = Неопределено Тогда
			Индекс = Индекс + 1;
		Иначе
			ДанныеДляНачисления.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает временную таблиц ВТНачисленияПоДоговорам
// 	Параметры
//		МенеджерВременныхТаблиц – менеджер временных таблиц, в который помещается таблица ВТНачисления
//		НачисленияПоДоговорам - таблица значений с данными по договорам
//		ИменаВТ – массив имен временных таблиц, помещенных в МенеджерВременныхТаблиц
//		Сотрудники – массив сотрудников для отбора 
//
Процедура СоздатьВТНачисленияПоДоговорам(МенеджерВременныхТаблиц, НачисленияПоДоговорам, ИменаВТ, Сотрудники = Неопределено) Экспорт
	
	КодыНДФЛДоговорыРаботыУслуги = УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Результат,
	|	НачисленияПоДоговорам.СуммаВычета,
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорамБезОтбора
	|ИЗ
	|	&НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	НАЧАЛОПЕРИОДА(НачисленияПоДоговорам.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Результат КАК Сумма,
	|	НачисленияПоДоговорам.СуммаВычета,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычетаНДФЛ,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеОрганизации,
	|	НачисленияПоДоговорам.ДокументОснование КАК Договор,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.Подразделение КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамБезОтбора КАК НачисленияПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО НачисленияПоДоговорам.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	(НачисленияПоДоговорам.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияПоДоговорамБезОтбора";
	
	ТаблицаНачислений = ПустаяТаблицаНачисленияПоДоговорам();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПоДоговорам, ТаблицаНачислений);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияПоДоговорам", ТаблицаНачислений);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги",КодыНДФЛДоговорыРаботыУслуги);
	
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить("ВТНачисленияПоДоговорам");
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияПоДоговорам(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	НачисленияПоДоговорам.Сумма
	|ИЗ
	|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(НаборыЗаписей, Ложь, Организация, МесяцНачисления,
			Запрос.Выполнить().Выгрузить(), Неопределено, Неопределено, Неопределено, Неопределено, Истина);
	
КонецПроцедуры

Процедура СоздатьВТПрочиеНачисления(МенеджерВременныхТаблиц, ПрочиеНачисления, ИменаВТ, Сотрудники = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеНачисления.Сотрудник,
	|	ПрочиеНачисления.Подразделение,
	|	ПрочиеНачисления.ДатаНачала,
	|	ПрочиеНачисления.СуммаДохода,
	|	ПрочиеНачисления.СуммаВычета,
	|	ПрочиеНачисления.КодВычета,
	|	ПрочиеНачисления.КодДохода
	|ПОМЕСТИТЬ ВТПрочиеНачисленияБезОтбора
	|ИЗ
	|	&ПрочиеНачисления КАК ПрочиеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеНачисления.Сотрудник,
	|	ПрочиеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрочиеНачисления.Подразделение,
	|	ПрочиеНачисления.Подразделение КАК ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПустаяСсылка) КАК Начисление,
	|	НАЧАЛОПЕРИОДА(ПрочиеНачисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	ПрочиеНачисления.ДатаНачала,
	|	ПрочиеНачисления.СуммаДохода КАК Сумма,
	|	ПрочиеНачисления.СуммаВычета,
	|	ПрочиеНачисления.КодВычета КАК КодВычетаНДФЛ,
	|	ПрочиеНачисления.КодДохода
	|ПОМЕСТИТЬ ВТПрочиеНачисления
	|ИЗ
	|	ВТПрочиеНачисленияБезОтбора КАК ПрочиеНачисления
	|ГДЕ
	|	(ПрочиеНачисления.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрочиеНачисленияБезОтбора";
	
	ТаблицаНачислений = ПустаяТаблицаПрочиеНачисления();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПрочиеНачисления, ТаблицаНачислений);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПрочиеНачисления", ТаблицаНачислений);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить("ВТПрочиеНачисления");
	
КонецПроцедуры

Процедура ЗарегистрироватьПрочиеНачисления(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеНачисления.ФизическоеЛицо,
	|	ПрочиеНачисления.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяПомощь) КАК Начисление,
	|	ПрочиеНачисления.Сумма
	|ИЗ
	|	ВТПрочиеНачисления КАК ПрочиеНачисления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(НаборыЗаписей, Ложь, Организация, МесяцНачисления,
			Запрос.Выполнить().Выгрузить(), Неопределено, Неопределено, Неопределено, Неопределено, Истина);
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ИменаВТ, ПроверятьЗаполнениеДатыРождения = Истина, ФизическиеЛица = Неопределено)
	
	Если ИменаВТ.Количество() > 0 Тогда 
	
		ТекстЗапроса = "";
		ПерваяТаблица = Истина;
		Для Каждого ИмяВТ Из ИменаВТ Цикл
			Если Не ПерваяТаблица Тогда
				ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Таблица.Сотрудник
			|";
			
			Если ПерваяТаблица Тогда
				ТекстЗапроса = ТекстЗапроса +
				"
				|ПОМЕСТИТЬ ВТСотрудники
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИЗ
			|	" + ИмяВТ + " КАК Таблица";
			
			ПерваяТаблица = Ложь;
		КонецЦикла;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
			
		// Проверка заполнения дат рождения.
		Если ПроверятьЗаполнениеДатыРождения Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
			|ПОМЕСТИТЬ ВТСотрудникиПроверкаДатыРождения
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
			Запрос.Выполнить();
			КадровыйУчет.ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПроверкаДатыРождения", Ложь);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ТаблицаСотрудников
		|		ПО (ТаблицаСотрудников.Сотрудник = Сотрудники.Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудники";
		
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Метод заполняет переданное соответствие, в котором, ключом является КатегорияУдержания, 
//	а значением выступает массив строк удержаний указанной роли.
//	Строки удержаний, для которых нет значений в переданном соответствии, 
//	собираются в массив и помещаются в соответствие по ключу пустая ссылка на перечисление ролей.
// В случае, если соответствие не указано, оно создается и все строки удержаний 
//	раскладываются по отдельным ролям.
//
// Параметры:
//	СтрокиУдержаний - массив строк коллекции Удержания.
//	КатегорииУдержаний - необязательный, соответствие по которому раскладываются удержания.
//	
Функция РазложитьСтрокиУдержанийПоРолям(СтрокиУдержаний, КатегорииУдержаний = Неопределено)
	
	Если КатегорииУдержаний = Неопределено Тогда
		КатегорииУдержаний = Новый Соответствие;
		Для Каждого Строка Из СтрокиУдержаний Цикл
			КатегорииУдержаний.Вставить(Строка.КатегорияУдержания, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиУдержаний Цикл
		КатегорияУдержания = Строка.КатегорияУдержания;
		СтрокиУдержанийРоли = КатегорииУдержаний[КатегорияУдержания];
		Если СтрокиУдержанийРоли = Неопределено Тогда
			КатегорияУдержания = Перечисления.КатегорииУдержаний.ПустаяСсылка();
			СтрокиУдержанийРоли = КатегорииУдержаний[КатегорияУдержания];
			Если СтрокиУдержанийРоли = Неопределено Тогда
				СтрокиУдержанийРоли = Новый Массив;
				КатегорииУдержаний.Вставить(КатегорияУдержания, СтрокиУдержанийРоли);
			КонецЕсли;
		КонецЕсли;
		СтрокиУдержанийРоли.Добавить(Строка);
	КонецЦикла;
	
	Возврат КатегорииУдержаний;
	
КонецФункции

Функция ПустаяТаблицаРасшифровкиРасчетнойБазы()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БазовоеНачисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КатегорияБазовогоНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	
	Возврат Таблица;
	
КонецФункции

// Выполняет обход структуры записей расчета текущей очередности, 
// позволяет зарегистрировать результаты расчета очередности в специализированных разделах учета 
// для использования при расчетах последующей очередности.
//
// Параметры:
//	НаборыЗаписей - коллекция движений, посредством которой осуществляется регистрация результатов.
//	ЗаписиОчередности - соответствие, ключом которого является КатегорияУдержания, а значением - массив записей регистра
//	                    расчета.
//	ИсходныеДанныеПоИдентификаторуСтроки - соответствие, 
//		ключом которого является идентификатор строки, а значением - структура показателей.
//
Процедура ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, ЗаписиОчередности, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка)
	
	Для Каждого КлючИЗначение Из ЗаписиОчередности Цикл
		КатегорияУдержания = КлючИЗначение.Ключ;
		ЗаписиРасчета = КлючИЗначение.Значение;
		// Регистрация результатов удержания ДСВ.
		ЗарегистрироватьРезультатыДСВ(
			НаборыЗаписей, КатегорияУдержания, ЗаписиРасчета, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка);
		// Регистрация результатов расчета по учету исполнительных документов.
		ИсполнительныеЛисты.ЗарегистрироватьРезультатыРасчетаОчередности(
			НаборыЗаписей, КатегорияУдержания, ЗаписиРасчета, ИсходныеДанныеПоИдентификаторуСтроки);
	КонецЦикла;

КонецПроцедуры

Функция ПустаяТаблицаРаспределениеПоТерриториямУсловиямТруда() Экспорт
	
	ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
	
	Распределение = Новый ТаблицаЗначений;
	Распределение.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Распределение.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	Распределение.Колонки.Добавить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	Распределение.Колонки.Добавить("ДоляРаспределения", ТипЗначенияПоказателя);
	Распределение.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		Распределение.Колонки.Добавить("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		Распределение.Колонки.Добавить("Значение" + НомерПоказателя, Новый ОписаниеТипов(ТипЗначенияПоказателя));
	КонецЦикла;
	
	Возврат Распределение;
	
КонецФункции

Функция ПустаяТаблицаПрочиеНачисления() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ПрочиеНачисления = Новый ТаблицаЗначений;
	ПрочиеНачисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПрочиеНачисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПрочиеНачисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПрочиеНачисления.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ПрочиеНачисления.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ПрочиеНачисления.Колонки.Добавить("СуммаВычета", ОписаниеТиповЧисло.ТипЧисло15_2);
	ПрочиеНачисления.Колонки.Добавить("СуммаДохода", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Возврат ПрочиеНачисления;
	
КонецФункции

Процедура ЗарегистрироватьРезультатыДСВ(НаборыЗаписей, КатегорияУдержания, ЗаписиРасчета, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка)
	
	Если КатегорияУдержания <> Перечисления.КатегорииУдержаний.ДСВ И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрируем ДСВ, если далее нужно считать НДФЛ.
	УдержанияДСВ = Новый ТаблицаЗначений;
	УдержанияДСВ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдержанияДСВ.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	УдержанияДСВ.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	УдержанияДСВ.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ"));
	УдержанияДСВ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
												 
	МесяцУдержания = Неопределено;
	Организация = Неопределено;
	
	Для Каждого ЗаписьРасчета Из ЗаписиРасчета Цикл
		НоваяСтрока = УдержанияДСВ.Добавить();
		НоваяСтрока.ФизическоеЛицо = ЗаписьРасчета.ФизическоеЛицо;
		НоваяСтрока.Удержание = ЗаписьРасчета.ВидРасчета;
		НоваяСтрока.КатегорияУдержания = КатегорияУдержания;
		НоваяСтрока.ДокументОснование = ЗаписьРасчета.ДокументОснование;
		НоваяСтрока.Сумма = ИсходныеДанныеПоИдентификаторуСтроки[ЗаписьРасчета.ИдентификаторСтроки].Результат;
		МесяцУдержания = НачалоМесяца(ЗаписьРасчета.ПериодРегистрации);
		Организация = ЗаписьРасчета.Организация;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНДФЛРасширенный.СформироватьСоциальныеВычетыПоУдержаниям(ДокументСсылка, НаборыЗаписей, Ложь, Организация, КонецМесяца(МесяцУдержания), МесяцУдержания, УдержанияДСВ, Истина);
	
КонецПроцедуры

// }
// 4D

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции служебного программного интерфейса.

// Предназначена для получения настроек системы в части расчета зарплаты.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиРасчетаЗарплаты() Экспорт
	
	НастройкиРасчетаЗарплатыРасширенный = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	НастройкиРасчетаЗарплатыРасширенный.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиРасчетаЗарплатыРасширенный, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	
	Если НастройкиРасчетаЗарплатыРасширенный.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	ЗначенияПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки расчета зарплаты, определяемые по состоянию плана видов расчета.
//
Процедура ЗаполнитьНастройкиРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаДниБолезни) КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезни) КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПраздничныхИВыходных) КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыСверхурочных) КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОсновногоОтпуска) КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДополнительногоОтпуска) КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВознагражденияПлатежногоАгента) КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям) КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДСВ) КАК ВыбиратьВидУдержанияДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДобровольныхВзносовВНПФ) КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска) КАК ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияИсполнительногоЛиста) КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияПрофсоюзныхВзносов) КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСреднегоЗаработка) КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни) КАК ИспользоватьДоплатуЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДСВ) КАК ИспользоватьДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДобровольныеВзносыВНПФ) КАК ИспользоватьДобровольныеВзносыВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьИсполнительныеЛисты) КАК ИспользоватьИсполнительныеЛисты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных) КАК ИспользоватьОплатуПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных) КАК ИспользоватьОплатуСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработку) КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка) КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыКомандировки) КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПростоя) КАК ВыбиратьВидНачисленияОплатыПростоя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПрочихНевыходов) КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтпускБезОплаты) КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтгул) КАК ВыбиратьВидНачисленияОтгул,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок) КАК ИспользоватьОплатуКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок) КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев) КАК ИспользоватьОплатуПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев) КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты) КАК ИспользоватьОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты) КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтгулы) КАК ИспользоватьОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы) КАК ИспользоватьВнутрисменныеОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов) КАК ИспользоватьУчетПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов) КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовуюПремиюОтдельнымДокументом) КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовыеНачисленияОтдельнымДокументом) КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияВыходногоПособия) КАК ВыбиратьВидНачисленияВыходногоПособия,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя) КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами) КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениБолезни) КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям) КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрофсоюзныеВзносы) КАК ИспользоватьПрофсоюзныеВзносы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрочиеУдержанияВПользуТретьихЛиц) КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСовмещениеПрофессийДолжностей) КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаСовмещение) КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок) КАК ИспользоватьСдельныйЗаработок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску) КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь) КАК ИспользоватьМатериальнуюПомощь,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске) КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах) КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные) КАК ИспользоватьОтпускаУчебные,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС) КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме) КАК ИспользоватьДоходыВНатуральнойФорме,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную) КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску) КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияМесячногоДенежногоСодержания) КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность) КАК ИспользоватьНадбавкуЗаВредность,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНесколькоПлановыхНачислений) КАК ИспользоватьНесколькоПлановыхНачислений,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаВремяКомандировки) КАК ИспользоватьДоплатуЗаВремяКомандировки,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьЕдиновременнуюВыплатуКОтпуску) КАК ИспользоватьЕдиновременнуюВыплатуКОтпуску
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияВыходногоПособия,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	// 4D:ERP для Беларуси, Юлия, 05.09.2017 14:46:54 
	// Изменение формы документа (Закладка Оплата), № 15855
	// {	
	|		ВЫБОР
	|			КОГДА
	|				&ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	// }
	// 4D
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|		NULL КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|		ВЫБОР
	|			КОГДА (СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ИЛИ СУММА(ВЫБОР
	|							КОГДА &ИспользоватьРасчетГосслужащих
	|									И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1)
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПростоя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОтгул,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|		NULL КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|		NULL КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|		NULL КАК ВыбиратьВидУдержанияДСВ,
	|		NULL КАК ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска,
	|		NULL КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|		NULL КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|		NULL КАК ИспользоватьДСВ,
	|		NULL КАК ИспользоватьИсполнительныеЛисты,
	|		NULL КАК ИспользоватьДобровольныеВзносыВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуСверхурочных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуЗаДниБолезни,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И ВЫБОР
	|										КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным ЕСТЬ NULL 
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ НЕ ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|									КОНЕЦ
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтгулы,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтгулы,
	|		NULL КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Премия)
	|									И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Премия)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.РазовоеНачисление)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|		NULL КАК ИспользоватьПрофсоюзныеВзносы,
	|		NULL КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСдельныйЗаработок,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощь,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.УчетВремениВЧасах = ИСТИНА
	|									И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОтпускУчебный
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаУчебные,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидОтпуска = &ОтпускПострадавшимВАварииЧАЭС
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|									ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме))
	|									И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ДоходВНатуральнойФорме)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоходыВНатуральнойФорме,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И (СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|						ИЛИ СУММА(ВЫБОР
	|								КОГДА &ИспользоватьРасчетГосслужащих
	|										И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьРасчетСохраняемогоДенежногоСодержания
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНадбавкуЗаВредность,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ПоддерживаетНесколькоПлановыхНачислений
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНесколькоПлановыхНачислений,
	|		NULL КАК ИспользоватьДоплатуЗаВремяКомандировки,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьЕдиновременнуюВыплатуКОтпуску
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Удержания КАК Удержания
	|	ГДЕ
	|		НЕ Удержания.ПометкаУдаления
	|		И НЕ Удержания.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ВидВремени,
	|		Начисления.КатегорияНачисленияИлиНеоплаченногоВремени,
	|		Начисления.ВидОтпуска
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА НачисленияВидыВремени.Ссылка.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|	ГДЕ
	|		НЕ НачисленияВидыВремени.Ссылка.ПометкаУдаления
	|		И НЕ НачисленияВидыВремени.Ссылка.ВАрхиве
	|		И НачисленияВидыВремени.ВидВремени.ОсновноеВремя = &Командировка) КАК НастройкиРасчетаЗарплаты";
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	КонецЕсли;
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("Командировка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка"));
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Запрос.УстановитьПараметр("ОтпускУчебный", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный"));
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Запрос.УстановитьПараметр("ИспользоватьРасчетСохраняемогоДенежногоСодержания", НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	Запрос.УстановитьПараметр("ИспользоватьРасчетГосслужащих", НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу Или НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу Или НастройкиПрограммы.ИспользоватьВоеннуюСлужбу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	// Получим значения настроек по умолчанию.
	НастройкиПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	Если Не Настройки.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПоУмолчанию);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	// Если начисление зарплаты отключено, настройки, которые не определяются по ПВР нужно «сбросить».
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		Настройки.ИспользоватьВыплатыБывшимСотрудникам = Ложь;
		Настройки.ИспользоватьИндексациюЗаработка = Ложь;
		Настройки.ИспользоватьНачисленияПоДоговорам = Ложь;
		Настройки.ИспользоватьПризыПодарки = Ложь;
		Настройки.ИспользоватьРегистрациюПрочихДоходов = Ложь;
	КонецЕсли;
	
	// Заполняем автоматически устанавливаемые настройки.
	РасчетЗарплатыРасширенный.УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты);
	РасчетЗарплатыРасширенный.УстановитьИспользованиеРасчетаПервойПоловиныМесяца(Настройки, ИспользоватьНачислениеЗарплаты);
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеВнешнихХозяйственныхОпераций(ИспользоватьНачислениеЗарплаты);
	ОбменСБанкамиПоЗарплатнымПроектам.УстановитьИспользованиеЭлектронногоОбменаСБанками(ИспользоватьНачислениеЗарплаты);
	РасчетЗарплатыРасширенный.УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных(Настройки, ИспользоватьНачислениеЗарплаты);
	
	Настройки.Записать();
	
КонецПроцедуры

// Метод предназначен для установки константы использования документов ввода данных для расчета зарплаты.
//
Процедура УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// Включаем использование ввода данных для расчета зарплаты в том случае, 
	// если используется расчет зарплаты и есть хотя бы один шаблон.
	
	ИспользоватьВводДанныхДляРасчетаЗарплаты = Ложь;
	Если ИспользоватьНачислениеЗарплаты Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И ВидыДокументов.НеИспользуется = ЛОЖЬ");
		ИспользоватьВводДанныхДляРасчетаЗарплаты = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекущееИспользование = Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Получить();
	Если ТекущееИспользование <> ИспользоватьВводДанныхДляРасчетаЗарплаты Тогда
		Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Установить(ИспользоватьВводДанныхДляРасчетаЗарплаты);
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для установки константы использования расчетов за первую половину месяца.
//
Процедура УстановитьИспользованиеРасчетаПервойПоловиныМесяца(Настройки = Неопределено, ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	ЗаписыватьНастройки = Ложь;
	Если Настройки = Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗаписыватьНастройки = Истина;
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// Включаем использование в том случае, 
	// если используется расчет зарплаты и есть записи с указанным способом аванса.
	
	ИспользоватьРасчетПервойПоловиныМесяца = Ложь;
	Если ИспользоватьНачислениеЗарплаты Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	(ПлановыеАвансы.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца)
		|			ИЛИ ПлановыеАвансы.СпособРасчетаАвансаПоОкончании = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца))");
		ИспользоватьРасчетПервойПоловиныМесяца = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекущееИспользование = Настройки.ИспользоватьРасчетПервойПоловиныМесяца;
	Если ТекущееИспользование <> ИспользоватьРасчетПервойПоловиныМесяца Тогда
		Настройки.ИспользоватьРасчетПервойПоловиныМесяца = ИспользоватьРасчетПервойПоловиныМесяца;
		Если ЗаписыватьНастройки Тогда
			Настройки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для установки способа удержания излишне начисленных отпускных.
//
Процедура УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных(Настройки = Неопределено, ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	ЗаписыватьНастройки = Ложь;
	Если Настройки = Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗаписыватьНастройки = Истина;
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// По умолчанию сторнируем ранее излишне начисленные суммы отпускных
	ТекущееИспользование = Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных;
	Если Не ЗначениеЗаполнено(ТекущееИспользование) Тогда
		Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных = Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм;
		Если ЗаписыватьНастройки Тогда
			Настройки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывается районный коэффициент, утвержденный федеральными органами власти.
// Определяется по подразделению, указанному в строке расчета, если оно обособленное, или по организации.
// 
// Параметры:
//	Подразделение
//
// Возвращаемое значение - число большее или равное 1.
//
Функция РайонныйКоэффициентРФ(Подразделение) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.РайонныйКоэффициентРФ(Подразделение);
КонецФункции

// Выполняет поиск показателя расчета зарплаты по идентификатору.
//
// Параметры:
//	- Идентификатор - строка, идентификатор показателя (не путать с ИдентификаторОбъекта).
//	- УчитыватьРегистр - необязательный по умолчанию Ложь, если Истина, 
//		то выполняется поиск показателя с учетом регистра, 
//		например по строке "ВремяВДнях", показатель "ВремяВДнях" найден не будет.
//
// Возвращаемое значение - найденный показатель, 
//		Неопределено - в случае, если показателя с таким идентификатором не существует.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр);
КонецФункции

// Выполняет расчет НДФЛ и Взносов по данным начислений форм документов Выплата бывшим сотрудникам,
// Регистрация прочих доходов
// Возвращает 
Функция НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(Объект, ПараметрыДляРасчета, НомерСтроки = Неопределено) Экспорт
	
	Если НомерСтроки = Неопределено Тогда
		СтрокиДляВыгрузки	= Неопределено;
	Иначе
		СтрокиДляВыгрузки	= Объект.НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки));
	КонецЕсли;
	
	Начисления = Объект.НачисленияУдержанияВзносы.Выгрузить(СтрокиДляВыгрузки, "НомерСтроки, ФизическоеЛицо, Начислено, СуммаВычета");
	
	Если Начисления.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Организация					= Объект.Организация;
	Документ					= Объект.Ссылка;
	ДатаПолученияДохода			= Объект.ПланируемаяДатаВыплаты;
	ПериодРегистрации			= НачалоМесяца(Объект.ПланируемаяДатаВыплаты);
	КодДоходаНДФЛ				= ПараметрыДляРасчета.КодДоходаНДФЛ;
	КодДоходаСтраховыеВзносы	= ПараметрыДляРасчета.КодДоходаСтраховыеВзносы;
	КодВычетаНДФЛ				= Объект.КодВычетаНДФЛ;
	Подразделение				= Объект.Подразделение;
	
	// Для расчета НДФЛ создаем временную ссылку на документ и коллекцию наборов записей.
	НаборыЗаписейОбъекта = ЗарплатаКадры.НаборыЗаписейРегистратора(Документ.Метаданные());
	
	Отказ = Ложь;
	
	// Сформируем временную таблицу с результатами начислений и списком физических лиц 
	// для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор",				Документ);
	Запрос.УстановитьПараметр("ДатаПолученияДохода",		ДатаПолученияДохода);
	Запрос.УстановитьПараметр("КодДоходаНДФЛ",				КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("КодДоходаСтраховыеВзносы",	КодДоходаСтраховыеВзносы);
	Запрос.УстановитьПараметр("КодВычетаНДФЛ",				КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("Подразделение",				Подразделение);
	Запрос.УстановитьПараметр("Начисления",					Начисления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	&КодВычетаНДФЛ КАК КодВычета,
	|	&Подразделение КАК Подразделение,
	|	&Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Начислено КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(Документ, Организация, ДатаПолученияДохода, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ДатаПолученияДохода,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК СуммаДохода,
	|	ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычета,
	|	Начисления.КодДоходаСтраховыеВзносы КАК ВидДохода,
	|	Начисления.Сумма КАК Сумма,
	|	0 КАК НДФЛ
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыПоДоходам
	|		ПО Начисления.Регистратор = ВычетыПоДоходам.Регистратор
	|			И Начисления.НомерСтроки = ВычетыПоДоходам.НомерСтроки
	|ГДЕ
	|	Начисления.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ДатаПолученияДохода,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК СуммаДохода,
	|	ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычета,
	|	ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета) КАК Скидка,
	|	Начисления.КодДоходаСтраховыеВзносы КАК ВидДохода,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыПоДоходам
	|		ПО Начисления.Регистратор = ВычетыПоДоходам.Регистратор
	|			И Начисления.НомерСтроки = ВычетыПоДоходам.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4D:ERP для Беларуси, Яна, 06.09.2017 15:10:39 
	// Локализовать документ "Начисление зарплаты и взносов" , №15928 
	// {
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуПФР, ЛОЖЬ) КАК ВходитВБазуПФР,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуФСС, ЛОЖЬ) КАК ВходитВБазуФСС,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуФОМС, ЛОЖЬ) КАК ВходитВБазуФОМС,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуФСЗН, ЛОЖЬ) КАК ВходитВБазуФСЗН,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуБелгосстрах, ЛОЖЬ) КАК ВходитВБазуБелгосстрах,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуПС, ЛОЖЬ) КАК ВходитВБазуПС,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуСС, ЛОЖЬ) КАК ВходитВБазуСС
	 // }
	 // 4D
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовПоСтраховымВзносам КАК ВидыДоходовПоСтраховымВзносам
	|		ПО Начисления.КодДоходаСтраховыеВзносы = ВидыДоходовПоСтраховымВзносам.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	НачисленияНДФЛ = МассивРезультатов[1].Выгрузить();
	// Расчет НДФЛ
	УчетНДФЛРасширенный.РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, НачисленияНДФЛ);
	
	НачисленияСтраховыеВзносы = МассивРезультатов[2].Выгрузить();
	ВхождениеВБазы = МассивРезультатов[3].Выгрузить();
	
	СтрокаРассчитываемыеВзносы = "";
	РассчитываемыеВзносы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы(Ложь,,Ложь));
	Для каждого ИмяКолонки Из РассчитываемыеВзносы Цикл
		
		Если СтрНайти(ИмяКолонки, "ПФР") > 0 И ВхождениеВБазы[0].ВходитВБазуПФР Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли СтрНайти(ИмяКолонки, "ФОМС") > 0 И ВхождениеВБазы[0].ВходитВБазуФОМС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли СтрНайти(ИмяКолонки, "ФСС") > 0 И ВхождениеВБазы[0].ВходитВБазуФСС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;	
		// 4D:ERP для Беларуси, Яна, 06.09.2017 15:10:39 
		// Локализовать документ "Начисление зарплаты и взносов" , №15928 
		// {
		ИначеЕсли Найти(ИмяКолонки, "ФСЗН") > 0 И ВхождениеВБазы[0].ВходитВБазуФСЗН Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли Найти(ИмяКолонки, "ПенсионныйФонд") > 0 И ВхождениеВБазы[0].ВходитВБазуФСЗН Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли Найти(ИмяКолонки, "Белгосстрах") > 0 И ВхождениеВБазы[0].ВходитВБазуБелгосстрах Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли Найти(ИмяКолонки, "ПС") > 0 И ВхождениеВБазы[0].ВходитВБазуПС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли Найти(ИмяКолонки, "СС") > 0 И ВхождениеВБазы[0].ВходитВБазуСС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		КонецЕсли;
	// }
	// 4D
	
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Результат Из Начисления Цикл
		РезультатРасчета = Новый Структура("НДФЛ,СуммаВычета" + СтрокаРассчитываемыеВзносы);
		
		Отбор.ФизическоеЛицо = Результат.ФизическоеЛицо;
		НайденныеСтроки = НачисленияНДФЛ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() >0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатРасчета, НайденныеСтроки[0], "СуммаВычета,НДФЛ");
		КонецЕсли;
		
		ВозвращаемоеЗначение.Вставить(Результат.ФизическоеЛицо, РезультатРасчета);
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаРассчитываемыеВзносы) Тогда
		
		// Расчет страховых взносов
		УстановитьПривилегированныйРежим(Истина);
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(НаборыЗаписейОбъекта, Отказ, Организация, ПериодРегистрации, НачисленияСтраховыеВзносы, Истина);
		РезультатРасчетаСтраховыхВзносов = УчетСтраховыхВзносов.РассчитатьВзносы(Документ, Организация, ПериодРегистрации, МенеджерВременныхТаблиц);
		УстановитьПривилегированныйРежим(Ложь);
		Для Каждого Результат Из РезультатРасчетаСтраховыхВзносов Цикл
			РезультатРасчета = ВозвращаемоеЗначение.Получить(Результат.ФизическоеЛицо);
			ЗаполнитьЗначенияСвойств(РезультатРасчета, Результат);
			
			ВозвращаемоеЗначение.Вставить(Результат.ФизическоеЛицо, РезультатРасчета);
		КонецЦикла;
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует временную таблицу со списком физических лиц ВТФизическиеЛица, которые рассчитываются при 
// проведении документа.
//
// Параметры:
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаНачислений - имя табличной части с начислениями, не обязательно, по умолчанию - "Начисления".
//
Процедура ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений = "Начисления", СписокФизическихЛиц = Неопределено) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|";
		Иначе	
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|";
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	#ТаблицаНачислений КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|";
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли; 
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Проверяет наличие колонке в строке коллекции, используемой при расчете.
//
// Параметры:
//	СтрокаКоллекции - строка таблицы расчетного документа.
//	ИмяПоля - имя поля, наличие которого необходимо выяснить.
//
// Возвращаемое значение - Истина, если поле есть, Ложь - в противном случае.
//
Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля) Экспорт
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	Иначе
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	КонецЕсли;
	
КонецФункции

// Создает временный набор записей регистра расчета Начисления.
//
// Параметры:
//	ВременнаяСсылка - ссылка на регистратор, 
//	ПропуститьПроверкуЗапретаИзменения - признак того, что запись будет выполняться "сквозь" проверку даты запрета
//	                                     редактирования.
//
// Возвращаемое значение - Набор записей Начисления.
//
Функция НаборЗаписейНачисления(ВременнаяСсылка = Неопределено, ПропуститьПроверкуЗапретаИзменения = Истина, ЭтоВременныйНаборЗаписей = Истина) Экспорт
	Возврат ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка, ПропуститьПроверкуЗапретаИзменения, ЭтоВременныйНаборЗаписей)["Начисления"];
КонецФункции

// Возвращает размер доплаты до среднего заработка за дни нетрудоспособности.
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//   Размер доплаты - число
//
Функция ПроцентДоплатыЗаДниНетрудоспособности(Организация) Экспорт
	
	ПроцентДоплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗарплатаКадрыРасширенная.ПроцентДоплатыЗаДниНетрудоспособности
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
	|ГДЕ
	|	НастройкиЗарплатаКадрыРасширенная.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПроцентДоплаты = Выборка.ПроцентДоплатыЗаДниНетрудоспособности;
	КонецЕсли; 
	
	Возврат ПроцентДоплаты;
КонецФункции

// Добавляет команду печати "Подробный расчет начислений", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")  Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРасчетаНачислений";
		КомандаПечати.Идентификатор = "ПодробныйРасчетНачислений";
		КомандаПечати.Представление = НСтр("ru = 'Подробный расчет начислений'");
		КомандаПечати.Порядок = 100;  		
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ИмяДокумента, ДанныеДокументов, ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник,
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Ссылка.Организация КАК Организация,
		|	Документ.Ссылка.Дата КАК ДатаДокумента,
		|	Документ.Ссылка.Номер КАК НомерДокумента
		|ИЗ
		|	&ИмяДокумента КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента", "Документ." + ИмяДокумента + ?(ПустаяСтрока(ИмяТабличнойЧастиСотрудники), "", "." + ИмяТабличнойЧастиСотрудники));

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДоработатьТекстЗапросаДляПодробногоРасчетаНачислений(Запрос.Текст, ИмяДокумента);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДокумента = ДанныеДокументов.Добавить(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДанныеДокумента.МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник);
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок, ИмяДокумента, ВидНачисленияВШапке = Ложь) Экспорт 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Сотрудник,
	|	&Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ОплаченоДней,
	|	Начисления.ОплаченоЧасов,
	|	Начисления.Результат,
	|	ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория
	|ИЗ
	|	&ИмяДокумента_Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
	|		ПО &Начисление = ПВРНачисления.Ссылка
	|ГДЕ
	|	Начисления.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Ссылка,
	|	Показатели.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.Показатель,
	|	Показатели.Значение
	|ИЗ
	|	&ИмяДокумента_Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента_Начисления", "Документ." + ИмяДокумента + ".Начисления");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента_Показатели", "Документ." + ИмяДокумента + ".Показатели");
	
	Если ВидНачисленияВШапке Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Начисление", "Начисления.Ссылка.Начисление");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Начисление", "Начисления.Начисление");
	КонецЕсли;
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Начисления, Показатели", ПакетРезультатов[0].Выгрузить(), ПакетРезультатов[1].Выгрузить());

КонецФункции

// Удаляет из таблицы начислений те строки, в которых содержатся начисления, не входящие в ФОТ (ВключатьВФОТ = Ложь)
// 	Параметры:
//		ТаблицаНачислений - Таблица значений, обязательно содержащая колонку "Начисление" с типом ПланВидовРасчетаСсылка.Начисления.
Процедура ИсключитьНачисленияНеВключаемыеВФОТ(ТаблицаНачислений) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	ПривилегированныйРежимУжеБыл = ПривилегированныйРежим();
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	НачисленияВключаемыеВФОТ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	УдаляемыеНачисления = Новый Массив;
	
	Для каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		Если НачисленияВключаемыеВФОТ.Найти(СтрокаНачислений.Начисление) = Неопределено Тогда
			УдаляемыеНачисления.Добавить(СтрокаНачислений);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаНачислений Из УдаляемыеНачисления Цикл
		ТаблицаНачислений.Удалить(СтрокаНачислений);
	КонецЦикла; 

КонецПроцедуры

Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Результаты = Новый Соответствие;
	
	Для каждого Основание Из Основания Цикл
		Результаты.Вставить(Основание, Ложь);
	КонецЦикла;
	
	// Отсроченная уплата - у первичных документов Отпуск и Больничный лист
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основания", Основания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументОснование.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|	И ДокументОснование.ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОснование.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|	И ДокументОснование.ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОснование.Ссылка
	|ИЗ
	|	Документ.ПереносДанных КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|	И ДокументОснование.НалогСОтсроченнойУплатой";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результаты[Выборка.Ссылка] = Истина;
	КонецЦикла;
	
	Возврат Результаты;
	
КонецФункции 

// Возвращает начисление надбавка за вредность.
//
Функция НачислениеНадбавкаЗаВредность() Экспорт
	
	Начисления = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	Если Начисления.Количество() > 0 Тогда
		Возврат Начисления[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создание и инициализация менеджера расчета зарплаты.
//
// Параметры
//	МесяцНачисления - тип Дата, месяц начисления зарплаты.
//	Организация - тип СправочникСсылка.Организации
//
// Возвращаемое значение - обработка менеджера расчета.
//
Функция СоздатьМенеджерРасчета(МесяцНачисления, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерРасчета = Обработки.МенеджерРасчетаЗарплаты.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерРасчета.Инициализировать(МесяцНачисления, Организация);
	
	Возврат МенеджерРасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие расчет зарплаты.

Функция ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ОкончаниеПериода, 
		|ЗаполнятьНачисленияПоДоговорамПодряда, 
		|ЗаполнятьНачисленияПоТрудовымДоговорам,
		|РежимДоначисления, 
		|СотрудникиПериодДействияПерерасчет, 
		|МенеджерВременныхТаблиц, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|РасчетПервойПоловиныМесяца");
		
	ДополнительныеПараметры.ЗаполнятьНачисленияПоТрудовымДоговорам = Истина;
	ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = Истина;
	ДополнительныеПараметры.РежимДоначисления = Ложь;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = Ложь;
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

Функция СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
	КонецЕсли;
	
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	ЗаполнятьНачисленияПоТрудовымДоговорам = ДополнительныеПараметры.ЗаполнятьНачисленияПоТрудовымДоговорам;
	ЗаполнятьНачисленияПоДоговорамПодряда = ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда;
	РежимДоначисления = ДополнительныеПараметры.РежимДоначисления;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	
	Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда 
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		
		Если МенеджерВременныхТаблиц = Неопределено Тогда 
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		
		КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
		
		Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПолученияСотрудников.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
			
			КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТВсеСотрудникиОрганизации");
			
		Иначе
			ПерерасчетЗарплаты.СоздатьВТСотрудникиОрганизацииКРасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, РежимДоначисления, "ВТВсеСотрудникиОрганизации");
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодЗаписи,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ГДЕ
		|	ЛОЖЬ";
		
		Запрос.Выполнить();		
		
	КонецЕсли;
	
	Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
		Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизации.Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПодбораСотрудников.Окончание >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииБезДоговорников
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УсловияДоговораГПХСрезПоследних.Организация КАК Организация,
		|	УсловияДоговораГПХСрезПоследних.Сотрудник,
		|	УсловияДоговораГПХСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УсловияДоговораГПХСрезПоследних.Договор КАК Договор,
		|	УсловияДоговораГПХСрезПоследних.Сумма,
		|	УсловияДоговораГПХСрезПоследних.ДатаНачала,
		|	УсловияДоговораГПХСрезПоследних.ДатаОкончания,
		|	УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа
		|ПОМЕСТИТЬ ВТДоговорникиСАвансовымиПлатежами
		|ИЗ
		|	РегистрСведений.УсловияДоговораГПХ.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
		|			Организация = &Организация
		|				И Подразделение В ИЕРАРХИИ (&Подразделение)) КАК УсловияДоговораГПХСрезПоследних
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
		|	НачисленияПоДоговорамГПХОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТОборотыПоДоговорам
		|ИЗ
		|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
		|			,
		|			&КонецПериодаОборотов,
		|			,
		|			(ФизическоеЛицо, Договор) В
		|				(ВЫБРАТЬ
		|					ВТДоговорникиСАвансовымиПлатежами.Договор,
		|					ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|				ИЗ
		|					ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)) КАК НачисленияПоДоговорамГПХОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
		|	НачисленияПоДоговорамГПХОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТОборотыПоДоговорамЗаМесяц
		|ИЗ
		|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
		|			НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
		|			,
		|			(ФизическоеЛицо, Договор) В
		|				(ВЫБРАТЬ
		|					ВТДоговорникиСАвансовымиПлатежами.Договор,
		|					ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|				ИЗ
		|					ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)) КАК НачисленияПоДоговорамГПХОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК Период,
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК ПериодЗаписи,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоговорникиБезОтбора
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|ГДЕ
		|	ПлановыеНачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
		|	И ПлановыеНачисленияПоДоговорам.Организация = &Организация
		|	И ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&МесяцНачисления,
		|	&МесяцНачисления,
		|	ВТДоговорникиСАвансовымиПлатежами.Сотрудник,
		|	ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|ИЗ
		|	ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорам КАК ВТОборотыПоДоговорам
		|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорам.Договор
		|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорам.Организация
		|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорам.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорамЗаМесяц КАК ВТОборотыПоДоговорамЗаМесяц
		|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорамЗаМесяц.Договор
		|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорамЗаМесяц.Организация
		|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорамЗаМесяц.ФизическоеЛицо
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТДоговорникиСАвансовымиПлатежами.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|				ТОГДА ВЫБОР
		|						КОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0) > 0
		|							ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа > ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|						ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|					ИНАЧЕ ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
		|				КОНЕЦ
		|		КОНЕЦ > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДоговорникиБезОтбора.Период,
		|	ВТДоговорникиБезОтбора.ПериодЗаписи,
		|	ВТДоговорникиБезОтбора.Сотрудник КАК Сотрудник,
		|	ВТДоговорникиБезОтбора.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДоговорники
		|ИЗ
		|	ВТДоговорникиБезОтбора КАК ВТДоговорникиБезОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВТДоговорникиБезОтбора.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТСотрудникиОрганизацииБезДоговорников.Период,
		|	ВТСотрудникиОрганизацииБезДоговорников.ПериодЗаписи,
		|	ВТСотрудникиОрганизацииБезДоговорников.Сотрудник,
		|	ВТСотрудникиОрганизацииБезДоговорников.ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизацииБезДоговорников КАК ВТСотрудникиОрганизацииБезДоговорников
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСотрудникиОрганизацииДоговорники.Период,
		|	ВТСотрудникиОрганизацииДоговорники.ПериодЗаписи,
		|	ВТСотрудникиОрганизацииДоговорники.Сотрудник,
		|	ВТСотрудникиОрганизацииДоговорники.ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииДоговорники.ВидДоговора
		|ИЗ
		|	ВТСотрудникиОрганизацииДоговорники КАК ВТСотрудникиОрганизацииДоговорники
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В ИЕРАРХИИ (&Подразделение)", "ИСТИНА");
		КонецЕсли;
				
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
				
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВсеСотрудникиОрганизации.Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПодбораСотрудников.Окончание >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
		Запрос.Выполнить();	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК Сотрудники";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции.

Процедура СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа = "ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа,
		|	ИсходныеДанные.ДатаНачала КАК Дата,
		|	ИсходныеДанные.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТИсходныеДанныеДляПолученияДанныхОСтаже
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидСтажа,
		|	Дата,
		|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, Ложь, "ВТИсходныеДанныеДляПолученияДанныхОСтаже");
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.Дата КАК ДатаНачала,
		|	ИсходныеДанные.Показатель КАК Показатель,
		|	СтажСотрудников.РазмерМесяцев КАК РазмерМесяцев,
		|	МАКСИМУМ(ШкалаОценкиСтажа.ЗначениеПоказателя) КАК МаксимальноеЗначениеПоказателя
		|ПОМЕСТИТЬ ВТСтажСотрудниковДляРасчетаПоказателей
		|ИЗ
		|	ВТИсходныеДанныеДляПолученияДанныхОСтаже КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажСотрудников
		|		ПО ИсходныеДанные.Сотрудник = СтажСотрудников.Сотрудник
		|			И ИсходныеДанные.ВидСтажа = СтажСотрудников.ВидСтажа
		|			И ИсходныеДанные.Дата = СтажСотрудников.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|		ПО ИсходныеДанные.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Дата,
		|	ИсходныеДанные.Показатель,
		|	СтажСотрудников.РазмерМесяцев
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраница,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя,
		|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа, 0)) КАК НижняяГраница
		|ПОМЕСТИТЬ ВТИнтервалыСтажаПоказателя
		|ИЗ
		|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажаНижняяГраница
		|			ПО ШкалаОценкиСтажа.Ссылка = ШкалаОценкиСтажаНижняяГраница.Ссылка
		|				И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа > ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа
		|					ИЛИ ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0)
		|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажСотрудниковДляРасчетаПоказателей.Сотрудник,
		|	СтажСотрудниковДляРасчетаПоказателей.ДатаНачала,
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя,
		|	ИнтервалыСтажаПоказателя.ВерхняяГраница,
		|	ИнтервалыСтажаПоказателя.НижняяГраница,
		|	СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0) > 0
		|				И ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) >= ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|ИЗ
		|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажаПоказателя КАК ИнтервалыСтажаПоказателя
		|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ИнтервалыСтажаПоказателя.Показатель
		|			И СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев >= ИнтервалыСтажаПоказателя.НижняяГраница
		|			И (ИнтервалыСтажаПоказателя.ВерхняяГраница = 0
		|				ИЛИ СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев < ИнтервалыСтажаПоказателя.ВерхняяГраница)
		|ГДЕ
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) <> 0";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТИсходныеДанныеДляПолученияДанныхОСтаже");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТСтажиСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТСтажСотрудниковДляРасчетаПоказателей");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТИнтервалыСтажаПоказателя");
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ДатаНачала КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчетРасширенный.ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки",
		ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	КадровыйУчетРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательТаблиц);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные,);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Сотрудник КАК Сотрудник,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДатаНачала КАК ДатаНачала,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Показатель КАК Показатель,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ЗначениеПоказателя,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ВерхняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.НижняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.РазмерМесяцев,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Показатель,
		|	ДатаНачала";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаЗначенийПоказателяПроцентСевернойНадбавки(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК ДатаНачала,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников";
	
	Запрос.Текст  = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СведенияОбУдержаниях(Форма) Экспорт
	
	ДанныеОбУдержаниях = Новый Структура;
	ДанныеОбУдержаниях.Вставить("Удержания", Форма.Объект.Удержания.Выгрузить());
	
	Если Форма.Объект.Свойство("ПогашениеЗаймов") Тогда
		ДанныеОбУдержаниях.Вставить("ПогашениеЗаймов", Форма.Объект.ПогашениеЗаймов.Выгрузить());
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбУдержаниях, Форма.УникальныйИдентификатор);
	
КонецФункции

Функция ДополнительныеПараметрыРасчетаНачислений() Экспорт
	
	// 4D:ERP для Беларуси, Юлия, 21.12.2017 16:50:13 
	// Ошибка в документе "Материальная помощь", № 17211
	// {
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцНачисления,
		|ДокументСсылка,
		|РаспределениеПоТерриториямУсловиямТруда,
		|НаборыЗаписей,
		|ИдентификаторСтроки,
		|ДанныеФормыОбъект,
		|КоличествоПоказателей,
		|ИзвестныеЗначенияПоказателей,
		|ИзвестныеЗначенияПоказателейПоОснованиям,
		|ДанныеРаспределенияПоТерриториямУсловиямТруда,
		|ОбщиеЗначения,
		|ВызыватьИсключение,
		|МенеджерВременныхТаблиц,
		|АннулироватьЗапись");
	// }
	// 4D
	
	ДополнительныеПараметры.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	ДополнительныеПараметры.ВызыватьИсключение = Истина;
	ДополнительныеПараметры.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ИзмеренияРасчетаПлановыхНачислений() Экспорт
	
	Возврат "Сотрудник, Начисление, ДокументОснование, ГоловнаяОрганизация";	
	
КонецФункции

Процедура ДополнитьВТЗаписиУдержанийСотрудником(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТЗаписиУдержаний", ИмяПоляПериод = "ДатаНачала") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяТаблицы, "ФизическоеЛицо, ДокументОснование");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляПериод);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РабочиеМестаУдержаний",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РабочиеМестаУдержаний.Период КАК Период,
	|	РабочиеМестаУдержаний.ФизическоеЛицо,
	|	РабочиеМестаУдержаний.ДокументОснование,
	|	РабочиеМестаУдержаний.РабочееМесто КАК Сотрудник
	|ПОМЕСТИТЬ ВТРабочиеМестаУдержаний
	|ИЗ
	|	ВТРабочиеМестаУдержанийСрезПоследних КАК РабочиеМестаУдержаний
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДокументОснование,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеМестаУдержанийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РабочиеМестаУдержаний.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЗаписиУдержаний.*
	|ПОМЕСТИТЬ ВТЗаписиУдержанийДополненная
	|ИЗ
	|	#ВТЗаписиУдержаний КАК ЗаписиУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаУдержаний КАК РабочиеМестаУдержаний
	|		ПО (РабочиеМестаУдержаний.ФизическоеЛицо = ЗаписиУдержаний.ФизическоеЛицо)
	|			И (РабочиеМестаУдержаний.ДокументОснование = ЗаписиУдержаний.ДокументОснование)
	|			И (РабочиеМестаУдержаний.Период = ЗаписиУдержаний.#ИмяПоляПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТЗаписиУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеМестаУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиУдержаний.*
	|ПОМЕСТИТЬ #ВТЗаписиУдержаний
	|ИЗ
	|	ВТЗаписиУдержанийДополненная КАК ЗаписиУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗаписиУдержанийДополненная";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаписиУдержаний", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПоляПериод", ИмяПоляПериод);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();

КонецПроцедуры

// Создает ВТРасчетнаяБаза для записей регистра расчета Начисления.
//
// Параметры:
//	- МенеджерВременныхТаблиц, в котором 
//		* есть таблица ВТОтборНачислений с полями, соответствующими регистру расчета Начисления
//			- Регистратор
//			- НомерСтроки
//		* будет создана ВТРасчетнаяБаза, состав полей см. метод СоздатьВТРасчетнаяБаза
//	- ИсключаемыйРегистратор - ссылка на документ, движения которого нужно исключить из рассмотрения.
//
Процедура СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено, МенеджерКадровогоУчета = Неопределено) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления.ФактическийПериодДействия");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	СоздатьВТРеальнаяТаблицаРегистраРасчета(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТОтборОсновныхЗаписей
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОтборОсновныхЗаписей");
	
	СоздатьВТРеальнаяТаблицаФактическийПериодДействия(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК НачисленияФПД
		|ГДЕ
		|	(НачисленияФПД.Регистратор, НачисленияФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				Отбор.Регистратор,
		|				Отбор.НомерСтроки
		|			ИЗ
		|				ВТОтборОсновныхЗаписей КАК Отбор
		|			ГДЕ
		|				Отбор.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало,
		|	НачисленияФПД.ПериодДействияКонец
		|ИЗ
		|	ВТФактическийПериодДействияБД КАК НачисленияФПД
		|ГДЕ
		|	(НачисленияФПД.Регистратор, НачисленияФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				Отбор.Регистратор,
		|				Отбор.НомерСтроки
		|			ИЗ
		|				ВТОтборОсновныхЗаписей КАК Отбор
		|			ГДЕ
		|				Отбор.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОсновныеЗаписи");
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Начисления.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей, МенеджерКадровогоУчета);
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры	

Функция ИменаИзмеренийРасчетнойБазыНачислений() Экспорт
	
	ИменаИзмерений = Новый Структура(
		"Сотрудник, 
		|ФизическоеЛицо, 
		|ГоловнаяОрганизация");
		
	Возврат ИменаИзмерений;
	
КонецФункции

Функция ЭлементОтбораБазовыхЗаписей(ЛевоеЗначение, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Новый Структура(
		"ЛевоеЗначение, 
		|ВидСравнения, 
		|ПравоеЗначение");
		
	ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	Если ВидСравнения = Неопределено Тогда
		ЭлементОтбора.ВидСравнения = "=";
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Процедура ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления")
	
	// Определяем необходимость заполнения периода действия.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия))
		|			И (Начисления.ПериодДействия = ДАТАВРЕМЯ(1, 1, 1))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Пересоздаем исходную ВТ с заполненным периодом действия.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления") Экспорт
	
	ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления);
	
	// Определяем необходимость корректировки периода.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК Период,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	// Получаем даты корректировки.
	СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	// Пересоздаем исходную ВТ с откорректированными датами.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА КОНЕЦПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаНачала,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДатыОкончания.ДатаОкончания, Начисления.ДатаОкончания), ДЕНЬ) КАК ДатаОкончания,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, ИмяВТСотрудники = "ВТСотрудникиКорректировкиПериода", МенеджерКадровогоУчета = Неопределено)
	
	// Для начислений фиксированной суммой, корректируем период, по которому будет происходить пропорциональное уменьшение датами приема/увольнения.
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТДатыПриемаУвольненияСотрудников";
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ДатаПриема, ДатаЗавершенияРаботы");

	ЗарплатаКадрыРасширенный.СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПриемаУвольнения.Сотрудник,
		|	ДатыПриемаУвольнения.ДатаПриема КАК ДатаНачала,
		|	ДатыПриемаУвольнения.ДатаЗавершенияРаботы КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТДатыПриемаУвольненияСотрудников КАК ДатыПриемаУвольнения
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДатыПримененияПлановыхНачислений.Сотрудник,
		|	ДатыПримененияПлановыхНачислений.ДатаНачала,
		|	ДатыПримененияПлановыхНачислений.ДатаОкончания
		|ИЗ
		|	ВТДатыИзмененияПримененияПлановыхНачислений КАК ДатыПримененияПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыПриемаУвольненияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыИзмененияПримененияПлановыхНачислений";
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует расчетную базу начислений или удержаний.
// Будет создана ВТРасчетнаяБаза с полями
//		- РезультатБаза - сумма результата базовых начислений
//		- Регистратор
//		- НомерСтроки
//		- РегистраторРазрез
//		- НомерСтрокиРазрез
//		- ПериодРегистрацииРазрез
//		- ВидРасчетаРазрез
//
// Параметры:
//	- МенеджерВременныхТаблиц, содержащий 
//		* ВТОсновныеЗаписи с полями
//			- ПериодРегистрации,
//			- Регистратор,
//			- НомерСтроки,
//			- Сотрудник (или другие поля для измерения, имена полей перечисляются в отдельном параметре ИменаИзмерений),
//			- ВидРасчета,
//			- БазовыйПериодНачало,
//			- БазовыйПериодКонец,
//	- ИменаИзмерений - структура с полями Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация (измерениями базового регистра), 
//		для измерений, которые используются, заполняется соответствующее имя поля из таблицы ВТОсновныеЗаписи. 
//		Если не заполнено, измерение не используется.
//		Для создания см. метод ИменаИзмеренийРасчетнойБазыНачислений.
//	- ИмяТаблицыБазовыхВР - полное имя таблицы, 
//		записи которой будут использоваться для опредедения базовых видов расчета.
//		Таблица должна иметь структуру, соответствующую служебной таблице базовых видов расчета (поля Ссылка и ВидРасчета).
//  
Процедура СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей = Неопределено, МенеджерКадровогоУчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УдалитьВТ = Новый Массив;
	
	// Условие связи основных и базовых записей.
	УсловиеСвязи = "";
	Для Каждого КлючИЗначение Из ИменаИзмерений Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		ПолеОсновнойЗаписи = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ПолеОсновнойЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПустаяСтрока(УсловиеСвязи) Тогда
			УсловиеСвязи = УсловиеСвязи + " И ";
		КонецЕсли;
		УсловиеСвязи = УсловиеСвязи + СтрШаблон("ОсновныеЗаписи.%1 = БазовыеЗаписи.%2", ПолеОсновнойЗаписи, ИмяИзмерения);
	КонецЦикла;
	
	// Отбор базовых записей.
	УсловиеОтбора = "";
	Для Каждого ЭлементОтбора Из ОтборБазовыхЗаписей Цикл
		Если Не ПустаяСтрока(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
		ИмяПараметра = ЛевоеЗначение + ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 В(&%2)", ЛевоеЗначение, ИмяПараметра);
		Иначе
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 %2 &%3", ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ИмяПараметра);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметра, ПравоеЗначение);
	КонецЦикла;
	Если ПустаяСтрока(УсловиеОтбора) Тогда
		УсловиеОтбора = "ИСТИНА";
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления.ФактическийПериодДействия");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	// Получаем регистратор из временной таблицы, чтобы из реальной таблицы не прочитать данные того же набора (если они там будут).
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиВТ.Регистратор
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК ЗаписиВТ";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор КАК Регистратор,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ПериодДействияНачало,
		|	БазовыеЗаписи.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|					И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|				ИЛИ БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодКонец
		|					И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписи
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
		|		ПО (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
		|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.Активность = ИСТИНА)
		|			И (&ОтборБазовыхЗаписей)
		|			И (БазовыеЗаписи.Регистратор <> &Регистратор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ПериодДействияНачало,
		|	БазовыеЗаписи.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|					И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|				ИЛИ БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодКонец
		|					И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК БазовыеЗаписи
		|		ПО (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
		|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.Активность = ИСТИНА)
		|			И (&ОтборБазовыхЗаписей)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ПериодДействия КАК Период,
		|	БазовыеЗаписи.ПериодДействияНачало КАК ДатаНачала,
		|	БазовыеЗаписи.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|ГДЕ
		|	БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБазовыхЗаписей", УсловиеОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		// Для начислений фиксированной суммой, корректируем период, 
		// по которому будет происходить пропорциональное уменьшение датами приема/увольнения, начала окончания отпуска по уходу за ребенком.
		СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц", МенеджерКадровогоУчета);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
	КонецЕсли;
	
	УдалитьВТ.Добавить("ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	УдалитьВТ.Добавить("ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ФПД.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникФПДВременнаяТаблица
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИсточникФПД
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
		|		ПО (ФПД.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ФПД.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИнтервалыФПД
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК БазовыеЗаписиФПД
		|ГДЕ
		|	(БазовыеЗаписиФПД.Регистратор, БазовыеЗаписиФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				БазовыеЗаписи.Регистратор,
		|				БазовыеЗаписи.НомерСтроки
		|			ИЗ
		|				ВТБазовыеЗаписиИсточникФПД КАК БазовыеЗаписи
		|			ГДЕ
		|				БазовыеЗаписи.ИсточникФПДВременнаяТаблица = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					БазовыеЗаписи.Регистратор,
		|					БазовыеЗаписи.НомерСтроки
		|				ИЗ
		|					ВТБазовыеЗаписиИсточникФПД КАК БазовыеЗаписи
		|				ГДЕ
		|					БазовыеЗаписи.ИсточникФПДВременнаяТаблица = ЛОЖЬ)) КАК БазовыеЗаписиФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, ПериодыДействияБазовыхЗаписей.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ДатыОкончания.ДатаОкончания, ПериодыДействияБазовыхЗаписей.ПериодДействияКонец) КАК ПериодДействияКонец,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиФПД
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиИнтервалыФПД КАК ПериодыДействияБазовыхЗаписей
		|		ПО (ПериодыДействияБазовыхЗаписей.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ПериодыДействияБазовыхЗаписей.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.ГоловнойСотрудник,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписиВремя.ВремяВЧасах
		|			ТОГДА ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяЧасы) КАК ЧИСЛО(17, 8))
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяДни) КАК ЧИСЛО(17, 8))
		|	КОНЕЦ КАК Время
		|ПОМЕСТИТЬ ВТБазовыеЗаписиВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор КАК Регистратор,
		|		БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|		БазовыеЗаписи.Сотрудник КАК Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат КАК Результат,
		|		БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени,
		|		МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) КАК ВремяДни,
		|		СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) КАК ВремяЧасы
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО БазовыеЗаписи.ВидРасчета = ВидыВремени.Ссылка
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ГрафикиРаботыПоВидамВремени.Дата
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0),
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.ГоловнойСотрудник,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор КАК Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.Время) КАК ЧИСЛО(23, 8)) КАК Время,
		|	МИНИМУМ(БазовыеЗаписиВремя.ПериодДействияНачало) КАК МинимальнаяДатаНачалаБазовойЗаписи
		|ПОМЕСТИТЬ ВТБазовыеЗаписиМинимальнаяДата
		|ИЗ
		|	ВТБазовыеЗаписиВремя КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписи.Результат) КАК ЧИСЛО(27, 8)) КАК РезультатБаза,
		|	ОсновныеЗаписи.Регистратор КАК Регистратор,
		|	ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.Регистратор КАК РегистраторРазрез,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтрокиРазрез,
		|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
		|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрацииРазрез,
		|	МинимальныеПериодыБазовыхНачислений.Время КАК Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	БазовыеЗаписи.ВидРасчета КАК ВидРасчетаРазрез,
		|	БазовыеЗаписи.Сотрудник КАК СотрудникРазрез,
		|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
		|	БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиДанные
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиВремя КАК БазовыеЗаписи
		|		ПО (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (БазовыеЗаписи.ПериодДействияНачало <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.ПериодДействияКонец >= ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (ВЫБОР
		|				КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|							И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|						ИЛИ БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец
		|							И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ = БазовыеЗаписи.НеобходимРасчетСуммы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиМинимальнаяДата КАК МинимальныеПериодыБазовыхНачислений
		|		ПО (МинимальныеПериодыБазовыхНачислений.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (МинимальныеПериодыБазовыхНачислений.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписи.Регистратор,
		|	ОсновныеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	МинимальныеПериодыБазовыхНачислений.Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(ОсновныеЗаписиБаза.РезультатБаза) КАК ЧИСЛО(31, 8)) КАК РезультатБаза,
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез,
		|	ОсновныеЗаписиБаза.СотрудникРазрез,
		|	ОсновныеЗаписиБаза.ГоловнаяОрганизацияРазрез
		|ПОМЕСТИТЬ ВТРасчетнаяБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписиДанныеПоДатам.Регистратор КАК Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия <> 0
		|					И БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы
		|				ТОГДА (ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.РезультатБаза КАК ЧИСЛО(20, 2))) * (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.ВремяБазовыйПериод КАК ЧИСЛО(5, 2)), 0)) КАК ЧИСЛО(17, 8)) КАК ЧИСЛО(17, 8))) / БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия КАК ЧИСЛО(19, 8)))
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи = БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало
		|						ТОГДА БазовыеЗаписиДанныеПоДатам.РезультатБаза
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатБаза,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез КАК РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
		|		БазовыеЗаписиДанныеПоДатам.СотрудникРазрез КАК СотрудникРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ГоловнаяОрганизацияРазрез КАК ГоловнаяОрганизацияРазрез
		|	ИЗ
		|		(ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0))
		|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0))
		|			КОНЕЦ КАК ВремяБазовыйПериод,
		|			БазовыеЗаписиДанные.Время КАК ВремяПериодДействия,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи КАК МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза КАК РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор КАК Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки КАК НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез КАК РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез КАК СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез КАК ГоловнаяОрганизацияРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|				ПО БазовыеЗаписиДанные.ВидРасчетаРазрез = ВидыВремени.Ссылка
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			БазовыеЗаписиДанные.БазовыйПериодКонец,
		|			БазовыеЗаписиДанные.ВремяВЧасах,
		|			ГрафикиРаботыПоВидамВремени.Дата,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|				ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
		|			КОНЕЦ,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиДанныеПоДатам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписиДанныеПоДатам.Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки,
		|		БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия,
		|		БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало,
		|		БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы,
		|		БазовыеЗаписиДанныеПоДатам.РезультатБаза,
		|		БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез,
		|		БазовыеЗаписиДанныеПоДатам.СотрудникРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ГоловнаяОрганизацияРазрез) КАК ОсновныеЗаписиБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез,
		|	ОсновныеЗаписиБаза.СотрудникРазрез,
		|	ОсновныеЗаписиБаза.ГоловнаяОрганизацияРазрез";
		
	// Адаптируем текст запроса.
	// Устанавливаем имя таблицы базовых видов расчета по виду ПВР.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	
	// Заполняем условие связи основных и базовых записей.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	
	Запрос.Выполнить();	
	
	УдалитьВТ.Добавить("ВТБазовыеЗаписиИсточникФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиИнтервалыФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписи");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиВремя");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиМинимальнаяДата");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиДанные");

	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры	

Функция СотрудникиФизическиеЛица(Знач СотрудникиФизическиеЛица, Организация)
	
	Если Не ЗначениеЗаполнено(СотрудникиФизическиеЛица) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СотрудникиФизическиеЛица) <> Тип("Массив") Тогда
		СотрудникиФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиФизическиеЛица);
	КонецЕсли;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если ТипЗнч(СотрудникиФизическиеЛица[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Физлица = КадровыйУчет.ФизическиеЛицаСотрудников(СотрудникиФизическиеЛица);
		Сотрудники = СотрудникиФизическиеЛица;
	Иначе
		Физлица = СотрудникиФизическиеЛица;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Организация, , Истина);
	КонецЕсли;
	
	Возврат Новый Структура("Сотрудники, ФизическиеЛица", Сотрудники, Физлица);
	
КонецФункции

Функция ПорядокВыплаты(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		Возврат Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	Возврат ОписаниеДокумента.ПорядокВыплаты;
	
КонецФункции

Функция ДатаВыплаты(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		Возврат Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.МесяцНачисленияИмя) Тогда
		Возврат РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РежимНачисления(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.РежимНачисления) Тогда
		Возврат ОписаниеДокумента.РежимНачисления;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует таблицу значений с начислениями по договорам подряда и авторским договорам.
//
// Параметры:
//		Организация
//		МесяцНачисления
//		ДокументСсылка - ссылка на документ, в котором рассчитываются договоры.
//		Подразделение, СправочникСсылка.ПодразделенияОрганизаций
//		Сотрудники, массив или СправочникСсылка.Сотрудники.
//		ДатаВыплаты - Дата - дата выплаты по-умолчанию. 
//
Функция РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, ДокументСсылка, Подразделение = Неопределено, Знач Сотрудники = Неопределено, ДатаВыплаты = Неопределено) Экспорт

	НачисленияПоДоговорам = ПустаяТаблицаНачисленияПоДоговорам();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		// Договоры гражданско-правового характера не используются.
		Возврат НачисленияПоДоговорам;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	МАКСИМУМ(УсловияДоговораГПХ.Период) КАК Период
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|ГДЕ
	|	УсловияДоговораГПХ.Период <= &ДатаСреза
	|	И УсловияДоговораГПХ.Организация = &Организация
	|	И (УсловияДоговораГПХ.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления,
	|	УсловияДоговораГПХ.Период,
	|	УсловияДоговораГПХ.Регистратор,
	|	УсловияДоговораГПХ.НомерСтроки,
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	УсловияДоговораГПХ.КодДохода,
	|	УсловияДоговораГПХ.КодВычета,
	|	УсловияДоговораГПХ.КодДоходаСтраховыеВзносы,
	|	УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете,
	|	УсловияДоговораГПХ.ОтношениеКЕНВД,
	|	УсловияДоговораГПХ.Подразделение,
	|	УсловияДоговораГПХ.Территория,
	|	УсловияДоговораГПХ.Сумма,
	|	УсловияДоговораГПХ.РазмерЕжемесячногоАвансовогоПлатежа,
	|	УсловияДоговораГПХ.СуммаВычета,
	|	УсловияДоговораГПХ.СуммаЕНВД,
	|	УсловияДоговораГПХ.ДатаНачала,
	|	УсловияДоговораГПХ.ДатаОкончания,
	|	УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	УсловияДоговораГПХ.СтатьяФинансирования,
	|	УсловияДоговораГПХ.СтатьяРасходов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХ
	|ИЗ
	|	ВТУсловияДоговораГПХМаксимальныеПериоды КАК УсловияДоговораГПХМаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО УсловияДоговораГПХМаксимальныеПериоды.Организация = УсловияДоговораГПХ.Организация
	|			И УсловияДоговораГПХМаксимальныеПериоды.Сотрудник = УсловияДоговораГПХ.Сотрудник
	|			И УсловияДоговораГПХМаксимальныеПериоды.Договор = УсловияДоговораГПХ.Договор
	|			И УсловияДоговораГПХМаксимальныеПериоды.Период = УсловияДоговораГПХ.Период
	|ГДЕ
	|	&УсловиеПодразделение
	|	И НАЧАЛОПЕРИОДА(УсловияДоговораГПХ.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХ.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	ТекстУсловияПодразделение = "ИСТИНА";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "УсловияДоговораГПХ.Подразделение В ИЕРАРХИИ (&Подразделение)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
			
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХОбороты.Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор,
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХОбороты.СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХ
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
	|			,
	|			&КонецПериодаОборотов,
	|			,
	|			Организация = &Организация
	|				И Договор В
	|					(ВЫБРАТЬ
	|						УсловияДоговораГПХ.Договор
	|					ИЗ
	|						ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)) КАК НачисленияПоДоговорамГПХОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХ.Сумма) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХЗаМесяц
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|ГДЕ
	|	НачисленияПоДоговорамГПХ.Период >= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Период <= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Организация = &Организация
	|	И НачисленияПоДоговорамГПХ.Договор В
	|			(ВЫБРАТЬ
	|				УсловияДоговораГПХ.Договор
	|			ИЗ
	|				ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)
	|	И НачисленияПоДоговорамГПХ.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХ.Договор";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Период,
	|	Начисления.МесяцНачисления,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Договор,
	|	Начисления.ДоговорАкт,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	ВЫБОР
	|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА Начисления.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ)
	|				И Начисления.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору)
	|		ИНАЧЕ Начисления.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
	|	Начисления.СпособОтраженияЗарплатыВБухучете,
	|	Начисления.ОтношениеКЕНВД,
	|	Начисления.Подразделение,
	|	Начисления.Территория,
	|	Начисления.Сумма,
	|	Начисления.СуммаВычета,
	|	Начисления.СуммаЕНВД,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты,
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияПоДоговорам.МесяцНачисления КАК Период,
	|		НачисленияПоДоговорам.МесяцНачисления КАК МесяцНачисления,
	|		НачисленияПоДоговорам.Организация КАК Организация,
	|		НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|		НачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияПоДоговорам.Договор КАК Договор,
	|		НачисленияПоДоговорам.ДоговорАкт КАК ДоговорАкт,
	|		НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|		НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|		НачисленияПоДоговорам.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|		НачисленияПоДоговорам.ЗаключенСоСтудентомРаботающимВСтудотряде КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		НачисленияПоДоговорам.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|		НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|		НачисленияПоДоговорам.Территория КАК Территория,
	|		НачисленияПоДоговорам.Сумма КАК Сумма,
	|		НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|		НачисленияПоДоговорам.СуммаЕНВД КАК СуммаЕНВД,
	|		НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|		НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА НачисленияПоДоговорам.Регистратор ССЫЛКА Документ.АктПриемкиВыполненныхРаботОказанныхУслуг
	|				ТОГДА НачисленияПоДоговорам.ПланируемаяДатаВыплаты
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ КАК ПланируемаяДатаВыплаты,
	|		НачисленияПоДоговорам.Регистратор КАК Регистратор,
	|		НачисленияПоДоговорам.НомерСтроки КАК НомерСтроки,
	|		0 КАК КоличествоДетей
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплаченныеДоговоры КАК СуществующиеНачисления
	|			ПО (СуществующиеНачисления.Регистратор <> &Ссылка)
	|				И НачисленияПоДоговорам.ДоговорАкт = СуществующиеНачисления.ДоговорАкт
	|				И НачисленияПоДоговорам.МесяцНачисления = СуществующиеНачисления.МесяцНачисления
	|	ГДЕ
	|		НачисленияПоДоговорам.Организация = &Организация
	|		И НачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
	|		И СуществующиеНачисления.НомерСтроки ЕСТЬ NULL 
	|		И &УсловиеПодразделение
	|		И (НачисленияПоДоговорам.Сотрудник В (&Сотрудники)
	|				ИЛИ &БезОтбораПоСотрудникам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&МесяцНачисления,
	|		&МесяцНачисления,
	|		УсловияДоговораГПХСрезПоследних.Организация,
	|		УсловияДоговораГПХСрезПоследних.Сотрудник,
	|		УсловияДоговораГПХСрезПоследних.ФизическоеЛицо,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.КодДохода,
	|		УсловияДоговораГПХСрезПоследних.КодВычета,
	|		УсловияДоговораГПХСрезПоследних.КодДоходаСтраховыеВзносы,
	|		УсловияДоговораГПХСрезПоследних.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		УсловияДоговораГПХСрезПоследних.СпособОтраженияЗарплатыВБухучете,
	|		УсловияДоговораГПХСрезПоследних.ОтношениеКЕНВД,
	|		УсловияДоговораГПХСрезПоследних.Подразделение,
	|		УсловияДоговораГПХСрезПоследних.Территория,
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|						ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|				КОНЕЦ
	|		КОНЕЦ,
	|		УсловияДоговораГПХСрезПоследних.СуммаВычета,
	|		УсловияДоговораГПХСрезПоследних.СуммаЕНВД,
	|		УсловияДоговораГПХСрезПоследних.ДатаНачала,
	|		УсловияДоговораГПХСрезПоследних.ДатаОкончания,
	|		УсловияДоговораГПХСрезПоследних.ПланируемаяДатаВыплаты,
	|		УсловияДоговораГПХСрезПоследних.Регистратор,
	|		УсловияДоговораГПХСрезПоследних.НомерСтроки,
	|		0
	|	ИЗ
	|		ВТУсловияДоговораГПХ КАК УсловияДоговораГПХСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХОбороты
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХОбороты.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХОбороты.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХЗаМесяц КАК НачисленияПоДоговорамГПХЗаМесяц
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХЗаМесяц.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХЗаМесяц.Организация
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|					ТОГДА ВЫБОР
	|							КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|								ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					КОНЕЦ
	|			КОНЕЦ > 0) КАК Начисления";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "НачисленияПоДоговорам.Подразделение В ИЕРАРХИИ (&Подразделение)";
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
	Запрос.Выполнить();
	
	// Рассчитаем вычеты в пределах нормативов затрат.
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.МесяцНачисления,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Начисление,
	|	Начисления.ДоговорАкт КАК ДокументОснование,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	Начисления.КодДоходаСтраховыеВзносы,
	|	Начисления.ОтношениеКЕНВД,
	|	Начисления.Подразделение,
	|	Начисления.Территория,
	|	Начисления.Сумма КАК Результат,
	|	ЕСТЬNULL(ВычетыВПределахНормативовЗатрат.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычета,
	|	Начисления.СуммаЕНВД КАК СуммаЕНВД,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыВПределахНормативовЗатрат
	|		ПО Начисления.Регистратор = ВычетыВПределахНормативовЗатрат.Регистратор
	|			И Начисления.НомерСтроки = ВычетыВПределахНормативовЗатрат.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления";
		
	ПланируемаяДатаВыплатыЗарплаты = ДатаВыплаты;
	
	Если ДатаВыплаты <> Неопределено И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеПоДоговорам") Тогда
		
		ПодстрокаЗамены = "
			|	ВЫБОР
			|		КОГДА Начисления.ПланируемаяДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &ПланируемаяДатаВыплаты
			|		ИНАЧЕ Начисления.ПланируемаяДатаВыплаты
			|	КОНЕЦ КАК ПланируемаяДатаВыплаты";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты", ПодстрокаЗамены);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДатаВыплаты) Тогда
		
		ПланируемаяДатаВыплатыЗарплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ПланируемаяДатаВыплатыЗарплаты);
	
	ИспользуютсяТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = НачисленияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, Выборка);
		
		ТерриторииУсловияТруда = Обработки.МенеджерРасчетаЗарплаты.ТаблицаТерриторийУсловийТруда();
		Если ИспользуютсяТерритории Тогда
			СтрокаТерритории = ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТерритории, Выборка);
			СтрокаТерритории.Показатели = Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
		КонецЕсли;
		СтрокаНачисления.ТерриторииУсловияТруда = ТерриторииУсловияТруда;
	КонецЦикла;
	
	Возврат НачисленияПоДоговорам;

КонецФункции

Функция КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов() Экспорт
	
	КорректировкиВыплатыФиксРасчет = Новый Массив;
	КорректировкиВыплатыФиксРасчет.Добавить("КорректировкаВыплаты");
	
	КорректировкиВыплатыФиксСтрока = Новый Массив;
	КорректировкиВыплатыФиксСтрока.Добавить("ФизическоеЛицо");
	
	Возврат Новый Структура("ФиксРасчет, ФиксСтрока", КорректировкиВыплатыФиксРасчет, КорректировкиВыплатыФиксСтрока)
	
КонецФункции

Процедура ЗаменитьСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ, НДФЛ, ОбновляемаяКоллекцияВычеты, ПримененныеВычеты, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок = Неопределено, СохранятьИсправления = Истина, КлючевыеКолонки = "ФизическоеЛицо") Экспорт
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ);
	
	// Заполняем строки идентификатором увеличенным на единицу, относительно максимального.
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		МаксимальныйИдентификаторСтрокиНДФЛ + 1, НДФЛ, ПримененныеВычеты);
	
	УсловияЗаменыСтрок = Неопределено;
	
	// Сохранение идентификаторов заменяемых строк НДФЛ.
	ИдентификаторыСтрокНДФЛ = Новый Массив;
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСтрокНДФЛ, 
		ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ"));
		
	// Обновление строк таблицы НДФЛ.
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НДФЛИмя);
	КонецЕсли;
	
	// Таблица ПримененныеВычеты, является расширением строк таблицы НДФЛ,
	// поэтому замена строк в таблицы ПримененныеВычеты, должна выполняться на тех же условиях, что
	// и замена строк таблицы НДФЛ.
	
	// Сбор информации об идентификаторах строка НДФЛ принимающих участие в замене.
	ИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекцияНДФЛ, НДФЛ, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборСтрок);
	
	Если ОписаниеДокумента.ПримененныеВычетыИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление из коллекции ИдентификаторыСтрокНДФЛУчаствующихВЗамене, идентификаторов
	// строк, не подвергшихся замене, добавление в коллекцию идентификаторов 
	// новых строк НДФД.
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	Для каждого ИдентификаторСтрокиНДФЛ Из ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене Цикл
		
		ИндексЭлемента = ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Найти(ИдентификаторСтрокиНДФЛ);
		Если ИндексЭлемента = Неопределено Тогда
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Добавить(ИдентификаторСтрокиНДФЛ);
		Иначе
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
		
	// Обновление строк таблицы ПримененныеВычеты.
	ЗаменитьСтрокиНаНовыеДанные(
		ОбновляемаяКоллекцияВычеты, 
		ПримененныеВычеты, 
		"ИдентификаторСтрокиНДФЛ", , 
		Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторыСтрокНДФЛУчаствующихВЗамене));
	
КонецПроцедуры

Функция ЗначениеПоказателяПоСсылке(Показатели, Показатель) Экспорт
	
	Строка = СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель);
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строка.Значение;

КонецФункции

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Возврат ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	
КонецФункции

Функция СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель) Экспорт
	
	Если Показатели.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура("Показатель");
	Отбор.Показатель = Показатель;
	НайденныеСтроки = Показатели.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0];

КонецФункции

Функция СтрокаЗначенияПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Возврат СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель);

КонецФункции

// Формирует структуру с отдельными коллекциями начислений.
//
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//		Период
//		Сотрудник
// Возвращаемое значение - структура, см. ОписаниеДанныхДляЗаполненияТаблицДокумента()
//		
Функция ДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень = Ложь) Экспорт
	
	ДанныеНачислений = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	ДанныеНачислений.Начисления = ВсеДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПослеПолученияНачисленийДляЗаполненияТаблицДокумента(ДанныеНачислений);
	КонецЕсли;
	
	Возврат ДанныеНачислений;
	
КонецФункции

// Получает таблицу действующих плановых начислений.
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//		Период
//		Сотрудник
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Начисление,
//	Размер
//		
Функция ВсеДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "РегистраторСобытия", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроенияФОТ);
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.ФизическоеЛицо,
		|	ПлановыеНачисления.ГоловнаяОрганизация,
		|	ПлановыеНачисления.ГоловнаяОрганизация КАК Организация,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает таблицу действующих плановых удержаний.
//
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//			Период
//			Сотрудник
//			Организация
//
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Начисление
//		
Функция ДействующиеПлановыеУдержания(ИсходныеДанные, Регистратор)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИсходныеДанные),
		ПараметрыПостроения);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.ФизическоеЛицо,
	|	ПлановыеУдержания.Организация,
	|	ПлановыеУдержания.ДокументОснование,
	|	ПлановыеУдержания.Удержание
	|ИЗ
	|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Используется";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод)
	
	УдержанияЗаПериод.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ТарифПлатежногоАгента", Новый ОписаниеТипов("СправочникСсылка.ТарифыПлатежныхАгентов"));
	УдержанияЗаПериод.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("ВидБазы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБазыУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Числитель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Знаменатель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("ПрожиточныйМинимум", Новый ОписаниеТипов("СправочникСсылка.ПрожиточныеМинимумы"));
	УдержанияЗаПериод.Колонки.Добавить("Предел", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("УчитыватьБольничныеЛисты", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Заменяет строки таблицы ЗаменяемыеДанные строками таблица ЗаменяющиеДанные.
// Сопоставление строк выполняется по колонке КлючеваяКолонка для массива значений Значения.
// Если требуется - вставляет новые строки.
// Если требуется - удаляет неиспользованные старые строки.
//
// Параметры:
//	Значения
//	КлючеваяКолонка - имена колонок через запятую, по которым выполняется сопоставление заменяемой коллекции.
//	ЗаменяемыеДанные - коллекция строк, в которой необходимо выполнить замену.
//	ЗаменяющиеДанные - коллекция строк, которые нужно использовать для замены строк в коллекции ЗаменяемыеДанные.
//	УсловиеЗамены - структура, если указано, замена производится только в случае, 
//		если значения полей структуры по всем заменяемых строкам соблюдается.
//	ОтборСтрок - структура, если указано, в коллекциях обрабатываются только строки, удовлетворяющие отбору, 
//		в качестве значения может быть указан массив значений.
//
Функция ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, УсловияЗамены = Неопределено, ОтборСтрок = Неопределено) Экспорт
	
	// Возвращаемым значением является массив идентификаторов замененных строк.
	ЗамененныеСтроки = Новый Массив;
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		СоответствуетУсловиям = Истина;
		Если УсловияЗамены <> Неопределено Тогда
			// Если коллекция старых строк, имеет хотя бы одну строку, 
			// не соответствующую условиям замены - не обновляем.
			Для Каждого СтараяСтрока Из СтарыеСтроки Цикл
				Для Каждого КлючИЗначение Из УсловияЗамены Цикл
					Если СтараяСтрока[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						СоответствуетУсловиям = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		НовыеСтроки = НайтиСтроки(ЗаменяющиеДанные, КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Если СтарыеСтроки.Количество() = 0 И МассивКлючевыхКолонок.Количество() > 0 Тогда
			// Предполагается, что первой колонкой передан сотрудник или физическое лицо.
			ИмяПоляРаботник = МассивКлючевыхКолонок[0];
			СтрокиРаботника = ЗаменяемыеДанные.НайтиСтроки(Новый Структура(ИмяПоляРаботник, СочетаниеКлючевых[ИмяПоляРаботник]));
			КоличествоСтрокРаботника = СтрокиРаботника.Количество();
			Если КоличествоСтрокРаботника > 0 Тогда 
				ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокиРаботника[КоличествоСтрокРаботника - 1]) + 1;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
			Если ЕстьПолеВСтрокеКоллекции(Строка, "ИдентификаторСтрокиВидаРасчета") Тогда
				ЗамененныеСтроки.Добавить(Строка.ИдентификаторСтрокиВидаРасчета);
			КонецЕсли;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

Функция СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, НачальныеПозицииВставки, ФизическиеЛица = Неопределено) Экспорт 
	
	СодержимоеДокумента = Новый Структура;
	СодержимоеДокумента.Вставить("Начисления", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("НачисленияПерерасчет", ПустаяТаблицаНачисления(Истина));
	СодержимоеДокумента.Вставить("Пособия", ПустаяТаблицаПособия());
	СодержимоеДокумента.Вставить("ПособияПерерасчет", ПустаяТаблицаПособия(Истина));
	СодержимоеДокумента.Вставить("Льготы", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("ЛьготыПерерасчет", ПустаяТаблицаНачисления(Истина));
	СодержимоеДокумента.Вставить("НачисленияПоДоговорам", ПустаяТаблицаНачисленияПоДоговорам());
	СодержимоеДокумента.Вставить("Удержания", ПустаяТаблицаУдержанияДокумента());
	СодержимоеДокумента.Вставить("УдержанияПерерасчет", ПустаяТаблицаУдержанияДокумента());
	СодержимоеДокумента.Вставить("НДФЛ", ПустаяТаблицаНДФЛДокумента());
	СодержимоеДокумента.Вставить("КорректировкиВыплаты", РасчетЗарплаты.ТаблицаКорректировкиВыплатыДокумента());
	СодержимоеДокумента.Вставить("ПримененныеВычетыНаДетейИИмущественные", ПустаяТаблицаПримененныеВычетыНДФЛДокумента());
	СодержимоеДокумента.Вставить("Взносы", ПустаяТаблицаВзносыДокумента());
	СодержимоеДокумента.Вставить("ПогашениеЗаймов", ПустаяТаблицаПогашениеЗаймов());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриФормированииСтруктурыСодержимоеДокументаРасчетаЗарплаты(СодержимоеДокумента, Объект);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СодержимоеДокумента Цикл
		Если КлючИЗначение.Ключ = "ПримененныеВычетыНаДетейИИмущественные" Тогда
			ИмяТаблицы = "ПримененныеВычетыИмя";
		Иначе
			ИмяТаблицы = КлючИЗначение.Ключ + "Имя";
		КонецЕсли;
		Если ОписаниеДокумента[ИмяТаблицы] <> Неопределено Тогда
			ТаблицаДокумента = Объект[ОписаниеДокумента[ИмяТаблицы]];
			НачальныеПозицииСотрудников = Новый Соответствие;
			НачальныеПозицииВставки.Вставить(ОписаниеДокумента[ИмяТаблицы], НачальныеПозицииСотрудников);
			Если ТаблицаДокумента.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			СтрокиКУдалению = Новый Массив;
			СтрокиПримененныеВычеты = Новый Массив;
			ИмяПоляСотрудник = "";
			ФизическиеЛицаСотрудников = Новый Соответствие;
			Если ТаблицаДокумента[0].Свойство("Сотрудник") Тогда
				ИмяПоляСотрудник = "Сотрудник";
				Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Сотрудник");
				ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
			ИначеЕсли ТаблицаДокумента[0].Свойство("ФизическоеЛицо") Тогда
				ИмяПоляСотрудник = "ФизическоеЛицо";
			КонецЕсли;
			ПроверятьФизическоеЛицо = ТаблицаДокумента[0].Свойство("ФизическоеЛицо") И ФизическиеЛица <> Неопределено;
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
				Если ПроверятьФизическоеЛицо Тогда
					ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
					Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
						ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаТаблицы[ИмяПоляСотрудник]];
					КонецЕсли;
					Если ФизическиеЛица.Найти(ФизическоеЛицо) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение.Добавить(), СтрокаТаблицы);
				Если ЗначениеЗаполнено(ИмяПоляСотрудник) И ФизическиеЛица <> Неопределено Тогда 
					РасчетЗарплатыРасширенныйФормы.УстановитьНачальнуюПозициюПоСотруднику(НачальныеПозицииСотрудников, СтрокаТаблицы[ИмяПоляСотрудник], ТаблицаДокумента.Индекс(СтрокаТаблицы));
					СтрокиКУдалению.Добавить(СтрокаТаблицы);
					Если КлючИЗначение.Ключ = "НДФЛ" И ЗначениеЗаполнено(ОписаниеДокумента.ПримененныеВычетыИмя) Тогда
						ПараметрыОтбора = Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаТаблицы.ИдентификаторСтрокиНДФЛ);
						НайденныеВычеты = Объект[ОписаниеДокумента.ПримененныеВычетыИмя].НайтиСтроки(ПараметрыОтбора);
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиПримененныеВычеты, НайденныеВычеты);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ИмяПоляСотрудник) И ФизическиеЛица <> Неопределено Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
					ТаблицаДокумента.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Если КлючИЗначение.Ключ = "НДФЛ" И ЗначениеЗаполнено(ОписаниеДокумента.ПримененныеВычетыИмя) Тогда
					Для Каждого СтрокаПримененныеВычеты Из СтрокиПримененныеВычеты Цикл 
						Объект[ОписаниеДокумента.ПримененныеВычетыИмя].Удалить(СтрокаПримененныеВычеты);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя, Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПорядокВыплатыИмя, Объект[ОписаниеДокумента.ПорядокВыплатыИмя]);
	КонецЕсли;
	
	Возврат СодержимоеДокумента;
	
КонецФункции

// Заполняет поле ФизическоеЛицо в коллекции строк, опираясь на поле Сотрудник.
// Может использовать заранее выявленную коллекцию сотрудников.
//
// Параметры:
//	КоллекцияСтрок - любая коллекция элементов, доступная для обхода циклом Для каждого Из, 
//		элементы должны иметь обязательные поля ФизическоеЛицо и Сотрудник.
//	Сотрудники - необязательный, массив сотрудников.
//
Процедура ЗаполнитьФизическихЛицПоСотрудникам(КоллекцияСтрок, Сотрудники = Неопределено) Экспорт
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, "Сотрудник", Истина);
	КонецЕсли;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СтрокаКоллекции.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаКоллекции.Сотрудник];
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет поиск строк в КоллекцияСтрок по заданному отбору.
//
Функция НайтиСтроки(КоллекцияСтрок, Отбор)
	
	НайденныеСтроки = Новый Массив;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетОтбору = Истина;
		Для Каждого КлючИЗначение Из Отбор Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если СтрокаКоллекции[ИмяОтбора] <> ЗначениеОтбора Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно() Экспорт
	
	Описание = Новый Структура(
		"МетаданныеДокумента,
		|ИмяТабличнойЧасти,
		|ПериодРегистрации");
		
	Описание.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	
	Возврат Описание;
	
КонецФункции

#Область РасчетСуммированногоУчетаВремени

// Рассчитывает значения показателей суммированного учета для массива сотрудников за заданный период.
// Значение исходных данных для расчета показателей берутся ил регистра расчета,
// за исключением последнего месяца, который "собирается" по данным УчетаРабочегоВремени.
// 
Функция ПоказателиСуммированногоУчетаСотрудниковЗаПериод(МассивСотрудников, ПериодСуммированногоУчетаНачало, ПериодСуммированногоУчетаОкончание) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачалоРасчетногоПериода = НачалоМесяца(ПериодСуммированногоУчетаНачало);
	КонецРасчетногоПериода = КонецМесяца(ДобавитьМесяц(ПериодСуммированногоУчетаОкончание, -1));
	ПоследнийМесяцНачало = НачалоМесяца(ПериодСуммированногоУчетаОкончание);
	ПоследнийМесяцОкончание = КонецДня(ПериодСуммированногоУчетаОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода", НачалоРасчетногоПериода);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода", КонецРасчетногоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНачало", ПоследнийМесяцНачало);
	Запрос.УстановитьПараметр("ПоследнийМесяцОкончание", ПоследнийМесяцОкончание);
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("ОтработанноеВремя", УчетРабочегоВремениРасширенный.ВидыВремениОтработанноеВремяДляСуммированногоУчета());
	Запрос.УстановитьПараметр("ВидыВремениВЗачетНормы", УчетРабочегоВремениРасширенный.ВидыВремениВЗачетНормыСуммированногоУчета());
	
	// Читаем сотрудников.
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТРасчитываемыеСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)";
	Запрос.Выполнить();
	
	// Расчет по регистру расчета всех месяцев, за исключением последнего.
	ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос);
	// Для последнего месяца собираем данные по данным УчетаРабочегоВремени.
	ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос);
	
	// Объединяем 2 источника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НормоВремяПоРегистру.Сотрудник КАК Сотрудник,
	|	НормоВремяПоРегистру.НормаЧасов КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСотрудниковНаСуммированномУчете
	|ИЗ
	|	ВТНормоВремяПоРегистру КАК НормоВремяПоРегистру
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормоВремяПоУчетуВремени.Сотрудник,
	|	НормоВремяПоУчетуВремени.НормаЧасов
	|ИЗ
	|	ВТНормоВремяПоУчетуВремени КАК НормоВремяПоУчетуВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговоеНормоВремя.Сотрудник,
	|	СУММА(ИтоговоеНормоВремя.НормаЧасов) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСводно
	|ИЗ
	|	ВТНормоВремяСотрудниковНаСуммированномУчете КАК ИтоговоеНормоВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговоеНормоВремя.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовРегистр.Сотрудник,
	|	ВТОтработаноЧасовРегистр.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасы
	|ИЗ
	|	ВТОтработаноЧасовРегистр КАК ВТОтработаноЧасовРегистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовУчетВремени.Сотрудник,
	|	ВТОтработаноЧасовУчетВремени.ОтработаноЧасов
	|ИЗ
	|	ВТОтработаноЧасовУчетВремени КАК ВТОтработаноЧасовУчетВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанныеЧасы.Сотрудник,
	|	СУММА(ОтработанныеЧасы.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасыСводно
	|ИЗ
	|	ВТОтработанныеЧасы КАК ОтработанныеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанныеЧасы.Сотрудник";
	
	// Собираем окончательный итог.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) КАК НормаЧасов,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК ОтработаноЧасовВПраздники,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) - ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) - ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК Переработки
	|ИЗ
	|	ВТРасчитываемыеСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормоВремяСводно КАК НормоВремяСотрудников
	|		ПО Сотрудники.Сотрудник = НормоВремяСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанныеЧасыСводно КАК ОтработанныеЧасы
	|		ПО Сотрудники.Сотрудник = ОтработанныеЧасы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздничные КАК ОтработаноВПраздники
	|		ПО Сотрудники.Сотрудник = ОтработаноВПраздники.Сотрудник";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос)

	// Считаем отработанные часы.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Период,
	|	Начисления.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыНачислений
	|		ПО Начисления.ВидРасчета = ВидыНачислений.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчитываемыеСотрудники КАК РасчитываемыеСотрудники
	|		ПО Начисления.Сотрудник = РасчитываемыеСотрудники.Сотрудник
	|ГДЕ
	|	(Начисления.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ Начисления.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)
	|	И ВидыНачислений.ЗачетНормыВремени
	|	И ВидыНачислений.ЗачетОтработанногоВремени";
	
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисления");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Считаем отработанное на сумм.учете.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисленияСуммУчета
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО Начисления.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Начисления.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	СУММА(НачисленияСотрудников.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовРегистр
	|ИЗ
	|	ВТНачисленияСуммУчета КАК НачисленияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Собираем фактические периоды действия.
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК Период,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисленияФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетОтработанногоВремени
	|				И ВидРасчета.ЗачетНормыВремени
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТРасчитываемыеСотрудники.Сотрудник
	|					ИЗ
	|						ВТРасчитываемыеСотрудники)) КАК НачисленияФактическийПериодДействия
	|ГДЕ
	|	(НачисленияФактическийПериодДействия.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ НачисленияФактическийПериодДействия.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисленияФПД");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Соединяемся с информацией по графику.
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия,
	|	НачисленияФактическийПериодДействия.ДатаНачала,
	|	НачисленияФактическийПериодДействия.ДатаОкончания,
	|	ВТКадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействия
	|ИЗ
	|	ВТНачисленияФПД КАК НачисленияФактическийПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО НачисленияФактическийПериодДействия.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И НачисленияФактическийПериодДействия.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Высчитываем нормовремя.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	СотрудникиГрафики.ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания,
	|	СотрудникиГрафики.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	СотрудникиГрафики.ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА СотрудникиГрафики.ГрафикРаботы
	|		ИНАЧЕ СотрудникиГрафики.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	(СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоРегистру
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчитываемыеСотрудники.Сотрудник,
	|	&НачалоРасчетногоПериода КАК ДатаНачала,
	|	&ПоследнийМесяцОкончание КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТРасчитываемыеСотрудники КАК РасчитываемыеСотрудники";
	Запрос.Выполнить();
	
	// Периоды работы на графике с суммированным учетом строим по данным УчетаВремени.
	// Используем в дальнейшем:
	// 	- для расчета праздничных - за весь период.
	// 	- для расчета отработанных часов и нормы - за последний месяц.
	СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТСотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчитываемыеСотрудники.Сотрудник,
	|	РасчитываемыеСотрудники.ДатаНачала,
	|	РасчитываемыеСотрудники.ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК РасчитываемыеСотрудники";
	Запрос.Выполнить();
	
    ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
    ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
    ПараметрыЗаполнения.ИмяВТРезультат = "ВТУчетРабочегоВремениПолный";
    ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
    ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(Запрос.Параметры.ПоследнийМесяцОкончание);
    ПараметрыЗаполнения.ДатаНачала = Запрос.Параметры.НачалоРасчетногоПериода;
    ПараметрыЗаполнения.ДатаОкончания = Запрос.Параметры.ПоследнийМесяцОкончание;
    ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(Запрос.Параметры.НачалоРасчетногоПериода);
    ПараметрыЗаполнения.МесяцДатаОкончания = НачалоМесяца(Запрос.Параметры.ПоследнийМесяцОкончание);
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	// Собираем рабочие часы за последний месяц.
	// Тут же собираем праздничные за весь период.
	Запрос.УстановитьПараметр("Праздники", ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник"));
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочееВремя.Сотрудник,
	|	РабочееВремя.Дата,
	|	РабочееВремя.Часы
	|ПОМЕСТИТЬ ВТРабочееВремя
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК РабочееВремя
	|ГДЕ
	|	РабочееВремя.ВидУчетаВремени.ОсновноеВремя В(&ОтработанноеВремя)
	|	И РабочееВремя.Часы > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРабочееВремя.Сотрудник,
	|	ВТРабочееВремя.Дата,
	|	СУММА(ВТРабочееВремя.Часы) КАК Часы
	|ПОМЕСТИТЬ ВТДниРаботыСотрудников
	|ИЗ
	|	ВТРабочееВремя КАК ВТРабочееВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРабочееВремя.Сотрудник,
	|	ВТРабочееВремя.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник,
	|	ДниРаботы.Дата,
	|	ПериодыРаботы.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ДниРаботы.Часы
	|ПОМЕСТИТЬ ВТДниРаботыРасширенный
	|ИЗ
	|	ВТДниРаботыСотрудников КАК ДниРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ПериодыРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО ДниРаботы.Сотрудник = ПериодыРаботы.Сотрудник
	|			И (ДниРаботы.Дата МЕЖДУ ПериодыРаботы.ДатаНачала И ПериодыРаботы.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДниРаботыРасширенный.Сотрудник,
	|	ВТДниРаботыРасширенный.Дата,
	|	ВТДниРаботыРасширенный.ГрафикРаботы,
	|	ВТДниРаботыРасширенный.ПроизводственныйКалендарь,
	|	ВТДниРаботыРасширенный.Часы,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = &Праздники
	|			ТОГДА ВТДниРаботыРасширенный.Часы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТДниРаботыРасширенныйСПраздниками
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ВТДниРаботыРасширенный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ВТДниРаботыРасширенный.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ВТДниРаботыРасширенный.Дата = ДанныеПроизводственногоКалендаря.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник,
	|	ДниРаботы.Часы
	|ПОМЕСТИТЬ ВТРабочиеЧасыУчетВремени
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ДниРаботы
	|ГДЕ
	|	ДниРаботы.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеЧасы.Сотрудник,
	|	СУММА(РабочиеЧасы.Часы) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовУчетВремени
	|ИЗ
	|	ВТРабочиеЧасыУчетВремени КАК РабочиеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеЧасы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботыСПраздниками.Сотрудник,
	|	СУММА(ДниРаботыСПраздниками.ЧасовВПраздники) КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТПраздничные
	|ИЗ
	|	ВТДниРаботыРасширенныйСПраздниками КАК ДниРаботыСПраздниками
	|
	|СГРУППИРОВАТЬ ПО
	|	ДниРаботыСПраздниками.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочееВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенныйСПраздниками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеЧасыУчетВремени";
	
	// Получаем нормовремя за последний месяц.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетРабочегоВремениПолный.Сотрудник,
	|	УчетРабочегоВремениПолный.Дата,
	|	ПериодыРаботыСотрудников.ГрафикРаботы
	|ПОМЕСТИТЬ ВТУчетРабочегоВремениСГрафиками
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК УчетРабочегоВремениПолный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботыСотрудников
	|		ПО УчетРабочегоВремениПолный.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
	|			И (УчетРабочегоВремениПолный.Дата МЕЖДУ ПериодыРаботыСотрудников.ДатаНачала И ПериодыРаботыСотрудников.ДатаОкончания)
	|ГДЕ
	|	УчетРабочегоВремениПолный.ВидУчетаВремени.ОсновноеВремя В(&ВидыВремениВЗачетНормы)
	|	И УчетРабочегоВремениПолный.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремяПоДням.Сотрудник,
	|	ВремяПоДням.Дата,
	|	ВремяПоДням.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТДатыДляНормы
	|ИЗ
	|	ВТУчетРабочегоВремениСГрафиками КАК ВремяПоДням
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ВремяПоДням.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник,
	|	ДатыДляНормы.Дата,
	|	ДатыДляНормы.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник,
	|	ДатыДляНормы.Дата,
	|	ВЫБОР
	|		КОГДА ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА ДатыДляНормы.ГрафикРаботы
	|		ИНАЧЕ ДатыДляНормы.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	(ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата = СотрудникиГрафики.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата = СотрудникиГрафики.Дата)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоУчетуВремени
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУчетРабочегоВремениСГрафиками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыДляНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяРезультирующейВТ = "ВТПериодыРаботыСотрудниковНаСуммированномУчете") Экспорт

	// Получаем историю изменения графиков.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ИмяВТСотрудникиПериоды,
			"Сотрудник"),
		ПараметрыПостроения,
		"ВТГрафикиРаботыСотрудниковСрезИДвижения");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.ГрафикРаботы,
		|	СотрудникиГрафики.Период КАК ДатаНачала,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СотрудникиГрафикиСледующие.Период ЕСТЬ NULL 
		|				ТОГДА СотрудникиПериоды.ДатаОкончания
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СотрудникиГрафикиСледующие.Период, ДЕНЬ, -1), ДЕНЬ)
		|		КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыГрафиков
		|ИЗ
		|	ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафикиСледующие
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиГрафикиСледующие.Сотрудник
		|			И СотрудникиГрафики.Период < СотрудникиГрафикиСледующие.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ВТСотрудникиПериоды% КАК СотрудникиПериоды
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиПериоды.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.Период,
		|	СотрудникиГрафики.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботы.Сотрудник,
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.ДатаНачала,
		|	ГрафикиРаботы.ДатаОкончания
		|ПОМЕСТИТЬ %ВТПериодыРаботыСотрудниковНаСуммированномУчете%
		|ИЗ
		|	ВТПериодыГрафиков КАК ГрафикиРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|ГДЕ
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыГрафиков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТГрафикиРаботыСотрудниковСрезИДвижения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТПериодыРаботыСотрудниковНаСуммированномУчете%", ИмяРезультирующейВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТСотрудникиПериоды%", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Проверка множественности оплаты времени.

// Проверяет наличие у сотрудников двух или более действующих плановых начислений с зачетом нормы времени.
// Метод проверяет или конкретный документ, или текущее состояние базы (если ТаблицаНачислений = Неопределено).
//
// Параметры:
//		ТаблицаНачислений - таблица, сформированная методом РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений().
//		Документ - ссылка на документ.
//
Процедура ПроверитьМножественностьОплатыВремени(ТаблицаНачислений = Неопределено, Документ = Неопределено, Отказ = Ложь, ДатаСобытия = '00010101', ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаНачислений <> Неопределено Тогда 
		
		Если ТаблицаНачислений.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаНачислений.Период КАК Период,
		               |	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		               |	ТаблицаНачислений.Начисление КАК Начисление,
		               |	ТаблицаНачислений.Действие КАК Действие,
		               |	ТаблицаНачислений.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТНачисления
		               |ИЗ
		               |	&ТаблицаНачислений КАК ТаблицаНачислений
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Начисления.Период КАК Период,
		               |	Начисления.Сотрудник КАК Сотрудник,
		               |	Начисления.Начисление КАК Начисление,
		               |	Начисления.Действие КАК Действие,
		               |	Начисления.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТДанныеДокумента
		               |ИЗ
		               |	ВТНачисления КАК Начисления
		               |ГДЕ
		               |	Начисления.Начисление.ЗачетНормыВремени = ИСТИНА";
					   
	Иначе				   
		
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ДатаСобытия);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	&ТекущаяДатаСеанса КАК Период
		               |ПОМЕСТИТЬ ВТДанныеДокумента";
					   
	КонецЕсли;				   
					   
	Запрос.Выполнить();			   
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДанныеДокумента", ?(ТаблицаНачислений = Неопределено, Новый Массив, "Сотрудник"));
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.ЗачетНормыВремени", "=", Истина);
	Если ТаблицаНачислений <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсправленныйДокумент);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
	               |	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	               |	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление
	               |ПОМЕСТИТЬ ВТДействующиеНачисления
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	               |ГДЕ
	               |	ПлановыеНачисленияСрезПоследних.Используется = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДействующиеНачисления.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСуществующиеОшибки
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ВТДействующиеНачисления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДействующиеНачисления.Сотрудник
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДействующиеНачисления.Начисление) > 1";
				   
	Запрос.Выполнить();			   
	
	Если ТаблицаНачислений = Неопределено Тогда 
		ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц);
	Иначе 
		ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц, Документ, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействующиеНачисления.Регистратор КАК Регистратор,
	               |	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	               |	ДействующиеНачисления.Начисление КАК Начисление
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ДействующиеНачисления
	               |ГДЕ
	               |	ДействующиеНачисления.Сотрудник В
	               |			(ВЫБРАТЬ
	               |				СуществующиеОшибки.Сотрудник
	               |			ИЗ
	               |				ВТСуществующиеОшибки КАК СуществующиеОшибки)
	               |ИТОГИ ПО
	               |	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСотрудникам.Следующий() Цикл 
		
		ТекстСообщения = НСтр("ru = 'Работнику %1 назначены начисления:'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоСотрудникам.Сотрудник);
		
		Выборка = ВыборкаПоСотрудникам.Выбрать();
		ПерваяСтрока = Истина;
		Пока Выборка.Следующий() Цикл 
			ТекстСообщения = ТекстСообщения + ?(ПерваяСтрока, " ", ", ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" (документ %2)'"), Выборка.Начисление, Выборка.Регистратор);
			ПерваяСтрока = Ложь;
		КонецЦикла;	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(МенеджерВременныхТаблиц, Документ, Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТОтмененныеНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ ВТНовыеНачисления
	|ИЗ
	|	ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтмененныеНачисления КАК ОтмененныеНачисления
	|		ПО ДействующиеНачисления.Сотрудник = ОтмененныеНачисления.Сотрудник
	|			И ДействующиеНачисления.Начисление = ОтмененныеНачисления.Начисление
	|ГДЕ
	|	ОтмененныеНачисления.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТНовыеОшибки
	|ИЗ
	|	ВТНовыеНачисления КАК НовыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНачисления КАК НовыеНачисленияДополнительно
	|		ПО НовыеНачисления.Сотрудник = НовыеНачисленияДополнительно.Сотрудник
	|			И НовыеНачисления.Начисление <> НовыеНачисленияДополнительно.Начисление
	|			И НовыеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = НовыеНачисленияДополнительно.ОбозначениеВТабелеУчетаРабочегоВремени
	|ГДЕ
	|	НЕ НовыеНачисления.Сотрудник В
	|				(ВЫБРАТЬ
	|					СуществующиеОшибки.Сотрудник
	|				ИЗ
	|					ВТСуществующиеОшибки КАК СуществующиеОшибки)
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеНачисления.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НовыеНачисления.Начисление) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеОшибки.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК НачислениеВДокументе,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Регистратор КАК Регистратор
	|ИЗ
	|	ВТНовыеОшибки КАК НовыеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО НовыеОшибки.Сотрудник = ДанныеДокумента.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ПО НовыеОшибки.Сотрудник = ДействующиеНачисления.Сотрудник
	|ГДЕ
	|	ДанныеДокумента.Начисление <> ДействующиеНачисления.Начисление";
					   
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Работнику %1 не может быть назначено начисление ""%2"", поскольку документом %3 ему уже назначено начисление ""%4""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Сотрудник, Выборка.НачислениеВДокументе, Выборка.Регистратор, Выборка.Начисление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Объект.Начисления[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Начисление", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// При проверке документа с сотрудником в шапке проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениРаботникВШапке(Период, Сотрудник, Начисления, Документ, Отказ = Ложь, Действие = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(Действие), Действие, ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить));
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

// При проверке документа отпуска по уходу за ребенком проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениУходЗаРебенком(Период, Начисления, Документ, Отказ = Ложь, ТаблицаПособийПоУходу = Неопределено, ИмяКолонкиСотрудник = "РабочееМесто", ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = ТекСтрока[ИмяКолонкиСотрудник];
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	Если ТаблицаПособийПоУходу <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПособийПоУходу, ТаблицаНачислений);
	КонецЕсли;
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Работа с показателями расчета зарплаты.

// Функция определяет наличие предопределенных показателей 
// в табличной части вида расчета.
//
// Параметры:
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- ИмяПредопределенныхДанных - строковое имя предопределенного показателя.
//
Функция ЕстьПоказательВКоллекции(Коллекция, ИмяПредопределенныхДанных) Экспорт
	
	Возврат ЕстьПоказателиВКоллекции(Коллекция, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПредопределенныхДанных)));
	
КонецФункции

// Функция проверяет наличие показателей в коллекции.
//
// Параметры:
//	- Коллекция - коллекция строк с колонкой Показатель.
//	- Показатели - массив искомых показателей.
//
// Возвращаемое значение 
//	Истина - в коллекции есть хотя бы один из показателей, 
//	Ложь - в противном случае
//
Функция ЕстьПоказателиВКоллекции(Коллекция, Показатели) Экспорт
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		Если Показатели.Найти(СтрокаКоллекции["Показатель"]) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура проверяет выполнимость формулы вида расчета.
// Формула должна быть заполнена.
// Важно. Существование показателей проверяется функцией ПоказателиПоИдентификаторам.
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

// Функция преобразует формулу введенную пользователем в формулу для выполнения при расчете зарплаты.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	Возврат ФормулаДляВыполнения
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
 	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;               
КонецПроцедуры

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти показатель по идентификатору %1'"), Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		Показатели.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции 

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых показателей.
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	// Проверим существование показателей.
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Внесем изменения, связанные с базовыми показателями.
	ДополнитьФормулуБазовымиПоказателями(Формула, ПоказателиФормулы, ИдентификаторыПоказателейФормулы);
	
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	
КонецФункции

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ)
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Использование показателя %1 в этой формуле расчета недопустимо.'"), 
				ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ПоказательФормулы));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразует формулу с учетом шкалы зависимости от базовых показателей.
//
Процедура ДополнитьФормулуБазовымиПоказателями(Формула, Показатели, ИдентификаторыПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
	               |	ПоказателиРасчетаЗарплаты.Идентификатор КАК ПоказательИдентификатор,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель КАК БазовыйПоказатель,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель.Идентификатор КАК БазовыйПоказательИдентификатор
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)
	               |	И ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя)
	               |	И ПоказателиРасчетаЗарплаты.БазовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстЗамены = ТекстЗаменыИндентификатораПоказателяОцениваемогоПоШкале(Выборка.Показатель, Выборка.БазовыйПоказательИдентификатор);
		Формула = СтрЗаменить(Формула, Выборка.ПоказательИдентификатор, ТекстЗамены);
		Если Показатели.Найти(Выборка.БазовыйПоказатель) = Неопределено Тогда 
			Показатели.Добавить(Выборка.БазовыйПоказатель);
		КонецЕсли;
		Если ИдентификаторыПоказателей.Найти(Выборка.БазовыйПоказательИдентификатор) = Неопределено Тогда 
			ИдентификаторыПоказателей.Добавить(Выборка.БазовыйПоказательИдентификатор);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Для показателя, оцениваемого по шкале, возвращает текст для замены идентификатора в формуле расчета.
//
Функция ТекстЗаменыИндентификатораПоказателяОцениваемогоПоШкале(Показатель, БазовыйПоказательИдентификатор) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраницаИнтервалаСтажа,
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	ВЫБОР
	               |		КОГДА ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка = &Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ВерхняяГраницаИнтервалаСтажа";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстЗамены = "";
	ПредыдущееЗначение = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЗначениеПоказателя = СтрЗаменить(Выборка.ЗначениеПоказателя, ",", ".");
		ВерхняяГраницаИнтервалаСтажа = СтрЗаменить(Выборка.ВерхняяГраницаИнтервалаСтажа, ",", ".");
		Если ВерхняяГраницаИнтервалаСтажа = "0" Тогда 
			ТекстЗамены = ТекстЗамены + СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "");
			// Если шкала состоит из одной строки с верхней границей 0, то указанное в строке значение применяется 
			// вне зависимости от значения базового показателя.
			Если ПредыдущееЗначение = Неопределено Тогда 
				Прервать;
			КонецЕсли;
		Иначе 
			ТекстЗамены = ТекстЗамены + "?(" + БазовыйПоказательИдентификатор + " < " 
			+ СтрЗаменить(ВерхняяГраницаИнтервалаСтажа, Символы.НПП, "") + ", " 
			+ СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "") + ", ";
		КонецЕсли;
		ПредыдущееЗначение = Выборка.ЗначениеПоказателя;	
	КонецЦикла;
	Если Прав(ТекстЗамены, 2) = ", " Тогда 
		ТекстЗамены = ТекстЗамены + 0 + ")";
	КонецЕсли;
	Если Лев(ТекстЗамены, 1) = "?" Тогда 
		Для Сч = 1 По Выборка.Количество() - 1 Цикл 
			ТекстЗамены = ТекстЗамены + ")";
		КонецЦикла;
	КонецЕсли;
	Если ТекстЗамены = "" Тогда 
		ТекстЗамены = ТекстЗамены + 0;
	КонецЕсли;	
	
	Возврат ТекстЗамены;
	
КонецФункции	

// Устарела. Следует использовать РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу.
// Функция позволяет заполнить признак ИспользуетФормулу (вторичные данные) вида расчета.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний
//
// Возвращаемое значение - булево, Истина - если способ расчета - произвольная формула.
//
Функция СпособРасчетаИспользуетФормулу(СпособРасчета) Экспорт
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета);
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиПредопределенногоСпособаРасчета(СпособРасчета) Экспорт
	
	ТаблицаПоказателей = ТаблицаПоказателейПредопределенныхСпособовРасчета();
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(
		ТаблицаПоказателей.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета)), "Показатель");
	
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Возвращаемое значение - таблица значений с колонками: 
//	- СпособРасчета, 
//	- Показатель
//
Функция ТаблицаПоказателейПредопределенныхСпособовРасчета() Экспорт
		
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаНачислений,ПеречислениеСсылка.СпособыРасчетаУдержаний"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	
	// Показатели предопределенных способов расчета.
	ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);

	Возврат ТаблицаПоказателей;
	
КонецФункции

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей) Экспорт
	
	// Показатели предопределенных способов расчета подсистемы «Расчет зарплаты».
	
	// Доплата до среднего заработка.
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	
	// Доплата за дни болезни (до среднего заработка ФСС).
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	
	// Доплата до сохраняемого денежного содержания за дни болезни
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания");
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьПоказателиРасчетаПособий(ТаблицаПоказателей);
	
	ИсполнительныеЛисты.ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей);
	
	ПростоиСотрудников.ЗаполнитьПоказателиРасчетаПростоевСотрудников(ТаблицаПоказателей);

	// Собираем показатели предопределенных способов расчета по подсистемам.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);
	
	// Не все псевдопредопределенные показатели существуют безусловно, 
	// не найденные показатели нужно удалить.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателей.Показатель) Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоказателей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаменитьЗначениеИдентификатораВФормулеРасчета(Идентификатор, ПрежнийИдентификатор, ПрежняяФормула) Экспорт
	
	Формула = "";
	ИдентификаторыПоказателей = ИдентификаторыПоказателейФормулы(ПрежняяФормула);
	
	РазмерТекста = СтрДлина(ПрежняяФормула);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(ПрежняяФормула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
				Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
			КонецЕсли;
			Формула = Формула + Сред(ПрежняяФормула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
		Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Работа с видами расчетов

// Расчет вторичных данных о показателях.
// Выполняется перед записью вида расчета.
//
// Параметры:
// - ВидРасчетаОбъект - записываемый вид расчета.
//
Процедура ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	// Промежуточную структуру используем из-за неодинаковой структуры разных планов видов расчета.
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("КоличествоПостоянныхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("КоличествоПоказателейИспользуемыхПриРасчете", 0);
	ЗначенияРеквизитов.Вставить("КоличествоОтображаемыхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазы", Ложь);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазыСтраховыхВзносов", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСдельныйЗаработок", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСреднийЗаработокОбщий", Ложь);
	
	// Определяем основной показатель - единственный показатель, не рассчитываемый автоматически.
	МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ВидРасчетаОбъект.Показатели, "Показатель");
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателей);
	
	СтрокиПоказателей = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		// Для начала все строки не основные.
		СтрокаПоказателя.ОсновнойПоказатель = Ложь;
		// Получаем сведения о показателе.
		СведенияОПоказателе = СведенияОПоказателях[СтрокаПоказателя.Показатель];
		Если СведенияОПоказателе <> Неопределено Тогда
			// Собираем не автоматически рассчитываемые показатели.
			Если Не СведенияОПоказателе.ЗначениеРассчитываетсяАвтоматически 
				И СведенияОПоказателе.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника Тогда
				СтрокиПоказателей.Добавить(СтрокаПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиПоказателей.Количество() > 0 Тогда
		// Если не рассчитываемый показатель единственный, то он и будет основным.
		Если СтрокиПоказателей.Количество() = 1 Тогда
			СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
		Иначе
			// ..Если нет, выберем первый, который запрашивается при вводе.
			ОсновнойПоказатель = Неопределено;
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
					СтрокаПоказателя.ОсновнойПоказатель = Истина;
					ОсновнойПоказатель = СтрокаПоказателя.Показатель;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Если ни один не запрашивается, то назначаем основным просто первый по порядку.
			Если ОсновнойПоказатель = Неопределено Тогда
				СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Упорядочивание в запросе важно потому что оно фактически предъявляется 
	// пользователю в виде последовательности колонок с показателями в документах редактирования начислений.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Показатели.Показатель,
	|	Показатели.ИспользоватьПриРасчете
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Показатель,
	|	Показатели.ИспользоватьПриРасчете,
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления,
	|	ВЫБОР
	|		КОГДА ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|				И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
	|				И ПоказателиРасчетаЗарплаты.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПостоянныйПоказатель
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = Показатели.Показатель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления Убыв,
	|	ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически,
	|	ПоказателиРасчетаЗарплаты.СпособПримененияЗначений.Порядок,
	|	ПоказателиРасчетаЗарплаты.Наименование");
	
	Запрос.УстановитьПараметр("Показатели", ВидРасчетаОбъект.Показатели);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомераПоказателей = Новый Соответствие();
	НомерСтроки = 0;
	
	ПоказателиОбщегоСреднегоЗаработка = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОбщегоСреднегоЗаработка();
	
	Пока Выборка.Следующий() Цикл
		// Подсчет показателей разных видов.
		Если Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете = ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете + 1;
		КонецЕсли;
		Если Выборка.ПостоянныйПоказатель = Истина Тогда
			ЗначенияРеквизитов.КоличествоПостоянныхПоказателей = ЗначенияРеквизитов.КоличествоПостоянныхПоказателей + 1;
		КонецЕсли;
		Если Выборка.ОтображатьВДокументахНачисления = Истина И Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей = ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей + 1;
		КонецЕсли;
		// Если встречаются показатели:
		// - Сдельный заработок
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда 
			ЗначенияРеквизитов.ИспользуетСдельныйЗаработок = Истина;
		КонецЕсли;
		// - Средний заработок общий
		Если ПоказателиОбщегоСреднегоЗаработка.Найти(Выборка.Показатель) <> Неопределено Тогда 
			ЗначенияРеквизитов.ИспользуетСреднийЗаработокОбщий = Истина;
		КонецЕсли;
		// - Расчет базы
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазыСтраховыхВзносов = Истина;
		КонецЕсли;
		НомераПоказателей[Выборка.Показатель] = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Сортировать таблицу с показателями.
	Для Позиция = 1 По ВидРасчетаОбъект.Показатели.Количество() - 1 Цикл
		ПозицияВнутр = Позиция;
		Пока ПозицияВнутр > 0 Цикл
			Если НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр].Показатель] < НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр - 1].Показатель] Тогда
				// меняем местами
				ВидРасчетаОбъект.Показатели.Сдвинуть(ПозицияВнутр, -1);
			КонецЕсли;
			ПозицияВнутр = ПозицияВнутр - 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, ЗначенияРеквизитов);
	
	// Эти значения могут сохранятся среди повторно используемых значений.
	ОбновитьПовторноИспользуемыеЗначения();
		
КонецПроцедуры

// Расчет вторичных данных о начислении на основании написанной формулы 
// или выбранного способа расчета.
// Нужно выполнять перед записью начисления.
Процедура ЗаполнитьИнформациюОбУчетеВремени(ВидРасчетаОбъект) Экспорт
	
	ТребуетсяРасчетВремени = Ложь;
	ТребуетсяРасчетНормыВремени = Ложь;
	ТребуетсяРасчетКалендарныхДней = Ложь;
	ТребуетсяРасчетКалендарныхДнейБезПраздников = Ложь;
	ТребуетсяРасчетСверхурочных = Ложь;
	ТребуетсяРасчетОтработаноДнейВсего = Ложь;
	ТребуетсяРасчетОтработаноЧасовВсего = Ложь;
	УчетВремениВЧасах = Ложь;
	УчетВремениВДняхЧасах = Ложь;
	ТребуетсяРасчетБазы = Ложь;
	
	Для Каждого СтрокаПоказателей Из ВидРасчетаОбъект.Показатели Цикл
		Показатель = СтрокаПоказателей.Показатель;
		Если Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноДнейВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноЧасовВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно") 
			Или Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов") Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетСверхурочных = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни") Тогда
			ТребуетсяРасчетКалендарныхДней = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников") Тогда
			ТребуетсяРасчетКалендарныхДнейБезПраздников = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда
			ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УчетВремениВЧасах = НачислениеРассчитываетсяПоЧасам(ВидРасчетаОбъект);
	
	// Использование периода заполняем по следующим правилам.
	// 1. БазовыйПериод - применяется только в том случае, если начисление использует расчет базы, 
	// но при этом его базовый период НЕ совпадает с периодом действия.
	// 2. НеИспользовать - применяется, если начисление выполняется в целом за месяц, 
	// т.е. не использует ни расчетную базу за текущий месяц, ни показатели учета времени.
	// 3. ПериодДействия - во всех прочих случаях.
	
	Если ТребуетсяРасчетБазы И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод;
	Иначе
		Если НачислениеВыполняетсяВЦеломЗаМесяц(ВидРасчетаОбъект) Тогда
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
		Иначе
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия;
		КонецЕсли;
	КонецЕсли;
	
	ПериодДействияБазовый = Ложь;
	Если ТребуетсяРасчетБазы И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ПериодДействияБазовый = Истина;
		Если ПланыВидовРасчета.Начисления.КатегорииНадбавокПоБазе().Найти(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			// Такие надбавки должны вытесняться отклонениями для корректного включения в базу удержаний, 
			// но при этом включать в базу все начисления, выполненные даже в период отклонений.
			// Например, оплату праздничных в период командировки.
			ПериодДействияБазовый = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет времени для неявки нужен, чтобы посчитать время целодневной неявки,
	// а также для того, чтобы это время можно было правильно отобразить в табеле учета рабочего времени.
	КатегорииТребуетсяРасчетВремени = Новый Массив;
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	Если Не ТребуетсяРасчетВремени 
		И КатегорииТребуетсяРасчетВремени.Найти(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ТребуетсяРасчетВремени = Истина;
	КонецЕсли;
	
	ЗаполнитьПризнакОпределяющийВидВремени(ВидРасчетаОбъект);
	ЗаполнитьПризнакУчитыватьИзмененияВремяВЧасах(ВидРасчетаОбъект);
	
	ВидРасчетаОбъект.ТребуетсяРасчетВремени = ТребуетсяРасчетВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетНормыВремени = ТребуетсяРасчетНормыВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДней = ТребуетсяРасчетКалендарныхДней;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДнейБезПраздников = ТребуетсяРасчетКалендарныхДнейБезПраздников;
	ВидРасчетаОбъект.ТребуетсяРасчетСверхурочных = ТребуетсяРасчетСверхурочных;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноДнейВсего = ТребуетсяРасчетОтработаноДнейВсего;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноЧасовВсего = ТребуетсяРасчетОтработаноЧасовВсего;
	ВидРасчетаОбъект.УчетВремениВЧасах = УчетВремениВЧасах;
	ВидРасчетаОбъект.УчетВремениВДняхЧасах = УчетВремениВДняхЧасах;
	ВидРасчетаОбъект.ИспользованиеПериода = ИспользованиеПериода;
	ВидРасчетаОбъект.ПериодДействияБазовый = ПериодДействияБазовый; 
		
	// Заполняются реквизиты ЗачетОтработанногоВремени и ЗачетНормыВремени.
	ВидВремени = ВидРасчетаОбъект.ВидВремени;	
	
	ВидРасчетаОбъект.ЗачетНормыВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетНормыВремениНачисления(ВидРасчетаОбъект);
	ВидРасчетаОбъект.ЗачетОтработанногоВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ВидВремени);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОпределяющийВидВремени(ВидРасчетаОбъект)
	
	Для Каждого Строка Из ВидРасчетаОбъект.ВидыВремени Цикл
		Строка.ОпределяющийВидВремени = Ложь;
		Строка.ОпределяющийЗаПраздничныеДни = Ложь;
		Если Не ЗначениеЗаполнено(ВидРасчетаОбъект.ОбозначениеВТабелеУчетаРабочегоВремени) Тогда
			Продолжить;
		КонецЕсли;
		Если ВидРасчетаОбъект.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете Тогда
			Строка.ОпределяющийВидВремени = Истина;
		КонецЕсли;
		Если ВидРасчетаОбъект.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете Тогда
			Строка.ОпределяющийВидВремени = Истина;
			Строка.ОпределяющийЗаПраздничныеДни = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУчитыватьИзмененияВремяВЧасах(ВидРасчетаОбъект)
	
	ВидРасчетаОбъект.УчитыватьИзмененияВремяВЧасах = Ложь;
	
	Если ВидРасчетаОбъект.СпособВыполненияНачисления <> Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете Тогда
		Возврат;
	КонецЕсли;

	Если Не ВидРасчетаОбъект.УчетВремениВДняхЧасах Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыВремени", ВидРасчетаОбъект.ВидыВремени.ВыгрузитьКолонку("ВидВремени"));
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
		|ГДЕ
		|	ВидыИспользованияРабочегоВремени.Ссылка В(&ВидыВремени)
		|	И ВидыИспользованияРабочегоВремени.ОсновноеВремя = &Праздники";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВидРасчетаОбъект.УчитыватьИзмененияВремяВЧасах = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение реквизита формы, содержащего список зависимых видов расчета.
//
// Параметры: 
//		Ссылка
//		СписокВидовРасчета - таблица значений с колонкой ВидРасчета.
//
Процедура ЗаполнитьСписокЗависимыхВидовРасчета(Ссылка, СписокВидовРасчета, ИмяТабличнойЧасти, ЗапросПоУдержаниям = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Зависимые.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК Зависимые
	|ГДЕ
	|	Зависимые.ВидРасчета = &ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зависимые.Ссылка.Наименование";
	
	// замена для удержаний
	Если ЗапросПоУдержаниям Или ТипЗнч(Ссылка) = Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.Начисления", "ПланВидовРасчета.Удержания");
	КонецЕсли;
	// замена для вытесняющих
	Если ИмяТабличнойЧасти = "ВытесняющиеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "ВытесняющиеВидыРасчета");
	КонецЕсли;
	// замена для базовых
	Если ИмяТабличнойЧасти = "БазовыеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "БазовыеВидыРасчета");
		Если Не ЗапросПоУдержаниям Тогда 
			ТекстДоплатаДоСреднего = "Зависимые.Ссылка КАК ВидРасчета,
									|	ВЫБОР
									|		КОГДА Зависимые.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
									|			ТОГДА ИСТИНА
									|		ИНАЧЕ ЛОЖЬ
									|	КОНЕЦ КАК ДоплатаДоСреднего";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Зависимые.Ссылка КАК ВидРасчета", ТекстДоплатаДоСреднего);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидРасчета", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВидовРасчета.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Вторичные данные об учете среднего заработка.
//
Процедура ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(ВидРасчетаОбъект) Экспорт
	
	// Анализируем для общего среднего заработка.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокОбщий Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетОбщегоСреднегоЗаработка = ВходитВУчетСреднего;
	
	// Анализируем для среднего заработка ФСС.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокФСС Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеФСС.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетСреднегоЗаработкаФСС = ВходитВУчетСреднего;
	
КонецПроцедуры

Функция РазрешенВводНесколькихПлановыхНачислений(КатегорияНачисления, СпособВыполнения) Экспорт 
	
	Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки
		Или КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда 
		Возврат Истина;
	КонецЕсли;
	
	КатегорииНачислений = КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений();
	Если КатегорииНачислений.Найти(КатегорияНачисления) <> Неопределено  
		И (СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете
		Или СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете) Тогда 
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Функция КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений() Экспорт 
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоказателейВидаРасчета(ВидРасчетаОбъект, КоллекторВидовРасчета) Экспорт
	
	// Настройка табличной части показателей.
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета) Тогда
		ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(ВидРасчетаОбъект.ФормулаРасчета);
	Иначе
		ПоказателиФормулы = ПоказателиПредопределенногоСпособаРасчета(ВидРасчетаОбъект.СпособРасчета);
	КонецЕсли;
	
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ПоказателиФормулы);
	ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
    ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(ВидРасчетаОбъект.Ссылка, ПоказателиФормулы, КоллекторВидовРасчета);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, ВидРасчетаОбъект.Показатели);
	
КонецПроцедуры

Функция СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы() Экспорт

	СсылкиНачисленийУдержаний = Новый Структура; 
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыполнениеПлана", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыручкуОтРеализации", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКрови", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКровиВнутрисменная", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазовоеНачисление", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("СдельныйЗаработок", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоДням", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("УдержаниеВСчетВозмещенияУщерба", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВредность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛет", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаТрудаВНатуральнойФорме", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиноеДенежноеВознаграждение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаКОкладуЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяКвалификационнаяНадбавка", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетГосслужащим", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбыГосслужащих", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячноеДенежноеПоощрение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаВыполнениеОсобоВажныхИСложныхЗаданий", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпускуГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпуску", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("МатериальнаяПомощьКОтпускуГосслужащего", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскойДолжности", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскомуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетНаВоеннойСлужбе", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКласснуюКвалификацию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияВоеннойСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладСотрудникаДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоСпециальномуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСтажСлужбы", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКвалификационноеЗвание", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретностьДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыполнениеЗадачСвязанныхСРиском", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностейСотрудникам", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОплатаПреподавателейПоОкладу", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаКлассноеРуководство", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаПроверкуТетрадей", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКвалификационнуюКатегориюПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаУченуюСтепеньПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаПочетноеЗваниеПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаЕзду", Неопределено);

	СсылкиНачисленийУдержаний.Вставить("ДоплатаПоРезультатамОценкиЭффективности", Неопределено);
	
	Возврат СсылкиНачисленийУдержаний;

КонецФункции 

Функция ОписаниеПараметровПланаВидовРасчета() Экспорт

	// ПараметрыПоказателей
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ОкладТарифТочность", 0);
	ПараметрыПоказателей.Вставить("ОкладТарифЧасовойТочность", 3);
	
	// ГодоваяПремия
	ПараметрыГодовойПремии = Новый Структура; 
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыГодовойПремии.Вставить("НомерМесяцаНачисленияГодовойПремии", 0);
	ПараметрыГодовойПремии.Вставить("КодДохода", "");
	
	ПараметрыКвартальнойПремии = Новый Структура; 
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НомераМесяцевНачисленияКвартальнойПремии", Новый Массив);
	ПараметрыКвартальнойПремии.Вставить("КодДохода", "");
	
	// 4D:ERP для Беларуси, Юлия, 12.09.2017 15:08:39 
	// Вид начисления премия, № 15995
	// {	
	ПараметрыЕжемесячнойПремии = Новый Структура; 
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюПроцентом", Истина);
	ПараметрыЕжемесячнойПремии.Вставить("БазовыйПериодПрошлыйМесяц",   Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("КодДохода", "");
	
	ПараметрыРазовойПремии = Новый Структура;
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюПроцентом", Истина);
	ПараметрыРазовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыРазовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыРазовойПремии.Вставить("ЧислоМесяцевПериодаРазовойПремии",   0);
	ПараметрыРазовойПремии.Вставить("КодДохода", "");
	// }
	// 4D
	
	ПараметрыНадбавок = Новый Структура; 
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВредность", Ложь);
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВыслугуЛет", Ложь);
	ПараметрыНадбавок.Вставить("НадбавкиПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("НадбавкиСуммой", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокСуммой", Новый Массив);
	
	ПараметрыНатуральныхДоходов = Новый Структура; 
	ПараметрыНатуральныхДоходов.Вставить("ОплатаТрудаВНатуральнойФорме", Ложь);
	ПараметрыНатуральныхДоходов.Вставить("НатуральныеДоходы", Новый Массив);
	
	ПараметрыДополнительныеОтпуска = Новый Структура; 
	ПараметрыДополнительныеОтпуска.Вставить("ИспользоватьДополнительныеОтпуска", Ложь);
	ПараметрыДополнительныеОтпуска.Вставить("ДополнительныеОтпуска", Новый ТаблицаЗначений);
	
	ПараметрыКомпенсационныеВыплаты = Новый ТаблицаЗначений;
	
	СсылкиНачисленийУдержаний = СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы();
	СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплатыНачальнойНастройкиПрограммы();
	СсылкиПоказателиРасчетаЗарплаты = Справочники.ПоказателиРасчетаЗарплаты.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальнаяНастройкаПрограммы", Ложь);
	Параметры.Вставить("ПараметрыПоказателей", ПараметрыПоказателей);
	Параметры.Вставить("ГодоваяПремия", ПараметрыГодовойПремии);
	Параметры.Вставить("КвартальнаяПремия", ПараметрыКвартальнойПремии);
	Параметры.Вставить("ЕжемесячнаяПремия", ПараметрыЕжемесячнойПремии);
	Параметры.Вставить("РазоваяПремия", ПараметрыРазовойПремии);
	Параметры.Вставить("Надбавки", ПараметрыНадбавок);
	Параметры.Вставить("КомпенсационныеВыплаты", ПараметрыКомпенсационныеВыплаты);
	Параметры.Вставить("НатуральныеДоходы", ПараметрыНатуральныхДоходов);
	Параметры.Вставить("ДополнительныеОтпуска", ПараметрыДополнительныеОтпуска);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыполнениеПлана", Ложь);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыручкуОтРеализации", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКрови", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКровиВнутрисменных", Ложь);
	Параметры.Вставить("ИспользоватьРазовоеНачисление", Ложь);
	Параметры.Вставить("ИспользоватьПодневнуюОплатуТруда", Ложь);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощи", 1);
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпуску", 2);  
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпускуГосслужащего", 2);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощиГосслужащего", 2);
	Параметры.Вставить("СсылкиНачисленийУдержаний", СсылкиНачисленийУдержаний);
	Параметры.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
	Параметры.Вставить("СсылкиПоказателиРасчетаЗарплаты", СсылкиПоказателиРасчетаЗарплаты);
	Параметры.Вставить("ИспользоватьУдержаниеВСчетВозмещенияУщерба", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕдиноеДенежноеВознаграждение", Ложь);
	
	Возврат Параметры;

КонецФункции 

Процедура ПроверитьНаличиеБазовыхВидовРасчета(ВидРасчетаОбъект, Отказ) Экспорт
	
	// Проверяем, что если в формуле присутствует показатель Расчетная база, список базовых начислений не пуст.
	
	РасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	Если ВидРасчетаОбъект.Показатели.Найти(РасчетнаяБаза, "Показатель") <> Неопределено
		И ВидРасчетаОбъект.БазовыеВидыРасчета.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнен список базовых начислений.'"), , "БазовыеВидыРасчета", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Дозаполняет ведущие и вытесняющие начисления и расставляет очередность расчета 
// для переданных начислений.
// Вносит изменения в виды начислений, которые зависят от переданных.
// Параметры:
//	ПакетВидовРасчета - соответствие объектов типа ПланВидовРасчетаОбъект.Начисления, 
//		которые необходимо записать, ключом является ссылка
// ВНИМАНИЕ.
//  Все объекты ПакетВидовРасчета должны иметь ссылки, т.е. должны быть 
//  либо уже записаны, либо им должна быть установлена ссылка нового объекта.
//
Процедура ДозаполнитьВидыРасчета(ПакетВидовРасчета) Экспорт
	
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриДозаполненииПакетаВидовРасчета(ПакетВидовРасчета);
	КонецЕсли;
	
	// Корректируем список ведущих по базовым и вытесняющим начислениям.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		ВедущиеНачисления = Новый Соответствие;
		// Собираем уже имеющиеся ведущие начисления.
		Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
			ВедущиеНачисления.Вставить(Строка.ВидРасчета);
		КонецЦикла;
		// Если расчетная база определяется за текущий период, 
		// то базовые виды расчета являются также ведущими.
		Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ВидРасчета.Показатели, "РасчетнаяБаза") Тогда
			Для Каждого Строка Из ВидРасчета.БазовыеВидыРасчета Цикл
				ВедущиеНачисления.Вставить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		// Удаляем из ведущих ссылку на самого себя, если таковая имеется.
		ВедущиеНачисления.Удалить(КлючИЗначение.Ключ);
		// Полученным соответствием перезаписываем список ведущих.
		ВидРасчета.ВедущиеВидыРасчета.Очистить();
		Для Каждого КлючИЗначение Из ВедущиеНачисления Цикл
			ВидРасчета.ВедущиеВидыРасчета.Добавить().ВидРасчета = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Наименование КАК Наименование,
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	ВидыРасчетов.ОчередностьРасчета КАК ОчередностьПрежняя,
	|	СписокВедущих.ВидРасчета КАК ВедущийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК СписокВедущих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВедущих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВедущих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыРасчетов = Новый Соответствие;
	// Информация обо всех начислениях.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ОписаниеВидаРасчета = НеОпределено Тогда
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = Выборка.ОчередностьПрежняя;
			ОписаниеВидаРасчета.Наименование = Выборка.Наименование;
			ВидыРасчетов[Выборка.ВидРасчета] = ОписаниеВидаРасчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВедущийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВедущиеПрежние.Добавить(Выборка.ВедущийВидРасчета);
			ОписаниеВидаРасчета.Ведущие.Добавить(Выборка.ВедущийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	СписокВытесняющих.ВидРасчета КАК ВытесняющийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК СписокВытесняющих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВытесняющих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВытесняющих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим информацию о вытесняющих видах расчетов.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ЗначениеЗаполнено(Выборка.ВытесняющийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВытесняющиеПрежние.Добавить(Выборка.ВытесняющийВидРасчета);
			ОписаниеВидаРасчета.Вытесняющие.Добавить(Выборка.ВытесняющийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	ЗаказанныеВидыРасчетаСсылки = Новый Массив;
	// Добавим информацию о "заказанных" видах расчета.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		Если ВидРасчета.Ссылка.Пустая() Тогда
			Ссылка = ВидРасчета.ПолучитьСсылкуНового();
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = ВидРасчета.ОчередностьРасчета;
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			ВидыРасчетов[Ссылка] = ОписаниеВидаРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		Иначе
			Ссылка = ВидРасчета.Ссылка;
			ОписаниеВидаРасчета = ВидыРасчетов[Ссылка];
			ОписаниеВидаРасчета.Ведущие.Очистить();
			ОписаниеВидаРасчета.Вытесняющие.Очистить();
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				Если ВидРасчета.Ссылка <> Строка.ВидРасчета Тогда 
					ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаказанныеВидыРасчетаСсылки.Добавить(Ссылка);
	КонецЦикла;
	
	Для Каждого ВидРасчетаСсылка Из ЗаказанныеВидыРасчетаСсылки Цикл
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Ведущие");
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Вытесняющие");
	КонецЦикла;
	
	ОчереднаяОчередность = 1;
	Пока Истина Цикл
		Обработано = Ложь;
		НачисленияОчереднойОчередности = Новый Массив;
		Для Каждого Элемент Из ВидыРасчетов Цикл
			ОписаниеВидаРасчета = Элемент.Значение;
			Если ОписаниеВидаРасчета.Очередность <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьВедущие = Ложь;
			Для Каждого ВедущийВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				ОписаниеВедущего = ВидыРасчетов[ВедущийВидРасчета];
				Если ОписаниеВедущего <> НеОпределено И ОписаниеВедущего.Очередность = 0 Тогда
					ЕстьВедущие = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьВедущие Тогда
				Продолжить;
			КонецЕсли;
			НачисленияОчереднойОчередности.Добавить(ОписаниеВидаРасчета);
			Обработано = Истина;
		КонецЦикла;
		Для Каждого ОписаниеВидаРасчета Из НачисленияОчереднойОчередности Цикл
			ОписаниеВидаРасчета.Очередность = ОчереднаяОчередность;
		КонецЦикла;
		// следующая...
		ОчереднаяОчередность = ОчереднаяОчередность + 1;
		Если Не Обработано Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим все ли виды расчета обработаны.
	Для Каждого ОписаниеВидаРасчета Из ВидыРасчетов Цикл
		Если ОписаниеВидаРасчета.Значение.Очередность = 0 Тогда
			ВызватьИсключение Нстр("ru = 'Начисления не могут быть записаны при заданных настройках последовательности расчета.'");
		КонецЕсли;
	КонецЦикла;
	
	// Зафиксируем все объекты для которых изменилась очередность, состав вытесняющих или состав ведущих.
	Для Каждого Элемент Из ВидыРасчетов Цикл
		ОписаниеВидаРасчета = Элемент.Значение;
		Если ОписаниеВидаРасчета.Очередность <> ОписаниеВидаРасчета.ОчередностьПрежняя Или 
			ОписаниеВидаРасчета.Ведущие.Количество() <> ОписаниеВидаРасчета.ВедущиеПрежние.Количество() Или
			ОписаниеВидаРасчета.Вытесняющие.Количество() <> ОписаниеВидаРасчета.ВытесняющиеПрежние.Количество() Или 
			ОписаниеВидаРасчета.Заказанный Тогда
			Если ОписаниеВидаРасчета.Заказанный Тогда
				ИзменяемыйВидРасчета = ОписаниеВидаРасчета.Объект;
			Иначе
				ИзменяемыйВидРасчета = ПакетВидовРасчета[Элемент.Ключ];
				Если ИзменяемыйВидРасчета = НеОпределено Тогда
					ИзменяемыйВидРасчета = Элемент.Ключ.ПолучитьОбъект();
					ПакетВидовРасчета[Элемент.Ключ] = ИзменяемыйВидРасчета;
				КонецЕсли;
			КонецЕсли;
			ИзменяемыйВидРасчета.ОчередностьРасчета = ОписаниеВидаРасчета.Очередность;
			ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
			ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Вытесняющие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает объекты-виды расчета.
// Предназначена для записи видов расчета, модифицированных в связи с изменениями 
// в том или ином начислении и зависящих от этих изменений.
// Параметры: 
//		ВидыРасчета - массив или соответствие, значения которого - объекты видов расчета.
//
Процедура ЗаписатьПакетВидовРасчета(ВидыРасчета, ОбновлятьНастройки = Истина) Экспорт
	
	Если ВидыРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидыРасчета) = Тип("Соответствие") Тогда
		ВидыРасчетовМассив = Новый Массив;
		Для Каждого Элемент Из ВидыРасчета Цикл
			ВидыРасчетовМассив.Добавить(Элемент.Значение);
		КонецЦикла;
	Иначе
		ВидыРасчетовМассив = ВидыРасчета;
	КонецЕсли;
	
	Для Каждого ВидРасчета Из ВидыРасчетовМассив Цикл
		Попытка
			ВидРасчета.Заблокировать();
		Исключение
			ПредставлениеВидаРасчета = ?(ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаОбъект.Начисления"), НСтр("ru = 'начисление'"), НСтр("ru = 'удержание'"));
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется внести изменение в %2 «%1». 
				|В данный момент изменение невозможно, так как %2 редактируется другим пользователем или в другой форме программы'"),
				ВидРасчета.Наименование, ПредставлениеВидаРасчета);
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		ВидРасчета.ОбменДанными.Загрузка = Истина;
		ВидРасчета.Записать();
	КонецЦикла;
	
	Если ОбновлятьНастройки Тогда
		РасчетЗарплатыРасширенный.ЗаполнитьНастройкиРасчетаЗарплаты();
		УчетСреднегоЗаработка.ЗаполнитьНастройкиУчетаСреднегоЗаработка();
		ЗарплатаКадрыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка)
	Если ОбработанныеВидыРасчета[ВидРасчетаСсылка] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	// Значение соответствия ОбработанныеВидыРасчета - список видов расчета уже использованных для дополнения списка.
	ОбработанныеВидыРасчета[ВидРасчетаСсылка] = Новый Соответствие; 
	
	ОписаниеВидаРасчета = ВидыРасчетов[ВидРасчетаСсылка];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	ДополняемыйСписок = Новый Соответствие;
	СтекВидовРасчета = Новый Соответствие;
	ДополнитьСписокРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ОбработанныеВидыРасчета[ВидРасчетаСсылка]);
	Если ОписаниеВидаРасчета[ИмяДополняемогоСписка].Количество() < ДополняемыйСписок.Количество() Тогда
		// Если количество ведущих увеличилось - обновим их список...
		ОписаниеВидаРасчета[ИмяДополняемогоСписка].Очистить();
		Для Каждого Элемент Из ДополняемыйСписок Цикл
			ОписаниеВидаРасчета[ИмяДополняемогоСписка].Добавить(Элемент.Ключ);
		КонецЦикла;
		// ...И обработаем виды расчетов, которые зависят от ВидРасчетаСсылка.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОписаниеВидаРасчета.Заказанный Тогда
		// В любом случае обработаем виды расчетов, которые зависят от заказанного вида расчета.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокРекурсивно(ЗаказанныйВидРасчета, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения)
	Если ИспользованныеДляДополнения[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	ИспользованныеДляДополнения[ЗаказанныйВидРасчета] = 0;
	
	ОписаниеВидаРасчета = ВидыРасчетов[ЗаказанныйВидРасчета];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	Если СтекВидовРасчета[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		// рекурсия
		Если ИмяДополняемогоСписка = "Ведущие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задана противоречивая последовательность расчета для начисления %1. Запись начислений в таком состоянии невозможна'"),
				ОписаниеВидаРасчета.Наименование);
		ИначеЕсли ИмяДополняемогоСписка = "Вытесняющие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заданы противоречивые приоритеты расчета для начисления %1. Запись начислений в таком состоянии невозможна'"),
				ОписаниеВидаРасчета.Наименование);
		КонецЕсли;
		ВызватьИсключение ТекстИсключенияЗаписи;
	КонецЕсли;
	СтекВидовРасчета[ЗаказанныйВидРасчета] = 0;
		
	Для Каждого ВедущийВР Из ОписаниеВидаРасчета[ИмяДополняемогоСписка] Цикл
		ДополняемыйСписок[ВедущийВР] = 0;
		Если ЗначениеЗаполнено(ВедущийВР) Тогда
			ДополнитьСписокРекурсивно(ВедущийВР, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения);
		КонецЕсли;
	КонецЦикла;
	СтекВидовРасчета.Удалить(ЗаказанныйВидРасчета);
		
КонецПроцедуры

Функция ОписаниеВидаРасчета()
	ОписаниеВидаРасчета = Новый Структура("ВедущиеПрежние,Ведущие,ОчередностьПрежняя,Очередность,ВытесняющиеПрежние,Вытесняющие,Заказанный,Наименование,Объект");
	ОписаниеВидаРасчета.ВедущиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Ведущие = Новый Массив;
	ОписаниеВидаРасчета.Очередность = 0;
	ОписаниеВидаРасчета.ВытесняющиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Вытесняющие = Новый Массив;
	ОписаниеВидаРасчета.Заказанный = Ложь;
	ОписаниеВидаРасчета.Наименование = "";
	ОписаниеВидаРасчета.Объект = НеОпределено;
	Возврат ОписаниеВидаРасчета;
	
КонецФункции

// Дополняет коллектор начислений в соответствии с правилом заполнения «техногенного» списка 
// базовых начислений доплаты до среднего заработка.
//
// Параметры:
//	КоллекторНачислений - соответствие начислений, предлагаемых к записи.
//	СпособРасчетаДоплатыДоСреднего - способ расчета «Доплата до среднего» или «Доплата до среднего ФСС».
//
Процедура ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(КоллекторНачислений, СпособРасчетаДоплатыДоСреднего)
	
	// Принимаем коллектор начислений и дополняем его при необходимости.
	// Причины, по которым может понадобиться что-то дозаписать:
	// - среди предложенных видов расчета, есть те, которые нужно ВКЛЮЧИТЬ в базу одной или нескольких доплат до среднего
	// - среди предложенных есть те, которые нужно ИСКЛЮЧИТЬ из базы одной или нескольких доплат до среднего.
	// Отдельно выполняем заполнение базовых начислений доплаты (доплат) до среднего, если они также встречаются среди
	// предложенных.
	
	// 1. Отбираем начисления коллектора, которые 
	// - учитываются при доплате до среднего заработка
	// - не учитываются при доплате
	// - являются доплатой до среднего заработка.
	УчитываютсяПриДоплатеДоСреднего = Новый Массив;
	НеУчитываютсяПриДоплатеДоСреднего = Новый Массив;
	ДоплатыДоСреднего = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		Если НачислениеОбъект.СпособРасчета = СпособРасчетаДоплатыДоСреднего Тогда
			ДоплатыДоСреднего.Добавить(НачислениеСсылка);
		Иначе
			Если НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего) Тогда
				УчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			Иначе
				НеУчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем из полученных ссылок таблицу значений и помещаем ее во временную таблицу
	// ВТУчитываютсяПриДоплатеИзКоллектора.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление
	|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеИзКоллектора
	|ИЗ
	|	&УчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора";
	
	УчитываютсяПриДоплатеТаблица = Новый ТаблицаЗначений;
	УчитываютсяПриДоплатеТаблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(УчитываютсяПриДоплатеТаблица, УчитываютсяПриДоплатеДоСреднего, "Начисление");
	
	Запрос.УстановитьПараметр("УчитываютсяПриДоплатеИзКоллектора", УчитываютсяПриДоплатеТаблица);
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
	// 2. Если в коллекторе есть доплаты до среднего, дополняем начисления общего заработка начислениями из ИБ.
	Если ДоплатыДоСреднего.Количество() > 0 Тогда
		
		СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчитываютсяПриДоплатеДоСреднего.Ссылка
		|ИЗ
		|	ВТУчитываютсяПриДоплатеДоСреднего КАК УчитываютсяПриДоплатеДоСреднего
		|ГДЕ
		|	НЕ УчитываютсяПриДоплатеДоСреднего.Ссылка В
		|				(ВЫБРАТЬ
		|					УчитываютсяПриДоплатеИзКоллектора.Начисление
		|				ИЗ
		|					ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УчитываютсяПриДоплатеДоСреднего.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		// 3. В коллекторе у имеющихся доплат до среднего корректируем списки базовых начислений.
		Для Каждого ДоплатаДоСреднего Из ДоплатыДоСреднего Цикл
			ДоплатаОбъект = КоллекторНачислений[ДоплатаДоСреднего];
			// Проверим 
			// - нет ли в составе базовых этой доплаты таких начислений, которые нужно изъять
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаТаблицы Из ДоплатаОбъект.БазовыеВидыРасчета Цикл
				Если УчитываютсяПриДоплатеДоСреднего.Найти(СтрокаТаблицы.ВидРасчета) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			// - Все ли нужные начисления есть в составе ее базовых начислений.
			Для Каждого БазовоеНачисление Из УчитываютсяПриДоплатеДоСреднего Цикл
				Если ДоплатаОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
					ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Выявляем доплаты до среднего заработка в ИБ, 
	// в которые нужно внести изменения в связи с изменениями в начислениях коллектора.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.Ссылка КАК ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.ВидРасчета КАК БазовоеНачисление
	|ПОМЕСТИТЬ ВТБазаДоплатыДоСреднего
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.Ссылка.СпособРасчета = &СпособРасчетаДоплатыДоСреднего
	|	И НЕ БазаДоплатыДоСреднего.Ссылка В (&ДоплатыДоСреднегоКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ПОМЕСТИТЬ ВТСовпадающиеНачисления
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В
	|			(ВЫБРАТЬ
	|				УчитываютсяПриДоплатеИзКоллектора.Начисление
	|			ИЗ
	|				ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего КАК ДоплатаДоСреднего,
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление КАК БазовоеНачисление
	|ИЗ
	|	ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадающиеНачисления КАК СовпадающиеНачисления
	|		ПО (СовпадающиеНачисления.ДоплатаДоСреднего = БазаДоплатыДоСреднего.ДоплатаДоСреднего)
	|			И (СовпадающиеНачисления.БазовоеНачисление = УчитываютсяПриДоплатеИзКоллектора.Начисление)
	|ГДЕ
	|	СовпадающиеНачисления.БазовоеНачисление ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В(&НеУчитываютсяПриДоплатеИзКоллектора)"; 
	
	Запрос.УстановитьПараметр("НеУчитываютсяПриДоплатеИзКоллектора", НеУчитываютсяПриДоплатеДоСреднего);
	Запрос.УстановитьПараметр("ДоплатыДоСреднегоКоллектора", ДоплатыДоСреднего);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавляем недостающие начисления.
	ВыборкаДобавить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока ВыборкаДобавить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаДобавить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			// Помещаем начисление в коллектор.
			ДоплатаОбъект = ВыборкаДобавить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаДобавить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаДобавить.Следующий() Цикл
			ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = ВыборкаДобавить.БазовоеНачисление;
		КонецЦикла;
	КонецЦикла;
	
	// Удаляем избыточные начисления.
	ВыборкаУдалить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока ВыборкаУдалить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаУдалить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			ДоплатаОбъект = ВыборкаУдалить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаУдалить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаУдалить.Следующий() Цикл
			УдаляемыеСтроки = ДоплатаОбъект.БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", ВыборкаУдалить.БазовоеНачисление));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет нужно ли включать указанное начисление в базу доплаты до среднего заработка.
//
Функция НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Для Каждого СтрокаСреднегоЗаработка Из НачислениеОбъект.СреднийЗаработокОбщий Цикл
			Если СтрокаСреднегоЗаработка.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или  СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу с начислениями, учитываемыми при расчете доплаты до среднего заработка 
// в зависимости от установленного способа расчета доплаты.
//
Процедура СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать)
		|	И НачисленияСреднийЗаработокОбщий.Ссылка.СпособРасчета <> &СпособРасчетаДоплатыДоСреднего";
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаБольничного)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет значение перечисления ВидыДокументовНачисления по документу.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоДокументу(Документ) Экспорт
	Возврат ВидДокументаНачисленияПоМетаданнымДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Документ)));
КонецФункции

// Определяет значение перечисления ВидыДокументовНачисления по метаданным документа.
//
// Параметры:
//	МетаданныеДокумента 
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоМетаданнымДокумента(МетаданныеДокумента)
	
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыДокументовНачисления.ЗначенияПеречисления Цикл
		Если ЗначенияПеречисления.Имя = МетаданныеДокумента.Имя 
			Или ЗначенияПеречисления.Имя + "Списком" = МетаданныеДокумента.Имя Тогда
			Возврат Перечисления.ВидыДокументовНачисления[ЗначенияПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Определяет значение перечисления ВидыДокументовУдержания по документу.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовУдержания или Неопределено.
//
Функция ВидДокументаУдержанияПоДокументу(Документ) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыДокументовУдержания.ЗначенияПеречисления Цикл
		Если ЗначенияПеречисления.Имя = МетаданныеДокумента.Имя Тогда
			Возврат Перечисления.ВидыДокументовУдержания[ЗначенияПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Определяет признак "разовости" начисления за месяц.
//
Функция НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект) Экспорт
	
	ЕстьПоказателиУчетаВремени = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
		
	ЕстьПоказателиРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект, ЕстьПоказателиУчетаВремени, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели);
	
КонецФункции

// Определяет признак "разовости" удержания за месяц.
//
Функция УдержаниеВыполняетсяВЦеломЗаМесяц(УдержаниеОбъект) Экспорт
	
	ЕстьПоказателиРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		УдержаниеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
		
	ЕстьПоказательРасчетнаяБазаСтраховыеВзносы = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБазаСтраховыеВзносы");
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.УдержаниеВыполняетсяВЦеломЗаМесяц(УдержаниеОбъект, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели, ЕстьПоказательРасчетнаяБазаСтраховыеВзносы);
	
КонецФункции

// Определяется признак того, что расчет времени для этого начисления выполняется по часам.
//
Функция НачислениеРассчитываетсяПоЧасам(НачислениеОбъект) Экспорт
	
	Если Перечисления.ВидыРабочегоВремениСотрудников.НецелодневныеВидыРабочегоВремени().Найти(НачислениеОбъект.ВидВремени) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаПростоя Тогда
		// Если начисление рассчитывается не является нецелодневным (т.е. является внутрисменным), 
		// то простой исключение, для него всегда устанавливаем время в днях (из-за необходимости использовать показатель
		// НормаЧасов.
		Возврат Ложь;
	КонецЕсли;
	
	// Во всех остальных случаях действуем в зависимости от наличия почасовых показателей.
	Если РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
			НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремениВЧасах()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные функции и процедуры.

// Создает набор записей для регистратора по переданным метаданным.
Функция СоздатьНаборЗаписейРегистратора(Метаданные, Документ) Экспорт
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.ПолноеИмя());
	НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	Возврат НаборЗаписей;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Дополняет переданную коллекцию колонками
//		ТекущийАванс.
// Колонка ТекущийАванс заполняется только для записей перемещения и увольнения.
Процедура ДополнитьТекущимиДаннымиАвансов(ДанныеОПлановыхВыплатах, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ДанныеОПлановыхВыплатах.Колонки.Добавить("ТекущийАванс", Новый ОписаниеТипов("Число"));
	ДанныеОПлановыхВыплатах.Колонки.Добавить("ТекущийСпособРасчетаАванса", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаАванса"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ДанныеОПлановыхВыплатах);
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из ДанныеОПлановыхВыплатах Цикл
		// Список событий перемещения и увольнения для получения текущих графиков.
		Если Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение 
			Или Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока = СотрудникиДаты.Добавить();
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(Строка.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(Строка.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПлановыеАвансы.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ПлановыеАвансы.Период, ДЕНЬ) КАК Период,
	|	ПлановыеАвансы.СпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
	|	ПлановыеАвансы.Аванс КАК ТекущийАванс
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Сотрудник = Выборка.Сотрудник;
		СтруктураПоиска.ДатаСобытия = Выборка.Период;
		Строка = ДанныеОПлановыхВыплатах.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущийСпособРасчетаАванса, ТекущийАванс");
	КонецЦикла;
	
КонецПроцедуры

Функция УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ИмяТаблицы) Экспорт
	
	Если Не КонтролируемыеПоля.Свойство(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УсловияЗамены = Новый Структура;
	Для Каждого КлючИЗначение Из КонтролируемыеПоля[ИмяТаблицы] Цикл
		УсловияЗамены.Вставить(КлючИЗначение.Ключ, Ложь);
	КонецЦикла;
	
	Возврат УсловияЗамены;
	
КонецФункции

// Осуществляет поиск строк в КоллекцияСтрок, 
// в которых значение поля ИмяПоля входит в массив МассивЗначений.
//
Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	// Имя может быть передано как составное, например "Сотрудник.ФизическоеЛицо".
	// Это значит, что прежде нужно определить значения через ".", 
	// от значений в искомых полях, и искать затем уже именно по ним.
	ЧастиИмениПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если ЧастиИмениПоля.Количество() > 1 Тогда
		ЗначенияПервыйУровень = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ЧастиИмениПоля[0], Истина);
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияПервыйУровень, ЧастиИмениПоля[1]);
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетУсловиям = Истина;
		Если МассивЗначений <> Неопределено Тогда
			Если ЧастиИмениПоля.Количество() > 1 Тогда
				// Соответствие по имени поля через ".".
				СоответствуетУсловиям = МассивЗначений.Найти(СоответствиеЗначений[СтрокаКоллекции[ЧастиИмениПоля[0]]]) <> Неопределено;
			Иначе	
				// Соответствие по простому имени поля.
				СоответствуетУсловиям = МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция НастройкиРасчетаЗарплатыПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени", Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению);
	Если Не ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса") И Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ЗначенияПоУмолчанию.Вставить("ВыполнятьРасчетЗарплатыПоПодразделениям", Истина);
	КонецЕсли;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьИсполнительныеЛисты", Истина);
	ЗначенияПоУмолчанию.Вставить("ОплачиватьДлительныеКомандировкиПомесячно", Истина);
	ЗначенияПоУмолчанию.Вставить("СпособУдержанияИзлишнеНачисленныхОтпускных", Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ в кадровых документах и штатном расписании.

Процедура ДобавитьВКоллекцииюОписаниеОбъектаДляЗаполненияСовокупныхТарифныхСтавок(КоллекцияОбъектов, СсылкаНаОбъект, КоллекцияОбъекта) Экспорт
	
	Если КоллекцияОбъектов = Неопределено Тогда
		КоллекцияОбъектов = Новый Соответствие;
	КонецЕсли;
	
	КоллекцияОбъектов.Вставить(СсылкаНаОбъект, КоллекцияОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавкиСотрудниковКоллекции(КоллекцияОписанийОбъектов, СовокупныеТарифныеСтавки, ИмяРеквизитаСотрудник = "Сотрудник") Экспорт
	
	Для каждого ОписаниеОбъекта Из КоллекцияОписанийОбъектов Цикл
		
		СсылкаНаОбъект = ОписаниеОбъекта.Ключ;
		КоллекцияОбъекта = ОписаниеОбъекта.Значение;
		
		ДанныеОбъекта = СовокупныеТарифныеСтавки[СсылкаНаОбъект];
		Для каждого ОбъектКоллекции Из КоллекцияОбъекта Цикл
			
			Если ДанныеОбъекта <> Неопределено Тогда
				
				Сотрудник = ОбъектКоллекции[ИмяРеквизитаСотрудник];
				
				ОписаниеСтавки = ДанныеОбъекта.Получить(Сотрудник);
				Если ОписаниеСтавки <> Неопределено Тогда
					
					ОбъектКоллекции.СовокупнаяТарифнаяСтавка = ОписаниеСтавки.СовокупнаяТарифнаяСтавка;
					ОбъектКоллекции.ВидТарифнойСтавки = ОписаниеСтавки.ВидТарифнойСтавки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДвиженияНачислений, ТабличнаяЧастьНачисления, ИмяРеквизитаСотрудник = "") Экспорт
	
	Для каждого СтрокаДвиженияНачислений Из ДвиженияНачислений Цикл
		
		Если НЕ СтрокаДвиженияНачислений.Используется Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Начисление", СтрокаДвиженияНачислений.Начисление);
		Если НЕ ПустаяСтрока(ИмяРеквизитаСотрудник) Тогда
			СтруктураПоиска.Вставить(ИмяРеквизитаСотрудник, СтрокаДвиженияНачислений.Сотрудник);
		КонецЕсли; 
		
		СтрокиДокумента = ТабличнаяЧастьНачисления.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокаДвиженияНачислений.Размер = СтрокиДокумента[0].Размер;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавкиВДвиженияхЗагружаемогоДокумента(ДокументОбъект, ТабличнаЧастьССовокупнымиТарифнымиСтавками, ИмяРеквизитаСотрудник = "Сотрудник") Экспорт
	
	ВозвратныеДвижения = Новый Массив;
	
	ДвиженияЗначенияСовокупныхТарифныхСтавок = ДокументОбъект.Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников;
	
	Для каждого СтрокаДвижений Из ДвиженияЗначенияСовокупныхТарифныхСтавок Цикл
		
		Если ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ВозвратныеДвижения.Добавить(СтрокаДвижений);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(ИмяРеквизитаСотрудник, СтрокаДвижений.Сотрудник);
		СтрокиДокумента = ТабличнаЧастьССовокупнымиТарифнымиСтавками.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДокумента.Количество() > 0 Тогда
			
			СтрокаДокумента = СтрокиДокумента[0];
			
			СтрокаДвижений.Значение = СтрокаДокумента.СовокупнаяТарифнаяСтавка;
			СтрокаДвижений.ВидТарифнойСтавки = СтрокаДокумента.ВидТарифнойСтавки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьВозвратныеДвиженияСовокупныхТарифныхСтавок(ВозвратныеДвижения, ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьВозвратныеДвиженияСовокупныхТарифныхСтавок(ВозвратныеДвижения, ДокументОбъект)
	
	Если ВозвратныеДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для каждого СтрокаСВозвратнымДвижением Из ВозвратныеДвижения Цикл
		ЗаполнитьЗначенияСвойств(ИзмеренияДаты.Добавить(), СтрокаСВозвратнымДвижением);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументОбъект.Ссылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Период,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки
		|ИЗ
		|	ВТПлановыйФОТИтогиСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавокСотрудников";
	
	ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСВозвратнымДвижением Из ВозвратныеДвижения Цикл
		
		СтруктураПоиска = Новый Структура("Период,Сотрудник");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСВозвратнымДвижением);
		
		СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
			
			СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
			
			СтрокаСВозвратнымДвижением.ЗначениеПоОкончании = СтрокаПредыдущихЗначений.Значение;
			СтрокаСВозвратнымДвижением.ВидТарифнойСтавкиПоОкончании = СтрокаПредыдущихЗначений.ВидТарифнойСтавки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает рассчитывается ФОТ начисления автоматически или нет
//
// Параметры:
//		НачислениеОбъект - ПланВидовРасчета.Начисления - начисление (объект)
//
// Возвращаемое значение:
//		Булево - ИСТИНА, если ФОТ начисления рассчитывается автоматически, иначе ЛОЖЬ
//				ФОТ начисления рассчитывается автоматически если
//				- начисление постоянное,
//				- расчет базы за текущий период,
//				- в его формуле нет ни одного показателя, значение которого не подставляется при расчете ФОТ, 
//				то есть разовые показатели, не являющиеся показателями времени и расчетной базой
//
Функция ФОТРассчитываетсяАвтоматически(НачислениеОбъект) Экспорт
	
	ПостоянноеВыполнение = Новый Массив;
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете);
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете);
	
	Если Не НачислениеОбъект.ВключатьВФОТ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПостоянноеВыполнение.Найти(НачислениеОбъект.СпособВыполненияНачисления) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НачислениеОбъект.ТребуетсяРасчетБазы И НачислениеОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(НачислениеОбъект.Показатели, "Показатель", Истина);
	СпособыПрименения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Показатели, "СпособПримененияЗначений");
	
	ПоказателиЗаполняемыеПриРасчетеФОТ = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоказателиЗаполняемыеПриРасчетеФОТ, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	ЕстьПостоянныеПоказатели = Ложь;
	ЕстьРазовыеПоказатели = Ложь;
	
	Для Каждого Показатель Из Показатели Цикл
		Если СпособыПрименения[Показатель] = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
			Если ПоказателиЗаполняемыеПриРасчетеФОТ.Найти(Показатель) = Неопределено Тогда
				ЕстьРазовыеПоказатели = Истина;
			КонецЕсли;
		Иначе
			ЕстьПостоянныеПоказатели = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРазовыеПоказатели И ЕстьПостоянныеПоказатели Тогда
		Возврат Неопределено;
	ИначеЕсли ЕстьРазовыеПоказатели Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

// Возвращает массив ссылок на план видов расчета Начисления, которые
// участвуют в формировании ФОТ
//
Функция НачисленияВходящиеВСоставФОТ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КатегорииСдельнойОплатыТруда() Экспорт
	
	КатегорииНачислений = РасчетЗарплатыБазовый.КатегорииСдельнойОплатыТруда();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Функция КатегорииНачисленийКомпенсационныхВыплат() Экспорт
	
	КатегорииНачислений = РасчетЗарплатыБазовый.КатегорииНачисленийКомпенсационныхВыплат();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Функция НачисленияСЧасовойИлиДневнойТарифнойСтавкой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель
		|ПОМЕСТИТЬ ВТПоказателиЧасовыхИДневныхТарифныхСтавок
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЧасовыхИДневныхТарифныхСтавок КАК ПоказателиЧасовыхИДневныхТарифныхСтавок
		|		ПО НачисленияПоказатели.Показатель = ПоказателиЧасовыхИДневныхТарифныхСтавок.Показатель
		|ГДЕ
		|	НачисленияПоказатели.Ссылка.ФОТНеРедактируется
		|	И НачисленияПоказатели.Ссылка.ВключатьВФОТ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция НачисленияТарифнойСтавки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСПоказателямиТарифныхСтавок.Начисление
		|ИЗ
		|	ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияСПоказателямиТарифныхСтавок";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление");
	
КонецФункции

Процедура СоздатьВТНачисленияСПоказателямиТарифныхСтавок(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = ЗапросВТНачисленияСПоказателямиТарифныхСтавок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТНачисленияСПоказателямиТарифныхСтавок() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСоВсемиТарифнымиСтавками
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Ссылка.ЗачетНормыВремени
		|	И НачисленияПоказатели.Ссылка.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|	И НачисленияПоказатели.ЗапрашиватьПриВводе
		|	И НачисленияПоказатели.Показатель.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НачисленияСТарифнымиСтавками.Показатель.РеквизитДопУпорядочивания) КАК ПоказательРеквизитДопУпорядочивания,
		|	НачисленияСТарифнымиСтавками.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияСПорядкомПоказателей
		|ИЗ
		|	ВТНачисленияСоВсемиТарифнымиСтавками КАК НачисленияСТарифнымиСтавками
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСТарифнымиСтавками.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСТарифнымиСтавками.Начисление КАК Начисление,
		|	МАКСИМУМ(НачисленияСТарифнымиСтавками.Показатель) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателямиТарифныхСтавок
		|ИЗ
		|	ВТНачисленияСоВсемиТарифнымиСтавками КАК НачисленияСТарифнымиСтавками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПорядкомПоказателей КАК НачисленияСПорядкомПоказателей
		|		ПО НачисленияСТарифнымиСтавками.Начисление = НачисленияСПорядкомПоказателей.Начисление
		|			И НачисленияСТарифнымиСтавками.Показатель.РеквизитДопУпорядочивания = НачисленияСПорядкомПоказателей.ПоказательРеквизитДопУпорядочивания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСТарифнымиСтавками.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияСоВсемиТарифнымиСтавками
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияСПорядкомПоказателей";
	
	Возврат Запрос;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ начислений, зависящих от стажа.

Процедура СоздатьВТНачисленияЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНачисленияЗависящиеОтСтажа") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияЗависящиеОтСтажа
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисление";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(МенеджерВременныхТаблиц, ИмяВТОтборНачислений = "ВТОтборНачислений", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтборНачислений", ИмяВТОтборНачислений);
	ОписательТаблиц.Вставить("ИмяВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Возврат ОписательТаблиц;
	
КонецФункции

Процедура СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (ПериодыИзмененияСтажа.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Северный))
		|ГДЕ
		|	ВЫРАЗИТЬ(ОтборНачислений.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
	
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных);
	
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", РасчетЗарплаты.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("ПоказательСевернаяНадбавка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение,
		|	МАКСИМУМ(ПроцентСевернойНадбавкиПредыдущий.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.Период > ПроцентСевернойНадбавкиПредыдущий.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиПредыдущий.ПроцентСевернойНадбавки КАК ЗначениеПоказателяПредыдущее,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.ПериодПредыдущий = ПроцентСевернойНадбавкиПредыдущий.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	&НачислениеСевернаяНадбавка КАК Начисление,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	&ПоказательСевернаяНадбавка КАК Показатель,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя / ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя1,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими КАК ПроцентСевернойНадбавкиСотрудников
		|ГДЕ
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя <> ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудников";
		
	// merge	
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ОтборНачислений.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (НачисленияПоказатели.Показатель.ВидСтажа = ПериодыИзмененияСтажа.ВидСтажа)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
	
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	МАКСИМУМ(ЗначенияПоказателейПредыдущие.ДатаНачала) КАК ДатаНачалаПредыдущая
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущимиДатами
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачала > ЗначенияПоказателейПредыдущие.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателейПредыдущие.ЗначениеПоказателя КАК ЗначениеПоказателяПредыдущее,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущими
		|ИЗ
		|	ВТЗначенияПоказателейСПредыдущимиДатами КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачалаПредыдущая = ЗначенияПоказателейПредыдущие.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополняемыеНачисления.Сотрудник КАК Сотрудник,
		|	ДополняемыеНачисления.Начисление КАК Начисление,
		|	ЗначенияПоказателей.ДатаНачала КАК Период,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗначенияПоказателей.ЗначениеПоказателя / ЗначенияПоказателей.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийСтажевыхПоказателей
		|ИЗ
		|	ВТОтборНачислений КАК ДополняемыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ДополняемыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСПредыдущими КАК ЗначенияПоказателей
		|		ПО ДополняемыеНачисления.Сотрудник = ЗначенияПоказателей.Сотрудник
		|			И (НачисленияПоказатели.Показатель = ЗначенияПоказателей.Показатель)
		|ГДЕ
		|	ЗначенияПоказателей.ЗначениеПоказателя <> ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейСПредыдущимиДатами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейСПредыдущими";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	
	Запрос.Выполнить();
	
КонецПроцедуры


#Область ОбслуживаниеРасчетаПлановогоФОТ

Процедура ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюПлановогоФОТ");
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Проверка периода действия в коллекциях начислений и удержаний.

// Создает структуру используемую для проверки правильности заполнения периода действия.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ПараметрыПроверкиПериодаДействия() Экспорт
	
	ПараметрыПроверки = Новый Структура(
		"ПутьКОбъекту, 
		|Ссылка");
	
	ПараметрыПроверки.ПутьКОбъекту = "Объект";
	ПараметрыПроверки.Ссылка = Неопределено;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Создает структуру используемую для проверки правильности заполнения периода действия.
//						
//       ИмяРедактируемойТаблицы - Имя табличного поля формы, редактируемого в данный момент, используется при
//                                 подстановке значений из механизма контролируемых полей.
//
//       ИмяРеквизитаВидРасчета     - Строка. Имя свойства проверяемого объекта хранящего проверяемое начисление.
//
//       ИмяРеквизитаДатаНачала     - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату начала.
//
//       ИмяРеквизитаДатаОкончания  - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату окончания.
// 
//		 ОтменаРедактирования		- Признак того, что пользователь отказался от редактирования.
//
//		 Ссылка						- Ссылка на редактируемый объект.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ОписаниеКоллекцииДляПроверкиПериодаДействия(ИмяКоллекции, ПредставлениеКоллекции, ИмяРеквизитаВидРасчета = "Начисление", 
													ИмяРеквизитаДатаНачала = "ДатаНачала", ИмяРеквизитаДатаОкончания = "ДатаОкончания",
													ИмяРеквизитаНомерСтроки = "НомерСтроки") Экспорт
	ОписаниеКоллекции = Новый Структура;
	ОписаниеКоллекции.Вставить("ИмяКоллекции", 				ИмяКоллекции);
	ОписаниеКоллекции.Вставить("ПредставлениеКоллекции", 	ПредставлениеКоллекции);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаВидРасчета", 	ИмяРеквизитаВидРасчета);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаНачала", 	ИмяРеквизитаДатаНачала);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаОкончания",	ИмяРеквизитаДатаОкончания);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаНомерСтроки",	ИмяРеквизитаНомерСтроки);
	Возврат ОписаниеКоллекции
КонецФункции

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ) Экспорт
	
	ПериодДействияЗаполненПравильно = Истина;
	ПроверяемаяКоллекция = Объект[ОписаниеКоллекции.ИмяКоллекции];	
	ИнфоОВидахРасчета = ИнформацияОНесколькихВидахРасчета(ПроверяемаяКоллекция.ВыгрузитьКолонку(ОписаниеКоллекции.ИмяРеквизитаВидРасчета));
	
	Для Каждого Строка Из ПроверяемаяКоллекция Цикл
		// Получим значения для проверки.
		ВидРасчета = Строка[ОписаниеКоллекции.ИмяРеквизитаВидРасчета];
		ДатаНачала = Строка[ОписаниеКоллекции.ИмяРеквизитаДатаНачала];
		ДатаОкончания = Строка[ОписаниеКоллекции.ИмяРеквизитаДатаОкончания];
		
		Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2[%3].",
			ПараметрыПроверки.ПутьКОбъекту, 
			ОписаниеКоллекции.ИмяКоллекции,
			Строка[ОписаниеКоллекции.ИмяРеквизитаНомерСтроки] - 1);

		// Проверяем заполненность периода.
		ОписаниеНачисления = ИнфоОВидахРасчета.Получить(ВидРасчета);
		// Для начислений без интервала - проверяем заполненность месяца.
		Если ОписаниеНачисления.Свойство("ИспользованиеПериода") И ОписаниеНачисления.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать Тогда
			Если Не ЗначениеЗаполнено(Строка.ПериодДействия) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Месяц не заполнен в строке %1 таблицы ""%2"".'"), 
					Строка.НомерСтроки, 
					ОписаниеКоллекции.ПредставлениеКоллекции);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ПериодДействияСтрокой", , Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		// Для начислений с интервалом проверяем обе даты
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата начала не заполнена в строке %1 таблицы ""%2"".'"), 
				Строка.НомерСтроки, 
				ОписаниеКоллекции.ПредставлениеКоллекции);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ДатаНачала", , Отказ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата окончания не заполнена в строке %1 таблицы ""%2"".'"), 
				Строка.НомерСтроки, 
				ОписаниеКоллекции.ПредставлениеКоллекции);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ДатаОкончания", , Отказ);
			Продолжить;
		КонецЕсли;
		
		ОписаниеВидаРасчета = ИнфоОВидахРасчета.Получить(ВидРасчета);
		РезультатПроверки = РасчетЗарплатыРасширенныйКлиентСервер.ПериодНачисленияЗаполненПравильно(ОписаниеВидаРасчета, ДатаНачала, ДатаОкончания);
		Если РезультатПроверки.ПериодНачисленияЗаполненПравильно Тогда
			Продолжить;
		КонецЕсли;
			
		Если РезультатПроверки.ПериодБольшеМесяца Тогда
			ТекстСообщения = НСтр("ru = 'Период в строке %1 таблицы ""%2"" должен быть в пределах одного месяца'");	
		Иначе
			ТекстСообщения = НСтр("ru = 'Окончание периода в строке %1 таблицы ""%2"" должно быть позже его начала'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, 
			Строка.НомерСтроки, 
			ОписаниеКоллекции.ПредставлениеКоллекции);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + ОписаниеКоллекции.ИмяРеквизитаДатаОкончания, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодДействияВКоллекцияхНачислений(Объект, ПараметрыПроверки, ПроверяемыеКоллекции, Отказ) Экспорт
	
	Для Каждого ОписаниеКоллекции Из ПроверяемыеКоллекции Цикл
		ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ)
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию о каждом виде расчета из массива.
Функция ИнформацияОНесколькихВидахРасчета(МассивВидовРасчета) Экспорт
	СоответствиеВидовРасчетаИОписания = Новый Соответствие;
	Для каждого ВидРасчета Из МассивВидовРасчета Цикл
		  СоответствиеВидовРасчетаИОписания.Вставить(ВидРасчета, ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета));
	КонецЦикла;
	Возврат СоответствиеВидовРасчетаИОписания
КонецФункции	

Процедура ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(Объект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаспределения = Объект.РаспределениеПоТерриториямУсловиямТруда.Выгрузить();
	ДанныеРаспределения.Индексы.Добавить("ИдентификаторСтроки");
	
	МетаданныеДокумента = Объект.Метаданные();
	
	ИменаТаблицРаспределения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, ",", Истина, Истина);
	Для каждого ИмяТабличнойЧасти Из ИменаТаблицРаспределения Цикл
		
		ПредставлениеТабличнойЧасти = "";
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			СтрокиРаспределения = ДанныеРаспределения.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтрокиВидаРасчета));
			Если СтрокиРаспределения.Количество() > 0 Тогда
				
				РезультатРаспределения = 0;
				Для каждого ЭлементКоллекции Из СтрокиРаспределения Цикл
					РезультатРаспределения = РезультатРаспределения + ЭлементКоллекции.Результат;
				КонецЦикла;
				
				Если РезультатРаспределения <> СтрокаТабличнойЧасти.Результат Тогда
					
					Если ПустаяСтрока(ПредставлениеТабличнойЧасти) Тогда
						ПредставлениеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Синоним;
					КонецЕсли;
					
					ТекстСообщения = НСтр("ru = 'В строке %1 таблицы ""%2"" обнаружены незаполненные поля распределения по территория'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстСообщения,
						СтрокаТабличнойЧасти.НомерСтроки,
						ПредставлениеТабличнойЧасти);
					
					ИмяПоля = "Объект." + ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=") + "].ПредставлениеРаспределенияПоТерриториямУсловиямТруда";
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ИмяПоля, , Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальныйПоФизическимЛицам(ФизическиеЛица) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный.СоздатьНаборЗаписей();
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
	
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	
	КонецЦикла;
	
	РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ЗаполнитьИнтервальныйРегистр();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	ПланыВидовРасчета.Начисления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.6";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УдалитьПотерявшиеАктуальностьПоказатели";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.18";
	Обработчик.Процедура = "Справочники.ВидыДоговоровАвторскогоЗаказа.СоздатьПредопределенныеВидыДоговоров";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.19";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаОсновнойОтпуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.22";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УдалитьПотерявшиеАктуальностьПоказатели";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.10";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДополнитьРегистрЗначенийПериодическихПоказателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.11";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОписатьПрочиеДоходыИВыплатыБывшимСотрудникам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьСлужебныйИдентификаторПоказателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.18";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаСеверныйОтпуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.18";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВторичныеДанныеОграниченияДоступом";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВидНачисленияПособияВДокументахОтпускаПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВидНачисленияВыходногоПособияВДокументеУвольнение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.15";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УдалитьПроцентПочтовогоСбора";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.16";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УдалитьПотерявшиеАктуальностьПоказателиПрожиточногоМинимума";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.16";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УдалитьПотерявшийАктуальностьПоказательРасчетнойБазыВзносовВНПФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.5";
	Обработчик.Процедура = "Справочники.ВидыВыплатБывшимСотрудникам.СоздатьВидыВыплатБывшимСотрудникам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.41";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьПризнакУчастияУдержанийВРасчетеЗаПервуюПоловинуМесяца";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.51";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СкорректироватьНазначениеПоказателяМРОТ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьКраткийСоставШаблоновВводаИсходныхДанных";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.8";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СкорректироватьДатуДействуетДоДляДоплатыДоСреднегоЗаработка";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.10";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьБазовыйПериодВДокументахПремия";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.34";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьРеквизитНачисленияУтвержденыВИзмененияхУсловийОплатыОтпускаПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.4";
	Обработчик.Процедура = "Документы.НачислениеЗарплаты.ЗаполнитьПланируемуюДатуВыплатыЗарплатыПоДоговорам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.8";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьРегистрПрименениеДополнительныхПериодическихПоказателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.10";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьОтображениеВДокументахНачисленияПоказателейЗависящихОтДругихПоказателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОтменитьПредопределенностьПоказателейРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.6";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДополнитьБазуУдержанийПоИсполнительнымДокументамОплатойБольничныхЛистов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДозаполнитьДанныеПоДоговорамГПХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.9";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПризнакВремяВводитсяЗаМесяцШаблоновВводаДанныхДляРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.11";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВидТарифнойСтавкиВПоказателяхРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.12";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ИсправитьОрганизациюНаГоловнуюОрганизациюВПлановыхУдержаниях";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.15";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.22";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВторичныеЗаписиПлановыхНачисленийЗависящихОтСтажа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.24";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПоказателиСовокупнойТарифнойСтавкиПоУмолчанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.22";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПоказателямСпособВводаНепосредственноПриРасчете";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.27";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.29";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УдалитьВнутрисменныеОтклоненияИзСоставаВытесняющихВидовНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.3";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОтменитьПредопределенностьПоказателейРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.4";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВидОперацииПоЗарплате";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьСоставПоказателейСовокупнойТарифнойСтавки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.16";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПериодРегистрацииОтпускаПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.13";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПризнакВремяВЧасахДокументовРаботаВВыходныеИПраздничныеДни";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.21";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ИсправитьЗаполнениеДокументовВводаДанныхДляРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.11";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОтменитьПредопределенностьПоказателейРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.2";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПериодДействияУдержанийПоСотрудникам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьСпособПримененияЗначенийПоказателейЗависящихОтСтажа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.11";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОбновитьИспользованиеПоказателяПроцентДоплатыЗаДниНетрудоспособности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.11";
	Обработчик.Процедура = "РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.ЗаполнитьПроцентДоплатыЗаДниНетрудоспособности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.11";
	Обработчик.Процедура = "Документы.БольничныйЛист.ЗаполнитьПроцентДоплатыЗаДниНетрудоспособности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.16";
	Обработчик.Процедура = "РегистрыСведений.НачальныеОстаткиОтпусков.ЗаполнитьНачальныеОстаткиОтпусков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.23";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДокументыМатериальнаяПомощь";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.24";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПризнакРассчитываетсяНачисленийУдержаний";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.26";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПредопределенностьПоказателяСтоимостьДняЧаса";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.30";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ВосстановитьФормулуДляВыполненияУдержаний";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.3";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьНастройкуНачислятьРазовыеНачисленияОтдельнымДокументом";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.6";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДополнитьБазовыеНачисленияУдержанийПоИсполнительнымДокументамНатуральнымиДоходами";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.18";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДополнитьБазовыеНачисленияУдержанийПоИсполнительнымДокументамМатериальнойПомощью";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.3";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ИсправитьОрганизациюВРегистреРасчетаУдержания";
	                              	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.17";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьНастройкуИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.16";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УдалитьНеПредопределенныйПоказательСтоимостьДняЧаса";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.20";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ВосстановитьВРегистреРасчетаНачисленияБезИспользованияПериода";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.16";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьПризнакЗначениеРассчитываетсяАвтоматическиРазмераДоплатыЗаСовмещение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.25";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПризнакРассчитатьУдержанияВДокументахПремияИРазовоеНачисление";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.36";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДействиеСНачислениемИзмененияПлановыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.50";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДанныеГрафикаЗаписейНачисленийВЦеломЗаМесяц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.2";
	Обработчик.Процедура = "РегистрыСведений.ПлановыеНачисленияПоДоговорам.ЗаполнитьПланируемуюДатуВыплатыДляРазовыхДоговоров";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.7";
	Обработчик.Процедура = "Документы.ОтпускПоУходуЗаРебенком.ЗаполнитьПорядокВыплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.12";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.ЗаполнитьПорядокЭлементов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.112";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДокументыПризПодарок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.115";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СоздатьДополнительныйОтпускНаСанаторноКурортноеЛечение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.ВыполнитьПереименованиеПоказателейУчетаВремени";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.120";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.ОбновитьПоказательДоляНеполногоРабочегоВремени";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.129";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьСписочныеДокументыУдержаний";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.130";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДокументыПостоянноеУдержаниеВПользуТретьихЛиц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.139";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОбновитьПоказательПроцентНадбавкиЗаВредность";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.156";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДвиженияНачисленийДокументаДоходВНатуральнойФорме";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.171";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СоздатьПоказателиИНачисленияСуммированногоУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.6";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УстановитьТочностьПоказателяДоляНеполногоРабочегоВремени";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.25";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьНеобходимостьВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.56";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УдалитьНеИспользуемыеПоказателиИзДокументов";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.62";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПризнакиДублированияНачисленийДляВнутреннихСовместителейИПодработок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.65";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.73";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьСпособОплатыВДоговорахГПХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.76";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СоздатьПоказателиПоНастройкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка";
	Обработчик.Версия = "3.0.24.24";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.25";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьИспользованиеПараметровНаборовСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.30";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПредставлениеРаспределенияНачисленияЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.31";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьФизическоеЛицоВРегистреУсловияДоговораГПХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.38";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьРегистрРаспределениеПоТерриториямУсловиямТруда";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.40";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьИспользоватьВСовмещении";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.56";
	Обработчик.Процедура = "Документы.ИзменениеПлановыхНачислений.ОчиститьФильтрНачисленийВСуществующихДокументах";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.63";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПризнакПроведенВРегистреВремяРегистрацииДокументовПлановыхНачислений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.68";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьДатуДоходаИсчисленныхСтраховыхВзносов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.92";
	Обработчик.Процедура = "Документы.ИзменениеПлановыхНачислений.ПеренестиДатыИзмененияИзШапкиВСотрудников";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.100";
	Обработчик.Процедура = "РегистрыСведений.ПлановыеНачисленияПоДоговорам.ЗаполнитьФизическоеЛицо";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.101";
	Обработчик.Процедура = "РегистрыСведений.ПлановыйФОТ.ЗаполнитьГоловнуюОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.117";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ПеренестиЗначенияПоказателейСуммированногоУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.20";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПериодДействияВТаблицахНачисления";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("61a88cc1-1a0c-498f-9eaa-7f7da82dcf62");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поля «Период действия» в таблицах начислений документов расчета зарплаты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.32";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьГоловнуюОрганизациюПлановыхНачисленийИспр";
	                                  
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.34";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьИспользованиеПараметровНаборовСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.3";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПараметрыНабораСвойствСовмещение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.3";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьПараметрыНабораСвойствПодработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.10";
	Обработчик.Процедура = "Документы.ИзменениеПлановыхНачислений.УдалитьНезаполненныеПоказателиИПоказателиСНулевымЗначением";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.22";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПризнакФиксСторноВРегистреРасчетаНачисления";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("751789a9-c19c-4eb1-9c66-5d78828aef18");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака ФиксСторно в регистре расчета Начисления.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.12";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДатыНачисленийВДокументеПремия";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7650406-e6d6-4d3d-8c29-374faf2a5151");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение даты начислений в документе Премия.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.13";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПериодДействияВТаблицеНачисленияЗаПервуюПоловинуМесяца";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fa130134-045a-458f-8409-cab98eb12fdc");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поля «Период действия» в таблице документа «Начисление за первую половину месяца».'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.19";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДобавитьПоказательТарифПростояВДокументыНачисления";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("587102c7-aabd-4a36-af12-8ba941ad6154");
	Обработчик.Комментарий = НСтр("ru = 'Обновление показателей начислений простоя сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.29";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УстановитьТочностьПоказателейДневнойИЧасовойСтоимостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.39";
	Обработчик.Процедура = "Документы.ИзменениеПлановыхНачислений.ЗаполнитьИдентификаторыСтрокСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.39";
	Обработчик.Процедура = "Документы.НазначениеПлановогоНачисления.ЗаполнитьИдентификаторыСтрокСотрудников";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.397";
		Обработчик.Процедура = "РегистрыСведений.СтавкаРефинансированияЦБ.ЗаполнитьЗначенияСтавкиРефинансированияЦБ";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.2";
	Обработчик.Процедура = "Документы.ИзменениеМестРаботы.ЗаполнитьИдентификаторыСтрокСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72f80e3f-fac3-41c4-827c-980148f9248f");
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1025939d-3cad-4e81-8585-36ec409e68af");
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьГоловногоСотрудникаВРегистреРасчетаНачисления";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ""Основного сотрудника"" в записях регистра расчета ""Начисления"".
	| До завершения обработки рекомендуется воздержаться от расчета зарплаты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.6";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УстановитьТочностьПоказателейДневнойИЧасовойСтоимостей";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4fba48e9-0bb2-4c16-9695-f7e49a3bed73");


	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.38";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьПризнакУдерживаетсяВЦеломЗаМесяц";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a466246b-229d-4cfd-a415-b231aa4b13b6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака «Удерживается в целом за месяц».'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьФизическоеЛицоРазовыхПоказателейСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72b628bc-ce8b-4801-91b3-92d52dc3f715");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поля «Физическое лицо» в регистре значений разовых показателей сотрудников.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВторичныеДанныеПоказателейРасчетаЗарплаты";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3b8d1b76-82d0-4d0a-bb4f-f3c661984cbf");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных показателей расчета зарплаты.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьВторичныеДанныеВидовРасчета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c9d40fe-4fae-4f6a-bb99-133edc0dc1f3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных видов расчета начислений.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "ПлановыеНачисленияСотрудников.ОбновитьДанныеРегистраПлановгоФОТ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("db475787-726c-4fb2-9bbb-91ad26871e66");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.69";
	Обработчик.Процедура = "ПлановыеНачисленияСотрудников.ЗаполнитьРегистрСводныхДанныхПланвыхНачислений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51b08670-6cd9-4ea9-ab90-765efc5f0fa9");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.71";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.СкорректироватьПериодДействияПериодическихПоказателейОрганизацийПодразделений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ccd0af22-a391-44c8-83c9-f390b90e3e86");
	Обработчик.Комментарий = НСтр("ru = 'Исправления периода действия периодических показателей организаций и подразделений.'");
	                           
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.97";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДокументОснованиеУдержаниеДобровольныхСтраховыхВзносов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("11463395-7f3f-4798-99ac-dbf8d26bef54");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение основания в движениях документа Удержание добровольных страховых взносов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.98";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьДокументОснованиеИзменениеУдержанияДобровольныхСтраховыхВзносов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1947e758-db5b-43f9-8e82-ac5c999da8d0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение основания в движениях документа Удержание добровольных страховых взносов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.105";
	Обработчик.Процедура = "ПлановыеНачисленияСотрудников.УдалитьЗначенияПоказателейУчетаВремениИзРегистраЗначенийПоказателей";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9afa7ce-cfd9-4347-b19f-66942c5a5ba8");
	Обработчик.Комментарий = НСтр("ru = 'Удаляет показатели учета времени из регистра ""Значения периодических показателей сотрудников"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.176";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УточнитьОрганизациюРазовыхПоказателейПереработокСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d4a50ad2-43bf-4aec-8057-e016be7d8d63");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение значения поля «Организация» в регистре значений разовых показателей сотрудников для переработок.'");
	
КонецПроцедуры

// Параметр ПараметрыПланаВидовРасчета - см метод  ОписаниеПараметровПланаВидовРасчета.
//
Процедура СформироватьПланВидовРасчетаПоНастройкам(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь) Экспорт
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам(ПараметрыПланаВидовРасчета, НачальноеЗаполнение);
КонецПроцедуры

Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры

// Создает временную таблицу ВТПорядокПредопределенныхНачисленийУдержаний.
// Используется при первоначальном заполнении ИБ, для заполнения реквизита РеквизитДопУпорядочивания.
//	Поля
//		Ссылка - ссылка, ПланыВидовРасчета.Начисления, ПланыВидовРасчета.Удержания
//		Порядок - число
//		НачислениеУдержание - строка, "Начисление" или "Удержание".
// 
Процедура СоздатьВТПорядокПредопределенныхНачисленийУдержаний(МенеджерВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	КатегорииНачисленийИНеоплаченногоВремени.Порядок КАК Порядок,
	|	""Начисления"" КАК НачислениеУдержание
	|ПОМЕСТИТЬ ВТПорядокПредопределенныхНачисленийУдержаний
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииНачисленийИНеоплаченногоВремени КАК КатегорииНачисленийИНеоплаченногоВремени
	|		ПО Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииНачисленийИНеоплаченногоВремени.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка),
	|	0,
	|	""Удержания""
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьРегистрЗначенийПериодическихПоказателей() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПериодическихПоказателей.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателей
	|ГДЕ
	|	(ЗначенияПериодическихПоказателей.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ ЗначенияПериодическихПоказателей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателей.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателей.Период,
	|	Сотрудники.ФизическоеЛицо,
	|	ЗначенияПериодическихПоказателей.*
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = ЗначенияПериодическихПоказателей.Сотрудник)
	|ГДЕ
	|	ЗначенияПериодическихПоказателей.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПериодическихПоказателей.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписатьПрочиеДоходыИВыплатыБывшимСотрудникам() Экспорт

	ПрочиеДоходы = Новый Структура;
	ПрочиеДоходы.Вставить("АрендаТранспорта", НСтр("ru = 'Аренда транспорта'"));
	ПрочиеДоходы.Вставить("ПризыВЦеляхРекламы", НСтр("ru = 'Выдача призов, в целях рекламы товаров, работ и услуг'"));
	ПрочиеДоходы.Вставить("Подарки", НСтр("ru = 'Выдача подарков'"));
	ПрочиеДоходы.Вставить("ЛицензионныйДоговор", НСтр("ru = 'Доходы по лицензионным договорам'"));
	ПрочиеДоходы.Вставить("ОтчуждениеАвторскихПрав", НСтр("ru = 'Доходы, полученные от отчуждения авторских или иных смежных прав'"));
	ПрочиеДоходы.Вставить("ВознагражденияНаследникам", НСтр("ru = 'Вознаграждение, выплачиваемое наследникам (правопреемникам) авторов'"));
	
	ПрочиеДоходыНДФЛ = УчетНДФЛРасширенный.ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы);
	ПрочиеДоходыСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.ВидыДоходовСтраховыеВзносыПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы);

	СпрДоход = Справочники.ВидыПрочихДоходовФизическихЛиц;
	Для каждого ПрочийДоход Из ПрочиеДоходы Цикл
		
		ВидДоходаНДФЛ = ПрочиеДоходыНДФЛ[ПрочийДоход.Ключ];
		ВидДоходаСтраховыеВзносы = ПрочиеДоходыСтраховыеВзносы[ПрочийДоход.Ключ];
		Наименование = ПрочийДоход.Значение;
		Если Не ЗначениеЗаполнено(СпрДоход.НайтиПоРеквизиту("КодДоходаНДФЛ", ВидДоходаНДФЛ)) Тогда
			СпрОбъект = СпрДоход.СоздатьЭлемент();
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.КодДоходаНДФЛ = ВидДоходаНДФЛ;
			СпрОбъект.КодДоходаСтраховыеВзносы = ВидДоходаСтраховыеВзносы;
			СпрОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	ДоходыБывшихСотрудников = Новый Структура;
	ДоходыБывшихСотрудников.Вставить("МатериальнаяПомощьБывшимСотрудникам", НСтр("ru = 'Материальная помощь бывшим сотрудникам'"));
	ДоходыБывшихСотрудников.Вставить("ВозмещениеСтоимостиМедикаментов", НСтр("ru = 'Возмещение бывшим сотрудникам-пенсионерам, а также инвалидам стоимости медикаментов'"));
	
	ПрочиеДоходыНДФЛ = УчетНДФЛРасширенный.ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ДоходыБывшихСотрудников);
	ПрочиеДоходыСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.ВидыДоходовСтраховыеВзносыПрочихДоходовИВыплатБывшимСотрудникам(ДоходыБывшихСотрудников);
	
	СпрДоход = Справочники.ВидыВыплатБывшимСотрудникам;
	Для каждого ДоходБывшихСотрудников Из ДоходыБывшихСотрудников Цикл
		
		ВидДоходаНДФЛ = ПрочиеДоходыНДФЛ[ДоходБывшихСотрудников.Ключ];
		ВидДоходаСтраховыеВзносы = ПрочиеДоходыСтраховыеВзносы[ДоходБывшихСотрудников.Ключ];
		Наименование = ДоходБывшихСотрудников.Значение;
		Если Не ЗначениеЗаполнено(СпрДоход.НайтиПоРеквизиту("КодДоходаНДФЛ", ВидДоходаНДФЛ)) Тогда
			СпрОбъект = СпрДоход.СоздатьЭлемент();
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.КодДоходаНДФЛ = ВидДоходаНДФЛ;
			СпрОбъект.КодДоходаСтраховыеВзносы = ВидДоходаСтраховыеВзносы;
			СпрОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСлужебныйИдентификаторПоказателей() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка КАК Ссылка,
	|	ПоказателиРасчетаЗарплаты.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательРасчетаЗарплаты = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательРасчетаЗарплаты.ИдентификаторСлужебный = ВРег(Выборка.Идентификатор);
		ПоказательРасчетаЗарплаты.ОбменДанными.Загрузка = Истина;
		ПоказательРасчетаЗарплаты.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет поля, необходимые для ограничения доступом в существующих регистрах.
//
Процедура ЗаполнитьВторичныеДанныеОграниченияДоступом() Экспорт
	
	// ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
	|ГДЕ
	|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияРазовыхПоказателей.Регистратор КАК Регистратор,
	|	ЗначенияРазовыхПоказателей.НомерСтроки,
	|	ЗначенияРазовыхПоказателей.Активность,
	|	ЗначенияРазовыхПоказателей.ПериодДействия,
	|	ЗначенияРазовыхПоказателей.Сотрудник,
	|	ЗначенияРазовыхПоказателей.Показатель,
	|	ЗначенияРазовыхПоказателей.Сотрудник.ГоловнаяОрганизация КАК Организация,
	|	ЗначенияРазовыхПоказателей.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ЗначенияРазовыхПоказателей.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияОперативныхПоказателей.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателей
	|ГДЕ
	|	(ЗначенияОперативныхПоказателей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ЗначенияОперативныхПоказателей.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияОперативныхПоказателей.Период,
	|	ЗначенияОперативныхПоказателей.Регистратор КАК Регистратор,
	|	ЗначенияОперативныхПоказателей.НомерСтроки,
	|	ЗначенияОперативныхПоказателей.Активность,
	|	ЗначенияОперативныхПоказателей.Сотрудник,
	|	ЗначенияОперативныхПоказателей.Показатель,
	|	ЗначенияОперативныхПоказателей.Сотрудник.ГоловнаяОрганизация КАК Организация,
	|	ЗначенияОперативныхПоказателей.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗначенияОперативныхПоказателей.Значение
	|ИЗ
	|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ЗначенияОперативныхПоказателей.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет добавленные реквизиты документа для выбора вида расчета пособия.
//
Процедура ЗаполнитьВидНачисленияПособияВДокументахОтпускаПоУходуЗаРебенком() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ПлановыеНачисленияДоПолутораЛет.Начисление КАК ПособиеДоПолутораЛет,
	|	ПлановыеНачисленияДоТрехЛет.Начисление КАК ПособиеДоТрехЛет
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияДоПолутораЛет
	|		ПО (ПлановыеНачисленияДоПолутораЛет.Регистратор = ОтпускПоУходуЗаРебенком.Ссылка)
	|			И (ПлановыеНачисленияДоПолутораЛет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияДоТрехЛет
	|		ПО (ПлановыеНачисленияДоТрехЛет.Регистратор = ОтпускПоУходуЗаРебенком.Ссылка)
	|			И (ПлановыеНачисленияДоТрехЛет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
	|ГДЕ
	|	(ПлановыеНачисленияДоПолутораЛет.Начисление <> ОтпускПоУходуЗаРебенком.ПособиеДоПолутораЛет
	|			ИЛИ ПлановыеНачисленияДоТрехЛет.Начисление <> ОтпускПоУходуЗаРебенком.ПособиеДоТрехЛет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзменениеУсловийОтпуска.Ссылка,
	|	ПлановыеНачисленияДоПолутораЛет.Начисление,
	|	ПлановыеНачисленияДоТрехЛет.Начисление
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияДоПолутораЛет
	|		ПО (ПлановыеНачисленияДоПолутораЛет.Регистратор = ИзменениеУсловийОтпуска.Ссылка)
	|			И (ПлановыеНачисленияДоПолутораЛет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет))
	|			И (ПлановыеНачисленияДоПолутораЛет.Используется)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияДоТрехЛет
	|		ПО (ПлановыеНачисленияДоТрехЛет.Регистратор = ИзменениеУсловийОтпуска.Ссылка)
	|			И (ПлановыеНачисленияДоТрехЛет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
	|			И (ПлановыеНачисленияДоТрехЛет.Используется)
	|ГДЕ
	|	(ПлановыеНачисленияДоПолутораЛет.Начисление <> ИзменениеУсловийОтпуска.ПособиеДоПолутораЛет
	|			ИЛИ ПлановыеНачисленияДоТрехЛет.Начисление <> ИзменениеУсловийОтпуска.ПособиеДоТрехЛет)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет добавленные реквизиты документа для выбора вида расчета выходного пособия.
//
Процедура ЗаполнитьВидНачисленияВыходногоПособияВДокументеУвольнение() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Увольнение.Ссылка,
	|	РегистрРасчетаНачисления.ВидРасчета КАК ВыходноеПособие
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрРасчетаНачисления
	|		ПО (РегистрРасчетаНачисления.Регистратор = Увольнение.Ссылка)
	|			И (РегистрРасчетаНачисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие))
	|			И Увольнение.ВыходноеПособие <> РегистрРасчетаНачисления.ВидРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// В расчете за первую половину месяца (и межрасчетах) должны участвовать все удержания, 
// которые не используют расчетную базу и не вводятся по значению показателя.
//
Процедура УточнитьПризнакУчастияУдержанийВРасчетеЗаПервуюПоловинуМесяца() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ Удержания.ТребуетсяРасчетБазы
	|				ИЛИ Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчаствуетВРасчетеПервойПоловиныМесяца
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.УчаствуетВРасчетеПервойПоловиныМесяца <> ВЫБОР
	|			КОГДА НЕ Удержания.ТребуетсяРасчетБазы
	|					ИЛИ Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдержаниеОбъект.УчаствуетВРасчетеПервойПоловиныМесяца = Выборка.УчаствуетВРасчетеПервойПоловиныМесяца;
		УдержаниеОбъект.ОбменДанными.Загрузка = Истина;
		УдержаниеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьНазначениеПоказателяМРОТ() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Идентификатор = ""МРОТ""
	|	И ПоказателиРасчетаЗарплаты.НазначениеПоказателя <> ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательМРОТ = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательМРОТ.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации;
		ПоказательМРОТ.ОбменДанными.Загрузка = Истина;
		ПоказательМРОТ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКраткийСоставШаблоновВводаИсходныхДанных() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Показатели.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Ссылка.КраткийСостав = """"
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВидыВремени.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВидыВремени КАК ВидыВремени
	               |ГДЕ
	               |	ВидыВремени.Ссылка.КраткийСостав = """"
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВидыРабот.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВидыРабот КАК ВидыРабот
	               |ГДЕ
	               |	ВидыРабот.Ссылка.КраткийСостав = """"";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	МаксимальнаяДлинаСтроки = 50;
	
	Пока Выборка.Следующий() Цикл 
		
		ШаблонВводаДанныхОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		КраткийСостав = "";
		
		МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ШаблонВводаДанныхОбъект.Показатели, "Показатель", Истина);
		ИменаПоказателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПоказателей, "Наименование, КраткоеНаименование");
		Для Каждого Показатель Из МассивПоказателей Цикл
			Если Не ПустаяСтрока(КраткийСостав) Тогда
				КраткийСостав = КраткийСостав + ", ";
			КонецЕсли;
			ИмяПоказателя = ИменаПоказателей[Показатель];
			Если ИмяПоказателя <> Неопределено Тогда 
				КраткийСостав = КраткийСостав + ?(ЗначениеЗаполнено(ИмяПоказателя.КраткоеНаименование), ИмяПоказателя.КраткоеНаименование, ИмяПоказателя.Наименование);
			КонецЕсли;
		КонецЦикла;
		
		МассивВидовВремени = ОбщегоНазначения.ВыгрузитьКолонку(ШаблонВводаДанныхОбъект.ВидыВремени, "ВидВремени", Истина);
		ИменаВидовВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовВремени, "Наименование");
		Для Каждого ВидВремени Из МассивВидовВремени Цикл
			Если Не ПустаяСтрока(КраткийСостав) Тогда
				КраткийСостав = КраткийСостав + ", ";
			КонецЕсли;
			КраткийСостав = КраткийСостав + ИменаВидовВремени[ВидВремени];
		КонецЦикла;
		
		МассивВидовРабот = ОбщегоНазначения.ВыгрузитьКолонку(ШаблонВводаДанныхОбъект.ВидыРабот, "ВидРабот", Истина);
		ИменаВидовРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовРабот, "Наименование");
		Для Каждого ВидРабот Из МассивВидовРабот Цикл
			Если Не ПустаяСтрока(КраткийСостав) Тогда
				КраткийСостав = КраткийСостав + ", ";
			КонецЕсли;
			КраткийСостав = КраткийСостав + ИменаВидовРабот[ВидРабот];
		КонецЦикла;
		
		Если СтрДлина(КраткийСостав) > МаксимальнаяДлинаСтроки Тогда
			КраткийСостав = Лев(КраткийСостав, МаксимальнаяДлинаСтроки - 3) + "...";
		КонецЕсли;
		
		Если Не ПустаяСтрока(КраткийСостав) Тогда
			ШаблонВводаДанныхОбъект.КраткийСостав = КраткийСостав;
			ШаблонВводаДанныхОбъект.ОбменДанными.Загрузка = Истина;
			ШаблонВводаДанныхОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет корректировку ранее ошибочно заполняемой даты ДействуетДо в регистре плановых начислений.
//
Процедура СкорректироватьДатуДействуетДоДляДоплатыДоСреднегоЗаработка() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриказНаДоплатуДоСреднегоЗаработка КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = Начисления.Регистратор)
	|			И (ВЫБОР
	|				КОГДА ТаблицаДокумента.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДатаОкончания, ДЕНЬ, 1)
	|				ИНАЧЕ ТаблицаДокумента.ДатаОкончания
	|			КОНЕЦ <> Начисления.ДействуетДо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ТаблицаДокумента.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	Начисления.Регистратор,
	|	Начисления.*
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = Начисления.Регистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриказНаДоплатуДоСреднегоЗаработка КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = Регистраторы.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполнить реквизиты ДатаНачалаБазовогоПериода и ДатаОкончанияБазовогоПериода в документах Премия.
//
Процедура ЗаполнитьБазовыйПериодВДокументахПремия() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Премия.Ссылка,
	|	Премия.ДатаНачала КАК ДатаНачалаБазовогоПериода,
	|	Премия.ДатаОкончания КАК ДатаОкончанияБазовогоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Премия.Ссылка КАК Ссылка,
	|		Премия.ВидПремии КАК ВидПремии,
	|		Премия.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
	|		Премия.ДатаОкончанияБазовогоПериода КАК ДатаОкончанияБазовогоПериода,
	|		ВЫБОР
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), МЕСЯЦ, -1)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|				ТОГДА НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, КВАРТАЛ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, КВАРТАЛ), КВАРТАЛ, -1)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|				ТОГДА НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, ГОД)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, ГОД), ГОД, -1)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), МЕСЯЦ, -Начисление.КоличествоМесяцевБазовогоПериода - Начисление.СдвигБазовогоПериода + 1)
	|		КОНЕЦ КАК ДатаНачала,
	|		ВЫБОР
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|				ТОГДА КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), МЕСЯЦ, -1), МЕСЯЦ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|				ТОГДА КОНЕЦПЕРИОДА(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), КВАРТАЛ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), КВАРТАЛ, -1), КВАРТАЛ)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|				ТОГДА КОНЕЦПЕРИОДА(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), ГОД)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), ГОД, -1), ГОД)
	|			КОГДА Начисление.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|				ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Премия.ПериодРегистрации, МЕСЯЦ), МЕСЯЦ, -Начисление.СдвигБазовогоПериода), МЕСЯЦ)
	|		КОНЕЦ КАК ДатаОкончания
	|	ИЗ
	|		Документ.Премия КАК Премия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
	|			ПО (Начисление.Ссылка = Премия.ВидПремии)
	|				И (Начисление.ТребуетсяРасчетБазы)
	|				И (НЕ Премия.ФиксБазовыйПериод)) КАК Премия
	|ГДЕ
	|	(Премия.ДатаНачалаБазовогоПериода <> Премия.ДатаНачала
	|			ИЛИ Премия.ДатаОкончанияБазовогоПериода <> Премия.ДатаОкончания)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитНачисленияУтвержденыВИзмененияхУсловийОплатыОтпускаПоУходуЗаРебенком() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка
	               |ИЗ
	               |	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
	               |ГДЕ
	               |	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.НачисленияУтверждены = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.НачисленияУтверждены = Истина;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрПрименениеДополнительныхПериодическихПоказателей() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПриемНаРаботуПоказатели.Ссылка
	               |ПОМЕСТИТЬ ВТРегистраторы
	               |ИЗ
	               |	Документ.ПриемНаРаботу.Показатели КАК ПриемНаРаботуПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников
	               |		ПО ПриемНаРаботуПоказатели.Ссылка = ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
	               |ГДЕ
	               |	ПриемНаРаботуПоказатели.Ссылка.Проведен
	               |	И ПриемНаРаботуПоказатели.Ссылка.НачисленияУтверждены
	               |	И ПриемНаРаботуПоказатели.ИдентификаторСтрокиВидаРасчета = 0
	               |	И ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриемНаРаботуПоказатели.Ссылка КАК Регистратор,
	               |	ПриемНаРаботуПоказатели.Ссылка.ДатаПриема КАК Период,
	               |	ПриемНаРаботуПоказатели.Ссылка.Организация КАК Организация,
	               |	ПриемНаРаботуПоказатели.Ссылка.Сотрудник КАК Сотрудник,
	               |	ПриемНаРаботуПоказатели.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПриемНаРаботуПоказатели.Показатель КАК Показатель,
	               |	ИСТИНА КАК Применение,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	               |ИЗ
	               |	ВТРегистраторы КАК ВТРегистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Показатели КАК ПриемНаРаботуПоказатели
	               |		ПО ВТРегистраторы.Ссылка = ПриемНаРаботуПоказатели.Ссылка
	               |ГДЕ
	               |	ПриемНаРаботуПоказатели.ИдентификаторСтрокиВидаРасчета = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистратор";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КадровыйПереводПоказатели.Ссылка
	               |ПОМЕСТИТЬ ВТРегистраторы
	               |ИЗ
	               |	Документ.КадровыйПеревод.Показатели КАК КадровыйПереводПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников
	               |		ПО КадровыйПереводПоказатели.Ссылка = ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
	               |ГДЕ
	               |	КадровыйПереводПоказатели.Ссылка.Проведен
	               |	И КадровыйПереводПоказатели.Ссылка.НачисленияУтверждены
	               |	И КадровыйПереводПоказатели.ИдентификаторСтрокиВидаРасчета = 0
	               |	И ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадровыйПереводПоказатели.Ссылка КАК Регистратор,
	               |	КадровыйПереводПоказатели.Ссылка.ДатаНачала КАК Период,
	               |	КадровыйПереводПоказатели.Ссылка.Организация КАК Организация,
	               |	КадровыйПереводПоказатели.Ссылка.Сотрудник КАК Сотрудник,
	               |	КадровыйПереводПоказатели.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадровыйПереводПоказатели.Показатель КАК Показатель,
	               |	ВЫБОР
	               |		КОГДА КадровыйПереводПоказатели.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДОБАВИТЬКДАТЕ(КадровыйПереводПоказатели.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	               |		ИНАЧЕ КадровыйПереводПоказатели.Ссылка.ДатаОкончания
	               |	КОНЕЦ КАК ДействуетДо,
	               |	ВЫБОР
	               |		КОГДА КадровыйПереводПоказатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Применение
	               |ИЗ
	               |	ВТРегистраторы КАК ВТРегистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Показатели КАК КадровыйПереводПоказатели
	               |		ПО ВТРегистраторы.Ссылка = КадровыйПереводПоказатели.Ссылка
	               |ГДЕ
	               |	КадровыйПереводПоказатели.ИдентификаторСтрокиВидаРасчета = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистратор";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ПрименениеДополнительныхПоказателей = НаборЗаписей.Выгрузить().СкопироватьКолонки("Период,Организация,Сотрудник,ФизическоеЛицо,Показатель,ДействуетДо,Применение");  
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(ПрименениеДополнительныхПоказателей.Добавить(), Выборка);
		КонецЦикла;
		ПрименениеДополнительныхПоказателей.Колонки.Период.Имя = "ДатаСобытия";
		СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(Новый Структура("ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников", НаборЗаписей), ПрименениеДополнительныхПоказателей);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтображениеВДокументахНачисленияПоказателейЗависящихОтДругихПоказателей() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя)
	               |	И ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Показатель = Выборка.Ссылка.ПолучитьОбъект();
		Показатель.ОтображатьВДокументахНачисления = Ложь;
		Показатель.ОбменДанными.Загрузка = Истина;
		Показатель.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьПредопределенностьПоказателейРасчетаЗарплаты() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных <> """"";
	
	ИменаПредопределенныхПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.ИменаПредопределенныхПоказателей();
	
	// Из-за особенностей работы 8.3.3 дополняем текст запроса.
	Для Каждого ИмяПоказателя Из ИменаПредопределенныхПоказателей Цикл
		Запрос.Текст = Запрос.Текст + " И ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных <> """ + ИмяПоказателя + """";
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Показатель = Выборка.Ссылка.ПолучитьОбъект();
		Показатель.ОбменДанными.Загрузка = Истина;
		Показатель.ИмяПредопределенныхДанных = "";
		Показатель.ПометкаУдаления = Ложь;
		Показатель.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Добавляет начисления категории оплаты больничного листа в базу удержаний по исполнительным документам.
//
Процедура ДополнитьБазуУдержанийПоИсполнительнымДокументамОплатойБольничныхЛистов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Ссылка
	|ПОМЕСТИТЬ ВТУдержанияПоИсполнительнымДокументам
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияПоИсполнительнымДокументам.Ссылка,
	|	Больничные.Ссылка КАК БазовоеНачисление
	|ИЗ
	|	ВТБольничные КАК Больничные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияПоИсполнительнымДокументам КАК УдержанияПоИсполнительнымДокументам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = УдержанияПоИсполнительнымДокументам.Ссылка)
	|			И (БазовыеНачисления.ВидРасчета = Больничные.Ссылка)
	|ГДЕ
	|	БазовыеНачисления.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдержанияПоИсполнительнымДокументам.Ссылка";
	
	ПакетВидовРасчета = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			УдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = Выборка.БазовоеНачисление;
		КонецЦикла;
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, УдержаниеОбъект);
	КонецЦикла;
	
	ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ДозаполнитьДанныеПоДоговорамГПХ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорАвторскогоЗаказа.Ссылка,
		|	НАЧАЛОПЕРИОДА(ДоговорАвторскогоЗаказа.ДатаОкончания, МЕСЯЦ) КАК МесяцНачисления
		|ИЗ
		|	Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
		|ГДЕ
		|	ДоговорАвторскогоЗаказа.МесяцНачисления = ДАТАВРЕМЯ(1, 1, 1)
		|	И ДоговорАвторскогоЗаказа.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ОднократноВКонцеСрока)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорРаботыУслуги.Ссылка,
		|	НАЧАЛОПЕРИОДА(ДоговорРаботыУслуги.ДатаОкончания, МЕСЯЦ)
		|ИЗ
		|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
		|ГДЕ
		|	ДоговорРаботыУслуги.МесяцНачисления = ДАТАВРЕМЯ(1, 1, 1)
		|	И ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ОднократноВКонцеСрока)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Договор = Выборка.Ссылка.ПолучитьОбъект();
			Договор.МесяцНачисления = Выборка.МесяцНачисления;
			Договор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Договор.ОбменДанными.Загрузка = Истина;
			Договор.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисленияПоДоговорам.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыКОбновлению
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|ГДЕ
		|	(ПлановыеНачисленияПоДоговорам.Договор = НЕОПРЕДЕЛЕНО
		|			ИЛИ ПлановыеНачисленияПоДоговорам.Регистратор ССЫЛКА Документ.АктПриемкиВыполненныхРаботОказанныхУслуг
		|				И ПлановыеНачисленияПоДоговорам.Регистратор <> ПлановыеНачисленияПоДоговорам.ДоговорАкт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистраторыКОбновлению.Регистратор
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияПоДоговорам.Договор = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА ПлановыеНачисленияПоДоговорам.ДоговорАкт ССЫЛКА Документ.АктПриемкиВыполненныхРаботОказанныхУслуг
		|						ТОГДА ПлановыеНачисленияПоДоговорам.ДоговорАкт.Договор
		|					ИНАЧЕ ПлановыеНачисленияПоДоговорам.ДоговорАкт
		|				КОНЕЦ
		|		ИНАЧЕ ПлановыеНачисленияПоДоговорам.Договор
		|	КОНЕЦ КАК Договор,
		|	ПлановыеНачисленияПоДоговорам.МесяцНачисления,
		|	ПлановыеНачисленияПоДоговорам.Организация,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияПоДоговорам.Регистратор ССЫЛКА Документ.АктПриемкиВыполненныхРаботОказанныхУслуг
		|			ТОГДА ПлановыеНачисленияПоДоговорам.Регистратор
		|		ИНАЧЕ ПлановыеНачисленияПоДоговорам.ДоговорАкт
		|	КОНЕЦ КАК ДоговорАкт,
		|	ПлановыеНачисленияПоДоговорам.КодДохода,
		|	ПлановыеНачисленияПоДоговорам.КодВычета,
		|	ПлановыеНачисленияПоДоговорам.КодДоходаСтраховыеВзносы,
		|	ПлановыеНачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете,
		|	ПлановыеНачисленияПоДоговорам.ОтношениеКЕНВД,
		|	ПлановыеНачисленияПоДоговорам.Подразделение,
		|	ПлановыеНачисленияПоДоговорам.Сумма,
		|	ПлановыеНачисленияПоДоговорам.СуммаВычета,
		|	ПлановыеНачисленияПоДоговорам.СуммаЕНВД,
		|	ПлановыеНачисленияПоДоговорам.ДатаНачала,
		|	ПлановыеНачисленияПоДоговорам.ДатаОкончания,
		|	ПлановыеНачисленияПоДоговорам.ЗаключенСоСтудентомРаботающимВСтудотряде,
		|	ПлановыеНачисленияПоДоговорам.СтатьяФинансирования,
		|	ПлановыеНачисленияПоДоговорам.СтатьяРасходов,
		|	ПлановыеНачисленияПоДоговорам.Регистратор,
		|	ПлановыеНачисленияПоДоговорам.НомерСтроки
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению
		|		ПО ПлановыеНачисленияПоДоговорам.Регистратор = РегистраторыКОбновлению.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлановыеНачисленияПоДоговорам.Регистратор,
		|	ПлановыеНачисленияПоДоговорам.НомерСтроки";	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Набор = РегистрыСведений.ПлановыеНачисленияПоДоговорам.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			КонецЦикла; 
			
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПризнакВремяВводитсяЗаМесяцШаблоновВводаДанныхДляРасчетаЗарплаты() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка,
	|	ИСТИНА КАК ВремяВводитсяЗаМесяц
	|ИЗ
	|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
	|ГДЕ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВремяВводитсяСводно
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВремяВводитсяЗаМесяц");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидДокументОбъект, Выборка);
		ВидДокументОбъект.ОбменДанными.Загрузка = Истина;
		ВидДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидТарифнойСтавкиВПоказателяхРасчетаЗарплаты() Экспорт 
	
	МассивПоказателей = Новый Массив;
	
	ПоказательОклад = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.Оклад");
	ПоказательТарифнаяСтавкаДневная = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная");
	ПоказательТарифнаяСтавкаЧасовая = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая");
	
	МассивПоказателей.Добавить(ПоказательОклад);
	МассивПоказателей.Добавить(ПоказательТарифнаяСтавкаДневная);
	МассивПоказателей.Добавить(ПоказательТарифнаяСтавкаЧасовая);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
	               |	И ПоказателиРасчетаЗарплаты.Ссылка В(&МассивПоказателей)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Показатель = Выборка.Ссылка.ПолучитьОбъект();
		Показатель.ОбменДанными.Загрузка = Истина;
		
		Если Выборка.Ссылка = ПоказательОклад Тогда 
			Показатель.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
		ИначеЕсли Выборка.Ссылка = ПоказательТарифнаяСтавкаДневная Тогда
			Показатель.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка;
		ИначеЕсли Выборка.Ссылка = ПоказательТарифнаяСтавкаЧасовая Тогда
			Показатель.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка;
		КонецЕсли;
		
		Показатель.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьОрганизациюНаГоловнуюОрганизациюВПлановыхУдержаниях() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Организация.ГоловнаяОрганизация <> ПлановыеУдержания.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.Регистратор КАК Регистратор,
	|	ПлановыеУдержания.НомерСтроки,
	|	ПлановыеУдержания.Активность,
	|	ПлановыеУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание,
	|	ПлановыеУдержания.ДокументОснование,
	|	ПлановыеУдержания.Используется,
	|	ПлановыеУдержания.ДействуетДо,
	|	ПлановыеУдержания.ИспользуетсяПоОкончании
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок() Экспорт 
	
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок();
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеЗаписиПлановыхНачисленийЗависящихОтСтажа() Экспорт
	// merge	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлановыйФОТ.Период
		|ИЗ
		|	РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СоздатьВТНачисленияЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаНачала,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияНачислений,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияГрафика,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияПоказателей,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияКоличестваСтавок,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЛОЖЬ КАК ИзменениеКоличестваСтавок,
		|	ЛОЖЬ КАК ИзменениеГрафика,
		|	ЛОЖЬ КАК ИзменениеЗначенийПоказателей,
		|	ЛОЖЬ КАК ИзменениеНачислений,
		|	ЛОЖЬ КАК ИзменениеДанныхГрафика,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхГрафика,
		|	ИСТИНА КАК ИзменениеДанныхСтажа,
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаИзмененияДанныхСтажа,
		|	ЛОЖЬ КАК УдалениеДанных
		|ПОМЕСТИТЬ ВТПериодыОбновленияВторичныхДанных
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияЗависящиеОтСтажа КАК НачисленияЗависящиеОтСтажа
		|		ПО ПлановыеНачисления.Начисление = НачисленияЗависящиеОтСтажа.Начисление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник";
			
		Запрос.Выполнить();
		
		ПлановыеНачисленияСотрудников.СформироватьДвиженияВторичныхДанных(Запрос.МенеджерВременныхТаблиц);
					
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиСовокупнойТарифнойСтавкиПоУмолчанию() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |		ПО ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	               |ГДЕ
	               |	НЕ ПоказателиРасчетаЗарплаты.НеИспользуется
	               |	И НЕ ПоказателиРасчетаЗарплаты.ПометкаУдаления
	               |	И ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель ЕСТЬ NULL 
	               |	И ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка))";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей = РегистрыСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.Показатель.Установить(Выборка.Ссылка);
		НаборЗаписей.Добавить().Показатель = Выборка.Ссылка;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПоказателямСпособВводаНепосредственноПриРасчете() Экспорт
	
	// Устанавливаем способ ввода "Непосредственно при расчете" для всех непредопределенных показателей, если 
	// - они участвуют в формуле начисления (или удержания), выполняемого по отдельному документу, 
	// - и при этом не участвуют в формулах начислений (или удержаний), выполняемых НЕ по отдельному документу.
	// Кроме того, устанавливаем для некоторых предопределенных.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиНачислений.Ссылка,
	|	ПоказателиНачислений.Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиНачислений.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыполняетсяОтдельнымДокументом
	|ПОМЕСТИТЬ ВТПоказателиВидовРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиУдержаний.Ссылка,
	|	ПоказателиУдержаний.Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиУдержаний.Ссылка.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|ГДЕ
	|	Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
	|	И Показатели.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
	|	И НЕ Показатели.Предопределенный
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ВТПоказателиВидовРасчета КАК ПоказателиВидовРасчета
	|			ГДЕ
	|				Показатели.Ссылка = ПоказателиВидовРасчета.Показатель
	|				И ПоказателиВидовРасчета.ВыполняетсяОтдельнымДокументом)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ВТПоказателиВидовРасчета КАК ПоказателиВидовРасчета
	|				ГДЕ
	|					Показатели.Ссылка = ПоказателиВидовРасчета.Показатель
	|					И НЕ ПоказателиВидовРасчета.ВыполняетсяОтдельнымДокументом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Показатели.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|ГДЕ
	|	Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
	|	И (Показатели.ИмяПредопределенныхДанных = ""КоличествоДнейОтпуска""
	|			ИЛИ Показатели.ИмяПредопределенныхДанных = ""КоличествоДнейКомпенсации""
	|			ИЛИ Показатели.ИмяПредопределенныхДанных = ""ДнейЧасовВыходногоПособия""
	|			ИЛИ Показатели.ИмяПредопределенныхДанных = ""ПроцентОплатыПоСреднему"")";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВнутрисменныеОтклоненияИзСоставаВытесняющихВидовНачислений() Экспорт
	
	// Пересчет зарплаты при вводе внутрисменных отклонений "задним числом" возникает за счет того, 
	// что они являются ведущими по отношению к видам расчета почасовой оплаты труда.
	// В списке вытесняющих они не нужны.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВнутрисменныеОтклонения.Ссылка КАК ВытесняющееНачисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК Вытесняющие
	|		ПО (Вытесняющие.Ссылка = Начисления.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВнутрисменныеОтклонения
	|		ПО (Вытесняющие.ВидРасчета = ВнутрисменныеОтклонения.Ссылка)
	|			И (ВнутрисменныеОтклонения.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Ссылка";
	
	ПакетВидовРасчета = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			УдаляемыеСтроки = НачислениеОбъект.ВытесняющиеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Выборка.ВытесняющееНачисление));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				НачислениеОбъект.ВытесняющиеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииПоЗарплате() Экспорт
	
	// Составляем таблицу соответствия видов операций по зарплате и категорий начислений.
	ТаблицаВидовОпераций = Новый ТаблицаЗначений;
	ТаблицаВидовОпераций.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	ТаблицаВидовОпераций.Колонки.Добавить("ВидОперацииПоЗарплате", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	Для Каждого КлючИЗначение Из СвойстваПоКатегориям Цикл
		НоваяСтрока = ТаблицаВидовОпераций.Добавить();
		НоваяСтрока.Категория = КлючИЗначение.Ключ;
		НоваяСтрока.ВидОперацииПоЗарплате = КлючИЗначение.Значение.ВидОперацииПоЗарплате;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Категория,
	|	Таблица.ВидОперацииПоЗарплате
	|ПОМЕСТИТЬ ВТВидыОперацийПоКатегориям
	|ИЗ
	|	&ТаблицаВидовОпераций КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеправильноЗаполненные.Ссылка,
	|	ВидыОперацийДляЗаполнения.ВидОперацииПоЗарплате
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК НеправильноЗаполненные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПравильноЗаполненные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОперацийПоКатегориям КАК ВидыОперацийПоКатегориям
	|			ПО (ВидыОперацийПоКатегориям.Категория = ПравильноЗаполненные.КатегорияНачисленияИлиНеоплаченногоВремени)
	|				И (ВидыОперацийПоКатегориям.ВидОперацииПоЗарплате = ПравильноЗаполненные.ВидОперацииПоЗарплате)
	|		ПО НеправильноЗаполненные.Ссылка = ПравильноЗаполненные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыОперацийПоКатегориям КАК ВидыОперацийДляЗаполнения
	|		ПО (ВидыОперацийДляЗаполнения.Категория = НеправильноЗаполненные.КатегорияНачисленияИлиНеоплаченногоВремени)
	|ГДЕ
	|	ПравильноЗаполненные.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаВидовОпераций", ТаблицаВидовОпераций);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПакетВидовРасчета = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьСоставПоказателейСовокупнойТарифнойСтавки() Экспорт 
	
	Запрос = Новый Запрос;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДСВ"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНПФ"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентПрофсоюзныхВзносов"));
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель КАК Показатель
	               |ИЗ
	               |	РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ПО ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	               |			И (ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
	               |			И (ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное))
	               |			И (НЕ ПоказателиРасчетаЗарплаты.НеИспользуется)
	               |			И (НЕ ПоказателиРасчетаЗарплаты.ПометкаУдаления)
	               |			И (НЕ ПоказателиРасчетаЗарплаты.Ссылка В (&МассивПоказателей))
	               |			И (НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически)
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.Ссылка ЕСТЬ NULL ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(Выборка.Показатель);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодРегистрацииОтпускаПоУходуЗаРебенком() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенком.Ссылка,
	               |	НАЧАЛОПЕРИОДА(ОтпускПоУходуЗаРебенком.ДатаНачала, МЕСЯЦ) КАК ПериодРегистрации
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	               |ГДЕ
	               |	ОтпускПоУходуЗаРебенком.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ОтпускПоУходуЗаРебенком.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПериодРегистрации = Выборка.ПериодРегистрации;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакВремяВЧасахДокументовРаботаВВыходныеИПраздничныеДни() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РаботаВВыходныеИПраздничныеДни.Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.РаботаВВыходныеИПраздничныеДни.Сотрудники КАК ТаблицаСотрудников
	|				ГДЕ
	|					ТаблицаСотрудников.Ссылка = РаботаВВыходныеИПраздничныеДни.Ссылка
	|					И ТаблицаСотрудников.ОтработаноЧасов > 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВЧасах
	|ИЗ
	|	Документ.РаботаВВыходныеИПраздничныеДни КАК РаботаВВыходныеИПраздничныеДни
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Документ.РаботаВВыходныеИПраздничныеДни.Сотрудники КАК ТаблицаСотрудников
	|					ГДЕ
	|						ТаблицаСотрудников.Ссылка = РаботаВВыходныеИПраздничныеДни.Ссылка
	|						И ТаблицаСотрудников.ОтработаноЧасов > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ <> РаботаВВыходныеИПраздничныеДни.ВремяВЧасах";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВремяВЧасах = Выборка.ВремяВЧасах;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьЗаполнениеДокументовВводаДанныхДляРасчетаЗарплаты() Экспорт
	
	// В документах со списком сотрудников ошибочно заполнялось поле Сотрудник (в шапке).
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Документ.ДанныеДляРасчетаЗарплаты КАК ДанныеДляРасчетаЗарплаты
	|ГДЕ
	|	ДанныеДляРасчетаЗарплаты.ВидДокумента.НесколькоСотрудников
	|	И ДанныеДляРасчетаЗарплаты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Сотрудник = Неопределено;
		ДокументОбъект.ЗаполнитьТабличнуюЧастьФизическиеЛица();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИспользованиеПоказателяПроцентДоплатыЗаДниНетрудоспособности() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТИсключаемыеНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияПоказатели.Ссылка = Начисления.Ссылка
	|ГДЕ
	|	Начисления.СпособРасчета = &СпособРасчета
	|	И Начисления.Показатели.Ссылка = &Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособРасчета = &СпособРасчета
	|	И НЕ Начисления.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТИсключаемыеНачисления.Ссылка
	|				ИЗ
	|					ВТИсключаемыеНачисления)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС);
	
	ПроцентДоплатыЗаДниНетрудоспособности = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	
	Если ПроцентДоплатыЗаДниНетрудоспособности = Неопределено Тогда
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательПроцентДоплатыЗаДниНетрудоспособности();
		ОбновитьПовторноИспользуемыеЗначения();
		ПроцентДоплатыЗаДниНетрудоспособности = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Показатель", ПроцентДоплатыЗаДниНетрудоспособности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// Нет начислений, которые требовалось бы обработать.
		Возврат;
	КонецЕсли;

	ПакетВидовРасчета = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НовыйПоказатель = ВидРасчетаОбъект.Показатели.Добавить();
		НовыйПоказатель.Показатель = ПроцентДоплатыЗаДниНетрудоспособности;
		НовыйПоказатель.ИспользоватьПриРасчете = Истина;
		ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект);
		ПакетВидовРасчета.Добавить(ВидРасчетаОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПериодДействияУдержанийПоСотрудникам() Экспорт
	
	// Поле ПериодДействия в регистре накопления НачисленияУдержанияПоСотрудникам ошибочно заполнялось периодом
	// регистрации.
	// Исправляя ситуацию, перезапишем поле по дате начала для всех таких записей.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НачисленияУдержанияПоСотрудникам.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.ДатаНачала, МЕСЯЦ) <> НачисленияУдержанияПоСотрудникам.ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки,
	|	НачисленияУдержанияПоСотрудникам.Активность,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
	|	НачисленияУдержанияПоСотрудникам.Сумма,
	|	НачисленияУдержанияПоСотрудникам.УдалитьОтработаноДней,
	|	НачисленияУдержанияПоСотрудникам.УдалитьОтработаноЧасов,
	|	НачисленияУдержанияПоСотрудникам.УдалитьОплаченоДней,
	|	НачисленияУдержанияПоСотрудникам.УдалитьОплаченоЧасов,
	|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.ДатаНачала, МЕСЯЦ) <> НачисленияУдержанияПоСотрудникам.ПериодДействия
	|			ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.ДатаНачала, МЕСЯЦ)
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ПериодДействия
	|	КОНЕЦ КАК ПериодДействия,
	|	НачисленияУдержанияПоСотрудникам.ДокументОснование,
	|	НачисленияУдержанияПоСотрудникам.Контрагент,
	|	НачисленияУдержанияПоСотрудникам.ДатаНачала,
	|	НачисленияУдержанияПоСотрудникам.ДатаОкончания
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьСпособПримененияЗначенийПоказателейЗависящихОтСтажа() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное) КАК СпособПримененияЗначений,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно) КАК СпособВводаЗначений
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|ГДЕ
	|	Показатели.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|	И Показатели.СпособПримененияЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ПоказательОбъект, Выборка);
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыМатериальнаяПомощь() Экспорт 
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда 
		Возврат;
	КонецЕсли;
	
	// Создание начислений
	КоллекторНачислений = Новый Соответствие;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МАТПМ'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь'");
	Описание.ФормулаРасчета = "";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства = "КодДоходаСтраховыеВзносы";
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПМР'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь при рождении ребенка'");
	Описание.ФормулаРасчета = "";
	// 4D:ERP для Беларуси, Яна, 04.08.2017 16:40:25 
	// Результат тестирования конфигурации, №15540 
	// {
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.БольничныйИзФСЗН;
	// }
	// 4D
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2762;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства = "КодДоходаСтраховыеВзносы";
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПМН'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь, не облагаемая налогами'");
	Описание.ФормулаРасчета = "";
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка();
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	ПланыВидовРасчета.Начисления.НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	ПланыВидовРасчета.Начисления.ЗаполнитьПорядокНачислений(КоллекторНачислений);
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	
	// Перезаполнение документов
	ВидыМатериальнойПомощи = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Категория", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.КодДоходаСтраховыеВзносы
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &Категория";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		// 4D:ERP для Беларуси, Яна, 04.08.2017 16:40:25 
		// Результат тестирования конфигурации, №15540 
		// {
		Если Выборка.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.БольничныйИзФСЗН Тогда 
			ВидыМатериальнойПомощи.Вставить(Перечисления.УдалитьНалогообложениеМатериальнойПомощи.ПриРожденииРебенка, Выборка.Ссылка);
		ИначеЕсли Выборка.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда 
			ВидыМатериальнойПомощи.Вставить(Перечисления.УдалитьНалогообложениеМатериальнойПомощи.НеОблагаетсяНалогамиИВзносами, Выборка.Ссылка);
		КонецЕсли;
		// }
		// 4D
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МатериальнаяПомощь.Ссылка КАК Ссылка,
	               |	МатериальнаяПомощь.ПериодРегистрации КАК Период,
	               |	МатериальнаяПомощь.УдалитьВидМатериальнойПомощи КАК ВидМатериальнойПомощи,
	               |	МатериальнаяПомощь.УдалитьСотрудник КАК Сотрудник,
	               |	МатериальнаяПомощь.Начислено КАК Результат,
	               |	МатериальнаяПомощь.УдалитьНалоговыйВычет КАК СуммаВычета,
	               |	МатериальнаяПомощь.УдалитьКодВычета КАК КодВычета,
	               |	МатериальнаяПомощь.УдалитьКоличествоДетей КАК КоличествоДетей,
	               |	МатериальнаяПомощь.УдалитьВычетПредоставленныйДругомуРодителю КАК ВычетПредоставленныйДругомуРодителю,
	               |	МатериальнаяПомощь.УдалитьФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТНезаполненныеДокументы
	               |ИЗ
	               |	Документ.МатериальнаяПомощь КАК МатериальнаяПомощь
	               |ГДЕ
	               |	МатериальнаяПомощь.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	               |	И МатериальнаяПомощь.Проведен";
				   
	Запрос.Выполнить();			   
				   
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТНезаполненныеДокументы");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение");
				   
	Запрос.Текст = "ВЫБРАТЬ
	               |	НезаполненныеДокументы.Ссылка КАК Ссылка,
	               |	НезаполненныеДокументы.Период КАК Период,
	               |	НезаполненныеДокументы.ВидМатериальнойПомощи КАК ВидМатериальнойПомощи,
	               |	НезаполненныеДокументы.Сотрудник КАК Сотрудник,
	               |	НезаполненныеДокументы.Результат КАК Результат,
	               |	НезаполненныеДокументы.СуммаВычета КАК СуммаВычета,
	               |	НезаполненныеДокументы.КодВычета КАК КодВычета,
	               |	НезаполненныеДокументы.КоличествоДетей КАК КоличествоДетей,
	               |	НезаполненныеДокументы.ВычетПредоставленныйДругомуРодителю КАК ВычетПредоставленныйДругомуРодителю,
	               |	НезаполненныеДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	               |	1 КАК ИдентификаторСтрокиВидаРасчета
	               |ИЗ
	               |	ВТНезаполненныеДокументы КАК НезаполненныеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |		ПО НезаполненныеДокументы.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	               |			И НезаполненныеДокументы.Период = КадровыеДанныеСотрудников.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидРасчета = ВидыМатериальнойПомощи[Выборка.ВидМатериальнойПомощи];
		ДокументОбъект.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), Выборка.Период);
		
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока = ДокументОбъект.ФизическиеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакРассчитываетсяНачисленийУдержаний() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СпособРасчетаНачисления", Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула);
	Запрос.УстановитьПараметр("СпособРасчетаУдержания", Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	НЕ(Начисления.СпособРасчета = &СпособРасчетаНачисления
	               |				И ПОДСТРОКА(Начисления.ФормулаРасчета, 1, 1) = """")
	               |	И НЕ Начисления.Рассчитывается
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Удержания.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Удержания КАК Удержания
	               |ГДЕ
	               |	НЕ(Удержания.СпособРасчета = &СпособРасчетаУдержания
	               |				И ПОДСТРОКА(Удержания.ФормулаРасчета, 1, 1) = """")
	               |	И НЕ Удержания.Рассчитывается";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидРасчетаОбъект.Рассчитывается = Истина;
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПредопределенностьПоказателяСтоимостьДняЧаса() Экспорт 
	
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	Если СтоимостьДняЧасаПоказатель = Неопределено Тогда 
		ПоказательСсылка = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору("СтоимостьДняЧаса");
		Если ПоказательСсылка <> Неопределено Тогда 
			ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
			ПоказательОбъект.ИмяПредопределенныхДанных = "СтоимостьДняЧаса";
			ПоказательОбъект.ОбменДанными.Загрузка = Истина;
			ПоказательОбъект.Записать();
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьФормулуДляВыполненияУдержаний() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СпособРасчетаУдержания", Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Удержания.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Удержания КАК Удержания
	               |ГДЕ
	               |	НЕ(Удержания.СпособРасчета = &СпособРасчетаУдержания
	               |				И ПОДСТРОКА(Удержания.ФормулаРасчета, 1, 1) = """")
	               |	И НЕ Удержания.Рассчитывается";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидРасчетаОбъект.Рассчитывается = Истина;
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчетаОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект);
		ПакетВидовРасчета.Добавить(ВидРасчетаОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьНастройкуНачислятьРазовыеНачисленияОтдельнымДокументом() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕ НастройкиРасчетаЗарплатыРасширенный.НачислятьРазовыеНачисленияОтдельнымДокументом КАК НачислятьРазовыеНачисленияОтдельнымДокументом
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаЗарплатыРасширенный КАК НастройкиРасчетаЗарплатыРасширенный
	|ГДЕ
	|	НастройкиРасчетаЗарплатыРасширенный.НачислятьРазовыеНачисленияОтдельнымДокументом <> ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления КАК Начисления
	|			ГДЕ
	|				Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.РазовоеНачисление)
	|				И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.НачислятьРазовыеНачисленияОтдельнымДокументом = Выборка.НачислятьРазовыеНачисленияОтдельнымДокументом;
	Настройки.Записать();
	
КонецПроцедуры

Процедура ДополнитьБазовыеНачисленияУдержанийПоИсполнительнымДокументамНатуральнымиДоходами() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Удержание,
	|	Начисления.Ссылка КАК БазовоеНачисление
	|ПОМЕСТИТЬ ВТБазовыеНачисленияНатуральныхДоходов
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)))
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеНачисленияНатуральныхДоходов.Удержание,
	|	БазовыеНачисленияНатуральныхДоходов.БазовоеНачисление
	|ИЗ
	|	ВТБазовыеНачисленияНатуральныхДоходов КАК БазовыеНачисленияНатуральныхДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = БазовыеНачисленияНатуральныхДоходов.Удержание)
	|			И (БазовыеНачисления.ВидРасчета = БазовыеНачисленияНатуральныхДоходов.БазовоеНачисление)
	|ГДЕ
	|	БазовыеНачисления.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазовыеНачисленияНатуральныхДоходов.Удержание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("Удержание") Цикл
		УдержаниеОбъект = Выборка.Удержание.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			УдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = Выборка.БазовоеНачисление;
		КонецЦикла;
		ПакетВидовРасчета.Добавить(УдержаниеОбъект);
	КонецЦикла;
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ДополнитьБазовыеНачисленияУдержанийПоИсполнительнымДокументамМатериальнойПомощью() Экспорт 

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Удержание,
	|	Начисления.Ссылка КАК БазовоеНачисление
	|ПОМЕСТИТЬ ВТБазовыеНачисленияМатериальнойПомощи
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)))
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеНачисленияМатериальнойПомощи.Удержание,
	|	БазовыеНачисленияМатериальнойПомощи.БазовоеНачисление
	|ИЗ
	|	ВТБазовыеНачисленияМатериальнойПомощи КАК БазовыеНачисленияМатериальнойПомощи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = БазовыеНачисленияМатериальнойПомощи.Удержание)
	|			И (БазовыеНачисления.ВидРасчета = БазовыеНачисленияМатериальнойПомощи.БазовоеНачисление)
	|ГДЕ
	|	БазовыеНачисления.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазовыеНачисленияМатериальнойПомощи.Удержание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("Удержание") Цикл
		УдержаниеОбъект = Выборка.Удержание.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			УдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = Выборка.БазовоеНачисление;
		КонецЦикла;
		ПакетВидовРасчета.Добавить(УдержаниеОбъект);
	КонецЦикла;
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);

КонецПроцедуры

Процедура ИсправитьОрганизациюВРегистреРасчетаУдержания() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Организация <> Удержания.Организация.ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.ПериодРегистрации,
	|	Удержания.Регистратор,
	|	Удержания.НомерСтроки,
	|	Удержания.ВидРасчета,
	|	Удержания.БазовыйПериодНачало,
	|	Удержания.БазовыйПериодКонец,
	|	Удержания.Активность,
	|	Удержания.Сторно,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	Удержания.Результат,
	|	Удержания.ДокументОснование,
	|	Удержания.ФиксЗаполнение,
	|	Удержания.ФиксРасчет,
	|	Удержания.ИдентификаторСтроки,
	|	Удержания.Получатель,
	|	Удержания.ПлатежныйАгент
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержания.Регистратор";
	
	// Вместо организации должна быть вписана головная организация.
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыРасчета.Удержания.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьНастройкуИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ИспользоватьНачислениеЗарплаты
	|				И СУММА(ВЫБОР
	|						КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|								И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.ПометкаУдаления
	|	И НЕ Начисления.ВАрхиве";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты"));

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную = Выборка.ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную;
	Настройки.Записать();
	
КонецПроцедуры

Процедура УдалитьНеПредопределенныйПоказательСтоимостьДняЧаса() Экспорт 
	
	ПарыЗамен = Новый Соответствие;
	
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	Если СтоимостьДняЧасаПоказатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.Идентификатор = ""СтоимостьДняЧаса""
	               |	И НЕ ПоказателиРасчетаЗарплаты.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ПарыЗамен.Вставить(Выборка.Ссылка, СтоимостьДняЧасаПоказатель);
	КонецЦикла;
	
	Если ПарыЗамен.Количество() > 0 Тогда 
		ПараметрыЗамены = Новый Структура("СпособУдаления, ВключатьБизнесЛогику", "Непосредственно", Ложь);
		ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ПараметрыЗамены);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьВРегистреРасчетаНачисленияБезИспользованияПериода() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
	|		ПО (ВидыРасчета.Ссылка = НачисленияУдержания.НачислениеУдержание)
	|			И (ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = НачисленияУдержания.Регистратор)
	|			И (Начисления.ВидРасчета = НачисленияУдержания.НачислениеУдержание)
	|			И (Начисления.Сотрудник = НачисленияУдержания.Сотрудник)
	|ГДЕ
	|	Начисления.Сотрудник ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачисленияУдержания.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Регистратор,
	|	МАКСИМУМ(Начисления.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрок
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = Начисления.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ПериодРегистрации,
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.Активность,
	|	Начисления.Сторно,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	Начисления.Результат,
	|	Начисления.ОтработаноДней,
	|	Начисления.ОтработаноЧасов,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ,
	|	Начисления.ГрафикРаботы,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма,
	|	Начисления.Организация,
	|	Начисления.ФиксСтрока,
	|	Начисления.ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени,
	|	Начисления.ФиксРасчет,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	Начисления.ПериодРегистрацииВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияУдержания.Период КАК ПериодРегистрации,
	|		НачисленияУдержания.Регистратор КАК Регистратор,
	|		НомераСтрок.НомерСтроки + 1 КАК НомерСтроки,
	|		НачисленияУдержания.НачислениеУдержание КАК ВидРасчета,
	|		НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
	|		НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, МЕСЯЦ) КАК ПериодДействияНачало,
	|		КОНЕЦПЕРИОДА(НачисленияУдержания.ПериодДействия, МЕСЯЦ) КАК ПериодДействияКонец,
	|		ВЫБОР
	|			КОГДА ВидыРасчета.ТребуетсяРасчетБазы
	|					И НЕ ВидыРасчета.ПериодДействияБазовый
	|				ТОГДА ВЫБОР
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, МЕСЯЦ), МЕСЯЦ, -1)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|							ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, КВАРТАЛ)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, КВАРТАЛ), КВАРТАЛ, -1)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|							ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, ГОД)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, ГОД), ГОД, -1)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияУдержания.ПериодДействия, МЕСЯЦ), МЕСЯЦ, -ВидыРасчета.КоличествоМесяцевБазовогоПериода - ВидыРасчета.СдвигБазовогоПериода + 1)
	|					КОНЕЦ
	|			ИНАЧЕ НачисленияУдержания.ДатаНачала
	|		КОНЕЦ КАК БазовыйПериодНачало,
	|		ВЫБОР
	|			КОГДА ВидыРасчета.ТребуетсяРасчетБазы
	|					И НЕ ВидыРасчета.ПериодДействияБазовый
	|				ТОГДА ВЫБОР
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|							ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НачисленияУдержания.ПериодДействия, МЕСЯЦ, -1), МЕСЯЦ)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|							ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержания.ПериодДействия, КВАРТАЛ)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|							ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НачисленияУдержания.ПериодДействия, КВАРТАЛ, -1), КВАРТАЛ)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|							ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержания.ПериодДействия, ГОД)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|							ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НачисленияУдержания.ПериодДействия, ГОД, -1), ГОД)
	|						КОГДА ВидыРасчета.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|							ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НачисленияУдержания.ПериодДействия, МЕСЯЦ, -ВидыРасчета.СдвигБазовогоПериода), МЕСЯЦ)
	|					КОНЕЦ
	|			ИНАЧЕ НачисленияУдержания.ДатаОкончания
	|		КОНЕЦ КАК БазовыйПериодКонец,
	|		НачисленияУдержания.Активность КАК Активность,
	|		ЛОЖЬ КАК Сторно,
	|		НачисленияУдержания.Сотрудник КАК Сотрудник,
	|		НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияУдержания.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		НачисленияУдержания.Сумма КАК Результат,
	|		0 КАК ОтработаноДней,
	|		0 КАК ОтработаноЧасов,
	|		0 КАК РезультатВТомЧислеЗаСчетФБ,
	|		НЕОПРЕДЕЛЕНО КАК ГрафикРаботы,
	|		НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|		ЛОЖЬ КАК ВремяВЧасах,
	|		НЕОПРЕДЕЛЕНО КАК ГрафикРаботыНорма,
	|		НачисленияУдержания.Организация КАК Организация,
	|		ЛОЖЬ КАК ФиксСтрока,
	|		ЛОЖЬ КАК ФиксЗаполнение,
	|		ЛОЖЬ КАК ФиксРасчетВремени,
	|		ЛОЖЬ КАК ФиксРасчет,
	|		0 КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
	|		0 КАК ИдентификаторСтроки,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрацииВремени
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|			ПО (Регистраторы.Регистратор = НачисленияУдержания.Регистратор)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрок КАК НомераСтрок
	|			ПО (НомераСтрок.Регистратор = НачисленияУдержания.Регистратор)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
	|			ПО (ВидыРасчета.Ссылка = НачисленияУдержания.НачислениеУдержание)
	|				И (ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|			ПО (Начисления.Регистратор = НачисленияУдержания.Регистратор)
	|				И (Начисления.ВидРасчета = НачисленияУдержания.НачислениеУдержание)
	|				И (Начисления.Сотрудник = НачисленияУдержания.Сотрудник)
	|	ГДЕ
	|		Начисления.Сотрудник ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Начисления.ПериодРегистрации,
	|		Начисления.Регистратор,
	|		Начисления.НомерСтроки,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействия,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.БазовыйПериодНачало,
	|		Начисления.БазовыйПериодКонец,
	|		Начисления.Активность,
	|		Начисления.Сторно,
	|		Начисления.Сотрудник,
	|		Начисления.ФизическоеЛицо,
	|		Начисления.ГоловнаяОрганизация,
	|		Начисления.Результат,
	|		Начисления.ОтработаноДней,
	|		Начисления.ОтработаноЧасов,
	|		Начисления.РезультатВТомЧислеЗаСчетФБ,
	|		Начисления.ГрафикРаботы,
	|		Начисления.ВидУчетаВремени,
	|		Начисления.ВремяВЧасах,
	|		Начисления.ГрафикРаботыНорма,
	|		Начисления.Организация,
	|		Начисления.ФиксСтрока,
	|		Начисления.ФиксЗаполнение,
	|		Начисления.ФиксРасчетВремени,
	|		Начисления.ФиксРасчет,
	|		Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|		Начисления.ИдентификаторСтроки,
	|		Начисления.ПериодРегистрацииВремени
	|	ИЗ
	|		РегистрРасчета.Начисления КАК Начисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|			ПО (Регистраторы.Регистратор = Начисления.Регистратор)) КАК Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПризнакЗначениеРассчитываетсяАвтоматическиРазмераДоплатыЗаСовмещение() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "РазмерДоплатыЗаСовмещение");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	               |	И ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ПоказательОбъект.Точность = 2;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакРассчитатьУдержанияВДокументахПремияИРазовоеНачисление() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПорядокВыплаты", Перечисления.ХарактерВыплатыЗарплаты.Межрасчет);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Премия.Ссылка
	               |ПОМЕСТИТЬ ВТОбрабатываемыеДокументы
	               |ИЗ
	               |	Документ.Премия КАК Премия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Премия.НДФЛ КАК ПремияНДФЛ
	               |		ПО Премия.Ссылка = ПремияНДФЛ.Ссылка
	               |			И (Премия.ПорядокВыплаты = &ПорядокВыплаты)
	               |			И (НЕ Премия.РассчитыватьУдержания)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Премия.Ссылка
	               |ИЗ
	               |	Документ.Премия КАК Премия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Премия.Удержания КАК ПремияУдержания
	               |		ПО Премия.Ссылка = ПремияУдержания.Ссылка
	               |			И (Премия.ПорядокВыплаты = &ПорядокВыплаты)
	               |			И (НЕ Премия.РассчитыватьУдержания)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РазовоеНачисление.Ссылка
	               |ИЗ
	               |	Документ.РазовоеНачисление КАК РазовоеНачисление
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазовоеНачисление.НДФЛ КАК РазовоеНачислениеНДФЛ
	               |		ПО РазовоеНачисление.Ссылка = РазовоеНачислениеНДФЛ.Ссылка
	               |			И (РазовоеНачисление.ПорядокВыплаты = &ПорядокВыплаты)
	               |			И (НЕ РазовоеНачисление.РассчитыватьУдержания)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РазовоеНачисление.Ссылка
	               |ИЗ
	               |	Документ.РазовоеНачисление КАК РазовоеНачисление
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазовоеНачисление.Удержания КАК РазовоеНачислениеУдержания
	               |		ПО РазовоеНачисление.Ссылка = РазовоеНачислениеУдержания.Ссылка
	               |			И (РазовоеНачисление.ПорядокВыплаты = &ПорядокВыплаты)
	               |			И (НЕ РазовоеНачисление.РассчитыватьУдержания)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбрабатываемыеДокументы.Ссылка
	               |ИЗ
	               |	ВТОбрабатываемыеДокументы КАК ОбрабатываемыеДокументы";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РассчитыватьУдержания = Истина;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДействиеСНачислениемИзмененияПлановыхНачислений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДокумента.Ссылка КАК Ссылка,
	|	НачисленияДокумента.Начисление КАК Начисление,
	|	НачисленияДокумента.Действие
	|ИЗ
	|	Документ.ИзменениеПлановыхНачислений.НачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.Начисления КАК НачисленияДокумента
	|		ПО НачисленияСотрудников.Начисление = НачисленияДокумента.Начисление
	|			И НачисленияСотрудников.Действие <> НачисленияДокумента.Действие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Начисление";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			 Документ = Выборка.Ссылка.ПолучитьОбъект();
			 Пока Выборка.Следующий() Цикл
				 Отбор = Новый Структура("Начисление", Выборка.Начисление);
				 СтрокиПоНачислению = Документ.НачисленияСотрудников.НайтиСтроки(Отбор);
				 Для каждого Строка Из СтрокиПоНачислению Цикл
				     Строка.Действие = Выборка.Действие;
				 КонецЦикла;
			 КонецЦикла;
			 Документ.Записать();
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГрафикаЗаписейНачисленийВЦеломЗаМесяц() Экспорт
	
	// Необходимо выявить все записи регистра расчетов для начислений в целом за месяц и у тех из них, 
	// в которых не заполнены данные для связи с графиком, заполнить их.
	// Данные графика необходимо для того, чтобы начисление в целом за месяц было корректно включено в расчетную базу
	// других начислений.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Регистратор,
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
	|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
	|			И (Начисления.ГрафикРаботы = НЕОПРЕДЕЛЕНО)
	|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
	|			И (НЕ ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходныеДанные.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Сотрудник,
	|	КОНЕЦПЕРИОДА(ИсходныеДанные.ПериодРегистрации, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.УстановитьПараметр("КатегорииПособий", ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Ложь, "ГрафикРаботы");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации,
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.Активность,
	|	Начисления.Сторно,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	Начисления.Результат,
	|	Начисления.ОтработаноДней,
	|	Начисления.ОтработаноЧасов,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ,
	|	ВЫБОР
	|		КОГДА Начисления.ГрафикРаботы = НЕОПРЕДЕЛЕНО
	|			ТОГДА КадровыеДанныеСотрудников.ГрафикРаботы
	|		ИНАЧЕ Начисления.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА Начисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|			ТОГДА &РабочееВремя
	|		ИНАЧЕ Начисления.ВидУчетаВремени
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма,
	|	Начисления.Организация,
	|	Начисления.ФиксСтрока,
	|	Начисления.ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени,
	|	Начисления.ФиксРасчет,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ПериодРегистрацииВремени
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = Начисления.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (КадровыеДанныеСотрудников.Сотрудник = Начисления.Сотрудник)
	|			И (КадровыеДанныеСотрудников.Период = КОНЕЦПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки";
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыПризПодарок() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПризПодарок.Ссылка КАК Ссылка,
	               |	НАЧАЛОПЕРИОДА(ПризПодарок.ДатаПолученияДохода, МЕСЯЦ) КАК Период,
	               |	ПризПодарок.УдалитьСотрудник КАК Сотрудник,
	               |	ПризПодарок.УдалитьФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПризПодарок.УдалитьСуммаДохода КАК Результат,
	               |	ПризПодарок.КодВычетаНДФЛ КАК КодВычета,
	               |	ПризПодарок.УдалитьСуммаВычетаНДФЛ КАК СуммаВычета,
	               |	ПризПодарок.УдалитьСуммаНДФЛ КАК СуммаНДФЛ
	               |ПОМЕСТИТЬ ВТНезаполненныеДокументы
	               |ИЗ
	               |	Документ.ПризПодарок КАК ПризПодарок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПризПодарок.Начисления КАК ПризПодарокНачисления
	               |		ПО (ПризПодарокНачисления.Ссылка = ПризПодарок.Ссылка)
	               |ГДЕ
	               |	ПризПодарокНачисления.Сотрудник ЕСТЬ NULL 
	               |	И ПризПодарок.Проведен";
				   
	Запрос.Выполнить();			   
				   
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТНезаполненныеДокументы");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение");
				   
	Запрос.Текст = "ВЫБРАТЬ
	               |	НезаполненныеДокументы.Ссылка КАК Ссылка,
	               |	НезаполненныеДокументы.Период КАК Период,
	               |	НезаполненныеДокументы.Сотрудник КАК Сотрудник,
	               |	НезаполненныеДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НезаполненныеДокументы.Результат КАК Результат,
	               |	НезаполненныеДокументы.КодВычета КАК КодВычета,
	               |	НезаполненныеДокументы.СуммаВычета КАК СуммаВычета,
	               |	НезаполненныеДокументы.СуммаНДФЛ КАК СуммаНДФЛ,
	               |	КадровыеДанныеСотрудников.Подразделение КАК Подразделение
	               |ИЗ
	               |	ВТНезаполненныеДокументы КАК НезаполненныеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |		ПО НезаполненныеДокументы.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	               |			И НезаполненныеДокументы.Период = КадровыеДанныеСотрудников.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), Выборка.Период);
		
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока = ДокументОбъект.ФизическиеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДополнительныйОтпускНаСанаторноКурортноеЛечение() Экспорт
	Справочники.ВидыОтпусков.ОписатьВидОтпускаДополнительныйОтпускНаСанаторноКурортноеЛечение();
	ПланыВидовРасчета.Начисления.СоздатьНачисленияОтпускаНаСанаторноКурортноеЛечениеЗаСчетФСС();
КонецПроцедуры

Процедура ЗаполнитьСписочныеДокументыУдержаний() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдержаниеДобровольныхСтраховыхВзносов.Ссылка КАК Ссылка,
	               |	УдержаниеДобровольныхСтраховыхВзносов.ДатаНачала КАК Период,
	               |	УдержаниеДобровольныхСтраховыхВзносов.УдалитьФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдержаниеДобровольныхСтраховыхВзносов.УдалитьРазмер КАК Размер,
	               |	1 КАК ИдентификаторСтрокиВидаРасчета
	               |ИЗ
	               |	Документ.УдержаниеДобровольныхСтраховыхВзносов КАК УдержаниеДобровольныхСтраховыхВзносов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдержаниеДобровольныхСтраховыхВзносов.Удержания КАК УдержаниеДобровольныхСтраховыхВзносовУдержания
	               |		ПО УдержаниеДобровольныхСтраховыхВзносов.Ссылка = УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка
	               |ГДЕ
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка ЕСТЬ NULL 
	               |	И УдержаниеДобровольныхСтраховыхВзносов.Проведен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержаниеДобровольныхВзносовВНПФ.Ссылка,
	               |	УдержаниеДобровольныхВзносовВНПФ.ДатаНачала,
	               |	УдержаниеДобровольныхВзносовВНПФ.УдалитьФизическоеЛицо,
	               |	УдержаниеДобровольныхВзносовВНПФ.УдалитьРазмер,
	               |	1
	               |ИЗ
	               |	Документ.УдержаниеДобровольныхВзносовВНПФ КАК УдержаниеДобровольныхВзносовВНПФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдержаниеДобровольныхВзносовВНПФ.Удержания КАК УдержаниеДобровольныхВзносовВНПФУдержания
	               |		ПО УдержаниеДобровольныхВзносовВНПФ.Ссылка = УдержаниеДобровольныхВзносовВНПФУдержания.Ссылка
	               |ГДЕ
	               |	УдержаниеДобровольныхВзносовВНПФУдержания.Ссылка ЕСТЬ NULL 
	               |	И УдержаниеДобровольныхВзносовВНПФ.Проведен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержаниеПрофсоюзныхВзносов.Ссылка,
	               |	УдержаниеПрофсоюзныхВзносов.ДатаНачала,
	               |	УдержаниеПрофсоюзныхВзносов.УдалитьФизическоеЛицо,
	               |	УдержаниеПрофсоюзныхВзносов.УдалитьРазмер,
	               |	1
	               |ИЗ
	               |	Документ.УдержаниеПрофсоюзныхВзносов КАК УдержаниеПрофсоюзныхВзносов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдержаниеПрофсоюзныхВзносов.Удержания КАК УдержаниеПрофсоюзныхВзносовУдержания
	               |		ПО УдержаниеПрофсоюзныхВзносов.Ссылка = УдержаниеПрофсоюзныхВзносовУдержания.Ссылка
	               |ГДЕ
	               |	УдержаниеПрофсоюзныхВзносовУдержания.Ссылка ЕСТЬ NULL 
	               |	И УдержаниеПрофсоюзныхВзносов.Проведен";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставФизЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФизическоеЛицо), Выборка.Период);
		
		НоваяСтрока = ДокументОбъект.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Для Каждого ДанныеПоказателя Из ДокументОбъект.Показатели Цикл 
			ДанныеПоказателя.ИдентификаторСтрокиВидаРасчета = 1;
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыПостоянноеУдержаниеВПользуТретьихЛиц() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПостоянноеУдержаниеВПользуТретьихЛиц.Ссылка КАК Ссылка,
	               |	ПостоянноеУдержаниеВПользуТретьихЛиц.ДатаНачала КАК Период,
	               |	ПостоянноеУдержаниеВПользуТретьихЛиц.УдалитьФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПостоянноеУдержаниеВПользуТретьихЛиц.УдалитьРазмер КАК Размер,
	               |	1 КАК ИдентификаторСтрокиВидаРасчета
	               |ИЗ
	               |	Документ.ПостоянноеУдержаниеВПользуТретьихЛиц КАК ПостоянноеУдержаниеВПользуТретьихЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПостоянноеУдержаниеВПользуТретьихЛиц.Удержания КАК ПостоянноеУдержаниеВПользуТретьихЛицУдержания
	               |		ПО ПостоянноеУдержаниеВПользуТретьихЛиц.Ссылка = ПостоянноеУдержаниеВПользуТретьихЛицУдержания.Ссылка
	               |ГДЕ
	               |	ПостоянноеУдержаниеВПользуТретьихЛицУдержания.Ссылка ЕСТЬ NULL 
	               |	И ПостоянноеУдержаниеВПользуТретьихЛиц.Проведен";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставФизЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФизическоеЛицо), Выборка.Период);
		
		НоваяСтрока = ДокументОбъект.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Для Каждого ДанныеПоказателя Из ДокументОбъект.Показатели Цикл 
			ДанныеПоказателя.ИдентификаторСтрокиВидаРасчета = 1;
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПоказательПроцентНадбавкиЗаВредность() Экспорт
	
	ПредопределенныйПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
	Если ПредопределенныйПоказатель <> Неопределено Тогда
		// Предопределенный показатель уже существует.
		Возврат;
	КонецЕсли;
	
	ПоказательСсылка = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору("ПроцентНадбавкиЗаВредность");
	Если ПоказательСсылка = Неопределено Тогда
		// Показатель надбавка за вредность ранее не создавался.
		Возврат;
	КонецЕсли;
	
	ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	ПоказательОбъект.ИмяПредопределенныхДанных = "ПроцентНадбавкиЗаВредность";
	ПоказательОбъект.ОбменДанными.Загрузка = Истина;
	ПоказательОбъект.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияНачисленийДокументаДоходВНатуральнойФорме() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходВНатуральнойФорме.Ссылка,
	|	ДоходВНатуральнойФорме.Организация,
	|	ДоходВНатуральнойФорме.МесяцНачисления,
	|	ДоходВНатуральнойФорме.Начисление,
	|	ДоходВНатуральнойФорме.СтатьяФинансирования,
	|	ДоходВНатуральнойФорме.СтатьяРасходов
	|ПОМЕСТИТЬ ВТДокументыБезДвижений
	|ИЗ
	|	Документ.ДоходВНатуральнойФорме КАК ДоходВНатуральнойФорме
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрРасчетаНачисления
	|		ПО ДоходВНатуральнойФорме.Ссылка = РегистрРасчетаНачисления.Регистратор
	|ГДЕ
	|	РегистрРасчетаНачисления.Регистратор ЕСТЬ NULL 
	|	И ДоходВНатуральнойФорме.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыБезДвижений.Ссылка КАК Ссылка,
	|	ДокументыБезДвижений.Организация КАК Организация,
	|	ДокументыБезДвижений.МесяцНачисления КАК МесяцНачисления,
	|	ДокументыБезДвижений.Начисление КАК Начисление,
	|	НАЧАЛОПЕРИОДА(ДокументыБезДвижений.МесяцНачисления, МЕСЯЦ) КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА ДокументыБезДвижений.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА ДокументыБезДвижений.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ДоходВНатуральнойФормеДоходы.Сотрудник КАК Сотрудник,
	|	ДоходВНатуральнойФормеДоходы.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДоходВНатуральнойФормеДоходы.Подразделение КАК Подразделение,
	|	ДоходВНатуральнойФормеДоходы.Результат КАК Сумма
	|ИЗ
	|	ВТДокументыБезДвижений КАК ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоходВНатуральнойФорме.Начисления КАК ДоходВНатуральнойФормеДоходы
	|		ПО ДокументыБезДвижений.Ссылка = ДоходВНатуральнойФормеДоходы.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Организация = Неопределено;
		МесяцНачисления = Неопределено;
		
		ДанныеНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), Выборка);
			Организация = Выборка.Организация;
			МесяцНачисления = Выборка.МесяцНачисления;
		КонецЦикла;
		
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		Движения = Новый Структура("Начисления", НаборЗаписей);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Ложь, Организация, МесяцНачисления, ДанныеНачислений, , Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоказателиИНачисленияСуммированногоУчета() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьСуммированныйУчет
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|ГДЕ
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим соответствие состояния суммированного учета по регистру и включенности соответствующей константы.
	ЕстьГрафикиСуммированногоУчета = НЕ РезультатЗапроса.Пустой();
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ИспользоватьУчетВремениСотрудниковВЧасах = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	// Наличие суммированного учета определяется не только наличием графиков с этим признаком, но и взведенной ФО использования часового учета.
	ЕстьСуммированныйУчет = ЕстьГрафикиСуммированногоУчета И ИспользоватьУчетВремениСотрудниковВЧасах;
	ВключенСуммированныйУчет = Константы.УдалитьИспользуетсяСуммированныйУчетВремени.Получить();
	
	Константы.УдалитьИспользуетсяСуммированныйУчетВремени.Установить(ЕстьСуммированныйУчет);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура УстановитьНеобходимостьВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|						КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве) КАК НастройкиРасчетаЗарплаты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
		
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);

	Настройки.Записать();

КонецПроцедуры

Процедура УдалитьНеИспользуемыеПоказателиИзДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Регистраторы с пустыми значениями показателей
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КадровыйПереводСписком.Показатели КАК Документ
		|ГДЕ
		|	Документ.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Документ
		|ГДЕ
		|	Документ.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Показатели КАК Документ
		|ГДЕ
		|	Документ.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботу.Показатели КАК Документ
		|ГДЕ
		|	Документ.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СтрокиСПустымиПоказателями = ДокументОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка()));
			Для каждого УдаляемаяСтрока Из СтрокиСПустымиПоказателями Цикл
				ДокументОбъект.Показатели.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпособОплатыВДоговорахГПХ() Экспорт
	
	ВыборкаДокументов = Документы.ДоговорАвторскогоЗаказа.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Договор = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		Договор.СпособОплаты = ?(ВыборкаДокументов.УдалитьОплатаПоАктамВыполненныхРабот, Перечисления.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот, Перечисления.СпособыОплатыПоДоговоруГПХ.ОднократноВКонцеСрока);
		Договор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать(РежимЗаписиДокумента.Запись);	
		
	КонецЦикла;
	
	ВыборкаДокументов = Документы.ДоговорРаботыУслуги.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Договор = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		Договор.СпособОплаты = ?(ВыборкаДокументов.УдалитьОплатаПоАктамВыполненныхРабот, Перечисления.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот, Перечисления.СпособыОплатыПоДоговоруГПХ.ОднократноВКонцеСрока);
		Договор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать(РежимЗаписиДокумента.Запись);	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоказателиПоНастройкам() Экспорт 
	
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам();
	
КонецПроцедуры

Процедура УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка() Экспорт

	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.ПереноситьДанныеВДругойУчетСреднегоЗаработка = Истина;
	Настройки.Записать();

КонецПроцедуры

Процедура УстановитьИспользованиеПараметровНаборовСвойств() Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Командировка", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Отпуск", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ОтпускБезСохраненияОплаты", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_БольничныйЛист", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеРаспределенияНачисленияЗарплаты() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачислениеЗарплатыРаспределениеРезультатовНачислений.Ссылка
	               |ПОМЕСТИТЬ ВТРаспределениеРезультатов
	               |ИЗ
	               |	Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК НачислениеЗарплатыРаспределениеРезультатовНачислений
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачислениеЗарплатыРаспределениеРезультатовУдержаний.Ссылка
	               |ИЗ
	               |	Документ.НачислениеЗарплаты.РаспределениеРезультатовУдержаний КАК НачислениеЗарплатыРаспределениеРезультатовУдержаний
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаспределениеРезультатов.Ссылка
	               |ИЗ
	               |	ВТРаспределениеРезультатов КАК РаспределениеРезультатов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.ПредставлениеРаспределенияРезультатовРасчета КАК НачислениеЗарплатыПредставлениеРаспределенияРезультатовРасчета
	               |		ПО РаспределениеРезультатов.Ссылка = НачислениеЗарплатыПредставлениеРаспределенияРезультатовРасчета.Ссылка
	               |ГДЕ
	               |	НачислениеЗарплатыПредставлениеРаспределенияРезультатовРасчета.Ссылка ЕСТЬ NULL ";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Документы.НачислениеЗарплаты.ЗаполнитьПредставлениеРаспределенияРезультатовРасчета(ДокументОбъект);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоВРегистреУсловияДоговораГПХ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияДоговораГПХ.Период,
	|	УсловияДоговораГПХ.Регистратор КАК Регистратор,
	|	УсловияДоговораГПХ.НомерСтроки,
	|	УсловияДоговораГПХ.Активность,
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник КАК Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	УсловияДоговораГПХ.КодДохода,
	|	УсловияДоговораГПХ.КодВычета,
	|	УсловияДоговораГПХ.КодДоходаСтраховыеВзносы,
	|	УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете,
	|	УсловияДоговораГПХ.ОтношениеКЕНВД,
	|	УсловияДоговораГПХ.Подразделение,
	|	УсловияДоговораГПХ.Сумма,
	|	УсловияДоговораГПХ.РазмерЕжемесячногоАвансовогоПлатежа,
	|	УсловияДоговораГПХ.СуммаВычета,
	|	УсловияДоговораГПХ.СуммаЕНВД,
	|	УсловияДоговораГПХ.ДатаНачала,
	|	УсловияДоговораГПХ.ДатаОкончания,
	|	УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	УсловияДоговораГПХ.СтатьяФинансирования,
	|	УсловияДоговораГПХ.СтатьяРасходов,
	|	УсловияДоговораГПХ.ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|ГДЕ
	|	УсловияДоговораГПХ.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.УсловияДоговораГПХ.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
						
		НаборЗаписейРегистра.ОбменДанными.Загрузка = Истина;
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрРаспределениеПоТерриториямУсловиямТруда() Экспорт
	
	ТипыДокументов = Метаданные.РегистрыСведений.РаспределениеПоТерриториямУсловиямТруда.Измерения.РегистраторИзмерение.Тип.Типы();
	
	ТекстЧтения = "";
	ТекстПреобразования = "";
	ПерваяЧасть = Истина;
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		// Проверяем наличие табличной части.
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РаспределениеПоТерриториямУсловиямТруда") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
		
		Если Не ПерваяЧасть Тогда
			ТекстЧтения = ТекстЧтения + 
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			ТекстПреобразования = ТекстПреобразования + 
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ЧастьЧтения = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаспределениеДокумент.Ссылка КАК Регистратор
			|ПОМЕСТИТЬ ВТРегистраторы
			|ИЗ
			|	#ИмяТаблицы КАК РаспределениеДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеРегистр
			|		ПО (РаспределениеРегистр.Регистратор = РаспределениеДокумент.Ссылка)
			|ГДЕ
			|	РаспределениеРегистр.Регистратор ЕСТЬ NULL ";
		
		Если Не ПерваяЧасть Тогда
			ЧастьЧтения = СтрЗаменить(ЧастьЧтения, "ПОМЕСТИТЬ ВТРегистраторы", "");
		КонецЕсли;
		ТекстЧтения = ТекстЧтения + ЧастьЧтения;
			
		ТекстПреобразования = ТекстПреобразования +
			"ВЫБРАТЬ
			|	Распределение.Ссылка КАК Регистратор,
			|	Распределение.Ссылка КАК РегистраторИзмерение,
			|	Распределение.НомерСтроки,
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.ДоляРаспределения,
			|	Распределение.Результат,
			|	Распределение.ИдентификаторСтрокиПоказателей
			|ИЗ
			|	#ИмяТаблицы КАК Распределение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО (Регистраторы.Регистратор = Распределение.Ссылка)";
			
		ТекстЧтения = СтрЗаменить(ТекстЧтения, "#ИмяТаблицы", ПолноеИмяДокумента + ".РаспределениеПоТерриториямУсловиямТруда");
		ТекстПреобразования = СтрЗаменить(ТекстПреобразования, "#ИмяТаблицы", ПолноеИмяДокумента + ".РаспределениеПоТерриториямУсловиямТруда");
		ПерваяЧасть = Ложь;
	КонецЦикла;
	
	ТекстПреобразования = ТекстПреобразования + 
		"
		|УПОРЯДОЧИТЬ ПО
		|	Распределение.Ссылка,
		|	Распределение.НомерСтроки";
		
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЧтения, ТекстПреобразования);
		
	Запрос = Новый Запрос(ТекстЧтения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.РаспределениеПоТерриториямУсловиямТруда.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИспользоватьВСовмещении() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СовмещениеФОТСовмещаемый.Ссылка
		|ПОМЕСТИТЬ ОбработанныеРегистраторы
		|ИЗ
		|	Документ.Совмещение.ФОТСовмещаемый КАК СовмещениеФОТСовмещаемый
		|ГДЕ
		|	СовмещениеФОТСовмещаемый.Использовать
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СовмещениеФОТСовмещающегоСотрудника.Ссылка
		|ИЗ
		|	Документ.Совмещение.ФОТСовмещающегоСотрудника КАК СовмещениеФОТСовмещающегоСотрудника
		|ГДЕ
		|	СовмещениеФОТСовмещающегоСотрудника.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Совмещение.Ссылка
		|ИЗ
		|	Документ.Совмещение КАК Совмещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОбработанныеРегистраторы КАК ОбработанныеРегистраторы
		|		ПО Совмещение.Ссылка = ОбработанныеРегистраторы.Ссылка
		|ГДЕ
		|	ОбработанныеРегистраторы.Ссылка ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ФОТСовмещаемый Из ДокументОбъект.ФОТСовмещаемый Цикл
			ФОТСовмещаемый.Использовать = Истина;
		КонецЦикла; 
		Для каждого ФОТСовмещающегоСотрудника Из ДокументОбъект.ФОТСовмещающегоСотрудника Цикл
			ФОТСовмещающегоСотрудника.Использовать = Истина;
		КонецЦикла; 
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьПризнакПроведенВРегистреВремяРегистрацииДокументовПлановыхНачислений() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремяРегистрацииДокументовПлановыхНачислений.Документ
	|ПОМЕСТИТЬ ВТПроведенныеДокументы
	|ИЗ
	|	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
	|ГДЕ
	|	НЕ ВремяРегистрацииДокументовПлановыхНачислений.Проведен
	|	И ВремяРегистрацииДокументовПлановыхНачислений.Документ.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремяРегистрацииДокументовПлановыхНачислений.Дата,
	|	ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник,
	|	ВремяРегистрацииДокументовПлановыхНачислений.Документ КАК Документ,
	|	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации,
	|	ИСТИНА КАК Проведен
	|ИЗ
	|	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроведенныеДокументы КАК ПроведенныеДокументы
	|		ПО ВремяРегистрацииДокументовПлановыхНачислений.Документ = ПроведенныеДокументы.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Документ") Цикл
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Пока Выборка.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДатуДоходаИсчисленныхСтраховыхВзносов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияПрочихДоходов.Ссылка КАК Документ,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(РегистрацияПрочихДоходов.ПериодРегистрации, МЕСЯЦ), ДЕНЬ) КАК ДатаПолученияДохода
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|		ПО ИсчисленныеСтраховыеВзносы.Регистратор = РегистрацияПрочихДоходов.Ссылка
	|ГДЕ
	|	РегистрацияПрочихДоходов.ПериодРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ИсчисленныеСтраховыеВзносы.ДатаПолученияДохода <> НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(РегистрацияПрочихДоходов.ПериодРегистрации, МЕСЯЦ), ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Документ") Цикл
		
		НаборЗаписей = РегистрыНакопления.ИсчисленныеСтраховыеВзносы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Документ);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.ДатаПолученияДохода = Выборка.ДатаПолученияДохода;
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТИсправляемыеРегистраторы
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеРегистраторы.Регистратор
		|ИЗ
		|	ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтработанноеВремяПоСотрудникам.Период,
			|	ВЫБОР
			|		КОГДА ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Начисления.ПериодДействияНачало
			|		ИНАЧЕ ОтработанноеВремяПоСотрудникам.ДатаНачала
			|	КОНЕЦ КАК ДатаНачала,
			|	ОтработанноеВремяПоСотрудникам.*
			|ИЗ
			|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = ИсправляемыеРегистраторы.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = Начисления.Регистратор
			|			И ОтработанноеВремяПоСотрудникам.ПериодДействия = Начисления.ПериодДействия
			|			И ОтработанноеВремяПоСотрудникам.Сотрудник = Начисления.Сотрудник
			|			И ОтработанноеВремяПоСотрудникам.Организация = Начисления.Организация
			|			И ОтработанноеВремяПоСотрудникам.Начисление = Начисления.ВидРасчета
			|			И ОтработанноеВремяПоСотрудникам.ВремяВЧасах = Начисления.ВремяВЧасах
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноДней = Начисления.ОтработаноДней
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноЧасов = Начисления.ОтработаноЧасов
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтработанноеВремяПоСотрудникам.Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			ПериодРегистрации = Неопределено;
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				Если ПериодРегистрации = Неопределено Тогда
					ПериодРегистрации = Выборка.Период;
				КонецЕсли;
				
			КонецЦикла;
			
			УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(
				НаборЗаписей, ПериодРегистрации, "Начисление");
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Движения = ДокументОбъект.Движения;
			
			ТаблицаПредыдущихДвижений = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Выгрузить();
			
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьКорректировкиОтработанногоВремени(Движения);
			
			НаборЗаписей = Движения.ОтработанноеВремяПоСотрудникамКорректировка;
			
			Если Не ОбщегоНазначения.КоллекцииИдентичны(ТаблицаПредыдущихДвижений, НаборЗаписей.Выгрузить()) Тогда
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗначенияПоказателейСуммированногоУчета() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Регистратор,
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Показатель,
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Организация,
		|	НАЧАЛОПЕРИОДА(ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Период, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Значение
		|ПОМЕСТИТЬ ВТДвиженияОперативныхПоказателей
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников
		|ГДЕ
		|	ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Показатель В(&ПоказателиСуммированногоУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвиженияОперативныхПоказателей.Сотрудник,
		|	ВТДвиженияОперативныхПоказателей.Показатель,
		|	ВТДвиженияОперативныхПоказателей.ПериодДействия
		|ПОМЕСТИТЬ ВТПроблемныеПоказатели
		|ИЗ
		|	ВТДвиженияОперативныхПоказателей КАК ВТДвиженияОперативныхПоказателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДвиженияОперативныхПоказателей.Сотрудник,
		|	ВТДвиженияОперативныхПоказателей.Показатель,
		|	ВТДвиженияОперативныхПоказателей.ПериодДействия
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДвиженияОперативныхПоказателей.Регистратор,
		|	ВТПроблемныеПоказатели.ПериодДействия
		|ПОМЕСТИТЬ ВТСворачиваемыеРегистраторы
		|ИЗ
		|	ВТДвиженияОперативныхПоказателей КАК ВТДвиженияОперативныхПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроблемныеПоказатели КАК ВТПроблемныеПоказатели
		|		ПО ВТДвиженияОперативныхПоказателей.Сотрудник = ВТПроблемныеПоказатели.Сотрудник
		|			И ВТДвиженияОперативныхПоказателей.Показатель = ВТПроблемныеПоказатели.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДвиженияОперативныхПоказателей.Регистратор
		|ПОМЕСТИТЬ ВТКорректныеРегистраторы
		|ИЗ
		|	ВТДвиженияОперативныхПоказателей КАК ВТДвиженияОперативныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСворачиваемыеРегистраторы КАК ВТСворачиваемыеРегистраторы
		|		ПО ВТДвиженияОперативныхПоказателей.Регистратор = ВТСворачиваемыеРегистраторы.Регистратор
		|			И ВТДвиженияОперативныхПоказателей.ПериодДействия = ВТСворачиваемыеРегистраторы.ПериодДействия
		|ГДЕ
		|	ВТСворачиваемыеРегистраторы.Регистратор ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвиженияОперативныхПоказателей.Регистратор КАК Регистратор,
		|	ВТДвиженияОперативныхПоказателей.ПериодДействия,
		|	ВТДвиженияОперативныхПоказателей.Сотрудник,
		|	ВТДвиженияОперативныхПоказателей.Показатель,
		|	ВТДвиженияОперативныхПоказателей.Организация,
		|	ВТДвиженияОперативныхПоказателей.Значение
		|ИЗ
		|	ВТДвиженияОперативныхПоказателей КАК ВТДвиженияОперативныхПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректныеРегистраторы КАК ВТКорректныеРегистраторы
		|		ПО ВТДвиженияОперативныхПоказателей.Регистратор = ВТКорректныеРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	ПоказателиСуммированногоУчета = Новый Массив;
	ПереработаноПоСуммированномуУчетуВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчетуВПределах2Часов");
	ПереработаноПоСуммированномуУчету = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету");
	
	Если ПереработаноПоСуммированномуУчетуВПределах2Часов = Неопределено ИЛИ ПереработаноПоСуммированномуУчету = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиСуммированногоУчета.Добавить(ПереработаноПоСуммированномуУчетуВПределах2Часов);
	ПоказателиСуммированногоУчета.Добавить(ПереработаноПоСуммированномуУчету);
	Запрос.УстановитьПараметр("ПоказателиСуммированногоУчета", ПоказателиСуммированногоУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Переброс значений из ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников в ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников,
	// путем простого копирования движений.
	
	ВыборкаКорректныхРегистраторов = РезультатЗапроса.Выбрать();
	Пока ВыборкаКорректныхРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НачатьТранзакцию();
		
		// Удаляем старые движения.
		НаборЗаписей = РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаКорректныхРегистраторов.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		// Записываем новые.
		НаборЗаписей = РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаКорректныхРегистраторов.Регистратор);
		Пока ВыборкаКорректныхРегистраторов.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаКорректныхРегистраторов);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия() Экспорт
	
	ОписаниеТаблицы = Новый Структура(
		"МетаданныеДокумента,
		|ИмяТабличнойЧасти,
		|ПериодРегистрации,
		|ДатаНачала,
		|ВидРасчета");
		
	// Определим умолчания.
	ОписаниеТаблицы.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	ОписаниеТаблицы.ДатаНачала = "ДатаНачала";
	ОписаниеТаблицы.ВидРасчета = "Начисление";
		
	Возврат ОписаниеТаблицы;
	
КонецФункции

Процедура ЗаполнитьПериодДействияВТаблицахНачисления(ПараметрыОбновления) Экспорт
	
	ОписаниеТаблиц = Новый Массив;
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ДатаНачала = "Ссылка.МесяцНачисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.ВидРасчета";
	Описание.ДатаНачала = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Льготы";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Пособия";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отгул;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отгул;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	Описание.ИмяТабличнойЧасти = "ОплатаТруда";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	Описание.ИмяТабличнойЧасти = "ОплатаЛьгот";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.ВидПремии";
	Описание.ДатаНачала = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Описание.ИмяТабличнойЧасти = "ДоначисленияИПерерасчеты";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Описание.ИмяТабличнойЧасти = "Сторнировано";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Льготы";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Льготы";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеТаблицНачисленийДляЗаполненияПериодаДействия(ОписаниеТаблиц);
	КонецЕсли;
	
	ТекстЗапроса = "";
	ПерваяЧасть = Истина;
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
		Если Не ПерваяЧасть Тогда
			ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ 
				|";
		КонецЕсли;
		ТекстЧасти = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ТаблицаДокумента.Ссылка КАК Ссылка,
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|	КОНЕЦ КАК ПериодДействия,
			|	""&ИмяТабличнойЧасти"" КАК ИмяТаблицы
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
			|		ПО (ВидыРасчета.Ссылка = ТаблицаДокумента.Начисление)
			|			И (ТаблицаДокумента.ПериодДействия <> ВЫБОР
			|				КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|					ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|				ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|			КОНЕЦ)";
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "#ТаблицаДокумента", ОписаниеТаблицы.МетаданныеДокумента.ПолноеИмя() + "." + ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "&ИмяТабличнойЧасти", ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Ссылка.ПериодРегистрации", "ТаблицаДокумента." + ОписаниеТаблицы.ПериодРегистрации);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.ДатаНачала", "ТаблицаДокумента." + ОписаниеТаблицы.ДатаНачала);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Начисление", "ТаблицаДокумента." + ОписаниеТаблицы.ВидРасчета);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЧасти;
		ПерваяЧасть = Ложь;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия УБЫВ,
		|	Ссылка,
		|	ИмяТаблицы,
		|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		Пока Выборка.Следующий() Цикл
			ДокументОбъект[Выборка.ИмяТаблицы][Выборка.НомерСтроки - 1].ПериодДействия = Выборка.ПериодДействия;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГоловнуюОрганизациюПлановыхНачисленийИспр() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.РегистраторИзмерение
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияИспр КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.РегистраторИзмерение
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.РегистраторИзмерение КАК РегистраторИзмерение,
			|	ПлановыеНачисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПлановыеНачисления.*
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияИспр КАК ПлановыеНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеНачисления.РегистраторИзмерение = Регистраторы.РегистраторИзмерение
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистраторИзмерение";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл
			
			НаборЗаписей = РегистрыСведений.ПлановыеНачисленияИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла; 
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСовмещение() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьСовмещениеПрофессийДолжностей") Или Константы.НеИспользоватьНачислениеЗарплаты.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Совмещение", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ОтменаСовмещения", ПараметрыНабора);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствПодработка() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьПодработки.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_НазначениеПодработки", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПрекращениеПодработки", ПараметрыНабора);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакФиксСторноВРегистреРасчетаНачисления(ПараметрыОбновления) Экспорт
		
	ОписанияДокументов = Новый Массив;
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Отгул;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Описание.ИмяТабличнойЧасти = "Сторнировано";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыПерерасчетДляЗаполненияФиксСторно();
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеТаблицПерерасчетаДляЗаполненияФиксСторно(ОписанияДокументов);
	КонецЕсли;
	
	ТекстОбъединения = "";
	Для Каждого Описание Из ОписанияДокументов Цикл
		Если Не ПустаяСтрока(ТекстОбъединения) Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК Регистратор,
			|	ТаблицаДокумента.Ссылка.ПериодРегистрации КАК ПериодРегистрации
			|ИЗ
			|	#ИмяТабличнойЧасти КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО (Начисления.Регистратор = ТаблицаДокумента.Ссылка)
			|			И (Начисления.ИдентификаторСтроки = ТаблицаДокумента.ИдентификаторСтрокиВидаРасчета)
			|			И (ТаблицаДокумента.ФиксСторно = ИСТИНА)
			|			И (Начисления.ФиксСторно = ЛОЖЬ)";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТабличнойЧасти", Описание.МетаданныеДокумента.ПолноеИмя() + "." + Описание.ИмяТабличнойЧасти);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Ссылка.ПериодРегистрации", Описание.ПериодРегистрации);
		ТекстОбъединения = ТекстОбъединения + ТекстФрагмента;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДанныеДокументов.Регистратор,
		|	ДанныеДокументов.ПериодРегистрации
		|ИЗ
		|	#ВложенныйЗапрос КАК ДанныеДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.ПериодРегистрации УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВложенныйЗапрос", "(" + ТекстОбъединения + ")");
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		МассивДокументов.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Выполнить();
	
	ТекстОбъединения = "";
	Для Каждого Описание Из ОписанияДокументов Цикл
		Если Не ПустаяСтрока(ТекстОбъединения) Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК Регистратор,
			|	ТаблицаДокумента.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
			|ИЗ
			|	#ИмяТабличнойЧасти КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО (Регистраторы.Регистратор = ТаблицаДокумента.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО (Начисления.Регистратор = ТаблицаДокумента.Ссылка)
			|			И (Начисления.ИдентификаторСтроки = ТаблицаДокумента.ИдентификаторСтрокиВидаРасчета)
			|			И (ТаблицаДокумента.ФиксСторно = ИСТИНА)
			|			И (Начисления.ФиксСторно = ЛОЖЬ)";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТабличнойЧасти", Описание.МетаданныеДокумента.ПолноеИмя() + "." + Описание.ИмяТабличнойЧасти);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Ссылка.ПериодРегистрации", Описание.ПериодРегистрации);
		ТекстОбъединения = ТекстОбъединения + ТекстФрагмента;
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	ДанныеДокументов.Регистратор,
		|	ДанныеДокументов.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТНеверныеФиксСторно
		|ИЗ
		|	#ВложенныйЗапрос КАК ДанныеДокументов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВложенныйЗапрос", "(" + ТекстОбъединения + ")");
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействия,
		|	Начисления.ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Активность,
		|	Начисления.Сторно,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ГоловнаяОрганизация,
		|	Начисления.Результат,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ВидУчетаВремени,
		|	Начисления.ВремяВЧасах,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.Организация,
		|	Начисления.ФиксСтрока,
		|	Начисления.ФиксЗаполнение,
		|	Начисления.ФиксРасчетВремени,
		|	Начисления.ФиксРасчет,
		|	ВЫБОР
		|		КОГДА НеверныеФиксСторно.ИдентификаторСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Начисления.ФиксСторно
		|	КОНЕЦ КАК ФиксСторно,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ДоляРезультата,
		|	Начисления.Месяц,
		|	Начисления.ДокументОснование
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО (Регистраторы.Регистратор = Начисления.Регистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеверныеФиксСторно КАК НеверныеФиксСторно
		|		ПО (НеверныеФиксСторно.Регистратор = Начисления.Регистратор)
		|			И (НеверныеФиксСторно.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	СотрудникиМесяцы = Новый ТаблицаЗначений;
	СотрудникиМесяцы.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиМесяцы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			Если Выборка.ФиксСторно = Истина Тогда
				ЗаполнитьЗначенияСвойств(СотрудникиМесяцы.Добавить(), Выборка);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Выполняем обновление вторичных данных.
	СотрудникиМесяцы.Свернуть("Сотрудник, Месяц");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник,
		|	СотрудникиМесяцы.Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	&СотрудникиМесяцы КАК СотрудникиМесяцы";
		
	Запрос.УстановитьПараметр("СотрудникиМесяцы", СотрудникиМесяцы);	
	Запрос.Выполнить();
	
	УчетСреднегоЗаработка.ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗаполнитьГоловногоСотрудникаВРегистреРасчетаНачисления(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	Начисления.Регистратор,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.ПериодРегистрации УБЫВ";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;

	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Если МассивДокументов.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник
		|ПОМЕСТИТЬ СотрудникиПоРегистраторам
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И Начисления.Регистратор В (&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПоРегистраторам.Сотрудник,
		|	Сотрудники.ГоловнойСотрудник
		|ИЗ
		|	СотрудникиПоРегистраторам КАК СотрудникиПоРегистраторам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПоРегистраторам.Сотрудник = Сотрудники.Ссылка";
		
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		
		ОсновныеСотрудники = Новый Соответствие;
		Пока ВыборкаСотрудников.Следующий() Цикл
			ОсновныеСотрудники[ВыборкаСотрудников.Сотрудник] = ВыборкаСотрудников.ГоловнойСотрудник;
		КонецЦикла;
		
		Для каждого Документ Из МассивДокументов Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрРасчета.Начисления.НаборЗаписей", "Регистратор", Документ) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Документ);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ГоловнойСотрудник = ОсновныеСотрудники[Запись.Сотрудник];
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(, Истина);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДатыНачисленийВДокументеПремия(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Премии.Ссылка,
		|	Премии.ПериодРегистрации
		|ИЗ
		|	Документ.Премия КАК Премии
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.Премия.Начисления КАК Начисления
		|			ГДЕ
		|				Начисления.Ссылка = Премии.Ссылка
		|				И Начисления.ПериодДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Начисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Премии.ПериодРегистрации УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Ссылка,
		|	Начисления.НомерСтроки,
		|	Начисления.ПериодДействия
		|ИЗ
		|	Документ.Премия.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&МассивДокументов)
		|	И Начисления.ПериодДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Начисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.Начисления[Выборка.НомерСтроки - 1].ДатаНачала = НачалоМесяца(Выборка.ПериодДействия);
			ДокументОбъект.Начисления[Выборка.НомерСтроки - 1].ДатаОкончания = КонецМесяца(Выборка.ПериодДействия);
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодДействияВТаблицеНачисленияЗаПервуюПоловинуМесяца(ПараметрыОбновления) Экспорт
	
	ОписаниеТаблиц = Новый Массив;
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	ТекстЗапроса = "";
	ПерваяЧасть = Истина;
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
		Если Не ПерваяЧасть Тогда
			ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ 
				|";
		КонецЕсли;
		ТекстЧасти = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ТаблицаДокумента.Ссылка КАК Ссылка,
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|	КОНЕЦ КАК ПериодДействия,
			|	""&ИмяТабличнойЧасти"" КАК ИмяТаблицы
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
			|		ПО (ВидыРасчета.Ссылка = ТаблицаДокумента.Начисление)
			|			И (ТаблицаДокумента.ПериодДействия <> ВЫБОР
			|				КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|					ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|				ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|			КОНЕЦ)";
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "#ТаблицаДокумента", ОписаниеТаблицы.МетаданныеДокумента.ПолноеИмя() + "." + ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "&ИмяТабличнойЧасти", ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Ссылка.ПериодРегистрации", "ТаблицаДокумента." + ОписаниеТаблицы.ПериодРегистрации);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.ДатаНачала", "ТаблицаДокумента." + ОписаниеТаблицы.ДатаНачала);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Начисление", "ТаблицаДокумента." + ОписаниеТаблицы.ВидРасчета);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЧасти;
		ПерваяЧасть = Ложь;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия УБЫВ,
		|	Ссылка,
		|	ИмяТаблицы,
		|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		Пока Выборка.Следующий() Цикл
			ДокументОбъект[Выборка.ИмяТаблицы][Выборка.НомерСтроки - 1].ПериодДействия = Выборка.ПериодДействия;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыКорректировкиВыплаты() Экспорт
	
	МассивДокументов = Новый Массив;
	Для Каждого ДокументМетаданные Из Метаданные.Документы Цикл
		КоличествоТабличныхЧастей = 0;
		Для Каждого ТабличнаяЧастьДокумента Из ДокументМетаданные.ТабличныеЧасти Цикл
			Если ТабличнаяЧастьДокумента.Имя = "КорректировкиВыплаты" Тогда
				КоличествоТабличныхЧастей = КоличествоТабличныхЧастей + 1;
			КонецЕсли;
			Если ТабличнаяЧастьДокумента.Имя = "НДФЛ" Тогда
				Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧастьДокумента.Реквизиты Цикл
					Если РеквизитТабличнойЧасти.Имя = "УдалитьНалогКЗачетуВозврату" Тогда
						КоличествоТабличныхЧастей = КоличествоТабличныхЧастей + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоТабличныхЧастей = 2 Тогда
			МассивДокументов.Добавить(ДокументМетаданные.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ИспользоватьСтатьиФинансирования = ЗарплатаКадры.ИспользоватьСтатьиФинансированияЗарплата();
	
	Для Каждого ДокументСКорректировкойВыплаты Из МассивДокументов  Цикл
		
		Если Не ПустаяСтрока(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Если ИспользоватьСтатьиФинансирования Тогда
			
			Запрос.Текст = Запрос.Текст + 
			"ВЫБРАТЬ
			|	ТаблицаРаспределениеРезультатовУдержаний.Ссылка КАК Ссылка,
			|	ТаблицаРаспределениеРезультатовУдержаний.Сотрудник КАК Сотрудник,
			|	ТаблицаРаспределениеРезультатовУдержаний.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	#ТаблицаРаспределениеРезультатовУдержаний КАК ТаблицаРаспределениеРезультатовУдержаний
			|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаНДФЛ КАК ТаблицаНДФЛ
			|		ПО ТаблицаРаспределениеРезультатовУдержаний.Ссылка = ТаблицаНДФЛ.Ссылка
			|			И ТаблицаРаспределениеРезультатовУдержаний.Сотрудник.ФизическоеЛицо = ТаблицаНДФЛ.ФизическоеЛицо
			|			И ТаблицаРаспределениеРезультатовУдержаний.ИдентификаторСтроки = ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ
			|ГДЕ
			|	ТаблицаРаспределениеРезультатовУдержаний.ВидУдержания В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету))
			|	И ЕСТЬNULL(ТаблицаНДФЛ.УдалитьНалогКЗачетуВозврату, 0) <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРаспределениеРезультатовУдержаний.Ссылка,
			|	ТаблицаРаспределениеРезультатовУдержаний.Сотрудник,
			|	ТаблицаРаспределениеРезультатовУдержаний.Сотрудник.ФизическоеЛицо";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределениеРезультатовУдержаний", ДокументСКорректировкойВыплаты + ".РаспределениеРезультатовУдержаний");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНДФЛ", ДокументСКорректировкойВыплаты + ".НДФЛ");
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + 
			"ВЫБРАТЬ
			|	ТаблицаНДФЛ.Ссылка КАК Ссылка,
			|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ
			|ГДЕ
			|	ТаблицаНДФЛ.УдалитьНалогКЗачетуВозврату <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНДФЛ.Ссылка,
			|	ТаблицаНДФЛ.ФизическоеЛицо";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНДФЛ", ДокументСКорректировкойВыплаты + ".НДФЛ");
			
		КонецЕсли;
	КонецЦикла;
	
	НомерТаблицыКорректировкиВыплаты = РасчетЗарплатыБазовыйКлиентСервер.НомерТаблицыКорректировкиВыплаты();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИдентификаторСтроки = НомерТаблицыКорректировкиВыплаты * 1000000;
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
			СуммаКорректировкиВыплаты = 0;
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			НайденныеСтроки = ДокументОбъект.НДФЛ.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СуммаКорректировкиВыплаты = СуммаКорректировкиВыплаты + НайденнаяСтрока.УдалитьНалогКЗачетуВозврату;
				НайденнаяСтрока.УдалитьНалогКЗачетуВозврату = 0;
			КонецЦикла;
			
			НоваяСтрокаКорректировкиВыплаты = ДокументОбъект.КорректировкиВыплаты.Добавить();
			НоваяСтрокаКорректировкиВыплаты.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			НоваяСтрокаКорректировкиВыплаты.КорректировкаВыплаты = СуммаКорректировкиВыплаты;
			НоваяСтрокаКорректировкиВыплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			
			Если ИспользоватьСтатьиФинансирования Тогда
				Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					СтруктураОтбора = Новый Структура("Сотрудник, ВидУдержания", Выборка.Сотрудник, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено);
					НайденныеСтроки = ДокументОбъект.РаспределениеРезультатовУдержаний.НайтиСтроки(СтруктураОтбора);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
					КонецЦикла;
					
					СтруктураОтбора = Новый Структура("Сотрудник, ВидУдержания", Выборка.Сотрудник, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
					НайденныеСтроки = ДокументОбъект.РаспределениеРезультатовУдержаний.НайтиСтроки(СтруктураОтбора);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПерерасчетНДФЛ.Ссылка КАК Ссылка,
	|	ПерерасчетНДФЛ.Сотрудник КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ПерерасчетНДФЛ.Сотрудники КАК ПерерасчетНДФЛ
	|ГДЕ
	|	(ПерерасчетНДФЛ.УдалитьНалогПоСтавке13КЗачетуВозврату <> 0
	|			ИЛИ ПерерасчетНДФЛ.УдалитьНалогПоСтавке35КЗачетуВозврату <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИдентификаторСтроки = НомерТаблицыКорректировкиВыплаты * 1000000;
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
			СуммаКорректировкиВыплаты = 0;
			
			СтруктураОтбора = Новый Структура("Сотрудник", Выборка.ФизическоеЛицо);
			НайденныеСтроки = ДокументОбъект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СуммаКорректировкиВыплаты = СуммаКорректировкиВыплаты + НайденнаяСтрока.УдалитьНалогПоСтавке13КЗачетуВозврату + НайденнаяСтрока.УдалитьНалогПоСтавке35КЗачетуВозврату;
				НайденнаяСтрока.УдалитьНалогПоСтавке13КЗачетуВозврату = 0;
				НайденнаяСтрока.УдалитьНалогПоСтавке35КЗачетуВозврату = 0;
			КонецЦикла;
			
			НоваяСтрокаКорректировкиВыплаты = ДокументОбъект.КорректировкиВыплаты.Добавить();
			НоваяСтрокаКорректировкиВыплаты.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			НоваяСтрокаКорректировкиВыплаты.КорректировкаВыплаты = СуммаКорректировкиВыплаты;
			НоваяСтрокаКорректировкиВыплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя() Экспорт
	
	Описание = Новый Структура(
		"МетаданныеДокумента,
		|ИмяТабличнойЧасти,
		|ПериодРегистрации,
		|Сотрудник,
		|ДатаНачала,
		|Начисление");
		
	Описание.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	Описание.Сотрудник = "Сотрудник";
	Описание.ДатаНачала = "ДатаНачала";
	Описание.Начисление = "Начисление";
	
	Возврат Описание;
	
КонецФункции

Процедура ЗаполнитьОписаниеДокументовДляЗаполненияТарифаПростоя(ОписанияДокументов)
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.Начисление = "Ссылка.Начисление";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Описание = ОписаниеПолейТаблицыДляЗаполненияТарифаПростоя();
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	ОписанияДокументов.Добавить(Описание);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеТаблицДляЗаполненияТарифаПростоя(ОписанияДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказательТарифПростояВДокументыНачисления(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТВидыРасчета КАК ВидыРасчета";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТарифПростоя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифПростоя");
	Если ТарифПростоя = Неопределено Тогда
		ТарифПростоя = Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательТарифПростоя();
	КонецЕсли;
	
	ПоказателиТарифаПростоя = Новый Массив;
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.Оклад"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоДолжности"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДневнойТарифПоДолжности"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	ПоказателиТарифаПростоя.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	
	Запрос.УстановитьПараметр("ПоказателиТарифаПростоя", ПоказателиТарифаПростоя);
	Запрос.УстановитьПараметр("ТарифПростоя", ТарифПростоя);
	
	ОписанияДокументов = Новый Массив;
	ЗаполнитьОписаниеДокументовДляЗаполненияТарифаПростоя(ОписанияДокументов);
	
	ТекстОбъединения = "";
	ТекстВТНачисления = "";
	ТекстВТПоказатели = "";
	Для Каждого Описание Из ОписанияДокументов Цикл
		// Первичный запрос выборки документов.
		Если Не ПустаяСтрока(ТекстОбъединения) Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	ОБЪЕДИНИТЬ 
				|";
		КонецЕсли;
		ТекстФрагмента = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаНачислений.Ссылка КАК Регистратор,
			|	ТаблицаНачислений.Ссылка.ПериодРегистрации КАК ПериодРегистрации
			|ИЗ
			|	#ИмяТабличнойЧасти КАК ТаблицаНачислений
			|ГДЕ
			|	ТаблицаНачислений.Начисление В
			|			(ВЫБРАТЬ
			|				ВТВидыРасчета.Ссылка
			|			ИЗ
			|				ВТВидыРасчета)
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				#ИмяТаблицыПоказателей КАК ПоказателиНачислений
			|			ГДЕ
			|				ПоказателиНачислений.Ссылка = ТаблицаНачислений.Ссылка
			|				И ПоказателиНачислений.Показатель В (&ПоказателиТарифаПростоя))
			|	И НЕ ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					#ИмяТаблицыПоказателей КАК ПоказателиНачислений
			|				ГДЕ
			|					ПоказателиНачислений.Ссылка = ТаблицаНачислений.Ссылка
			|					И ПоказателиНачислений.Показатель = &ТарифПростоя)";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТабличнойЧасти", Описание.МетаданныеДокумента.ПолноеИмя() + "." + Описание.ИмяТабличнойЧасти);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТаблицыПоказателей", Описание.МетаданныеДокумента.ПолноеИмя() + ".Показатели");
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Ссылка.ПериодРегистрации", Описание.ПериодРегистрации);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Начисление", Описание.Начисление);
		ТекстОбъединения = ТекстОбъединения + ТекстФрагмента;
		// Запрос к таблице начислений.
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	НачисленияПростоя.Ссылка,
			|	НачисленияПростоя.ИдентификаторСтрокиВидаРасчета,
			|	НачисленияПростоя.Сотрудник,
			|	НачисленияПростоя.ДатаНачала
			|ПОМЕСТИТЬ ВТДокументыСтроки
			|ИЗ
			|	#ИмяТабличнойЧасти КАК НачисленияПростоя
			|ГДЕ
			|	НачисленияПростоя.Ссылка В (&МассивДокументов)
			|	И НачисленияПростоя.Начисление В
			|			(ВЫБРАТЬ
			|				ВТВидыРасчета.Ссылка
			|			ИЗ
			|				ВТВидыРасчета)";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТабличнойЧасти", Описание.МетаданныеДокумента.ПолноеИмя() + "." + Описание.ИмяТабличнойЧасти);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Начисление", Описание.Начисление);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "Сотрудник", Описание.Сотрудник);
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ДатаНачала", Описание.ДатаНачала);
		Если Не ПустаяСтрока(ТекстВТНачисления) Тогда
			ТекстВТНачисления = ТекстВТНачисления + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ПОМЕСТИТЬ ВТДокументыСтроки", "");
		КонецЕсли;
		ТекстВТНачисления = ТекстВТНачисления + ТекстФрагмента;
		// Запрос к таблице показателей.
		ТекстФрагмента = 
			"ВЫБРАТЬ
			|	ПоказателиПростоя.Ссылка,
			|	ПоказателиПростоя.Показатель,
			|	ПоказателиПростоя.Значение,
			|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТПоказателиПростоя
			|ИЗ
			|	#ИмяТаблицыПоказателей КАК ПоказателиПростоя
			|ГДЕ
			|	(ПоказателиПростоя.Ссылка, ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета) В
			|			(ВЫБРАТЬ
			|				ДокументыСтроки.Ссылка,
			|				ДокументыСтроки.ИдентификаторСтрокиВидаРасчета
			|			ИЗ
			|				ВТДокументыСтроки КАК ДокументыСтроки)
			|	И ПоказателиПростоя.Показатель В(&ПоказателиТарифаПростоя)";
		ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "#ИмяТаблицыПоказателей", Описание.МетаданныеДокумента.ПолноеИмя() + ".Показатели");
		Если Не ПустаяСтрока(ТекстВТПоказатели) Тогда
			ТекстВТПоказатели = ТекстВТПоказатели + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			ТекстФрагмента = СтрЗаменить(ТекстФрагмента, "ПОМЕСТИТЬ ВТПоказателиПростоя", "");
		КонецЕсли;
		ТекстВТПоказатели = ТекстВТПоказатели + ТекстФрагмента;
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДанныеДокументов.Регистратор,
		|	ДанныеДокументов.ПериодРегистрации
		|ИЗ
		|	#ВложенныйЗапрос КАК ДанныеДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.ПериодРегистрации УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВложенныйЗапрос", "(" + ТекстОбъединения + ")");
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		МассивДокументов.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = ТекстВТНачисления;
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстВТПоказатели;
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТДокументыСтроки КАК СотрудникиПериоды";
	Запрос.Выполнить();
	
	ОписательВТКадровыеДанные = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТКадровыеДанные, Истина, "ПоказательТарифнойСтавки");

	ПоказателиСтоимостиЧасаДня = Новый Массив;
	ПоказателиСтоимостиЧасаДня.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	ПоказателиСтоимостиЧасаДня.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	ПоказателиСтоимостиЧасаДня.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	
	Запрос.УстановитьПараметр("ПоказателиСтоимостиЧасаДня", ПоказателиСтоимостиЧасаДня);
	Запрос.УстановитьПараметр("СтоимостьЧасаДня", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыСтроки.Ссылка,
		|	ДокументыСтроки.ИдентификаторСтрокиВидаРасчета,
		|	ДокументыСтроки.Сотрудник,
		|	ДокументыСтроки.ДатаНачала КАК Период,
		|	КадровыеДанные.ПоказательТарифнойСтавки.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА КадровыеДанные.ПоказательТарифнойСтавки.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)
		|			ТОГДА &СтоимостьЧасаДня
		|		КОГДА КадровыеДанные.ПоказательТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|			ТОГДА &СтоимостьЧасаДня
		|		ИНАЧЕ КадровыеДанные.ПоказательТарифнойСтавки
		|	КОНЕЦ КАК ПоказательТарифнойСтавки
		|ПОМЕСТИТЬ ВТПоказателиТарифнойСтавки
		|ИЗ
		|	ВТДокументыСтроки КАК ДокументыСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|		ПО (КадровыеДанные.Сотрудник = ДокументыСтроки.Сотрудник)
		|			И (КадровыеДанные.Период = ДокументыСтроки.ДатаНачала)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Приоритет,
		|	ПоказателиПростоя.Ссылка КАК Ссылка,
		|	ПоказателиПростоя.Показатель,
		|	ПоказателиПростоя.Значение КАК Значение,
		|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТПоказателиПриоритеты
		|ИЗ
		|	ВТПоказателиПростоя КАК ПоказателиПростоя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиТарифнойСтавки КАК ПоказателиТарифнойСтавки
		|		ПО (ПоказателиТарифнойСтавки.Ссылка = ПоказателиПростоя.Ссылка)
		|			И (ПоказателиТарифнойСтавки.ИдентификаторСтрокиВидаРасчета = ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета)
		|			И (ПоказателиТарифнойСтавки.ПоказательТарифнойСтавки = ПоказателиПростоя.Показатель)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	ПоказателиПростоя.Ссылка,
		|	ПоказателиПростоя.Показатель,
		|	ПоказателиПростоя.Значение,
		|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета
		|ИЗ
		|	ВТПоказателиПростоя КАК ПоказателиПростоя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиТарифнойСтавки КАК ПоказателиТарифнойСтавки
		|		ПО (ПоказателиТарифнойСтавки.Ссылка = ПоказателиПростоя.Ссылка)
		|			И (ПоказателиТарифнойСтавки.ИдентификаторСтрокиВидаРасчета = ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета)
		|			И (ПоказателиПростоя.Показатель В (&ПоказателиСтоимостиЧасаДня))
		|			И (ПоказателиТарифнойСтавки.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПоказателиПриоритеты.Приоритет) КАК Приоритет,
		|	ПоказателиПриоритеты.Ссылка,
		|	ПоказателиПриоритеты.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТМинимальныйПриоритет
		|ИЗ
		|	ВТПоказателиПриоритеты КАК ПоказателиПриоритеты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиПриоритеты.Ссылка,
		|	ПоказателиПриоритеты.ИдентификаторСтрокиВидаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиПростоя.Ссылка,
		|	ПоказателиПростоя.Ссылка КАК Регистратор,
		|	ПоказателиПростоя.Ссылка КАК РегистраторИзмерение,
		|	&ТарифПростоя КАК Показатель,
		|	ВЫРАЗИТЬ(ПоказателиПростоя.Значение * (2 / 3) КАК ЧИСЛО(15, 3)) КАК Значение,
		|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета,
		|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателей
		|				ГДЕ
		|					ЗначенияПоказателей.Регистратор В (&МассивДокументов)
		|					И ЗначенияПоказателей.РегистраторИзмерение = ПоказателиПростоя.Ссылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДописыватьВРегистр
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПоказателиПростоя.Ссылка КАК Ссылка,
		|		ПоказателиПростоя.Значение КАК Значение,
		|		ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|	ИЗ
		|		ВТПоказателиПростоя КАК ПоказателиПростоя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Ссылка = ПоказателиПростоя.Ссылка)
		|				И (МинимальныйПриоритет.ИдентификаторСтрокиВидаРасчета = ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиПриоритеты КАК ПоказателиПриоритеты
		|			ПО (ПоказателиПриоритеты.Ссылка = МинимальныйПриоритет.Ссылка)
		|				И (ПоказателиПриоритеты.ИдентификаторСтрокиВидаРасчета = МинимальныйПриоритет.ИдентификаторСтрокиВидаРасчета)
		|				И (ПоказателиПриоритеты.Приоритет = МинимальныйПриоритет.Приоритет)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиТарифнойСтавки КАК ПоказателиТарифнойСтавки
		|			ПО (ПоказателиТарифнойСтавки.Ссылка = ПоказателиПростоя.Ссылка)
		|				И (ПоказателиТарифнойСтавки.ИдентификаторСтрокиВидаРасчета = ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета)
		|				И (ПоказателиПриоритеты.Показатель = ПоказателиПростоя.Показатель)) КАК ПоказателиПростоя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиПростоя.Ссылка,
		|	ПоказателиПростоя.ИдентификаторСтрокиВидаРасчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	НаборЗаписей = РегистрыСведений.ЗначенияПоказателейНачислений.СоздатьНаборЗаписей();
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ДописыватьВРегистр Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.Показатели.Добавить(), Выборка);
			Если Выборка.ДописыватьВРегистр Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЕсли;
		КонецЦикла;
		НачатьТранзакцию();
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			Если Выборка.ДописыватьВРегистр Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУдерживаетсяВЦеломЗаМесяц(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетнаяБаза", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	Запрос.УстановитьПараметр("РасчетнаяБазаСтраховыеВзносы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Ссылка,
		|	Удержания.УдерживаетсяВЦеломЗаМесяцКорректноеПоложение КАК УдерживаетсяВЦеломЗаМесяц
		|ИЗ
		|	(ВЫБРАТЬ
		|		Удержания.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.Ссылка = Удержания.Ссылка
		|						И ПоказателиУдержаний.Показатель = &РасчетнаяБазаСтраховыеВзносы)
		|				ТОГДА ИСТИНА
		|			КОГДА ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.Ссылка = Удержания.Ссылка
		|						И ПоказателиУдержаний.Показатель = &РасчетнаяБаза)
		|				ТОГДА ЛОЖЬ
		|			КОГДА ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|					ГДЕ
		|						ПоказателиУдержаний.Ссылка = Удержания.Ссылка
		|						И ПоказателиУдержаний.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям))
		|				ТОГДА ЛОЖЬ
		|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК УдерживаетсяВЦеломЗаМесяцКорректноеПоложение,
		|		Удержания.УдерживаетсяВЦеломЗаМесяц КАК УдерживаетсяВЦеломЗаМесяцТекущееПоложение
		|	ИЗ
		|		ПланВидовРасчета.Удержания КАК Удержания) КАК Удержания
		|ГДЕ
		|	Удержания.УдерживаетсяВЦеломЗаМесяцТекущееПоложение <> Удержания.УдерживаетсяВЦеломЗаМесяцКорректноеПоложение";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдержаниеОбъект.УдерживаетсяВЦеломЗаМесяц = Выборка.УдерживаетсяВЦеломЗаМесяц;
		УдержаниеОбъект.ОбменДанными.Загрузка = Истина;
		УдержаниеОбъект.Записать();
	КонецЦикла;
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокВРегистрахНакопления(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачисленияУдержанияПоСотрудникам.Регистратор
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
			|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|			И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|			И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
			|			И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|			И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|			И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
		Если ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
			
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	НачисленияУдержанияПоСотрудникам.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
		|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
		|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
		|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
		|			И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
		|			И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
		|			И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
		|			И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
		|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// НачисленияУдержанияПоСотрудникам
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор КАК Регистратор,
			|	ТаблицаНачислений.ИдентификаторСтроки,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.Подразделение,
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
			|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
			|	НачисленияУдержанияПоСотрудникам.ДатаНачала,
			|	НачисленияУдержанияПоСотрудникам.ДатаОкончания
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|			ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
			|				И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|				И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|				И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
			|				И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|				И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|				И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|		ПО Регистраторы.Регистратор = НачисленияУдержанияПоСотрудникам.Регистратор
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НачисленияУдержанияПоСотрудникам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				
				НаборЗаписей.Прочитать();
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Пока Выборка.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Сотрудник,Подразделение,НачислениеУдержание,ПериодДействия,ДатаНачала,ДатаОкончания");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					СтруктураПоиска.Вставить("ИдентификаторСтроки", 0);
					
					Записи = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
					Для каждого Запись Из Записи Цикл
						Записи[0].ИдентификаторСтроки = Выборка.ИдентификаторСтроки
					КонецЦикла;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				// Сохранение объекта
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить идентификаторы строк в движениях %1 по причине: %3'"),
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		// ОтработанноеВремяПоСотрудникам
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор КАК Регистратор,
			|	ТаблицаНачислений.ИдентификаторСтроки,
			|	ОтработанноеВремяПоСотрудникам.Сотрудник,
			|	ОтработанноеВремяПоСотрудникам.Подразделение,
			|	ОтработанноеВремяПоСотрудникам.Начисление,
			|	ОтработанноеВремяПоСотрудникам.ПериодДействия,
			|	ОтработанноеВремяПоСотрудникам.ОтработаноДней
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|			ПО ОтработанноеВремяПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|				И ОтработанноеВремяПоСотрудникам.Начисление = ТаблицаНачислений.ВидРасчета
			|				И ОтработанноеВремяПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|				И ОтработанноеВремяПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|				И ОтработанноеВремяПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|				И ОтработанноеВремяПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|				И ОтработанноеВремяПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|				И ОтработанноеВремяПоСотрудникам.ОтработаноДней = ТаблицаНачислений.ОтработаноДней
			|		ПО Регистраторы.Регистратор = ОтработанноеВремяПоСотрудникам.Регистратор
			|ГДЕ
			|	ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОтработанноеВремяПоСотрудникам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				
				НаборЗаписей.Прочитать();
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Пока Выборка.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Сотрудник,Подразделение,Начисление,ПериодДействия,ОтработаноДней");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					СтруктураПоиска.Вставить("ИдентификаторСтроки", 0);
					
					Записи = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
					Для каждого Запись Из Записи Цикл
						Записи[0].ИдентификаторСтроки = Выборка.ИдентификаторСтроки
					КонецЦикла;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				// Сохранение объекта
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить идентификаторы строк в движениях %1 по причине: %3'"),
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов = ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов + 1000;
		
		Если ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов > ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
	Иначе
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииПлановыхАвансов(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыПредварительно
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ПлановыеАвансы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.РегистраторИзмерение
		|ИЗ
		|	РегистрСведений.ПлановыеАвансыИспр КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ПлановыеАвансы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистраторыПредварительно.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПредварительно КАК РегистраторыПредварительно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеАвансы.Регистратор КАК Регистратор,
			|	ПлановыеАвансы.Период,
			|	ПлановыеАвансы.Сотрудник,
			|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеАвансы.Регистратор = Регистраторы.Регистратор
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеАвансы.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПлановыеАвансы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура("Период,Сотрудник");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				ЗаписиСотрудника = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Для каждого Запись Из ЗаписиСотрудника Цикл
					Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНабора);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеАвансы.РегистраторИзмерение КАК РегистраторИзмерение,
			|	ПлановыеАвансы.ПериодИзмерение,
			|	ПлановыеАвансы.Сотрудник,
			|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.ПлановыеАвансыИспр КАК ПлановыеАвансы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеАвансы.РегистраторИзмерение = Регистраторы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистраторИзмерение";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеАвансыИспр.НаборЗаписей", "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПлановыеАвансыИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
			
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура("ПериодИзмерение,Сотрудник");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				ЗаписиСотрудника = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Для каждого Запись Из ЗаписиСотрудника Цикл
					Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНабора);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
		КонецЦикла;
		
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РасчетнаяБаза

Процедура СоздатьВТРеальнаяТаблицаРегистраРасчета(МенеджерВременныхТаблиц, УдалитьВТ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	ВЫБОР
		|		КОГДА Начисления.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВТ
		|ПОМЕСТИТЬ ВТИсточникДанныхНачислений
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = ОтборНачислений.Регистратор)
		|			И (Начисления.НомерСтроки = ОтборНачислений.НомерСтроки)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсточникДанныхНачислений");
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТИсточникДанныхНачислений КАК Источники
		|ГДЕ
		|	Источники.ЕстьВТ = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	Начисления.*
			|ПОМЕСТИТЬ ВТРегистрРасчета_НачисленияБД
			|ИЗ
			|	ВТРегистрРасчета_Начисления КАК Начисления
			|ГДЕ
			|	ЛОЖЬ";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	Начисления.*
			|ПОМЕСТИТЬ ВТРегистрРасчета_НачисленияБД
			|ИЗ
			|	РегистрРасчета.Начисления КАК Начисления
			|ГДЕ
			|	(Начисления.Регистратор, Начисления.НомерСтроки) В
			|			(ВЫБРАТЬ
			|				Отбор.Регистратор,
			|				Отбор.НомерСтроки
			|			ИЗ
			|				ВТИсточникДанныхНачислений КАК Отбор
			|			ГДЕ
			|				Отбор.ЕстьВТ = ЛОЖЬ)";
		Запрос.Выполнить();
	КонецЕсли;
	УдалитьВТ.Добавить("ВТРегистрРасчета_НачисленияБД");
	
КонецПроцедуры

Процедура СоздатьВТРеальнаяТаблицаФактическийПериодДействия(МенеджерВременныхТаблиц, УдалитьВТ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	ОтборНачислений.ПериодДействияБазовый,
		|	ВЫБОР
		|		КОГДА Начисления.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВТ
		|ПОМЕСТИТЬ ВТИсточникДанныхФПД
		|ИЗ
		|	ВТОтборОсновныхЗаписей КАК ОтборНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ПО (Начисления.Регистратор = ОтборНачислений.Регистратор)
		|			И (Начисления.НомерСтроки = ОтборНачислений.НомерСтроки)
		|			И (ОтборНачислений.ПериодДействияБазовый)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсточникДанныхФПД");
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТИсточникДанныхФПД КАК Источники
		|ГДЕ
		|	Источники.ЕстьВТ = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ФПД.*
			|ПОМЕСТИТЬ ВТФактическийПериодДействияБД
			|ИЗ
			|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
			|ГДЕ
			|	ЛОЖЬ";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ФПД.*
			|ПОМЕСТИТЬ ВТФактическийПериодДействияБД
			|ИЗ
			|	РегистрРасчета.Начисления.ФактическийПериодДействия(
			|			(Регистратор, НомерСтроки) В
			|				(ВЫБРАТЬ
			|					Отбор.Регистратор,
			|					Отбор.НомерСтроки
			|				ИЗ
			|					ВТИсточникДанныхФПД КАК Отбор
			|				ГДЕ
			|					Отбор.ПериодДействияБазовый = ИСТИНА
			|					И Отбор.ЕстьВТ = ЛОЖЬ)) КАК ФПД";
		Запрос.Выполнить();
	КонецЕсли;
	
	УдалитьВТ.Добавить("ВТФактическийПериодДействияБД");
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьФизическоеЛицоРазовыхПоказателейСотрудников(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.ПериодДействия
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.ПериодДействия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Регистраторы = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Регистраторы.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.НомерСтроки,
		|	ЗначенияПоказателей.Активность,
		|	ЗначенияПоказателей.ПериодДействия,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.Регистратор В(&Регистраторы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанныеПоказателейРасчетаЗарплаты(ПараметрыОбновления) Экспорт
	
	ЗаполняемыеРеквизиты = Новый Массив;
	ЗаполняемыеРеквизиты.Добавить("ПериодическийПоказательСотрудника");
	ЗаполняемыеРеквизиты.Добавить("ПериодическийПоказательОрганизации");
	ЗаполняемыеРеквизиты.Добавить("ПериодическийПоказательПодразделения");
	ЗаполняемыеРеквизиты.Добавить("РазовыйПоказательСотрудника");
	ЗаполняемыеРеквизиты.Добавить("РазовыйПоказательОрганизации");
	ЗаполняемыеРеквизиты.Добавить("РазовыйПоказательПодразделения");
	ЗаполняемыеРеквизиты.Добавить("ОперативныйПоказательСотрудника");
	ЗаполняемыеРеквизиты.Добавить("ОперативныйПоказательОрганизации");
	ЗаполняемыеРеквизиты.Добавить("ОперативныйПоказательПодразделения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиРасчета.Ссылка,
		|	&ИменаРеквизитов
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчета";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаРеквизитов", СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЗаполняемыеРеквизиты, ","));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ЗаполнитьИсточникДанныхЗначенийПоказателя();
		ЕстьОтличия = Ложь;
		Для Каждого ИмяРеквизита Из ЗаполняемыеРеквизиты Цикл
			Если ПоказательОбъект[ИмяРеквизита] <> Выборка[ИмяРеквизита] Тогда
				ЕстьОтличия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОтличия Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПоказательОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанныеВидовРасчета(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка,
		|	ИСТИНА КАК ОпределяющийВидВремени,
		|	ЛОЖЬ КАК ОпределяющийЗаПраздничныеДни,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.УчетВремениВДняхЧасах = ИСТИНА
		|				И ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|					ГДЕ
		|						ВидыВремени.Ссылка = ВидыРасчета.Ссылка
		|						И ВидыВремени.ВидВремени.ОсновноеВремя = &Праздники)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьИзмененияВремяВЧасах
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ГДЕ
		|				ВидыРасчета.Ссылка = ВидыВремени.Ссылка
		|				И ВидыВремени.ОпределяющийВидВремени = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыРасчета.Ссылка,
		|	ИСТИНА,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ГДЕ
		|				ВидыРасчета.Ссылка = ВидыВремени.Ссылка
		|				И (ВидыВремени.ОпределяющийВидВремени = ЛОЖЬ
		|					ИЛИ ВидыВремени.ОпределяющийЗаПраздничныеДни = ЛОЖЬ))";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Обработка уже выполнялась.
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		Для Каждого Строка Из ВидРасчетаОбъект.ВидыВремени Цикл
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРасчетаОбъект);
	КонецЦикла;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура СкорректироватьПериодДействияПериодическихПоказателейОрганизацийПодразделений(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗначенияПоказателейДокумент.Ссылка КАК Регистратор,
		|		ЗначенияПоказателейДокумент.Ссылка.Дата КАК Дата
		|	ИЗ
		|		Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателейДокумент
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияПоказателейРегистр
		|			ПО ЗначенияПоказателейДокумент.Ссылка = ЗначенияПоказателейРегистр.Регистратор
		|				И (ЗначенияПоказателейРегистр.Организация = ЗначенияПоказателейДокумент.Объект)
		|				И (ЗначенияПоказателейРегистр.Показатель = ЗначенияПоказателейДокумент.Показатель)
		|				И (ЗначенияПоказателейРегистр.Период = ЗначенияПоказателейДокумент.Период)
		|				И (ЗначенияПоказателейРегистр.ДействуетДо <> ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1))
		|				И (ЗначенияПоказателейРегистр.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗначенияПоказателейДокумент.Ссылка,
		|		ЗначенияПоказателейДокумент.Ссылка.Дата
		|	ИЗ
		|		Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателейДокумент
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияПоказателейРегистр
		|			ПО ЗначенияПоказателейДокумент.Ссылка = ЗначенияПоказателейРегистр.Регистратор
		|				И (ЗначенияПоказателейРегистр.Подразделение = ЗначенияПоказателейДокумент.Объект)
		|				И (ЗначенияПоказателейРегистр.Показатель = ЗначенияПоказателейДокумент.Показатель)
		|				И (ЗначенияПоказателейРегистр.Период = ЗначенияПоказателейДокумент.Период)
		|				И (ЗначенияПоказателейРегистр.ДействуетДо <> ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1))
		|				И (ЗначенияПоказателейРегистр.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1))) КАК ЗначенияПоказателей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		МассивДокументов.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Период,
		|	ЗначенияПоказателей.Регистратор КАК Регистратор,
		|	ЗначенияПоказателей.НомерСтроки,
		|	ЗначенияПоказателей.Активность,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Значение,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейДокумент.ПериодОкончания ЕСТЬ НЕ NULL 
		|				И ЗначенияПоказателей.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗначенияПоказателей.ДействуетДо <> ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ ЗначенияПоказателей.ДействуетДо
		|	КОНЕЦ КАК ДействуетДо,
		|	ЗначенияПоказателей.ЗначениеПоОкончании
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателейДокумент
		|		ПО (ЗначенияПоказателейДокумент.Ссылка = ЗначенияПоказателей.Регистратор)
		|			И ЗначенияПоказателей.Организация = ЗначенияПоказателейДокумент.Объект
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейДокумент.Показатель
		|			И ЗначенияПоказателей.Период = ЗначенияПоказателейДокумент.Период
		|ГДЕ
		|	ЗначенияПоказателей.Регистратор В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Период,
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.НомерСтроки,
		|	ЗначенияПоказателей.Активность,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Значение,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателейДокумент.ПериодОкончания ЕСТЬ НЕ NULL 
		|				И ЗначенияПоказателей.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗначенияПоказателей.ДействуетДо <> ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ЗначенияПоказателейДокумент.ПериодОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ ЗначенияПоказателей.ДействуетДо
		|	КОНЕЦ КАК ДействуетДо,
		|	ЗначенияПоказателей.ЗначениеПоОкончании
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателейДокумент
		|		ПО (ЗначенияПоказателейДокумент.Ссылка = ЗначенияПоказателей.Регистратор)
		|			И ЗначенияПоказателей.Подразделение = ЗначенияПоказателейДокумент.Объект
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейДокумент.Показатель
		|			И ЗначенияПоказателей.Период = ЗначенияПоказателейДокумент.Период
		|ГДЕ
		|	ЗначенияПоказателей.Регистратор В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.Регистратор";
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДокументОснованиеУдержаниеДобровольныхСтраховыхВзносов(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдержаниеДобровольныхСтраховыхВзносов.Ссылка
	               |ПОМЕСТИТЬ ВТРегистраторы
	               |ИЗ
	               |	Документ.УдержаниеДобровольныхСтраховыхВзносов КАК УдержаниеДобровольныхСтраховыхВзносов
	               |ГДЕ
	               |	УдержаниеДобровольныхСтраховыхВзносов.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	ПлановыеУдержания.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	               |		ПО Регистраторы.Ссылка = ПлановыеУдержания.Регистратор
	               |			И (ПлановыеУдержания.ДокументОснование = НЕОПРЕДЕЛЕНО)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
	               |		ПО Регистраторы.Ссылка = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
	               |			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	ПредоставлениеСоциальныхВычетовУРаботодателя.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя КАК ПредоставлениеСоциальныхВычетовУРаботодателя
	               |		ПО Регистраторы.Ссылка = ПредоставлениеСоциальныхВычетовУРаботодателя.Регистратор
	               |			И (ПредоставлениеСоциальныхВычетовУРаботодателя.ДокументОснование = НЕОПРЕДЕЛЕНО
	               |				ИЛИ ПредоставлениеСоциальныхВычетовУРаботодателя.ДокументОснование = ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	РабочиеМестаУдержаний.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеМестаУдержаний КАК РабочиеМестаУдержаний
	               |		ПО Регистраторы.Ссылка = РабочиеМестаУдержаний.Регистратор
	               |			И (РабочиеМестаУдержаний.Регистратор = НЕОПРЕДЕЛЕНО)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления() = "Монопольно" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", "");
	КонецЕсли;
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() И РезультатыЗапроса[2].Пустой() И РезультатыЗапроса[3].Пустой() И РезультатыЗапроса[4].Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеУдержания.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ДокументОснование = Выборка.Ссылка;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПредоставлениеСоциальныхВычетовУРаботодателя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ДокументОснование = Выборка.Ссылка;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РабочиеМестаУдержаний.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РабочиеМестаУдержаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ДокументОснование = Выборка.Ссылка;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если РезультатыЗапроса[2].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияПоказателей = РезультатыЗапроса[2].Выгрузить();
	
	Если ПараметрыОбновления <> Неопределено Тогда
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных = ЗначенияПоказателей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Ссылка");	
		Попытка 
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , , "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
			Возврат;
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный");
		ЭлементБлокировки.ИсточникДанных = ЗначенияПоказателей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");	
		Попытка 
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , , "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный");
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ДокументОснование = Выборка.Ссылка;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ЗначенияПоказателей, "ФизическоеЛицо", Истина);
	СформироватьЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальныйПоФизическимЛицам(ФизическиеЛица);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьДокументОснованиеИзменениеУдержанияДобровольныхСтраховыхВзносов(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.ФизическоеЛицо,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Организация,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Удержание,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.ДатаНачала,
	               |	МАКСИМУМ(УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.ДатаНачала) КАК ДатаНачалаУдержания
	               |ПОМЕСТИТЬ ВТДатыНачалаУдержаний
	               |ИЗ
	               |	Документ.УдержаниеДобровольныхСтраховыхВзносов.Удержания КАК УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдержаниеДобровольныхСтраховыхВзносов.Удержания КАК УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение
	               |		ПО УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.ФизическоеЛицо = УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.ФизическоеЛицо
	               |			И УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.Организация = УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Организация
	               |			И УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.Удержание = УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Удержание
	               |			И УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.ДатаНачала < УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.ДатаНачала
	               |			И (УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.Проведен)
	               |			И (УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Проведен)
	               |			И (УдержаниеДобровольныхСтраховыхВзносовУдержанияНачало.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать))
	               |			И (УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.ФизическоеЛицо,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Организация,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.Удержание,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка.ДатаНачала,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержанияИзменение.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДатыНачалаУдержаний.Ссылка,
	               |	ДатыНачалаУдержаний.ФизическоеЛицо,
	               |	УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка КАК ДокументОснование
	               |ПОМЕСТИТЬ ВТОснованияПоФизическимЛицам
	               |ИЗ
	               |	ВТДатыНачалаУдержаний КАК ДатыНачалаУдержаний
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдержаниеДобровольныхСтраховыхВзносов.Удержания КАК УдержаниеДобровольныхСтраховыхВзносовУдержания
	               |		ПО ДатыНачалаУдержаний.ФизическоеЛицо = УдержаниеДобровольныхСтраховыхВзносовУдержания.ФизическоеЛицо
	               |			И ДатыНачалаУдержаний.Организация = УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка.Организация
	               |			И ДатыНачалаУдержаний.Удержание = УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка.Удержание
	               |			И ДатыНачалаУдержаний.ДатаНачалаУдержания = УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка.ДатаНачала
	               |			И (УдержаниеДобровольныхСтраховыхВзносовУдержания.Ссылка.Проведен)
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Основания.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(Основания.ДокументОснование) КАК ДокументОснование
	               |ПОМЕСТИТЬ ВТРегистраторы
	               |ИЗ
	               |	ВТОснованияПоФизическимЛицам КАК Основания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Основания.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Регистраторы.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдержаниеДобровольныхСтраховыхВзносов КАК УдержаниеДобровольныхСтраховыхВзносов
	               |		ПО Регистраторы.Ссылка = УдержаниеДобровольныхСтраховыхВзносов.Ссылка
	               |			И (УдержаниеДобровольныхСтраховыхВзносов.ДокументОснование = ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Основания.ДокументОснование КАК ДокументОснование,
	               |	ПлановыеУдержания.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	               |		ПО Регистраторы.Ссылка = ПлановыеУдержания.Регистратор
	               |			И (ПлановыеУдержания.ДокументОснование = НЕОПРЕДЕЛЕНО)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснованияПоФизическимЛицам КАК Основания
	               |		ПО Регистраторы.Ссылка = Основания.Ссылка
	               |			И (ПлановыеУдержания.ФизическоеЛицо = Основания.ФизическоеЛицо)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Основания.ДокументОснование КАК ДокументОснование,
	               |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
	               |		ПО Регистраторы.Ссылка = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
	               |			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснованияПоФизическимЛицам КАК Основания
	               |		ПО Регистраторы.Ссылка = Основания.Ссылка
	               |			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо = Основания.ФизическоеЛицо)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Основания.ДокументОснование КАК ДокументОснование,
	               |	ПредоставлениеСоциальныхВычетовУРаботодателя.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя КАК ПредоставлениеСоциальныхВычетовУРаботодателя
	               |		ПО Регистраторы.Ссылка = ПредоставлениеСоциальныхВычетовУРаботодателя.Регистратор
	               |			И (ПредоставлениеСоциальныхВычетовУРаботодателя.ДокументОснование = НЕОПРЕДЕЛЕНО
	               |				ИЛИ ПредоставлениеСоциальныхВычетовУРаботодателя.ДокументОснование = ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка))
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснованияПоФизическимЛицам КАК Основания
	               |		ПО Регистраторы.Ссылка = Основания.Ссылка
	               |			И (ПредоставлениеСоциальныхВычетовУРаботодателя.ФизическоеЛицо = Основания.ФизическоеЛицо)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Основания.ДокументОснование КАК ДокументОснование,
	               |	РабочиеМестаУдержаний.*
	               |ИЗ
	               |	ВТРегистраторы КАК Регистраторы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеМестаУдержаний КАК РабочиеМестаУдержаний
	               |		ПО Регистраторы.Ссылка = РабочиеМестаУдержаний.Регистратор
	               |			И (РабочиеМестаУдержаний.Регистратор = НЕОПРЕДЕЛЕНО)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснованияПоФизическимЛицам КАК Основания
	               |		ПО Регистраторы.Ссылка = Основания.Ссылка
	               |			И (РабочиеМестаУдержаний.ФизическоеЛицо = Основания.ФизическоеЛицо)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления() = "Монопольно" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", "");
	КонецЕсли;
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[3].Пустой() И РезультатыЗапроса[4].Пустой() И РезультатыЗапроса[5].Пустой() И РезультатыЗапроса[6].Пустой() И РезультатыЗапроса[7].Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.УдержаниеДобровольныхСтраховыхВзносов", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДокументОснование = Выборка.ДокументОснование;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеУдержания.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[6].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПредоставлениеСоциальныхВычетовУРаботодателя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[7].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РабочиеМестаУдержаний.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РабочиеМестаУдержаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если РезультатыЗапроса[5].Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияПоказателей = РезультатыЗапроса[5].Выгрузить();
	
	Если ПараметрыОбновления <> Неопределено Тогда
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных = ЗначенияПоказателей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Ссылка");	
		Попытка 
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , , "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
			Возврат;
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный");
		ЭлементБлокировки.ИсточникДанных = ЗначенияПоказателей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");	
		Попытка 
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , , "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный");
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл 
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ЗначенияПоказателей, "ФизическоеЛицо", Истина);
	СформироватьЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальныйПоФизическимЛицам(ФизическиеЛица);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
КонецПроцедуры

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваНачислений с полями
//		Начисление - ПланВидовРасчетаСсылка.Начисления,
//		ЯвляетсяДенежнымСодержанием - Булево,
//		ЯвляетсяДенежнымДовольствием - Булево.
//		ЯвляетсяДоходомВНатуральнойФорме - Булево.
//		НачисляетсяВЦеломЗаМесяц - Булево.
//
//  Используется при расчете НДФЛ и Страховых взносов
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланВидовРасчетаНачисления.Ссылка КАК Начисление,
	|	ПланВидовРасчетаНачисления.ЯвляетсяДоходомВНатуральнойФорме,
	|	ПланВидовРасчетаНачисления.НачисляетсяВЦеломЗаМесяц,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымДовольствием
	|ПОМЕСТИТЬ ВТДополнительныеСвойстваНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		НовыйТекстЗапроса = Модуль.УточнитьТекстЗапросаСпискаНачислений(Запрос.Текст,,Истина);
		Если Не ПустаяСтрока(НовыйТекстЗапроса) Тогда
			Запрос.Текст = НовыйТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
		
	Запрос.Выполнить();  
		
КонецПроцедуры

Функция СотрудникиДополнительныйДоход(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников, Сотрудники, ДополнятьСведениямиНДФЛ = Ложь, ДополнятьСведениямиВзносов = Ложь) Экспорт
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение");
	ФизическиеЛицаДополнительныйДоход = Новый Массив;
	ОкончаниеПериода = ПараметрыСотрудников.ОкончаниеПериода;
	
	Если ДополнятьСведениямиНДФЛ Тогда
		ФизическиеЛицаДополнительныйДоходНДФЛ = УчетНДФЛРасширенный.ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ФизическиеЛица, МесяцНачисления, ОкончаниеПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаДополнительныйДоход, ФизическиеЛицаДополнительныйДоходНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, ФизическиеЛицаДополнительныйДоходНДФЛ);
	КонецЕсли;
	
	Если ДополнятьСведениямиВзносов Тогда
		ФизическиеЛицаДополнительныйДоходВзносы = УчетСтраховыхВзносовРасширенный.ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ФизическиеЛица, МесяцНачисления, ОкончаниеПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаДополнительныйДоход, ФизическиеЛицаДополнительныйДоходВзносы);
	КонецЕсли;
	
	Если ФизическиеЛицаДополнительныйДоход.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.Организация = Организация;
	Параметры.Подразделение = Подразделение;
	Параметры.СписокФизическихЛиц = ФизическиеЛицаДополнительныйДоход;
	
	Если ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу Тогда
		ВидыДоговоров = Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы();
		Если ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ВидДоговора", "В", ВидыДоговоров);
		Иначе	
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ВидДоговора", "НЕ В", ВидыДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСотрудников.РасчетПервойПоловиныМесяца Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			Параметры.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Процедура УточнитьОрганизациюРазовыхПоказателейПереработокСотрудников(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.ПериодДействия
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПереработок КАК РегистрацияПереработок
		|		ПО (РегистрацияПереработок.Ссылка = ЗначенияПоказателей.Регистратор)
		|			И (РегистрацияПереработок.Организация <> РегистрацияПереработок.Организация.ГоловнаяОрганизация)
		|			И (РегистрацияПереработок.Организация <> ЗначенияПоказателей.Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.ПериодДействия УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Регистраторы = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Регистраторы.Добавить(Выборка.Регистратор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Регистратор,
		|	ЗначенияПоказателей.НомерСтроки,
		|	ЗначенияПоказателей.Активность,
		|	ЗначенияПоказателей.ПериодДействия,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Показатель,
		|	РегистрацияПереработок.Организация,
		|	ЗначенияПоказателей.ФизическоеЛицо,
		|	ЗначенияПоказателей.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПереработок КАК РегистрацияПереработок
		|		ПО (РегистрацияПереработок.Ссылка = ЗначенияПоказателей.Регистратор)
		|			И (ЗначенияПоказателей.Регистратор В (&Регистраторы))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПоказателей.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

#Область ОтпускПоУходуЗаРебенком 

// 4D:ERP для Беларуси, Яна, 19.05.2017 9:44:25 
// Документ "Отпуск по уходу за ребенком", №14900 
// {
Процедура СоздатьПособияПоУходуЗаРебенком() Экспорт 
		
		
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам();
	
	КоллекторНачислений = Новый Соответствие;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕБ3'");
	Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до трех лет'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 3'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛетНаВторогоРебенка;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ32'");
	Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до трех лет на второго ребенка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 3 на втор. реб.'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	ПланыВидовРасчета.Начисления.НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	ПланыВидовРасчета.Начисления.ЗаполнитьПорядокНачислений(КоллекторНачислений);
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	
КонецПроцедуры	

Процедура ОбновитьБольничныйКодПодоходногоНалога() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидДокументаНачисления", Перечисления.ВидыДокументовНачисления.БольничныйЛист);
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ОплатаБольничного);
	Запрос.УстановитьПараметр("ВидПособияСоциальногоСтрахования", Перечисления.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ВидДокументаНачисления = &ВидДокументаНачисления
	               |	И Начисления.СпособРасчета = &СпособРасчета
	               |	И Начисления.ВидПособияСоциальногоСтрахования = &ВидПособияСоциальногоСтрахования";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2000");
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УдалитьБольничныйИзСоставаБазовыхВидовНачисленийПрофВзносов() Экспорт 
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Больничный.Ссылка КАК ИсключаемоеНачисление,
	|	УдержанияБазовыеВидыРасчета.Ссылка КАК УдержаниеОбъект
	|ИЗ
	|	ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК УдержанияБазовыеВидыРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Больничный
	|		ПО УдержанияБазовыеВидыРасчета.ВидРасчета = Больничный.Ссылка
	|ГДЕ
	|	Больничный.ВидДокументаНачисления = &ВидДокументаНачисления
	|	И Больничный.СпособРасчета = &СпособРасчета
	|	И Больничный.ВидПособияСоциальногоСтрахования = &ВидПособияСоциальногоСтрахования
	|	И УдержанияБазовыеВидыРасчета.Ссылка.ВидОперацииПоЗарплате = &ВидОперацииПоЗарплате";
	
	ПакетВидовРасчета = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидДокументаНачисления", Перечисления.ВидыДокументовНачисления.БольничныйЛист);
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ОплатаБольничного);
	Запрос.УстановитьПараметр("ВидПособияСоциальногоСтрахования", Перечисления.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность);	
	Запрос.УстановитьПараметр("ВидОперацииПоЗарплате", Перечисления.ВидыОперацийПоЗарплате.Профвзносы);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдержаниеОбъект = Выборка.УдержаниеОбъект.ПолучитьОбъект();
		УдаляемыеСтроки = УдержаниеОбъект.БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Выборка.ИсключаемоеНачисление));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			УдержаниеОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		ПакетВидовРасчета.Добавить(УдержаниеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьОтпускБезОплаты() Экспорт 
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени",  Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству"));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ОбозначениеВТабелеУчетаРабочегоВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");
		
		Если ВидОтпуска = Неопределено Тогда
			
			ОписаниеВидаОтпуска = Справочники.ВидыОтпусков.ПустоеОписаниеВидаОтпуска();
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска 	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных 	= "ОтпускБезОплатыПоТКРФ";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Отпуск без оплаты согласно ТК РБ'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Отпуск без оплаты согласно ТК РБ'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			
			Справочники.ВидыОтпусков.НовыйВидОтпуска(ОписаниеВидаОтпуска);
			
		КонецЕсли;
		
		НачислениеОбъект.ВидОтпуска =  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьОтпускЗаСвойСчет() Экспорт 
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени",  Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя"));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ОбозначениеВТабелеУчетаРабочегоВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
		
		Если ВидОтпуска = Неопределено Тогда
			
			ОписаниеВидаОтпуска = Справочники.ВидыОтпусков.ПустоеОписаниеВидаОтпуска();
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска 	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных 	= "ОтпускЗаСвойСчет";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Отпуск за свой счет'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Отпуск за свой счет'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			
			Справочники.ВидыОтпусков.НовыйВидОтпуска(ОписаниеВидаОтпуска);
			
		КонецЕсли;
		
		НачислениеОбъект.ВидОтпуска =  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьОтпускДополнительныйОплачиваемый() Экспорт 
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени",  Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение"));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ОбозначениеВТабелеУчетаРабочегоВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
		
		Если ВидОтпуска = Неопределено Тогда
			
			ОписаниеВидаОтпуска = Справочники.ВидыОтпусков.ПустоеОписаниеВидаОтпуска();
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска 	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных 	= "ОтпускУчебный";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)'");
			ОписаниеВидаОтпуска.СпособРасчетаОтпуска 		= Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях;
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Ложь;
			ОписаниеВидаОтпуска.ОтпускЯвляетсяЕжегодным		= Ложь;
			
			Справочники.ВидыОтпусков.НовыйВидОтпуска(ОписаниеВидаОтпуска);
			
		КонецЕсли;
		
		НачислениеОбъект.ВидОтпуска =  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьОтпускДополнительныйБезОплаты() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени",  Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый"));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ОбозначениеВТабелеУчетаРабочегоВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
		
		Если ВидОтпуска = Неопределено Тогда
			
			ОписаниеВидаОтпуска = Справочники.ВидыОтпусков.ПустоеОписаниеВидаОтпуска();
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска 	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных 	= "ОтпускБезОплатыУчебный";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Дополнительный учебный отпуск без оплаты'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Дополнительный учебный отпуск без оплаты'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			
			Справочники.ВидыОтпусков.НовыйВидОтпуска(ОписаниеВидаОтпуска);
			
		КонецЕсли;
		
		НачислениеОбъект.ВидОтпуска =  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьНатуральныйДоходКодПодоходногоНалога() Экспорт 
	
	Запрос = Новый Запрос;
	
	//Запрос.УстановитьПараметр("ВидДокументаНачисления", Перечисления.ВидыДокументовНачисления.ДоходВНатуральнойФорме);
	
	МассивНатурДоход = Новый Массив;
	МассивНатурДоход.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме);
	МассивНатурДоход.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени", МассивНатурДоход);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорияНачисленияИлиНеоплаченногоВремени)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2000");
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СоздатьПостоянныеПособияПоУходуЗаРебенком() Экспорт 
		
		
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам();
	
	КоллекторНачислений = Новый Соответствие;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДо3Лет50ПроцентовБПМ;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ50'");
	Описание.Наименование			= НСтр("ru = 'Пособие на ребёнка до 3 лет 50 % БПМ'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 3 лет 50%'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	// 4D:ERP для Беларуси, Яна, 15.06.2017 10:58:51 
	// Добавление варианта оплаты отпуска по уходу за ребенком инвалидом до 3-х лет, №15145, 14877  
	// {
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехНаРебенкаИнвалида;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ60'");
	Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до трех на ребенка инвалида'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб.- инв. до 3 лет'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);

	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаВичИнфицРебенка;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ61'");
	Описание.Наименование			= НСтр("ru = 'Пособие на детей в возрасте до 18 лет, инфицированных вирусом иммунодефицита человека (ежемесячное)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. инф. ВИЧ до 3 лет'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаДо18ЛетНаРебенкаИнвалида;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ62'");
	Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком-инвалидом в возрасте до 18 лет (ежемесячное)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб.- инв. до 18 лет'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетКромеРебенкаИнвалида;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ63'");
	Описание.Наименование			= НСтр("ru = 'Пособие на детей старше 3 лет из отдельных категорий семей: на каждого ребенка, кроме ребенка-инвалида'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Пособие на детей до 3 лет , кроме реб.-ка инв.'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);

	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3ЛетНаРебенкаИнвалида;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ63'");
	Описание.Наименование			= НСтр("ru = 'Пособие на детей старше 3 лет из отдельных категорий семей: на ребенка-инвалида'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Пособие на детей до 3 лет , на реб.-ка инв.'");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеНаРебенкаСтарше3Лет;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РЕ63'");
	Описание.Наименование			= НСтр("ru = 'Пособие на детей в возрасте от 3  до 18 лет в период воспитания ребенка в возрасте до 3 лет (ежемесячное)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Пособие на детей от 3 до 18 лет , в пер. восп.-ия реб.-ка до 3 лет '");
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияИзФСЗН;			
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	// }
	// 4D
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	ПланыВидовРасчета.Начисления.НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	ПланыВидовРасчета.Начисления.ЗаполнитьПорядокНачислений(КоллекторНачислений);
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	
КонецПроцедуры	
// }
// 4D

#КонецОбласти
