
#Область ПрограммныйИнтерфейс

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация             - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеОрганизации(Организация, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ЕГАИС
	Если ЗначениеЗаполнено(Организация.ИНН) И Не Организация.Сопоставлено Тогда
		РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(Организация.ИНН, Организация.КПП);
		
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			
			Организация.Контрагент = РезультатПоиска.Ссылка;
			Организация.ТорговыйОбъект = РезультатПоиска.Партнер;
			Организация.Сопоставлено = Истина;
			
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается перед записью алкогольной продукции в базу.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникОбъект.КлассификаторАлкогольнойПродукцииЕГАИС - загружаемая алкогольная продукция,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается перед записью справки в базу.
//
// Параметры:
//  Справка - СправочникОбъект.Справки1(2)ЕГАИС - загружаемая справка,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеСправки(Справка, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН (перед записью).
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеТТН(ТТН_Объект, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ЕГАИС
	// Заполнение склада и организации
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТТН_Объект, ДополнительныеПараметры);
	КонецЕсли;
	
	// Заполнение упаковок в классификаторе алкогольной продукции
	КлассификаторыАлкогольнойПродукции = ТТН_Объект.Товары.ВыгрузитьКолонку("АлкогольнаяПродукция");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлассификаторыАлкогольнойПродукции);
	
	Для Каждого Классификатор Из КлассификаторыАлкогольнойПродукции Цикл
		Если ЗначениеЗаполнено(Классификатор) Тогда
		
			ПараметрыПоиска = Новый Структура("АлкогольнаяПродукция", Классификатор);
			НайденныеСтроки = ТТН_Объект.Товары.НайтиСтроки(ПараметрыПоиска);
			
			ТаблицаИдентификаторов = ТТН_Объект.Товары.Выгрузить(НайденныеСтроки, "ИдентификаторУпаковки");
			ИдентификаторыУпаковокКлассификатора = ТаблицаИдентификаторов.ВыгрузитьКолонку("ИдентификаторУпаковки");
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыУпаковокКлассификатора);
			
			Записывать = Ложь;
			
			КлассификаторОбъект = Классификатор.ПолучитьОбъект();
			
			Для Каждого ИдентификаторУпаковки Из ИдентификаторыУпаковокКлассификатора Цикл
				Если КлассификаторОбъект.Упаковки.Найти(ИдентификаторУпаковки, "ИдентификаторУпаковки") = Неопределено Тогда
					НоваяСтрока = КлассификаторОбъект.Упаковки.Добавить();
					НоваяСтрока.ИдентификаторУпаковки = ИдентификаторУпаковки;
					
					Записывать = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Записывать Тогда
				КлассификаторОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", ТТН_Объект.Идентификатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТТН_Объект.ДокументОснование = Выборка.ДокументОснование;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН - Булево - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения - Булево - признак загрузки акта расхождений.
//
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТН, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН,
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаОбработкиДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при определении настроек обмена с УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля.
//
Процедура ПриПолученииНастроекУТМ(ТранспортныйМодуль) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при отказе от входящей ТТН. Нужно реализовать алгоритм отмены проведения связанных поступлений.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ТоварноТранспортнаяНакладнаяЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ТоварноТранспортнаяНакладнаяЕГАИС = &ТоварноТранспортнаяНакладнаяЕГАИС";
	
	Запрос.УстановитьПараметр("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПоступлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПоступлениеОбъект.Проведен Тогда
			ПоступлениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ПоступлениеОбъект.Записать();
		КонецЕсли;
		
		ПоступлениеОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Возвращает таблицу расхождений между входящей ТТН и документом поступления товаров.
//
// Параметры:
//  ДокументСсылка- ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица расхождений с колонками:
//   * АлкогольнаяПродукция,
//   * Справка2,
//   * Количество,
//   * КоличествоФакт,
//   * Расхождение,
//   * ИдентификаторСтроки.
//
Функция ТаблицаРасхожденийТТН_ЕГАИС(ДокументСсылка) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АлкогольнаяПродукция");
	Результат.Колонки.Добавить("Справка2");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоФакт");
	Результат.Колонки.Добавить("Расхождение");
	Результат.Колонки.Добавить("ИдентификаторСтроки");
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИСТовары.Ссылка,
	|	ЕГАИСТовары.АлкогольнаяПродукция,
	|	Классификатор.Номенклатура,
	|	Классификатор.Характеристика,
	|	ЕГАИСТовары.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН, 1) КАК КоличествоЕдиниц,
	|	ЕГАИСТовары.Количество,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН, 1) КАК КоэффициентУпаковки,
	|	ЕГАИСТовары.ИдентификаторСтроки,
	|	ЕГАИСТовары.Справка2
	|ПОМЕСТИТЬ ТаблицаТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ЕГАИСТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Классификатор
	|		ПО ЕГАИСТовары.АлкогольнаяПродукция = Классификатор.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторУпаковок
	|		ПО ЕГАИСТовары.АлкогольнаяПродукция = КлассификаторУпаковок.Ссылка
	|			И ЕГАИСТовары.ИдентификаторУпаковки = КлассификаторУпаковок.ИдентификаторУпаковки
	|ГДЕ
	|	ЕГАИСТовары.Ссылка = &СсылкаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.ТоварноТранспортнаяНакладнаяЕГАИС = &СсылкаТТН
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаТовары.КоличествоЕдиниц) КАК КоличествоЕдиниц
	|ПОМЕСТИТЬ ВтТоварыТТН
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ВтТоварыТТН.Номенклатура,
	|	ВтТоварыТТН.Характеристика,
	|	ВтТоварыТТН.КоличествоЕдиниц - ЕСТЬNULL(ВтТоварыПоступления.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ВТРасхождения
	|ИЗ
	|	ВтТоварыТТН КАК ВтТоварыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыПоступления КАК ВтТоварыПоступления
	|		ПО (ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура)
	|			И (ВтТоварыПоступления.Характеристика = ВтТоварыТТН.Характеристика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ТаблицаТоварыТТН.Ссылка,
	|	ТаблицаТоварыТТН.АлкогольнаяПродукция,
	|	ТаблицаТоварыТТН.Номенклатура,
	|	ТаблицаТоварыТТН.Характеристика,
	|	ТаблицаТоварыТТН.Количество,
	|	0 КАК КоличествоФакт,
	|	ЕСТЬNULL(ВТРасхождения.Количество,0) КАК Расхождение,
	|	ТаблицаТоварыТТН.КоличествоЕдиниц,
	|	ТаблицаТоварыТТН.ИдентификаторСтроки,
	|	ТаблицаТоварыТТН.КоэффициентУпаковки,
	|	ТаблицаТоварыТТН.Справка2
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТаблицаТоварыТТН
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасхождения КАК ВТРасхождения
	|		ПО (ТаблицаТоварыТТН.Номенклатура = ВТРасхождения.Номенклатура)
	|			И (ТаблицаТоварыТТН.Характеристика = ВТРасхождения.Характеристика)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
	|		ПО (ТаблицаТоварыТТН.Номенклатура = ВтТоварыТТН.Номенклатура)
	|			И (ТаблицаТоварыТТН.Характеристика = ВтТоварыТТН.Характеристика)
	|УПОРЯДОЧИТЬ ПО
	|	Расхождение,
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ВТРасхождения.Номенклатура,
	|	ВТРасхождения.Характеристика,
	|	ВТРасхождения.Количество
	|ИЗ
	|	ВТРасхождения КАК ВТРасхождения";
	
	Запрос.УстановитьПараметр("СсылкаТТН", ДокументСсылка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТТН",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КлассификаторУпаковок.Упаковка",
		"Классификатор.Номенклатура"));
		
	Результат = Запрос.ВыполнитьПакет();
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	
	ТаблицаРасхождения = Результат[5].Выгрузить();
	ТаблицаТоварыТТН = Результат[4].Выгрузить();
	
	Для каждого СтрокаТоварыТТН Из ТаблицаТоварыТТН Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварыТТН);
		
		НайденныеСтроки = ТаблицаРасхождения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если СтрокаТоварыТТН.КоэффициентУпаковки <> 0 Тогда
				СтрокаТоварыТТН.КоличествоФакт = СтрокаТоварыТТН.КоличествоЕдиниц / СтрокаТоварыТТН.КоэффициентУпаковки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтрокаРасхождения = НайденныеСтроки.Получить(0);
		КоличествоФакт = 0;
		
		Если СтрокаТоварыТТН.КоличествоЕдиниц >= СтрокаРасхождения.Количество Тогда
			КоличествоФакт = СтрокаТоварыТТН.КоличествоЕдиниц - СтрокаРасхождения.Количество;
		КонецЕсли;
		
		Если СтрокаТоварыТТН.КоэффициентУпаковки <> 0 Тогда
			СтрокаТоварыТТН.КоличествоФакт = КоличествоФакт / СтрокаТоварыТТН.КоэффициентУпаковки;
		КонецЕсли;
		
		СтрокаРасхождения.Количество = СтрокаРасхождения.Количество - СтрокаТоварыТТН.КоличествоЕдиниц;
		
		Если СтрокаРасхождения.Количество <= 0 Тогда
			ТаблицаРасхождения.Удалить(СтрокаРасхождения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоварыТТН;
	//-- НЕ ЕГАИС
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие расхождений между товарами накладных и ТТН.
// Вызывается перед выполнением дальнейшего действия ПодтвердитеПолучение с целью выявления наличия расхождений.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемый документ.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ЕстьРасхожденияБольшеТТН - Булево - признак наличия расхождений больше ТТН,
//   * ЕстьРасхожденияМеньшеТТН - Булево - признак наличия расхождений меньше ТТН.
//
Функция ПроверитьРасхожденияТоваровПоступленияТТН_ЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС) Экспорт
	
	Результат = Новый Структура("ЕстьРасхожденияБольшеТТН, ЕстьРасхожденияМеньшеТТН", Ложь, Ложь);
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура КАК Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика КАК Характеристика,
		|	СУММА(ТТНВходящаяЕГАИСТовары.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН,1)) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
		|		ПО (КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка)
		|			И ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.ИдентификаторУпаковки
		|ГДЕ
		|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка.ТоварноТранспортнаяНакладнаяЕГАИС = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Упаковка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Упаковка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Упаковка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНСсылка
		|	И ТаблицаТовары.Ссылка.Проведен
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ВтТоварыПоступления.Характеристика КАК Характеристика,
		|	ВтТоварыПоступления.Количество КАК Количество,
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|			И ВтТоварыПоступления.Характеристика = ВтТоварыТТН.Характеристика
		|ГДЕ
		|	(ВтТоварыПоступления.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыТТН.Номенклатура КАК Номенклатура,
		|	ВтТоварыТТН.Характеристика КАК Характеристика,
		|	ВтТоварыТТН.Количество КАК Количество,
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВтТоварыТТН КАК ВтТоварыТТН
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ПО ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|			И ВтТоварыПоступления.Характеристика = ВтТоварыТТН.Характеристика
		|ГДЕ
		|	 ЕСТЬNULL(ВтТоварыПоступления.Количество, 0) < ВтТоварыТТН.Количество
		|");
		
	Запрос.УстановитьПараметр("ТТНСсылка", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТТН",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка",
		"КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьРасхожденияБольшеТТН", НЕ Результат[2].Пустой());
	СтруктураВозврата.Вставить("ЕстьРасхожденияМеньшеТТН", НЕ Результат[3].Пустой());
	
	Возврат СтруктураВозврата;
	//-- НЕ ЕГАИС
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ПоступлениеТоваров - ДокументСсылка - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТоварноТранспортнаяНакладнаяЕГАИС, ПоступлениеТоваров) Экспорт
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура КАК Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика КАК Характеристика,
		|	СУММА(ТТНВходящаяЕГАИСТовары.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН, 1)) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
		|		ПО (КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка)
		|			И ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.ИдентификаторУпаковки
		|ГДЕ
		|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ПоступлениеТоваров
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ВтТоварыПоступления.Характеристика КАК Характеристика,
		|	ВтТоварыПоступления.Количество КАК Количество,
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|			И ВтТоварыПоступления.Характеристика = ВтТоварыТТН.Характеристика
		|ГДЕ
		|	(ВтТоварыПоступления.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL )");
		
	Запрос.УстановитьПараметр("ТТНСсылка", ТоварноТранспортнаяНакладнаяЕГАИС);
	Запрос.УстановитьПараметр("ПоступлениеТоваров", ПоступлениеТоваров);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТТН",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка",
		"КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет наличие расхождений между ТТН и товарами перемещения.
//
// Параметры:
//  ТоварноТранспортнаяНакладнаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ПеремещениеТоваров - ДокументСсылка - проверяемое перемещение товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПеремещения(ТоварноТранспортнаяНакладнаяЕГАИС, ПеремещениеТоваров) Экспорт
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура КАК Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика КАК Характеристика,
		|	СУММА(ТТНВходящаяЕГАИСТовары.Количество * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТТН, 1)) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
		|		ПО (КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка)
		|			И ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.ИдентификаторУпаковки
		|ГДЕ
		|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПеремещения
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ПеремещениеТоваров
		|	И ТаблицаТовары.Номенклатура.АлкогольнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыПеремещения.Номенклатура КАК Номенклатура,
		|	ВтТоварыПеремещения.Характеристика КАК Характеристика,
		|	ВтТоварыПеремещения.Количество КАК Количество,
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	ВтТоварыПеремещения КАК ВтТоварыПеремещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПеремещения.Номенклатура = ВтТоварыТТН.Номенклатура
		|			И ВтТоварыПеремещения.Характеристика = ВтТоварыТТН.Характеристика
		|ГДЕ
		|	(ВтТоварыПеремещения.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL )");
		
	Запрос.УстановитьПараметр("ТТНСсылка", ТоварноТранспортнаяНакладнаяЕГАИС);
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ПеремещениеТоваров);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТТН",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка",
		"КлассификаторАлкогольнойПродукцииЕГАИС.Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Получить представление валюты регламентированного учета.
// 
// Возвращаемое значение:
//  Строка - Представление валюты.
//
Функция ПредставлениеВалютыРегламентированногоУчета() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Получить представление документа поступления.
//
// Параметры:
//  Номер - Строка - номер документа поступления,
//  Дата - Дата - дата документа поступления.
// 
// Возвращаемое значение:
//  Строка - представление документа поступления.
//
Функция ПредставлениеДокументаПоступления(Номер, Дата) Экспорт
	
	//++ НЕ ЕГАИС
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("Дата", Дата);
	СтруктураШапки.Вставить("Номер", Номер);
	
	Возврат НСтр("ru='Поступление товаров'") + ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(СтруктураШапки);
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// В функции нужно реализовать алгоритм получения данных документа поступления по входящей ТТН.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на входящую ТТН.
// 
// Возвращаемое значение:
//  Структура - данные поступления. Структура со свойствами:
//   * ТекстПоступлениеТоваров - Строка - представление документа поступления товаров и услуг,
//   * ПоступлениеТоваровУслуг - ДокументСсылка - ссылка на документ поступления товаров и услуг.
//
Функция ДанныеДокументаПоступленияПоТТНЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Дата
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ТоварноТранспортнаяНакладнаяЕГАИС = &Основание
	|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Основание", ТТНВходящаяЕГАИС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстПоступлениеТоваров = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеДокументаПоступления(Выборка.Номер, Выборка.Дата);
		ПоступлениеТоваровУслуг = Выборка.Ссылка;
	Иначе
		ТекстПоступлениеТоваров = "";
		ПоступлениеТоваровУслуг = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстПоступлениеТоваров", ТекстПоступлениеТоваров);
	ВозвращаемоеЗначение.Вставить("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно реализовать алгоритм получения данных документа поступления.
//
// Параметры:
//  ДокументПоступления - ДокументСсылка - ссылка на документ поступления товаров.
// 
// Возвращаемое значение:
//  Структура - данные поступления. Структура со свойствами:
//   * ТекстПоступлениеТоваров - Строка - представление документа поступления товаров и услуг,
//   * ПоступлениеТоваровУслуг - ДокументСсылка - ссылка на документ поступления товаров и услуг.
//
Функция ДанныеДокументаПоступления(ДокументПоступления) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Дата
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ПоступлениеТоваров");
	
	Запрос.УстановитьПараметр("ПоступлениеТоваров", ДокументПоступления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстПоступлениеТоваров = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеДокументаПоступления(Выборка.Номер, Выборка.Дата);
		ПоступлениеТоваровУслуг = Выборка.Ссылка;
	Иначе
		ТекстПоступлениеТоваров = "";
		ПоступлениеТоваровУслуг = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстПоступлениеТоваров", ТекстПоступлениеТоваров);
	ВозвращаемоеЗначение.Вставить("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Записать связь документа поступления и входящей ТТН.
//
// Параметры:
//  ДокументПоступления - ДокументСсылка - ссылка на документ поступления товаров.
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на входящую ТТН.
//
Процедура ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДокументПоступления, ТТНВходящаяЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	ПоступлениеОбъект = ДокументПоступления.ПолучитьОбъект();
	Если ПоступлениеОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоступлениеОбъект.ТоварноТранспортнаяНакладнаяЕГАИС = ТТНВходящаяЕГАИС;
	Попытка
		ПоступлениеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	//-- НЕ ЕГАИС
	
КонецПроцедуры

// Записать связь документа перемещения и входящей ТТН.
//
// Параметры:
//  ДокументПеремещения - ДокументСсылка - ссылка на документ перемещения товаров.
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на входящую ТТН.
//
Процедура ЗаписатьСвязьДокументаПеремещенияИТТНЕГАИС(ДокументПеремещения, ТТНВходящаяЕГАИС) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Получить представление номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//  ХарактеристикаНоменклатуры - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка - ОпределяемыйТип.Упаковка - ссылка на упаковку.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		Строка(Номенклатура),
		Строка(ХарактеристикаНоменклатуры),
		Упаковка);
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя реквизита номенклатуры, содержащего ссылку на классификатор алкогольной продукции ЕГАИС.
//
// Возвращаемое значение:
//  Строка - имя реквизита.
//
Функция РеквизитНоменклатурыВидАлкогольнойПродукции() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат "ВидАлкогольнойПродукции";
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает текст запроса списка распоряжений на оформление документа передача в регистр №2 ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСпискаРаспоряженийНаОформлениеДокументаПередачаВРегистр2ЕГАИС() Экспорт
	
	ТекстЗапроса = "";
	
	//++ НЕ ЕГАИС
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток КАК КПередаче
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток > 0
	|	И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.ТорговыйОбъект.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)";
	//-- НЕ ЕГАИС
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя формы рабочего места по оформлению входящих ТТН.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС() Экспорт
	
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСписка";
	
	//++ НЕ ЕГАИС
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.РабочееМесто";
	//-- НЕ ЕГАИС
	
	Возврат ИмяФормы;
	
КонецФункции

// Возвращает таблицу входящих ТТН, заполненную по переданному отбору.
//
// Параметры:
//  Отбор - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект,
//   * ПоставщикКонтрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - поставщик,
//   * ТолькоБезПоступлений - Булево - если Истина, то в выборку должны попасть только те ТТН, на основании которых не введено поступление товаров,
//   * ТолькоСопоставленныеТовары - Булево - если Истина, то в выборку должны попасть только товары, сопоставленные с классификатором ЕГАИС,
//   * ТекущееПоступление - ДокументСсылка - ссылка на поступление товаров.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для выбора ТТН.
//
Функция ЗаполнитьСписокТТНДляВыбора(Отбор) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос;
	Если Отбор = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТТНВходящаяЕГАИС.Ссылка,
		|	ТТНВходящаяЕГАИС.Номер,
		|	ТТНВходящаяЕГАИС.Дата,
		|	ТТНВходящаяЕГАИС.Грузоотправитель,
		|	ТТНВходящаяЕГАИС.Поставщик,
		|	ТТНВходящаяЕГАИС.ТорговыйОбъект,
		|	ТТНВходящаяЕГАИС.Организация,
		|	ТТНВходящаяЕГАИС.СуммаДокумента
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ГДЕ
		|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Накладная.Ссылка
		|ПОМЕСТИТЬ
		|	ВТНакладные
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК Накладная
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
		|		ПО Накладная.Ссылка = Поступление.ТоварноТранспортнаяНакладнаяЕГАИС
		|ГДЕ
		|	НЕ Накладная.ПометкаУдаления
		|	И Накладная.ТорговыйОбъект = &ТорговыйОбъект
		|	И Накладная.Организация = &Организация
		|	И (Накладная.Поставщик.Контрагент = &ПоставщикКонтрагент ИЛИ Накладная.Грузоотправитель.Контрагент = &ПоставщикКонтрагент)
		|	И (Поступление.Ссылка ЕСТЬ NULL ИЛИ НЕ &ТолькоБезПоступлений ИЛИ Поступление.Ссылка = &ТекущееПоступление);
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Накладная.Ссылка
		|ПОМЕСТИТЬ
		|	ВТНеСопоставлено
		|ИЗ
		|	ВТНакладные КАК Накладная
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС.Товары КАК ТоварыНакладной
		|		ПО ТоварыНакладной.Ссылка = Накладная.Ссылка
		|ГДЕ
		|	НЕ ТоварыНакладной.АлкогольнаяПродукция.Сопоставлено И &ТолькоСопоставленныеТовары;
		|
		|ВЫБРАТЬ
		|	Накладная.Ссылка,
		|	ДанныеНакладной.Номер,
		|	ДанныеНакладной.Дата,
		|	ДанныеНакладной.Грузоотправитель,
		|	ДанныеНакладной.Поставщик,
		|	ДанныеНакладной.ТорговыйОбъект,
		|	ДанныеНакладной.Организация,
		|	ДанныеНакладной.СуммаДокумента
		|ИЗ
		|	ВТНакладные КАК Накладная
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ДанныеНакладной
		|		ПО ДанныеНакладной.Ссылка = Накладная.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНеСопоставлено КАК ВТНеСопоставлено
		|		ПО ВТНеСопоставлено.Ссылка = Накладная.Ссылка
		|ГДЕ
		|	ВТНеСопоставлено.Ссылка ЕСТЬ NULL ИЛИ НЕ &ТолькоСопоставленныеТовары
		|";
		
		Запрос.УстановитьПараметр("Организация"               , Отбор.Организация);
		Запрос.УстановитьПараметр("ТорговыйОбъект"            , Отбор.ТорговыйОбъект);
		Запрос.УстановитьПараметр("ПоставщикКонтрагент"       , Отбор.ПоставщикКонтрагент);
		Запрос.УстановитьПараметр("ТолькоБезПоступлений"      , Отбор.ТолькоБезПоступлений);
		Запрос.УстановитьПараметр("ТолькоСопоставленныеТовары", Отбор.ТолькоСопоставленныеТовары);
		Запрос.УстановитьПараметр("ТекущееПоступление"        , Отбор.ТекущееПоступление);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Получить количество возможных документов поступления товаров для сопоставления.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект,
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - поставщик.
// 
// Возвращаемое значение:
//  Число - количество документов.
//
Функция ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	КоличествоНакладных = 0;
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Организация = &Организация
	|	И ПоступлениеТоваровУслуг.Склад = &Склад
	|	И ПоступлениеТоваровУслуг.ЕстьАлкогольнаяПродукция
	|	И ПоступлениеТоваровУслуг.ТоварноТранспортнаяНакладнаяЕГАИС = ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)
	|	И ПоступлениеТоваровУслуг.Контрагент = &ПоставщикКонтрагент");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	КоличествоНакладных = Запрос.Выполнить().Выгрузить().Количество();
	//-- НЕ ЕГАИС
	
	Возврат КоличествоНакладных;
	
КонецФункции

// Возвращает признак разрешения розничной продажи без сопоставления с классификатором ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - если Истина, продажа разрешена, иначе - Ложь.
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	//++ НЕ ЕГАИС
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС.Получить();
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ЕГАИС
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Если ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда
			Документы.АктСписанияЕГАИС.ПодобратьСправки2(ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ТТНИсходящаяЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("ЗаполнитьТоварыКОформлению") Тогда
			
			ДокументОбъект.ОрганизацияЕГАИС = ДанныеЗаполнения.ОрганизацияЕГАИС;
			
			ТаблицаТовары = Новый ТаблицаЗначений;
			ТаблицаТовары.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
			ТаблицаТовары.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
			
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.Товары Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокаТЧ);
			КонецЦикла;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.АлкогольнаяПродукция,
			|	Т.Количество
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	&Товары КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Номенклатура   КАК Номенклатура,
			|	КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Характеристика КАК Характеристика,
			|	КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка              КАК Упаковка,
			|	втТовары.АлкогольнаяПродукция,
			|	втТовары.Количество,
			|	втТовары.Количество КАК КоличествоУпаковок
			|ИЗ
			|	втТовары КАК втТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Упаковки КАК КлассификаторАлкогольнойПродукцииЕГАИСУпаковки
			|		ПО втТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка
			|		И КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Упаковка = КлассификаторАлкогольнойПродукцииЕГАИСУпаковки.Ссылка.Номенклатура.ЕдиницаИзмерения
			|");
			Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Товары.Добавить(), Выборка);
			КонецЦикла;
			
			Документы.ПередачаВРегистр2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
			
		Иначе
			
			ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
			Документы.ПередачаВРегистр2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Документы.ВозвратИзРегистра2ЕГАИС.ПодобратьСправки2(ДокументОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ НЕ ЕГАИС
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		РозничныеПродажи.ПроверитьКорректностьЗаполненияАлкогольнойПродукции(
			Документы.ЧекЕГАИС.ДанныеДляЕГАИС(ДокументОбъект), ДокументОбъект,
			Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекЕГАИСВозврат") Тогда
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		РозничныеПродажи.ПроверитьКорректностьЗаполненияАлкогольнойПродукции(
			Документы.ЧекЕГАИСВозврат.ДанныеДляЕГАИС(ДокументОбъект), ДокументОбъект,
			Отказ);
		
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	//++ НЕ ЕГАИС
	ДокументОбъект.ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - Истина, если для организации можно использовать регистр №2.
//
Функция ИспользоватьРегистр2(ОрганизацияЕГАИС) Экспорт
	
	//++ НЕ ЕГАИС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииЕГАИС.ТорговыйОбъект.ТипСклада КАК ТипСклада
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
	|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОрганизацииЕГАИС.Ссылка = &ОрганизацияЕГАИС
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин");
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Записывает соответствие между номенклатурой и классификатором ЕГАИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	РозничныеПродажи.СопоставитьАлкогольнуюПродукциюСНоменклатурой(ДокументОбъект, "АлкогольнаяПродукция");
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Данные сопоставления организации ЕГАИС с объектами предприятия.
//
// Параметры:
//  КодВФСРАР - Строка - код организации в ФСРАР.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - ссылка на организацию в классификаторе ЕГАИС,
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - сопоставленная организация предприятия,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - сопоставленный торговый объект предприятия,
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ДанныеСопоставленияОрганизацииЕГАИС(КодВФСРАР) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Склады.Подразделение                         КАК Подразделение,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	КлассификаторОрганизацийЕГАИС.Контрагент     КАК Организация,
	|	КлассификаторОрганизацийЕГАИС.Код            КАК КодВФСРАР
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Склады.Ссылка = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &КодВФСРАР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка                                        КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(Данные.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(Данные.Организация.ИНН, """")                                      КАК ИНН,
	|	ЕСТЬNULL(Данные.ТорговыйОбъект, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))   КАК ТорговыйОбъект,
	|	ВЫБОР КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(Данные.Организация.КПП, """")
	|	ИНАЧЕ
	|		ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
	|	КОНЕЦ КАК КПП
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
	|			И Данные.Организация = РегистрацииВНалоговомОргане.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|			ПО КлассификаторОрганизацийЕГАИС.Код = Данные.КодВФСРАР");
	
	Запрос.УстановитьПараметр("КодВФСРАР", КодВФСРАР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", Выборка.ОрганизацияЕГАИС);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект",   Выборка.ТорговыйОбъект);
		ВозвращаемоеЗначение.Вставить("Организация",      Выборка.Организация);
		ВозвращаемоеЗначение.Вставить("ИНН",              Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП",              Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН и КПП переданной организации и торгового объекта.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на организацию, реквизиты которой нужно определить,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленнойОрганизации(Организация, ТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Организация,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Организация");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Склады.Подразделение КАК Подразделение,
		|	&ТорговыйОбъект      КАК ТорговыйОбъект,
		|	&Организация         КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
		|		ЕСТЬNULL(Данные.Организация.КПП, """")
		|	ИНАЧЕ
		|		ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|			И Данные.Организация = РегистрацииВНалоговомОргане.Организация");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация"   , Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для собственной организации,
//  СобственныйТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для собственного торгового объекта,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для сторонней организации,
//  СтороннийТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для стороннего торгового объекта.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(СобственнаяОрганизация, СобственныйТорговыйОбъект, СторонняяОрганизация, СтороннийТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	СобственнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект = Справочники.Склады.ПустаяСсылка();
	СторонняяОрганизация = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект = Справочники.Партнеры.ПустаяСсылка();
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП);
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно реализовать поиск контрагента и торгового объекта контрагента (партнера) по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентТорговыйОбъектПоИННКПП(ИНН, КПП) Экспорт
	
	//++ НЕ ЕГАИС
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Контрагент", РезультатПоиска.Ссылка);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект", РезультатПоиска.Партнер);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	//-- НЕ ЕГАИС
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	//++ НЕ ЕГАИС
	Результат = Ложь;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.Контрагент.Тип;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		Если МетаданныеТипа <> Неопределено Тогда
			Результат = ПравоДоступа("Добавление", МетаданныеТипа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права создания поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияПоступления() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровУслуг);
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права изменения поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право изменения поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоИзмененияПоступления() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	//-- НЕ ЕГАИС
	
	Возврат Ложь;
	
КонецФункции

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ЕГАИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Возвращает фактический адрес торгового объекта для чека ЕГАИС.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения адреса.
//
// Возвращаемое значение:
//  Строка - адрес торгового объекта.
//
Функция АдресТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТорговыйОбъект, Справочники.ВидыКонтактнойИнформации.АдресСклада);
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя документа поступления товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПоступлениеТоваров() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат "ПоступлениеТоваровУслуг";
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя реквизита, содержащего ссылку на входящую ТТН в документе поступления товаров.
//
Функция ИмяРеквизитаТТНВходящаяДокументаПоступлениеТоваров() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат "ТоварноТранспортнаяНакладнаяЕГАИС";
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя документа перемещения товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПеремещениеТоваров() Экспорт
	
	//++ НЕ ЕГАИС
	Возврат "ПеремещениеТоваров";
	//-- НЕ ЕГАИС
	
	Возврат "";
	
КонецФункции

// Возвращает имя реквизита, содержащего ссылку на входящую ТТН в документе перемещения товаров.
//
Функция ИмяРеквизитаТТНВходящаяДокументаПеремещениеТоваров() Экспорт
	
	Возврат "";
	
КонецФункции

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов) Экспорт
	
	//++ НЕ ЕГАИС
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ НЕ ЕГАИС
#Область ЗаполнениеНаОсновании

// Вызывается при вводе акта постановки на баланс на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаПостановкиНаБалансЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе акта списания на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияАктаСписанияЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе исходящей ТТН на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияТТНИсходящейЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возвратного чека на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияЧекаЕГАИСВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе возврата из регистра №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияВозвратаИзРегистра2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе передачи в регистр №2 на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
Процедура ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСУТ.ОбработкаЗаполненияПередачиВРегистр2ЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ ЕГАИС