
#Область ПрограммныйИнтерфейс

#Область МенюОтчеты

// Заполнить подменю отчеты в командной панели формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую требуется добавить отчеты.
//
Процедура ЗаполнитьПодменюОтчеты(Форма) Экспорт
	
	//++ НЕ ГИСМ
	МенюОтчеты.ПриСозданииНаСервере(Форма, Форма.Элементы.ПодменюОтчеты);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	//++ НЕ ГИСМ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	//++ НЕ ГИСМ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Заполнить подменю создать на основании в командной панели формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую требуется добавить команды ввода на основании.
//
Процедура ЗаполнитьПодменюСоздатьНаОсновании(Форма) Экспорт
	
	//++ НЕ ГИСМ
	ВводНаОсновании.ПриСозданииНаСервере(Форма, Форма.Элементы.ПодменюСоздатьНаОсновании);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	//++ НЕ ГИСМ
	ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой нужно установить связь,
//   ИмяПоляВвода - Строка - имя поля, связываемого с номенклатурой,
//   ПутьКДаннымНоменклатуры - Строка - путь к текущей номенклатуре в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	//++ НЕ ГИСМ
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ИмяПоляВводаЕдиницИзмерения, ПутьКПолюОтбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	                                                            ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//++ НЕ ГИСМ
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГИСМ
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	Если ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
		И ИнтеграцияЕГАИСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		ПараметрыЗаполненияРеквизитов.Вставить(
			"ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
		
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакЕдиницаИзмерения",
		Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
	//-- НЕ ГИСМ
	
	Возврат;
	
КонецПроцедуры

// В функции требуется определить признак использования характеристик для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования характеристик.
//
Функция ПризнакИспользованияХарактеристик(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	//-- НЕ ГИСМ
	
	Возврат Ложь;
	
КонецФункции

// В функции требуется определить признак использования упаковок для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - признак использования упаковок.
//
Функция ПризнакИспользованияУпаковок(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	//-- НЕ ГИСМ
	
	Возврат Ложь;
	
КонецФункции

// В функции нужно реализовать получение и возврат базовой единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//   ОпределяемыйТип.Упаковка - базовая единица измерения.
//
Функция БазоваяЕдиницаИзмеренияНоменклатуры(Номенклатура) Экспорт
	
	//++ НЕ ГИСМ
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	//-- НЕ ГИСМ
	
	Возврат Неопределено;
	
КонецФункции

// В функции нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию или контрагента.
//
// Возвращаемое значение:
//  Структура - структура с ключами: Наименование, ИНН, КПП.
//
Функция СведенияОбОрганизацииДляПечатиЧека(Организация) Экспорт
	
	Результат = Новый Структура("Наименование, ИНН, КПП", "", "", "");
	
	//++ НЕ ГИСМ
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(Результат, СведенияОбОрганизации);
	
	Результат.Наименование = СведенияОбОрганизации.ОфициальноеНаименование;
	//-- НЕ ГИСМ
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти