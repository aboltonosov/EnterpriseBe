
#Область ПрограммныйИнтерфейс

//Условное оформление для функционала, связанного с розницей
// 
// Параметры:
//  Форма - Форма - Содержит данную форму
//  ИмяДокумента  - Строка - имя документа.
//
Процедура УстановитьНастройкиВидимостиРеквизитовКомандДляРозницы(Форма, ИмяДокумента)Экспорт
	
	Если ИмяДокумента = "Поступление" Тогда
		Если  Форма.Элементы.Найти("ТоварыЦенаИзготовителя")  = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если  Форма.Элементы.Найти("ТоварыЦена")  = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Конецесли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	Команды = Форма.Команды;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	Если ИмяДокумента = "Поступление" Тогда
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыЦенаИзготовителя"].Имя);
	Иначе
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыЦена"].Имя);
    КонецЕсли;	
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыСтавкаТН"].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ГруппаСтавки"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыСуммаТН"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыРозничнаяЦенаБезНДС"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыРозничнаяСтавкаНДС"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыРозничнаяСуммаНДС"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыРозничнаяЦена"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыОкругление"].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы["ТоварыРозничнаяЦенаСУчетомОкругления"].Имя);

	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРозничныйСклад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение =  Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РассчитыватьРеквизитыРозницы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение =  Истина;

	Если ИмяДокумента = "Поступление" Тогда
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение =   Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры // ()

#Область ПроцедурыИФункцииПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа установки цен номенклатуры
// Вызывается из процедуры документа "ОбработкаПроведения"
//
// Параметры:
//  ДокументТорговаяНадбавка - ДокументОбъект - Документ ТорговаяНадбавка, для которого необходимо осуществить проверки
//  Отказ                - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаТорговаяНадбавка(ДокументТорговаяНадбавка, Отказ) Экспорт
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	МассивПроверок    = Новый Массив();
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("КорректностьТоваров");
	МассивПроверок.Добавить("НаличиеУслуг");
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаРегистрацияТорговыхНадбавок(ТекстЗапроса,ПараметрыЗапроса,ДокументТорговаяНадбавка);
			
		ИначеЕсли ТекЭлемент = "КорректностьТоваров" Тогда
			
			СформироватьЗапросКорректностьТоваровДляРегистрацияТорговыхНадбавок(ТекстЗапроса);
					
		ИначеЕсли ТекЭлемент = "НаличиеУслуг" Тогда
			
			СформироватьЗапросНаличиеУслугДляРегистрацияТорговыхНадбавок(ТекстЗапроса);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
	
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацияТорговыхНадбавок(Выборка, ДокументТорговаяНадбавка, Отказ);
						
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслуг" Тогда
			
			СообщитьОбОшибкахНаличиеУслугДляРегистрацияТорговыхНадбавок(Выборка, ДокументТорговаяНадбавка, Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормированияЗапросовПроверкиТорговаяНадбавка
// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
// ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса      - Структура - структура, содержащая параметры запроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, к которому необходимость сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаРегистрацияТорговыхНадбавок(ТекстЗапроса, ПараметрыЗапроса,ДокументТорговаяНадбавка) 	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|;
		|";
		
		ПараметрыЗапроса.Вставить("Товары", ДокументТорговаяНадбавка.Товары.Выгрузить(, "НомерСтроки,Номенклатура,Характеристика"));
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаТорговойНадбавки()

// Формирует запрос для проверки корректности заполнения тч Товары документа Торговая надбавка
//
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацияТорговыхНадбавок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
		|	ДокументТовары.Номенклатура          КАК Номенклатура,
		|	ДокументТовары.Характеристика        КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляТорговойНадбавки()

// Формирует текст запроса для проверки наличия услуг в документе ТОрговая надбавка
//
// Параметры:
// ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеУслугДляРегистрацияТорговыхНадбавок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	
КонецПроцедуры // СформироватьЗапросНаличиеУслугДляТорговаяНадбавка()

Процедура ОтразитьТорговыеНадбавки(ДополнительныеСвойства,
	                                         Движения,
	                                         Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТорговыеНадбавки;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТорговыеНадбавки            = Движения.ТорговыеНадбавки;
	ТорговыеНадбавки.Записывать = Истина;
	ТорговыеНадбавки.Загрузить(Таблица);
	
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахТорговаяНадбавка

Процедура СообщитьПользователюОбОшибкеДляРегистрацияТорговыхНадбавок(ТекстОшибки, ДокументУстановкиЦен, НомерСтроки, Поле, Отказ)
	
	Если Найти(Строка(ДокументУстановкиЦен.Метаданные().ПолноеИмя()), "Обработка.") <> 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, Поле),
			,
			Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, Поле),
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документа УстановкаЦенНоменклатурыПоставщика
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументТорговаяНадбавка  - ДокументОбъект.ТорговаяНадбавка - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУслугДляРегистрацияТорговыхНадбавок(Выборка,
	                                                               ДокументТорговойНадбавки,
	                                                               Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='В документе нельзя указывать номенклатуру с типом ""Услуга"" (строка %НомерСтроки% списка ""Товары"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		СообщитьПользователюОбОшибкеДляРегистрацияТорговыхНадбавок(ТекстОшибки, ДокументТорговойНадбавки, Выборка.НомерСтроки, "Номенклатура", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахНаличиеУслугДляТорговойНадбавки()

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументРегистрацияТорговойНадбавки  - ДокументОбъект.РегистрацияТорговыхНадбавок - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацияТорговыхНадбавок(Выборка,
	                                                            ДокументРегистрацияТорговойНадбавки,
	                                                            Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияНоменклатуры Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке ""%НомерСтроки%"" списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументРегистрацияТорговойНадбавки.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
			КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХарактеристики Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Характеристика"" в строке ""%НомерСтроки%"" списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументРегистрацияТорговойНадбавки.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Характеристика"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьТоваровДляРегистрацияТорговыхНадбавок()

#КонецОбласти

#Область ЗаполнениеРозничныхСтавокВТаблице

// Заполняет розничные ставки
Процедура ЗаполнитьРозничныеСтавкиВТабличнойЧасти(ТабличнаяЧасть, Склад, Дата,  СтруктураДействий = Неопределено) Экспорт
	
	Перем СтруктураЦены;

	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	                      |	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	                      |	ТабличнаяЧасть.Характеристика КАК Характеристика
	                      |ПОМЕСТИТЬ ТабличнаяЧасть
	                      |ИЗ
	                      |	&ТабличнаяЧасть КАК ТабличнаяЧасть
	                      |ГДЕ
	                      |	ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	                      |	СрезПоследнихТорговаяНадбавка.Надбавка КАК СтавкаТН
	                      |ИЗ
	                      |	ТабличнаяЧасть КАК ТабличнаяЧасть
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеНадбавки.СрезПоследних(
	                      |				&Дата,
	                      |				(Номенклатура, Склад, Характеристика) В
	                      |					(ВЫБРАТЬ
	                      |						ТабличнаяЧасть.Номенклатура,
	                      |						&Склад,
	                      |						ТабличнаяЧасть.Характеристика
	                      |					ИЗ
	                      |						ТабличнаяЧасть КАК ТабличнаяЧасть)) КАК СрезПоследнихТорговаяНадбавка
	                      |		ПО ТабличнаяЧасть.Номенклатура = СрезПоследнихТорговаяНадбавка.Номенклатура
	                      |			И ТабличнаяЧасть.Характеристика = СрезПоследнихТорговаяНадбавка.Характеристика
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки");
		
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть.Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", Дата);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатЗапроса[1].Выбрать();
		
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			
			Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
				
				ТекСтрока.СтавкаТН = Выборка.СтавкаТН;
				
				
				Если СтруктураДействий <> Неопределено Тогда
					
					Если СтруктураДействий.Свойство("ЗаполнитьРозничнуюСтавкуНДС") Тогда
						ЗаполнитьРозничнуюСтавкуНДСВСтрокеТЧ(ТекСтрока, СтруктураДействий);
					КонецЕсли;	
					
					Если СтруктураДействий.Свойство("ЗаполнитьЦену", СтруктураЦены) Тогда
						
						СтруктураЦены.Вставить("Номенклатура", ТекСтрока.Номенклатура);
						СтруктураЦены.Вставить("Характеристика", ТекСтрока.Характеристика);
						СтруктураЦены.Вставить("Упаковка", ТекСтрока.Упаковка);
						
						ТекСтрока.Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураЦены);
						
					КонецЕсли;
					
					
					Если СтруктураДействий.Свойство("РассчитатьРозничнуюЦену") Тогда
						РассчитатьРозничнуюЦенуВСтрокеТЧ(ТекСтрока, СтруктураДействий);
					КонецЕсли;
					
				КонецЕсли;
				
				Выборка.Сбросить();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура назначает торговые надбавки в табличной части
//
Процедура НазначитьРозничныеСтавки(Объект, ИмяТЧ, СтавкаТН, ИмяКолонкиСтавкаТН, ИмяДокумента, ВидЦен, ВыделенныеСтроки = Неопределено, ТолькоДляАктивныхСтрок = Ложь) Экспорт
		
	Если ВыделенныеСтроки <> Неопределено Тогда
		СтрокиТабличнойЧасти = Новый Массив();
		
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекСтрока);
			СтрокиТабличнойЧасти.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	Иначе
		Если ТолькоДляАктивныхСтрок Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Активность", Истина));
		Иначе
			СтрокиТабличнойЧасти = Объект[ИмяТЧ];
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из СтрокиТабличнойЧасти Цикл
		ТекущаяСтрока[ИмяКолонкиСтавкаТН] =  СтавкаТН;
		
		Если ИмяДокумента = "Поступление" 
			ИЛИ ИмяДокумента = "Перемещение" Тогда
			
			СтруктураПараметров = Новый Структура("ИмяДокумента,ЦенаВключаетНДС, ВидЦен",ИмяДокумента, ?(ИмяДокумента = "Поступление", 
				Объект.ЦенаВключаетНДС, Ложь), ВидЦен);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("РассчитатьРозничнуюЦену", СтруктураПараметров);
			РозничныеПродажи_Локализация.РассчитатьРозничнуюЦенуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РозничныеСтавкиЦеныВСтрокеТЧ

Процедура ЗаполнитьСтавкуТорговойНадбавкиВСтрокеТЧ(ТекущаяСтрока, ПараметрСтруктурыДействий, КэшированныеЗначения)Экспорт 
	
	Перем ПараметрыСтавкиТН;
	Если ПараметрСтруктурыДействий.Свойство("ЗаполнитьСтавкуТорговойНадбавки",ПараметрыСтавкиТН) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТорговыеНадбавкиСрезПоследних.Надбавка КАК СтавкаТорговойНадбавки
		|ИЗ
		|	РегистрСведений.ТорговыеНадбавки.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|			Номенклатура = &Номенклатура
		|				И Склад = &Склад
		|				И Характеристика = &Характеристика) КАК ТорговыеНадбавкиСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", ПараметрыСтавкиТН.Дата);
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Склад", ПараметрыСтавкиТН.Склад);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Если  ВыборкаДетальныеЗаписи.Следующий() ТОгда
			 ТекущаяСтрока.СтавкаТН = ВыборкаДетальныеЗаписи.СтавкаТорговойНадбавки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРозничнуюСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если  СтруктураДействий.Свойство("ЗаполнитьРозничнуюСтавкуНДС") Тогда
		 ТекущаяСтрока.РозничнаяСтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).РозничнаяСтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьРозничнуюЦенуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)Экспорт
	
	Перем  ЦенаВключаетНДС;
	Перем  Параметры;
	Перем  ВидЦен;

	Если СтруктураДействий.Свойство("РассчитатьРозничнуюЦену", Параметры) Тогда
		
		Если Параметры = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если НЕ Параметры.Свойство("ЦенаВключаетНДС", ЦенаВключаетНДС)  Тогда
			ЦенаВключаетНДС = Ложь;
		КонецЕсли;
		
		//поступление товаров услуг	
		РасчетнаяЦена = ПолучитьРасчетнуюЦенуДляТорговойНадбавки(ТекущаяСтрока, Параметры.ИмяДокумента, ЦенаВключаетНДС);
		ТекущаяСтрока.СуммаТН =  РасчетнаяЦена * ТекущаяСтрока.СтавкаТН/100;
		СтавкаЧислом = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.РозничнаяСтавкаНДС);
		ТекущаяСтрока.РозничнаяСуммаНДС = (РасчетнаяЦена+ТекущаяСтрока.СуммаТН)*СтавкаЧислом;
		ТекущаяСтрока.РозничнаяЦенаБезНДС =  РасчетнаяЦена +ТекущаяСтрока.СуммаТН ; 
		ТекущаяСтрока.РозничнаяЦена =  РасчетнаяЦена + ТекущаяСтрока.СуммаТН + ТекущаяСтрока.РозничнаяСуммаНДС;
		ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления = ТекущаяСтрока.РозничнаяЦена;
	
		Если НЕ Параметры.Свойство("ВидЦен", ВидЦен) ИЛИ Не ЗначениеЗаполнено(ВидЦен) Тогда 
			ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления = Окр(ТекущаяСтрока.РозничнаяЦена, 2);
		Иначе
			ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления = РозничныеПродажиВызовСервера_Локализация.ОкруглитьЦенуПоПравиламЦенообразования(ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления, Параметры.ВидЦен);
		КонецЕсли;

		ТекущаяСтрока.Округление = ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления -  ТекущаяСтрока.РозничнаяЦена;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьСтавкуСуммуТорговойНадбавкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем  ЦенаВключаетНДС;
	Перем  Параметры;
	
	Если СтруктураДействий.Свойство("РассчитатьСтавкуСуммуТорговойНадбавки", Параметры) Тогда
		
		Если Параметры = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если НЕ Параметры.Свойство("ЦенаВключаетНДС", ЦенаВключаетНДС)  Тогда
			ЦенаВключаетНДС = Ложь;
		КонецЕсли;

		РасчетнаяЦена = ПолучитьРасчетнуюЦенуДляТорговойНадбавки(ТекущаяСтрока, Параметры.ИмяДокумента, ЦенаВключаетНДС);
		СтавкаЧислом = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.РозничнаяСтавкаНДС);
		ТекущаяСтрока.РозничнаяСуммаНДС =  ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления*СтавкаЧислом/(1+СтавкаЧислом);
		ТекущаяСтрока.СуммаТН =  ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления- ТекущаяСтрока.РозничнаяСуммаНДС-РасчетнаяЦена;
		ТекущаяСтрока.СтавкаТН =  ТекущаяСтрока.СуммаТН*100/РасчетнаяЦена;
		
		ТекущаяСтрока.Округление = 0;
		ТекущаяСтрока.РозничнаяЦена = 0;
		ТекущаяСтрока.РозничнаяЦенаБезНДС = ТекущаяСтрока.РозничнаяЦенаСУчетомОкругления - ТекущаяСтрока.РозничнаяСуммаНДС;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьРасчетнуюЦенуДляТорговойНадбавки(ТекущаяСтрока, ИмяДокумента, ЦенаВключаетНДС)Экспорт
	
	РасчетнаяЦена = 0;	
	
	Если ИмяДокумента = "Поступление" ТОгда 
		Если  ТекущаяСтрока.ЦенаСоСкидкой  = 0 Тогда
			Если  ЦенаВключаетНДС  Тогда
				РасчетнаяЦена = (ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС)/ТекущаяСтрока.КоличествоУпаковок;
			Иначе
				РасчетнаяЦена =  ТекущаяСтрока.Цена;
			КонецЕсли;	
		Иначе
			Если ТекущаяСтрока.ЦенаИзготовителя = 0 ИЛИ ТекущаяСтрока.ЦенаИзготовителя = ТекущаяСтрока.Цена Тогда
				РасчетнаяЦена = ТекущаяСтрока.ЦенаСоСкидкой;
			Иначе
				РасчетнаяЦена = ТекущаяСтрока.ЦенаИзготовителя;
			КонецЕсли;	 
		КонецЕсли;
	Иначе
		РасчетнаяЦена = ТекущаяСтрока.Цена
	КонецЕсли;	
	
	Возврат РасчетнаяЦена;
	
КонецФункции

Процедура ЗаполнитьЦенуИзЦеныИзготовителяВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если  СтруктураДействий.Свойство("ЗаполнитьЦенуИзЦеныИзготовителя")  Тогда
		 ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаИзготовителя;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСклады(Склад) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
		|	И Склады.Родитель = &Родитель";
		
	Запрос.УстановитьПараметр("Родитель", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 	

КонецФункции

#КонецОбласти

#КонецОбласти


#Область РКО

Процедура ПроверитьПробитиеЧекаККМ(Источник, ТаблицаДенежныеСредства, Отказ, Наличные) Экспорт
	
	Если Источник.ПробитЧек И НЕ Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КассоваяСмена.Ссылка,
			|	КассоваяСмена.НачалоКассовойСмены,
			|	КассоваяСмена.ОкончаниеКассовойСмены,
			|	КассоваяСмена.Статус,
			|	КассоваяСмена.КассаККМ
			|ИЗ
			|	Документ.КассоваяСмена КАК КассоваяСмена
			|ГДЕ
			|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
			|	И КассоваяСмена.Статус = &СтатусКассовойСмены
			|	И КассоваяСмена.КассаККМ = &КассаККМ";
		
		Запрос.УстановитьПараметр("НачалоКассовойСмены", Источник.Дата);
		Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыКассовойСмены.Открыта);
		Запрос.УстановитьПараметр("КассаККМ", Источник.КассаККМ);
		
		РезультатЗапроса = Запрос.Выполнить();
	
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = НСтр("ru='Нет открытой кассовой смены.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);  		
		Иначе
		    //добавить движения по кассе ККМ
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Источник.Валюта,
			Источник.Валюта,
			Источник.Дата);

			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
			Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", Коэффициенты.КоэффициентПересчетаВВалютуУПР);
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);

			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДанныеДокумента.Дата КАК Период,
				|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.КассаККМ КАК КассаККМ,
				|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДанныеДокумента.СуммаДокумента КАК Сумма,
				|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
				|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
				|	0 КАК КПоступлениюВКассуККМ
				|ПОМЕСТИТЬ ВТ
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
				|ГДЕ
				|	ДанныеДокумента.Ссылка = &Ссылка
				|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
				|	И ДанныеДокумента.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеДокумента.Дата,
				|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
				|	ДанныеДокумента.Организация,
				|	ДанныеДокумента.КассаККМ,
				|	ДанныеДокумента.ХозяйственнаяОперация,
				|	0,
				|	0,
				|	0,
				|	ДанныеДокумента.СуммаДокумента
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
				|ГДЕ
				|	ДанныеДокумента.Ссылка = &Ссылка
				|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
				|	И НЕ ДанныеДокумента.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДенежныеСредстваВКассахККМОстатки.Организация,
				|	ДенежныеСредстваВКассахККМОстатки.КассаККМ,
				|	ДенежныеСредстваВКассахККМОстатки.СуммаОстаток,
				|	ДенежныеСредстваВКассахККМОстатки.СуммаУпрОстаток,
				|	ДенежныеСредстваВКассахККМОстатки.СуммаРеглОстаток
				|ПОМЕСТИТЬ ВТ2
				|ИЗ
				|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&Дата, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ.Период,
				|	ВТ.ВидДвижения,
				|	ВТ.Организация,
				|	ВТ.КассаККМ,
				|	ВТ.ХозяйственнаяОперация,
				|	ВТ.Сумма,
				|	ВТ.СуммаРегл,
				|	ВТ.СуммаУпр,
				|	ВТ.КПоступлениюВКассуККМ,
				|	ВТ2.СуммаОстаток,
				|	ВТ2.СуммаУпрОстаток,
				|	ВТ2.СуммаРеглОстаток,
				|	ВТ2.СуммаРеглОстаток - ВТ.СуммаРегл КАК Разница
				|ИЗ
				|	ВТ КАК ВТ
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ2 КАК ВТ2
				|		ПО ВТ.Организация = ВТ2.Организация
				|			И ВТ.КассаККМ = ВТ2.КассаККМ";

			Запрос.УстановитьПараметр("Дата", ТекущаяДата());
			Запрос.УстановитьПараметр("КассаККМ", Источник.КассаККМ);
			
			ТаблицаДенежныеСредства = Запрос.Выполнить().Выгрузить();
			
			Отказ = ТаблицаДенежныеСредства[0].Разница < 0;
			
			Если НЕ Отказ Тогда	
				Если Наличные Тогда
					ТаблицаДенежныеСредства.Очистить();
				КонецЕсли; 
			Иначе
				ТекстОшибки = НСтр("ru='Недостаточно средств в кассе %1'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", Источник.КассаККМ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			КонецЕсли; 

		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
 

#КонецОбласти


#Область Локализация

Процедура ПересчитатьЦенуСУчетомСкидокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	ИмяКоличества = Неопределено;
	ТекущаяСтрокаСкидка = 0;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) 
		ИЛИ СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки")
		ИЛИ СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") Тогда
			Если Не ТекущаяСтрока.Свойство(ИмяКоличества) Тогда
				ИмяКоличества = "Количество";
			КонецЕсли;	
		Иначе
			Попытка
				Если Не ТекущаяСтрока.Свойство(ИмяКоличества) Тогда
					ИмяКоличества = "Количество";
				КонецЕсли;
			
			Исключение
			
			КонецПопытки;
			
		КонецЕсли;	
			
		Сумма           = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
		СуммаСкидки     = 0;
		СуммаСкидкиЦены = 0;
							
		Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
			СуммаСкидки = ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100;
			СуммаСкидкиЦены = ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") Тогда
			Если ТекущаяСтрока.Свойство("Скидка") И ТекущаяСтрока.Скидка <> Неопределено Тогда
				ТекущаяСтрокаСкидка = ТекущаяСтрока.Скидка;
			КонецЕсли;	
		Иначе
			Попытка
				Если ТекущаяСтрока.Скидка <> 0 ТОгда
					ТекущаяСтрокаСкидка = ТекущаяСтрока.Скидка;	
				КонецЕсли;	
			Исключение
			     
			КонецПопытки;
				
		КонецЕсли;	
			
		Если ТекущаяСтрокаСкидка = 0  Тогда
			СуммаСкидки = СуммаСкидки + ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100;
			СуммаСкидкиЦены = СуммаСкидкиЦены + ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100;
		Иначе
			СуммаСкидки = СуммаСкидки + ТекущаяСтрокаСкидка * ТекущаяСтрока[ИмяКоличества]; 
		КонецЕсли; 
				
		ТекущаяСтрока.Сумма = Сумма - Окр(СуммаСкидки, 2);
		
		ЕстьЦенаСоСкидкой = Ложь;
		
		Попытка
			ЕстьЦенаСоСкидкой = ТекущаяСтрока.Свойство("ЦенаСоСкидкой");
		Исключение
		    
		КонецПопытки;
		
		Если НЕ ЕстьЦенаСоСкидкой Тогда
			Попытка
				ЕстьЦенаСоСкидкой = ТипЗнч(ТекущаяСтрока.ЦенаСоСкидкой) = Тип("Число");
			
			Исключение
			
			КонецПопытки;
			
		КонецЕсли; 
		
		Если ЕстьЦенаСоСкидкой Тогда
			Если СуммаСкидкиЦены <> 0 Тогда
				ТекущаяСтрока.ЦенаСоСкидкой = Окр(ТекущаяСтрока.Цена - СуммаСкидкиЦены, 2);	
			ИначеЕсли ТекущаяСтрокаСкидка <> 0   Тогда
				ТекущаяСтрока.ЦенаСоСкидкой = ТекущаяСтрока.Цена - ТекущаяСтрокаСкидка;	
			Иначе 
				ТекущаяСтрока.ЦенаСоСкидкой = 0;
			КонецЕсли;
			
			Если ТекущаяСтрокаСкидка <> 0 и ТекущаяСтрока.ЦенаСоСкидкой <> 0 Тогда
				ТекущаяСтрока.Скидка = Окр(ТекущаяСтрокаСкидка, 2);
				ТекущаяСтрока.ЦенаСоСкидкой = Окр(ТекущаяСтрока.ЦенаСоСкидкой, 2);		
			КонецЕсли;
		КонецЕсли; 	  		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьРозничныеСтавкиНДС(ЭтаФорма, Объект) Экспорт

	Если ЭтаФорма["ЭтоРозничныйСклад"] И ЭтаФорма["РассчитыватьРеквизитыРозницы"] И  Не ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьРозничнуюСтавкуНДС");
		СтруктураДействий.Вставить("РассчитатьРозничнуюЦену", Новый Структура("ИмяДокумента,ЦенаВключаетНДС, ВидЦен","Поступление", Объект.ЦенаВключаетНДС, ЭтаФорма["РозничныйВидЦен"]));
		РозничныеПродажи_Локализация.ЗаполнитьРозничныеСтавкиВТабличнойЧасти(Объект.Товары, Объект.Склад,Объект.Дата,  СтруктураДействий);
	КонецЕсли;	

КонецПроцедуры
 
Процедура ЗаполнитьСтруктуруТорговыеНадбавкиРозничныйНДС(Объект, ЭтаФорма, СтруктураДействий) Экспорт

	Если ЭтаФорма.РассчитыватьРеквизитыРозницы И ЭтаФорма.ЭтоРозничныйСклад Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуТорговойНадбавки", Новый Структура("Склад,Дата",Объект.Склад, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьРозничнуюСтавкуНДС");
		СтруктураДействий.Вставить("РассчитатьРозничнуюЦену", Новый Структура("ИмяДокумента, ЦенаВключаетНДС, ВидЦен","Поступление", Объект.ЦенаВключаетНДС, ЭтаФорма["РозничныйВидЦен"]));
    КонецЕсли;

КонецПроцедуры

#КонецОбласти 

 

#Область ГруппаСкладов

Процедура ГруппаСкладов(СкладГруппа, Склад, ЭтаФорма, Объект) Экспорт

	Если СкладГруппа Тогда
		ЭтаФорма.ЭтоРозничныйСклад = ПроверитьСклады(Объект.Склад); 
	Иначе
		ЭтаФорма.ЭтоРозничныйСклад = Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
		Если ЭтаФорма["ЭтоРозничныйСклад"] И ЭтаФорма["РассчитыватьРеквизитыРозницы"] Тогда
			ЭтаФорма["РозничныйВидЦен"] = Объект.Склад.РозничныйВидЦены;
		КонецЕсли;		
	КонецЕсли;	

КонецПроцедуры
	
#КонецОбласти 

#Область ПоступлениеТоваровУслуг

Процедура ПриЧтенииСозданииНаСервере(ЭтаФорма, Объект) Экспорт
	
	РозничныеПродажиВызовСервера_Локализация.ДобавитьРеквизитЭтоРозничныйСклад(ЭтаФорма);
	ЭтаФорма["ЭтоРозничныйСклад"] = Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	РозничныеПродажиВызовСервера_Локализация.ДобавитьРеквизитРассчитыватьРеквизитыРозницы(ЭтаФорма);
	ЭтаФорма["РассчитыватьРеквизитыРозницы"] = ПолучитьФункциональнуюОпцию("ИспользоватьТорговыеНадбавки");	
    РозничныеПродажиВызовСервера_Локализация.ДобавитьРеквизитРозничныйВидЦен(ЭтаФорма);	
	
	Если ЭтаФорма["ЭтоРозничныйСклад"] И ЭтаФорма["РассчитыватьРеквизитыРозницы"] Тогда
		ЭтаФорма["РозничныйВидЦен"] = Объект.Склад.РозничныйВидЦены;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруРассчитатьРозничнуюЦену(Объект, ЭтаФорма, СтруктураДействий) Экспорт

	Если ЭтаФорма.РассчитыватьРеквизитыРозницы И ЭтаФорма.ЭтоРозничныйСклад Тогда
		СтруктураДействий.Вставить("РассчитатьРозничнуюЦену",  Новый Структура("ИмяДокумента,ЦенаВключаетНДС, ВидЦен","Поступление", Объект.ЦенаВключаетНДС, ЭтаФорма["РозничныйВидЦен"]));
	КонецЕсли;	

КонецПроцедуры
#КонецОбласти 

#Область ПецатьЦенников

Функция РассчитатьБазовуюЦену(СтрокаТовары) Экспорт

	ЦенаБазовая = 0;
	БазоваяЕдиницаИзмерения = Строка(РассчитатьБазовуюЕдиницуИзмерения(СтрокаТовары));
	
	Если СтрокаТовары.Номенклатура.ИспользоватьУпаковки И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
		Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда
			Если СтрокаТовары.УпаковкаЕдиницаИзмерения.Числитель <> 1 И СтрокаТовары.УпаковкаЕдиницаИзмерения.Числитель <> 1000 Тогда
				Если БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда
					ЦенаБазовая = Окр(100 * СтрокаТовары.Цена / СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель, 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда	
				    ЦенаБазовая = Окр(СтрокаТовары.Цена * 0.1 / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда	
				    ЦенаБазовая = Окр((СтрокаТовары.Цена * 1000) / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель * СтрокаТовары.Упаковка.Числитель), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда
					ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель) / СтрокаТовары.Упаковка.Числитель, 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 л" Тогда
					Если СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111"  Тогда
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель / 1000), 2);		
					Иначе				
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель) / СтрокаТовары.Упаковка.Числитель, 2);
					КонецЕсли; 		    	
				КонецЕсли; 
			Иначе
				Если БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда
					ЦенаБазовая = Окр(100 * СтрокаТовары.Цена / СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель, 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда	
				    ЦенаБазовая = Окр(СтрокаТовары.Цена * 0.1 / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда	
				    ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель / 1000), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда
					ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель) / СтрокаТовары.Упаковка.Числитель, 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 л" Тогда
					Если СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111"  Тогда
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / СтрокаТовары.Упаковка.Числитель / 1000), 2);		
					Иначе				
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель) / СтрокаТовары.Упаковка.Числитель, 2);
					КонецЕсли; 	
					
				Иначе
					ЦенаБазовая = СтрокаТовары.Цена;
				КонецЕсли; 

			КонецЕсли;
			
		ИначеЕсли СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
			Если БазоваяЕдиницаИзмерения = "100 мл" Тогда
				ЦенаБазовая = Окр(100 * СтрокаТовары.Цена / СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель / СтрокаТовары.УпаковкаЕдиницаИзмерения.Числитель, 2);
			ИначеЕсли БазоваяЕдиницаИзмерения = "1 л" И СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111" Тогда	
			    ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель / СтрокаТовары.УпаковкаЕдиницаИзмерения.Числитель / 1000), 2);
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда
		
			Если СтрокаТовары.Номенклатура.ВесЧислитель <> 1 И СтрокаТовары.Номенклатура.ВесЧислитель <> 1000 Тогда
				Если БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда
					ЦенаБазовая = Окр(100 * СтрокаТовары.Цена / СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "100 г" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда	
				    ЦенаБазовая = Окр(СтрокаТовары.Цена * 0.1 / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" Тогда	
				    ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / 1000), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 кг" И СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" Тогда
					ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель), 2);
					
				ИначеЕсли БазоваяЕдиницаИзмерения = "1 л" Тогда
					Если СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111"  Тогда
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель / 1000), 2);		
					Иначе				
						ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель), 2);
					КонецЕсли; 		    	
				КонецЕсли; 
			Иначе
				ЦенаБазовая = СтрокаТовары.Цена;
			КонецЕсли;
		
		ИначеЕсли СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
			Если БазоваяЕдиницаИзмерения = "100 мл" Тогда
				ЦенаБазовая = Окр(100 * СтрокаТовары.Цена / СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 2);
			ИначеЕсли БазоваяЕдиницаИзмерения = "1 л" И СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111" Тогда	
			    ЦенаБазовая = Окр(СтрокаТовары.Цена / (СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель / 1000), 2);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
			
	Возврат БазоваяЕдиницаИзмерения + " = " + ЗаполнитьЦенуРубКоп(ЦенаБазовая);
	
КонецФункции // ()

Функция ЗаполнитьЦенуРубКоп(Цена) Экспорт

	ЦенаРуб = ЦЕЛ(Цена);
	ЦенаКоп = (Цена - ЦЕЛ(Цена)) * 100;
	
	ТекстЦена = ?(ЦенаРуб = 0, "", Строка(ЦенаРуб) + " руб. ");
	ЦенаКоп = ?(ЦенаКоп = 0, "00", Строка(ЦенаКоп));
	Если СтрДлина(ЦенаКоп) = 1 Тогда
		ЦенаКоп = "0" + ЦенаКоп;
	КонецЕсли; 
	ТекстЦена = ТекстЦена + ЦенаКоп + " коп.";	

	Возврат ТекстЦена;
	
КонецФункции // ()
 

Функция РассчитатьВесУпаковки(СтрокаТовары, ПараметрВесУпаковки = Ложь) Экспорт
	
	Если ПараметрВесУпаковки Тогда
		//заполняем параметр веса
		БазоваяЕдиницаИзмерения = Строка(РассчитатьБазовуюЕдиницуИзмерения(СтрокаТовары));
		
		Если СтрокаТовары.Номенклатура.ИспользоватьУпаковки И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда
		
			    Если БазоваяЕдиницаИзмерения = "1 л" ИЛИ БазоваяЕдиницаИзмерения = "100 мл" Тогда
					Возврат Строка(Окр(СтрокаТовары.Упаковка.Числитель * СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Наименование;
				Иначе
					Возврат Строка(Окр(СтрокаТовары.Упаковка.Числитель * СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Наименование;
				КонецЕсли;
				
			ИначеЕсли СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
				 Если БазоваяЕдиницаИзмерения = "1 л" ИЛИ БазоваяЕдиницаИзмерения = "100 мл" Тогда
					Возврат Строка(Окр(СтрокаТовары.Упаковка.Числитель * СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Наименование;
				Иначе
					Возврат Строка(Окр(СтрокаТовары.Упаковка.Числитель * СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Наименование;
				КонецЕсли;	
			КонецЕсли;
	
		КонецЕсли;
				
		Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда
		
		    Если БазоваяЕдиницаИзмерения = "1 л" ИЛИ БазоваяЕдиницаИзмерения = "100 мл" Тогда
				Возврат Строка(Окр(СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Наименование;
			Иначе
				Возврат Строка(Окр(СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Наименование;
			КонецЕсли;
			
		ИначеЕсли СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
			 Если БазоваяЕдиницаИзмерения = "1 л" ИЛИ БазоваяЕдиницаИзмерения = "100 мл" Тогда
				Возврат Строка(Окр(СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Наименование;
			Иначе
				Возврат Строка(Окр(СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 3)) + " " + СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Наименование;
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		//расчет базовой цены				
		Если СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
			Возврат Окр(СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель, 3);
			
		ИначеЕсли СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда  
			Возврат Окр(СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель, 3);

		КонецЕсли;
	КонецЕсли; 
	
КонецФункции // ()

Функция РассчитатьБазовуюЕдиницуИзмерения(СтрокаТовары) Экспорт
	
	Если СтрокаТовары.Номенклатура.ИспользоватьУпаковки И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда		
		
		Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда 
		
			РасчетныйВес = СтрокаТовары.Упаковка.Числитель * СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель;
			
			Если СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" И РасчетныйВес > 0.25
				ИЛИ СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" И РасчетныйВес > 250 Тогда
				Возврат "1 кг";
			Иначе	
			    Возврат "100 г";
			КонецЕсли; 
					
		КонецЕсли; 	
		
	Иначе
		Если СтрокаТовары.Номенклатура.ОбъемИспользовать И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения) Тогда
		
			Объем = СтрокаТовары.Номенклатура.ОбъемЧислитель / СтрокаТовары.Номенклатура.ОбъемЗнаменатель;
			
			Если СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "112" И Объем > 0.25 
				ИЛИ СокрЛП(СтрокаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Код) = "111" И Объем > 250 Тогда
				Возврат "1 л";
			Иначе	
			    Возврат "100 мл";
			КонецЕсли; 
								
		КонецЕсли; 
		
		Если СтрокаТовары.Номенклатура.ВесИспользовать И ЗначениеЗаполнено(СтрокаТовары.УпаковкаЕдиницаИзмерения) Тогда 
			
			РасчетныйВес = СтрокаТовары.Номенклатура.ВесЧислитель / СтрокаТовары.Номенклатура.ВесЗнаменатель;
			
			Если СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "166" И РасчетныйВес > 0.25
				ИЛИ СокрЛП(СтрокаТовары.Номенклатура.ВесЕдиницаИзмерения.Код) = "163" И РасчетныйВес > 250 Тогда
				Возврат "1 кг";
			Иначе	
			    Возврат "100 г";
			КонецЕсли; 
					
		КонецЕсли;	
	КонецЕсли;

КонецФункции // ()


#КонецОбласти 