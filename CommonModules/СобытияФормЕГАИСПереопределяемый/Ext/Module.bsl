
#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ЕГАИС
	СобытияФорм.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ НЕ ЕГАИС
	СобытияФорм.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ПараметрыЗаполнения) Экспорт
	
	//++ НЕ ЕГАИС
	ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
	
	Если НЕ ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагМаркируемаяАлкогольнаяПродукция", Ложь);
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущаяСтрока = Неопределено;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок";
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
			СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
		КонецЕсли;
		
		Если ПараметрыЗаполнения.МаркируемаяАлкогольнаяПродукцияВТЧ Тогда
			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
			Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, "Товары"));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в форме элемента классификатора алкогольной продукции.
//
// Параметры:
//  Форма - УправляемаяФорма - форма элемента классификатора,
//  ТекущаяНоменклатура - ОпределяемыйТип.Номенклатура - предыдущая номенклатура,
//  Действия - Структура - действия, которые требуется выполнить при изменении номенклатуры.
//
Процедура ПриИзмененииНоменклатурыВФормеКлассификатора(Форма, ТекущаяНоменклатура, Действия) Экспорт
	
	//++ НЕ ЕГАИС
	// При изменении номенклатуры, набор упаковок может остаться тем же,
	// в этом случае необходимо сохранить сопоставленные упаковки. В ином случае - очистить.
	
	НаборУпаковокТекущейНоменклатуры = Неопределено;
	Если ТекущаяНоменклатура <> Неопределено Тогда
		НаборУпаковокТекущейНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура, "НаборУпаковок");
	КонецЕсли;
	
	НаборУпаковокНовойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Номенклатура, "НаборУпаковок");
	
	Если НаборУпаковокТекущейНоменклатуры <> НаборУпаковокНовойНоменклатуры Тогда
		Для Каждого СтрокаУпаковок Из Форма.Объект.Упаковки Цикл
			СтрокаУпаковок.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	Шапка = Новый Структура("
		|Номенклатура, Характеристика, ХарактеристикиИспользуются");
		
	ЗаполнитьЗначенияСвойств(Шапка, Форма.Объект);
	
	Шапка.Вставить("Упаковка", Форма.Упаковка);
	Шапка.Вставить("ТипНоменклатуры", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Номенклатура, "ТипНоменклатуры"));
	Шапка.ХарактеристикиИспользуются = Форма.ХарактеристикиИспользуются;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Шапка, Действия, Неопределено);
	
	ЗаполнитьЗначенияСвойств(Форма.Объект, Шапка, "Характеристика");
	ЗаполнитьЗначенияСвойств(Форма, Шапка, "ХарактеристикиИспользуются, Упаковка");
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении партнера в форме элемента классификатора организаций.
//
// Параметры:
//  Форма - УправляемаяФорма - форма элемента классификатора.
//
Процедура ПриИзмененииПартнераВФормеКлассификатора(Форма) Экспорт
	
	//++ НЕ ЕГАИС
	Если ЗначениеЗаполнено(Форма.Объект.ТорговыйОбъект) Тогда
		Форма.Объект.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Форма.Объект.ТорговыйОбъект);
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении контрагента в форме элемента классификатора организаций.
//
// Параметры:
//  Форма - УправляемаяФорма - форма элемента классификатора.
//
Процедура ПриИзмененииКонтрагентаВФормеКлассификатора(Форма) Экспорт
	
	//++ НЕ ЕГАИС
	Если ЗначениеЗаполнено(Форма.Объект.Контрагент) Тогда
		Форма.Объект.ТорговыйОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Контрагент, "Партнер");
	КонецЕсли;
	//-- НЕ ЕГАИС
	
	Возврат;
	
КонецПроцедуры

// В функции нужно заполнить акт постановки на баланс положительной разницей между учетными остатками номенклатуры и остатками в ЕГАИС.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.АктПостановкиНаБалансЕГАИС - заполняемый документ,
//  Форма - УправляемаяФорма - форма заполняемого акта.
//
// Возвращаемое значение:
//  Структура - результат заполнения акта:
//   * ЕстьНесопоставленнаяАлкогольнаяПродукция - Булево - Истина, если на остатках есть несопоставленная продукция,
//   * АдресТаблицыНесопоставленныхТоваров - Строка - адрес таблицы несопоставленных товаров.
//                                                    Колонки: Номенклатура, Характеристика, ЕдиницаИзмерения.
//
Функция ЗаполнитьАктПостановкиНаБалансОтсутствующимиВЕГАИСОстатками(ДокументОбъект, Форма) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНесопоставленнаяАлкогольнаяПродукция", Ложь);
	Результат.Вставить("АдресТаблицыНесопоставленныхТоваров", Неопределено);
	
	//++ НЕ ЕГАИС
	Возврат ИнтеграцияЕГАИСУТ.ДанныеДляЗаполненияАктаПостановкиНаБалансЕГАИСПоОстаткам(ДокументОбъект, Форма);
	//-- НЕ ЕГАИС
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти