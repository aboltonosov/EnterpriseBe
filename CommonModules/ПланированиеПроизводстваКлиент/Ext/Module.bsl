////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции планирования производства и расчета графика производства
//
////////////////////////////////////////////////////////////////////////////////

//++ НЕ УТКА

#Область ПрограммныйИнтерфейс

// Выполняет планирование заказов на производство
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказНаПроизводство - Заказ по который нужно запланировать
//  ПоВсемДиспетчерам - Булево - Истина, если очередь нужно планировать по всем диспетчерам
//
Процедура ПланироватьОчередьЗаказов(Заказ, ПоВсемДиспетчерам = Истина) Экспорт
	
	ОчередьПланирования = ПланированиеПроизводстваВызовСервера.ОчередьПланирования(Заказ, ПоВсемДиспетчерам);
	ДокументовКОбработке = ОчередьПланирования.Количество();
	
	Если ДокументовКОбработке = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработаноДокументов = 0;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Для каждого ЗаказИзОчереди из ОчередьПланирования Цикл
		
		Состояние(НСтр("ru = 'Расчет графика производства'"), Цел(ОбработаноДокументов * 100 / ДокументовКОбработке), ЗаказИзОчереди);
		
		Результат = ПланированиеПроизводстваВызовСервера.РассчитатьГрафикВыпуска(ЗаказИзОчереди);
		
		Если НЕ Результат.Запланирован Тогда
			
			Для каждого Ошибка из Результат.Ошибки Цикл
				
				ТекстСообщения = "";
				
				Если ТипЗнч(Ошибка.ВидыРабочихЦентров) = Тип("Массив") Тогда
					
					Для каждого ВидРабочегоЦентра из Ошибка.ВидыРабочихЦентров Цикл
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Доступности вида рабочего центра %1 недостаточно для размещения этапа.'"),
							ВидРабочегоЦентра.НаименованиеВидаРабочегоЦентра);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаказИзОчереди);
						
					КонецЦикла;
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не установлен график, по которому работает подразделение %1.'"),
						Ошибка.ВидыРабочихЦентров);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаказИзОчереди);
					
				КонецЕсли;
					
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
		ОбработаноДокументов = ОбработаноДокументов + 1;
		
		Оповестить("Запись_ЗаказНаПроизводство", ЗаказИзОчереди, "ПланированиеЗаказов");
		Состояние(НСтр("ru = 'Расчет графика производства'"), Цел(ОбработаноДокументов * 100 / ДокументовКОбработке), ЗаказИзОчереди);
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает рабочее место для изменения доступности вида РЦ
//
// Параметры:
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - Вид рабочего центра для которого нужно изменить доступности
//  ДатаИнтервала		- Дата - Дата в которой нужно изменить доступность
//
Процедура ИзменитьДоступностьВидаРЦ(ВидРабочегоЦентра, ДатаИнтервала) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	ПараметрыФормы.Вставить("НачалоПериода", ДатаИнтервала);
	ПараметрыФормы.Вставить("ОкончаниеПериода", ДатаИнтервала);
	
	ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Выводит на печать диаграмму графика производства
//
// Параметры:
//  Заказ			- ДокументСсылка.ЗаказНаПроизводство - Заказ по которому сформирован график
//  ПараметрыПечати	- Структура - Содержит параметры печати: Этапы, Ошибки, КлючСвязиПродукция, ПериодыНедоступности
//  Форма			- УправляемаяФорма - Форма из которой выполняется печать
//
Процедура ПечатьГрафикаПроизводства(Заказ, ПараметрыПечати, Форма) Экспорт

	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Заказ);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказНаПроизводство", 
		"ДиаграммаГрафикаПроизводства",
		МассивОбъектов, 
		Форма,
		ПараметрыПечати);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА