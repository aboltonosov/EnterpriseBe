////////////////////////////////////////////////////////////////////////////////
// Управление производством: содержит процедуры для управления производством.
// Модуль входит в подсистемы "УправлениеПредприятием".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаказНаПроизводство

// Возвращает параметры для открытия формы Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа
// 
// Возвращаемое значение:
//  Структура - параметры формы исполнения заказа
//
Функция ПараметрыФормыИсполнениеЗаказа() Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа("ЗаказНаПроизводство2_2");
	
	ПараметрыФормы.СписокВыбора = УправлениеПроизводствомКлиентСервер.ДоступныеВариантыОбеспечения(Истина, Ложь);
	ПараметрыФормы.ПроверятьЗаполнение = Ложь;
	
	ПараметрыФормы.ЗаголовокФормы            = НСтр("ru = 'Заполнение обеспечения и отгрузки в этапах'");
	ПараметрыФормы.ЗаголовокКомандыЗаполнить = НСтр("ru = 'Сформировать'");
	
	ПараметрыФормы.РазрешитьКонтрольЦелостностиУпаковок = Ложь;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область Этап

// Функция для сравнения статусов
//
// Параметры:
//  Значение1	 - Перечисления.СтатусыЭтаповПроизводства2_2 - Первое значение сравнения.
//  Значение2	 - Перечисления.СтатусыЭтаповПроизводства2_2 - Второе значение сравнения.
// 
// Возвращаемое значение:
//   - Число - Результат < 0 - первое значение меньше второго.
//             Результат > 0 - первое значение больше второго.
//             Результат = 0 - первое значение равно второму.
//
Функция СравнениеСтатусовЭтапа(Значение1, Значение2) Экспорт
	
	СравнениеСтатусов = Новый Соответствие;
	СравнениеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется"), 0);
	СравнениеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован"), 1);
	СравнениеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению"), 2);
	СравнениеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат"),       3);
	СравнениеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен"),    4);
	
	Возврат СравнениеСтатусов[Значение1] - СравнениеСтатусов[Значение2];
	
КонецФункции

// Обработка проверки размещения этапа в графике
//
// Параметры:
//  ГрафикПроизводства - Структура - см. СтруктураРазмещенияЭтапаВГрафике()
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап производства
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы)
//  Отказ - Булево - выходной параметр
//
Процедура ПроверитьРазмещениеЭтапаВГрафике(ГрафикПроизводства, Ссылка, ПутьКДанным, Отказ) Экспорт
	
	Если ГрафикПроизводства.НачалоЭтапа = '00010101'
		ИЛИ ГрафикПроизводства.ОкончаниеЭтапа = '00010101' Тогда
		
		ТекстСообщения = НСтр("ru = 'График производства не заполнен.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Ссылка,,
			ПутьКДанным,
			Отказ);
			
	ИначеЕсли ГрафикПроизводства.НачалоЭтапа > ГрафикПроизводства.ОкончаниеЭтапа Тогда
		
		ТекстСообщения = НСтр("ru = 'График производства заполнен не правильно.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Ссылка,,
			ПутьКДанным,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список имен таблиц хранящих данные о выходных изделиях этапа
//
// Параметры:
//  ВключитьСерии	 - Булево	 - признак, включить в результат ТЧ Серии
// 
// Возвращаемое значение:
//   - Массив - имена таблиц, хранящих данные о выходных изделиях этапа
//
Функция ИменаТаблицИзделия(ВключитьСерии = Истина) Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ПобочныеИзделия");
	Результат.Добавить("ВыходныеИзделияСерии");
	Результат.Добавить("ПобочныеИзделияСерии");
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли переданный этап выпускающим продукцию
//
// Параметры:
//  ДанныеЭтапа - Структура - данные этапа
//   *НомерСледующегоЭтапа
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный этап являвется выпускающий
//
Функция ЭтоВыпускающийЭтап(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.НомерСледующегоЭтапа = 0;
	
КонецФункции

#КонецОбласти

#Область ПроизводственнаяОперация

// Возвращает представление единицы измерения операции
//
// Параметры:
//  ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количества операции
//  Количество		 - Число									 - натуральный измеритель операции в физических единицах количества, длины, площади, объема и проч.
// 
// Возвращаемое значение:
//   - Строка - представление единицы измерения
//
Функция ПредставлениеЕдиницыИзмеренияОперации(ЕдиницаИзмерения, Количество = 0) Экспорт
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		
		Возврат Строка(ЕдиницаИзмерения);
		
	Иначе
		
		Возврат ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			Количество,
			НСтр("ru = 'операция'"),
			НСтр("ru = 'операции'"),
			НСтр("ru = 'операций'"),
			"ж");
			
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПланированиеГрафика

// Определяет настройки отображения шкалы диаграммы Ганта для адекватного представления
// диаграммы в режиме ВсеДанные (свойство ПоддержкаМасштабаДиаграммыГанта).
//
// Параметры:
//  Начало				 - Дата - начало отображаемого интервала.
//  Окончание			 - Дата - окончание отображаемого интервала.
//  КоличествоИнтервалов - Число - количество интервалов, отображаемых на диаграмме.
// 
// Возвращаемое значение:
//  Структура - настройки отображения.
//
Функция НастройкиШкалыДиаграммыГантаВРежимеВсеДанные(Начало, Окончание, КоличествоИнтервалов) Экспорт
	
	РазницаЧасы = ОКР((КонецЧаса(Окончание)-НачалоЧаса(Начало))/(60*60));
	РазницаДни = ОКР((КонецДня(Окончание)-НачалоДня(Начало))/(60*60*24));
	РазницаНедели = ОКР((КонецНедели(Окончание)-НачалоНедели(Начало))/(60*60*24*7));
	РазницаМесяцы = ОКР((КонецМесяца(Окончание)-НачалоМесяца(Начало))/(60*60*24*30));
	РазницаКварталы = ОКР((КонецКвартала(Окончание)-НачалоКвартала(Начало))/(60*60*24*30*3));
	
	Если РазницаЧасы <= КоличествоИнтервалов Тогда
		
		Единица = ТипЕдиницыШкалыВремени.Час;
		Формат = "ДФ='dd.MM HH:mm'";
		НачалоПолногоИнтервала = НачалоЧаса(Начало);
		ОкончаниеПолногоИнтервала = КонецЧаса(Окончание);
		
	ИначеЕсли РазницаДни <= КоличествоИнтервалов Тогда
		
		Единица = ТипЕдиницыШкалыВремени.День;
		Формат = "ДЛФ=D";
		НачалоПолногоИнтервала = НачалоДня(Начало);
		ОкончаниеПолногоИнтервала = КонецДня(Окончание);
		
	ИначеЕсли РазницаНедели <= КоличествоИнтервалов Тогда
		
		Единица = ТипЕдиницыШкалыВремени.Неделя;
		Формат = "ДЛФ=D";
		НачалоПолногоИнтервала = НачалоНедели(Начало);
		ОкончаниеПолногоИнтервала = КонецНедели(Окончание);
		
	ИначеЕсли РазницаМесяцы <= КоличествоИнтервалов Тогда
		
		Единица = ТипЕдиницыШкалыВремени.Месяц;
		Формат = "ДФ='MMMM yyyy'";
		НачалоПолногоИнтервала = НачалоМесяца(Начало);
		ОкончаниеПолногоИнтервала = КонецМесяца(Окончание);
		
	ИначеЕсли РазницаКварталы <= КоличествоИнтервалов Тогда
		
		Единица = ТипЕдиницыШкалыВремени.Квартал;
		
		ФорматШаблон = "ДФ='q ""%1"" yyyy'";
		Формат = СтрШаблон(ФорматШаблон, НСтр("ru = 'кв.'"));
		
		НачалоПолногоИнтервала = НачалоКвартала(Начало);
		ОкончаниеПолногоИнтервала = КонецКвартала(Окончание);
		
	Иначе
		
		Единица = ТипЕдиницыШкалыВремени.Год;
		
		ФорматШаблон = "ДФ='yyyy ""%1""'";
		Формат = СтрШаблон(ФорматШаблон, НСтр("ru = 'г.'"));
		
		НачалоПолногоИнтервала = НачалоГода(Начало);
		ОкончаниеПолногоИнтервала = КонецГода(Окончание);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Единица", Единица);
	Результат.Вставить("Формат", Формат);
	Результат.Вставить("НачалоПолногоИнтервала", НачалоПолногоИнтервала);
	Результат.Вставить("ОкончаниеПолногоИнтервала", ОкончаниеПолногоИнтервала);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПроизводственныхЗатрат

// Возвращает текст сводной информации о движении материала в цеховой кладовой за отчетный период.
//
// Параметры:
//  Параметры	 - Структура	 - Структура с полями ВходящийОстаток, НачальныйОстаток, Поступило, Передано и ЕдиницаИзмерения.
// 
// Возвращаемое значение:
//   - ФорматированнаяСтрока
//
Функция РасшифровкаВходящегоОстатка(Параметры) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если Параметры.ВходящийОстаток = 0
		И Параметры.НачальныйОстаток = 0
		И Параметры.Поступило = 0
		И Параметры.Передано = 0 Тогда
		Возврат НСтр("ru = 'Движения номенклатуры не обнаружено.'");
	Иначе
		ШаблонРасшифровки = НСтр("ru = 'Входящий остаток (<b>%1</b> %2) ='");
	КонецЕсли;
	
	
	Если Не Параметры.НачальныйОстаток = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + " " + НСтр("ru = 'остаток на начало месяца (<b>%3</b> %2)'");
	КонецЕсли;
	
	Если Не Параметры.Поступило = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + ?(Параметры.НачальныйОстаток = 0, " ", " + ")
												+ НСтр("ru = 'поступило (<b>%4</b> %2)'");
	КонецЕсли;
	
	Если Не Параметры.Передано = 0 Тогда
		ШаблонРасшифровки = ШаблонРасшифровки + ?(Параметры.НачальныйОстаток = 0 И Параметры.Поступило = 0, " ", " - ")
												+ НСтр("ru = 'передано (<b>%5</b> %2)'");
	КонецЕсли;
	
	ШаблонРасшифровки = ШаблонРасшифровки + ".";
	ТекстРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонРасшифровки,
			Параметры.ВходящийОстаток,
			Параметры.ЕдиницаИзмерения,
			Параметры.НачальныйОстаток,
			Параметры.Поступило,
			Параметры.Передано);
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстРасшифровки);;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает список вариантов обеспечения, который используется в производстве
//
// Параметры:
//  ДоступноОбособленноеОбеспечение	 - Булево	 - Истина, если должен быть доступен выбор вариантов для обособленного обеспечения
//  ДоступноДействиеОтгрузить		 - Булево	 - Истина, если варианты Отгрузить и ОтгрузитьОбособленно должны быть доступны
// 
// Возвращаемое значение:
//   - СписокЗначений - доступные варианты обеспечения
//
Функция ДоступныеВариантыОбеспечения(ДоступноОбособленноеОбеспечение = Истина, ДоступноДействиеОтгрузить = Истина) Экспорт

	Список = Новый СписокЗначений;
	
	Если ДоступноДействиеОтгрузить Тогда
	
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		
	КонецЕсли;
	
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	
	Если ДоступноОбособленноеОбеспечение Тогда
		
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		
		Если ДоступноДействиеОтгрузить Тогда
		
			Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область РедактированиеЭтапаПроизводства

Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
	Возврат ПараметрыПересчета;
	
КонецФункции

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ИмяТЧ, СтруктураДействий) Экспорт
	
	ПараметрыПересчетаКоличестваЕдиниц = ПараметрыПересчетаКоличестваЕдиниц();
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
КонецПроцедуры

// Содержит общие действия выполняемые при изменении номенклатуры в этапе или в заказе переработчику 
// ВАЖНО: здесь должны быть действия, которые допустимы как для этапа так и для заказа переработчику
//
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий) Экспорт

	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	Если Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаОбъект = "РедактированиеЭтапов" Тогда
		Объект = Форма[Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаОбъект];
		СтруктураПоиска = Новый Структура("Распоряжение", ТекущаяСтрока.Распоряжение);
		Объект = Объект.Этапы.НайтиСтроки(СтруктураПоиска)[0];
	Иначе
		Объект = Форма[Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаОбъект];
	КонецЕсли; 
	ПараметрыУказанияСерий = Форма[Форма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц());
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, ИмяТЧ));
		
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
			Объект, 
			ТекущаяСтрока, 
			ПараметрыУказанияСерий[ИмяТЧ],
			СтруктураДействий);
		
		Если ТекущаяСтрока.Производится Тогда
			ПараметрыДействия = Новый Структура("Подразделение,Дата", Объект.Подразделение, Объект.Дата);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыДействия);
		КонецЕсли; 
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		Если НЕ ТекущаяСтрока.СписатьНаРасходы Тогда
			ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий, "Склад,ПолучательРедактирование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Подразделение, СтруктураДействий, ИмяПоляСклад = "Склад") Экспорт

	ПараметрыДействия = Новый Структура("Подразделение,ИмяПоляСклад", Подразделение, ИмяПоляСклад);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСкладПроизводства", ПараметрыДействия);
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад,ТипСклада", "Склад", "ТипСклада"));
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(Объект, ТекущаяСтрока, ПараметрыУказанияСерий, СтруктураДействий) Экспорт
	
	Распоряжение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект, "Распоряжение", Неопределено);

	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		Распоряжение, Объект.Подразделение, Объект.ЖелаемаяДатаОбеспечения);
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства", ПараметрыДействия);
	
	Если НЕ СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", 
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	КонецЕсли; 
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущаяСтрока.Склад);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

Функция ПараметрыЗаполненияЦенПобочногоВыпуска(Объект, Валюта) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.ФактическоеНачалоЭтапа);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Процедура ДобавитьВСтруктуруДействияЗаполнитьЦенуПобочногоВыпуска(Объект, Валюта, СтруктураДействий) Экспорт
	
	СтруктураЗаполненияЦены = ПараметрыЗаполненияЦенПобочногоВыпуска(Объект, Валюта);
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

#Область НазначениеРедактирование

Процедура ОчиститьНазначениеРедактированиеВСтроке(ТекущаяСтрока) Экспорт

	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КлючВыбораНазначения());

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Этап

// Возвращает параметры необходимые для заполнения спецификации в строке
//
Функция ПараметрыЗаполненияСпецификацииВСтроке() Экспорт

	Возврат Новый Структура("Подразделение,Дата");

КонецФункции

#КонецОбласти

#Область СтруктурыДанных

Функция СтруктураБуферов() Экспорт
	
	ЕдиницаИзмеренияДень = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПредварительныйБуфер", 0);
	Результат.Вставить("ЕдиницаИзмеренияПредварительногоБуфера", ЕдиницаИзмеренияДень);
	Результат.Вставить("ЗавершающийБуфер", 0);
	Результат.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера", ЕдиницаИзмеренияДень);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураРасчетаБуфера() Экспорт
	
	Буфер = Новый Структура(
		"Длительность,
		|ЕдиницаИзмерения,
		|Дата,
		|ПрямоеРазмещение,
		|ДатаРазмещения");
	
	Возврат Буфер;

КонецФункции

Функция СтруктураРазмещенияЭтапаВГрафике() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("Рассчитан", Ложь);
	
	Результат.Вставить("НачалоЭтапа", '00010101');
	Результат.Вставить("ОкончаниеПредварительногоБуфера", '00010101');
	Результат.Вставить("НачалоЗавершающегоБуфера", '00010101');
	Результат.Вставить("ОкончаниеЭтапа", '00010101');
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЭтапаСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПроизводствоНаСтороне", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПотребностиПроизводства() Экспорт
	
	Результат = Новый Структура(
		"Распоряжение,
		|Номенклатура,
		|Характеристика,
		|Спецификация,
		|Получатель,
		|Назначение,
		|Этап,
		|Количество");
	
	Возврат Результат;

КонецФункции

Функция СтруктураПродукцииЗаказа() Экспорт
	
	Результат = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Назначение,
		|Спецификация,
		|Склад,
		|Подразделение,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок");
	
	Возврат Результат;

КонецФункции

Функция СтруктураПодбораСпецификаций() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Подразделение");
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("НачалоПроизводства");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВыбораАналогов() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОкончанияДействияРазрешений");
	ПараметрыФормы.Вставить("ЗаказНаПроизводство");
	ПараметрыФормы.Вставить("ЗаказКлиента");
	ПараметрыФормы.Вставить("Изделие");
	ПараметрыФормы.Вставить("ХарактеристикаИзделия");
	ПараметрыФормы.Вставить("КлючСвязиСпецификация");
	ПараметрыФормы.Вставить("Материал");
	ПараметрыФормы.Вставить("ХарактеристикаМатериала");
	ПараметрыФормы.Вставить("УпаковкаМатериала");
	ПараметрыФормы.Вставить("КоличествоУпаковокМатериала");
	ПараметрыФормы.Вставить("КоличествоМатериала");
	ПараметрыФормы.Вставить("ПоказатьДоступныеОстатки");
	ПараметрыФормы.Вставить("Подразделение");
	ПараметрыФормы.Вставить("Спецификация");
	ПараметрыФормы.Вставить("ИспользоватьПроизводство2_2", Ложь);

	Возврат ПараметрыФормы;
	
КонецФункции

Функция КлючСхемыОбособления() Экспорт
	
	Результат = Новый Структура("Распоряжение,Назначение");
	Возврат Результат;
	
КонецФункции

Функция КлючВыбораНазначения() Экспорт

	Результат = Новый Структура("НазначениеРедактирование,Назначение,ЭтапПотребитель");
	Возврат Результат;
	
КонецФункции

Функция КлючПроизводственнойОперации() Экспорт
	
	КлючОперации = Новый Структура("Этап,Операция,ИдентификаторОперации");
	Возврат КлючОперации;
	
КонецФункции

Функция СтруктураЗаменыСпецификации() Экспорт
	
	Результат = Новый Структура("Заказ,НомерСтроки,Спецификация,НоваяСпецификация");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИмяСобытияОбновитьДиспетчированиеЭтапов() Экспорт
	
	Возврат "ОбновитьДиспетчированиеЭтапов";
	
КонецФункции

Функция МассивЗначений(Значение, СоздатьНовыйМассив = Ложь) Экспорт

	Перем Результат;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Если Значение <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
		
	ИначеЕсли СоздатьНовыйМассив Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
	Иначе
		
		Результат = Значение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеНастроекПланирования(ПолноеПерепланирование, ОтменитьРучныеИзмененияГрафика) Экспорт
	
	Если ПолноеПерепланирование И ОтменитьРучныеИзмененияГрафика Тогда
		
		Результат = НСтр("ru = 'Планировать график всех этапов производства. Ручные изменения графика будут отменены.'");
		
	ИначеЕсли ПолноеПерепланирование И НЕ ОтменитьРучныеИзмененияГрафика Тогда
		
		Результат = НСтр("ru = 'Планировать график всех этапов производства, исключая размещенные вручную этапы.'");
		
	ИначеЕсли НЕ ПолноеПерепланирование И ОтменитьРучныеИзмененияГрафика Тогда
		
		Результат = НСтр("ru = 'Планировать график этапов, требующих пересчета. Ручные изменения графика будут отменены.'");
		
	Иначе
		
		Результат = НСтр("ru = 'Планировать график этапов, требующих пересчета, исключая размещенные вручную этапы.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти
