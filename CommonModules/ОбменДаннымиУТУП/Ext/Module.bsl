
#Область ПрограммныйИнтерфейс

// Создает список доступных для создания планов обмена
//
// Параметры:
//   ПланыОбменаПодсистемы - Список значений - список планов обмена конфигурации.
//
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	//++ НЕ УТКА
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемДокументооборот);
	//-- НЕ УТКА
	//++ НЕ УТ
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемДокументооборот20);
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемЗарплатаИУправлениеПерсоналом25);
	//-- НЕ УТ
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат);
	
КонецПроцедуры

// Возвращает признак доступности плана обмена, для базовой или проф версии
//
// Параметры:
//   ПланОбмена - Метаданные - Метаданные плана обмена, возможность создания которого необходимо проверить.
//
// Возвращаемое значение:
//   Булево - Истина, если узел плана обмена возможно создать в данной версии конфигурации.
//
Функция ПроверкаВозможностиСозданияУзлаОбмена(ПланОбмена) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Имя);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Блокирует изменение настроек узла плана обмена
// в подчиненном узле распределенной информационной базы.
//
// Параметры:
//   Форма - Форма - Форму, элементы который необходимо заблокировать.
//
Процедура УстановитьДоступностьНастроекУзлаИнформационнойБазы(Форма) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПояснениеБлокировки",
			"Видимость",
			Истина);

		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					ЭлементФормы.Имя,
					"Доступность",
					Ложь);
					
			КонецЕсли;
				
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	Возврат "УправлениеПредприятием";
КонецФункции

// Обработчик регистрации изменений для начальной выгрузки данных.
// Используется для переопределения стандартной обработки регистрации изменений.
// При стандартной обработке будут зарегистрированы изменения всех данных из состава плана обмена.
// Если для плана обмена предусмотрены фильтры ограничения миграции данных,
// то использование этого обработчика позволит повысить производительность начальной выгрузки данных.
// В обработчике следует реализовать регистрацию изменений с учетом фильтров ограничения миграции данных.
// Если для плана обмена используются ограничения миграции по дате или по дате и организациям,
// то можно воспользоваться универсальной процедурой
// ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям.
// Обработчик используется только для универсального обмена данными с использованием правил обмена
// и для универсального обмена данными без правил обмена и не используется для обменов в РИБ.
// Использование обработчика позволяет повысить производительность
// начальной выгрузки данных в среднем в 2-4 раза.
//
// Параметры:
//   Получатель           - ПланОбменаСсылка - Узел плана обмена, в который требуется выгрузить данные.
//   СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки
//                                   события. Если в теле процедуры-обработчика установить данному параметру значение Ложь, 
//                                   стандартная обработка события производиться не будет. Отказ от стандартной обработки
//                                   не отменяет действие. Значение по умолчанию - Истина.
//
Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
			|ДатаНачалаВыгрузкиДокументов, 
			|Организации, 
			|ВыгружатьУправленческуюОрганизацию,
			|ПравилаОтправкиСправочников,
			|ПравилаОтправкиДокументов");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям,
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
		Если Организации = Неопределено
			И Не ЗначенияРеквизитов.ВыгружатьУправленческуюОрганизацию Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ПометкаУдаления = ЛОЖЬ
				|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
				|
				|СГРУППИРОВАТЬ ПО
				|	Организации.Ссылка");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			Или ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Отбор = Новый Массив();
			ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
			СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
			
			Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
			
				Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						ИЛИ (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
						И ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации") Тогда
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
					КонецЕсли;
					
				ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отбор.Количество() = 0 Тогда
				Отбор = Неопределено;
			КонецЕсли;
			
			ОбменДаннымиСобытияУТУП.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель, 
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
			
		КонецЕсли;
		
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.ОбменУправлениеПредприятиемЗарплатаИУправлениеПерсоналом25") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
																					|ДатаНачалаВыгрузкиДокументов, 
																					|Организации");
																					
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
		
		ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель, 
																					ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, 
																					Организации, 
																					Отбор);
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия действующих обменов, использующих формирование договоров по заказам.
// 
// Возвращаемое значение:
//  Булево - признак наличия узлов
//
Функция ЕстьОбменыСФормированиемДоговоровПоЗаказам() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Информирует пользователя о запрете создания или изменения объекта в этой 
// информационной базе
//
// Параметры:
//   Объект - ДокументОбъект - Документ который проверяется на возможность создания в подчиненном узле 
//                             распределенной информационной базы.
//   Отказ  - Булево - Флаг отказа от создания документа. По умолчанию Ложь.
//
Процедура КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ) Экспорт
	Возврат;
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Запрет редактирования реквизитов объектов";
//                            В качестве значения - пустую строку.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	//Заглушка
КонецПроцедуры

// Возвращает значение ссылки управленческой организации 
// для настройки отбора, при настройке через внешнее соединение
//
// Возвращаемое значение:
//  Строка - идентификатор ссылки управленческой организации
//
Функция СсылкаУправленческойОрганизации() Экспорт
	Возврат ЗначениеВСтрокуВнутр(Справочники.Организации.УправленческаяОрганизация);
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Возвращает признак доступности плана обмена в базовой версии
Функция ДоступностьПланаОбменаВБазовойВерсии(ИмяПланаОбмена,СообщатьПользователю = Истина)
	
	КоличествоУзловПланаОбмена = 1;
	СписокДоступныхПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	Если СписокДоступныхПлановОбмена.Найти(ИмяПланаОбмена) <> Неопределено
		И ОбменДаннымиСобытия.ВсеУзлыПланаОбмена(ИмяПланаОбмена).Количество() < КоличествоУзловПланаОбмена Тогда
		Возврат Истина;
	Иначе
		Если СообщатьПользователю Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Используются ограничения базовой версии. Выбранный план обмена создать невозможно.'");
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗапросУзлыОбменаСБухгалтерией() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел
		|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки В (&МассивВариантов)");

	МассивВариантов = Новый Массив();
	МассивВариантов.Добавить("ОбменБП30");
	МассивВариантов.Добавить("ОбменБПКОРП30");
	МассивВариантов.Добавить("ОбменУниверсальный");
	Запрос.УстановитьПараметр("МассивВариантов", МассивВариантов);
	
	Возврат Запрос;

КонецФункции

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти
