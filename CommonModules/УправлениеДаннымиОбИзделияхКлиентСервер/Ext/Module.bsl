////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, что спецификацию можно назначить основной.
//
// Параметры:
//  СвойстваСпецификации	- Структура - содержит свойства спецификации
//  СтруктураОшибки			- Структура - содержит результат проверки: 
//		ТекстОшибки: причина по которой спецификация не может быть основной
//
// Возвращаемое значение:
//   Булево - Истина, если можно назначить основной.
//
Функция СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, СтруктураОшибки) Экспорт

	Если СвойстваСпецификации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru = 'Спецификация может быть основной только в статусе ""Действует"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует представление этапа, которое можно использовать для вывода пользователю
//
// Параметры:
//  СпецификацияПредставление			- Строка - Представление спецификации
//  ЭтапПредставление					- Строка - Представление этапа
//  МногоэтапныйПроизводственныйПроцесс	- Булево - Признак того что производственный процесс состоит из нескольких этапов
//  ЭтапВосстановленияБрака				- Булево - Признак того что этап создан для восстановление брака 
//
// Возвращаемое значение:
//   Строка   - представление этапа
//
Функция ПредставлениеЭтапа(СпецификацияПредставление, ЭтапПредставление, МногоэтапныйПроизводственныйПроцесс, ЭтапВосстановленияБрака = Ложь) Экспорт

	Если МногоэтапныйПроизводственныйПроцесс Тогда
		СпецификацияСтрока = ЭтапПредставление + ", " + СпецификацияПредставление;
	Иначе
		СпецификацияСтрока = СпецификацияПредставление;
	КонецЕсли;
	Если ЭтапВосстановленияБрака Тогда
		СпецификацияСтрока = СпецификацияСтрока + " (" + НСтр("ru = 'восстановление брака'") + ")";
	КонецЕсли; 

	Возврат СпецификацияСтрока;
		
КонецФункции

#Область СпособыПолученияМатериалов

// Функция определяет является ли материал полуфабрикатом производимым в процессе
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе
//
Функция ПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат (ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе")
					ИЛИ ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации"));
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе на этапе
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе на этапе
//
Функция ПолуфабрикатПроизводитсяНаЭтапе(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе");
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

// Функция определяет является ли материал полуфабрикатом производимым в процессе по спецификации
//
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки
// 
// Возвращаемое значение:
//   - Булево - Истина, если материал является полуфабрикатом и производится в процессе по спецификации
//
Функция ПолуфабрикатПроизводитсяПоСпецификации(ДанныеСтроки) Экспорт
	
//++ НЕ УТКА
	Возврат ДанныеСтроки.СпособПолученияМатериала = ПредопределенноеЗначение("Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации");
//-- НЕ УТКА
	
	Возврат Ложь; // пустой обработчик
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

// Параметры построения дерева спецификаций
// 
// Возвращаемое значение:
//   - Структура - параметры
//
Функция ПараметрыДереваСпецификаций() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Номенклатура");
	Параметры.Вставить("ХарактеристикаНоменклатуры");
	
	Параметры.Вставить("Спецификация");
	Параметры.Вставить("Дата");
	
	Параметры.Вставить("ВыводитьЭтапы", Ложь);
	Параметры.Вставить("ВыводитьВыходныеИзделия", Ложь);
	Параметры.Вставить("ВыводитьМатериалы", Ложь);
	Параметры.Вставить("ВыводитьТрудозатраты", Ложь);
	
	Параметры.Вставить("РазузловыватьПолуфабрикаты", Ложь);
	Параметры.Вставить("ДинамическоеСчитывание", Ложь);
	Параметры.Вставить("СохранятьДанные", Ложь);

	//Начало.РежимДеревоСпецификацийЗаказа 
	
	Параметры.Вставить("КлючСвязи");
	
	Параметры.Вставить("УпаковкаВыходногоИзделия");
	Параметры.Вставить("КоличествоУпаковокВыходногоИзделия");
	Параметры.Вставить("КоличествоВыходногоИзделия");

	Параметры.Вставить("АдресВХранилище");
	
	//Конец.РежимДеревоСпецификацийЗаказа 
	
	Возврат Параметры;
	
КонецФункции

// Вызывается перед раскрытием узла дерева спецификаций.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - управляемая форма, на которой расположено дерево спецификаций
//  Идентификатор	 - Число			 - строка, которая будет развернута
//  Отказ			 - Булево			 - признак отказа от раскрытия узла
//
Процедура ДеревоСпецификацийПередРазворачиванием(Форма, Идентификатор, Отказ) Экспорт
	
	Если Не Форма.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.ДеревоСпецификаций.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЕстьСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСтруктурой = СтрокаДереваСпецификацийСтруктурой(ТекущиеДанные);
	
	КоллекцияЭлементов = УправлениеДаннымиОбИзделияхВызовСервера.ДеревоСпецификацийПрочитатьЭлементы(
		ТекущиеДанныеСтруктурой, Форма.АдресДереваСпецификацийВХранилище);
	
	ДеревоСпецификацийВывестиЭлементы(ТекущиеДанные, КоллекцияЭлементов);
	
КонецПроцедуры

// Вызывается перед сворачиванием узла дерева спецификаций.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - управляемая форма, на которой расположено дерево спецификаций
//  Идентификатор	 - Число			 - строка, которая будет свернута
//  Отказ			 - Булево			 - признак отказа от сворачивания узла
//
Процедура ДеревоСпецификацийПередСворачиванием(Форма, Идентификатор, Отказ) Экспорт
	
	Если Не Форма.ДинамическоеСчитывание Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.ДеревоСпецификаций.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЕстьСпецификация Тогда
		Возврат;
	КонецЕсли;
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	ДочерниеЭлементы.Очистить();
	ДочерниеЭлементы.Добавить();
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвтовыборМатериалов

// Выполняет стандартные действия при изменении материала
//
Процедура ПриИзмененииНоменклатурыВСтрокеМатериалов(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.НоменклатураСтрокой = "";
	КонецЕсли; 
		
КонецПроцедуры

// Выполняет стандартные действия при изменении характеристики
//
Процедура ПриИзмененииХарактеристикиВСтрокеМатериалов(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
		ДанныеСтроки.ХарактеристикаСтрокой = "";
	КонецЕсли;
	
	ЗаданныеСвойства = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязиМатериал", ДанныеСтроки.КлючСвязи));
	Для каждого ЭлементКоллекции Из ЗаданныеСвойства Цикл
		Объект.СоответствиеСвойств.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

// Выполняет стандартные действия при вводе новой строки материалов
// - устанавливает способ автовыбора материала
// - устанавливает способ автовыбора характеристики
// - копирует настройки автовыбора
//
// Параметры
//  ДанныеСтроки				- ДанныеФормыСтруктура - содержит данные строки
//  КлючСвязиИсточника			- Число, Неопределено - ключ связи источника (при копировании строки)
//  СоответствиеСвойств			- ДанныеФормыКоллекция - табличная часть "СоответствиеСвойств"
//
Процедура ПриВводеНовойСтрокиМатериалов(ДанныеСтроки, КлючСвязиИсточника = Неопределено, СоответствиеСвойств = Неопределено) Экспорт

	Если КлючСвязиИсточника <> Неопределено Тогда
		
		// Копирование
		
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязиМатериал", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязиМатериал = ДанныеСтроки.КлючСвязи;
		КонецЦикла; 
		
	Иначе	
		
		// Новая строка
		
		ДанныеСтроки.СпособАвтовыбораНоменклатуры   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет информацию по автовыбору материала в строке табличной части
//
Процедура ЗаполнитьИнформациюПоАвтовыборуМатериала(СтрокаМатериал) Экспорт
	
	СтрокаМатериал.ИнформацияКМатериалу = СтрокаМатериал.СведенияАвтовыбора
		+ ?(СтрокаМатериал.СведенияАвтовыбора = "", "", Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

Процедура ДеревоСпецификацийВывестиЭлементы(ТекущаяСтрока, КоллекцияЭлементов) Экспорт
	
	ДочерниеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
	ДочерниеЭлементы.Очистить();
	
	Если ТекущаяСтрока.ЕстьСпецификация И КоллекцияЭлементов.ВГраница() = -1 Тогда
		
		ДочерниеЭлементы.Добавить();
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		НоваяСтрока = ДочерниеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		ДеревоСпецификацийВывестиЭлементы(НоваяСтрока, ЭлементКоллекции.Строки);
			
	КонецЦикла;
	
КонецПроцедуры

Функция РежимДеревоСпецификаций() Экспорт
	
	Возврат "ДеревоСпецификаций";
	
КонецФункции

Функция РежимДеревоСпецификацийЗаказа()Экспорт
	
	Возврат "ДеревоСпецификацийЗаказа"; 
	
КонецФункции

Функция СтрокаДереваСпецификацийСтруктурой(ТекущаяСтрока) Экспорт
	
	СтруктураПолей = Новый Структура("
		|ВидСтроки,
		|Идентификатор,
		|Номенклатура,
		|Характеристика,
		|Спецификация,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|ЕдиницаИзмерения,
		|ИндексКартинки,
		|ПроизводитсяВПроцессе,
		|ПрименениеМатериала,
		|ХарактеристикиИспользуются,
		|СпособАвтовыбораНоменклатуры,
		|СпособАвтовыбораХарактеристики,
		|ЕстьСпецификация,
		|СпецификацияПрочитана");
	
	ЗаполнитьЗначенияСвойств(СтруктураПолей, ТекущаяСтрока);
	
	СтруктураПолей.Вставить("Строки", Новый Массив);
	
	Возврат СтруктураПолей;
	
КонецФункции

#КонецОбласти

#Область СписокВидовРабочихЦентров

// Выполняет стандартные действия при вводе новой строки видов рабочих центров
// - устанавливает количество альтернативных видов рабочих центров
//
// Параметры
//  ДанныеСтроки						- ДанныеФормыСтруктура - содержит данные строки
//  Копирование							- Булево - Истина, если выполняется копирование строки
//  АльтернативныеВидыРабочихЦентров	- ТабличнаяЧасть - таблица содержащая данные ТЧ "АльтернативныеВидыРабочихЦентров"
//
Процедура ПриВводеНовойСтрокиВидовРабочихЦентров(ДанныеСтроки, Копирование, АльтернативныеВидыРабочихЦентров = Неопределено) Экспорт

	Если НЕ Копирование Тогда
		
		ДанныеСтроки.ЕдиницаИзмерения  = ОсновнаяЕдиницаВремени();
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью списка видов рабочих центров
//
Процедура ВидимостьСпискаВидовРЦ(ПланироватьРаботуВидовРабочихЦентров, ПроизводствоНаСтороне, Форма) Экспорт

	Если ПроизводствоНаСтороне Тогда
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровБезРЦ;
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровПоРЦ;
	Иначе
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровБезРЦ;
	КонецЕсли; 
	
    Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровСтраницы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

Функция СтруктураЭтапаСпецификации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПроизводствоНаСтороне", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");

КонецФункции

#КонецОбласти

#КонецОбласти
