&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
		
	РедактированиеБюджетныхЗадачВнеПроцессов = РольДоступна("РедактированиеБюджетныхЗадачВнеПроцессов")
		ИЛИ Пользователи.ЭтоПолноправныйПользователь(, , Истина);
		
	Если Объект.Ссылка.Пустая() Тогда
		
		ТаблицаНастроекДействия = Объект.ЭтапПодготовкиБюджетов.НастройкаДействия.Получить();
		Если ТаблицаНастроекДействия <> Неопределено Тогда
			НесколькоЭкземпляровБюджета(ТаблицаНастроекДействия);
			ПоместитьНастройкиДействияВоВременноеХранилище(ТаблицаНастроекДействия);
			Если Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда		
				ОбновитьДеревоДокументов(ТаблицаНастроекДействия,Истина);	
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаНастроекКонтрольныхОтчетов = Объект.ЭтапПодготовкиБюджетов.НастройкиКонтрольныхОтчетов.Получить();
		Если ТаблицаНастроекКонтрольныхОтчетов <> Неопределено Тогда
			НастройкиКонтрольныхОтчетов.Загрузить(ТаблицаНастроекКонтрольныхОтчетов);
		КонецЕсли;
		
		Если Не РедактированиеБюджетныхЗадачВнеПроцессов И Не ЗначениеЗаполнено(Объект.ОсновнаяЗадача) Тогда
			ВызватьИсключение НСтр("ru='В рамках бюджетного процесса разрешено создавать только связанные задачи.'");
		КонецЕсли;
	
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
				
	Если Не Пользователи.ЭтоПолноправныйПользователь(, , Ложь) И Не ПравоДоступа("Изменение", Метаданные.Справочники.ЭтапыПодготовкиБюджетов) Тогда
		Элементы.ГруппаДействие.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьИнформациюПоСвязаннымЗадачам();
	
	ТаблицаНастроекДействия = ТекущийОбъект.НастройкаДействия.Получить();
	Если ТаблицаНастроекДействия <> Неопределено Тогда
		НесколькоЭкземпляровБюджета(ТаблицаНастроекДействия);
		ПоместитьНастройкиДействияВоВременноеХранилище(ТаблицаНастроекДействия);
	КонецЕсли;
	
	Если Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда		
		ОбновитьДеревоДокументов(ТаблицаНастроекДействия);	
	КонецЕсли;
	
	ТаблицаНастроекКонтрольныхОтчетов = ТекущийОбъект.НастройкиКонтрольныхОтчетов.Получить();
	Если ТаблицаНастроекКонтрольныхОтчетов <> Неопределено Тогда
		НастройкиКонтрольныхОтчетов.Загрузить(ТаблицаНастроекКонтрольныхОтчетов);
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаНастроекДействия = ПолучитьНастройкиДействияИзВременноеХранилище();
	ТекущийОбъект.НастройкаДействия = Новый ХранилищеЗначения(ТаблицаНастроекДействия);
	ТекущийОбъект.НастройкиКонтрольныхОтчетов = Новый ХранилищеЗначения(НастройкиКонтрольныхОтчетов.Выгрузить());
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусыУтверждаемыхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПланЗакупок"
		Или ИмяСобытия = "Запись_ПланПродаж"
		Или ИмяСобытия = "Запись_ПланПроизводства"
		Или ИмяСобытия = "Запись_ПланСборкиРазборки"
		Или ИмяСобытия = "Запись_ЭкземплярБюджета" Тогда
		
		РезультатПоиска = Объект.УтверждаемыеДокументы.НайтиСтроки(Новый Структура("Документ", Источник));
		Если РезультатПоиска.Количество() ИЛИ ВидимостьСписка Тогда
			УправлениеФормой();
		КонецЕсли;
		
		СпискаДокументовПоиск = Объект.СписокДокументов.НайтиСтроки(Новый Структура("Документ", Источник));
		Если СпискаДокументовПоиск.Количество() И НастройкиКонтрольныхОтчетов.Количество() Тогда
			СформироватьКонтрольныйОтчет();
		КонецЕсли;
		
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_БюджетнаяЗадача",,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкиКонтрольныхОтчетов.Количество() > 0 Тогда
		Элементы.ВидКонтрольногоОтчета.СписокВыбора.Очистить();
		Для Каждого Стр Из НастройкиКонтрольныхОтчетов Цикл
			Элементы.ВидКонтрольногоОтчета.СписокВыбора.Добавить(Строка(Стр.ВидБюджета),Строка(Стр.ВидБюджета));
		КонецЦикла;
		ВидКонтрольногоОтчета = НастройкиКонтрольныхОтчетов[0].ВидБюджета;
		ИндексКонтрольногоОтчета = 0;
		СформироватьКонтрольныйОтчет();
	КонецЕсли;	
	
	Если НастройкиКонтрольныхОтчетов.Количество() <= 1 Тогда
		Элементы.ВидКонтрольногоОтчета.Видимость = Ложь;		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЕстьАвтор = ЗначениеЗаполнено(Объект.Автор);
	Элементы.Автор.Видимость = ЕстьАвтор;
	Элементы.НадписьСформированаАвтоматически.Видимость = Не ЕстьАвтор;
	
	Реквизиты = Новый Структура("Периодичность", "Родитель.Периодичность");
	Периодичность = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭтапПодготовкиБюджетов, Реквизиты).Периодичность;
	НадписьПериод = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Объект.Период, Периодичность);
	
	Если Объект.Выполнена Тогда
		Заголовок = НСтр("ru = 'Выполнено'");
	КонецЕсли;
	
	НастроитьСписокДействийЗадачи();
	УстановитьДоступностьМоделиБюджетирования();
	
	ТекущееДействие = Объект.Действие;
	
	УправлениеФормой();
	
	ОткрытьНастройки = ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетов);
	Элементы.МодельБюджетирования.ТолькоПросмотр = ОткрытьНастройки;
	Элементы.ЭтапПодготовкиБюджетов.ТолькоПросмотр = ОткрытьНастройки;
	Элементы.Действие.ТолькоПросмотр = ОткрытьНастройки;
	
	КлючСохраненияПоложенияОкна = ?(ВидимостьСписка, "СписокДокументов", "Документ");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	
	ДействиеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗадачиПриИзменении(Элемент)
	
	УстановитьПериодЗадачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПодготовкиБюджетовПриИзменении(Элемент)
	
	УстановитьПериодЗадачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждаемыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Документ = Объект.УтверждаемыеДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока).Документ;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Документ);
	ОткрытьФорму(ИмяФормыДокумента(Документ), ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоДокументовДокументПредставление" Тогда
	
		ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Документ);			 
		Иначе
			Если ТекущиеДанные.ДокументПредставление = НСтр("ru='Создать'") Тогда
				МассивДокументы = СоздатьБюджетПоСтрокеДействия(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
				Если МассивДокументы <> Неопределено И МассивДокументы.Количество() > 0 Тогда
					СписокКнопок = Новый СписокЗначений;
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, ?(МассивДокументы.Количество() = 1,
						НСтр("ru = 'Выбрать найденный'"), НСтр("ru = 'Выбрать из найденных'")));
					СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Создать новый'"));
					Если МассивДокументы.Количество() = 1 Тогда
						ТекстВопроса = НСтр("ru = 'Найден подходящий экземпляр бюджета.'");
					Иначе
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Найдено подходящих экземпляров бюджета (%1).'"), МассивДокументы.Количество());
					КонецЕсли;
					ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоДокументовВыборЗавершение", ЭтотОбъект, МассивДокументы), 
						ТекстВопроса, СписокКнопок);
				Иначе
					ДеревоДокументовВыборЗавершение(КодВозвратаДиалога.Нет, МассивДокументы)	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыборЗавершение(РезультатВопроса, МассивДокументы) Экспорт
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Если МассивДокументы.Количество() > 1 Тогда
			ЗаменитьБюджет(Неопределено);
		Иначе
			ТекущиеДанные.Документ = МассивДокументы[0];
			ТекущиеДанные.ДокументПредставление = ПредставлениеДокумента(ТекущиеДанные.Документ);
			Нов = Объект.СписокДокументов.Добавить();
			Нов.Документ = ТекущиеДанные.Документ;
			
			Попытка
				Записать();
			Исключение
				ВызватьИсключение НСтр("ru = 'Не удалось записать задачу. 
					|Документы по задаче могут быть не доступны для изменения'");
				Модифицированность = Истина;
			КонецПопытки;

		КонецЕсли;
	Иначе
		МассивДокументы = СоздатьБюджетПоСтрокеДействия(ТекущиеДанные.ПолучитьИдентификатор());
		Если МассивДокументы <> Неопределено И МассивДокументы.Количество() > 0 Тогда
			ТекущиеДанные.Документ = МассивДокументы[0];
			ТекущиеДанные.ДокументПредставление = ПредставлениеДокумента(ТекущиеДанные.Документ);
			
			НоваяСтрока = Объект.СписокДокументов.Добавить();
			НоваяСтрока.Документ = ТекущиеДанные.Документ;
				
			Попытка
				Записать();
			Исключение
				ВызватьИсключение НСтр("ru = 'Не удалось записать задачу. 
					|Документы по задаче могут быть не доступны для изменения'");
				Модифицированность = Истина;
			КонецПопытки;

			ПоказатьЗначение(,ТекущиеДанные.Документ);

		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрольногоОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокВыбора = Новый СписокЗначений;
	Для Каждого Стр Из НастройкиКонтрольныхОтчетов Цикл
		СписокВыбора.Добавить(НастройкиКонтрольныхОтчетов.Индекс(Стр),Строка(Стр.ВидБюджета));
	КонецЦикла;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидКонтрольногоОтчетаВыборЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора,Элементы.ВидКонтрольногоОтчета,СписокВыбора.НайтиПоЗначению(ИндексКонтрольногоОтчета));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыполнитьДействиеНажатие(Элемент)
	ВыполнитьДействие(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ОчиститьБюджет(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьДействие(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для настройки действия необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастроитьДействиеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НастроитьДействиеФрагмент(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДействиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		Отказ = Не Записать();
	Иначе 
		Отказ = Истина;
	КонецЕсли;
	
	НастроитьДействиеФрагмент(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьДействиеФрагмент(Знач Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ?(ЗначениеЗаполнено(АдресНастройкаДействия), АдресНастройкаДействия, ПоместитьНастройкиДействияВоВременноеХранилище());	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес",                  Адрес);
	ПараметрыФормы.Вставить("ЭтапПодготовкиБюджетов", Объект.ЭтапПодготовкиБюджетов);
	ПараметрыФормы.Вставить("МодельБюджетирования",   Объект.МодельБюджетирования);
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииФормыНастройкиДействия", ЭтаФорма);
	
	ИмяФормыНастройки = ИмяФормыНастройкиНаСервере(Объект.Действие);
	ОткрытьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИЗакрыть(Команда)
	
	Объект.Выполнена = Истина;
	
	ДатаИсполнения = Объект.ДатаИсполнения;
	Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
		Объект.ДатаИсполнения = ТекущаяДата();
	КонецЕсли;
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	Иначе
		Объект.Выполнена = Ложь;
		Объект.ДатаИсполнения = ДатаИсполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	Если ПроверитьНеобходимостьСозданияНовогоДокументаСервер(Документ, Объект.Действие, ВидимостьСписка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНовыйДокумент", ЭтаФорма);
		ПоказатьВопрос(
			ОписаниеОповещения, 
			НСтр("ru = 'Будет создан и записан новый документ. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			60);
	Иначе
		ВыполнитьДействиеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАвтоматически(Команда)
	
	СписокДокументов = Новый Массив();
	Для Каждого Стр Из Объект.СписокДокументов Цикл
		СписокДокументов.Добавить(Стр.Документ);
	КонецЦикла;
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокДокументов);
	СтруктураПодходящиеДокументы = НайтиПодходящиеБюджетыДляДереваДокументов(Объект.МодельБюджетирования, ДеревоДокументов);
	Если СтруктураПодходящиеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
    МассивДокументы = СтруктураПодходящиеДокументы.МассивДокументов;
	
	Если МассивДокументы <> Неопределено И МассивДокументы.Количество() > 0 Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Использовать найденные'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создавать новые'"));
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдено подходящих экземпляров бюджета (%1).'"), МассивДокументы.Количество());
				
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьАвтоматическиЗавершение", ЭтотОбъект), 
			ТекстВопроса, СписокКнопок);
	Иначе
		Если СтруктураПодходящиеДокументы.КоличествоДокументовСоздать Тогда	
			СформироватьАвтоматическиЗавершение(КодВозвратаДиалога.Нет);
		Иначе
			ТекстОшибки = НСтр("ru = 'Создание новых документов не требуется, все экземпляры бюджета уже созданы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаПодготовку(Команда)
	
	УстановитьСтатус("ВПодготовке", НСтр("ru = 'В подготовке'"));
	
	ВыделенныеСтроки = Элементы.УтверждаемыеДокументы.ВыделенныеСтроки; 
	
	ДополнительныйПараметры = Новый Структура("СтрокиДляВозвратаНаПодготовку", ВыделенныеСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВводеПараметровЗадачиВернутьНаПодготовку", 
		ЭтотОбъект, ДополнительныйПараметры);
	
	ПараметрыФормы = Новый Структура;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы",
			НСтр("ru = 'Формирование задач ответственным за подготовку документов'"));
	Иначе
		ПараметрыФормы.Вставить("ЗаголовокФормы",
			НСтр("ru = 'Формирование задачи ответственному за подготовку документа'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ФормированиеНесколькихЗадач", ВыделенныеСтроки.Количество() > 1);
	ПараметрыФормы.Вставить("ВыбиратьЭтапПодготовкиБюджетов", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьИсполнителя", Ложь);
	ПараметрыФормы.Вставить("МодельБюджетирования", Объект.МодельБюджетирования);
	
	ОткрытьФорму("Задача.БюджетнаяЗадача.Форма.ФормированиеСвязаннойЗадачи", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)
	
	УстановитьСтатус("Утвержден", НСтр("ru = 'Утвержден'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	УстановитьСтатус("Отменен", НСтр("ru = 'Отменен'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ТекущаяСтрока = Элементы.УтверждаемыеДокументы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока.Документ);
	ОткрытьФорму(ИмяФормыДокумента(ТекущаяСтрока.Документ), ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязаннуюЗадачу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВводеПараметровСвязаннойЗадачи", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФормированиеНесколькихЗадач", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьЭтапПодготовкиБюджетов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьИсполнителя", Истина);
	ПараметрыФормы.Вставить("МодельБюджетирования", Объект.МодельБюджетирования);
	
	ОткрытьФорму("Задача.БюджетнаяЗадача.Форма.ФормированиеСвязаннойЗадачи", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБюджет(Команда)
	
	ТекущиеДанные = Неопределено;
	ВыбранныеСтроки = Новый Массив();
	Для Каждого ИндексСтроки Из Элементы.ДеревоДокументов.ВыделенныеСтроки Цикл
		ВыбранныеСтроки.Добавить(ДеревоДокументов.НайтиПоИдентификатору(ИндексСтроки));	
	КонецЦикла;
	Если ВыбранныеСтроки.Количество() = 0 И ДеревоДокументов.ПолучитьЭлементы().Количество() > 0 И НЕ ВидимостьСписка Тогда
		ВыбранныеСтроки.Добавить(ДеревоДокументов.НайтиПоИдентификатору(0));
	КонецЕсли;
	
	Для Каждого Стр Из ВыбранныеСтроки Цикл
		ТекущиеДанные = Стр;
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Документ",ТекущиеДанные.Документ);
			
			Строки = Объект.СписокДокументов.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() > 0 Тогда
				Для Каждого Стр Из Строки Цикл
	            	Объект.СписокДокументов.Удалить(Объект.СписокДокументов.Индекс(Стр));
				КонецЦикла;
			КонецЕсли;
			
			Модифицированность = Истина;
			
			ТекущиеДанные.Документ = Неопределено;
			ТекущиеДанные.ДокументПредставление = НСтр("ru='Создать'");
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВидимостьСписка Тогда
		Элементы.ВыполнитьДействиеВводБюджетов.Заголовок = НСтр("ru = '<Ввести бюджет>'");
		Если ДеревоДокументов.ПолучитьЭлементы().Количество() = 0 Тогда
			Объект.СписокДокументов.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьБюджет(Команда)
		
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() > 0 и Не ВидимостьСписка Тогда
			ТекущиеДанные = ЭлементыДерева[0];
			Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекущиеДанные = ТекущиеДанные.ПолучитьЭлементы()[0];
				Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
					ТекущиеДанные = ТекущиеДанные.ПолучитьЭлементы()[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Документ);
			
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидБюджета) Тогда
			СтруктураОтбора.Вставить("ВидБюджета", ТекущиеДанные.ВидБюджета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Сценарий) Тогда
			СтруктураОтбора.Вставить("Сценарий", ТекущиеДанные.Сценарий);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", ТекущиеДанные.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
			СтруктураОтбора.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.НачалоПериода) Тогда
			СтруктураОтбора.Вставить("НачалоПериода", ТекущиеДанные.НачалоПериода);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.КонецПериода) Тогда
			СтруктураОтбора.Вставить("ОкончаниеПериода", ТекущиеДанные.КонецПериода);
		КонецЕсли;
		
		Сч = 1;
		Пока Сч <= 6 Цикл
			Если ЗначениеЗаполнено(ТекущиеДанные["Аналитика"+Сч]) Тогда
				СтруктураОтбора.Вставить("Аналитика"+Сч, ТекущиеДанные["Аналитика"+Сч]);
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
		Если СтруктураОтбора.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьБюджетЗавершение", 
		ЭтотОбъект,?(ТекущиеДанные = Неопределено, 0, ТекущиеДанные.ПолучитьИдентификатор()));
	
	Если ВидимостьСписка Тогда
		ЭлементВладелец = Элементы.ДеревоДокументов;
	Иначе
	    ЭлементВладелец = Элементы.ВыполнитьДействиеВводБюджетов;
	КонецЕсли;
	ОткрытьФорму("Документ.ЭкземплярБюджета.ФормаВыбора",ПараметрыФормы,ЭлементВладелец,,,,ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБюджет(Команда)
		
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() > 0 И Не ВидимостьСписка Тогда
			ТекущиеДанные = ЭлементыДерева[0];
			Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекущиеДанные = ТекущиеДанные.ПолучитьЭлементы()[0];
				Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
					ТекущиеДанные = ТекущиеДанные.ПолучитьЭлементы()[0];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Не ВидимостьСписка и ЭлементыДерева.Количество() = 0 Тогда
			ВыполнитьДействие(Неопределено);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	 
	МассивДокументы = СоздатьБюджетПоСтрокеДействия(ТекущиеДанные.ПолучитьИдентификатор(),Ложь,Истина);
	Если МассивДокументы <> Неопределено И МассивДокументы.Количество() > 0 Тогда
		
		Нов = Объект.СписокДокументов.Добавить();
		Нов.Документ = МассивДокументы[0];
		
		Попытка
			Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось записать задачу. 
				|Документы по задаче могут быть не доступны для изменения'");
			Модифицированность = Истина;
		КонецПопытки;
		
		Если Объект.СписокДокументов.Количество() > 1 И Не ВидимостьСписка Тогда
			ВидимостьСписка = Истина;
			УправлениеФормой();
		ИначеЕсли Объект.СписокДокументов.Количество() = 1 Тогда
			Элементы.ВыполнитьДействиеВводБюджетов.Заголовок = 
			?(ЗначениеЗаполнено(Нов.Документ), Строка(Нов.Документ), НСтр("ru = '<Ввести бюджет>'"));
		КонецЕсли;

		ПараметрыФормы = Новый Структура("Ключ", МассивДокументы[0]);
						
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьБюджетЗавершение", ЭтотОбъект, МассивДокументы[0]);
		
		ОткрытьФорму("Документ.ЭкземплярБюджета.ФормаОбъекта",ПараметрыФормы,Элементы.ДеревоДокументов,,,,ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИмяФормыДокумента(Документ)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	Возврат ОбъектМетаданных.ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаСервере
Процедура ВернутьДокументыВПодготовкуСервер(ПараметрыЗадачи, СтрокиДляВозвратаНаПодготовку)
	
	КешНовыхЗадач = Новый Соответствие;
	
	Для Каждого Идентификатор Из СтрокиДляВозвратаНаПодготовку Цикл
		
		СтрокаДокумент = Объект.УтверждаемыеДокументы.НайтиПоИдентификатору(Идентификатор);
		
		ЭтапПодготовкиБюджетов	= СтрокаДокумент.ЭтапПодготовкиБюджетов;
		Ответственный			= СтрокаДокумент.Ответственный;
		
		Если ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ЭкземплярБюджета") Тогда
			
			ТипДействия = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов;
			
		ИначеЕсли ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ПланЗакупок") 
			ИЛИ ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ПланПродаж")
			ИЛИ ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ПланСборкиРазборки") Тогда
			
			ТипДействия = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана;
			
		Иначе

			ВызватьИсключение НСтр("ru='Тип действия для задачи не определен.'");
			
		КонецЕсли;
		
		Если ТипДействия = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
			
			ЗадачиИзКеша = КешНовыхЗадач.Получить(ЭтапПодготовкиБюджетов);
			Если ЗадачиИзКеша = Неопределено Тогда
				ЗадачиИзКеша = Новый Соответствие;
				КешНовыхЗадач.Вставить(ЭтапПодготовкиБюджетов, ЗадачиИзКеша);			
			КонецЕсли;
			
			ЗадачаОбъект = ЗадачиИзКеша.Получить(Ответственный);
			Если ЗадачаОбъект = Неопределено Тогда
				ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
				ЗадачиИзКеша.Вставить(Ответственный, ЗадачаОбъект);
			КонецЕсли;
			
		Иначе
			
			ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ПараметрыЗадачи);
		
		ЗадачаОбъект.Дата					= ТекущаяДатаСеанса();
		ЗадачаОбъект.МодельБюджетирования 	= Объект.МодельБюджетирования;
		ЗадачаОбъект.ЭтапПодготовкиБюджетов	= Объект.ЭтапПодготовкиБюджетов;
		ЗадачаОбъект.Период					= Объект.Период;
		ЗадачаОбъект.ОсновнаяЗадача			= Объект.Ссылка;
		
		ЗадачаОбъект.ЭтапПодготовкиБюджетовОснование		= ЭтапПодготовкиБюджетов;
		ЗадачаОбъект.Исполнитель							= Ответственный;
		ЗадачаОбъект.Действие								= ТипДействия;
		ЗадачаОбъект.СписокДокументов.Добавить().Документ 	= СтрокаДокумент.Документ;
		
		ЗадачаОбъект.НастройкаДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтапПодготовкиБюджетов, "НастройкаДействия");
		
		ЗадачаОбъект.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьНастройкиДействияВоВременноеХранилище(Знач ТаблицаНастроек = Неопределено)
		
	Если ТаблицаНастроек = Неопределено Тогда
		ТаблицаНастроек = Новый ТаблицаЗначений;
		ТаблицаНастроек.Колонки.Добавить("Имя");
		ТаблицаНастроек.Колонки.Добавить("Значение");
		ТаблицаНастроек.Колонки.Добавить("Представление");
	КонецЕсли;

	Если ЗначениеЗаполнено(АдресНастройкаДействия) Тогда
		АдресНастройкаДействия = ПоместитьВоВременноеХранилище(ТаблицаНастроек, АдресНастройкаДействия);
	Иначе
		АдресНастройкаДействия = ПоместитьВоВременноеХранилище(ТаблицаНастроек, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресНастройкаДействия;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиДействияИзВременноеХранилище()
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Имя");
	ТаблицаНастроек.Колонки.Добавить("Значение");
	ТаблицаНастроек.Колонки.Добавить("Представление");

	Если ЗначениеЗаполнено(АдресНастройкаДействия) Тогда
		ТаблицаНастроек = ПолучитьИзВременногоХранилища(АдресНастройкаДействия);
	КонецЕсли;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиКонтрольныхОтчетовСервер(Адрес)
	
	НастройкиКонтрольныхОтчетов.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеПараметровЗадачиВернутьНаПодготовку(ПараметрыЗадачи, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗадачи <> Неопределено Тогда
		ВернутьДокументыВПодготовкуСервер(ПараметрыЗадачи, ДополнительныеПараметры.СтрокиДляВозвратаНаПодготовку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеПараметровСвязаннойЗадачи(ПараметрыЗадачи, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗадачи <> Неопределено Тогда
		СоздатьСвязаннуюЗадачуСервер(ПараметрыЗадачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыНастройкиДействия(Адрес, ДополнительныеПараметры) Экспорт
	
	Если Адрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыНастройкиКонтрольныхОтчетов(Адрес, ДополнительныеПараметры) Экспорт
	
	Если Адрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиКонтрольныхОтчетовСервер(Адрес);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНеобходимостьСозданияНовогоДокументаСервер(Документ, Действие, ВидимостьСписка)
	
	Возврат	Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Документ, Действие, ВидимостьСписка);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		Если ТипЗнч(ДополнительныеПараметры) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокДействийЗадачи()
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки")) Тогда
		УдалитьДействиеИзСписка(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана);
	КонецЕсли;
	
	Если НЕ Объект.МодельБюджетирования.Пустая() Тогда
	
		РеквизитыМодели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.МодельБюджетирования, "ИспользоватьУтверждениеБюджетов");
			
		Если Не РеквизитыМодели.ИспользоватьУтверждениеБюджетов Тогда
			УдалитьДействиеИзСписка(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДействиеИзСписка(ТипДействия)
	
	ЭлементСписка = Элементы.Действие.СписокВыбора.НайтиПоЗначению(ТипДействия);
	Если ЭлементСписка <> Неопределено Тогда
		Элементы.Действие.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействиеПриИзмененииСервер()
	
	Если Объект.Действие = ТекущееДействие Тогда
		Возврат;
	КонецЕсли;
	
	АдресНастройкаДействия = "";
	
	Объект.СписокДокументов.Очистить();
	
	ТекущееДействие = Объект.Действие;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСвязанныхЗадач(Дерево, ВсегоЗадач, Выполнено, ЗадачаВерхнегоУровня)
	
	Если Дерево = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Дерево.Строки Цикл
		Если СтрокаДерева.Задача = ЗадачаВерхнегоУровня Тогда
			Продолжить;
		КонецЕсли;
		ВсегоЗадач = ВсегоЗадач + 1;
		Если СтрокаДерева.ЗадачаВыполнена Тогда
			Выполнено = Выполнено + 1;
		КонецЕсли;
		ЗаполнитьСписокСвязанныхЗадач(СтрокаДерева, ВсегоЗадач, Выполнено, СтрокаДерева.Задача);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыНастройкиНаСервере(Действие)
	
	Возврат Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ИмяФормы(Действие)
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	ОбновитьСтатусыУтверждаемыхДокументов();
	
	УстановитьПредставлениеДействия();
	
	ЭтоДействиеПрочее = (Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее);
	ЭтоДействиеУтверждения = (Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	Элементы.СтраницаУтверждаемыеДокументы.Видимость = ЭтоДействиеУтверждения;
	Элементы.ГруппаУтверждение.Видимость = ЭтоДействиеУтверждения;
	
	ВидимостьНастроек = ЗначениеЗаполнено(Объект.Действие) И Не ЭтоДействиеПрочее;
	Элементы.НастройкиДействия.Видимость = ВидимостьНастроек;
	
	НастройкаДействия = ПолучитьНастройкиДействияИзВременноеХранилище();
	ПредставлениеНастройки =
		Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПолучитьПредставлениеДействия(НастройкаДействия);
	Элементы.ДекорацияНастройки.Заголовок = ПредставлениеНастройки;
	
	КоличествоОтчетов = НастройкиКонтрольныхОтчетов.Количество();
	ЕстьКонтрольныеОтчеты = (КоличествоОтчетов > 0);
	
	Элементы.СтраницаКонтрольныйОтчет.Видимость = ЕстьКонтрольныеОтчеты;	
	
	Элементы.ГруппаВыполнитьДействиеГиперссылка.Видимость = НЕ ВидимостьСписка;
	Элементы.ГруппаВыполнитьДействиеСписок.Видимость = ВидимостьСписка;
	
	Если ВидимостьСписка Тогда
		Элементы.ИнформацияОЗадаче.Заголовок = НСтр("ru = 'Документы по задаче'");
	Иначе
		Элементы.ИнформацияОЗадаче.Заголовок = НСтр("ru = 'Действие задачи'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЗадачиПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("Действие", "Действие");
	Реквизиты.Вставить("НастройкаДействия", "НастройкаДействия");
	Реквизиты.Вставить("НастройкиКонтрольныхОтчетов", "НастройкиКонтрольныхОтчетов");
	Реквизиты.Вставить("Периодичность", "Родитель.Периодичность");
	Реквизиты.Вставить("ТипДлительности", "ТипДлительности");
	Реквизиты.Вставить("Длительность", "Длительность");
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭтапПодготовкиБюджетов, Реквизиты);
	
	Объект.Действие = ЗначениеРеквизитов.Действие;
	Периодичность = ЗначениеРеквизитов.Периодичность;
	Задачи.БюджетнаяЗадача.УстановитьДлительностьЗадачи(Объект, ЗначениеРеквизитов);
	Объект.Период = БюджетированиеКлиентСервер.ДатаНачалаПериода(Объект.Период, Периодичность);
	
	ТаблицаНастроекДействия = Новый ТаблицаЗначений();
	Если ЗначениеРеквизитов.НастройкаДействия <> Неопределено Тогда
		ТаблицаНастроекДействия = ЗначениеРеквизитов.НастройкаДействия.Получить();
		Если ТаблицаНастроекДействия <> Неопределено Тогда
			ПоместитьНастройкиДействияВоВременноеХранилище(ТаблицаНастроекДействия);
			НесколькоЭкземпляровБюджета(ТаблицаНастроекДействия);
			Если Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
				ОбновитьДеревоДокументов(ТаблицаНастроекДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеРеквизитов.НастройкиКонтрольныхОтчетов <> Неопределено Тогда
		ТаблицаНастроекКонтрольныхОтчетов = ЗначениеРеквизитов.НастройкиКонтрольныхОтчетов.Получить();
		Если ТаблицаНастроекКонтрольныхОтчетов <> Неопределено Тогда
			НастройкиКонтрольныхОтчетов.Загрузить(ТаблицаНастроекКонтрольныхОтчетов);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаУтверждаемыхДокументов = Задачи.БюджетнаяЗадача.УтверждаемыеДокументыПоШагуПроцесса(
													Объект.Действие, ТаблицаНастроекДействия, Объект.Период);
	Объект.УтверждаемыеДокументы.Загрузить(ТаблицаУтверждаемыхДокументов);
	
	НадписьПериод = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Объект.Период, Периодичность);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьМоделиБюджетирования()
	
	КоличествоДействующихМоделей
		= Справочники.МоделиБюджетирования.КоличествоДействующихМоделейБюджетирования();
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"МодельБюджетирования", 
		"Видимость", 
		КоличествоДействующихМоделей <> 1 Или Не ЗначениеЗаполнено(Объект.МодельБюджетирования));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДействия()
	
	Действие = Объект.Действие;
	
	ДействиеЗаполнено = ЗначениеЗаполнено(Действие);
	ЭтоДействиеПрочее = (Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее);
	
	ТекстПояснения = НСтр("ru = 'Пояснение действия'");
	ПредставлениеДействия = НСтр("ru = 'Выполнить действие'");
	Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
		Документ = ТекущийДокумент(Объект.СписокДокументов);
		ПредставлениеДействия = 
			?(ЗначениеЗаполнено(Документ), Строка(Документ), НСтр("ru = '<Ввести бюджет>'"));
			
	ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЛимитовРасходаДС Тогда
		Документ = ТекущийДокумент(Объект.СписокДокументов);
		ПредставлениеДействия =
			?(ЗначениеЗаполнено(Документ), Строка(Документ), НСтр("ru = '<Установить лимиты расхода денежных средств>'"));
			
	ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана Тогда
		Документ = ТекущийДокумент(Объект.СписокДокументов);
		ПредставлениеДействия = 
			?(ЗначениеЗаполнено(Документ), Строка(Документ), НСтр("ru = '<Ввести план>'"));
			
	ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
		Документ = ТекущийДокумент(Объект.СписокДокументов);
		ПредставлениеДействия =
			?(ЗначениеЗаполнено(Документ), Строка(Документ), НСтр("ru = '<Ввести значения нефинансовых показателей>'"));
			
	ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов Тогда
		ВсегоДокументов = Объект.УтверждаемыеДокументы.Количество();
		
		ПараметрыОтбора = Новый Структура("Статус", Перечисления.СтатусыПланов.Утвержден);
		Утверждено = Объект.УтверждаемыеДокументы.НайтиСтроки(ПараметрыОтбора).Количество();
		
		ПараметрыОтбора = Новый Структура("Статус", Перечисления.СтатусыПланов.Отменен);
		Отменено = Объект.УтверждаемыеДокументы.НайтиСтроки(ПараметрыОтбора).Количество();
		
		ПараметрыОтбора = Новый Структура("Статус", Перечисления.СтатусыПланов.НаУтверждении);
		КУтверждению = Объект.УтверждаемыеДокументы.НайтиСтроки(ПараметрыОтбора).Количество();
		
		ПараметрыОтбора = Новый Структура("Статус", Перечисления.СтатусыПланов.ВПодготовке);
		ВПодготовке = Объект.УтверждаемыеДокументы.НайтиСтроки(ПараметрыОтбора).Количество();
		
		Если ВсегоДокументов = 0 Тогда
			ПредставлениеДействия = НСтр("ru = 'Нет документов к утверждению'");
		ИначеЕсли Утверждено = ВсегоДокументов Тогда
			ПредставлениеДействия = НСтр("ru = 'Все документы утверждены'");
		ИначеЕсли Отменено = ВсегоДокументов Тогда
			ПредставлениеДействия = НСтр("ru = 'Все документы отменены'");
		ИначеЕсли ВсегоДокументов = Утверждено + Отменено Тогда
			ПредставлениеДействия = НСтр("ru = 'Утверждены: %1 %3, отменены: %2' %4");
			ПредставлениеДействия = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДействия, 
					Утверждено, 
					Отменено,
					СклонениеДокументов(Утверждено),
					СклонениеДокументов(Отменено));
		ИначеЕсли КУтверждению <> 0 И ВПодготовке <> 0 Тогда
			ПредставлениеДействия = НСтр("ru = 'К утверждению: %1 %3, не готовы к утверждению: %2 %4'");
			ПредставлениеДействия = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДействия, 
					КУтверждению, 
					ВПодготовке,
					СклонениеДокументов(КУтверждению),
					СклонениеДокументов(ВПодготовке));
		ИначеЕсли ВПодготовке <> 0 Тогда
			ПредставлениеДействия = НСтр("ru = 'Не готовы к утверждению: %1 %2'");
			ПредставлениеДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДействия, 
				ВПодготовке,
				СклонениеДокументов(ВПодготовке));
		Иначе 
			ПредставлениеДействия = НСтр("ru = 'К утверждению: %1 %2'");
			ПредставлениеДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДействия, 
				КУтверждению,
				СклонениеДокументов(КУтверждению));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВыполнитьДействие.Видимость = ДействиеЗаполнено И Не ЭтоДействиеПрочее 
		И НЕ Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов;	
	Элементы.ВыполнитьДействие.Заголовок = ПредставлениеДействия;
	
	Элементы.ВыполнитьДействиеВводБюджетов.Видимость = Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов;
	Элементы.ВыполнитьДействиеВводБюджетов.Заголовок = ПредставлениеДействия;
	
КонецПроцедуры

&НаСервере
Функция СклонениеДокументов(ЧислоДокументов)
	
	Возврат ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		ЧислоДокументов, 
		НСтр("ru = 'документ'"), НСтр("ru = 'документа'"), НСтр("ru = 'документов'"), "м");
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеКлиент()
	
	Если Объект.Действие = ПредопределенноеЗначение("Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов") Тогда
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаУтверждаемыеДокументы;
	Иначе
		Результат = ВыполнитьДействиеСервер();
		Если Результат <> Неопределено Тогда
			ОткрытьФорму(Результат.ИмяФормы, Результат.ПараметрыФормы, ЭтаФорма, Результат.Уникальность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьДействиеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьДействиеСервер()
	
	Действие = Объект.Действие;
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Записывать = Ложь;
		
	Результат = Задачи.БюджетнаяЗадача.ВыполнитьДействие(Объект, ПолучитьНастройкиДействияИзВременноеХранилище(), Записывать, Истина);
	
	Если Записывать Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
	УстановитьПредставлениеДействия();
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыУтверждаемыхДокументов()
	
	Если Объект.Действие <> Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УтверждаемыеДокументы.НомерСтроки,
	|	УтверждаемыеДокументы.Документ,
	|	УтверждаемыеДокументы.ЭтапПодготовкиБюджетов
	|ПОМЕСТИТЬ УтверждаемыеДокументы
	|ИЗ
	|	&УтверждаемыеДокументы КАК УтверждаемыеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УтверждаемыеДокументы.НомерСтроки КАК НомерСтроки,
	|	УтверждаемыеДокументы.Документ,
	|	ЭтапыПодготовкиБюджетов.Ответственный,
	|	ВЫБОР
	|		КОГДА НЕ ЭкземплярБюджета.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЭкземплярБюджета.Статус
	|		КОГДА НЕ ПланЗакупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПланЗакупок.Статус
	|		КОГДА НЕ ПланПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПланПродаж.Статус
	|		КОГДА НЕ ПланПроизводства.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПланПроизводства.Статус
	|		КОГДА НЕ ПланСборкиРазборки.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПланСборкиРазборки.Статус
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	УтверждаемыеДокументы КАК УтверждаемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|		ПО УтверждаемыеДокументы.ЭтапПодготовкиБюджетов = ЭтапыПодготовкиБюджетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ПО УтверждаемыеДокументы.Документ = ЭкземплярБюджета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланЗакупок КАК ПланЗакупок
	|		ПО УтверждаемыеДокументы.Документ = ПланЗакупок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
	|		ПО УтверждаемыеДокументы.Документ = ПланПродаж.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ПланПроизводства
	|		ПО УтверждаемыеДокументы.Документ = ПланПроизводства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
	|		ПО УтверждаемыеДокументы.Документ = ПланСборкиРазборки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("УтверждаемыеДокументы", Объект.УтверждаемыеДокументы.Выгрузить());
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка.Следующий();
	
	Для каждого Строка Из Объект.УтверждаемыеДокументы Цикл
		Если Строка.НомерСтроки <> Выборка.НомерСтроки Тогда
			Выборка.Следующий();
		КонецЕсли;
		Строка.Статус = Выборка.Статус;
		Строка.Ответственный = Выборка.Ответственный;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Статус, ТексСтатуса)
	
	ДокументыДляУстановкиСтатуса = Новый Массив;
	Для каждого Идентификатор Из Элементы.УтверждаемыеДокументы.ВыделенныеСтроки Цикл
		Документ = Объект.УтверждаемыеДокументы.НайтиПоИдентификатору(Идентификатор).Документ;
		ДокументыДляУстановкиСтатуса.Добавить(Документ);
	КонецЦикла;
	
	Если ДокументыДляУстановкиСтатуса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = 
		ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ДокументыДляУстановкиСтатуса, Статус);
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.УтверждаемыеДокументы,
		КоличествоОбработанных, ДокументыДляУстановкиСтатуса.Количество(), ТексСтатуса);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязаннуюЗадачуСервер(ПараметрыЗадачи)
	
	ВРамкахДругогоШага = 
		ПараметрыЗадачи.Свойство("ЭтапПодготовкиБюджетов")
		И ПараметрыЗадачи.ЭтапПодготовкиБюджетов <> Объект.ЭтапПодготовкиБюджетов;
	
	Если ВРамкахДругогоШага Тогда
		ДанныеЗаполнения = ПараметрыЗадачи.ЭтапПодготовкиБюджетов;
	Иначе
		ДанныеЗаполнения = Новый Структура("МодельБюджетирования, ЭтапПодготовкиБюджетов, Действие, Период, Документ");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект);
		ДанныеЗаполнения.Вставить("НастройкаДействия", Новый ХранилищеЗначения(ПолучитьНастройкиДействияИзВременноеХранилище()));
		ДанныеЗаполнения.Вставить("НастройкиКонтрольныхОтчетов", Новый ХранилищеЗначения(НастройкиКонтрольныхОтчетов.Выгрузить()));
	КонецЕсли;
	
	НоваяЗадача = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
	НоваяЗадача.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(НоваяЗадача, ПараметрыЗадачи, "Наименование, СрокИсполнения, ОписаниеЗадачи, Исполнитель");
	
	НоваяЗадача.ОсновнаяЗадача = Объект.Ссылка;
	НоваяЗадача.Период = Объект.Период;
	НоваяЗадача.ЭтапПодготовкиБюджетовОснование = Объект.ЭтапПодготовкиБюджетов;
	
	Если НоваяЗадача.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов
		И Не ВРамкахДругогоШага Тогда
		НоваяЗадача.УтверждаемыеДокументы.Загрузить(Объект.УтверждаемыеДокументы.Выгрузить());
	КонецЕсли;
	
	НоваяЗадача.Записать();
	
	ОбновитьИнформациюПоСвязаннымЗадачам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоСвязаннымЗадачам()
	
	ДеревоПодчиненныхЗадач = Задачи.БюджетнаяЗадача.ПолучитьДеревоПодчиненныхЗадач(Объект.Ссылка);
	НайденнаяСтрока = ДеревоПодчиненныхЗадач.Строки.Найти(Объект.Ссылка, , Истина);
	ВсегоЗадач = 0;
	Выполнено = 0;
	ЗаполнитьСписокСвязанныхЗадач(НайденнаяСтрока, ВсегоЗадач, Выполнено, Объект.Ссылка);
	Если ВсегоЗадач Тогда
		Элементы.НадписьВыполнено.Заголовок = НСтр("ru = 'Выполнено %1 из %2'");
		Элементы.НадписьВыполнено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												Элементы.НадписьВыполнено.Заголовок, Выполнено, ВсегоЗадач);
	Иначе
		Элементы.НадписьВыполнено.Заголовок = НСтр("ru = 'Связанные задачи не назначены'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Результат, ДополнительныеПараметры) Экспорт

	Если ЕстьПомеченныйНаУдалениеДокумент(Результат) Тогда
		ТекстОповещения = НСтр("ru='Снять с выделенных документов пометку удаления?'");
		ПометкаУдаления = Ложь;
	Иначе
		ТекстОповещения = НСтр("ru='Пометить выделенные документы на удаление?'");
		ПометкаУдаления = Истина;
	КонецЕсли;

	ПараметрыОповещения = Новый Структура("МассивДокументов, ПометкаУдаления", Результат, ПометкаУдаления);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометкаУдаленияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОписаниеОповещения, ТекстОповещения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ПометкаУдаления = Истина Тогда
			ПометитьНаУдалениеСервер(ДополнительныеПараметры.МассивДокументов);
		Иначе
			СнятьПометкуНаУдалениеСервер(ДополнительныеПараметры.МассивДокументов);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеСервер(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если НЕ ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецФункции

&НаСервере
Функция СнятьПометкуНаУдалениеСервер(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПомеченныйНаУдалениеДокумент(МассивДокументов)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ШаблонЗапроса = 	
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Истина КАК Поле
		|ИЗ
		|	&ИмяДокумента КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка В(&МассивДокументов)
		|	И ПсевдонимЗаданнойТаблицы.ПометкаУдаления";
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из МассивДокументов Цикл
		МетаданныеДокумента = Документ.Метаданные();
		Если ИменаДокументов.Найти(МетаданныеДокумента.ПолноеИмя()) = Неопределено
			И Метаданные.Документы.Содержит(МетаданныеДокумента)
			И МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
				ИменаДокументов.Добавить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединитьВсе;
		КонецЕсли;
		ТекстПодзапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ИмяДокумента);
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокДокументов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоДокументов(Знач ТаблицаНастроекДействия, ВсеДокументы=Ложь)
	
	Если ТипЗнч(ТаблицаНастроекДействия) = Тип("Строка") Тогда
		ТаблицаНастроекДействия = ПолучитьИзВременногоХранилища(ТаблицаНастроекДействия);
	КонецЕсли;
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	ПериодДокумента = Объект.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;

	Реквизиты = Новый Структура("Периодичность", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;

	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
	
	ТзДокументов = Объект.СписокДокументов.Выгрузить();
	МассивДокументов = ТзДокументов.ВыгрузитьКолонку("Документ");
		
	ДеревоВводаБюджетов = Задачи.БюджетнаяЗадача.ПолучитьДеревоВводаБюджетовПоНастройкамДействия(
		ТаблицаНастроекДействия,НачалоПериода,КонецПериода,Периодичность,?(ВсеДокументы,Неопределено,МассивДокументов));
		
	Если Не ДеревоВводаБюджетов = Неопределено Тогда
		ЗначениеВРеквизитФормы(ДеревоВводаБюджетов,"ДеревоДокументов");	
	КонецЕсли;
	
	Если ВсеДокументы и Не ДеревоВводаБюджетов = Неопределено Тогда
		Объект.СписокДокументов.Очистить();
		Для Каждого СтрокаВидБюджета Из ДеревоВводаБюджетов.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаВидБюджета.Документ) Тогда
				Нов = Объект.СписокДокументов.Добавить();
				Нов.Документ = СтрокаВидБюджета.Документ;
			КонецЕсли;
			Для Каждого СтрокаПериод Из СтрокаВидБюджета.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаПериод.Документ) Тогда
					Нов = Объект.СписокДокументов.Добавить();
					Нов.Документ = СтрокаПериод.Документ;
				КонецЕсли;
				Для Каждого СтрокаАналитика Из СтрокаПериод.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаАналитика.Документ) Тогда
						Нов = Объект.СписокДокументов.Добавить();
						Нов.Документ = СтрокаАналитика.Документ;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьВсеБюджетыПоНастройкамДействия(НеПроверятьСуществующиеДокументы=Ложь) Экспорт
	
	Если Не Объект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
		Возврат Неопределено;															
	КонецЕсли;
	
	ОбщийМассивДокументов = Новый Массив();
	
	ДеревоВводаБюджетов = РеквизитФормыВЗначение("ДеревоДокументов");
	
	ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
	ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
	ПараметрыНовогоДокумента.Вставить("БюджетнаяЗадача", Объект.Ссылка);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПараметрыНовогоДокумента",ПараметрыНовогоДокумента);
	ПараметрыОтчета.Вставить("ДеревоВводаБюджетов",ДеревоВводаБюджетов);
	ПараметрыОтчета.Вставить("НеПроверятьСуществующиеДокументы",НеПроверятьСуществующиеДокументы);
			
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияФормированиеБюджетов);
	
	ИдентификаторЗаданияФормированиеБюджетов = Неопределено;
		
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Задачи.БюджетнаяЗадача.СформироватьБюджетыПоНастройкамДействияВФоне",
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		     
	АдресХранилищаФормированиеБюджетов       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗаданияФормированиеБюджетов = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДействияПослеФормированияБюджетов();
	КонецЕсли;	
		
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция СоздатьБюджетПоСтрокеДействия(ИдентификаторСтроки, ТолькоНайтиСуществующие=Ложь,СкопироватьСтроку=Ложь)
	
	СтрокаДействия = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДействия = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДействия.Документ) и Не СкопироватьСтроку Тогда
		МассивДокументы = Новый Массив();
		МассивДокументы.Добавить(СтрокаДействия.Документ);
		Возврат МассивДокументы;
	КонецЕсли;
	
	ДеревоВводаБюджетов = РеквизитФормыВЗначение("ДеревоДокументов");
	СтруктураДействия = Задачи.БюджетнаяЗадача.ПолучитьСтруктуруПоСтрокеДействия(СтрокаДействия, ДеревоВводаБюджетов.Колонки);
		
	ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
	ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
	ПараметрыНовогоДокумента.Вставить("БюджетнаяЗадача", Объект.Ссылка);
	
	Если ТолькоНайтиСуществующие Тогда
		МассивДокументы = Задачи.БюджетнаяЗадача.НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", СтруктураДействия);
	Иначе
		МассивДокументы = Задачи.БюджетнаяЗадача.СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, СтруктураДействия, Истина, Истина);
	КонецЕсли;
		
	Возврат МассивДокументы;
	
КонецФункции

&НаКлиенте
Процедура ВидКонтрольногоОтчетаВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ИндексКонтрольногоОтчета = РезультатВыбора.Значение;		
		ВидКонтрольногоОтчета = РезультатВыбора.Представление;
		СформироватьКонтрольныйОтчет();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКонтрольныйОтчет()
		
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
		
	РезультатВыполнения = СформироватьКонтрольныйОтчетСервер(ПараметрыОтчета);
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ТекущаяСтрока = НастройкиКонтрольныхОтчетов.НайтиПоИдентификатору(ИндексКонтрольногоОтчета);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидБюджета) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен Вид бюджета для построения отчета.'")
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("МодельБюджетирования", Объект.МодельБюджетирования);
	ПараметрыОтчета.Вставить("ВидБюджета", ТекущаяСтрока.ВидБюджета);
	ПараметрыОтчета.Вставить("Сценарий", ТекущаяСтрока.Сценарий);
	Если ТекущаяСтрока.Подразделения.Количество() > 0 Тогда
		ПараметрыОтчета.Вставить("Подразделение", ТекущаяСтрока.Подразделения);
	КонецЕсли;
	Если ТекущаяСтрока.Организации.Количество() > 0 Тогда
		ПараметрыОтчета.Вставить("Организация", ТекущаяСтрока.Организации);
	КонецЕсли;
	
	ПериодОтчета = ?(ЗначениеЗаполнено(Объект.Период), Объект.Период, ТекущаяДата());
	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодОтчета, Периодичность);
	КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодОтчета, Периодичность);

	ПараметрыОтчета.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", КонецПериода);

	
	ПараметрыОтчета.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
	
	ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(ПараметрыОтчета.ВидБюджета, ПараметрыОтчета.НачалоПериода);
	ПараметрыОтчета.Вставить("ГраницаФактДанных", ГраницаФактДанных);
	
	СтатусыДанных = Новый СписокЗначений;
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.Утвержден);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУтверждениеБюджетов", 
			Новый Структура("МодельБюджетирования", ПараметрыОтчета.МодельБюджетирования)) Тогда
		Если ТекущаяСтрока.ДанныеВПодготовке Тогда 
			СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
		Конецесли;
		Если ТекущаяСтрока.ДанныеКУтверждению Тогда 
			СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		Конецесли;
	Иначе
		СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	КонецЕсли;
	ПараметрыОтчета.Вставить("Статус", СтатусыДанных);
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВариантСумм) Тогда
		ПараметрыОтчета.Вставить("ВариантСумм", ТекущаяСтрока.ВариантСумм);
	Иначе
		ВариантСуммПоУмолчанию = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета;
		ПараметрыОтчета.Вставить("ВариантСумм", ВариантСуммПоУмолчанию);
	КонецЕсли;
	ВалютаСценария = ПараметрыОтчета.Сценарий.Валюта;
	ПараметрыОтчета.Вставить("ВалютаСценария", ВалютаСценария);
	ПараметрыОтчета.Вставить("РежимФормирования", Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	ДополнительныеФильтрыПоАналитикам = Новый Структура;
	Для Каждого АналитикаШапки из ПараметрыОтчета.ВидБюджета.АналитикиШапки Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(АналитикаШапки.ВидАналитики);
		ДополнительныеФильтрыПоАналитикам.Вставить(ИмяПоля);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьКонтрольныйОтчетСервер(ПараметрыОтчета) Экспорт
		
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"БюджетнаяОтчетностьВыводСервер.ПоместитьДанныеДляБюджетногоОтчетаВХранилище",
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "ФормированиеОтчета");
	КонецЕсли;
		
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет , "НеИспользовать");
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФормированияБюджетов()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗаданияФормированиеБюджетов) Тогда
			ДействияПослеФормированияБюджетов();
			РазвернутьДеревоДокументов();
		Иначе
			ФоновоеЗаданиеПрочитатьПромежуточныйРезультат();
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеФормированияБюджетов",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат;
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ДействияПослеФормированияБюджетов()
	
	Объект.СписокДокументов.Очистить();
	ОбщийМассивДокументов = ПолучитьИзВременногоХранилища(АдресХранилищаФормированиеБюджетов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.СписокДокументов, ОбщийМассивДокументов, "Документ");
	ОбновитьДеревоДокументов(ПолучитьНастройкиДействияИзВременноеХранилище());
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультат;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоДокументов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		ЭлементыПодчиненные = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого ЭлементПодчиненный Из ЭлементыПодчиненные Цикл
			Элементы.ДеревоДокументов.Развернуть(ЭлементПодчиненный.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(Знач РезультатВыполнения = Неопределено)
	
	Перем КоличествоДокументов;
	
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	КонтрольныйОтчет    = РезультатВыполнения.Результат;
	ДанныеЯчеек         = РезультатВыполнения.ДанныеЯчеек;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	АдресДанныхЯчеек = ПоместитьВоВременноеХранилище(ДанныеЯчеек, УникальныйИдентификатор);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "НеИспользовать");
		
КонецПроцедуры

&НаСервере
Процедура НесколькоЭкземпляровБюджета(Знач ТаблицаНастроекДействия)
	
	ВидимостьСписка = Задачи.БюджетнаяЗадача.БюджетнаяЗадачаСписком(Объект, ТаблицаНастроекДействия);
			
КонецПроцедуры

#Область ОбработкаРасшифровкиКонтрольногоОтчета

&НаКлиенте
Процедура БюджетОбработкаРасшифровки(Элемент, ИндексРасшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Расшифровка = БюджетнаяОтчетностьВызовСервера.ЗначениеРасшифровки(ИндексРасшифровка, АдресДанныхРасшифровки);
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Расшифровка.Свойство("ИндексСтрокиДанных") И
				Расшифровка.ИндексСтрокиДанных <> Неопределено Тогда	
				
			ПараметрыОткрытия = ПараметрыОткрытияОтчетаРасшифровки(Расшифровка);
			
			Если ПараметрыОткрытия.ПараметрыОтчета.Свойство("ФиксированныеНастройки") Тогда
				Регистратор = ПолучитьОднозначныйРегистраторПоНастройкам(ПараметрыОткрытия.ПараметрыОтчета.ФиксированныеНастройки,Расшифровка);
			КонецЕсли;
			
			Если Регистратор = Неопределено Тогда
				БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтаФорма);
			Иначе
				ПоказатьЗначение(,Регистратор);
			КонецЕсли;
			
		ИначеЕсли Расшифровка.Свойство("Значение") И 
				Расшифровка.Значение <> Неопределено Тогда
			
			ПоказатьЗначение(Неопределено, Расшифровка.Значение);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для расшифровки'"));
			
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для расшифровки'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьОднозначныйРегистраторПоНастройкам(Знач ФиксированныеНастройки,Расшифровка)
	
	Регистратор = Неопределено;
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	СвязаннаяСтрокаДанных = ДанныеЯчеек[Расшифровка.ИндексСтрокиДанных];
	Если СвязаннаяСтрокаДанных.ОсновнойЭлемент Тогда
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидЭлемента;
	Иначе
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидОперанда;
	КонецЕсли;
	
	Если Не ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		 Возврат Неопределено;
	КонецЕсли;
	
	ФиксированныеНастройки.Структура.Очистить();
	НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(ФиксированныеНастройки.Структура, "Регистратор");
	
	СхемаКомпоновкиДанных = Отчеты.ОборотнаяВедомостьБюджетирования.ПолучитьМакет("ОборотыПлан");
	БюджетированиеСервер.ДополнитьСхемуКомпоновкиДанныхАналитикойПоВиду(СхемаКомпоновкиДанных, "СтатьяБюджетов");

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
    Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ФиксированныеНастройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
 
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(Макет);
 
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ТаблицаЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Результат.Количество() = 1 Тогда
		Регистратор = Результат[0].Регистратор;
	КонецЕсли;
		
	Возврат Регистратор;
	
КонецФункции

&НаСервере
Функция ПараметрыОткрытияОтчетаРасшифровки(Расшифровка)

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Возврат БюджетнаяОтчетностьВызовСервера.ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, Расшифровка, АдресДанныхЯчеек);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗаменитьБюджетЗавершение(Результат, ИндексЭлемента) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(ИндексЭлемента);
		КонецЕсли;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Документ",ТекущиеДанные.Документ);
				
				Строки = Объект.СписокДокументов.НайтиСтроки(ПараметрыОтбора);
				Если Строки.Количество() > 0 Тогда
		            Объект.СписокДокументов.Удалить(Объект.СписокДокументов.Индекс(Строки[0]));
				КонецЕсли;
			КонецЕсли;
			ТекущиеДанные.Документ = Результат;
			ТекущиеДанные.ДокументПредставление = ПредставлениеДокумента(Результат);
		КонецЕсли;
				
		НоваяСтрока = Объект.СписокДокументов.Добавить();
		НоваяСтрока.Документ = Результат;
		
		Попытка
			Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось записать задачу. 
				|Документы по задаче могут быть не доступны для изменения'");
			Модифицированность = Истина;
		КонецПопытки;

		
		Если НЕ ВидимостьСписка Тогда
			Элементы.ВыполнитьДействиеВводБюджетов.Заголовок = 
				?(ЗначениеЗаполнено(Результат), Строка(Результат), НСтр("ru = '<Ввести бюджет>'"));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Номер + " " + ДокументСсылка.Дата;
	
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат()
	
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗаданияФормированиеБюджетов);
	Если Прогресс <> Неопределено Тогда
		ФоновоеЗаданиеПроцент = Прогресс.Процент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАвтоматическиЗавершение(РезультатВопроса, Параметры=Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	НеПроверятьСуществующиеДокументы = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НеПроверятьСуществующиеДокументы = Истина;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДлительныеОперации;
	
	РезультатВыполнения = СформироватьВсеБюджетыПоНастройкамДействия(НеПроверятьСуществующиеДокументы);

	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФормированияБюджетов", 1, Истина);
	Иначе
		РазвернутьДеревоДокументов();
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось записать задачу. 
			|Документы по задаче могут быть не доступны для изменения'");
		Модифицированность = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПодходящиеБюджетыДляДереваДокументов(МодельБюджетирования, Знач ДеревоДокументов)
	
	АналитикаЗаполненияБюджета = Новый ТаблицаЗначений;
	АналитикаЗаполненияБюджета.Колонки.Добавить("ИдентификаторДерева",Новый ОписаниеТипов("Число"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("НачалоПериода",Новый ОписаниеТипов("Дата"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("КонецПериода",Новый ОписаниеТипов("Дата"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("ВидБюджета",Новый ОписаниеТипов("СправочникСсылка.ВидыБюджетов"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("Сценарий",Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	АналитикаЗаполненияБюджета.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Сч = 1;
	Пока Сч <=6 Цикл
		ТипАналитик = Метаданные.Документы.ЭкземплярБюджета.Реквизиты.Аналитика1.Тип;
		АналитикаЗаполненияБюджета.Колонки.Добавить("Аналитика"+Сч, ТипАналитик);
		Сч = Сч + 1;
	КонецЦикла;
	
	КомандаСоздать = НСтр("ru='Создать'");
	
	Для Каждого СтрокаБюджета Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Если СтрокаБюджета.ДокументПредставление = КомандаСоздать Тогда
			Нов = АналитикаЗаполненияБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,СтрокаБюджета);
			Нов.ИдентификаторДерева = СтрокаБюджета.ПолучитьИдентификатор();
		КонецЕсли;
		Для Каждого СтрокаПериод Из СтрокаБюджета.ПолучитьЭлементы() Цикл
			Если СтрокаПериод.ДокументПредставление = КомандаСоздать Тогда
				Нов = АналитикаЗаполненияБюджета.Добавить();
				ЗаполнитьЗначенияСвойств(Нов,СтрокаПериод);
				Нов.ИдентификаторДерева = СтрокаПериод.ПолучитьИдентификатор();
			КонецЕсли;
			Для Каждого СтрокаАналитика Из СтрокаПериод.ПолучитьЭлементы() Цикл
				Если СтрокаАналитика.ДокументПредставление = КомандаСоздать Тогда
					Нов = АналитикаЗаполненияБюджета.Добавить();
					ЗаполнитьЗначенияСвойств(Нов,СтрокаАналитика);
					Нов.ИдентификаторДерева = СтрокаАналитика.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АналитикаЗаполненияБюджета.Организация,
	               |	АналитикаЗаполненияБюджета.Подразделение,
	               |	АналитикаЗаполненияБюджета.Сценарий,
	               |	АналитикаЗаполненияБюджета.НачалоПериода,
	               |	АналитикаЗаполненияБюджета.КонецПериода,
	               |	АналитикаЗаполненияБюджета.ВидБюджета,
	               |	АналитикаЗаполненияБюджета.Аналитика1,
	               |	АналитикаЗаполненияБюджета.Аналитика2,
	               |	АналитикаЗаполненияБюджета.Аналитика3,
	               |	АналитикаЗаполненияБюджета.Аналитика4,
	               |	АналитикаЗаполненияБюджета.Аналитика5,
	               |	АналитикаЗаполненияБюджета.Аналитика6
	               |ПОМЕСТИТЬ Аналитикабюджетов
	               |ИЗ
	               |	&АналитикиЗаполненияБюджетов КАК АналитикаЗаполненияБюджета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Аналитикабюджетов.Организация,
	               |	Аналитикабюджетов.Подразделение,
	               |	Аналитикабюджетов.Сценарий,
	               |	Аналитикабюджетов.НачалоПериода,
	               |	Аналитикабюджетов.КонецПериода,
	               |	Аналитикабюджетов.ВидБюджета,
	               |	Аналитикабюджетов.Аналитика1,
	               |	Аналитикабюджетов.Аналитика2,
	               |	Аналитикабюджетов.Аналитика3,
	               |	Аналитикабюджетов.Аналитика4,
	               |	Аналитикабюджетов.Аналитика5,
	               |	Аналитикабюджетов.Аналитика6,
	               |	МАКСИМУМ(ЭкземплярБюджета.Ссылка) КАК Документ
	               |ИЗ
	               |	Аналитикабюджетов КАК Аналитикабюджетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |		ПО Аналитикабюджетов.Организация = ЭкземплярБюджета.Организация
	               |			И Аналитикабюджетов.Подразделение = ЭкземплярБюджета.Подразделение
	               |			И Аналитикабюджетов.Сценарий = ЭкземплярБюджета.Сценарий
	               |			И Аналитикабюджетов.НачалоПериода = ЭкземплярБюджета.НачалоПериода
	               |			И Аналитикабюджетов.КонецПериода = ЭкземплярБюджета.ОкончаниеПериода
	               |			И Аналитикабюджетов.ВидБюджета = ЭкземплярБюджета.ВидБюджета
	               |			И Аналитикабюджетов.Аналитика1 = ЭкземплярБюджета.Аналитика1
	               |			И Аналитикабюджетов.Аналитика2 = ЭкземплярБюджета.Аналитика2
	               |			И Аналитикабюджетов.Аналитика3 = ЭкземплярБюджета.Аналитика3
	               |			И Аналитикабюджетов.Аналитика4 = ЭкземплярБюджета.Аналитика4
	               |			И Аналитикабюджетов.Аналитика5 = ЭкземплярБюджета.Аналитика5
	               |			И Аналитикабюджетов.Аналитика6 = ЭкземплярБюджета.Аналитика6
	               |			И (ЭкземплярБюджета.МодельБюджетирования = &МодельБюджетирования)
	               |			И (НЕ ЭкземплярБюджета.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Аналитикабюджетов.Организация,
	               |	Аналитикабюджетов.НачалоПериода,
	               |	Аналитикабюджетов.Подразделение,
	               |	Аналитикабюджетов.Аналитика6,
	               |	Аналитикабюджетов.Аналитика1,
	               |	Аналитикабюджетов.Аналитика4,
	               |	Аналитикабюджетов.Аналитика2,
	               |	Аналитикабюджетов.ВидБюджета,
	               |	Аналитикабюджетов.КонецПериода,
	               |	Аналитикабюджетов.Аналитика5,
	               |	Аналитикабюджетов.Аналитика3,
	               |	Аналитикабюджетов.Сценарий";
				   
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	Запрос.УстановитьПараметр("АналитикиЗаполненияБюджетов",АналитикаЗаполненияБюджета);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивДокументов = Новый Массив();
	Для Каждого Стр Из Результат Цикл
		Если ЗначениеЗаполнено(Стр.Документ) Тогда
			МассивДокументов.Добавить(Стр.Документ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПодходящиеДокументы = Новый Структура();
	СтруктураПодходящиеДокументы.Вставить("МассивДокументов",МассивДокументов);
	СтруктураПодходящиеДокументы.Вставить("КоличествоДокументовСоздать",АналитикаЗаполненияБюджета.Количество());
	
	Возврат СтруктураПодходящиеДокументы;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьБюджетЗавершение(Результат, ДокументСсылка) Экспорт
				
	ОбновитьДеревоДокументов(АдресНастройкаДействия,Ложь);	
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы.ДеревоДокументов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
	
	НайденнаяСтрока = НайтиСтрокуВДеревеДокументов(ДокументСсылка);
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.ДеревоДокументов.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуВДеревеДокументов(ДокументСсылка)
	
	СтрокаПоиска = Неопределено;
	
	Для Каждого СтрокаВидаБюджета Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Если СтрокаВидаБюджета.Документ = ДокументСсылка Тогда
			СтрокаПоиска = СтрокаВидаБюджета;
			Прервать;
		КонецЕсли;
		Для Каждого СтрокаПериод Из СтрокаВидаБюджета.ПолучитьЭлементы() Цикл
			Если СтрокаПериод.Документ = ДокументСсылка Тогда
				СтрокаПоиска = СтрокаПериод;
				Прервать;
			КонецЕсли;
			Для Каждого СтрокаАналитика Из СтрокаПериод.ПолучитьЭлементы() Цикл
				Если СтрокаАналитика.Документ = ДокументСсылка Тогда
					СтрокаПоиска = СтрокаАналитика;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаПоиска;

КонецФункции

#КонецОбласти