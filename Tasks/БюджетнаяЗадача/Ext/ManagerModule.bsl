#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает длительность переданной задачи.
//
// Параметры:
//  Задача  - ЗадачаОбъект.БюджетнаяЗадача - задача, которой ставим срок.
//  ЭтапПодготовкиБюджетов  - Справочник.ЭтапыПодготовкиБюджетов - шаг процесса на основании которого заполняем срок исполнения.
//
Процедура УстановитьДлительностьЗадачи(Задача, ЭтапПодготовкиБюджетов) Экспорт
	
	ДлительностьЭтапа = 1;
	Если ЗначениеЗаполнено(ЭтапПодготовкиБюджетов.Длительность) Тогда
		ДлительностьЭтапа = ЭтапПодготовкиБюджетов.Длительность;
	КонецЕсли;
	
	ДатаЗадачи = Задача.Дата;
	
	Если ЭтапПодготовкиБюджетов.ТипДлительности = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВКалендарныхДнях Тогда
		Задача.СрокИсполнения = КонецДня(ДатаЗадачи + (ДлительностьЭтапа - 1) * 86400);
	Иначе
		График = Константы.ОсновнойКалендарьПредприятия.Получить();
		Задача.СрокИсполнения = КонецДня(КалендарныеГрафики.ДатаПоКалендарю(График, ДатаЗадачи, ДлительностьЭтапа - 1));
	КонецЕсли;
	
КонецПроцедуры

// Формирует бюджетные задачи на основании расписания бюджетного процесса.
//
// Параметры:
//  МодельБюджетирования - Справочник.МоделиБюджетирования - Необязательный. 
//						   Модель бюджетирования для формирования бюджетных задач.
//  ПроцессПодготовкиБюджетов - Документ.ПроцессПодготовкиБюджетов - Необязательный. 
//								Процесс подготовки бюджетов для формирования бюджетных задач.
//
Процедура ФормированиеБюджетныхЗадач(МодельБюджетирования = Неопределено, ПроцессПодготовкиБюджетов=Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	МоделиБюджетирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	НЕ МоделиБюджетирования.ЭтоГруппа
		|	И НЕ МоделиБюджетирования.ПометкаУдаления
		|	И МоделиБюджетирования.Статус = &СтатусДействует");
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Если МодельБюджетирования <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", МодельБюджетирования);
	КонецЕсли;
	ВыборкаМоделейБюджетирования = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМоделейБюджетирования.Следующий() Цикл
		СформироватьБюджетныеЗадачиПоМодели(ВыборкаМоделейБюджетирования.Ссылка, ПроцессПодготовкиБюджетов);
	КонецЦикла;
	
КонецПроцедуры

// Формирует оповещения по бюджетным задачам.
//
Процедура ФормированиеОповещенийПоБюджетнымЗадачам() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОповещенияДляЗадачБюджетирования") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОповещенияПоБюджетнымЗадачам();
	
КонецПроцедуры

// Формирует дерево подчиненных задач по реквизиту "основная задача".
//
// Параметры:
//  Задача - ЗадачаСсылка.БюджетнаяЗадача - задача, для которой определяются подчиненные задачи.
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево подчиненных задач по основной задаче.
//
Функция ПолучитьДеревоПодчиненныхЗадач(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компановка = Отчеты.ВыполнениеЗадачБюджетногоПроцесса.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Вариант = Компановка.ВариантыНастроек.Найти("СвязанныеЗадачи");
	
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компановка));
	КомпановщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	Отбор = КомпановщикНастроек.Настройки.Отбор;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ПравоеЗначение = Задача;
	
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача.ОсновнаяЗадача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	НовыйОтбор.Использование = Истина;
	
	НастройкиКомпоновкиДанных = КомпановщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компановка, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	Результат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу утверждаемых документов по шагам процесса.
//
// Параметры:
//  Действие - ПеречислениеСсылка.ТипыДействийШаговБюджетныхПроцессов - действие.
//  НастройкаДействия - ТаблицаЗначений - таблица действий.
//  Период - Дата - период действия задачи.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица документов по шагу процесса.
//		* Документ - ДокументСсылка - Ссылка на документ.
//      * ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - Ссылка на этап подготовки бюджетов.
//    
Функция УтверждаемыеДокументыПоШагуПроцесса(Действие, НастройкаДействия, Период) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("ЭтапПодготовкиБюджетов");
	
	Если Действие <> Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкаДействия <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Имя", "УтверждаемыеЭтапыПодготовкиБюджетов");
		НайденныеСтроки = НастройкаДействия.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			УтверждаемыеШагиПроцесса = НайденныеСтроки[0].Значение;
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |	БюджетнаяЗадачаСписокДокументов.Документ КАК Документ,
			                      |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов
			                      |ИЗ
			                      |	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
			                      |		ПО БюджетнаяЗадачаСписокДокументов.Ссылка = БюджетнаяЗадача.Ссылка
			                      |ГДЕ
			                      |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В(&УтверждаемыеШагиПроцесса)
			                      |	И БюджетнаяЗадача.Период = &Период
			                      |	И НЕ БюджетнаяЗадача.ПометкаУдаления
			                      |	И БюджетнаяЗадача.Выполнена
			                      |	И НЕ БюджетнаяЗадачаСписокДокументов.Документ ЕСТЬ NULL ");
			Запрос.УстановитьПараметр("УтверждаемыеШагиПроцесса", УтверждаемыеШагиПроцесса);
			Запрос.УстановитьПараметр("Период", Период);
			Результат = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость создания нового документа.
// 
// Параметры:
//  Документ - ДокументСсылка - Текущий документ из списка документов бюджетной задачи или "Неопределено".
//  Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов - Тип действия этапа подготовки бюджета.
//  ДобавитьВСписок - Булево - Признак использования списка документов в "Бюджетной задаче".
//
// Возвращаемое значение:
//  Истина - Если необходимо создать новый документ.
//  Ложь   - Если нет необходимости создавать новый документ.
//
Функция НеобходимоСозданиеНовогоДокумента(Документ, Действие, ДобавитьВСписок) Экспорт
	
	Результат = Ложь;

	ДействияБезСозданияДокумента = Новый Массив;
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее);
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	
	Если Не ЗначениеЗаполнено(Документ) И ДействияБезСозданияДокумента.Найти(Действие) = Неопределено 
		ИЛИ ДобавитьВСписок Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает документ "ЭкземплярБюджета" в соотвествии с структурой действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа,
//                                         Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
// 	СтруктураДействия        - Структура - настройки создания документа.
// 	Проводить - Булево - Необязательный. Признак проведения документа "Экземпляр бюджета".
//  НеПроверятьСуществующиеДокументы - Булево - Необязательный. Признак создания документа без поиска по существующим.
//
Функция СоздатьЭкземплярБюджета(ПараметрыНовогодокумента, СтруктураДействия, Проводить = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов,"Ответственный");
	
	Если СтруктураДействия.Свойство("НачалоПериода") Тогда
		НачалоПериода = СтруктураДействия.НачалоПериода;
	Иначе
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	КонецЕсли;
	
	Если СтруктураДействия.Свойство("ОкончаниеПериода") Тогда
		КонецПериода = СтруктураДействия.ОкончаниеПериода;
	Иначе
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
	КонецЕсли;
	
	ВидБюджета = Неопределено;
	Если СтруктураДействия.Свойство("ВидБюджета") Тогда
		ВидБюджета = СтруктураДействия.ВидБюджета;
	КонецЕсли;
	Если ВидБюджета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках действия не определен вид бюджета для создания документа.'"));
		Возврат Неопределено;
	КонецЕсли;
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВидБюджета) Тогда
		Возврат Неопределено
	КонецЕсли;
		
	СтруктураДействия.Вставить("НачалоПериода",			НачалоПериода);
	СтруктураДействия.Вставить("ОкончаниеПериода",		КонецПериода);
	СтруктураДействия.Вставить("МодельБюджетирования",	ПараметрыНовогодокумента.МодельБюджетирования);
	СтруктураДействия.Вставить("ВидБюджета",			ВидБюджета);
	
	МассивДокументы = Неопределено;
	Если Не НеПроверятьСуществующиеДокументы Тогда
		МассивДокументы = НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", СтруктураДействия);
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	Если МассивДокументы = Неопределено Тогда
		ЭкземплярБюджета = Документы.ЭкземплярБюджета.СоздатьДокумент();
		ЭкземплярБюджета.Заполнить(СтруктураДействия);
		ЭкземплярБюджета.Дата = ТекущаяДатаСеанса();
		ЭкземплярБюджета.Ответственный = Ответственный;
		МассивОбъектов.Добавить(ЭкземплярБюджета);
	Иначе
		Для Каждого Документ из МассивДокументы Цикл
			ЭкземплярБюджета = Документ.ПолучитьОбъект();
			МассивОбъектов.Добавить(ЭкземплярБюджета);
		КонецЦикла;
	КонецЕсли;
	
	МассивДокументы = Новый Массив;
	Для Каждого ЭкземплярБюджета из МассивОбъектов Цикл
		
		//Заполняется документ только на автоматическом этапе или новый документ
		Если Документ = Неопределено ИЛИ ВыполнятьАвтоматически Тогда
			Документы.ЭкземплярБюджета.ЗаполнитьБюджетПоДаннымИнформационнойБазы(ЭкземплярБюджета);
		КонецЕсли;
		
		Если ПараметрыНовогодокумента.Свойство("БюджетнаяЗадача") Тогда
			ЭкземплярБюджета.ДополнительныеСвойства.Вставить("БюджетнаяЗадача", ПараметрыНовогодокумента.БюджетнаяЗадача);
		КонецЕсли;
		
		ЭкземплярБюджета.Записать();
		Если Проводить Тогда
			Попытка
				ЭкземплярБюджета.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось провести документ: (%1)'"), ЭкземплярБюджета.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru= 'БюджетныйПроцесс.ОтправкаОповещения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
			КонецПопытки;
		КонецЕсли;
		
		РеквизитыВидаБюджета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭкземплярБюджета.ВидБюджета, 
										"СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета, АналитикиШапки, ВерсияДанных");
		Если РеквизитыВидаБюджета.СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета Тогда
			
			МассивАналитик = РеквизитыВидаБюджета.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики");
			СписокАналитик = Новый СписокЗначений;
			СписокАналитик.ЗагрузитьЗначения(МассивАналитик);
			
			РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
			ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ЭкземплярБюджета.ВидБюджета, РежимФормирования);
			
			ВалютаСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭкземплярБюджета.Сценарий, "Валюта");
			ПараметрыОтчета = Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент(ЭкземплярБюджета, СписокАналитик, ВалютаСценария, 
																			ПараметрыВыводаВидаБюджета, РежимФормирования);
			
			ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
			
			ВспомогательныеДанные = Новый Структура;
			ВспомогательныеДанные.Вставить("ДанныеЯчеек", 						ДанныеЭкземпляраБюджета.ДанныеЯчеек);
			ВспомогательныеДанные.Вставить("ДанныеРасшифровки", 				ДанныеЭкземпляраБюджета.ДанныеРасшифровки);
			ВспомогательныеДанные.Вставить("ДеревоСтрокСпискаРедактирования", 	ДанныеЭкземпляраБюджета.ДеревоСтрокСпискаРедактирования);
			ВспомогательныеДанные.Вставить("ВерсияВидаБюджета", 				РеквизитыВидаБюджета.ВерсияДанных);
			ВспомогательныеДанные.Вставить("ВидБюджета", 						ЭкземплярБюджета.ВидБюджета);
			ВспомогательныеДанные.Вставить("СтильУровней", 						ДанныеЭкземпляраБюджета.СтильУровней);
			
			БюджетированиеСервер.СохранитьХранимыйМакет(ДанныеЭкземпляраБюджета.Результат, ВспомогательныеДанные, ЭкземплярБюджета.Ссылка);
			
		КонецЕсли;
	
		МассивДокументы.Добавить(ЭкземплярБюджета.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументы;
	
КонецФункции

// Создает документ ввода плана по типу в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогоДокумента - Структура - Параметры для заполнения объекта документа.
//  	* Ключ - Имя параметра нового документа.
//		* Значение - Значение параметра нового документа.
// 	НастройкаДействия - ТаблицаЗначений - настройки создания документа.
//		* Имя - Имя настройки действия.
//      * Значение - Значение настройки действия.
//
// Возвращаемое значение:
//  ДокументСсылка - Ссылка на документ плана.
//     
Функция СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия) Экспорт
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура();
	Для Каждого Настройка из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	ТипПлана = Неопределено;
	Сценарий = Неопределено;
	ВидПлана = Неопределено;
	Если Не ЗначенияЗаполнения.Свойство("ТипПлана", ТипПлана) Или Не ЗначениеЗаполнено(ТипПлана) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Тип плана.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("Сценарий", Сценарий) Или Не ЗначениеЗаполнено(Сценарий) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Сценарий планирования.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("ВидПлана", ВидПлана) Или Не ЗначениеЗаполнено(ВидПлана) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Вид плана.'");
	КонецЕсли;
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	СценарийБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "СценарийБюджетирования");
	НачалоПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(ПериодДокумента, Периодичность);
	ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, 1);
	ЗначенияЗаполнения.Вставить("СценарийБюджетирования", СценарийБюджетирования);
	ЗначенияЗаполнения.Вставить("Периодичность", Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ЗначенияЗаполнения.Вставить("ОтражаетсяВБюджетировании", Истина);
	
	План = Документы[ОбщегоНазначения.ИмяЗначенияПеречисления(ТипПлана)].СоздатьДокумент();
	План.Заполнить(ЗначенияЗаполнения);
	План.Дата = ТекущаяДатаСеанса();
	План.Записать();
	
	Возврат План.Ссылка;
	
КонецФункции

// Создает документ "Установка значений нефинансовых показателей" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа,
//                                         Период, ЭтапПодготовкиБюджетов.
// 	НастройкаДействия - ТаблицаЗначений - настройки создания документа.
//  Проводить - Булево - Необязательный. Признак проведения документа "Установка значений нефинансовых показателей". 
//
// Возвращаемое значение:
//  ДокументСсылка.УстановкаЗначенийНефинансовыхПоказателей - Ссылка на созданный документ.
//           
Функция СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогодокумента, НастройкаДействия, Проводить = Ложь) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого Настройка Из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;

	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;

	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	
	Если ЗначенияЗаполнения.Свойство("ШаблонВвода") Тогда
		ТаблицаНФПОпределения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияЗаполнения.ШаблонВвода, "ПоказателиШаблона");
		НФПОпределения = ТаблицаНФПОпределения.Выгрузить()[0].Показатель;
	ИначеЕсли ЗначенияЗаполнения.Свойство("НефинансовыйПоказатель") Тогда
		НФПОпределения = ЗначенияЗаполнения.НефинансовыйПоказатель;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках действия не определен нефинансовый показатель для создания документа.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	НуженПериодОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НФПОпределения, "УстанавливатьЗначениеНаКаждыйПериод");
	Если НуженПериодОкончания Тогда
		ОкончаниеПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
		ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	КонецЕсли;
	
	МассивДокументов = НайтиДокументПоЗначениямЗаполнения("УстановкаЗначенийНефинансовыхПоказателей", ЗначенияЗаполнения);
	Если МассивДокументов = Неопределено Тогда
		УстановкаНефинансовыхПоказателей = Документы.УстановкаЗначенийНефинансовыхПоказателей.СоздатьДокумент();
		УстановкаНефинансовыхПоказателей.Заполнить(ЗначенияЗаполнения);
		УстановкаНефинансовыхПоказателей.Дата = ТекущаяДатаСеанса();
	Иначе
		УстановкаНефинансовыхПоказателей = МассивДокументов[МассивДокументов.Вграница()].ПолучитьОбъект();
	КонецЕсли;
	
	//Заполняется документ только на автоматическом этапе или новый документ
	Если МассивДокументов = Неопределено ИЛИ ВыполнятьАвтоматически Тогда
		ОбъектИПараметрыРасчета = Новый Структура;
		ОбъектИПараметрыРасчета.Вставить("Объект", УстановкаНефинансовыхПоказателей);
		Документы.УстановкаЗначенийНефинансовыхПоказателей.НастроитьОбъектПередЗаполнением(ОбъектИПараметрыРасчета);
		Если ОбъектИПараметрыРасчета.СтруктураОписанияВвода.Свойство("ПравилаЗаполнения") Тогда
			Документы.УстановкаЗначенийНефинансовыхПоказателей.ЗаполнитьНастроенныйДокумент(ОбъектИПараметрыРасчета, Истина);
			Документы.УстановкаЗначенийНефинансовыхПоказателей.СохранитьТабличнуюЧастьВДокумент(ОбъектИПараметрыРасчета, УстановкаНефинансовыхПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	УстановкаНефинансовыхПоказателей.Записать();
	
	Если Проводить Тогда
		УстановкаНефинансовыхПоказателей.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат УстановкаНефинансовыхПоказателей.Ссылка;
	
КонецФункции

// Создает СтруктуруДействий в соотвествии с строкой действий.
//
// Параметры:
//  СтрокаДействия - СтрокаДереваЗначений - строка "Дерева ввода бюджетов".
// 	КолонкиДействия - КоллекцияКолонокДереваЗначений - колонки "Дерева ввода бюджетов".
//
// Возвращаемое значение:
//  Структура - Структура действия.
//		* Ключ - Имя настройки действия.
//		* Значение - Значение настройки действия.
//
Функция ПолучитьСтруктуруПоСтрокеДействия(СтрокаДействия, КолонкиДействия) Экспорт
		
	СтруктураДействия = Новый Структура;
	
	КолонкиИсключения = Новый Массив();
	КолонкиИсключения.Добавить("ВидБюджетаАналитика");
	КолонкиИсключения.Добавить("Документ");
	КолонкиИсключения.Добавить("Комментарий");
	КолонкиИсключения.Добавить("ДокументПредставление");
	КолонкиИсключения.Добавить("ДокументДата");
	КолонкиИсключения.Добавить("ДокументНомер");
	КолонкиИсключения.Добавить("НомерСтрокиВидаБюджета");
	КолонкиИсключения.Добавить("ДоступностьОрганизация");
	КолонкиИсключения.Добавить("ДоступностьПодразделение");
	КолонкиИсключения.Добавить("ДоступностьСценарий");
	Для Сч = 1 по 6 Цикл
		КолонкиИсключения.Добавить("ДоступностьАналитика" + Сч);
	КонецЦикла;
		
	Для Каждого Колонка Из КолонкиДействия Цикл
		
		Если Колонка.Имя = "КонецПериода" Тогда
			СтруктураДействия.Вставить("ОкончаниеПериода", СтрокаДействия[Колонка.Имя]);
		ИначеЕсли КолонкиИсключения.Найти(Колонка.Имя) = Неопределено Тогда
			СтруктураДействия.Вставить(Колонка.Имя, СтрокаДействия[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДействия;

КонецФункции

// Создает документы "ЭкземплярБюджета" в соотвествии с настройками действия,
// и помещает результат в хранилище, для фонового выполнения.
//
// Параметры:
//  Параметры - Структура - ПараметрыНовогодокумента - структура значений для заполнения объекта документа,
//                          Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
//                          ДеревоВводаБюджетов - ДеревоЗначений - дерево настроек создания документов.
// 	АдресХранилища - Строка - Адрес хранилища для сохранения результата.
//
Процедура СформироватьБюджетыПоНастройкамДействияВФоне(Параметры, АдресХранилища) Экспорт
	
	ПараметрыНовогоДокумента = Параметры.ПараметрыНовогоДокумента;
	ДеревоВводаБюджетов = Параметры.ДеревоВводаБюджетов;
	НеПроверятьСуществующиеДокументы = Ложь;
	Если Параметры.Свойство("НеПроверятьСуществующиеДокументы") Тогда
		НеПроверятьСуществующиеДокументы = Параметры.НеПроверятьСуществующиеДокументы;
	КонецЕсли;
	
	ОбщийМассивДокументов = Задачи.БюджетнаяЗадача.СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогоДокумента,
		ДеревоВводаБюджетов, Истина, НеПроверятьСуществующиеДокументы);
		
	ПоместитьВоВременноеХранилище(ОбщийМассивДокументов, АдресХранилища);
	
КонецПроцедуры

// Выполняет действие в соответствии с настройками бюджетной задачи.
// 
// Параметры:
//  Объект - ЗадачаОбъект.БюджетнаяЗадача - Объект бюджетной задачи.
//  НастройкаДействия - ТаблицаЗначений - Таблица настроек действий.
// 	Записывать - Булево - Необязательный. Сохраняется признак, что задачу нужно записать.
//  НеПроверятьСуществующиеДокументы - Булево - Необязательный. Если действие "Ввод бюджета", то
//                                     указывает проверять существующие документы или нет.
//
Функция ВыполнитьДействие(Объект, НастройкаДействия, Записывать = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	Действие = Объект.Действие;
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	
	ВидимостьСписка = Ложь;
	СтрокаНастроек = НастройкаДействия.Найти("ВидБюджета","Имя");
	Если СтрокаНастроек <> Неопределено Тогда
		ВидБюджета = СтрокаНастроек.Значение;
		ВидимостьСписка = Справочники.ВидыБюджетов.ВидБюджетаСодержитАналитикиШапки(ВидБюджета);
	КонецЕсли;
	
	Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Документ, Действие, ВидимостьСписка) Тогда
		
		Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Если ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетовОснование) Тогда
				ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ЭтапПодготовкиБюджетовОснование;
			КонецЕсли;
			Документ = СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогодокумента, НастройкаДействия, , НеПроверятьСуществующиеДокументы);
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Документ = Задачи.БюджетнаяЗадача.СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия);
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период, ЭтапПодготовкиБюджетов");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Если ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетовОснование) Тогда
				ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ЭтапПодготовкиБюджетовОснование;
			КонецЕсли;
			Документ = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, НастройкаДействия);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Записывать = Истина;
		
		Если ТипЗнч(Документ) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.СписокДокументов, Документ, "Документ");
		Иначе
			Объект.СписокДокументов.Добавить().Документ = Документ;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормыОбъекта = "";
	ПараметрыФормы = Новый Структура();
	Уникальность = Ложь;
	
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	ИмяФормыОбъекта = "Документ." + Документ.Метаданные().Имя + ".ФормаОбъекта";
	ПараметрыФормы.Вставить("Ключ", Документ);
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ПараметрыФормы.Вставить("НФП_ЗаполнитьЗначенияПоУмолчанию", Истина);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФормы", ИмяФормыОбъекта);
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("Уникальность", Уникальность);
	
	Возврат Результат;
	
КонецФункции

// Ищет документы по полям поиска.
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя вида документа из метаданных.
//  ЗначенияЗаполнения - Структура - Содержит значения полей документа для поиска.
//
Функция НайтиДокументПоЗначениямЗаполнения(ИмяТаблицы, ЗначенияЗаполнения) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ Ссылка ИЗ Документ." + ИмяТаблицы + " ГДЕ НЕ ПометкаУдаления ";
	Для Каждого КлючиИЗначение из ЗначенияЗаполнения Цикл
		Значение = КлючиИЗначение.Значение;
		Если КлючиИЗначение.Ключ = "ОкончаниеПериода" Тогда
			Значение = НачалоДня(Значение);
		КонецЕсли;
		Запрос.Параметры.Вставить(КлючиИЗначение.Ключ, Значение);
		ТекстЗапроса = ТекстЗапроса + " И " + КлючиИЗначение.Ключ + " = &" + КлючиИЗначение.Ключ;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет что задача будет выводится списком.
// 
// Параметры:
//  Задача - ЗадачаОбъект.БюджетнаяЗадача, ЗадачаСсылка.БюджетнаяЗадача - Проверяемая бюджетная задача.
//  ТаблицаНастроекДействия - ТаблицаЗначений - Содержит таблицу с настройками действиий.
//                          - Строка - Адрес хранилища с настройками действий на сервере.
//
// Возвращаемое значение:
//  Истина - Документ выводится списком.
//  Ложь   - Документ не выводится списком.
//
Функция БюджетнаяЗадачаСписком(Задача, Знач ТаблицаНастроекДействия=Неопределено) Экспорт
	
	ВидимостьСписка = Ложь;
	
	Если Задача.СписокДокументов.Количество() > 1 Тогда
		ВидимостьСписка = Истина;
		Возврат ВидимостьСписка;
	КонецЕсли;
	
	Если ТаблицаНастроекДействия = Неопределено Тогда
		ТаблицаНастроекДействия	= Задача.НастройкаДействия.Получить();
	ИначеЕсли ТипЗнч(ТаблицаНастроекДействия) = Тип("Строка") Тогда
		ТаблицаНастроекДействия	= ПолучитьИзВременногоХранилища(ТаблицаНастроекДействия);
	КонецЕсли;
		
	Настройка = ТаблицаНастроекДействия.Найти("ВидыБюджетов","Имя");
	Если Настройка <> Неопределено 
	   И Настройка.Значение.Количество() > 0 Тогда
		ВидыБюджетов = Настройка.Значение;
	Иначе
		ВидыБюджетов = Неопределено;
		Возврат ВидимостьСписка;
	КонецЕсли;
	Настройка = ТаблицаНастроекДействия.Найти("АналитикаЗаполненияБюджета", "Имя");
	Если Настройка <> Неопределено Тогда
		АналитикаБюджетов = Настройка.Значение;
	Иначе
		АналитикаБюджетов = Неопределено;
	КонецЕсли;
	
	ПериодичностьБюджета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидыБюджетов[0].ВидБюджета, "Периодичность");
	ГруппаЭтапаБюджетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.ЭтапПодготовкиБюджетов, "Родитель");
	ПериодичностьЭтапаБюджетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаЭтапаБюджетов, "Периодичность");
	Если ВидыБюджетов <> Неопределено Тогда
		Если ВидыБюджетов.Количество() > 1 или (АналитикаБюджетов <> Неопределено И АналитикаБюджетов.Количество() > 1) или 
			(ВидыБюджетов.Количество() = 1 и Перечисления.Периодичность.Индекс(ПериодичностьБюджета) 
				< Перечисления.Периодичность.Индекс(ПериодичностьЭтапаБюджетов)) Тогда			
			ВидимостьСписка = Истина;
	    КонецЕсли;
	КонецЕсли;
	
	Возврат ВидимостьСписка;

КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Доступность = (Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ ПравоДоступа("Редактирование", Метаданные.Задачи.БюджетнаяЗадача));
		
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоЗадач
		|{ВЫБРАТЬ
		|	КоличествоЗадач}
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|{ГДЕ
		|	БюджетнаяЗадача.ПометкаУдаления,
		|	БюджетнаяЗадача.Выполнена,
		|	БюджетнаяЗадача.Исполнитель.*,
		|	БюджетнаяЗадача.СрокИсполнения}";

	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос			= ТекстЗапроса;
	НаборДанных.Имя				= "НаборДанных";
	НаборДанных.ИсточникДанных	= "ИсточникДанных";
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоЗадач");
	
	ГруппировкаКомпоновки = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	НастройкиПоИсполнителю = ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю();
	
	НастройкиКомпоновкиПросрочено = ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиПросрочено.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСегодня = ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСегодня.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСледующуюНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСледующуюНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	ОтборыПоказателей = Новый Структура();
	ОтборыПоказателей.Вставить("КоличествоПросрочено",НастройкиКомпоновкиПросрочено.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаСегодня",НастройкиКомпоновкиНаСегодня.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаНеделю",НастройкиКомпоновкиНаНеделю.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаСледующуюНеделю",НастройкиКомпоновкиНаСледующуюНеделю.Отбор);
	
	ЧисловыеПоказатели = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ОтборыПоказателей Цикл
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор,
															ЭлементСтруктуры.Значение);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
		РезультатКомпоновки = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		ЧисловыеПоказатели.Вставить(ЭлементСтруктуры.Ключ, РезультатКомпоновки[0].КоличествоЗадач);
		
	КонецЦикла;
	
	ЕстьДела = ЧисловыеПоказатели.КоличествоПросрочено > 0 
		ИЛИ ЧисловыеПоказатели.КоличествоНаСегодня > 0 
			ИЛИ ЧисловыеПоказатели.КоличествоНаНеделю > 0 
				ИЛИ ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
		
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "БюджетныеЗадачи";
	ДелоРодитель.Представление  = НСтр("ru = 'Бюджетные задачи'");
	ДелоРодитель.ЕстьДела       = ЕстьДела;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.БюджетированиеИПланирование;
	
	ИмяФормы = "Задача.БюджетнаяЗадача.Форма.ФормаСпискаМоиЗадачи";
		
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'Просроченные задачи'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессПросроченныеЗадачи";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоПросрочено > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоПросрочено;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;	
	ДополнительныеПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
										НастройкиКомпоновкиПросрочено, ДополнительныеПараметры, "Просрочено");
										
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На сегодня'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСегодня";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСегодня > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДополнительныеПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСегодня, ДополнительныеПараметры, "НаСегодня");
	Дело.Владелец       = "БюджетныеЗадачи";	
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На неделю'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДополнительныеПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаНеделю, ДополнительныеПараметры, "НаНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На следующую неделю'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСледующуюНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДополнительныеПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСледующуюНеделю, ДополнительныеПараметры, "НаСледующуюНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
КонецПроцедуры

// Функция возвращает настройки компоновки данных для отбора задач по исполнителю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Пользователи.АвторизованныйПользователь();
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора просроченных задач.
Функция ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
 	ЭлементОтбора.ПравоеЗначение	= '00010101';
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на сегодня.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
			
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на следующую неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
 	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= СледующаяНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Возвращает дерево настроек действий для ввода "Экземпляров бюджетов" и 
// существующие документы по бюджетной задаче.
// 
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений - Настройки действия.
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Конец периода.
//  ПериодичностьЭтапа - ПеречислениеСсылка.Периодичность - Периодичность этапа подготовки бюджета.
//  СписокДокументов - Массив - массив существующих документов:
//		* Значение - ДокументСсылка.ЭкземплярБюджета - экземпляр бюджета.
//  ОформлятьРезультат - Булево - Истина - Выполняется дополнительная обработка дерева, разбивка 
//								  на периоды и т.д, для вывода в форму бюджетной задачи.
//								- Ложь - Более быстрый способ, без дополнительных обработок дерева.
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево настроек действий для ввода "Экземпляров бюджетов" и 
// 					 существующие документы по бюджетной задаче.
//
Функция ПолучитьДеревоВводаБюджетовПоНастройкамДействия(Знач ТаблицаДействий, НачалоПериода, КонецПериода, 
														ПериодичностьЭтапа, СписокДокументов=Неопределено, ОформлятьРезультат = Истина) Экспорт
	
	ВсеДокументы = Ложь;
	Если СписокДокументов = Неопределено Тогда
		ВсеДокументы = Истина;
		СписокДокументов = Новый Массив();
	КонецЕсли;
	
	График = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ВерныеНастройкиДействия = Истина;
	Если ТипЗнч(ТаблицаДействий) = Тип("ТаблицаЗначений") Тогда
		ВидыБюджетовПоиск = ТаблицаДействий.НайтиСтроки(Новый Структура("Имя", "ВидыБюджетов"));
	Иначе
		ВидыБюджетовПоиск = Новый Массив();
	КонецЕсли;
	Если ВидыБюджетовПоиск.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Неверные настройки действия.'"));
		ВерныеНастройкиДействия = Ложь;
	КонецЕсли;
	Если ВерныеНастройкиДействия Тогда
		АналитикаЗаполненияБюджетаПоиск = ТаблицаДействий.НайтиСтроки(Новый Структура("Имя", "АналитикаЗаполненияБюджета"));
		Если АналитикаЗаполненияБюджетаПоиск.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Неверные настройки действия.'"));
			ВерныеНастройкиДействия = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерныеНастройкиДействия Тогда
		ВидыБюджетов = ВидыБюджетовПоиск[0].Значение.Скопировать();		
		АналитикаЗаполненияБюджета = АналитикаЗаполненияБюджетаПоиск[0].Значение.Скопировать();
	Иначе
		ВидыБюджетов = Новый ТаблицаЗначений;
		ВидыБюджетов.Колонки.Добавить("ВидБюджета", Новый ОписаниеТипов("СправочникСсылка.ВидыБюджетов"));
		ВидыБюджетов.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ВидыБюджетов.Колонки.Добавить("КлючСтрокиНастройкиАналитики", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ВидыБюджетов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ВидыБюджетов.Колонки.Добавить("ПредставлениеИзмерений", Новый ОписаниеТипов("Строка"));
		
		АналитикаЗаполненияБюджета = Новый ТаблицаЗначений;
		АналитикаЗаполненияБюджета.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьОрганизация" ,Новый ОписаниеТипов("Булево"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьПодразделение", Новый ОписаниеТипов("Булево"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьСценарий", Новый ОписаниеТипов("Булево"));

		Сч = 1;
		Пока Сч <=6 Цикл
			ТипАналитик = Метаданные.Документы.ЭкземплярБюджета.Реквизиты.Аналитика1.Тип;
			АналитикаЗаполненияБюджета.Колонки.Добавить("Аналитика"+Сч, ТипАналитик);
			АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьАналитика"+Сч, Новый ОписаниеТипов("Булево"));
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	КС = Новый КвалификаторыСтроки(36);
	КлючСвязиТип = Новый ОписаниеТипов("Строка",,,,КС);
	ВидыБюджетов.Колонки.Добавить("КлючСвязи",КлючСвязиТип);
	Для Каждого Стр Из ВидыБюджетов Цикл
		Стр.КлючСвязи = Строка(Стр.КлючСтрокиНастройкиАналитики);
	КонецЦикла;

	АналитикаЗаполненияБюджета.Колонки.Добавить("КлючСвязи",КлючСвязиТип);
	Для Каждого Стр Из АналитикаЗаполненияБюджета Цикл
		Стр.КлючСвязи = Строка(Стр.КлючСтроки);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыБюджетов.ВидБюджета,
	               |	ВидыБюджетов.КлючСвязи,
	               |	ВидыБюджетов.НомерСтроки
	               |ПОМЕСТИТЬ ВидыБюджетов
	               |ИЗ
	               |	&ВидыБюджетов КАК ВидыБюджетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналитикиЗаполненияБюджетов.Организация,
	               |	АналитикиЗаполненияБюджетов.Подразделение,
	               |	АналитикиЗаполненияБюджетов.Аналитика1,
	               |	АналитикиЗаполненияБюджетов.Аналитика2,
	               |	АналитикиЗаполненияБюджетов.Аналитика3,
	               |	АналитикиЗаполненияБюджетов.Аналитика4,
	               |	АналитикиЗаполненияБюджетов.Аналитика5,
	               |	АналитикиЗаполненияБюджетов.Аналитика6,
	               |	АналитикиЗаполненияБюджетов.Сценарий,
	               |	АналитикиЗаполненияБюджетов.КлючСвязи,
	               |	АналитикиЗаполненияБюджетов.ДоступностьОрганизация,
	               |	АналитикиЗаполненияБюджетов.ДоступностьПодразделение,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика1,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика2,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика3,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика4,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика5,
	               |	АналитикиЗаполненияБюджетов.ДоступностьАналитика6,
	               |	АналитикиЗаполненияБюджетов.ДоступностьСценарий
	               |ПОМЕСТИТЬ АналитикиБюджетов
	               |ИЗ
	               |	&АналитикиЗаполненияБюджетов КАК АналитикиЗаполненияБюджетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ) КАК НачалоПериода,
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя) КАК Периодичность,
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ) КАК КонецПериода
	               |ПОМЕСТИТЬ ТабПериодов
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА),
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ),
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ),
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ),
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД),
	               |	ЗНАЧЕНИЕ(Перечисление.Периодичность.Год),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &ГрафикРаботы
	               |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД),
	               |	КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЭкземплярБюджета.Ссылка) КАК Ссылка,
	               |	ЭкземплярБюджета.Аналитика1,
	               |	ЭкземплярБюджета.Аналитика2,
	               |	ЭкземплярБюджета.Аналитика3,
	               |	ЭкземплярБюджета.Аналитика4,
	               |	ЭкземплярБюджета.Аналитика5,
	               |	ЭкземплярБюджета.Аналитика6,
	               |	ЭкземплярБюджета.ВидБюджета,
	               |	ЭкземплярБюджета.Сценарий,
	               |	ЭкземплярБюджета.Организация,
	               |	ЭкземплярБюджета.Подразделение,
	               |	ЭкземплярБюджета.НачалоПериода,
	               |	ЭкземплярБюджета.ОкончаниеПериода,
	               |	ЭкземплярБюджета.ВидБюджета.Периодичность КАК Периодичность,
	               |	ВЫРАЗИТЬ(ЭкземплярБюджета.Комментарий КАК СТРОКА(250)) КАК Комментарий
	               |ПОМЕСТИТЬ СписокДокументов
	               |ИЗ
	               |	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |ГДЕ
	               |	&ВсеДокументы
	               |	И НЕ ЭкземплярБюджета.Ссылка В (&СписокДокументов)
	               |	И ЭкземплярБюджета.НачалоПериода >= &НачалоПериода
	               |	И ЭкземплярБюджета.ОкончаниеПериода <= &КонецПериода
	               |	И НЕ ЭкземплярБюджета.ПометкаУдаления
	               |	И ЭкземплярБюджета.ВидБюджета В(&МассивВидовБюджетов)
	               |	И (ЭкземплярБюджета.Организация, ЭкземплярБюджета.Подразделение, ЭкземплярБюджета.Сценарий) В
	               |			(ВЫБРАТЬ
	               |				А.Организация,
	               |				А.Подразделение,
	               |				А.Сценарий
	               |			ИЗ
	               |				АналитикиБюджетов КАК А)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭкземплярБюджета.Аналитика1,
	               |	ЭкземплярБюджета.Аналитика2,
	               |	ЭкземплярБюджета.Аналитика3,
	               |	ЭкземплярБюджета.Аналитика4,
	               |	ЭкземплярБюджета.Аналитика5,
	               |	ЭкземплярБюджета.Аналитика6,
	               |	ЭкземплярБюджета.ВидБюджета,
	               |	ЭкземплярБюджета.Сценарий,
	               |	ЭкземплярБюджета.Организация,
	               |	ЭкземплярБюджета.Подразделение,
	               |	ЭкземплярБюджета.НачалоПериода,
	               |	ЭкземплярБюджета.ОкончаниеПериода,
	               |	ЭкземплярБюджета.ВидБюджета.Периодичность,
	               |	ВЫРАЗИТЬ(ЭкземплярБюджета.Комментарий КАК СТРОКА(250))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭкземплярБюджета.Ссылка,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьОрганизация, ЛОЖЬ)) КАК ДоступностьОрганизация,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьПодразделение, ЛОЖЬ)) КАК ДоступностьПодразделение,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика1, ЛОЖЬ)) КАК ДоступностьАналитика1,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика2, ЛОЖЬ)) КАК ДоступностьАналитика2,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика3, ЛОЖЬ)) КАК ДоступностьАналитика3,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика4, ЛОЖЬ)) КАК ДоступностьАналитика4,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика5, ЛОЖЬ)) КАК ДоступностьАналитика5,
	               |	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика6, ЛОЖЬ)) КАК ДоступностьАналитика6,
	               |	ЕСТЬNULL(АналитикиБюджетов.ДоступностьСценарий, ЛОЖЬ) КАК ДоступностьСценарий
	               |ПОМЕСТИТЬ ДоступностьАналитикЭБ
	               |ИЗ
	               |	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидыБюджетов КАК ВидыБюджетов
	               |		ПО ЭкземплярБюджета.ВидБюджета = ВидыБюджетов.ВидБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиБюджетов КАК АналитикиБюджетов
	               |		ПО (ВидыБюджетов.КлючСвязи = АналитикиБюджетов.КлючСвязи)
	               |			И (АналитикиБюджетов.ДоступностьОрганизация
	               |				ИЛИ ЭкземплярБюджета.Организация = АналитикиБюджетов.Организация)
	               |			И (АналитикиБюджетов.ДоступностьПодразделение
	               |				ИЛИ ЭкземплярБюджета.Подразделение = АналитикиБюджетов.Подразделение)
	               |			И (АналитикиБюджетов.ДоступностьСценарий
	               |				ИЛИ ЭкземплярБюджета.Сценарий = АналитикиБюджетов.Сценарий)
	               |			И (АналитикиБюджетов.ДоступностьАналитика1
	               |				ИЛИ ЭкземплярБюджета.Аналитика1 = АналитикиБюджетов.Аналитика1)
	               |			И (АналитикиБюджетов.ДоступностьАналитика2
	               |				ИЛИ ЭкземплярБюджета.Аналитика2 = АналитикиБюджетов.Аналитика2)
	               |			И (АналитикиБюджетов.ДоступностьАналитика3
	               |				ИЛИ ЭкземплярБюджета.Аналитика3 = АналитикиБюджетов.Аналитика3)
	               |			И (АналитикиБюджетов.ДоступностьАналитика4
	               |				ИЛИ ЭкземплярБюджета.Аналитика4 = АналитикиБюджетов.Аналитика4)
	               |			И (АналитикиБюджетов.ДоступностьАналитика5
	               |				ИЛИ ЭкземплярБюджета.Аналитика5 = АналитикиБюджетов.Аналитика5)
	               |			И (АналитикиБюджетов.ДоступностьАналитика6
	               |				ИЛИ ЭкземплярБюджета.Аналитика6 = АналитикиБюджетов.Аналитика6)
	               |ГДЕ
	               |	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭкземплярБюджета.Ссылка,
	               |	ЕСТЬNULL(АналитикиБюджетов.ДоступностьСценарий, ЛОЖЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭкземплярБюджета.ВидБюджета КАК ВидБюджета,
	               |	ЭкземплярБюджета.Организация КАК Организация,
	               |	ЭкземплярБюджета.Подразделение КАК Подразделение,
	               |	ЭкземплярБюджета.Сценарий КАК Сценарий,
	               |	ЭкземплярБюджета.НачалоПериода КАК НачалоПериода,
	               |	КОНЕЦПЕРИОДА(ЭкземплярБюджета.ОкончаниеПериода, ДЕНЬ) КАК КонецПериода,
	               |	СУММА(1) КАК КоличествоДокументов,
	               |	ЭкземплярБюджета.Аналитика1,
	               |	ЭкземплярБюджета.Аналитика2,
	               |	ЭкземплярБюджета.Аналитика3,
	               |	ЭкземплярБюджета.Аналитика4,
	               |	ЭкземплярБюджета.Аналитика5,
	               |	ЭкземплярБюджета.Аналитика6
	               |ПОМЕСТИТЬ ДокументыПоЗадаче
	               |ИЗ
	               |	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |ГДЕ
	               |	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭкземплярБюджета.Подразделение,
	               |	ЭкземплярБюджета.ВидБюджета,
	               |	ЭкземплярБюджета.Организация,
	               |	ЭкземплярБюджета.Сценарий,
	               |	ЭкземплярБюджета.НачалоПериода,
	               |	КОНЕЦПЕРИОДА(ЭкземплярБюджета.ОкончаниеПериода, ДЕНЬ),
	               |	ЭкземплярБюджета.Аналитика1,
	               |	ЭкземплярБюджета.Аналитика2,
	               |	ЭкземплярБюджета.Аналитика3,
	               |	ЭкземплярБюджета.Аналитика4,
	               |	ЭкземплярБюджета.Аналитика5,
	               |	ЭкземплярБюджета.Аналитика6
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабВидыБюджетов.ВидБюджета КАК ВидБюджета,
	               |	АналитикиБюджетов.Организация,
	               |	АналитикиБюджетов.Подразделение,
	               |	АналитикиБюджетов.Аналитика1,
	               |	АналитикиБюджетов.Аналитика2,
	               |	АналитикиБюджетов.Аналитика3,
	               |	АналитикиБюджетов.Аналитика4,
	               |	АналитикиБюджетов.Аналитика5,
	               |	АналитикиБюджетов.Аналитика6,
	               |	АналитикиБюджетов.Сценарий,
	               |	ТабПериодов.НачалоПериода КАК НачалоПериода,
	               |	СписокДокументов.Ссылка КАК Документ,
	               |	ТабПериодов.КонецПериода,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(СписокДокументов.Ссылка, &КомандаСоздать)) КАК ДокументПредставление,
	               |	"""" КАК Комментарий,
	               |	ЕСТЬNULL(СписокДокументов.Ссылка.Номер, """") КАК ДокументНомер,
	               |	ЕСТЬNULL(СписокДокументов.Ссылка.Дата, """") КАК ДокументДата,
	               |	ТабВидыБюджетов.НомерСтроки КАК НомерСтрокиВидаБюджета,
	               |	АналитикиБюджетов.ДоступностьОрганизация КАК ДоступностьОрганизация,
	               |	АналитикиБюджетов.ДоступностьПодразделение КАК ДоступностьПодразделение,
	               |	АналитикиБюджетов.ДоступностьАналитика1 КАК ДоступностьАналитика1,
	               |	АналитикиБюджетов.ДоступностьАналитика2,
	               |	АналитикиБюджетов.ДоступностьАналитика3,
	               |	АналитикиБюджетов.ДоступностьАналитика4,
	               |	АналитикиБюджетов.ДоступностьАналитика5,
	               |	АналитикиБюджетов.ДоступностьАналитика6,
	               |	АналитикиБюджетов.ДоступностьСценарий
	               |ИЗ
	               |	ВидыБюджетов КАК ТабВидыБюджетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиБюджетов КАК АналитикиБюджетов
	               |		ПО ТабВидыБюджетов.КлючСвязи = АналитикиБюджетов.КлючСвязи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыБюджетов КАК ВидыБюджетов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
	               |			ПО ВидыБюджетов.Периодичность = ТабПериодов.Периодичность
	               |		ПО ТабВидыБюджетов.ВидБюджета = ВидыБюджетов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокДокументов КАК СписокДокументов
	               |		ПО (АналитикиБюджетов.Организация = СписокДокументов.Организация)
	               |			И (АналитикиБюджетов.Подразделение = СписокДокументов.Подразделение)
	               |			И (АналитикиБюджетов.Сценарий = СписокДокументов.Сценарий)
	               |			И (АналитикиБюджетов.Аналитика1 = СписокДокументов.Аналитика1)
	               |			И (АналитикиБюджетов.Аналитика2 = СписокДокументов.Аналитика2)
	               |			И (АналитикиБюджетов.Аналитика3 = СписокДокументов.Аналитика3)
	               |			И (АналитикиБюджетов.Аналитика4 = СписокДокументов.Аналитика4)
	               |			И (АналитикиБюджетов.Аналитика5 = СписокДокументов.Аналитика5)
	               |			И (АналитикиБюджетов.Аналитика6 = СписокДокументов.Аналитика6)
	               |			И ТабВидыБюджетов.ВидБюджета = СписокДокументов.ВидБюджета
	               |			И (ТабПериодов.НачалоПериода = СписокДокументов.НачалоПериода)
	               |			И (ТабПериодов.КонецПериода = КОНЕЦПЕРИОДА(СписокДокументов.ОкончаниеПериода, ДЕНЬ))
	               |			И (ТабПериодов.Периодичность = СписокДокументов.Периодичность)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоЗадаче КАК ДокументыПоЗадаче
	               |		ПО ТабВидыБюджетов.ВидБюджета = ДокументыПоЗадаче.ВидБюджета
	               |			И (АналитикиБюджетов.Организация = ДокументыПоЗадаче.Организация)
	               |			И (АналитикиБюджетов.Подразделение = ДокументыПоЗадаче.Подразделение)
	               |			И (АналитикиБюджетов.Сценарий = ДокументыПоЗадаче.Сценарий)
	               |			И (ТабПериодов.НачалоПериода = ДокументыПоЗадаче.НачалоПериода)
	               |			И (ТабПериодов.КонецПериода = ДокументыПоЗадаче.КонецПериода)
	               |			И (АналитикиБюджетов.Аналитика1 = ДокументыПоЗадаче.Аналитика1)
	               |			И (АналитикиБюджетов.Аналитика2 = ДокументыПоЗадаче.Аналитика2)
	               |			И (АналитикиБюджетов.Аналитика3 = ДокументыПоЗадаче.Аналитика3)
	               |			И (АналитикиБюджетов.Аналитика4 = ДокументыПоЗадаче.Аналитика4)
	               |			И (АналитикиБюджетов.Аналитика5 = ДокументыПоЗадаче.Аналитика5)
	               |			И (АналитикиБюджетов.Аналитика6 = ДокументыПоЗадаче.Аналитика6)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ЕСТЬNULL(ДокументыПоЗадаче.КоличествоДокументов, 0) > 0
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЭкземплярБюджета.ВидБюджета,
	               |	ЭкземплярБюджета.Организация,
	               |	ЭкземплярБюджета.Подразделение,
	               |	ЭкземплярБюджета.Аналитика1,
	               |	ЭкземплярБюджета.Аналитика2,
	               |	ЭкземплярБюджета.Аналитика3,
	               |	ЭкземплярБюджета.Аналитика4,
	               |	ЭкземплярБюджета.Аналитика5,
	               |	ЭкземплярБюджета.Аналитика6,
	               |	ЭкземплярБюджета.Сценарий,
	               |	ЭкземплярБюджета.НачалоПериода,
	               |	ЭкземплярБюджета.Ссылка,
	               |	ЭкземплярБюджета.ОкончаниеПериода,
	               |	ПРЕДСТАВЛЕНИЕ(ЭкземплярБюджета.Ссылка),
	               |	ЭкземплярБюджета.Комментарий,
	               |	ЭкземплярБюджета.Номер,
	               |	ЭкземплярБюджета.Дата,
	               |	ЕСТЬNULL(ВидыБюджетов.НомерСтроки, 999999),
	               |	ДоступностьАналитикЭБ.ДоступностьОрганизация,
	               |	ДоступностьАналитикЭБ.ДоступностьПодразделение,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика1,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика2,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика3,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика4,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика5,
	               |	ДоступностьАналитикЭБ.ДоступностьАналитика6,
	               |	ДоступностьАналитикЭБ.ДоступностьСценарий
	               |ИЗ
	               |	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидыБюджетов КАК ВидыБюджетов
	               |		ПО ЭкземплярБюджета.ВидБюджета = ВидыБюджетов.ВидБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДоступностьАналитикЭБ КАК ДоступностьАналитикЭБ
	               |		ПО ЭкземплярБюджета.Ссылка = ДоступностьАналитикЭБ.Ссылка
	               |ГДЕ
	               |	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтрокиВидаБюджета,
	               |	НачалоПериода,
	               |	ДокументНомер
	               |ИТОГИ ПО
	               |	ВидБюджета,
	               |	НачалоПериода";
				   
	Запрос.УстановитьПараметр("ВидыБюджетов", ВидыБюджетов);
	Запрос.УстановитьПараметр("МассивВидовБюджетов", ВидыБюджетов.ВыгрузитьКолонку("ВидБюджета"));
	Запрос.УстановитьПараметр("АналитикиЗаполненияБюджетов",  АналитикаЗаполненияБюджета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГрафикРаботы", График);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ВсеДокументы", ВсеДокументы);
	Запрос.УстановитьПараметр("КомандаСоздать", НСтр("ru='Создать'"));
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Не ОформлятьРезультат Тогда
		Возврат Результат;
	КонецЕсли;
		
	ДеревоВводаБюджетов = Результат.Скопировать();
	ДеревоВводаБюджетов.Строки.Очистить();
	ДеревоВводаБюджетов.Колонки.Добавить("ВидБюджетаАналитика",Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаВидБюджета Из Результат.Строки Цикл
		ПериодичностьБюджета = СтрокаВидБюджета.ВидБюджета.Периодичность;
		ЭлементыДерева = ДеревоВводаБюджетов.Строки;
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.ВидБюджетаАналитика = Строка(СтрокаВидБюджета.ВидБюджета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВидБюджета);
		СтрокиПериод = СтрокаВидБюджета.Строки;
		
		Если Не ЗначениеЗаполнено(ПериодичностьБюджета) Тогда
			Продолжить;
		КонецЕсли;

		Если  Не Перечисления.Периодичность.Индекс(ПериодичностьБюджета) < Перечисления.Периодичность.Индекс(ПериодичностьЭтапа) Тогда
			СтрокиАналитика = СтрокиПериод[0].Строки; 
			Если  СтрокиАналитика.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокиАналитика[0]);
				Если ЗначениеЗаполнено(НоваяСтрока.Документ) Тогда
					НоваяСтрока.ДокументПредставление = НоваяСтрока.ДокументНомер + " " + НоваяСтрока.ДокументДата;
				КонецЕсли;
			Иначе
				Для Каждого СтрокаАналитика Из СтрокиАналитика Цикл
					СтрокаБюджета = НоваяСтрока.Строки.Добавить();
					СтрокаБюджета.ВидБюджетаАналитика = ПредставлениеАналитикСтрокиДереваДокументов(СтрокаАналитика);
					ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаАналитика);
					Если ЗначениеЗаполнено(СтрокаБюджета.Документ) Тогда
						СтрокаБюджета.ДокументПредставление = СтрокаБюджета.ДокументНомер + " " + СтрокаБюджета.ДокументДата;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПериод Из СтрокиПериод Цикл
				СтрокаБюджета = НоваяСтрока.Строки.Добавить();
				СтрокаБюджета.ВидБюджетаАналитика = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаПериод.НачалоПериода, ПериодичностьБюджета); 
				ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаПериод);
				Если СтрокаПериод.Строки.Количество() = 1 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаПериод.Строки[0]);
					Если ЗначениеЗаполнено(СтрокаБюджета.Документ) Тогда
						СтрокаБюджета.ДокументПредставление = СтрокаБюджета.ДокументНомер + " " + СтрокаБюджета.ДокументДата;
					КонецЕсли;
				Иначе
					Для Каждого СтрокаАналитика Из СтрокаПериод.Строки Цикл
						СтрокаБюджета1 = СтрокаБюджета.Строки.Добавить();
						СтрокаБюджета1.ВидБюджетаАналитика = ПредставлениеАналитикСтрокиДереваДокументов(СтрокаАналитика);
						ЗаполнитьЗначенияСвойств(СтрокаБюджета1,СтрокаАналитика);
						Если ЗначениеЗаполнено(СтрокаБюджета1.Документ) Тогда
							СтрокаБюджета1.ДокументПредставление = СтрокаБюджета1.ДокументНомер + " " + СтрокаБюджета1.ДокументДата;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоВводаБюджетов;
			
КонецФункции

// Создает документы "ЭкземплярБюджета" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа.
//                                         Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
// 	НастройкаДействия        - ТаблицаЗначений - настройки создания документов.
//                           - ДеревоЗначений  - дерево настроек создания документов
Функция СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогодокумента, Знач НастройкаДействия, Проводить = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	ОбщийМассивДокументов = Новый Массив();
	
	Если ТипЗнч(НастройкаДействия) = Тип("ДеревоЗначений") Тогда
		ДеревоВводаБюджетов = НастройкаДействия;
	Иначе
		ПериодДокумента = ПараметрыНовогодокумента.Период;
		Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
			ПериодДокумента = ТекущаяДатаСеанса();
		КонецЕсли;

		Реквизиты = Новый Структура("Периодичность", "Родитель.Периодичность");
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов, Реквизиты);
		Периодичность = Реквизиты.Периодичность;

		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
		
		ДеревоВводаБюджетов = ПолучитьДеревоВводаБюджетовПоНастройкамДействия(НастройкаДействия,НачалоПериода,КонецПериода,Периодичность);
	КонецЕсли;
	
	Если ДеревоВводаБюджетов = Неопределено Тогда
		Возврат  ОбщийМассивДокументов;
	КонецЕсли;
	
	ВсегоОбрабатываемыхСтрок = КоличествоОбрабатываемыхСтрокДереваБюджета(ДеревоВводаБюджетов);
	
	СтрокиВидБюджета = ДеревоВводаБюджетов.Строки;
	
	ОбработаноСтрок = 0;
	Для Каждого СтрокаВидБюджета Из СтрокиВидБюджета Цикл 
		
		Если СтрокаВидБюджета.Строки.Количество() > 0 Тогда
			СтрокиАналитикиПериода = СтрокаВидБюджета.Строки;
			Для Каждого СтрокаАналитикиПериода Из СтрокиАналитикиПериода Цикл
				Если СтрокаАналитикиПериода.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаАналитикиПериода1 Из СтрокаАналитикиПериода.Строки Цикл
						Если ЗначениеЗаполнено(СтрокаАналитикиПериода1.Документ) Тогда 
							ОбщийМассивДокументов.Добавить(СтрокаАналитикиПериода1.Документ);
							Продолжить; 
						КонецЕсли;
						МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
							ПолучитьСтруктуруПоСтрокеДействия(СтрокаАналитикиПериода1,ДеревоВводаБюджетов.Колонки), Истина, НеПроверятьСуществующиеДокументы);
						Если МассивДокументы <> Неопределено Тогда
							ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
						КонецЕсли;
						ОбработаноСтрок = ОбработаноСтрок + 1;
						ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
						ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
					КонецЦикла;
				Иначе
					Если ЗначениеЗаполнено(СтрокаАналитикиПериода.Документ) Тогда
						ОбщийМассивДокументов.Добавить(СтрокаАналитикиПериода.Документ);
						Продолжить; 
					КонецЕсли;
					МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
							ПолучитьСтруктуруПоСтрокеДействия(СтрокаАналитикиПериода,ДеревоВводаБюджетов.Колонки), Истина, НеПроверятьСуществующиеДокументы);
					Если МассивДокументы <> Неопределено Тогда
						ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
					КонецЕсли;
					ОбработаноСтрок = ОбработаноСтрок + 1;
					ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
					ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(СтрокаВидБюджета.Документ) Тогда 
				ОбщийМассивДокументов.Добавить(СтрокаВидБюджета.Документ);
				Продолжить; 
			КонецЕсли;
			МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
							ПолучитьСтруктуруПоСтрокеДействия(СтрокаВидБюджета,ДеревоВводаБюджетов.Колонки), Истина, НеПроверятьСуществующиеДокументы);
			Если МассивДокументы <> Неопределено Тогда
				ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
			КонецЕсли;
			ОбработаноСтрок = ОбработаноСтрок + 1;
			ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
		КонецЕсли;
	
	КонецЦикла;
	
	ОбщийМассивДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщийМассивДокументов);
	
	Возврат ОбщийМассивДокументов;
																
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования,ПроцессПодготовкиБюджетов=Неопределено)
	
	ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования, , ТекущаяДата(), Истина, Истина);
	ТаблицаСвязейЗадач = Справочники.МоделиБюджетирования.ПолучитьТаблицуСвязейЗадач(ТаблицаЗадач);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ТаблицаСвязейЗадач", ТаблицаСвязейЗадач);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ФормироватьЗадачиАвтоматически", 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "АвтоматическиФормироватьЗадачи"));
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов",ПроцессПодготовкиБюджетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Табл.НомерЗадачи,
	|	Табл.ЭтапПодготовкиБюджетов,
	|	Табл.ЭтапПодготовкиБюджетовОснование,
	|	Табл.ПроцессПодготовкиБюджетов,
	|	Табл.Период,
	|	Табл.ЗадачаВыполнена,
	|	Табл.Задача,
	|	ВЫБОР
	|		КОГДА Табл.Задача <> ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаСформирована,
	|	Табл.ДатаНачала,
	|	Табл.ДатаОкончанияФакт
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК Табл
	|ГДЕ
	|	(&ФормироватьЗадачиАвтоматически = ИСТИНА
	|			ИЛИ Табл.ПроцессПодготовкиБюджетов <> ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка))
	|	И (&ПроцессПодготовкиБюджетов = НЕОПРЕДЕЛЕНО
	|			ИЛИ Табл.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.Задача,
	|	Табл.ПредыдущаяЗадача
	|ПОМЕСТИТЬ ТаблицаСвязей
	|ИЗ
	|	&ТаблицаСвязейЗадач КАК Табл
	|ГДЕ
	|	Табл.ПредыдущаяЗадача <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
	|	МАКСИМУМ(ТаблицаЗадач.Период) КАК Период
	|ПОМЕСТИТЬ МаксимальныеПериодыВыполненныхЗадач
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|ГДЕ
	|	ТаблицаЗадач.ЗадачаСформирована
	|	И ТаблицаЗадач.ЗадачаВыполнена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.НомерЗадачи,
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
	|	ТаблицаЗадач.Период,
	|	ТаблицаЗадач.ЗадачаВыполнена,
	|	ТаблицаЗадач.Задача,
	|	ТаблицаЗадач.ЗадачаСформирована,
	|	ТаблицаЗадач.ДатаНачала
	|ПОМЕСТИТЬ ПериодыПоследующиеЗаВыполнением
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПериодыВыполненныхЗадач КАК МаксимальныеПериодыВыполненныхЗадач
	|		ПО ТаблицаЗадач.ЭтапПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ЭтапПодготовкиБюджетов
	|			И ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование = МаксимальныеПериодыВыполненныхЗадач.ЭтапПодготовкиБюджетовОснование
	|			И ТаблицаЗадач.ПроцессПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ПроцессПодготовкиБюджетов
	|ГДЕ
	|	ТаблицаЗадач.Период > ЕСТЬNULL(МаксимальныеПериодыВыполненныхЗадач.Период, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПоследующиеЗаВыполнением.НомерЗадачи,
	|	ПериодыПоследующиеЗаВыполнением.Период,
	|	ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов,
	|	ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетовОснование,
	|	ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов
	|ПОМЕСТИТЬ ЗадачиКФормированию
	|ИЗ
	|	ПериодыПоследующиеЗаВыполнением КАК ПериодыПоследующиеЗаВыполнением
	|ГДЕ
	|	НЕ (ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов, ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетовОснование, ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов) В
	|				(ВЫБРАТЬ
	|					Фильтр.ЭтапПодготовкиБюджетов,
	|					Фильтр.ЭтапПодготовкиБюджетовОснование,
	|					Фильтр.ПроцессПодготовкиБюджетов
	|				ИЗ
	|					ПериодыПоследующиеЗаВыполнением КАК Фильтр
	|				ГДЕ
	|					Фильтр.ЗадачаСформирована)
	|	И ПериодыПоследующиеЗаВыполнением.ДатаНачала <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование,
	|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов,
	|	МИНИМУМ(ЗадачиКФормированию.Период) КАК Период
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование,
	|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.НомерЗадачи
	|ПОМЕСТИТЬ ЗадачиКФормированиюМинимальныйПериод
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ЗадачиКФормированию.ЭтапПодготовкиБюджетов = Фильтр.ЭтапПодготовкиБюджетов
	|			И ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование = Фильтр.ЭтапПодготовкиБюджетовОснование
	|			И ЗадачиКФормированию.ПроцессПодготовкиБюджетов = Фильтр.ПроцессПодготовкиБюджетов
	|			И ЗадачиКФормированию.Период = Фильтр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.НомерЗадачи,
	|	ТаблицаСвязей.ПредыдущаяЗадача,
	|	ТаблицаЗадач.ДатаОкончанияФакт
	|ПОМЕСТИТЬ НомерПредыдущихЗадач
	|ИЗ
	|	ЗадачиКФормированиюМинимальныйПериод КАК ЗадачиКФормированию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
	|		ПО ЗадачиКФормированию.НомерЗадачи = ТаблицаСвязей.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО (ТаблицаСвязей.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомерПредыдущихЗадач.НомерЗадачи,
	|	МАКСИМУМ(ТаблицаЗадач.ДатаОкончанияФакт) КАК ДатаОкончанияФакт
	|ИЗ
	|	НомерПредыдущихЗадач КАК НомерПредыдущихЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО НомерПредыдущихЗадач.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	НомерПредыдущихЗадач.НомерЗадачи
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ТаблицаЗадач.ЗадачаВыполнена, ИСТИНА)) = ИСТИНА";
	//пояснение к условию: 
	//МИНИМУМ - на тот случай, если выполнена только одна из задач параллельной группы
	//ИСТИНА в ЕСТЬNULL - на случай, если задача не имеет предыдущих задач
	
	МассивЭтапов = ТаблицаЗадач.ВыгрузитьКолонку("ЭтапПодготовкиБюджетов");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭтапов, ТаблицаЗадач.ВыгрузитьКолонку("ЭтапПодготовкиБюджетовОснование"), Истина);
	МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
	
	СоответствиеФлагов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭтапов, "ВыполнятьАвтоматически, НастройкаДействия");
	
	МассивПроцессов = ТаблицаЗадач.ВыгрузитьКолонку("ПроцессПодготовкиБюджетов");
	МассивПроцессов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроцессов);
	ПараметрыДополненияОписания = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПроцессов, "Ответственный, ДополнениеКОписанию, Дата");
	
	ЕстьАвтоВыполняемыеЗадачи = Ложь;
	НомерЗадачКФормированию = Запрос.Выполнить().Выгрузить();
	Для Каждого ЗадачаКФормированию из НомерЗадачКФормированию Цикл
		СтрокаЗадачи = ТаблицаЗадач.Найти(ЗадачаКФормированию.НомерЗадачи, "НомерЗадачи");
		ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
		
		ЗадачаОбъект.УстановитьНовыйНомер();
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ТаблицаЗадач", ТаблицаЗадач);
		ЗадачаОбъект.Период = СтрокаЗадачи.Период;
		Если ЗначениеЗаполнено(СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование) Тогда
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование);
			НастройкаОсновногоЭтапа = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].НастройкаДействия.Получить();
			НастройкаЭтапа = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование].НастройкаДействия.Получить();
			Для Каждого СтрокаОсновногоЭтапа из НастройкаОсновногоЭтапа Цикл
				НайденнаяСтрока = НастройкаЭтапа.Найти(СтрокаОсновногоЭтапа.Имя, "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Значение = СтрокаОсновногоЭтапа.Значение;
				КонецЕсли;
			КонецЦикла;
			ЗадачаОбъект.НастройкаДействия = Новый ХранилищеЗначения(НастройкаЭтапа);
		Иначе
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		КонецЕсли;
		
		ЗадачаОбъект.ЭтапПодготовкиБюджетов = СтрокаЗадачи.ЭтапПодготовкиБюджетов;
		ЗадачаОбъект.ЭтапПодготовкиБюджетовОснование = СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование;
		ЗадачаОбъект.ПроцессПодготовкиБюджетов = СтрокаЗадачи.ПроцессПодготовкиБюджетов;
		
		Если ЗначениеЗаполнено(ЗадачаОбъект.ПроцессПодготовкиБюджетов) Тогда
			СтруктураДополнениеКОписанию = ПараметрыДополненияОписания[ЗадачаОбъект.ПроцессПодготовкиБюджетов];
			Если ЗначениеЗаполнено(СтруктураДополнениеКОписанию.ДополнениеКОписанию) Тогда
				Если ЗначениеЗаполнено(ЗадачаОбъект.ОписаниеЗадачи) Тогда
					ПостФикс = ЗадачаОбъект.ОписаниеЗадачи;
				КонецЕсли;
				ЗадачаОбъект.ОписаниеЗадачи = Строка(СтруктураДополнениеКОписанию.Дата) + ", " + СтруктураДополнениеКОписанию.Ответственный + ":" + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + СокрЛП(СтруктураДополнениеКОписанию.ДополнениеКОписанию) + Символы.ПС + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + ПостФикс;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВыполнятьАвтоматически Тогда
			Если Не ЗначениеЗаполнено(ЗадачаКФормированию.ДатаОкончанияФакт) Тогда
				ЗадачаОбъект.Дата = СтрокаЗадачи.ДатаНачала;
			Иначе
				ЗадачаОбъект.Дата = Макс(ЗадачаКФормированию.ДатаОкончанияФакт + 1, СтрокаЗадачи.ДатаНачала);
			КонецЕсли;
			УстановитьДлительностьЗадачи(ЗадачаОбъект, СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		Иначе
			ЗадачаОбъект.Дата = ТекущаяДата();
			ЗадачаОбъект.СрокИсполнения = ТекущаяДата();
		КонецЕсли;
		
		Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Неопределено, ЗадачаОбъект.Действие, Ложь) Тогда
			
			Если ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, ЗадачаОбъект);
				МассивДокументы = СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогодокумента, 
																	ЗадачаОбъект.НастройкаДействия.Получить(), Истина);
			ИначеЕсли ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, ЗадачаОбъект);
				МассивДокументы = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, 
																						ЗадачаОбъект.НастройкаДействия.Получить());
			КонецЕсли;
			
			Если МассивДокументы <> Неопределено Тогда
				Если ТипЗнч(МассивДокументы) <> Тип("Массив") Тогда
					МассивДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивДокументы);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ЗадачаОбъект.СписокДокументов, МассивДокументы, "Документ");
			КонецЕсли;
			
		КонецЕсли;
			
		ЗадачаОбъект.Записать();
		
		Если ВыполнятьАвтоматически Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("РежимФормированияЗадач");
			ЗадачаОбъект.ВыполнитьЗадачу();
			ЕстьАвтоВыполняемыеЗадачи = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьАвтоВыполняемыеЗадачи Тогда
		СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования,ПроцессПодготовкиБюджетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОповещенияПоБюджетнымЗадачам()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Задача_БюджетнаяЗадача.Ссылка КАК БюджетнаяЗадача,
		|	Задача_БюджетнаяЗадача.МодельБюджетирования КАК МодельБюджетирования,
		|	Задача_БюджетнаяЗадача.СрокИсполнения КАК СрокИсполнения,
		|	ВЫБОР
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения < &ТекущаяДата
		|			ТОГДА &ЗадачаПросрочена
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения = &ТекущаяДата
		|			ТОГДА &ЗадачаПодходитСрок
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения > &ТекущаяДата
		|			ТОГДА &ЗадачаПоступила
		|	КОНЕЦ КАК АктуальноеОповещение
		|ПОМЕСТИТЬ ТекущиеЗадачи
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК Задача_БюджетнаяЗадача
		|ГДЕ
		|	НЕ Задача_БюджетнаяЗадача.ПометкаУдаления
		|	И НЕ Задача_БюджетнаяЗадача.Выполнена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БюджетнаяЗадача,
		|	АктуальноеОповещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗадачи.БюджетнаяЗадача КАК БюджетнаяЗадача,
		|	ТекущиеЗадачи.МодельБюджетирования КАК МодельБюджетирования,
		|	ТекущиеЗадачи.АктуальноеОповещение,
		|	ВЫБОР
		|		КОГДА ТекущиеЗадачи.АктуальноеОповещение = &ЗадачаПодходитСрок
		|				И ОповещениеОПоступлении.ВидОповещения ЕСТЬ NULL 
		|			ТОГДА &ЗадачаПоступила
		|		ИНАЧЕ ТекущиеЗадачи.АктуальноеОповещение
		|	КОНЕЦ КАК ВидОповещения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Наименование,
		|	ТекущиеЗадачи.БюджетнаяЗадача.СрокИсполнения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель.Представление,
		|	ТекущиеЗадачи.БюджетнаяЗадача.ЭтапПодготовкиБюджетов
		|ПОМЕСТИТЬ ОповещенияНаОтправку
		|ИЗ
		|	ТекущиеЗадачи КАК ТекущиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОповещениеОПоступлении
		|		ПО ТекущиеЗадачи.БюджетнаяЗадача = ОповещениеОПоступлении.БюджетнаяЗадача
		|			И (ОповещениеОПоступлении.ВидОповещения = &ЗадачаПоступила)
		|ГДЕ
		|	НЕ (ТекущиеЗадачи.БюджетнаяЗадача, ТекущиеЗадачи.АктуальноеОповещение) В
		|				(ВЫБРАТЬ
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.БюджетнаяЗадача,
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.ВидОповещения
		|				ИЗ
		|					РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОтправленныеОповещенияПоБюджетнымЗадачам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОповещенияНаОтправку.БюджетнаяЗадача,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаНаименование КАК НаименованиеЗадачи,
		|	ОповещенияНаОтправку.МодельБюджетирования КАК МодельБюджетирования,
		|	ОповещенияНаОтправку.АктуальноеОповещение,
		|	ОповещенияНаОтправку.ВидОповещения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаСрокИсполнения КАК СрокИсполнения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель КАК Исполнитель,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнительПредставление КАК ИсполнительПредставление,
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК ИсполнительАдресЭП
		|ИЗ
		|	ОповещенияНаОтправку КАК ОповещенияНаОтправку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель = ПользователиКонтактнаяИнформация.Ссылка
		|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокИсполнения");
	Запрос.УстановитьПараметр("ТекущаяДата",		НАЧАЛОДНЯ(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ЗадачаПоступила",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПоступила);
	Запрос.УстановитьПараметр("ЗадачаПодходитСрок",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПодходитСрок);
	Запрос.УстановитьПараметр("ЗадачаПросрочена",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПросрочена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	Попытка
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);
	Исключение
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить соединение с почтовым сервером: (%1)'"),
				ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(НСтр("ru= 'БюджетныйПроцесс.ОтправкаОповещения'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
				
		СообщениеОбОшибке = Неопределено;
		
		Попытка
			ИдентификаторПисьма = СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, Выборка, Соединение);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если СообщениеОбОшибке = Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ОтправленныеОповещенияПоБюджетнымЗадачам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.БюджетнаяЗадача				= Выборка.БюджетнаяЗадача;
			МенеджерЗаписи.ВидОповещения				= Выборка.АктуальноеОповещение;
			МенеджерЗаписи.ВидОтправленногоОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Записать();
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru= 'БюджетныйПроцесс.ОтправкаОповещения'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,
					СообщениеОбОшибке,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
		
	КонецЦикла;

		
КонецПроцедуры

Функция СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, ЭлементВыборкиНаОтправку, Соединение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		РасширениеДляФайловПодписи = МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки(
			).РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
		
	ПараметрыПодстановки = Новый Структура();
	ПараметрыПодстановки.Вставить("БюджетнаяЗадача",				ЭлементВыборкиНаОтправку.БюджетнаяЗадача);
	ПараметрыПодстановки.Вставить("Исполнитель",					ЭлементВыборкиНаОтправку.Исполнитель);
	ПараметрыПодстановки.Вставить("ИсполнительПредставление",		ЭлементВыборкиНаОтправку.ИсполнительПредставление);
	ПараметрыПодстановки.Вставить("НаименованиеЗадачи",				ЭлементВыборкиНаОтправку.НаименованиеЗадачи);	
	ПараметрыПодстановки.Вставить("СрокИсполнения",					ЭлементВыборкиНаОтправку.СрокИсполнения);
	
	ПараметрыПисьма = Перечисления.ВидыОповещенийБюджетныхЗадач.ПолучитьПараметрыПисьмаПоШаблону(ЭлементВыборкиНаОтправку.ВидОповещения, ПараметрыПодстановки);
	
	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес, Представление", ЭлементВыборкиНаОтправку.ИсполнительАдресЭП, ЭлементВыборкиНаОтправку.ИсполнительПредставление));
	
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	
	СоотвВложения = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ЭлектронныеПодписи.(
		|		НомерСтроки,
		|		Подпись
		|	)
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетовПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ЭтапПодготовкиБюджетов
		|;
		|ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ЭлектронныеПодписи.(
		|		НомерСтроки,
		|		Подпись
		|	)
		|ИЗ
		|	Справочник.МоделиБюджетированияПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &МодельБюджетирования";
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетов",			ЭлементВыборкиНаОтправку.ЭтапПодготовкиБюджетов);
	Запрос.УстановитьПараметр("МодельБюджетирования",			ЭлементВыборкиНаОтправку.МодельБюджетирования);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Для Каждого ПакетЗапроса Из РезультатЗапроса Цикл
		Выборка = ПакетЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
			СоотвВложения.Вставить(ИмяФайла, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
			Для каждого ЭП Из Выборка.ЭлектронныеПодписи.Выгрузить() Цикл
				СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ ЭП.НомерСтроки + ")." +
					РасширениеДляФайловПодписи, ЭП.Подпись.Получить());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ИмяЯрлыкаИБ = Неопределено;
	Если ПараметрыПисьма.Свойство("ИмяЯрлыкаИБ", ИмяЯрлыкаИБ) Тогда
		ИмяФайлаВложения = ?(НЕ ПустаяСтрока(ИмяЯрлыкаИБ),
			ИмяЯрлыкаИБ, НСтр("ru = 'Запустить информационную базу'")) + ".v8i";
		СоотвВложения.Вставить(ИмяФайлаВложения, ПолучитьДвоичныеДанныеЯрлыкаИБ());
		ПараметрыПисьма.Удалить("ИмяЯрлыкаИБ");
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение);
	
КонецФункции

Функция ПолучитьДвоичныеДанныеЯрлыкаИБ()
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ТекстЯрлыка = "["+?(ПустаяСтрока(ЗаголовокСистемы), СтрокаСоединения, ЗаголовокСистемы)+"]
		|Connect="+СтрокаСоединения+"
		|App=Auto
		|WA=1";

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЯрлыка);	
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	УдалитьФайлы(ИмяВременногоФайла);

	Возврат Адрес;
	
КонецФункции

Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

Функция КоличествоОбрабатываемыхСтрокДереваБюджета(ДеревоВводаБюджетов)
	
	ВсегоСтрокДляОбработки = 0;
	Для Каждого СтрокаВидБюджета Из ДеревоВводаБюджетов.Строки Цикл
		Если ДеревоВводаБюджетов.Строки.Количество() > 0 Тогда
			Для Каждого СтрокаПериод Из СтрокаВидБюджета.Строки Цикл
				Если СтрокаПериод.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаАналитика Из СтрокаПериод.Строки Цикл
						Если Не ЗначениеЗаполнено(СтрокаАналитика.Документ) > 0 Тогда
							ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаПериод.Документ) Тогда
						ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаВидБюджета.Документ) Тогда
				ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсегоСтрокДляОбработки = 0 Тогда
		ВсегоСтрокДляОбработки = 1;
	КонецЕсли;

	Возврат ВсегоСтрокДляОбработки;
	
КонецФункции

Функция ПредставлениеАналитикСтрокиДереваДокументов(СтрокаДерева)
	
	ПредставлениеАналитики = "";
	
	Если ЗначениеЗаполнено(СтрокаДерева.Сценарий) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Сценарий + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Организация) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Организация + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Подразделение + ", ";
	КонецЕсли;
	
	Сч = 1;
	Пока Сч <= 6 Цикл
		Если ЗначениеЗаполнено(СтрокаДерева["Аналитика"+Сч]) Тогда
			ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева["Аналитика"+Сч] + ", ";
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	ПредставлениеАналитики = Лев(ПредставлениеАналитики,СтрДлина(ПредставлениеАналитики) - 2);
	
	Возврат ПредставлениеАналитики;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТКА

// Обработчик обновления УП
// Перезаполняет НастройкаДействия в соответствии с новым форматом хранения
// 
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов.Действие = ЗНАЧЕНИЕ(Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов)";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеМассив = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкаДействия = Выборка.Ссылка.НастройкаДействия.Получить();
		Если ТипЗнч(НастройкаДействия) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Имя","АналитикаЗаполненияБюджета");
		Строки = НастройкаДействия.НайтиСтроки(ПараметрыПоиска);
		Если Строки.Количество() > 0 Тогда
			Если Не Строки[0].Значение.Колонки.Найти("ДоступностьОрганизация") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДействия = Новый Структура;
		Для Каждого Стр Из НастройкаДействия Цикл
			СтруктураДействия.Вставить(Стр.Имя,Стр.Значение);
		КонецЦикла;
		
		Если Не (СтруктураДействия.Свойство("ВидБюджета") ИЛИ СтруктураДействия.Свойство("ВидыБюджетов")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеМассив.Добавить(Выборка.Ссылка);

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.Действие = ЗНАЧЕНИЕ(Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЛимитовРасходаДС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ДанныеМассив.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМассив);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Задача.БюджетнаяЗадача";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);	
			
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
			
				НастройкаДействия = ДокОбъект.НастройкаДействия.Получить();
				Если ТипЗнч(НастройкаДействия) <> Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
				
				АналитикаЗаполненияБюджета = Неопределено;
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Имя","ВидыБюджетов");
				Строки = НастройкаДействия.НайтиСтроки(ПараметрыПоиска);
				Если Строки.Количество() > 0 Тогда 
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("Имя","АналитикаЗаполненияБюджета");
					Строки = НастройкаДействия.НайтиСтроки(ПараметрыПоиска);
					Если Строки[0].Значение.Колонки.Найти("ДоступностьОрганизация") = Неопределено Тогда
						АналитикаЗаполненияБюджета = Строки[0].Значение;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если Не АналитикаЗаполненияБюджета = Неопределено Тогда
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьОрганизация",Новый ОписаниеТипов("Булево"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьПодразделение",Новый ОписаниеТипов("Булево"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьСценарий",Новый ОписаниеТипов("Булево"));
					Сч = 1;
					Пока Сч <=6 Цикл
						АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьАналитика"+Сч, Новый ОписаниеТипов("Булево"));
						Сч = Сч + 1;
					КонецЦикла;
					ДокОбъект.НастройкаДействия = Новый ХранилищеЗначения(НастройкаДействия);
				Иначе
					СтруктураДействия = Новый Структура;
					Для Каждого Стр Из НастройкаДействия Цикл
						СтруктураДействия.Вставить(Стр.Имя,Стр.Значение);
					КонецЦикла;
					
					Если Не СтруктураДействия.Свойство("ВидБюджета") Тогда
						Продолжить;
					КонецЕсли;
					
					НовыеНастройкиДействия = Новый ТаблицаЗначений;
					НовыеНастройкиДействия.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
					НовыеНастройкиДействия.Колонки.Добавить("Представление",Новый ОписаниеТипов("Строка"));
					НовыеНастройкиДействия.Колонки.Добавить("Значение",Новый ОписаниеТипов("ТаблицаЗначений"));
					
					ВидыБюджетов = Новый ТаблицаЗначений;
					ВидыБюджетов.Колонки.Добавить("ВидБюджета",Новый ОписаниеТипов("СправочникСсылка.ВидыБюджетов"));
					ВидыБюджетов.Колонки.Добавить("КлючСтроки",Новый ОписаниеТипов("УникальныйИдентификатор"));
					ВидыБюджетов.Колонки.Добавить("КлючСтрокиНастройкиАналитики",Новый ОписаниеТипов("УникальныйИдентификатор"));
					ВидыБюджетов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
					ВидыБюджетов.Колонки.Добавить("ПредставлениеИзмерений",Новый ОписаниеТипов("Строка"));

					КлючСтроки = Новый УникальныйИдентификатор();
						
					СтрокаВидыБюджетов = ВидыБюджетов.Добавить();
					СтрокаВидыБюджетов.ВидБюджета = СтруктураДействия.ВидБюджета;
					СтрокаВидыБюджетов.КлючСтроки = КлючСтроки;
					СтрокаВидыБюджетов.НомерСтроки = 1;
					
					АналитикаЗаполненияБюджета = Новый ТаблицаЗначений;
					АналитикаЗаполненияБюджета.Колонки.Добавить("Сценарий",Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("КлючСтроки",Новый ОписаниеТипов("УникальныйИдентификатор"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьОрганизация",Новый ОписаниеТипов("Булево"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьПодразделение",Новый ОписаниеТипов("Булево"));
					АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьСценарий",Новый ОписаниеТипов("Булево"));

					Сч = 1;
					Пока Сч <=6 Цикл
						ТипАналитик = Метаданные.Документы.ЭкземплярБюджета.Реквизиты.Аналитика1.Тип;
						АналитикаЗаполненияБюджета.Колонки.Добавить("Аналитика"+Сч, ТипАналитик);
						АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьАналитика"+Сч, Новый ОписаниеТипов("Булево"));
						Сч = Сч + 1;
					КонецЦикла;
								
					Если СтруктураДействия.Свойство("Сценарий") и ЗначениеЗаполнено(СтруктураДействия.Сценарий) 
							ИЛИ СтруктураДействия.Свойство("Организация") и ЗначениеЗаполнено(СтруктураДействия.Организация) 
							ИЛИ СтруктураДействия.Свойство("Подразделение") и ЗначениеЗаполнено(СтруктураДействия.Подразделение) Тогда
							
						СтрокаВидыБюджетов.КлючСтрокиНастройкиАналитики = КлючСтроки;
						СтрокаВидыБюджетов.ПредставлениеИзмерений = НСтр("ru = 'Индивидуальные настройки'");
						
						НоваяСтрокаАналитикаЗаполненияБюджета = АналитикаЗаполненияБюджета.Добавить();
						НоваяСтрокаАналитикаЗаполненияБюджета.КлючСтроки = КлючСтроки; 
						Если СтруктураДействия.Свойство("Сценарий") Тогда
							НоваяСтрокаАналитикаЗаполненияБюджета.Сценарий = СтруктураДействия.Сценарий;
						КонецЕсли;
						Если СтруктураДействия.Свойство("Организация") Тогда
							НоваяСтрокаАналитикаЗаполненияБюджета.Организация = СтруктураДействия.Организация;
						КонецЕсли;
						Если СтруктураДействия.Свойство("Подразделение") Тогда
							НоваяСтрокаАналитикаЗаполненияБюджета.Подразделение = СтруктураДействия.Подразделение;
						КонецЕсли;
				
					КонецЕсли;

					НоваяСтрока = НовыеНастройкиДействия.Добавить();
					НоваяСтрока.Имя = "ВидыБюджетов";
					НоваяСтрока.Представление = "ВидыБюджетов";
					НоваяСтрока.Значение = ВидыБюджетов;
					
					НоваяСтрока = НовыеНастройкиДействия.Добавить();
					НоваяСтрока.Имя = "АналитикаЗаполненияБюджета";
					НоваяСтрока.Представление = "АналитикаЗаполненияБюджета";
					НоваяСтрока.Значение = АналитикаЗаполненияБюджета;

					ДокОбъект.НастройкаДействия = Новый ХранилищеЗначения(НовыеНастройкиДействия);
					
				КонецЕсли;
				
			ИначеЕсли ДокОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЛимитовРасходаДС Тогда
				ДокОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОбъект);		

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %БюджетнаяЗадача% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БюджетнаяЗадача%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Задачи.БюджетнаяЗадача, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Задача.БюджетнаяЗадача");

КонецПроцедуры

// Получает структуру доступности аналитик "Экземпляра бюджета" по настройкам
// активной бюджетной задачи.
// 
// Параметры:
//  Документ - ДокументСсылка.ЭкземплярыБюджета - ссылка на документ "Экземпляр бюджета".
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого получаем доступность аналитик.
//
// Возвращаемое значение:
//  Структура - Структура доступности аналитик "Экземпляра бюджета".
//
Функция ПолучитьДоступностьАналитикЭкземпляраБюджета(Документ = Неопределено, Пользователь = Неопределено) Экспорт
	
	ДоступностьАналитик = Новый Структура;
	ДоступностьАналитик.Вставить("ДоступностьОрганизация",Ложь);
	ДоступностьАналитик.Вставить("ДоступностьПодразделение",Ложь);
	ДоступностьАналитик.Вставить("ДоступностьСценарий",Ложь);
	Для Сч = 1 по 6 Цикл
		ДоступностьАналитик.Вставить("ДоступностьАналитика" + Сч,Ложь);
	КонецЦикла;
	ДоступностьАналитик.Вставить("ЕстьАктивнаяЗадача",Ложь);
	
	Если Документ = Неопределено ИЛИ Пользователь = Неопределено Тогда
		Возврат ДоступностьАналитик;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	БюджетнаяЗадачаСписокДокументов.Ссылка,
	                |	БюджетнаяЗадачаСписокДокументов.Ссылка.НастройкаДействия,
	                |	БюджетнаяЗадачаСписокДокументов.Ссылка.ЭтапПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьЭтапаПодготовкиБюджетов
	                |ИЗ
	                |	Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
	                |ГДЕ
	                |	БюджетнаяЗадачаСписокДокументов.Документ = &ДокументЭБ
	                |	И БюджетнаяЗадачаСписокДокументов.Ссылка.Исполнитель = &Исполнитель
	                |	И НЕ БюджетнаяЗадачаСписокДокументов.Ссылка.Выполнена";
					
	Запрос.УстановитьПараметр("ДокументЭБ", Документ);
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Реквизиты = Новый Структура("НачалоПериода, ОкончаниеПериода", "НачалоПериода", "ОкончаниеПериода");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Реквизиты);

	
	Пока Выборка.Следующий() Цикл
		
		НастройкаДействия = Выборка.НастройкаДействия.Получить();
		
		Если Не ТипЗнч(НастройкаДействия) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДокументов = Новый Массив();
		СписокДокументов.Добавить(Документ);
		
		
		
		ДеревоВводаБюджетов = Задачи.БюджетнаяЗадача.ПолучитьДеревоВводаБюджетовПоНастройкамДействия(НастройкаДействия, Реквизиты.НачалоПериода, 
							  Реквизиты.ОкончаниеПериода, Выборка.ПериодичностьЭтапаПодготовкиБюджетов, СписокДокументов, Ложь);
							  
		НайденнаяСтрокаДерева = ДеревоВводаБюджетов.Строки.Найти(Документ,"Документ",Истина);
		
		Если Не НайденнаяСтрокаДерева = Неопределено Тогда			
			Если НайденнаяСтрокаДерева.ДоступностьОрганизация = Истина Тогда
				ДоступностьАналитик.ДоступностьОрганизация = Истина;
			КонецЕсли;
			Если НайденнаяСтрокаДерева.ДоступностьПодразделение = Истина Тогда
				ДоступностьАналитик.ДоступностьПодразделение = Истина;
			КонецЕсли;
			Если НайденнаяСтрокаДерева.ДоступностьСценарий = Истина Тогда
				ДоступностьАналитик.ДоступностьСценарий = Истина;
			КонецЕсли;
			Для Сч = 1 по 6 Цикл
				Если НайденнаяСтрокаДерева["ДоступностьАналитика" + Сч] = Истина Тогда
					ДоступностьАналитик["ДоступностьАналитика" + Сч] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДоступностьАналитик.ЕстьАктивнаяЗадача = Истина;
		
	КонецЦикла;
	
	Возврат ДоступностьАналитик;

КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли