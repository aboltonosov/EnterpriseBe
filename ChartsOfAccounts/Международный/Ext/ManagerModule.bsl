#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив счетов с видом субконто заданным в качестве параметра
//
// Параметры:
// 		ВидыСубконто - Массив, ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Массив ссылок или ссылка на субконто, по которому необходимо получить счета
//
// Возвращаемое значение:
// 		Массив - Массив ссылок <ПланСчетовСсылка.Международный>, поддерживающих субконто заданные параметром функции
//
Функция СчетаУчетаСВидомСубконто(ВидыСубконто) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Международный.Ссылка
	|ИЗ
	|	ПланСчетов.Международный КАК Международный
	|ГДЕ
	|	Международный.ВидыСубконто.ВидСубконто В(&ВидСубконто)");
	Запрос.УстановитьПараметр("ВидСубконто", ВидыСубконто);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидыСубконто") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПланСчетов.Ссылка
			|ИЗ
			|	ПланСчетов.Международный КАК ПланСчетов
			|ГДЕ
			|	ПланСчетов.ВидыСубконто.ВидСубконто В(&ВидСубконто)");
		Запрос.УстановитьПараметр("ВидСубконто", Параметры.ВидыСубконто);
		Результат = Запрос.Выполнить();
		Параметры.Отбор.Вставить("Ссылка", Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	//++ НЕ УТКА
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуИспользованиеСчетаМеждународногоУчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
	КонецЕсли;
	//-- НЕ УТКА

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Международный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Международный КАК Международный
	|ГДЕ
	|	НЕ Международный.УчетПоПодразделениям");
	
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланСчетов.Международный";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
 			Блокировка.Заблокировать();
			
			СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СчетОбъект.УчетПоПодразделениям = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


