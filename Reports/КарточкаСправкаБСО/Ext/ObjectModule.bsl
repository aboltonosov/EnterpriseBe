Перем мСписокОтбора;
Перем ПостроительОстаткиБСО;
Перем ПостроительГлавный;

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнитьНастройки();
	ДокументРезультат.Вывести(СформироватьОтчет());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНастройки()
	ПостроительОстаткиБСО.Текст =
	"ВЫБРАТЬ
	|	БланкиСтрогойОтчетности.Склад КАК Склад,
	|	БланкиСтрогойОтчетности.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БланкиСтрогойОтчетности.Серия КАК Серия,
	|	БланкиСтрогойОтчетности.Номер КАК Номер,
	|	БланкиСтрогойОтчетности.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(&Дата, {(Склад).* КАК Склад, (ФизическоеЛицо).* КАК ФизическоеЛицо, (Номенклатура).* КАК Номенклатура, (Тип).* КАК Тип, (Серия) КАК Серия}) КАК БланкиСтрогойОтчетности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	ФизическоеЛицо,
	|	Серия,
	|	Номер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Для Каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительОстаткиБСО.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительОстаткиБСО.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПостроительГлавный.Текст =
	"ВЫБРАТЬ
	|	БланкиСтрогойОтчетностиОбороты.Регистратор КАК ДокументДвижения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БланкиСтрогойОтчетностиОбороты.КоличествоПриход, 0) > 0
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Расход""
	|	КОНЕЦ КАК ТипДвижения,
	|	БланкиСтрогойОтчетностиОбороты.Регистратор.Дата КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.ФизическоеЛицо
	|		ИНАЧЕ БланкиСтрогойОтчетностиОбороты.Склад
	|	КОНЕЦ КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА БланкиСтрогойОтчетностиОбороты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА БланкиСтрогойОтчетностиОбороты.ФизическоеЛицо
	|			ИНАЧЕ БланкиСтрогойОтчетностиОбороты.Склад
	|		КОНЕЦ) КАК СкладПредставление,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БланкиСтрогойОтчетностиОбороты.Склад.ТекущийОтветственный
	|	КОНЕЦ КАК СкладОтветственный,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БланкиСтрогойОтчетностиОбороты.Склад.ТекущаяДолжностьОтветственного
	|	КОНЕЦ КАК СкладДолжность,
	|	БланкиСтрогойОтчетностиОбороты.Серия КАК Серия,
	|	БланкиСтрогойОтчетностиОбороты.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.КоличествоПриход <> 0
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.КоличествоПриход
	|		ИНАЧЕ БланкиСтрогойОтчетностиОбороты.КоличествоРасход
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.БланкиСтрогойОтчетности.Обороты(&ДатаНач, &ДатаКон, Регистратор, {(Склад).* КАК Склад, (ФизическоеЛицо).* КАК ФизическоеЛицо, (Номенклатура).* КАК Номенклатура, (Тип).* КАК Тип, (Серия) КАК Серия}) КАК БланкиСтрогойОтчетностиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	БланкиСтрогойОтчетностиОбороты.Регистратор.МоментВремени,
	|	Серия,
	|	Номер
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Склад,
	|	ДокументДвижения
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Для Каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительГлавный.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительГлавный.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ПостроительГлавный.Отбор.Склад.Значение = Склад;
		ПостроительГлавный.Отбор.Склад.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Склад.Значение = Склад;
		ПостроительОстаткиБСО.Отбор.Склад.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПостроительГлавный.Отбор.Номенклатура.Значение = Номенклатура;
		ПостроительГлавный.Отбор.Номенклатура.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Номенклатура.Значение = Номенклатура;
		ПостроительОстаткиБСО.Отбор.Номенклатура.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПостроительГлавный.Отбор.ФизическоеЛицо.Значение = ФизическоеЛицо;
		ПостроительГлавный.Отбор.ФизическоеЛицо.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.ФизическоеЛицо.Значение = ФизическоеЛицо;
		ПостроительОстаткиБСО.Отбор.ФизическоеЛицо.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		ПостроительГлавный.Отбор.Серия.Значение = Серия;
		ПостроительГлавный.Отбор.Серия.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Серия.Значение = Серия;
		ПостроительОстаткиБСО.Отбор.Серия.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тип) Тогда
		ПостроительГлавный.Отбор.Тип.Значение = Тип;
		ПостроительГлавный.Отбор.Тип.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Тип.Значение = Тип;
		ПостроительОстаткиБСО.Отбор.Тип.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьОтчет()
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_КарточкаСправкаБСО";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСлева = 10;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 5;
	
	Макет = ПолучитьМакет("КарточкаСправка");
	
	ПолучаемаяТаблица = УчетБланковСтрогойОтчетностиСервер.СтруктураСлужебнойТаблицыБСО();
	ПолучаемаяТаблица.Колонки.Добавить("ТипДвижения");
	
	НачДата = НачалоДня(ДатаНачала);
	КонДата = ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), ТекущаяДата());
	
	ПостроительОстаткиБСО.Параметры.Вставить("Дата", НачДата);
	ПостроительОстаткиБСО.Выполнить();
	ТЗОстаткиНач = ПостроительОстаткиБСО.Результат.Выгрузить();
	ТЗОстаткиНач = СвернутьТаблицуПоИнтервалу(ТЗОстаткиНач);
	
	ПостроительОстаткиБСО.Параметры.Вставить("Дата", Новый Граница(КонДата, ВидГраницы.Включая));
	ПостроительОстаткиБСО.Выполнить();
	ТЗОстаткиКон = ПостроительОстаткиБСО.Результат.Выгрузить();
	ТЗОстаткиКон = СвернутьТаблицуПоИнтервалу(ТЗОстаткиКон);
	
	// приход и расход
	ПостроительГлавный.Параметры.Вставить("ДатаНач", НачДата);
	ПостроительГлавный.Параметры.Вставить("ДатаКон", КонДата);
	ПостроительГлавный.Выполнить();
	РезультатЗапроса = ПостроительГлавный.Результат;
	
	ПервыйСклад = Истина;
	
	ВыборкаПоСкладамФизЛицам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСкладамФизЛицам.Следующий() Цикл
		Если Не ПервыйСклад Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйСклад = Ложь;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ОбластьЗаголовок.Параметры.Организация = Организация.НаименованиеПолное;
		ОбластьЗаголовок.Параметры.НаименованиеБланка = Строка(Номенклатура) + ?(ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Тип), ", ", "") + ?(ЗначениеЗаполнено(Тип), Строка(Тип), "");
		
		Если ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.Склады") И ЗначениеЗаполнено(ВыборкаПоСкладамФизЛицам.Склад) Тогда
			ОбластьЗаголовок.Параметры.РасшифровкаПодписи = Строка(ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоСкладамФизЛицам.Склад.ТекущийОтветственный)) + ?(ПустаяСтрока(ВыборкаПоСкладамФизЛицам.СкладПредставление), "", " (" + ВыборкаПоСкладамФизЛицам.СкладПредставление + ")");
			ОбластьЗаголовок.Параметры.Должность = ВыборкаПоСкладамФизЛицам.Склад.ТекущаяДолжностьОтветственного;
		ИначеЕсли ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(ВыборкаПоСкладамФизЛицам.Склад) Тогда
			//TODO
			ДанныеФизЛица = "";
			Если ТипЗнч(ДанныеФизЛица) = Тип("Структура") Тогда
				ОбластьЗаголовок.Параметры.РасшифровкаПодписи = Строка(ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоСкладамФизЛицам.Склад));
				ОбластьЗаголовок.Параметры.Должность = ДанныеФизЛица.Должность;
			КонецЕсли;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		Отбор = Новый Структура;
		Если ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.Склады") Тогда
			Отбор.Вставить("Склад", ВыборкаПоСкладамФизЛицам.Склад);
		ИначеЕсли ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Отбор.Вставить("ФизическоеЛицо", ВыборкаПоСкладамФизЛицам.Склад);
		КонецЕсли;
		
		НачальныйОстаток = ТЗОстаткиНач.Скопировать(Отбор);
		
		ТипДвижения = "Остаток";
		Для Каждого СтрокаТЗ Из НачальныйОстаток Цикл
			ОбластьСтрока.Параметры["Количество" + ТипДвижения] = СтрокаТЗ.Количество;
			ОбластьСтрока.Параметры["НачальныйНомерБСО" + ТипДвижения] = СтрокаТЗ.НачальныйНомерБСО;
			ОбластьСтрока.Параметры["КонечныйНомерБСО" + ТипДвижения] = СтрокаТЗ.КонечныйНомерБСО;
			ОбластьСтрока.Параметры["Серия" + ТипДвижения] = СтрокаТЗ.Серия;
			ОбластьСтрока.Параметры.ДатаОперации = НачДата;
			ОбластьСтрока.Параметры.Основание = "Остаток";
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ВыборкаДокумент = ВыборкаПоСкладамФизЛицам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			ПолучаемаяТаблица.Очистить();
			
			Выборка = ВыборкаДокумент.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ПолучаемаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Серия = СокрЛП(Выборка.Серия);
				НоваяСтрока.ТипДвижения = Выборка.ТипДвижения;
			КонецЦикла;
			
			Если ПолучаемаяТаблица.Количество() > 0 Тогда
				ПолучаемаяТаблица = УчетБланковСтрогойОтчетностиСервер.СвернутьТаблицуБСО(ПолучаемаяТаблица, Ложь);
			КонецЕсли;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Основание = Лев(Строка(ВыборкаДокумент.ДокументДвижения), СтрДлина(Строка(ВыборкаДокумент.ДокументДвижения)) - 9);
			ОбластьСтрока.Параметры.ДокументДвижения = ВыборкаДокумент.ДокументДвижения;
			ОбластьСтрока.Параметры.ДатаОперации = ВыборкаДокумент.ДатаОперации;
			
			Для Каждого СтрокаТЗ Из ПолучаемаяТаблица Цикл
				ОбластьСтрока.Параметры["Количество" + СтрокаТЗ.ТипДвижения] = СтрокаТЗ.Количество;
				ОбластьСтрока.Параметры["НачальныйНомерБСО" + СтрокаТЗ.ТипДвижения] = СтрокаТЗ.НачальныйНомерБСО;
				ОбластьСтрока.Параметры["КонечныйНомерБСО" + СтрокаТЗ.ТипДвижения] = СтрокаТЗ.КонечныйНомерБСО;
				ОбластьСтрока.Параметры["Серия" + СтрокаТЗ.ТипДвижения] = СтрокаТЗ.Серия;
				ТабДок.Вывести(ОбластьСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		Отбор = Новый Структура;
		Если ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.Склады") Тогда
			Отбор.Вставить("Склад", ВыборкаПоСкладамФизЛицам.Склад);
		ИначеЕсли ТипЗнч(ВыборкаПоСкладамФизЛицам.Склад) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Отбор.Вставить("ФизическоеЛицо", ВыборкаПоСкладамФизЛицам.Склад);
		КонецЕсли;
		
		КонечныйОстаток = ТЗОстаткиКон.Скопировать(Отбор);
		
		ТипДвижения = "Остаток";
		Для Каждого СтрокаТЗ Из КонечныйОстаток Цикл
			ОбластьСтрока.Параметры["Количество" + ТипДвижения] = СтрокаТЗ.Количество;
			ОбластьСтрока.Параметры["НачальныйНомерБСО" + ТипДвижения] = СтрокаТЗ.НачальныйНомерБСО;
			ОбластьСтрока.Параметры["КонечныйНомерБСО" + ТипДвижения] = СтрокаТЗ.КонечныйНомерБСО;
			ОбластьСтрока.Параметры["Серия" + ТипДвижения] = СтрокаТЗ.Серия;
			ОбластьСтрока.Параметры.ДатаОперации = КонДата;
			ОбластьСтрока.Параметры.Основание = "Остаток";
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции

Функция СвернутьТаблицуПоИнтервалу(ИсходнаяТаблица)
	ТЗ = УчетБланковСтрогойОтчетностиСервер.СтруктураСлужебнойТаблицыБСО();
	Для каждого Стр Из ИсходнаяТаблица Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Серия = СокрЛП(Стр.Серия);
	КонецЦикла;
	
	Если ТЗ.Количество() > 0 Тогда
		ТЗ = УчетБланковСтрогойОтчетностиСервер.СвернутьТаблицуБСО(ТЗ, Ложь);
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

#КонецОбласти

#КонецЕсли

мСписокОтбора = Новый СписокЗначений;
мСписокОтбора.Добавить("Склад");
мСписокОтбора.Добавить("ФизическоеЛицо");
мСписокОтбора.Добавить("Номенклатура");
мСписокОтбора.Добавить("Тип");
мСписокОтбора.Добавить("Серия");

ПостроительОстаткиБСО = Новый ПостроительОтчета;
ПостроительГлавный = Новый ПостроительОтчета;