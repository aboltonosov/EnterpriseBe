#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.Вставить("РазрешеноМенятьВарианты", Ложь);
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		Дата = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.ПараметрКоманды, "ЖелательнаяДатаПлатежа");
	
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Дата", Дата);
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Документ", Параметры.ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючВарианта = "ИспользованияЛимитовРасходаДенежныхСредствКонтекст" Тогда
		ПараметрВалюта = СхемаКомпоновкиДанных.Параметры.Найти("Валюта");
		ПараметрВалюта.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		
		ПараметрВыводОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ВыводОтчета");
		ПараметрВыводОтчета.ОграничениеИспользования = Истина;
		ПараметрВыводОтчета.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	#Область УстановкаОбязательныхПараметров
		
	ПараметрДокумент	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Документ");
	ПараметрДата = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Дата");
	// Обработка параметра "Дата"
	Если ТипЗнч(ПараметрДата.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ИспользуемаяДата = ПараметрДата.Значение.Дата;
	Иначе
		ИспользуемаяДата = ТекущаяДата();
	КонецЕсли;
	
	ПараметрВыводОтчета	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыводОтчета");
	ПараметрВалюта		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	
	Если Не ЗначениеЗаполнено(ПараметрДата.Значение) Или Не ПараметрДата.Использование Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Дата", ИспользуемаяДата, Истина);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	// Обработка валюты
	Если ПараметрВыводОтчета.Значение = 0 Тогда // В валюте документа
		ПараметрВалюта.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрДокумент.Значение, "Валюта");
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	Иначе
		Если Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек, "Валюта", Константы.ВалютаУправленческогоУчета.Получить());
			
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	ЛимитыДействующиеНаДату = ЛимитыРасходованияДенежныхСредствСервер.ПравилаЛимитовНаДату(ИспользуемаяДата);
	
	Если ЛимитыДействующиеНаДату.Количество() > 0 Тогда
		
		Документ = ПараметрДокумент.Значение;
		ВалютаДокумента = ПараметрВалюта.Значение;
	
		ПланФактЛимитов = ЛимитыРасходованияДенежныхСредствСервер.ПланФактЛимитов(ИспользуемаяДата, Документ, ВалютаДокумента, Истина);
		Данные = ПреобразоватьПланФактЛимитовДляВыводаВОтчет(ПланФактЛимитов);
		
		Если Данные.Количество() > 0 Тогда
			ВнешниеНаборы = Новый Структура("ПланФактЛимитов, ДействующиеЛимиты", Данные, ЛимитыДействующиеНаДату);
			
			// Сформируем отчет
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		КонецЕсли;
		
	КонецЕсли;

	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	// Обработка валюты
	ПараметрВыводОтчета	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыводОтчета");
	ПараметрДокумент	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Документ");
	ПараметрВалюта		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	
	Если ПараметрВыводОтчета.Значение = 0 
		И Не ЗначениеЗаполнено(ПараметрДокумент.Значение) Тогда // В валюте документа
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"Документ", 
			НСтр("ru= 'Не заполнено поле ""Лимиты, применяемые для документа"".'"),
			""); 
		
	ИначеЕсли ПараметрВыводОтчета.Значение = 1 
		И Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда // В валюте
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"Валюта", 
			НСтр("ru= 'Не заполнено поле ""Валюта"".'"),
			""); 
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьПланФактЛимитовДляВыводаВОтчет(ПланФактЛимитов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета,
		|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка,
		|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ВидАналитики,
		|	ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.ИмяИзмерения
		|ПОМЕСТИТЬ ПравилаЛимитов
		|ИЗ
		|	Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИспользуемыеАналитики КАК ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
		|		ПО ПравилаЛимитовПоДаннымБюджетированияИспользуемыеАналитики.Ссылка = ПравилаЛимитовПоДаннымБюджетирования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаЛимитов.СтатьяБюджета,
		|	ПравилаЛимитов.Ссылка,
		|	ПравилаЛимитов.ВидАналитики,
		|	ПравилаЛимитов.ИмяИзмерения
		|ИЗ
		|	ПравилаЛимитов КАК ПравилаЛимитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиБюджетов.Ссылка,
		|	СтатьиБюджетов.ВидАналитики1,
		|	СтатьиБюджетов.ВидАналитики2,
		|	СтатьиБюджетов.ВидАналитики3,
		|	СтатьиБюджетов.ВидАналитики4,
		|	СтатьиБюджетов.ВидАналитики5,
		|	СтатьиБюджетов.ВидАналитики6
		|ИЗ
		|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
		|ГДЕ
		|	СтатьиБюджетов.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПравилаЛимитов.СтатьяБюджета
		|			ИЗ
		|				ПравилаЛимитов)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КэшАналитикЛимитов = РезультатЗапроса[1].Выгрузить();
	КэшАналитикЛимитов.Индексы.Добавить("Ссылка, ИмяИзмерения");
	
	КэшВидовАналитик = РезультатЗапроса[2].Выгрузить();
	КэшВидовАналитик.Индексы.Добавить("Ссылка");
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	Для Каждого Колонка из ПланФактЛимитов.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "Аналитика") Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаРезультат.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	Для Сч = 1 по 8 Цикл
		ТаблицаРезультат.Колонки.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Ссылка, ИмяИзмерения");
		
	Для Каждого СтрокаПланФакт из ПланФактЛимитов Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.Правило = СтрокаПланФакт.Правило;
		НоваяСтрока.СуммаПлан = СтрокаПланФакт.СуммаПлан;
		НоваяСтрока.СуммаФакт = СтрокаПланФакт.СуммаФакт;
		
		Для Сч = 1 по 6 Цикл
			НоваяСтрока["Аналитика" + Сч] = NULL;
		КонецЦикла;
		
		Счетчик = 1;
		СтруктураПоиска.Ссылка = СтрокаПланФакт.Правило;
		
		СтруктураПоиска.ИмяИзмерения = "Организация";
		Если КэшАналитикЛимитов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока["Аналитика" + Счетчик] = СтрокаПланФакт.Организация;
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		СтруктураПоиска.ИмяИзмерения = "Подразделение";
		Если КэшАналитикЛимитов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока["Аналитика" + Счетчик] = СтрокаПланФакт.Подразделение;
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		СтруктураПоиска.ИмяИзмерения = "";
		НайденныеСтроки = КэшАналитикЛимитов.НайтиСтроки(СтруктураПоиска);
		КэшВидовАналитикСтроки = Неопределено;
		
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если КэшВидовАналитикСтроки = Неопределено Тогда
				КэшВидовАналитикСтроки = КэшВидовАналитик.Найти(НайденнаяСтрока.СтатьяБюджета);
			КонецЕсли;
			ИмяИсточника = "";
			Для Сч = 1 по 6 Цикл
				Если КэшВидовАналитикСтроки["ВидАналитики" + Сч] = НайденнаяСтрока.ВидАналитики Тогда
					ИмяИсточника = "Аналитика" + Сч;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ИмяИсточника) Тогда
				НоваяСтрока["Аналитика" + Счетчик] = СтрокаПланФакт[ИмяИсточника];
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли