#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Отказ = Ложь;
	ПередКомпоновкойМакета(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПослеКомпоновкиМакета(МакетКомпоновки);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	
КонецПроцедуры

Процедура ПередКомпоновкойМакета(Отказ)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Организация = ЗначениеПараметра.Значение;

	ПоказательНУ = Ложь;
	ПоказательБУ = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Показатель"));
	Если ЗначениеПараметра.Значение = Истина Тогда
		ПоказательНУ = Истина;
		ПоказательБУ = Ложь;
	КонецЕсли;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	НачалоПериода = ЗначениеПараметра.Значение.ДатаНачала;
	КонецПериода  = ЗначениеПараметра.Значение.ДатаОкончания;
	
	НастройкиРезервовОтпусков = РезервОтпусков.НастройкиРезервовОтпусков(Организация, КонецПериода);
	МетодНачисленияРезерваОтпусков = НастройкиРезервовОтпусков.МетодНачисленияРезерваОтпусков;
	НормативныйМетод  = МетодНачисленияРезерваОтпусков = Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод;
	МетодОбязательств = МетодНачисленияРезерваОтпусков = Перечисления.МетодыНачисленияРезервовОтпусков.МетодОбязательств;
	ФормироватьРезервОтпусковБУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ;
	ФормироватьРезервОтпусковНУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Если НачалоМесяца(НачалоПериода) <> НачалоМесяца(КонецПериода) 
			ИЛИ НачалоМесяца(НачалоПериода) <> НачалоПериода
			ИЛИ КонецМесяца(КонецПериода) <> КонецПериода Тогда
			ТекстОшибки = НСтр("ru = 'В качестве периода следует указать целый месяц'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ФормироватьРезервОтпусковБУ
		И ПоказательБУ Тогда
		ТекстОшибки = НСтр("ru = 'В бухгалтерском учете оценочные обязательства не начисляются'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормироватьРезервОтпусковНУ
		И ПоказательНУ Тогда
		ТекстОшибки = НСтр("ru = 'В налоговом учете резервы не формируются'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Инвентаризация = КонецДня(КонецПериода) = КонецГода(КонецПериода);
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметра.Значение = НачалоПериода;
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметра.Значение = КонецПериода;
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериодаОстатков"));
	ЗначениеПараметра.Значение = Макс(КонецДня(НачалоПериода-1), НачалоГода(НачалоПериода));
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериодаОстатков"));
	ЗначениеПараметра.Значение = НачалоГода(НачалоПериода);
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Инвентаризация"));
	ЗначениеПараметра.Значение = Инвентаризация; 
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИгнорироватьОборот"));
	ЗначениеПараметра.Значение = НачалоГода(НачалоПериода) = НачалоДня(Макс(КонецДня(НачалоПериода-1), НачалоГода(НачалоПериода)));
	ЗначениеПараметра.Использование = Истина;
	
	Таблица = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"РезервыОтпусков");
	
	МассивНазванийГруппировок = Новый Массив;
	МассивНазванийГруппировок.Добавить("ГруппировкаФизическоеЛицо");
	
	МассивГруппировок = Новый Массив;
	
	МассивПоказателей = Новый Массив;
	Если ПоказательНУ Тогда
		
		Если Инвентаризация Тогда
			СуффиксГруппировки = "МО";
		Иначе
			СуффиксГруппировки = "";
		КонецЕсли;
		
		МассивПоказателей.Добавить("НУ");
		Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
			МассивГруппировок.Добавить(НайтиПоИмени(Таблица.Строки,ИмяГруппировки + "НУ" + СуффиксГруппировки));
		КонецЦикла;
		
	Иначе
		
		Если Инвентаризация
			ИЛИ МетодОбязательств Тогда
			СуффиксГруппировки = "МО";
		Иначе
			СуффиксГруппировки = "";
		КонецЕсли;
		МассивПоказателей.Добавить("БУ");
		Для Каждого ИмяГруппировки Из МассивНазванийГруппировок Цикл
			МассивГруппировок.Добавить(НайтиПоИмени(Таблица.Строки,ИмяГруппировки + "БУ" + СуффиксГруппировки));
		КонецЦикла;
		
	КонецЕсли;
	
	Показатель = МассивПоказателей[0];
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группировка.Использование = Истина;
	КонецЦикла;
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("СуммаРезерва");
	МассивСумм.Добавить("СуммаРезерваСтраховыхВзносов");
	МассивСумм.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	
	МассивПоказателейРасчета = Новый Массив;
	Если Инвентаризация
		ИЛИ (ПоказательБУ И МетодОбязательств) Тогда
		МассивПоказателейРасчета.Добавить("ОстатокОтпуска");
		МассивПоказателейРасчета.Добавить("СреднийЗаработок");
		МассивПоказателейРасчета.Добавить("ТекущаяСтавкаСтраховыхВзносов");
		МассивПоказателейРасчета.Добавить("ТекущаяСтавкаФССНесчастныеСлучаи");
	Иначе
		МассивПоказателейРасчета.Добавить("ФОТ");
		МассивПоказателейРасчета.Добавить("СтраховыеВзносы");
		МассивПоказателейРасчета.Добавить("ФССНесчастныеСлучаи");
		МассивПоказателейРасчета.Добавить("НормативОтчисленийВРезервОтпусков");
	КонецЕсли;
	
	Если ПоказательНУ Тогда 
		МассивПоказателейРасчета.Добавить("СуммаРезерваИсчисленоНУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		Если Инвентаризация Тогда
			МассивПоказателейРасчета.Добавить("СуммаРезерваНакопленоНУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ");
		КонецЕсли;
	Иначе
		МассивПоказателейРасчета.Добавить("СуммаРезерваИсчисленоБУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоБУ");
		МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоБУ");
		Если Инвентаризация
			ИЛИ МетодОбязательств Тогда
			МассивПоказателейРасчета.Добавить("СуммаРезерваНакопленоБУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваСтраховыхВзносовНакопленоБУ");
			МассивПоказателейРасчета.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоБУ");
		КонецЕсли;
	КонецЕсли;
	
	Номер = 0;
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, СтрЗаменить(МассивНазванийГруппировок[Номер], "Группировка", ""));
		
		Для Каждого ИмяПоказателя Из МассивПоказателейРасчета Цикл
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяПоказателя);
		КонецЦикла;
		
		Для Каждого ИмяСуммы Из МассивСумм Цикл
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяСуммы + Показатель);
		КонецЦикла;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки)
	
	// Удаление итоговых строк в группировке
	Для Каждого ЧастьМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЧастьМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			Если ЧастьМакета.Строки.Количество() <> 0 Тогда
				ИтогиГруппировкиТаблица = ЧастьМакета.Строки[0].Тело[0];
				ЧастьМакета.Строки[0].Тело.Удалить(ИтогиГруппировкиТаблица);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.Вставить("РазрешеноМенятьВарианты", Ложь);
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

