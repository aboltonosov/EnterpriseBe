#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();

	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Попытка 
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ПараметрыОтчетов = Новый Структура("Параметры,Отбор", Новый Структура, Новый Структура);
		
		ДополнитьОтборОтчета("Организация", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		ДополнитьОтборОтчета("Подразделение", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		ДополнитьОтборОтчета("Сотрудник", ПараметрыОтчетов.Отбор, НастройкиОтчета);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ЛицевыеСчетаСотрудников.ПФ_MXL_" + КлючВарианта);
		
		Для каждого СтрокаПоГодам Из ДанныеОтчета.Строки Цикл
				
			ФизическиеЛицаОрганизаций = Новый Соответствие;
			МассивСотрудников = Новый Массив;
			МассивФизическихЛиц = Новый Массив;
		
			Для каждого СтрокаОрганизации Из СтрокаПоГодам.Строки Цикл
				Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
					Для каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
						
						МассивСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
						МассивФизическихЛиц.Добавить(СтрокаСотрудника.СотрудникФизическоеЛицо);
						
						Если ЗначениеЗаполнено(СтрокаСотрудника.Организация) Тогда
							
							МассивФизическихЛицОрганизации = ФизическиеЛицаОрганизаций.Получить(СтрокаСотрудника.Организация);
							Если МассивФизическихЛицОрганизации = Неопределено Тогда
								МассивФизическихЛицОрганизации = Новый Массив;
							КонецЕсли; 
							
							МассивФизическихЛицОрганизации.Добавить(СтрокаСотрудника.СотрудникФизическоеЛицо);
							ФизическиеЛицаОрганизаций.Вставить(СтрокаСотрудника.Организация, МассивФизическихЛицОрганизации);
							
						КонецЕсли; 
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			ПериодОтчета = Новый СтандартныйПериод;
			ПериодОтчета.ДатаНачала = СтрокаПоГодам.ГодНачисления;
			
			КонецПериода = КонецГода(СтрокаПоГодам.ГодНачисления);
			ПериодОтчета.ДатаОкончания = ?(СтрокаПоГодам.ПараметрыДанныхКонецПериода < КонецПериода, СтрокаПоГодам.ПараметрыДанныхКонецПериода, КонецПериода);
			
			ПараметрыОтчетов.Параметры.Вставить("Период", ПериодОтчета);
			
			Если МассивСотрудников.Количество() > 0 Тогда
				ПараметрыОтчетов.Отбор.Вставить("Сотрудник", Новый Структура("ВидСравнения,ПравоеЗначение", ВидСравненияКомпоновкиДанных.ВСписке, МассивСотрудников));
			КонецЕсли; 
		
			Если МассивФизическихЛиц.Количество() > 0 Тогда
				ПараметрыОтчетов.Отбор.Вставить("ФизическоеЛицо", Новый Структура("ВидСравнения,ПравоеЗначение", ВидСравненияКомпоновкиДанных.ВСписке, МассивФизическихЛиц));
			КонецЕсли; 
		
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("ДанныеНачислений", ДанныеНачислений("Т49", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("КадроваяИстория", КадроваяИстория("КадроваяИсторияСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("ФактическиеОтпуска", ФактическиеОтпуска("ФактическиеОтпускаСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("Удержания", ПлановыеУдержания("ПлановыеУдержанияСотрудников", ПараметрыОтчетов));
			ДополнительныеДанные.Вставить("ДанныеОВычетах", ДанныеОВычетах(ФизическиеЛицаОрганизаций, ПараметрыОтчетов));
			
			Для каждого СтрокаОрганизации Из СтрокаПоГодам.Строки Цикл
				Для каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
					Если КлючВарианта = "Т54" Тогда
						
						// Параметры документа
						ДокументРезультат.ТолькоПросмотр = Истина;
						ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ54";
						ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
						ДокументРезультат.ПолеСверху = 0;
						ДокументРезультат.ПолеСлева = 0;
						ДокументРезультат.ПолеСнизу = 0;
						ДокументРезультат.ПолеСправа = 0;
						
						ВывестиСотрудниковПодразделенияТ54(СтрокаПодразделения.Строки, ДокументРезультат, Макет, ДополнительныеДанные, КонецПериода);
						
					Иначе
						// Параметры документа
						ДокументРезультат.ТолькоПросмотр = Истина;
						ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ54а";
						ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
						ДокументРезультат.ПолеСверху = 10;
						ДокументРезультат.ПолеСлева = 0;
						ДокументРезультат.ПолеСнизу = 0;
						ДокументРезультат.ПолеСправа = 0;
						ДокументРезультат.АвтоМасштаб = Истина;
		
						ВывестиСотрудниковПодразделенияТ54а(СтрокаПодразделения.Строки, ДокументРезультат, Макет, ДополнительныеДанные, КонецПериода);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета Т-54 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-54.

Процедура ВывестиСотрудниковПодразделенияТ54(СтрокиСотрудников, ДокументРезультат, Макет, ДополнительныеДанные, ДатаОтчета)
	
	Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
		
		ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
		Если СтрокаСотрудника.СотрудникДатаПриема > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли; 
	
		ВывестиШапкуТ54(СтрокаСотрудника, ДокументРезультат, Макет);
		ВывестиСтрокиОбщихДанныхТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПустойИнтервал = Макет.ПолучитьОбласть("ПустойИнтервал");
		ДокументРезультат.Вывести(МакетПустойИнтервал);
		
		ВывестиШапкаПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		ВывестиСтрокиПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПодвал = Макет.ПолучитьОбласть("Подвал");
		МакетПодвал.Параметры.Заполнить(СтрокаСотрудника);
		ЗаполнитьПодписантов(МакетПодвал, СтрокаСотрудника.Организация, ДатаОтчета);
		
		ДокументРезультат.Вывести(МакетПодвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуТ54(СтрокаСотрудника, ДокументРезультат, Макет)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МакетШапки = Макет.ПолучитьОбласть("Шапка");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	МакетШапки.Параметры.НачалоПериода = СтрокаСотрудника.ГодНачисления;
	МакетШапки.Параметры.ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаСотрудника.Подразделение) Тогда
		МакетШапки.Параметры.ПодразделениеНаименование = СтрокаСотрудника.Подразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетШапки);
	
	МакетШапкаОбщая = Макет.ПолучитьОбласть("ШапкаОбщая");
	
	ДокументРезультат.Вывести(МакетШапкаОбщая);
	
КонецПроцедуры

Процедура ВывестиСтрокиОбщихДанныхТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВыведеноСтрок = 0;
		
	ДанныеКадровойИстории = ДополнительныеДанные.КадроваяИстория;
	ДанныеКадровойИсторииСотрудника = ДанныеКадровойИстории.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ДанныеКадровойИсторииСотрудника = Неопределено Тогда
		КоллекцияКадровойИстории = Новый Массив;;
	Иначе
		КоллекцияКадровойИстории = ДанныеКадровойИсторииСотрудника.Строки;
	КонецЕсли;
	
	ФактическиеОтпуска = ДополнительныеДанные.ФактическиеОтпуска;
	ФактическиеОтпускаСотрудника = ФактическиеОтпуска.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ФактическиеОтпускаСотрудника = Неопределено Тогда
		КоллекцияФактическихОтпусков = Новый Массив;
	Иначе
		КоллекцияФактическихОтпусков = ФактическиеОтпускаСотрудника.Строки;
	КонецЕсли;
	
	Удержания = ДополнительныеДанные.Удержания;
	УдержанияСотрудника = Удержания.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если УдержанияСотрудника = Неопределено Тогда
		КоллекцияУдержанийСотрудника = Новый Массив;
	Иначе
		КоллекцияУдержанийСотрудника = УдержанияСотрудника.Строки;
	КонецЕсли;
	
	Вычеты = ДополнительныеДанные.ДанныеОВычетах;
	ВычетыСотрудника = Вычеты.Получить(СтрокаСотрудника.СотрудникФизическоеЛицо);
	Если ВычетыСотрудника = Неопределено Тогда
		КоллекцияВычетыСотрудника = Новый Массив;
	Иначе
		КоллекцияВычетыСотрудника = ВычетыСотрудника;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = Макс(
		КоллекцияКадровойИстории.Количество(),
		КоллекцияФактическихОтпусков.Количество(),
		КоллекцияУдержанийСотрудника.Количество(),
		КоллекцияВычетыСотрудника.Количество());
		
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			МакетСтрокаОбщая = Макет.ПолучитьОбласть("СтрокаОбщая");
			
			Если НомерСтроки <= КоллекцияКадровойИстории.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияКадровойИстории[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаОбщая, СтрокаДанных, ДанныеКадровойИстории.СоответствиеПользовательскихПолей);
				
			КонецЕсли; 
			
			Если НомерСтроки <= КоллекцияФактическихОтпусков.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияФактическихОтпусков[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаОбщая, СтрокаДанных, ФактическиеОтпуска.СоответствиеПользовательскихПолей);
				
			КонецЕсли; 
				
			Если НомерСтроки <= КоллекцияУдержанийСотрудника.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияУдержанийСотрудника[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаОбщая, СтрокаДанных, Удержания.СоответствиеПользовательскихПолей);
					
				МакетСтрокаОбщая.Параметры.ДокументУдержания = ПредставлениеДокументаУдержания(СтрокаДанных, Удержания.СоответствиеПользовательскихПолей)
					
			КонецЕсли; 
				
			Если НомерСтроки <= КоллекцияВычетыСотрудника.Количество() - 1 Тогда
				
				ОписаниеВычета = КоллекцияВычетыСотрудника[НомерСтроки]; 
				МакетСтрокаОбщая.Параметры.ОписаниеВычета = ОписаниеВычета;
				
			КонецЕсли; 
		
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(МакетСтрокаОбщая.Параметры.Подразделение) Тогда
				МакетСтрокаОбщая.Параметры.Подразделение = МакетСтрокаОбщая.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
		
			ДокументРезультат.Вывести(МакетСтрокаОбщая);
			
		КонецЦикла;
		
		ВыведеноСтрок = ВыведеноСтрок + МаксимальноеКоличествоСтрок - 1;
		
	КонецЕсли; 
		
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаОбщаяПустая = Макет.ПолучитьОбласть("СтрокаОбщаяПустая");
		ДокументРезультат.Вывести(МакетСтрокаОбщаяПустая);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкаПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	МакетШапки = Макет.ПолучитьОбласть("ШапкаПоПериодам");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	
	ЕстьБольничный = Ложь;
	Для каждого СтрокаТаблицы Из ДополнительныеДанные.ДанныеНачислений.ПорядокДопНачислений Цикл
		
		Если СтрокаТаблицы.Имя = "Больничный" Тогда
			ЕстьБольничный = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.НомерКолонки >= 6 Тогда
			Продолжить;
		КонецЕсли;
		
		МакетШапки.Параметры["Колонка" + (СтрокаТаблицы.НомерКолонки - ?(ЕстьБольничный, 1, 0))] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	ДокументРезультат.Вывести(МакетШапки);
	
КонецПроцедуры

Процедура ВывестиСтрокиПоПериодамТ54(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	ВыведеноСтрок = 0;
	
	Для каждого СтрокаПериода Из СтрокаСотрудника.Строки Цикл
		
		МакетСтрокаПоПериодам = Макет.ПолучитьОбласть("СтрокаПоПериодам");
		МакетСтрокаПоПериодам.Параметры.Заполнить(СтрокаПериода);
		
		ДанныеНачислений = ДополнительныеДанные.ДанныеНачислений;
		Если ДанныеНачислений <> Неопределено Тогда
			СтрокиНачислений = ДанныеНачислений.ДанныеОтчета.Строки.НайтиСтроки(Новый Структура("МесяцНачисления,Сотрудник", СтрокаПериода.МесяцНачисления, СтрокаПериода.Сотрудник), Истина);
			Если СтрокиНачислений.Количество() > 0 Тогда
				
				МакетСтрокаПоПериодам.Параметры.Заполнить(СтрокиНачислений[0]);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтрокаПоПериодам, СтрокиНачислений[0], ДанныеНачислений.СоответствиеПользовательскихПолей);
				
				ЕстьБольничный = Ложь;
				Для каждого СтрокаТаблицы Из ДанныеНачислений.ПорядокДопНачислений Цикл
						
					СуммаЯчейки = СтрокиНачислений[0][ДанныеНачислений.СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
					Если СтрокаТаблицы.Имя = "Больничный" Тогда
						МакетСтрокаПоПериодам.Параметры["БЛ1"] = СуммаЯчейки;
						ЕстьБольничный = Истина;
						Продолжить;
					КонецЕсли; 
					
					МакетСтрокаПоПериодам.Параметры["Колонка" + (СтрокаТаблицы.НомерКолонки - ?(ЕстьБольничный, 1, 0))] = СуммаЯчейки;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументРезультат.Вывести(МакетСтрокаПоПериодам);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаПоПериодамПустая");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-54.

Процедура ВывестиСотрудниковПодразделенияТ54а(СтрокиСотрудников, ДокументРезультат, Макет, ДополнительныеДанные, ДатаОтчета)
	
	Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
	
		ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
		Если СтрокаСотрудника.СотрудникДатаПриема > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли; 
	
		ВывестиШапкуТ54а(СтрокаСотрудника, ДокументРезультат, Макет);
		ВывестиСтрокиКадровыеТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетШапкаУдержания = Макет.ПолучитьОбласть("ШапкаУдержания");
		ДокументРезультат.Вывести(МакетШапкаУдержания);
		
		ВывестиСтрокиУдержанийТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
		
		МакетПодвал = Макет.ПолучитьОбласть("Подвал");
		МакетПодвал.Параметры.Заполнить(СтрокаСотрудника);
		ЗаполнитьПодписантов(МакетПодвал, СтрокаСотрудника.Организация, ДатаОтчета);
		
		ДокументРезультат.Вывести(МакетПодвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШапкуТ54а(СтрокаСотрудника, ДокументРезультат, Макет)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МакетШапки = Макет.ПолучитьОбласть("Шапка");
	МакетШапки.Параметры.Заполнить(СтрокаСотрудника);
	МакетШапки.Параметры.НачалоПериода = СтрокаСотрудника.ГодНачисления;
	МакетШапки.Параметры.ОкончаниеПериода = ?(СтрокаСотрудника.ПараметрыДанныхКонецПериода < КонецГода(СтрокаСотрудника.ГодНачисления), СтрокаСотрудника.ПараметрыДанныхКонецПериода, КонецГода(СтрокаСотрудника.ГодНачисления));
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(СтрокаСотрудника.Подразделение) Тогда
		МакетШапки.Параметры.ПодразделениеНаименование = СтрокаСотрудника.Подразделение.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетШапки);
	
КонецПроцедуры

Процедура ВывестиСтрокиКадровыеТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВыведеноСтрок = 0;
		
	ДанныеКадровойИстории = ДополнительныеДанные.КадроваяИстория;
	ДанныеКадровойИсторииСотрудника = ДанныеКадровойИстории.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ДанныеКадровойИсторииСотрудника = Неопределено Тогда
		КоллекцияКадровойИстории = Новый Массив;;
	Иначе
		КоллекцияКадровойИстории = ДанныеКадровойИсторииСотрудника.Строки;
	КонецЕсли;
	
	ФактическиеОтпуска = ДополнительныеДанные.ФактическиеОтпуска;
	ФактическиеОтпускаСотрудника = ФактическиеОтпуска.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если ФактическиеОтпускаСотрудника = Неопределено Тогда
		КоллекцияФактическихОтпусков = Новый Массив;
	Иначе
		КоллекцияФактическихОтпусков = ФактическиеОтпускаСотрудника.Строки;
	КонецЕсли;
	
	Вычеты = ДополнительныеДанные.ДанныеОВычетах;
	ВычетыСотрудника = Вычеты.Получить(СтрокаСотрудника.СотрудникФизическоеЛицо);
	Если ВычетыСотрудника = Неопределено Тогда
		КоллекцияВычетыСотрудника = Новый Массив;
	Иначе
		КоллекцияВычетыСотрудника = ВычетыСотрудника;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = Макс(
		КоллекцияКадровойИстории.Количество(),
		КоллекцияФактическихОтпусков.Количество(),
		КоллекцияВычетыСотрудника.Количество());
		
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			МакетСтроки = Макет.ПолучитьОбласть("СтрокаКадровая");
			
			Если НомерСтроки <= КоллекцияКадровойИстории.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияКадровойИстории[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтроки, СтрокаДанных, ДанныеКадровойИстории.СоответствиеПользовательскихПолей);
					
				Если ЗначениеЗаполнено(СтрокаДанных.ГрафикРаботы) Тогда
						
					ТекстовоеОписание = Справочники.ГрафикиРаботыСотрудников.ТекстовоеОписаниеГрафиковРаботы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДанных.ГрафикРаботы));
					МакетСтроки.Параметры.УсловияТруда = ТекстовоеОписание.Получить(СтрокаДанных.ГрафикРаботы);
					
				Иначе
					МакетСтроки.Параметры.УсловияТруда = "";
				КонецЕсли;
				
			КонецЕсли; 
			
			Если НомерСтроки <= КоллекцияФактическихОтпусков.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияФактическихОтпусков[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтроки, СтрокаДанных, ФактическиеОтпуска.СоответствиеПользовательскихПолей);
				
			КонецЕсли; 
				
			Если НомерСтроки <= КоллекцияВычетыСотрудника.Количество() - 1 Тогда
				
				ОписаниеВычета = КоллекцияВычетыСотрудника[НомерСтроки]; 
				МакетСтроки.Параметры.ОписаниеВычета = ОписаниеВычета;
				
			КонецЕсли; 
				
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(МакетСтроки.Параметры.Подразделение) Тогда
				МакетСтроки.Параметры.Подразделение = МакетСтроки.Параметры.Подразделение.ПолноеНаименование();
			КонецЕсли;
		
			ДокументРезультат.Вывести(МакетСтроки);
			
		КонецЦикла;
		
		ВыведеноСтрок = ВыведеноСтрок + МаксимальноеКоличествоСтрок - 1;
		
	КонецЕсли; 
		
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаКадровая");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокиУдержанийТ54а(СтрокаСотрудника, ДокументРезультат, Макет, ДополнительныеДанные);
	
	ВыведеноСтрок = 0;
	
	Удержания = ДополнительныеДанные.Удержания;
	УдержанияСотрудника = Удержания.ДанныеОтчета.Строки.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если УдержанияСотрудника = Неопределено Тогда
		КоллекцияУдержанийСотрудника = Новый Массив;
	Иначе
		КоллекцияУдержанийСотрудника = УдержанияСотрудника.Строки;
	КонецЕсли;
	
	МаксимальноеКоличествоСтрок = КоллекцияУдержанийСотрудника.Количество();
		
	Если МаксимальноеКоличествоСтрок > 0 Тогда
		
		Для НомерСтроки = 0 По МаксимальноеКоличествоСтрок - 1 Цикл
			
			Если НомерСтроки / 2 = Цел(НомерСтроки / 2) Тогда
				МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Левая");
			Иначе
				МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Правая");
			КонецЕсли; 
			
			Если НомерСтроки <= КоллекцияУдержанийСотрудника.Количество() - 1 Тогда
				
				СтрокаДанных = КоллекцияУдержанийСотрудника[НомерСтроки]; 
				МакетСтроки.Параметры.Заполнить(СтрокаДанных);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					МакетСтроки, СтрокаДанных, Удержания.СоответствиеПользовательскихПолей);
				
				МакетСтроки.Параметры.ДокументУдержания = ПредставлениеДокументаУдержания(СтрокаДанных, Удержания.СоответствиеПользовательскихПолей)
					
			КонецЕсли; 
				
			Если НомерСтроки / 2 = Цел(НомерСтроки / 2) Тогда
				ДокументРезультат.Вывести(МакетСтроки);
				ВыведеноСтрок = ВыведеноСтрок + 1;
			Иначе
				ДокументРезультат.Присоединить(МакетСтроки);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если МаксимальноеКоличествоСтрок / 2 <> Цел(МаксимальноеКоличествоСтрок / 2) Тогда
		МакетСтроки = Макет.ПолучитьОбласть("СтрокаУдержания|Правая");
		ДокументРезультат.Присоединить(МакетСтроки);
	КонецЕсли; 
	
	Для НомерПустойСтроки = ВыведеноСтрок + 1 По 3 Цикл
		МакетСтрокаПоПериодамПустая = Макет.ПолучитьОбласть("СтрокаУдержания");
		ДокументРезультат.Вывести(МакетСтрокаПоПериодамПустая);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

Процедура ДополнитьОтборОтчета(ИмяПоляКомпоновки, ПараметрыОтчетов, Настройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
	
	Для каждого Элемент Из Настройки.Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки Тогда
			
			Если Элемент.Использование Тогда
				
				ОписаниеОтбора = Новый Структура("ВидСравнения,ПравоеЗначение");
				ЗаполнитьЗначенияСвойств(ОписаниеОтбора, Элемент);
				ПараметрыОтчетов.Вставить(ИмяПоляКомпоновки, ОписаниеОтбора);
				
			КонецЕсли; 
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеНачислений(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных.ВариантыНастроек.Т49.Настройки;
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетАнализНачисленийИУдержаний = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетАнализНачисленийИУдержаний.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли;
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетАнализНачисленийИУдержаний, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета("Т49", ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки);
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
	УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, 5);
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
	УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, 3, "Удержания");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных,
		ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СтруктураВозврата.СоответствиеПользовательскихПолей, 1);
	СтруктураВозврата.Вставить("ПорядокДопНачислений", ПорядокДопНачислений);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КадроваяИстория(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыКадроваяИсторияСотрудников = Отчеты.КадроваяИсторияСотрудников.Создать();
	ОтчетыКадроваяИсторияСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыКадроваяИсторияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.КадроваяИсторияСотрудников.Настройки;
	
	ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыКадроваяИсторияСотрудников = ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыКадроваяИсторияСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли; 
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыКадроваяИсторияСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыКадроваяИсторияСотрудников.СхемаКомпоновкиДанных,
		ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыКадроваяИсторияСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ФактическиеОтпуска(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыФактическиеОтпускаСотрудников = Отчеты.ФактическиеОтпускаСотрудников.Создать();
	ОтчетыФактическиеОтпускаСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек.ФактическиеОтпускаСотрудников.Настройки;
	
	ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыФактическиеОтпускаСотрудников = ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыФактическиеОтпускаСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли; 
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		
		Если ОписаниеОтбора.Ключ = "Организация" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОписаниеОтбора.Ключ = "Подразделение" Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыФактическиеОтпускаСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
		
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыФактическиеОтпускаСотрудников.СхемаКомпоновкиДанных,
		ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыФактическиеОтпускаСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПлановыеУдержания(КлючВарианта, ПараметрыОтчетов)
	
	СтруктураВозврата = Новый Структура;
	
	ОтчетыПлановыеУдержанияСотрудников = Отчеты.ПлановыеУдержанияСотрудников.Создать();
	ОтчетыПлановыеУдержанияСотрудников.ИнициализироватьОтчет();
	
	НастройкиОтчета = ОтчетыПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных.ВариантыНастроек[КлючВарианта].Настройки;
	
	ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтборОтчетыПлановыеУдержанияСотрудников = ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки.Отбор;
	ОтборОтчетыПлановыеУдержанияСотрудников.Элементы.Очистить();
	
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		ЗначениеПараметраПериод = ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		ЗначениеПараметраПериод.Значение = ПараметрПериод;
		ЗначениеПараметраПериод.Значение.ДатаНачала = НачалоГода(ЗначениеПараметраПериод.Значение.ДатаНачала);
	КонецЕсли;
	
	ПараметрыОтборов = ПараметрыОтчетов.Отбор;
	Для каждого ОписаниеОтбора Из ПараметрыОтборов Цикл
		
		Если ОписаниеОтбора.Ключ = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеОтбора.Ключ = "Подразделение" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ДобавитьЭлементОтбора(
			ОтборОтчетыПлановыеУдержанияСотрудников, ОписаниеОтбора.Ключ, ОписаниеОтбора.Значение.ВидСравнения, ОписаниеОтбора.Значение.ПравоеЗначение);
		
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетыПлановыеУдержанияСотрудников.СхемаКомпоновкиДанных,
		ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(ОтчетыПлановыеУдержанияСотрудников.КомпоновщикНастроек.Настройки);
	СтруктураВозврата.Вставить("СоответствиеПользовательскихПолей", СоответствиеПользовательскихПолей);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СтруктураВозврата.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеОВычетах(ФизическиеЛицаОрганизаций, ПараметрыОтчетов)
	
	ЗначениеВозврата = Новый Соответствие;
	
	НалоговыйПериод = Год(ТекущаяДатаСеанса());
			
	ПараметрыОтчета = ПараметрыОтчетов.Параметры;
	ПараметрПериод = Неопределено;
	ПараметрыОтчета.Свойство("Период", ПараметрПериод);
	Если ЗначениеЗаполнено(ПараметрПериод) Тогда
		НалоговыйПериод = Год(ПараметрПериод.ДатаОкончания);
	КонецЕсли; 
	
	Для каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаОрганизаций Цикл
		
		Результат = УчетНДФЛ.ДанныеОДоходахНалогахВычетах(ФизическиеЛицаОрганизации.Значение, НалоговыйПериод, ФизическиеЛицаОрганизации.Ключ);
		КоличествоВычетов = Результат.Вычеты.Количество();
		Если КоличествоВычетов > 0 Тогда
			
			МассивИнформацииОВычетах = Новый Массив;
			
			ОписаниеВычета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 руб., в том числе:'"),
				Формат(Результат.Вычеты.Итог("СуммаВычета"), "ЧДЦ=2"));
				
			МассивИнформацииОВычетах.Добавить(ОписаниеВычета);
			
			Для каждого Вычет Из Результат.Вычеты Цикл
				
				ОписаниеВычета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 руб. (код вычета %2)'"),
					Формат(Вычет.СуммаВычета, "ЧДЦ=2"),
					СокрЛП(Вычет.КодВычета));
					
				КоличествоВычетов = КоличествоВычетов - 1;
				Если КоличествоВычетов > 0 Тогда
					ОписаниеВычета = ОписаниеВычета + ",";
				КонецЕсли; 
					
				МассивИнформацииОВычетах.Добавить(ОписаниеВычета);
				
			КонецЦикла;
			
			ЗначениеВозврата.Вставить(Результат.Вычеты[0].Сотрудник, МассивИнформацииОВычетах);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПредставлениеДокументаУдержания(СтрокаДанных, СоответствиеПользовательскихПолей)
	
	Представление = "";
	ДокументУдержания = СтрокаДанных[СоответствиеПользовательскихПолей.Получить("ДокументУдержания")];
	
	Если ЗначениеЗаполнено(ДокументУдержания) Тогда
		
		Представление = КраткоеПредставлениеТипаДокумента(ДокументУдержания)
			+ " № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаДанных[СоответствиеПользовательскихПолей.Получить("ДокументУдержанияНомер")], Истина, Истина)
			+ " " + НСтр("ru='от'") + " " + Формат(СтрокаДанных[СоответствиеПользовательскихПолей.Получить("ДокументУдержанияДата")], "ДЛФ=D");
		
	КонецЕсли; 
				
	Возврат Представление;
				
КонецФункции

Функция КраткоеПредставлениеТипаДокумента(ДокументУдержания)
	
	Если ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.ИсполнительныйЛист") Тогда
		
		Возврат НСтр("ru='Исп. лист'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ") Тогда
		
		Возврат НСтр("ru='ДВ НПФ'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов") Тогда
		
		Возврат НСтр("ru='ДСВ'");
		
	ИначеЕсли ТипЗнч(ДокументУдержания) = Тип("ДокументСсылка.УдержаниеПрофсоюзныхВзносов") Тогда
		
		Возврат НСтр("ru='Проф. взносы'");
		
	КонецЕсли;
		
	Возврат НСтр("ru='Прочие уд.'");
	
КонецФункции

Процедура ЗаполнитьПодписантов(Макет, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура("Бухгалтер,БухгалтерРасшифровкаПодписи");
	КлючиОтветственныхЛиц = "";
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрБухгалтер = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Бухгалтер"));	
	Если ПараметрБухгалтер <> Неопределено И ПараметрБухгалтер.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрБухгалтер.Значение) Тогда
			ПараметрыЗаполнения.Бухгалтер = ПараметрБухгалтер.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = "Бухгалтер";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Бухгалтер) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.Бухгалтер);
	КонецЕсли; 
	
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		ПараметрыЗаполнения.БухгалтерРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОФизЛиц[ПараметрыЗаполнения.Бухгалтер]);

	КонецЕсли; 
	
	Макет.Параметры.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли