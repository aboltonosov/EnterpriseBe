#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


Перем СтруктураРеквизитовФормы; // структура реквизитов формы отчета

Перем ДокументСсылкаАлкоОтчет; // Документ.РегламентированныйОтчет к которому привязан отчет.

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров; 

Перем ОбъектЭтогоОтчета; // объект метаданных отчета

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыДекларация;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000100003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок;

// Данные обособленных подразделений Раздела 1.
Перем ДанныеОП_Декларация;

// Данные производителей-импортеров и счетчик, который присваивается как ИД производителя-импортера.
Перем СправочникПоставщиков, СчетчикИДПоставщиков;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоДекларации, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись) Экспорт
		
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил15Производство" Тогда
		
		Запись.П000011000313 = СокрЛП(Запись.П000011000313);
		Запись.П000011000314 = СокрЛП(Запись.П000011000314);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил15Поставщики" Тогда
		
		// Поставщик
		Запись.П000010000304 = СокрЛП(Запись.П000010000304);
		Наименование = Запись.П000010000304;
		
		Запись.П0000100003042 = СокрЛП(Запись.П0000100003042);
		НаименованиеОП = Запись.П0000100003042;
		
		НаименованиеВсеВместе = Наименование + " " + НаименованиеОП;
				
		Запись.П000010000305 = СтрЗаменить(Запись.П000010000305, " ", "");
		ИНН = Запись.П000010000305;
		
		Запись.П000010000306 = СтрЗаменить(Запись.П000010000306, " ", "");
		КПП = Запись.П000010000306;
		
		Если НЕ ЗначениеЗаполнено(Запись.Поставщик) Тогда		
			Запись.Поставщик = ОпределитьПоставщика(ИНН, КПП, Наименование);		
		КонецЕсли;
		
		
		ХешИдПоставщика = РегламентированнаяОтчетностьАЛКО.ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры(
																					НаименованиеВсеВместе, ИНН, КПП);
		Запись.ХешИдПоставщика = ХешИдПоставщика;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьПоставщика(ИНН, КПП, ПолноеНаименование) Экспорт
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
		
	Если ЕстьНалоговыйНомер Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Поставщик				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	(Контрагенты.ИНН = &ИНН ИЛИ Контрагенты.НалоговыйНомер = &ИНН)
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Поставщик				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	Контрагенты.ИНН = &ИНН
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	            |	И Контрагенты.КПП = &КПП", "");
	               
				   
	ЗапросПоставщика = Новый Запрос;
	ЗапросПоставщика.Текст = ТекстЗапроса;
	
	ЗапросПоставщика.Параметры.Вставить("ИНН", ИНН);
	
	Если ЗначениеЗаполнено(КПП) Тогда
	    ЗапросПоставщика.Параметры.Вставить("КПП", КПП);		
	КонецЕсли;
	
	ЗапросПоставщика.Параметры.Вставить("НаименованиеПолное", ПолноеНаименование);
	
	Поставщик = Неопределено;
	
	Результат = ЗапросПоставщика.Выполнить().Выгрузить();
	
	Поставщик = ОпределитьКонтрагентаИзЗапроса(Результат, КПП, "Поставщик", ЕстьСтранаРегистрации);
			
	Возврат  Поставщик;
	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт
	// Расчета в приложении 14 нет.
	// Заглушка, оставлена для совместимости.
	Возврат;	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Функция ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции

Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч);
	
КонецФункции

Функция ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, ИмяРаздела)
	
	ИмяПечатнойФормыРаздела = "Печатная" + Сред(Строка(ИмяФормыОбъекта), СтрНайти(Строка(ИмяФормыОбъекта), "ФормаОтчета")) 
								+ "_" + Строка(ИмяРаздела);
								
	Возврат ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяПечатнойФормыРаздела);
	
КонецФункции

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках,	СтатусПроверкиОтчета = Ложь, СтруктураОшибки)
	
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
																		СтатусПроверкиОтчета, СтруктураОшибки);
			
КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, ИсключаяУдаленные = Истина)
	
	КолСтрокПоГруппе = 0;
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	КолСтраницПоГруппе = СервисРегистровГруппы.Количество();
	
	Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
	    		
		КоличествоСтрокНастранице = СервисРегистровГруппы[Инд].КоличествоСтрок;
		
		КолСтрокПоГруппе = КолСтрокПоГруппе + КоличествоСтрокНастранице;
		
	КонецЦикла;
	
	Если ИсключаяУдаленные Тогда
		
		Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
		    		
			КоличествоСтрокНастраницеУд = СервисРегистровГруппы[Инд].КолвоСтрокПомНаУдаление;
						
			КолСтрокПоГруппе = КолСтрокПоГруппе - КоличествоСтрокНастраницеУд;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Возврат КолСтрокПоГруппе;
	
КонецФункции

Функция ДополнительныеДанныеПоАдресу(Данные, Адрес)
	
	Перем ЗначениеДанных;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = СтрНайти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДополнительныеДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции

Функция СтрЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Значение = Неопределено;
	
	Если Структура.Свойство(Ключ, Значение) Тогда 
		Возврат Строка(Значение);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормыОбъекта)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакета = "СхемаВыгрузки" + СтруктураРеквизитовФормы.мВерсияФормата;
		
	Макет = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ);

КонецПроцедуры

Функция ОпределитьКонтрагентаИзЗапроса(Результат, КПП, ИмяКолонкиКонтрагент, ЕстьСтранаРегистрации)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЗапросаАЛКО(Результат, КПП, ИмяКолонкиКонтрагент, ЕстьСтранаРегистрации);
	
КонецФункции

#КонецОбласти



#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеТитульный(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
							СтатусПроверки, ПараметрыВыгрузки, Ложь);
		
КонецФункции

Функция ПроверитьЗаполнениеОП(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП = Неопределено)
							
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеОП_АЛКО(
							ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП);

КонецФункции

Функция ПроверкаИННКППвСтрокахТаблиц(ДокументСсылка, ТаблицаСообщенийОбОшибках,
									СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент)
									
		
	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
		
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверкаИННКППвСтрокахТаблицАЛКО(ДокументСсылка,  
									ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
	    
КонецФункции

Процедура ПроверитьЗаполнениеДекларации(СтатусПроверки)
	
	КПП_НеОбязателен = Истина;
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПроверятьНаПустоту = Истина;
	ИдГруппыПроизводство = СтруктураРеквизитовФормы.мИдГруппы22;
	ИдГруппыПоставщики = СтруктураРеквизитовФормы.мИдГруппы12;
	
		
	// Инициация структуры справочника Поставщиков.
	СправочникПоставщиков = Новый Структура;
	СчетчикИДПоставщиков = 0;
		
	// Инициация структуры ОП.				
	ДанныеОП_Декларация = Новый Структура;
	
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	ИмяРегистраПоставщики = ПолучитьИмяРегистраСведений(ИдГруппыПоставщики);
	СервисРегистровПоставщики = СтруктураСервисРегистров[ИмяРегистраПоставщики];
	
	ИмяРегистраПроизводство = ПолучитьИмяРегистраСведений(ИдГруппыПроизводство);
	СервисРегистровПроизводство = СтруктураСервисРегистров[ИмяРегистраПроизводство];
	
		
	ЕстьЗаполненныйЛистРаздела = Ложь;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		П000000000002 = 0; П000000000003 = 0; П000000000004 = 0;
		
		ДанныеЛиста.Свойство("П000010000301", П000000000002); // площадь
		ДанныеЛиста.Свойство("П000010000303", П000000000004); // объем
		ДанныеЛиста.Свойство("П000010000302", П000000000003); // урожайность
				
		П000000000009 = 0; П000000000010 = 0; П000000000011 = 0; 
		П000000000012 = 0; П000000000013 = 0;
		
		ДанныеЛиста.Свойство("П000010000308", П000000000009); // всего
		ДанныеЛиста.Свойство("П000010000309", П000000000010); // виноматериалов
		ДанныеЛиста.Свойство("П000010000310", П000000000011); // с защищенным геоуказанием
		ДанныеЛиста.Свойство("П000010000311", П000000000012); // с защищенным наименованием
		ДанныеЛиста.Свойство("П000010000312", П000000000013); // дистилляты
				
		// Все значения должны быть >= 0.
		П000000000002 = ?(П000000000002 = Неопределено, 0, П000000000002);
		П000000000004 = ?(П000000000004 = Неопределено, 0, П000000000004);
		П000000000003 = ?(П000000000003 = Неопределено, 0, П000000000003);
		
		П000000000009 = ?(П000000000009 = Неопределено, 0, П000000000009);
		П000000000010 = ?(П000000000010 = Неопределено, 0, П000000000010);
		П000000000011 = ?(П000000000011 = Неопределено, 0, П000000000011);
		П000000000012 = ?(П000000000012 = Неопределено, 0, П000000000012);
		П000000000013 = ?(П000000000013 = Неопределено, 0, П000000000013);
		
		
		// Сумма производства по кодам продукции.
		СуммаПоКодамПроизводство = 0;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("П000011000315", СуммаПоКодамПроизводство);
		СуммаПоКодамПроизводство = ?(СуммаПоКодамПроизводство = Неопределено, 0, СуммаПоКодамПроизводство);
		
		// Сумма поставок.
		СуммаПоставок = 0;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("П000010000307", СуммаПоставок);
		СуммаПоставок = ?(СуммаПоставок = Неопределено, 0, СуммаПоставок);
		
		
				
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
		СведенияОбОП = Неопределено;
		
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
				
		
		Если НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда
			ЕстьЗаполненныйЛистРаздела = Истина;
		КонецЕсли;
		
		ИндексСтраницыРегистраДекларацияПоставщики = СервисРегистровПоставщики[НомерЛиста - 1].ИндексСтраницыРегистра;
		ИндексСтраницыРегистраДекларацияПроизводство = СервисРегистровПроизводство[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
				   Или ЗначениеЗаполнено(СведенияОбОП.Наименование)
				   Или ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса) Тогда
									
				
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Собираем данные по одному и тому же ОП в одну структуру.
				Если НЕ ДанныеОП_Декларация.Свойство(ИдОП) Тогда
				
					ДанныеОП_Декларация.Вставить(ИдОП, Новый Структура);
					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
				    ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);
					ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
					ДанныеОП_Декларация[ИдОП].Вставить("СведОрг", Новый Структура);
					
				КонецЕсли; 
				
				// Объем ВСЕГО не может быть меньше составляющих.
				Если П000000000009 < П000000000010 + П000000000011 + П000000000012 + П000000000013 Тогда
				
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый 
						+  ", значение поля ""Всего использовано для производства"" меньше суммы составляющих!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "П000010000308");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ВсегоМеньшеЧемСоставляющих");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    				
				КонецЕсли;
				
				// Объем ВСЕГО не может быть больше Объема сбора вместе с поставками.
				Если П000000000009 > П000000000004 + СуммаПоставок Тогда
				
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый 
						+  ", значение поля ""Всего использовано для производства"" больше указанного объема собранного винограда и суммы поставок от поставщиков!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "П000010000308");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ВсегоБольшеЧемОбъемСбора");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    				
				КонецЕсли;
				
								
				Если (П000000000004 + СуммаПоставок = 0) и (СуммаПоКодамПроизводство > 0) Тогда
					
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый 
						+  ", заполнены строки производства по коду продукции при нулевом сборе и отсутствии поставок!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "П000010000303");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ЗаполненыСтрокиПроизводстваПриНулевомСборе");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    				
				КонецЕсли;
				
				Если (П000000000009 =0) и (СуммаПоКодамПроизводство > 0) Тогда
					
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый 
						+  ", заполнены строки производства по коду продукции при нулевом количестве винограда на производство!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "П000010000308");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ЗаполненыСтрокиПроизводстваПриНулевомКоличествеВиноградаПроизводство");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    				
				КонецЕсли;
				
				Если (П000000000004 > 0) и (П000000000002 = 0) Тогда
					
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый 
						+  ", не указана площадь виноградника!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", "П000010000303");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанаПлощадь");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                    				
				КонецЕсли;
				
				Если П000000000004 + СуммаПоставок > 0 Тогда
				
					ДанныеОП_Декларация[ИдОП].СведОрг.Вставить("Х"+ НомерЛистаСтроковый, Новый Структура);
									
					ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
					
					ДанныеПоЛисту.Вставить("НомерЛистаДекларация", НомерЛиста);				
					ДанныеПоЛисту.Вставить("ИндексСтраницыРегистраДекларацияПоставщики", 
													ИндексСтраницыРегистраДекларацияПоставщики);
					ДанныеПоЛисту.Вставить("ИндексСтраницыРегистраДекларацияПроизводство", 
													ИндексСтраницыРегистраДекларацияПроизводство);
					
					ДанныеПоЛисту.Вставить("П000000000002", П000000000002);
					ДанныеПоЛисту.Вставить("П000000000003", П000000000003);
					ДанныеПоЛисту.Вставить("П000000000004", П000000000004);
					
					ДанныеПоЛисту.Вставить("П000000000009", П000000000009);
					ДанныеПоЛисту.Вставить("П000000000010", П000000000010);
					ДанныеПоЛисту.Вставить("П000000000011", П000000000011);
					ДанныеПоЛисту.Вставить("П000000000012", П000000000012);
					ДанныеПоЛисту.Вставить("П000000000013", П000000000013);
					
					ДанныеПоЛисту.Вставить("ДанныеПроизводство", Новый Структура);
					ДанныеПоЛисту.Вставить("ДанныеПоставщиков", Новый Структура);	
				
				КонецЕсли; 
								
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(ИдГруппыПоставщики, ДопДанные);
		КонецЕсли;
		
		// Заполняем структуру данных движений только при наличии объема сбора.
		ИдОП_Проверка = ?(П000000000004 + СуммаПоставок > 0, ИдОП, "");
		
		ПроверитьЗаполнениеТаблицыДекларацияПоставщики(СтатусПроверки, ИдГруппыПоставщики, ДопДанные, 
													НомерЛиста, ИдОП_Проверка, ЕстьЗаполненныйЛистРаздела);
		ПроверитьЗаполнениеТаблицыДекларацияПроизводство(СтатусПроверки, ИдГруппыПроизводство, ДопДанные, 
													НомерЛиста, ИдОП_Проверка, ЕстьЗаполненныйЛистРаздела);											
		
		КолТабСообщений = ТаблицаСообщений.Количество();
			
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Декларация");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
            
		    Возврат;
		КонецЕсли;
							
	КонецЦикла;
	
	
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		
		ТекстОписанияОшибки = "Не заполнен ни один лист декларации в разделе Декларация!";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Декларация");
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхДекларация");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
        
	КонецЕсли;
	
			
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларацияПроизводство(СтатусПроверки, ИдГруппы, ДополнительныеДанные, 
											НомерЛиста, ИдОП = "", ЕстьЗаполненныйЛистРаздела = Ложь)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
		
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
	
	Если ЕстьИдОП Тогда
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
		ДанныеДвиженийПоОП = ДанныеПоЛисту.ДанныеПроизводство;		
	КонецЕсли;
	
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 3000
	|	РегистрСведенийАлкоПрил15Декларация.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил15Декларация
	|ГДЕ
	|	РегистрСведенийАлкоПрил15Декларация.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил15Декларация.Активно = Истина
	|	И РегистрСведенийАлкоПрил15Декларация.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	ИмяКодпродукции  = ПрефиксИмени + "13";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "13";
			ИмяПоказателя = ПрефиксИмени + "13_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			КодВидаПродукции = ЗначениеГрафы;
			Если ПустаяСтрока(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В разделе Декларация, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         
			ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
				ТекстОписанияОшибки = "В разделе Декларация, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
					
			// Заполняем Таблицу Производства раздела декларация.
			Если ЕстьИдОП Тогда
				
				КодПродукции = СтрокаДекларации[ПрефиксИмени + "13"];
				
				Если ЗначениеЗаполнено(КодПродукции) Тогда
				
					ИдКодПродукции 	= "Х" + КодПродукции;
					
					Если НЕ ДанныеДвиженийПоОП.Свойство(ИдКодПродукции) Тогда
						
						ДанныеДвиженийПоОП.Вставить(ИдКодПродукции, Новый Структура);
						ДанныеДвиженийПоОП[ИдКодПродукции].Вставить("НомерСтрокиДекларация", НомерСтроки);
						ДанныеДвиженийПоОП[ИдКодПродукции].Вставить("П000000000014", СтрокаДекларации[ПрефиксИмени + "13"]);
						ДанныеДвиженийПоОП[ИдКодПродукции].Вставить("П000000000016", СтрокаДекларации[ПрефиксИмени + "15"]);
						
					Иначе
						
						// Проверка на дублирование.
					    СтрокаПовтора = ДанныеДвиженийПоОП[ИдКодПродукции].НомерСтрокиДекларация;
						СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(СтрокаПовтора);
						
						АдресДубликата = ИмяКодпродукции + "_" + НомерСтрокиСтроковый;
						
						ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый  
										+ ", повторяются коды продукции в строках " 
										+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Декларация");
						СтруктураОшибки.Вставить("Показатель", АдресДубликата);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ПовторКодаПродукции");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				 
					КонецЕсли;
					
				КонецЕсли; 
								    
			КонецЕсли;
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	// Суммируем строки по одному ОП.
	Если ЕстьИдОП Тогда
		ТекКолСтрокДекларация = 0;
		ДанныеОП_Декларация[ИдОП].Свойство("КолСтрокПоДекларации", ТекКолСтрокДекларация);
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", ТекКолСтрокДекларация + КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ЭтоТочноРоссийскийКонтрагент(Контрагент, ЕстьСтранаРегистрацииВКонфигурации = Неопределено, 
									СтранаРоссия = Неопределено, ИНН, КПП)
	Возврат РегламентированнаяОтчетностьАЛКО.ЭтоТочноРоссийскийКонтрагент(
								Контрагент, ЕстьСтранаРегистрацииВКонфигурации, СтранаРоссия, ИНН, КПП);								
									
КонецФункции

Процедура ПроверитьЗаполнениеТаблицыДекларацияПоставщики(СтатусПроверки, ИдГруппы, ДополнительныеДанные, 
											НомерЛиста, ИдОП = "", ЕстьЗаполненныйЛистРаздела = Ложь)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	
	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
	    СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");		
	КонецЕсли;
	
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
	
	Если ЕстьИдОП Тогда
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
		ДанныеДвиженийПоОП = ДанныеПоЛисту.ДанныеПоставщиков;		
	КонецЕсли;
	
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 3000
	|	РегистрСведенийАлкоПрил15Декларация.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил15Декларация
	|ГДЕ
	|	РегистрСведенийАлкоПрил15Декларация.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил15Декларация.Активно = Истина
	|	И РегистрСведенийАлкоПрил15Декларация.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяНаименованияПоставщика  = ПрефиксИмени + "04";
	ИмяНаименованияОППоставщика  = ПрефиксИмени + "042";
	ИмяИННПоставщика = ПрефиксИмени + "05";
	ИмяКПППоставщика = ПрефиксИмени + "06";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "042"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "04";
			ИмяПоказателя = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			НаименованиеПоставщика = ЗначениеГрафы;
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование поставщика!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПоставщика");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			// Наименование обособленного подразделения поставщика.
			ИмяГрафы = ПрефиксИмени + "042";
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			Если ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			
				НаименованиеПоставщика = НаименованиеПоставщика + " ОП " + ЗначениеГрафы;
			
			КонецЕсли; 
			 
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП.
			
			ИмяГрафыИНН = ПрефиксИмени + "05";
			ИмяПоказателяИНН = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
			ИННПоставщика = СтрокаДекларации[ИмяГрафыИНН];
			ИНН = СокрЛП(ИННПоставщика);
			ИННПоставщика = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "06";
			ИмяПоказателяКПП = ПрефиксИмени + "06_" + НомерСтрокиСтроковый;
			КПППоставщика = СтрокаДекларации[ИмяГрафыКПП];
			КПП = СокрЛП(КПППоставщика);
			КПППоставщика = КПП;
			
			ИмяРаздела = "Декларация";
			СтрВКакомРазделе = "В Разделе Декларация";
			РодПадежЧейИННКПП = "поставщика";
						
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.Поставщик, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП);
			
						
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
					
			// Заполняем Таблицу Поставщиков раздела декларация.
			Если ЕстьИдОП Тогда
							    
				ИдПоставщика 			= "Х" + СтрокаДекларации.ХешИдПоставщика;
				 
				// Вначале заполняем справочник Производителей.
				Если НЕ СправочникПоставщиков.Свойство(ИдПоставщика) Тогда
					
					СчетчикИДПоставщиков = СчетчикИДПоставщиков + 1;
					СправочникПоставщиков.Вставить(ИдПоставщика, Новый Структура);
					СправочникПоставщиков[ИдПоставщика].Вставить("ИдПостав", 		СчетчикИДПоставщиков);
					СправочникПоставщиков[ИдПоставщика].Вставить("П000000000006", 	НаименованиеПоставщика);
					СправочникПоставщиков[ИдПоставщика].Вставить("Резидент", 		РоссийскийКонтрагент);
					СправочникПоставщиков[ИдПоставщика].Вставить("П000000000007", 	ИННПоставщика);
					СправочникПоставщиков[ИдПоставщика].Вставить("П000000000008", 	КПППоставщика);
					
				КонецЕсли;
				
				
				Если НЕ ДанныеДвиженийПоОП.Свойство(ИдПоставщика) Тогда
					
					ДанныеДвиженийПоОП.Вставить(ИдПоставщика, Новый Структура);
					ДанныеДвиженийПоОП[ИдПоставщика].Вставить("НомерСтрокиДекларация", НомерСтроки);
					ДанныеДвиженийПоОП[ИдПоставщика].Вставить("ИдПостав", СправочникПоставщиков[ИдПоставщика].ИдПостав);
					ДанныеДвиженийПоОП[ИдПоставщика].Вставить("П000000000017", СтрокаДекларации[ПрефиксИмени + "07"]);
					
				Иначе
					
					// Проверка на дублирование.
				    СтрокаПовтора = ДанныеДвиженийПоОП[ИдПоставщика].НомерСтрокиДекларация;
					СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(СтрокаПовтора);
					
					АдресДубликата = ИмяНаименованияПоставщика + "_" + НомерСтрокиСтроковый;
					
					ТекстОписанияОшибки = "В Разделе Декларация, на листе " + НомерЛистаСтроковый  
									+ ", повторяются реквизиты поставщика в строках " 
									+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", АдресДубликата);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторПоставщика");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			 
				КонецЕсли;
								    
			КонецЕсли;
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	// Суммируем строки по одному ОП.
	Если ЕстьИдОП Тогда
		ТекКолСтрокДекларация = 0;
		ДанныеОП_Декларация[ИдОП].Свойство("КолСтрокПоДекларации", ТекКолСтрокДекларация);
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", ТекКолСтрокДекларация + КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;
	
	МаксимальноеКоличествоОшибок = 1000;
	
	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
				
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		
		ПроверитьЗаполнениеДекларации(СтатусПроверки);
		
	КонецЕсли;
	
		
	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;
		
	Возврат СтатусПроверки;
	
КонецФункции


Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции


Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
					
	ПрототипУзла_Поставщики = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Поставщики");
	
	Для Каждого ЭлементДанныеПоставщиков Из СправочникПоставщиков Цикл
		
		СтрокаПоставщика = ЭлементДанныеПоставщиков.Значение;
		
		Узел_Поставщики = НовыйУзелИзПрототипа(ПрототипУзла_Поставщики);
				
		УстановитьЗначениеЭлемента(Узел_Поставщики, "ИдПостав", СтрокаПоставщика.ИдПостав);
		УстановитьЗначениеЭлемента(Узел_Поставщики, "П000000000006", СтрокаПоставщика.П000000000006);
		
		Резидент = СтрокаПоставщика.Резидент;
		
		Узел_Резидент = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "Резидент");
		Узел_Иностр = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "Иностр");
		
		Если Резидент Тогда
		
			УказанИНН = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000007);
			УказанКПП = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000008);
			
			Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ЮЛ");
			Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Резидент, "ФЛ");
			
			Если УказанКПП Тогда
				
				УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000007", СтрокаПоставщика.П000000000007);
				УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000008", СтрокаПоставщика.П000000000008);
				
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
			Иначе
				
				УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000007", СтрокаПоставщика.П000000000007);
				
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
			КонецЕсли;	
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Иностр);
			
		Иначе
			
			УстановитьЗначениеЭлемента(Узел_Иностр, "Номер", СтрокаПоставщика.П000000000007);
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Резидент);
			
		КонецЕсли; 
				
	КонецЦикла;
	
	СправочникПоставщиков.Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Поставщики);
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	Узел_Документ = УзелРодитель;
	
	Узел_Справочники = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Справочники");
	ЗаполнитьСправочникиДекларации(Узел_Справочники);
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	
	Узел_ОтветЛицо   = ПолучитьПодчиненныйЭлемент(Узел_Организация, "ОтветЛицо");
			
	ПрототипУзла_Сведения = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Сведения");
		
	Для Каждого ЭлементОП Из ДанныеОП_Декларация Цикл
		
		Узел_Сведения = НовыйУзелИзПрототипа(ПрототипУзла_Сведения);
		
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП.ОП;
				
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		УстановитьЗначениеЭлемента(Узел_Сведения, "Наим", НазваниеОрганизации);
		УстановитьЗначениеЭлемента(Узел_Сведения, "КППЮЛ", КПП);
		
		ДанныеСведений = СтруктураОП.СведОрг;
		НаличиеСведений = (ДанныеСведений.Количество() > 0);
		
		УстановитьЗначениеЭлемента(Узел_Сведения, "НаличиеСведений", ?(НаличиеСведений, "true", "false"));
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_Сведения, "АдрОрг");
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		ПрототипУзла_СведОрг = ПолучитьПодчиненныйЭлемент(Узел_Сведения, "СведОрг");
		
		ПN = 0;
		
		Для каждого Виноградник Из ДанныеСведений Цикл
			
			ПN = ПN + 1;
			
			СведенияПоВинограднику = Виноградник.Значение;
			
			Узел_СведОрг = НовыйУзелИзПрототипа(ПрототипУзла_СведОрг);
			
			УстановитьЗначениеЭлемента(Узел_СведОрг, "ПN",      		ПN);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000002", 	СведенияПоВинограднику.П000000000002);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000003", 	СведенияПоВинограднику.П000000000003);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000004", 	СведенияПоВинограднику.П000000000004);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000009", 	СведенияПоВинограднику.П000000000009);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000010", 	СведенияПоВинограднику.П000000000010);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000011", 	СведенияПоВинограднику.П000000000011);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000012", 	СведенияПоВинограднику.П000000000012);
			УстановитьЗначениеЭлемента(Узел_СведОрг, "П000000000013", 	СведенияПоВинограднику.П000000000013);
			
			
			ДанныеДвижений = СведенияПоВинограднику.ДанныеПроизводство;
			
			Если ДанныеДвижений.Количество() > 0 Тогда
				
				// Узел Произведено.
				Узел_Произведено = ПолучитьПодчиненныйЭлемент(Узел_СведОрг, "Произведено");
				ПрототипУзла_Позиции = ПолучитьПодчиненныйЭлемент(Узел_Произведено, "Позиции");
				
				Для каждого Движение Из ДанныеДвижений Цикл
					
					Узел_Позиции = НовыйУзелИзПрототипа(ПрототипУзла_Позиции);
					СведенияДвижения = Движение.Значение;
					
				    УстановитьЗначениеЭлемента(Узел_Позиции, "П000000000014", СведенияДвижения.П000000000014);
					УстановитьЗначениеЭлемента(Узел_Позиции, "П000000000016", СведенияДвижения.П000000000016);
									
					ОбработаноСтрок = ОбработаноСтрок + 1;
				
				КонецЦикла; 
				
				РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Позиции);	
			
			КонецЕсли; 
			
			ДанныеДвижений = СведенияПоВинограднику.ДанныеПоставщиков;
			
			Если ДанныеДвижений.Количество() > 0 Тогда
				
				// Узел Поставлено.
				Узел_Поставлено = ПолучитьПодчиненныйЭлемент(Узел_СведОрг, "Поставлено");
				ПрототипУзла_Позиции = ПолучитьПодчиненныйЭлемент(Узел_Поставлено, "Позиции");
				
				Для каждого Движение Из ДанныеДвижений Цикл
					
					Узел_Позиции = НовыйУзелИзПрототипа(ПрототипУзла_Позиции);
					СведенияДвижения = Движение.Значение;
					
				    УстановитьЗначениеЭлемента(Узел_Позиции, "П000000000017", СведенияДвижения.П000000000017);
					УстановитьЗначениеЭлемента(Узел_Позиции, "ИдПостав", СведенияДвижения.ИдПостав);
									
					ОбработаноСтрок = ОбработаноСтрок + 1;
				
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Позиции);
				
			КонецЕсли;
		
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведОрг);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Сведения);
			
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделу Декларация!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", "Организация");
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными()
	
	Если НужноОбработатьСтрок > 0 Тогда
	 	
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли; 
	
		
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	Если НужноОбработатьСтрок > 0 Тогда
	 
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
	
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	Если НужноОбработатьСтрок > 0 Тогда
	    		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 100);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДокумента.ПараметрыВыгрузки;	
		
	
	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормыОбъекта);
	
	ВсегоСтрокПоДекларацииПоставщики = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоДекларацииПроизводство = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	ВсегоСтрокПоДекларации = ВсегоСтрокПоДекларацииПоставщики + ВсегоСтрокПоДекларацииПроизводство;
	
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2*ВсегоСтрокПоДекларации;
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	ОбработаноСтрок = 0;
	ШагИнформирования = 3000;
	НетОшибокПроверки = Истина;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли;
	
	ЗаполнитьДанными();
	
	Если ТаблицаСообщений.Количество() > 0 Тогда
	    
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
			
	КонецЕсли; 
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 
										100);
										
	КонецЕсли;
		
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		// информируем о ходе выполнения
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);										 
			
		КонецЕсли;
				
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), ?(ЭтоВыгрузка, 93, 100), 100);
		
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
	Возврат Результат;
	
КонецФункции

Функция СформироватьПредставлениеОшибок(ТаблСообщений, ИмяФормыОбъекта, ТолькоДляСведения = Ложь) Экспорт
		
	МакетОформления = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, "ШаблоныСообщенийОбОшибках2016Кв4");
	НаименованиеДекларации = ПолучитьНазваниеОтчетаАЛКО(ИмяФормыОбъекта);
	
	Секция_ВерхнийОтступ   = МакетОформления.ПолучитьОбласть("ВерхнийОтступ");
	Секция_ЗаголовокОтчета = МакетОформления.ПолучитьОбласть("ЗаголовокОтчета");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);
	
	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
	
	КоличествоОшибок = ТаблСообщений.Количество();
	
	Если КоличествоОшибок = 0 Тогда
		
		Секция_БезОшибок = МакетОформления.ПолучитьОбласть("БезОшибок");
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);
		
	Иначе
		
		// Если есть ошибки разработки - их в первую очередь.
		
		ТипОшибки = "НеВсяИнформацияПопалаВВыгрузку";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли; 
		
		ТипОшибки = "НеУдалосьВычислить";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		ТипОшибки = "ОшибкаФорматаXML";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		// Отдельно - слишком много ошибок
		ТипОшибки = "МногоОшибок";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли;
		
		// Ошибки заполнения Титульного листа.
		РазделОшибок = "Титульный";
		ОшибкиТитульного = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиТитульного = ТаблСообщений.Скопировать(ОшибкиТитульного);
		
		Если ОшибкиТитульного.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
			
				Секция_ЗаголовокОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиТитульногоЛиста");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиТитульногоЛиста);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиТитульногоЛиста");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиТитульногоЛиста);	
			
			КонецЕсли; 
						
			ВывестиОшибки(ОшибкиТитульного, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли; 
		
			
		// Ошибки заполнения Декларации.
		РазделОшибок = "Декларация";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиДекларация");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиДекларация");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
			
		
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

Процедура ВывестиОшибки(ТаблОшибок, МакетОформления, ПредставлениеОшибок)

	Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	Пока ТаблОшибок.Количество() > 0 Цикл
	    		
		ТипОшибки = ТаблОшибок[0].ТипОшибки;
		
		ОшибкиПоТипу = ТаблОшибок.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		
		Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
		
		ПредставлениеОшибок.НачатьГруппуСтрок(); // описание исправления ошибки сворачивается вместе с контрагентами
		
		Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
		
		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
		
		Для каждого Ошибка Из ОшибкиПоТипу Цикл
		
			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
			ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
			
			Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
			Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
			ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
			
			ТаблОшибок.Удалить(Ошибка);
		
		КонецЦикла; 
		
		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML = Неопределено)
	
	Кодировка = "windows-1251";
		
    // пишем в строку или в файл, если передано имя файла XML
	ПотокXML = РегламентированнаяОтчетностьАЛКО.СоздатьНовыйПотокXML(Кодировка, ИмяФайлаXML);
		
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	
	СтрокаИмениФайла = Символы.ПС + "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	ПотокXML.ЗаписатьБезОбработки(СтрокаИмениФайла);
		
	// Получаем текст XML или закрываем файл.
	// В случае записи в файл возвращается пустая строка.
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) 
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;
	
	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);
	
	Если Результат.ТаблицаСообщений.Количество() > 0 Тогда
		
	    // Есть сообщения о ошибках
		Возврат Результат;
	
	КонецЕсли; 
	
	// Все хорошо, проверка прошла успешно
	// Если объеданных большой - пишем XML в файл, иначе в строку
	ИмяФайлаXML = Неопределено;
	ВсегоСтрокВОтчете = ВсегоСтрокПоДекларации;
	
	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();	
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);
		
	КонецЕсли;
	
	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);
	
	Возврат Результат;
		
КонецФункции
 
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела, ЧтоИскать = Неопределено)
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыДекларация 	= ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоДекларацииПоставщики = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоДекларацииПроизведено = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	ВсегоСтрокПоДекларации = Макс(ВсегоСтрокПоДекларацииПоставщики, ВсегоСтрокПоДекларацииПроизведено);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = ВсегоСтрокПоДекларации*4;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
	
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			
			ВывестиНаПечатьДекларация(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиПолеЦеликом(ОбластьМакета, ИмяОбласти, ВыводимоеЗначение);

	ОбластьМакета.Области[ИмяОбласти].Значение = ВыводимоеЗначение;

КонецПроцедуры

Процедура ВывестиВКвадратики(ОбластьМакета, ИмяОбласти, СтрВыводимоеЗначение)
	
	Если Не ПустаяСтрока(СтрВыводимоеЗначение) Тогда
		
		// Вывод либо ИНН КПП страницы, либо ИНН, КПП, Почтовый Индекс, КодРегиона ДопСтрок
		
		// ИмяОбласти для ИНН КПП страницы - ИНН1, КПП1
		// Областьмакета имеет именованные области ИНН1_1, ИНН1_2.. ИНН1_10
		
		// ИмяОбласти для ИНН, КПП, Почтовый Индекс, КодРегиона ДопСтрок - вида П000000000201_3
		// где П000000000201 имя поля, _3 - номер ДопСтроки на печатном листе
		// Областьмакета имеет именованную область П000000000201_2_3
		// где П000000000201 имя поля, _2 - номер символа, _3 - номер ДопСтроки на печатном листе
		
		Если СтрНайти(ИмяОбласти, "_") = 0 Тогда
		    // ИНН1, КПП1
			Если СтрНайти(ИмяОбласти, "ИНН") > 0 или СтрНайти(ИмяОбласти, "КПП") > 0 Тогда
			
				Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
					ОбластьМакета.Области[ИмяОбласти + "_" + Ном].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
				КонецЦикла;	
				
			Иначе
				
				Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
					ОбластьМакета.Области[ИмяОбласти + Ном].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
				КонецЦикла;
			
			КонецЕсли; 
			
			
		Иначе
			
			Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
				ОбластьМакета.Области[Лев(ИмяОбласти, 14) + Ном + "_" + Прав(ИмяОбласти, 1)].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
			КонецЦикла;	
		
		КонецЕсли; 
		
	КонецЕсли;
					
КонецПроцедуры

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Титульный");
		
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	Область_Ограничители = МакетПечати.ПолучитьОбласть("Ограничители");
	
	ИНН = СтрЗначениеПоКлючуСтруктуры("ИНН1", СтруктураДанныхТитульный);
	Если СтрДлина(ИНН) = 10 Тогда	
		ИНН = "00" + ИНН;	
	КонецЕсли; 
	
	КПП = СтрЗначениеПоКлючуСтруктуры("КПП1", СтруктураДанныхТитульный);
		
		
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		
	Область_ОсновнаяЧасть = МакетПечати.ПолучитьОбласть("ОсновнаяЧасть");
			
	// Выводим ИНН, КПП и сведения по лицензии
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "ИНН1", ИНН);
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "КПП1", КПП);
	
	// Вид документа и номер корректировки	
	Если НомерКорректировки > 0 Тогда
	    ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ВидДокументаКорректирующий", "V");
	Иначе	
	    ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ВидДокументаПервичный", "V");
	КонецЕсли;
	
	СтрНомерКорректировки = Формат(НомерКорректировки, "ЧЦ=2; ЧВН=");
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "НомКорр", СтрНомерКорректировки);
	
	// Отчетный Год, хранится уже в виде строки, форматировать не надо. (4 клетки)
	ОтчетныйГод = СтрЗначениеПоКлючуСтруктуры("ОтчетныйГод", СтруктураДанныхТитульный);	
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "ОтчетныйГод", ОтчетныйГод);
	
	// ОргИМНС
	ОрганизацияИМНС = СтрЗначениеПоКлючуСтруктуры("ОргИМНС", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргИМНС", ОрганизацияИМНС);
	
	// ОргНазв
	ОрганизацияНазв = СтрЗначениеПоКлючуСтруктуры("ОргНазв", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргНазв", ОрганизацияНазв);
	
	// Адрес организации
	ПредставлениеАдресаОрганизации = СтруктураДанныхТитульный.ПредставлениеАдресаОрганизации;
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "АдресФактОрг", ПредставлениеАдресаОрганизации);
		
	// Адрес места деятельности организации
	ПредставлениеАдресаМестаДеятельности = СтруктураДанныхТитульный.МестоДеятельности;
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "АдресМестаДеятОрг", ПредставлениеАдресаМестаДеятельности);
		
	// ТелОрганизации
	ТелОрганизации = СтрЗначениеПоКлючуСтруктуры("ТелОрганизации", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ТелОрганизации", ТелОрганизации);
	
	// ЭлектроннаяПочта
	ЭлектроннаяПочта = СтрЗначениеПоКлючуСтруктуры("ЭлектроннаяПочта", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ЭлектроннаяПочта", ЭлектроннаяПочта);
	
		
	// ОргДиректор и подписи.	
	ОргДиректор = СтрЗначениеПоКлючуСтруктуры("ОргДиректор", СтруктураДанныхТитульный);
	
	// Дата подписи  ДатаПодписиРук и ДатаПодписиБух (8 клеток)
	СтрДатаПодписи = Строка(СтруктураДанныхТитульный.ДатаПодписи);		
	СтрДатаПодписи = Лев(СтрЗаменить(СтрДатаПодписи, ".", ""), 8);
	СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);
		
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргДиректор", ОргДиректор);
		
	// ОргБухгалтер только для организаций.
	ОргБухгалтер = СтрЗначениеПоКлючуСтруктуры("ОргБухгалтер", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргБухгалтер", ОргБухгалтер);
	
	// Вывод сформированного листа
	ПечатнаяФорма.Вывести(Область_ОсновнаяЧасть);
	ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
	ПечатнаяФорма.Вывести(Область_Ограничители);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
								
КонецПроцедуры

Функция ЗаполнитьПоВсейОрганизацииДекларация(
				П000010000301, П000010000302, П000010000303,
				П000010000309, П000010000310, П000010000311, 
				П000010000312, П000010000308)

	ТаблицаСтраниц = ТаблицаСтраницыДекларация;
		
	П000010000301 = 0; П000010000302 = 0; П000010000303 = 0;
	П000010000309 = 0; П000010000310 = 0; П000010000311 = 0; 
	П000010000312 = 0; П000010000308 = 0;
	
	Для Каждого Лист Из ТаблицаСтраниц Цикл
		
		ТекП000010000301 = Неопределено; ТекП000010000303 = Неопределено;
		ТекП000010000309 = Неопределено; ТекП000010000310 = Неопределено;
		ТекП000010000311 = Неопределено; ТекП000010000312 = Неопределено;
		ТекП000010000308 = Неопределено;
		
		Лист.Данные[0].Значение.Свойство("П000010000301", ТекП000010000301);
		Лист.Данные[0].Значение.Свойство("П000010000303", ТекП000010000303);
		Лист.Данные[0].Значение.Свойство("П000010000309", ТекП000010000309);
		Лист.Данные[0].Значение.Свойство("П000010000310", ТекП000010000310);
		Лист.Данные[0].Значение.Свойство("П000010000311", ТекП000010000311);
		Лист.Данные[0].Значение.Свойство("П000010000312", ТекП000010000312);
		Лист.Данные[0].Значение.Свойство("П000010000308", ТекП000010000308);
		
		// Площадь.
		ТекП000010000301 = ?(ТекП000010000301 = Неопределено, 0, ТекП000010000301);
		// Собранный объем.
		ТекП000010000303 = ?(ТекП000010000303 = Неопределено, 0, ТекП000010000303);
		
		ТекП000010000309 = ?(ТекП000010000309 = Неопределено, 0, ТекП000010000309);
		ТекП000010000310 = ?(ТекП000010000310 = Неопределено, 0, ТекП000010000310);
		ТекП000010000311 = ?(ТекП000010000311 = Неопределено, 0, ТекП000010000311);
		ТекП000010000312 = ?(ТекП000010000312 = Неопределено, 0, ТекП000010000312);
		ТекП000010000308 = ?(ТекП000010000308 = Неопределено, 0, ТекП000010000308);
		
		П000010000301 = П000010000301 + ТекП000010000301;
		П000010000303 = П000010000303 + ТекП000010000303;
		
		П000010000309 = П000010000309 + ТекП000010000309;
		П000010000310 = П000010000310 + ТекП000010000310;
		П000010000311 = П000010000311 + ТекП000010000311;
		П000010000312 = П000010000312 + ТекП000010000312;
		П000010000308 = П000010000308 + ТекП000010000308;
		
	КонецЦикла;
	
	// Расчет урожайности.
	Если П000010000301 > 0 Тогда	
		П000010000302 = П000010000303 / П000010000301;		
	Иначе
		П000010000302 = 0;
	КонецЕсли;
	
	// Надо отформатировать.
	П000010000301 = Формат(П000010000301, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");	
	П000010000302 = Формат(П000010000302, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000303 = Формат(П000010000303, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	
	П000010000309 = Формат(П000010000309, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000310 = Формат(П000010000310, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000311 = Формат(П000010000311, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000312 = Формат(П000010000312, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	П000010000308 = Формат(П000010000308, "ЧЦ=15; ЧДЦ=5; ЧН=0.00000");
	
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	// Производство.
	
	ТекстЗапросаДекларация = "
	|ВЫБРАТЬ
	|АлкоПрил15Декларация.П000011000313 КАК П000010000313,
	|АлкоПрил15Декларация.П000011000314 КАК П000010000314,
	|
	|СУММА(АлкоПрил15Декларация.П000011000315) КАК П000010000315
	|
	|ИЗ
	|	
	|(ВЫБРАТЬ
	|РегистрСведенийАлкоПрил15Декларация.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил15Производство КАК РегистрСведенийАлкоПрил15Декларация
	|
	|ГДЕ (РегистрСведенийАлкоПрил15Декларация.Документ = &Документ) 
	|И (РегистрСведенийАлкоПрил15Декларация.Активно = Истина)
	|И (РегистрСведенийАлкоПрил15Декларация.ИндексСтраницы В (&МассивИндексовСтраниц))) КАК АлкоПрил15Декларация
	|	
    |СГРУППИРОВАТЬ ПО 
	|АлкоПрил15Декларация.П000011000313, 
	|АлкоПрил15Декларация.П000011000314
	|
	|УПОРЯДОЧИТЬ ПО
	|АлкоПрил15Декларация.П000011000313 ВОЗР
	|";
	
	ЗапросДекларация = Новый Запрос;
	ЗапросДекларация.Текст = ТекстЗапросаДекларация;
		
	ЗапросДекларация.Параметры.Вставить("Документ", ДокОтчета);
	
	СервисРегистровДекларация = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил15Производство"];
	МассивИндексовСтраниц = СервисРегистровДекларация.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	ЗапросДекларация.Параметры.Вставить("МассивИндексовСтраниц", МассивИндексовСтраниц);
	
	РезультатПроизводство = ЗапросДекларация.Выполнить().Выгрузить();
	
	// Поставщики.
	
	ТекстЗапросаДекларация = "
	|ВЫБРАТЬ
	|АлкоПрил15Декларация.П000010000304 КАК П000010000304,
	|АлкоПрил15Декларация.П0000100003042 КАК П0000100003042,
	|АлкоПрил15Декларация.П000010000305 КАК П000010000305,
	|АлкоПрил15Декларация.П000010000306 КАК П000010000306,
	|АлкоПрил15Декларация.ХешИдПоставщика КАК ХешИдПоставщика,
	|
	|СУММА(АлкоПрил15Декларация.П000010000307) КАК П000010000307
	|
	|ИЗ
	|	
	|(ВЫБРАТЬ
	|РегистрСведенийАлкоПрил15Декларация.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил15Поставщики КАК РегистрСведенийАлкоПрил15Декларация
	|
	|ГДЕ (РегистрСведенийАлкоПрил15Декларация.Документ = &Документ) 
	|И (РегистрСведенийАлкоПрил15Декларация.Активно = Истина)
	|И (РегистрСведенийАлкоПрил15Декларация.ИндексСтраницы В (&МассивИндексовСтраниц))) КАК АлкоПрил15Декларация
	|	
    |СГРУППИРОВАТЬ ПО 
	|АлкоПрил15Декларация.П000010000304, 
	|АлкоПрил15Декларация.П0000100003042, 
	|АлкоПрил15Декларация.П000010000305, 
	|АлкоПрил15Декларация.П000010000306,
	|АлкоПрил15Декларация.ХешИдПоставщика
	|
	|УПОРЯДОЧИТЬ ПО
	|АлкоПрил15Декларация.П000010000304 ВОЗР, 
	|АлкоПрил15Декларация.П0000100003042 ВОЗР, 
	|АлкоПрил15Декларация.П000010000305 ВОЗР, 
	|АлкоПрил15Декларация.П000010000306 ВОЗР
	|";
	
	ЗапросДекларация = Новый Запрос;
	ЗапросДекларация.Текст = ТекстЗапросаДекларация;
		
	ЗапросДекларация.Параметры.Вставить("Документ", ДокОтчета);
	
	СервисРегистровДекларация = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил15Поставщики"];
	МассивИндексовСтраниц = СервисРегистровДекларация.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	ЗапросДекларация.Параметры.Вставить("МассивИндексовСтраниц", МассивИндексовСтраниц);
	
	РезультатПоставщики = ЗапросДекларация.Выполнить().Выгрузить();
	
	// Отдельно запрос для определения краткого наименования.
	// Поскольку их могли вбить разные для одного и того же Поставщика,
	// то чтобы не получить из запроса одних и тех же получателей с разными краткими наименованиями,
	// делаем отдельно в связке с Хешем поставщика.
	
	ТекстЗапросаДекларация = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|АлкоПрил15Декларация.П0000100003041 КАК П0000100003041,
	|АлкоПрил15Декларация.ХешИдПоставщика КАК ХешИдПоставщика
	|
	|ИЗ
	|	
	|(ВЫБРАТЬ
	|РегистрСведенийАлкоПрил15Декларация.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил15Поставщики КАК РегистрСведенийАлкоПрил15Декларация
	|
	|ГДЕ (РегистрСведенийАлкоПрил15Декларация.Документ = &Документ) 
	|И (РегистрСведенийАлкоПрил15Декларация.Активно = Истина)
	|И (РегистрСведенийАлкоПрил15Декларация.ИндексСтраницы В (&МассивИндексовСтраниц))) КАК АлкоПрил15Декларация
	|
	|УПОРЯДОЧИТЬ ПО
	|АлкоПрил15Декларация.ХешИдПоставщика ВОЗР,
	|АлкоПрил15Декларация.П0000100003041 УБЫВ
	|";
	
	ЗапросДекларация = Новый Запрос;
	ЗапросДекларация.Текст = ТекстЗапросаДекларация;
		
	ЗапросДекларация.Параметры.Вставить("Документ", ДокОтчета);
	
	СервисРегистровДекларация = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил15Поставщики"];
	МассивИндексовСтраниц = СервисРегистровДекларация.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	ЗапросДекларация.Параметры.Вставить("МассивИндексовСтраниц", МассивИндексовСтраниц);
	
	РезультатКраткиеНаименования = ЗапросДекларация.Выполнить().Выгрузить();
	
	// Проставляем краткие наименования.
	РезультатПоставщики.Колонки.Добавить("П0000100003041");
	Для каждого СтрокаПоставщика Из РезультатПоставщики Цикл
	
		ТекХешПоставщика = СтрокаПоставщика.ХешИдПоставщика;
		
		СтрокаРезультатКраткиеНаименования = РезультатКраткиеНаименования.Найти(ТекХешПоставщика, "ХешИдПоставщика");
		Если НЕ СтрокаРезультатКраткиеНаименования = Неопределено Тогда		
			СтрокаПоставщика.П0000100003041 = СтрокаРезультатКраткиеНаименования.П0000100003041;
		КонецЕсли;
		
	КонецЦикла; 	
	
	// Объединяем две таблицы результата в одну.
	КоличествоТабПроизводство = РезультатПроизводство.Количество();
	КоличествоТабПоставщики = РезультатПоставщики.Количество();
		
	Если КоличествоТабПроизводство >= КоличествоТабПоставщики Тогда
		
	    Результат = РезультатПроизводство;
		ДобавляемаяТаблица = РезультатПоставщики;
		КоличествоСтрокДобавляемойТаблицы = КоличествоТабПоставщики;
		// Добавляем колонки из Поставщиков.
		КолонкиДобавляемойТаблицы = РезультатПоставщики.Колонки;
		 
	Иначе
		
	    Результат = РезультатПоставщики;
		ДобавляемаяТаблица = РезультатПроизводство;
		КоличествоСтрокДобавляемойТаблицы = КоличествоТабПроизводство;
		// Добавляем колонки из Производство.
		КолонкиДобавляемойТаблицы = РезультатПроизводство.Колонки;
		
	КонецЕсли; 
	
	Для каждого Колонка Из КолонкиДобавляемойТаблицы Цикл		
		Результат.Колонки.Добавить(Колонка.Имя);		
	КонецЦикла;
	
	НомерСтроки = 0;
	ИмяНаименованияПоставщика = "П000010000304";
	ИмяКраткоеНаименованиеПоставщика = "П0000100003041";
	ИмяНаименованияОППоставщика = "П0000100003042";
	Для каждого СтрокаРезультата Из Результат Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки <= КоличествоСтрокДобавляемойТаблицы Тогда
		
			Для каждого Колонка Из КолонкиДобавляемойТаблицы Цикл		
				СтрокаРезультата[Колонка.Имя] = ДобавляемаяТаблица[НомерСтроки - 1][Колонка.Имя];		
			КонецЦикла;
				
		КонецЕсли; 
		
		// Проставляем правильное Наименование поставщика.
		ЗначениеГрафы = СтрокаРезультата[ИмяНаименованияПоставщика];
		НаименованиеПоставщика = ЗначениеГрафы;
		
		ЗначениеГрафы = СтрокаРезультата[ИмяКраткоеНаименованиеПоставщика];
		Если ЗначениеЗаполнено(ЗначениеГрафы) Тогда
		
			НаименованиеПоставщика = НаименованиеПоставщика + " (" + ЗначениеГрафы + ")";
		
		КонецЕсли;
					
		ЗначениеГрафы = СтрокаРезультата[ИмяНаименованияОППоставщика];
		Если ЗначениеЗаполнено(ЗначениеГрафы) Тогда
		
			НаименованиеПоставщика = НаименованиеПоставщика + " ОП " + ЗначениеГрафы;
		
		КонецЕсли;
		
		СтрокаРезультата[ИмяНаименованияПоставщика] = НаименованиеПоставщика;
			
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураСобратьДанныеПоОП()
	
	ИдГруппыПроизводство = СтруктураРеквизитовФормы.мИдГруппы22;
	ИдГруппыПоставщики = СтруктураРеквизитовФормы.мИдГруппы12;
	
	// Инициация структуры ОП.				
	ДанныеОП_Декларация = Новый Структура;
	ДанныеДвижений = Новый Структура;
	
	ДанныеРаздела = ТаблицаСтраницыДекларация;
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   =  СокрЛП(ДанныеЛиста.ОбособленноеПодразделение);
		
		Если ДанныеОП = "Заполнить" Тогда
		    ДанныеОП = "";		
		КонецЕсли;
		
		П000010000301 = 0; П000010000303 = 0; П000010000302 = 0;
		ДанныеЛиста.Свойство("П000010000301", П000010000301); // площадь
		ДанныеЛиста.Свойство("П000010000303", П000010000303); // объем
		ДанныеЛиста.Свойство("П000010000302", П000010000302); // урожайность
		
		// Все значения должны быть больше или равно нуля.
		П000010000301 = ?(П000010000301 = Неопределено, 0, П000010000301);
		П000010000303 = ?(П000010000303 = Неопределено, 0, П000010000303);
		П000010000302 = ?(П000010000302 = Неопределено, 0, П000010000302);
		
		П000010000308 = 0; П000010000309 = 0; П000010000310 = 0; 
		П000010000311 = 0; П000010000312 = 0;
		
		ДанныеЛиста.Свойство("П000010000308", П000010000308); // всего
		ДанныеЛиста.Свойство("П000010000309", П000010000309); // виноматериалов
		ДанныеЛиста.Свойство("П000010000310", П000010000310); // с защищенным геоуказанием
		ДанныеЛиста.Свойство("П000010000311", П000010000311); // с защищенным наименованием
		ДанныеЛиста.Свойство("П000010000312", П000010000312); // дистилляты
			
		П000010000308 = ?(П000010000308 = Неопределено, 0, П000010000308);
		П000010000309 = ?(П000010000309 = Неопределено, 0, П000010000309);
		П000010000310 = ?(П000010000310 = Неопределено, 0, П000010000310);
		П000010000311 = ?(П000010000311 = Неопределено, 0, П000010000311);
		П000010000312 = ?(П000010000312 = Неопределено, 0, П000010000312);
		
		СведенияОбОП = Неопределено;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП);
			
		ИдОП = ИдентификаторОП(СведенияОбОП);
		
		// Собираем данные по одному и тому же ОП в одну структуру.
		Если НЕ ДанныеОП_Декларация.Свойство(ИдОП) Тогда
		
			ДанныеОП_Декларация.Вставить(ИдОП, Новый Структура);
			КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
		    ДанныеОП_Декларация[ИдОП].Вставить("ОП", КопияСведенияОбОП);
			ДанныеОП_Декларация[ИдОП].Вставить("Представление", ДанныеОП);
			ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", 0);
			ДанныеОП_Декларация[ИдОП].Вставить("СведОрг", Новый Структура);
			
		КонецЕсли; 
				
		ДанныеОП_Декларация[ИдОП].СведОрг.Вставить("Х"+ НомерЛистаСтроковый, Новый Структура);
						
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
		
		ДанныеПоЛисту.Вставить("НомерЛистаДекларация", НомерЛиста);				
						
		ДанныеПоЛисту.Вставить("П000010000301", П000010000301);
		ДанныеПоЛисту.Вставить("П000010000302", П000010000302);
		ДанныеПоЛисту.Вставить("П000010000303", П000010000303);
		ДанныеПоЛисту.Вставить("П000010000308", П000010000308);
		ДанныеПоЛисту.Вставить("П000010000309", П000010000309);
		ДанныеПоЛисту.Вставить("П000010000310", П000010000310);
		ДанныеПоЛисту.Вставить("П000010000311", П000010000311);
		ДанныеПоЛисту.Вставить("П000010000312", П000010000312);
		
		ДанныеПоЛисту.Вставить("ДанныеПроизводство", Новый Структура);
		ДанныеПоЛисту.Вставить("ДанныеПоставщиков", Новый Структура);	
		
		ЗаполнитьДанныеПроизводство(ИдГруппыПроизводство, НомерЛиста, ИдОП);		
		ЗаполнитьДанныеПоставщиков(ИдГруппыПоставщики, НомерЛиста, ИдОП);
									
	КонецЦикла;
	
	Возврат ДанныеОП_Декларация;
	
КонецФункции

Процедура ЗаполнитьДанныеПроизводство(ИдГруппы, НомерЛиста, ИдОП)

	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
		
	ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
	ДанныеДвиженийПоОП = ДанныеПоЛисту.ДанныеПроизводство;
	ДанныеПоЛисту.Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	НомерДвижения = 0;
	
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 3000
	|	РегистрСведенийАлкоПрил15Декларация.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил15Декларация
	|ГДЕ
	|	РегистрСведенийАлкоПрил15Декларация.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил15Декларация.Активно = Истина
	|	И РегистрСведенийАлкоПрил15Декларация.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяКодпродукции  = ПрефиксИмени + "13";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
			
			НомерДвижения = НомерДвижения + 1;
			
			ИмяГрафыКодВидаПродукции = ПрефиксИмени + "13";
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяГрафыКодВидаПродукции]);
			ИмяГрафыКодВидаПродукции = "П000010000313";
			
			ИмяГрафыВидПродукции = ПрефиксИмени + "14";
			ВидПродукции = СокрЛП(СтрокаДекларации[ИмяГрафыВидПродукции]);
			ИмяГрафыВидПродукции = "П000010000314";
			
			ИмяГрафыКоличество = ПрефиксИмени + "15";
			Количество = СокрЛП(СтрокаДекларации[ИмяГрафыКоличество]);
			ИмяГрафыКоличество = "П000010000315";
					
			ДанныеДвиженийПоОП.Вставить("Х"+НомерДвижения, Новый Структура);
			
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяГрафыКодВидаПродукции, КодВидаПродукции);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяГрафыВидПродукции, ВидПродукции);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяГрафыКоличество, Количество);
			
		КонецЦикла;
					
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоставщиков(ИдГруппы, НомерЛиста, ИдОП)

	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
		
	ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП].СведОрг["Х"+ НомерЛистаСтроковый];
	ДанныеДвиженийПоОП = ДанныеПоЛисту.ДанныеПоставщиков;
	ДанныеПоЛисту.Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	НомерДвижения = 0;
		
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 3000
	|	РегистрСведенийАлкоПрил15Декларация.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил15Декларация
	|ГДЕ
	|	РегистрСведенийАлкоПрил15Декларация.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил15Декларация.Активно = Истина
	|	И РегистрСведенийАлкоПрил15Декларация.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяНаименованияПоставщика  = ПрефиксИмени + "04";
	ИмяКраткоеНаименованиеПоставщика  = ПрефиксИмени + "041";
	ИмяНаименованияОППоставщика  = ПрефиксИмени + "042";
	ИмяИННПоставщика = ПрефиксИмени + "05";
	ИмяКПППоставщика = ПрефиксИмени + "06";
	ИмяКоличество    = ПрефиксИмени + "07";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "041"])
						  ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "042"])
						  ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
						  ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
			
			НомерДвижения = НомерДвижения + 1;
			
			// Наименование обособленного подразделения получателя.			
			ЗначениеГрафы = СтрокаДекларации[ИмяНаименованияПоставщика];
			НаименованиеПоставщика = ЗначениеГрафы;
			
			ЗначениеГрафы = СтрокаДекларации[ИмяКраткоеНаименованиеПоставщика];
			Если ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			
				НаименованиеПоставщика = НаименованиеПоставщика + " (" + ЗначениеГрафы + ")";
			
			КонецЕсли;
						
			ЗначениеГрафы = СтрокаДекларации[ИмяНаименованияОППоставщика];
			Если ЗначениеЗаполнено(ЗначениеГрафы) Тогда
			
				НаименованиеПоставщика = НаименованиеПоставщика + " ОП " + ЗначениеГрафы;
			
			КонецЕсли; 
			
			ИННПоставщика = СокрЛП(СтрокаДекларации[ИмяИННПоставщика]);
									
			КПППоставщика = СокрЛП(СтрокаДекларации[ИмяКПППоставщика]);
					
			ДанныеДвиженийПоОП.Вставить("Х"+НомерДвижения, Новый Структура);
			
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяНаименованияПоставщика, НаименованиеПоставщика);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяИННПоставщика, ИННПоставщика);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяКПППоставщика, КПППоставщика);
			ДанныеДвиженийПоОП["Х"+НомерДвижения].Вставить(ИмяКоличество, СтрокаДекларации[ИмяКоличество]);
			
		КонецЦикла;
					
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Декларация");
	
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
	ПечатнаяФорма.ОтображатьСетку     	= Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
	ПечатнаяФорма.Автомасштаб         	= Истина;
	ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Ландшафт;
	ПечатнаяФорма.ПолеСверху			= 20;
	ПечатнаяФорма.ПолеСнизу				= 5;
	ПечатнаяФорма.ПолеСлева				= 5;
	ПечатнаяФорма.ПолеСправа			= 5;
	
	
	ВысотаСтраницыВСтроках 					= 72;
	ОсталосьСтрок = ВысотаСтраницыВСтроках;
	
	Высота_ЗаголовокЛистаВСтроках 			= 4;
	Высота_ПустаяСтрокаВСтроках 			= 1;
	Высота_ЗаголовокТаблицыВСтроках 		= 12;
	Высота_ЗаголовокПоОрганизацииВСтроках 	= 1;
	Высота_СтрокаОПВСтроках 				= 2;
	Высота_ПодвалВСтроках 					= 7;
	
	ПомещаетсяВСтрокуПереносимую1 			= 35;
	ПомещаетсяВСтрокуПереносимую2 			= 35;
	ИмяПоляПереносимойСтроки1				= "П000010000304";
	ИмяПоляПереносимойСтроки2				= "П000010000314";
	
	Область_ЗаголовокЛиста = МакетПечати.ПолучитьОбласть("ЗаголовокЛиста");
	ПечатнаяФорма.Вывести(Область_ЗаголовокЛиста);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокЛистаВСтроках;
	
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
		
	Область_ЗаголовокТаблицы = МакетПечати.ПолучитьОбласть("ЗаголовокТаблицы");
	ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
	
	Область_ЗаголовокПоОрганизации = МакетПечати.ПолучитьОбласть("ЗаголовокПоОрганизации");
	ПечатнаяФорма.Вывести(Область_ЗаголовокПоОрганизации);
	
	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокПоОрганизацииВСтроках;
	
	П000010000301 = 0; П000010000302 = 0; П000010000303 = 0;
	П000010000309 = 0; П000010000310 = 0; П000010000311 = 0; 
	П000010000312 = 0; П000010000308 = 0;
	ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизацииДекларация(
				П000010000301, П000010000302, П000010000303,
				П000010000309, П000010000310, П000010000311, 
				П000010000312, П000010000308);
	
	ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();
	
	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
				
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонкиМакета = Колонка.Имя;
			
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда				 
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонкиМакета];
			КонецЕсли;
		КонецЦикла;
		
		// В первой строке сводные данные по площади и объему с урожайностью.
		Если НомерСтроки = 1 Тогда
			
		    Область_Строка.Области.П000010000301.Значение = П000010000301;
			Область_Строка.Области.П000010000302.Значение = П000010000302;
		    Область_Строка.Области.П000010000303.Значение = П000010000303;
			
			Область_Строка.Области.П000010000309.Значение = П000010000309;
			Область_Строка.Области.П000010000310.Значение = П000010000310;
		    Область_Строка.Области.П000010000311.Значение = П000010000311;
			Область_Строка.Области.П000010000312.Значение = П000010000312;
			Область_Строка.Области.П000010000308.Значение = П000010000308;
			
		КонецЕсли;
		
		Область_Строка.Области.П000010000300.Значение = НомерСтроки;
		
		ПечатнаяФорма.Вывести(Область_Строка);
		
		СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
		КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
									+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
		КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
		
		СтрокаПереносимая2 = Область_Строка.Области[ИмяПоляПереносимойСтроки2].Значение;
		КолСтрокВСтрокеПереносимой2 = Цел(СтрДлина(СтрокаПереносимая2)/ПомещаетсяВСтрокуПереносимую2)
									+ ?(СтрДлина(СтрокаПереносимая2)%ПомещаетсяВСтрокуПереносимую2 > 0, 1, 0);
		КолСтрокВСтрокеПереносимой2 = ?(КолСтрокВСтрокеПереносимой2 = 0, 1, КолСтрокВСтрокеПереносимой2);
		
		КолСтрокВСтрокеПереносимой = Макс(КолСтрокВСтрокеПереносимой1, КолСтрокВСтрокеПереносимой2);
		ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой;
						
		Если ОсталосьСтрок < 3 Тогда
		    // переходим на новый лист
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
			
			ПечатнаяФорма = Новый ТабличныйДокумент();
			ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
			ПечатнаяФорма.ОтображатьСетку     	= Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
			ПечатнаяФорма.Автомасштаб         	= Истина;
			ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Ландшафт;
			ПечатнаяФорма.ПолеСверху			= 20;
			ПечатнаяФорма.ПолеСнизу				= 5;
			ПечатнаяФорма.ПолеСлева				= 5;
			ПечатнаяФорма.ПолеСправа			= 5;
	
			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
					
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 1000 = 0) Тогда
		
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если НомерСтроки = 1 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
		Область_Строка.Области["П000010000300"].Значение = НомерСтроки;
		
		Область_Строка.Области.П000010000301.Значение = П000010000301;
		Область_Строка.Области.П000010000302.Значение = П000010000302;
	    Область_Строка.Области.П000010000303.Значение = П000010000303;
		
		Область_Строка.Области.П000010000309.Значение = П000010000309;
		Область_Строка.Области.П000010000310.Значение = П000010000310;
	    Область_Строка.Области.П000010000311.Значение = П000010000311;
		Область_Строка.Области.П000010000312.Значение = П000010000312;
		Область_Строка.Области.П000010000308.Значение = П000010000308;
			
		ПечатнаяФорма.Вывести(Область_Строка);
	    
		ОсталосьСтрок = ОсталосьСтрок - 1;
					
	КонецЕсли;
	
	////////////////////////////////
	// Печать по ОП.
	////////////////////////////////
	
	Высота_СтрокаОПВСтроках = 4;
	
	// Нужно собрать информацию по ОП с разных листов.
	ДанныеОП_Декларация = СтруктураСобратьДанныеПоОП();
	
	ВсегоЛистов = ДанныеОП_Декларация.Количество();
	ТекЛист = 0;
	Для Каждого Лист Из ДанныеОП_Декларация Цикл
		
		ТекЛист = ТекЛист + 1;
		
		Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках + 5) Тогда
		    // переходим на новый лист, если места меньше чем на заголовок ОП и строку
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
			
			ПечатнаяФорма = Новый ТабличныйДокумент();
			ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
			ПечатнаяФорма.ОтображатьСетку     	= Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
			ПечатнаяФорма.Автомасштаб         	= Истина;
			ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Ландшафт;
			ПечатнаяФорма.ПолеСверху			= 20;
			ПечатнаяФорма.ПолеСнизу				= 5;
			ПечатнаяФорма.ПолеСлева				= 5;
			ПечатнаяФорма.ПолеСправа			= 5;

			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// выводим заголовок таблицы
			ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
						
		КонецЕсли;
		
		Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;
						
		Область_СтрокаОП = МакетПечати.ПолучитьОбласть("СтрокаОП");
		СтрокаОбособленноеПодразделение = Лист.Значение.Представление;
		 
		
		Область_СтрокаОП.Области.ОП.Значение = СтрокаОбособленноеПодразделение;
		ПечатнаяФорма.Вывести(Область_СтрокаОП);
		
		КолСтрокДанных = 0;
		Для каждого ПодЛист Из Лист.Значение.СведОрг Цикл
		
			ДанныеПоЛисту = ПодЛист.Значение;
			
			ДанныеПроизводство = ДанныеПоЛисту.ДанныеПроизводство;
			ДанныеПоставщиков  = ДанныеПоЛисту.ДанныеПоставщиков;
			
			КолСтрокПроизводство = ДанныеПроизводство.Количество();
			КолСтрокПоставщики   = ДанныеПоставщиков.Количество();
			КолСтрокПоПодлисту = Макс(КолСтрокПроизводство, КолСтрокПоставщики);
			// Минимум одна строка - первая.
			КолСтрокДанных = КолСтрокДанных + ?(КолСтрокПоПодлисту > 0, КолСтрокПоПодлисту, 1);
					
		КонецЦикла;
		
		ОбработаноСтрок = ОбработаноСтрок + КолСтрокДанных;
	
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
		ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;
				
		ТекНомерСтрокиДанных = 1;
				
		Для каждого ПодЛист Из Лист.Значение.СведОрг Цикл
		
			ДанныеПоЛисту = ПодЛист.Значение;
			
			П000010000301 = ДанныеПоЛисту.П000010000301;
			П000010000302 = ДанныеПоЛисту.П000010000302;
			П000010000303 = ДанныеПоЛисту.П000010000303;
			
			П000010000308 = ДанныеПоЛисту.П000010000308;
			П000010000309 = ДанныеПоЛисту.П000010000309;
			П000010000310 = ДанныеПоЛисту.П000010000310;
			П000010000311 = ДанныеПоЛисту.П000010000311;
			П000010000312 = ДанныеПоЛисту.П000010000312;
			
			ДанныеПроизводство = ДанныеПоЛисту.ДанныеПроизводство;
			ДанныеПоставщиков  = ДанныеПоЛисту.ДанныеПоставщиков;
			
			КолСтрокПроизводство = ДанныеПроизводство.Количество();
			КолСтрокПоставщики   = ДанныеПоставщиков.Количество();
			
			Если КолСтрокПроизводство >= КолСтрокПоставщики Тогда
				
				ДанныеДвижений = ДанныеПроизводство;
				ВспомогательныеДанныеДвижений = ДанныеПоставщиков;
				КолСтрокВспомогательных = КолСтрокПоставщики;
				
			Иначе
				
				ДанныеДвижений = ДанныеПоставщиков;
				ВспомогательныеДанныеДвижений = ДанныеПроизводство;
				КолСтрокВспомогательных = КолСтрокПроизводство;
				
			КонецЕсли; 
			
			ТекНомерПоПодлисту = 0;
			Для Каждого СтрокаДанных Из ДанныеДвижений Цикл
				
				ТекНомерПоПодлисту = ТекНомерПоПодлисту + 1;
				
				Если ОсталосьСтрок < 3 Тогда
				    // переходим на новый лист
					СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
				
					ПечатнаяФорма = Новый ТабличныйДокумент();
					ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
					ПечатнаяФорма.ОтображатьСетку     	= Ложь;
					ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
					ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
					ПечатнаяФорма.Автомасштаб         	= Истина;
					ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Ландшафт;
					ПечатнаяФорма.ПолеСверху			= 20;
					ПечатнаяФорма.ПолеСнизу				= 5;
					ПечатнаяФорма.ПолеСлева				= 5;
					ПечатнаяФорма.ПолеСправа			= 5;

					ОсталосьСтрок = ВысотаСтраницыВСтроках;
					// выводим заголовок таблицы
					ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
					ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
					
				КонецЕсли;
				
				Если ТекЛист = ВсегоЛистов Тогда
				    // последний лист
					ОсталосьВывести = КолСтрокДанных - ТекНомерСтрокиДанных;
					Если (ОсталосьСтрок < (3 + Высота_ПодвалВСтроках)) 
						и (ОсталосьВывести < 5) и (ТекНомерСтрокиДанных <> 1) Тогда
						
						// переходим на новый лист, чтобы подвал напечатался нормально
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
				
						ПечатнаяФорма = Новый ТабличныйДокумент();
						ПечатнаяФорма.ОтображатьЗаголовки 	= Ложь;
						ПечатнаяФорма.ОтображатьСетку     	= Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  	= Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    	= Истина;
						ПечатнаяФорма.Автомасштаб         	= Истина;
						ПечатнаяФорма.ОриентацияСтраницы  	= ОриентацияСтраницы.Ландшафт;
						ПечатнаяФорма.ПолеСверху			= 20;
						ПечатнаяФорма.ПолеСнизу				= 5;
						ПечатнаяФорма.ПолеСлева				= 5;
						ПечатнаяФорма.ПолеСправа			= 5;

						ОсталосьСтрок = ВысотаСтраницыВСтроках;
						// выводим заголовок таблицы
						ПечатнаяФорма.Вывести(Область_ЗаголовокТаблицы);			
						ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;
						
					КонецЕсли; 
								
				КонецЕсли;
										
				Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
							
				Для Каждого Элемент Из СтрокаДанных.Значение Цикл
					ИмяКолонкиМакета = Элемент.Ключ;
				
					Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда						 
						Область_Строка.Области[ИмяКолонкиМакета].Значение = Элемент.Значение;
					КонецЕсли;
				КонецЦикла;
				
				// Заполняем данные из второй таблицы.
				Если ТекНомерПоПодлисту <= КолСтрокВспомогательных Тогда
					
					СтрокаВспомогательныхДанных = ВспомогательныеДанныеДвижений["Х"+ТекНомерПоПодлисту];
					
					Для Каждого Элемент Из СтрокаВспомогательныхДанных Цикл
						ИмяКолонкиМакета = Элемент.Ключ;
					
						Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда						 
							Область_Строка.Области[ИмяКолонкиМакета].Значение = Элемент.Значение;
						КонецЕсли;
					КонецЦикла;
				    				
				КонецЕсли; 
				
				// В первой строке сводные данные по площади и объему с урожайностью.
				Если ТекНомерПоПодлисту = 1 Тогда
					
				    Область_Строка.Области.П000010000301.Значение = П000010000301;
					Область_Строка.Области.П000010000302.Значение = П000010000302;
				    Область_Строка.Области.П000010000303.Значение = П000010000303;
									
					Область_Строка.Области.П000010000309.Значение = П000010000309;
					Область_Строка.Области.П000010000310.Значение = П000010000310;
				    Область_Строка.Области.П000010000311.Значение = П000010000311;
					Область_Строка.Области.П000010000312.Значение = П000010000312;
					Область_Строка.Области.П000010000308.Значение = П000010000308;
				
				КонецЕсли;
				
				Область_Строка.Области.П000010000300.Значение = ТекНомерСтрокиДанных;
				
				ПечатнаяФорма.Вывести(Область_Строка);
				
				СтрокаПереносимая1 = Область_Строка.Области[ИмяПоляПереносимойСтроки1].Значение;
				КолСтрокВСтрокеПереносимой1 = Цел(СтрДлина(СтрокаПереносимая1)/ПомещаетсяВСтрокуПереносимую1)
											+ ?(СтрДлина(СтрокаПереносимая1)%ПомещаетсяВСтрокуПереносимую1 > 0, 1, 0);
				КолСтрокВСтрокеПереносимой1 = ?(КолСтрокВСтрокеПереносимой1 = 0, 1, КолСтрокВСтрокеПереносимой1);
				
				СтрокаПереносимая2 = Область_Строка.Области[ИмяПоляПереносимойСтроки2].Значение;
				КолСтрокВСтрокеПереносимой2 = Цел(СтрДлина(СтрокаПереносимая2)/ПомещаетсяВСтрокуПереносимую2)
											+ ?(СтрДлина(СтрокаПереносимая2)%ПомещаетсяВСтрокуПереносимую2 > 0, 1, 0);
				КолСтрокВСтрокеПереносимой2 = ?(КолСтрокВСтрокеПереносимой2 = 0, 1, КолСтрокВСтрокеПереносимой2);
				
				КолСтрокВСтрокеПереносимой = Макс(КолСтрокВСтрокеПереносимой1, КолСтрокВСтрокеПереносимой2);
				ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой;
				
				ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;
								
				ОбработаноСтрок = ОбработаноСтрок + 1;
			
				Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 1000 = 0) Тогда
				
					РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
						"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
					
				КонецЕсли;
			    
			КонецЦикла;
			
			Если НужноОбработатьСтрок > 0 Тогда
				
				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
					"Печать раздела Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
					
			КонецЕсли;
			
			Если ТекНомерПоПодлисту = 0 Тогда
				
				Сумма = П000010000301 + П000010000302 + П000010000303 + П000010000308 
						+ П000010000309 + П000010000310 + П000010000311 + П000010000312;
						
				// Если что то заполнено - выведем.
			    Если Сумма > 0 Тогда
				    					
				    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
					Область_Строка.Области["П000010000300"].Значение = ТекНомерСтрокиДанных;
					
				    Область_Строка.Области.П000010000301.Значение = П000010000301;
					Область_Строка.Области.П000010000302.Значение = П000010000302;
				    Область_Строка.Области.П000010000303.Значение = П000010000303;
									
					Область_Строка.Области.П000010000309.Значение = П000010000309;
					Область_Строка.Области.П000010000310.Значение = П000010000310;
				    Область_Строка.Области.П000010000311.Значение = П000010000311;
					Область_Строка.Области.П000010000312.Значение = П000010000312;
					Область_Строка.Области.П000010000308.Значение = П000010000308;
					
					ПечатнаяФорма.Вывести(Область_Строка);
					
					ОсталосьСтрок = ОсталосьСтрок - 1;
					
					ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;
					
		 		КонецЕсли; 
				
			
			КонецЕсли; 
			
		КонецЦикла;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ТекНомерСтрокиДанных = 1 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаТаблицы");
			Область_Строка.Области["П000010000300"].Значение = ТекНомерСтрокиДанных;
			
			ПечатнаяФорма.Вывести(Область_Строка);
		    
			ОсталосьСтрок = ОсталосьСтрок - 1;
					
		КонецЕсли;
			
	КонецЦикла;
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
		
	Область_Подвал.Области.ОргДиректор.Значение = СтруктураДанныхТитульный.ОргДиректор;
	Область_Подвал.Области.ОргБухгалтер.Значение = СтруктураДанныхТитульный.ОргБухгалтер;
	
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016Кв2";
	НоваяФорма.ОписаниеОтчета     = "Приложение N 15 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей, об объеме собранного винограда и использованного для производства винодельческой продукции винограда (Утверждено ПП РФ от 13.05.2016 г. № 411).";
	НоваяФорма.РедакцияФормы	  = "от 13.05.2016 г. № 411.";
	НоваяФорма.ДатаНачалоДействия = '20150101';
	НоваяФорма.ДатаКонецДействия  = '20151231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016Кв4";
	НоваяФорма.ОписаниеОтчета     = "Приложение N 14 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей, об объеме собранного винограда и использованного для производства винодельческой продукции винограда (Утверждено ПП РФ от 13.05.2016 г. № 411).";
	НоваяФорма.РедакцияФормы	  = "от 27.10.2016 г. № 472.";
	НоваяФорма.ДатаНачалоДействия = '20160101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
		
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти






 

#КонецЕсли
